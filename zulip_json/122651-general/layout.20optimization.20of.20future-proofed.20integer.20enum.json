[
    {
        "content": "<p>I wanted to make an enum that was known values and a \"catch all\" variant for the future ones, but couldn't find any trick to do it without requiring space for the discriminant:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(rustc_attrs)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![feature(arbitrary_enum_discriminant)]</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[repr(u8)]</span><span class=\"w\"></span>\n<span class=\"k\">enum</span> <span class=\"nc\">Thing</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[rustc_layout_scalar_valid_range_start(3)]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Other</span><span class=\"p\">(</span><span class=\"kt\">u8</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// Other(Other),</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[repr(transparent)]</span><span class=\"w\"></span>\n<span class=\"cp\">#[rustc_layout_scalar_valid_range_start(3)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Other</span><span class=\"p\">(</span><span class=\"kt\">u8</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">dbg</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">Other</span><span class=\"o\">&gt;</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">dbg</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">Thing</span><span class=\"o\">&gt;</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 213973449,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1603224762
    },
    {
        "content": "<p>I don't think that's possible today.  The lowering code for <code>match</code> can only use <code>switchInt</code> on specific values, not ranges of things.</p>",
        "id": 213983461,
        "sender_full_name": "scottmcm",
        "timestamp": 1603230397
    },
    {
        "content": "<p>(This feels like a case that might always be better done with <code>#[repr(transparent)] struct Thing(u8);</code> and some associated <code>const</code>s.)</p>",
        "id": 213983653,
        "sender_full_name": "scottmcm",
        "timestamp": 1603230503
    },
    {
        "content": "<p>Thatâ€™s actually what prompted my question ;-) <a href=\"https://github.com/google/flatbuffers/pull/6098\">https://github.com/google/flatbuffers/pull/6098</a></p>",
        "id": 213988601,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1603233762
    },
    {
        "content": "<blockquote>\n<p>might always be better done with</p>\n</blockquote>\n<p>Why always?</p>",
        "id": 213988789,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1603233904
    },
    {
        "content": "<p>&lt;personal opinion not wearing my lang hat&gt; The more things <em>depend</em> on more-complicated layout optimizations (rather than them just being convenient) the more I think they should instead be using different (might not exist yet) language features.  Maybe custom patterns, for example. &lt;/&gt;</p>",
        "id": 213998655,
        "sender_full_name": "scottmcm",
        "timestamp": 1603243030
    },
    {
        "content": "<p>(Aside: That PR really confused my since it said it was replacing an enum with a <em>unit</em> struct.  But it's actually a <em>newtype</em> struct, which makes sense.)</p>",
        "id": 213998762,
        "sender_full_name": "scottmcm",
        "timestamp": 1603243182
    },
    {
        "content": "<p>I guess another other reason in this case is that it'd still be a breaking change to add <code>D</code> in the layout-optimization version, because <code>4</code> would no longer be part of <code>Other</code>, and thus all the matches would need to be updated.  And if future-proofing is needed because something might start adding more values, then it seems like it'd be good for adding those values to the enum to not be a breaking change.</p>",
        "id": 213998904,
        "sender_full_name": "scottmcm",
        "timestamp": 1603243349
    },
    {
        "content": "<p>Interestingly, with the integer range stuff, you might actually be able to do <code>macro_rules! other { () =&gt; { Thing(4..=255) }</code> if you really wanted...</p>",
        "id": 213998932,
        "sender_full_name": "scottmcm",
        "timestamp": 1603243422
    },
    {
        "content": "<p>Yup, it works:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[derive(PartialEq, Eq)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Thing</span><span class=\"p\">(</span><span class=\"kt\">u8</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Thing</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">A</span>: <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">B</span>: <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"n\">macro_rules</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">Thing_Other</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">Thing</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">..=</span><span class=\"mi\">255</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">Thing</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">static</span> <span class=\"kt\">str</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Thing</span>::<span class=\"n\">A</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"s\">\"A\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Thing</span>::<span class=\"n\">B</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"s\">\"B\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Thing_Other</span><span class=\"o\">!</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"s\">\"(other)\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=70876e63659157a90cb63a4a70920a56\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=70876e63659157a90cb63a4a70920a56</a></p>",
        "id": 213999078,
        "sender_full_name": "scottmcm",
        "timestamp": 1603243589
    },
    {
        "content": "<p>Now you just need to support associated macros:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Thing</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">A</span>: <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">B</span>: <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">macro_rules</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">Other</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">Thing</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">..=</span><span class=\"mi\">255</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p><code>Thing::Other! =&gt; ...</code></p>",
        "id": 214046488,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1603285621
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/122651-general/topic/layout.20optimization.20of.20future-proofed.20integer.20enum/near/213998904\">said</a>:</p>\n<blockquote>\n<p>I guess another other reason in this case is that it'd still be a breaking change to add <code>D</code> in the layout-optimization version, because <code>4</code> would no longer be part of <code>Other</code>, and thus all the matches would need to be updated.  And if future-proofing is needed because something might start adding more values, then it seems like it'd be good for adding those values to the enum to not be a breaking change.</p>\n</blockquote>\n<p>Two types of future-proofing, I suppose. I was focusing on the code being able to read unknown values from a file, e.g. the file format being newer than the library. I'd assume you'd mark the enum as non-exhaustive to force matches, but then you'd kind of want the <code>Other</code> to be the non-exhaustive target...</p>",
        "id": 214048895,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1603286837
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[repr(transparent)]</span><span class=\"w\"></span>\n<span class=\"cp\">#[rustc_layout_scalar_valid_range_start(3)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Other</span><span class=\"p\">(</span><span class=\"kt\">u8</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>This actually seems like a safety problem, no? There's nothing to stop me from creating <code>Other(0)</code> that violates the layout.</p>",
        "id": 214075918,
        "sender_full_name": "cuviper",
        "timestamp": 1603297367
    },
    {
        "content": "<p>yeah, it might make sense to make field accesses for <code>layout_scalar_valid_range</code> structs unsafe</p>",
        "id": 214076077,
        "sender_full_name": "lcnr",
        "timestamp": 1603297439
    },
    {
        "content": "<p>but considering that this is only an internal implementation detail and not available on stable I would expect that no one cared enough to implement that</p>",
        "id": 214076198,
        "sender_full_name": "lcnr",
        "timestamp": 1603297476
    },
    {
        "content": "<p>is there any tracking issue for that attribute, or is it permanently internal?</p>",
        "id": 214076379,
        "sender_full_name": "cuviper",
        "timestamp": 1603297546
    },
    {
        "content": "<p>I guess it's under the broad <code>#![feature(rustc_attrs)]</code></p>",
        "id": 214076569,
        "sender_full_name": "cuviper",
        "timestamp": 1603297616
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/122651-general/topic/layout.20optimization.20of.20future-proofed.20integer.20enum/near/214076077\">said</a>:</p>\n<blockquote>\n<p>yeah, it might make sense to make field accesses for <code>layout_scalar_valid_range</code> structs unsafe</p>\n</blockquote>\n<p>It is already actually:</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0133]: initializing type with `rustc_layout_scalar_valid_range` attr is unsafe and requires unsafe function or block\n --&gt; src/lib.rs:7:5\n  |\n7 |     Other(0);\n  |     ^^^^^^^^ initializing type with `rustc_layout_scalar_valid_range` attr\n  |\n  = note: initializing a layout restricted type&#39;s field with a value outside the valid range is undefined behavior\n</code></pre></div>",
        "id": 214077607,
        "sender_full_name": "bjorn3",
        "timestamp": 1603298040
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"138448\">cuviper</span> <a href=\"#narrow/stream/122651-general/topic/layout.20optimization.20of.20future-proofed.20integer.20enum/near/214076569\">said</a>:</p>\n<blockquote>\n<p>I guess it's under the broad <code>#![feature(rustc_attrs)]</code></p>\n</blockquote>\n<div class=\"codehilite\"><pre><span></span><code>error[E0658]: the `#[rustc_layout_scalar_valid_range_start]` attribute is just used to enable niche optimizations in libcore and will never be stable\n --&gt; src/lib.rs:2:1\n  |\n2 | #[rustc_layout_scalar_valid_range_start(3)]\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |\n  = help: add `#![feature(rustc_attrs)]` to the crate attributes to enable\n</code></pre></div>",
        "id": 214077693,
        "sender_full_name": "bjorn3",
        "timestamp": 1603298068
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/122651-general/topic/layout.20optimization.20of.20future-proofed.20integer.20enum/near/214077607\">said</a>:</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0133]: initializing type with `rustc_layout_scalar_valid_range` attr is unsafe and requires unsafe function or block\n</code></pre></div>\n\n\n<p><span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span>  well then, that's what I get for not actually trying it...</p>",
        "id": 214078410,
        "sender_full_name": "cuviper",
        "timestamp": 1603298416
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/122651-general/topic/layout.20optimization.20of.20future-proofed.20integer.20enum/near/214076077\">said</a>:</p>\n<blockquote>\n<p>yeah, it might make sense to make field accesses for <code>layout_scalar_valid_range</code> structs unsafe</p>\n</blockquote>\n<p>True, and same for taking <code>&amp;mut</code> of such a field. Oli and me took care of that a year ago or so. :)</p>",
        "id": 214417785,
        "sender_full_name": "RalfJ",
        "timestamp": 1603531815
    }
]