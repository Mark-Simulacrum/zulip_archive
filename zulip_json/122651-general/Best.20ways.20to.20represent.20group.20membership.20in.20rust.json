[
    {
        "content": "<p>Dear all,<br>\nI would like to represent the concept of a class of students in rust. Say I have a struct Student and a struct Class. Each class should be able to tell you which students belong to it and vise versa each student should be able to tell you which class it belongs to. I am relatively new to rust, so any advice on how to go about this would be highly appreciated. I am thinking that lifetimes can make this a demanding task for a novice rustacean, but a very satisfying one for someone more experienced?</p>",
        "id": 228408120,
        "sender_full_name": "Oliver E. Anderson",
        "timestamp": 1614691416
    },
    {
        "content": "<p>You could possibly introduce an intermediate structure like <code>School</code> which will keep this information?</p>",
        "id": 228410282,
        "sender_full_name": "kev",
        "timestamp": 1614692367
    },
    {
        "content": "<p>Try to treat it like a relational database: put the students and classes in <code>Vec</code>s, give them identifiers and use those to make associations</p>",
        "id": 228410431,
        "sender_full_name": "Laurențiu",
        "timestamp": 1614692424
    },
    {
        "content": "<p>If the Students and Classes are storing the associations, then if a class is removed, I think you'd need to find all students in that class and remove the class from the students _list_?</p>",
        "id": 228411110,
        "sender_full_name": "kev",
        "timestamp": 1614692683
    },
    {
        "content": "<p>To me, it seems it is better to store the many to many relationship in a separate structure. I have not done database based things in Rust, so I might be off the mark here</p>",
        "id": 228411223,
        "sender_full_name": "kev",
        "timestamp": 1614692731
    },
    {
        "content": "<p>A friend of mine suggested using HashSet's. Could that maybe work? <a href=\"https://doc.rust-lang.org/std/collections/struct.HashSet.html\">https://doc.rust-lang.org/std/collections/struct.HashSet.html</a></p>",
        "id": 228411260,
        "sender_full_name": "Oliver E. Anderson",
        "timestamp": 1614692752
    },
    {
        "content": "<p>Something like this was what I was thinking</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[derive(Copy, Clone)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Student</span><span class=\"p\">(</span><span class=\"kt\">u32</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[derive(Copy, Clone)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Class</span><span class=\"p\">(</span><span class=\"kt\">u32</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">School</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">students</span><span class=\"w\"> </span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">Student</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">classes</span><span class=\"w\"> </span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">Class</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// add hashmap to associations</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">School</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">add_student</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Student</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">student_number</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">students</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">student</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Student</span><span class=\"p\">(</span><span class=\"n\">student_number</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">students</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">student</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">student</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">add_class</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Class</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"sd\">/// Same as student</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">add_student_to_class</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">student_id</span><span class=\"w\"> </span>: <span class=\"nc\">Student</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">class_id</span><span class=\"w\"> </span>: <span class=\"nc\">Class</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"c1\">// Add to HashMap or however you store associations</span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 228411734,
        "sender_full_name": "kev",
        "timestamp": 1614692918
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"390743\">Oliver E. Anderson</span> <a href=\"#narrow/stream/122651-general/topic/Best.20ways.20to.20represent.20group.20membership.20in.20rust/near/228411260\">said</a>:</p>\n<blockquote>\n<p>A friend of mine suggested using HashSet's. Could that maybe work? <a href=\"https://doc.rust-lang.org/std/collections/struct.HashSet.html\">https://doc.rust-lang.org/std/collections/struct.HashSet.html</a></p>\n</blockquote>\n<p>Yeah I think you can use a HashSet instead of a vector, since you don't want to add the same student twice. It should not be likely, but bugs can happen</p>",
        "id": 228411971,
        "sender_full_name": "kev",
        "timestamp": 1614693028
    },
    {
        "content": "<p>More importantly, you will need a hashset or similar data structure if you want to be able to remove students and/or use identifiers that don't match insertion order</p>",
        "id": 228413791,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614693738
    },
    {
        "content": "<blockquote>\n<p>More importantly, you will need a hashset or similar data structure if you want to be able to remove students and/or use identifiers that don't match insertion order</p>\n</blockquote>\n<p>Hm? HashSet is totally unordered. Vec is better if you care about ordering, just insertion is O(n). Removal has the same tradeoffs — order-preserving O(n) or unordered swap_remove in O(1).</p>\n<p>You could use BTreeSet if you're willing to implement an Ord for students, but if you need access to external data (say: their name) it might be a pain.</p>",
        "id": 228428846,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1614699018
    },
    {
        "content": "<p>There are crates for insertion-ordered sets</p>",
        "id": 228468724,
        "sender_full_name": "The 8472",
        "timestamp": 1614712713
    },
    {
        "content": "<p>If the <code>School</code> has enough <code>Student</code>s per <code>Class</code> for <code>HashSet</code> to beat <code>Vec</code>, then the <code>School</code> is in a lot of trouble <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 228564447,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1614765458
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"209168\">Thom Chiovoloni</span> <a href=\"#narrow/stream/122651-general/topic/Best.20ways.20to.20represent.20group.20membership.20in.20rust/near/228428846\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>More importantly, you will need a hashset or similar data structure if you want to be able to remove students and/or use identifiers that don't match insertion order</p>\n</blockquote>\n<p>Hm? HashSet is totally unordered. Vec is better if you care about ordering, just insertion is O(n). Removal has the same tradeoffs — order-preserving O(n) or unordered swap_remove in O(1).</p>\n</blockquote>\n<p>I said you should use HashSet if you <em>aren't</em> using insertion order. For example, if the IDs are already given, for example because they are primary keys in an external database, then you would use a HashSet to hash the keys, and you don't get any ordering. If you don't care to control the identity of the IDs, you can use Vec if you don't need deletion and Slab if you do. (If the data set is small enough, Vec is probably the best choice regardless of whether you need deletion, as <span class=\"user-mention silent\" data-user-id=\"232018\">Daniel Henry-Mantilla</span> says.)</p>",
        "id": 228566976,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614766553
    },
    {
        "content": "<p>How does HashSet.replace compare to Vec.insert in terms of  performance?</p>",
        "id": 228571474,
        "sender_full_name": "Oliver E. Anderson",
        "timestamp": 1614768298
    }
]