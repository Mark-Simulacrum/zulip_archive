[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"440090\">Darrow O'Lykos [Rust Philly]</span> has marked this topic as resolved.</p>",
        "id": 276935687,
        "sender_full_name": "Notification Bot",
        "timestamp": 1648504191
    },
    {
        "content": "<p>So, the following snippet works on <code>nightly</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(trait_upcasting)]</span><span class=\"w\"></span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span>::<span class=\"n\">core</span>::<span class=\"n\">any</span>::<span class=\"p\">{</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Any</span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">MyAnyWithTypeName</span><span class=\"w\"> </span>: <span class=\"nc\">Any</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">type_name</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"bp\">self</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">_</span> <span class=\"nc\">Self</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">      </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">static</span> <span class=\"kt\">str</span>\n    <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"w\"> </span>: <span class=\"nc\">Any</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">MyAnyWithTypeName</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"n\">any</span>::<span class=\"n\">type_name</span>::<span class=\"o\">&lt;</span><span class=\"bp\">Self</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">check</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">p</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">dyn</span><span class=\"w\"> </span><span class=\"n\">MyAnyWithTypeName</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">eprintln!</span><span class=\"p\">(</span><span class=\"s\">\"About to downcast something of type `{}`\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">type_name</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">dbg!</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">Any</span><span class=\"o\">&gt;</span>::<span class=\"n\">is</span>::<span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">check</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">check</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"mi\">42</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<ul>\n<li><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2021&amp;gist=d74d395f98eae254fb9946a61ed37746\">Playground</a></li>\n</ul>\n<p>before that, you indeed required a special dance with a virtual method that would perform the upcasting from <code>dyn MyAnyâ€¦</code> to <code>dyn Any</code> for you.</p>",
        "id": 276984369,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1648549449
    }
]