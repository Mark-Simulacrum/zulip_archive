[
    {
        "content": "<p>When compiling a simple crate with LTO enabled, std doesn't get passed to the linker</p>",
        "id": 156532568,
        "sender_full_name": "Jethro",
        "timestamp": 1548073210
    },
    {
        "content": "<p>this seems weird to me?</p>",
        "id": 156532571,
        "sender_full_name": "Jethro",
        "timestamp": 1548073222
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>$ cargo new ltotest --bin\n     Created binary (application) `ltotest` package\n$ cd ltotest/\n$ cargo rustc --release -- -C lto -Z print-link-args\n   Compiling ltotest v0.1.0 (/tmp/ltotest)\n&quot;cc&quot; &quot;-Wl,--as-needed&quot; &quot;-Wl,-z,noexecstack&quot; &quot;-m64&quot; &quot;-L&quot; &quot;~/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib&quot; &quot;/tmp/ltotest/target/release/deps/ltotest-d6435de1c5152f8c.ltotest.ept6w7lf-cgu.0.rcgu.o&quot; &quot;-o&quot; &quot;/tmp/ltotest/target/release/deps/ltotest-d6435de1c5152f8c&quot; &quot;-Wl,--gc-sections&quot; &quot;-pie&quot; &quot;-Wl,-zrelro&quot; &quot;-Wl,-znow&quot; &quot;-Wl,-O1&quot; &quot;-nodefaultlibs&quot; &quot;-L&quot; &quot;/tmp/ltotest/target/release/deps&quot; &quot;-L&quot; &quot;~/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib&quot; &quot;-Wl,--start-group&quot; &quot;-Wl,-Bstatic&quot; &quot;/tmp/rustcSoNfzg/libbacktrace_sys-6741d64f34191261.rlib&quot; &quot;-Wl,--end-group&quot; &quot;~/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib/libcompiler_builtins-c8174d577f7ebb97.rlib&quot; &quot;-Wl,-Bdynamic&quot; &quot;-ldl&quot; &quot;-lrt&quot; &quot;-lpthread&quot; &quot;-lgcc_s&quot; &quot;-lc&quot; &quot;-lm&quot; &quot;-lrt&quot; &quot;-lpthread&quot; &quot;-lutil&quot; &quot;-lutil&quot;\n    Finished release [optimized] target(s) in 1.83s\n</pre></div>",
        "id": 156532590,
        "sender_full_name": "Jethro",
        "timestamp": 1548073258
    },
    {
        "content": "<p>this is a problem for my custom target where I expect std to always be linked explicitly (so that certain global symbols are available for linking)</p>",
        "id": 156532621,
        "sender_full_name": "Jethro",
        "timestamp": 1548073311
    },
    {
        "content": "<p>is this <a href=\"https://github.com/rust-lang/rust/issues/37077\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/37077\">https://github.com/rust-lang/rust/issues/37077</a> ?</p>",
        "id": 156536531,
        "sender_full_name": "Jethro",
        "timestamp": 1548077702
    },
    {
        "content": "<p>hmm maybe this is a difference between extern \"C\" and extern \"Rust\"</p>",
        "id": 156537067,
        "sender_full_name": "Jethro",
        "timestamp": 1548078297
    },
    {
        "content": "<p>if you do <code>-C lto</code> then <code>rustc</code> will do all the LTO work and only pass and already merged object file to the linker.</p>",
        "id": 156842235,
        "sender_full_name": "mw",
        "timestamp": 1548411164
    }
]