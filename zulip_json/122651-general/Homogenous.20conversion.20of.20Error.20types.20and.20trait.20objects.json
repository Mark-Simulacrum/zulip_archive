[
    {
        "content": "<p><a href=\"#narrow/stream/122651-general/topic/.26Box.3Cdyn.20Error.3E.20can't.20be.20.26dyn.20Error\" title=\"#narrow/stream/122651-general/topic/.26Box.3Cdyn.20Error.3E.20can't.20be.20.26dyn.20Error\">previously...</a></p>\n<p>I have a procedural macro that wants to implement <code>Error</code> for an enum containing different types of underlying source errors (<a href=\"https://docs.rs/snafu/0.3.0/snafu/\" target=\"_blank\" title=\"https://docs.rs/snafu/0.3.0/snafu/\">SNAFU</a>). I keep running into a problem with the differences of trait objects and concrete objects when converting them to a reference trait object:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">enum</span> <span class=\"nc\">Error</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">TraitObjectSendSync</span><span class=\"p\">(</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">dyn</span><span class=\"w\"> </span><span class=\"n\">error</span>::<span class=\"n\">Error</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Sync</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">&#39;static</span><span class=\"o\">&gt;</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">TraitObjectSend</span><span class=\"p\">(</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">dyn</span><span class=\"w\"> </span><span class=\"n\">error</span>::<span class=\"n\">Error</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">&#39;static</span><span class=\"o\">&gt;</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">TraitObjectSync</span><span class=\"p\">(</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">dyn</span><span class=\"w\"> </span><span class=\"n\">error</span>::<span class=\"n\">Error</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Sync</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">&#39;static</span><span class=\"o\">&gt;</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">TraitObject</span><span class=\"p\">(</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">dyn</span><span class=\"w\"> </span><span class=\"n\">error</span>::<span class=\"n\">Error</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">&#39;static</span><span class=\"o\">&gt;</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Boxed</span><span class=\"p\">(</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">io</span>::<span class=\"n\">Error</span><span class=\"o\">&gt;</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Unboxed</span><span class=\"p\">(</span><span class=\"n\">io</span>::<span class=\"n\">Error</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">source</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;&amp;</span><span class=\"p\">(</span><span class=\"n\">dyn</span><span class=\"w\"> </span><span class=\"n\">error</span>::<span class=\"n\">Error</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">&#39;static</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">Error</span>::<span class=\"o\">*</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"c1\">// Works, but the match arms are heterogeneous and cannot be</span>\n<span class=\"w\">        </span><span class=\"c1\">// automatically determined / generated via a procedural macro</span>\n<span class=\"w\">        </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"bp\">self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">TraitObjectSendSync</span><span class=\"p\">(</span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"o\">&amp;**</span><span class=\"n\">e</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">TraitObjectSend</span><span class=\"p\">(</span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"o\">&amp;**</span><span class=\"n\">e</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">TraitObjectSync</span><span class=\"p\">(</span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"o\">&amp;**</span><span class=\"n\">e</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">TraitObject</span><span class=\"p\">(</span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"o\">&amp;**</span><span class=\"n\">e</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">Boxed</span><span class=\"p\">(</span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">Unboxed</span><span class=\"p\">(</span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>The <a href=\"https://play.integer32.com/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=28a8ffd874c8b4f1e546fd0d068bc1d3\" target=\"_blank\" title=\"https://play.integer32.com/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=28a8ffd874c8b4f1e546fd0d068bc1d3\">playground</a> has various attempts I've made: </p>\n<ul>\n<li><code>=&gt; e</code></li>\n<li><code>=&gt; e as &amp;(dyn error::Error + 'static)</code></li>\n<li><code>Borrow::borrow(e)</code></li>\n<li><code>Deref::deref(e)</code></li>\n<li><code>AsRef::as_ref(e)</code></li>\n</ul>\n<p>None work. Is there <strong>any</strong> way I can have this work without requiring users to annotate if something is a trait object?</p>",
        "id": 165339079,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1557497536
    },
    {
        "content": "<p>In 2018 I guess maybe looking for <code>dyn Foo</code> in the type?</p>",
        "id": 165339569,
        "sender_full_name": "simulacrum",
        "timestamp": 1557497908
    },
    {
        "content": "<p>as a heuristic, anyway</p>",
        "id": 165339575,
        "sender_full_name": "simulacrum",
        "timestamp": 1557497915
    },
    {
        "content": "<p>I'd be pretty sad about a heuristic :-(</p>",
        "id": 165340111,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1557498299
    },
    {
        "content": "<p>I wonder why <code>&amp;*e</code> does not work</p>\n<div class=\"codehilite\"><pre><span></span>error[E0277]: the size for values of type `(dyn std::error::Error + &#39;static)` cannot be known at compilation time\n</pre></div>\n\n\n<p>why does it even get that as an rvalue?</p>",
        "id": 165340243,
        "sender_full_name": "RalfJ",
        "timestamp": 1557498403
    },
    {
        "content": "<p>oh, probably because it uses some <code>impl&lt;T&gt; Error for Box&lt;T&gt; where T: Error</code></p>",
        "id": 165340279,
        "sender_full_name": "RalfJ",
        "timestamp": 1557498433
    },
    {
        "content": "<p>I believe that's in the right area, <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span></p>",
        "id": 165340298,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1557498456
    },
    {
        "content": "<p>is that impl a thing? can we make it <code>T: ?Sized</code>?</p>",
        "id": 165340300,
        "sender_full_name": "RalfJ",
        "timestamp": 1557498457
    },
    {
        "content": "<p>(<a href=\"#narrow/stream/122651-general/topic/.26Box.3Cdyn.20Error.3E.20can't.20be.20.26dyn.20Error\" title=\"#narrow/stream/122651-general/topic/.26Box.3Cdyn.20Error.3E.20can't.20be.20.26dyn.20Error\">You had that idea already ;-)</a>)</p>",
        "id": 165340379,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1557498496
    },
    {
        "content": "<p><em>lol</em></p>",
        "id": 165340395,
        "sender_full_name": "RalfJ",
        "timestamp": 1557498509
    },
    {
        "content": "<p>at least I am consistent :P</p>",
        "id": 165340402,
        "sender_full_name": "RalfJ",
        "timestamp": 1557498513
    },
    {
        "content": "<p>that wouldnt give you the trait object you want (no need to carry that extra <code>Box</code> around), but I guess if its only for errors anyway the extra ptr indirection is not so bad</p>",
        "id": 165340432,
        "sender_full_name": "RalfJ",
        "timestamp": 1557498544
    },
    {
        "content": "<p>I feel like I want \"deref a value until you get to a trait and then take a reference\". That kind of structure always leads to either auto-traits or specialization, which isn't a good road for stable stuff.</p>",
        "id": 165341465,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1557499222
    },
    {
        "content": "<p>The wonderful <span class=\"user-mention\" data-user-id=\"125254\">@kennytm</span> <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=538fbae7dde34d32b71d4d6a7e15d74a\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=538fbae7dde34d32b71d4d6a7e15d74a\">solved it for me with a custom trait</a> and relying on method auto-deref.</p>",
        "id": 165355817,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1557510216
    },
    {
        "content": "<p>nice!</p>",
        "id": 165356461,
        "sender_full_name": "RalfJ",
        "timestamp": 1557510725
    },
    {
        "content": "<p>still might want to add that <code>T: ?Sized</code> to whatever impl doesnt have it, though^^</p>",
        "id": 165356478,
        "sender_full_name": "RalfJ",
        "timestamp": 1557510741
    },
    {
        "content": "<p>reported as <a href=\"https://github.com/rust-lang/rust/issues/60759\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/60759\">https://github.com/rust-lang/rust/issues/60759</a> (I couldnt find an existing report)</p>",
        "id": 165467889,
        "sender_full_name": "RalfJ",
        "timestamp": 1557672853
    },
    {
        "content": "<p>Thank you! I just tried to add the implementation, saw there were errors, and said \"oh, I guess it can't exist\"</p>",
        "id": 165492028,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1557713259
    }
]