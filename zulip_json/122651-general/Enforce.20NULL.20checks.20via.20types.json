[
    {
        "content": "<p>Is there currently a way to enforce NULL checks on pointers via types without opting into provenance?<br>\ni.e.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"n\">buf_ptr</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">buf_len</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">out32</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">assert!</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">out32</span><span class=\"p\">.</span><span class=\"n\">is_null</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">assert!</span><span class=\"p\">(</span><span class=\"n\">buf_len</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">buf_ptr</span><span class=\"p\">.</span><span class=\"n\">is_null</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">buf</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">buf_len</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">).</span><span class=\"n\">then</span><span class=\"p\">(</span><span class=\"n\">core</span>::<span class=\"n\">slice</span>::<span class=\"n\">from_raw_parts</span><span class=\"p\">(</span><span class=\"n\">buf_ptr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">buf_len</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// Do stuff</span>\n<span class=\"w\">    </span><span class=\"n\">out32</span><span class=\"p\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">ret_val</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Instead I'd like to do something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"n\">buf_ptr</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">buf_len</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">out32</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">buf</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">buf_len</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">).</span><span class=\"n\">then</span><span class=\"p\">(</span><span class=\"n\">core</span>::<span class=\"n\">slice</span>::<span class=\"n\">from_raw_parts</span><span class=\"p\">(</span><span class=\"n\">buf_ptr</span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">buf_len</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// Do stuff</span>\n<span class=\"w\">    </span><span class=\"n\">out32</span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">().</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">ret_val</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>That way I don't need to write all the asserts and make sure they match the required logic (some pointers are optional etc.)</p>\n<p>but currently, this isn't ffi safe as it's 2 words, and <code>Option&lt;&amp;u8&gt;</code> makes this function UB, and <code>Option&lt;NonNull&lt;u8&gt;&gt;</code> loses the const/mut annotations and makes everything mut :(</p>",
        "id": 277897900,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1649173085
    },
    {
        "content": "<p>Well, normally I'd just say to use <code>Option&lt;NonNull&gt;</code> and just document that you expect to only read the pointer in your function</p>",
        "id": 277899432,
        "sender_full_name": "Lokathor",
        "timestamp": 1649173594
    },
    {
        "content": "<p>Any unsafe function like this should always have docs about the safety rules, and all callers are expected to read those docs.</p>",
        "id": 277899593,
        "sender_full_name": "Lokathor",
        "timestamp": 1649173658
    },
    {
        "content": "<p>AIUI <code>*mut</code> vs. <code>*const</code> pointers make no difference on the compiler side, what matters is what the pointer was derived from and by convention &amp;mut -&gt; *mut</p>",
        "id": 277903314,
        "sender_full_name": "The 8472",
        "timestamp": 1649174940
    },
    {
        "content": "<p>It makes a difference for the headers generated by cbindgen, I'd prefer if the C header has the correct constness to allow for warnings if the user does something wrong</p>",
        "id": 278008479,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1649243936
    },
    {
        "content": "<p>Ah, yeah, and to be fair I wouldn't normally use option&lt;nn&gt; at all, it has terrible ergonomics to the point where it's almost a code smell to see it.</p>",
        "id": 278046965,
        "sender_full_name": "Lokathor",
        "timestamp": 1649261152
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"249222\">Elichai Turkel</span> <a href=\"#narrow/stream/122651-general/topic/Enforce.20NULL.20checks.20via.20types/near/278008479\">said</a>:</p>\n<p>That's why we should have <a href=\"https://docs.rs/safer-ffi/0.0.7/safer_ffi/ptr/index.html\"><code>ptr::NonNull{Ref,Mut,Owned}</code></a>, imho.</p>",
        "id": 278175965,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1649343321
    },
    {
        "content": "<p>Once we're doing that, it might also want to be <code>ptr::Aligned*</code>, like is being discussed in <a href=\"https://github.com/rust-lang/rfcs/pull/3204\">https://github.com/rust-lang/rfcs/pull/3204</a></p>",
        "id": 278200272,
        "sender_full_name": "scottmcm",
        "timestamp": 1649353181
    },
    {
        "content": "<p>Those also sound like more ergonomics nightmares :/</p>",
        "id": 278213234,
        "sender_full_name": "Lokathor",
        "timestamp": 1649358972
    }
]