[
    {
        "content": "<p>Ever since I started using Rust, there's been this issue of bad error messages when a type doesn't implement a trait, but there are blanket impls for that trait which don't apply. This is documented in <a href=\"#22590\" title=\"#22590\">issue #22590</a>. You can see <a href=\"https://github.com/rust-lang/rust/issues/22590#issuecomment-454233522\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/22590#issuecomment-454233522\">my latest comment on the issue</a> for an example, but I'll describe it here too:</p>\n<p>Let's say there is a failing trait bound: <code>T: Foo</code>. If there are no blanket impls of <code>Foo</code>, the error message is <code>the trait bound `T: Foo` is not satisfied</code>. This is OK. It's maybe not the best error message ever, but it's not horrible.</p>\n<p>But if there exists a blanket impl of <code>Foo</code> for <code>T</code> that has certain restrictions, let's say <code>T: Bar</code>. Then the error message will be <code>the trait bound `T: Bar` is not satisfied</code>, even the the real problem is that <code>T</code> does not implement <code>Foo</code>. This gets even more confusing if the blanket impl has a requirement like <code>T: 'static</code>, or an implicit <code>T: Sized</code>.</p>\n<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  you suggested a better way to report these errors - starting with the \"top-level\" thing that failed. In this case it would be <code>T: Foo</code>, or perhaps the function call that the <code>T: Foo</code> obligation came from. Do you have any ideas about how that could be implemented?</p>",
        "id": 155137843,
        "sender_full_name": "mikeyhew",
        "timestamp": 1547517512
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> you may not have gotten a notification when I posted this</p>",
        "id": 156720929,
        "sender_full_name": "mikeyhew",
        "timestamp": 1548274394
    }
]