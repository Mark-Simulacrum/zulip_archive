[
    {
        "content": "<p>I have some simple code where vectorization works for <code>for i in 0..a.len() { let x = a[i] }</code> but not for <code>for x in a</code> (<a href=\"https://godbolt.org/z/Y8boc71oT\">https://godbolt.org/z/Y8boc71oT</a>). Is there some difference between these two or is this just some weakness in the optimizer?</p>",
        "id": 259801635,
        "sender_full_name": "Falk HÃ¼ffner",
        "timestamp": 1635705441
    },
    {
        "content": "<p><code>for x in a</code> desugars into something like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">iter</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">into_iter</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"k\">while</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iter</span><span class=\"p\">.</span><span class=\"n\">next</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cm\">/* ... */</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>so it doesn't use indexing. That could be preventing LLVM from optimizing it.</p>",
        "id": 259801721,
        "sender_full_name": "Noah Lev",
        "timestamp": 1635705569
    },
    {
        "content": "<p>if you iterate by</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">    </span><span class=\"c1\">// &lt;--</span>\n<span class=\"w\">        </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>then LLVM will use SIMD.</p>",
        "id": 259801870,
        "sender_full_name": "kennytm",
        "timestamp": 1635705738
    },
    {
        "content": "<p>so the issue is the optimizer cannot handle <code>array::IntoIter</code>.</p>",
        "id": 259801894,
        "sender_full_name": "kennytm",
        "timestamp": 1635705794
    },
    {
        "content": "<p>it also works if you do <code>a.into_iter().for_each(|x| ...)</code></p>",
        "id": 259801983,
        "sender_full_name": "The 8472",
        "timestamp": 1635705925
    },
    {
        "content": "<p>sadly that does some extra memcpy when using array::IntoIter instead of the slice iter. not sure why that's not optimized out.</p>",
        "id": 259802132,
        "sender_full_name": "The 8472",
        "timestamp": 1635706152
    },
    {
        "content": "<p>in that particular case <code>a.iter().sum()</code> would be more idiomatic anyway</p>",
        "id": 259802196,
        "sender_full_name": "The 8472",
        "timestamp": 1635706254
    },
    {
        "content": "<p><code>ManuallyDrop</code> and <code>MaybeUninit</code> aren't as invisible as we'd like -- your mention of extra <code>memcpy</code> makes me think &lt;<a href=\"https://github.com/rust-lang/rust/issues/79914\">https://github.com/rust-lang/rust/issues/79914</a>&gt; -- so that might have something to do with it.</p>\n<p>I also don't know if <code>array::IntoIter</code> has all the special marker traits that the slice ones do.  That might be worth checking.</p>",
        "id": 259816068,
        "sender_full_name": "scottmcm",
        "timestamp": 1635725570
    },
    {
        "content": "<p>marker traits aren't used in the for loop desugaring</p>",
        "id": 259816290,
        "sender_full_name": "The 8472",
        "timestamp": 1635725903
    },
    {
        "content": "<p>Right, good point.</p>",
        "id": 259817056,
        "sender_full_name": "scottmcm",
        "timestamp": 1635727101
    }
]