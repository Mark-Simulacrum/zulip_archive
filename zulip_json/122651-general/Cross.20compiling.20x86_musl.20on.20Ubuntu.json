[
    {
        "content": "<p>Hey all. I'm trying to cross compile to <code>x86_64-unknown-linux-musl</code> on Ubuntu. I've installed the musl toolchain from <a href=\"https://musl.libc.org/\">here</a> and followed the instructions to install. Installation seems to have worked as I have relevant headers and shared libraries in <code>/user/local/musl</code>. </p>\n<p>When I tried to compile a little hello-world example with <code> RUSTFLAGS=\"-C target-feature=-crt-static\" cargo +nightly build --release --target=x86_64-unknown-linux-musl</code> I get an error saying that <code>undefined reference to '__libc_csu_fini'</code>. This seems to be because it's still trying to use the glibc dynamic linker for my program. I'm trying to override it with adding <code>-C link-arg=-Wl,-dynamic-linker=/lib/x86_64-linux-musl/libc.so</code> but that doesn't seem to have any effect. Any ideas what the issue could be?</p>",
        "id": 229478961,
        "sender_full_name": "rylev",
        "timestamp": 1615297755
    },
    {
        "content": "<p>Here's a link to the call to <code>cc</code> that fails: <a href=\"https://gist.github.com/rylev/177b3e53fa1f3452be125860ca099ad9\">https://gist.github.com/rylev/177b3e53fa1f3452be125860ca099ad9</a></p>",
        "id": 229481653,
        "sender_full_name": "rylev",
        "timestamp": 1615298830
    },
    {
        "content": "<p>You want <code>-Clinker</code></p>",
        "id": 229482189,
        "sender_full_name": "nagisa",
        "timestamp": 1615299066
    },
    {
        "content": "<p>Instead of <code>-C</code>? Do I keep <code>link-arg</code> then?</p>",
        "id": 229482310,
        "sender_full_name": "rylev",
        "timestamp": 1615299111
    },
    {
        "content": "<p>No, I mean you want to tell rustc what linker to use via <code>-Clinker</code>, you don't need the <code>-Clink-args</code> at all.</p>",
        "id": 229482422,
        "sender_full_name": "nagisa",
        "timestamp": 1615299141
    },
    {
        "content": "<p>There's a way to set the target specific linkers in cargo config, let me find you the reference.</p>",
        "id": 229482452,
        "sender_full_name": "nagisa",
        "timestamp": 1615299159
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/cargo/reference/config.html#target\">https://doc.rust-lang.org/cargo/reference/config.html#target</a> is a good example.</p>",
        "id": 229482513,
        "sender_full_name": "nagisa",
        "timestamp": 1615299184
    },
    {
        "content": "<p>But I'm fine with using the system linker, I just need to change the dynamic linker (aka dynamic loader).</p>",
        "id": 229482555,
        "sender_full_name": "rylev",
        "timestamp": 1615299196
    },
    {
        "content": "<p><code>ld</code> should be able to do what I need it to</p>",
        "id": 229482614,
        "sender_full_name": "rylev",
        "timestamp": 1615299211
    },
    {
        "content": "<p>the <code>cc</code> will presume --target==--build though.</p>",
        "id": 229482664,
        "sender_full_name": "nagisa",
        "timestamp": 1615299233
    },
    {
        "content": "<p>when you installed the toolchain it should've added something like <code>x86_64-musl-gcc</code> to your path.</p>",
        "id": 229482779,
        "sender_full_name": "nagisa",
        "timestamp": 1615299263
    },
    {
        "content": "<p>Using target-specific gcc as a linker _should_ also correctly set the correct loader transparently.</p>",
        "id": 229482950,
        "sender_full_name": "nagisa",
        "timestamp": 1615299333
    },
    {
        "content": "<p>Ok that works! Thank you!</p>",
        "id": 229483322,
        "sender_full_name": "rylev",
        "timestamp": 1615299462
    },
    {
        "content": "<p>The underlying issue is really not at all related to the loader, for what it's worth. Its more like <code>cc</code> adding in the glibc C runtime initialization objects. The way gcc toolchains work I believe make this kind of baked into <code>gcc</code> at compile time.</p>",
        "id": 229483562,
        "sender_full_name": "nagisa",
        "timestamp": 1615299562
    },
    {
        "content": "<p>Looks like the binary still dynamically links against libgcc_s.so.1. I need to turn that off now</p>",
        "id": 229486076,
        "sender_full_name": "rylev",
        "timestamp": 1615300504
    },
    {
        "content": "<p>I think it might be used as an unwinding implementation?</p>",
        "id": 229488095,
        "sender_full_name": "nagisa",
        "timestamp": 1615301286
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224872\">@rylev</span> I'm curious, why do you want <code>-crt-static</code>?</p>",
        "id": 229492766,
        "sender_full_name": "Eric Huss",
        "timestamp": 1615303066
    },
    {
        "content": "<p>I don’t want to statically link the musl runtime. I’m running in an environment with a musl c runtime I can dynamically link to</p>",
        "id": 229494078,
        "sender_full_name": "rylev",
        "timestamp": 1615303575
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/122651-general/topic/Cross.20compiling.20x86_musl.20on.20Ubuntu/near/229488095\">said</a>:</p>\n<blockquote>\n<p>I think it might be used as an unwinding implementation?</p>\n</blockquote>\n<p>Yea unwinding symbols are what it can't relocate</p>",
        "id": 229495062,
        "sender_full_name": "rylev",
        "timestamp": 1615303952
    },
    {
        "content": "<p>I was hoping that I could statically link lib gcc but <code>-C link-args=-static-libgcc</code> does not seem to work</p>",
        "id": 229495465,
        "sender_full_name": "rylev",
        "timestamp": 1615304122
    },
    {
        "content": "<p>And if I set <code>panic=abort</code> there are still some unwind symbols...</p>",
        "id": 229495812,
        "sender_full_name": "rylev",
        "timestamp": 1615304254
    },
    {
        "content": "<p>Is there a reason unwind symbols are still present on <code>panic=abort</code>?</p>",
        "id": 229496152,
        "sender_full_name": "rylev",
        "timestamp": 1615304375
    },
    {
        "content": "<p>Is it the std lib who is bringing in those symbols?</p>",
        "id": 229496308,
        "sender_full_name": "rylev",
        "timestamp": 1615304425
    },
    {
        "content": "<p>unwinding is still needed for backtraces</p>",
        "id": 229502993,
        "sender_full_name": "Eric Huss",
        "timestamp": 1615306383
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span> any idea what I might be able to do as an alternative here? My environment does not have libgcc. Does that mean I can't use std?</p>",
        "id": 229503160,
        "sender_full_name": "rylev",
        "timestamp": 1615306441
    },
    {
        "content": "<p>(this seems to work when compiling on Alpine Linux, so I'm inclined to think there is a way to not rely on a dynamic libgcc)</p>",
        "id": 229503393,
        "sender_full_name": "rylev",
        "timestamp": 1615306487
    },
    {
        "content": "<p>Can you use Docker?</p>",
        "id": 229504174,
        "sender_full_name": "Laurențiu",
        "timestamp": 1615306679
    },
    {
        "content": "<p>My understanding is that with dynamic musl, you have to install the libgcc package.  Sorry, I'm not deeply familiar with this stuff.</p>",
        "id": 229504242,
        "sender_full_name": "Eric Huss",
        "timestamp": 1615306690
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"203546\">Laurențiu Nicola</span> <a href=\"#narrow/stream/122651-general/topic/Cross.20compiling.20x86_musl.20on.20Ubuntu/near/229504174\">said</a>:</p>\n<blockquote>\n<p>Can you use Docker?</p>\n</blockquote>\n<p>Yes, I was just trying to see what it would take to not require using Docker</p>",
        "id": 229504393,
        "sender_full_name": "rylev",
        "timestamp": 1615306753
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120518\">Eric Huss</span> <a href=\"#narrow/stream/122651-general/topic/Cross.20compiling.20x86_musl.20on.20Ubuntu/near/229504242\">said</a>:</p>\n<blockquote>\n<p>My understanding is that with dynamic musl, you have to install the libgcc package.  Sorry, I'm not deeply familiar with this stuff.</p>\n</blockquote>\n<p>Hmm statically linking libgcc would be fine, but I can't figure out a way to get that to work.</p>",
        "id": 229504487,
        "sender_full_name": "rylev",
        "timestamp": 1615306795
    },
    {
        "content": "<p>I asked the same thing in <a href=\"#narrow/stream/131828-t-compiler/topic/Dynamic.20CRT.20on.20musl\">https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/Dynamic.20CRT.20on.20musl</a></p>",
        "id": 229504690,
        "sender_full_name": "Laurențiu",
        "timestamp": 1615306853
    },
    {
        "content": "<p>We ended up using Docker. YMMV.</p>",
        "id": 229504712,
        "sender_full_name": "Laurențiu",
        "timestamp": 1615306859
    },
    {
        "content": "<p>You can also give that <a href=\"https://github.com/richfelker/musl-cross-make\">https://github.com/richfelker/musl-cross-make</a> a try</p>",
        "id": 229505079,
        "sender_full_name": "Laurențiu",
        "timestamp": 1615306968
    },
    {
        "content": "<p>Looks like there's already an issue for this: <a href=\"https://github.com/rust-lang/rust/issues/82521\">https://github.com/rust-lang/rust/issues/82521</a></p>",
        "id": 229678381,
        "sender_full_name": "rylev",
        "timestamp": 1615389467
    }
]