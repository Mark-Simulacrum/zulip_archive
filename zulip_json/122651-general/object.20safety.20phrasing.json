[
    {
        "content": "<p>Is it accurate to say that the fundamental reason that a given trait cannot be made into an object is because it's not possible to construct / select the vtable at that point in time?</p>",
        "id": 164338599,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1556375925
    },
    {
        "content": "<p>There's also the unsized aspect, which I know is being worked on via unsized rvalues, so I'm ignoring that when i state \"fundamental\"</p>",
        "id": 164338635,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1556376000
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>  ^--- would \"type erasure safe\"  have been a better phrasing?</p>",
        "id": 164340712,
        "sender_full_name": "centril",
        "timestamp": 1556379064
    },
    {
        "content": "<p>hmpf</p>",
        "id": 164340719,
        "sender_full_name": "eddyb",
        "timestamp": 1556379096
    },
    {
        "content": "<p>not exactly</p>",
        "id": 164340720,
        "sender_full_name": "eddyb",
        "timestamp": 1556379099
    },
    {
        "content": "<p>(explaining why e.g. <code>for&lt;T&gt; fn(T)</code> and <code>dyn for&lt;T&gt; Fn(T)</code> ain't OK)</p>",
        "id": 164340722,
        "sender_full_name": "centril",
        "timestamp": 1556379111
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> so if we're only taking the \"no generic methods\" problem</p>",
        "id": 164340765,
        "sender_full_name": "eddyb",
        "timestamp": 1556379124
    },
    {
        "content": "<p>it's the possibility of reification of the vtable <em>at all</em></p>",
        "id": 164340769,
        "sender_full_name": "eddyb",
        "timestamp": 1556379135
    },
    {
        "content": "<p>with non-generic functions, you have a finite number of <code>fn</code> pointers, and that's enough</p>",
        "id": 164340778,
        "sender_full_name": "eddyb",
        "timestamp": 1556379181
    },
    {
        "content": "<p>to do dynamic dispatch</p>",
        "id": 164340787,
        "sender_full_name": "eddyb",
        "timestamp": 1556379185
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> eh, I think that assumes too much</p>",
        "id": 164340791,
        "sender_full_name": "eddyb",
        "timestamp": 1556379208
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 164340794,
        "sender_full_name": "centril",
        "timestamp": 1556379220
    },
    {
        "content": "<p>sorry, Zulip is annoying, UI-wise</p>",
        "id": 164340797,
        "sender_full_name": "eddyb",
        "timestamp": 1556379237
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 164340842,
        "sender_full_name": "centril",
        "timestamp": 1556379262
    },
    {
        "content": "<p>You can by clicking a <code>v</code> that is visible on the left I tihnk, but only within 10 minutes of writing the message. Or maybe not.</p>",
        "id": 164340862,
        "sender_full_name": "nagisa",
        "timestamp": 1556379308
    },
    {
        "content": "<p>doesn't seem so</p>",
        "id": 164340869,
        "sender_full_name": "centril",
        "timestamp": 1556379357
    },
    {
        "content": "<p>it's on the right</p>",
        "id": 164340915,
        "sender_full_name": "eddyb",
        "timestamp": 1556379375
    },
    {
        "content": "<blockquote>\n<p>with non-generic functions, you have a finite number of fn pointers, and that's enough</p>\n</blockquote>\n<p>(Treating lifetime generic functions as non-generic due to parametricity)</p>",
        "id": 164340917,
        "sender_full_name": "centril",
        "timestamp": 1556379406
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> <em>is</em> it correct that there's only the two categories feeding into object safety today: generics and unsized? Make sure I'm not missing an avenue</p>",
        "id": 164340985,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1556379543
    },
    {
        "content": "<p>The second is being able to implement <code>Trait</code> for <code>dyn Trait</code> (which implies the stuff around <code>Sized</code> if you treat <code>std::mem::swap</code> as an honorary method of <code>Sized</code>).</p>",
        "id": 164341057,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1556379655
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> I'm not seeing the connection with <code>swap</code>  here... could you expand a smidge?</p>",
        "id": 164341115,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1556379736
    },
    {
        "content": "<p>The signature of <code>swap</code> is (effectively) <code>fn swap(&amp;mut self, other: &amp;mut Self)</code>, which isn't object safe because the second parameter references <code>Self</code>.</p>",
        "id": 164341203,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1556379942
    },
    {
        "content": "<p>And such signatures aren't object safe because there's no way to \"glue together\" all of the individual implementations into one for <code>dyn Sized</code></p>",
        "id": 164341273,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1556380054
    },
    {
        "content": "<p>No matter how we implemented trait objects</p>",
        "id": 164341319,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1556380086
    },
    {
        "content": "<p>uhhhhhhhh</p>",
        "id": 164343059,
        "sender_full_name": "eddyb",
        "timestamp": 1556382843
    },
    {
        "content": "<p>a <code>swap</code> method is perfectly fine</p>",
        "id": 164343064,
        "sender_full_name": "eddyb",
        "timestamp": 1556382848
    },
    {
        "content": "<p>we're just not implementing <code>dyn Trait</code> fully today</p>",
        "id": 164343068,
        "sender_full_name": "eddyb",
        "timestamp": 1556382856
    },
    {
        "content": "<p>you could use it, in the future, for something like <code>&amp;mut [dyn Trait]</code></p>",
        "id": 164343074,
        "sender_full_name": "eddyb",
        "timestamp": 1556382893
    },
    {
        "content": "<p>since that's <code>&amp;mut [T]</code> for an unknown <code>T</code></p>",
        "id": 164343075,
        "sender_full_name": "eddyb",
        "timestamp": 1556382902
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> okay fine I mean \"only erasable generics\". which is I guess what  your point was</p>",
        "id": 164343090,
        "sender_full_name": "eddyb",
        "timestamp": 1556382943
    },
    {
        "content": "<p>What would swap even do with two different types?</p>",
        "id": 164343094,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1556382960
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> yep</p>",
        "id": 164343095,
        "sender_full_name": "centril",
        "timestamp": 1556382961
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> it would require same-type</p>",
        "id": 164343141,
        "sender_full_name": "eddyb",
        "timestamp": 1556382972
    },
    {
        "content": "<p>which... is a thing you can statically typecheck and lots of  formalisms have had for  like... half a century even?</p>",
        "id": 164343149,
        "sender_full_name": "eddyb",
        "timestamp": 1556382993
    },
    {
        "content": "<p>we should consider <code>dyn for&lt;T: ?Concrete&gt; Fn(T)</code> or something</p>",
        "id": 164343151,
        "sender_full_name": "centril",
        "timestamp": 1556383009
    },
    {
        "content": "<p>what</p>",
        "id": 164343154,
        "sender_full_name": "eddyb",
        "timestamp": 1556383015
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> ?</p>",
        "id": 164343172,
        "sender_full_name": "centril",
        "timestamp": 1556383061
    },
    {
        "content": "<p>anyway, like I said, <code>[dyn Trait]</code>, by the only rules that are known to work, must come from a <code>[T; n]</code> where <code>T: Sized</code> and <code>n: usize</code></p>",
        "id": 164343222,
        "sender_full_name": "eddyb",
        "timestamp": 1556383104
    },
    {
        "content": "<p>the element type can't vary between elements</p>",
        "id": 164343224,
        "sender_full_name": "eddyb",
        "timestamp": 1556383113
    },
    {
        "content": "<p>that would mean that you'd end up with the same skolem variable when accessing elements</p>",
        "id": 164343231,
        "sender_full_name": "eddyb",
        "timestamp": 1556383131
    },
    {
        "content": "<p>so e.g. a <code>[ref mut a, ref mut b, ..]</code> pattern would know that <code>a</code> and <code>b</code> are <em>not only</em> <code>dyn Trait</code>, but <em>the same concrete type</em></p>",
        "id": 164343245,
        "sender_full_name": "eddyb",
        "timestamp": 1556383167
    },
    {
        "content": "<p>and so you could swap them!</p>",
        "id": 164343246,
        "sender_full_name": "eddyb",
        "timestamp": 1556383173
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> same story for <code>Vec&lt;dyn Trait&gt;</code> presumably?</p>",
        "id": 164343248,
        "sender_full_name": "centril",
        "timestamp": 1556383178
    },
    {
        "content": "<p>yupp</p>",
        "id": 164343249,
        "sender_full_name": "eddyb",
        "timestamp": 1556383182
    },
    {
        "content": "<p>that's just a growable <code>Box&lt;[dyn Trait]&gt;</code></p>",
        "id": 164343255,
        "sender_full_name": "eddyb",
        "timestamp": 1556383193
    },
    {
        "content": "<p><span aria-label=\"ship\" class=\"emoji emoji-1f6a2\" role=\"img\" title=\"ship\">:ship:</span></p>",
        "id": 164343309,
        "sender_full_name": "centril",
        "timestamp": 1556383212
    },
    {
        "content": "<p>(not swap them with <code>mem::swap</code>, that'd be harder, but with a <code>swap</code> method)</p>",
        "id": 164343310,
        "sender_full_name": "eddyb",
        "timestamp": 1556383216
    },
    {
        "content": "<p>Zulip makes it tedious to correct typos, lol</p>",
        "id": 164343316,
        "sender_full_name": "eddyb",
        "timestamp": 1556383241
    },
    {
        "content": "<p>/me checks what the equivalent of <code>Vec&lt;dyn Trait&gt;</code> is in Haskell</p>",
        "id": 164343319,
        "sender_full_name": "centril",
        "timestamp": 1556383253
    },
    {
        "content": "<p>it probably involves the keyword <code>forall</code> because gotta love Haskell</p>",
        "id": 164343336,
        "sender_full_name": "eddyb",
        "timestamp": 1556383289
    },
    {
        "content": "<p>yup</p>",
        "id": 164343338,
        "sender_full_name": "centril",
        "timestamp": 1556383308
    },
    {
        "content": "<p>but, basically, you just put the binder outside the <code>[]</code></p>",
        "id": 164343340,
        "sender_full_name": "eddyb",
        "timestamp": 1556383315
    },
    {
        "content": "<p>if you put it inside, that's like <code>Vec&lt;Box&lt;dyn Trait&gt;&gt;</code></p>",
        "id": 164343388,
        "sender_full_name": "eddyb",
        "timestamp": 1556383327
    },
    {
        "content": "<p>Rust has implicit binder slots in <code>*const</code>, <code>*mut</code>, <code>&amp;</code> and <code>&amp;mut</code> <em>and nothing else</em></p>",
        "id": 164343397,
        "sender_full_name": "eddyb",
        "timestamp": 1556383370
    },
    {
        "content": "<p>I keep meaning to write this up instead of ranting about it once it a while</p>",
        "id": 164343412,
        "sender_full_name": "eddyb",
        "timestamp": 1556383387
    },
    {
        "content": "<p>it fits together pretty well</p>",
        "id": 164343413,
        "sender_full_name": "eddyb",
        "timestamp": 1556383391
    },
    {
        "content": "<p>please do</p>",
        "id": 164343416,
        "sender_full_name": "centril",
        "timestamp": 1556383396
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>&lt;interactive&gt;:11:5: error:\n    * My brain just exploded\n      I can&#39;t handle pattern bindings for existential or GADT data constructors.\n      Instead, use a case-expression, or do-notation, to unpack the constructor.\n</pre></div>",
        "id": 164343554,
        "sender_full_name": "centril",
        "timestamp": 1556383604
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cm\">{-# LANGUAGE ExistentialQuantification, RankNTypes, ConstraintKinds, KindSignatures #-}</span>\n\n<span class=\"kr\">import</span> <span class=\"nn\">Data.Kind</span>\n\n<span class=\"kr\">data</span> <span class=\"kt\">DynList</span> <span class=\"p\">(</span><span class=\"n\">c</span> <span class=\"ow\">::</span> <span class=\"o\">*</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Constraint</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"n\">forall</span> <span class=\"p\">(</span><span class=\"n\">t</span> <span class=\"ow\">::</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"o\">.</span> <span class=\"n\">c</span> <span class=\"n\">t</span> <span class=\"ow\">=&gt;</span> <span class=\"kt\">DL</span> <span class=\"p\">[</span><span class=\"n\">t</span><span class=\"p\">]</span>\n\n<span class=\"nf\">main</span> <span class=\"ow\">=</span> <span class=\"n\">print</span> <span class=\"o\">$</span> <span class=\"kr\">case</span> <span class=\"kt\">DL</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span> <span class=\"p\">]</span> <span class=\"ow\">::</span> <span class=\"kt\">DynList</span> <span class=\"kt\">Show</span> <span class=\"kr\">of</span> <span class=\"kt\">DL</span> <span class=\"n\">xs</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">show</span> <span class=\"o\">&lt;$&gt;</span> <span class=\"n\">xs</span>\n</pre></div>",
        "id": 164343706,
        "sender_full_name": "centril",
        "timestamp": 1556383877
    },
    {
        "content": "<p><a href=\"https://github.com/goldfirere/singletons/pull/228\" target=\"_blank\" title=\"https://github.com/goldfirere/singletons/pull/228\">https://github.com/goldfirere/singletons/pull/228</a> <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 164343838,
        "sender_full_name": "centril",
        "timestamp": 1556384089
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> seems perfectly reasonable to me</p>",
        "id": 164343848,
        "sender_full_name": "centril",
        "timestamp": 1556384106
    }
]