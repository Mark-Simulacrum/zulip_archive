[
    {
        "content": "<p>At <span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span> suggestion I was going to try using <a href=\"https://doc.rust-lang.org/nightly/unstable-book/compiler-flags/source-based-code-coverage.html\">source-based-code-coverage</a>. It looks like that option is provided on the nightly channel. So that is a relief did not want to build rustc. Is the <code>llvm-cov</code> tool also in the distribution? If I need to get it somewhere, how do I get it for windows?</p>",
        "id": 216404359,
        "sender_full_name": "Eh2406",
        "timestamp": 1605132332
    },
    {
        "content": "<p>I have LLVM installed through my package manager.  It looks like there is a PR opened a few hours ago (<a href=\"https://github.com/rust-lang/rust/pull/78947\">https://github.com/rust-lang/rust/pull/78947</a>) to add the necessary tools to the llvm-tools rustup component.</p>",
        "id": 216404505,
        "sender_full_name": "Eric Huss",
        "timestamp": 1605132468
    },
    {
        "content": "<p>IIRC, it is not too hard to install LLVM on Windows, I just downloaded it from their website.</p>",
        "id": 216404602,
        "sender_full_name": "Eric Huss",
        "timestamp": 1605132516
    },
    {
        "content": "<p>Wonderfull! I will try again when that has landed. Or install LLVM if I get impatient.</p>",
        "id": 216405053,
        "sender_full_name": "Eh2406",
        "timestamp": 1605132835
    },
    {
        "content": "<p>Not sure if this helps, but I've used grcov for code cov. It seems like it still needs some work though (it's not super accurate and for some reason I have to <code>cargo clean</code> every time I use it).</p>",
        "id": 216680677,
        "sender_full_name": "Noah Lev",
        "timestamp": 1605305363
    },
    {
        "content": "<p>Has anyone managed to get source-based code coverage working with <code>codecov.io</code>?</p>",
        "id": 217510810,
        "sender_full_name": "Diggsey",
        "timestamp": 1605980242
    },
    {
        "content": "<p>I'm a bit confused on how source based code coverage works for tests. Following the guide here:<br>\n<a href=\"https://doc.rust-lang.org/nightly/unstable-book/compiler-flags/source-based-code-coverage.html\">https://doc.rust-lang.org/nightly/unstable-book/compiler-flags/source-based-code-coverage.html</a></p>\n<p>I don't particularly want to see the code coverage from running the binary itself, but from running the tests. I've tried running test binaries to generate profraw files with <code>RUSTFLAGS=\"-Zinstrument-coverage\" cargo test</code> but the final report indicates that no lines have been hit.</p>\n<p>Has anyone managed to get this working?</p>",
        "id": 217617940,
        "sender_full_name": "Ben Chand",
        "timestamp": 1606131823
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"366687\">@Ben Chand</span> You'll probably want to run it for one test at a time (since each one is a separate binary).  Here's an example:</p>\n<div class=\"codehilite\"><pre><span></span><code>RUSTFLAGS=&quot;-Zinstrument-coverage&quot; cargo +nightly test --lib\nllvm-profdata merge -sparse *.profraw -o foo.profdata\nllvm-cov show -Xdemangler=rustfilt target/debug/deps/foo-927f18c984bb5e6b -instr-profile=foo.profdata --show-line-counts-or-regions --output-dir=cov --format=html\nopen cov/index.html\n</code></pre></div>\n<p>The path to <code>llvm-cov</code> should be the test executable (which is printed with <code>cargo test</code>).</p>\n<p>I'm not sure if it is possible to merge the results across multiple test executables.  You could maybe experiment with the <code>LLVM_PROFILE_FILE</code> environment variable with the <code>%m</code> variable as shown in <a href=\"#narrow/stream/246057-t-cargo/topic/meeting/near/216405039\">https://rust-lang.zulipchat.com/#narrow/stream/246057-t-cargo/topic/meeting/near/216405039</a>.</p>",
        "id": 217629054,
        "sender_full_name": "Eric Huss",
        "timestamp": 1606139174
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span> can we document that somewhere, maybe on the blog post? It looks super helpful :)</p>",
        "id": 217629710,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606139579
    },
    {
        "content": "<p>More examples and documentation in <a href=\"https://doc.rust-lang.org/nightly/unstable-book/compiler-flags/source-based-code-coverage.html\">https://doc.rust-lang.org/nightly/unstable-book/compiler-flags/source-based-code-coverage.html</a> would be great.  I am no expert here, I'm making wild guesses on how to use it based on that document, so I wouldn't be comfortable writing it.</p>",
        "id": 217629934,
        "sender_full_name": "Eric Huss",
        "timestamp": 1606139726
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span> Thanks for that example, it works very well for me :) Great to see a working example</p>",
        "id": 217630207,
        "sender_full_name": "Ben Chand",
        "timestamp": 1606139869
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"296355\">@Rich Kadel</span></p>",
        "id": 217653556,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1606150523
    },
    {
        "content": "<p>So far I've managed to get test coverage working for some small local crates and it works really well. But I'm struggling with generating the profile data for one of our larger crates. Attempting to show the instr-profile results in the error <code>Failed to load coverage: Truncated coverage data</code>. Has anyone seen this before?</p>\n<p>I've tried a number of different configurations and execution methods, but the most recent one which also failed is based on the approach here, where all *.profraw files are merged:<br>\n<a href=\"#narrow/stream/246057-t-cargo/topic/meeting/near/216405039\">https://rust-lang.zulipchat.com/#narrow/stream/246057-t-cargo/topic/meeting/near/216405039</a></p>",
        "id": 217654377,
        "sender_full_name": "Ben Chand",
        "timestamp": 1606150869
    },
    {
        "content": "<p>I have some updated instructions that I'll put in the <code>Unstable Book</code> soon. Specifically, I worked through a set of steps to simplify and (hopefully) clarify coverage for tests. FYI, yes, <code>%m</code> works and is a good idea if testing multiple binaries. Then you can merge the multiple <code>.profraw</code> results (from each test binary) with <code>llvm-profdata</code>, and you can run reports from the merged results by passing the path to all tested binaries to <code>llvm-cov</code>.</p>",
        "id": 217658443,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1606152837
    },
    {
        "content": "<p>Here's a snapshot of the steps:</p>",
        "id": 217658503,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1606152853
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$ rustup toolchain install nightly\n$ rustup default nightly\n$ rustup update  <span class=\"c1\"># some redundancy here, depending on whether you are already on nightly</span>\n$ rustup component add llvm-tools-preview\n$ cargo install cargo-binutils  <span class=\"c1\"># this makes finding/using the right LLVM tool versions easier</span>\n$ cargo install rustfilt\n</code></pre></div>\n<p>For the rest of the commands in the following example, I downloaded <code>json5format</code>. You can validate the commands with this, or skip it and choose your own crates of course:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$ git clone git@github.com:google/json5format.git\n$ <span class=\"nb\">cd</span> json5format\n</code></pre></div>\n<p>That completes all of the one-time setup for the following steps:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$ <span class=\"nv\">RUSTFLAGS</span><span class=\"o\">=</span><span class=\"s2\">\"-Z instrument-coverage\"</span> <span class=\"se\">\\</span>\n    <span class=\"nv\">LLVM_PROFILE_FILE</span><span class=\"o\">=</span><span class=\"s2\">\"json5format-%m.profraw\"</span> <span class=\"se\">\\</span>\n    cargo <span class=\"nb\">test</span> --tests\n</code></pre></div>\n<p>Make note of the binary paths, after <code>Running</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>   ...\n   Compiling json5format v0.1.3 (/usr/local/google/home/richkadel/json5format)\n    Finished test [unoptimized + debuginfo] target(s) in 14.60s\n     Running target/debug/deps/json5format-fececd4653271682\nrunning 25 tests\n...\ntest result: ok. 25 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n\n     Running target/debug/deps/lib-30768f9c53506dc5\nrunning 31 tests\n...\ntest result: ok. 31 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n</code></pre></div>\n<p>You should have one ore more <code>.profraw</code> files now, one for each test binary.</p>\n<p>Now run <code>profdata</code> once to merge them, and then run <code>cov</code> with the <code>profdata</code> file and all test binaries. Here I'm running both <code>cargo cov report</code> and <code>cargo cov show</code>. (<code>cargo profdata</code> wraps <code>llvm-profdata</code> and <code>cargo cov</code> wraps <code>llvm-cov</code>, but you need to prefix tool args with <code>--</code>. Or you can use <code>rust-profdata</code> and <code>rust-cov</code>, I believe, without <code>cargo</code>, and without the extra <code>--</code>.)</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$ cargo profdata -- merge <span class=\"se\">\\</span>\n    -sparse json5format-*.profraw -o json5format.profdata\n$ cargo cov -- report <span class=\"se\">\\</span>\n    --use-color --ignore-filename-regex<span class=\"o\">=</span><span class=\"s1\">'/usr/local/'</span> <span class=\"se\">\\</span>\n    --instr-profile<span class=\"o\">=</span>json5format.profdata <span class=\"se\">\\</span>\n    target/debug/deps/lib-30768f9c53506dc5 <span class=\"se\">\\</span>\n    target/debug/deps/json5format-fececd4653271682\n$ cargo cov -- show <span class=\"se\">\\</span>\n    --use-color --ignore-filename-regex<span class=\"o\">=</span><span class=\"s1\">'/usr/local/'</span> <span class=\"se\">\\</span>\n    --instr-profile<span class=\"o\">=</span>json5format.profdata <span class=\"se\">\\</span>\n    target/debug/deps/lib-30768f9c53506dc5 <span class=\"se\">\\</span>\n    target/debug/deps/json5format-fececd4653271682 <span class=\"se\">\\</span>\n    --show-instantiations --show-line-counts-or-regions <span class=\"se\">\\</span>\n    --Xdemangler<span class=\"o\">=</span>rustfilt <span class=\"p\">|</span> less -R\n</code></pre></div>",
        "id": 217659809,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1606153566
    },
    {
        "content": "<p>One thing that might be worth clarifying: the <code>cargo cov</code> argument <code>--ignore-filename-regex='/usr/local/' \\</code>.</p>\n<p>The steps above generate coverage results for everything in <code>json5format</code> <strong>plus</strong> all of the dependencies. In my case, the dependencies are loaded from an absolute path starting at <code>/usr/local</code>, and all of the <code>json5format</code> source files are loaded from relative paths.</p>\n<p>I added that argument to skip reviewing coverage for the dependencies.</p>\n<p>You can build the dependencies without coverage instrumentation, and then build the json5format code with coverage instrumentation. I haven't tried that in a while though, and I'm not sure if there are any undesired side-effects, like perhaps (<em>maybe but unconfirmed</em>) inlined functions and/or generics from dependencies might not be included, which may or may not be what you want or expect.</p>\n<p>Something to figure out, because if the results are reasonable, it would save some time and binary size to exclude the dependencies from coverage instrumentation at compile time.</p>",
        "id": 217663057,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1606155117
    }
]