[
    {
        "content": "<blockquote>\n<p>Miri evaluation error: no item to reborrow for Unique from tag 3488 found in borrow stack</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span>  is this a \"programmer did something bad\" error or \"Miri doesn't know this\" error? I'm thinking the former.</p>",
        "id": 164998024,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1557161295
    },
    {
        "content": "<p>yeah that's a \"you got UB\" error</p>",
        "id": 165019391,
        "sender_full_name": "RalfJ",
        "timestamp": 1557177076
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span>  would you mind helping me see where?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">collections</span>::<span class=\"n\">BTreeSet</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">uniq_refs</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;d</span>: <span class=\"na\">&#39;i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">data</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;d</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">],</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">indices</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;i</span><span class=\"w\"> </span><span class=\"n\">BTreeSet</span><span class=\"o\">&lt;</span><span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"na\">&#39;d</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"na\">&#39;i</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">in_bounds_indices</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">indices</span><span class=\"p\">.</span><span class=\"n\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">..</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">());</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">in_bounds_indices</span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">|&amp;</span><span class=\"n\">i</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">get_unchecked_mut</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">p</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">p</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">iter</span>::<span class=\"n\">FromIterator</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">scores</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">indices</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">BTreeSet</span>::<span class=\"n\">from_iter</span><span class=\"p\">(</span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">]);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">selected_scores</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">uniq_refs</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">scores</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">indices</span><span class=\"p\">).</span><span class=\"n\">collect</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">score</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">selected_scores</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">*</span><span class=\"n\">score</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;{:?}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">scores</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>error[E0080]: Miri evaluation error: no item to reborrow for Unique from tag 3488 found in borrow stack\n    --&gt; /root/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libcore/mem.rs:1328:34\n     |\n1328 |         ManuallyDrop::into_inner(self.value)\n     |                                  ^^^^^^^^^^ Miri evaluation error: no item to reborrow for Unique from tag 3488 found in borrow stack\n     |\n     = note: inside call to `std::mem::MaybeUninit::&lt;&amp;mut i32&gt;::assume_init` at /root/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libcore/ptr.rs:578:5\n     = note: inside call to `std::ptr::read::&lt;&amp;mut i32&gt;` at /root/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/liballoc/vec.rs:2368:26\nnote: inside call to `&lt;std::vec::IntoIter&lt;&amp;mut i32&gt; as std::iter::Iterator&gt;::next` at src/main.rs:24:18\n    --&gt; src/main.rs:24:18\n     |\n24   |     for score in selected_scores {\n     |                  ^^^^^^^^^^^^^^^\n     = note: inside call to `main` at /root/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libstd/rt.rs:64:34\n     = note: inside call to closure at /root/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libstd/rt.rs:52:53\n     = note: inside call to closure at /root/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libstd/panicking.rs:293:40\n     = note: inside call to `std::panicking::try::do_call::&lt;[closure@DefId(1/1:1542 ~ std[82ff]::rt[0]::lang_start_internal[0]::{{closure}}[0]) 0:&amp;dyn std::ops::Fn() -&gt; i32 + std::marker::Sync + std::panic::RefUnwindSafe], i32&gt;` at /root/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libstd/panicking.rs:289:5\n     = note: inside call to `std::panicking::try::&lt;i32, [closure@DefId(1/1:1542 ~ std[82ff]::rt[0]::lang_start_internal[0]::{{closure}}[0]) 0:&amp;dyn std::ops::Fn() -&gt; i32 + std::marker::Sync + std::panic::RefUnwindSafe]&gt;` at /root/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libstd/panic.rs:388:9\n     = note: inside call to `std::panic::catch_unwind::&lt;[closure@DefId(1/1:1542 ~ std[82ff]::rt[0]::lang_start_internal[0]::{{closure}}[0]) 0:&amp;dyn std::ops::Fn() -&gt; i32 + std::marker::Sync + std::panic::RefUnwindSafe], i32&gt;` at /root/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libstd/rt.rs:52:25\n     = note: inside call to `std::rt::lang_start_internal` at /root/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libstd/rt.rs:64:5\n     = note: inside call to `std::rt::lang_start::&lt;()&gt;`\n</pre></div>\n\n\n<p><a href=\"https://play.integer32.com/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=6bbb16e5beda1bfa7efa0c2e079dc1ba\" target=\"_blank\" title=\"https://play.integer32.com/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=6bbb16e5beda1bfa7efa0c2e079dc1ba\">playground</a></p>",
        "id": 165034593,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1557193159
    },
    {
        "content": "<p>If I remove the <code>Vec</code> and iterate directly, Miri stays silent.</p>",
        "id": 165034659,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1557193260
    },
    {
        "content": "<p>(Sorry, I am on a workshop and don't have time to dig into this right now -- I'll come back to you eventually.)</p>",
        "id": 165053144,
        "sender_full_name": "RalfJ",
        "timestamp": 1557218607
    },
    {
        "content": "<p>How very rude. /s <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 165065942,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1557231852
    },
    {
        "content": "<p>uh, you are doing illegal lifetime laundering here</p>",
        "id": 165169468,
        "sender_full_name": "RalfJ",
        "timestamp": 1557326986
    },
    {
        "content": "<p>casting <code>&amp;mut</code> to <code>*mut</code> and back</p>",
        "id": 165169472,
        "sender_full_name": "RalfJ",
        "timestamp": 1557326995
    },
    {
        "content": "<p>and the reason it explodes is that every time you use <code>data</code>, you are asserting that this is a unique reference</p>",
        "id": 165169538,
        "sender_full_name": "RalfJ",
        "timestamp": 1557327011
    },
    {
        "content": "<p>This is basically equivalent to</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">fst</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">))</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">snd</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">))</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ptr1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fst</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ptr1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">ptr1</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"> </span><span class=\"c1\">// lifetime laundering</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ptr2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">snd</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_val</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">ptr1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 165169718,
        "sender_full_name": "RalfJ",
        "timestamp": 1557327136
    },
    {
        "content": "<p>Calling <code>snd</code> creates a mutable reference overlapping with <code>ptr1</code>, thus invalidating <code>ptr1</code></p>",
        "id": 165169742,
        "sender_full_name": "RalfJ",
        "timestamp": 1557327157
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> ^</p>",
        "id": 165170116,
        "sender_full_name": "RalfJ",
        "timestamp": 1557327388
    },
    {
        "content": "<p>You say <em>lifetime</em> laundering — is that precise?</p>",
        "id": 165170193,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1557327454
    },
    {
        "content": "<p>Conceptually, I'm intending to do the same thing as e.g. <code>split_at_mut</code></p>",
        "id": 165170213,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1557327475
    },
    {
        "content": "<p>I want to get two disjoint mutable references to values in a slice.</p>",
        "id": 165170282,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1557327493
    },
    {
        "content": "<p>you need to go through raw pointers then</p>",
        "id": 165170374,
        "sender_full_name": "RalfJ",
        "timestamp": 1557327564
    },
    {
        "content": "<p>Do I need to switch to getting a <code>*mut T</code> and use <code>add</code> instead of <code>get_unchecked_mut</code>?</p>",
        "id": 165170375,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1557327564
    },
    {
        "content": "<p>and unfortunately we have no <code>get</code> on a <code>*mut [T]</code>, so you need to use ptr arithmetic</p>",
        "id": 165170397,
        "sender_full_name": "RalfJ",
        "timestamp": 1557327585
    },
    {
        "content": "<blockquote>\n<p>Do I need to switch to getting a <code>*mut T</code> and use <code>add</code> instead of <code>get_unchecked_mut</code>?</p>\n</blockquote>\n<p>yes</p>",
        "id": 165170474,
        "sender_full_name": "RalfJ",
        "timestamp": 1557327612
    },
    {
        "content": "<p>OK</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">as_mut_ptr</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">in_bounds_indices</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">indices</span><span class=\"p\">.</span><span class=\"n\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">..</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">());</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">in_bounds_indices</span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">|&amp;</span><span class=\"n\">i</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">start</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">})</span><span class=\"w\"></span>\n</pre></div>",
        "id": 165170504,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1557327641
    },
    {
        "content": "<p>is Miri-clean</p>",
        "id": 165170513,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1557327647
    },
    {
        "content": "<p>that looks reasonable</p>",
        "id": 165170516,
        "sender_full_name": "RalfJ",
        "timestamp": 1557327651
    },
    {
        "content": "<p>what does Miri say?</p>",
        "id": 165170524,
        "sender_full_name": "RalfJ",
        "timestamp": 1557327658
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 165170556,
        "sender_full_name": "RalfJ",
        "timestamp": 1557327666
    },
    {
        "content": "<p>nothing</p>",
        "id": 165170560,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1557327668
    },
    {
        "content": "<p>Cc <span class=\"user-mention\" data-user-id=\"137587\">@Gankro</span> -- another case of mutable refs being more ergonomic causing trouble</p>",
        "id": 165170591,
        "sender_full_name": "RalfJ",
        "timestamp": 1557327697
    },
    {
        "content": "<p>well actually the code got IMO nicer with raw ptrs but maybe I am weird^^</p>",
        "id": 165170600,
        "sender_full_name": "RalfJ",
        "timestamp": 1557327711
    },
    {
        "content": "<p>Yeah, it's not worse, certainly</p>",
        "id": 165170620,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1557327722
    },
    {
        "content": "<blockquote>\n<p>every time you use data, you are asserting that this is a unique reference</p>\n</blockquote>\n<p>So because the element was a <code>&amp;mut T</code> and still live, and then I tried to call a <code>fn(&amp;mut [T])</code> that contained that same element, that caused aliasing?</p>",
        "id": 165170725,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1557327787
    },
    {
        "content": "<p>Very similar to the linked list PR that you submitted and I \"reviewed\"?</p>",
        "id": 165170733,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1557327801
    },
    {
        "content": "<blockquote>\n<p>mutable refs being more ergonomic</p>\n</blockquote>\n<p>I'd say that my main reason was trying to get out of <code>unsafe</code> as fast as possible.</p>",
        "id": 165170787,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1557327841
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>every time you use data, you are asserting that this is a unique reference</p>\n</blockquote>\n<p>So because the element was a <code>&amp;mut T</code> and still live, and then I tried to call a <code>fn(&amp;mut [T])</code> that contained that same element, that caused aliasing?</p>\n</blockquote>\n<p>yes</p>",
        "id": 165170856,
        "sender_full_name": "RalfJ",
        "timestamp": 1557327863
    },
    {
        "content": "<p>Someday I'll get it!</p>",
        "id": 165171035,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1557327982
    },
    {
        "content": "<p>And the iterator-only version <em>didn't</em> cause UB because the <code>&amp;mut T</code> <strong>wasn't</strong> live when we made the subsequent call to <code>get_unchecked_mut</code></p>",
        "id": 165171108,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1557328037
    },
    {
        "content": "<p>not sure what that version was, but yes -- if you dont use the invalidated ptr again later, there's no issue</p>",
        "id": 165171143,
        "sender_full_name": "RalfJ",
        "timestamp": 1557328064
    },
    {
        "content": "<blockquote>\n<p>not sure what that version was</p>\n</blockquote>\n<p><a href=\"https://play.integer32.com/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=26ae035045e89cd54b72d62413e4f601\" target=\"_blank\" title=\"https://play.integer32.com/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=26ae035045e89cd54b72d62413e4f601\">https://play.integer32.com/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=26ae035045e89cd54b72d62413e4f601</a></p>",
        "id": 165174954,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1557330685
    },
    {
        "content": "<p>Is there any way for Miri to point at the two (or more?) offending locations? If it pointed at <code>data.get_unchecked_mut(i);</code> I might have had more luck fixing this without consulting The Great Oracle</p>",
        "id": 165176139,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1557331543
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> that would be <a href=\"https://github.com/rust-lang/miri/issues/531\" target=\"_blank\" title=\"https://github.com/rust-lang/miri/issues/531\">https://github.com/rust-lang/miri/issues/531</a></p>",
        "id": 165188108,
        "sender_full_name": "RalfJ",
        "timestamp": 1557340073
    },
    {
        "content": "<p>but I have no idea how to implement that even remotely efficiently. looks like it requires remembering items when they get removed from the stack, and storing a stacktrace of where that happened. for <em>every single item</em>. that's crazy.</p>",
        "id": 165188184,
        "sender_full_name": "RalfJ",
        "timestamp": 1557340105
    },
    {
        "content": "<p>\"easy\" — just run the program backwards once you find the problem :-)</p>",
        "id": 165188519,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1557340370
    },
    {
        "content": "<p>yay rr in miri, the time travelling interpreter :)</p>",
        "id": 165191504,
        "sender_full_name": "lqd",
        "timestamp": 1557342429
    },
    {
        "content": "<p>priroda can do this</p>",
        "id": 165196055,
        "sender_full_name": "oli",
        "timestamp": 1557345896
    },
    {
        "content": "<p>(with horrible perf)</p>",
        "id": 165196074,
        "sender_full_name": "oli",
        "timestamp": 1557345909
    },
    {
        "content": "<p>uh yea or we just build a tagging system where you figure out the memory location relevant to the error and \"just\" record all accesses to that memory location</p>",
        "id": 165196161,
        "sender_full_name": "oli",
        "timestamp": 1557345970
    },
    {
        "content": "<p>then show them to the user in reverse order</p>",
        "id": 165196173,
        "sender_full_name": "oli",
        "timestamp": 1557345984
    }
]