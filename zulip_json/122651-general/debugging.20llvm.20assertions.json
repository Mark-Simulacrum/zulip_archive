[
    {
        "content": "<p>Does anyone have experience debugging failing llvm assertions? I managed to get a partial backtrace using lldb, but it's missing all the \"in between\" call locations (the ones that are inlined). I'm not sure it would actually help, either</p>",
        "id": 136009010,
        "sender_full_name": "mikeyhew",
        "timestamp": 1539820402
    },
    {
        "content": "<p>This is the one I'm getting:</p>\n<div class=\"codehilite\"><pre><span></span>rustc: /users/mahewson/rust2/src/llvm/lib/IR/Value.cpp:256: void llvm::Value::setNameImpl(const llvm::Twine&amp;): Assertion `!getType()-&gt;isVoidTy() &amp;&amp; &quot;Cannot assign a name to void values!&quot;&#39; failed.\n</pre></div>",
        "id": 136009094,
        "sender_full_name": "mikeyhew",
        "timestamp": 1539820470
    },
    {
        "content": "<p>Usually what I do is first see what is the source of an assertion</p>",
        "id": 136045132,
        "sender_full_name": "nagisa",
        "timestamp": 1539871310
    },
    {
        "content": "<p>if it comes from deep within LLVM while it is optimising stuff, it is usually an LLVM’s fault</p>",
        "id": 136045153,
        "sender_full_name": "nagisa",
        "timestamp": 1539871322
    },
    {
        "content": "<p>in that case I just use LLVM’s logging functionality (<code>-debug</code>, <code>-print-after-all</code>, <code>-print-before-all</code> and friends)</p>",
        "id": 136045221,
        "sender_full_name": "nagisa",
        "timestamp": 1539871368
    },
    {
        "content": "<p>OK thanks. Yeah, it's during lto, so I guess a full backtrace wouldn't show any of the code that I worked on, instead it's the generated IR that's triggering the assertion failure somehow</p>",
        "id": 136077832,
        "sender_full_name": "mikeyhew",
        "timestamp": 1539904050
    }
]