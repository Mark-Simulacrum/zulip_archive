[
    {
        "content": "<p>Hello!</p>\n<p>I am in a bit of a design pickle and im not sure how to structure this. So basically, i am writing a fluid engine which runs on the gpu as well as the cpu. For the gpu i have chosen to run cuda by writing my own cuda driver api lib that works on <code>.ptx</code> files. Those ptx files can be made by nvcc if i use <code>.cu</code> files, but they can also be made by rustc by targeting <code>nvptx64-nvidia-cuda</code>. Now, the issue is using <code>ptx-linker</code> does not work on windows due to something with llvm dylib limitations. So i found kind of a dirty hack around it, which is to just do <code>cargo +nightly rustc build --target nvptx64-nvidia-cuda -- --emit=asm</code>. This surprisingly makes a valid ptx file that works. So i have my main crate <code>onda</code> and my cuda crate <code>onda_cuda</code>. Then in the <a href=\"http://build.rs\">build.rs</a> of onda i do this basically:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">read_dir</span><span class=\"p\">(</span><span class=\"s\">\"../onda_cuda\"</span><span class=\"p\">).</span><span class=\"n\">is_ok</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"cargo:rerun-if-changed=../onda_cuda\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"c1\">// download the nvptx64-nvidia-cuda target through rustup for nightly</span>\n<span class=\"w\">        </span><span class=\"c1\">// build onda_cuda with the command i sent above</span>\n<span class=\"w\">        </span><span class=\"c1\">// read from target/nvptx64-nvidia-cuda/release/deps/ and find the cuda-....s file</span>\n<span class=\"w\">        </span><span class=\"c1\">// and move it to onda/resources/onda_cuda.ptx</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>But im not sure if this is at all going to work if someone downloads the crate from <a href=\"http://crates.io\">crates.io</a>, since it should not be trying to build the cuda crate since well, it doesnt have it, and it should have already been built into the ptx file when publishing. Any advice on maybe making this cleaner or is this the best ive got until i can use ptx-linker on windows?</p>",
        "id": 242008339,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623202202
    },
    {
        "content": "<p>you could export a function from a crate that is added as dev dependency to the user crate and invoke it from the user crate's <a href=\"http://build.rs\">build.rs</a>.</p>",
        "id": 242019446,
        "sender_full_name": "bjorn3",
        "timestamp": 1623216487
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> i dont think that will work because i need my crate to be compileable on stable, but the cuda crate requires nightly for obvious reasons :(</p>",
        "id": 242021044,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623218465
    },
    {
        "content": "<p>And i'd rather not go installing random targets on users' machines unless they are modifying the crate internally, i only need to rebuild the cuda crate when its modified</p>",
        "id": 242021069,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623218514
    },
    {
        "content": "<p>How big is the ptx file? Maybe you can ship it as part of your crate?</p>",
        "id": 242021140,
        "sender_full_name": "bjorn3",
        "timestamp": 1623218562
    },
    {
        "content": "<p>That's what im doing</p>",
        "id": 242021159,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623218572
    },
    {
        "content": "<p>I build the ptx file, move it to the resources file, then include_str it</p>",
        "id": 242021173,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623218586
    },
    {
        "content": "<p>but that's only done if the cuda crate is there, aka, this is being built by a developer, not a user</p>",
        "id": 242021188,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623218617
    },
    {
        "content": "<p>Im mostly just ashamed of the <code>--emit=asm</code> hack i am doing, it's horrific</p>",
        "id": 242021259,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623218665
    },
    {
        "content": "<p>I meant shipping it as part of the crate bundle on <a href=\"http://crates.io\">crates.io</a>.</p>",
        "id": 242021274,
        "sender_full_name": "bjorn3",
        "timestamp": 1623218692
    },
    {
        "content": "<p>i dont see the reason for doing that, it would require nightly to build it and the ptx only needs to be rebuilt if the cuda crate is changed</p>",
        "id": 242021312,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623218744
    },
    {
        "content": "<p>and using the crate \"normally\" doesn't work because it relies on nvptx intrinsics, and even if you build it for that target, you need to either use ptx-linker or the --emit=asm hack to get usable ptx</p>",
        "id": 242021465,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623218887
    },
    {
        "content": "<p>you understand me wrong I think. I meant shipping the precompiled ptx files.</p>",
        "id": 242023301,
        "sender_full_name": "bjorn3",
        "timestamp": 1623220990
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> i dont delete them after i put them in /resources so technically they are shipped, i just include them instead of loading it at runtime. The thing im making is also a binary so im not sure if that would work...</p>",
        "id": 242025338,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623223160
    },
    {
        "content": "<p>i can probably also get nvcc to compile it down to cubin to be smaller, but i dont think it will be very big</p>",
        "id": 242025419,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623223205
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276242\">@Riccardo D'Ambrosio</span> FWIW, this is exactly the kind of use case that artifact dependencies are intended for: <a href=\"https://github.com/rust-lang/rfcs/pull/3028/\">https://github.com/rust-lang/rfcs/pull/3028/</a></p>",
        "id": 242092188,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1623255623
    },
    {
        "content": "<p>We (the cargo team) could really use some help implementing that RFC.</p>",
        "id": 242092359,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1623255690
    },
    {
        "content": "<p>(That doesn't solve the problem of needing nightly, but it does make for a cleaner solution to depending on a binary from another target.)</p>",
        "id": 242092624,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1623255808
    },
    {
        "content": "<p>Oh lol I forgot I made that RFC</p>",
        "id": 242134847,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1623274973
    },
    {
        "content": "<p>Yes this is an ideal use case for it</p>",
        "id": 242134860,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1623274980
    },
    {
        "content": "<p>I had a use case today where I wanted to depend on a <em>proc macro</em> artifact</p>",
        "id": 242135034,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1623275060
    },
    {
        "content": "<p>presumably it's a good thing that those are excluded from the RFC, but still <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 242135052,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1623275075
    }
]