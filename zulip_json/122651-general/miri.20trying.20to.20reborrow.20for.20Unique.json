[
    {
        "content": "<p>Hi, I'm testing this library: <a href=\"https://github.com/Michael-F-Bryan/const-arrayvec\" target=\"_blank\" title=\"https://github.com/Michael-F-Bryan/const-arrayvec\">https://github.com/Michael-F-Bryan/const-arrayvec</a><br>\nI'm getting a miri error but i'm not quite sure if it's a false positive or is the code unsound:<br>\n<a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=bb0b383aca6792aa7e1dc96a9979ffa3\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=bb0b383aca6792aa7e1dc96a9979ffa3\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=bb0b383aca6792aa7e1dc96a9979ffa3</a><br>\n<span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> <span class=\"user-mention\" data-user-id=\"124288\">@oli</span></p>",
        "id": 181287159,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1574327732
    },
    {
        "content": "<p>I'm not sure, but <a href=\"https://github.com/Michael-F-Bryan/const-arrayvec/blob/147553ca706176fe5cf1d56b2334a198bfba197a/src/lib.rs#L188\" target=\"_blank\" title=\"https://github.com/Michael-F-Bryan/const-arrayvec/blob/147553ca706176fe5cf1d56b2334a198bfba197a/src/lib.rs#L188\">https://github.com/Michael-F-Bryan/const-arrayvec/blob/147553ca706176fe5cf1d56b2334a198bfba197a/src/lib.rs#L188</a> may be nuking the borrow stack for <code>tail</code></p>",
        "id": 181287328,
        "sender_full_name": "oli",
        "timestamp": 1574327900
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> I tried switching places between the <code>tail</code> and <code>set_len</code> and it didn't help.</p>",
        "id": 181287571,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1574328167
    },
    {
        "content": "<p>hmm</p>",
        "id": 181287599,
        "sender_full_name": "oli",
        "timestamp": 1574328199
    },
    {
        "content": "<p>Ha. moving <code>self.set_len(new_length);</code> to the end of the function resolves this error.<br>\nIs this somehow unsoundness? (i.e. should be fixed) or is this miri not being able to determine that the borrow has ended?</p>",
        "id": 181287606,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1574328211
    },
    {
        "content": "<p>yea</p>",
        "id": 181287614,
        "sender_full_name": "oli",
        "timestamp": 1574328230
    },
    {
        "content": "<p>that is unsound</p>",
        "id": 181287615,
        "sender_full_name": "oli",
        "timestamp": 1574328234
    },
    {
        "content": "<p>^^</p>",
        "id": 181287620,
        "sender_full_name": "oli",
        "timestamp": 1574328238
    },
    {
        "content": "<p>the placement is very much on purpose</p>",
        "id": 181287623,
        "sender_full_name": "oli",
        "timestamp": 1574328241
    },
    {
        "content": "<p>you can inline the body of <code>set_len</code></p>",
        "id": 181287673,
        "sender_full_name": "oli",
        "timestamp": 1574328253
    },
    {
        "content": "<p>if you set it at the end, if dropping elements panics, you still have access to the elements that were dropped but didn't panic</p>",
        "id": 181287686,
        "sender_full_name": "oli",
        "timestamp": 1574328282
    },
    {
        "content": "<p>Meaning that the change to len <em>needs</em> to be only after dropping?</p>",
        "id": 181287690,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1574328283
    },
    {
        "content": "<p>If you want to know more about this google \"pre-pooping your pants rust drop\"</p>",
        "id": 181287709,
        "sender_full_name": "oli",
        "timestamp": 1574328301
    },
    {
        "content": "<p>very amusing blog post</p>",
        "id": 181287723,
        "sender_full_name": "oli",
        "timestamp": 1574328309
    },
    {
        "content": "<p>oh so you're saying the opposite? that if I resolve miri's error by setting the len only afterwards this <em>introduces</em> unsoundness? hmm</p>",
        "id": 181287736,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1574328325
    },
    {
        "content": "<p>will do :)</p>",
        "id": 181287743,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1574328331
    },
    {
        "content": "<p>oh that's related to <span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> PR to Vec</p>",
        "id": 181287751,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1574328352
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/64432\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/64432\">https://github.com/rust-lang/rust/pull/64432</a></p>",
        "id": 181287831,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1574328410
    },
    {
        "content": "<p>so inlining <code>set_len</code> works too. I don't understand</p>",
        "id": 181287965,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1574328522
    },
    {
        "content": "<p>Like Oli said, read “pre-pooping your pants”</p>",
        "id": 181288892,
        "sender_full_name": "gnzlbg",
        "timestamp": 1574329493
    },
    {
        "content": "<p>I wonder what people reading Rust threads about pooping pants think about us, but that has become the technical term <span aria-label=\"laughter tears\" class=\"emoji emoji-1f602\" role=\"img\" title=\"laughter tears\">:laughter_tears:</span></p>",
        "id": 181288926,
        "sender_full_name": "gnzlbg",
        "timestamp": 1574329545
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"249222\">@Elichai Turkel</span> lol I think you replicated <a href=\"https://github.com/bluss/arrayvec/pull/144\" target=\"_blank\" title=\"https://github.com/bluss/arrayvec/pull/144\">https://github.com/bluss/arrayvec/pull/144</a></p>",
        "id": 181291959,
        "sender_full_name": "RalfJ",
        "timestamp": 1574332192
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> lol, i'll also PR the changes after I finish reading the blog post (and actually understand why calling a function with &amp;mut self is inherently different than inlining it :P )</p>",
        "id": 181292990,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1574333078
    },
    {
        "content": "<p>the problem with the <code>&amp;mut self</code> function is mutable reference</p>",
        "id": 181639779,
        "sender_full_name": "RalfJ",
        "timestamp": 1574431288
    },
    {
        "content": "<p>a function <code>fn foo(x: &amp;mut T)</code> must be able to rely on <code>x</code> being the only pointer to this instance of <code>T</code></p>",
        "id": 181639811,
        "sender_full_name": "RalfJ",
        "timestamp": 1574431309
    },
    {
        "content": "<p>so if there are aliases that were created before (such as raw ptrs) and used later, that's illegal -- it makes <code>x</code> not the only live pointer</p>",
        "id": 181639870,
        "sender_full_name": "RalfJ",
        "timestamp": 1574431340
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> I was about to write \"isn't that an inefficiency of the borrow checker? \" but then I realized this can definitely be unsound:</p>\n<div class=\"codehilite\"><pre><span></span>fn main() {\n    let mut a = vec![20, 20, 20];\n    dbg!(a.capacity());\n    let a_slice = unsafe { std::slice::from_raw_parts(a.as_ptr(), a.len()) };\n    a.extend_from_slice(&amp;[64u8; 64]);\n    dbg!(a.capacity());\n    dbg!(a_slice);\n}\n</pre></div>",
        "id": 181728818,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1574538644
    },
    {
        "content": "<p>and I finished pre pooping my pants :)</p>",
        "id": 181728831,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1574538710
    },
    {
        "content": "<p>that code actually <em>writes</em> to <code>a</code> though (inside <code>extend_from_slice</code>), it doesnt just create a mutable ref</p>",
        "id": 181820274,
        "sender_full_name": "RalfJ",
        "timestamp": 1574687248
    }
]