[
    {
        "content": "<p>How do I make a type <code>!Sync</code> in stable Rust? Writing <code>impl !Sync for MyType</code> results in:</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0658]: negative trait bounds are not yet fully implemented; use marker types for now\n</code></pre></div>\n\n\n<p>There's a reference to <a href=\"https://github.com/rust-lang/rust/issues/68318\">https://github.com/rust-lang/rust/issues/68318</a> , which says nothing about how to do that.</p>",
        "id": 206370090,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1596931306
    },
    {
        "content": "<p>(Context: I have a type that embeds a socket, and it needs to be <code>!Sync</code> because its methods send on the socket and expect to receive a response on the socket, and won't work if called on multiple threads at once.)</p>",
        "id": 206370146,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1596931341
    },
    {
        "content": "<p>What about PhantomData&lt;Cell&lt;()&gt;&gt;?</p>",
        "id": 206370480,
        "sender_full_name": "Mikail Bagishov",
        "timestamp": 1596931727
    },
    {
        "content": "<p>Ah, I see; that's what it means by \"marker types\"?</p>",
        "id": 206370559,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1596931805
    },
    {
        "content": "<p>Yeah, I guess I could do that.</p>",
        "id": 206370563,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1596931811
    },
    {
        "content": "<p>So, instead of saying \"this is not Sync<code>\", I need to embed something that doesn't allow the automatic impl of </code>Sync`.</p>",
        "id": 206370595,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1596931859
    },
    {
        "content": "<p>We should improve that error message (or \"just\" stabilize !Sync, which I'd be in favor of personally)</p>",
        "id": 206370743,
        "sender_full_name": "simulacrum",
        "timestamp": 1596932022
    },
    {
        "content": "<p>I've always found the embedding of PhantomData to be pretty opaque, and I don't know that we lose much by just stabilizing !Sync and !Send (to start)</p>",
        "id": 206370795,
        "sender_full_name": "simulacrum",
        "timestamp": 1596932051
    },
    {
        "content": "<p>As in, don't allow negative impls in general, but allow <code>impl !Send</code> and <code>impl !Sync</code> (and any other built-in trait that gets automatically implemented)?</p>",
        "id": 206370800,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1596932065
    },
    {
        "content": "<p>right, yeah -- I think there's reasons we might not want to allow general negative impls</p>",
        "id": 206370810,
        "sender_full_name": "simulacrum",
        "timestamp": 1596932104
    },
    {
        "content": "<p>Sure.</p>",
        "id": 206370814,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1596932112
    },
    {
        "content": "<p>(i.e., potentially opens more negative reasoning, like we did for Deref and Pin etc)</p>",
        "id": 206370815,
        "sender_full_name": "simulacrum",
        "timestamp": 1596932117
    },
    {
        "content": "<p>but <em>just</em> Send/Sync are already possible by just adding the PhantomData to your type, so I think it's not more expressive</p>",
        "id": 206370818,
        "sender_full_name": "simulacrum",
        "timestamp": 1596932141
    },
    {
        "content": "<p>especially if you put a requirement like Drop has that the negative impl must be applicable to all instances of the struct</p>",
        "id": 206370861,
        "sender_full_name": "simulacrum",
        "timestamp": 1596932168
    },
    {
        "content": "<p>Letting users say what they really want instead of telling them to do a dance with the side effects of some other thing in the language is always a good thing.</p>",
        "id": 206371070,
        "sender_full_name": "Lokathor",
        "timestamp": 1596932656
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"223584\">@Mikail Bagishov</span> <code>PhantomData&lt;Cell&lt;()&gt;&gt;</code> worked fine. Thanks!</p>",
        "id": 206371286,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1596933133
    }
]