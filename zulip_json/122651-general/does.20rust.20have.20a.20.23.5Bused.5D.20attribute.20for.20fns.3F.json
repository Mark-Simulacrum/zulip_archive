[
    {
        "content": "<p>In clang I can annotate a function with <code>__attribute__((used))</code> in order to prevent the linker from removing it in the object file, even if it's unused. I notice there is a <code>#[used]</code> attribute in Rust, but it only works for statics. Is there a similar attribute for functions too?</p>",
        "id": 222485481,
        "sender_full_name": "Jake Hughes",
        "timestamp": 1610481259
    },
    {
        "content": "<p><code>#[used]</code> doesn't influence the linker</p>",
        "id": 222485662,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1610481354
    },
    {
        "content": "<p><code>#[no_mangle]</code> should do the trick though?</p>",
        "id": 222485810,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1610481413
    },
    {
        "content": "<p>Ah ok, I'll give it a try. I wasn't aware <code>#[no_mangle]</code> had additional semantics to simply preventing name mangling.</p>",
        "id": 222486047,
        "sender_full_name": "Jake Hughes",
        "timestamp": 1610481514
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span>  - that did the job. Thanks a bunch!</p>",
        "id": 222487114,
        "sender_full_name": "Jake Hughes",
        "timestamp": 1610481999
    },
    {
        "content": "<p>I think <code>#[no_mangle]</code> kind of means \"leave this function's API alone\".</p>",
        "id": 222490663,
        "sender_full_name": "Noah Lev",
        "timestamp": 1610483833
    },
    {
        "content": "<p>It does not affect the ABI, if you meant that</p>",
        "id": 222490839,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1610483897
    },
    {
        "content": "<p>It disables name mangling and publicly exports the function in the resulting object file</p>",
        "id": 222490883,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1610483919
    },
    {
        "content": "<p>Yeah, it's hard to phrase in a clear way <span aria-label=\"slight frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"slight frown\">:slight_frown:</span></p>",
        "id": 222490938,
        "sender_full_name": "Noah Lev",
        "timestamp": 1610483944
    },
    {
        "content": "<p>So maybe it's like no name mangling + C <code>static</code> function?</p>",
        "id": 222491013,
        "sender_full_name": "Noah Lev",
        "timestamp": 1610483986
    },
    {
        "content": "<p><code>static</code> on a C function does the opposite</p>",
        "id": 222491116,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1610484016
    },
    {
        "content": "<p>it makes it local to the compilation unit</p>",
        "id": 222491132,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1610484025
    },
    {
        "content": "<p>Oops, yeah I guess I meant the opposite of <code>static</code> <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 222491378,
        "sender_full_name": "Noah Lev",
        "timestamp": 1610484129
    }
]