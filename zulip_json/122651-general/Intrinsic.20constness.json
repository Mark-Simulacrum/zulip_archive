[
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/std/intrinsics/index.html#const-intrinsics\">https://doc.rust-lang.org/nightly/std/intrinsics/index.html#const-intrinsics</a> reads \"Note: any changes to the constness of intrinsics should be discussed with the language team. This includes changes in the stability of the constness.\"</p>\n<p>Why would that be the case, given that intrinsics are perma-unstable?</p>",
        "id": 202042147,
        "sender_full_name": "Gary Guo",
        "timestamp": 1593131990
    },
    {
        "content": "<p>Not all intrinsics are perma-unstable</p>",
        "id": 202047923,
        "sender_full_name": "Lokathor",
        "timestamp": 1593140292
    },
    {
        "content": "<p>But aren't stabilized intrinsics a problem with supporting other backends? Like cranelift for fast debug builds or in the (far?) future potential gcc.</p>",
        "id": 202054095,
        "sender_full_name": "Philipp Korber",
        "timestamp": 1593149274
    },
    {
        "content": "<p>Well I guess some intrinsics like copy, copy_nonoverlapping or transmute will always be available.</p>",
        "id": 202054207,
        "sender_full_name": "Philipp Korber",
        "timestamp": 1593149421
    },
    {
        "content": "<p>many arch intrinsics can also become const at some point.</p>",
        "id": 202056827,
        "sender_full_name": "Lokathor",
        "timestamp": 1593153280
    },
    {
        "content": "<p>Other than the LLVM intrinsics used for the implementation of most functions in <code>core::arch</code>, I have implemented most intrinsics in cg_clif. Those missing are just because I haven't implemented them yet.</p>",
        "id": 202066476,
        "sender_full_name": "bjorn3",
        "timestamp": 1593161660
    },
    {
        "content": "<p><a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/blob/58ffc47bbf759fa8fd9d51a67fe4a277984054ad/src/intrinsics/mod.rs\">https://github.com/bjorn3/rustc_codegen_cranelift/blob/58ffc47bbf759fa8fd9d51a67fe4a277984054ad/src/intrinsics/mod.rs</a></p>",
        "id": 202066522,
        "sender_full_name": "bjorn3",
        "timestamp": 1593161702
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/122651-general/topic/Intrinsic.20constness/near/202047923\">said</a>:</p>\n<blockquote>\n<p>Not all intrinsics are perma-unstable</p>\n</blockquote>\n<p>I thought all instrinsics are unstable but can be exposed in other ways? There are stable intrinsics now but they cannot be used directly because <code>std::intrinsics</code> is itself unstable.</p>",
        "id": 202076659,
        "sender_full_name": "Gary Guo",
        "timestamp": 1593169538
    },
    {
        "content": "<p><code>std::mem::transmute</code> is a re-export of <code>std::intrinsics::transmute</code> (<code>pub mod mem { pub use std::intrinsics::transmute; }</code>), not a wrapper around it.</p>",
        "id": 202079381,
        "sender_full_name": "bjorn3",
        "timestamp": 1593171565
    },
    {
        "content": "<p>Which is the easiest way to emit a compilation error on <code>size_of::&lt;T&gt;() != size_of::&lt;U&gt;()</code> afaik</p>",
        "id": 202079969,
        "sender_full_name": "lcnr",
        "timestamp": 1593172092
    },
    {
        "content": "<p>And all of <code>core::arch</code> is intrinsics, including hundreds of stable functions</p>",
        "id": 202093126,
        "sender_full_name": "Lokathor",
        "timestamp": 1593179768
    },
    {
        "content": "<p>All public functions <code>core::arch</code> are wrappers around intrinsics, inline asm or in some cases even just regular code when LLVM is able to pattern match it.</p>",
        "id": 202093822,
        "sender_full_name": "bjorn3",
        "timestamp": 1593180049
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"303710\">Gary Guo</span> <a href=\"#narrow/stream/122651-general/topic/Intrinsic.20constness/near/202042147\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://doc.rust-lang.org/nightly/std/intrinsics/index.html#const-intrinsics\">https://doc.rust-lang.org/nightly/std/intrinsics/index.html#const-intrinsics</a> reads \"Note: any changes to the constness of intrinsics should be discussed with the language team. This includes changes in the stability of the constness.\"</p>\n<p>Why would that be the case, given that intrinsics are perma-unstable?</p>\n</blockquote>\n<p>Intrinsics are typically operations that cannot be implemented otherwise -- they are intrinsic to the language, just like <code>match</code> or the <code>+</code> operator. they happen to be exposed as function calls but should not be mistaken for normal library functions. Adding such new language primitives is clearly lang team territory.</p>",
        "id": 202097594,
        "sender_full_name": "RalfJ",
        "timestamp": 1593181784
    },
    {
        "content": "<p>adding an intrinsic often fundamentally extends the expressiveness of what Rust can do, and that is one of the areas the lang team is responsible for</p>",
        "id": 202097696,
        "sender_full_name": "RalfJ",
        "timestamp": 1593181813
    },
    {
        "content": "<p>making an intrinsic const fundamentally extends what CTFE can do, and thus the lang team should be involved for the same reason</p>",
        "id": 202097732,
        "sender_full_name": "RalfJ",
        "timestamp": 1593181831
    },
    {
        "content": "<p>this applies even if the intrinsic is only indirectly exposed -- the intrinsic behind <code>write_volatile</code> is technically unstable, but the stable method could not be implemented without the intrinsic so this makes no difference re: being a language extension</p>",
        "id": 202097830,
        "sender_full_name": "RalfJ",
        "timestamp": 1593181883
    }
]