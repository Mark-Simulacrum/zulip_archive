[
    {
        "content": "<p>The following code fails to compile because ReadA is implemented for &amp;T and not T, is there a way to have the impl for T be taken from the impl for &amp;T? In the code it is only possible to pass T.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">ReadA</span><span class=\"w\"> </span>:<span class=\"nb\">Copy</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">read</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">WriteA</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">write</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">ReadWriteA</span><span class=\"w\"> </span>: <span class=\"nc\">ReadA</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">WriteA</span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">ReadA</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">WriteA</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">ReadWriteA</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n\n<span class=\"k\">struct</span> <span class=\"nc\">DB</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">ReadA</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">DB</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">read</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">WriteA</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">DB</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">write</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n\n<span class=\"k\">fn</span> <span class=\"nf\">read_and_write</span><span class=\"o\">&lt;</span><span class=\"n\">R</span><span class=\"w\"> </span>: <span class=\"nc\">ReadWriteA</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"w\"> </span>: <span class=\"nc\">R</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">failing_code</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">db</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">DB</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">read_and_write</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 256894347,
        "sender_full_name": "kev",
        "timestamp": 1633809043
    },
    {
        "content": "<p>Can't you use <code>read_and_write(&amp;db);</code>?</p>",
        "id": 256894808,
        "sender_full_name": "Gary Guo",
        "timestamp": 1633809495
    },
    {
        "content": "<p>You couldn't implement <code>ReadA</code> for <code>DB</code> because <code>DB</code> is not <code>Copy</code>.</p>",
        "id": 256894826,
        "sender_full_name": "Gary Guo",
        "timestamp": 1633809520
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"303710\">Gary Guo</span> <a href=\"#narrow/stream/122651-general/topic/Inherit.20the.20trait.20impl.20of.20.26T.20for.20T/near/256894808\">said</a>:</p>\n<blockquote>\n<p>Can't you use <code>read_and_write(&amp;db);</code>?</p>\n</blockquote>\n<p>That fails because WriteA is implemented for &amp;DB</p>",
        "id": 256894858,
        "sender_full_name": "kev",
        "timestamp": 1633809563
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"303710\">Gary Guo</span> <a href=\"#narrow/stream/122651-general/topic/Inherit.20the.20trait.20impl.20of.20.26T.20for.20T/near/256894826\">said</a>:</p>\n<blockquote>\n<p>You couldn't implement <code>ReadA</code> for <code>DB</code> because <code>DB</code> is not <code>Copy</code>.</p>\n</blockquote>\n<p>Right exactly, but &amp;DB is Copy and it can be gotten from DB, so I thought there would be a way to signal this</p>",
        "id": 256894946,
        "sender_full_name": "kev",
        "timestamp": 1633809621
    },
    {
        "content": "<p>Do you control the definition of ReadA or WriteA?</p>",
        "id": 256894984,
        "sender_full_name": "Gary Guo",
        "timestamp": 1633809645
    },
    {
        "content": "<p>Yep</p>",
        "id": 256894993,
        "sender_full_name": "kev",
        "timestamp": 1633809655
    },
    {
        "content": "<p>Why does ReadA take <code>self</code>? Do you need to implement it for a custom reference-like type?</p>",
        "id": 256895036,
        "sender_full_name": "Gary Guo",
        "timestamp": 1633809706
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"303710\">Gary Guo</span> <a href=\"#narrow/stream/122651-general/topic/Inherit.20the.20trait.20impl.20of.20.26T.20for.20T/near/256895036\">said</a>:</p>\n<blockquote>\n<p>Why does ReadA take <code>self</code>? Do you need to implement it for a custom reference-like type?</p>\n</blockquote>\n<p>Because later on in the code I have something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">return_read_only_db</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">ReadA</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 256895120,
        "sender_full_name": "kev",
        "timestamp": 1633809768
    },
    {
        "content": "<p>If I implement ReadA on DB, then I'm a bit stuck because DB is not Copyable and so the above function would fail since it is &amp;self and I cannot move self.DB out from behind the shared reference</p>",
        "id": 256895249,
        "sender_full_name": "kev",
        "timestamp": 1633809890
    },
    {
        "content": "<p>There are places in the code which only need a <code>ReadA</code> which is why it's structured a bit funny. </p>\n<p>I wonder if I am doing something that fundamentally cannot/should not be done in Rust?</p>",
        "id": 256895392,
        "sender_full_name": "kev",
        "timestamp": 1633810044
    },
    {
        "content": "<p>You can return <code>&amp;impl ReadA</code></p>",
        "id": 256897141,
        "sender_full_name": "Gary Guo",
        "timestamp": 1633811813
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"303710\">Gary Guo</span> <a href=\"#narrow/stream/122651-general/topic/Inherit.20the.20trait.20impl.20of.20.26T.20for.20T/near/256897141\">said</a>:</p>\n<blockquote>\n<p>You can return <code>&amp;impl ReadA</code></p>\n</blockquote>\n<p>that works, thanks!</p>",
        "id": 256897972,
        "sender_full_name": "kev",
        "timestamp": 1633812701
    },
    {
        "content": "<p>Would still be interested to know why the original code was not possible. </p>\n<p>Minimised:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">traitA</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">traitB</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"w\"> </span>: <span class=\"nc\">traitA</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">traitB</span><span class=\"w\">  </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">traitA</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">traitB</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">traitC</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// Foo implements trait C, because it inherits the impl of trait A from &amp;mut Foo and the impl of trait B from &amp;Foo</span>\n</code></pre></div>",
        "id": 256898421,
        "sender_full_name": "kev",
        "timestamp": 1633813174
    },
    {
        "content": "<p>The issue is that &amp;mut and &amp; are different types</p>",
        "id": 256901113,
        "sender_full_name": "Gary Guo",
        "timestamp": 1633815873
    },
    {
        "content": "<p>And you can't implement traitB for <code>&amp;mut Foo</code> because <code>&amp;mut</code> is not <code>Copy</code>.</p>",
        "id": 256901133,
        "sender_full_name": "Gary Guo",
        "timestamp": 1633815900
    }
]