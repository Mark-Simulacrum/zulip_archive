[
    {
        "content": "<p>I have an incoming webhook event stream of loosely/complex typed objects. As a result I want to view each one using several \"lenses\". In concrete terms, every item has a <code>task_id</code> field, so I have a <code>struct TaskRef { task_id: String }</code>, but also they're (serde-speak) adjacently tagged enums, so I'm also treating them as <code>pub enum Event {A, B, ...}</code>. Currently I'm solving this by parsing twice: </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">tr</span>: <span class=\"nc\">TaskRef</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">serde_json</span>::<span class=\"n\">from_str</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"c1\">// do task-related things ...</span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">e</span>: <span class=\"nc\">Event</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">serde_json</span>::<span class=\"n\">from_str</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cm\">/* ... */</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>this seems a bit cumbersome. Can I somehow build a union type?</p>",
        "id": 228771359,
        "sender_full_name": "Anatol Ulrich",
        "timestamp": 1614864504
    },
    {
        "content": "<p>Why not have <code>struct Event { task_id: String, kind: EventKind }</code>, <code>enum EventKind {A, B, ...}</code> for your data representation? That way you can keep both the commonality of <code>task_id</code> in every event while still having the separation into event kinds</p>",
        "id": 228771775,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614864686
    },
    {
        "content": "<p>unfortunately I can't control the data format</p>",
        "id": 228771799,
        "sender_full_name": "Anatol Ulrich",
        "timestamp": 1614864704
    },
    {
        "content": "<p>I mean the data structure format</p>",
        "id": 228771833,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614864715
    },
    {
        "content": "<p>oh! ok, trying</p>",
        "id": 228771910,
        "sender_full_name": "Anatol Ulrich",
        "timestamp": 1614864731
    },
    {
        "content": "<p>this doesn't mean serde should parse the input differently</p>",
        "id": 228771918,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614864733
    },
    {
        "content": "<p>I probably need to flatten then?</p>",
        "id": 228771977,
        "sender_full_name": "Anatol Ulrich",
        "timestamp": 1614864760
    },
    {
        "content": "<p>I'm not too familiar with serde but I get the sense it has enough knobs on it to make a parser for this</p>",
        "id": 228772053,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614864791
    },
    {
        "content": "<p>I'm asking in the first place because the way I'm reading the docs it seems there is not</p>",
        "id": 228772094,
        "sender_full_name": "Anatol Ulrich",
        "timestamp": 1614864811
    },
    {
        "content": "<p>but I'll try flatten</p>",
        "id": 228772099,
        "sender_full_name": "Anatol Ulrich",
        "timestamp": 1614864815
    },
    {
        "content": "<p>Do you have a simple example?</p>",
        "id": 228772239,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614864848
    },
    {
        "content": "<p>worst case scenario, you can implement <code>Deserialize</code> manually for your struct, and map it into serde's data model any way you like</p>",
        "id": 228772710,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614865042
    },
    {
        "content": "<p>relevant <a href=\"https://serde.rs/enum-representations.html\">serde docs</a> (see adjacently tagged)</p>\n<p>data:</p>\n<div class=\"codehilite\" data-code-language=\"JSON\"><pre><span></span><code><span class=\"p\">{</span>\n    <span class=\"nt\">\"task_id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"f71f4m\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"event\"</span><span class=\"p\">:</span> <span class=\"s2\">\"taskCommentUpdated\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"history_items\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n        <span class=\"nt\">\"id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2333164701594231585\"</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"date\"</span><span class=\"p\">:</span> <span class=\"s2\">\"1614863592863\"</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"field\"</span><span class=\"p\">:</span> <span class=\"s2\">\"comment\"</span><span class=\"p\">,</span>\n<span class=\"err\">...</span>\n</code></pre></div>\n<p>code:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[derive(Deserialize, Debug)]</span><span class=\"w\"></span>\n<span class=\"cp\">#[serde(tag = </span><span class=\"s\">\"event\"</span><span class=\"cp\">, content = </span><span class=\"s\">\"history_items\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">enum</span> <span class=\"nc\">Event</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[serde(rename(deserialize = </span><span class=\"s\">\"taskCommentUpdated\"</span><span class=\"cp\">))]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">TaskCommentUpdated</span><span class=\"p\">(</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">TaskCommentUpdate</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">&gt;</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[derive(Deserialize, Debug)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">TaskCommentUpdate</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">field</span>: <span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">date</span>: <span class=\"nb\">String</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 228772783,
        "sender_full_name": "Anatol Ulrich",
        "timestamp": 1614865081
    },
    {
        "content": "<p>you're right, a manual <code>Deserialize</code> would work. I'd just like to avoid this. Trying out flattening ... this might actually work, sec</p>",
        "id": 228773070,
        "sender_full_name": "Anatol Ulrich",
        "timestamp": 1614865196
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"271719\">@Mario Carneiro</span> indeed, flatten does the trick! Thanks!</p>",
        "id": 228775468,
        "sender_full_name": "Anatol Ulrich",
        "timestamp": 1614866092
    }
]