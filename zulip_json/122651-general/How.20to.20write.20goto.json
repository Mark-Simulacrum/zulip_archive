[
    {
        "content": "<p>What's the most reliable way to write code that compiles like break-with-value but without the nesting restrictions? I'm pretty sure it's possible to use break-with-value to encode arbitrary goto but the nesting makes it difficult to get to any of a set of labels. I've tried using <code>loop { state = match state { ... } }</code> which is pretty good in a pinch but doesn't always get optimized away to the same thing that you would get with break-with-value.</p>",
        "id": 223184067,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611026924
    },
    {
        "content": "<p>Hum, are you looking for labeled break? Like <a href=\"https://doc.rust-lang.org/rust-by-example/flow_control/loop/nested.html\">https://doc.rust-lang.org/rust-by-example/flow_control/loop/nested.html</a></p>",
        "id": 223184596,
        "sender_full_name": "Nadrieril",
        "timestamp": 1611027801
    },
    {
        "content": "<p>that's what I mean by break-with-value. I'm aware of it but it doesn't capture all control flow, for example if I wanted to implement an async state machine manually</p>",
        "id": 223184733,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611027968
    },
    {
        "content": "<p>or maybe it does and I'm not creative enough</p>",
        "id": 223184744,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611027987
    },
    {
        "content": "<p>The main issue is that you can't use <code>break 'label</code> outside the <code>'label: loop</code> block</p>",
        "id": 223184761,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611028059
    },
    {
        "content": "<p>since actually breaking to a label takes you out of that block, you can't break to it again</p>",
        "id": 223184819,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611028103
    },
    {
        "content": "<p>you can <code>continue 'label</code> but that doesn't carry a value</p>",
        "id": 223184831,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611028134
    },
    {
        "content": "<p>oh I see. If it's just about carrying a value, you can probably shove that value in a mutable variable? A bit sad but I'm not sure what you're trying to do</p>",
        "id": 223185100,
        "sender_full_name": "Nadrieril",
        "timestamp": 1611028477
    },
    {
        "content": "<p>I think I'm too much of a functional programmer to properly conceive of arbitrary goto x)</p>",
        "id": 223185127,
        "sender_full_name": "Nadrieril",
        "timestamp": 1611028535
    },
    {
        "content": "<p>The usual translation would be to wrap a whole function body in the loop, have the top-level statement be a match on \"state\", and translate goto to set state then break.</p>",
        "id": 223185129,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1611028539
    },
    {
        "content": "<p>That still requires dividing the code to fit into the match arms.</p>",
        "id": 223185168,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1611028564
    },
    {
        "content": "<p>So you can't put targets everywhere. For that you need further transformation.</p>",
        "id": 223185189,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1611028594
    },
    {
        "content": "<p>do you have an example of code you'd like to write?</p>",
        "id": 223185264,
        "sender_full_name": "Nadrieril",
        "timestamp": 1611028731
    },
    {
        "content": "<p>As a functional programmer myself, I think goto is very naturally expressed as a <code>let rec</code> of tail recursive functions</p>",
        "id": 223185266,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611028733
    },
    {
        "content": "<p>Right <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> , that's a good way to write it, and I use that in practice. The sadness is that this doesn't compile as well as it should, at least in some small tests with LLVM</p>",
        "id": 223185359,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611028828
    },
    {
        "content": "<p>This kind of thing comes up when you are writing an interpreter, where the cost of an extra basic block for the outer loop is measurable</p>",
        "id": 223185385,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611028885
    },
    {
        "content": "<p>The problem that got me thinking about it today was writing an iterative (manual stack) version of a recursive algorithm</p>",
        "id": 223185437,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611028939
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=b34fd9438b17a362241859a7e5e78730\">Here's an example</a> of such a transformation on a dfs algorithm</p>",
        "id": 223185963,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611029783
    },
    {
        "content": "<p>As for \"code I'd like to write\", the main goal is to be able to write, by some means, (something that optimizes to) any control flow that can be expressed in MIR</p>",
        "id": 223186124,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611030071
    },
    {
        "content": "<p>If I had to invent syntax for goto, I have no idea what fits best, but something like the following would do the trick:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">dfs_iterative</span><span class=\"p\">(</span><span class=\"n\">graph</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">usize</span><span class=\"p\">]],</span><span class=\"w\"> </span><span class=\"n\">mark</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">bool</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">i</span>: <span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">stack</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"fm\">vec!</span><span class=\"p\">[];</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"o\">'</span><span class=\"na\">start</span>: <span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">goto</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">iter</span><span class=\"w\"> </span><span class=\"n\">graph</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">iter</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">'</span><span class=\"na\">iter</span>: <span class=\"o\">|</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">it</span>: <span class=\"nc\">std</span>::<span class=\"n\">slice</span>::<span class=\"n\">Iter</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"o\">&gt;|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">j</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"p\">.</span><span class=\"n\">next</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">mark</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">stack</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">((</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">goto</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">start</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">goto</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">iter</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"n\">goto</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">done</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">'</span><span class=\"na\">done</span>: <span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">mark</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">stack</span><span class=\"p\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"nb\">None</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"nb\">Some</span><span class=\"p\">((</span><span class=\"n\">j</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">goto</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">iter</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"n\">goto</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">start</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 223186670,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611030959
    },
    {
        "content": "<p>The main thrust of my question was rather what mechanisms that already exist in rust can be abused to get goto functionality, rather than imagining new syntax that I don't expect to ever make it past the folks who like to quote dijkstra</p>",
        "id": 223186788,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611031084
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/122651-general/topic/How.20to.20write.20goto/near/223185385\">said</a>:</p>\n<blockquote>\n<p>This kind of thing comes up when you are writing an interpreter, where the cost of an extra basic block for the outer loop is measurable</p>\n</blockquote>\n<p>Ah, you're talking about things like the computed goto used in the Python bytecode interpreter, to jump directly to the right branch for the next instruction?</p>",
        "id": 223187895,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1611032728
    },
    {
        "content": "<p>yeah, i wrote a regex compiler proc macro at once point and the terrible perf of the <code>loop { state = match state {} }</code> approach (and several other options i tried) compared to goto-using C code was enough that i never bothered finishing it.</p>",
        "id": 223188266,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1611033283
    },
    {
        "content": "<p>computed goto would also be nice for interpreters and the like. i've also run into the desire for such things in a ANS-style decoder at one point</p>",
        "id": 223188322,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1611033363
    },
    {
        "content": "<p>What's more, although it doesn't come up super often, because the borrow checker works on MIR it is often at its most powerful intraprocedurally when you are using complex control flow. Using <code>state = match state</code> erases the information of which blocks go where so some code will be rejected</p>",
        "id": 223188340,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611033391
    },
    {
        "content": "<p>In the example above we don't need any computed goto, although that would be pretty nice, it's really just a goto to a known location, it just isn't a location that lends itself well to hierarchy.</p>",
        "id": 223188360,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611033480
    },
    {
        "content": "<p>I think you could even make computed goto a typesafe thing, if there is a type/calling convention for \"label closures\" inside a function. They are basically FnOnce closures that capture the entire context and return <code>!</code></p>",
        "id": 223188736,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611034036
    },
    {
        "content": "<p>the complication being that they don't have unique types, they are like <code>fn()</code> in that their concrete representation is a code pointer</p>",
        "id": 223188784,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611034116
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"271719\">@Mario Carneiro</span> This seems like a pattern that MIR optimization could be taught to recognize.</p>",
        "id": 223189472,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1611035278
    },
    {
        "content": "<p><code>loop { state = match state { ... } }</code> or things that generate equivalent MIR could be transformed to have direct state-to-state gotos.</p>",
        "id": 223189519,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1611035319
    },
    {
        "content": "<p>that would be fantastic</p>",
        "id": 223189525,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611035329
    },
    {
        "content": "<p>You might inquire in <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt\">https://rust-lang.zulipchat.com/#narrow/stream/189540-t-compiler.2Fwg-mir-opt</a> , and provide some sample code for the pattern.</p>",
        "id": 223189564,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1611035387
    },
    {
        "content": "<p>I believe there's interest in that stream in identifying appropriate new optimizations.</p>",
        "id": 223189611,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1611035413
    },
    {
        "content": "<p>see also <a href=\"https://github.com/rust-lang/rust/pull/80475\">https://github.com/rust-lang/rust/pull/80475</a></p>",
        "id": 223327811,
        "sender_full_name": "erikdesjardins",
        "timestamp": 1611113040
    }
]