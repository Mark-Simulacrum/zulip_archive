[
    {
        "content": "<p>is there a way to get a struct holding a <code>PhantomData&lt;T&gt;</code> to be <code>'static</code>, even if <code>T</code> isn't <code>'static</code>? <code>PhantomData&lt;fn() -&gt; T&gt;</code> seems to work for bounds like <code>Send</code> (<code>struct Foo&lt;T&gt;(PhantomData&lt;fn() -&gt; T&gt;)</code> is <code>Send</code> even if <code>T</code> is not <code>Send</code>), but not <code>'static</code>. <code>T</code> shouldn't have to be static in my case, because it isn't stored, it's used as a function parameter, and I need the phantom data to constrain a blanket trait implementation.</p>",
        "id": 249478184,
        "sender_full_name": "AI",
        "timestamp": 1628976557
    },
    {
        "content": "<p>I don't understand variance very much, so I'm not sure if this should be possible.</p>",
        "id": 249478239,
        "sender_full_name": "AI",
        "timestamp": 1628976608
    },
    {
        "content": "<p>trying to get a smaller reproducible example, I realized the thing I'm trying to do is impossible <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 249478659,
        "sender_full_name": "AI",
        "timestamp": 1628977461
    },
    {
        "content": "<p>I don't think so. If you have <code>Foo&lt;&amp;'a T&gt;</code> thatvwill always require it to not outlive <code>'a</code>. Variance only affects coercions like <code>&amp;'static T</code>-&gt;<code>&amp;'a T</code> or <code>fn(&amp;'a T)</code>-&gt;<code>fn(&amp;'static T)</code> so at most you could make <code>Foo&lt;&amp;'a T&gt;</code> coercible to <code>Foo&lt;&amp;'static T&gt;</code>. You can't make <code>Foo&lt;&amp;'a T&gt;</code> itself <code>'static</code>.</p>",
        "id": 249479643,
        "sender_full_name": "bjorn3",
        "timestamp": 1628979128
    },
    {
        "content": "<p>So, I have a <code>Handler</code> trait:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Handler</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">handle</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">req</span>: <span class=\"nc\">Request</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Response</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>And a ergonomic API that let's you pass any function that takes anything implementing <code>FromRequest</code> as a parameter (like rocket):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">FnHandler</span><span class=\"o\">&lt;</span><span class=\"n\">R</span>: <span class=\"nc\">FromRequest</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">call</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">r</span>: <span class=\"nc\">R</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Response</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">F</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">FnHandler</span><span class=\"o\">&lt;</span><span class=\"n\">R</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">F</span>: <span class=\"nb\">Fn</span><span class=\"p\">(</span><span class=\"n\">R</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Response</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">R</span>: <span class=\"nc\">FromRequest</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">call</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">r</span>: <span class=\"nc\">R</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Response</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">FromRequest</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">from</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">req</span>: <span class=\"nc\">Request</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 249485624,
        "sender_full_name": "AI",
        "timestamp": 1628989613
    },
    {
        "content": "<p>Now, the issue is that I am storing a <code>Vec&lt;Box&lt;dyn Handler&lt;Request&gt;&gt;</code>, so I need a wrapper type around <code>FnHandler</code>'s that implements <code>Handler</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">FnHandlerWrapper</span><span class=\"o\">&lt;</span><span class=\"n\">F</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">f</span>: <span class=\"nc\">F</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_r</span>: <span class=\"nc\">PhantomData</span><span class=\"o\">&lt;</span><span class=\"n\">R</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">F</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Handler</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">FnHandlerWrapper</span><span class=\"o\">&lt;</span><span class=\"n\">F</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">handle</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">req</span>: <span class=\"nc\">Request</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Response</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">R</span>::<span class=\"n\">from_request</span><span class=\"p\">(</span><span class=\"n\">req</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">f</span><span class=\"p\">)(</span><span class=\"n\">r</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p><code>FnHandlerWrapper</code> has to store a <code>PhantomData&lt;R&gt;</code>, otherwise it's unconstrained.</p>",
        "id": 249485636,
        "sender_full_name": "AI",
        "timestamp": 1628989659
    },
    {
        "content": "<p>And that means <code>FnHandlerWrapper</code> is only <code>'static</code> when <code>R: 'static, F: 'static</code></p>",
        "id": 249485642,
        "sender_full_name": "AI",
        "timestamp": 1628989679
    },
    {
        "content": "<p><code>F: 'static</code> is fine of course, but <code>R: 'static</code> means that <code>FromRequest</code> implementors cannot borrow from the request.</p>",
        "id": 249485682,
        "sender_full_name": "AI",
        "timestamp": 1628989699
    },
    {
        "content": "<p>Which sucks, because then I have to <code>Arc</code> application state that could otherwise be borrowed.</p>",
        "id": 249485687,
        "sender_full_name": "AI",
        "timestamp": 1628989721
    },
    {
        "content": "<p>Not that big of a deal, but I was wondering if it's possible</p>",
        "id": 249486109,
        "sender_full_name": "AI",
        "timestamp": 1628990559
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"432683\">AI</span> <a href=\"#narrow/stream/122651-general/topic/Variance.20with.20'static.20bounds/near/249485682\">said</a>:</p>\n<blockquote>\n<p><code>F: 'static</code> is fine of course, but <code>R: 'static</code> means that <code>FromRequest</code> implementors cannot borrow from the request.</p>\n</blockquote>\n<p>With the current definition of <code>FromRequest</code> implementors can't borrow from the request anyway  since the <code>'a</code> lifetime is not in scope when <code>Self</code> is defined</p>",
        "id": 249499667,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1629015400
    },
    {
        "content": "<p>Hm, you're right. It would have to be like this right?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">FromRequest</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">from</span><span class=\"p\">(</span><span class=\"n\">req</span>: <span class=\"nc\">Request</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 249512564,
        "sender_full_name": "AI",
        "timestamp": 1629034082
    },
    {
        "content": "<p>But that still doesn't solve the main issue</p>",
        "id": 249512604,
        "sender_full_name": "AI",
        "timestamp": 1629034088
    },
    {
        "content": "<p>Is the solution here to restucture the way I'm doing this, or do I need something like <code>Box&lt;dyn Handler + 'self?&gt;</code></p>",
        "id": 249513603,
        "sender_full_name": "AI",
        "timestamp": 1629035346
    },
    {
        "content": "<p>Because due to the <code>PhantomData&lt;R&gt;</code>, the handlers borrow from the request state, stored in <code>self</code></p>",
        "id": 249513615,
        "sender_full_name": "AI",
        "timestamp": 1629035378
    },
    {
        "content": "<p>I was also wondering how I would do something like <code>struct App { state: RequestState, service: Box&lt;dyn Service&lt;Request&lt;'self?&gt;&gt; }</code></p>",
        "id": 249513665,
        "sender_full_name": "AI",
        "timestamp": 1629035421
    },
    {
        "content": "<p>But I ended up making my own <code>Handler</code> trait that only takes <code>Request</code> as a parameter, not a generic</p>",
        "id": 249513700,
        "sender_full_name": "AI",
        "timestamp": 1629035439
    },
    {
        "content": "<p>This is almost a self-referential struct problem, except it shouldn't be because the borrows aren't being stored <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 249513729,
        "sender_full_name": "AI",
        "timestamp": 1629035501
    },
    {
        "content": "<p>Is what I want impossible, and is there a good reason for it?</p>",
        "id": 249513733,
        "sender_full_name": "AI",
        "timestamp": 1629035520
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"432683\">AI</span> <a href=\"#narrow/stream/122651-general/topic/Variance.20with.20'static.20bounds/near/249512564\">said</a>:</p>\n<blockquote>\n<p>Hm, you're right. It would have to be like this right?</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">FromRequest</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">from</span><span class=\"p\">(</span><span class=\"n\">req</span>: <span class=\"nc\">Request</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>You also need to do the same thing with <code>Handler</code></p>",
        "id": 249516414,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1629038970
    },
    {
        "content": "<p>I think you might want something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Handler</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">handle</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">req</span>: <span class=\"nc\">Request</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Response</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">FromRequest</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">from</span><span class=\"p\">(</span><span class=\"n\">req</span>: <span class=\"nc\">Request</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">FnHandler</span><span class=\"o\">&lt;</span><span class=\"n\">R</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">call</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">r</span>: <span class=\"nc\">R</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Response</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">F</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">FnHandler</span><span class=\"o\">&lt;</span><span class=\"n\">R</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">F</span>: <span class=\"nb\">Fn</span><span class=\"p\">(</span><span class=\"n\">R</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Response</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">call</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">r</span>: <span class=\"nc\">R</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Response</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">FnHandlerWrapper</span><span class=\"o\">&lt;</span><span class=\"n\">F</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">f</span>: <span class=\"nc\">F</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_r</span>: <span class=\"nc\">PhantomData</span><span class=\"o\">&lt;</span><span class=\"n\">R</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">F</span>: <span class=\"nc\">FnHandler</span><span class=\"o\">&lt;</span><span class=\"n\">R</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">R</span>: <span class=\"nc\">FromRequest</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">Handler</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">FnHandlerWrapper</span><span class=\"o\">&lt;</span><span class=\"n\">F</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">handle</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">req</span>: <span class=\"nc\">Request</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Response</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">f</span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"n\">R</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"n\">req</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Then you can have a <code>Box&lt;dyn for&lt;'a&gt; Handler&lt;'a&gt;&gt;</code>. <br>\nThis might be nicer with GATs though.</p>",
        "id": 249516542,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1629039138
    },
    {
        "content": "<p>Wait... <code>Box&lt;dyn for&lt;'a&gt; Handler&lt;'a&gt;&gt;</code> is legal syntax?</p>",
        "id": 249519795,
        "sender_full_name": "AI",
        "timestamp": 1629043862
    },
    {
        "content": "<p>I didn't know you can use hrtbs with <code>dyn</code>!</p>",
        "id": 249519811,
        "sender_full_name": "AI",
        "timestamp": 1629043897
    },
    {
        "content": "<p>That means I can do my original thing with <code>Box&lt;dyn for&lt;'a&gt; Handler&lt;Request&lt;'a&gt;&gt;</code></p>",
        "id": 249519868,
        "sender_full_name": "AI",
        "timestamp": 1629043948
    },
    {
        "content": "<p>wow, thanks!</p>",
        "id": 249519869,
        "sender_full_name": "AI",
        "timestamp": 1629043950
    },
    {
        "content": "<p>How would GATs fit in here?</p>",
        "id": 249519874,
        "sender_full_name": "AI",
        "timestamp": 1629043964
    },
    {
        "content": "<p>I think I would need GATs for returning futures, but I don't have any associated types right now.</p>",
        "id": 249520825,
        "sender_full_name": "AI",
        "timestamp": 1629045246
    },
    {
        "content": "<p>Hm.. this still doesn't seem to work <span class=\"user-mention\" data-user-id=\"338379\">@Giacomo Stevanato</span></p>",
        "id": 249521247,
        "sender_full_name": "AI",
        "timestamp": 1629045972
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Request</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">state</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Response</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Handler</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">handle</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">req</span>: <span class=\"nc\">Request</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Response</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">FromRequest</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">from</span><span class=\"p\">(</span><span class=\"n\">req</span>: <span class=\"nc\">Request</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">FnHandler</span><span class=\"o\">&lt;</span><span class=\"n\">R</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">call</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">r</span>: <span class=\"nc\">R</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Response</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">F</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">FnHandler</span><span class=\"o\">&lt;</span><span class=\"n\">R</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">F</span>: <span class=\"nb\">Fn</span><span class=\"p\">(</span><span class=\"n\">R</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Response</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">call</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">r</span>: <span class=\"nc\">R</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Response</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">FnHandlerWrapper</span><span class=\"o\">&lt;</span><span class=\"n\">F</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">f</span>: <span class=\"nc\">F</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">_r</span>: <span class=\"nc\">PhantomData</span><span class=\"o\">&lt;</span><span class=\"n\">R</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">F</span>: <span class=\"nc\">FnHandler</span><span class=\"o\">&lt;</span><span class=\"n\">R</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">R</span>: <span class=\"nc\">FromRequest</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">Handler</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">FnHandlerWrapper</span><span class=\"o\">&lt;</span><span class=\"n\">F</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">handle</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">req</span>: <span class=\"nc\">Request</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Response</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">f</span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"n\">R</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"n\">req</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">App</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">routes</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Handler</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">App</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">route</span><span class=\"o\">&lt;</span><span class=\"n\">F</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span>: <span class=\"nc\">F</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">F</span>: <span class=\"nb\">Fn</span><span class=\"p\">(</span><span class=\"n\">R</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Response</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">static</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">R</span>: <span class=\"nc\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">FromRequest</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">routes</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"nb\">Box</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">FnHandlerWrapper</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_r</span>: <span class=\"nc\">PhantomData</span><span class=\"w\"> </span><span class=\"p\">}));</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 249521254,
        "sender_full_name": "AI",
        "timestamp": 1629045987
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error[E0310]: the parameter type `R` may not live long enough\n  --&gt; src/main.rs:51:19\n   |\n45 |     pub fn route&lt;F, R&gt;(&amp;mut self, f: F)\n   |                     - help: consider adding an explicit lifetime bound...: `R: &#39;static`\n...\n51 |             .push(Box::new(FnHandlerWrapper { f, _r: PhantomData }));\n   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...so that the type `FnHandlerWrapper&lt;F, R&gt;` will meet its required lifetime bounds\n</code></pre></div>",
        "id": 249521255,
        "sender_full_name": "AI",
        "timestamp": 1629045988
    },
    {
        "content": "<p>Ugh, right, <code>R</code> brings the lifetime with it...</p>",
        "id": 249561083,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1629102137
    },
    {
        "content": "<p>Also, <code>R: for&lt;'a&gt; FromRequest&lt;'a&gt;</code> is not that ideal since it kinda implies <code>R</code> needs to be <code>'static</code> anyway</p>",
        "id": 249561116,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1629102166
    },
    {
        "content": "<p>Ok, here's the fixed version: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=c4cd22b0debf76cc7565690a25a38a56\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=c4cd22b0debf76cc7565690a25a38a56</a><br>\n<code>R</code> is now a constructor for the actual type that implements <code>FromRequest&lt;'a&gt;</code> so it can be <code>'static</code> even if the type implementing <code>FromRequest&lt;'a&gt;</code> isn't</p>\n<p>With GATs: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=7a1d18a3ea615313e3665bb80d0add80\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=7a1d18a3ea615313e3665bb80d0add80</a></p>",
        "id": 249561903,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1629102821
    },
    {
        "content": "<p>Hmm.. that's an interesting work-around <span class=\"user-mention\" data-user-id=\"338379\">@Giacomo Stevanato</span> .</p>",
        "id": 252395150,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1631065857
    },
    {
        "content": "<p>I was looking into something similar.</p>",
        "id": 252395158,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1631065866
    },
    {
        "content": "<p>Could you get rid of the 'static bounds here?</p>",
        "id": 252395169,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1631065882
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=901f99acbdaf08518c42391945d150c6\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=901f99acbdaf08518c42391945d150c6</a></p>",
        "id": 252395347,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1631066053
    },
    {
        "content": "<p>Actually, even the original example does not work with async_trait.</p>",
        "id": 252396015,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1631066653
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=ed6353b156442b82136c7fdc891e55c4\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=ed6353b156442b82136c7fdc891e55c4</a></p>",
        "id": 252396020,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1631066663
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span>: <span class=\"nc\">implementation</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">Handler</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">general</span><span class=\"w\"> </span><span class=\"n\">enough</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">tester</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">69</span>:<span class=\"mi\">26</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">69</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">           </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">routes</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"nb\">Box</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">FnHandlerWrapper</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">  </span><span class=\"n\">__________________________</span><span class=\"o\">^</span><span class=\"w\"></span>\n<span class=\"mi\">70</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">             </span><span class=\"n\">f</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"mi\">71</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">             </span><span class=\"n\">_r</span>: <span class=\"nc\">PhantomData</span>::<span class=\"o\">&lt;</span><span class=\"n\">R</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"mi\">72</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">         </span><span class=\"p\">}));</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">__________</span><span class=\"o\">^</span><span class=\"w\"> </span><span class=\"n\">implementation</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">Handler</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">general</span><span class=\"w\"> </span><span class=\"n\">enough</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"err\">`</span><span class=\"n\">FnHandlerWrapper</span><span class=\"o\">&lt;</span><span class=\"n\">F</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">&gt;</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">must</span><span class=\"w\"> </span><span class=\"n\">implement</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">Handler</span><span class=\"o\">&lt;'</span><span class=\"mi\">0</span><span class=\"o\">&gt;</span><span class=\"err\">`</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">any</span><span class=\"w\"> </span><span class=\"n\">lifetime</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">'</span><span class=\"mi\">0</span><span class=\"err\">`</span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"o\">..</span><span class=\"p\">.</span><span class=\"n\">but</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"w\"> </span><span class=\"n\">actually</span><span class=\"w\"> </span><span class=\"n\">implements</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">Handler</span><span class=\"o\">&lt;'</span><span class=\"mi\">1</span><span class=\"o\">&gt;</span><span class=\"err\">`</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"n\">specific</span><span class=\"w\"> </span><span class=\"n\">lifetime</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">'</span><span class=\"mi\">1</span><span class=\"err\">`</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 252396029,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1631066673
    },
    {
        "content": "<p>Also, I wonder if there is away you could do this without exposing <code>RConstructor</code> so publicly.</p>",
        "id": 252396183,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1631066862
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"363998\">Ibraheem Ahmed</span> <a href=\"#narrow/stream/122651-general/topic/Variance.20with.20'static.20bounds/near/252395169\">said</a>:</p>\n<blockquote>\n<p>Could you get rid of the 'static bounds here?</p>\n</blockquote>\n<p>You need to add a lifetime to <code>App</code><br>\n<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=7d8b2585e9c22c3b0b33f1fbe4a8e643\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=7d8b2585e9c22c3b0b33f1fbe4a8e643</a></p>",
        "id": 252419719,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1631087259
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"363998\">Ibraheem Ahmed</span> <a href=\"#narrow/stream/122651-general/topic/Variance.20with.20'static.20bounds/near/252396020\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=ed6353b156442b82136c7fdc891e55c4\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=ed6353b156442b82136c7fdc891e55c4</a></p>\n</blockquote>\n<p>I'm not quite sure about what's going on here, IMO it should compile, however the bounds look complicated enough that this may be the compiler not being able to infer that the implementation of <code>Handler</code> applies for any lifetime <code>'a</code></p>",
        "id": 252420045,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1631087471
    },
    {
        "content": "<p>Yeah, the trait solver is easily confused when higher-order lifetimes are involved. Consider:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"o\">&lt;'</span><span class=\"na\">lt</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">Assoc</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">Assoc</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">_check</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">T</span><span class=\"w\"> </span>: <span class=\"nc\">for</span><span class=\"o\">&lt;'</span><span class=\"nb\">__</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"o\">&lt;'</span><span class=\"nb\">__</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Assoc</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c1\">// OK</span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">any</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"o\">&lt;'</span><span class=\"na\">any</span><span class=\"o\">&gt;&gt;</span>::<span class=\"n\">Assoc</span><span class=\"w\"> </span>: <span class=\"nb\">Copy</span> <span class=\"c1\">// Error</span>\n<span class=\"w\">    </span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">_check</span>::<span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>\n<p>which fails when it has to check the higher-order constraint of <code>Copy</code> for <code>&lt;T as Trait&lt;'lt&gt;&gt;::Assoc</code>.</p>\n<p>Basically, the moment a non-equality constraint involves <code>&lt;SomeTy as SomeTrait&lt;'higher_order&gt;&gt;::Assoc</code>, the bound is currently doomed not to be met.</p>",
        "id": 252452725,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1631105045
    },
    {
        "content": "<p>Though this particular example seems to compile on nightly now that <a href=\"https://github.com/rust-lang/rust/issues/85499\">#85499</a> has been merged</p>",
        "id": 252454392,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1631105861
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"338379\">Giacomo Stevanato</span> <a href=\"#narrow/stream/122651-general/topic/Variance.20with.20'static.20bounds/near/252419719\">said</a>:</p>\n<blockquote>\n<p>You need to add a lifetime to <code>App</code><br>\n<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=7d8b2585e9c22c3b0b33f1fbe4a8e643\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=7d8b2585e9c22c3b0b33f1fbe4a8e643</a></p>\n</blockquote>\n<p>Hmm.. is it not possible without doing that?</p>",
        "id": 252488150,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1631117423
    },
    {
        "content": "<p>I need the app to be static.</p>",
        "id": 252505918,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1631124274
    },
    {
        "content": "<p>If you want to store a non-<code>'static</code> handler then you need to introduce that lifetime, otherwise <code>App</code> may outlive the handler and lead to an use-after-free of stuff like that when it calls the handler</p>",
        "id": 252586352,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1631174595
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"338379\">Giacomo Stevanato</span> <a href=\"#narrow/stream/122651-general/topic/Variance.20with.20'static.20bounds/near/252586352\">said</a>:</p>\n<blockquote>\n<p>If you want to store a non-<code>'static</code> handler then you need to introduce that lifetime, otherwise <code>App</code> may outlive the handler and lead to an use-after-free of stuff like that when it calls the handler</p>\n</blockquote>\n<p>The handler functions themselves are <code>'static</code> though, I just don't want the<code>FromRequest</code> implementations to be.</p>",
        "id": 252607801,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1631186053
    },
    {
        "content": "<p>It's the same problem.</p>",
        "id": 252607856,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1631186099
    },
    {
        "content": "<p>The handlers themselves are just static functions.</p>",
        "id": 252770811,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1631273046
    },
    {
        "content": "<p>I want to allow this <code>fn foo&lt;'r&gt;(something_from_request: SomethingFromRequest&lt;'r&gt;)</code></p>",
        "id": 252770885,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1631273084
    }
]