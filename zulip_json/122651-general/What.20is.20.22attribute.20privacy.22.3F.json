[
    {
        "content": "<blockquote>\n<p>When attribute privacy is implemented, <code>Path</code> should be annotated as <code>#[repr(transparent)]</code>.</p>\n</blockquote>\n<p>â€” <a href=\"https://github.com/rust-lang/rust/blob/1.51.0/library/std/src/path.rs#L1726\">docs for <code>Path</code></a></p>",
        "id": 236393421,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1619551152
    },
    {
        "content": "<p>looks like it's from <a href=\"https://github.com/rust-lang/rust/pull/61969\">https://github.com/rust-lang/rust/pull/61969</a> but the rationale seems a bit iffy</p>",
        "id": 236393643,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1619551236
    },
    {
        "content": "<p>of course the standard library can rely on implementation details!</p>",
        "id": 236393675,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1619551248
    },
    {
        "content": "<p>Ah, <a href=\"https://github.com/rust-lang/rust/pull/61969#issuecomment-504784204\">this comment</a> provides context:</p>\n<blockquote>\n<p>marking (public) types repr(transparent) is a commitment that we may not (in the case of CStr, definitely do not) want to make</p>\n</blockquote>",
        "id": 236393954,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1619551361
    },
    {
        "content": "<p>That's why we have avoided putting the attribute and a hypothetical \"attribute privacy\" would allow adding the attribute but not expose it publicly.</p>",
        "id": 236394083,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1619551423
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 236394088,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1619551425
    },
    {
        "content": "<p>The implementation is still private, so without a documentation is is rather unclear if <code>#[repr(transparent)]</code> would be a commitment of any kind.</p>",
        "id": 236395758,
        "sender_full_name": "tm",
        "timestamp": 1619552165
    },
    {
        "content": "<p>With any luck the safe transmute work will help clarify things here, as it'll start exposing traits that are more obviously a promise (rather than just an implementation detail).</p>",
        "id": 236395862,
        "sender_full_name": "scottmcm",
        "timestamp": 1619552216
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"352985\">tm</span> <a href=\"#narrow/stream/122651-general/topic/What.20is.20.22attribute.20privacy.22.3F/near/236395758\">said</a>:</p>\n<blockquote>\n<p>The implementation is still private, so without a documentation is is rather unclear if <code>#[repr(transparent)]</code> would be a commitment of any kind.</p>\n</blockquote>\n<p>I'm not following your point. <code>repr(transparent)</code> is shown in the docs:</p>\n<p><a href=\"/user_uploads/4715/jRY8gwSIXD9L3HO-ilt8dbnJ/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/jRY8gwSIXD9L3HO-ilt8dbnJ/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/jRY8gwSIXD9L3HO-ilt8dbnJ/image.png\"></a></div><p>That seems to make it a public commitment.</p>",
        "id": 236405046,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1619556374
    },
    {
        "content": "<p>I think that, in the specific case of <code>Path</code>, we <em>don't</em> want to make a public guarantee that it's transmutable to anything. I don't quite know <em>why</em>, but that seems to be the gist of the thread <strong>Steven Fackler</strong> linked.</p>",
        "id": 236405284,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1619556473
    },
    {
        "content": "<p><code>Path</code> doesn't have any public fields so someone looking at the docs wouldn't know if there aren't secretly like 20 non-ZST fields anyway.</p>",
        "id": 236405493,
        "sender_full_name": "bjorn3",
        "timestamp": 1619556552
    },
    {
        "content": "<p>In other words it is known that the type has a transparent layout, but not what leaks through the transparent layout.</p>",
        "id": 236405594,
        "sender_full_name": "bjorn3",
        "timestamp": 1619556600
    },
    {
        "content": "<p>And I guess for <code>MaybeUninit</code>, it's generic over <code>T</code>, so it's \"obvious\" what's in there.</p>",
        "id": 236407647,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1619557299
    },
    {
        "content": "<blockquote>\n<p>if there aren't secretly like 20 non-ZST fields anyway.</p>\n</blockquote>\n<p>Wouldn't they have to be 20 ZST fields, otherwise it couldn't be transparent to start with?</p>",
        "id": 236407867,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1619557334
    },
    {
        "content": "<p>Like bjorn3 mentions, my point was that type of field could be arbitrary (including some kind of a wrapper type), and one has to examine the source code to find out what it is.</p>",
        "id": 236409672,
        "sender_full_name": "tm",
        "timestamp": 1619557748
    }
]