[
    {
        "content": "<p>I'm not sure if this is right place to ask this, but I built rustc with a custom version of LLVM, and everything works fine until I compile to wasm32-unknown-unknown. I get this error: <code>error: linker 'rust-lld' not found</code>. I can't find practically anything about this error message online. Can anyone help me with this?</p>",
        "id": 248924399,
        "sender_full_name": "James Blacklock",
        "timestamp": 1628553490
    },
    {
        "content": "<p>Linking wasm requires lld. When building llvm inside the rust build system it is normally renamed to rust-lld to prevent conflicts with the native lld version. I think you can solve this by installing lld and then setting the linker for the wasm target to lld in <code>~/.cargo/config</code>.</p>",
        "id": 248949843,
        "sender_full_name": "bjorn3",
        "timestamp": 1628581900
    },
    {
        "content": "<p>Thanks for the response! I assumed LLD would not be used for linking Wasm (I'm not actually even sure what \"linking Wasm\" means) but I will try your suggestion!</p>",
        "id": 249024455,
        "sender_full_name": "James Blacklock",
        "timestamp": 1628623615
    },
    {
        "content": "<p>\"linking wasm\" =&gt; linking one or more wasm object files to form a single wasm module that can be loaded by your code.</p>",
        "id": 249025895,
        "sender_full_name": "bjorn3",
        "timestamp": 1628624191
    },
    {
        "content": "<p>Right, but on the surface it would seem this would be a substantially different process than traditional linking of object code. But obviously I have not done a deep dive into that part of the Wasm compilation process!</p>",
        "id": 249034398,
        "sender_full_name": "James Blacklock",
        "timestamp": 1628627907
    },
    {
        "content": "<p>It turns out that it is pretty similar at least right now. The linking section of the toolchain conventions (<a href=\"https://github.com/WebAssembly/tool-conventions/blob/main/Linking.md\">https://github.com/WebAssembly/tool-conventions/blob/main/Linking.md</a>) describes that wasm object files have an extra section describing how symbols should be imported/exported and where relocations need to happen. The linker only needs to parse the high level structure of wasm object files, not the actual function bodies.</p>",
        "id": 249035475,
        "sender_full_name": "bjorn3",
        "timestamp": 1628628475
    },
    {
        "content": "<p>Note that these are mere conventions. The LLVM toolchain follows them, but other toolchains are allowed to do their own thing, be it using a different format or be it directly emitting a complete wasm module from the compiler.</p>",
        "id": 249035653,
        "sender_full_name": "bjorn3",
        "timestamp": 1628628558
    },
    {
        "content": "<p>That's some great info. Thank you very much!</p>",
        "id": 249039102,
        "sender_full_name": "James Blacklock",
        "timestamp": 1628630212
    }
]