[
    {
        "content": "<p>Why do bound checks panic instead of aborting ?</p>",
        "id": 175517084,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568284967
    },
    {
        "content": "<p>Why pick out bounds checks? You could just as well ask the same for most programming errors (~= sources of panics), right?</p>",
        "id": 175517745,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1568285764
    },
    {
        "content": "<p>Well an access out-of-bounds is a classic instance of undefined behavior in C</p>",
        "id": 175518715,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568286692
    },
    {
        "content": "<p>So the minimal solution to avoid this undefined behavior would be to just abort the process, as opposed to doing something more complex, like unwinding</p>",
        "id": 175518774,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568286731
    },
    {
        "content": "<p>Other sources of panics, like OOM, aren't necessary due to undefined behavior</p>",
        "id": 175518793,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568286773
    },
    {
        "content": "<p>For context, I was looking at how we implement the bound checks: <a href=\"https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src/libcore/panicking.rs#L55\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src/libcore/panicking.rs#L55\">https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src/libcore/panicking.rs#L55</a></p>",
        "id": 175519025,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568287061
    },
    {
        "content": "<p>There appears to be a libcore feature that does just that</p>",
        "id": 175519223,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568287266
    },
    {
        "content": "<p>you can turn all panics into aborts</p>",
        "id": 175519923,
        "sender_full_name": "oli",
        "timestamp": 1568288018
    },
    {
        "content": "<p>not sure if you can turn just some of them</p>",
        "id": 175519929,
        "sender_full_name": "oli",
        "timestamp": 1568288027
    },
    {
        "content": "<p>the reason some of them are panics is that things like servo want each tab to fail in the worst case via a panic</p>",
        "id": 175519993,
        "sender_full_name": "oli",
        "timestamp": 1568288084
    },
    {
        "content": "<p>instead of terminating the entire browser</p>",
        "id": 175519998,
        "sender_full_name": "oli",
        "timestamp": 1568288098
    },
    {
        "content": "<p>Yes the libcore feature applies to all panics</p>",
        "id": 175520911,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568288917
    },
    {
        "content": "<p>Turning them into aborts does not make a big difference code-size wise</p>",
        "id": 175521854,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568289763
    },
    {
        "content": "<p>That libcore feature makes quite a difference</p>",
        "id": 175521866,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568289786
    },
    {
        "content": "<p>TIL</p>",
        "id": 175521873,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568289796
    },
    {
        "content": "<blockquote>\n<p>Well an access out-of-bounds is a classic instance of undefined behavior in C</p>\n</blockquote>\n<p>This seems to come from a perspective that's entirely alien to me. Rust isn't \"C with the UB papered over minimally\", it's its own language with its own design decisions. Signed int overflow is also UB in C, but Rust alternatively makes it defined or panic instead of aborting.</p>",
        "id": 175522624,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1568290445
    },
    {
        "content": "<p>I wasn't suggesting that Rust is C. I was wondering why the particular trade-off of panicking was picked up for this.</p>",
        "id": 175523126,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568290880
    },
    {
        "content": "<p>The difference between <code>-C panic=abort</code>/<code>-C panic=unwind</code> and <code>libcore+panic_immediate_abort</code> is quite large</p>",
        "id": 175523228,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568290982
    },
    {
        "content": "<p>A reasonable question, I'm just mildly confused by the C reference if the was the point you wanted to make, as it's entirely unrelated.</p>",
        "id": 175523243,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1568291001
    },
    {
        "content": "<p>I wouldn't know how to actually implement a panic runtime that behaves like <code>panic_immediate_abort</code></p>",
        "id": 175523264,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568291030
    },
    {
        "content": "<p>Probably most of the code size difference is in not needing the panic message (assuming LTO or if you're only measuring libcore code size)</p>",
        "id": 175523334,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1568291078
    },
    {
        "content": "<p>Yes, I think it might suffice to allow users to specify whether their panic hooks should be inline or not.</p>",
        "id": 175523382,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568291146
    },
    {
        "content": "<p>I don't follow</p>",
        "id": 175523437,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1568291166
    },
    {
        "content": "<p>When calling the core::panic:: APIs that panic, the panic message formatting is implemented within them, most of the message is only stored once per binary</p>",
        "id": 175523495,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568291232
    },
    {
        "content": "<p>On the call site, we store the line number as a string in static memory</p>",
        "id": 175523532,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568291280
    },
    {
        "content": "<p>since the panic methods are <code>#[inline(never)]</code>, an implementation that would just <code>abort</code> without printing anything would still contain that (line number, file name, passing those to the call, etc.)</p>",
        "id": 175523593,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568291310
    },
    {
        "content": "<p>What <code>panic_immediate_abort</code> does is it makes these methods in <code>libcore</code> <code>#[inline]</code></p>",
        "id": 175523614,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568291342
    },
    {
        "content": "<p>These methods don't use the static data for anything, and LLVM removes it</p>",
        "id": 175523637,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568291356
    },
    {
        "content": "<p>Inlining's not main/only point though, it also has to actually ignore the panic hook (which can be set dynamically and do anything with the PanicInfo).</p>",
        "id": 175523742,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1568291431
    },
    {
        "content": "<p>You can't just <code>#[inline]</code> it and let it call the hook and get the code size benefits because LLVM can't know what the panic hook does.</p>",
        "id": 175523779,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1568291488
    },
    {
        "content": "<p>I did not know that it could be set dynamically.</p>",
        "id": 175523919,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568291617
    },
    {
        "content": "<p>I thought that the <code>panic_impl</code> lang item just dispatched to <code>#[panic_handler]</code></p>",
        "id": 175523935,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568291635
    },
    {
        "content": "<p>How the panic is eventually resolved (aborting, unwinding, etc.) is decided by the panic_handler. The panic_hook gets to look at the panic message and decide to print it (default), log it, silently swallow it, etc.</p>",
        "id": 175524013,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1568291698
    },
    {
        "content": "<p>Wait no, that's not quite right</p>",
        "id": 175524134,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1568291780
    },
    {
        "content": "<p>Oh nvm it is, I was just looking at the wrong part of <a href=\"http://panicking.rs\" target=\"_blank\" title=\"http://panicking.rs\">panicking.rs</a></p>",
        "id": 175524240,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1568291869
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nomicon/panic-handler.html\" target=\"_blank\" title=\"https://doc.rust-lang.org/nomicon/panic-handler.html\">https://doc.rust-lang.org/nomicon/panic-handler.html</a></p>",
        "id": 175524299,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568291888
    },
    {
        "content": "<p>That says that such a function must only appear once in the dependency graph of a crate</p>",
        "id": 175524317,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568291909
    },
    {
        "content": "<p>I think that the methods in <code>panicking.rs</code> just import the symbol using <code>extern \"Rust\" { ... }</code></p>",
        "id": 175524332,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568291928
    },
    {
        "content": "<p>I think that without LTO you are right in that it inlining the functions of panicking wouldn't be enough</p>",
        "id": 175524362,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568291963
    },
    {
        "content": "<p>but I would hope that LTO would inline the <code>#[panic_handler]</code> there</p>",
        "id": 175524390,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568291995
    },
    {
        "content": "<p>and if the panic handler doesn't use the panic message for anything, that the panic messages are discarded</p>",
        "id": 175524454,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568292019
    },
    {
        "content": "<p>Ah wait, this exists: <a href=\"https://doc.rust-lang.org/std/panic/fn.set_hook.html\" target=\"_blank\" title=\"https://doc.rust-lang.org/std/panic/fn.set_hook.html\">https://doc.rust-lang.org/std/panic/fn.set_hook.html</a></p>",
        "id": 175524494,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568292073
    },
    {
        "content": "<p>Ohhhhhhhh</p>",
        "id": 175524577,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1568292150
    },
    {
        "content": "<p>I mixed up panic_handler and panic_runtime</p>",
        "id": 175524584,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1568292157
    },
    {
        "content": "<p>I thought I knew how this worked, but now I'm confused. Is there a summary somewhere explaining how this works ?</p>",
        "id": 175524601,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568292187
    },
    {
        "content": "<p>panic_handler is only available for applications that don't link in libstd anywhere and allows bypassing the hook (which doesn't exist at all w/o std) and other infrastructure.</p>",
        "id": 175524616,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1568292200
    },
    {
        "content": "<p>So when is the hook called ?</p>",
        "id": 175524641,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568292230
    },
    {
        "content": "<p>panic runtime is what allows customizing abort/unwind/etc. in an application using libstd, but can't bypass the panic hook</p>",
        "id": 175524645,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1568292232
    },
    {
        "content": "<p>That should be this: <a href=\"https://github.com/rust-lang/rust/blob/9ebf47851a357faa4cd97f4b1dc7835f6376e639/src/libpanic_abort/lib.rs\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/9ebf47851a357faa4cd97f4b1dc7835f6376e639/src/libpanic_abort/lib.rs\">https://github.com/rust-lang/rust/blob/9ebf47851a357faa4cd97f4b1dc7835f6376e639/src/libpanic_abort/lib.rs</a></p>",
        "id": 175524698,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568292251
    },
    {
        "content": "<p>(for the abort run-time)</p>",
        "id": 175524711,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568292266
    },
    {
        "content": "<p>I'm reluctant to answer because I was so wrong before, but AFAIK: the hook is called in libstd's panic_handler, <em>before</em> entering the panic runtime (what you linked, for panic=abort)</p>",
        "id": 175524726,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1568292285
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/9ebf47851a357faa4cd97f4b1dc7835f6376e639/src/libstd/panicking.rs#L381\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/9ebf47851a357faa4cd97f4b1dc7835f6376e639/src/libstd/panicking.rs#L381\">https://github.com/rust-lang/rust/blob/9ebf47851a357faa4cd97f4b1dc7835f6376e639/src/libstd/panicking.rs#L381</a></p>",
        "id": 175524858,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568292400
    },
    {
        "content": "<p>I think now I get it, the hook is called there</p>",
        "id": 175524869,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568292410
    },
    {
        "content": "<p>So to get back to the original topic, a custom <code>panic_handler</code> that ignores the &amp;PanicInfo argument gets you all the code size benefits (with LTO), but you can't do that if libstd is present anywhere in your application.</p>",
        "id": 175524903,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1568292441
    },
    {
        "content": "<p>Yes, that sounds about right.</p>",
        "id": 175524916,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568292455
    },
    {
        "content": "<p>libstd also has the same cargo feature as libcore, to opt out of this</p>",
        "id": 175525033,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568292527
    },
    {
        "content": "<p>I wonder why libstd needs to keep track of the panic count</p>",
        "id": 175525159,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568292640
    },
    {
        "content": "<p>I thought this would be done in the panic run-time itself</p>",
        "id": 175525176,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568292653
    },
    {
        "content": "<p>idk</p>",
        "id": 175525203,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1568292683
    },
    {
        "content": "<p>Maybe historical cruft</p>",
        "id": 175525204,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1568292687
    },
    {
        "content": "<p>Like, i can't find a panic count in libcore</p>",
        "id": 175525218,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568292709
    },
    {
        "content": "<p>But I'd expect that to be required to detect double panics</p>",
        "id": 175525286,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568292734
    },
    {
        "content": "<p>maybe that's handled by libunwind</p>",
        "id": 175525448,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568292848
    },
    {
        "content": "<p>Unwinding requires libstd anyway I think</p>",
        "id": 175525461,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1568292863
    },
    {
        "content": "<p>I mean, going without libstd and defining a panic_handler that unwinds is entirely unsupported</p>",
        "id": 175525483,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1568292889
    },
    {
        "content": "<p>The only supported unwinding is the panic=unwind runtime and that's a runtime, not a handler, so you'll only get it by using libstd</p>",
        "id": 175525534,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1568292925
    },
    {
        "content": "<p>Ah that explains it. I thought that one could build a <code>#![no_std]</code> binary not only with <code>-C panic=abort</code> but also wit h<code>-C panic=unwind</code> by only linking the libpanic_unwind crate, and not libstd</p>",
        "id": 175525802,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568293142
    }
]