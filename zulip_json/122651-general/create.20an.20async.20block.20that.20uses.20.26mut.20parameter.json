[
    {
        "content": "<p>I know the general recommendation here is \"ask in discord\" but I've asked and it's slow today :P and also this might be an interesting problem for people here.</p>\n<p>I'm getting an error I don't quite understand. My code looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">get_as_bytes</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">key</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">get_with_retries</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">key</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">conn</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">conn</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">get_with_retries</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Fut</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">key</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">create_get_fut</span>: <span class=\"nc\">F</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">Fut</span>: <span class=\"nc\">Future</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">io</span>::<span class=\"n\">Error</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">F</span>: <span class=\"nb\">FnMut</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">Protocol</span><span class=\"o\">&lt;</span><span class=\"n\">S</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Fut</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"c1\">// ... this bit compiles fine</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and the error I see is</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span>: <span class=\"nc\">lifetime</span><span class=\"w\"> </span><span class=\"n\">may</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">live</span><span class=\"w\"> </span><span class=\"n\">long</span><span class=\"w\"> </span><span class=\"n\">enough</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">src</span><span class=\"o\">/</span><span class=\"n\">memcached</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">107</span>:<span class=\"mi\">13</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">106</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">         </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">get_with_retries</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">key</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">conn</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">                                                       </span><span class=\"o\">-</span><span class=\"w\">     </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">of</span><span class=\"w\"> </span><span class=\"n\">closure</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">futures</span>::<span class=\"n\">Future</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">result</span>::<span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">io</span>::<span class=\"n\">Error</span><span class=\"o\">&gt;&gt;</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">contains</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">lifetime</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">'</span><span class=\"mi\">2</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">                                                       </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">                                                       </span><span class=\"kd\">let</span><span class=\"o\">'</span><span class=\"na\">s</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">lifetime</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">reference</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">'</span><span class=\"mi\">1</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"mi\">107</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">             </span><span class=\"n\">conn</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">             </span><span class=\"o\">^^^^^^^^^^^^^</span><span class=\"w\"> </span><span class=\"n\">returning</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"n\">requires</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">'</span><span class=\"mi\">1</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">must</span><span class=\"w\"> </span><span class=\"n\">outlive</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">'</span><span class=\"mi\">2</span><span class=\"err\">`</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I think the issue here is that <code>conn</code> is tied to the lifetime of the future? Is there a way to let the compiler know that it's ok for <code>conn</code> to be unusable in the parent until I call <code>await</code> on the future?</p>\n<p>What I really want is something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">get_with_retries</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Fut</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">key</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">create_get_fut</span>: <span class=\"nc\">F</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">Fut</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span>: <span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">Future</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">io</span>::<span class=\"n\">Error</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">F</span>: <span class=\"nc\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">FnMut</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">Protocol</span><span class=\"o\">&lt;</span><span class=\"n\">S</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Fut</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</code></pre></div>\n<p>but that's invalid syntax.</p>",
        "id": 275861010,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1647636681
    },
    {
        "content": "<p>the reason I'm using a closure is because I do actually use the <code>Protocol</code> variable later in <code>get_with_retries</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">                    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">is_connection_error</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">retries</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">warn</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"retrying memcached connection failure: {} (during {})\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">key</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">retries</span><span class=\"w\"> </span><span class=\"o\">-=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"o\">*</span><span class=\"n\">conn</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Protocol</span>::<span class=\"n\">new</span><span class=\"p\">((</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">connector</span><span class=\"p\">)().</span><span class=\"k\">await</span><span class=\"o\">?</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"k\">continue</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and so it's not sufficient to just call <code>self.conn.lock()</code> in the parent, because then it will deadlock when trying to retry the connection.</p>",
        "id": 275861246,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1647636791
    },
    {
        "content": "<p><del>have you tried asking on Discord</del> /s</p>",
        "id": 275861417,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1647636893
    },
    {
        "content": "<p>More usefully, I'd suggest making a MRE.\u0010 Lowering the activation energy for someone to play with the code often helps.</p>",
        "id": 275861604,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1647637000
    },
    {
        "content": "<p>For example, I have 4 minutes to try and help, but would probably use that up trying to make the code make the error in the playground, so instead I'm blabbing here.</p>",
        "id": 275861662,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1647637035
    },
    {
        "content": "<p>If you are lucky, you'll be graced by a visit from <strong>Daniel Henry-Mantilla</strong> themselves <span aria-label=\"angel\" class=\"emoji emoji-1f47c\" role=\"img\" title=\"angel\">:angel:</span></p>",
        "id": 275861866,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1647637129
    },
    {
        "content": "<p>Wild suggestion, change <code>move |conn: &amp;mut _|</code> to <code>move |conn|</code>.</p>",
        "id": 275861961,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1647637200
    },
    {
        "content": "<p>doesn't help unfortunately</p>",
        "id": 275862088,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1647637223
    },
    {
        "content": "<p>And maybe look at some of the workarounds mentioned in <a href=\"https://github.com/rust-lang/rfcs/pull/3216\">https://github.com/rust-lang/rfcs/pull/3216</a></p>",
        "id": 275862148,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1647637262
    },
    {
        "content": "<p>mcve: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=96674160a310f8ff0a931e5b03ac6cde\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=96674160a310f8ff0a931e5b03ac6cde</a></p>",
        "id": 275862530,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1647637460
    },
    {
        "content": "<p>ok, if it helps I removed all the closures and used functions instead, and the errors are <em>more</em> confusing now: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=01b79335bae7d609e708c2b666dcebd5\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=01b79335bae7d609e708c2b666dcebd5</a></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0308</span><span class=\"p\">]</span>: <span class=\"nc\">mismatched</span><span class=\"w\"> </span><span class=\"n\">types</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">src</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">32</span>:<span class=\"mi\">11</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">32</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">get_with_retries</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">key</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">get</span><span class=\"p\">).</span><span class=\"k\">await</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">           </span><span class=\"o\">^^^^^^^^^^^^^^^^</span><span class=\"w\"> </span><span class=\"n\">lifetime</span><span class=\"w\"> </span><span class=\"n\">mismatch</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">expected</span><span class=\"w\"> </span><span class=\"n\">associated</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"err\">`</span><span class=\"o\">&lt;</span><span class=\"k\">for</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">Connection</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">Future</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">io</span>::<span class=\"n\">Error</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">get_as_bytes</span>::<span class=\"p\">{</span><span class=\"n\">closure</span>#<span class=\"mi\">0</span><span class=\"p\">}</span>::<span class=\"n\">get</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"nb\">FnOnce</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">Connection</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"o\">&gt;&gt;</span>::<span class=\"n\">Output</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">              </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"n\">associated</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"err\">`</span><span class=\"o\">&lt;</span><span class=\"k\">for</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">Connection</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">Future</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">io</span>::<span class=\"n\">Error</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">get_as_bytes</span>::<span class=\"p\">{</span><span class=\"n\">closure</span>#<span class=\"mi\">0</span><span class=\"p\">}</span>::<span class=\"n\">get</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"nb\">FnOnce</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">Connection</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"o\">&gt;&gt;</span>::<span class=\"n\">Output</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">the</span><span class=\"w\"> </span><span class=\"n\">required</span><span class=\"w\"> </span><span class=\"n\">lifetime</span><span class=\"w\"> </span><span class=\"n\">does</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">necessarily</span><span class=\"w\"> </span><span class=\"n\">outlive</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">empty</span><span class=\"w\"> </span><span class=\"n\">lifetime</span><span class=\"w\"></span>\n<span class=\"n\">note</span>: <span class=\"nc\">the</span><span class=\"w\"> </span><span class=\"n\">lifetime</span><span class=\"w\"> </span><span class=\"n\">requirement</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">introduced</span><span class=\"w\"> </span><span class=\"n\">here</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">src</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">13</span>:<span class=\"mi\">44</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">13</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">         </span><span class=\"n\">F</span>: <span class=\"nb\">FnMut</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">Connection</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Fut</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">                                            </span><span class=\"o\">^^^</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 275862978,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1647637715
    },
    {
        "content": "<p>@kpreid on discord suggests that FnMut isn't flexible enough because it doesn't allow the output Future to borrow from the input, and that I should write my own trait</p>",
        "id": 275864141,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1647638274
    },
    {
        "content": "<p>ended up having to box the future but it works now :) <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=dc29246e9bca8dae6a2ee7dc64826453\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=dc29246e9bca8dae6a2ee7dc64826453</a></p>",
        "id": 275866006,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1647639475
    },
    {
        "content": "<p>Try passing -Zverbose to rustc. That will among other things show the internal representation of placeholder lifetimes, which can help disambiguating them.</p>",
        "id": 275869944,
        "sender_full_name": "bjorn3",
        "timestamp": 1647642267
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">check</span><span class=\"o\">&lt;</span><span class=\"n\">F</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Fut</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">F</span>: <span class=\"nc\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">Fn</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"p\">())</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Fut</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>My understanding is this bound doesn't (and shouldn't) allow <code>Fut</code>to borrow from <code>'a</code> , since it is a single type variable that applies forall&lt;'a&gt;.<br>\nYou probably want to write instead:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">check</span><span class=\"o\">&lt;</span><span class=\"n\">F</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">F</span>: <span class=\"nc\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">Fn</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"p\">(),)</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">F</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"nb\">Fn</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"p\">(),)</span><span class=\"o\">&gt;</span>::<span class=\"n\">Output</span>: <span class=\"nc\">Future</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>but unboxed_closures is unstable and and hrtb on projections is buggy. For this reason,  an new trait with a blanket impl is  necessary:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">AsyncFnMut</span><span class=\"o\">&lt;</span><span class=\"n\">Args</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Output</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Future</span>: <span class=\"nc\">Future</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">Self</span>::<span class=\"n\">Output</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">call</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"n\">Future</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">F</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Fut</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">AsyncFnMut</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,)</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">F</span>: <span class=\"nb\">FnMut</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Fut</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Fut</span>: <span class=\"nc\">Future</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Fut</span>::<span class=\"n\">Output</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Future</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Fut</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">call</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">arg1</span><span class=\"p\">,)</span>: <span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,))</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"n\">Future</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 275904456,
        "sender_full_name": "Ali MJ Al-Nasrawy",
        "timestamp": 1647688018
    },
    {
        "content": "<p>then  the bound can be expressed as </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">check</span><span class=\"o\">&lt;</span><span class=\"n\">F</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">F</span>: <span class=\"nc\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">AsyncFnMut</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"p\">(),),</span><span class=\"w\"> </span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 275904548,
        "sender_full_name": "Ali MJ Al-Nasrawy",
        "timestamp": 1647688168
    },
    {
        "content": "<p>Heh, saw the post on Discord before this one, so I answered <a href=\"https://discord.com/channels/273534239310479360/616791170340880404/954731648270893127\">over Discord</a> <span aria-label=\"see no evil\" class=\"emoji emoji-1f648\" role=\"img\" title=\"see no evil\">:see_no_evil:</span> :</p>\n<p><span class=\"user-mention silent\" data-user-id=\"232018\">Daniel Henry-Mantilla</span> <a href=\"https://discord.com/channels/273534239310479360/616791170340880404/954731648270893127\">said</a>:</p>\n<blockquote>\n<ul>\n<li>\n<p>Removing the last clone but passing <code>key</code>:<br>\n   &lt;<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=7d2297ce9579f838a6af048685d4c55b\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=7d2297ce9579f838a6af048685d4c55b</a>&gt;</p>\n</li>\n<li>\n<p>Removing it and not passing it:<br>\n   &lt;<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=4ee34e322e7161f85581da26e5b43782\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=4ee34e322e7161f85581da26e5b43782</a>&gt;</p>\n</li>\n</ul>\n<p>(see <a href=\"https://users.rust-lang.org/t/argument-requires-that-is-borrowed-for-static/66503/2?u=yandros\">https://users.rust-lang.org/t/argument-requires-that-is-borrowed-for-static/66503/2?u=yandros</a> for more info about it)</p>\n<p>Basically you don't need to pass <code>key</code>, but you need to pass some lifetime parameter, such as the <code>'key</code> in <code>&amp;'key</code>, to act as an upper-bound on the universal quantification of <code>for&lt;&gt;</code>, so that it does convey <code>for&lt;'local&gt;</code> semantics only, and not also the <code>for&lt;'a which could also be 'static&gt;</code> default semantics</p>\n</blockquote>",
        "id": 275929850,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1647724222
    },
    {
        "content": "<p>(We need <code>where</code> clauses inside <code>for</code> quantifications so badly <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span>)</p>",
        "id": 275929876,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1647724297
    },
    {
        "content": "<p>(with those your fix would just be:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gd\">- for&lt;'any&gt; F : Fn...</span><span class=\"w\"></span>\n<span class=\"gi\">+ for&lt;'local where 'upper_bounded : 'local&gt; F : Fn...</span><span class=\"w\"></span>\n</code></pre></div>\n<p>)</p>",
        "id": 275929947,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1647724381
    }
]