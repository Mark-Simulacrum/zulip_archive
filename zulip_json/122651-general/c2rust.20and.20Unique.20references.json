[
    {
        "content": "<p>Hi I've been playing with c2rust all day, which worked pretty awesome. but then I ran Miri(<span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> ) and saw <code>trying to reborrow for SharedReadWrite, but parent tag &lt;untagged&gt; does not have an appropriate item in the borrow stack</code> <br>\nwhen I realized that this is probably because rust doesn't allow 2 mutable(unique) references to the same object, so a common C pattern like:</p>\n<div class=\"codehilite\"><pre><span></span>multiply(result: *mut T, a: *mut T, b: *mut T);\nmultiply(&amp;mut a, &amp;mut a, &amp;mut b);\n</pre></div>\n\n\n<p>is just not allowed in rust if <code>result</code> and <code>a</code> are deferenced together.  ( while writing started to wonder if it's possible to use<code>ptr::read</code> and <code>ptr:write</code> for that)</p>",
        "id": 187764168,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1581265325
    },
    {
        "content": "<p>Thinking about it more, read+write isn't enough, sometimes you want to access fields and that's not possible without creating a reference</p>",
        "id": 187764182,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1581265384
    },
    {
        "content": "<p>The language feature for this not in stable Rust yet, so it would be unreasonable to expect c2rust to use it, but the Right Solution (eventually) is to never create references, always work with raw pointers, using <code>&amp;mut raw</code> / <code>&amp;const raw</code> for operations such as taking pointers and projecting through pointers.</p>",
        "id": 187764570,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1581266058
    },
    {
        "content": "<p>Right I've seen people use it. <br>\none thing I don't like is that it makes it harder to understand what the heck a dereference is.<br>\nie <code>let a:&amp;raw T = &amp;raw *t;</code> like is this safe or unsafe? what did it dereference to? can t be null/dangling?</p>",
        "id": 187765064,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1581267023
    },
    {
        "content": "<p>it's unsafe if you try to write it outside of an unsafe block and get told you can't.</p>",
        "id": 187766659,
        "sender_full_name": "Lokathor",
        "timestamp": 1581270318
    },
    {
        "content": "<p>More helpfully, it depends on what type <code>t</code> is.</p>\n<p>if t is a reference it's safe (and will never dangle of course)<br>\nif t is a raw pointer it's unsafe (and yes it might be null or dangle)</p>",
        "id": 187766720,
        "sender_full_name": "Lokathor",
        "timestamp": 1581270472
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> So you're saying that <code>let t: *const T; let r = &amp;raw *t</code> requires that t points to a valid T just like <code>&amp;*t</code> requires? the only difference is that it doesn't create a shared reference?</p>",
        "id": 187800447,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1581327518
    },
    {
        "content": "<p>My understanding is that you'd be able to write that and it would create a raw pointer <code>r</code> based on the raw pointer <code>t</code>, in this case <code>r</code> would just end up pointing to what <code>t</code> is pointing to.</p>\n<p>However I think that the raw syntax isn't even implemented in Nightly yet, so I don't want to get too carried away with fine details here, because they might change during the implementation and stabilization.</p>",
        "id": 187830044,
        "sender_full_name": "Lokathor",
        "timestamp": 1581351121
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"249222\">@Elichai Turkel</span> do you have a minimal example that runs on the playground? that makes it easier to figure out what is going on</p>",
        "id": 187839738,
        "sender_full_name": "RalfJ",
        "timestamp": 1581357351
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> So you're saying that <code>let t: *const T; let r = &amp;raw *t</code> requires that t points to a valid T just like <code>&amp;*t</code> requires? the only difference is that it doesn't create a shared reference?</p>\n</blockquote>\n<p>for now, yes</p>",
        "id": 187841950,
        "sender_full_name": "RalfJ",
        "timestamp": 1581358732
    },
    {
        "content": "<p>not creating a shared ref means it doesnt have to be readonly, etc</p>",
        "id": 187841977,
        "sender_full_name": "RalfJ",
        "timestamp": 1581358754
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> <code>&amp;raw</code> is implemented in nightly :)</p>",
        "id": 187841993,
        "sender_full_name": "RalfJ",
        "timestamp": 1581358768
    },
    {
        "content": "<p>in the future we probably will want to relax the rules around deref so that <code>&amp;raw (*var).field</code> doesnt require anything to be a valid instance of anything</p>",
        "id": 187842082,
        "sender_full_name": "RalfJ",
        "timestamp": 1581358807
    },
    {
        "content": "<p>ah excellent!</p>",
        "id": 187842088,
        "sender_full_name": "Lokathor",
        "timestamp": 1581358813
    },
    {
        "content": "<p>but I am not sure yet what the most elegant way is to state this...</p>",
        "id": 187842115,
        "sender_full_name": "RalfJ",
        "timestamp": 1581358828
    },
    {
        "content": "<p>seems easy if you don't run a deref impl</p>",
        "id": 187842156,
        "sender_full_name": "Lokathor",
        "timestamp": 1581358865
    },
    {
        "content": "<p>and not easy otherwise</p>",
        "id": 187842165,
        "sender_full_name": "Lokathor",
        "timestamp": 1581358869
    },
    {
        "content": "<p>well we still want <code>&amp;(*raw).field</code> to require validity... maybe? or not?</p>",
        "id": 187842294,
        "sender_full_name": "RalfJ",
        "timestamp": 1581358937
    },
    {
        "content": "<p>having deref semantics depend on the surrounding <code>&amp;</code> vs <code>&amp;raw</code> seems really ugly though</p>",
        "id": 187842315,
        "sender_full_name": "RalfJ",
        "timestamp": 1581358958
    },
    {
        "content": "<p>also I am thinking on the MIR level, there is no deref impl</p>",
        "id": 187842349,
        "sender_full_name": "RalfJ",
        "timestamp": 1581358982
    },
    {
        "content": "<p>those are already lowered to fn calls</p>",
        "id": 187842354,
        "sender_full_name": "RalfJ",
        "timestamp": 1581358988
    },
    {
        "content": "<p>well if <code>&amp;(*raw).field</code> makes <code>&amp;F</code> it has to point to valid since all references must. If it makes <code>*const F</code> then it doesn't have to point to anything.</p>",
        "id": 187842521,
        "sender_full_name": "Lokathor",
        "timestamp": 1581359111
    },
    {
        "content": "<p>so <code>&amp;raw (*x).field</code> can point to invalid</p>",
        "id": 187842558,
        "sender_full_name": "Lokathor",
        "timestamp": 1581359150
    },
    {
        "content": "<p>but <code>&amp;(*x).field</code> must be valid</p>",
        "id": 187842617,
        "sender_full_name": "Lokathor",
        "timestamp": 1581359173
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> we were talking about the deref, not the ref, I thought</p>",
        "id": 187842658,
        "sender_full_name": "RalfJ",
        "timestamp": 1581359209
    },
    {
        "content": "<p>so, the <code>*x</code> subexpression of this, what exactly are its proof obligations? <code>x</code> must be non-null and aligned for sure. and probably also dereferencable. and maybe point to a valid <code>T</code>?</p>",
        "id": 187842720,
        "sender_full_name": "RalfJ",
        "timestamp": 1581359256
    },
    {
        "content": "<blockquote>\n<p>well we still want <code>&amp;(*raw).field</code> to require validity... maybe? or not?</p>\n</blockquote>\n<p>i was responding to this thought here. Im saying that we shoud want that to require validity there</p>",
        "id": 187842740,
        "sender_full_name": "Lokathor",
        "timestamp": 1581359271
    },
    {
        "content": "<p>well... we might <em>not</em> want to require all references to point to a valid <code>T</code> even when unused. and if we go down that route, I dont think there is anything in that expression that makes such an obligation arise.</p>",
        "id": 187842861,
        "sender_full_name": "RalfJ",
        "timestamp": 1581359335
    },
    {
        "content": "<p>as to *x on its own, honestly the point of a lot of this is for maybe uninit, so reading it as just *x is probably the wrong design because then you couldn't initialize fields individually of a MaybeUninit (if i follow you correctly)</p>",
        "id": 187842919,
        "sender_full_name": "Lokathor",
        "timestamp": 1581359381
    },
    {
        "content": "<p>the behavior of a compung expression like <code>&amp;raw (*x).field</code> ought to be defined by defining all of its pieces separately</p>",
        "id": 187843323,
        "sender_full_name": "RalfJ",
        "timestamp": 1581359657
    },
    {
        "content": "<p>if we cant do that we'll just end up with a mess</p>",
        "id": 187843343,
        "sender_full_name": "RalfJ",
        "timestamp": 1581359671
    },
    {
        "content": "<p>though to do this we will have to be more explicit about place-to-value coercion... let's call it <code>load</code></p>",
        "id": 187843411,
        "sender_full_name": "RalfJ",
        "timestamp": 1581359701
    },
    {
        "content": "<p>which there are none here (well, <code>x</code> is really <code>load(x)</code> but that's trivial), but in <code>let val = *x</code> there's one: <code>let val = load(*x)</code></p>",
        "id": 187843431,
        "sender_full_name": "RalfJ",
        "timestamp": 1581359710
    },
    {
        "content": "<p>if <code>*x</code> doesn't need to be valid <em>until you load it</em> that probably works out.</p>\n<p>Then <code>(*x).field</code> is<br>\n\"follow the address of X to a place, then offset to the sub-place of the particular field\"</p>",
        "id": 187845297,
        "sender_full_name": "Lokathor",
        "timestamp": 1581360400
    },
    {
        "content": "<blockquote>\n<p>the behavior of a compung expression like <code>&amp;raw (*x).field</code> ought to be defined by defining all of its pieces separately</p>\n</blockquote>\n<p>I 100% agree. that was my main complaint. the behavior of <code>*x</code> cannot(imo) be defined by if it has <code>&amp;</code> or <code>&amp;raw</code> before it.<br>\nmaybe we can change the syntax though? and not have the <code>*</code> operation when creating raw \"references\". not sure how it would look though</p>\n<p>Personally I prefer to stick with the common well known \"deference requires the pointer to be a valid aligned pointer to an existing object\" and just not use dereferencing in raw references</p>",
        "id": 187895688,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1581413509
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"249222\">Elichai Turkel</span> do you have a minimal example that runs on the playground? that makes it easier to figure out what is going on</p>\n</blockquote>\n<p>I was able to get it down to this minimal example: <a href=\"https://play.rust-lang.org/?edition=2018&amp;gist=ee4b825dc44c918c6fc8c9fb58810bfa\" target=\"_blank\" title=\"https://play.rust-lang.org/?edition=2018&amp;gist=ee4b825dc44c918c6fc8c9fb58810bfa\">https://play.rust-lang.org/?edition=2018&amp;gist=ee4b825dc44c918c6fc8c9fb58810bfa</a> (obviously the real code is more contrived but it all starts because of 2 mutable references to the same place)</p>\n<p>I can try going over c2rust output and replace all unneeded mutable references with shared references, but idk if it will be possible in all places where 2 mutable references to the same place are created.</p>",
        "id": 187897577,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1581415173
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"249222\">@Elichai Turkel</span> Requiring all pointers to be aligned and valid is just unacceptable, because then there is no way to get to fields.</p>",
        "id": 187930185,
        "sender_full_name": "Lokathor",
        "timestamp": 1581440173
    },
    {
        "content": "<p>Giving two different interpretations to place expressions depending on what context they are used is not a very elegant formalism, but since this context always comes from the immediate syntactic surroundings it does not actually cause any technical problems. While the potential for confusion when reading code is important, inventing a whole second set of syntax doesn't sound like it's an obvious improvement, especially given that expressions like <code>(*raw_ptr).field</code> are already wide-spread and should presumably have just as few restrictions on <code>raw_ptr</code> as whatever new syntax gets introduced.</p>",
        "id": 187930822,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1581440603
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> they can. Just not when dereferencing.<br>\nMy point is that dereferencing a raw pointer and creating a reference should be a different operation than creating a \"raw reference\"</p>\n<p>(honestly I'm not quite sure why we to add raw references and we can't just implement all the needed functionality on pointers)</p>",
        "id": 187931554,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1581441041
    },
    {
        "content": "<p>There's no \"raw references\". There's just an operator to create a raw pointer to a memory location, immediately, without involving a reference at all. Describing the memory location in question can involve many nested operations, not just dereferencing, regardless of what you wind up doing with the memory location (taking a reference, taking a raw pointer, reading data directly, writing data directly, etc.). For example, consider <code>&amp;mut raw (*ptr).data[1]</code> where <code>ptr: *mut Foo</code> with <code>struct Foo { header: u16, data: [u64; 8] }</code>.</p>",
        "id": 187932751,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1581441754
    },
    {
        "content": "<p>Yes, to be clear, <code>&amp;raw</code> isn't some new data type, it's just the way to immediately make *const T instead of making &amp;T and then having it be coerced to *const T by usage.</p>",
        "id": 187933431,
        "sender_full_name": "Lokathor",
        "timestamp": 1581442176
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> Why not allow doing <code>ptr.field</code>, which will create a raw pointer to the field?</p>",
        "id": 187994420,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1581500432
    },
    {
        "content": "<p>This is a pretty wide design space of what could have happened.</p>\n<p>Long story short, we got <code>&amp;raw</code> and that's what we got.</p>",
        "id": 187994631,
        "sender_full_name": "Lokathor",
        "timestamp": 1581500644
    },
    {
        "content": "<p>Yeah I guess it's too late to do any major change here</p>",
        "id": 187994687,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1581500683
    },
    {
        "content": "<p>Not too late, just has a higher hill to climb.</p>",
        "id": 188011393,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1581515775
    },
    {
        "content": "<p>It's not stable yet.</p>",
        "id": 188011410,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1581515788
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124289\">@Hanna Kruppe</span> I think we can and should avoid both context-dependent interpretation of place expressions and separate syntax</p>",
        "id": 188088369,
        "sender_full_name": "RalfJ",
        "timestamp": 1581584304
    },
    {
        "content": "<p>and it's not like that's impossible, it's just that there's a bunch of choices and no clear winner</p>",
        "id": 188088389,
        "sender_full_name": "RalfJ",
        "timestamp": 1581584321
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"249222\">@Elichai Turkel</span> the main counterexample for that was that it is very inconsistent with the behavior of <code>.field</code> on anything else. the same syntax shouldnt have to widely different behaviors.</p>",
        "id": 188088428,
        "sender_full_name": "RalfJ",
        "timestamp": 1581584354
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> I think as a user of the language I feel it makes more sense to do that then to have the behavior through the <code>&amp;</code> operator.<br>\nI'm already not quite sure what happens when I do something like<code>&amp;mut (*(*(*p).a).b)[0]</code> is there any shared reference produced in the middle? Does it produce unique references at each deref? Neither?</p>",
        "id": 188088916,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1581584795
    },
    {
        "content": "<p>not sure what you mean by \"behavior through the <code>&amp;</code> op\"</p>",
        "id": 188089614,
        "sender_full_name": "RalfJ",
        "timestamp": 1581585358
    },
    {
        "content": "<p>we now have two <code>&amp;</code> ops that have different behavior</p>",
        "id": 188089654,
        "sender_full_name": "RalfJ",
        "timestamp": 1581585365
    },
    {
        "content": "<p>but it is only locally different, the p,lace below them still gets evaluated exactly the same</p>",
        "id": 188089666,
        "sender_full_name": "RalfJ",
        "timestamp": 1581585376
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> I'd like to hear what choices you see for having a single semantics for place expressions. It's not that I can't imagine any such design, but there's some UB in place expression evaluation that we'd (presumably) want to keep for most contexts but may want to remove from raw pointer projections (most importantly, the requirement that the base pointer is not dangling).</p>",
        "id": 188094036,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1581589885
    },
    {
        "content": "<p>Hm, I think I was imagining we'd keep <code>inbounds</code> because, as you kept pointing out, it's important to LLVM to know that the arithmetic is non-wrapping.</p>",
        "id": 188094467,
        "sender_full_name": "RalfJ",
        "timestamp": 1581590314
    },
    {
        "content": "<p>I have hope for a future where \"non-wrapping\" and \"base pointer not dangling\" are decoupled.</p>",
        "id": 188094496,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1581590352
    },
    {
        "content": "<p>you think it is realistic that LLVM will adopt this? so we should design MIR semantics for such a future?</p>",
        "id": 188153889,
        "sender_full_name": "RalfJ",
        "timestamp": 1581629322
    },
    {
        "content": "<p>I don't know. It may very well fall below the threshold of being worth proposing, hashing out. implementing, etc.<br>\nI also don't think we should <em>currently</em> define our semantics in anticipation of it: it's better to remove some UB in the future than to eat the performance impact of not emitting <code>inbounds</code> for however long <code>inbounds</code> exists.</p>\n<p>But I think it's definitely a possibility, and so I think it's also possible that we'd have a good reason to want multiple interpretations of place expressions eventually.</p>",
        "id": 188154517,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1581629706
    },
    {
        "content": "<p>I see. I am concerned about our complexity budget here, which we are already straining...</p>",
        "id": 188186073,
        "sender_full_name": "RalfJ",
        "timestamp": 1581667771
    },
    {
        "content": "<p>but <em>if</em> we go for a \"contextual\" semantics, I feel we should at least do some benchmarks to see how badly we need <code>inbounds</code> for these raw ptr ops... <em>if</em> we pay the complexity price anyway, being able to say that with raw ptrs the ops are entirely safe would be quite nice</p>",
        "id": 188186177,
        "sender_full_name": "RalfJ",
        "timestamp": 1581667877
    },
    {
        "content": "<p>I think an alternative to a contextual semantics might be to use the type of the ptr? so, make it depend not on <code>&amp;</code> vs <code>&amp;raw</code> furhter outside, but on whether the ptr is raw or a ref? that would be structural and not require context info</p>",
        "id": 188186237,
        "sender_full_name": "RalfJ",
        "timestamp": 1581667937
    }
]