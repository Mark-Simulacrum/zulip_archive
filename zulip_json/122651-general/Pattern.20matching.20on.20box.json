[
    {
        "content": "<p>This is probably a regular question but what is the best way to match on an enum where one of the variant is holding a box? I have a recursive enum, so i boxed the variant value:</p>\n<div class=\"codehilite\"><pre><span></span>enum RecurEnum {\n   Variant1,\n   Variant2,\n   Variant3(Box&lt;RecurEnum&gt;),\n}\n</pre></div>",
        "id": 195230800,
        "sender_full_name": "marmeladema",
        "timestamp": 1587754844
    },
    {
        "content": "<p>What i would want is writing a match pattern for <code>Variant1 | Variant3(Variant1) =&gt; ...</code></p>",
        "id": 195230879,
        "sender_full_name": "marmeladema",
        "timestamp": 1587754889
    },
    {
        "content": "<p>but this does not work because of the box. I tried <code>Variant1 | Variant3(inner) if *inner == Variant1 =&gt; ...</code> but that does not work either because <code>inner</code> is only available in the second case</p>",
        "id": 195231081,
        "sender_full_name": "marmeladema",
        "timestamp": 1587754984
    },
    {
        "content": "<p>It's not a regular question I've seen before. :)</p>",
        "id": 195231171,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587755037
    },
    {
        "content": "<p>I don't think you can match \"through\" a box directly. And I don't think you'll be able to combine patterns like that.</p>",
        "id": 195231237,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587755057
    },
    {
        "content": "<p>If you only needed to match <code>Variant3</code> you could do something like that.</p>",
        "id": 195231264,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587755078
    },
    {
        "content": "<p>Do you want to match deeper than one level?</p>",
        "id": 195231308,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587755107
    },
    {
        "content": "<p>As in, do you want to match a Variant3 containing a Variant3 containing a Variant2?</p>",
        "id": 195231343,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587755136
    },
    {
        "content": "<p>No i really just want <code>Variant1 | Variant3(Variant1) =&gt; ...</code></p>",
        "id": 195231356,
        "sender_full_name": "marmeladema",
        "timestamp": 1587755143
    },
    {
        "content": "<p>OK, then I can think of one way you could build that reasonably ergonomically.</p>",
        "id": 195231416,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587755168
    },
    {
        "content": "<p>any other case is an error for me</p>",
        "id": 195231443,
        "sender_full_name": "marmeladema",
        "timestamp": 1587755184
    },
    {
        "content": "<p>You could if you use <code>box patterns</code> (I think)</p>",
        "id": 195231454,
        "sender_full_name": "Sebastian Malton",
        "timestamp": 1587755191
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"247082\">Sebastian Malton</span> <a href=\"#narrow/stream/122651-general/topic/Pattern.20matching.20on.20box/near/195231454\" title=\"#narrow/stream/122651-general/topic/Pattern.20matching.20on.20box/near/195231454\">said</a>:</p>\n<blockquote>\n<p>You could if you use <code>box patterns</code> (I think)</p>\n</blockquote>\n<p>That would require nightly Rust though, right?</p>",
        "id": 195231493,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587755212
    },
    {
        "content": "<p>yeah but i've read its experimental and phasing out</p>",
        "id": 195231502,
        "sender_full_name": "marmeladema",
        "timestamp": 1587755215
    },
    {
        "content": "<p>Yeah, nightly... But I also don't know why it is being phased out</p>",
        "id": 195231526,
        "sender_full_name": "Sebastian Malton",
        "timestamp": 1587755236
    },
    {
        "content": "<p>because of placement new RFC being refused or something</p>",
        "id": 195231575,
        "sender_full_name": "marmeladema",
        "timestamp": 1587755269
    },
    {
        "content": "<p>but maybe the box keyword will be kept _only_ for pattern matching? idk</p>",
        "id": 195231635,
        "sender_full_name": "marmeladema",
        "timestamp": 1587755285
    },
    {
        "content": "<p>Oh, removing both <code>let x = box Foo::new();</code> and <code>if let box y = x { ... }</code>?</p>",
        "id": 195231673,
        "sender_full_name": "Sebastian Malton",
        "timestamp": 1587755314
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">RecurEnum</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">self_or_variant3</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">RecurEnum</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">Self</span>::<span class=\"n\">Variant3</span><span class=\"p\">(</span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"n\">thebox</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">thebox</span><span class=\"p\">.</span><span class=\"n\">as_ref</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"bp\">self</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 195231674,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587755317
    },
    {
        "content": "<p>(Not compile-checked, rough sketch only.)</p>",
        "id": 195231686,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587755325
    },
    {
        "content": "<p>Hum I see</p>",
        "id": 195231757,
        "sender_full_name": "marmeladema",
        "timestamp": 1587755363
    },
    {
        "content": "<p>Then you could match on foo.self_or_variant3() and check for Variant1.</p>",
        "id": 195231788,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587755382
    },
    {
        "content": "<p>That's assuming you <em>don't</em> need to distinguish the two cases, but if you do you can always check that within the match arm.</p>",
        "id": 195231808,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587755394
    },
    {
        "content": "<p>Yeah, I was correct. It does work on nightly: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=438b915dccf9f13147f7132ca670d18a\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=438b915dccf9f13147f7132ca670d18a\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=438b915dccf9f13147f7132ca670d18a</a></p>\n<p>However, I think Josh is right, that there isn't really a better way...</p>",
        "id": 195231968,
        "sender_full_name": "Sebastian Malton",
        "timestamp": 1587755470
    },
    {
        "content": "<p>Another option would be functions like <code>.is_variant1()</code> and <code>.is_variant2()</code> that check through a Variant3 too.</p>",
        "id": 195232012,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587755507
    },
    {
        "content": "<p>Depends on what patterns commonly occur in your code.</p>",
        "id": 195232034,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587755516
    },
    {
        "content": "<p>(Out of curiosity, if you don't mind sharing, what's the concrete nature of <code>RecurEnum</code> in your problem space? I'd love to know what the problem and variants actually are.)</p>",
        "id": 195232119,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587755542
    },
    {
        "content": "<p>Its only for one specific place in the code that's why i did not want to introduce a specific function for that at the beginning</p>",
        "id": 195232131,
        "sender_full_name": "marmeladema",
        "timestamp": 1587755549
    },
    {
        "content": "<p>Well, if it's only for the one specific place, you might just write an <code>if let</code>. :)</p>",
        "id": 195232156,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587755565
    },
    {
        "content": "<p>its an interpreter for a small DSL</p>",
        "id": 195232184,
        "sender_full_name": "marmeladema",
        "timestamp": 1587755579
    },
    {
        "content": "<p>Makes sense.</p>",
        "id": 195232216,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587755596
    },
    {
        "content": "<p><a href=\"https://github.com/cloudflare/wirefilter/tree/cloudflare\" title=\"https://github.com/cloudflare/wirefilter/tree/cloudflare\">https://github.com/cloudflare/wirefilter/tree/cloudflare</a></p>",
        "id": 195232230,
        "sender_full_name": "marmeladema",
        "timestamp": 1587755605
    },
    {
        "content": "<p>And in my case, i have a <code>Type</code> enum</p>",
        "id": 195232302,
        "sender_full_name": "marmeladema",
        "timestamp": 1587755642
    },
    {
        "content": "<p>and <code>Type</code> has an <code>Array</code> variant ...</p>",
        "id": 195232360,
        "sender_full_name": "marmeladema",
        "timestamp": 1587755665
    },
    {
        "content": "<p>which holds a <code>Box&lt;Type&gt;</code> to represent the type of the values in the array</p>",
        "id": 195232398,
        "sender_full_name": "marmeladema",
        "timestamp": 1587755691
    },
    {
        "content": "<p>Thanks a lof the help!</p>",
        "id": 195232478,
        "sender_full_name": "marmeladema",
        "timestamp": 1587755733
    },
    {
        "content": "<p>No problem. Hope it works out. :)</p>",
        "id": 195232508,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587755757
    },
    {
        "content": "<p>A bit late to this but if you have any plans to move your DSL nodes into an arena in the future, you would at that point be able to switch from Box to &amp; and get normal pattern matching back.</p>",
        "id": 195254197,
        "sender_full_name": "rpjohnst",
        "timestamp": 1587769250
    },
    {
        "content": "<p>I am not sure i understand what you mean :/</p>",
        "id": 195278835,
        "sender_full_name": "marmeladema",
        "timestamp": 1587810646
    }
]