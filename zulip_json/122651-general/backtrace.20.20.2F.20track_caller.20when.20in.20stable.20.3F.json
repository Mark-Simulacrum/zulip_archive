[
    {
        "content": "<p>I believe 'backtrace' and 'track_caller' are currently nightly only but not in stable. Is there a timeline for when these features will be moved in to stable? (I have a code base that sometimes run into linking problems w/ nightly + incremental compile, but I also want to use these two features on.)</p>",
        "id": 197003681,
        "sender_full_name": "zeroexcuses",
        "timestamp": 1589046995
    },
    {
        "content": "<p>if you are having trouble with nightly now you'll see that trouble on stable in 6-12 weeks unless someone fixes it on nightly in the mean time.</p>",
        "id": 197003841,
        "sender_full_name": "RalfJ",
        "timestamp": 1589047229
    },
    {
        "content": "<p>so, please report these bugs :)</p>",
        "id": 197003843,
        "sender_full_name": "RalfJ",
        "timestamp": 1589047239
    },
    {
        "content": "<p>I can't help with your actual question though, sorry. Maybe try finding the tracking issues to see what the outstanding concerns are?</p>",
        "id": 197003856,
        "sender_full_name": "RalfJ",
        "timestamp": 1589047277
    },
    {
        "content": "<p>they should be <a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aopen+is%3Aissue+label%3AC-tracking-issue\" title=\"https://github.com/rust-lang/rust/issues?q=is%3Aopen+is%3Aissue+label%3AC-tracking-issue\">in this list</a></p>",
        "id": 197003874,
        "sender_full_name": "RalfJ",
        "timestamp": 1589047305
    },
    {
        "content": "<p>I'm doing something like tdd in Rust, running a recompile + unit test ever 5-10 minutes. The 'bug' I run into is that on my 20-30k loc project, with incremental compile enabled, every few hours, rustc runs into a linking error. The only way to fix this linking error is a 'cargo clean', after which it rebuilds fine. The source code is not open source. I have no idea how to even begin filing a bug for this.</p>",
        "id": 197003947,
        "sender_full_name": "zeroexcuses",
        "timestamp": 1589047372
    },
    {
        "content": "<p>I've also had the occasional linking error with <code>cargo watch test</code>, but a <code>cargo clean</code> has always solved it.</p>",
        "id": 197004022,
        "sender_full_name": "Lokathor",
        "timestamp": 1589047470
    },
    {
        "content": "<p>This bug is non-deterministic, no idea how to reproduce, depends on some hidden state (cached compile units in target/debug) that may be GB's in size. I've been using nightly I think from he start, but this issue has pushed me to stable.</p>",
        "id": 197004028,
        "sender_full_name": "zeroexcuses",
        "timestamp": 1589047492
    },
    {
        "content": "<p>Are you on recent nightly?</p>",
        "id": 197004042,
        "sender_full_name": "simulacrum",
        "timestamp": 1589047527
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> : Yeah, IntelliJ/Code are probably calling 'cargo test' behind the scenes. So I guess we've made the progress of narrowed it from 'cargo build' to 'cargo test' :-)</p>",
        "id": 197004046,
        "sender_full_name": "zeroexcuses",
        "timestamp": 1589047535
    },
    {
        "content": "<p>I seem to recall a similar bug being fixed by <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> not too long ago...</p>",
        "id": 197004048,
        "sender_full_name": "simulacrum",
        "timestamp": 1589047539
    },
    {
        "content": "<p>I am on <code>rustc 1.44.0-nightly (7f3df5772 2020-04-16)</code></p>",
        "id": 197004095,
        "sender_full_name": "Lokathor",
        "timestamp": 1589047576
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> : It's currently uninstalled, but I think I did a \"rustup toolchain install nightly\" within the past few days (and got a link error after that in vs code)</p>",
        "id": 197004112,
        "sender_full_name": "zeroexcuses",
        "timestamp": 1589047614
    },
    {
        "content": "<p>hm okay</p>",
        "id": 197004117,
        "sender_full_name": "simulacrum",
        "timestamp": 1589047628
    },
    {
        "content": "<p>it's almost certainly an incremental bug -- one thing that may work is if you can catch it and the codebase is public you can create a zip / tarball of the project state as a whole (including target directory) and then post that in an issue</p>",
        "id": 197004145,
        "sender_full_name": "simulacrum",
        "timestamp": 1589047669
    },
    {
        "content": "<p>(this is pure speculation); I think one way to cause it involves trait names that overlap so if trait Foo1T nas a fn foo, and trait Foo2T has a fn foo, then there are situations where ...</p>",
        "id": 197004195,
        "sender_full_name": "zeroexcuses",
        "timestamp": 1589047714
    },
    {
        "content": "<p>(and some object impls both Foo1T and Foo2T)</p>",
        "id": 197004221,
        "sender_full_name": "zeroexcuses",
        "timestamp": 1589047743
    },
    {
        "content": "<p>I agree it's almost certainly an incremental issue. 'cargo clean' and/or rm target/debug has always fixed it</p>",
        "id": 197004350,
        "sender_full_name": "zeroexcuses",
        "timestamp": 1589047836
    },
    {
        "content": "<p>codebase is definitely not public; if I can manage to trigger the linking error again, would it be helpful to the compiler team ?</p>",
        "id": 197004471,
        "sender_full_name": "zeroexcuses",
        "timestamp": 1589047936
    },
    {
        "content": "<p>without having the code and a snapshot of the target directory probably no</p>",
        "id": 197004495,
        "sender_full_name": "simulacrum",
        "timestamp": 1589047980
    },
    {
        "content": "<p>unfortunately linker errors as a result of incremental without a reproduction that is reliable are pretty much impossible to fix I think</p>",
        "id": 197004504,
        "sender_full_name": "simulacrum",
        "timestamp": 1589048008
    },
    {
        "content": "<p>good to know; also, is there some other linker that can be used for faster linking (during dev time)? for whatever reason, linking seems to take quite a bit of time these days</p>",
        "id": 197004601,
        "sender_full_name": "zeroexcuses",
        "timestamp": 1589048073
    },
    {
        "content": "<p>lld is the common recommendation</p>",
        "id": 197004775,
        "sender_full_name": "simulacrum",
        "timestamp": 1589048186
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"299970\">zeroexcuses</span> <a href=\"#narrow/stream/122651-general/topic/backtrace.20.20.2F.20track_caller.20when.20in.20stable.20.3F/near/197004601\" title=\"#narrow/stream/122651-general/topic/backtrace.20.20.2F.20track_caller.20when.20in.20stable.20.3F/near/197004601\">said</a>:</p>\n<blockquote>\n<p>good to know; also, is there some other linker that can be used for faster linking (during dev time)? for whatever reason, linking seems to take quite a bit of time these days</p>\n</blockquote>\n<p>you might be interested in <a href=\"https://github.com/rust-lang/rust/issues/71515\" title=\"https://github.com/rust-lang/rust/issues/71515\">https://github.com/rust-lang/rust/issues/71515</a></p>",
        "id": 197004777,
        "sender_full_name": "RalfJ",
        "timestamp": 1589048187
    }
]