[
    {
        "content": "<p>I'm working on an interpreter for a niche language. It uses a dispatch table to point to functions; pretty simple. However, I've tried converting these functions to methods, and I can't seem to find any way to express the <code>fn</code> type that goes in the dispatch table.</p>\n<p>My instruction handler functions all take a <code>&amp;mut Foo&lt;'a&gt;</code>, where Foo is my interpreted program context and 'a is a lifetime parameter for data that the interpreted program operates on.  If I write the handlers as free functions <code>fn do_thing&lt;'a&gt;(&amp;mut Foo&lt;'a&gt;) { ... }</code>, then I can build a dispatch table: <code>static DISPATCH_TABLE: [fn(&amp;mut Foo&lt;'_&gt;)] = ...</code>.  But if I convert a function to an associated function / method, then the <code>Foo::do_thing</code> items cannot be converted to the type that I'm using for the dispatch table.</p>\n<p>Is there a way to express this?  Or is this not possible?</p>\n<p>Playground link: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=c6180a4457c595cec9f1768bb49c4003\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=c6180a4457c595cec9f1768bb49c4003\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=c6180a4457c595cec9f1768bb49c4003</a></p>",
        "id": 193620518,
        "sender_full_name": "Arlie Davis",
        "timestamp": 1586554596
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"274471\">@Arlie Davis</span> hm, that is interesting. I would have expected this to work. I think the fact that you have two lifetime parameters in these functions is also involved in causing the problem here.</p>",
        "id": 193645965,
        "sender_full_name": "RalfJ",
        "timestamp": 1586587843
    },
    {
        "content": "<p>There might be already a bug report for this somewhere (<span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> ?), but I'd say it is also justified to open a new report.</p>",
        "id": 193645972,
        "sender_full_name": "RalfJ",
        "timestamp": 1586587879
    },
    {
        "content": "<p>If you wrap in a closure, it works though: |t| Foo::do_fancy_thing(t),  // &lt;-- now it succeeds</p>",
        "id": 193652172,
        "sender_full_name": "marmeladema",
        "timestamp": 1586598672
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"274471\">@Arlie Davis</span> in <code>impl&lt;'a&gt; Foo&lt;'a&gt;</code>, <code>'a</code> is early-bound which means you can't turn it into the late-bound version</p>",
        "id": 193652454,
        "sender_full_name": "eddyb",
        "timestamp": 1586599195
    },
    {
        "content": "<p>this is nothing you should be able to observe <em>sigh</em> I wonder if Chalk has a better model</p>",
        "id": 193652519,
        "sender_full_name": "eddyb",
        "timestamp": 1586599240
    },
    {
        "content": "<p>I feel like maybe <code>ty::FnDef</code> should have a <code>Binder</code> or something so it can late-bind early-bound lifetimes (cc <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>)</p>",
        "id": 193652553,
        "sender_full_name": "eddyb",
        "timestamp": 1586599276
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>  is saying that opening an issue for this would be worth it. ;)</p>",
        "id": 193652607,
        "sender_full_name": "RalfJ",
        "timestamp": 1586599347
    },
    {
        "content": "<p>no</p>",
        "id": 193652611,
        "sender_full_name": "eddyb",
        "timestamp": 1586599357
    },
    {
        "content": "<p>there's probably a dozen issues about this :P</p>",
        "id": 193652615,
        "sender_full_name": "eddyb",
        "timestamp": 1586599368
    },
    {
        "content": "<p>that nobody has triaged in ages or w/e</p>",
        "id": 193652618,
        "sender_full_name": "eddyb",
        "timestamp": 1586599377
    },
    {
        "content": "<p>I don't know the landscape well, just the root cause</p>",
        "id": 193652623,
        "sender_full_name": "eddyb",
        "timestamp": 1586599395
    },
    {
        "content": "<p>since it's a ZST struct, it can be as generic as you need it to be - e.g. it could be like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"nc\">Foo_do_fancy_thing</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">Fn</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"na\">&#39;s</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Foo_do_fancy_thing</span><span class=\"w\"> </span><span class=\"p\">{...}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 193652662,
        "sender_full_name": "eddyb",
        "timestamp": 1586599442
    },
    {
        "content": "<p>which is pretty much what you get from introducing a closure :P</p>",
        "id": 193652678,
        "sender_full_name": "eddyb",
        "timestamp": 1586599461
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"274471\">@Arlie Davis</span> I think <span class=\"user-mention\" data-user-id=\"281572\">@marmeladema</span>'s suggestion will work well enough if you wrap it in a macro or something</p>",
        "id": 193652686,
        "sender_full_name": "eddyb",
        "timestamp": 1586599492
    },
    {
        "content": "<p>Ah, thank you all. I don't understand early-bound vs. late-bound, so I'm going to go learn about that. Meanwhile, @eddyb, it sounds like you think it's not worth opening an issue on this?  Why not? It seems like a reasonable thing to do, and the asymmetry between pointers-to-fns and pointers-to-methods seems undesirable.</p>",
        "id": 193678756,
        "sender_full_name": "Arlie Davis",
        "timestamp": 1586637964
    },
    {
        "content": "<p>I think what eddyb meant is that there are most certainly already issues for that.</p>",
        "id": 193678839,
        "sender_full_name": "marmeladema",
        "timestamp": 1586638162
    },
    {
        "content": "<p>Gotcha. Thanks.</p>",
        "id": 193678847,
        "sender_full_name": "Arlie Davis",
        "timestamp": 1586638180
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"274471\">@Arlie Davis</span> you can try to find an existing issue and add a comment to it, maybe</p>",
        "id": 193686685,
        "sender_full_name": "eddyb",
        "timestamp": 1586651407
    }
]