[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <br>\nthe lint </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">().</span><span class=\"n\">cloned</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"o\">^^^^</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">borrowed</span><span class=\"w\"> </span><span class=\"n\">here</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>in your new diag issue <a href=\"https://github.com/rust-lang/rust/issues/53882\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53882\">https://github.com/rust-lang/rust/issues/53882</a> reminds me of <a href=\"https://github.com/rust-lang/rust/issues/25507#issuecomment-262564469\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/25507#issuecomment-262564469\">https://github.com/rust-lang/rust/issues/25507#issuecomment-262564469</a></p>\n<div class=\"codehilite\"><pre><span></span>error[E0507]: cannot move out of borrowed content\n --&gt; &lt;anon&gt;:9:26\n  |\n9 |         println!(&quot;{:?}&quot;, y.field.unwrap_or(X));\n  |                          ^ cannot move out of borrowed content\n</pre></div>\n\n\n<p>can we add the info like <code>Mover/Borrower</code> into diag like</p>\n<div class=\"codehilite\"><pre><span></span>data.iter().cloned()\n^^^^ data is borrowed by `iter(...)`here\n</pre></div>\n\n\n<p>and </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0507</span><span class=\"p\">]</span>: <span class=\"nc\">cannot</span><span class=\"w\"> </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">borrowed</span><span class=\"w\"> </span><span class=\"n\">content</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"o\">-</span>-&gt; <span class=\"o\">&lt;</span><span class=\"n\">anon</span><span class=\"o\">&gt;</span>:<span class=\"mi\">9</span>:<span class=\"mi\">26</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\">         </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;{:?}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">.</span><span class=\"n\">field</span><span class=\"p\">.</span><span class=\"n\">unwrap_or</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\">                          </span><span class=\"o\">^</span><span class=\"w\"> </span><span class=\"n\">cannot</span><span class=\"w\"> </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">borrowed</span><span class=\"w\"> </span><span class=\"n\">content</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">moved</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"n\">unwrap_or</span><span class=\"p\">(...)</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>it'll be more friendly for users to locate them.</p>",
        "id": 133171822,
        "sender_full_name": "csmoe",
        "timestamp": 1535796592
    },
    {
        "content": "<p>perhaps, yes. I do think there are a few things in our semantics that can be non-obvious:</p>\n<ul>\n<li>the <code>self</code> type of methods you invoke (as you point out here)</li>\n<li>where temporaries are created, often connected with the first</li>\n</ul>\n<p>e.g., <code>Foo { }.iter()</code> makes a temporary, but this is not obvious</p>",
        "id": 133174634,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535802066
    },
    {
        "content": "<p>(this is what I mean by \"we should define a model in terms of Rust rvalues/lvalues, because this is already what a Rust user must understand\" - this is all to do with lvalues)</p>",
        "id": 133178899,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1535810531
    }
]