[
    {
        "content": "<p>Hi guys,</p>\n<p>I was wondering if <a href=\"http://main.rs\">main.rs</a> is seen as a separate crate when it is compiled with <a href=\"http://lib.rs\">lib.rs</a>? </p>\n<p>I ask because when importing something from <a href=\"http://lib.rs\">lib.rs</a> into the main file, you use the package name and not crate</p>",
        "id": 219242695,
        "sender_full_name": "Joe Seriah",
        "timestamp": 1607451737
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"364259\">@Joe Seriah</span> yes, <a href=\"http://main.rs\">main.rs</a> is a separate crate from the library</p>",
        "id": 219242742,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607451757
    },
    {
        "content": "<p>you can imaging it as dog-fooding your own API</p>",
        "id": 219242762,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607451767
    },
    {
        "content": "<p>Do you know why it was designed this way?</p>",
        "id": 219242839,
        "sender_full_name": "Joe Seriah",
        "timestamp": 1607451818
    },
    {
        "content": "<p>because otherwise anyone using your API would have to compile your main binary too</p>",
        "id": 219242960,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607451864
    },
    {
        "content": "<p>which they aren't using, because it's not part of your API</p>",
        "id": 219242971,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607451872
    },
    {
        "content": "<p>Oh why would I have a main file in a library API in the first place? Can’t the external API be tested with integration tests?</p>",
        "id": 219243091,
        "sender_full_name": "Joe Seriah",
        "timestamp": 1607451948
    },
    {
        "content": "<p>well right, if you make them the same crate they're inextricable</p>",
        "id": 219243241,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607452022
    },
    {
        "content": "<p>and integration tests don't tell you that your API is hard to use, you have to use it yourself to find that out</p>",
        "id": 219243268,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607452040
    },
    {
        "content": "<p>Oh right, I guess to me a main file in a lib doesn’t make sense, certainly due to my inexperience with Rust</p>",
        "id": 219243565,
        "sender_full_name": "Joe Seriah",
        "timestamp": 1607452201
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> there is a crate called main on <a href=\"http://crates.io\">crates.io</a> . Do you know how cargo differentiates that from the local main?</p>",
        "id": 219243778,
        "sender_full_name": "Joe Seriah",
        "timestamp": 1607452292
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"364259\">@Joe Seriah</span> maybe this helps: you can have <em>both</em> a binary and library in the same package, and have people use the library from <a href=\"http://crates.io\">crates.io</a> without using the binary</p>",
        "id": 219243805,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607452309
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"364259\">Joe Seriah</span> <a href=\"#narrow/stream/122651-general/topic/Main.2Ers.20separate.20crate/near/219243778\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> there is a crate called main on <a href=\"http://crates.io\">crates.io</a> . Do you know how cargo differentiates that from the local main?</p>\n</blockquote>\n<p>they're different namespaces, <code>main.rs</code> is a file and <code>main</code> on <a href=\"http://crates.io\">crates.io</a> is a package</p>",
        "id": 219243880,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607452334
    },
    {
        "content": "<p>(and <code>fn main</code> is a function)</p>",
        "id": 219243899,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607452342
    },
    {
        "content": "<p>Oh I thought <a href=\"http://main.rs\">main.rs</a> will be seen as a package when it is compiled?</p>",
        "id": 219243973,
        "sender_full_name": "Joe Seriah",
        "timestamp": 1607452384
    },
    {
        "content": "<p>Maybe local crates are in a different namespace than foreign ones?</p>",
        "id": 219244069,
        "sender_full_name": "Joe Seriah",
        "timestamp": 1607452414
    },
    {
        "content": "<p>package != crate</p>",
        "id": 219244073,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607452417
    },
    {
        "content": "<p>If we had \"workspaces\" in cargo from the beginning, then maybe we would have said \"if you have a library and a binary then have a workspace where the binary depends on the library\" but the \"<a href=\"http://lib.rs\">lib.rs</a> and <a href=\"http://main.rs\">main.rs</a>\" was already widely used when workspaces became a thing.</p>",
        "id": 219244094,
        "sender_full_name": "Eh2406",
        "timestamp": 1607452426
    },
    {
        "content": "<p>package is what cargo generates when you run <code>cargo new</code>, a crate is what <code>rustc</code> sees when you run it</p>",
        "id": 219244185,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607452456
    },
    {
        "content": "<p>packages can have multiple crates</p>",
        "id": 219244205,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607452461
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120179\">@Eh2406</span> oh, how would that work because a workspace can have multiple libraries? Don’t you need to choose which one to make the binary depend on?</p>",
        "id": 219244508,
        "sender_full_name": "Joe Seriah",
        "timestamp": 1607452587
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> so <a href=\"http://crates.io\">crates.io</a> is a package manager and not a crate manager?</p>",
        "id": 219244594,
        "sender_full_name": "Joe Seriah",
        "timestamp": 1607452624
    },
    {
        "content": "<p>The binary depends on the library crate inside the same package if any and all the library crates in the packages specified in <code>[dependencies]</code>.</p>",
        "id": 219244646,
        "sender_full_name": "bjorn3",
        "timestamp": 1607452656
    },
    {
        "content": "<p>Shure but the <code>Cargo.toml</code> of the binary can specify exactly which libraries it depends on.</p>",
        "id": 219244669,
        "sender_full_name": "Eh2406",
        "timestamp": 1607452670
    },
    {
        "content": "<p>And a crate cannot have external dependencies if you use just rustc?</p>",
        "id": 219244678,
        "sender_full_name": "Joe Seriah",
        "timestamp": 1607452681
    },
    {
        "content": "<p>It can, but you need to build them yourself in that case.</p>",
        "id": 219244769,
        "sender_full_name": "bjorn3",
        "timestamp": 1607452707
    },
    {
        "content": "<p>Oh that makes sense. Would this workspace setting also be the same if i had multiple binaries?</p>",
        "id": 219245043,
        "sender_full_name": "Joe Seriah",
        "timestamp": 1607452853
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> ah thank you, I keep forgetting that the comp unit is a crate and not a file</p>",
        "id": 219245152,
        "sender_full_name": "Joe Seriah",
        "timestamp": 1607452920
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/book/ch14-03-cargo-workspaces.html\">https://doc.rust-lang.org/book/ch14-03-cargo-workspaces.html</a></p>",
        "id": 219245525,
        "sender_full_name": "Eh2406",
        "timestamp": 1607453090
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120179\">@Eh2406</span> oh I meant in your example, would each binary in the workspace need to depend on a library or just a “main crate”?</p>\n<p>Thanks for the link too!</p>",
        "id": 219245850,
        "sender_full_name": "Joe Seriah",
        "timestamp": 1607453244
    },
    {
        "content": "<p>I don't think there would be a “main crate”, there would be a bunch of binary projects each of which wich can specify its dependencies, probably including some of the libraries in the workspace.</p>",
        "id": 219246328,
        "sender_full_name": "Eh2406",
        "timestamp": 1607453476
    },
    {
        "content": "<p>Oh that makes sense, thank you for explaining</p>",
        "id": 219246469,
        "sender_full_name": "Joe Seriah",
        "timestamp": 1607453543
    },
    {
        "content": "<p>IMO, workspaces make it easy to have multiple related projects, which is a clearer more flexible architecture. If we had workspaces from the beginning I would have voted to not have allowed libs and binary to live in the same package. But before workspaces we needed something to make that use case workable. And it was too common to depricat when workspaces came along. (all opinions are my own and I am not speaking for the Cargo Team.)</p>",
        "id": 219247231,
        "sender_full_name": "Eh2406",
        "timestamp": 1607453924
    },
    {
        "content": "<p>For example we had similar questions around \"proc-macros\", if you have a proc-macro and a library can the macro see the library or the other way around? Can <code>serde</code> use <code>serde-derive</code> or is it the other way around. Depending on your use case on or the other makes sense. And the answer that was chosen was you can't have a proc-macro and anything else in the same package. Use a workspace with two packages, and tell cargo which direction the dependency is.</p>",
        "id": 219247892,
        "sender_full_name": "Eh2406",
        "timestamp": 1607454242
    },
    {
        "content": "<p>Yeah I find workspaces to be really flexible and good at separating concerns, really nice too that it can be used with git submodules</p>",
        "id": 219249168,
        "sender_full_name": "Joe Seriah",
        "timestamp": 1607454901
    }
]