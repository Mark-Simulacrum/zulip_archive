[
    {
        "content": "<p>Doing some profiling on an application, I noticed that  <code>&lt;core::result::Result as core::ops::try::Try&gt;::into_result</code>was higher than I expected (one specific call site was taking up 1.8% / 150 ms of my total run time). I only have one error type in play here, so I wouldn't expect there to be any conversion going on. I also would not expect this location to result in an error multiple times in one program run (although I'm trying to verify that now).</p>\n<p>I'm also surprised that <code>into_result</code> isn't inlined.</p>\n<p>Are there any specific performance gotchas I should be aware of when using <code>?</code>?</p>\n<p>/cc <span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> Since you are doing work on the <code>Try</code> trait, I'm curious if you've any knowledge in this area.</p>",
        "id": 226084585,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1613094958
    },
    {
        "content": "<p>Shouldn't that be an identity function? If it's not getting inlined that seems bad, but in that case it should be a memcpy so I would check if the result type in question is large</p>",
        "id": 226084776,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613095171
    },
    {
        "content": "<p><code>std::mem::size_of::&lt;Error&gt;() = 40</code>; not the biggest but not the smallest</p>",
        "id": 226085052,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1613095403
    },
    {
        "content": "<p>If people want to see my perf recording, I think you can visit <a href=\"https://share.firefox.dev/3jNYq2L\">https://share.firefox.dev/3jNYq2L</a></p>",
        "id": 226085190,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1613095551
    },
    {
        "content": "<p>You'd want to focus on <code>sxd_pull_parser::Parser::next::{{closure}}</code> — the other big chunk of time is due to unoptimized debug output formatting</p>",
        "id": 226085289,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1613095621
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"271719\">@Mario Carneiro</span> :</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"cp\">#[inline]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">into_result</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 226085628,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1613095968
    },
    {
        "content": "<p>super suspicious</p>",
        "id": 226085634,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1613095976
    },
    {
        "content": "<p>Assuming that the function in question is <a href=\"https://github.com/shepmaster/sxd-pull-parser/blob/main/src/lib.rs#L170-L179\">https://github.com/shepmaster/sxd-pull-parser/blob/main/src/lib.rs#L170-L179</a>, it doesn't look like there is very much going on in that function, so it might just be a very hot loop</p>",
        "id": 226086120,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613096521
    },
    {
        "content": "<p>It's not quite that exact point in time, but morally equivalent.</p>",
        "id": 226086506,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1613096934
    },
    {
        "content": "<p>Local changes and force-pushes as I'm still in early development ;-)</p>",
        "id": 226086520,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1613096953
    },
    {
        "content": "<p>There are some performance issues with the desugaring of <code>?</code>, that last I checked were still unresolved. <a href=\"https://github.com/rust-lang/rust/pull/62672#issuecomment-511478954\">https://github.com/rust-lang/rust/pull/62672#issuecomment-511478954</a> mentions it.</p>",
        "id": 226086935,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1613097381
    },
    {
        "content": "<p>is into_result inlined into the calling function? If so, it could just be an artifact of skid</p>",
        "id": 226086978,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1613097445
    },
    {
        "content": "<p>I was wondering if a macro that was just <code>return if Err</code> without any conversion possible would help.</p>",
        "id": 226086979,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1613097446
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243558\">@Steven Fackler</span> \"skid\"? That's a new term for me.</p>",
        "id": 226086994,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1613097475
    },
    {
        "content": "<p>Reading <a href=\"https://easyperf.net/blog/2018/08/29/Understanding-performance-events-skid\">https://easyperf.net/blog/2018/08/29/Understanding-performance-events-skid</a> now</p>",
        "id": 226087042,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1613097506
    },
    {
        "content": "<p>or even just a slightly bad debuginfo mapping</p>",
        "id": 226087066,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1613097547
    },
    {
        "content": "<p>you might want to look at the actual instructions its reporting in those samples</p>",
        "id": 226087077,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1613097573
    },
    {
        "content": "<p><strong>If</strong> I'm using <code>perf annotate</code> correctly:</p>\n<div class=\"codehilite\"><pre><span></span><code>       │     _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hdf9f833aec1f96fcE():                                                                                                             ▒\n  0.63 │ f6:   movups 0xae(%rsp),%xmm0                                                                                                                                                                                                      ▒\n       │       movups %xmm0,0x7e(%rsp)                                                                                                                                                                                                      ▒\n  0.14 │       movaps 0x90(%rsp),%xmm0                                                                                                                                                                                                      ▒\n  0.70 │       movaps 0xa0(%rsp),%xmm1                                                                                                                                                                                                      ▒\n 10.38 │       movaps %xmm1,0x70(%rsp)                                                                                                                                                                                                      ▒\n  1.95 │       movaps %xmm0,0x60(%rsp)\n</code></pre></div>",
        "id": 226087242,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1613097727
    },
    {
        "content": "<p>So moving some chunkyboi registers</p>",
        "id": 226087264,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1613097760
    },
    {
        "content": "<p>that looks like a memcpy and into_result wasn't inlined for whatever reason</p>",
        "id": 226087275,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1613097778
    },
    {
        "content": "<p>iirc serde internally still uses a try!() macro for maybe this kind of reason</p>",
        "id": 226087290,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1613097797
    },
    {
        "content": "<p>(I think the serde aspect is what Thom linked above)</p>",
        "id": 226087308,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1613097822
    },
    {
        "content": "<p>This code is adjacent to code that fills up buffers, but the buffer in this run was 16MiB, so it seems like it shouldn't be part of that</p>",
        "id": 226087399,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1613097896
    },
    {
        "content": "<p>you may want to consider putting a box in your error type to keep the size down since the compiler's pretty bad about eliminating moves currently</p>",
        "id": 226087511,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1613097983
    },
    {
        "content": "<p>Doesn't look like the exact same thing, but I reported this issue with result propagation awhile back -- <a href=\"https://github.com/rust-lang/rust/issues/81146\">#81146</a></p>",
        "id": 226087776,
        "sender_full_name": "Tyson Nottingham",
        "timestamp": 1613098278
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243558\">@Steven Fackler</span> any rule-of-thumb for how big is too big?</p>",
        "id": 226087795,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1613098313
    },
    {
        "content": "<blockquote>\n<p><code>-Z mir-opt-level=3</code> </p>\n</blockquote>\n<p>I suppose it's worth trying some of these level of things out as well</p>",
        "id": 226087883,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1613098392
    },
    {
        "content": "<p>uhhhh isn't opt-level 3 unsound?</p>",
        "id": 226087911,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613098428
    },
    {
        "content": "<p>I think you'd just have to profile to see when things are too big</p>",
        "id": 226087979,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1613098468
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/122651-general/topic/Performance.20of.20.3CResult.20as.20Try.3E.3A.3Ainto_result/near/226087911\">said</a>:</p>\n<blockquote>\n<p>uhhhh isn't opt-level 3 unsound?</p>\n</blockquote>\n<p>sound = slow, dontchaknow</p>",
        "id": 226088090,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1613098579
    },
    {
        "content": "<p>Writing my own try-like macro reduced the samples attributed to <code>into_result</code> from 276ms to 4.7ms</p>",
        "id": 226088117,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1613098626
    },
    {
        "content": "<p>So that's promising</p>",
        "id": 226088122,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1613098634
    },
    {
        "content": "<p>I'd need to do a bit more statistical profiling to see if it actually made things faster overall</p>",
        "id": 226088137,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1613098665
    },
    {
        "content": "<p>adding opt-level=3 on nightly (so two changes) brings the samples of <code>into_result</code> back up to 30.9 ms <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 226088428,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1613098987
    },
    {
        "content": "<p>wait, the samples were nonzero even with your own try-like macro? Why is <code>Result::into_result</code> even getting called in that case?</p>",
        "id": 226088945,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613099375
    },
    {
        "content": "<p>I did not change every single usage of <code>?</code>, just those closer to the hottest loops (the <code>StringRing</code> struct, specifically)</p>",
        "id": 226089216,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1613099434
    },
    {
        "content": "<p>I've a strange setup where I'm on macOS and doing perf on a Linux VM; I don't have a good setup to allow using my editor seamlessly across the VM, so any changes are... more painful than they should be.</p>",
        "id": 226089442,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1613099489
    },
    {
        "content": "<p>And I'm benchmarking on a laptop with all the power and thermal fluctuations that can entail. I'm hoping that hyperfine saves my bacon there (5x warmup runs, 25x profiling runs)</p>\n<p>before:</p>\n<div class=\"codehilite\"><pre><span></span><code>  Time (mean ± σ):      2.912 s ±  0.192 s    [User: 2.841 s, System: 0.045 s]\n  Range (min … max):    2.705 s …  3.382 s    25 runs\n</code></pre></div>\n<p>after:</p>\n<div class=\"codehilite\"><pre><span></span><code>  Time (mean ± σ):      2.906 s ±  0.087 s    [User: 2.838 s, System: 0.044 s]\n  Range (min … max):    2.753 s …  3.100 s    25 runs\n</code></pre></div>",
        "id": 226091088,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1613099876
    },
    {
        "content": "<p>so not obviously worth it here.</p>",
        "id": 226091262,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1613099928
    },
    {
        "content": "<p>I guess profiling will continue more tomorrow. Thanks everyone!</p>",
        "id": 226091392,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1613099958
    },
    {
        "content": "<p>Amusingly, if the try trait gets stabilized, then serde could define their own <code>ResultLight</code> type that opts out of the automatic error conversion. Might be a nice benefit</p>",
        "id": 226093267,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1613100424
    },
    {
        "content": "<p>They probably wouldn’t, due to not wanting to require newer</p>",
        "id": 226093950,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1613100597
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116155\">Jake Goulding</span> <a href=\"#narrow/stream/122651-general/topic/Performance.20of.20.3CResult.20as.20Try.3E.3A.3Ainto_result/near/226086979\">said</a>:</p>\n<blockquote>\n<p>I was wondering if a macro that was just <code>return if Err</code> without any conversion possible would help.</p>\n</blockquote>\n<p>You can definitely avoid some LLVM trouble if you can get away with a macro that's just <code>match ___ { Ok(v) =&gt; v, e =&gt; return e }</code> -- LLVM turns out to be pretty bad at putting enums back together, even without error conversion (demo: <a href=\"https://rust.godbolt.org/z/cd4js5\">https://rust.godbolt.org/z/cd4js5</a>).  There's been some progress on mir-opts to help this (<a href=\"https://github.com/rust-lang/rust/issues/66855\">https://github.com/rust-lang/rust/issues/66855</a>) but you can see from that demo that it's still not quite working reliably.</p>",
        "id": 226095945,
        "sender_full_name": "scottmcm",
        "timestamp": 1613102399
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/122651-general/topic/Performance.20of.20.3CResult.20as.20Try.3E.3A.3Ainto_result/near/226087911\">said</a>:</p>\n<blockquote>\n<p>uhhhh isn't opt-level 3 unsound?</p>\n</blockquote>\n<p>Those should all have been moved behind <code>-Zunsound-mir-opts</code>.</p>",
        "id": 226120516,
        "sender_full_name": "bjorn3",
        "timestamp": 1613125939
    },
    {
        "content": "<blockquote>\n<p>And I'm benchmarking on a laptop with all the power and thermal fluctuations that can entail. </p>\n</blockquote>\n<p>If you're on linux there's a bunch of sysfs knobs you can set to disable and enable it as you need. Or you can use <a href=\"https://crates.io/crates/criterion-perf-events\">https://crates.io/crates/criterion-perf-events</a> to benchmark instruction counts instead of wall time.</p>",
        "id": 226129587,
        "sender_full_name": "The 8472",
        "timestamp": 1613132340
    },
    {
        "content": "<p>I’m running Linux on a VM; I’ve used <a href=\"https://crates.io/crates/iai\">https://crates.io/crates/iai</a> to get instruction counts as well, but the L2 cache numbers vary wildly so I don’t know how to interpret that.</p>",
        "id": 226132255,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1613134108
    },
    {
        "content": "<blockquote>\n<p>if you can get away with a macro that's just <code>match ___ { Ok(v) =&gt; v, e =&gt; return e }</code></p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> unfortunately I need to do different success types in a lot of these functions, so I need <code>Err(e) =&gt; Err(e)</code> <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 226138972,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1613138093
    },
    {
        "content": "<p>Profiling in a VM is no joy.</p>",
        "id": 226150020,
        "sender_full_name": "The 8472",
        "timestamp": 1613143300
    },
    {
        "content": "<p>Isn't everything effectively a VM these days anyway :-)</p>",
        "id": 226152421,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1613144181
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116155\">Jake Goulding</span> <a href=\"#narrow/stream/122651-general/topic/Performance.20of.20.3CResult.20as.20Try.3E.3A.3Ainto_result/near/226138972\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> unfortunately I need to do different success types in a lot of these functions, so I need <code>Err(e) =&gt; Err(e)</code> <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>\n</blockquote>\n<p>I would have been surprised if <code>e =&gt; return e</code> worked for you, TBH.  But it's a good demonstration of the fundamental problem.</p>",
        "id": 226170871,
        "sender_full_name": "scottmcm",
        "timestamp": 1613151803
    },
    {
        "content": "<p>Well, some other people investigating different avenues have improved performance to about 20% of the previous time (e.g. the last change was ~2000ms to ~450ms). Turns out async is realllllly not a good fit to thread through the core part of this problem.</p>",
        "id": 226196152,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1613163982
    },
    {
        "content": "<p>So now gonna see if there's another way to allow filling my processing buffer asynchronously but doing all the actual processing in pure sync.</p>",
        "id": 226196251,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1613164039
    },
    {
        "content": "<p>e.g. by having a special error state that the caller needs to watch for</p>",
        "id": 226196295,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1613164065
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/122651-general/topic/Performance.20of.20.3CResult.20as.20Try.3E.3A.3Ainto_result/near/226120516\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/122651-general/topic/Performance.20of.20.3CResult.20as.20Try.3E.3A.3Ainto_result/near/226087911\">said</a>:</p>\n<blockquote>\n<p>uhhhh isn't opt-level 3 unsound?</p>\n</blockquote>\n<p>Those should all have been moved behind <code>-Zunsound-mir-opts</code>.</p>\n</blockquote>\n<p><code>-Zmir-opt-level=2</code> is already unsound: <a href=\"https://github.com/rust-lang/rust/issues/79191\">#79191</a><br>\nI can still reproduce that with <code>nightly-2021-02-13</code>.</p>",
        "id": 226499228,
        "sender_full_name": "hyd-dev",
        "timestamp": 1613473123
    }
]