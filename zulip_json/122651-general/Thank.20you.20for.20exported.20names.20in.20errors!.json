[
    {
        "content": "<p>I rebased to master today and was pleasantly surprised to see that my ui test output needed to be updated because it's showing the trait under its publicly-exposed name.  Thanks to everyone who got that working!</p>",
        "id": 227075145,
        "sender_full_name": "scottmcm",
        "timestamp": 1613807771
    },
    {
        "content": "<p>What do the new errors look like?</p>",
        "id": 227139240,
        "sender_full_name": "Noah Lev",
        "timestamp": 1613879654
    },
    {
        "content": "<p>See <a href=\"https://github.com/rust-lang/rust/pull/82318/commits/a6637b6066452c734b93d6a9267c7dd52419765a\">https://github.com/rust-lang/rust/pull/82318/commits/a6637b6066452c734b93d6a9267c7dd52419765a</a> for some examples</p>\n<p>For bootstrapping reasons I have the trait defined as <code>Try2021</code>, but it's exported as just <code>Try</code>, and now the errors mention <code>Try</code> instead of <code>Try2021</code>, which is really nice.  There's also a bunch of places that used to write out <code> for `std::result::Result&lt;i32, ()&gt;` </code> but now just say <code> for `Result&lt;i32, ()&gt;` </code>.</p>",
        "id": 227155767,
        "sender_full_name": "scottmcm",
        "timestamp": 1613899768
    },
    {
        "content": "<p>Oh, is that turned on by default now?</p>",
        "id": 227186844,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1613933896
    },
    {
        "content": "<p>nice</p>",
        "id": 227186852,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1613933903
    },
    {
        "content": "<p>Well it's on in the UI tests at least <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 227190185,
        "sender_full_name": "scottmcm",
        "timestamp": 1613937463
    },
    {
        "content": "<p>Does that work for type aliases too? I was thinking of things like being able to define a <code>repr_c::Box&lt;T&gt;</code> as well as a <code>repr_c::Box&lt;[T]&gt;</code>, while keeing internally a special implementation for the slice case (<code>c_slice::Box&lt;T&gt;</code>) and it recently occured to me that I could export a type alias using a helper trait so that<br>\n<code>both::Box&lt;T&gt;</code> unifies both things under a common name; but the (minor) \"issue\" is that in error messages and such the actual type names / paths do leak <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 227193278,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1613940726
    },
    {
        "content": "<p>Oh wow, that is nice!</p>",
        "id": 227194045,
        "sender_full_name": "Noah Lev",
        "timestamp": 1613941621
    },
    {
        "content": "<p>And these errors changed too!</p>\n<h1>stable</h1>\n<div class=\"codehilite\"><pre><span></span><code>error[E0308]: mismatched types\n --&gt; src/lib.rs:2:5\n  |\n2 |     Ok(1)\n  |     ^^^^^ expected `()`, found enum `std::result::Result`\n  |\n  = note: expected unit type `()`\n                  found enum `std::result::Result&lt;{integer}, _&gt;`\nhelp: try adding a semicolon\n  |\n2 |     Ok(1);\n  |          ^\nhelp: try adding a return type\n  |\n1 | fn foo() -&gt; std::result::Result&lt;{integer}, _&gt; {\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n</code></pre></div>\n<h1>nightly</h1>\n<div class=\"codehilite\"><pre><span></span><code>error[E0308]: mismatched types\n --&gt; src/lib.rs:2:5\n  |\n2 |     Ok(1)\n  |     ^^^^^ expected `()`, found enum `Result`\n  |\n  = note: expected unit type `()`\n                  found enum `Result&lt;{integer}, _&gt;`\nhelp: try adding a semicolon\n  |\n2 |     Ok(1);\n  |          ^\nhelp: try adding a return type\n  |\n1 | fn foo() -&gt; Result&lt;{integer}, _&gt; {\n  |          ^^^^^^^^^^^^^^^^^^^^^^^\n</code></pre></div>\n<p>That has always bothered me, so it's amazing that someone got it working better! <span aria-label=\"love\" class=\"emoji emoji-2764\" role=\"img\" title=\"love\">:love:</span></p>",
        "id": 227194143,
        "sender_full_name": "Noah Lev",
        "timestamp": 1613941717
    },
    {
        "content": "<p>Looks like it might have been implemented in <a href=\"https://github.com/rust-lang/rust/issues/73996\">#73996</a>, so thank you to <code>@da-x</code>!</p>",
        "id": 227194373,
        "sender_full_name": "Noah Lev",
        "timestamp": 1613941980
    },
    {
        "content": "<p>Or for the <code>Result</code> case I think it was <a href=\"https://github.com/rust-lang/rust/issues/78052\">#78052</a>.</p>",
        "id": 227194671,
        "sender_full_name": "Noah Lev",
        "timestamp": 1613942295
    },
    {
        "content": "<p>This does not work with Clippy?<br>\n<a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=bc660c25c15422e5df85cf12a7a719f1\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=bc660c25c15422e5df85cf12a7a719f1</a></p>\n<h1>stable</h1>\n<div class=\"codehilite\"><pre><span></span><code>error[E0308]: mismatched types\n --&gt; src/main.rs:2:5\n  |\n1 | fn main() {\n  |           - expected `()` because of default return type\n2 |     Ok(1)\n  |     ^^^^^- help: try adding a semicolon: `;`\n  |     |\n  |     expected `()`, found enum `std::result::Result`\n  |\n  = note: expected unit type `()`\n                  found enum `std::result::Result&lt;{integer}, _&gt;`\n</code></pre></div>\n<h1>nightly</h1>\n<div class=\"codehilite\"><pre><span></span><code>error[E0308]: mismatched types\n --&gt; src/main.rs:2:5\n  |\n1 | fn main() {\n  |           - expected `()` because of default return type\n2 |     Ok(1)\n  |     ^^^^^ expected `()`, found enum `Result`\n  |\n  = note: expected unit type `()`\n                  found enum `Result&lt;{integer}, _&gt;`\n</code></pre></div>\n<h1>clippy</h1>\n<div class=\"codehilite\"><pre><span></span><code>error[E0308]: mismatched types\n --&gt; src/main.rs:2:5\n  |\n1 | fn main() {\n  |           - expected `()` because of default return type\n2 |     Ok(1)\n  |     ^^^^^ expected `()`, found enum `std::result::Result`\n  |\n  = note: expected unit type `()`\n                  found enum `std::result::Result&lt;{integer}, _&gt;`\n</code></pre></div>",
        "id": 228466379,
        "sender_full_name": "hyd-dev",
        "timestamp": 1614711816
    }
]