[
    {
        "content": "<p>During a recent training, someone asked if there is some way of avoiding footguns when using the catch-all pattern. </p>\n<p>As a concrete example, here we start with two variants and all the cases are handled. If we add a third variant, the compiler won't warn us about the <code>match</code> because we <em>are</em> handling the new case, but the programmer actually wanted to be forced to look at each match to decide if the catch-all was appropriate: </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">enum</span> <span class=\"nc\">Letter</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Alpha</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Beta</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">in_a_function_far_away_from_the_enum_definition</span><span class=\"p\">(</span><span class=\"n\">l</span>: <span class=\"nc\">Letter</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">l</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Letter</span>::<span class=\"n\">Alpha</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cm\">/* do something */</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cm\">/* do something */</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I didn't have a great answer other than \"don't use a catch-all\", which felt like a cop-out answer. Any thoughts?</p>",
        "id": 231253901,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1616376496
    },
    {
        "content": "<blockquote>\n<p>I didn't have a great answer other than \"don't use a catch-all\", which felt like a cop-out answer. Any thoughts?</p>\n</blockquote>\n<p>I mean, I do think that's the right answer, but if it helps I opened <a href=\"https://github.com/rust-lang/rust/issues/75235\">https://github.com/rust-lang/rust/issues/75235</a> a while ago to have the compiler suggest how to remove the catch-all</p>",
        "id": 231253930,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1616376578
    },
    {
        "content": "<p>(concur with <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span>'s point about Clippy first)</p>",
        "id": 231254317,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1616377031
    },
    {
        "content": "<p>I think a key difference in their question and your issue is that they are probably using the catch-all to apply to more than one variant.</p>",
        "id": 231254380,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1616377139
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116155\">Jake Goulding</span> <a href=\"#narrow/stream/122651-general/topic/Adding.20variants.20to.20enums.20that.20are.20matched.20using.20a.20catch-all/near/231254380\">said</a>:</p>\n<blockquote>\n<p>I think a key difference in their question and your issue is that they are probably using the catch-all to apply to more than one variant.</p>\n</blockquote>\n<p>I often use or-patterns like <code>Beta | Gamma | Delta</code> instead of wildcards if I want to ensure I get compiler errors when more variants are added.</p>",
        "id": 231254547,
        "sender_full_name": "Noah Lev",
        "timestamp": 1616377357
    },
    {
        "content": "<p>Yep, that's basically what I suggested. I think the \"problem\" with that is that you need to know ahead of time that you want those compiler errors. This seems like it would lead to a broad suggestion to just never use a catch-all to start with.</p>",
        "id": 231254572,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1616377437
    },
    {
        "content": "<blockquote>\n<p>I think the \"problem\" with that is that you need to know ahead of time that you want those compiler errors. This seems like it would lead to a broad suggestion to just never use a catch-all to start with.</p>\n</blockquote>\n<p>Yeah, I use top-level wildcards (<code>_ =&gt;</code>), but I think I use the or-patterns approach significantly more. I prefer the compiler errors even if they can be excessive :)</p>",
        "id": 231254737,
        "sender_full_name": "Noah Lev",
        "timestamp": 1616377623
    },
    {
        "content": "<p>Same for me, but why is it that I'd feel bad about making a sweeping proclamation like \"never use wildcard pattens\"?</p>",
        "id": 231255076,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1616378078
    },
    {
        "content": "<blockquote>\n<p>why is it that I'd feel bad about making a sweeping proclamation like \"never use wildcard pattens\"?</p>\n</blockquote>\n<p>Wildcard patterns certainly have their uses, especially when matching on tuples like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">foo1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">foo2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">Foo</span>::<span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Foo</span>::<span class=\"n\">A</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">Foo</span>::<span class=\"n\">B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Foo</span>::<span class=\"n\">B</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"cm\">/* error */</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 231255440,
        "sender_full_name": "Noah Lev",
        "timestamp": 1616378470
    },
    {
        "content": "<p>I think the answer is \"it depends\" ;)</p>",
        "id": 231255446,
        "sender_full_name": "Noah Lev",
        "timestamp": 1616378482
    },
    {
        "content": "<p>Although in that example you will be silently breaking if <code>Foo::C</code> is added (assuming that's an implementation of <code>PartialEq</code> or similar)</p>",
        "id": 231294068,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616412138
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/122651-general/topic/Adding.20variants.20to.20enums.20that.20are.20matched.20using.20a.20catch-all/near/231294068\">said</a>:</p>\n<blockquote>\n<p>Although in that example you will be silently breaking if <code>Foo::C</code> is added (assuming that's an implementation of <code>PartialEq</code> or similar)</p>\n</blockquote>\n<p>Actually it's an abstracted version of type unification, which is basically <code>PartialEq</code> for type systems <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 231381151,
        "sender_full_name": "Noah Lev",
        "timestamp": 1616445680
    },
    {
        "content": "<p>But, yeah, it will break if <code>Foo::C</code> is added, which is annoying. But I don't know of any better way to do it without listing out all the n^2 permutations of the variants...</p>",
        "id": 231381239,
        "sender_full_name": "Noah Lev",
        "timestamp": 1616445721
    },
    {
        "content": "<p><code>PartialEq</code> is exactly where I have experienced (and still do)  this problem.</p>",
        "id": 232804865,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1617302493
    },
    {
        "content": "<p>So much so that I wrote a macro to write out the implementation of <code>PartialEq</code></p>",
        "id": 232804967,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1617302529
    },
    {
        "content": "<p>It'd be nice if</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[derive(PartialEq)]</span><span class=\"w\"></span>\n<span class=\"k\">enum</span> <span class=\"nc\">A</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">X</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Y</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>generated <code>impl &lt;T: PartialEq&lt;U&gt;, U&gt; PartialEq&lt;A&lt;U&gt;&gt; for A&lt;T&gt;</code></p>",
        "id": 232805570,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1617302757
    }
]