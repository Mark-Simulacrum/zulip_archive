[
    {
        "content": "<p>Heya. I have a <code>MaybeUninit&lt;UnsafeCell&lt;Foo&gt;&gt;</code> where <code>Foo([u8; N])</code>, and I'm trying to go from a <code>*mut Foo</code> to a <code>*mut u8</code>, is there a good way to do this, I don't want to create an intermediate reference</p>",
        "id": 277659089,
        "sender_full_name": "Brandon Falk",
        "timestamp": 1649017354
    },
    {
        "content": "<p>Is <code>Foo</code> marked <code>#[repr(transparent)]</code>?</p>",
        "id": 277659191,
        "sender_full_name": "scottmcm",
        "timestamp": 1649017462
    },
    {
        "content": "<p>Sadly I need <code>align(4096)</code> on it, it's why I'm using the wrapper structure in the first place. Unless there's a better way to have a strictly aligned <code>[u8; N]</code></p>",
        "id": 277659211,
        "sender_full_name": "Brandon Falk",
        "timestamp": 1649017493
    },
    {
        "content": "<p>I assume that <code>core::ptr::addr_of!((*foo).0)</code> to get the pointer to the <code>.0</code> field is UB if <code>foo</code> is uninit?</p>",
        "id": 277660052,
        "sender_full_name": "Brandon Falk",
        "timestamp": 1649018665
    },
    {
        "content": "<p>I don't fully understand the temporary semantics of <code>addr_of!</code>, but given it cannot take an address of a temporary value it might be right here?</p>",
        "id": 277660123,
        "sender_full_name": "Brandon Falk",
        "timestamp": 1649018779
    },
    {
        "content": "<p>Ah, example <a href=\"https://github.com/rust-lang/rust/issues/2\">#2</a> under <code>addr_of_mut!</code> is doing exactly what I want, awesome</p>",
        "id": 277660218,
        "sender_full_name": "Brandon Falk",
        "timestamp": 1649018957
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"356799\">Brandon Falk</span> <a href=\"#narrow/stream/122651-general/topic/*mut.20Foo.28.5Bu8.5D.29.20to.20*mut.20u8.20without.20ref/near/277660052\">said</a>:</p>\n<blockquote>\n<p>I assume that <code>core::ptr::addr_of!((*foo).0)</code> to get the pointer to the <code>.0</code> field is UB if <code>foo</code> is uninit?</p>\n</blockquote>\n<p>It should be valid as long as <code>foo</code> is a valid pointer</p>",
        "id": 277661482,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1649020455
    },
    {
        "content": "<p>Btw you can mix <code>C</code> and <code>align</code> <code>repr</code>s</p>",
        "id": 277661487,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1649020478
    },
    {
        "content": "<p>Yeah, I have it <code>repr(C)</code> but I still kinda don't like the weird casting, nevertheless</p>",
        "id": 277661502,
        "sender_full_name": "Brandon Falk",
        "timestamp": 1649020514
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/stable/std/ptr/macro.addr_of_mut.html\">https://doc.rust-lang.org/stable/std/ptr/macro.addr_of_mut.html</a><br>\nDocumented example <a href=\"https://github.com/rust-lang/rust/issues/2\">#2</a> \"Creating a pointer to uninitialized data\" is exactly this case</p>",
        "id": 277661506,
        "sender_full_name": "Brandon Falk",
        "timestamp": 1649020535
    },
    {
        "content": "<p>I wish the documentation on <code>addr_of_mut</code> was maybe a bit more clear, but this example shows exactly what I'm doing. Looks like it's fine as the deref never happens, nor does an intermediate reference, and a pointer to uninit data is allowed</p>",
        "id": 277661552,
        "sender_full_name": "Brandon Falk",
        "timestamp": 1649020603
    },
    {
        "content": "<p>if it's repr C you can just plain cast the pointer</p>",
        "id": 277811890,
        "sender_full_name": "Lokathor",
        "timestamp": 1649118267
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">MaybeUninit</span>::<span class=\"n\">as_ptr</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">x</span><span class=\"p\">).</span><span class=\"n\">cast</span>::<span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 277811981,
        "sender_full_name": "Lokathor",
        "timestamp": 1649118352
    }
]