[
    {
        "content": "<p>This kind of code seems problematic, right?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">ptr</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">array</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">];</span><span class=\"w\"></span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">array</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"p\">].</span><span class=\"n\">as_mut_ptr</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u32</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">];</span><span class=\"w\"> </span><span class=\"c1\">// this is `array[0..3]`</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">array</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"o\">..</span><span class=\"p\">].</span><span class=\"n\">as_mut_ptr</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u32</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">];</span><span class=\"w\"> </span><span class=\"c1\">// this is `array[1..4]`</span>\n\n<span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ptr</span>::<span class=\"n\">swap</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"fm\">dbg!</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">array</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>My understanding is that the above should probably be UB and that something like the following would be how itâ€™s done properly</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">ptr</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">array</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">pointer</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">array</span><span class=\"p\">.</span><span class=\"n\">as_mut_ptr</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">pointer</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">i32</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">];</span><span class=\"w\"> </span><span class=\"c1\">// this is `array[0..3]`</span>\n<span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">pointer</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">i32</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">];</span><span class=\"w\"> </span><span class=\"c1\">// this is `array[1..4]`</span>\n\n<span class=\"w\">    </span><span class=\"n\">ptr</span>::<span class=\"n\">swap</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"fm\">dbg!</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">array</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>How could this be written nicer? I suppose with some unstable API something like the following should be a sound and perhaps reasonable approach, right?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(slice_ptr_get)]</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">ptr</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">array</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">slice_pointer</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">i32</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">array</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">slice_pointer</span><span class=\"p\">.</span><span class=\"n\">get_unchecked_mut</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u32</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">];</span><span class=\"w\"> </span><span class=\"c1\">// this is `array[0..3]`</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">slice_pointer</span><span class=\"p\">.</span><span class=\"n\">get_unchecked_mut</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">..</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u32</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">];</span><span class=\"w\"> </span><span class=\"c1\">// this is `array[1..4]`</span>\n\n<span class=\"w\">    </span><span class=\"n\">ptr</span>::<span class=\"n\">swap</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"fm\">dbg!</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">array</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I have no idea about if indexing arrays with ranges works with <code>ptr::addr_of_mut</code>. E.g. is the following sound?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">ptr</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">array</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">];</span><span class=\"w\"></span>\n\n<span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ptr</span>::<span class=\"n\">addr_of_mut</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">array</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u32</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">];</span><span class=\"w\"> </span><span class=\"c1\">// this is `array[0..3]`</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ptr</span>::<span class=\"n\">addr_of_mut</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">array</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"o\">..</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u32</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">];</span><span class=\"w\"> </span><span class=\"c1\">// this is `array[1..4]`</span>\n\n<span class=\"w\">    </span><span class=\"n\">ptr</span>::<span class=\"n\">swap</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"fm\">dbg!</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">array</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Can anyone confirm my intuition and answer the last question? By the way, the very first code example comes from <a href=\"https://doc.rust-lang.org/nightly/std/ptr/fn.swap.html#examples\">here</a>.</p>",
        "id": 239261450,
        "sender_full_name": "Frank Steffahn",
        "timestamp": 1621347626
    },
    {
        "content": "<p>I agree with you</p>",
        "id": 239262177,
        "sender_full_name": "oliver",
        "timestamp": 1621347901
    },
    {
        "content": "<p>Oh damn, that example in the docs is indeed so pre-SB <span aria-label=\"scream\" class=\"emoji emoji-1f631\" role=\"img\" title=\"scream\">:scream:</span></p>",
        "id": 239272114,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1621351213
    },
    {
        "content": "<p>what's SB?</p>",
        "id": 239272380,
        "sender_full_name": "oliver",
        "timestamp": 1621351302
    },
    {
        "content": "<p>Stacked Borrows, sorry</p>",
        "id": 239272486,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1621351331
    },
    {
        "content": "<p>do'h of course</p>",
        "id": 239272524,
        "sender_full_name": "oliver",
        "timestamp": 1621351344
    },
    {
        "content": "<p>The third snippet looks like the most sensible approach (besides the second one, which is the one I personally go for to make sure things are fine).<br>\nRegarding the last snippet, I've personally found <code>addr_of_mut!</code> to be a bit ill-defined in that regard:</p>\n<ul>\n<li>Given <code>p: &amp;Struct</code>, <code>addr_of!( (*p).field )</code> yields a pointer with provenance over that <code>field</code> <em>only</em>;</li>\n<li>Given <code>p: *const Struct</code>, <code>addr_of!( (*p).field )</code> just offsets the original pointer, preserving its original provenance.<br>\nIn that regard, I don't know if <code>addr_of!</code> on a place that outside the macro is necessarily accessed through a <code>&amp;mut</code>-reference (the usage of <code>[â€¦]</code> indexing, I mean) asserts unicity of the access to that place there and then <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> I'd personally not risk it until the SB-<code>addr_of{,_mut}!</code> interaction is better clarified / documented</li>\n</ul>",
        "id": 239273074,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1621351556
    },
    {
        "content": "<p>Okay, the following compiles and runs fine:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span>::<span class=\"n\">core</span>::<span class=\"n\">ptr</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">array</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">];</span><span class=\"w\"></span>\n\n<span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">array</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">array</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ptr</span>::<span class=\"n\">addr_of_mut</span><span class=\"o\">!</span><span class=\"p\">((</span><span class=\"o\">*</span><span class=\"n\">array</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u32</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">];</span><span class=\"w\"> </span><span class=\"c1\">// this is `array[0..3]`</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ptr</span>::<span class=\"n\">addr_of_mut</span><span class=\"o\">!</span><span class=\"p\">((</span><span class=\"o\">*</span><span class=\"n\">array</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"o\">..</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u32</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">];</span><span class=\"w\"> </span><span class=\"c1\">// this is `array[1..4]`</span>\n\n<span class=\"w\">    </span><span class=\"n\">ptr</span>::<span class=\"n\">swap</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"fm\">dbg!</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">array</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<ul>\n<li><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=f625834986e278ba0b9f2921c23c0bac\">Playground</a></li>\n</ul>\n<p>This one I'd be more confident about it not asserting lack of aliasing when indexing <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 239273667,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1621351759
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"280891\">@Frank Steffahn</span> I don't think your first example is UB - the <code>ptr::swap</code> docs explicitly state that overlapping is allowed</p>",
        "id": 239301377,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1621362042
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> </p>\n<p>To be clear, I see UB in the code <em>mostly before</em> the <code>ptr::swap</code> call. The <code>ptr::swap</code> is necessary for UB, but really itâ€™s just a place where both mutable pointers are used; in particulat itâ€™s a place where <code>x</code> is used and dereferenced.</p>\n<p>The point is that <code>.as_mut_ptr</code> is a method on <code>&amp;mut [i32]</code>, so that</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">array</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"p\">].</span><span class=\"n\">as_mut_ptr</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u32</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">];</span><span class=\"w\"> </span><span class=\"c1\">// this is `array[0..3]`</span>\n</code></pre></div>\n<p>does</p>\n<ol>\n<li>create a <code>&amp;mut [i32]</code> slice reference pointing to <code>array[0..]</code>, and</li>\n<li>turn that reference into <code>*mut [i32]</code> and then that is further converted into <code>*mut [i32; 3]</code>.</li>\n</ol>\n<p>Similarly,</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">array</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"o\">..</span><span class=\"p\">].</span><span class=\"n\">as_mut_ptr</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u32</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">];</span><span class=\"w\"> </span><span class=\"c1\">// this is `array[1..4]`</span>\n</code></pre></div>\n<p>does</p>\n<ol>\n<li>create a <code>&amp;mut [i32]</code> slice reference pointing to <code>array[1..]</code>, and</li>\n<li>turn that reference into <code>*mut [i32]</code> and then that is further converted into <code>*mut [i32; 3]</code>.</li>\n</ol>\n<p>The point is that as far as I understand stacked borrows, the creation of the mutable borrow of <code>array[1..]</code> <em>invalidates</em> all pointers derived from the previous mutable borrow of <code>array[0..]</code>, which includes the pointer <code>x</code>. So that any later usage of <code>x</code> later such as in <code>ptr::swap</code> is UB.  Iâ€™m very aware of what the <code>ptr::swap</code> docs say, in fact, this code example comes from said docs which provide it (and thus implicitly claim it <em>isnâ€™t</em> UB), so the <code>ptr::swap</code> docs are in fact to be  scrutinized here. Furthermore, in case you didnâ€™t notice, <em>all</em> of my examples feature a call to <code>ptr::swap</code> with overlapping pointers; even the code examples which I think <em>arenâ€™t</em> UB.</p>\n<hr>\n<p>To throw in dome citation of the docs, <code>ptr::swap</code> mentions</p>\n<blockquote>\n<p>Both <code>x</code> and <code>y</code> must be <a href=\"https://doc.rust-lang.org/nightly/std/ptr/index.html#safety\">valid</a> for both reads and writes.</p>\n</blockquote>\n<p>and the linked definition of pointer validity says</p>\n<blockquote>\n<p>The result of casting a reference to a pointer is valid for as long as the underlying object is live and no reference (just raw pointers) is used to access the same memory.</p>\n</blockquote>",
        "id": 239310268,
        "sender_full_name": "Frank Steffahn",
        "timestamp": 1621365461
    },
    {
        "content": "<p>By the way Miri (with <code>-Zmiri-track-raw-pointers</code>) agrees that this is UB</p>",
        "id": 239311488,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1621365983
    },
    {
        "content": "<p>Hereâ€™s a PR bringing the second approach into the documentation <a href=\"https://github.com/rust-lang/rust/issues/85464\">#85464</a>.</p>",
        "id": 239401240,
        "sender_full_name": "Frank Steffahn",
        "timestamp": 1621421027
    }
]