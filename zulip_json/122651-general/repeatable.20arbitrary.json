[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> If I wanted to use <code>Arbitrary</code>outside of proptest to generate test data, how could I make it repeatable? For example, is there a way I can control the RNG and its seed?</p>",
        "id": 154882789,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1547165321
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span>  so what <code>Arbitrary::arbitrary</code> does is merely return a type that implements <code>Strategy</code>;  A strategy then defines how to generate a <code>ValueTree</code> (which defines how to shrink + produce values) <em>based</em> on a <code>TestRunner</code> that it gets as an argument to <code>new_tree</code>; what the <code>proptest! { .. }</code> macro does is the setup of the test runner and such behind the scenes</p>",
        "id": 154882886,
        "sender_full_name": "centril",
        "timestamp": 1547165486
    },
    {
        "content": "<p><a href=\"https://altsysrq.github.io/rustdoc/proptest/latest/proptest/strategy/trait.Strategy.html#tymethod.new_tree\" target=\"_blank\" title=\"https://altsysrq.github.io/rustdoc/proptest/latest/proptest/strategy/trait.Strategy.html#tymethod.new_tree\">https://altsysrq.github.io/rustdoc/proptest/latest/proptest/strategy/trait.Strategy.html#tymethod.new_tree</a></p>",
        "id": 154882895,
        "sender_full_name": "centril",
        "timestamp": 1547165514
    },
    {
        "content": "<p><a href=\"https://altsysrq.github.io/rustdoc/proptest/latest/proptest/test_runner/struct.TestRunner.html\" target=\"_blank\" title=\"https://altsysrq.github.io/rustdoc/proptest/latest/proptest/test_runner/struct.TestRunner.html\">https://altsysrq.github.io/rustdoc/proptest/latest/proptest/test_runner/struct.TestRunner.html</a></p>",
        "id": 154882940,
        "sender_full_name": "centril",
        "timestamp": 1547165524
    },
    {
        "content": "<p>you can tweak the <code>Config</code> there for example</p>",
        "id": 154882952,
        "sender_full_name": "centril",
        "timestamp": 1547165566
    },
    {
        "content": "<blockquote>\n<p>outside of proptest</p>\n</blockquote>",
        "id": 154882958,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1547165576
    },
    {
        "content": "<p>i.e. the arbitrary crate (that is related, yeah?)</p>",
        "id": 154882972,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1547165594
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span>  no, that has nothing to do with proptest's version of Arbitrary</p>",
        "id": 154882981,
        "sender_full_name": "centril",
        "timestamp": 1547165622
    },
    {
        "content": "<p>that's unfortunate. Now I need to read different docs</p>",
        "id": 154883027,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1547165643
    },
    {
        "content": "<p>Maybe my question would then be... \"is it useful to use proptest's <code>Arbitrary</code> to generate test data outside of directly used in proptest\"</p>",
        "id": 154883046,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1547165692
    },
    {
        "content": "<p>proptest and the quickcheck crate's model of property based testing differ entirely; proptest uses value based integrated shrinking and then uses Arbitrary to define canonical strategies for a type whereas the quickcheck crate uses type based shrinking</p>",
        "id": 154883060,
        "sender_full_name": "centril",
        "timestamp": 1547165715
    },
    {
        "content": "<p>I am aware of that, but I do not see how that relates to the topic at hand</p>",
        "id": 154883067,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1547165739
    },
    {
        "content": "<p>hmm, lemme think about it a bit</p>",
        "id": 154883075,
        "sender_full_name": "centril",
        "timestamp": 1547165747
    },
    {
        "content": "<p>one step higher: I'd like to be able to generate 100MB of XML easily and test speed between my library and libxml</p>",
        "id": 154883078,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1547165754
    },
    {
        "content": "<p>I don't want to check in 100MB files</p>",
        "id": 154883123,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1547165766
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span>  you don't care about shrinking then?</p>",
        "id": 154883127,
        "sender_full_name": "centril",
        "timestamp": 1547165779
    },
    {
        "content": "<p>For that, no. But I <em>would</em> love to be able to reuse this code for actual proptesting</p>",
        "id": 154883134,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1547165799
    },
    {
        "content": "<p>where shrinking is much more useful</p>",
        "id": 154883137,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1547165809
    },
    {
        "content": "<p>For speed tests, I'd just want control over the \"size\"</p>",
        "id": 154883148,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1547165833
    },
    {
        "content": "<p>OK; so outside of the definition of a Strategy, the only control over generation you have is the parameters you can set in <a href=\"https://altsysrq.github.io/rustdoc/proptest/latest/proptest/test_runner/struct.Config.html\" target=\"_blank\" title=\"https://altsysrq.github.io/rustdoc/proptest/latest/proptest/test_runner/struct.Config.html\">https://altsysrq.github.io/rustdoc/proptest/latest/proptest/test_runner/struct.Config.html</a>, e.g. <code>cases: u32</code> -- if you want to just generate a bunch of <code>&lt;Foo as Strategy&gt;::Value</code> objects, then you can make a <code>TestRunner::new(my_config)</code>, instantiate your strategy, and then call <code>new_tree(the_runner).unwrap().current()</code> a bunch of times</p>",
        "id": 154883336,
        "sender_full_name": "centril",
        "timestamp": 1547166020
    },
    {
        "content": "<p>current() should always give you the same thing, so <code>new_tree</code> is what you use to change the value generated</p>",
        "id": 154883363,
        "sender_full_name": "centril",
        "timestamp": 1547166069
    },
    {
        "content": "<p>actually if you want to do this you don't need to touch <code>cases</code> at all since you are deciding how many to generate</p>",
        "id": 154883432,
        "sender_full_name": "centril",
        "timestamp": 1547166125
    },
    {
        "content": "<p>might be useful to add a facility like this to proptest upstream</p>",
        "id": 154883435,
        "sender_full_name": "centril",
        "timestamp": 1547166137
    },
    {
        "content": "<p>There will be some overhead cause proptest will include state that is only useful to shrinking</p>",
        "id": 154883450,
        "sender_full_name": "centril",
        "timestamp": 1547166181
    },
    {
        "content": "<p>(but useless if you are not interested in shrinking)</p>",
        "id": 154883461,
        "sender_full_name": "centril",
        "timestamp": 1547166199
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span>  does that answer the question?</p>",
        "id": 154883463,
        "sender_full_name": "centril",
        "timestamp": 1547166206
    },
    {
        "content": "<p>maybe it would be good to have <code>fn values&lt;S: Strategy&gt;(self, strat: S) -&gt; impl Iterator&lt;Item = S::Value&gt;</code> or something in <code>TestRunner</code></p>",
        "id": 154883672,
        "sender_full_name": "centril",
        "timestamp": 1547166525
    },
    {
        "content": "<p>It sounds like I should file an issue, to see if folk would find this or something similar useful</p>",
        "id": 154888863,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1547173779
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span>  yeah please do</p>",
        "id": 154888908,
        "sender_full_name": "centril",
        "timestamp": 1547173806
    },
    {
        "content": "<p>(and cc me)</p>",
        "id": 154888913,
        "sender_full_name": "centril",
        "timestamp": 1547173812
    }
]