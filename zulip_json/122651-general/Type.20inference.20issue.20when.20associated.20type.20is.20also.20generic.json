[
    {
        "content": "<p>I'm surprised by this difference in behavior:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Bar</span>: <span class=\"nb\">Clone</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// Works.</span>\n<span class=\"k\">fn</span> <span class=\"nf\">clone_bar1</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">Foo</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">b</span>: <span class=\"nc\">T</span>::<span class=\"n\">Bar</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">T</span>::<span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// Does not work.</span>\n<span class=\"k\">fn</span> <span class=\"nf\">clone_bar2</span><span class=\"o\">&lt;</span><span class=\"n\">B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">(</span><span class=\"n\">b</span>: <span class=\"nc\">B</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">B</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Is this a known issue?</p>",
        "id": 249323970,
        "sender_full_name": "Duncan",
        "timestamp": 1628832310
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=b5d7342796874dc9dc085e6e7722d85d\">playground</a></p>\n<p>I think this should be left as is, because otherwise the second example can be pretty bad in terms of readability. Anyone reading the code might not be able know which trait the function comes from if another trait is used instead of <code>Clone</code>.</p>",
        "id": 249386365,
        "sender_full_name": "fee1-dead",
        "timestamp": 1628874676
    },
    {
        "content": "<p>Even <code>&lt;&lt;T as Foo&gt;::Bar as Clone&gt;::clone(&amp;b)</code> complains about missing <code>B: Clone</code></p>",
        "id": 249400284,
        "sender_full_name": "cuviper",
        "timestamp": 1628881640
    },
    {
        "content": "<p>I think this is just <a href=\"https://github.com/rust-lang/rust/issues/20671\">https://github.com/rust-lang/rust/issues/20671</a>? Seems a bit odd that it works for <code>T::Bar</code> though</p>",
        "id": 249407712,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1628885398
    },
    {
        "content": "<p>Wow if I could put where clauses in my traits and have them actually evaluated when used elsewhere, that would simplify my code sooooo much</p>",
        "id": 249409942,
        "sender_full_name": "Duncan",
        "timestamp": 1628886447
    },
    {
        "content": "<p>I'm surprised that the compiler doesn't complain about the missing trait bound <code>B: Clone</code>, due to this bound being required by <code>&lt;T as Foo&gt;::Bar: Clone</code>. This works, but I guess this isn't what you're after: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=09be14a435df9a930fe9cb5284043996\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=09be14a435df9a930fe9cb5284043996</a></p>",
        "id": 249411255,
        "sender_full_name": "Pointerbender",
        "timestamp": 1628887115
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"400735\">Pointerbender</span> <a href=\"#narrow/stream/122651-general/topic/Type.20inference.20issue.20when.20associated.20type.20is.20also.20generic/near/249411255\">said</a>:</p>\n<blockquote>\n<p>I'm surprised that the compiler doesn't complain about the missing trait bound <code>B: Clone</code>, due to this bound being required by <code>&lt;T as Foo&gt;::Bar: Clone</code>. This works, but I guess this isn't what you're after: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=09be14a435df9a930fe9cb5284043996\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=09be14a435df9a930fe9cb5284043996</a></p>\n</blockquote>\n<p>I would expect that <code>T: Foo</code> should imply <code>T::Bar: Clone</code> regardless of the context. But maybe I don't understand how associated type bounds are supposed to work.</p>",
        "id": 249432982,
        "sender_full_name": "Duncan",
        "timestamp": 1628906516
    }
]