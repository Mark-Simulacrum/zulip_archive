[
    {
        "content": "<p>The <a href=\"https://doc.rust-lang.org/std/panic/fn.catch_unwind.html#notes\">documentation of std::panic::catch_unwind</a> states that it's not guaranteed to catch all panics, with the following note:</p>\n<blockquote>\n<p>Note that this function may not catch all panics in Rust. A panic in Rust is not always implemented via unwinding, but can be implemented by aborting the process as well. This function only catches unwinding panics, not those that abort the process.<br>\nAlso note that unwinding into Rust code with a foreign exception (e.g. a an exception thrown from C++ code) is undefined behavior.</p>\n</blockquote>\n<p>What this leaves out from specifying is what exactly <code>catch_unwind</code> <em>is</em> guaranteed to catch? This can make a difference when choosing how to design something that deals with panics.</p>\n<p>For example, is <code>catch_unwind</code> guaranteed to catch any panic that would otherwise cause a drop impl to be called when unwinding? I.e. are the following two code snippets equivalent from a \"what panics are covered\" perspective?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">panic</span>::<span class=\"n\">catch_unwind</span><span class=\"p\">(</span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">());</span><span class=\"w\"></span>\n\n<span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">is_err</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"A panic happened!\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">std</span>::<span class=\"n\">panic</span>::<span class=\"n\">resume_unwind</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>And:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">LogOnPanic</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Drop</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">LogOnPanic</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">drop</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"A panic happened!\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">guard</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">LogOnPanic</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"n\">foo</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">forget</span><span class=\"p\">(</span><span class=\"n\">guard</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 234156713,
        "sender_full_name": "John-John Tedro",
        "timestamp": 1618233914
    },
    {
        "content": "<p>catch_unwind will stop all unwinding triggered by a Rust panic. It will not stop the process from aborting if built with panic=abort, or catch things like C++ exceptions.</p>",
        "id": 234156987,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1618234011
    },
    {
        "content": "<p>or any other aborts (for example, panic-in-panic).</p>",
        "id": 234169243,
        "sender_full_name": "Eric Huss",
        "timestamp": 1618237959
    },
    {
        "content": "<p>(or <code>std::process::abort</code> <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span>)</p>",
        "id": 234170119,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1618238253
    }
]