[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> Hey. Let me know when you're around for a brief chat.</p>",
        "id": 132487528,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1534807866
    },
    {
        "content": "<p>I'm here.</p>",
        "id": 132487951,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1534808576
    },
    {
        "content": "<p>If you want some comment regarding <a href=\"https://github.com/rust-lang/rfcs/pull/2498\" target=\"_blank\" title=\"https://github.com/rust-lang/rfcs/pull/2498\">https://github.com/rust-lang/rfcs/pull/2498</a>, then I don't know what to say.</p>",
        "id": 132487975,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1534808640
    },
    {
        "content": "<p>Hi. So... I was just chatting with @nrc about expanding the proc macro API to allow the creation of <code>hyg_lift</code> and <code>hyg_swap</code> proc macros.</p>",
        "id": 132488017,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1534808653
    },
    {
        "content": "<p>The comment section looks like a bunch of people talking past each other.</p>",
        "id": 132488021,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1534808659
    },
    {
        "content": "<p>Apart from tmcombs coming in from the cold, I don't think so really.</p>",
        "id": 132488035,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1534808704
    },
    {
        "content": "<p>Proc macro API already provides all possible operations to get and set spans and split them into location and hygiene data.</p>",
        "id": 132488039,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1534808713
    },
    {
        "content": "<p>Just @nrc proposed a new approach (different from what I wrote up) and I agreed it made sense</p>",
        "id": 132488046,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1534808721
    },
    {
        "content": "<p>I see</p>",
        "id": 132488049,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1534808723
    },
    {
        "content": "<p>@nrc Was thinking of a more abstract proc macro API for hygiene but I'm open...</p>",
        "id": 132488057,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1534808755
    },
    {
        "content": "<p>But that RFC is not about proc macros at all.</p>",
        "id": 132488099,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1534808765
    },
    {
        "content": "<p>No, it's not.</p>",
        "id": 132488107,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1534808786
    },
    {
        "content": "<p>But the idea is to solve the problem of hygiene opt-out.</p>",
        "id": 132488113,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1534808800
    },
    {
        "content": "<p>Proc macros can do any operations, but proc-macros are a big gun that shouldn't be pulled on every occasion.</p>",
        "id": 132488133,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1534808834
    },
    {
        "content": "<p>And I concur with @nrc that the best way to do it is just to expand the proc macro API</p>",
        "id": 132488134,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1534808836
    },
    {
        "content": "<p>For proc macros hygiene opt-out is a solved problem, it was just stabilized in the previous release.</p>",
        "id": 132488140,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1534808867
    },
    {
        "content": "<p>Hmm... so you prefer the existing approach, more or less?</p>",
        "id": 132488142,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1534808871
    },
    {
        "content": "<p>(yes, but I mean using proc macros within declarative macros for the purpose of hygiene opt-out)</p>",
        "id": 132488184,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1534808887
    },
    {
        "content": "<p>from the user-perspective they're the same. macros are macros, when you use them.</p>",
        "id": 132488191,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1534808906
    },
    {
        "content": "<p>Decl macros just need some syntax for it usable in common case so that proc macros are not commonly necessary.</p>",
        "id": 132488192,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1534808907
    },
    {
        "content": "<p>but that's what @nrc is saying I guess: why not make use of proc macros for that hygiene opt-out syntax?</p>",
        "id": 132488222,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1534808956
    },
    {
        "content": "<p>Why?</p>",
        "id": 132488232,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1534808977
    },
    {
        "content": "<p>To get some horrible macro invocation syntax instead of just #ident?</p>",
        "id": 132488236,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1534808989
    },
    {
        "content": "<p>heh</p>",
        "id": 132488284,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1534809006
    },
    {
        "content": "<p>I know what you mean... the question is, how common will this be?</p>",
        "id": 132488292,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1534809019
    },
    {
        "content": "<p>Also, what about the case when one wants to set the syntax context of one token to that of another token?</p>",
        "id": 132488305,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1534809039
    },
    {
        "content": "<blockquote>\n<p>Also, what about the case when one wants to set the syntax context of one token to that of another token?</p>\n</blockquote>\n<p>Proc macros</p>",
        "id": 132488323,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1534809077
    },
    {
        "content": "<p>Okay, so you agree to proc macros there...</p>",
        "id": 132488331,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1534809087
    },
    {
        "content": "<p>hmm</p>",
        "id": 132488332,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1534809088
    },
    {
        "content": "<p>I feel like I'm the man-in-the-middle between you and nrc now, hah.</p>",
        "id": 132488336,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1534809102
    },
    {
        "content": "<p>So to be clear... can one already implement opt-out syntax as a proc macro? e.g. <code>lift!(...)</code>?</p>",
        "id": 132488395,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1534809163
    },
    {
        "content": "<p>is it possible to get the <code>SyntaxContext</code> of expansions, up the chain?</p>",
        "id": 132488401,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1534809176
    },
    {
        "content": "<p>Could you describe what <code>lift!(...)</code> does?</p>",
        "id": 132488418,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1534809205
    },
    {
        "content": "<p>What arguments it takes and what it returns.</p>",
        "id": 132488426,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1534809226
    },
    {
        "content": "<p>Just an arbitrary token stream, and it returns the same token stream but with its syntax context changed to that of the the call-site (i.e. outside of the current expansion) relative to where it is used/invoked.</p>",
        "id": 132488497,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1534809321
    },
    {
        "content": "<p>Yes, sure this can be implemented as a procedural macro.</p>",
        "id": 132488599,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1534809476
    },
    {
        "content": "<p>Or as a built-in syntactic extension if it needs to live in the standard library.</p>",
        "id": 132488651,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1534809504
    },
    {
        "content": "<p>I don't think it will be convenient to use in the common case though.</p>",
        "id": 132488760,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1534809662
    },
    {
        "content": "<p>Yeah. I mentioned to @nrc that the stdlib approach might be better... is the syntax extension API different to the proc macro API? Is that the \"raw\" interface to rustc?</p>",
        "id": 132488778,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1534809685
    },
    {
        "content": "<p>Say, you need to generate a struct visible from outside of the macro <code>struct #S;</code></p>",
        "id": 132488779,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1534809691
    },
    {
        "content": "<p>inconvenient because it's too verbose?</p>",
        "id": 132488780,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1534809693
    },
    {
        "content": "<p>Then you can't write <code>struct lift!(S);</code> because macro invocations are not allowed in arbitrary identifier positions.</p>",
        "id": 132488830,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1534809734
    },
    {
        "content": "<p>They're not allowed in arbitrary identifier positions because it creates parsing difficulties, or what?</p>",
        "id": 132488843,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1534809770
    },
    {
        "content": "<p>This is an interesting question, but I can't answer it right now.<br>\nThey certainly make parsing more complex, but I'm not sure how much more complex.</p>",
        "id": 132488952,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1534809912
    },
    {
        "content": "<p>There was an old RFC about this, IIRC.</p>",
        "id": 132488965,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1534809940
    },
    {
        "content": "<p>yeah, looking at it now hmm</p>",
        "id": 132489557,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1534810906
    },
    {
        "content": "<p>seems the concerns were mainly about a) macro-names being defined by expansions of other macros, b) readability.</p>",
        "id": 132489602,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1534810937
    },
    {
        "content": "<p>I could be mistaken though</p>",
        "id": 132489604,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1534810941
    }
]