[
    {
        "content": "<p>To my surprise, the following code</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">rc</span>::<span class=\"n\">Rc</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">Rc</span><span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Rc</span><span class=\"o\">&lt;</span><span class=\"n\">dyn</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>generates MIR like this:</p>\n<div class=\"codehilite\"><pre><span></span>fn  foo(_1: std::rc::Rc&lt;std::string::String&gt;) -&gt; std::rc::Rc&lt;dyn std::marker::Send&gt; {\n    let mut _0: std::rc::Rc&lt;dyn std::marker::Send&gt;; // return place in scope 0 at src/lib.rs:2:26: 2:38\n    let mut _2: std::rc::Rc&lt;dyn std::marker::Send&gt;; // in scope 0 at src/lib.rs:2:41: 2:42\n    let mut _3: std::rc::Rc&lt;std::string::String&gt;; // in scope 0 at src/lib.rs:2:41: 2:42\n\n    bb0: {\n        StorageLive(_2);                 // bb0[0]: scope 0 at src/lib.rs:2:41: 2:42\n        StorageLive(_3);                 // bb0[1]: scope 0 at src/lib.rs:2:41: 2:42\n        _3 = move _1;                    // bb0[2]: scope 0 at src/lib.rs:2:41: 2:42\n        _2 = move _3 as std::rc::Rc&lt;dyn std::marker::Send&gt; (Pointer(Unsize)); // bb0[3]: scope 0 at src/lib.rs:2:41: 2:42\n        StorageDead(_3);                 // bb0[4]: scope 0 at src/lib.rs:2:41: 2:42\n        _0 = move _2 as std::rc::Rc&lt;dyn std::marker::Send&gt; (Pointer(Unsize)); // bb0[5]: scope 0 at src/lib.rs:2:41: 2:42\n        StorageDead(_2);                 // bb0[6]: scope 0 at src/lib.rs:2:43: 2:44\n        return;                          // bb0[7]: scope 0 at src/lib.rs:2:44: 2:44\n    }\n}\n</pre></div>\n\n\n<p>why does it cast twice? Cc <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span></p>",
        "id": 183168018,
        "sender_full_name": "RalfJ",
        "timestamp": 1576078305
    },
    {
        "content": "<p>hm, I wonder if we unsize whenever we move an unsized value</p>",
        "id": 183168958,
        "sender_full_name": "simulacrum",
        "timestamp": 1576078760
    },
    {
        "content": "<p><code>Rc&lt;dyn Send&gt;</code> isn't an unsized value though</p>",
        "id": 183169066,
        "sender_full_name": "RalfJ",
        "timestamp": 1576078808
    },
    {
        "content": "<p>er, yeah, poor phrasing on my part unsized \"type\" or so, not sure if we have a good name</p>",
        "id": 183169167,
        "sender_full_name": "simulacrum",
        "timestamp": 1576078883
    },
    {
        "content": "<p>e.g. <code>fn foo(x: Rc&lt;String&gt;) -&gt; Rc&lt;dyn Send&gt; { let v: Rc&lt;dyn Send&gt; = x; v }</code> produces:</p>\n<div class=\"codehilite\"><pre><span></span>fn  foo(_1: std::rc::Rc&lt;std::string::String&gt;) -&gt; std::rc::Rc&lt;dyn std::marker::Send&gt; {\n    debug x =&gt; _1;                       // in scope 0 at src/lib.rs:2:8: 2:9\n    let mut _0: std::rc::Rc&lt;dyn std::marker::Send&gt;; // return place in scope 0 at src/lib.rs:2:26: 2:38\n    let mut _2: std::rc::Rc&lt;dyn std::marker::Send&gt;; // in scope 0 at src/lib.rs:2:66: 2:67\n    let _3: std::rc::Rc&lt;dyn std::marker::Send&gt; as UserTypeProjection { base: UserType(0), projs: [] }; // in scope 0 at src/lib.rs:2:45: 2:46\n    let mut _4: std::rc::Rc&lt;std::string::String&gt;; // in scope 0 at src/lib.rs:2:63: 2:64\n    let mut _5: std::rc::Rc&lt;dyn std::marker::Send&gt;; // in scope 0 at src/lib.rs:2:66: 2:67\n    scope 1 {\n        debug v =&gt; _3;                   // in scope 1 at src/lib.rs:2:45: 2:46\n    }\n\n    bb0: {\n        StorageLive(_2);                 // bb0[0]: scope 0 at src/lib.rs:2:66: 2:67\n        StorageLive(_3);                 // bb0[1]: scope 0 at src/lib.rs:2:45: 2:46\n        StorageLive(_4);                 // bb0[2]: scope 0 at src/lib.rs:2:63: 2:64\n        _4 = move _1;                    // bb0[3]: scope 0 at src/lib.rs:2:63: 2:64\n        _3 = move _4 as std::rc::Rc&lt;dyn std::marker::Send&gt; (Pointer(Unsize)); // bb0[4]: scope 0 at src/lib.rs:2:63: 2:64\n        StorageDead(_4);                 // bb0[5]: scope 0 at src/lib.rs:2:63: 2:64\n        StorageLive(_5);                 // bb0[6]: scope 1 at src/lib.rs:2:66: 2:67\n        _5 = move _3;                    // bb0[7]: scope 1 at src/lib.rs:2:66: 2:67\n        _2 = move _5 as std::rc::Rc&lt;dyn std::marker::Send&gt; (Pointer(Unsize)); // bb0[8]: scope 1 at src/lib.rs:2:66: 2:67\n        StorageDead(_5);                 // bb0[9]: scope 1 at src/lib.rs:2:66: 2:67\n        StorageDead(_3);                 // bb0[10]: scope 0 at src/lib.rs:2:68: 2:69\n        _0 = move _2 as std::rc::Rc&lt;dyn std::marker::Send&gt; (Pointer(Unsize)); // bb0[11]: scope 0 at src/lib.rs:2:66: 2:67\n        StorageDead(_2);                 // bb0[12]: scope 0 at src/lib.rs:2:68: 2:69\n        return;                          // bb0[13]: scope 0 at src/lib.rs:2:69: 2:69\n    }\n}\n</pre></div>",
        "id": 183169206,
        "sender_full_name": "simulacrum",
        "timestamp": 1576078900
    },
    {
        "content": "<p>which casts another time</p>",
        "id": 183169226,
        "sender_full_name": "simulacrum",
        "timestamp": 1576078920
    },
    {
        "content": "<p>Clearly this is a job for the MIR optimization work :-)</p>",
        "id": 183171847,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1576080386
    },
    {
        "content": "<p>lmao</p>",
        "id": 183173193,
        "sender_full_name": "eddyb",
        "timestamp": 1576081195
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> this is <code>Rc&lt;T&gt;</code> -&gt; <code>Rc&lt;dyn Trait&gt;</code> -&gt; <code>Rc&lt;dyn Trait&gt;</code></p>",
        "id": 183173252,
        "sender_full_name": "eddyb",
        "timestamp": 1576081212
    },
    {
        "content": "<p>the second one is a noop</p>",
        "id": 183173257,
        "sender_full_name": "eddyb",
        "timestamp": 1576081216
    },
    {
        "content": "<p>try <code>fn foo(x: Rc&lt;dyn Send&gt;) -&gt; Rc&lt;dyn Send&gt; { x }</code></p>",
        "id": 183173323,
        "sender_full_name": "eddyb",
        "timestamp": 1576081269
    },
    {
        "content": "<p>the problem is that this might actually be needed by borrowck in some cases hmpf</p>",
        "id": 183173366,
        "sender_full_name": "eddyb",
        "timestamp": 1576081300
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span></p>",
        "id": 183173370,
        "sender_full_name": "eddyb",
        "timestamp": 1576081308
    },
    {
        "content": "<p>It's needed in borrowck because <code>&amp;mut Send + 'static</code> -&gt; <code>&amp;mut Send + 'a</code> is a valid coercion, even though <code>&amp;mut T</code> is invariant in <code>T</code>. It does seem a bit excessive to generate two casts in the case in the OP though.</p>",
        "id": 183178686,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1576084530
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> maybe we can detect the case where it's <code>'static -&gt; 'static</code>?</p>",
        "id": 183254986,
        "sender_full_name": "eddyb",
        "timestamp": 1576154839
    },
    {
        "content": "<p>like in the OP</p>",
        "id": 183254989,
        "sender_full_name": "eddyb",
        "timestamp": 1576154842
    }
]