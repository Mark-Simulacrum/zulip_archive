[
    {
        "content": "<p>Is there a good way to match on an <code>Option&lt;String&gt;</code>, with string literals?</p>",
        "id": 148321495,
        "sender_full_name": "RalfJ",
        "timestamp": 1543157951
    },
    {
        "content": "<p>for <code>String</code> there is <code>as_ref</code>, but that does not work here</p>",
        "id": 148321497,
        "sender_full_name": "RalfJ",
        "timestamp": 1543157958
    },
    {
        "content": "<p>ah, <code>.as_ref().map(|s| &amp;**s)</code> works</p>",
        "id": 148321549,
        "sender_full_name": "RalfJ",
        "timestamp": 1543158043
    },
    {
        "content": "<p>yeah tho that is exceedingly fugly</p>",
        "id": 148321550,
        "sender_full_name": "centril",
        "timestamp": 1543158058
    },
    {
        "content": "<p>yeah</p>",
        "id": 148321558,
        "sender_full_name": "RalfJ",
        "timestamp": 1543158076
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span>  try <code>.deref()</code> ?</p>",
        "id": 148321560,
        "sender_full_name": "centril",
        "timestamp": 1543158101
    },
    {
        "content": "<p>but thats not implemented for <code>Option</code>?</p>",
        "id": 148321605,
        "sender_full_name": "RalfJ",
        "timestamp": 1543158155
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span>  <a href=\"https://doc.rust-lang.org/nightly/std/option/enum.Option.html#method.deref\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/std/option/enum.Option.html#method.deref\">https://doc.rust-lang.org/nightly/std/option/enum.Option.html#method.deref</a></p>",
        "id": 148321607,
        "sender_full_name": "centril",
        "timestamp": 1543158168
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@Mazdak Farrokhzad</span> ah! thanks. I had no idea.</p>",
        "id": 148321659,
        "sender_full_name": "RalfJ",
        "timestamp": 1543158292
    },
    {
        "content": "<p>the name is odd though</p>",
        "id": 148321660,
        "sender_full_name": "RalfJ",
        "timestamp": 1543158295
    },
    {
        "content": "<p>I am taking a reference, not dereferencing one</p>",
        "id": 148321663,
        "sender_full_name": "RalfJ",
        "timestamp": 1543158302
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span>  hehe kinda; it's a bit hacky and recent</p>",
        "id": 148321676,
        "sender_full_name": "centril",
        "timestamp": 1543158349
    },
    {
        "content": "<p>but nice</p>",
        "id": 148321678,
        "sender_full_name": "centril",
        "timestamp": 1543158352
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> maybe it should be called <code>.map_ref()</code> ?</p>",
        "id": 148321722,
        "sender_full_name": "centril",
        "timestamp": 1543158382
    },
    {
        "content": "<p>ostensibly it is consistent with the <code>.as_ref()</code> method on Option tho</p>",
        "id": 148321735,
        "sender_full_name": "centril",
        "timestamp": 1543158426
    },
    {
        "content": "<p>as ref always returns an optional ref, that makes sense</p>",
        "id": 148321737,
        "sender_full_name": "RalfJ",
        "timestamp": 1543158445
    },
    {
        "content": "<p>ye</p>",
        "id": 148321743,
        "sender_full_name": "centril",
        "timestamp": 1543158464
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> that method does exactly what <code>Deref::deref</code> does.</p>",
        "id": 148321794,
        "sender_full_name": "nagisa",
        "timestamp": 1543158589
    },
    {
        "content": "<p>within an option, that is.</p>",
        "id": 148321798,
        "sender_full_name": "nagisa",
        "timestamp": 1543158602
    },
    {
        "content": "<p>(<code>&lt;String as Deref&gt;::deref(x: &amp;String) -&gt; &amp;str</code>)</p>",
        "id": 148321839,
        "sender_full_name": "nagisa",
        "timestamp": 1543158638
    },
    {
        "content": "<p>it's <code>fmap deref</code> sorta :P</p>",
        "id": 148321849,
        "sender_full_name": "centril",
        "timestamp": 1543158676
    },
    {
        "content": "<blockquote>\n<p>it's <code>fmap deref</code> sorta :P</p>\n</blockquote>\n<p>plus auto-ref^^</p>",
        "id": 148321850,
        "sender_full_name": "RalfJ",
        "timestamp": 1543158703
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@Mazdak Farrokhzad</span> ohai.</p>",
        "id": 148327276,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543169993
    },
    {
        "content": "<p>welcome to Zulip.</p>",
        "id": 148327277,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543169997
    },
    {
        "content": "<p>ohai!</p>",
        "id": 148327992,
        "sender_full_name": "centril",
        "timestamp": 1543171469
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> something like generalized ref/box patterns would help</p>",
        "id": 148340366,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1543195745
    },
    {
        "content": "<p>i.e., <code>match opt_string { Some(&amp;\"Hello!\") =&gt; ..., None =&gt; ... }</code></p>",
        "id": 148340371,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1543195765
    },
    {
        "content": "<p>yeah... though the syntax looks a bit odd here, usually pattern syntax matches construction syntax, but <code>Some(&amp;\"hello\")</code> is not how you construct an <code>Option&lt;String&gt;</code></p>",
        "id": 148360656,
        "sender_full_name": "RalfJ",
        "timestamp": 1543230430
    },
    {
        "content": "<p><code>Some(box \"hello\")</code> would make a bit more sense</p>",
        "id": 148360660,
        "sender_full_name": "RalfJ",
        "timestamp": 1543230440
    },
    {
        "content": "<p><code>Some (box \"hello\")</code> would imply ownership, i.e., <code>DerefOwn</code></p>",
        "id": 148387547,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1543257504
    },
    {
        "content": "<p>you probably want <code>Deref</code></p>",
        "id": 148387558,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1543257512
    },
    {
        "content": "<p>In analogy with <code>box</code> <em>expressions</em> constructing arbitrary smart pointers (e.g. Rc) I would intuitively prefer if this syntax simply \"matches on the pointee\" and if the nested pattern moves out then that is only valid if you can move out of that smart pointer type. It's true that <code>box</code> isn't a great keyword for that because of the similarity with <code>Box</code>, but the same issue applies to <code>box EXPR</code> so it's not pattern-specific.</p>",
        "id": 148387787,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1543257707
    },
    {
        "content": "<p>oh, ugh, <code>box</code>-for-non-<code>Box</code> was never implemented</p>",
        "id": 148387895,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1543257780
    },
    {
        "content": "<p>I would prefer something like <code>&amp;&lt;pat&gt;</code> does a <code>Deref</code>, <code>&amp;mut &lt;pat&gt;</code> does a <code>DerefMut</code>, and <code>box &lt;pat&gt;</code> does a <code>DerefOwn</code>.</p>",
        "id": 148387915,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1543257789
    },
    {
        "content": "<blockquote>\n<p><code>Some (box \"hello\")</code> would imply ownership, i.e., <code>DerefOwn</code></p>\n</blockquote>\n<p>well, I am matching a <code>String</code> which is owned like a <code>box</code></p>",
        "id": 148399151,
        "sender_full_name": "RalfJ",
        "timestamp": 1543267344
    },
    {
        "content": "<p>right, but I would expect that to move _out_ of the string.</p>",
        "id": 148399722,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1543267971
    },
    {
        "content": "<p>why? even if you view box patterns as solely about DerefOwned, afaik every other pattern that can move out doesn't <em>have to</em>, e.g. <code>Some(_)</code> doesn't move out of an Option while <code>Some(x)</code> does (default binding modes nonwithstanding)</p>",
        "id": 148399955,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1543268199
    },
    {
        "content": "<p>or is this because to match you first have to call DerefOwned and then you can't put it back?</p>",
        "id": 148399966,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1543268223
    },
    {
        "content": "<p>the latter</p>",
        "id": 148399975,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1543268244
    },
    {
        "content": "<p>and also, there are types which you want to match on as a reference which do not own their contents.</p>",
        "id": 148399987,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1543268263
    },
    {
        "content": "<p>the thing is, <code>\"hello\"</code> already is a reference</p>",
        "id": 148400722,
        "sender_full_name": "RalfJ",
        "timestamp": 1543268996
    },
    {
        "content": "<p><code>&amp;\"hello\"</code> should match an <code>&amp;&amp;str</code>...</p>",
        "id": 148400766,
        "sender_full_name": "RalfJ",
        "timestamp": 1543269004
    },
    {
        "content": "<p>Yes, and?</p>",
        "id": 148412634,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1543283130
    },
    {
        "content": "<p>generalized reference patterns :P</p>",
        "id": 148412635,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1543283133
    },
    {
        "content": "<p>generalize all the things :P</p>",
        "id": 148628840,
        "sender_full_name": "centril",
        "timestamp": 1543313407
    }
]