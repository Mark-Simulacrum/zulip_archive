[
    {
        "content": "<p>For this code <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=e584d0a9cc905d31aed9abcc3a23b8fa\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=e584d0a9cc905d31aed9abcc3a23b8fa\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=e584d0a9cc905d31aed9abcc3a23b8fa</a> we report conflicting impls, however I have failed to think of a case where this would actually be a conflicting implementation.</p>",
        "id": 164223385,
        "sender_full_name": "nagisa",
        "timestamp": 1556239999
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> those impls cannot overlap but <code>rustc</code> is too dumb to take into account that associated types are functions in terms of coherence</p>",
        "id": 164223568,
        "sender_full_name": "centril",
        "timestamp": 1556240240
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span>  simplified: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=3da3b94fd735979884440d4f3ca9fbf8\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=3da3b94fd735979884440d4f3ca9fbf8\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=3da3b94fd735979884440d4f3ca9fbf8</a></p>",
        "id": 164223640,
        "sender_full_name": "centril",
        "timestamp": 1556240325
    },
    {
        "content": "<p>That simplification looks alpha-equivalent to me <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 164223756,
        "sender_full_name": "nagisa",
        "timestamp": 1556240446
    },
    {
        "content": "<p>is making rust to understand this something we want to do?</p>",
        "id": 164223795,
        "sender_full_name": "nagisa",
        "timestamp": 1556240515
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rfcs/pull/1672\" target=\"_blank\" title=\"https://github.com/rust-lang/rfcs/pull/1672\">https://github.com/rust-lang/rfcs/pull/1672</a> (postponed)</p>",
        "id": 164223843,
        "sender_full_name": "kennytm",
        "timestamp": 1556240537
    },
    {
        "content": "<p>Aww.</p>",
        "id": 164223898,
        "sender_full_name": "nagisa",
        "timestamp": 1556240641
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> do you remember what GHC does?</p>",
        "id": 164223948,
        "sender_full_name": "centril",
        "timestamp": 1556240656
    },
    {
        "content": "<p>I do not. I never hit this back when I was using Haskell at least.</p>",
        "id": 164223958,
        "sender_full_name": "nagisa",
        "timestamp": 1556240688
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"cm\">{-# LANGUAGE TypeFamilies, FlexibleInstances #-}</span>\n<span class=\"cm\">{-# LANGUAGE UndecidableInstances #-}</span> <span class=\"c1\">-- oh noes!</span>\n\n<span class=\"kr\">class</span> <span class=\"kt\">X</span> <span class=\"n\">a</span> <span class=\"kr\">where</span> <span class=\"kr\">type</span> <span class=\"kt\">F</span> <span class=\"n\">a</span> <span class=\"ow\">::</span> <span class=\"o\">*</span>\n<span class=\"kr\">class</span> <span class=\"kt\">X</span> <span class=\"n\">a</span> <span class=\"ow\">=&gt;</span> <span class=\"kt\">Y</span> <span class=\"n\">a</span> <span class=\"kr\">where</span>\n<span class=\"kr\">data</span> <span class=\"kt\">A</span> <span class=\"ow\">=</span> <span class=\"kt\">A</span>\n<span class=\"kr\">data</span> <span class=\"kt\">B</span> <span class=\"ow\">=</span> <span class=\"kt\">B</span>\n<span class=\"kr\">instance</span> <span class=\"p\">(</span><span class=\"kt\">X</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"kt\">A</span> <span class=\"o\">~</span> <span class=\"kt\">F</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"ow\">=&gt;</span> <span class=\"kt\">Y</span> <span class=\"n\">i</span> <span class=\"kr\">where</span>\n<span class=\"kr\">instance</span> <span class=\"p\">(</span><span class=\"kt\">X</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"kt\">B</span> <span class=\"o\">~</span> <span class=\"kt\">F</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"ow\">=&gt;</span> <span class=\"kt\">Y</span> <span class=\"n\">i</span> <span class=\"kr\">where</span>\n</pre></div>\n\n\n<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> GHC 8.0.2 accepts this ^---</p>",
        "id": 164224341,
        "sender_full_name": "centril",
        "timestamp": 1556241231
    },
    {
        "content": "<p>tho I should check with a newer version to make sure it still holds</p>",
        "id": 164224424,
        "sender_full_name": "centril",
        "timestamp": 1556241327
    },
    {
        "content": "<p>Explanatory notes for those who are not Haskell proficient:<br>\n1. <code>class</code> ==&gt; <code>trait</code>;<br>\n2. the <code>Self</code> type is the first type variable in the <code>class</code>.<br>\n3. <code>type F a :: *</code> denotes an associated type <code>F</code> that when given type <code>a</code> projects to a type of kind <code>*</code> (concrete types)<br>\n4. <code>X a =&gt; Y a</code> denotes a super class constraint (to implement <code>Y</code> for <code>a</code> you must also implement <code>X</code> for <code>a</code>)<br>\n5. <code>data A = A</code> is the same as <code>struct A;</code><br>\n6. <code>instance Ctx =&gt; Class Type</code> denotes that you are defining an implementation of <code>Class</code> for <code>Type</code> provided that <code>Ctx</code> holds.<br>\n7. <code>Alpha ~ Beta</code> is a type equality constraint</p>",
        "id": 164224640,
        "sender_full_name": "centril",
        "timestamp": 1556241637
    },
    {
        "content": "<p>8. Type variables in Haskell are lowerCamelCased, concrete types are UpperCamelCased; Haskell implicitly quantifies type variables by default</p>",
        "id": 164224714,
        "sender_full_name": "centril",
        "timestamp": 1556241726
    }
]