[
    {
        "content": "<p>(a) Where's a good place to talk about this?<br>\n(b) Hashbrown's <a href=\"https://docs.rs/hashbrown/0.11.2/hashbrown/struct.HashMap.html#method.get_each_mut\"><code>get_each_mut</code></a> is behind the <code>nightly</code> flag, but it seems like that should work on stable Rust now that <code>min_const_generics</code> are stable. Would it be possible to split that out of the nightly feature flag and into its own?</p>",
        "id": 251426865,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1630432335
    },
    {
        "content": "<p>You might want to take a look at <a href=\"https://github.com/rust-lang/rust/issues/83608\">#83608</a> doing the same for slices, there was some discussion around sorting to ensure the uniqueness of keys.</p>",
        "id": 251432144,
        "sender_full_name": "The 8472",
        "timestamp": 1630434220
    },
    {
        "content": "<p>That seems like a useful thing for the hashbrown maintainers to look at to decide on what API they want, but I'm asking a slightly different thing, which is just decoupling the current implementation from the nightly flag. It could still be under a _different_ flag.</p>\n<p>Not sure how hashbrown treats feature flags / semver intersection</p>",
        "id": 251441683,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1630437490
    },
    {
        "content": "<blockquote>\n<p>(a) Where's a good place to talk about this?</p>\n</blockquote>\n<p>I don't know for sure, but you could try <a class=\"stream\" data-stream-id=\"219381\" href=\"/#narrow/stream/219381-t-libs\">#t-libs</a> since IIUC it's a rust-lang crate.</p>",
        "id": 251466587,
        "sender_full_name": "Noah Lev",
        "timestamp": 1630446879
    },
    {
        "content": "<p>hashbrown will most likely switch to the API in <a href=\"https://github.com/rust-lang/rust/issues/83608\">#83608</a> instead of the current <code>get_each_mut</code>.</p>",
        "id": 251605831,
        "sender_full_name": "Amanieu",
        "timestamp": 1630520534
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> thanks! But, again, that's not quite my question: I want access to it on stable.</p>",
        "id": 251607631,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1630521241
    },
    {
        "content": "<p>I'd be happy to accept a PR which changes the API to match <code>get_many_mut</code>, after which I can publish a new major version of hashbrown which has this API available on stable.</p>",
        "id": 251610192,
        "sender_full_name": "Amanieu",
        "timestamp": 1630522309
    },
    {
        "content": "<p>The reason for the nightly flag is that const generics were still unstable at the time the feature was added.</p>",
        "id": 251610269,
        "sender_full_name": "Amanieu",
        "timestamp": 1630522329
    },
    {
        "content": "<p>Certainly, I get that. That's why I said \"should work on stable Rust now that <code>min_const_generics</code> are stable\"</p>",
        "id": 251610546,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1630522455
    },
    {
        "content": "<p>but that needs to consider MSRV as well</p>",
        "id": 251610593,
        "sender_full_name": "cuviper",
        "timestamp": 1630522478
    },
    {
        "content": "<p>It sounds like you are saying that this Hashbrown function will not become available on stable until a new major version that also include the proposed API change.</p>",
        "id": 251610626,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1630522493
    },
    {
        "content": "<p>(IMO a dedicated feature flag could have higher MSRV though)</p>",
        "id": 251610704,
        "sender_full_name": "cuviper",
        "timestamp": 1630522526
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"138448\">cuviper</span> <a href=\"#narrow/stream/122651-general/topic/Hashbrown's.20get_each_mut.20on.20stable/near/251610593\">said</a>:</p>\n<blockquote>\n<p>but that needs to consider MSRV as well</p>\n</blockquote>\n<p>Absolutely, but the MSRV policy isn't listed in the README or anywhere immediately obvious to me in the repo.</p>",
        "id": 251610756,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1630522552
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"138448\">cuviper</span> <a href=\"#narrow/stream/122651-general/topic/Hashbrown's.20get_each_mut.20on.20stable/near/251610704\">said</a>:</p>\n<blockquote>\n<p>(IMO a dedicated feature flag could have higher MSRV though)</p>\n</blockquote>\n<p>Yep, that's what I meant by \"split that out of the nightly feature flag and into its own\".</p>",
        "id": 251610988,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1630522641
    },
    {
        "content": "<p>there's a badge at the top of the README, and a statement in the change log, but I don't know about a policy for updating that</p>",
        "id": 251611016,
        "sender_full_name": "cuviper",
        "timestamp": 1630522656
    },
    {
        "content": "<p>So there is. Unfortunately it doesn't say that it's the minimum version or get found searching for MSRV, so I did not see it.</p>",
        "id": 251611190,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1630522732
    },
    {
        "content": "<p>It's sort of implied by the Rust versions checked in CI, but you're right, it should be properly documented.</p>",
        "id": 251611555,
        "sender_full_name": "Amanieu",
        "timestamp": 1630522847
    }
]