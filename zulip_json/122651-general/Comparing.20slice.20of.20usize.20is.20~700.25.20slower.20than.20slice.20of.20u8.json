[
    {
        "content": "<p>Given the following code:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">criterion</span>::<span class=\"p\">{</span><span class=\"n\">black_box</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">criterion_group</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">criterion_main</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Criterion</span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">cmp</span>::<span class=\"n\">Ordering</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[inline(never)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">cmp_u8</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Ordering</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">cmp</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[inline(never)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">cmp_usize</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">usize</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">usize</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Ordering</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">cmp</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">criterion_benchmark</span><span class=\"p\">(</span><span class=\"n\">c</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Criterion</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">453342564535342</span><span class=\"k\">usize</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">4096</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">aa</span>: <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">4096</span><span class=\"o\">*</span><span class=\"mi\">8</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">transmute</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)};</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">c</span><span class=\"p\">.</span><span class=\"n\">bench_function</span><span class=\"p\">(</span><span class=\"s\">\"cmp_u8\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">b</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">(</span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">black_box</span><span class=\"p\">(</span><span class=\"n\">cmp_u8</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">aa</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">aa</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">});</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">c</span><span class=\"p\">.</span><span class=\"n\">bench_function</span><span class=\"p\">(</span><span class=\"s\">\"cmp_usize\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">b</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">(</span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">black_box</span><span class=\"p\">(</span><span class=\"n\">cmp_usize</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">a</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">});</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"n\">criterion_group</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">benches</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">criterion_benchmark</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">criterion_main</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">benches</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I get:</p>\n<div class=\"codehilite\"><pre><span></span><code>cmp_u8                  time:   [611.93 ns 639.82 ns 671.31 ns]\n\ncmp_usize               time:   [4.3133 us 4.4363 us 4.5769 us]\n</code></pre></div>\n<p>I assumed they will at least have similar performance, if not a little better for usize (as it's aligned correctly)<br>\nat the very least on LE platforms we can use memcmp for the usize comparisons</p>",
        "id": 220733600,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1608670703
    },
    {
        "content": "<p>You can get syntax highlighting with </p>\n<div class=\"codehilite\"><pre><span></span><code>```rust\n</code></pre></div>",
        "id": 220735933,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1608672406
    },
    {
        "content": "<p>Comparison has to... compare; what is the performance of equality testing?</p>",
        "id": 220736039,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1608672486
    },
    {
        "content": "<p>You have a <code>cmp_usize2</code> that isn't used</p>",
        "id": 220736069,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1608672515
    },
    {
        "content": "<p>Yeah I had a mistake in the example, fixed now</p>",
        "id": 220736094,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1608672541
    },
    {
        "content": "<p>You want to try something like this? (untested)</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">compare</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ah</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ab</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">align_to</span>::<span class=\"o\">&lt;</span><span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bh</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">bb</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">bt</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">align_to</span>::<span class=\"o\">&lt;</span><span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">ah</span><span class=\"p\">.</span><span class=\"n\">cmp</span><span class=\"p\">(</span><span class=\"n\">bh</span><span class=\"p\">).</span><span class=\"n\">then_with</span><span class=\"p\">(</span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">ab</span><span class=\"p\">.</span><span class=\"n\">cmp</span><span class=\"p\">(</span><span class=\"n\">bb</span><span class=\"p\">)).</span><span class=\"n\">then_with</span><span class=\"p\">(</span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"p\">.</span><span class=\"n\">cmp</span><span class=\"p\">(</span><span class=\"n\">bt</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 220736512,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1608672839
    },
    {
        "content": "<p>try to align the data to usize, compare it as a large chunk, handling the head and tail</p>",
        "id": 220736595,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1608672893
    },
    {
        "content": "<p>It's the opposite, u8 compares way <em>faster</em> than usize here</p>",
        "id": 220736615,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1608672917
    },
    {
        "content": "<p>notice that u8 is in nano seconds while usize is in micro seconds</p>",
        "id": 220736631,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1608672938
    },
    {
        "content": "<p>ah, the units are important to read</p>",
        "id": 220736632,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1608672941
    },
    {
        "content": "<p>Then my guess is that <code>&amp;[u8]</code> has a tuned assembly implementation</p>",
        "id": 220736695,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1608672966
    },
    {
        "content": "<p>try my code, flipping the <code>usize</code> and <code>u8</code></p>",
        "id": 220736718,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1608672988
    },
    {
        "content": "<p>well... is that valid...</p>",
        "id": 220736741,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1608673010
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116155\">Jake Goulding</span> <a href=\"#narrow/stream/122651-general/topic/Comparing.20slice.20of.20usize.20is.20~700.25.20slower.20than.20slice.20of.20u8/near/220736695\">said</a>:</p>\n<blockquote>\n<p>Then my guess is that <code>&amp;[u8]</code> has a tuned assembly implementation</p>\n</blockquote>\n<p>I wonder how tuned can it be. and if we can't beat it then we should probably transmute to [u8] on LE platforms</p>",
        "id": 220736752,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1608673014
    },
    {
        "content": "<p>Well, when you get to bytes, then you can start leveraging SIMD and friends</p>",
        "id": 220736779,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1608673039
    },
    {
        "content": "<p>e.g <a href=\"https://docs.rs/jetscii/0.4.4/jetscii/#benchmarks\">a 10x speedup</a></p>",
        "id": 220736806,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1608673075
    },
    {
        "content": "<p>I assumed that every bytes comparing ASM starts with getting rid of unaligned stuff, and then does aligned/SIMD reads and comparisons.<br>\nso ideally usize compare can do the same but skip the \"getting rid of unaligned stuff\" phase</p>",
        "id": 220736897,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1608673147
    },
    {
        "content": "<p>do you think a PR that transmutes to [u8] on LE on Ord/Eq impls for u16/u32/u64/u128/usize will get accepted?</p>",
        "id": 220736934,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1608673201
    },
    {
        "content": "<p>You know what they say about assuming.</p>",
        "id": 220736983,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1608673214
    },
    {
        "content": "<p>You can add an <code>assert!(head.is_empty())</code> which gets optimized to nothing, in tests I've done.</p>",
        "id": 220737006,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1608673244
    },
    {
        "content": "<p>in this case it does seem to actually be true though: <a href=\"https://github.com/esmil/musl/blob/master/src/string/memcpy.c\">https://github.com/esmil/musl/blob/master/src/string/memcpy.c</a></p>",
        "id": 220737019,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608673266
    },
    {
        "content": "<p>that way you can write the safer-looking code but not actuallyhave any overhead</p>",
        "id": 220737022,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1608673268
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> I'm not following the connection to mem<strong>cpy</strong> here.</p>",
        "id": 220737066,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1608673307
    },
    {
        "content": "<p>oh oops</p>",
        "id": 220737080,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608673316
    },
    {
        "content": "<p>lol yeah memcmp is not optimized at all in musl <a href=\"https://github.com/esmil/musl/blob/master/src/string/memcmp.c\">https://github.com/esmil/musl/blob/master/src/string/memcmp.c</a></p>",
        "id": 220737132,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608673338
    },
    {
        "content": "<p>probably glibc does magical things but I've never found it worth my time to try and struggle through glibc</p>",
        "id": 220737148,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608673355
    },
    {
        "content": "<p>On LE, you'd compare the low order bytes first with memcmp. Isn't that wrong?</p>",
        "id": 220737152,
        "sender_full_name": "Tyson Nottingham",
        "timestamp": 1608673358
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/122651-general/topic/Comparing.20slice.20of.20usize.20is.20~700.25.20slower.20than.20slice.20of.20u8/near/220737148\">said</a>:</p>\n<blockquote>\n<p>probably glibc does magical things but I've never found it worth my time to try and struggle through glibc</p>\n</blockquote>\n<p>glibc does seem to do that for memcmp <a href=\"https://sourceware.org/git/?p=glibc.git;a=blob;f=string/memcmp.c#l117\">https://sourceware.org/git/?p=glibc.git;a=blob;f=string/memcmp.c#l117</a></p>",
        "id": 220737203,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1608673408
    },
    {
        "content": "<p>wow, for glibc that's positively readable lol</p>",
        "id": 220737347,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608673512
    },
    {
        "content": "<p>I've been scarred by <a href=\"https://drewdevault.com/2020/09/25/A-story-of-two-libcs.html\">https://drewdevault.com/2020/09/25/A-story-of-two-libcs.html</a></p>",
        "id": 220737370,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608673539
    },
    {
        "content": "<p>I still prefer reading Rust though <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 220737390,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1608673553
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"255061\">Léo Lanteri Thauvin</span> <a href=\"#narrow/stream/122651-general/topic/Comparing.20slice.20of.20usize.20is.20~700.25.20slower.20than.20slice.20of.20u8/near/220737390\">said</a>:</p>\n<blockquote>\n<p>I still prefer reading Rust though <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"fm\">asm!</span><span class=\"p\">(</span><span class=\"n\">include_str</span><span class=\"p\">(</span><span class=\"s\">\"glibc/memcmp.asm\"</span><span class=\"p\">));</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 220737466,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1608673590
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116155\">Jake Goulding</span> <a href=\"#narrow/stream/122651-general/topic/Comparing.20slice.20of.20usize.20is.20~700.25.20slower.20than.20slice.20of.20u8/near/220737466\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"255061\">Léo Lanteri Thauvin</span> <a href=\"#narrow/stream/122651-general/topic/Comparing.20slice.20of.20usize.20is.20~700.25.20slower.20than.20slice.20of.20u8/near/220737390\">said</a>:</p>\n<blockquote>\n<p>I still prefer reading Rust though <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n</blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"fm\">asm!</span><span class=\"p\">(</span><span class=\"n\">include_str</span><span class=\"p\">(</span><span class=\"s\">\"glibc/memcmp.asm\"</span><span class=\"p\">));</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Didn't you forget a <code>!</code> here? x)</p>",
        "id": 220737501,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1608673629
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306073\">Tyson Nottingham</span> <a href=\"#narrow/stream/122651-general/topic/Comparing.20slice.20of.20usize.20is.20~700.25.20slower.20than.20slice.20of.20u8/near/220737152\">said</a>:</p>\n<blockquote>\n<p>On LE, you'd compare the low order bytes first with memcmp. Isn't that wrong?</p>\n</blockquote>\n<p>wops. I knew something was fishy hehe, in all my tests I tested a slice against itself so I haven't realized that I thought of endianess backwards <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span> (middle of the night here so I have an excuse <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> )</p>",
        "id": 220737536,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1608673669
    },
    {
        "content": "<p>That conclusively settles it — BE is objectively better.</p>",
        "id": 220737623,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1608673725
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"249222\">Elichai Turkel</span> <a href=\"#narrow/stream/122651-general/topic/Comparing.20slice.20of.20usize.20is.20~700.25.20slower.20than.20slice.20of.20u8/near/220737536\">said</a>:</p>\n<blockquote>\n<p>(middle of the night here so I have an excuse <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> )</p>\n</blockquote>\n<p>That endianness is involved is excuse enough <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 220737797,
        "sender_full_name": "Tyson Nottingham",
        "timestamp": 1608673859
    },
    {
        "content": "<p>so I guess time to go study glibc memcmp implementation and come up with one for u16/u32/u64/usize and PR that? <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 220737813,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1608673869
    },
    {
        "content": "<p>May I suggest having a good night of sleep before that? xD</p>",
        "id": 220737903,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1608673928
    },
    {
        "content": "<p>Or else... nightmares.</p>",
        "id": 220738016,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1608674039
    },
    {
        "content": "<p><a href=\"https://www.youtube.com/watch?v=HNt0sTlhTYE\">https://www.youtube.com/watch?v=HNt0sTlhTYE</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"HNt0sTlhTYE\" href=\"https://www.youtube.com/watch?v=HNt0sTlhTYE\"><img src=\"https://i.ytimg.com/vi/HNt0sTlhTYE/default.jpg\"></a></div>",
        "id": 220738091,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608674081
    },
    {
        "content": "<p>Also, probably some(a lot?) of the perf doesn't come from their C impl, but from their ASM impl <a href=\"https://sourceware.org/git/?p=glibc.git;a=blob;f=sysdeps/x86_64/memcmp.S\">https://sourceware.org/git/?p=glibc.git;a=blob;f=sysdeps/x86_64/memcmp.S</a></p>",
        "id": 220738823,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1608674646
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116155\">Jake Goulding</span> <a href=\"#narrow/stream/122651-general/topic/Comparing.20slice.20of.20usize.20is.20~700.25.20slower.20than.20slice.20of.20u8/near/220736595\">said</a>:</p>\n<blockquote>\n<p>try to align the data to usize, compare it as a large chunk, handling the head and tail</p>\n</blockquote>\n<p>Note that the <code>align_to</code>-twice version given is incorrect -- it'll give different prefix and suffix lengths if the arrays are differently aligned, and thus will compare incorrectly for those cases.</p>\n<p>(This could certainly be optimized like <a href=\"https://stdrs.dev/nightly/x86_64-unknown-linux-gnu/core/ptr/fn.swap_nonoverlapping_bytes.html\">https://stdrs.dev/nightly/x86_64-unknown-linux-gnu/core/ptr/fn.swap_nonoverlapping_bytes.html</a> is, though.)</p>",
        "id": 220762204,
        "sender_full_name": "scottmcm",
        "timestamp": 1608700804
    }
]