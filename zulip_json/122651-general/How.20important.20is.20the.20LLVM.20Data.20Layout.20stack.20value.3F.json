[
    {
        "content": "<p>Since the PSP now has a target entry within rust, of course I need to make one for the GBA. Have to keep up those friendly rivalries.</p>\n<p>I've used <code>cargo-xbuild</code> with a target.json file before and the rustc target type is essentially the same thing, so i'm not really lost there, except for the LLVM Data Layout string. The LLVM docs for what element means what make sense overall, but my question is: how much does the stack alignment matter? By default the data layout makes the stack 64-bit aligned, and in the GNU \"eabi\" convention the stack is also 64-bit aligned, but the device itself is only a 32-bit device, so nothing at all actually needs to be 64-bit aligned in terms of the hardware.</p>\n<p>Will it just work to just say <code>S32</code> in the data layout?</p>\n<p>My only real concern is that the stack memory is relatively limited (32k), so I don't want to go burning a bunch of extra memory keeping the stack 64-bit aligned for no reason.</p>",
        "id": 204079625,
        "sender_full_name": "Lokathor",
        "timestamp": 1594904644
    },
    {
        "content": "<p>If you have any ffi with code from other toolchains, then they do need to agree on this.</p>",
        "id": 204082927,
        "sender_full_name": "cuviper",
        "timestamp": 1594906097
    },
    {
        "content": "<p>Pretty sure you get a hard error if your layout mismatches from what LLVM says it should be. </p>\n<p>I never figured why we have to put it in both rustc and llvm though.</p>",
        "id": 204083017,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594906137
    },
    {
        "content": "<p>If it is only put in LLVM, rustc would have to somehow request it from LLVM for the layout computation.</p>",
        "id": 204083278,
        "sender_full_name": "bjorn3",
        "timestamp": 1594906247
    },
    {
        "content": "<p>But we always have LLVM available /s <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 204083409,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594906309
    },
    {
        "content": "<p>I guess thatâ€™s an error that occurs after layout computation then.</p>",
        "id": 204083539,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594906348
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116155\">Jake Goulding</span> <a href=\"#narrow/stream/122651-general/topic/How.20important.20is.20the.20LLVM.20Data.20Layout.20stack.20value.3F/near/204083409\">said</a>:</p>\n<blockquote>\n<p>But we always have LLVM available /s <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n</blockquote>\n<p>Not for long if I can do something about it :)</p>",
        "id": 204083920,
        "sender_full_name": "bjorn3",
        "timestamp": 1594906520
    },
    {
        "content": "<p>Wait what? Are y'all sure that we must repeat the same string that's already in LLVM? Then why can't codegen just read it from LLVM?</p>",
        "id": 204084418,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594906745
    },
    {
        "content": "<p>We need most of the information from the layout string pre-LLVM and even if we don't use LLVM for codegen at all (for type layout), so duplicating it allows us to be independent of LLVM in those respects and comparing it avoids subtle bugs</p>",
        "id": 204084700,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1594906867
    },
    {
        "content": "<p>Oh, okay. I didn't know rustc even consumes that.</p>",
        "id": 204084849,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594906940
    },
    {
        "content": "<p>According to LLVM's docs, their \"default data layout\" string is just a default, and you can omit any entry in your provided string that matches the default value.</p>",
        "id": 204090695,
        "sender_full_name": "Lokathor",
        "timestamp": 1594909643
    },
    {
        "content": "<p>Also, I'd like to ask if anyone knows: Does S64 means that the stack is 64-bit aligned always? or just on function entry? Because, again, this device doesn't even have 64-bit values, so if you push a register to the stack you'd be pushing a 32-bit value and then be off-aligned. Would there be a silent second push to get back to 64-bit, or would it only try to reattain 64-bit alignment if you then call another function from there?</p>",
        "id": 204091155,
        "sender_full_name": "Lokathor",
        "timestamp": 1594909830
    },
    {
        "content": "<p>It would only be on function entry I think</p>",
        "id": 204091317,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594909895
    },
    {
        "content": "<p>That's ultimately probably not so bad</p>",
        "id": 204092346,
        "sender_full_name": "Lokathor",
        "timestamp": 1594910318
    },
    {
        "content": "<p>your call stack hopefully doesn't ever go so deep that an occasional word per call will be a big factor</p>",
        "id": 204092413,
        "sender_full_name": "Lokathor",
        "timestamp": 1594910353
    },
    {
        "content": "<p>ah, yeah, it's \"at public function entry\", <a href=\"https://wiki.debian.org/ArmEabiPort#Stack_alignment\">https://wiki.debian.org/ArmEabiPort#Stack_alignment</a></p>",
        "id": 204092748,
        "sender_full_name": "Lokathor",
        "timestamp": 1594910474
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> enjoy <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_target/abi/mod.rs#L16-L218\">https://github.com/rust-lang/rust/blob/master/src/librustc_target/abi/mod.rs#L16-L218</a></p>",
        "id": 204640226,
        "sender_full_name": "eddyb",
        "timestamp": 1595405882
    },
    {
        "content": "<p>the main thing we get from there that we have <em>nowhere else</em> is alignments for various types</p>",
        "id": 204640283,
        "sender_full_name": "eddyb",
        "timestamp": 1595405908
    },
    {
        "content": "<p>oh and I guess we're still not.... oh we are!</p>",
        "id": 204640300,
        "sender_full_name": "eddyb",
        "timestamp": 1595405925
    },
    {
        "content": "<p>so happy to see this <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_target/abi/mod.rs#L154-L174\">https://github.com/rust-lang/rust/blob/master/src/librustc_target/abi/mod.rs#L154-L174</a></p>",
        "id": 204640306,
        "sender_full_name": "eddyb",
        "timestamp": 1595405935
    },
    {
        "content": "<p>even if it means the target spec has redundancies :P</p>",
        "id": 204640322,
        "sender_full_name": "eddyb",
        "timestamp": 1595405950
    },
    {
        "content": "<p>(you'd think I'd remember that was there from the start, lol)</p>",
        "id": 204640427,
        "sender_full_name": "eddyb",
        "timestamp": 1595406031
    }
]