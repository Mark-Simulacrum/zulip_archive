[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116458\">@Charles Lew</span> I'm vaguely learning about \"proper forth\", but I admit my usecase/lang/compiler is more \"forth inspired\" rather than ANS Forth compliant.</p>",
        "id": 262366484,
        "sender_full_name": "James Munns",
        "timestamp": 1637609307
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> I don't know if this fully counts as a \"recursive decent parser\", but it definitely works (better than the last impl), and is definitely recursive!</p>\n<p><a href=\"https://github.com/anachro-rs/anachro-forth/commit/70d0f00f050e586f814ab0d5bb0173eb88360e5a\">https://github.com/anachro-rs/anachro-forth/commit/70d0f00f050e586f814ab0d5bb0173eb88360e5a</a></p>",
        "id": 262366533,
        "sender_full_name": "James Munns",
        "timestamp": 1637609344
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"228912\">James Munns</span> has marked this topic as resolved.</p>",
        "id": 262366536,
        "sender_full_name": "Notification Bot",
        "timestamp": 1637609347
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116458\">@Charles Lew</span>  In particular, my use case is to AOT compile the forth script on a host (like a PC), and send the pre-compiled bytecode to an embedded system to execute. The embedded system only has the runtime, not a compiler, so it can't redefine words or anything, or act as a REPL (which is fine for my use case)</p>",
        "id": 262366695,
        "sender_full_name": "James Munns",
        "timestamp": 1637609421
    }
]