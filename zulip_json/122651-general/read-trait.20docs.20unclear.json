[
    {
        "content": "<blockquote>\n<p>Calling read with an uninitialized buf (of the kind one obtains via MaybeUninit&lt;T&gt;) is not safe, and can lead to undefined behavior.</p>\n</blockquote>",
        "id": 250333289,
        "sender_full_name": "hannahE2",
        "timestamp": 1629714454
    },
    {
        "content": "<p>in <a href=\"https://doc.rust-lang.org/std/io/trait.Read.html\">https://doc.rust-lang.org/std/io/trait.Read.html</a></p>",
        "id": 250333314,
        "sender_full_name": "hannahE2",
        "timestamp": 1629714474
    },
    {
        "content": "<p>What does that mean ?</p>",
        "id": 250333321,
        "sender_full_name": "hannahE2",
        "timestamp": 1629714479
    },
    {
        "content": "<p>AFAICT it's saying, in one sentence, at the end of the docs, that calling a safe API is unsound, without giving any examples, context, nothing.</p>",
        "id": 250333387,
        "sender_full_name": "hannahE2",
        "timestamp": 1629714503
    },
    {
        "content": "<p>Does this mean that the <code>Read</code> trait is unsound ?</p>",
        "id": 250333397,
        "sender_full_name": "hannahE2",
        "timestamp": 1629714518
    },
    {
        "content": "<p>obtaining a <code>&amp;mut [u8]</code> that points to uninitialized memory is what's UB, the <code>Read</code> trait just reiterates that</p>",
        "id": 250333433,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1629714552
    },
    {
        "content": "<p>Sure, but a <code>&amp;mut [MaybeUninit&lt;u8&gt;]</code> isn't</p>",
        "id": 250333447,
        "sender_full_name": "hannahE2",
        "timestamp": 1629714570
    },
    {
        "content": "<p>and the docs suggest that using MaybeUnit with the Read trait is UB</p>",
        "id": 250333463,
        "sender_full_name": "hannahE2",
        "timestamp": 1629714591
    },
    {
        "content": "<p>This sentence is superconfusing.</p>",
        "id": 250333577,
        "sender_full_name": "hannahE2",
        "timestamp": 1629714664
    },
    {
        "content": "<p>So can someone clarify whether the <code>Read</code> trait is sound or not ? <code>&amp;mut [MaybeUninit&lt;u8&gt;]</code> is a buffer containing uninitialized memory, that AFAICT is safe to use everywhere.</p>",
        "id": 250333674,
        "sender_full_name": "hannahE2",
        "timestamp": 1629714730
    },
    {
        "content": "<p>If it isn't safe to use it with the <code>Read</code> trait, then AFAICT that means it is not sound, and people should just stop using the trait altogether.</p>",
        "id": 250333704,
        "sender_full_name": "hannahE2",
        "timestamp": 1629714762
    },
    {
        "content": "<p>And documenting this with a tiny unclear sentence at the end of the docs isn't great TBH.</p>",
        "id": 250333737,
        "sender_full_name": "hannahE2",
        "timestamp": 1629714787
    },
    {
        "content": "<p>If <code>Read</code> isn't sound it should fail to compile or warn or something, at least until it is fixed.</p>",
        "id": 250333762,
        "sender_full_name": "hannahE2",
        "timestamp": 1629714804
    },
    {
        "content": "<p><code>MaybeUninit</code> can be used to obtain the <code>&amp;mut [u8]</code> to uninitialized data, you can't use <code>Read</code> with just <code>MaybeUninit</code></p>",
        "id": 250333770,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1629714814
    },
    {
        "content": "<p>To be able to use <code>&amp;mut [MaybeUninit&lt;u8&gt;]</code> with <code>Read</code> you would have to turn it into a <code>&amp;mut [u8]</code> somehow which is only possible via unsafe. This conversion is the unsound part.</p>",
        "id": 250333771,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629714815
    },
    {
        "content": "<p>Right, but doing the conversion is instant UB, so UB happens way before you use <code>Read</code>.</p>",
        "id": 250335271,
        "sender_full_name": "hannahE2",
        "timestamp": 1629715999
    },
    {
        "content": "<p>And UB happens independently of whether you use Read or not.</p>",
        "id": 250335287,
        "sender_full_name": "hannahE2",
        "timestamp": 1629716016
    },
    {
        "content": "<p>If what this sentence tries to say is that \"Getting a <code>&amp;mut [u8]</code> from a <code>&amp;mut [MaybeUninit&lt;u8&gt;]</code> is UB _iffffffff_ not all <code>MaybeUninit&lt;u8&gt;</code> have been properly initialized.\", then it needs a complete rewrite. Ideally with one example showing the problem, and another one showing how to fix it (e.g. by initializing the memory). And a link to the <code>MaybeUninit</code> docs which already explain all of this.</p>",
        "id": 250335444,
        "sender_full_name": "hannahE2",
        "timestamp": 1629716114
    },
    {
        "content": "<p>If the goal here is instead to say that, \"If a program exhibits UB _before_ reaching the <code>Read</code> API, then the <code>Read</code> API won't fix that UB.\" or something like that, then that's an unnecessary thing to state anywhere. If your program has UB, we make no guarantees, period. <code>Read</code> has nothing to do with that.</p>",
        "id": 250335540,
        "sender_full_name": "hannahE2",
        "timestamp": 1629716167
    },
    {
        "content": "<p>The problem will go away once the ReadBuf API lands (<a href=\"https://github.com/rust-lang/rust/issues/81156\">#81156</a>)</p>",
        "id": 250337720,
        "sender_full_name": "The 8472",
        "timestamp": 1629717691
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"203546\">@Lauren»õiu</span> thank you!</p>",
        "id": 250352891,
        "sender_full_name": "sjud",
        "timestamp": 1629726109
    }
]