[
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">];</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>What special knowledge exists to allow this? I would have thought that this would result in a \"cannot borrow ... as immutable because it is also borrowed as mutable\" error. And replacing the number with a newtype <em>does</em> result in that error. This makes me think there's some built-in implementation for <code>Vec</code> / <code>AddAssign</code> / <code>i32</code> or some combination.</p>",
        "id": 197164948,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1589212057
    },
    {
        "content": "<p>I'm pretty sure you're not getting two &amp;mut references there?</p>",
        "id": 197165456,
        "sender_full_name": "simulacrum",
        "timestamp": 1589212298
    },
    {
        "content": "<p>based on the MIR it looks like that desugars into roughly speaking:</p>\n<div class=\"codehilite\"><pre><span></span><code>let mut a = vec![0, 1];\nlet mut p0 = &amp;mut a[0];\nlet p1 = a[1];\n*p0 += p1;\n</code></pre></div>",
        "id": 197165586,
        "sender_full_name": "simulacrum",
        "timestamp": 1589212351
    },
    {
        "content": "<p>and that works because of 2 phase borrows letting the <code>&amp;mut </code> kick in \"late\"</p>",
        "id": 197165613,
        "sender_full_name": "simulacrum",
        "timestamp": 1589212365
    },
    {
        "content": "<p>I had a feeling 2pb would be involved, so maybe the question is why doesn't 2pb kick in for the newtype version?</p>",
        "id": 197165674,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1589212393
    },
    {
        "content": "<p>hm, is your newtype Copy?</p>",
        "id": 197165695,
        "sender_full_name": "simulacrum",
        "timestamp": 1589212401
    },
    {
        "content": "<p><a href=\"https://stackoverflow.com/q/61732690/155423\">https://stackoverflow.com/q/61732690/155423</a></p>",
        "id": 197165705,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1589212405
    },
    {
        "content": "<p>It is</p>",
        "id": 197165713,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1589212408
    },
    {
        "content": "<p>Seems weird as <code>Vec</code> is not a lang item...</p>",
        "id": 197166377,
        "sender_full_name": "lcnr",
        "timestamp": 1589212669
    },
    {
        "content": "<p>here's a theory: the add no longer happens \"in the compiler\"</p>",
        "id": 197166520,
        "sender_full_name": "simulacrum",
        "timestamp": 1589212708
    },
    {
        "content": "<p>I was also wondering if <code>AddAssign</code> is a compiler builtin or something</p>",
        "id": 197166574,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1589212733
    },
    {
        "content": "<p>And maybe <code>Vec</code> decays to a slice</p>",
        "id": 197166621,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1589212749
    },
    {
        "content": "<p>here's a diff of the mir <a href=\"https://gist.github.com/Mark-Simulacrum/93386e15a03cd562bdaf9c95dff900b0\">https://gist.github.com/Mark-Simulacrum/93386e15a03cd562bdaf9c95dff900b0</a></p>",
        "id": 197166640,
        "sender_full_name": "simulacrum",
        "timestamp": 1589212759
    },
    {
        "content": "<p>still inspecting it</p>",
        "id": 197166643,
        "sender_full_name": "simulacrum",
        "timestamp": 1589212761
    },
    {
        "content": "<p>So between that, we end up completely in language space, not in library space.</p>",
        "id": 197166662,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1589212768
    },
    {
        "content": "<p>hm actually it almost looks like the indexing order switched?</p>",
        "id": 197166932,
        "sender_full_name": "simulacrum",
        "timestamp": 1589212870
    },
    {
        "content": "<p>so the <code>mut</code> happens first?</p>",
        "id": 197166969,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1589212893
    },
    {
        "content": "<p>so there is this <a href=\"https://github.com/rust-lang/rust/pull/47489/files#diff-b3d7798e2a3c43eca68203216e36de65R544\">https://github.com/rust-lang/rust/pull/47489/files#diff-b3d7798e2a3c43eca68203216e36de65R544</a> but not sure if it's still the case</p>",
        "id": 197167089,
        "sender_full_name": "simulacrum",
        "timestamp": 1589212932
    },
    {
        "content": "<p>And <a href=\"https://github.com/rust-lang/rust/issues/49434\">this</a>:</p>\n<blockquote>\n<p>In practice, this covers the following cases:<br>\n-    binary assignment operators (+=, -=, *=, etc.) Note this does /not/ include IndexMut operations at this time</p>\n</blockquote>",
        "id": 197167199,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1589212974
    },
    {
        "content": "<p>but yeah the MIR for the newtype has IndexMut happening first, which activates the 2 phase borrow (if you can even call it that since there's not really 2 phases)</p>",
        "id": 197167349,
        "sender_full_name": "simulacrum",
        "timestamp": 1589213037
    },
    {
        "content": "<p>You wanna write that up as an answer?</p>",
        "id": 197167436,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1589213058
    },
    {
        "content": "<p>nah that would require more time than I have :)</p>",
        "id": 197167456,
        "sender_full_name": "simulacrum",
        "timestamp": 1589213069
    },
    {
        "content": "<p>What flags did you use to get the MIR before the borrow checker said \"stop doing that\"?</p>",
        "id": 197170648,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1589214462
    },
    {
        "content": "<p>Ah, I see <a href=\"https://stackoverflow.com/questions/61732690/why-is-it-allowed-to-have-both-immutable-and-mutable-borrows-of-a-vector-of-nume#comment109198269_61734260\">you commented</a></p>",
        "id": 197171263,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1589214716
    }
]