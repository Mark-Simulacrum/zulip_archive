[
    {
        "content": "<p>Here are two samples of source code - a <a href=\"https://rust.godbolt.org/z/7er15d\">Rust sample</a> compiled with Rust 1.46.0 using the <code>thumbv4m-none-eabi</code> target, and a <a href=\"https://godbolt.org/z/nPqGaP\">C sample</a> compiled using clang 10.0.0. (The results are identical using Rust nightly and clang trunk.) They are as far as I can tell functionally identical.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"cp\">#![no_std]</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[repr(C)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Color</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">red</span>: <span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">green</span>: <span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">blue</span>: <span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">&quot;C&quot;</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">convert</span><span class=\"p\">(</span><span class=\"n\">color</span>: <span class=\"nc\">Color</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u16</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">((((</span><span class=\"n\">color</span><span class=\"p\">.</span><span class=\"n\">red</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"mh\">0x1F</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u16</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">((((</span><span class=\"n\">color</span><span class=\"p\">.</span><span class=\"n\">green</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"mh\">0x1F</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u16</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">((((</span><span class=\"n\">color</span><span class=\"p\">.</span><span class=\"n\">blue</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"mh\">0x1F</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u16</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdint.h&gt;</span><span class=\"cp\"></span>\n\n<span class=\"k\">struct</span> <span class=\"n\">Color</span> <span class=\"p\">{</span>\n    <span class=\"kt\">uint8_t</span> <span class=\"n\">red</span><span class=\"p\">;</span>\n    <span class=\"kt\">uint8_t</span> <span class=\"n\">green</span><span class=\"p\">;</span>\n    <span class=\"kt\">uint8_t</span> <span class=\"n\">blue</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n\n<span class=\"kt\">uint16_t</span> <span class=\"nf\">convert</span><span class=\"p\">(</span><span class=\"k\">struct</span> <span class=\"n\">Color</span> <span class=\"n\">color</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"p\">(((</span><span class=\"n\">color</span><span class=\"p\">.</span><span class=\"n\">red</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"mh\">0x1F</span><span class=\"p\">)</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"o\">|</span> <span class=\"p\">(((</span><span class=\"n\">color</span><span class=\"p\">.</span><span class=\"n\">green</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"mh\">0x1F</span><span class=\"p\">)</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n        <span class=\"o\">|</span> <span class=\"p\">(((</span><span class=\"n\">color</span><span class=\"p\">.</span><span class=\"n\">blue</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"mh\">0x1F</span><span class=\"p\">)</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">10</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n\n<p>However, Rust appears to be missing an optimisation - clang calculates <code>0x1F &lt;&lt; 10</code> and delays adding together the intermediate values until the very end, whereas Rust starts with <code>0x1F &lt;&lt; 5</code> and therefore has to perform an extra <code>mov</code>. How can rustc be improved here?</p>",
        "id": 209127212,
        "sender_full_name": "Thomas Winwood",
        "timestamp": 1599244647
    },
    {
        "content": "<p>I'd open an issue so this doesn't get lost on zulip</p>",
        "id": 209127445,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599244778
    },
    {
        "content": "<p>Sure. I wanted to make sure a wizard couldn't get more detailed information for the purposes of the issue before I posted it.</p>",
        "id": 209127564,
        "sender_full_name": "Thomas Winwood",
        "timestamp": 1599244833
    },
    {
        "content": "<p>Done. <a href=\"https://github.com/rust-lang/rust/issues/76336\">https://github.com/rust-lang/rust/issues/76336</a></p>",
        "id": 209127783,
        "sender_full_name": "Thomas Winwood",
        "timestamp": 1599244947
    },
    {
        "content": "<p>maybe look at the difference in LLVM IR?</p>",
        "id": 209127862,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1599244998
    },
    {
        "content": "<p>this sounds like an LLVM issue</p>",
        "id": 209127893,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1599245018
    },
    {
        "content": "<p>my gut feeling is some kind of overflow check is interfering</p>",
        "id": 209129429,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1599245904
    },
    {
        "content": "<p>there are no overflow checks in that code though</p>",
        "id": 209129627,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1599246021
    },
    {
        "content": "<p>unless you count the shift masking, but that's optimized out trivially</p>",
        "id": 209129655,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1599246044
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"338008\">Thomas Winwood</span> <a href=\"#narrow/stream/122651-general/topic/rustc.20missing.20an.20optimisation.3F/near/209127212\">said</a>:</p>\n<blockquote>\n<p>(The results are identical using Rust nightly and clang trunk.)</p>\n</blockquote>\n<p>Worth noting that we have upgraded our version of LLVM between Rust 1.46 and <code>nightly</code>. I believe that upgrade is now in <code>beta</code> but I could be wrong about that.</p>",
        "id": 209134483,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1599249109
    },
    {
        "content": "<p>yes, 1.47-beta has LLVM 11</p>",
        "id": 209135850,
        "sender_full_name": "cuviper",
        "timestamp": 1599250039
    },
    {
        "content": "<p>So if <code>1.47-beta</code> does not have that issue, then I think you can consider this \"solved\".</p>",
        "id": 209139149,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1599252454
    }
]