[
    {
        "content": "<p>I have a <code>Path</code> and I want to extract the filename and its parent and print them. E.g. for the directory <code>/aaa/bbb/ccc/ddd.rs</code> I want to print <code>\"ccc/ddd.rs\"</code></p>",
        "id": 264088767,
        "sender_full_name": "nnethercote",
        "timestamp": 1638919461
    },
    {
        "content": "<p>This is proving more annoying than I expected, I'm wondering if I'm overlooking something</p>",
        "id": 264088789,
        "sender_full_name": "nnethercote",
        "timestamp": 1638919477
    },
    {
        "content": "<p>Either <code>Path::iter</code> or <code>Path::components</code> seems a likely choice, though there's no easy way to ask an iterator for the final two elements</p>",
        "id": 264088842,
        "sender_full_name": "nnethercote",
        "timestamp": 1638919511
    },
    {
        "content": "<p>Components is a <code>DoubleEndedIterator</code> so you can just <code>next_back</code> twice</p>",
        "id": 264089847,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1638919996
    },
    {
        "content": "<p>How about <code>p.strip_prefix(p.ancestors().nth(2)?)?</code>?</p>",
        "id": 264090262,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1638920189
    },
    {
        "content": "<p>It does feel like maybe there could be a compliment to <code>ancestors</code> that goes in the opposite direction?</p>",
        "id": 264090651,
        "sender_full_name": "Chris Denton",
        "timestamp": 1638920403
    },
    {
        "content": "<p>Aha, I overlooked the <code>DoubleEndedIterator</code>, I'll use that. Thanks to all the suggestions!</p>",
        "id": 264091036,
        "sender_full_name": "nnethercote",
        "timestamp": 1638920616
    },
    {
        "content": "<p>Actually, I ended up modifying <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> 's suggestion:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// Trim a path down to its parent and filename if possible (e.g.</span>\n<span class=\"c1\">// `/aa/bb/cc/dd.rs` becomes `cc/dd.rs`), otherwise return `path`</span>\n<span class=\"c1\">// unchanged.</span>\n<span class=\"k\">fn</span> <span class=\"nf\">trim_path</span><span class=\"p\">(</span><span class=\"n\">path</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Path</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">Path</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"n\">strip_prefix</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"n\">ancestors</span><span class=\"p\">().</span><span class=\"n\">nth</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">).</span><span class=\"n\">ok</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"p\">))().</span><span class=\"n\">unwrap_or</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 264096518,
        "sender_full_name": "nnethercote",
        "timestamp": 1638924010
    },
    {
        "content": "<p>Quite the mouthful</p>",
        "id": 264096548,
        "sender_full_name": "nnethercote",
        "timestamp": 1638924036
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"n\">strip_prefix</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"n\">ancestors</span><span class=\"p\">().</span><span class=\"n\">nth</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">).</span><span class=\"n\">ok</span><span class=\"p\">())().</span><span class=\"n\">unwrap_or</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Should work as well, no need to <code>?</code> the last expression and then wrap it in <code>Some</code> again</p>",
        "id": 264096738,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1638924196
    },
    {
        "content": "<p>Still quite a mouthful indeed, I do remember wanting something similar occasionally and was bummed out every time that std doesn't have a simple way to get the \"tail\" of a certain length of a path as well</p>",
        "id": 264096764,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1638924226
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">len</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"n\">components</span><span class=\"p\">().</span><span class=\"n\">len</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">len</span><span class=\"w\"> </span><span class=\"o\">&gt;=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"n\">components</span><span class=\"p\">().</span><span class=\"n\">skip</span><span class=\"p\">(</span><span class=\"n\">len</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">).</span><span class=\"n\">as_path</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">path</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 264096883,
        "sender_full_name": "The 8472",
        "timestamp": 1638924317
    },
    {
        "content": "<p>Can you <code>as_path</code> on a <code>Skip&lt;Components&gt;</code>?</p>",
        "id": 264096957,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1638924391
    },
    {
        "content": "<p>oh, right... uh, advance_by should do the job then</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">len</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"n\">components</span><span class=\"p\">().</span><span class=\"n\">count</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">len</span><span class=\"w\"> </span><span class=\"o\">&gt;=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"n\">components</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">.</span><span class=\"n\">advance_by</span><span class=\"p\">(</span><span class=\"n\">len</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">.</span><span class=\"n\">as_path</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">path</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 264097005,
        "sender_full_name": "The 8472",
        "timestamp": 1638924480
    },
    {
        "content": "<p><code>error[E0658]: use of unstable library feature 'iter_advance_by': recently added</code></p>",
        "id": 264097182,
        "sender_full_name": "nnethercote",
        "timestamp": 1638924627
    },
    {
        "content": "<p>for stable then</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">len</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"n\">components</span><span class=\"p\">().</span><span class=\"n\">count</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">len</span><span class=\"w\"> </span><span class=\"o\">&gt;=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"n\">components</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">.</span><span class=\"n\">by_ref</span><span class=\"p\">().</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">len</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">).</span><span class=\"n\">for_each</span><span class=\"p\">(</span><span class=\"nb\">drop</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">.</span><span class=\"n\">as_path</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">path</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 264097376,
        "sender_full_name": "The 8472",
        "timestamp": 1638924818
    },
    {
        "content": "<p>Passes the unit tests, thanks!</p>",
        "id": 264097579,
        "sender_full_name": "nnethercote",
        "timestamp": 1638925041
    },
    {
        "content": "<p>Oh, should be <code>len &gt; 2</code>, I think</p>",
        "id": 264103356,
        "sender_full_name": "nnethercote",
        "timestamp": 1638930451
    },
    {
        "content": "<p><code>.nth(len - 3)</code> is probably easier than that by_ref-take-foreach-drop dance.</p>",
        "id": 264105830,
        "sender_full_name": "scottmcm",
        "timestamp": 1638932649
    },
    {
        "content": "<p>Nice suggestion. I now have this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">trim_path</span><span class=\"p\">(</span><span class=\"n\">path</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Path</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">Path</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">len</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"n\">components</span><span class=\"p\">().</span><span class=\"n\">count</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">len</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"n\">components</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">c</span><span class=\"p\">.</span><span class=\"n\">nth</span><span class=\"p\">(</span><span class=\"n\">len</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">c</span><span class=\"p\">.</span><span class=\"n\">as_path</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">path</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 264108463,
        "sender_full_name": "nnethercote",
        "timestamp": 1638935184
    },
    {
        "content": "<p>(I changed from showing 2 components to 3 components along the way.)</p>",
        "id": 264108475,
        "sender_full_name": "nnethercote",
        "timestamp": 1638935206
    },
    {
        "content": "<p>I couldn't resist making a tiny crate for this.  My first published crate! Implemented as a trait on std::path::Path - <a href=\"https://crates.io/crates/pathtrim\">https://crates.io/crates/pathtrim</a></p>",
        "id": 264258542,
        "sender_full_name": "rodzilla",
        "timestamp": 1639027229
    },
    {
        "content": "<p>Note that the solutions above are for brevity, not efficiency. It would be more efficient to count from the back and never touch the front. But then you'd have to slice on the underlying OSstr.</p>",
        "id": 264280557,
        "sender_full_name": "The 8472",
        "timestamp": 1639045245
    }
]