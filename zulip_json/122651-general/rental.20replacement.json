[
    {
        "content": "<p>Are there any other replacements for the rental crate besides owning-ref?</p>",
        "id": 210338486,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1600305241
    },
    {
        "content": "<p>I feel like I've seen you ask this question before <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 210338631,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600305415
    },
    {
        "content": "<p>You mean seconds ago in Discord or longer in the past?</p>",
        "id": 210339055,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1600305964
    },
    {
        "content": "<p>like a month or so ago</p>",
        "id": 210339082,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600305975
    },
    {
        "content": "<p>I've certainly asked it a while back.</p>",
        "id": 210339085,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1600305978
    },
    {
        "content": "<p><strong>comex</strong>  and <strong>Josh Triplett</strong>  are going to make the compiler understand self-borrows, last I heard. <span aria-label=\"smirk\" class=\"emoji emoji-1f60f\" role=\"img\" title=\"smirk\">:smirk:</span></p>",
        "id": 210339107,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1600306023
    },
    {
        "content": "<p>Now I'm thinking how to abuse futures / generators to do it.</p>",
        "id": 210339151,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1600306083
    },
    {
        "content": "<p>I'm not aware of any bugs in rental, so even though it's not maintained I've been using it in my own project</p>",
        "id": 210339883,
        "sender_full_name": "tmandry",
        "timestamp": 1600306961
    },
    {
        "content": "<p>Oh, I will continue to use it as well. But people (reasonably) get skittish if I suggest that they use a project that has that big-ol \"NOT MAINTAINED\" banner.</p>",
        "id": 210339958,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1600307046
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116155\">Jake Goulding</span> <a href=\"#narrow/stream/122651-general/topic/rental.20replacement/near/210339107\">said</a>:</p>\n<blockquote>\n<p><strong>comex</strong>  and <strong>Josh Triplett</strong>  are going to make the compiler understand self-borrows, last I heard. <span aria-label=\"smirk\" class=\"emoji emoji-1f60f\" role=\"img\" title=\"smirk\">:smirk:</span></p>\n</blockquote>\n<p>I'm definitely not doing anything in this area. Some combination of Chalk and future type system improvements might help with self-borrows. <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> would know more than me; he gave a presentation mentioning it as a possibility.</p>",
        "id": 210352212,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600324016
    },
    {
        "content": "<p>I thought it was polonious that made self-borrows a \"more likely someday\"</p>",
        "id": 210416577,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1600361053
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"257428\">Gus Wynn</span> <a href=\"#narrow/stream/122651-general/topic/rental.20replacement/near/210416577\">said</a>:</p>\n<blockquote>\n<p>I thought it was polonious that made self-borrows a \"more likely someday\"</p>\n</blockquote>\n<p>Yep, that was it. Not Chalk :)</p>",
        "id": 210418239,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600361858
    },
    {
        "content": "<p><a href=\"https://users.rust-lang.org/t/ouroboros-a-crate-for-making-self-referential-structs/49025\">https://users.rust-lang.org/t/ouroboros-a-crate-for-making-self-referential-structs/49025</a></p>",
        "id": 211082220,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1600912212
    },
    {
        "content": "<p>The things that annoy me about most \"self-referential\" libraries out there, is that they (logically) use the tools currently at our disposal, which means using Rust references, usually <code>'static</code> references (since there is no other lifetime literal, such as <code>'none</code> / <code>'empty</code> / <code>'unsafe</code>). They also use built-in types such as <code>Box</code>.<br>\nThe issue is that both Rust reference types and things such as <code>Box</code> carry very heavy semantics &amp; invariants within the language, given how they are not <em>supposed</em> to be used within a self-referential struct.<br>\nEasy improvements would be to replace things such as <code>Box</code> with a home-made <code>MyBox</code> wrapping a <code>ptr::NonNull</code> with <code>Deref{,Mut}</code> and <code>Drop</code>, so as to have effectively created an <code>AliasableBox</code>, but the <code>&amp;'static</code> references are a problem too.<br>\nThe true way to write these abstractions would require GAT, so a as to have <code>&amp;'lifetime T &lt;-&gt; Ref_&lt;T&gt;</code> mappings (the type on the right having no lifetime), and then have a <code>#[derive]</code> to recursively construct <code>Type&lt;'lifetime&gt;</code> into a lifetime-erased <code>Type_</code>. Then, and only then, using things like ouroboros APIs (which is a good start) would lead to 100% sound APIs / abstractions.</p>",
        "id": 211109476,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1600940975
    },
    {
        "content": "<p>Until then, manually constructed <code>Pin</code> types, and futures, or more generally, generators, and continuation-passing style (see <a href=\"https://docs.rs/with_locals\">https://docs.rs/with_locals</a>) are the best things  at our disposal</p>",
        "id": 211109587,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1600941043
    },
    {
        "content": "<p>With locals looks interesting, but it infuriates me when docs donâ€™t use rustfmt style.</p>",
        "id": 211122594,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1600949913
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> You could suggest in #rustdoc on Discord to add a docs example lint for formatting ;)</p>",
        "id": 211196509,
        "sender_full_name": "Noah Lev",
        "timestamp": 1600986001
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307537\">@Camelid</span> those who care about such things can already do it. You can make your README in to a doc test and Rustfmt can check Rust code in markdown</p>",
        "id": 211196785,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1600986150
    },
    {
        "content": "<p>Rustdoc doesn't warn in tests by default though :/</p>",
        "id": 211198889,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600987600
    },
    {
        "content": "<p>This is one of the reasons I wanted <code>--display-warnings</code>, <code>#[doc(test(attr(warn(warnings)))]</code> is not very discoverable</p>",
        "id": 211199079,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600987739
    },
    {
        "content": "<p>oh wait this is about formatting, don't mind me</p>",
        "id": 211199350,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600987922
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232018\">@Daniel Henry-Mantilla</span> </p>\n<p>What about a custom attribute (not drive) which rewrites your self referencing structs to use ptr. offsets  instead of references and autogenerated the unsafe access code.</p>\n<p>Through probably a bit tricky to get right without accidentally allowing something like \"swap\" to brake the safety constraints <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 211317626,
        "sender_full_name": "Philipp Korber",
        "timestamp": 1601067732
    },
    {
        "content": "<p>It has been discussed on internals before. Here is a link I found: <a href=\"https://internals.rust-lang.org/t/internal-references-as-a-separate-type/12946\">https://internals.rust-lang.org/t/internal-references-as-a-separate-type/12946</a><br>\nOne thing that approach can't help with is:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">A</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"n\">text</span>: <span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"n\">subText</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">text</span> <span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>it somehow needs to know that <code>subText</code> should not change when <code>A</code> is moved, and that <code>A</code> can be moved even though <code>text</code> has a  borrow into it.</p>",
        "id": 211360591,
        "sender_full_name": "Eh2406",
        "timestamp": 1601127610
    }
]