[
    {
        "content": "<p>Is there a way to move a struct which implements the Copy trait? I know that structs that don't implement the trait are moved automatically, but how can I force this behavior for the ones that do?</p>",
        "id": 167934410,
        "sender_full_name": "Daniel Papp",
        "timestamp": 1560336364
    },
    {
        "content": "<p>That's not possible</p>",
        "id": 167935182,
        "sender_full_name": "oli",
        "timestamp": 1560337154
    },
    {
        "content": "<p>what does it even mean to \"move\" something that is <code>Copy</code>?</p>",
        "id": 167935324,
        "sender_full_name": "RalfJ",
        "timestamp": 1560337260
    },
    {
        "content": "<p>IOW, I don't understand the question.</p>",
        "id": 167940769,
        "sender_full_name": "RalfJ",
        "timestamp": 1560342184
    },
    {
        "content": "<p>I think the question is whether a variable can be marked as \"moved out of\" or \"not available anymore\" so that any further accesses will error</p>",
        "id": 167940918,
        "sender_full_name": "oli",
        "timestamp": 1560342333
    },
    {
        "content": "<p>I suppose one could theoretically support <code>let x = move y;</code></p>",
        "id": 167953698,
        "sender_full_name": "centril",
        "timestamp": 1560350696
    },
    {
        "content": "<p>to force <code>y</code> to become unusable.</p>",
        "id": 167953723,
        "sender_full_name": "centril",
        "timestamp": 1560350711
    },
    {
        "content": "<p>seems niche enough that at best it should be an intrinsic imo</p>",
        "id": 167954235,
        "sender_full_name": "oli",
        "timestamp": 1560351069
    },
    {
        "content": "<p><a href=\"https://stackoverflow.com/q/31168589/155423\" target=\"_blank\" title=\"https://stackoverflow.com/q/31168589/155423\">How to force a move of a type which implements the Copy trait?</a></p>\n<p>I've never understood the question either.</p>",
        "id": 167955758,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560351953
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> seems niche enough to not even be an intrinsic imo <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 167956281,
        "sender_full_name": "centril",
        "timestamp": 1560352261
    },
    {
        "content": "<p>agreed, I was trying to set an upper limit</p>",
        "id": 167956427,
        "sender_full_name": "oli",
        "timestamp": 1560352325
    },
    {
        "content": "<p>I think that (absent any other context), the right thing would be to make a newtype. This type wants different semantics from the underlying <code>Copy</code> type.</p>",
        "id": 167956471,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560352359
    },
    {
        "content": "<p>e.g. <code>i32</code> can be copied, but an <code>Identifer(i32)</code> cannot</p>",
        "id": 167956522,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560352393
    },
    {
        "content": "<p>Yea, Rust encodes most-if-not-all features in the type</p>",
        "id": 167956569,
        "sender_full_name": "oli",
        "timestamp": 1560352423
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> oh no; this is where an ECS starts =P</p>",
        "id": 167959056,
        "sender_full_name": "centril",
        "timestamp": 1560353847
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> entity-component system? I'm not seeing the connection...</p>",
        "id": 167959220,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560353937
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span>  <code>struct DefId(...);</code> and stuff</p>",
        "id": 167960170,
        "sender_full_name": "centril",
        "timestamp": 1560354449
    },
    {
        "content": "<p>newtyping an integer like that</p>",
        "id": 167960184,
        "sender_full_name": "centril",
        "timestamp": 1560354461
    },
    {
        "content": "<p>also as far as the typechecker goes, intrinsics are just functions, right? So doesnt seem like a job for an intrinsic to me.</p>",
        "id": 167961468,
        "sender_full_name": "RalfJ",
        "timestamp": 1560355203
    },
    {
        "content": "<p>if it's magic in the type system it <em>is</em> a syntactic language primitive. papering over that by pretending it is an intrinsic doesnt help anyone IMO.</p>",
        "id": 167961535,
        "sender_full_name": "RalfJ",
        "timestamp": 1560355236
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> agreed</p>",
        "id": 167962073,
        "sender_full_name": "centril",
        "timestamp": 1560355455
    },
    {
        "content": "<p>If you just want a variable to be unreadable (though not e.g. a field, I'm not sure we could support that, you can always do <code>let y = x; let x;</code> presumably?</p>",
        "id": 167962153,
        "sender_full_name": "simulacrum",
        "timestamp": 1560355514
    },
    {
        "content": "<p>intrinsics are magic in terms of their <em>dynamic semantics</em> (so they are primitives in that sense), but for the <em>static semantics</em> they should be like any odd function. <code>transmute</code> is an exception already (it checks that the sizes are the same) and that already has some annoying consequences (like you can't wrap it).</p>",
        "id": 167962187,
        "sender_full_name": "RalfJ",
        "timestamp": 1560355539
    },
    {
        "content": "<blockquote>\n<p>transmute is an exception already (it checks that the sizes are the same) and that already has some annoying consequences (like you can't wrap it).</p>\n</blockquote>\n<p>Hopefully temporary with some const generics</p>",
        "id": 167962270,
        "sender_full_name": "centril",
        "timestamp": 1560355566
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// error; unknown type.</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 167962328,
        "sender_full_name": "centril",
        "timestamp": 1560355618
    },
    {
        "content": "<p><code>let x: ();</code>?</p>",
        "id": 167962447,
        "sender_full_name": "simulacrum",
        "timestamp": 1560355684
    },
    {
        "content": "<p>you can do:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 167962457,
        "sender_full_name": "centril",
        "timestamp": 1560355685
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> yeah but you need to initialize it also</p>",
        "id": 167962475,
        "sender_full_name": "centril",
        "timestamp": 1560355703
    },
    {
        "content": "<p>what for? if you're specifically intending to never read from it</p>",
        "id": 167962496,
        "sender_full_name": "simulacrum",
        "timestamp": 1560355737
    },
    {
        "content": "<p>or not, if you don't use it; but now you need <code>#[allow(unused)]</code></p>",
        "id": 167962504,
        "sender_full_name": "centril",
        "timestamp": 1560355739
    },
    {
        "content": "<p>The unused lint will get in your way even if you initalize.</p>",
        "id": 167962540,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1560355761
    },
    {
        "content": "<p>sure, yeah, there's no real way to shadow w/o allow(unused) for this purpose (initializing it won't help)</p>",
        "id": 167962542,
        "sender_full_name": "simulacrum",
        "timestamp": 1560355764
    },
    {
        "content": "<p>I do think a <code>move {}</code> block would fit nicely in terms of filling out the syntax grid, but it's kind of silly (and plain <code>{}</code> does that now in most cases)</p>",
        "id": 167966210,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560358387
    }
]