[
    {
        "content": "<p>Somehow, i feel there's a correspondence between \"abort, retry, ignore\" strategies and the async error handling strategies.  <code>?</code> means <code>abort</code>, <code>unwrap_or</code> etc means <code>ignore</code>, and there's no support for <code>retry</code> yet.</p>",
        "id": 209908558,
        "sender_full_name": "Charles Lew",
        "timestamp": 1599960769
    },
    {
        "content": "<p>If you were to roll your own, how would you express a certain behaviour?</p>",
        "id": 210024249,
        "sender_full_name": "Stefan dns2utf8 Schindler",
        "timestamp": 1600098473
    },
    {
        "content": "<p>Like there are situations where 5 retries would be best, sometimes one needs to wait a certain amount of time before a retry and so on</p>",
        "id": 210024410,
        "sender_full_name": "Stefan dns2utf8 Schindler",
        "timestamp": 1600098537
    },
    {
        "content": "<p>I haven't thought it through, but there're community crates like <a href=\"https://docs.rs/tokio-retry/\">tokio-retry</a> or <a href=\"https://docs.rs/tower-retry\">tower-retry</a> that serve as examples...</p>",
        "id": 210038851,
        "sender_full_name": "Charles Lew",
        "timestamp": 1600105306
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116458\">Charles Lew</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/async.20error.20handling.20terminology/near/210038851\">said</a>:</p>\n<blockquote>\n<p>I haven't thought it through, but there're community crates like <a href=\"https://docs.rs/tokio-retry/\">tokio-retry</a> or <a href=\"https://docs.rs/tower-retry\">tower-retry</a> that serve as examples...</p>\n</blockquote>\n<p>more recently there's also tower-hedge which implements a dynamic retry policy <a href=\"https://github.com/tower-rs/tower/blob/master/tower/src/hedge/mod.rs\">https://github.com/tower-rs/tower/blob/master/tower/src/hedge/mod.rs</a></p>",
        "id": 210048683,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600110155
    },
    {
        "content": "<p>I don't personally feel like \"retry\" is a fundamental operation of error handling in the same way that <code>?</code> represents the fundamental \"try to do this\" operation. Retries feel like higher level policies composed ontop of the <code>try</code> operation.</p>",
        "id": 210048962,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600110281
    },
    {
        "content": "<p>&lt;deleted&gt;</p>",
        "id": 210049076,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600110339
    },
    {
        "content": "<p>actually</p>",
        "id": 210049153,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600110366
    },
    {
        "content": "<p>thinking about it thats not a clear distinction</p>",
        "id": 210049158,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600110370
    },
    {
        "content": "<p>nvm on that last bit</p>",
        "id": 210049172,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600110379
    },
    {
        "content": "<p>picking a default regardless of the content of the error is ignoring now that I think of it even for 10 seconds</p>",
        "id": 210049204,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600110399
    },
    {
        "content": "<p>lol</p>",
        "id": 210049208,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600110400
    },
    {
        "content": "<p>To be honest, I start to see the benefits of the actor model more and more</p>",
        "id": 210065608,
        "sender_full_name": "Stefan dns2utf8 Schindler",
        "timestamp": 1600118970
    },
    {
        "content": "<p>So a parent actor can handle the child actors errors</p>",
        "id": 210065726,
        "sender_full_name": "Stefan dns2utf8 Schindler",
        "timestamp": 1600119030
    },
    {
        "content": "<p>That way one can implement different policies in different situations</p>",
        "id": 210065780,
        "sender_full_name": "Stefan dns2utf8 Schindler",
        "timestamp": 1600119073
    }
]