[
    {
        "content": "<p>I found a cool paper that seemed relevant for discussing error handling! <a href=\"https://www.cs.cornell.edu/andru/papers/ufo/\">https://www.cs.cornell.edu/andru/papers/ufo/</a></p>",
        "id": 213598290,
        "sender_full_name": "Jubilee",
        "timestamp": 1602873467
    },
    {
        "content": "<p>Gosh, I feel like the algebraic effects literature is rediscovering call/cc all over again. At some point someone is going to point out that complex control flow is complex</p>",
        "id": 213600652,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602874688
    },
    {
        "content": "<p>In fairness, Rust is definitely an exercise in applying 40 year old technology, so while I agree, I also can't really hold that against them. :^)</p>",
        "id": 213601182,
        "sender_full_name": "Jubilee",
        "timestamp": 1602874980
    },
    {
        "content": "<p>Coq I think could certainly be described as 'comprehensive'</p>",
        "id": 213604366,
        "sender_full_name": "oliver",
        "timestamp": 1602876764
    },
    {
        "content": "<p>oh this is sick</p>",
        "id": 213630752,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602900652
    },
    {
        "content": "<p>I've been wanting to read about this kinda thing for a while</p>",
        "id": 213630757,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602900668
    },
    {
        "content": "<p>thanks for pointing it out <span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span></p>",
        "id": 213630764,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602900676
    },
    {
        "content": "<p>Oh if you're interested I usually don't like spamming theory papers but here is one<br>\nthat just came across my desk and has some formalism around bidirection:<br>\n<a href=\"https://arxiv.org/abs/2010.07763\">https://arxiv.org/abs/2010.07763</a></p>",
        "id": 213631017,
        "sender_full_name": "oliver",
        "timestamp": 1602901193
    },
    {
        "content": "<p>Seems alright to start I haven't read it all</p>",
        "id": 213631185,
        "sender_full_name": "oliver",
        "timestamp": 1602901501
    },
    {
        "content": "<p>definitely interested</p>",
        "id": 213737842,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603074408
    },
    {
        "content": "<p>my brain is roiling with thoughts about effect handlers enabling computational expressions a la F#.</p>",
        "id": 214458936,
        "sender_full_name": "Jubilee",
        "timestamp": 1603586804
    },
    {
        "content": "<p>isn't that what the backtrace does?</p>",
        "id": 214459470,
        "sender_full_name": "oliver",
        "timestamp": 1603587558
    },
    {
        "content": "<p>or rather the call to render the backtrace</p>",
        "id": 214459484,
        "sender_full_name": "oliver",
        "timestamp": 1603587600
    },
    {
        "content": "<p>possibly.</p>",
        "id": 214460274,
        "sender_full_name": "Jubilee",
        "timestamp": 1603588588
    },
    {
        "content": "<p><a href=\"https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/computation-expressions\">https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/computation-expressions</a> the thing I'm thinking of is this, where basically you can define-your-own-syntax for \"async\" or \"try\" blocks.</p>",
        "id": 214460440,
        "sender_full_name": "Jubilee",
        "timestamp": 1603588836
    },
    {
        "content": "<p>the prototype we have now is <code>write_backtrace_to(&amp;mut dyn FormatterThing) -&gt; Result&lt;(),FormatterThing::Error&gt;</code></p>",
        "id": 214460449,
        "sender_full_name": "oliver",
        "timestamp": 1603588859
    },
    {
        "content": "<p>there is talk about shimming (my word) in some try syntax</p>",
        "id": 214460479,
        "sender_full_name": "oliver",
        "timestamp": 1603588923
    }
]