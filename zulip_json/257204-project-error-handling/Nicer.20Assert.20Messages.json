[
    {
        "content": "<p>I have a lot of errors to work through.  These are the steps I took leading up to said errors:  I forked and cloned <a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_builtin_macros/src/assert.rs\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_builtin_macros/src/assert.rs</a>  to my lapton(MacOS).  At that point there were only 2 errors.  At this point I received the guide <a href=\"https://rustc-dev-guide.rust-lang.org/\">https://rustc-dev-guide.rust-lang.org/</a>  from DPC and went to the building and debugging rustc section.  I filled in the config.toml file according to instructions and then ran ./x.py check   which produced 2 errors (1) couldn't find required command: \"cmake\"  and (2) failed to run rust/build/bootstrap/debug/bootstrap check</p>",
        "id": 214732045,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1603818657
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"344328\">@Charles Ellis O'Riley Jr.</span> you need to install cmake</p>",
        "id": 214734016,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603819472
    },
    {
        "content": "<p>on linux, that's <code>sudo apt install cmake</code>, not sure about windows</p>",
        "id": 214734054,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603819486
    },
    {
        "content": "<p>I’m on a Mac so I assume it’s the same as linux</p>",
        "id": 214735050,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1603819858
    },
    {
        "content": "<p>on mac you'd use <code>brew</code> I think</p>",
        "id": 214735314,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603819957
    },
    {
        "content": "<p>or any other package manager you have installed</p>",
        "id": 214735346,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603819969
    },
    {
        "content": "<p>Thanks Joshua</p>",
        "id": 214735437,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1603820007
    },
    {
        "content": "<p>The build completed successfully. There are a multitude of problems popping up though.  A few of which are as follows:  (1) extern location for smallvec does not exist.  This is emanating from the file <a href=\"http://ieee.rs\">ieee.rs</a> where the calling is \"use smallvec::{smallvec, SmallVec};\"  (2) #![feature(nll)] feature may not be used on the stable release channel.  This file is src/lib.rs.  Do I need to comment this feature out?  (3) #[doc(alias = \"==\")] doc alias is experimental.  That's it for now.  Thanks.</p>",
        "id": 214781666,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1603844354
    },
    {
        "content": "<p>I researched the 2nd error and it seems that I need to run nightly Rust.   I'm running the stable release so do I need to run nightyly for this project?  Thanks.</p>",
        "id": 214783283,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1603845742
    },
    {
        "content": "<p>How are you building the project? x.py should set RUSTC_BOOTSTRAP which fixes those errors</p>",
        "id": 214786594,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603848721
    },
    {
        "content": "<p>Unfortunately <code>cargo build</code> does not work on rustc itself</p>",
        "id": 214786638,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603848734
    },
    {
        "content": "<p>Hi Josh.  I ran ./x.py check</p>",
        "id": 214787107,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1603849180
    },
    {
        "content": "<p>After I downloaded cmake, I ran ./x.py check and received a message that it compiled successfully. I did have the bootstrap error which I now no longer have.  The issues I stated are showing up in the PROBLEMS tab of VSCode.</p>",
        "id": 214787491,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1603849561
    },
    {
        "content": "<p>I did not do cargo build.</p>",
        "id": 214787647,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1603849686
    },
    {
        "content": "<p>VSCode runs cargo build. I wouldn't trust the IDE errors, x.py is unfortunately the only source of truth for whether your changes are correct.</p>",
        "id": 214787822,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603849880
    },
    {
        "content": "<p>I think we have suggestions for making vscode go through x.py instead</p>",
        "id": 214787834,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603849894
    },
    {
        "content": "<p><a href=\"https://rustc-dev-guide.rust-lang.org/building/suggested.html?highlight=vscode#configuring-rust-analyzer-for-rustc\">https://rustc-dev-guide.rust-lang.org/building/suggested.html?highlight=vscode#configuring-rust-analyzer-for-rustc</a></p>",
        "id": 214787846,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603849906
    },
    {
        "content": "<p>Thanks Joshua.  I'll take a look.</p>",
        "id": 214788026,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1603850077
    },
    {
        "content": "<p>Status:  Ran a successful x.py setup.  Thanks <span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span>  for your assistance.  Becoming more comfortable with the layout of the compiler and reading about the AST.  I just started going through the documentation for \"The compiler testing framework\" .  No code changes yet.</p>",
        "id": 216033862,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1604882061
    },
    {
        "content": "<p>I will not be able to be at the meeting today.  My previous entry is my status.  Wrapping my mind around AST.  Compiler testing will be essential to know.</p>",
        "id": 216080665,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1604927054
    },
    {
        "content": "<p>sounds good</p>",
        "id": 216119753,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1604944152
    },
    {
        "content": "<p>I reached out to the author here:  <a href=\"https://github.com/ishitatsuyuki/rfcs/blob/generic-assert/text/0000-generic-assert.md\">https://github.com/ishitatsuyuki/rfcs/blob/generic-assert/text/0000-generic-assert.md</a> because I felt that his examples are what I need to implement.  The following is his reply:  </p>\n<hr>\n<p>\"The original implementation idea for the <code>assert!</code> macro is to simply transform the expression into printing code, just like what <code>println!</code> does. Unfortunately, it turned out that many <code>assert!</code> uses today is not compatible with this, as the variables referenced don't necessarily implement <code>Debug</code>. As a result, a \"plain text fallback\" was described in the RFC to preserve backward compatibility, but that has become a huge roadblock for implementing the RFC.</p>\n<p>Before I talk about the internals of \"fallback\", I'd like to slightly clarify how macros like <code>println!</code> works. Some macros like <code>println!</code> is not implemented through <code>macro_rules!</code>; instead, they are implemented as a compiler built-in and therefore can do much more flexible transforms to the arguments.</p>\n<p>And to power up the <code>assert!</code> macro, it was also changed to be a compiler builtin. You might think that, if a macro is a compiler builtin, then can't it just \"check\" if a type passed is <code>Copy</code> or not? Unfortunately, the answer is currently no. A macro runs at the parsing stage, where the compiler has no access to type information. At this point, the only viable alternative is to do some \"hack\" through the highly unstable and unsound specialization, but the compiler team had some objection since they don't want to introduce more use of this unstable feature which might get removed some day.\"</p>\n<hr>\n<p>@Charles O'Riley:  My thoughts:  Initially i felt I could achieve the results needed using polymorphism, i.e., creating an additional assert with the signature of assert_eq,  but after all the reading, i.e., AST, and going back to the original assert code, I'm not sure.  One question I do have is if <a href=\"http://assert.rs\">assert.rs</a>, which is currentyly in the src directory underneath rustc_builtin_macros needs to be moved/replicated to the src directory under proc_macro/bridge?  Any feedback would be welcome.  Thanks. <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 216420548,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1605147683
    },
    {
        "content": "<p>What about using multiple dispatch? Or is that the unsound specialization<br>\nbeing referred to?</p>",
        "id": 216422409,
        "sender_full_name": "oliver",
        "timestamp": 1605149902
    },
    {
        "content": "<p>@oliver** I can't answer that off the top of my head.  I would have to research it and then still probably have questions.  I'm literally taking this one step at a time.</p>",
        "id": 216422536,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1605150030
    },
    {
        "content": "<p>It would be nice to know more about \"the highly unstable <br>\nand unsound specialization\", it leaves a lot to the imagination</p>",
        "id": 216422571,
        "sender_full_name": "oliver",
        "timestamp": 1605150095
    },
    {
        "content": "<p>Good point.  I'll see if I can get some feedback on that.  As to my other question, does the assert need to be moved to the src directory under proc_macro/bridge?</p>",
        "id": 216422759,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1605150310
    },
    {
        "content": "<p>for some reason I thought that it would be possible to make a built-in that does type checking</p>",
        "id": 216424801,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1605152805
    },
    {
        "content": "<p>what about autoderef specialization?</p>",
        "id": 216424825,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1605152851
    },
    {
        "content": "<p>that's not particularly fragile</p>",
        "id": 216424829,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1605152857
    },
    {
        "content": "<p>Feedback I just received:</p>\n<p>Specialization is a feature that allows to override the trait implementation for a particular type. (Normally the compiler will not allow overlapping impls.) You can read about it at the tracking issue: <a href=\"https://github.com/rust-lang/rust/issues/31844\">https://github.com/rust-lang/rust/issues/31844</a>. As you can see from the issue, the feature has gone through a long debate and yet it still isn't stabilized. In fact, the compiler team is actually going in the direction to remove it and replace it with some alternative design (e.g. always-applicable impls, <a href=\"http://smallcultfollowing.com/babysteps/blog/2018/02/09/maximally-minimal-specialization-always-applicable-impls/\">http://smallcultfollowing.com/babysteps/blog/2018/02/09/maximally-minimal-specialization-always-applicable-impls/</a>). So that's what I mean with \"highly unstable and unsound specialization\".</p>\n<p>By the way, the \"hack\" I mentioned is implemented by @sinkuu as a prototype in <a href=\"https://github.com/sinkuu/rust/commit/ba00a0effd4c51f7c98247b994661a6db31ea7de\">https://github.com/sinkuu/rust/commit/ba00a0effd4c51f7c98247b994661a6db31ea7de</a>. Maybe it would give you an idea how it might look like.</p>",
        "id": 216424877,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1605152892
    },
    {
        "content": "<p>just need a debug case and a default case that uses the stringified repr</p>",
        "id": 216424878,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1605152892
    },
    {
        "content": "<p>@Jane Lusby:  So, would that leave the assert where it current resides?  In the src directory underneath rustc_builtin_macros</p>",
        "id": 216424969,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1605153047
    },
    {
        "content": "<p>yea</p>",
        "id": 216425004,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1605153122
    },
    {
        "content": "<p>Great.  Thanks</p>",
        "id": 216425043,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1605153140
    },
    {
        "content": "<p>it shouldn't even really need to be a builtin afaik</p>",
        "id": 216425044,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1605153142
    },
    {
        "content": "<p>but there's no reason to change it to a proc macro</p>",
        "id": 216425052,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1605153154
    },
    {
        "content": "<p>unless compiler builtin just means internal proc macro in this case</p>",
        "id": 216425074,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1605153179
    },
    {
        "content": "<p>in which case don't mind me, lol</p>",
        "id": 216425078,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1605153188
    },
    {
        "content": "<p>Oh, but I do mind you, lol</p>",
        "id": 216425093,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1605153218
    },
    {
        "content": "<p>Thanks.</p>",
        "id": 216425169,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1605153292
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/Nicer.20Assert.20Messages/near/216425074\">said</a>:</p>\n<blockquote>\n<p>unless compiler builtin just means internal proc macro in this case</p>\n</blockquote>\n<p>no, compiler builtins are handled specially: <a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_builtin_macros/src/assert.rs\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_builtin_macros/src/assert.rs</a></p>",
        "id": 216428857,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605158067
    },
    {
        "content": "<p>(maybe you could consider them a proc-macro that also uses <code>rustc_private</code>?)</p>",
        "id": 216428874,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605158114
    },
    {
        "content": "<p>Is rustc_private stable?  I googled it and the impression left was unstable</p>",
        "id": 216430089,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1605159628
    },
    {
        "content": "<p>no, rustc_private will never be stable</p>",
        "id": 216430361,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605159970
    },
    {
        "content": "<p>it's the compiler internals</p>",
        "id": 216430365,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605159985
    },
    {
        "content": "<p>what about <code>rustc_driver</code> will that be stabilized?</p>",
        "id": 216430548,
        "sender_full_name": "oliver",
        "timestamp": 1605160248
    },
    {
        "content": "<p>no, that's also internals</p>",
        "id": 216430622,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605160372
    },
    {
        "content": "<p>internals to what?</p>",
        "id": 216430644,
        "sender_full_name": "oliver",
        "timestamp": 1605160404
    },
    {
        "content": "<p>the rust compiler</p>",
        "id": 216430697,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605160451
    },
    {
        "content": "<p>sure but what's the distinction?</p>",
        "id": 216430709,
        "sender_full_name": "oliver",
        "timestamp": 1605160466
    },
    {
        "content": "<p>it's not part of the language</p>",
        "id": 216430716,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605160473
    },
    {
        "content": "<p>it's all <code>rustc</code></p>",
        "id": 216430719,
        "sender_full_name": "oliver",
        "timestamp": 1605160480
    },
    {
        "content": "<p>it's an API that's specific to a certain implementation</p>",
        "id": 216430720,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605160481
    },
    {
        "content": "<p>no?</p>",
        "id": 216430722,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605160485
    },
    {
        "content": "<p>rustc is a binary</p>",
        "id": 216430725,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605160488
    },
    {
        "content": "<p>rustc_driver is a library</p>",
        "id": 216430729,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605160492
    },
    {
        "content": "<p><code>rustc_*</code></p>",
        "id": 216430732,
        "sender_full_name": "oliver",
        "timestamp": 1605160497
    },
    {
        "content": "<p>I don't understand what you're asking.</p>",
        "id": 216430746,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605160517
    },
    {
        "content": "<p>so you can't use <code>rustc_driver</code>?</p>",
        "id": 216430753,
        "sender_full_name": "oliver",
        "timestamp": 1605160524
    },
    {
        "content": "<p>you can if you opt-in to it with <code>feature(rustc_private)</code></p>",
        "id": 216430763,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605160542
    },
    {
        "content": "<p>but it's not something you should be using in day-to-day code</p>",
        "id": 216430771,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605160553
    },
    {
        "content": "<p>OIC internals are features, no I'm just curious</p>",
        "id": 216430806,
        "sender_full_name": "oliver",
        "timestamp": 1605160563
    },
    {
        "content": "<p>ignore my advances</p>",
        "id": 216430840,
        "sender_full_name": "oliver",
        "timestamp": 1605160637
    },
    {
        "content": "<p>So Joshua, are you saying it’s something I might be able to use with the assert?</p>",
        "id": 216430902,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1605160701
    },
    {
        "content": "<p>sorry, I didn't mean to be so confusing</p>",
        "id": 216431472,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605161485
    },
    {
        "content": "<p><code>rustc_private</code> has nothing to do with how <code>assert!</code> is currently implemented</p>",
        "id": 216431477,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605161498
    },
    {
        "content": "<p>I was speculating that in an alternative universe, you could imagine it being implemented as a proc_macro that opted in with <code>rustc_private</code></p>",
        "id": 216431480,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605161519
    },
    {
        "content": "<p>forget I said anything</p>",
        "id": 216431534,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605161545
    },
    {
        "content": "<p>Thanks.  I can take that option off my plate<span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 216431548,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1605161580
    },
    {
        "content": "<p>I noticed the rustc_ast crate being used. When I researched the crate, there was a note stipulating that \"This API is completely unstable and subject to change.\" I'm wondering if someone has insight on this/is it really a matter of concern?  Thanks.</p>",
        "id": 216942490,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1605566137
    },
    {
        "content": "<p>It's not a matter of concern because the code you're adding is part of the same repo</p>",
        "id": 216942610,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1605566205
    },
    {
        "content": "<p>Thanks</p>",
        "id": 216943164,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1605566496
    },
    {
        "content": "<p>I want to run a test but I'm not sure if it should be a unit test or just ./x.py assert.  This will be for <a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_builtin_macros/src/assert.rs\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_builtin_macros/src/assert.rs</a>  </p>\n<p>My next question is \"do I write my test code/dummy code within <a href=\"http://assert.rs\">assert.rs</a>?  If not then where.  Thanks.</p>",
        "id": 217519439,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1605993408
    },
    {
        "content": "<p>Can someone tell me where in this code the boolean expression is evaluated to true for assert!?  The code can be found at <a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_builtin_macros/src/assert.rs\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_builtin_macros/src/assert.rs</a>  I've been reading the Module rustc_ast::ast document to understand the language AST but I need to see how that one piece is evaluated in order to have an idea where I need to insert my code for additional functionality, i.e. assert_eq!  If I'm off base here just let me know but I think I'm taking the right approach.  Thanks.</p>",
        "id": 218955134,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1607204836
    },
    {
        "content": "<p>That code doesn't <em>evaluate</em> the condition; it <em>expands</em> the call to the macro to some other code. It can't evaluate the condition there because that code is run at compile-time.</p>",
        "id": 218956946,
        "sender_full_name": "Noah Lev",
        "timestamp": 1607207646
    },
    {
        "content": "<p>If you look at the output from <code>rustc +nightly -Z unpretty=expanded -</code>, you'll see that</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">assert</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>expands to</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(prelude_import)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![no_std]</span><span class=\"w\"></span>\n<span class=\"cp\">#[prelude_import]</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span>::<span class=\"n\">std</span>::<span class=\"n\">prelude</span>::<span class=\"n\">v1</span>::<span class=\"o\">*</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"cp\">#[macro_use]</span><span class=\"w\"></span>\n<span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"k\">crate</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"kc\">true</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span>::<span class=\"n\">core</span>::<span class=\"n\">panicking</span>::<span class=\"n\">panic</span><span class=\"p\">(</span><span class=\"s\">\"assertion failed: true\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 218956962,
        "sender_full_name": "Noah Lev",
        "timestamp": 1607207677
    },
    {
        "content": "<p>That <code>if</code> expression is generated <a href=\"https://github.com/rust-lang/rust/blob/15eaa0020b79ad9a9a0c486d1abd00b29c6c5ae2/compiler/rustc_builtin_macros/src/assert.rs#L60-L61\">here</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">if_expr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">cx</span><span class=\"p\">.</span><span class=\"n\">expr_if</span><span class=\"p\">(</span><span class=\"n\">sp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cx</span><span class=\"p\">.</span><span class=\"n\">expr</span><span class=\"p\">(</span><span class=\"n\">sp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ExprKind</span>::<span class=\"n\">Unary</span><span class=\"p\">(</span><span class=\"n\">UnOp</span>::<span class=\"n\">Not</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cond_expr</span><span class=\"p\">)),</span><span class=\"w\"> </span><span class=\"n\">panic_call</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 218956979,
        "sender_full_name": "Noah Lev",
        "timestamp": 1607207713
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 218957456,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1607208339
    },
    {
        "content": "<p>It seems I need to modify where the if expression is generated for assert!</p>",
        "id": 218957584,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1607208544
    },
    {
        "content": "<p>I’m making assumptions that apparently aren’t based on anything concrete.  I need to follow the code from start to finish.  I just hit a bump with the AST. <span class=\"user-mention\" data-user-id=\"307537\">@Camelid</span> Thanks for the feedback 🙏</p>",
        "id": 218958453,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1607210101
    },
    {
        "content": "<p>This is the code I'm looking at: <a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_builtin_macros/src/assert.rs\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_builtin_macros/src/assert.rs</a></p>\n<p>My task is to add the functionality of assert_eq to assert  such as follows:<br>\nmacro_rules! assert_eq {<br>\n    ($left:expr, $right:expr) =&gt; ({<br>\n        match (&amp;$left, &amp;$right) {<br>\n            (left_val, right_val) =&gt; {<br>\n                if !(*left_val == *right_val) {<br>\n                    panic!(r#\"assertion failed: <code>(left == right)</code><br>\n  left: <code>{:?}</code>,<br>\n right: <code>{:?}</code>\"#, left_val, right_val)<br>\n                }<br>\n            }<br>\n        }<br>\n    });<br>\n}  </p>\n<p>Where I'm at:<br>\nI have read up on AST and understand that that is how the compiler represents source code and that this is done within 2 steps, lexing and parsing.  It's the parsing that takes the tokens and converts that into an AST, which, I assume is what I'm looking at at the link  <a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_builtin_macros/src/assert.rs\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_builtin_macros/src/assert.rs</a> .  I've ran the code: rustc +nightly -Z unpretty=expanded and viewed the expanded output.</p>\n<p>Questions:</p>\n<ol>\n<li>What is the code doing at line 60 of the link I provided?</li>\n<li>Will I need to add another item to struct Assert, i.e., cond_expr2, at line 65 of the link?</li>\n<li>Is there a visual debug process I can use to step through the code from ASCI format to AST?  There probably isn't but I thought I'd ask.</li>\n</ol>\n<p>Thanks in advance for the assistance.  I'll be back on line by noon CST.</p>",
        "id": 222553599,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1610529679
    },
    {
        "content": "<ol start=\"3\">\n<li>I'm not sure what you mean by visual debug process, but you can use gdb on the rust compiler if you enable debug symbols. You'd set <code>debuginfo = 2</code> in config.toml (but be warned that takes a lot longer than debuginfo = 1).</li>\n</ol>",
        "id": 222576864,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610543767
    },
    {
        "content": "<p>Thanks @Joshua Nelson.  My first programming language was PowerBuilder which allowed one to see all the properties and their values, local, global, and shared, as you step through the code.  Again, thanks.</p>",
        "id": 222604633,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1610554404
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"344328\">@Charles Ellis O'Riley Jr.</span> 1. that seems to be constructing an if statement to add to the AST</p>",
        "id": 222641659,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610570117
    },
    {
        "content": "<ol start=\"2\">\n<li>I don't think so, you're probably going to want to modify how it generates <code>panic_call</code></li>\n</ol>",
        "id": 222641899,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610570213
    },
    {
        "content": "<p>rn what its doing is taking an assert and turning it into an if + a panic</p>",
        "id": 222641981,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610570250
    },
    {
        "content": "<p><code>assert (bool) =&gt; if bool { panic }</code></p>",
        "id": 222642003,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610570263
    },
    {
        "content": "<p>this line right here is probably the most relevant one</p>",
        "id": 222642231,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610570361
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_builtin_macros/src/assert.rs#L55\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_builtin_macros/src/assert.rs#L55</a></p>",
        "id": 222642233,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610570362
    },
    {
        "content": "<p>where it takes the expression of the assert and turns it into a string to print in the panic</p>",
        "id": 222642249,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610570374
    },
    {
        "content": "<p>instead of just stringifying the expression you're going to want to print the values on the left and right side of the boolean expr in the assert, if applicable</p>",
        "id": 222642373,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610570428
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"344328\">@Charles Ellis O'Riley Jr.</span> would it help if I wrote up some more detailed instructions on the steps to take?</p>",
        "id": 222642417,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610570457
    },
    {
        "content": "<p>@Jane Lusby, for <a href=\"https://github.com/rust-lang/rust/issues/2\">#2</a>, I kind of thought that’s what was going on so I assume I’ll need to add on to it.  For <a href=\"https://github.com/rust-lang/rust/issues/1\">#1</a>, I’ll have to flesh out what you’re saying.  Perhaps I’ll get a better understanding once I set up debug.  Thanks for the reply.</p>",
        "id": 222642733,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1610570624
    },
    {
        "content": "<p>np, to clarify on 1.</p>",
        "id": 222642827,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610570659
    },
    {
        "content": "<p>what I mean is, when rustc compiles code you know how it loads the source file, tokenizes it, and then makes the ast (not sure this is exactly correct but it should be close enough)</p>",
        "id": 222642904,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610570702
    },
    {
        "content": "<p>where the AST is just rust structs that represent rust source</p>",
        "id": 222642926,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610570713
    },
    {
        "content": "<p>so instead of <code>if bool { body }</code> you have something like</p>",
        "id": 222642946,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610570725
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">IfStatement</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">predicate</span>: <span class=\"nc\">BoolExpr</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">body</span>: <span class=\"nc\">Block</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 222642971,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610570744
    },
    {
        "content": "<p>not real AST but hopefully this makes it clear what it means</p>",
        "id": 222643060,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610570774
    },
    {
        "content": "<p>the <code>let if_expr =\n        cx.expr_if(sp, cx.expr(sp, ExprKind::Unary(UnOp::Not, cond_expr)), panic_call, None);</code></p>",
        "id": 222643074,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610570784
    },
    {
        "content": "<p>is creating one of those if expression structs</p>",
        "id": 222643090,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610570794
    },
    {
        "content": "<p>which it's then substituting in place of the <code>assert!</code> macro expression in the original source</p>",
        "id": 222643139,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610570818
    },
    {
        "content": "<p>or something like that</p>",
        "id": 222643154,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610570827
    },
    {
        "content": "<p>Gotcha.  that makes sense.  So, at line 65, will I need to add another cond_expr such as cond_expr2?  Not sure how that would work.  I'm just thinking ahead.</p>",
        "id": 222643855,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1610571180
    },
    {
        "content": "<p>I don't think you'll need a new conditional expression</p>",
        "id": 222644276,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610571376
    },
    {
        "content": "<p>I think the first step <span class=\"user-mention\" data-user-id=\"344328\">@Charles Ellis O'Riley Jr.</span>  is that you'll want to create the debug code for printing the condition</p>",
        "id": 222644523,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610571483
    },
    {
        "content": "<p>and just prove that that works</p>",
        "id": 222644537,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610571488
    },
    {
        "content": "<p>let me do a little digging</p>",
        "id": 222644589,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610571506
    },
    {
        "content": "<p>thanks</p>",
        "id": 222644617,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1610571532
    },
    {
        "content": "<p>okay <span class=\"user-mention\" data-user-id=\"344328\">@Charles Ellis O'Riley Jr.</span> it turns out this code was already implemented in <a href=\"https://github.com/de-vri-es/assert2-rs\">https://github.com/de-vri-es/assert2-rs</a></p>",
        "id": 222650120,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610574266
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"359973\">@Maarten de Vries</span></p>",
        "id": 222650159,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610574300
    },
    {
        "content": "<p>this bit is the important one</p>",
        "id": 222650204,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610574328
    },
    {
        "content": "<p><a href=\"https://github.com/de-vri-es/assert2-rs/blob/main/src/maybe_debug.rs\">https://github.com/de-vri-es/assert2-rs/blob/main/src/maybe_debug.rs</a></p>",
        "id": 222650205,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610574328
    },
    {
        "content": "<p>where he used autoderef specialization to create the fallback formatting</p>",
        "id": 222650254,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610574360
    },
    {
        "content": "<p>and <a href=\"https://github.com/de-vri-es/assert2-rs/blob/main/assert2-macros/src/lib.rs#L60-L85\">https://github.com/de-vri-es/assert2-rs/blob/main/assert2-macros/src/lib.rs#L60-L85</a> is where it gets used</p>",
        "id": 222650574,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610574495
    },
    {
        "content": "<p>to create the better panic</p>",
        "id": 222650580,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610574499
    },
    {
        "content": "<p>so you're gonna need to create something like this to replace the current <code>panic_call</code> on line 65</p>",
        "id": 222650624,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610574526
    },
    {
        "content": "<p>important to note though, assert2-rs uses syn + quote</p>",
        "id": 222650843,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610574636
    },
    {
        "content": "<p>since it's an external proc macro</p>",
        "id": 222650856,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610574642
    },
    {
        "content": "<p>so the way you actually create a type like this will be different, using the equivalent rustc APIs</p>",
        "id": 222650908,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610574662
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span>  Line 65 of <a href=\"http://assert.rs\">assert.rs</a>?</p>",
        "id": 222651000,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1610574711
    },
    {
        "content": "<p>yes</p>",
        "id": 222651016,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610574719
    },
    {
        "content": "<p>the <code>expr_if</code> line we were talking about before</p>",
        "id": 222651070,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610574727
    },
    {
        "content": "<p>@Jane Lusby This is what's at line 65</p>\n<p>struct Assert {<br>\n    cond_expr: P&lt;ast::Expr&gt;,<br>\n    custom_message: Option&lt;TokenStream&gt;,<br>\n}</p>",
        "id": 222651173,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1610574784
    },
    {
        "content": "<p>sorry i meant 61</p>",
        "id": 222651271,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610574832
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_builtin_macros/src/assert.rs\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_builtin_macros/src/assert.rs</a></p>",
        "id": 222651274,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610574834
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_builtin_macros/src/assert.rs#L61\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_builtin_macros/src/assert.rs#L61</a></p>",
        "id": 222651283,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610574839
    },
    {
        "content": "<p>Ok.  Let me look at it.  Thanks.</p>",
        "id": 222651382,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1610574883
    }
]