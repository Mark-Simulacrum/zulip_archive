[
    {
        "content": "<p>so i quickly worked through the rustlings course and got frustrated with the conversion exercises, where i wished i could have used <code>?</code> in lots of places, but often the error type was simply <code>String</code>. i submitted a patch to change that to <code>Box&lt;dyn Error&gt;</code> for easier use of <code>?</code>. that turned out to cause other users to be confused, so i started reading in more detail about error handling in Rust</p>",
        "id": 242009448,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1623203287
    },
    {
        "content": "<p>thinking about it more, i realized there was a large jump in difficulty in the <code>error_handling</code> exercises: <a href=\"https://github.com/rust-lang/rustlings/issues/756\">https://github.com/rust-lang/rustlings/issues/756</a> so i submitted the previously mentioned pull request <a href=\"https://github.com/rust-lang/rustlings/pull/772\">https://github.com/rust-lang/rustlings/pull/772</a> with some improvements</p>",
        "id": 242009491,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1623203370
    },
    {
        "content": "<p>there's a bit of a sequencing problem because some more advanced Rust language concepts are needed before teaching some of the other best practices: mapping errors with <code>map_err</code> etc require familiarity with closures, for example, so having custom error types that wrap other errors has to wait for that. similarly, implementing <code>From</code>, which is needed for the <code>?</code> operator to work cleanly with custom error types, needs to wait until after the conversion traits are introduced</p>",
        "id": 242009681,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1623203532
    },
    {
        "content": "<p>Yea, Jane's been brainstorming an API for a concrete wrapper type around <code>Box&lt;dyn Error&gt;</code>s (which you can see <a href=\"https://gist.github.com/yaahc/c9348cca4aa34ba8bc92f41ba543919d\">here</a>), not specifically to address this, though I wonder if it would have the added benefit of being more appropriate to introduce at an earlier point in rustlings, since it would just be a struct called <code>DynError</code> that wraps a <code>Box&lt;dyn Error&gt;</code>. I'm thinking this way newcomers only have to wrap their brain around a single error type and how to work with it instead of being exposed to <code>Box</code>, <code>dyn</code>, and the <code>Error</code> trait all at once.</p>",
        "id": 242072470,
        "sender_full_name": "Sean Chen (he/him)",
        "timestamp": 1623248249
    },
    {
        "content": "<p>that does have some appeal, though i wonder if it would take a while to reach consensus on it. i guess a big part of the general problem is that <code>Result&lt;T, E&gt;</code> is quite versatile and underconstrained, and existing tutorial materials don't provide much guidance about what to use as <code>E</code>. (and include some worst practices such as <code>Result&lt;T, String&gt;</code>)</p>",
        "id": 242083394,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1623252360
    },
    {
        "content": "<p>it's definitely far too early for it to go into rustlings though</p>",
        "id": 242083496,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1623252388
    },
    {
        "content": "<p>we still need to actually test it out for a while, particularly given that there are already concerns about how teachable it will be</p>",
        "id": 242083551,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1623252415
    },
    {
        "content": "<blockquote>\n<p>it's definitely far too early for it to go into rustlings though</p>\n</blockquote>\n<p>Sure; just a thought <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 242083553,
        "sender_full_name": "Sean Chen (he/him)",
        "timestamp": 1623252417
    },
    {
        "content": "<p>since this approach would introduce a separate Result type</p>",
        "id": 242083590,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1623252433
    },
    {
        "content": "<p>it's a good idea, but yea, just not yet</p>",
        "id": 242083662,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1623252460
    },
    {
        "content": "<p>Does rustlings cover defining error enums to capture different error variants? I feel like that could be introduced earlier than <code>Box&lt;dyn Error&gt;</code>, though you'd still have to introduce the <code>Error</code> trait and deriving it for the error enum.</p>",
        "id": 242084249,
        "sender_full_name": "Sean Chen (he/him)",
        "timestamp": 1623252644
    },
    {
        "content": "<p>that's partly what my current PR is trying to do. one thing i realized that would make the teaching easier is that you don't have to implement all of <code>error::Error</code> to get some of the benefits of using custom error types. like you can use <code>?</code> as soon as you have all the required <code>From&lt;E&gt; for MyError</code> traits implemented</p>",
        "id": 242084714,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1623252812
    },
    {
        "content": "<p>right now the <code>error_handling</code> section of rustlings comes before anything that uses closures or conversion traits. so it might make sense to add an <code>advanced_errors</code> section that comes after those, so we can teach <code>map_err</code> (to help with custom error variants that embed a lower-level error) and <code>From&lt;E&gt; for MyError</code> (so <code>?</code> can work nicely). and then later on teach <code>Display</code> and the full <code>error::Error</code> trait, probably via an exercise that simulates an application calling a function returning the custom error but returns a boxed error (so the custom error would have to fully implement <code>Error</code>)</p>",
        "id": 242085737,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1623253184
    },
    {
        "content": "<p>we should probably also teach <code>.ok_or</code> if that isn't already in rustlings somewhere</p>",
        "id": 242085947,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1623253254
    },
    {
        "content": "<p>reviewing your PR right now btw</p>",
        "id": 242085974,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1623253267
    },
    {
        "content": "<p>yeah, i had been wondering why so many helpful methods on <code>Option</code> and <code>Result</code> aren't really covered at all in our tutorial material. i'm actually writing up method overview sections for <code>Option</code> and <code>Result</code> for the std docs, including \"truth tables\" for the boolean-like operators/combinators</p>",
        "id": 242086406,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1623253439
    },
    {
        "content": "<p>fancy</p>",
        "id": 242086545,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1623253490
    },
    {
        "content": "<p>oh, another thing i just realized: mapping functions can take ordinary function pointers as well as closures, so that's one way to sidestep introducing closures (though i think currently rustlings doesn't explicitly teach closures; it might drop them directly into an iterators exercise without introduction?)</p>",
        "id": 242086877,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1623253619
    },
    {
        "content": "<p>I feel like function pointers are encountered way less often in Rust than closures (though maybe that's just me?), which is to say I'm not sure if a newcomer would know what a function pointer is in the context of Rust (though they might certainly have seen them in other language contexts).</p>",
        "id": 242087205,
        "sender_full_name": "Sean Chen (he/him)",
        "timestamp": 1623253773
    },
    {
        "content": "<p>Rustlings not covering closures seems like a gaping hole though..</p>",
        "id": 242087263,
        "sender_full_name": "Sean Chen (he/him)",
        "timestamp": 1623253798
    },
    {
        "content": "<p>im assuming they just cover it later</p>",
        "id": 242087402,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1623253843
    },
    {
        "content": "<p>and yea, using a fn sounds like a good idea</p>",
        "id": 242087478,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1623253867
    },
    {
        "content": "<p>you could do something like <code>fallible_fn.ok_or(MyError::from)</code></p>",
        "id": 242087529,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1623253887
    },
    {
        "content": "<p>that way you don't have to introduce even more boilerplate than would normally be needed</p>",
        "id": 242088361,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1623254221
    },
    {
        "content": "<p>yeah, and it could even be an ordinary associated function, to avoid introducing the <code>From</code> trait too early</p>",
        "id": 242088614,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1623254319
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"411291\">Taylor Yu [they/she]</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/rustlings/near/242088614\">said</a>:</p>\n<blockquote>\n<p>yeah, and it could even be an ordinary associated function, to avoid introducing the <code>From</code> trait too early</p>\n</blockquote>\n<p>aah, i didn't realize it hadn't been introduced yet by the 6th error exercise</p>",
        "id": 242088671,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1623254343
    },
    {
        "content": "<p>was trying to avoid having functions / methods just for each from impl that would be needed, but i guess that's fine since you will clarify later</p>",
        "id": 242088780,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1623254389
    },
    {
        "content": "<p>currently, generics come after the error handling section</p>",
        "id": 242088787,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1623254392
    },
    {
        "content": "<p>and actually that leads well into From</p>",
        "id": 242088798,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1623254399
    },
    {
        "content": "<p>since you can be like</p>",
        "id": 242088807,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1623254401
    },
    {
        "content": "<p>\"remember this? actually doing this every time is annoying, so we have a trait for it!\"</p>",
        "id": 242088879,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1623254412
    },
    {
        "content": "<p>or smth</p>",
        "id": 242088892,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1623254417
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"411291\">Taylor Yu [they/she]</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/rustlings/near/242088787\">said</a>:</p>\n<blockquote>\n<p>currently, generics come after the error handling section</p>\n</blockquote>\n<p>I liked your earlier suggestion about having an advanced error handling section</p>",
        "id": 242088959,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1623254442
    },
    {
        "content": "<p>might be that we just teach most of error handling in the advanced section</p>",
        "id": 242088989,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1623254451
    },
    {
        "content": "<p>have whatever simple examples we can for pre generics and closures</p>",
        "id": 242089050,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1623254474
    },
    {
        "content": "<p>then do a full tutorial later using all the necessary features</p>",
        "id": 242089085,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1623254487
    },
    {
        "content": "<p>coming late to the party, it would be a good idea to separate EH into two parts, basic one and advanced, just like the Rust Book does</p>",
        "id": 242502851,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1623580553
    },
    {
        "content": "<p>also it's good to know that so many people  learn from  rustlings (for instance I did not know they were so popular)</p>",
        "id": 242503051,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1623580791
    },
    {
        "content": "<p>and amazing job on the truth tables (I ALWAYS have to look up the documentation to see what the functions do)</p>",
        "id": 242503108,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1623580850
    },
    {
        "content": "<p>which brings up the topic of not verbose documentation in several places</p>",
        "id": 242503121,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1623580877
    },
    {
        "content": "<p>or not concise enough</p>",
        "id": 242503124,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1623580887
    },
    {
        "content": "<p>another pull request to hopefully alleviate some confusion caused by boxed errors <a href=\"https://github.com/rust-lang/rustlings/pull/780\">https://github.com/rust-lang/rustlings/pull/780</a></p>",
        "id": 243869703,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1624588674
    },
    {
        "content": "<p>advanced errors: <a href=\"https://github.com/rust-lang/rustlings/pull/781\">https://github.com/rust-lang/rustlings/pull/781</a></p>",
        "id": 243976037,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1624658497
    },
    {
        "content": "<p>just wanna give you a heads up <span class=\"user-mention\" data-user-id=\"411291\">@Taylor Yu [they/she]</span>  that I probably wont be able to review these until monday</p>",
        "id": 243980500,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1624662495
    }
]