[
    {
        "content": "<p>what don't you love about it <span class=\"user-mention\" data-user-id=\"211722\">@Yoshua Wuyts</span> ?</p>",
        "id": 210805450,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600725400
    },
    {
        "content": "<p>We had to redefine a fair few things (like macros), and there's the pesky problem where this error doesn't implement Error (error containers vs proper errors)</p>",
        "id": 210805509,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1600725450
    },
    {
        "content": "<p>aah yea</p>",
        "id": 210805547,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600725477
    },
    {
        "content": "<p>the reporters not being able to implement Error issue is lame :/</p>",
        "id": 210805600,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600725491
    },
    {
        "content": "<p>Not sure if we could avoid the macros; we want to rewrite them to always take a status argument — but the container thing might be more widely applicable</p>",
        "id": 210805610,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1600725500
    },
    {
        "content": "<p>something something chalk fixes this</p>",
        "id": 210805616,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600725505
    },
    {
        "content": "<p>Oh will it?</p>",
        "id": 210805632,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1600725515
    },
    {
        "content": "<p>maybeee</p>",
        "id": 210805641,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600725520
    },
    {
        "content": "<p>That's good news!</p>",
        "id": 210805642,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1600725521
    },
    {
        "content": "<p>we might be able to use specialization to resolve the coherence issues</p>",
        "id": 210805655,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600725530
    },
    {
        "content": "<p>remains to be seen if we'll be able to specialize From impls</p>",
        "id": 210805670,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600725543
    },
    {
        "content": "<p>as for the macros thing</p>",
        "id": 210805679,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600725555
    },
    {
        "content": "<p>Oh haha, \"maybe chalk fixes this\" — I've heard that before</p>",
        "id": 210805683,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1600725563
    },
    {
        "content": "<p>Oh haha, \"maybe chalk fixes this\" — I've heard that before</p>",
        "id": 210805684,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1600725563
    },
    {
        "content": "<p>Fingers crossed</p>",
        "id": 210805685,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1600725563
    },
    {
        "content": "<p>well, i guess first I should ask</p>",
        "id": 210805697,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600725581
    },
    {
        "content": "<p>you dont have anyhow exposed as part of your API right?</p>",
        "id": 210805705,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600725591
    },
    {
        "content": "<p>_assuming its an internal detail_</p>",
        "id": 210805717,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600725601
    },
    {
        "content": "<p>I believe we have a From impl, so technically yes</p>",
        "id": 210805755,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1600725606
    },
    {
        "content": "<p>unfortunate</p>",
        "id": 210805782,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600725628
    },
    {
        "content": "<p>Or a from_anyhow method? Lemme check</p>",
        "id": 210805783,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1600725629
    },
    {
        "content": "<p>private trait impls would be nice for this exact problem</p>",
        "id": 210805797,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600725638
    },
    {
        "content": "<p>Not sure I follow? Which problem?</p>",
        "id": 210805902,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1600725712
    },
    {
        "content": "<p>exposing anyhow as part of your API</p>",
        "id": 210805916,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600725720
    },
    {
        "content": "<p>i guess thats not really the problem at hand</p>",
        "id": 210805963,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600725725
    },
    {
        "content": "<p>(also can't find the conversion — maybe we don't have it after all! Though I really thought we did..)</p>",
        "id": 210805980,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1600725739
    },
    {
        "content": "<p>its this one <a href=\"https://docs.rs/http-types/2.4.0/http_types/struct.Error.html#impl-From%3CE%3E\">https://docs.rs/http-types/2.4.0/http_types/struct.Error.html#impl-From%3CE%3E</a></p>",
        "id": 210806004,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600725759
    },
    {
        "content": "<p>they both look like <code>Error</code> so its sneaky</p>",
        "id": 210806011,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600725767
    },
    {
        "content": "<p>Yeah I was confused; didn't see how those related — but agree it'd be nice for other things for sure!</p>",
        "id": 210806015,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1600725770
    },
    {
        "content": "<p>Ah dang</p>",
        "id": 210806047,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1600725792
    },
    {
        "content": "<p>the macros issue might be kinda resolved by merging the stuff from eyre into anyhow but the way it solves it potentially introduces other problems</p>",
        "id": 210806103,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600725841
    },
    {
        "content": "<p>the idea being that with a ReportHandler based on eyre in anyhow you could store the status code inside of the <code>anyhow::Error</code> instead of alongside it</p>",
        "id": 210806161,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600725861
    },
    {
        "content": "<p>so then you'd be able to just directly export <code>anyhow::Error</code> as your error type and you wouldn't have to redefine errors</p>",
        "id": 210806180,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600725878
    },
    {
        "content": "<p>the hickup being that they _have_ to use the error handler you define, which is installed globally via a <code>set_hook</code> fn, and if they dont you wouldn't have access to status codes</p>",
        "id": 210806222,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600725906
    },
    {
        "content": "<p>What we want to enable people to write is:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">ensure</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">.</span><span class=\"n\">is_validated</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"mi\">403</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">&quot;Authentication required);</span>\n</code></pre></div>",
        "id": 210806226,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1600725910
    },
    {
        "content": "<p>or if they want to use another reporting hook</p>",
        "id": 210806234,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600725914
    },
    {
        "content": "<p>aah, yea that wouldn't be possible</p>",
        "id": 210806254,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600725927
    },
    {
        "content": "<p>you'd need to write your own macro for that still</p>",
        "id": 210806266,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600725937
    },
    {
        "content": "<p>Yeah, that's what I was thinking</p>",
        "id": 210806280,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1600725945
    },
    {
        "content": "<p>Though I'm quite intrigued by Eyre being able to carry metadata</p>",
        "id": 210806357,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1600725975
    },
    {
        "content": "<p>with the eyre changes you'd do something like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">user</span><span class=\"p\">.</span><span class=\"n\">is_validated</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">format_err</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;Authentication required&quot;</span><span class=\"p\">).</span><span class=\"n\">status_code</span><span class=\"p\">(</span><span class=\"mi\">403</span><span class=\"p\">)))</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 210806375,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600725988
    },
    {
        "content": "<p>That's quite nice!</p>",
        "id": 210806435,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1600726044
    },
    {
        "content": "<p>:D</p>",
        "id": 210806447,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600726056
    },
    {
        "content": "<p>Btw, I'm not the right person to chat about this — but something we've seen come up a lot in Tide is downcasting</p>",
        "id": 210806538,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1600726108
    },
    {
        "content": "<p>Swift recently introduced typed <code>catch</code> which I thought was quite nice</p>",
        "id": 210806550,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1600726122
    },
    {
        "content": "<p>as in tide ends up needing to use downcast instead of <code>match</code>?</p>",
        "id": 210806561,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600726130
    },
    {
        "content": "<p>Dunno, feel there might be something there</p>",
        "id": 210806563,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1600726132
    },
    {
        "content": "<p>this doesn't surprise me</p>",
        "id": 210806570,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600726135
    },
    {
        "content": "<p>i think this is a property of a certain style of application framework</p>",
        "id": 210806581,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600726143
    },
    {
        "content": "<p><code>tower</code> has the same property</p>",
        "id": 210806586,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600726148
    },
    {
        "content": "<p>which annoys me</p>",
        "id": 210806589,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600726151
    },
    {
        "content": "<p>because it doesn't actually integrate well with <code>eyre::Report</code></p>",
        "id": 210806594,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600726160
    },
    {
        "content": "<p>well, if you use certain middlewear that is</p>",
        "id": 210806600,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600726168
    },
    {
        "content": "<p>It seemed like a choice between boxing and downcasting vs threading even more generics — we chose the former</p>",
        "id": 210806620,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1600726189
    },
    {
        "content": "<p>yea i think thats the right choice personally</p>",
        "id": 210806650,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600726203
    },
    {
        "content": "<p>imo downcasting as a form of reacting to errors is fine and good</p>",
        "id": 210806685,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600726216
    },
    {
        "content": "<p>the biggest downside being you don't get an enumerated list of errors in the source code you can easily reference to figure out what you need to handle</p>",
        "id": 210806706,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600726244
    },
    {
        "content": "<p>It doesn't seem particularly smooth yet tho — haven't thought too much about it, but I feel there is something that could be worth thinking about</p>",
        "id": 210806716,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1600726257
    },
    {
        "content": "<p>the upside being that you still never fail to handle errors because you always have to handle the case where its none of the types you downcast too</p>",
        "id": 210806720,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600726259
    },
    {
        "content": "<p>i think there might be some room for language level support of matching against type erased objects</p>",
        "id": 210806757,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600726292
    },
    {
        "content": "<p>tho probably initially macro level support</p>",
        "id": 210806767,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600726300
    },
    {
        "content": "<p>the <code>error</code> crate has some prior art for this</p>",
        "id": 210806793,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600726321
    },
    {
        "content": "<p><a href=\"https://docs.rs/error/0.1.9/error/macro.match_error.html\">https://docs.rs/error/0.1.9/error/macro.match_error.html</a></p>",
        "id": 210806838,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600726328
    },
    {
        "content": "<p><a href=\"https://docs.rs/error/0.1.9/src/error/lib.rs.html#99-115\">https://docs.rs/error/0.1.9/src/error/lib.rs.html#99-115</a></p>",
        "id": 210806850,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600726342
    },
    {
        "content": "<p>im guessing this is much like the <code>catch</code> you mentioned being added to tide</p>",
        "id": 210806863,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600726360
    },
    {
        "content": "<p>This is the Swift feature btw: \"multi pattern catch clauses\" <a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0276-multi-pattern-catch-clauses.md\">https://github.com/apple/swift-evolution/blob/master/proposals/0276-multi-pattern-catch-clauses.md</a></p>",
        "id": 210806869,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1600726364
    },
    {
        "content": "<p>gonna check that out rn actually</p>",
        "id": 210806870,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600726364
    },
    {
        "content": "<p>cool!</p>",
        "id": 210806898,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600726392
    },
    {
        "content": "<p>[meta note: not sure if we're still on topic for this stream; we should probably fork this to a new one. No idea how to do that on mobile tho lmao]</p>",
        "id": 210806921,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1600726419
    },
    {
        "content": "<p>is the <code>catch</code> macro you mentioned merged?</p>",
        "id": 210806926,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600726422
    },
    {
        "content": "<p>yea let me do that</p>",
        "id": 210806934,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600726427
    },
    {
        "content": "<p>Which catch macro?</p>",
        "id": 210806939,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1600726431
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211722\">Yoshua Wuyts</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/dyn.20error.20handlnig/near/210806550\">said</a>:</p>\n<blockquote>\n<p>Swift recently introduced typed <code>catch</code> which I thought was quite nice</p>\n</blockquote>\n<p>oh swift</p>",
        "id": 210807031,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600726480
    },
    {
        "content": "<p>i thought you meant you added a macro for handling downcast and match in tide</p>",
        "id": 210807043,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600726490
    },
    {
        "content": "<p>didn't read properly</p>",
        "id": 210807049,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600726493
    },
    {
        "content": "<p>Okay so according to <a href=\"https://www.hackingwithswift.com/new-syntax-swift-2-error-handling-try-catch\">https://www.hackingwithswift.com/new-syntax-swift-2-error-handling-try-catch</a> the catch clause syntax in Swift only applies for enum-style errors</p>",
        "id": 210807568,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1600726798
    },
    {
        "content": "<p>Doesn't seem to work for something like downcasting afaict; and even doubt it'd work for \"container errors\" in the <code>std::io::{Error, ErrorKind}</code> style</p>",
        "id": 210807700,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1600726875
    },
    {
        "content": "<p>why not?</p>",
        "id": 210807801,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600726936
    },
    {
        "content": "<p>Still tho — this is pretty interesting and seems like it could be a direction if we ever get to stabilizing try clauses in Rust</p>",
        "id": 210807802,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1600726937
    },
    {
        "content": "<p>it seems like you could have something like</p>",
        "id": 210807807,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600726941
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">downcast_match</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">err</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">io</span>::<span class=\"n\">Error</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">.</span><span class=\"n\">kind</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// ...</span>\n<span class=\"w\">    </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">err</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">eprintln</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;Error: {:?}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 210807887,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600727043
    },
    {
        "content": "<p>you'd need two inputs for each match arm as I see it, the type being downcast too, and the pattern(s) that type is being matched against on a successful downcast</p>",
        "id": 210807961,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600727087
    },
    {
        "content": "<p>extremely strawman syntax but hopefully it gets the idea across</p>",
        "id": 210807996,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600727127
    },
    {
        "content": "<p>I see</p>",
        "id": 210808082,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1600727178
    },
    {
        "content": "<p>Having language support for downcast matching would be phenomenal, where I work we have some common cases that end up with long verbose if let chains</p>",
        "id": 210808083,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1600727180
    },
    {
        "content": "<p>Oh what if there was a <code>catch</code> and a <code>downcast catch</code>. Getting to the inner ErrorKind could even be as short as:</p>\n<p>Adapting the Swift syntax we could have:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">try</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"> </span><span class=\"n\">downcast</span><span class=\"w\"> </span><span class=\"n\">catch</span><span class=\"w\"> </span><span class=\"n\">ErrorKind</span>:: <span class=\"nc\">NonBlocking</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 210808309,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1600727347
    },
    {
        "content": "<p>Big ol' straw man too</p>",
        "id": 210808322,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1600727365
    },
    {
        "content": "<p>as in tying the catch syntax to try blocks?</p>",
        "id": 210808355,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600727400
    },
    {
        "content": "<p>seems like you'd run into issues around the fact that <code>try</code> blocks are about control flow ontop of <code>Result</code> but this proposed <code>catch</code> is for dynamic dispatch based on <code>dyn Error</code> / <code>dyn Any</code></p>",
        "id": 210808454,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600727450
    },
    {
        "content": "<p>Yeah, I guess I didn't spell that assumption out</p>",
        "id": 210808468,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1600727466
    },
    {
        "content": "<p>Both dynamic dispatch for <code>dyn Error</code> and static matching on Error enums</p>",
        "id": 210808525,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1600727522
    },
    {
        "content": "<p>Though there is definitely a lot to unpack</p>",
        "id": 210808569,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1600727542
    },
    {
        "content": "<p>yea</p>",
        "id": 210808573,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600727547
    },
    {
        "content": "<p>my preference would be to not tie it to <code>try</code> blocks in any way</p>",
        "id": 210808584,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600727555
    },
    {
        "content": "<p>Yeah I was gonna say, downcast matching would be super nice to make other non-Error-handling dynamic typing cases better as well</p>",
        "id": 210808586,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1600727560
    },
    {
        "content": "<p>getting equivalent syntax would be pretty easy</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">try</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// ...</span>\n<span class=\"p\">}.</span><span class=\"n\">map_err</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">err</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">catch</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ErrorKind</span>:: <span class=\"nc\">NonBlocking</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"p\">})</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 210808667,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600727637
    },
    {
        "content": "<p>Perhaps before we can talk about downcast-based error handling we should get a better sense for downcasting in general (and lang facilities for that), but also gather a list of all the ways people construct errors right now</p>",
        "id": 210808676,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1600727642
    },
    {
        "content": "<p>tho i think the error kind special cased syntax woulud also run into issues because theres no standardized interface to kinds based on the error kind pattern</p>",
        "id": 210808724,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600727659
    },
    {
        "content": "<p>Because off the top of my head it's: boxed dyn errors, enums, one-off structs, structs wrapping enums — but may be missing some</p>",
        "id": 210808769,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1600727703
    },
    {
        "content": "<p>one last strawman syntax</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">try</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// ...</span>\n<span class=\"p\">}.</span><span class=\"n\">map_err</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">err</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">downcast</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">std</span>::<span class=\"n\">io</span>::<span class=\"n\">Error</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">.</span><span class=\"n\">kind</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">NonBlocking</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"c1\">// ... },</span>\n<span class=\"w\">    </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"c1\">// ... },</span>\n<span class=\"p\">})</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 210808822,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600727755
    },
    {
        "content": "<p>there's also error codes</p>",
        "id": 210808873,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600727770
    },
    {
        "content": "<p>/me wants exception terminology to be a thing</p>",
        "id": 210808882,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1600727778
    },
    {
        "content": "<p>templated errors</p>",
        "id": 210808887,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600727781
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211722\">Yoshua Wuyts</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/dyn.20error.20handlnig/near/210808882\">said</a>:</p>\n<blockquote>\n<p>/me wants exception terminology to be a thing</p>\n</blockquote>\n<p>you're in for a rough road on that one I fear <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 210808907,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600727798
    },
    {
        "content": "<p>the community seems pretty biased against exception terminology in my experience</p>",
        "id": 210808928,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600727818
    },
    {
        "content": "<p>Ha; perhaps I should rephrase — we should own up to the fact that were using exception terminology and embrace it in future designs</p>",
        "id": 210808965,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1600727856
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 210808999,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1600727882
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 210809058,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600727905
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/dyn.20error.20handling/near/210807887\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">downcast_match</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">err</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">io</span>::<span class=\"n\">Error</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">.</span><span class=\"n\">kind</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// ...</span>\n<span class=\"w\">    </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">err</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">eprintln</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;Error: {:?}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n</blockquote>\n<p>cc <span class=\"user-mention\" data-user-id=\"252217\">@Khionu Sybiern</span> who I think had an idea like this a while back</p>",
        "id": 210817569,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600735154
    },
    {
        "content": "<p>different syntax though, I forget what it was</p>",
        "id": 210817587,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600735174
    },
    {
        "content": "<p>What is \"exceptions terminology?\" Is that like supporting a keyword called \"catch,\" or something different?</p>",
        "id": 210825558,
        "sender_full_name": "Jason Smith",
        "timestamp": 1600746301
    },
    {
        "content": "<p>\"throw\"<br>\n\"catch\"</p>",
        "id": 210828088,
        "sender_full_name": "Jubilee",
        "timestamp": 1600750384
    },
    {
        "content": "<p>\"try\" being the one we already use</p>",
        "id": 210903368,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1600795340
    },
    {
        "content": "<p>I thought currently Jane is in favor of <code>try</code> personally but thinks it's unlikely<br>\nto gain support generally</p>",
        "id": 210904221,
        "sender_full_name": "oliver",
        "timestamp": 1600795726
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281739\">oliver</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/dyn.20error.20handling/near/210904221\">said</a>:</p>\n<blockquote>\n<p>I thought currently Jane is in favor of <code>try</code> personally but thinks it's unlikely<br>\nto gain support generally</p>\n</blockquote>\n<p>try as in try blocks is almost certainly going to become part of the language, it's already available on nightly and seems to be on the near horizon, I was referring to the change in terminology, which right now is almost always sold as \"not exceptions\"</p>\n<p>for example, here's a snippet from The Rust Programming Language's chapter on error handling</p>\n<blockquote>\n<p>Most languages don’t distinguish between these two kinds of errors and handle both in the same way, using mechanisms such as exceptions. <strong>Rust doesn’t have exceptions.</strong></p>\n</blockquote>\n<p>emphasis mine</p>\n<p>My personal opinion is that I'm very in favor of try blocks and I don't much care about whether or not we call recoverable ____s in rust errors or exceptions, but I feel that the ship has already sailed and that it is too late to embrace the idea that recoverable ___s in rust <em>are</em> exceptions. However, I would not object if the majority of the project group and libs team felt otherwise and decided to embrace exception terminology.</p>",
        "id": 210905309,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600796223
    },
    {
        "content": "<p>That gets into what do people expect from the term \"exception\". Underlying implementation details, keywords like <code>throw</code>, syntax around how it's described, etc.</p>",
        "id": 210906037,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1600796540
    },
    {
        "content": "<p>'exception' to me implies classes and unwinding</p>",
        "id": 210907340,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600797105
    },
    {
        "content": "<p>which is not the case in rust, and I think calling them exceptions would get people confused with panics</p>",
        "id": 210907416,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600797130
    },
    {
        "content": "<p>Alright so the <code>try</code> pattern will become stable eventually what remains to<br>\ndecide is whether or how error handling will be integrated. To what extent are<br>\nwe restricted by this:<br>\n<a href=\"https://github.com/rust-lang/project-error-handling/blob/master/CHARTER.md#non-goals\">https://github.com/rust-lang/project-error-handling/blob/master/CHARTER.md#non-goals</a></p>",
        "id": 210909796,
        "sender_full_name": "oliver",
        "timestamp": 1600798130
    },
    {
        "content": "<blockquote>\n<p>will become stable eventually</p>\n</blockquote>\n<p>There's no guarantee of that, AFAICT. Nothing's stable until it ships.</p>",
        "id": 210910060,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1600798239
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/dyn.20error.20handling/near/210905309\">said</a>:<br>\ntry as in try blocks is almost certainly going to become part of the language</p>\n<div class=\"codehilite\"><pre><span></span><code>\n</code></pre></div>",
        "id": 210910109,
        "sender_full_name": "oliver",
        "timestamp": 1600798275
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281739\">@oliver</span> pretty much completely. <code>try</code> blocks and the try trait are used to model control flow, specifically the propagation of fallibility, and they're a language level feature. We're a libs team group focused primarily on how those errors are represented, rather than how they're propagated.</p>",
        "id": 210910114,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600798279
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281739\">@oliver</span> that was me speculating, what <span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> said is correct, there is no guarantee</p>",
        "id": 210910154,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600798303
    },
    {
        "content": "<p>My feeling is that this group isn't going to make any specific decisions that change the language (esp. w.r.t <code>try</code> blocks). We can provide feedback to the appropriate language team about how well (or not) the current / proposed try blocks work in conjunction with current or recommended error handling patterns.</p>",
        "id": 210910304,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1600798365
    },
    {
        "content": "<p>I see so we should consider the <code>try</code> pattern but not deliberate on exactly how<br>\nit will use error types</p>",
        "id": 210910391,
        "sender_full_name": "oliver",
        "timestamp": 1600798405
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281739\">oliver</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/dyn.20error.20handling/near/210910391\">said</a>:</p>\n<blockquote>\n<p>I see so we should consider the <code>try</code> pattern but not deliberate on exactly how<br>\nit will use error types</p>\n</blockquote>\n<p>I think we should not concern ourselves with <code>try</code> blocks at all</p>",
        "id": 210910506,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600798445
    },
    {
        "content": "<p>As a single data point, I've found that try blocks kind of suck to use (to put a fine point on it <span aria-label=\"innocent\" class=\"emoji emoji-1f607\" role=\"img\" title=\"innocent\">:innocent:</span>).</p>",
        "id": 210910538,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1600798462
    },
    {
        "content": "<p>we should focus on how errors are represented, how those representations are implemented, how they interoperate, how they're reacted to and reported, etc</p>",
        "id": 210910556,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600798472
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/dyn.20error.20handling/near/210910506\">said</a>:</p>\n<blockquote>\n<p>I think we should not concern ourselves with <code>try</code> blocks at all</p>\n</blockquote>\n<p>I'd disagree, mostly because I think that <code>try</code>, as part of the language, should be considered as much as <code>match</code> or <code>if let</code> or <code>?</code> in regards to errors.</p>",
        "id": 210910679,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1600798535
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116155\">Jake Goulding</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/dyn.20error.20handling/near/210910538\">said</a>:</p>\n<blockquote>\n<p>As a single data point, I've found that try blocks kind of suck to use (to put a fine point on it <span aria-label=\"innocent\" class=\"emoji emoji-1f607\" role=\"img\" title=\"innocent\">:innocent:</span>).</p>\n</blockquote>\n<p>Agreed, it's always a pain knowing if one is catching the right thing</p>",
        "id": 210910681,
        "sender_full_name": "oliver",
        "timestamp": 1600798536
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116155\">Jake Goulding</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/dyn.20error.20handling/near/210910538\">said</a>:</p>\n<blockquote>\n<p>As a single data point, I've found that try blocks kind of suck to use (to put a fine point on it <span aria-label=\"innocent\" class=\"emoji emoji-1f607\" role=\"img\" title=\"innocent\">:innocent:</span>).</p>\n</blockquote>\n<p>lets hope the lang team fixes that <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 210910700,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600798544
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116155\">Jake Goulding</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/dyn.20error.20handling/near/210910679\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/dyn.20error.20handling/near/210910506\">said</a>:</p>\n<blockquote>\n<p>I think we should not concern ourselves with <code>try</code> blocks at all</p>\n</blockquote>\n<p>I'd disagree, mostly because I think that <code>try</code>, as part of the language, should be considered as much as <code>match</code> or <code>if let</code> or <code>?</code> in regards to errors.</p>\n</blockquote>\n<p>I feel like <code>try</code> and <code>?</code> are related but neither of those are related to <code>match</code> or <code>if let</code>, which I'd more closely relate to <code>downcast</code> and equality / comparison traits.</p>",
        "id": 210910827,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600798596
    },
    {
        "content": "<p>but since it's (a) unstable and (b) the lang team's area, _this_ team is at best a slightly-more-knowledgable participant to those discussions.</p>",
        "id": 210910921,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1600798648
    },
    {
        "content": "<p>yea, I encourage participants in this project group to also participate in lang team discussions about try blocks and such, just know that we won't focus on that in <em>our</em> meetings or issues</p>",
        "id": 210911046,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600798699
    },
    {
        "content": "<p>Not to be overly pedantic but <code>not be involved in managing design discussions</code><br>\ncould be revised to read <code>not be involved in discussions</code></p>",
        "id": 210911911,
        "sender_full_name": "oliver",
        "timestamp": 1600799143
    },
    {
        "content": "<p>i think I'd prefer to leave the wording as is, \"not involved in managing design discussions\" as in not tracking work with issues in our repo, not having zulip threads focused on it, and not having it on the agenda, but separately members can and are encouraged to be involved in those discussions under the management of the lang team.</p>",
        "id": 210913912,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600800119
    }
]