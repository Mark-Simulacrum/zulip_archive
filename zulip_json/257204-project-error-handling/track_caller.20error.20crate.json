[
    {
        "content": "<p>In response to <a href=\"https://github.com/rust-lang/rust/issues/87401\">https://github.com/rust-lang/rust/issues/87401</a>, I'd like to start a conversation on error tracing.</p>\n<h1>Motivation</h1>\n<p>Libraries like <code>anyhow</code> provide easy access to backtraces when producing error values. However, there are a few major problems with using runtime backtrace collection:</p>\n<ol>\n<li>A backtrace only provides call stack information for the current thread. At my work, errors often pass from one thread to another on their way up to their final consumer.</li>\n<li>Runtime backtrace collection can be complicated and expensive. At my work, errors are common, so this performance overhead is meaningful.</li>\n</ol>\n<h1>Propagation Tracking</h1>\n<p>The solution is something I'm calling <strong>error propagation tracking</strong>, which differs from error backtracing. Rather than taking a point-in-time snapshot from the top of some thread's stack, it assembles a backtrace incrementally as the actual error object propagates through different parts of the code.</p>\n<p>At my work, we do this in our C code by wrapping all return values in a special <code>forward_error</code> macro that appends the current <code>__func__</code>, <code>__file__</code>, and <code>__line__</code> to a running stack of code locations. </p>\n<p>I have experimented with implementing propagation tracking in Rust by writing a wrapper around <code>std::result::Result</code>, adding <code>#[track_caller]</code> to <code>from_residual</code>, and pushing a <code>panic::Location</code> onto a running stack each time an error value is propagated via <code>?</code>.</p>\n<h1>Discussion</h1>\n<p>Here's what I want to do here:</p>\n<ul>\n<li>Solicit opinions from other people who have similar desires or use cases for error propagation tracking.</li>\n<li>Discuss how I may aid the development of a public crate for this use case.</li>\n</ul>\n<p>I could start by cleaning up the experiment I wrote at work and putting that up on GitHub for folks to see how I approached it. Sound good?</p>\n<p>See also <a href=\"#narrow/stream/131828-t-compiler/topic/function.20names.20in.20.60.23.5Btrack_caller.5D.60\">this topic</a> I started in <a class=\"stream\" data-stream-id=\"131828\" href=\"/#narrow/stream/131828-t-compiler\">#t-compiler</a> regarding getting function names from <code>panic::Location</code>.</p>",
        "id": 251622547,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1630527425
    },
    {
        "content": "<blockquote>\n<p>Sound good?</p>\n</blockquote>\n<p>Sounds like a perfect first step</p>",
        "id": 251636496,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630533754
    },
    {
        "content": "<p><a href=\"https://github.com/BGR360/propagate\">https://github.com/BGR360/propagate</a></p>",
        "id": 251777281,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1630612817
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"435059\">Ben Reeves</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/track_caller.20error.20crate/near/251777281\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/BGR360/propagate\">https://github.com/BGR360/propagate</a></p>\n</blockquote>\n<p>sorry I didn't have chance to review this yesterday, taking a look at it now</p>",
        "id": 251922993,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630693455
    },
    {
        "content": "<p>first thing that sticks out to me is the <code>new_err</code> method</p>",
        "id": 251923010,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630693466
    },
    {
        "content": "<p>I really want to find ways to structure the usage so that this is never necessary</p>",
        "id": 251923050,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630693486
    },
    {
        "content": "<p>my instinct is that we should try relying heavily on <code>try { }</code> blocks</p>",
        "id": 251923073,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630693500
    },
    {
        "content": "<p>and then have the <code>from_residual</code> impl handle constructing the error stack</p>",
        "id": 251923254,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630693571
    },
    {
        "content": "<p>and rely on people to just use <code>Err(error)?</code> when they need to return a new error rather than using <code>Resuilt::new_err(error)</code></p>",
        "id": 251923308,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630693602
    },
    {
        "content": "<p>Also I expect it will be better received if the recommended workflow isn't to import and override the <code>std::result::Result</code> type</p>",
        "id": 251923371,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630693637
    },
    {
        "content": "<p>We've talked about this in libs API discussions before and our general recommendation is to not introduce new identifiers that overlap with identifiers in the std and core preludes</p>",
        "id": 251923414,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630693675
    },
    {
        "content": "<p>because these can cause significant confusion when new devs encounter the source code and can be ambiguous in certain debugging situations</p>",
        "id": 251923484,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630693696
    },
    {
        "content": "<p>having a prelude for the crate is fine, but it shouldn't bring in things as <code>Result</code>, probably better to stick to something like <code>TrackedResult</code> or <code>TracedResult</code></p>",
        "id": 251923519,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630693727
    },
    {
        "content": "<p>ill try using this in one of my personal projects and see how I feel about the rest of the API and play with it a bit</p>",
        "id": 251923621,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630693798
    },
    {
        "content": "<p>also it looks like a lot of the doc tests are broken</p>",
        "id": 251941409,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630702861
    },
    {
        "content": "<p>curious why you set <code>doctest = false</code></p>",
        "id": 251941600,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630702974
    },
    {
        "content": "<p>actually, after playing with this a bunch this might be a good candidate for another module in <code>trial-and-error</code></p>",
        "id": 251951318,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630709063
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/track_caller.20error.20crate/near/251941600\">said</a>:</p>\n<blockquote>\n<p>curious why you set <code>doctest = false</code></p>\n</blockquote>\n<p>was too lazy to make the doctests compile</p>",
        "id": 251957136,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1630713935
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/track_caller.20error.20crate/near/251923073\">said</a>:</p>\n<blockquote>\n<p>my instinct is that we should try relying heavily on <code>try { }</code> blocks</p>\n</blockquote>\n<p>this is something I'll need to read up on, have never touched <code>try</code></p>",
        "id": 251957203,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1630713981
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"435059\">Ben Reeves</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/track_caller.20error.20crate/near/251957136\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/track_caller.20error.20crate/near/251941600\">said</a>:</p>\n<blockquote>\n<p>curious why you set <code>doctest = false</code></p>\n</blockquote>\n<p>was too lazy to make the doctests compile</p>\n</blockquote>\n<p>hehe, fair</p>",
        "id": 251957241,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630714026
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/track_caller.20error.20crate/near/251923371\">said</a>:</p>\n<blockquote>\n<p>Also I expect it will be better received if the recommended workflow isn't to import and override the <code>std::result::Result</code> type</p>\n</blockquote>\n<p>Good point. I brought in bias from my use case, which has no real need to ever touch <code>std::result::Result</code> again given the replacement exists. But setting that up would trivial for a user of the propagate crate; they just make their own prelude for their own code</p>",
        "id": 251957334,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1630714093
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/track_caller.20error.20crate/near/251951318\">said</a>:</p>\n<blockquote>\n<p>actually, after playing with this a bunch this might be a good candidate for another module in <code>trial-and-error</code></p>\n</blockquote>\n<p>What is that?</p>",
        "id": 251957376,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1630714140
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/track_caller.20error.20crate/near/251923073\">said</a>:</p>\n<blockquote>\n<p>my instinct is that we should try relying heavily on <code>try { }</code> blocks</p>\n</blockquote>\n<p>Okay those are less involved than I thought. Can you paint for me a clearer picture of what you're thinking it would look like if we made use of <code>try</code>?</p>",
        "id": 251957795,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1630714499
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"435059\">Ben Reeves</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/track_caller.20error.20crate/near/251957376\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/track_caller.20error.20crate/near/251951318\">said</a>:</p>\n<blockquote>\n<p>actually, after playing with this a bunch this might be a good candidate for another module in <code>trial-and-error</code></p>\n</blockquote>\n<p>What is that?</p>\n</blockquote>\n<p>It's a crate we're currently working on for experiments</p>",
        "id": 251957843,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630714552
    },
    {
        "content": "<p>right now it has a <code>boxerrror_replacement</code> module and <code>error_reporter</code> module</p>",
        "id": 251957888,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630714567
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"435059\">Ben Reeves</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/track_caller.20error.20crate/near/251957795\">said</a>:</p>\n<blockquote>\n<p>Can you paint for me a clearer picture of what you're thinking it would look like if we made use of <code>try</code>?</p>\n</blockquote>\n<p>Nevermind, I didn't read close enough. Your idea is to require <code>Err(error)?</code> and then let <code>from_residual</code> convert it to the wrapped type. Would that not work without a <code>try</code> block?</p>",
        "id": 251958314,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1630714994
    },
    {
        "content": "<p>The error conversion works either way with try blocks but you always have to use question mark inside of it and you never do ok wrapping</p>",
        "id": 251958556,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630715266
    },
    {
        "content": "<p>Which solves the forwarding concern that you have in the docs since with try blocks you have no choice but to forward correctly by using the question mark operator</p>",
        "id": 251958620,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630715300
    },
    {
        "content": "<p>noiiiice. you do have to rely on users actually using try blocks though, yes?</p>",
        "id": 251958643,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1630715326
    },
    {
        "content": "<p>And it also makes it so you don't have to worry about shadowing Ok</p>",
        "id": 251958647,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630715334
    },
    {
        "content": "<p>Yeah it's up to users to use it but I don't think it will take much encouragement if they already have to enable other nightly features just to use the crate</p>",
        "id": 251958675,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630715363
    },
    {
        "content": "<p>And if all the examples use it and the APIs are much nicer to use with try blocks then I think people will just use try blocks</p>",
        "id": 251958697,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630715391
    },
    {
        "content": "<p>Also getting more people testing try blocks and the new trait would be really good so we can iron those out and get stabilized faster</p>",
        "id": 251958754,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630715408
    },
    {
        "content": "<p>Another thing to consider is the burden of duplicating all of the <code>std::result::Result</code> functionality. In theory, I think one could achieve the same behavior using <code>std::result::Result</code> if it had <code>#[track_caller]</code> on its <code>from_residual</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(trait_specialization)]</span><span class=\"w\"></span>\n\n<span class=\"sd\">/// Specializes the blanket `From&lt;T&gt; for T` implementation so we can capture all invocations of</span>\n<span class=\"sd\">/// `From::from` that `from_residual` makes.</span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">E</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">F</span>: <span class=\"nb\">From</span><span class=\"o\">&lt;</span><span class=\"n\">E</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"nb\">From</span><span class=\"o\">&lt;</span><span class=\"n\">ErrorStack</span><span class=\"o\">&lt;</span><span class=\"n\">E</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">ErrorStack</span><span class=\"o\">&lt;</span><span class=\"n\">F</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[track_caller]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">from</span><span class=\"p\">(</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">e</span>: <span class=\"nc\">ErrorStack</span><span class=\"o\">&lt;</span><span class=\"n\">E</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">e</span><span class=\"p\">.</span><span class=\"n\">stack</span><span class=\"p\">.</span><span class=\"n\">push_caller</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nb\">From</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">.</span><span class=\"n\">error</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">stack</span>: <span class=\"nc\">e</span><span class=\"p\">.</span><span class=\"n\">stack</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 251958808,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1630715476
    },
    {
        "content": "<p>Yeah but we talked in the original issue about this and how that would cause some pretty serious perf issues across the ecosystem</p>",
        "id": 251958834,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630715505
    },
    {
        "content": "<p>Oh wait you mean with specialization</p>",
        "id": 251958903,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630715532
    },
    {
        "content": "<p>That might be a valid specialization but There's a decent chance it's not</p>",
        "id": 251958952,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630715598
    },
    {
        "content": "<p>I don't know all the cases of when it's okay to specialize versus when it's not but I know usually when you specialize a generic impl with another generic impl it starts running into soundness issues</p>",
        "id": 251958968,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630715621
    },
    {
        "content": "<p>Because lifetime dependencies can start sneaking in</p>",
        "id": 251958975,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630715635
    },
    {
        "content": "<p>This is blocking a lot of other changes I want to make involving error handling</p>",
        "id": 251959021,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630715650
    },
    {
        "content": "<p>Yes, specialization <strong>and</strong> <code>#[track_caller]</code> on <code>from_residual</code>.</p>\n<p>I can understand how adding <code>#[track_caller]</code> to <code>from_residual</code> would cause code bloat, but I failed to understand where the perf hit would come from when it was brought up on GH.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/track_caller.20error.20crate/near/251958968\">said</a>:</p>\n<blockquote>\n<p>I don't know all the cases of when it's okay to specialize versus when it's not but I know usually when you specialize a generic impl with another generic impl it starts running into soundness issues</p>\n</blockquote>\n<p>To my naive mind, this use does seem to fall under \"more specific\" <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> . But yeah I believe you when you say it probably gets hairy.</p>",
        "id": 251959062,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1630715707
    },
    {
        "content": "<blockquote>\n<p>To my naive mind, this use does seem to fall under \"more specific\"</p>\n</blockquote>\n<p>yea, the issue in particular pops up when you try to specialize <code>std::fmt::Debug</code> with <code>std::fmt::Error</code>, where error is clearly more specific than <code>Debug</code> but because the impls can depend on lifetimes the impls may not always apply</p>",
        "id": 251959199,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630715846
    },
    {
        "content": "<p><a href=\"https://smallcultfollowing.com/babysteps/blog/2018/02/09/maximally-minimal-specialization-always-applicable-impls/#the-soundness-problem\">https://smallcultfollowing.com/babysteps/blog/2018/02/09/maximally-minimal-specialization-always-applicable-impls/#the-soundness-problem</a></p>",
        "id": 251959203,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630715855
    },
    {
        "content": "<blockquote>\n<p>but I failed to understand where the perf hit would come from when it was brought up on GH.</p>\n</blockquote>\n<p>was the suggestion in the github issue something other than adding #[track_caller] to from_residual?</p>",
        "id": 251959257,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630715884
    },
    {
        "content": "<p>I may have misunderstood if that's the case</p>",
        "id": 251959263,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630715889
    },
    {
        "content": "<blockquote>\n<p>was the suggestion in the github issue something other than adding #[track_caller] to from_residual?</p>\n</blockquote>\n<p>nope, you got it. I'm probably missing something obvious, but I don't know why <code>#[track_caller]</code> adds a perf hit</p>",
        "id": 251959332,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1630715988
    },
    {
        "content": "<p>is it a compiler perf hit? or a runtime perf hit?</p>",
        "id": 251959409,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1630716040
    },
    {
        "content": "<p>runtime perf</p>",
        "id": 251959411,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630716044
    },
    {
        "content": "<p>I'm not sure exactly how it ends up causing the perf hit, I would expect a lot of the location data to optimize away, but @dtolnay indicated he thought it highly likely there would be a noticeable perf hit in our libs-api team meeting</p>",
        "id": 251959497,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630716128
    },
    {
        "content": "<p>iirc track caller works by transparently adding an extra argument to the function before lowering it to llvm ir</p>",
        "id": 251959537,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630716188
    },
    {
        "content": "<p>so I'm assuming it increases stack frame sizes</p>",
        "id": 251959558,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630716221
    },
    {
        "content": "<p>also it adds a lot more static locations to the final binary, increasing the binary size</p>",
        "id": 251959573,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630716241
    },
    {
        "content": "<p>and i would expect most of what goes unused to get optimized away but I'm guessing that doesn't happen always</p>",
        "id": 251959623,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630716262
    },
    {
        "content": "<blockquote>\n<p>so I'm assuming it increases stack frame sizes</p>\n</blockquote>\n<p>By no more than 8 bytes per frame I would think. The <code>panic::Location</code>s are statically allocated and <code>Location::caller()</code> gives a reference to one.</p>\n<p>Anyway, sounds like it's at least worth getting clarity on and not totally ruling it out until we do.</p>",
        "id": 251959675,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1630716331
    },
    {
        "content": "<p>yea</p>",
        "id": 251959688,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630716361
    },
    {
        "content": "<p>we're not certain it will cause perf problems so it's almost certainly worth testing</p>",
        "id": 251959736,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630716381
    },
    {
        "content": "<p>I'm off work all next week so I'll have time to play around with this more. I will try switching over to using <code>try</code> blocks and see how that goes.</p>\n<p>I also plan to generalize the <code>ErrorStack</code> so users can customize how they store their stack of locations. Roughly:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Stack</span>: <span class=\"nb\">Default</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">type</span> <span class=\"nc\">Item</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">type</span> <span class=\"nc\">Iter</span>: <span class=\"nb\">IntoIterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">Self</span>::<span class=\"n\">Item</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">fn</span> <span class=\"nf\">push_location</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">loc</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">panic</span>::<span class=\"n\">Location</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">fn</span> <span class=\"nf\">iter</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"n\">Iter</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">ErrorStack</span><span class=\"o\">&lt;</span><span class=\"n\">E</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">S</span>: <span class=\"nc\">Stack</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">error</span>: <span class=\"nc\">E</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">stack</span>: <span class=\"nc\">S</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">enum</span> <span class=\"nc\">TracedResult</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">E</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">S</span>: <span class=\"nc\">Stack</span><span class=\"w\">  </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">DefaultStack</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">ErrorStack</span><span class=\"o\">&lt;</span><span class=\"n\">E</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"o\">&gt;</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>This will be necessary for my use case at work to help us convert traces between Rust and C code.</p>",
        "id": 251960110,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1630716752
    },
    {
        "content": "<p>Oh cool</p>",
        "id": 251960294,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630716912
    },
    {
        "content": "<p>and of course all names are stored in the bike shed <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 251960325,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1630716951
    },
    {
        "content": "<p>So this is becoming more similar to the air return trace proposal I've written in the past</p>",
        "id": 251960375,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630716971
    },
    {
        "content": "<p>Error*</p>",
        "id": 251960380,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630716978
    },
    {
        "content": "<p>link? haven't come across that yet</p>",
        "id": 251960400,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1630716999
    },
    {
        "content": "<p>And I'm wondering if instead ErrorStack should be the thing that gets swapped out and implements the trait</p>",
        "id": 251960406,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630717005
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/track_caller.20error.20crate/near/251960406\">said</a>:</p>\n<blockquote>\n<p>And I'm wondering if instead ErrorStack should be the thing that gets swapped out and implements the trait</p>\n</blockquote>\n<p>hm, probably</p>",
        "id": 251960427,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1630717028
    },
    {
        "content": "<p><a href=\"https://mobile.twitter.com/yaahc_/status/1253771822920634369?s=19\">https://mobile.twitter.com/yaahc_/status/1253771822920634369?s=19</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://mobile.twitter.com/yaahc_/status/1253771822920634369?s=19\"><img class=\"twitter-avatar\" src=\"https://uploads.zulipusercontent.net/eeaff3a60f7422ff43d15ea1fba5c17154dd4cc3/68747470733a2f2f7062732e7477696d672e636f6d2f70726f66696c655f696d616765732f313236303734363233383532373332343136322f6f4d4a48724846435f6e6f726d616c2e6a7067\"></a><p>Proof Of Concept: Error Return Traces in rust\n\naka lightweight backtraces <a href=\"https://t.co/5u4mBYRjQp\">https://twitter.com/yaahc_/status/1253771822920634369/photo/1</a></p><span>- Yaah (@yaahc_)</span><div class=\"twitter-image\"><a href=\"https://t.co/5u4mBYRjQp\"><img src=\"https://uploads.zulipusercontent.net/a4078737b4d3366f66dcf9c9e3f7dc57c3b249f7/68747470733a2f2f7062732e7477696d672e636f6d2f6d656469612f45575a4b7a426756634141663177752e6a70673a7468756d62\"></a></div><div class=\"twitter-image\"><a href=\"https://t.co/5u4mBYRjQp\"><img src=\"https://uploads.zulipusercontent.net/7d18ee4d2b4d9d5aa34505d432c991a492dcbd6e/68747470733a2f2f7062732e7477696d672e636f6d2f6d656469612f45575a4b7a2d4255774141484149522e6a70673a7468756d62\"></a></div><div class=\"twitter-image\"><a href=\"https://t.co/5u4mBYRjQp\"><img src=\"https://uploads.zulipusercontent.net/ff5fd3e919ab98789660a8971c9dc4aaffb41794/68747470733a2f2f7062732e7477696d672e636f6d2f6d656469612f45575a4b306d37566341416a724f712e6a70673a6c61726765\"></a></div></div></div>",
        "id": 251960453,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630717064
    },
    {
        "content": "<p>The trait is like a subset of yours, where it only has the push_location method</p>",
        "id": 251960558,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630717175
    },
    {
        "content": "<p>And it goes on the error type itself</p>",
        "id": 251960566,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630717189
    },
    {
        "content": "<p>And that error type could be a wrapper like ErrorStack that handles the storage for inner error types or some c ffi friendly equivalent or even stored directly in a vec within your error type</p>",
        "id": 251960678,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630717236
    },
    {
        "content": "<p>The solution I've always imagined for this is a combination between this track trait and generic member access in order to get the locations back out of errors in the chain</p>",
        "id": 251960717,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630717288
    },
    {
        "content": "<p>But I've never really liked the solution because I've always implicitly assumed that you would be duplicating vecs on multiple errors in a chain of sources and it would just be really inefficient to spread the storage across all the errors</p>",
        "id": 251960797,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630717372
    },
    {
        "content": "<p>Tho it has the really cool property of letting you associate each return with the source in the chain that actually captured it</p>",
        "id": 251960858,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630717443
    },
    {
        "content": "<p>Perhaps:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">TracedError</span><span class=\"o\">&lt;</span><span class=\"n\">E</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">type</span> <span class=\"nc\">StackEntry</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">fn</span> <span class=\"nf\">wrap</span><span class=\"p\">(</span><span class=\"n\">error</span>: <span class=\"nc\">E</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">fn</span> <span class=\"nf\">push_location</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">loc</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Location</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">fn</span> <span class=\"nf\">err</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">E</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">fn</span> <span class=\"nf\">convert_err</span><span class=\"o\">&lt;</span><span class=\"n\">F</span>: <span class=\"nb\">From</span><span class=\"o\">&lt;</span><span class=\"n\">E</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">TracedError</span><span class=\"o\">&lt;</span><span class=\"n\">F</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"cm\">/* some trait method(s) to access StackEntry's */</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">enum</span> <span class=\"nc\">TracedResult</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">E</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">S</span>: <span class=\"nc\">TracedError</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">SomeDefaultImpl</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"o\">&lt;</span><span class=\"n\">E</span><span class=\"o\">&gt;</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 251961273,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1630717897
    },
    {
        "content": "<p>I think most of these methods could be bounds on other traits where they're needed</p>",
        "id": 251961342,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630717954
    },
    {
        "content": "<p>I'm definitely n00b at making good interfaces, please massage it to your will.</p>",
        "id": 251961361,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1630717986
    },
    {
        "content": "<p>So instead of convert error you have the from residual impl require E: Into&lt;F&gt; + TracedError</p>",
        "id": 251961392,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630718033
    },
    {
        "content": "<p>edit: actually I don't think I can explain this without just ending up rewriting the error return trace stuff I'd written before</p>",
        "id": 251961685,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630718343
    },
    {
        "content": "<p>let me see if I can dig up a copy of that</p>",
        "id": 251961923,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630718601
    },
    {
        "content": "<p>yea i think that might be lost to an old PC</p>",
        "id": 251961981,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630718643
    },
    {
        "content": "<p>dangit</p>",
        "id": 251961986,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630718646
    },
    {
        "content": "<p>I think my plan ends up breaking when you try to write <code>impl&lt;E, F&gt; From&lt;E&gt; for ErrorStack&lt;F&gt; where F: From&lt;E&gt;</code></p>",
        "id": 251962235,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630718950
    },
    {
        "content": "<p>lets see if that's an illegal from impl</p>",
        "id": 251962237,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630718955
    },
    {
        "content": "<p>yup</p>",
        "id": 251962318,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630719020
    },
    {
        "content": "<p>error[E0119]: conflicting implementations of trait <code>std::convert::From&lt;ErrorStack&lt;_&gt;&gt;</code> for type <code>ErrorStack&lt;_&gt;</code><br>\n --&gt; src/main.rs:3:1<br>\n  |<br>\n3 | impl&lt;E, F&gt; From&lt;E&gt; for ErrorStack&lt;F&gt; where F: From&lt;E&gt; {<br>\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<br>\n  |<br>\n  = note: conflicting implementation in crate <code>core</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>      - impl&lt;T&gt; From&lt;T&gt; for T;\n</code></pre></div>",
        "id": 251962319,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630719021
    },
    {
        "content": "<p>would that be any different with <code>#[trait_specialization]</code>?</p>",
        "id": 251962336,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1630719053
    },
    {
        "content": "<p>i think in theory but it requires lattice specialization</p>",
        "id": 251962363,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630719090
    },
    {
        "content": "<p>and that isn't something on the near horizon</p>",
        "id": 251962369,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630719097
    },
    {
        "content": "<p>I think this can work</p>",
        "id": 251962435,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630719146
    },
    {
        "content": "<p>My experience wrestling with conflicting impls when making the prototype led me to a point where the only bounds I included were bounds for the inner error types. I think that's what caused the <code>convert_inner</code> function to be born.</p>",
        "id": 251962658,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1630719395
    },
    {
        "content": "<p>yea</p>",
        "id": 251962676,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630719436
    },
    {
        "content": "<p>But you may very well come up with something better that works, cuz my type-fu is still beginner</p>",
        "id": 251962688,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1630719458
    },
    {
        "content": "<p>yea I'm not sure I can, I'll keep thinking about it but so far I don't see a way</p>",
        "id": 251962755,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630719517
    },
    {
        "content": "<p>hmmm</p>",
        "id": 251962772,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630719553
    },
    {
        "content": "<p>maybe you can leave the From impls to the types being wrapped by <code>ErrorStack</code></p>",
        "id": 251962784,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630719569
    },
    {
        "content": "<p>and not try having a single generic impl to rule them all</p>",
        "id": 251962789,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630719581
    },
    {
        "content": "<p>I think that might make it work</p>",
        "id": 251962795,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630719597
    },
    {
        "content": "<p>where you have a <code>Result&lt;T, E&gt; { Ok(T), Err(E) }</code> and a <code>type TracedResult&lt;T, E&gt; = Result&lt;T, ErrorStack&lt;E&gt;&gt;;</code></p>",
        "id": 251962877,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630719650
    },
    {
        "content": "<p>where the type alias is something you'd provide for convenience or a pattern which you could copy to introduce alternative wrapper types</p>",
        "id": 251962896,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630719685
    },
    {
        "content": "<p>Then the FromResidual impl on <code>Result</code> just requires <code>F: From&lt;E&gt; + Traced</code> and <code>Traced</code> just does <code>push_location</code></p>",
        "id": 251962954,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630719740
    },
    {
        "content": "<p>ooh</p>",
        "id": 251962971,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1630719773
    },
    {
        "content": "<p>wait fk no I think that ends up still not working</p>",
        "id": 251962975,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630719781
    },
    {
        "content": "<p>you need to write <code>impl&lt;E&gt; From&lt;E&gt; for ErrorStack&lt;MyError&gt;</code></p>",
        "id": 251962995,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630719817
    },
    {
        "content": "<p>which is illegal I think</p>",
        "id": 251963002,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630719825
    },
    {
        "content": "<p>not positive tho</p>",
        "id": 251963055,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630719852
    },
    {
        "content": "<p>time to test</p>",
        "id": 251963059,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630719857
    },
    {
        "content": "<p>oh yes I'm remembering now that this was a huge pain in my ass.</p>",
        "id": 251963062,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1630719864
    },
    {
        "content": "<p>I did initially want to use <code>from_residual</code> to both go from <code>E</code> to <code>ErrorStack&lt;E&gt;</code> and from <code>ErrorStack&lt;E&gt;</code> to <code>ErrorStack&lt;F&gt;</code>, but couldn't find a way to avoid conflicting impls</p>",
        "id": 251963086,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1630719906
    },
    {
        "content": "<p>it works so long as <code>ErrorStack</code> is hardcoded into the <code>Result</code> I think</p>",
        "id": 251963164,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630719972
    },
    {
        "content": "<p>I tried some heinous things like defining an <code>auto trait NotStackError</code> that I put all over the place in trait bounds.</p>",
        "id": 251963181,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1630720006
    },
    {
        "content": "<p>lol</p>",
        "id": 251963188,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630720016
    },
    {
        "content": "<p>but yea</p>",
        "id": 251963200,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630720036
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"sd\">/// Starts a new stack when a [`std::result::Result`] is coerced to a [`Result`] using `?`.</span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">E</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">F</span>: <span class=\"nb\">From</span><span class=\"o\">&lt;</span><span class=\"n\">E</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">FromResidual</span><span class=\"o\">&lt;</span><span class=\"n\">std</span>::<span class=\"n\">result</span>::<span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">Infallible</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">E</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[inline]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[track_caller]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">from_residual</span><span class=\"p\">(</span><span class=\"n\">residual</span>: <span class=\"nc\">std</span>::<span class=\"n\">result</span>::<span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">Infallible</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">E</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">residual</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">std</span>::<span class=\"n\">result</span>::<span class=\"nb\">Result</span>::<span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"fm\">unreachable!</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">std</span>::<span class=\"n\">result</span>::<span class=\"nb\">Result</span>::<span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">ErrorStack</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"nb\">From</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">))),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 251963205,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630720043
    },
    {
        "content": "<p>this compiles just fine</p>",
        "id": 251963208,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630720045
    },
    {
        "content": "<p>oh but that's not what you meant</p>",
        "id": 251963490,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630720397
    },
    {
        "content": "<p>you mean when you tried taking ErrorStack out of Result and into the <code>FromResidual</code> impl</p>",
        "id": 251963497,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630720410
    },
    {
        "content": "<p>and yea that wouldn't work</p>",
        "id": 251963499,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630720416
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"435059\">Ben Reeves</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/track_caller.20error.20crate/near/251961273\">said</a>:</p>\n<blockquote>\n<p>Perhaps:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">TracedError</span><span class=\"o\">&lt;</span><span class=\"n\">E</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">type</span> <span class=\"nc\">StackEntry</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">fn</span> <span class=\"nf\">wrap</span><span class=\"p\">(</span><span class=\"n\">error</span>: <span class=\"nc\">E</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">fn</span> <span class=\"nf\">push_location</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">loc</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Location</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">fn</span> <span class=\"nf\">err</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">E</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">fn</span> <span class=\"nf\">convert_err</span><span class=\"o\">&lt;</span><span class=\"n\">F</span>: <span class=\"nb\">From</span><span class=\"o\">&lt;</span><span class=\"n\">E</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">TracedError</span><span class=\"o\">&lt;</span><span class=\"n\">F</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"cm\">/* some trait method(s) to access StackEntry's */</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">enum</span> <span class=\"nc\">TracedResult</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">E</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">S</span>: <span class=\"nc\">TracedError</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">SomeDefaultImpl</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"o\">&lt;</span><span class=\"n\">E</span><span class=\"o\">&gt;</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>does this compile?</p>",
        "id": 251963582,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630720509
    },
    {
        "content": "<p>I feel like it shouldn't because it looks like <code>S&lt;E&gt;</code> is a bare trait object</p>",
        "id": 251963603,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630720550
    },
    {
        "content": "<p>basically a HKT</p>",
        "id": 251963646,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630720569
    },
    {
        "content": "<p>i thiink</p>",
        "id": 251963648,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630720572
    },
    {
        "content": "<p>where you're trying to use the trait as a type constructor</p>",
        "id": 251963655,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630720585
    },
    {
        "content": "<p>Would this work?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">enum</span> <span class=\"nc\">TracedResult</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">E</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">S</span>: <span class=\"nc\">TracedError</span><span class=\"o\">&lt;</span><span class=\"n\">E</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">SomeDefaultImpl</span><span class=\"o\">&lt;</span><span class=\"n\">E</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 251963683,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1630720626
    },
    {
        "content": "<p>not sure</p>",
        "id": 251963712,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630720672
    },
    {
        "content": "<p>dubious</p>",
        "id": 251963714,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630720673
    },
    {
        "content": "<p>Going back a bit, did you arrive at thinking we can't get this to work?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">enum</span> <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">E</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">E</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">type</span> <span class=\"nc\">TracedResult</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">E</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ErrorStack</span><span class=\"o\">&lt;</span><span class=\"n\">E</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>If that's the case, then idk how we'd get <code>Err(error)?</code> to work for wrapping.</p>",
        "id": 251963798,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1630720785
    },
    {
        "content": "<p>yea I don't see how we can make that work but I'm not sure</p>",
        "id": 251963910,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630720844
    },
    {
        "content": "<p>in general im not sure how to make the <code>ErrorStack</code> type generic and get that same convenience as the current API that hard codes the ErrorStack type</p>",
        "id": 251963994,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630720923
    },
    {
        "content": "<p>but i suspect there might be a clever way</p>",
        "id": 251964013,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630720953
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"435059\">Ben Reeves</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/track_caller.20error.20crate/near/251960110\">said</a>:</p>\n<blockquote>\n<p>I'm off work all next week so I'll have time to play around with this more. I will try switching over to using <code>try</code> blocks and see how that goes.</p>\n<p>I also plan to generalize the <code>ErrorStack</code> so users can customize how they store their stack of locations. Roughly:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Stack</span>: <span class=\"nb\">Default</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">type</span> <span class=\"nc\">Item</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">type</span> <span class=\"nc\">Iter</span>: <span class=\"nb\">IntoIterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">Self</span>::<span class=\"n\">Item</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">fn</span> <span class=\"nf\">push_location</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">loc</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">panic</span>::<span class=\"n\">Location</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">fn</span> <span class=\"nf\">iter</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"n\">Iter</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">ErrorStack</span><span class=\"o\">&lt;</span><span class=\"n\">E</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">S</span>: <span class=\"nc\">Stack</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">error</span>: <span class=\"nc\">E</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">stack</span>: <span class=\"nc\">S</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">enum</span> <span class=\"nc\">TracedResult</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">E</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">S</span>: <span class=\"nc\">Stack</span><span class=\"w\">  </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">DefaultStack</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">ErrorStack</span><span class=\"o\">&lt;</span><span class=\"n\">E</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"o\">&gt;</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>This will be necessary for my use case at work to help us convert traces between Rust and C code.</p>\n</blockquote>\n<p>this may be the right path</p>",
        "id": 251964023,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630720977
    },
    {
        "content": "<p>I'm not sure how that approach makes the inherent challenge any easier. The inherent challenge being we need two from_residuals that probably conflict:</p>\n<ul>\n<li><code>Result&lt;_, wrapped&gt; -&gt; Result&lt;_, wrapped&gt;</code></li>\n<li><code>Result&lt;_, not_wrapped&gt; -&gt; Result&lt;_, wrapped&gt;</code></li>\n</ul>\n<p>But I think we can solve that by introducing a new trait to serve the role of <code>From</code> for converting unwrapped to wrapped.</p>",
        "id": 251964202,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1630721171
    },
    {
        "content": "<p>I think those get disambiguated by one being <code>FromResidual&lt;propagate::Result&gt;</code> and the other being <code>FromResidual&lt;std::Result&gt;</code></p>",
        "id": 251964238,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630721233
    },
    {
        "content": "<p>and then we don't rely on <code>ErrorStack::from</code></p>",
        "id": 251964325,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630721326
    },
    {
        "content": "<p>we use <code>ErrorStack::new</code></p>",
        "id": 251964330,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630721331
    },
    {
        "content": "<p>then we don't have conflicting From impls</p>",
        "id": 251964333,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630721336
    },
    {
        "content": "<p>this is the same approach used in <code>trial-and-error</code></p>",
        "id": 251964341,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630721347
    },
    {
        "content": "<p><a href=\"https://github.com/yaahc/trial-and-error/blob/main/src/boxerror_replacement.rs\">https://github.com/yaahc/trial-and-error/blob/main/src/boxerror_replacement.rs</a></p>",
        "id": 251964362,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630721389
    },
    {
        "content": "<p><a href=\"https://github.com/yaahc/trial-and-error/blob/main/src/boxerror_replacement.rs#L121\">https://github.com/yaahc/trial-and-error/blob/main/src/boxerror_replacement.rs#L121</a> this does the wrapping</p>",
        "id": 251964419,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630721426
    },
    {
        "content": "<p>this one handles one that's already been wrapped</p>",
        "id": 251964429,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630721445
    },
    {
        "content": "<p><a href=\"https://github.com/yaahc/trial-and-error/blob/main/src/boxerror_replacement.rs#L133\">https://github.com/yaahc/trial-and-error/blob/main/src/boxerror_replacement.rs#L133</a></p>",
        "id": 251964430,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630721446
    },
    {
        "content": "<p>tho this doesn't need to keep doing From</p>",
        "id": 251964444,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630721470
    },
    {
        "content": "<p>so it may actually not apply</p>",
        "id": 251964447,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630721473
    },
    {
        "content": "<p><span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 251964449,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630721474
    },
    {
        "content": "<p>worth trying and seeing what the compiler says imo</p>",
        "id": 251964459,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630721496
    },
    {
        "content": "<p>What about this. The key here is not using <code>From</code> as a bound for any of the <code>FromResidual</code> impls.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">WrapError</span><span class=\"o\">&lt;</span><span class=\"n\">E</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">fn</span> <span class=\"nf\">wrap</span><span class=\"p\">(</span><span class=\"n\">e</span>: <span class=\"nc\">E</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">ConvertError</span><span class=\"o\">&lt;</span><span class=\"n\">E</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">fn</span> <span class=\"nf\">convert</span><span class=\"p\">(</span><span class=\"n\">e</span>: <span class=\"nc\">E</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">E</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">F</span>: <span class=\"nb\">From</span><span class=\"o\">&lt;</span><span class=\"n\">E</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">WrapError</span><span class=\"o\">&lt;</span><span class=\"n\">E</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">ErrorStack</span><span class=\"o\">&lt;</span><span class=\"n\">F</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"cm\">/* ... */</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">E</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">F</span>: <span class=\"nb\">From</span><span class=\"o\">&lt;</span><span class=\"n\">E</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">ConvertError</span><span class=\"o\">&lt;</span><span class=\"n\">ErrorStack</span><span class=\"o\">&lt;</span><span class=\"n\">E</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">ErrorStack</span><span class=\"o\">&lt;</span><span class=\"n\">F</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"cm\">/* ... */</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">enum</span> <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">E</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">E</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">type</span> <span class=\"nc\">TracedResult</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">E</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ErrorStack</span><span class=\"o\">&lt;</span><span class=\"n\">E</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"sd\">/// Wraps error variant in an ErrorStack, starts new stack</span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">E</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">F</span>: <span class=\"nc\">WrapError</span><span class=\"o\">&lt;</span><span class=\"n\">E</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">FromResidual</span><span class=\"o\">&lt;</span><span class=\"nb\">Result</span><span class=\"o\">&lt;!</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">E</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cm\">/* ... */</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"sd\">/// Converts ErrorStack to ErrorStack, pushes a location</span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">E</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">F</span>: <span class=\"nc\">ConvertError</span><span class=\"o\">&lt;</span><span class=\"n\">E</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">FromResidual</span><span class=\"o\">&lt;</span><span class=\"nb\">Result</span><span class=\"o\">&lt;!</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">E</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cm\">/* ... */</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 251965160,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1630722262
    },
    {
        "content": "<p>i'll try it</p>",
        "id": 251965292,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1630722429
    },
    {
        "content": "<p>I think i got it working</p>",
        "id": 251965731,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630722927
    },
    {
        "content": "<p>let me push rq</p>",
        "id": 251965732,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630722930
    },
    {
        "content": "<p>not sure</p>",
        "id": 251965742,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630722946
    },
    {
        "content": "<p>i might have some messed up defaulted parameters on some trait impls</p>",
        "id": 251965753,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630722958
    },
    {
        "content": "<p>tell me if this is remotely close to what you meant / need <span class=\"user-mention\" data-user-id=\"435059\">@Ben Reeves</span></p>",
        "id": 251965815,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630722997
    },
    {
        "content": "<p><a href=\"https://github.com/yaahc/propagate/commit/7f0b769814c6de320c160f3d44e13b63493a5d3d\">https://github.com/yaahc/propagate/commit/7f0b769814c6de320c160f3d44e13b63493a5d3d</a></p>",
        "id": 251965847,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630723048
    },
    {
        "content": "<p>its extremely messy</p>",
        "id": 251965864,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630723063
    },
    {
        "content": "<p>oops i tried commenting thinking it was a PR and i could aggregate multiple into a review. we can just chat here</p>",
        "id": 251966093,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1630723321
    },
    {
        "content": "<p>there is a PR</p>",
        "id": 251966151,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630723361
    },
    {
        "content": "<p><a href=\"https://github.com/BGR360/propagate/pull/1\">https://github.com/BGR360/propagate/pull/1</a> includes that commit</p>",
        "id": 251966158,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630723374
    },
    {
        "content": "<p>ok yeah i think this is coming together for me</p>",
        "id": 251966900,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1630724280
    },
    {
        "content": "<p>This looks pretty nice.</p>\n<p>I was stuck on assuming that <code>Err</code> would be shadowed by <code>propagate::Result::Err</code>. Because of that I assumed we would need a third <code>FromResidual</code> impl to enable the <code>Err(error)?</code> wrapping. But with your approach it just uses the existing <code>FromResidual&lt;std::result::Result&gt;</code>.</p>\n<p>I'm not a huge fan of seeing <code>propagate::Ok(..)</code>. Is that fully unnecessary if the user always uses <code>try</code> blocks?</p>",
        "id": 251967285,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1630724652
    },
    {
        "content": "<p>It still comes up in match statements if you don't bring it into scope</p>",
        "id": 251967408,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630724804
    },
    {
        "content": "<p>But everywhere else it would be gone if you use try blocks</p>",
        "id": 251967417,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630724816
    },
    {
        "content": "<p>That's probably a good thing actually. <code>propagate::Err(e) =&gt; {}</code>makes it more obvious that <code>e</code> is not the wrapped value</p>",
        "id": 251967515,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1630724925
    },
    {
        "content": "<p>Though it's not really symmetric; <code>propagate::Ok(t) =&gt; {}</code> is in fact just <code>T</code>.</p>",
        "id": 251967538,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1630724965
    },
    {
        "content": "<p>One thought I had while looking over the implementation is that it would nice if it wasn't necessary for users to have to do <code>Ok(result?)</code> in order to include the function in the stack trace. I have no idea if there's a more ergonomic work-around for this though <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 252486880,
        "sender_full_name": "Sean Chen (he/him)",
        "timestamp": 1631116990
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300743\">Sean Chen (he/him)</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/track_caller.20error.20crate/near/252486880\">said</a>:</p>\n<blockquote>\n<p>One thought I had while looking over the implementation is that it would nice if it wasn't necessary for users to have to do <code>Ok(result?)</code> in order to include the function in the stack trace. Either that or if the type system could catch when the user forgot to do this. I have no idea how or if these are possible though <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>\n</blockquote>\n<p>I agree. The only way we see of doing this is for the user to use <code>try</code> blocks:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">propagate</span>::<span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kr\">try</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">propagate</span>::<span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kr\">try</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">foo</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>You don't need <code>Ok</code> because it's a try block, and the compiler will force you to do <code>foo()?</code> instead of  it won't work with <code>foo()</code></p>\n<p>See the updated main branch for these two examples:<br>\n<a href=\"https://github.com/BGR360/propagate/blob/5cb618e/examples/usage.rs\">examples/usage.rs</a><br>\n<a href=\"https://github.com/BGR360/propagate/blob/5cb618e/examples/usage.rs\">examples/usage_no_try.rs</a></p>",
        "id": 252543554,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1631140132
    },
    {
        "content": "<p>Ok all, after much churning and re-writing, I think I've landed on something that I like.</p>\n<p>Please see the updated <a href=\"https://github.com/BGR360/propagate\">Propagate repo</a>, now complete with rendered rustdocs, and let me know what you think of the current design of the crate.</p>",
        "id": 253701527,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1631863449
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"435059\">@Ben Reeves</span> oh wow, the example in the readme looks beautiful</p>",
        "id": 253782376,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1631901606
    },
    {
        "content": "<p>o and the traced trait</p>",
        "id": 253782550,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1631901668
    },
    {
        "content": "<p>this looks great!</p>",
        "id": 253782569,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1631901676
    },
    {
        "content": "<p>o now I really wanna know if this could be made to act like <code>eyre</code></p>",
        "id": 253782693,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1631901726
    },
    {
        "content": "<p>where the stack is also the formatter and general context</p>",
        "id": 253782733,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1631901738
    },
    {
        "content": "<p>so it could also do things like capture a backtrace+spantrace when you first convert it into a propagate::Result</p>",
        "id": 253782783,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1631901760
    },
    {
        "content": "<p>and you could do custom output</p>",
        "id": 253782789,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1631901763
    },
    {
        "content": "<p>hmmm</p>",
        "id": 253782883,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1631901803
    },
    {
        "content": "<p>actually this is kinda converging on eyre's old design</p>",
        "id": 253782900,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1631901810
    },
    {
        "content": "<p>where it was decided against because of how it's locally instantiated and conversion between context types gets confusing</p>",
        "id": 253783007,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1631901843
    },
    {
        "content": "<p>regardless</p>",
        "id": 253783122,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1631901880
    },
    {
        "content": "<p>this is fantastic work</p>",
        "id": 253783129,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1631901883
    },
    {
        "content": "<p>Not sure I grok all of what you're saying here, but I'm pleased to have my work praised <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span> </p>\n<p>I would be interested in hearing more about \"eyre's old design\" that was decided against, and what exactly you mean by \"locally instantiated\" and \"context types\" and \"spantrace\"</p>",
        "id": 253786953,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1631903448
    },
    {
        "content": "<p>so eyre used to be defined as <code>eyre::Report&lt;H&gt;</code> where H was the <code>EyreHandler</code></p>",
        "id": 253787044,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1631903482
    },
    {
        "content": "<p>and instead it got changed to have a <code>Box&lt;dyn EyreHandler&gt;</code> internally</p>",
        "id": 253787070,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1631903494
    },
    {
        "content": "<p>and a global hook for installing a function that constructs the <code>EyreHandler</code> that all <code>Report</code>'s use to construct the correct user defined type and store it as a trait object</p>",
        "id": 253787192,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1631903526
    },
    {
        "content": "<p>the job of this trait object is two fold</p>",
        "id": 253787228,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1631903542
    },
    {
        "content": "<p>first, it stores context alongside your error types that you want to have available in all error reports</p>",
        "id": 253787261,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1631903559
    },
    {
        "content": "<p>things like a Backtrace</p>",
        "id": 253787271,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1631903562
    },
    {
        "content": "<p>so the default handler that <code>eyre</code> provides mimics the exact behavior of anyhow</p>",
        "id": 253787288,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1631903572
    },
    {
        "content": "<p>it has an <code>Option&lt;Backtrace&gt;</code> in the conetxt type and nothing else</p>",
        "id": 253787315,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1631903581
    },
    {
        "content": "<p>and when you construct one it checks if the <code>&amp;dyn Error</code> its being associated with already captured a backtrace</p>",
        "id": 253787356,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1631903603
    },
    {
        "content": "<p>and if it doesn't it captures one then</p>",
        "id": 253787361,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1631903607
    },
    {
        "content": "<p>guaruanteeing a backtrace is available</p>",
        "id": 253787369,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1631903613
    },
    {
        "content": "<p><code>SpanTrace</code> is <code>tracing</code>'s <code>Backtrace</code> equivalent</p>",
        "id": 253787398,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1631903630
    },
    {
        "content": "<p>instead of capturing all the active stack frames it captures all the active <code>tracing::Span</code>s</p>",
        "id": 253787475,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1631903647
    },
    {
        "content": "<p>including runtime information</p>",
        "id": 253787488,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1631903655
    },
    {
        "content": "<p><a href=\"https://docs.rs/color-eyre/0.5.11/color_eyre/\">https://docs.rs/color-eyre/0.5.11/color_eyre/</a> is crate that defines an alternative <code>EyreHandler</code> type that captures a backtrace and a spantrace and can also store suggestions and other custom sections</p>",
        "id": 253787595,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1631903701
    },
    {
        "content": "<p>so that kinda really expands on how you can use a \"context type\" which is more or less just a description of what that <code>EyreHandler</code> trait object does</p>",
        "id": 253787652,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1631903724
    },
    {
        "content": "<p>your ErrorStack type is quite similar</p>",
        "id": 253787677,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1631903737
    },
    {
        "content": "<p>in that it's storing additional context</p>",
        "id": 253787693,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1631903743
    },
    {
        "content": "<p>but its restricted in that it's only caring about one type of context, <code>Location</code></p>",
        "id": 253787712,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1631903752
    },
    {
        "content": "<p>you could in theory create a custom <code>Result</code> type to wrap an <code>eyre::Report</code> and a custom context type and that same <code>Traced</code> trait and reimplement a lot of the stuff in <code>propagate</code> and have it instead downcast the trait object in the <code>Report</code> and then insert the <code>Location</code> every time you use <code>?</code></p>",
        "id": 253787834,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1631903796
    },
    {
        "content": "<p>actually I don't even think the traced trait would be necessary</p>",
        "id": 253787902,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1631903830
    },
    {
        "content": "<p>it would all be statically known types in that case</p>",
        "id": 253787907,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1631903836
    },
    {
        "content": "<p>though you cannot generalize it, because the trait object can only give access to the internals by downcasting to concrete known types</p>",
        "id": 253787947,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1631903857
    },
    {
        "content": "<p>so there are tradeoffs</p>",
        "id": 253787971,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1631903869
    },
    {
        "content": "<p>We could add the <code>trace</code> method to the <code>EyreHandler</code> trait</p>",
        "id": 253788039,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1631903883
    },
    {
        "content": "<p>and add a <code>Result</code> type the same as what you have</p>",
        "id": 253788059,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1631903894
    },
    {
        "content": "<p>alternatively we could add a more general generic member access style method</p>",
        "id": 253788115,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1631903923
    },
    {
        "content": "<p>for inserting arbitrary context</p>",
        "id": 253788120,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1631903926
    },
    {
        "content": "<p>it could be as simple as <code>fn add_context(&amp;mut self, context: Box&lt;dyn Any&gt;)</code></p>",
        "id": 253788150,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1631903940
    },
    {
        "content": "<p>which could then have the <code>trace</code> method built on top of it</p>",
        "id": 253788181,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1631903954
    },
    {
        "content": "<p>but that would still require a custom resuilt type to do the insertion and active downcasting to get the locations back out of those boxed type erased values</p>",
        "id": 253788314,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1631904008
    },
    {
        "content": "<p>so there's lots of tradeoffs in this space but your approach of moving the generic to the <code>Result</code> instead of as a parameter on the <code>Error</code> type is new</p>",
        "id": 253788362,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1631904037
    },
    {
        "content": "<p>so I'm really eager to see how it plays out</p>",
        "id": 253788379,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1631904046
    },
    {
        "content": "<p>but it would probably be a good idea to familiarize yourself with <code>eyre</code> as well since it is very similar conceptually</p>",
        "id": 253788398,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1631904060
    },
    {
        "content": "<p>and in the future we may want to combine the lessons learned in these two crates</p>",
        "id": 253788445,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1631904085
    },
    {
        "content": "<p>because I can imagine a version of <code>eyre</code> that has the same parameter on the Result type, and it has a default type that is a globally instantiated hook / type erased trait object, but where you can replace it with a custom type</p>",
        "id": 253788659,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1631904168
    },
    {
        "content": "<p>I'll have to do some remembering about the previous versions and the negatives that caused us to switch and do some thinking about if they do or don't apply with this newer design</p>",
        "id": 253788712,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1631904197
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/track_caller.20error.20crate/near/253788379\">said</a>:</p>\n<blockquote>\n<p>so I'm really eager to see how it plays out</p>\n</blockquote>\n<p>Plays out with whom? Not sure I have many wannabe users lined up at the door, aside from Qumulo of course.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/track_caller.20error.20crate/near/253788398\">said</a>:</p>\n<blockquote>\n<p>but it would probably be a good idea to familiarize yourself with <code>eyre</code> as well since it is very similar conceptually</p>\n</blockquote>\n<p>Agreed, will do as time allows.</p>",
        "id": 253788965,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1631904300
    },
    {
        "content": "<p>I'll be convening with coworkers next week to see if the current incarnation of <code>propagate</code> would be a satisfactory approach. Some folks are really pining to have this be an optional feature of <code>std::Result</code> and worry that having to work with two different result types in a codebase will be too annoying.</p>",
        "id": 253789081,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1631904353
    },
    {
        "content": "<blockquote>\n<p>Plays out with whom? </p>\n</blockquote>\n<p>Plays out for you at work mainly, though I think we could in theory attract more test users and feedback if we include it in trial-and-error</p>",
        "id": 253789412,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1631904482
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"435059\">Ben Reeves</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/track_caller.20error.20crate/near/253789081\">said</a>:</p>\n<blockquote>\n<p>I'll be convening with coworkers next week to see if the current incarnation of <code>propagate</code> would be a satisfactory approach. Some folks are really pining to have this be an optional feature of <code>std::Result</code> and worry that having to work with two different result types in a codebase will be too annoying.</p>\n</blockquote>\n<p>that's a super legitimate worry, I think in theory we could argue that it would be better to have the fully featured if slightly slower Result in std and leave the performance optimized Result types for crates that need to avoid the extra codegen</p>",
        "id": 253789526,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1631904532
    },
    {
        "content": "<p>but obviously that's going to be a more long term solution and it's not guaranteed that it will be accepted</p>",
        "id": 253789593,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1631904560
    },
    {
        "content": "<p>I'll try and study <code>eyre</code> this weekend, maybe gain some new inspiration. Quite a whirlwind of different approaches and tradeoffs, makes my head spin <span aria-label=\"flushed\" class=\"emoji emoji-1f633\" role=\"img\" title=\"flushed\">:flushed:</span></p>",
        "id": 253790667,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1631905022
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"435059\">Ben Reeves</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/track_caller.20error.20crate/near/253790667\">said</a>:</p>\n<blockquote>\n<p>I'll try and study <code>eyre</code> this weekend, maybe gain some new inspiration. Quite a whirlwind of different approaches and tradeoffs, makes my head spin <span aria-label=\"flushed\" class=\"emoji emoji-1f633\" role=\"img\" title=\"flushed\">:flushed:</span></p>\n</blockquote>\n<p>lmk if you have any questions :D</p>",
        "id": 253790724,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1631905049
    },
    {
        "content": "<p>Would be nice if your readme had examples of the output you can expect if some error occurred.</p>",
        "id": 253804837,
        "sender_full_name": "nagisa",
        "timestamp": 1631911443
    },
    {
        "content": "<p>From the description it sounds to me like the error trace will only include the locations of where in the source an error has occurred.  I have personally avoided that kind of approach for I tend to find it hard to relate these back to what actually went wrong, even with source code at hand.</p>",
        "id": 253805127,
        "sender_full_name": "nagisa",
        "timestamp": 1631911592
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/track_caller.20error.20crate/near/253805127\">said</a>:</p>\n<blockquote>\n<p>From the description it sounds to me like the error trace will only include the locations of where in the source an error has occurred.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> It tracks the location where the error occurred and every location where the <code>?</code> operator is applied to it on the way up the stack. I should find a way to make that more obvious in the readme</p>",
        "id": 253989906,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1632104952
    },
    {
        "content": "<p>Alright, I presented the Propagate crate to one of our more seasoned Rustaceans at work today, and I think I'm becoming convinced that this approach is not really a satisfying solution to the underlying issue.</p>\n<p>There are some really notable issues with having two distinct Result types, even if you give them different names.</p>",
        "id": 254122747,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1632173986
    },
    {
        "content": "<p><span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span></p>",
        "id": 254122921,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1632174054
    },
    {
        "content": "<p>lol</p>",
        "id": 254122960,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1632174073
    },
    {
        "content": "<p>For one, reliable usage of the Propagate crate is sort of predicated on all <code>std::result::Result</code>s being \"leaf\" nodes in the error chain. If you produce a <code>std::result::Result</code> in the middle of propagating a <code>propagate::Result</code>, you lose all the error trace information.</p>\n<p>For example, say you want to implement a <code>std::ops::TryFrom</code> on a type, and the method for doing the conversion involves calling fallible application code that returns <code>propagate::Result</code>. If that fallible application code produces an error, you will forfeit any error trace information when you go to return the <code>std::result::Result</code> from <code>try_from</code>.</p>\n<p>This issue could probably be solved by doing something similar to <code>eyre</code>, where <code>propagate::Result::Err</code> stores a trait object that implements the necessary methods. That way you can go back and forth between <code>std::result::Result</code> and <code>propagate::Result</code> and not lose any information. But this is not the only issue.</p>",
        "id": 254123557,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1632174370
    },
    {
        "content": "<p>There is of course the issue of user confusion (\"why is there two result types? when do I use which?\"), which is of debatable importance.</p>",
        "id": 254123690,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1632174449
    },
    {
        "content": "<p>Another point my colleague brought up is that, from a Rust community perspective, this approach is kind of problematic. He likened it to the discourse going around the community about async vs sync APIs. I'm not too familiar, but he says he hears a lot of people complaining that so many libraries these days need to define two sets of APIs: one for sync and one for async.</p>",
        "id": 254123868,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1632174544
    },
    {
        "content": "<p>If we release <code>propagate</code>, then if libraries want to make use of it, they have to find a way to satisfy users who want to use <code>propagate</code> and users who don't.</p>",
        "id": 254123939,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1632174584
    },
    {
        "content": "<p>Long story short, the new shiny golden egg in my crosshairs is trying to see what we can do to <code>std::result::Result</code> to make it enable this sort of tracing.</p>\n<p>The very rough idea is to trait-specialize the <code>FromResidual</code> on <code>Result</code> to handle the case where the error type is traceable (i.e., wants to receive tracing information as it is propagated).</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">FromResidual</span><span class=\"o\">&lt;</span><span class=\"nb\">Result</span><span class=\"o\">&lt;!</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">Traced</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">Traced</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"cp\">#[track_caller]</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">fn</span> <span class=\"nf\">from_residual</span><span class=\"p\">(</span><span class=\"cm\">/* ... */</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cm\">/* ... */</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 254124532,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1632174933
    },
    {
        "content": "<p>Alternatively, rather than introducing a new <code>Traced</code> trait to the std library, it could be another method on the <code>Error</code> trait.</p>",
        "id": 254124803,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1632175067
    },
    {
        "content": "<p>I don't think adding a <code>Traced</code> trait would have any advantages over just adding <code>#[track_caller]</code> to the FromResidual impl for <code>Result</code></p>",
        "id": 254125381,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1632175319
    },
    {
        "content": "<p>since you'd still have to hook into <code>?</code> somehow for <code>std::result::Result</code> which would result in the same codegen I expect</p>",
        "id": 254125435,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1632175328
    },
    {
        "content": "<p>Oh, another issue I forgot to mention is that, even if you ignore all the other issues, you still get no insight into the propagation of <code>std::result::Result</code>'s. One scenario where that could be useful is parsing with <code>FromStr</code>. If parsing fails for some really deeply nested type, it would be nice to see more detail into where it failed.</p>\n<p>Maybe not everybody would want Result tracing to be turned on by default in the std library, but that type of problem has been solved before with compile flags like <code>panic={unwind,abort}</code>. Granted it'll be a hard sell.</p>",
        "id": 254125459,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1632175347
    },
    {
        "content": "<p>My guess is the best bet is arguing that the default <code>std::result::Result</code> should support <code>track_caller</code> and that more optimized <code>Result</code> types should be left to 3rd party libraries</p>",
        "id": 254125584,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1632175425
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/track_caller.20error.20crate/near/254125381\">said</a>:</p>\n<blockquote>\n<p>I don't think adding a <code>Traced</code> trait would have any advantages over just adding <code>#[track_caller]</code> to the FromResidual impl for <code>Result</code></p>\n</blockquote>\n<p>I'm not seeing how you can implement propagation tracing by only modifying the existing <code>FromResidual for Result</code>. You'd have nowhere to store the trace.</p>",
        "id": 254125586,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1632175426
    },
    {
        "content": "<p>ah you're right, it has to be actively done in every from_residual call</p>",
        "id": 254125708,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1632175489
    },
    {
        "content": "<p>which would need to be in the <code>std::Result</code> from_residual impl</p>",
        "id": 254125747,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1632175512
    },
    {
        "content": "<p>brain fart</p>",
        "id": 254125748,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1632175513
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"435059\">@Ben Reeves</span> regarding the loss of trace information when round tripping through a std::result::Result, you could do something similar to what I do here in trial-and-error</p>",
        "id": 254126196,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1632175785
    },
    {
        "content": "<p><a href=\"https://github.com/yaahc/trial-and-error/blob/main/src/boxerror_replacement.rs#L141\">https://github.com/yaahc/trial-and-error/blob/main/src/boxerror_replacement.rs#L141</a></p>",
        "id": 254126197,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1632175785
    },
    {
        "content": "<p><a href=\"https://github.com/yaahc/trial-and-error/blob/main/src/boxerror_replacement.rs#L68-L73\">https://github.com/yaahc/trial-and-error/blob/main/src/boxerror_replacement.rs#L68-L73</a></p>",
        "id": 254126210,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1632175796
    },
    {
        "content": "<p>where when it goes from <code>propagate::Result</code> -&gt; <code>std::result::Result</code> it bundles the trace with the error and type erases it, and then you can try to check for that when going backwards</p>",
        "id": 254126321,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1632175845
    },
    {
        "content": "<p>not sure if that will apply well here though</p>",
        "id": 254126326,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1632175850
    },
    {
        "content": "<p>this one assumes everything is type erased</p>",
        "id": 254126331,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1632175854
    },
    {
        "content": "<p>I don't think we have a super strict need for error types to be non-type-erased, so I think that would be a fine limitation</p>",
        "id": 254126692,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1632176072
    },
    {
        "content": "<p>If I'm correct in understanding that \"type erased\" means \"hidden behind a trait object\"</p>",
        "id": 254126726,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1632176093
    },
    {
        "content": "<p>yup</p>",
        "id": 254126735,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1632176097
    },
    {
        "content": "<p>but yea, the <code>Traced</code> trait solution seems identical to <a href=\"https://paper.dropbox.com/doc/Collaborative-Summary-3-Fact-Finding-Pre-RFCs-around-Error-Handling-Reporting--BSzjky_QLvb5ReDhXm4PN2OAAg-dnShKo1SsHtdF4Yheeoco\">https://paper.dropbox.com/doc/Collaborative-Summary-3-Fact-Finding-Pre-RFCs-around-Error-Handling-Reporting--BSzjky_QLvb5ReDhXm4PN2OAAg-dnShKo1SsHtdF4Yheeoco</a></p>",
        "id": 254126980,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1632176229
    },
    {
        "content": "<p>tho that's old and based on the old Try trait</p>",
        "id": 254127038,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1632176258
    },
    {
        "content": "<p>either way though I think it will probably end up depending on generic member acecss</p>",
        "id": 254127117,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1632176292
    },
    {
        "content": "<p>which also solves the leaf error issue</p>",
        "id": 254127124,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1632176296
    },
    {
        "content": "<p>and if you're not familiar with generic member access: <a href=\"https://github.com/rust-lang/rfcs/pull/2895\">https://github.com/rust-lang/rfcs/pull/2895</a></p>",
        "id": 254127164,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1632176333
    },
    {
        "content": "<p>You're always a wealth of knowledge, thank you <span aria-label=\"praise\" class=\"emoji emoji-1f64c\" role=\"img\" title=\"praise\">:praise:</span></p>",
        "id": 254127620,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1632176614
    },
    {
        "content": "<p>^_^</p>",
        "id": 254127646,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1632176630
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/track_caller.20error.20crate/near/254126196\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"435059\">Ben Reeves</span> regarding the loss of trace information when round tripping through a std::result::Result, you could do something similar to what I do here in trial-and-error</p>\n</blockquote>\n<p>How does <a href=\"https://github.com/yaahc/trial-and-error/blob/be72da7e4ae602724a4bae60e6914bb7d598697a/src/boxerror_replacement.rs#L141\">this impl</a> even work? I thought you couldn't have an implementation where both the trait and implementee are from foreign crates.</p>",
        "id": 254146961,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1632191140
    },
    {
        "content": "<p>DynResult is local, and (I believe) only the first \"uncovered\" type from left to right needs to be local to allow it, or something like that? These rules were somewhat recently changed, let me find the RFC</p>",
        "id": 254147058,
        "sender_full_name": "simulacrum",
        "timestamp": 1632191217
    },
    {
        "content": "<p><a href=\"https://rust-lang.github.io/rfcs/2451-re-rebalancing-coherence.html\">https://rust-lang.github.io/rfcs/2451-re-rebalancing-coherence.html</a></p>",
        "id": 254147074,
        "sender_full_name": "simulacrum",
        "timestamp": 1632191239
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 254147576,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1632191680
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"435059\">Ben Reeves</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/track_caller.20error.20crate/near/253989906\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/track_caller.20error.20crate/near/253805127\">said</a>:</p>\n<blockquote>\n<p>From the description it sounds to me like the error trace will only include the locations of where in the source an error has occurred.</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> It tracks the location where the error occurred and every location where the <code>?</code> operator is applied to it on the way up the stack. I should find a way to make that more obvious in the readme</p>\n</blockquote>\n<p>Readme now has a much more motivating example: <a href=\"https://github.com/BGR360/propagate/commit/141d3d6262de1b76d4cc0cfd1d1dfeeadf320402?short_path=b335630#diff-b335630551682c19a781afebcf4d07bf978fb1f8ac04c6bf87428ed5106870f5\">https://github.com/BGR360/propagate/commit/141d3d6262de1b76d4cc0cfd1d1dfeeadf320402?short_path=b335630#diff-b335630551682c19a781afebcf4d07bf978fb1f8ac04c6bf87428ed5106870f5</a></p>",
        "id": 254154370,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1632198903
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/track_caller.20error.20crate/near/254126980\">said</a>:</p>\n<blockquote>\n<p>but yea, the <code>Traced</code> trait solution seems identical to <a href=\"https://paper.dropbox.com/doc/Collaborative-Summary-3-Fact-Finding-Pre-RFCs-around-Error-Handling-Reporting--BSzjky_QLvb5ReDhXm4PN2OAAg-dnShKo1SsHtdF4Yheeoco\">https://paper.dropbox.com/doc/Collaborative-Summary-3-Fact-Finding-Pre-RFCs-around-Error-Handling-Reporting--BSzjky_QLvb5ReDhXm4PN2OAAg-dnShKo1SsHtdF4Yheeoco</a></p>\n</blockquote>\n<p>Gave this a read, wish I would have found this sooner. I didn't know about Zig's error return traces, but they are exactly what I want!!</p>\n<p>Maybe I'll start using \"return tracing\" instead of \"propagation tracing\" as a more \"agreed upon\" term for this.</p>\n<p>A lot of the comments on that document do seem to suggest that people were in favor of adding support for this... <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span> Guess it's just a matter of waiting for supporting features?</p>\n<blockquote>\n<p>either way though I think it will probably end up depending on generic member acecss</p>\n</blockquote>\n<p>Could you explain why?</p>\n<blockquote>\n<p>which also solves the leaf error issue</p>\n</blockquote>\n<p>Could you explain how?</p>",
        "id": 254157973,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1632202631
    },
    {
        "content": "<p>In that if you're using a traced trait or method on error types you need a way to extract that location data back out of those error types later</p>",
        "id": 254173732,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1632213890
    },
    {
        "content": "<p>Generic member access is the mechanism that lets you extract information such as locations as a slice or as an iterator or whatever through dyn error trait objects</p>",
        "id": 254173798,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1632213930
    },
    {
        "content": "<p>And this helps a leaf errors because you can have this information be extracted from source multiple errors deep in a chain and it doesn't really matter what interfaces it gets returned through or how it gets rewrapped</p>",
        "id": 254173880,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1632213968
    },
    {
        "content": "<p>The downside of this is that you end up running into duplicated storage of the same vecs of locations theoretically if you're storing them in each error in a chain of errors</p>",
        "id": 254173964,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1632214015
    },
    {
        "content": "<p>But for example even with the propagate crate kind of as it is right now if you had generic member access you could type erase the error and stack of locations when roundtripping through a std result and then when reporting your locations you could use generic number access to get back the older stack and recombine them in the final report</p>",
        "id": 254174150,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1632214132
    },
    {
        "content": "<p>Just as a little update, I hit a breakthrough and was able to prototype a trait-specialized <code>std::Result</code> using the sound(er) <code>#[feature(min_specialization)]</code> rather than the unsound <code>#[feature(specialization)]</code>: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=9bc783874eeecdc3c6f68625cace9bcb\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=9bc783874eeecdc3c6f68625cace9bcb</a></p>\n<p>The breakthrough is the usage of a marker trait configured with <code>#[rustc_specialization_trait]</code> that users would implement on all of their <code>Traced</code> error types, so the compiler can enforce the <a href=\"https://smallcultfollowing.com/babysteps/blog/2018/02/09/maximally-minimal-specialization-always-applicable-impls/\">\"always applicable\"</a> rule on the user side of things.</p>\n<p>Very exciting, this might be the direction Qumulo takes for its error handling, since many are opposed to working with two different result types.</p>",
        "id": 255490149,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1632956879
    },
    {
        "content": "<p>Oh and the other key thing is that this approach doesn't require type erasure using boxes or what-have-you. Purely static dispatch with specialized treatment of <code>Traced</code> error types is achieved.</p>",
        "id": 255490453,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1632957056
    },
    {
        "content": "<p>ooo</p>",
        "id": 255492188,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1632958136
    },
    {
        "content": "<p>that looks fancy!</p>",
        "id": 255492194,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1632958139
    },
    {
        "content": "<p>So I'm guessing the next step is to implement a PR adding Traced to std unstably using the specialization marker and then we get the compiler team to review it to make sure it's all sound</p>",
        "id": 255492442,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1632958288
    },
    {
        "content": "<p>Yeah, I'll try to get it working on a fork.</p>\n<p>Looking again, I think the marker trait is redundant. It's used in std to make existing traits specializable without breaking things.</p>\n<p>Since <code>Traced</code> is a wholly new trait I think we can annotate it directly with <code>#[rustc_specialization_trait]</code>.</p>",
        "id": 255495277,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1632960078
    },
    {
        "content": "<p>That's a really neat and elegant solution <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 255885480,
        "sender_full_name": "Sean Chen (he/him)",
        "timestamp": 1633195760
    },
    {
        "content": "<p>Well that was pretty quick to code up. I think I spent more time setting up my rustc repo and rust analyzer than I did actually writing the code and tests.</p>",
        "id": 256177073,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1633409090
    },
    {
        "content": "<p>Draft PR imminent</p>",
        "id": 256177085,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1633409098
    },
    {
        "content": "<p>Lol</p>",
        "id": 256177213,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1633409191
    },
    {
        "content": "<p>Hype</p>",
        "id": 256177218,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1633409194
    },
    {
        "content": "<p>my poor 2015 macbook is NOT having a fun time running rust-analyzer on this repo</p>",
        "id": 256177505,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1633409426
    },
    {
        "content": "<p>Yuuuup</p>",
        "id": 256177724,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1633409628
    },
    {
        "content": "<p>anyway: <a href=\"https://github.com/rust-lang/rust/pull/89547\">https://github.com/rust-lang/rust/pull/89547</a></p>\n<p>it's got working tests</p>",
        "id": 256177729,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1633409633
    },
    {
        "content": "<p>I tried streaming rustc dev once</p>",
        "id": 256177732,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1633409635
    },
    {
        "content": "<p>Not a good idea to do obs and rust analyzer on the same machine it turns out</p>",
        "id": 256177781,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1633409650
    },
    {
        "content": "<p>Very cool</p>",
        "id": 256177960,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1633409794
    },
    {
        "content": "<p>I really wish I understood specialization in rust better</p>",
        "id": 256178415,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1633410110
    },
    {
        "content": "<p>I feel confused wondering where you need to add <code>default</code></p>",
        "id": 256178477,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1633410131
    },
    {
        "content": "<p>surprised you can just put it on the impl you're specializing, rather than needing to opt in on the trait definition</p>",
        "id": 256178495,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1633410145
    },
    {
        "content": "<p><code>default</code> is just saying \"this particular impl of this trait method is allowed to be specialized by a more specific impl of this trait method, but this is the default impl to fall back to\"</p>",
        "id": 256178953,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1633410582
    },
    {
        "content": "<p>or something like that</p>",
        "id": 256178956,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1633410586
    },
    {
        "content": "<p>The important detail of doing it the way I've done it is that, due to the presence of <code>#[rustc_attr_specialization_trait]</code>, the <code>Traced</code> trait will be limited in the types it can be implemented on. This is in order to obey the rules of <code>min_specialization</code>. I guess because people like sound languages. Whatever <span aria-label=\"rolling eyes\" class=\"emoji emoji-1f644\" role=\"img\" title=\"rolling eyes\">:rolling_eyes:</span> </p>\n<p>Anyway we'd have to decently document that. There are already some traits in core / std that use that attribute, so maybe we can graft some words from those docs to help explain the restrictions.</p>",
        "id": 256179377,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1633410968
    },
    {
        "content": "<p>The too-long;didn't-read-niko's-blog-posts-a-dozen-times version of it is that you can't have an <code>impl Traced</code> with additional trait bounds:</p>\n<div class=\"codehilite\"><pre><span></span><code>// Okay.\nimpl Traced for MyScalarType {...}\n\n// Okay (I think?).\nimpl&lt;T&gt; Traced for MyGenericType&lt;T&gt; {...}\n\n// Not okay.\nimpl&lt;T: Bound&gt; Traced for SomeOtherType&lt;T&gt; {...}\n</code></pre></div>",
        "id": 256179594,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1633411202
    },
    {
        "content": "<p>And any <code>impl Traced</code> has to be completely generic WRT lifetimes, i.e., no <code>'static</code> anywhere.</p>",
        "id": 256179719,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1633411305
    },
    {
        "content": "<p>Sounds about right</p>",
        "id": 256180245,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1633411790
    },
    {
        "content": "<p>I just had no idea that they'd already added support for always applicable impls already via this attribute</p>",
        "id": 256180297,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1633411810
    },
    {
        "content": "<p>i didn't either. when i figured that out i was like <span aria-label=\"bangbang\" class=\"emoji emoji-203c\" role=\"img\" title=\"bangbang\">:bangbang:</span>  <span aria-label=\"bulb\" class=\"emoji emoji-1f4a1\" role=\"img\" title=\"bulb\">:bulb:</span> <span aria-label=\"bulb\" class=\"emoji emoji-1f4a1\" role=\"img\" title=\"bulb\">:bulb:</span> <span aria-label=\"bulb\" class=\"emoji emoji-1f4a1\" role=\"img\" title=\"bulb\">:bulb:</span> <span aria-label=\"bangbang\" class=\"emoji emoji-203c\" role=\"img\" title=\"bangbang\">:bangbang:</span></p>",
        "id": 256180336,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1633411849
    },
    {
        "content": "<p>And yea I understand what default means, just not when you're allowed to apply it. Like, I would have initially worried that the \"can be specialized\" status of a trait has to somehow tie all the way back to the definition</p>",
        "id": 256180354,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1633411865
    },
    {
        "content": "<p>Like it has to be tied to the root of the definition tree essentially</p>",
        "id": 256180371,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1633411885
    },
    {
        "content": "<p>That was my intuition initially too</p>",
        "id": 256180384,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1633411895
    },
    {
        "content": "<p>But that clearly isn't the case</p>",
        "id": 256180386,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1633411897
    },
    {
        "content": "<p>TIL</p>",
        "id": 256180389,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1633411900
    },
    {
        "content": "<p>Very happy that's not a restriction</p>",
        "id": 256180395,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1633411906
    },
    {
        "content": "<p>This knowledge will be very useful going forward <span aria-label=\"smiling devil\" class=\"emoji emoji-1f608\" role=\"img\" title=\"smiling devil\">:smiling_devil:</span></p>",
        "id": 256180436,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1633411922
    },
    {
        "content": "<p>project-specialize-everything</p>",
        "id": 256180471,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1633411951
    },
    {
        "content": "<p>Just unwrap and friends</p>",
        "id": 256180482,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1633411962
    },
    {
        "content": "<p>Tho honestly the thing I want to specialize there would be sad face if that's how we have to fix it</p>",
        "id": 256180517,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1633411996
    },
    {
        "content": "<p>Because then you have to opt into the good unwrap support</p>",
        "id": 256180527,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1633412006
    },
    {
        "content": "<p>Because we can't apply that specialization to Error itself</p>",
        "id": 256180538,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1633412018
    },
    {
        "content": "<p>Either way, I'm sure it will be useful</p>",
        "id": 256180612,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1633412058
    },
    {
        "content": "<p><span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span></p>",
        "id": 257103805,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1633978613
    },
    {
        "content": "<p>I'm super-late to this thread, but I thought this was a really interesting note: <a href=\"https://github.com/BGR360/propagate/blob/2300fab6bd8670019e8e6c2eabd26558f029a76b/src/result.rs#L108\">https://github.com/BGR360/propagate/blob/2300fab6bd8670019e8e6c2eabd26558f029a76b/src/result.rs#L108</a></p>\n<p>Makes me glad we finally agreed on wrapping the final value in <code>try</code> blocks <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 257795347,
        "sender_full_name": "scottmcm",
        "timestamp": 1634353647
    },
    {
        "content": "<p><span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 257797676,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1634356022
    },
    {
        "content": "<p>It's been a while since I've updated. At work, I have applied the specializing <code>core::result::Result</code> patch to our Rust fork. All of our third- and first-party crates compile perfectly.</p>\n<p>I am working on the design for a <code>TracedError</code> wrapper that we will use to wrap all of our existing error enums to make them <code>Traced</code>. Using <code>auto_traits</code> and <code>negative_impls</code>, I was able to create blanket <code>From</code> impls that cover all of the necessary <code>?</code>-conversion cases without colliding with the blanket impls in std. This approach could pretty easily turn into a \"user-land\" crate that folks can use on top of the standard library patch to get free tracing for their existing error types.</p>\n<p>Long story short, the future for this approach is very bright, at least for us at Qumulo.</p>\n<p>At the moment, my time is being eaten up as I try to get things in motion for our code base. There's a lot to do since I have to also interoperate with our C errors. Once that has reached a good place, though, I think I might want to rekindle the conversation about making a for realsies RFC.</p>",
        "id": 259563942,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1635531425
    },
    {
        "content": "<p>Oh be careful with negative impls</p>",
        "id": 259564384,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1635531701
    },
    {
        "content": "<p>Their interaction with specialization is currently broken I think</p>",
        "id": 259564409,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1635531717
    },
    {
        "content": "<p>Let me find the thread in wg-traits</p>",
        "id": 259564478,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1635531741
    },
    {
        "content": "<p><a href=\"#narrow/stream/144729-wg-traits/topic/negative.20impls.20in.20coherence\">https://rust-lang.zulipchat.com/#narrow/stream/144729-wg-traits/topic/negative.20impls.20in.20coherence</a></p>",
        "id": 259564550,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1635531782
    },
    {
        "content": "<p>regardless though, I do think it would be a good idea to open a PR to add the Traced trait work you did from your Rust fork to the <code>rust-lang/rust</code> repo on nightly</p>",
        "id": 259564768,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1635531880
    },
    {
        "content": "<p>particularly since we can get the people working on negative-impls to review it and make sure it's all good</p>",
        "id": 259564809,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1635531904
    },
    {
        "content": "<p>Good looking out, I'll take a better look at that thread at some point.</p>\n<p>Implementing the necessary Froms could be done using a proc macro instead, but using auto_traits and negative_impls was just easier. But yeah if there's an issue, then there's other ways to achieve the behavior.</p>\n<p>Could it really just be as simple as a PR? I would have thought changes like this would have to go through some sort of RFC before being put into nightly</p>",
        "id": 259567775,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1635533368
    },
    {
        "content": "<p>Yea, for nightly features we only do an RFC if a team member feels it's necessary</p>",
        "id": 259568856,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1635533958
    },
    {
        "content": "<p>And even then having the pr open first doesn't hurt anything</p>",
        "id": 259568874,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1635533970
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/governance/blob/master/teams/libs/subteam-api.md#making-changes-to-the-standard-libraries\">https://github.com/rust-lang/governance/blob/master/teams/libs/subteam-api.md#making-changes-to-the-standard-libraries</a></p>",
        "id": 259568976,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1635534012
    },
    {
        "content": "<p>I got the <code>TracedError</code> wrapper working at work. Encountered no issue with <code>negative_impls</code> messing with specialization. I converted a small portion of our code to start using it, and the conversion was painless but monotonous. Most changes ended up being in test code (had to add a lot of <code>.unwrap_err().into_inner()</code>). </p>\n<p>I've started replicating the design into a new crate. Taking inspiration from <code>eyre</code>, I've dubbed this crate <code>tres</code>: <a href=\"https://github.com/BGR360/tres\">https://github.com/BGR360/tres</a>. The meat of it is all there, with pretty good documentation.</p>\n<p>I think <code>tres</code> could become a generally useful crate. It would very easily pair with <code>thiserror</code>, and hopefully with <code>eyre</code> too, but I have yet to think that through.</p>\n<p>For the time being, it comes with a companion crate, <code>tres-result</code>, which provides the specialized <code>Result</code> type that <code>core</code> currently lacks. At some point in the future, users of <code>tres</code> would probably be able to seamlessly switch from <code>tres_result::{Result, Traced}</code> to <code>core::result::{Result, Traced}</code>.</p>\n<p>I also want to make it easy for library developers to add a feature flag to their libraries to let their users choose whether they want to work with traced or untraced errors.</p>\n<p><code>tres</code> could also be used no-std, which is neat.</p>",
        "id": 260623253,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1636357684
    },
    {
        "content": "<p>Some remaining work to do for <code>tres</code>, in no particular order:</p>\n<ul>\n<li>make a companion crate <code>tres-lint</code> which provides a lint to detect missing <code>Ok(..?)</code></li>\n<li>add an optional feature to get function names from <code>panic::Location</code>s using DWARF information (I think this should be possible, we want to do a similar thing at work)</li>\n<li>examples, examples, examples</li>\n<li>add a <code>ResultExt</code> extension trait to provide helpful methods like <code>map_inner_err()</code> and <code>unwrap_inner_err()</code> to <code>Result&lt;T, TracedError&lt;E&gt;&gt;</code></li>\n<li>add no-std support</li>\n<li>add a way for library developers to optionally provide traced errors from their libraries</li>\n</ul>",
        "id": 260623304,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1636357766
    },
    {
        "content": "<p>That sounds amazing, can't wait to take a look at it</p>",
        "id": 260653880,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1636376816
    },
    {
        "content": "<p>(currently on vacation)</p>",
        "id": 260653893,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1636376823
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"435059\">@Ben Reeves</span> would you like help with any of these tasks? <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 260664838,
        "sender_full_name": "Sean Chen (he/him)",
        "timestamp": 1636382321
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300743\">@Sean Chen (he/him)</span> I think I'll be good for now! But I will keep that offer in my back pocket :)</p>",
        "id": 260696821,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1636395217
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"435059\">Ben Reeves</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/track_caller.20error.20crate/near/260623253\">said</a>:</p>\n<blockquote>\n<p>the conversion was painless</p>\n</blockquote>\n<p>Actually, something to note here. It's true that, <em>once I ironed out the kinks with the auto trait approach</em>, converting the code was pretty painless. However, I ran into a pretty mind-bending compiler error that took me an afternoon to figure out. Once I fixed the issue with my auto traits, converting the code was easy. HOWEVER, anybody writing NEW code can also run into this same unhelpful diagnostic if they accidentally forget a <code>From</code> impl somewhere, and that's pretty bad for usability.</p>\n<p>I filed <a href=\"https://github.com/rust-lang/rust/issues/90665\">this issue</a> and started <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/auto.20traits.20.2B.20specialization.20.3D.20problem.20with.20trait.20selection\">this topic</a> after spending some time digging into the root cause of the unhelpful diagnostic. It hasn't gotten any attention so far (granted, it hasn't even existed for a full weekday yet). But if anybody here has some knowledge of trait selection and/or specialization, or knows how to get the attention of somebody who does, then that'd be super helpful.</p>",
        "id": 260716516,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1636404413
    },
    {
        "content": "<p>trait selection is IMO one of the most complicated parts of the compiler, and there's unfortunately not a ton of experts on it ... maybe <span class=\"user-mention silent\" data-user-id=\"116118\">Matthew Jasper</span> or <span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> would have suggestions</p>",
        "id": 260717996,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636405145
    },
    {
        "content": "<p>To see more concretely how this affects <code>tres</code>, consider this code that compiles correctly if I uncomment the <code>From</code> impl:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">tres</span>::<span class=\"p\">{</span><span class=\"nb\">Err</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Ok</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">TracedError</span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Error</span><span class=\"p\">(</span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"cm\">/* OOPS I FORGOT TO WRITE THIS FROM IMPL</span>\n<span class=\"cm\">impl&lt;T: ToString&gt; From&lt;T&gt; for Error {</span>\n<span class=\"cm\">    fn from(error: T) -&gt; Self {</span>\n<span class=\"cm\">        Self(error.to_string())</span>\n<span class=\"cm\">    }</span>\n<span class=\"cm\">}</span>\n<span class=\"cm\">*/</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">TracedError</span><span class=\"o\">&lt;</span><span class=\"n\">Error</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">bar</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">TracedError</span><span class=\"o\">&lt;&amp;'</span><span class=\"nb\">static</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">TracedError</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s\">\"Oops!\"</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>As is, the compiler produces the following diagnostic, which hopefully depicts just how \"bad for usability\" this is:</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n   --&gt; examples/bad_diagnostic.rs:14:13\n    |\n13  | / fn foo() -&gt; Result&lt;(), TracedError&lt;Error&gt;&gt; {\n14  | |     Ok(bar()?)\n    | |             ^ cannot use the `?` operator in a function that returns `tres::Result&lt;(), TracedError&lt;Error, Locations&gt;&gt;`\n15  | | }\n    | |_- this function should return `Result` or `Option` to accept `?`\n    |\n    = help: the trait `FromResidual&lt;tres::Result&lt;Infallible, TracedError&lt;&amp;str, Locations&gt;&gt;&gt;` is not implemented for `tres::Result&lt;(), TracedError&lt;Error, Locations&gt;&gt;`\nnote: required by `from_residual`\n   --&gt; /Users/Ben/.rustup/toolchains/nightly-x86_64-apple-darwin/lib/rustlib/src/rust/library/core/src/ops/try_trait.rs:339:5\n    |\n339 |     fn from_residual(residual: R) -&gt; Self;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n</code></pre></div>\n<p>For reference, if I use <code>core::result::Result</code> instead, I get a more helpful message:</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0277]: `?` couldn&#39;t convert the error to `TracedError&lt;Error, Locations&gt;`\n   --&gt; examples/bad_diagnostic.rs:14:13\n    |\n13  | fn foo() -&gt; Result&lt;(), TracedError&lt;Error&gt;&gt; {\n    |             ------------------------------ expected `TracedError&lt;Error, Locations&gt;` because of this\n14  |     Ok(bar()?)\n    |             ^ the trait `From&lt;TracedError&lt;&amp;str, Locations&gt;&gt;` is not implemented for `TracedError&lt;Error, Locations&gt;`\n    |\n    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\n    = help: the following implementations were found:\n              &lt;TracedError&lt;F, T&gt; as From&lt;E&gt;&gt;\n              &lt;TracedError&lt;F, T&gt; as From&lt;TracedError&lt;E, T&gt;&gt;&gt;\n    = note: required because of the requirements on the impl of `FromResidual&lt;std::result::Result&lt;Infallible, TracedError&lt;&amp;str, Locations&gt;&gt;&gt;` for `std::result::Result&lt;(), TracedError&lt;Error, Locations&gt;&gt;`\nnote: required by `from_residual`\n   --&gt; /Users/Ben/.rustup/toolchains/nightly-x86_64-apple-darwin/lib/rustlib/src/rust/library/core/src/ops/try_trait.rs:339:5\n    |\n339 |     fn from_residual(residual: R) -&gt; Self;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n</code></pre></div>\n<p>That message could also be improved, but seems workable, as it mentions the core issue (missing a <code>From</code> somewhere).</p>",
        "id": 260720556,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1636406446
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/track_caller.20error.20crate/near/260717996\">said</a>:</p>\n<blockquote>\n<p>trait selection is IMO one of the most complicated parts of the compiler, and there's unfortunately not a ton of experts on it ... maybe <span class=\"user-mention silent\" data-user-id=\"116118\">Matthew Jasper</span> or <span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> would have suggestions</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> thank you for the pointer. That at least validates why I felt so overwhelmed trying to understand it <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span>.</p>\n<p>On a scale from \"Please Do\" to \"Niko Hates His Life\", how hesitant should I feel about pinging those parties regarding this issue?</p>",
        "id": 260721240,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1636406785
    },
    {
        "content": "<p>\"probably fine to ping, but could be several days before you get a response\"</p>",
        "id": 260721647,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636407011
    }
]