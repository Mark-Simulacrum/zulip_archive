[
    {
        "content": "<p>This is maybe a problem for the language/compiler, not just libs, but I would really like to see better error reporting for stack overflows:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">im_a_functional_programmer</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">im_a_functional_programmer</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">im_a_functional_programmer</span><span class=\"p\">(</span><span class=\"mi\">100000000</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>$ cargo run\n   Compiling rust-test v0.1.0 (/home/mario/Documents/rust-test)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.21s\n     Running `target/debug/rust-test`\n\nthread &#39;main&#39; has overflowed its stack\nfatal runtime error: stack overflow\nfish: “cargo run” terminated by signal SIGABRT (Abort)\n</code></pre></div>\n<p>In particular, it is really important to get a stack trace to debug stack overflows! Rust is great about this <em>except</em> when the error is a stack overflow.</p>",
        "id": 227717284,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614228427
    },
    {
        "content": "<p>There are also lots of cool things you can do with a stack trace for stack overflows like identify the cycle and present only that, rather than a mile long stack trace</p>",
        "id": 227717488,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614228602
    },
    {
        "content": "<p>this is done with <code>backtrace-rs</code>https://docs.rs/backtrace/0.3.56/backtrace/</p>",
        "id": 227717741,
        "sender_full_name": "oliver",
        "timestamp": 1614228842
    },
    {
        "content": "<p>the idea is to define a <code>Backtrace</code> trait in core and std</p>",
        "id": 227717929,
        "sender_full_name": "oliver",
        "timestamp": 1614229025
    },
    {
        "content": "<p>Which part? The cycle detection?</p>",
        "id": 227717938,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614229033
    },
    {
        "content": "<p>the stack tracing</p>",
        "id": 227717958,
        "sender_full_name": "oliver",
        "timestamp": 1614229059
    },
    {
        "content": "<p>Even if you hit stack overflow? My impression is that rust just aborts on this condition and there is no space for a lib to run any code</p>",
        "id": 227718091,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614229123
    },
    {
        "content": "<p>im not sure how stack overflows are handled</p>",
        "id": 227718125,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614229152
    },
    {
        "content": "<p>I do think that <code>backtrace-rs</code> can do the capture</p>",
        "id": 227718141,
        "sender_full_name": "oliver",
        "timestamp": 1614229164
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281739\">oliver</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/Stack.20overflow.20errors/near/227718141\">said</a>:</p>\n<blockquote>\n<p>I do think that <code>backtrace-rs</code> can do the capture</p>\n</blockquote>\n<p>i dont think that's the issue</p>",
        "id": 227718165,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614229188
    },
    {
        "content": "<p>well, prior art then</p>",
        "id": 227718179,
        "sender_full_name": "oliver",
        "timestamp": 1614229201
    },
    {
        "content": "<p>no i mean, during a stack overflow</p>",
        "id": 227718225,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614229207
    },
    {
        "content": "<p>you have no memory with which to run the functions to capture a stacktrace</p>",
        "id": 227718245,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614229215
    },
    {
        "content": "<p>im guessing?</p>",
        "id": 227718247,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614229217
    },
    {
        "content": "<p>tho this doesn't make a lot of sense to me</p>",
        "id": 227718257,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614229228
    },
    {
        "content": "<p>so I need to dig into this more</p>",
        "id": 227718263,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614229235
    },
    {
        "content": "<p>I dont even know if stack overflows trigger the panic handler</p>",
        "id": 227718276,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614229246
    },
    {
        "content": "<p>but it might be as simple as adding the call to backtrace printing used in the panic handler to whatever part of the runtime handles stack overflows</p>",
        "id": 227718331,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614229288
    },
    {
        "content": "<p>it clearly had enough stack space to report the error, so hopefully thats sufficient</p>",
        "id": 227718340,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614229296
    },
    {
        "content": "<p>and the only issue here is that it isn't integrated with that part of the runtime yet</p>",
        "id": 227718349,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614229312
    },
    {
        "content": "<p>This needs compiler support, but it might be possible to allocate a separate stack for the stack overflow handler. Alternatively, if the error type is owned and <code>'static</code> maybe you can just throw the main stack away and reuse it</p>",
        "id": 227718411,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614229333
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/Stack.20overflow.20errors/near/227718411\">said</a>:</p>\n<blockquote>\n<p>This needs compiler support, but it might be possible to allocate a separate stack for the stack overflow handler. Alternatively, if the error type is owned and <code>'static</code> maybe you can just throw the main stack away and reuse it</p>\n</blockquote>\n<p>there shouldn't even necessarly be an error type associated with the overflow right, at least from the user's perspective</p>",
        "id": 227718434,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614229374
    },
    {
        "content": "<p>Who prints <code>fatal runtime error: stack overflow</code>?</p>",
        "id": 227718435,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614229374
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/Stack.20overflow.20errors/near/227718435\">said</a>:</p>\n<blockquote>\n<p>Who prints <code>fatal runtime error: stack overflow</code>?</p>\n</blockquote>\n<p>checking now</p>",
        "id": 227718439,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614229382
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[allow(dead_code)]</span><span class=\"w\"> </span><span class=\"c1\">// stack overflow detection not enabled on all platforms</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">report_overflow</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">dumb_print</span><span class=\"p\">(</span><span class=\"fm\">format_args!</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">thread '{}' has overflowed its stack</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">thread</span>::<span class=\"n\">current</span><span class=\"p\">().</span><span class=\"n\">name</span><span class=\"p\">().</span><span class=\"n\">unwrap_or</span><span class=\"p\">(</span><span class=\"s\">\"&lt;unknown&gt;\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 227718481,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614229395
    },
    {
        "content": "<p>from std/src/sys_common/util.rs</p>",
        "id": 227718492,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614229403
    },
    {
        "content": "<p>Which is called from <a href=\"https://github.com/rust-lang/rust/blob/master/library/std/src/sys/unix/stack_overflow.rs#L105\">https://github.com/rust-lang/rust/blob/master/library/std/src/sys/unix/stack_overflow.rs#L105</a></p>",
        "id": 227718601,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614229501
    },
    {
        "content": "<p>and the windows one</p>",
        "id": 227718613,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614229507
    },
    {
        "content": "<p>yea</p>",
        "id": 227718616,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614229507
    },
    {
        "content": "<p>i think I know why this is not working</p>",
        "id": 227718666,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614229549
    },
    {
        "content": "<p>or i mean</p>",
        "id": 227718668,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614229552
    },
    {
        "content": "<p>why we can't do this from stack overflows yet</p>",
        "id": 227718673,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614229558
    },
    {
        "content": "<p>wait</p>",
        "id": 227718714,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614229565
    },
    {
        "content": "<p>no...</p>",
        "id": 227718718,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614229567
    },
    {
        "content": "<p>this is std code</p>",
        "id": 227718722,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614229569
    },
    {
        "content": "<p>ignore me</p>",
        "id": 227718739,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614229582
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"271719\">@Mario Carneiro</span> you should try grabbing the panic code from <code>default_hook</code></p>",
        "id": 227718883,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614229684
    },
    {
        "content": "<p>and put it into <code>report_overflow</code>, see what happens</p>",
        "id": 227718897,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614229692
    },
    {
        "content": "<p>backtrace code*</p>",
        "id": 227718902,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614229701
    },
    {
        "content": "<p>not panic</p>",
        "id": 227718903,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614229702
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">backtrace_env</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">panic_count</span>::<span class=\"n\">get</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">&gt;=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">RustBacktrace</span>::<span class=\"n\">Print</span><span class=\"p\">(</span><span class=\"k\">crate</span>::<span class=\"n\">backtrace_rs</span>::<span class=\"n\">PrintFmt</span>::<span class=\"n\">Full</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">backtrace</span>::<span class=\"n\">rust_backtrace_env</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 227718911,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614229711
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">backtrace_env</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">RustBacktrace</span>::<span class=\"n\">Print</span><span class=\"p\">(</span><span class=\"n\">format</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">drop</span><span class=\"p\">(</span><span class=\"n\">backtrace</span>::<span class=\"n\">print</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">format</span><span class=\"p\">)),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">RustBacktrace</span>::<span class=\"n\">Disabled</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">RustBacktrace</span>::<span class=\"n\">RuntimeDisabled</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">FIRST_PANIC</span><span class=\"p\">.</span><span class=\"n\">swap</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Ordering</span>::<span class=\"n\">SeqCst</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"fm\">writeln!</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">err</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"s\">\"note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\"</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 227718922,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614229723
    },
    {
        "content": "<blockquote>\n<p>there shouldn't even necessarly be an error type associated with the overflow right, at least from the user's perspective</p>\n</blockquote>\n<p>You're right. We still have to do some forensics on the main stack to work out the backtrace but I think we can just throw the stack away and reuse it if we need space for nice printing</p>",
        "id": 227718931,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614229729
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/Stack.20overflow.20errors/near/227718931\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>there shouldn't even necessarly be an error type associated with the overflow right, at least from the user's perspective</p>\n</blockquote>\n<p>You're right. We still have to do some forensics on the main stack to work out the backtrace but I think we can just throw the stack away and reuse it if we need space for nice printing</p>\n</blockquote>\n<p>messing with the stack is a bit lower level than I'm familiar with</p>",
        "id": 227718958,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614229756
    },
    {
        "content": "<p>might be good to bring this up with the compiler team</p>",
        "id": 227718969,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614229767
    },
    {
        "content": "<p>I assume that's what backtrace-rs is doing</p>",
        "id": 227718970,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614229769
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/Stack.20overflow.20errors/near/227718970\">said</a>:</p>\n<blockquote>\n<p>I assume that's what backtrace-rs is doing</p>\n</blockquote>\n<p>I think backtrace-rs calls into libunwind</p>",
        "id": 227718991,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614229796
    },
    {
        "content": "<p>or w/e its called</p>",
        "id": 227718994,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614229798
    },
    {
        "content": "<p>I haven't even tried modifying std before <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 227718998,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614229801
    },
    {
        "content": "<p>at least on unix</p>",
        "id": 227719000,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614229802
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/Stack.20overflow.20errors/near/227718998\">said</a>:</p>\n<blockquote>\n<p>I haven't even tried modifying std before <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>\n</blockquote>\n<p>first time! woo!</p>",
        "id": 227719056,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614229811
    },
    {
        "content": "<p>rustc-dev-guide makes it pretty easy to get started</p>",
        "id": 227719070,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614229823
    },
    {
        "content": "<p>I need to figure out how rust signal handlers work. Surely we need some stack space just for that, since it's not written in assembler</p>",
        "id": 227719157,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614229919
    },
    {
        "content": "<p>like are we just hoping the compiler can inline and eliminate all locals?</p>",
        "id": 227719219,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614229941
    },
    {
        "content": "<p>/shrug</p>",
        "id": 227719223,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614229950
    },
    {
        "content": "<p>I wish I knew or could respond to these questions</p>",
        "id": 227719232,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614229970
    },
    {
        "content": "<p>but yea</p>",
        "id": 227719237,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614229975
    },
    {
        "content": "<p>Oh, actually a bit later in that file there is <code>NEED_ALTSTACK</code> and <code>sigaltstack</code>, so it sounds like there is a stack being allocated just for the signal handler</p>",
        "id": 227719383,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614230071
    },
    {
        "content": "<p>fancy</p>",
        "id": 227719395,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614230093
    },
    {
        "content": "<p>in which case there should be enough to print a basic stack trace, assuming no user code is called</p>",
        "id": 227719399,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614230098
    },
    {
        "content": "<p>do it do it do it</p>",
        "id": 227719413,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614230106
    },
    {
        "content": "<p>Don't know if this link will be of benefit to the conversation on \"stack overflow errors\" but I found this link for debugging the issue specifically for a mac:  <a href=\"https://dev.to/jasonelwood/setup-gdb-on-macos-in-2020-489k\">https://dev.to/jasonelwood/setup-gdb-on-macos-in-2020-489k</a></p>",
        "id": 227723827,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1614234382
    },
    {
        "content": "<p>gdb is a useful tool (and lldb) but for stack overflows they would not help too much (just point to the place that overflows)</p>",
        "id": 227729759,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1614239115
    },
    {
        "content": "<p>and yeah, stack overflows with a backtrace would be useful (though for recursive calls we would get a long backtrace of almost useless info)</p>",
        "id": 227729895,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1614239210
    },
    {
        "content": "<p>maybe we should skip printing the long backtrace after e.g. 3 same func calls?</p>",
        "id": 227729932,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1614239245
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"344196\">@Jakub Duchniewicz</span>  Thanks.  I'll file that info away <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 227730080,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1614239350
    },
    {
        "content": "<p>and ping me if you need help with using gdb, it can be pretty overwhelming at first glance (and is pretty powerful - even has TUI mode with -tui flag!)</p>",
        "id": 227730190,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1614239428
    },
    {
        "content": "<p>Thanks, I'll keep that offer in mind but I know absolutely nothing about stack overflows.  I just researched it and came across gdb and thought it might be of assistance to those looking into the issue.</p>",
        "id": 227730545,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1614239724
    },
    {
        "content": "<p>stack overflow produces as bad messages as they do now because you cannot really allocate anything on stack if you want to have any success of reporting the overflow</p>",
        "id": 227765845,
        "sender_full_name": "nagisa",
        "timestamp": 1614259506
    },
    {
        "content": "<p>separate stacks for signal handlers are not universal.</p>",
        "id": 227765913,
        "sender_full_name": "nagisa",
        "timestamp": 1614259534
    },
    {
        "content": "<p>If my memory serves me right, anyway.</p>",
        "id": 227766054,
        "sender_full_name": "nagisa",
        "timestamp": 1614259581
    },
    {
        "content": "<p>This also reminds me that people were complaining in the past that we don't always print \"stack overflowed\" message when there's an actual stack overflow. Our policy was always that this detection is on a best-effort basis. And if we start doing more (printing stack traces), people will have further expectations.</p>",
        "id": 227766366,
        "sender_full_name": "nagisa",
        "timestamp": 1614259713
    },
    {
        "content": "<p>I wonder if it wouldn't make sense to print out more information on any fault in that case.</p>",
        "id": 227766595,
        "sender_full_name": "nagisa",
        "timestamp": 1614259834
    },
    {
        "content": "<p>like go runtime IIRC prints stack trace, register values etc on sigquit too.</p>",
        "id": 227766636,
        "sender_full_name": "nagisa",
        "timestamp": 1614259854
    },
    {
        "content": "<p>I think it's okay if the enhanced stack overflow support is also best effort (but hopefully at least works on tier 1)</p>",
        "id": 227766861,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614259941
    },
    {
        "content": "<p>you can't always figure out if a fault was caused by a stack overflow in the first place, even on T1 targets.</p>",
        "id": 227766998,
        "sender_full_name": "nagisa",
        "timestamp": 1614260013
    },
    {
        "content": "<p>The currently implemented method (watching for a guard page access) seems to be fairly reliable, although it has issues if you have really large stack frames</p>",
        "id": 227767145,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614260073
    },
    {
        "content": "<p>but possibly the compiler can do some special handling for that - most C compilers already have to probe the stack when you put a giant array on the stack or use alloca to ensure that the guard page is hit</p>",
        "id": 227767297,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614260141
    },
    {
        "content": "<p>I would assume rust gets that for free via LLVM</p>",
        "id": 227767391,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614260170
    },
    {
        "content": "<p>but that doesn't necessarily work on embedded targets without a guard page</p>",
        "id": 227767426,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614260191
    },
    {
        "content": "<p>I don't remember exact particularities, but it doesn't always work despite the probe.See e.g. <a href=\"https://users.rust-lang.org/t/is-rust-guaranteed-to-detect-stack-overflows/52593\">https://users.rust-lang.org/t/is-rust-guaranteed-to-detect-stack-overflows/52593</a></p>",
        "id": 227768632,
        "sender_full_name": "nagisa",
        "timestamp": 1614260740
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/Stack.20overflow.20errors/near/227765845\">said</a>:</p>\n<blockquote>\n<p>stack overflow produces as bad messages as they do now because you cannot really allocate anything on stack if you want to have any success of reporting the overflow</p>\n</blockquote>\n<p>I think the interface for backtrace printing used in panics is currently non-allocating though, so this might be fine?</p>",
        "id": 227806289,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614274663
    },
    {
        "content": "<p>Hello - May you send me the audio link?  I thought I had it from the previous meeting...</p>",
        "id": 227819232,
        "sender_full_name": "Edmund Cape",
        "timestamp": 1614279881
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/Stack.20overflow.20errors/near/227718125\">said</a>:</p>\n<blockquote>\n<p>im not sure how stack overflows are handled</p>\n</blockquote>\n<p>there's a stack guard I think</p>",
        "id": 227877392,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614310515
    },
    {
        "content": "<p>oh sorry <span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> already explained it better than I could</p>",
        "id": 227877432,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614310554
    }
]