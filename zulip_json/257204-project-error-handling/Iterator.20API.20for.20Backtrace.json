[
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"204346\">@Ashley Mannix</span>, if we want to get the ball rolling on implementing an iterator API for the <code>Backtrace</code> type, what would the first steps be for that? <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 212763829,
        "sender_full_name": "Sean Chen (he/him)",
        "timestamp": 1602201423
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"300743\">@Sean Chen</span>! Sorry for the late reply <span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span> I was on leave last week. Are you talking about an iterator over the frames in the backtrace itself?</p>",
        "id": 213068641,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1602525587
    },
    {
        "content": "<p>yes</p>",
        "id": 213068707,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602525608
    },
    {
        "content": "<p>Following up on this task. From last week‚Äôs meeting we mentioned that we could look into simply re-exporting the <code>frames</code> method from the <code>backtrace</code> crate into <code>std</code>. Apologies if this is a bit of an obtuse question, but how should we go about getting the ball rolling on this? üôÇ</p>",
        "id": 214204354,
        "sender_full_name": "Sean Chen (he/him)",
        "timestamp": 1603380809
    },
    {
        "content": "<p>In the minutes doc from the last meeting we wrote down ‚ÄúAdd it as an unstable API to <code>Backtrace</code> without an RFC to start with (just an FCP on the implementation itself)‚Äù. I‚Äôm not sure what an FCP is or how to get one started.</p>",
        "id": 214204535,
        "sender_full_name": "Sean Chen (he/him)",
        "timestamp": 1603380876
    },
    {
        "content": "<p>I think you just need to open a PR</p>",
        "id": 214206226,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603381598
    },
    {
        "content": "<p>and then the FCP is something that a libs team member triggers on the PR</p>",
        "id": 214206262,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603381613
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204346\">@Ashley Mannix</span> correct me if I'm wrong</p>",
        "id": 214206288,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603381626
    },
    {
        "content": "<p>Would that be a PR in <code>std</code> or in the <code>Backtrace</code> crate?</p>",
        "id": 214207194,
        "sender_full_name": "Sean Chen (he/him)",
        "timestamp": 1603382014
    },
    {
        "content": "<p>Sorry! Just catching up on things <span aria-label=\"bow\" class=\"emoji emoji-1f647\" role=\"img\" title=\"bow\">:bow:</span> Yep! Like <span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> mentioned, we'd do a PR to <code>rust-lang/rust</code>'s <code>Backtrace</code> type with an API that looked something like this (pseudo attributes because I never remember the exact syntax off the top of my head):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// This type already exists, but is private</span>\n<span class=\"cp\">#[unstable(feature = </span><span class=\"s\">\"backtrace_frames\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">BacktraceFame</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Backtrace</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// This is a new method. We'll have some semantics to work out (do we return `&amp;[]` when the backtrace is unsupported? Or make it `Option`)?</span>\n<span class=\"w\">    </span><span class=\"cp\">#[unstable(feature = </span><span class=\"s\">\"backtrace_frames\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">frames</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"n\">BacktraceFrame</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 214271014,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1603425169
    },
    {
        "content": "<p>Feel free to open the PR up early <span class=\"user-mention\" data-user-id=\"300743\">@Sean Chen</span> if you like and add a <code>r? @KodrAus</code> comment so it'll assign me and we can work through anything that comes up <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 214271035,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1603425227
    },
    {
        "content": "<p>Or just drop a link and I'll assign myself to it <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 214271083,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1603425250
    },
    {
        "content": "<p>Thanks for the pointers! <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 214315416,
        "sender_full_name": "Sean Chen (he/him)",
        "timestamp": 1603461005
    }
]