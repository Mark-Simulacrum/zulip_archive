[
    {
        "content": "<p>Hello -- I'm wondering whether low-level error handling (specifically POSIX syscall error numbers) is in scope for this group. I'm hoping to get some sort of wrapper-around-u16 defined in either <code>core</code> or a subcrate of <code>std</code> so that it's easier to compose libraries when compiling for targets that can't depend on <code>libc</code>. I started an RFC at <a href=\"https://github.com/rust-lang/rfcs/pull/2973\">https://github.com/rust-lang/rfcs/pull/2973</a> a few weeks ago but it's not attracted any interest from the libs team, and I don't know who is able to drive something like that forward.</p>",
        "id": 210617587,
        "sender_full_name": "John Millikin",
        "timestamp": 1600525361
    },
    {
        "content": "<p>very rough draft at <a href=\"https://github.com/jmillikin/rust-posix-error-numbers\">https://github.com/jmillikin/rust-posix-error-numbers</a> (<a href=\"https://jmillikin.github.io/rust-posix-error-numbers/target/doc/posix_error_numbers/struct.ErrorCode.html\">rustdoc</a>)</p>",
        "id": 210617673,
        "sender_full_name": "John Millikin",
        "timestamp": 1600525464
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"325706\">@John Millikin</span> I remember glancing over this a while ago - I don't think you ever said <em>why</em> you can't depend on libc</p>",
        "id": 210617687,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600525499
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rfcs/pull/2973#issuecomment-671108502\">https://github.com/rust-lang/rfcs/pull/2973#issuecomment-671108502</a></p>",
        "id": 210617693,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600525506
    },
    {
        "content": "<p>I'm using this for targets that don't have libc, either because they're early in the boot process (e.g. a Linux initrd) or because libc is not specified for the platform. I would also like to use this for hacking on systems like Redox which are not based on C.</p>",
        "id": 210617769,
        "sender_full_name": "John Millikin",
        "timestamp": 1600525582
    },
    {
        "content": "<p><code>libc</code>, the C library, is different from <code>libc</code> the crate</p>",
        "id": 210617776,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600525601
    },
    {
        "content": "<p>is the crate not available on those platforms?</p>",
        "id": 210617786,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600525617
    },
    {
        "content": "<p>Many of the comments on that ticket seem to assume that C is the fundamental language of the kernel, which is not true.</p>",
        "id": 210617788,
        "sender_full_name": "John Millikin",
        "timestamp": 1600525619
    },
    {
        "content": "<p>It seems pretty bizarre that I would have to depend on another language's standard library, or stub out its build process, to get a standardized newtype for what is essentially an unsigned integer.</p>",
        "id": 210617860,
        "sender_full_name": "John Millikin",
        "timestamp": 1600525697
    },
    {
        "content": "<p><code>libc</code> the crate does not depend on the <code>libc</code> C library</p>",
        "id": 210617870,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600525720
    },
    {
        "content": "<p>I feel like we're talking at cross-purposes here: the crate basically <em>is</em> the wrapper around native types that you're asking for</p>",
        "id": 210617882,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600525746
    },
    {
        "content": "<p>it just has an unfortunate name</p>",
        "id": 210617886,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600525751
    },
    {
        "content": "<p>The <code>libc</code> crate is also a wrapper for the C standard library, in whatever form that takes on the current platform.</p>",
        "id": 210617905,
        "sender_full_name": "John Millikin",
        "timestamp": 1600525793
    },
    {
        "content": "<p>If the solution is to move the definition of non-C platform types such as error codes out of libc into its own crate, that seems like a fine solution.</p>",
        "id": 210617958,
        "sender_full_name": "John Millikin",
        "timestamp": 1600525819
    },
    {
        "content": "<p>The main benefit of the newtype is that it simplifies comparisons -- I can take a <code>isize</code> from the kernel, and a <code>u32</code> from a spec sheet, and compare them both to the same constant type-safely.</p>",
        "id": 210617986,
        "sender_full_name": "John Millikin",
        "timestamp": 1600525867
    },
    {
        "content": "<p>It is 23:30 in my timezone so I'm not going to be able to chat much now, but if there's any way I can help move that proposal along I'd be happy to help. The only thing I really don't want to do is maintain a <code>posix_error_numbers</code> crate on <a href=\"http://crates.io\">crates.io</a>, because that seems like an unbounded amount of work to keep such a crate up to date with rustc as people contribute new targets.</p>",
        "id": 210618078,
        "sender_full_name": "John Millikin",
        "timestamp": 1600526011
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"325706\">@John Millikin</span> absolutely, feel free to create an issue to track this in the project group repo and join the meetings to help drive work on it</p>",
        "id": 210633961,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600547593
    },
    {
        "content": "<p>I've not given much thought to error codes and I have other tasks that I'd like to drive first personally but I think we can definitely work together to provide feedback on any work you do etc etc</p>",
        "id": 210633971,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600547635
    },
    {
        "content": "<blockquote>\n<div class=\"codehilite\"><pre><span></span><code>Defining and codifying common error handling terminology.\nGenerating consensus on current error handling best practices.\nIdentifying pain points that exist in Rust’s error handling story.\nCommunicating current error handling best practices.\nConsolidating the Rust error handling ecosystem.\n</code></pre></div>\n\n\n</blockquote>\n<p>I think it is definitely within the project group's scope to think about low-level error-handling, even if only because of \"identifying pain points\". I have also seen people who have concerns about systems that are embedded but want to be able to provide and use the Vec API without panicking in the case of overallocation. (this overlaps with wg-alloc).</p>\n<p>Not normally a concern because most people will never allocate anywhere near an isize, nevermind over... but then when you have the entire system resources to yourself because you <em>are</em> the system...</p>",
        "id": 210641945,
        "sender_full_name": "Jubilee",
        "timestamp": 1600561517
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/Is.20low-level.20OS.20error.20handling.20in.20scope.20for.20this.20group.3F/near/210641945\">said</a>:</p>\n<blockquote>\n<p>most people will never allocate anywhere near an isize, nevermind over...</p>\n</blockquote>\n<p>remember that on AVR , <code>usize</code> == <code>u16</code>, so <code>i16</code> isn't an outrageous number of elements</p>",
        "id": 210642013,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1600561621
    },
    {
        "content": "<p>and note that an allocation size in <em>bytes</em> cannot exceed isize::MAX</p>",
        "id": 210642237,
        "sender_full_name": "Lokathor",
        "timestamp": 1600562045
    },
    {
        "content": "<p>Yeaaaah.</p>\n<p>I have given more thought to the POSIX types thing myself, having recently seen how mazy that can get as part of e.g. updating the wasm targets, and I do agree that basic bindings to the system that don't _have_ to go through libc probably should not be in that crate. If it's true now that the libc crate can currently be used without depending on the actual libc, then that's Fine But Weird, Frankly, because that doesn't really suggest a promise that such will remain true.</p>",
        "id": 210642354,
        "sender_full_name": "Jubilee",
        "timestamp": 1600562348
    },
    {
        "content": "<blockquote>\n<p>low-level error handling (specifically POSIX syscall error numbers)</p>\n</blockquote>\n<p>My 2¢ is that low-level makes sense for the group, but that POSIX is a combination of \"too high\" and \"too platform specific\".</p>",
        "id": 210642457,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1600562552
    },
    {
        "content": "<p>Yeah, I would expect a sensible result to be a little more like \"produce a recommendation/guidance/motivation for further approaches to the issue\" rather than \"do something terribly particular\".</p>",
        "id": 210642636,
        "sender_full_name": "Jubilee",
        "timestamp": 1600562900
    },
    {
        "content": "<p><strong>Joshua Nelson</strong> <a href=\"#narrow/stream/257204-project-error-handling/topic/Is.20low-level.20OS.20error.20handling.20in.20scope.20for.20this.20group.3F/near/210617870\">said</a>:</p>\n<blockquote>\n<p><code>libc</code> the crate does not depend on the <code>libc</code> C library</p>\n</blockquote>\n<p><a href=\"https://github.com/rust-lang/rfcs/pull/2973#issuecomment-671108502\">This seems to have been communicated to OP already</a>, but perhaps they missed it.</p>\n<p><strong>John Millikin</strong> <a href=\"#narrow/stream/257204-project-error-handling/topic/Is.20low-level.20OS.20error.20handling.20in.20scope.20for.20this.20group.3F/near/210618078\">said</a>:</p>\n<blockquote>\n<p>I really don't want to do is maintain a <code>posix_error_numbers</code> crate on <a href=\"http://crates.io\">crates.io</a>, because that seems like an unbounded amount of work to keep such a crate up to date with rustc as people contribute new targets.</p>\n</blockquote>\n<p>I agree with <a href=\"https://github.com/rust-lang/rfcs/pull/2973#issuecomment-671053937\">sfackler's comment</a>  in reference to this point.</p>",
        "id": 210642638,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1600562912
    },
    {
        "content": "<p>Thanks! I've filed a tracking issue at <a href=\"https://github.com/rust-lang/project-error-handling/issues/7\">https://github.com/rust-lang/project-error-handling/issues/7</a>, and will try to attend meetings if timezones permit.</p>",
        "id": 210643958,
        "sender_full_name": "John Millikin",
        "timestamp": 1600565672
    },
    {
        "content": "<p>Might it make sense to pull the error codes into a crate that libc depends on, but that other crates can also depend on? That's the direction that C types might go in the future.</p>",
        "id": 210651591,
        "sender_full_name": "Lokathor",
        "timestamp": 1600581912
    },
    {
        "content": "<blockquote>\n<p>That's the direction that C types might go in the future.</p>\n</blockquote>\n<p>are you talking about <code>libc</code> or about <code>target_lexicon</code>?</p>",
        "id": 210665667,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600606143
    },
    {
        "content": "<p>libc is working on making cty a dependency which it just publicly re-exports</p>",
        "id": 210669946,
        "sender_full_name": "Lokathor",
        "timestamp": 1600613185
    }
]