[
    {
        "content": "<p>Hello, this is a ping from wg-triage, what's the next steps on this PR?</p>",
        "id": 210506511,
        "sender_full_name": "Charles Lew",
        "timestamp": 1600428849
    },
    {
        "content": "<p>That PR is: <a href=\"https://github.com/rust-lang/rust/pull/75180\">https://github.com/rust-lang/rust/pull/75180</a></p>",
        "id": 210508254,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1600430147
    },
    {
        "content": "<p>It adds <code>impl&lt;â€˜a, T: ?Sized + Error&gt; Error for &amp;â€™a T</code></p>",
        "id": 210508351,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1600430197
    },
    {
        "content": "<p>Thereâ€™s a crater run in the PR that shows a handful of error crates regressing</p>",
        "id": 210508444,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1600430265
    },
    {
        "content": "<p>I think the next steps are deciding whether itâ€™s a change we want, to fill one of the gaps that makes <code>impl Error</code> a mostly useless generic bound, and whether we want to do it this way our through some other API</p>",
        "id": 210508687,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1600430404
    },
    {
        "content": "<p>I was hoping to bring it up in one of the groupâ€™s meetings ðŸ˜„</p>",
        "id": 210508921,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1600430572
    },
    {
        "content": "<p>If I understand the PR correctly, SNAFU works around this via <a href=\"https://docs.rs/snafu/0.6.8/snafu/trait.AsErrorSource.html\">https://docs.rs/snafu/0.6.8/snafu/trait.AsErrorSource.html</a></p>",
        "id": 210522938,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1600437923
    },
    {
        "content": "<p>Ah thatâ€™s interesting ðŸ¤” Is that so you can have generic <code>impl AsErrorSource</code>s that covers both <code>impl Error</code> and <code>dyn Error</code>?</p>",
        "id": 210527183,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1600439665
    },
    {
        "content": "<p>That must be one of the regressions too</p>",
        "id": 210527282,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1600439713
    },
    {
        "content": "<p>SNAFU did not appear in the regression list, AFAICT.</p>",
        "id": 210528571,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1600440251
    },
    {
        "content": "<p>cool</p>",
        "id": 210536942,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600443460
    },
    {
        "content": "<p>&lt;deleted&gt;</p>",
        "id": 210537114,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600443530
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204346\">@Ashley Mannix</span> im betting this has already been tried and theres a good reason this isnt possible but do you know if it would be possible to use AsRef here?</p>",
        "id": 210541306,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600445371
    },
    {
        "content": "<p>oh wait, no people can probably implement <code>AsRef&lt;dyn Error&gt;</code> for their local types already so that wont work at all</p>",
        "id": 210543728,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600446451
    }
]