[
    {
        "content": "<p>Meeting time soon</p>",
        "id": 259004541,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1635188304
    },
    {
        "content": "<p>agenda: <a href=\"https://hackmd.io/@rust-libs/BywtRd4It\">https://hackmd.io/@rust-libs/BywtRd4It</a></p>",
        "id": 259004633,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1635188362
    },
    {
        "content": "<p>some exciting updates today!</p>",
        "id": 259004648,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1635188369
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/project-error-handling/issues/3\">https://github.com/rust-lang/project-error-handling/issues/3</a></p>",
        "id": 259004826,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1635188435
    },
    {
        "content": "<p>cool</p>",
        "id": 259004840,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1635188441
    },
    {
        "content": "<p>the PR adding support for negative traits to coherence has merged</p>",
        "id": 259004845,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1635188445
    },
    {
        "content": "<p>so now we should just need to sort out the issues around <code>fn backtrace</code> to get <code>Error</code> moved into core</p>",
        "id": 259004902,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1635188469
    },
    {
        "content": "<p>so the next priority will be landing generic member access</p>",
        "id": 259004913,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1635188477
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256841\">@Nick Cameron</span> lmk if you're not going to be able to work on that soon, if so I'd like to take over the RFC / PR adding it</p>",
        "id": 259004957,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1635188503
    },
    {
        "content": "<p>since I see generic member access as the best path forward</p>",
        "id": 259004992,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1635188519
    },
    {
        "content": "<p>we should try to land that, then create a migration plan for removing <code>fn backtrace</code> from nightly and moving <code>Error</code> into core</p>",
        "id": 259005068,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1635188536
    },
    {
        "content": "<p>Hey, sorry, my contract/paperwork nonsense has been dragging on, but I'll be back at work from next Monday and will get on the RFC ASAP after that</p>",
        "id": 259005310,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1635188678
    },
    {
        "content": "<p>perfect, thank you Nick!</p>",
        "id": 259005345,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1635188696
    },
    {
        "content": "<p>in related news, we realized that we don't need to start with an RFC for <code>std::error::Report</code> since libs changed their process for adding new unstable APIs, so <span class=\"user-mention\" data-user-id=\"300743\">@Sean Chen (he/him)</span> went ahead and opened a PR adding std::error::Report</p>",
        "id": 259005496,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1635188762
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/90174\">https://github.com/rust-lang/rust/pull/90174</a></p>",
        "id": 259005511,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1635188763
    },
    {
        "content": "<p>working out the bugs right now but we should have that on nightly soon enough</p>",
        "id": 259005562,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1635188788
    },
    {
        "content": "<p>so the plans to create a <code>trial-and-error</code> crate are likely going to just be canceled</p>",
        "id": 259005584,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1635188803
    },
    {
        "content": "<p>since the only experimental APIs it had were for <code>Report</code> and for a <code>Box&lt;dyn Error&gt;</code> alternative</p>",
        "id": 259005621,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1635188823
    },
    {
        "content": "<p>and along those lines, I have a new goal for how to resolve the issues around <code>Box&lt;dyn Error&gt;</code></p>",
        "id": 259005661,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1635188842
    },
    {
        "content": "<p><a href=\"#narrow/stream/219381-t-libs/topic/ThinBox\">https://rust-lang.zulipchat.com/#narrow/stream/219381-t-libs/topic/ThinBox</a></p>",
        "id": 259005680,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1635188851
    },
    {
        "content": "<p>separately the need for a ThinBox type came up which I've started looking into adding as an unstable API</p>",
        "id": 259005714,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1635188872
    },
    {
        "content": "<p>and I realized in that conversation that such a type would be a perfect opportunity to provide a <code>Box</code> type for handling <code>dyn Errors</code> that does actually impl <code>Error</code></p>",
        "id": 259005796,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1635188904
    },
    {
        "content": "<p>while also acting as a thin pointer to the error trait object</p>",
        "id": 259005835,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1635188925
    },
    {
        "content": "<p>which is separately a desirable feature as shown by <code>eyre</code> and <code>anyhow</code>.</p>",
        "id": 259005864,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1635188944
    },
    {
        "content": "<p>so if we do still do <code>trial-and-error</code> it will likely only end up containing the <code>Result</code> type that has the proper <code>FromResidual</code> impls to <code>?</code> arbitrary error types into a <code>ThinBox&lt;dyn Error&gt;</code></p>",
        "id": 259005937,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1635188986
    },
    {
        "content": "<p>since with the proper error impl <code>ThinBox&lt;dyn Error&gt;</code> would not work with <code>?</code> when used with <code>std::result::Result</code></p>",
        "id": 259006011,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1635189007
    },
    {
        "content": "<p>So that's all I've been focused on recently</p>",
        "id": 259006103,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1635189060
    },
    {
        "content": "<p>Sweet. I'm continuing to work on Mara's feedback on the <code>std::error::Report</code> PR. Afterwards, I'm keen to help out with the other tasks you have on the docket <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 259007101,
        "sender_full_name": "Sean Chen (he/him)",
        "timestamp": 1635189574
    },
    {
        "content": "<p>I'm open to getting my feet wet in any way I can</p>",
        "id": 259008000,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1635189981
    }
]