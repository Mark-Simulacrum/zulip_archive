[
    {
        "content": "<p>This is a general thread for items directly related to The Rust Error Book. (title pending)</p>",
        "id": 211558799,
        "sender_full_name": "must-compute",
        "timestamp": 1601332264
    },
    {
        "content": "<p>I created an mdbook repo here: <a href=\"https://github.com/must-compute/the-rust-error-book\">https://github.com/must-compute/the-rust-error-book</a></p>",
        "id": 211558833,
        "sender_full_name": "must-compute",
        "timestamp": 1601332288
    },
    {
        "content": "<p>I'd like to transfer ownership to the official team account</p>",
        "id": 211558923,
        "sender_full_name": "must-compute",
        "timestamp": 1601332328
    },
    {
        "content": "<p>This repo uses the same travis config from the Rust CLI book but with slight modifications</p>",
        "id": 211558951,
        "sender_full_name": "must-compute",
        "timestamp": 1601332348
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"344329\">@must-compute</span> did you see that <span class=\"user-mention\" data-user-id=\"344328\">@Charles Ellis O'Riley Jr.</span> is setting up the book in the <code>project-error-handling</code> repo?</p>",
        "id": 211558961,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601332353
    },
    {
        "content": "<p>Oops I missed that</p>",
        "id": 211558976,
        "sender_full_name": "must-compute",
        "timestamp": 1601332364
    },
    {
        "content": "<p>no worries</p>",
        "id": 211558983,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601332368
    },
    {
        "content": "<p>Isn't tyhis the same error book I was suppose to create?</p>",
        "id": 211558991,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1601332374
    },
    {
        "content": "<p>yea</p>",
        "id": 211558994,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601332378
    },
    {
        "content": "<p>no biggie</p>",
        "id": 211559019,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601332397
    },
    {
        "content": "<p>If he has it started that's ok.  I might of made the same mistake so no biggie <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span></p>",
        "id": 211559109,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1601332444
    },
    {
        "content": "<p>where would you like the book repo hosted <span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> (Should it be within the project group repo or as a separate repo owned by the Rust org?)</p>",
        "id": 211559174,
        "sender_full_name": "must-compute",
        "timestamp": 1601332502
    },
    {
        "content": "<p>within the project group repostitory</p>",
        "id": 211559190,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601332511
    },
    {
        "content": "<p>hmm the infra team provides guidelines for hosting:<br>\n<a href=\"https://forge.rust-lang.org/infra/guidelines/static-websites.html#rust-infrastructure-hosting-for-static-websites\">https://forge.rust-lang.org/infra/guidelines/static-websites.html#rust-infrastructure-hosting-for-static-websites</a></p>",
        "id": 211563778,
        "sender_full_name": "must-compute",
        "timestamp": 1601335810
    },
    {
        "content": "<p>Unless the error handling wg is going to have its repo live and be used forever, the error book should probably get a dedicated repo at some point.</p>",
        "id": 211563945,
        "sender_full_name": "Lokathor",
        "timestamp": 1601335959
    },
    {
        "content": "<p>good point</p>",
        "id": 211563984,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601335998
    },
    {
        "content": "<p>It seems the wg-traits book followed these guidelines when setting up their book. The CLI book followed a different approach</p>",
        "id": 211564024,
        "sender_full_name": "must-compute",
        "timestamp": 1601336042
    },
    {
        "content": "<p>e.g. per these guidelines, our book URL would be <a href=\"http://rust-lang.github.io/repo-name\">rust-lang.github.io/repo-name</a> instead of <a href=\"http://book-name.github.io\">book-name.github.io</a><br>\n(<a href=\"https://rust-lang.github.io/wg-traits/\">https://rust-lang.github.io/wg-traits/</a> vs. <a href=\"https://rust-cli.github.io/book/index.html\">https://rust-cli.github.io/book/index.html</a>)</p>",
        "id": 211564155,
        "sender_full_name": "must-compute",
        "timestamp": 1601336158
    },
    {
        "content": "<p>let's follow the guidelines</p>",
        "id": 211564938,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601336772
    },
    {
        "content": "<p>once we need to publish it permanently we can move it and give it a new home</p>",
        "id": 211564957,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601336791
    },
    {
        "content": "<p>maybe add it to the content of 'rustup doc' like the rustc dev guide</p>",
        "id": 211564979,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601336817
    },
    {
        "content": "<p>but thats way down the line I think</p>",
        "id": 211564995,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601336827
    },
    {
        "content": "<p>So the guidelines specify things like creating a <code>website_config.json</code> file, but I found no occurrences of this file in any rust-lang owned repo on GH.</p>",
        "id": 211565103,
        "sender_full_name": "must-compute",
        "timestamp": 1601336906
    },
    {
        "content": "<p>I created simple a <a href=\"https://github.com/rust-lang/project-error-handling/pull/14\">PR</a> to initialize an mdBook folder for The Rust Error Book. The CI config and any other config files required by the infra team can be added later when needed.</p>",
        "id": 211566848,
        "sender_full_name": "must-compute",
        "timestamp": 1601338243
    },
    {
        "content": "<p>the CLI book was formed in Feb 2018 iirc, the guidelines were written after that</p>",
        "id": 211567019,
        "sender_full_name": "DPC",
        "timestamp": 1601338399
    },
    {
        "content": "<p>For reference, we can base our CI config off of the <a href=\"https://github.com/rust-lang/wg-traits/blob/master/.travis.yml\">one used by wg-traits</a>, which seems to use the steps suggested by the infra guidelines.</p>",
        "id": 211567030,
        "sender_full_name": "must-compute",
        "timestamp": 1601338426
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120823\">@DPC</span> ah I see now.</p>",
        "id": 211567083,
        "sender_full_name": "must-compute",
        "timestamp": 1601338451
    },
    {
        "content": "<p>makes sense, thanks for clarifying!</p>",
        "id": 211567172,
        "sender_full_name": "must-compute",
        "timestamp": 1601338514
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"344329\">@must-compute</span> turns out we had a .github workflow setup already? <a href=\"https://github.com/rust-lang/project-error-handling/runs/1179765271?check_suite_focus=true\">https://github.com/rust-lang/project-error-handling/runs/1179765271?check_suite_focus=true</a></p>",
        "id": 211572638,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601344372
    },
    {
        "content": "<p>your PR triggered a build failure after merge</p>",
        "id": 211572661,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601344398
    },
    {
        "content": "<p>ah I should've checked first</p>",
        "id": 211573440,
        "sender_full_name": "must-compute",
        "timestamp": 1601345279
    },
    {
        "content": "<p>So if I understand this correctly, we can setup CI to build the book, which should  resolve the workflow failure. Alternatively, we can disable the <code>deploy-mdbook</code> Github workflow until we set up CI to build the book. I vote for the latter option because there is no benefit in publicly deploying a book when it's far from finished.</p>",
        "id": 211573730,
        "sender_full_name": "must-compute",
        "timestamp": 1601345598
    },
    {
        "content": "<p>sounds good, disable-away</p>",
        "id": 211573792,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601345660
    },
    {
        "content": "<p>This <a href=\"https://github.com/rust-lang/project-error-handling/pull/15\">PR</a> should hopefully disable the <code>deploy-mdbook</code> workflow. I don't normally use Github workflows so I'm not 100% sure this will do the trick. The workflow never got triggered in my fork for some reason.</p>\n<p>(I'll figure it out tomorrow)</p>",
        "id": 211574747,
        "sender_full_name": "must-compute",
        "timestamp": 1601346980
    },
    {
        "content": "<p>fingers crossed</p>",
        "id": 211574779,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601347029
    },
    {
        "content": "<p>is the GH CI working?</p>",
        "id": 211589457,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1601365405
    },
    {
        "content": "<p>ah I see that most other wg's base on <a href=\"https://github.com/rust-lang/simpleinfra/blob/master/travis-configs/static-websites.yml\">https://github.com/rust-lang/simpleinfra/blob/master/travis-configs/static-websites.yml</a></p>",
        "id": 211590155,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1601366041
    },
    {
        "content": "<p>we could either rewrite it to be compatible with GH pages or just stick with the old tested method</p>",
        "id": 211590237,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1601366072
    },
    {
        "content": "<p>Are the other wg’s using GH pages or the old tested methods?</p>",
        "id": 211650947,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1601398751
    },
    {
        "content": "<p>If all the different books were to be combined into one, and we elected to do it in GH pages, would it be compatible with the “old tested methods”?</p>",
        "id": 211651842,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1601399080
    },
    {
        "content": "<p>I see that <span class=\"user-mention\" data-user-id=\"344329\">@must-compute</span>  did it using an already existing workflow from GH actions marketplace. Does it work? If so then the topic is probably closed :)</p>",
        "id": 211654526,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1601400220
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"344196\">@Jakub Duchniewicz</span> the workflow was already a part of the repo before I added the book folder. The workflow is a part of the <a href=\"https://github.com/rust-lang/project-group-template\">rust-lang project group template</a>, which is what our project-error-handling repo was initially forked from.</p>\n<p>The project group template is designed to serve the entire repo as an mdbook, but we wanted to contain the book in its own folder instead, and not to build/publish it until enough content is added (hence disabling CI and the GH workflow).</p>",
        "id": 211656628,
        "sender_full_name": "must-compute",
        "timestamp": 1601401042
    },
    {
        "content": "<p>Right, I wanted to be sure it works as intended, as today I tried porting the travis code as a GH Action, but ditched it once I saw that it might be wasted effort (given we have already a working solution)</p>",
        "id": 211657101,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1601401277
    },
    {
        "content": "<p>there is no plan for books to be combined iirc so don't worry about that</p>",
        "id": 211663752,
        "sender_full_name": "DPC",
        "timestamp": 1601404134
    },
    {
        "content": "<p>So I think this is a concise framework for the book attached. Early input is welcome<br>\nand I will now dive into the chapters outlined here and add subsections ahead of<br>\nthe next meeting. <br>\n<a href=\"/user_uploads/4715/O7of4bLaPdeiBAocq7IsdUy-/SUMMARY.md\">SUMMARY.md</a></p>",
        "id": 213196339,
        "sender_full_name": "oliver",
        "timestamp": 1602613310
    },
    {
        "content": "<p>I would not call errors exceptions</p>",
        "id": 213197030,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602613630
    },
    {
        "content": "<p>exceptions imply unwinding and <code>Result</code> in rust does not unwind</p>",
        "id": 213197047,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602613644
    },
    {
        "content": "<p>maybe add a chapter on error libraries comparing what they do?</p>",
        "id": 213197084,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602613668
    },
    {
        "content": "<p>oh that might be appendix A</p>",
        "id": 213197169,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602613690
    },
    {
        "content": "<p>Yeah that's Appendix A</p>",
        "id": 213197245,
        "sender_full_name": "oliver",
        "timestamp": 1602613731
    },
    {
        "content": "<p>maybe call that 'comparison of error libraries', 'index of crates' made me think of the <a href=\"http://crates.io\">crates.io</a> index</p>",
        "id": 213197338,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602613777
    },
    {
        "content": "<p>That should definitely be ironed out</p>",
        "id": 213197522,
        "sender_full_name": "oliver",
        "timestamp": 1602613843
    },
    {
        "content": "<p>To me Errors raise Exceptions?</p>",
        "id": 213197549,
        "sender_full_name": "oliver",
        "timestamp": 1602613855
    },
    {
        "content": "<p>I think of that Appendix as not unrelated to the index from <a href=\"http://crates.io\">crates.io</a></p>",
        "id": 213197663,
        "sender_full_name": "oliver",
        "timestamp": 1602613911
    },
    {
        "content": "<p>Updated: <br>\n<a href=\"/user_uploads/4715/PGEpgy-p8gbJ8qk95zGs-anZ/SUMMARY.md\">SUMMARY.md</a></p>",
        "id": 213198050,
        "sender_full_name": "oliver",
        "timestamp": 1602614061
    },
    {
        "content": "<p>I didn't know that exceptions are exclusive to stack unwinds #til <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 213198374,
        "sender_full_name": "oliver",
        "timestamp": 1602614213
    },
    {
        "content": "<p>I just thought the Error is what happens and the Exception is <em>whatever</em> results</p>",
        "id": 213199338,
        "sender_full_name": "oliver",
        "timestamp": 1602614621
    },
    {
        "content": "<p>So maybe call that section <code>Objects Errors Generate</code>?</p>",
        "id": 213199719,
        "sender_full_name": "oliver",
        "timestamp": 1602614803
    },
    {
        "content": "<p>well, in Rust 'exception' isn't a jargon term, but in all other languages with exceptions it means unwinding</p>",
        "id": 213203857,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602616438
    },
    {
        "content": "<p>like C++ has both error codes (left over from C) and exceptions and they're definitely different</p>",
        "id": 213203916,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602616454
    },
    {
        "content": "<p>What do you think about <code>Objects</code>?</p>",
        "id": 213205618,
        "sender_full_name": "oliver",
        "timestamp": 1602617295
    },
    {
        "content": "<p>I'm not a fan of the term \"object\" w.r.t. Rust code. That said, people know what you mean.</p>",
        "id": 213205734,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1602617375
    },
    {
        "content": "<p>IMO \"object\" == instance of \"class\", but Rust has no classes.</p>",
        "id": 213205759,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1602617394
    },
    {
        "content": "<p>Trait Object is okay imo</p>",
        "id": 213205851,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602617422
    },
    {
        "content": "<p>not sure if thats what is being talked about rn tho</p>",
        "id": 213205863,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602617430
    },
    {
        "content": "<p>There is a chapter I proposed called <code>Kinds of Exceptions</code> that might be changed<br>\nto <code>Objects Errors Generate</code></p>",
        "id": 213205963,
        "sender_full_name": "oliver",
        "timestamp": 1602617487
    },
    {
        "content": "<p>My go-to replacement for \"object\" (not trait object) is \"value\"</p>",
        "id": 213205993,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1602617503
    },
    {
        "content": "<p>Values is vague to me</p>",
        "id": 213206018,
        "sender_full_name": "oliver",
        "timestamp": 1602617515
    },
    {
        "content": "<p>But we are looking for precision not impression</p>",
        "id": 213206111,
        "sender_full_name": "oliver",
        "timestamp": 1602617544
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/stable/reference/expressions.html?highlight=value#place-expressions-and-value-expressions\">https://doc.rust-lang.org/stable/reference/expressions.html?highlight=value#place-expressions-and-value-expressions</a></p>",
        "id": 213206149,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1602617572
    },
    {
        "content": "<p>i think value is the technical term used in rust documentation</p>",
        "id": 213206158,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602617576
    },
    {
        "content": "<p>I think I mean <code>Trait Objects</code></p>",
        "id": 213206163,
        "sender_full_name": "oliver",
        "timestamp": 1602617578
    },
    {
        "content": "<p>for instances of types</p>",
        "id": 213206164,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602617578
    },
    {
        "content": "<blockquote>\n<p>A value expression is an expression that represents an actual value.</p>\n</blockquote>",
        "id": 213206170,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1602617581
    },
    {
        "content": "<p>So a value is a value?</p>",
        "id": 213206268,
        "sender_full_name": "oliver",
        "timestamp": 1602617635
    },
    {
        "content": "<p>yes, but I'm not following your point.</p>",
        "id": 213206353,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1602617673
    },
    {
        "content": "<p>Precision</p>",
        "id": 213206365,
        "sender_full_name": "oliver",
        "timestamp": 1602617683
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116155\">Jake Goulding</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/The.20Rust.20Error.20Book/near/213205759\">said</a>:</p>\n<blockquote>\n<p>IMO \"object\" == instance of \"class\", but Rust has no classes.</p>\n</blockquote>\n<p>well <em>technically</em> object just means 'region of memory' in C (I think, been a while since I read the standard)</p>",
        "id": 213206429,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602617721
    },
    {
        "content": "<p>but I agree that's not how most people will interpret it</p>",
        "id": 213206441,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602617729
    },
    {
        "content": "<p><code>struct Error;</code> is not a trait object, FWIW.</p>",
        "id": 213206442,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1602617730
    },
    {
        "content": "<p>But <code>struct Error</code> is an <code>Object</code>?</p>",
        "id": 213206539,
        "sender_full_name": "oliver",
        "timestamp": 1602617765
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> \"IMO\" ≠ \"technically\"</p>",
        "id": 213206546,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1602617769
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281739\">oliver</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/The.20Rust.20Error.20Book/near/213206539\">said</a>:</p>\n<blockquote>\n<p>But <code>struct Error</code> is an <code>Object</code>?</p>\n</blockquote>\n<p>no, it's a type</p>",
        "id": 213206574,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602617787
    },
    {
        "content": "<p>or if you have a concrete <code>let err: Error</code> it's a value</p>",
        "id": 213206586,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602617795
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281739\">@oliver</span> you've back-tick-quoted \"Object\", but there's no code called <code>Object</code>.</p>",
        "id": 213206611,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1602617811
    },
    {
        "content": "<p>For the discussion, I should not have used a zero-member type.</p>",
        "id": 213206654,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1602617834
    },
    {
        "content": "<p><code>struct Error(i32)</code> is a type. <code>Error(1)</code> is a value.</p>",
        "id": 213206695,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1602617857
    },
    {
        "content": "<p>A trait object is a struct of unspecified layout, no?</p>",
        "id": 213206712,
        "sender_full_name": "oliver",
        "timestamp": 1602617867
    },
    {
        "content": "<p>no</p>",
        "id": 213206719,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602617871
    },
    {
        "content": "<p><code>Box&lt;dyn Error&gt;</code> is a trait object type.</p>",
        "id": 213206723,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1602617872
    },
    {
        "content": "<p><code>Box::new(\"hi\") as Box&lt;dyn Error&gt;</code> is a trait object value.</p>",
        "id": 213206799,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1602617892
    },
    {
        "content": "<p>(untested code, for demo purposes only)</p>",
        "id": 213206826,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1602617911
    },
    {
        "content": "<p>It is fairly rare for <em>me</em> to use trait object types/values as my error types / values.</p>",
        "id": 213206936,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1602617977
    },
    {
        "content": "<p>So, depending on what exactly you are writing about, trait objects may be over-constraining the design space.</p>",
        "id": 213207049,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1602618011
    },
    {
        "content": "<p>heh, i think you'd need an into but yea</p>",
        "id": 213207065,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602618021
    },
    {
        "content": "<p>Well I was trying to express that we would cover the underlying structures<br>\ninvolved</p>",
        "id": 213207086,
        "sender_full_name": "oliver",
        "timestamp": 1602618031
    },
    {
        "content": "<p>I imagined that the second chapter would be more about the abstractions</p>",
        "id": 213207155,
        "sender_full_name": "oliver",
        "timestamp": 1602618082
    },
    {
        "content": "<p>So it looks like underneath <em>all</em> Errors generally speaking we talk about values?</p>",
        "id": 213207553,
        "sender_full_name": "oliver",
        "timestamp": 1602618286
    },
    {
        "content": "<p>yes, in general</p>",
        "id": 213207587,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602618303
    },
    {
        "content": "<p>Interesting <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 213207608,
        "sender_full_name": "oliver",
        "timestamp": 1602618313
    },
    {
        "content": "<p>looking at the summary rn btw</p>",
        "id": 213207651,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602618336
    },
    {
        "content": "<p>What does \"Designing Error Handlers\" mean?</p>",
        "id": 213207672,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602618349
    },
    {
        "content": "<p>I don't know exactly what you mean by \"underneath all Errors\" :-)</p>",
        "id": 213207772,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1602618384
    },
    {
        "content": "<p>Abstractions</p>",
        "id": 213207773,
        "sender_full_name": "oliver",
        "timestamp": 1602618385
    },
    {
        "content": "<p>Also at a minimum I think we should aim to add a section on error reporting as well as one for error handling and FFI</p>",
        "id": 213207810,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602618411
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116155\">Jake Goulding</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/The.20Rust.20Error.20Book/near/213207772\">said</a>:</p>\n<blockquote>\n<p>I don't know exactly what you mean by \"underneath all Errors\" :-)</p>\n</blockquote>\n<p>Well like the technical etymology of an Error in Rust</p>",
        "id": 213207866,
        "sender_full_name": "oliver",
        "timestamp": 1602618440
    },
    {
        "content": "<p>And I'd like us to break down the aspects of error handling the same way I did in my talk, namely \"defining, propagating, reacting, discarding, and reporting\"</p>",
        "id": 213207985,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602618489
    },
    {
        "content": "<p>hmm, that edit made it worse for me :-)</p>",
        "id": 213208023,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1602618513
    },
    {
        "content": "<p>hmm?</p>",
        "id": 213208040,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602618523
    },
    {
        "content": "<p>you wanted handling over propagating?</p>",
        "id": 213208056,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602618530
    },
    {
        "content": "<p>I feel like handling the superset that encompasses those 5 sub categories</p>",
        "id": 213208104,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602618551
    },
    {
        "content": "<p>Neither \"handling\" nor \"propagating\" reflect \"make a new error\" to me.</p>",
        "id": 213208107,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1602618552
    },
    {
        "content": "<p>What I call \"leaf errors\".</p>",
        "id": 213208137,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1602618572
    },
    {
        "content": "<p>Perhaps \"generating\"</p>",
        "id": 213208143,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1602618577
    },
    {
        "content": "<p>i think that falls under defining personally</p>",
        "id": 213208148,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602618579
    },
    {
        "content": "<p>i guess there could also be constructing</p>",
        "id": 213208165,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602618593
    },
    {
        "content": "<p>IMO \"defining\" == type level.</p>",
        "id": 213208171,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1602618598
    },
    {
        "content": "<p>which would be the value side where defining is the type side</p>",
        "id": 213208173,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602618601
    },
    {
        "content": "<p>sure</p>",
        "id": 213208176,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602618602
    },
    {
        "content": "<p>I can dig that</p>",
        "id": 213208215,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602618604
    },
    {
        "content": "<p>constructing would make sense too</p>",
        "id": 213208224,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1602618606
    },
    {
        "content": "<p>okay so six categories</p>",
        "id": 213208237,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602618614
    },
    {
        "content": "<p>I think writing on the best way to handle errors, in user friendly terminology, would lower the barrier to entry in learning Rust</p>",
        "id": 213208244,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1602618620
    },
    {
        "content": "<blockquote>\n<p>in user friendly terminology</p>\n</blockquote>\n<p>A perpetual dilemma is do you use \"friendly\" terminology  or the currently accepted one?</p>",
        "id": 213208347,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1602618678
    },
    {
        "content": "<p>e.g. Rust's \"lifetimes\" are not friendly (that's a different, off-topic discussion), but there's not much hope to change that now.</p>",
        "id": 213208404,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1602618714
    },
    {
        "content": "<p>That also presupposes that there's <em>a</em> best way.</p>",
        "id": 213208473,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1602618735
    },
    {
        "content": "<p>I favor using consistent terminology but if we can highlight terminology that is specifically user unfriendly I think we could try to change that terminology across the rust project</p>",
        "id": 213208506,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602618757
    },
    {
        "content": "<p>consistent is a great start. A glossary with expanded definitions is also useful. And introducing the terms throughly when first used, of course.</p>",
        "id": 213208577,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1602618810
    },
    {
        "content": "<p>agreed, theres already a bit of this in the Charter, so we should definitely make sure to copy over any information there that is relevant to the book</p>",
        "id": 213208928,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602619001
    },
    {
        "content": "<p>Here's the latest: <a href=\"https://cryptpad.fr/code/#/2/code/edit/1FhyaBOOANgdSTKA8xbYIt8t/\">https://cryptpad.fr/code/#/2/code/edit/1FhyaBOOANgdSTKA8xbYIt8t/</a></p>",
        "id": 213209172,
        "sender_full_name": "oliver",
        "timestamp": 1602619137
    },
    {
        "content": "<p>I would start on subsections once the chapter outline is finished</p>",
        "id": 213209333,
        "sender_full_name": "oliver",
        "timestamp": 1602619210
    },
    {
        "content": "<p>My feeling is that the first two sections in the summary will have a lot of overlap with the later ones, and that we should lead with fundamentals</p>",
        "id": 213210944,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602620041
    },
    {
        "content": "<p>like, values errors return seems like a subsection of \"constructing\"</p>",
        "id": 213211107,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602620131
    },
    {
        "content": "<p>not something that we should lead with</p>",
        "id": 213211113,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602620136
    },
    {
        "content": "<p>examples are good though</p>",
        "id": 213211131,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602620150
    },
    {
        "content": "<p>I wouldn't mind starting with examples and then starting to explain them</p>",
        "id": 213211142,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602620159
    },
    {
        "content": "<p>Right, now it goes from a technical overview of how Error values exist, to an<br>\nintro example then a section on the philosophy of what error handling means in<br>\nRust from there the following sections are more concrete</p>",
        "id": 213211747,
        "sender_full_name": "oliver",
        "timestamp": 1602620524
    },
    {
        "content": "<p>Fundamentals -&gt; Parts of Error Handling -&gt; Patterns -&gt; FFI -&gt; Glossary -&gt;<br>\nAppendix</p>",
        "id": 213211885,
        "sender_full_name": "oliver",
        "timestamp": 1602620619
    },
    {
        "content": "<p>sounds good</p>",
        "id": 213216477,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602623036
    },
    {
        "content": "<p>why not use the rust terminology but add a parenthesis with a more \"wider and friendlier (read less technical) description when applicable?</p>",
        "id": 213268547,
        "sender_full_name": "Nelson J Morais",
        "timestamp": 1602670406
    },
    {
        "content": "<p>It's generally not ideal to have multiple competing terms for the same concept</p>",
        "id": 213287101,
        "sender_full_name": "oliver",
        "timestamp": 1602681782
    },
    {
        "content": "<p>Leads to confusion and moral panic and inflates word counts</p>",
        "id": 213287946,
        "sender_full_name": "oliver",
        "timestamp": 1602682185
    },
    {
        "content": "<p>what we do with another book is make small prs and use placeholders for the rest, so people can read the book after prs get merged even though the entire book is incomplete</p>",
        "id": 213292785,
        "sender_full_name": "DPC",
        "timestamp": 1602684317
    },
    {
        "content": "<p>That works or using (sic) also helps flag odd terms</p>",
        "id": 213330460,
        "sender_full_name": "oliver",
        "timestamp": 1602698928
    },
    {
        "content": "<p>I'm not an English major, but AIUI <em>sic</em> is to be used when something is wrong but you are including it verbatim.</p>",
        "id": 213330587,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1602699001
    },
    {
        "content": "<p>\"Their name was Richhard [sic]\"</p>",
        "id": 213330672,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1602699031
    },
    {
        "content": "<p>Colloquially it can be used where something else is intended</p>",
        "id": 213330714,
        "sender_full_name": "oliver",
        "timestamp": 1602699055
    },
    {
        "content": "<p>Ah sorry, thought the goal was precision over colloquialism.</p>",
        "id": 213330747,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1602699089
    },
    {
        "content": "<p>Both are valuable.</p>",
        "id": 213330777,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1602699107
    },
    {
        "content": "<p>Like in a draft when you need to flag something as imprecise, otherwise it's<br>\nlike you say and should be reserved for something known to be incorrect for a<br>\nreason, (sic) just happens to be both keyword searchable and had some general context</p>",
        "id": 213330949,
        "sender_full_name": "oliver",
        "timestamp": 1602699214
    },
    {
        "content": "<p>ah, usage in a draft is also not what I was thinking of. I do the same in my code (a lot of variables like <code>zxc</code> or <code>qqq</code> to be easily renamed later)</p>",
        "id": 213331049,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1602699268
    },
    {
        "content": "<p>To each their own <span aria-label=\"star\" class=\"emoji emoji-2b50\" role=\"img\" title=\"star\">:star:</span></p>",
        "id": 213331111,
        "sender_full_name": "oliver",
        "timestamp": 1602699321
    },
    {
        "content": "<p>I guess with (sic) I always think I could publish this as is and apologize <br>\nabout it after <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 213331264,
        "sender_full_name": "oliver",
        "timestamp": 1602699405
    },
    {
        "content": "<p>(se) would probably work just as well and less a char but maybe isn't widely recognized<br>\n as denoting an intentional error or inaccuracy</p>",
        "id": 213332009,
        "sender_full_name": "oliver",
        "timestamp": 1602699793
    },
    {
        "content": "<p>and se's like 'se what?' and sic's like 'oh sic'</p>",
        "id": 213332514,
        "sender_full_name": "oliver",
        "timestamp": 1602700075
    },
    {
        "content": "<p>sic is mostly used to quote someone else \"by word\"</p>",
        "id": 213342320,
        "sender_full_name": "DPC",
        "timestamp": 1602705194
    },
    {
        "content": "<p>\"It also applies to any surprising assertion, faulty reasoning, or other<br>\n matter that might be likely interpreted as an error of transcription. \"<br>\n-Wikipedia Contributors</p>",
        "id": 213350979,
        "sender_full_name": "oliver",
        "timestamp": 1602709806
    },
    {
        "content": "<p>To each their own <span aria-label=\"star\" class=\"emoji emoji-2b50\" role=\"img\" title=\"star\">:star:</span></p>",
        "id": 213351023,
        "sender_full_name": "oliver",
        "timestamp": 1602709837
    },
    {
        "content": "<p>I guess one of the more interesting things about languages is they evolve</p>",
        "id": 213351603,
        "sender_full_name": "oliver",
        "timestamp": 1602710176
    }
]