[
    {
        "content": "<p>Hi folks!  I've been intending to write a new pre-RFC for making <code>Try</code> work differently to support some additional stuff.</p>\n<p>The blog post made me think I should drop by here first to see if you have anything your group had been thinking about.</p>\n<p>One thing on my list, for example, was that it would be nice to be able to write a type that can accept _any_ error type, rather than the <code>From</code> restrictions that currently exist.</p>",
        "id": 217720327,
        "sender_full_name": "scottmcm",
        "timestamp": 1606201723
    },
    {
        "content": "<p>I'm interested but for the most part we've decided that <code>Try</code> and company are out of scope for this project grou</p>",
        "id": 217801289,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1606245681
    },
    {
        "content": "<p>thats more of a lang team thing, but I'm curious what you mean by \"accept any error type rather than with From restrictions\"</p>",
        "id": 217801319,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1606245710
    },
    {
        "content": "<p>Right now <code>Result&lt;_, E&gt;</code> -&gt; <code>Result&lt;_, F&gt;</code> in <code>?</code> needs <code>F: From&lt;E&gt;</code>, but it's hard to add blankets to that.  I was imagining, for example, a type that could be used in main that would allow essentially anything to be <code>?</code>'d.</p>",
        "id": 217829888,
        "sender_full_name": "scottmcm",
        "timestamp": 1606262351
    },
    {
        "content": "<p>sure</p>",
        "id": 217829926,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1606262387
    },
    {
        "content": "<p>and this is kinda what <code>anyhow::Error</code> / <code>eyre::Report</code> do, though they explicitly don't impl <code>Error</code> to manage it</p>",
        "id": 217830003,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1606262406
    },
    {
        "content": "<p>i guess,</p>",
        "id": 217830026,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1606262424
    },
    {
        "content": "<p>go on?</p>",
        "id": 217830027,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1606262425
    },
    {
        "content": "<p>like, how would you modify <code>Try</code> to manage this, and how does it differ from <code>Box&lt;dyn Error&gt;</code> and similar types</p>",
        "id": 217830073,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1606262455
    },
    {
        "content": "<p>Last time I tried <code>try {}</code> I remember it didn't infer types when I expected it to. Not sure if that's still the case tho.</p>",
        "id": 218272651,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1606734037
    },
    {
        "content": "<p>does break-to-labeled-block fall under this category? This is really the core functionality that I need when there are multiple <code>try {}</code> scopes in play at once. (Also break inside a closure, although that seems harder.)</p>",
        "id": 218274821,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606735327
    },
    {
        "content": "<p>I think most of the other things on my wishlist for <code>Try</code>/ <code>try {}</code> are all future extensions:</p>\n<ul>\n<li>creating new errors in a <code>try</code> context using <code>throw</code></li>\n<li>error recovery using <code>catch(kind) {}</code> or <code>match {}</code></li>\n<li>some way to declare closures with <code>try {}</code> semantics</li>\n<li>and some way to do that for functions too (possibly <code>throws</code>)</li>\n</ul>",
        "id": 218282776,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1606741151
    },
    {
        "content": "<p>Particularly in Tide endpoint examples the combination of async + errors becomes real noisy. Example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"sd\">//! HTTP echo server</span>\n\n<span class=\"c1\">// current</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">app</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">tide</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"n\">app</span><span class=\"p\">.</span><span class=\"n\">at</span><span class=\"p\">(</span><span class=\"s\">\"/echo\"</span><span class=\"p\">).</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">req</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">req</span><span class=\"p\">)});</span><span class=\"w\"></span>\n<span class=\"n\">app</span><span class=\"p\">.</span><span class=\"n\">listen</span><span class=\"p\">(</span><span class=\"s\">\"127.0.0.1:8080\"</span><span class=\"p\">).</span><span class=\"k\">await</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"nb\">Ok</span><span class=\"p\">(())</span><span class=\"w\"></span>\n\n<span class=\"c1\">// desired</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">app</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">tide</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"n\">app</span><span class=\"p\">.</span><span class=\"n\">at</span><span class=\"p\">(</span><span class=\"s\">\"/echo\"</span><span class=\"p\">).</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">try</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">req</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">req</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">app</span><span class=\"p\">.</span><span class=\"n\">listen</span><span class=\"p\">(</span><span class=\"s\">\"127.0.0.1:8080\"</span><span class=\"p\">).</span><span class=\"k\">await</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 218283495,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1606741612
    },
    {
        "content": "<p>In that particular case, it doesn't seem like try makes it any less noisy.</p>",
        "id": 218333259,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606764309
    },
    {
        "content": "<p>You remove Ok(req) in favor of req, but then have to add try.</p>",
        "id": 218333312,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606764337
    },
    {
        "content": "<p>It's not obvious why you need try closures for that, rather than just a try block.</p>",
        "id": 218333381,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606764364
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211722\">Yoshua Wuyts</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/Wishlist.20for.20.60.3F.60.2F.60try.7B.7D.60.2F.60Try.60.3F/near/218272651\">said</a>:</p>\n<blockquote>\n<p>Last time I tried <code>try {}</code> I remember it didn't infer types when I expected it to. Not sure if that's still the case tho.</p>\n</blockquote>\n<p>Yeah, <code>?</code> loses the \"result-ness\" of things.  I'd like to do something about that, though error-conversion makes it hard in general.</p>",
        "id": 218341908,
        "sender_full_name": "scottmcm",
        "timestamp": 1606768398
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> I'd like to see that as well, but I'm wondering if there's any forward-compatible way we could go ahead and start supporting <code>try</code> blocks now, even if they usually need some help figuring out their return type, and <em>later</em> figure out a way to do better inference.</p>",
        "id": 218344375,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606769593
    },
    {
        "content": "<p>What do you see as the current blockers for <code>try</code> blocks, if we don't try to improve inference?</p>",
        "id": 218344423,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606769619
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> ah, I think there may be a difference between the experience <em>reading</em> and the experience <em>writing</em><br>\n -- I agree they indeed look similar enough, but writing <code>async |x| try { }</code> instead of <code>async try |x|</code> feels messier. Mixing keywords in front of the closure, after the closure, brackets where a regular closure requires none. It'd be nice if eventually this could be smoothed out.</p>",
        "id": 218408778,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1606821991
    },
    {
        "content": "<p>I understand, but I don't personally think that that motivates adding a new kind of closure.</p>",
        "id": 218442234,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606838685
    },
    {
        "content": "<p><em>personally</em>, I think <code>async move { Ok(req) }</code> is the most clear out of any of those</p>",
        "id": 218447627,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606840713
    },
    {
        "content": "<p>but I can see how it would be annoying if you have to write it a lot</p>",
        "id": 218447650,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606840728
    },
    {
        "content": "<p>FWIW, I would be more amenable to the idea of omitting braces in specific circumstances than I would be towards introducing a new kind of closure.</p>",
        "id": 218447793,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606840798
    },
    {
        "content": "<p>For instance, async try {} rather than async { try { } }.</p>",
        "id": 218447931,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606840846
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/Wishlist.20for.20.60.3F.60.2F.60try.7B.7D.60.2F.60Try.60.3F/near/218344423\">said</a>:</p>\n<blockquote>\n<p>What do you see as the current blockers for <code>try</code> blocks, if we don't try to improve inference?</p>\n</blockquote>\n<p>No hard blockers (given the possibility of edition changes), just forward hazards -- if we wanted the default to be more restrictive to be able to infer better, for example.</p>",
        "id": 218462386,
        "sender_full_name": "scottmcm",
        "timestamp": 1606847323
    },
    {
        "content": "<p>personally I would love for try <em>not</em> to use <code>Into</code> for converting errors</p>",
        "id": 218463655,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606847974
    },
    {
        "content": "<p>that's a backwards-compatible way to get rid of type inference issues and also decrease some of the codegen bloat</p>",
        "id": 218463684,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606847993
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> That seems reasonable to me; as long as <code>?</code> still uses <code>Into</code>, <code>try</code> doesn't need to.</p>",
        "id": 218472905,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606852599
    },
    {
        "content": "<p><code>try</code> <em>doesn't</em> use <code>Into</code> today.  All that <code>try</code> does is the ok-wrap (and where it breaks to)</p>",
        "id": 218478633,
        "sender_full_name": "scottmcm",
        "timestamp": 1606855412
    },
    {
        "content": "<p>I think it's the <code>Into</code> (well, <code>From</code>, technically) in the <code>?</code> that needs to not happen to get the inference under control.</p>",
        "id": 218478769,
        "sender_full_name": "scottmcm",
        "timestamp": 1606855475
    }
]