[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> and others: I just spoke with the rest of the Cargo team, and we're definitely willing to help out with questions about build-std and feature flags, if folks here are up for working towards the merge.</p>",
        "id": 211827864,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601500333
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span> and <span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> in particular mentioned that they'd be happy to get questions.</p>",
        "id": 211827895,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601500350
    },
    {
        "content": "<p>This is something we've wanted for a <em>long</em> time, and help is deeply welcome.</p>",
        "id": 211827924,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601500365
    },
    {
        "content": "<p>on the bootstrap side I am also happy to answer questions about feasibility/distribution etc</p>",
        "id": 211828010,
        "sender_full_name": "simulacrum",
        "timestamp": 1601500432
    },
    {
        "content": "<p>I think we're definitely moving towards pushing for a merge <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span></p>",
        "id": 211828111,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601500480
    },
    {
        "content": "<p>the steps I forsee are</p>",
        "id": 211828126,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601500487
    },
    {
        "content": "<ol>\n<li>get a proof of concept for backtrace in core that doesnt' depend on <code>alloc</code> in its current state</li>\n<li>stabilize <code>fn backtrace</code> and <code>Backtrace</code> in std (assuming we can later change this to a re-export of core's backtrace type)</li>\n<li>merge core/std so that we can resolve the coherence issues around some of the existing trait impls related to the Error trait and make it so that the Error trait is available without alloc in this newly merged <code>std/core/alloc</code></li>\n</ol>",
        "id": 211828291,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601500576
    },
    {
        "content": "<p>im assuming that 2 is fine because no matter what when we merge things together that would presumably resolve any issues, assuming there are even any issues about moving things around</p>",
        "id": 211828334,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601500606
    },
    {
        "content": "<p>which I doubt there are given that I think we've done that before</p>",
        "id": 211828343,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601500614
    },
    {
        "content": "<p>that all sounds relatively reasonable</p>",
        "id": 211828571,
        "sender_full_name": "simulacrum",
        "timestamp": 1601500748
    },
    {
        "content": "<p>I think the major hurdle is going to be chasing down upstream projects that are currently \"real\" dependencies of std and converting those to <code>#[path = ... ]</code> deps of std, or trying to push on a compiler change that would permit more ergonomic \"copy/paste this code in\" that doesn't require changes in the upstream logic</p>",
        "id": 211828686,
        "sender_full_name": "simulacrum",
        "timestamp": 1601500804
    },
    {
        "content": "<p>a couple of my friends have pointed out that they think package local orphan rule violators might be the better approach in the long run</p>",
        "id": 211829772,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601501411
    },
    {
        "content": "<p>where you could group alloc/std/core into one package but as different crates ( i think im not mixing those up) and the orphan rules would be applied to the group rather than each individual crate</p>",
        "id": 211829846,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601501450
    },
    {
        "content": "<p>I'd also be happy to go down this path, I don't really have a strong preference</p>",
        "id": 211829883,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601501473
    },
    {
        "content": "<p>tho the latter approach seems like it might have large benefits downstream as well</p>",
        "id": 211829908,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601501488
    },
    {
        "content": "<p>I also remain unconvinced that literally combining the crates is the way to go here vs. adding a std-only-for-now switch. I think boats had concerns about this approach? I may be misremembering</p>",
        "id": 211829929,
        "sender_full_name": "simulacrum",
        "timestamp": 1601501500
    },
    {
        "content": "<p>no idea</p>",
        "id": 211829975,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601501523
    },
    {
        "content": "<p>I do think it's going to be quite hard to get the unification to work out nicely, though probably a one-time cost mostly</p>",
        "id": 211830017,
        "sender_full_name": "simulacrum",
        "timestamp": 1601501532
    },
    {
        "content": "<p>Jumping in from an out of band conversation with <span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> . I have some reservations about merging the stdlibs, and in particular I think motivating it by the orphan rule is a mistake because the problems with the orphan rule here are quite general.</p>\n<p>This has been discussed in the past, but, a lot of projects are conceptually \"multiple crates, one package\", where the \"package\" is intended to be versioned as a single thing, but is split into many crates to aid in conditional compilation, features, etc. Notably, there are _many_ cases where rust forces you into splitting crates especially when you want to use features, and it ends up being easier to do this. I know that Rain is looking into this kind of thing.</p>\n<p>There's a case to be made for local orphan violations within the same package. I've been in situations where i've needed this quite often, and it's one of the main reasons the orphan rules gets annoying -- when it gets in the way where there is _actually no danger_ but it's entirely due to how you chose to slice your code.</p>",
        "id": 211830027,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1601501537
    },
    {
        "content": "<p>FWIW, there are multiple other reasons to want to merge the crates; this isn't <em>just</em> about the orphan rule. More generally, there's a desire to be able to compile one crate with feature flags that may be finer-grained than the existing std or alloc.</p>",
        "id": 211840761,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601504255
    },
    {
        "content": "<p>I wouldn't want to see the error-handling project commit everything to making that work as <em>the</em> solution. More that if we agree we <em>want</em> this change anyway, and it's just a matter of implementation effort, then having people who are willing to do the work would help.</p>",
        "id": 211840911,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601504378
    },
    {
        "content": "<p>another example is it'd be great to use simd in libcore, but we it's difficult today because cpu feature detection is in libstd</p>",
        "id": 211840994,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1601504429
    },
    {
        "content": "<p>Orphan rule?</p>",
        "id": 211848684,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1601505275
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"344328\">@Charles Ellis O'Riley Jr.</span> If you want to <code>impl SomeTrait for SomeType</code>, you must either be the crate that provides <code>SomeTrait</code> or the crate that provides <code>SomeType</code>, to a first approximation.</p>",
        "id": 211848855,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601505396
    },
    {
        "content": "<p>(It gets a little more complicated with types that have generic parameters, but that's the key concept.)</p>",
        "id": 211848877,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601505415
    },
    {
        "content": "<p>An <code>impl</code> of a trait for a type where you don't own either the trait or the type is called an orphan <code>impl</code>.</p>",
        "id": 211848905,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601505440
    },
    {
        "content": "<p>Josh, first, thank you for the explanation.  Second, I have much to learn.l<span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span>.</p>",
        "id": 211849276,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1601505761
    },
    {
        "content": "<p>I'm not going to focus on this that much just yet but once we've mostly worked thru the backtrace stabilization issue I think I'll try to go back and create a summary of the problems we're trying to solve and the solutions that are available so we can figure out how we want to move forward to get error into core</p>",
        "id": 211849482,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601505925
    },
    {
        "content": "<p>related discussion <a href=\"#narrow/stream/219381-t-libs/topic/Why.20is.20HashMap.20in.20std.20and.20not.20alloc.3F\">https://rust-lang.zulipchat.com/#narrow/stream/219381-t-libs/topic/Why.20is.20HashMap.20in.20std.20and.20not.20alloc.3F</a></p>",
        "id": 212129353,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601672959
    },
    {
        "content": "<p>We have <em>tons</em> of APIs that want this in std and not all of them are coherence related, some are inherent methods, for example</p>",
        "id": 212974504,
        "sender_full_name": "boats",
        "timestamp": 1602438359
    },
    {
        "content": "<p>changing the coherence boundary to be larger than the crate would make rust coherence depend on the build system, I'm really not compelled by any proposal to make the language potentially incoherent without cargo</p>",
        "id": 212974564,
        "sender_full_name": "boats",
        "timestamp": 1602438419
    }
]