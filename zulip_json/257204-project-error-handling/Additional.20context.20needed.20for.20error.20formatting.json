[
    {
        "content": "<p>Hi all! In wgpu and naga, we have this common problem that the <code>enum Error</code> contains a bunch of things that are internal to the crate. Like the handles to objects. Displaying them directly is not very useful (just numbers), and we'd need extra context in order to get the descriptions.<br>\nPerhaps, somebody could say if this problem has been solved before? We have a rather verbose solution that I'm not happy with.</p>",
        "id": 249626901,
        "sender_full_name": "Dzmitry Malyshau",
        "timestamp": 1629138125
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"247620\">@Dzmitry Malyshau</span> can you give more details on what you would like to do that is currently difficult / impossible? I'm not entirely understanding the issue</p>",
        "id": 249630743,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1629139883
    },
    {
        "content": "<p>like, is it that you need access to external context when reporting errors in order to properly display the extra context stored in the errors or is it that you want to be able to extract these extra fields from the errors when reporting?</p>",
        "id": 249630875,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1629139932
    },
    {
        "content": "<p>or something else entirely</p>",
        "id": 249630889,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1629139938
    },
    {
        "content": "<p>yes, pretty much. For example, <code>Error</code> variants contain byte ranges into some input. In order to cite the input chunks, the <code>impl Display</code> needs to have access to that input in addition to the error itself.</p>",
        "id": 249631169,
        "sender_full_name": "Dzmitry Malyshau",
        "timestamp": 1629140064
    },
    {
        "content": "<p>aah yea</p>",
        "id": 249631864,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1629140376
    },
    {
        "content": "<p>so this is related to a lot of the stuff I've worked on for error handling, between eyre and generic member access, so I can explain how I'd solve this though it's not super helpful because a major piece of this is currently missing in the <code>Error</code> trait still</p>",
        "id": 249632115,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1629140452
    },
    {
        "content": "<p>but basically, the way I would want to model this is as context you can extract from an arbitrary error, such as your range of bytes which I assume is essentially a <code>Span</code> in your input</p>",
        "id": 249632209,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1629140495
    },
    {
        "content": "<p>then a reporter that has access to the additional context such as the input file itself so that it can highlight the span and the snippet of relevant input or w/e</p>",
        "id": 249632330,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1629140544
    },
    {
        "content": "<p>so <a href=\"https://github.com/rust-lang/rfcs/pull/2895\">this RFC</a> is supposed to make it so you can extract arbitrary types from errors</p>",
        "id": 249632387,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1629140579
    },
    {
        "content": "<p>so you could do something like <code>if let Some(span) = error.context::&lt;MySpanType&gt;() { ... }</code></p>",
        "id": 249632439,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1629140604
    },
    {
        "content": "<p>then you could use something like <code>eyre</code> to write your own <a href=\"https://docs.rs/eyre/0.6.5/eyre/trait.EyreHandler.html\">reporting context</a> which would do the job of iterating over the errors through the error trait when reporting, looking for spans, and then displaying them with the additional context as well as including their error messages from their <code>Display</code> impls</p>",
        "id": 249632726,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1629140723
    },
    {
        "content": "<p>this assumes that you're type erasing your errors though</p>",
        "id": 249632752,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1629140737
    },
    {
        "content": "<p>which may not be a constraint you have</p>",
        "id": 249632758,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1629140741
    },
    {
        "content": "<p>I'm not sure</p>",
        "id": 249632760,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1629140743
    },
    {
        "content": "<p>if you're reporting a concrete top level error type and you can access your context directly then I'd skip all the generic member access and dyn reporter stuff and write this all by hand</p>",
        "id": 249632929,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1629140808
    },
    {
        "content": "<p>since it would be much simpler</p>",
        "id": 249632936,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1629140812
    },
    {
        "content": "<p>does that help or am I still misunderstanding?</p>",
        "id": 249633137,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1629140888
    },
    {
        "content": "<p>(just finishing a meeting, sorry about the delay)</p>\n<blockquote>\n<p>if let Some(span) = error.context::&lt;MySpanType&gt;()</p>\n</blockquote>\n<p>this assumes a single span for the whole error. Our errors may refer to multiple different things (like. \"a + b\" expression failing would want to refer to the locations where \"a\" and \"b\" are defined). So this API doesn't appear to be solving our issue.</p>",
        "id": 249638424,
        "sender_full_name": "Dzmitry Malyshau",
        "timestamp": 1629143483
    },
    {
        "content": "<p>It's generic so you should be able to represent it however you like. You could extract it as a slice of spans, some other type that contextualizes the spans, an iterator, etc</p>",
        "id": 249638666,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1629143597
    },
    {
        "content": "<p>The API is designed to be as flexible as possible and will support owned values, references, DSTs, and even types that contain references, such as a mutable closure which happens to be relevant to executors where you want to be able to pass out a callback that can modify the executors state</p>",
        "id": 249639053,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1629143779
    },
    {
        "content": "<blockquote>\n<p>if you're reporting a concrete top level error type and you can access your context directly then I'd skip all the generic member access and dyn reporter stuff and write this all by hand</p>\n</blockquote>\n<p>we have a chain of errors. Supposedly, we have the context, and we can just implement something like <code>fn display(Error, Context, Formatter)</code>.</p>",
        "id": 249639800,
        "sender_full_name": "Dzmitry Malyshau",
        "timestamp": 1629144097
    },
    {
        "content": "<p>this would mean we can't benefit from <code>thiserror</code> crate any more (but that's ok)</p>",
        "id": 249639888,
        "sender_full_name": "Dzmitry Malyshau",
        "timestamp": 1629144124
    },
    {
        "content": "<p>I think I'll need to read your RFC carefully. Thank you for pointing to it!</p>",
        "id": 249639937,
        "sender_full_name": "Dzmitry Malyshau",
        "timestamp": 1629144141
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"247620\">Dzmitry Malyshau</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/Additional.20context.20needed.20for.20error.20formatting/near/249639888\">said</a>:</p>\n<blockquote>\n<p>this would mean we can't benefit from <code>thiserror</code> crate any more (but that's ok)</p>\n</blockquote>\n<p>I'm confused, how would this interact negatively with thiserror?</p>",
        "id": 249639970,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1629144159
    },
    {
        "content": "<p>with <code>thiserror</code>, we already put stuff like <code>#[error(\"blabla\")]</code> on each variant. So this will need to go away</p>",
        "id": 249640097,
        "sender_full_name": "Dzmitry Malyshau",
        "timestamp": 1629144219
    },
    {
        "content": "<p>i.e. if we are manually implementing it, then we no longer use <code>thiserror</code></p>",
        "id": 249640148,
        "sender_full_name": "Dzmitry Malyshau",
        "timestamp": 1629144243
    },
    {
        "content": "<p>I think there's a disconnect. Are we talking about reporting errors to users as in when you control the entire application</p>",
        "id": 249640212,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1629144262
    },
    {
        "content": "<p>or is this designing an error API for a library to be consumed by your users?</p>",
        "id": 249640227,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1629144274
    },
    {
        "content": "<p>our case is more of a former</p>",
        "id": 249640291,
        "sender_full_name": "Dzmitry Malyshau",
        "timestamp": 1629144315
    },
    {
        "content": "<p>because I was assuming the former case where the <code>fn display</code> would just be the last step when printing a chain of errors, and the errors themselves could still have display impls created with derives</p>",
        "id": 249640298,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1629144319
    },
    {
        "content": "<p>you are saying <code>fn display</code> would be the last step. What would be the first steps?</p>",
        "id": 249640391,
        "sender_full_name": "Dzmitry Malyshau",
        "timestamp": 1629144365
    },
    {
        "content": "<p>so i would still expect you to use <code>thiserror</code> for the error messages themselves, but I would expect those error messages to be pieces of the final error report you create at the end that does the last step of contextualizing the spans</p>",
        "id": 249640398,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1629144367
    },
    {
        "content": "<p>so the first step would be defining the error types and messages, and then constructing them. The error messages would be simple things like \"invalid expression\" and then you'd have a report that when it hits that invalid expression error in the chain knows to go look for the spans and add an additional bit of information after the error message itself sort of like rustc errors</p>",
        "id": 249640520,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1629144443
    },
    {
        "content": "<p>and that reporting happens in one function at the end when you're handling a concrete error at runtime</p>",
        "id": 249640550,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1629144465
    },
    {
        "content": "<p>and that takes the error (chain of errors), the context with the file content and what not, and the Formatter that we're writing the full report back out too</p>",
        "id": 249640663,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1629144502
    },
    {
        "content": "<p>and doing all of that is the job of <code>eyre</code></p>",
        "id": 249640676,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1629144509
    },
    {
        "content": "<p>but eyre works on <code>dyn Errors</code></p>",
        "id": 249640698,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1629144518
    },
    {
        "content": "<p>so it needs generic member access to get the context out of an error type after it has been type erased</p>",
        "id": 249640725,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1629144533
    },
    {
        "content": "<p>though if you know the types you can always just downcast</p>",
        "id": 249640736,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1629144538
    },
    {
        "content": "<p>so eyre may still be a good call here</p>",
        "id": 249640757,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1629144547
    },
    {
        "content": "<p>I don't think I understand very well, yet. You are saying we can look at the error, and report additionally what stuff is in the error. Like if the error is \"Unable to add [1] and [2]\", we'd report on separate lines something like: \"[1]: 'let x = 2'\", and \"[2]: 'let y = 2*x;'\". Right?</p>",
        "id": 249640957,
        "sender_full_name": "Dzmitry Malyshau",
        "timestamp": 1629144638
    },
    {
        "content": "<p>yea, basically, though you have to add an extra interface to expose this additional information that needs to be reported after the main error message</p>",
        "id": 249641182,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1629144768
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_errors/struct.Diagnostic.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_errors/struct.Diagnostic.html</a></p>",
        "id": 249641191,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1629144777
    },
    {
        "content": "<p>I think this is how rustc does it for their error messages</p>",
        "id": 249641198,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1629144783
    },
    {
        "content": "<p>ok, and then what do we do with the chain? are you suggesting to try downcasting the errors in the chain?</p>",
        "id": 249641217,
        "sender_full_name": "Dzmitry Malyshau",
        "timestamp": 1629144795
    },
    {
        "content": "<p>I don't know enough about your specific constraints to know if that would be applicable, but if you can then that's the best way to get additional context out of errors right now if you want to report more than just an error message at each step in a chain of errors</p>",
        "id": 249641354,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1629144866
    },
    {
        "content": "<p>there are some other patterns you can use</p>",
        "id": 249641366,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1629144877
    },
    {
        "content": "<p>like a context wrapper type where you can go <code>ErrorContext&lt;MyError&gt;</code> and the <code>ErrorContext</code> stores all the extra information, then you transform the inner error type with a <code>map</code> function, though that doesn't map well to having some context at each step in the chain</p>",
        "id": 249641429,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1629144922
    },
    {
        "content": "<p>this sounds close to what we currently have - <a href=\"https://github.com/gfx-rs/wgpu/blob/ee3b85928e99f44194d0d4abedd88bf65a3a2614/wgpu-core/src/error.rs#L102\">https://github.com/gfx-rs/wgpu/blob/ee3b85928e99f44194d0d4abedd88bf65a3a2614/wgpu-core/src/error.rs#L102</a><br>\nand I don't like it :(</p>",
        "id": 249641484,
        "sender_full_name": "Dzmitry Malyshau",
        "timestamp": 1629144953
    },
    {
        "content": "<p>yea :/</p>",
        "id": 249641575,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1629144987
    },
    {
        "content": "<p>hence generic member access</p>",
        "id": 249641586,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1629144992
    },
    {
        "content": "<p>then you can type erase all the errors and just have a couple common types you're extracting at every step in the chain to get the extra info to report</p>",
        "id": 249641616,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1629145010
    },
    {
        "content": "<p>first, because effectively there are 2 places that match the errors: one for the <code>fn display</code> and another for resolving those extra things that need contexts. And secondly, because of downcasts are easy to miss/forget when messing with the error enum.</p>",
        "id": 249641618,
        "sender_full_name": "Dzmitry Malyshau",
        "timestamp": 1629145011
    },
    {
        "content": "<p>yea, its a mess</p>",
        "id": 249641643,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1629145027
    },
    {
        "content": "<p>it sounds like, what we are doing is already not the worst of what we can do today, and in the future I should keep an eye on your RFC</p>",
        "id": 249641702,
        "sender_full_name": "Dzmitry Malyshau",
        "timestamp": 1629145070
    },
    {
        "content": "<p>Alright, thank you for your time explaining things to me, and good luck with this RFC!</p>",
        "id": 249641812,
        "sender_full_name": "Dzmitry Malyshau",
        "timestamp": 1629145117
    },
    {
        "content": "<p>ty!</p>",
        "id": 249641817,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1629145122
    },
    {
        "content": "<p>and my pleasure</p>",
        "id": 249641821,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1629145124
    }
]