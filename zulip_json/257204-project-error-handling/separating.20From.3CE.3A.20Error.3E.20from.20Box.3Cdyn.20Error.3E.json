[
    {
        "content": "<p>so I played with your <code>try_trait_v2</code> crater build toolchain <span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> and tested out moving the <code>From</code> interconversions to be a property of a <code>Result</code> type instead of the inner <code>Error</code> and using that to <code>?</code> directly into a <code>Box&lt;dyn Error&gt;</code> equivalent that still implements the error trait</p>",
        "id": 228018308,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614386251
    },
    {
        "content": "<p>it worked like a charm and I'm still working through the possible implications that could have</p>",
        "id": 228018322,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614386264
    },
    {
        "content": "<p>my feeling is that this _should_ be the direction the language and error handling libraries move</p>",
        "id": 228018388,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614386288
    },
    {
        "content": "<p>eyre for example could be updated to remove the <code>From</code> impl on <code>eyre::Report</code>, change the <code>Result</code> from a type alias to its own independent type, and add all the necessary <code>From</code> logic to the <code>Try</code> type rather than the inner report</p>",
        "id": 228018460,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614386353
    },
    {
        "content": "<p>that would let <code>eyre::Report</code> interoperate much more cleanly with the rest of the ecosystem</p>",
        "id": 228018470,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614386365
    },
    {
        "content": "<p>i think there's an impl that I can't really write that I want to, which is approximately equal to this part of my test crate</p>",
        "id": 228018561,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614386430
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">FromResidual</span><span class=\"o\">&lt;</span><span class=\"nb\">Result</span><span class=\"o\">&lt;!</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">BoxError</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">ResultReport</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">from_residual</span><span class=\"p\">(</span><span class=\"n\">inner</span>: <span class=\"nb\">Result</span><span class=\"o\">&lt;!</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">BoxError</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">inner</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">inner</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"fm\">unreachable!</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">BoxError</span><span class=\"p\">(</span><span class=\"n\">inner</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">inner</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">inner</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">inner</span><span class=\"p\">.</span><span class=\"n\">downcast</span>::<span class=\"o\">&lt;</span><span class=\"n\">AnyError</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">inner</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">inner</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">inner</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">inner</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">BoxError</span><span class=\"p\">(</span><span class=\"n\">inner</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">inner</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">AnyError</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">inner</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">context</span>: <span class=\"nc\">Foo</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"w\">                </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">inner</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"n\">ResultReport</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">inner</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 228018567,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614386435
    },
    {
        "content": "<p>the specific types here are fillers to make the orphan rules happy, but basically when converting from a regular <code>Result&lt;!, BoxError&gt;</code> back into an <code>eyre::Result</code> it would attempt to downcast the box to an <code>eyre::Report</code>, and use that if it already was one, otherwise it wraps it</p>",
        "id": 228018610,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614386486
    },
    {
        "content": "<p>this won't work outside of std though, because <code>Box&lt;dyn Error&gt;</code> could impl Error in the future</p>",
        "id": 228018628,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614386509
    },
    {
        "content": "<p>so this doesn't work out perfectly</p>",
        "id": 228018634,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614386521
    },
    {
        "content": "<p>actually, can this work just fine? I might be able to do <code>Into&lt;Box&lt;dyn Error&gt;&gt;</code> and then immediately downcast in the main generic definition</p>",
        "id": 228018758,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614386634
    },
    {
        "content": "<p>oh yea, okay cool I think that works perfectly, so I can now remove all of this extra box stuff and just use the real Box&lt;dyn Error&gt; type</p>",
        "id": 228018992,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614386815
    },
    {
        "content": "<p>oh gosh, this changes a lot</p>",
        "id": 228019139,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614386936
    },
    {
        "content": "<p>very exciting</p>",
        "id": 228019149,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614386947
    },
    {
        "content": "<p>One thing I really want to see if we can figure out is some path to deprecating and finally removing <code>From&lt;E: Error&gt; for Box&lt;dyn Error&gt;</code></p>",
        "id": 228019742,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614387421
    },
    {
        "content": "<p>it seems like a lot of hacks would be needed to make it work though</p>",
        "id": 228019790,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614387459
    },
    {
        "content": "<p>so thats a brainstorming session for later</p>",
        "id": 228019796,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614387464
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/separating.20From.3CE.3A.20Error.3E.20from.20Box.3Cdyn.20Error.3E/near/228018322\">said</a>:</p>\n<blockquote>\n<p>it worked like a charm and I'm still working through the possible implications that could have</p>\n</blockquote>\n<p>I don't think I follow what you tried, but I'm glad it worked well <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n<p>Is this the \"make a new result-like type\" thing?</p>",
        "id": 228023977,
        "sender_full_name": "scottmcm",
        "timestamp": 1614390813
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/separating.20From.3CE.3A.20Error.3E.20from.20Box.3Cdyn.20Error.3E/near/228023977\">said</a>:</p>\n<blockquote>\n<p>I don't think I follow what you tried, but I'm glad it worked well <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n<p>Is this the \"make a new result-like type\" thing?</p>\n</blockquote>",
        "id": 228025466,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614392437
    },
    {
        "content": "<p>yess</p>",
        "id": 228025468,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614392439
    },
    {
        "content": "<p>one sec</p>",
        "id": 228025469,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614392441
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> <a href=\"https://gist.github.com/yaahc/9fe7a7631ac35df227e2061bd5d56be3\">https://gist.github.com/yaahc/9fe7a7631ac35df227e2061bd5d56be3</a></p>",
        "id": 228025684,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614392684
    },
    {
        "content": "<p>so the idea is that we'd add a <code>Result</code> like this to eyre, remove the <code>From&lt;E: Error&gt;</code> impl on <code>eyre::Report</code>, and add an <code>Error</code> impl to it</p>",
        "id": 228025721,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614392747
    },
    {
        "content": "<p>my mind is exploding, the possibility of all error types implementing error the way they actually should has such massive implications for the rest of the error reporting stuff we've been working on</p>",
        "id": 228026333,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614393434
    },
    {
        "content": "<p>Ah, because you're no longer restricted by the <code>T: From&lt;T&gt;</code></p>",
        "id": 228027529,
        "sender_full_name": "scottmcm",
        "timestamp": 1614394714
    },
    {
        "content": "<p>yup</p>",
        "id": 228027533,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614394719
    },
    {
        "content": "<p>so then <code>anyhow::Error</code> and <code>eyre::Report</code> get to impl Error</p>",
        "id": 228027545,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614394736
    },
    {
        "content": "<p>and you can even have them behave like normal errors</p>",
        "id": 228027551,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614394746
    },
    {
        "content": "<p>only printing the outermost error message and returning sources like expected</p>",
        "id": 228027563,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614394755
    },
    {
        "content": "<p>so you can wrap them in other error types</p>",
        "id": 228027566,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614394759
    },
    {
        "content": "<p>and then they provide a <code>.report()</code> fn like <code>display()</code> on <code>Path</code> for getting a type that implements only <code>Display</code>, not <code>Error</code></p>",
        "id": 228027581,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614394784
    },
    {
        "content": "<p>and this is what handles outputting your custom format, iterating over sources etc</p>",
        "id": 228027584,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614394800
    },
    {
        "content": "<p>then presuming we've updated the <code>PanicInfo</code> so it can contain <code>dyn Error</code>s and made it so <code>unwrap</code> passes through the error type as a dyn Error if it impls error</p>",
        "id": 228027654,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614394853
    },
    {
        "content": "<p>or even the custom result that you use could have an unwrap that just expects its an error</p>",
        "id": 228027672,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614394869
    },
    {
        "content": "<p>the panic handler can downcast the error back to the <code>eyre::Report</code> type concretely to do its custom reporting, or treat it like any other error if it doesn't recognize the static type</p>",
        "id": 228027689,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614394899
    },
    {
        "content": "<p>so now we can easily preserve additional context we tack onto errors</p>",
        "id": 228027692,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614394908
    },
    {
        "content": "<p>and the <code>FromResidual</code> lets us pass through <code>std::result::Result</code> easily without re-wrapping ourself multiple times and re-capturing the backtrace</p>",
        "id": 228027752,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614394943
    },
    {
        "content": "<p>by checking a downcast each time we create our residual from a box&lt;dyn Error&gt;</p>",
        "id": 228027755,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614394961
    },
    {
        "content": "<p>Wow, this all sounds epic.  It'll be a great example to answer felix's question about why <code>FromResidual</code> should be generic, too -- I'll have to add it to the RFC :)</p>\n<p>(Should I just link to this zulip thread as a reference?  Is there something better?)</p>",
        "id": 228027811,
        "sender_full_name": "scottmcm",
        "timestamp": 1614395028
    },
    {
        "content": "<p>i say just link the zulip thread</p>",
        "id": 228027815,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614395041
    },
    {
        "content": "<p>I'm working on a blog post rn for what we're planning on doing for the ecosystem</p>",
        "id": 228027862,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614395073
    },
    {
        "content": "<p>and im basically changing everything in it to be based on these plans</p>",
        "id": 228027864,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614395082
    },
    {
        "content": "<p>so depending on how long it takes me to write that (hard recently because depressed constantly) that will probably be a good link to include</p>",
        "id": 228027894,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614395118
    },
    {
        "content": "<p>but until then yea, just the zulip thread imo</p>",
        "id": 228027901,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614395125
    }
]