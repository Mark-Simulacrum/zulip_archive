[
    {
        "content": "<p>attempting to kick this back into motion as best as I can</p>\n<p>for people looking for background: <a href=\"https://github.com/rust-lang/project-error-handling/issues/3\">https://github.com/rust-lang/project-error-handling/issues/3</a></p>\n<p>Right now we need to figure out how to fix the coherence issues around the <code>From&lt;&amp;str&gt; for </code>Box&lt;dyn Error + Send + Sync + 'a&gt;<code> impl in </code>std`, which can no longer circumvent the orphan rule due to introduced crate boundaries. I feel like this might be an issue we need to communicate with the libs or lang teams to solve. cc <span class=\"user-mention\" data-user-id=\"204346\">@Ashley Mannix</span></p>",
        "id": 211291775,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601056579
    },
    {
        "content": "<p>the options I can think of are:</p>\n<ol>\n<li>Focus on pushing for a merge of <code>std</code>, <code>alloc</code>, and <code>core</code></li>\n<li>some sort of negative impl to circumvent the orphan rule and \"promise\" that <code>&amp;str</code> will never implement <code>std::error::Error</code>.</li>\n<li>Wait for specialization so that these impls can overlap</li>\n</ol>",
        "id": 211291964,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601056681
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> I get the distinct impression that merging std and alloc and core isn't <em>incredibly</em> hard, it's just not something anyone is prepared to pick up and run with.</p>",
        "id": 211292155,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601056777
    },
    {
        "content": "<p>(It's not <em>easy</em>, but the steps are more-or-less understood.)</p>",
        "id": 211292177,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601056788
    },
    {
        "content": "<p>cool!</p>",
        "id": 211292194,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601056795
    },
    {
        "content": "<p>If someone were prepared to take it on as their primary task for a couple of releases, I think it could be done without monumental effort.</p>",
        "id": 211292305,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601056826
    },
    {
        "content": "<p>I definitely want to wait until we've talked through all the possible solutions and decided that that's the best one but if that ends up being the best way forward for our error trait issues then I think I'd be happy to take that on or mentor/shepherd any contributors who want to drive it to completion</p>",
        "id": 211292515,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601056932
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> wait is the issue merging alloc and std or core and std?</p>",
        "id": 211292581,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601056980
    },
    {
        "content": "<p>or all three?</p>",
        "id": 211292596,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601056990
    },
    {
        "content": "<p>Alloc is \"between\" std and core. I don't think it'd be feasible to merge std and core without accounting for alloc.</p>",
        "id": 211292630,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601057012
    },
    {
        "content": "<p>And the same mechanisms that would allow merging std and core will extend to alloc.</p>",
        "id": 211292653,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601057024
    },
    {
        "content": "<p>The notion would be to have one crate for the standard library that has something like feature flags to determine whether it has core, core+alloc, or core+alloc+std.</p>",
        "id": 211292816,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601057093
    },
    {
        "content": "<p>(And, in the future, more fine-grained distinctions than that.)</p>",
        "id": 211292827,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601057099
    },
    {
        "content": "<p>gotchya</p>",
        "id": 211292836,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601057101
    },
    {
        "content": "<p>You may want to talk to <span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span> about cargo's <code>-Zbuild-std</code> features, which interact with this.</p>",
        "id": 211292927,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601057146
    },
    {
        "content": "<p>The <code>From&lt;&amp;str&gt; for Box&lt;dyn Error + Send + Sync + 'a&gt;</code> could go to the <code>alloc</code> crate, but it _still_ triggers coherence (wrongly?). <code>Box&lt;dyn Error ...&gt;</code> is after all a concrete type and <code>Box</code> is defined in the same crate.</p>",
        "id": 211300633,
        "sender_full_name": "nagisa",
        "timestamp": 1601060742
    },
    {
        "content": "<p>In particular the error message says:</p>\n<div class=\"codehilite\"><pre><span></span><code>//      = note: upstream crates may add a new impl of trait `core::error::Error` for type `&amp;str` in future versions\n</code></pre></div>\n\n\n<p>but that seems irrelevant to me, whatever impls of the <code>Error</code> trait upstream or downstream crates add here do not matter because <code>Box&lt;dyn Error&gt;</code> is already a concrete type.</p>",
        "id": 211300913,
        "sender_full_name": "nagisa",
        "timestamp": 1601060863
    },
    {
        "content": "<p>Ah, my bad, forgot about <code> impl&lt;'a, E: Error + Send + Sync + 'a&gt; From&lt;E&gt; for Box&lt;dyn Error + Send + Sync + 'a&gt;</code></p>",
        "id": 211301063,
        "sender_full_name": "nagisa",
        "timestamp": 1601060928
    },
    {
        "content": "<p>I'm assuming we can't use <code>#[feature(min_specialization)]</code> to fix this one</p>",
        "id": 211305008,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601061969
    },
    {
        "content": "<p>tho if we could specialize the <code>From&lt;E&gt;</code> impl on <code>Box&lt;dyn Error&gt;</code> that would be huge</p>",
        "id": 211305155,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601062010
    },
    {
        "content": "<p>wait no nvm</p>",
        "id": 211305253,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601062036
    },
    {
        "content": "<p>that wouldn't be that big of a deal</p>",
        "id": 211305270,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601062040
    },
    {
        "content": "<p>the big one is <code>From&lt;T&gt; for T</code></p>",
        "id": 211305291,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601062046
    },
    {
        "content": "<p>I think I tried the trivial thing but it didn't work.</p>",
        "id": 211308089,
        "sender_full_name": "nagisa",
        "timestamp": 1601062858
    },
    {
        "content": "<p>(i.e. adding a <code>default</code> to the methods of <code>impl&lt;'a, E: Error + Send + Sync + 'a&gt; From&lt;E&gt; for Box&lt;dyn Error + Send + Sync + 'a&gt;</code>.</p>",
        "id": 211308123,
        "sender_full_name": "nagisa",
        "timestamp": 1601062879
    },
    {
        "content": "<p>The primary difference between <code>std</code> and <code>core</code> is that <code>core</code> doesn't have access to <code>alloc</code>, right? I was always under the impression that the two were distinct on purpose. Is that actually not the case? Is eventually merging the two actually a desirable outcome?</p>",
        "id": 211331868,
        "sender_full_name": "Sean Chen (he/him)",
        "timestamp": 1601079880
    },
    {
        "content": "<blockquote>\n<p>The primary difference between std and core is that core doesn't have access to alloc, right? </p>\n</blockquote>\n<p>I think this is accurate, though there are also a lot of OS integrations in std that aren't in core or alloc afaik</p>",
        "id": 211331888,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601079936
    },
    {
        "content": "<p>I don't know the decision making process behind the split originally but my understanding is that its regarded as a mistake now, or at least it's no longer necessary</p>",
        "id": 211331936,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601079979
    },
    {
        "content": "<p>If I had to guess I suspect the reason for the split was that we didn't have good support for conditionally compiling std</p>",
        "id": 211331942,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601080002
    },
    {
        "content": "<p>I actually donâ€™t remember when the split first came about... That might be a fun bit of spelunking ðŸ™‚ <code>core</code> is kind of weird because itâ€™s a bit of an arbitrarily selected subset of the standard library that is platform agnostic and considered fundamental. Itâ€™s not everything that doesnâ€™t depend on an OS or a heap allocator. There are things that could be in <code>core</code> but arenâ€™t. Youâ€™d kind of hope the majority of the standard traits would be in <code>core</code> but there are glaring omissions (<code>Error</code> being the biggest). I would _love_ to be able to unify the standard library crates, avoid all the coherence sadness between them and the clumsy effort libraries need to go through to be maximally portable</p>",
        "id": 211337937,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1601088269
    },
    {
        "content": "<p>Maybe I am speaking out of place here, but would merging <code>alloc</code> with <code>core</code> and <code>std</code> not be detrimental to the granularity with which developers can <code>compose</code> their Rust programs? <br>\nNevertheless, <code>Error</code>is a fundamental part of any language, and I strongly believe it would be useful to have it in <code>core</code></p>",
        "id": 211348430,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1601107268
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"344196\">@Jakub Duchniewicz</span> not that I'm aware of</p>",
        "id": 211356992,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601121816
    },
    {
        "content": "<p>that said ive not done much no_std work</p>",
        "id": 211357055,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601121920
    },
    {
        "content": "<blockquote>\n<p>Nevertheless, Error is a fundamental part of any language, and I strongly believe it would be useful to have it in core</p>\n</blockquote>\n<p>Definitely, but at the same time, Error is dependent on Display which is dependent on the Formatter and might not available in no_std environments</p>",
        "id": 211358182,
        "sender_full_name": "DPC",
        "timestamp": 1601123853
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"344196\">@Jakub Duchniewicz</span> Actually I think the result could be giving libraries finer granularity to depend on just the capabilities they need entirely internally. I think most libraries I work on end up being unconditionally <code>no_std</code> because I donâ€™t usually need <code>std</code>. But using Cargo features to opt in/out of <code>std</code> or <code>alloc</code> doesnâ€™t feel ideal, since cross-cutting concerns like platform capabilities can be tricky to represent for all dependencies with the tools Cargo manifests give us</p>",
        "id": 211358312,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1601124053
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120823\">@DPC</span> isnt fmt already in core?</p>",
        "id": 211358376,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601124138
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120823\">@DPC</span> Thankfully <code>Display</code> is actually available in <code>core</code> <span aria-label=\"relieved\" class=\"emoji emoji-1f60c\" role=\"img\" title=\"relieved\">:relieved:</span></p>",
        "id": 211358380,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1601124149
    },
    {
        "content": "<p>It does definitely still leave you to figure out _how_ to implement <code>fmt::Write</code> though</p>",
        "id": 211358404,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1601124213
    },
    {
        "content": "<p>I guess most embedded code would format to like a serial port or something?</p>",
        "id": 211358586,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1601124513
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> Am I right in my understanding that stabilizing backtrace as-is isnâ€™t painting ourselves into any deeper corners with respect to <code>Error</code> in <code>core</code> than weâ€™re already in?</p>",
        "id": 211358779,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1601124851
    },
    {
        "content": "<p>I guess thatâ€™s what the prototypes aim to prove</p>",
        "id": 211358789,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1601124878
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204346\">@Ashley Mannix</span> as far as I can tell stabilizing backtrace won't pose an issue but I should look at <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span>'s PR more closely</p>",
        "id": 211358968,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601125152
    },
    {
        "content": "<p>oh dang that branch removed bt</p>",
        "id": 211359057,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601125287
    },
    {
        "content": "<p>so yea I still need to prototype doing a backtrace impl based on hooks</p>",
        "id": 211359072,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601125318
    },
    {
        "content": "<p>I'm guessing that will still be necessary even with a core std merge otherwise the backtrace type might still depend on the alloc or os features</p>",
        "id": 211359129,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601125358
    },
    {
        "content": "<p>gonna try working on that today</p>",
        "id": 211359147,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601125401
    },
    {
        "content": "<p>One thing about Display and other format friends is that it's <em>often</em> very large on code size generated. To the point where people have crates with alternative formatting systems just to cut down on code size.</p>\n<p>So throwing that requirement at all embedded folks is probably giving someone a pretty bad time.</p>",
        "id": 211363579,
        "sender_full_name": "Lokathor",
        "timestamp": 1601131952
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> I think the generic member access RFC can solve that issue just fine</p>",
        "id": 211366119,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601135208
    },
    {
        "content": "<p>hopefully doing empty unused <code>Display</code> and <code>Debug</code> impls isn't costly</p>",
        "id": 211366129,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601135228
    },
    {
        "content": "<p>I'm not familiar with that RFC</p>",
        "id": 211366428,
        "sender_full_name": "Lokathor",
        "timestamp": 1601135597
    },
    {
        "content": "<p><a href=\"https://github.com/yaahc/rfcs/blob/master/text/0000-dyn-error-generic-member-access.md\">https://github.com/yaahc/rfcs/blob/master/text/0000-dyn-error-generic-member-access.md</a></p>",
        "id": 211366446,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601135628
    },
    {
        "content": "<p>its introduces a new type kinda like Any but with support for passing values and trait objects too and uses that to essentially add a generic function for requesting data from errors by the type, so you could go <code>error.context::&lt;&amp;dyn ufmt::Display&gt;()</code> or w/e and get the error message via some other formatting trait</p>",
        "id": 211366543,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601135725
    },
    {
        "content": "<p>its a little out of date tho, nika did all the work on the type erasure, I originally was just using Any but I was sad about it not supporting slices and dyn traits, so she fixed it, more recently she updated it to be a much nicer implementation and that's living in a PR over here <a href=\"https://github.com/mystor/object-provider/pull/3\">https://github.com/mystor/object-provider/pull/3</a></p>",
        "id": 211366616,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601135792
    },
    {
        "content": "<p>but in theory this method could supercede <code>source</code>, <code>backtrace</code>, <code>Display</code>, and<code>Debug</code> as a way to get access to inner values of the error</p>",
        "id": 211366652,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601135867
    },
    {
        "content": "<p>and it can be used for upcasting, which is what you'd be doing for an alternate fmt trait</p>",
        "id": 211366695,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601135883
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">            </span><span class=\"k\">fn</span> <span class=\"nf\">provide</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">request</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Request</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">request</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">.</span><span class=\"n\">provide_ref</span>::<span class=\"o\">&lt;&amp;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">MyFavoriteDisplayAlternative</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 211366745,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601135972
    },
    {
        "content": "<p>back on topic tho, trying to figure out how to do this hook change and I'm quite lost ^_^</p>",
        "id": 211366793,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601136005
    },
    {
        "content": "<p>trying to figure out how the panic hooks in core are configured, but i expect its going to be quite a lot to dig into because I think they're built into the language</p>",
        "id": 211366815,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601136045
    },
    {
        "content": "<p>implemented</p>",
        "id": 211366817,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601136051
    },
    {
        "content": "<p>whatever</p>",
        "id": 211366818,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601136053
    },
    {
        "content": "<p>no you define your own</p>",
        "id": 211366834,
        "sender_full_name": "Lokathor",
        "timestamp": 1601136079
    },
    {
        "content": "<p>theres some fn's that you have to define right</p>",
        "id": 211366840,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601136092
    },
    {
        "content": "<p>im looking at this</p>",
        "id": 211366842,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601136095
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">__rust_panic_cleanup</span><span class=\"p\">(</span><span class=\"n\">payload</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">Any</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">static</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"sd\">/// `payload` is actually a `*mut &amp;mut dyn BoxMeUp` but that would cause FFI warnings.</span>\n<span class=\"w\">    </span><span class=\"sd\">/// It cannot be `Box&lt;dyn BoxMeUp&gt;` because the other end of this call does not depend</span>\n<span class=\"w\">    </span><span class=\"sd\">/// on liballoc, and thus cannot use `Box`.</span>\n<span class=\"w\">    </span><span class=\"cp\">#[unwind(allowed)]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">__rust_start_panic</span><span class=\"p\">(</span><span class=\"n\">payload</span>: <span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u32</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 211366843,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601136103
    },
    {
        "content": "<p>TIL libpanic is its own thing</p>",
        "id": 211366919,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601136179
    },
    {
        "content": "<p>neat</p>",
        "id": 211366947,
        "sender_full_name": "Lokathor",
        "timestamp": 1601136221
    },
    {
        "content": "<p>oh theres two<br>\nlibpanic_abort and libpanic_unwind</p>",
        "id": 211367009,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601136282
    },
    {
        "content": "<p>that must be how they switch the panic behaviour based on the config</p>",
        "id": 211367020,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601136302
    },
    {
        "content": "<p>but that also means I'm probably too far, because libpanic_abort's impl doesn't seem to pass the payload into any other functions</p>",
        "id": 211367030,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601136317
    },
    {
        "content": "<p>and I'm 99% sure panic handlers still get called before abort</p>",
        "id": 211367036,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601136327
    },
    {
        "content": "<p>so there must be something else that is happening first, gonna start tracing down thru the panic macro I guess</p>",
        "id": 211367042,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601136349
    },
    {
        "content": "<p>there it is, this is the lang item i was looking for</p>",
        "id": 211367194,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601136511
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"Rust\"</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[lang = </span><span class=\"s\">\"panic_impl\"</span><span class=\"cp\">]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">panic_impl</span><span class=\"p\">(</span><span class=\"n\">pi</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">PanicInfo</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"o\">!</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 211367195,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601136514
    },
    {
        "content": "<p>i have no idea where this goes, can't find an instance of it being implemented in <code>std</code> D:</p>",
        "id": 211367333,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601136715
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>\n</code></pre></div>",
        "id": 211367391,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601136772
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>1. In `src/librustc_middle/middle/weak_lang_items.rs`, `panic_impl` is declared as &#39;weak lang item&#39;,\n   with the symbol `rust_begin_unwind`. This is used in `librustc_typeck/collect.rs`\n   to set the actual symbol name to `rust_begin_unwind`.\n\n   Note that `panic_impl` is declared in an `extern &quot;Rust&quot;` block,\n   which means that libcore will attempt to call a foreign symbol called `rust_begin_unwind`\n   (to be resolved at link time)\n</code></pre></div>",
        "id": 211367393,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601136780
    },
    {
        "content": "<p>here's my extremely vague guess at what has to be done <a href=\"https://github.com/rust-lang/project-error-handling/issues/3#issuecomment-699516309\">https://github.com/rust-lang/project-error-handling/issues/3#issuecomment-699516309</a></p>",
        "id": 211368212,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601137965
    },
    {
        "content": "<p>I think im going to explore the global allocator stuff now</p>",
        "id": 211368219,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601137975
    },
    {
        "content": "<p>since its apparently similar</p>",
        "id": 211368223,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601137978
    },
    {
        "content": "<p>maybe its easier to understand or closer to what we need for backtrace</p>",
        "id": 211368233,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601137987
    },
    {
        "content": "<p>So in no_std, the panic_handler is called as soon as the panic starts, and it's up to the panic handler to never return (aborting is <em>one</em> way you might do this).</p>",
        "id": 211369653,
        "sender_full_name": "Lokathor",
        "timestamp": 1601139998
    },
    {
        "content": "<p>in std, i believe the ordering is that the panic starts, then the runtime's built in panic_handler calls the panic hook (which prints your panic message to stderr by default), then the runtime's panic_handler will either abort or unwind after the panic_hook returns.</p>",
        "id": 211369698,
        "sender_full_name": "Lokathor",
        "timestamp": 1601140081
    },
    {
        "content": "<p>examples of libs that Lokathor is talking about:</p>\n<ul>\n<li><a href=\"https://github.com/japaric/ufmt\">https://github.com/japaric/ufmt</a></li>\n<li><a href=\"https://github.com/knurling-rs/defmt\">https://github.com/knurling-rs/defmt</a></li>\n</ul>",
        "id": 211525349,
        "sender_full_name": "Jubilee",
        "timestamp": 1601315108
    },
    {
        "content": "<p>At the risk of sounding silly, I feel like part of the problem is that we want viewable errors to have whatever encoding works for the platform, but they should still be parseable. In some computers, historically, that has been a series of beeps. However, fmt::Display is entangled with a concept of specifically <em>text</em> formatting, which is very important, but not the same.</p>",
        "id": 211526218,
        "sender_full_name": "Jubilee",
        "timestamp": 1601315555
    },
    {
        "content": "<p>still early days but I've started working on the proof of concept :D <a href=\"https://github.com/rust-lang/rust/pull/77384/files\">https://github.com/rust-lang/rust/pull/77384/files</a></p>",
        "id": 211863793,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601520376
    },
    {
        "content": "<p>rn it doesn't even compile let alone work but I'll hopefully get it in a working state tomorrow</p>",
        "id": 211863797,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601520388
    },
    {
        "content": "<p>Any progress <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 212138283,
        "sender_full_name": "oliver",
        "timestamp": 1601679496
    },
    {
        "content": "<p>I'm having trouble adding <code>core_backtrace</code> to the symbols proc macro</p>",
        "id": 212138440,
        "sender_full_name": "oliver",
        "timestamp": 1601679614
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span>: <span class=\"nc\">Symbol</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">compile_error</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">must</span><span class=\"w\"> </span><span class=\"n\">precede</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">core_backtrace</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"n\">error</span>: <span class=\"nc\">proc</span><span class=\"w\"> </span><span class=\"kr\">macro</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">compiler</span><span class=\"o\">/</span><span class=\"n\">rustc_span</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">symbol</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">22</span>:<span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">22</span><span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"n\">symbols</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"mi\">23</span><span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"c1\">// After modifying this list adjust `is_special`, `is_used_keyword`/`is_unused_keyword`,</span>\n<span class=\"mi\">24</span><span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"c1\">// this should be rarely necessary though if the keywords are kept in alphabetic order.</span>\n<span class=\"mi\">25</span><span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"n\">Keywords</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">1196</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"mi\">1197</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">_</span><span class=\"o\">^</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">help</span>: <span class=\"nc\">message</span>: <span class=\"nc\">errors</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">Keywords</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"o\">/</span><span class=\"n\">or</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">Symbols</span><span class=\"err\">`</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 212138508,
        "sender_full_name": "oliver",
        "timestamp": 1601679679
    },
    {
        "content": "<p>ez fix <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 212138610,
        "sender_full_name": "oliver",
        "timestamp": 1601679761
    },
    {
        "content": "<p>i got some more work done yesterday so now it has that <code>core_backtrace</code> feature and it compiles but doesn't pass tests, but I haven't done any more work today and probably wont due to some pretty fked up air quality and heat in SF today</p>",
        "id": 212142901,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601683843
    },
    {
        "content": "<p>extremely hard to focus when I have to close all the windows in an apartment with no air conditioning, its rather miserable in here today</p>",
        "id": 212142927,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601683866
    },
    {
        "content": "<p>Yeah I've been hearing about it from friends</p>",
        "id": 212143740,
        "sender_full_name": "oliver",
        "timestamp": 1601684734
    },
    {
        "content": "<p>Oh yikes! Stay safe <span aria-label=\"sweat\" class=\"emoji emoji-1f613\" role=\"img\" title=\"sweat\">:sweat:</span> Bushfires are the pits</p>",
        "id": 212146888,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1601689399
    }
]