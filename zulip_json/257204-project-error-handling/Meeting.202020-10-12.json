[
    {
        "content": "<p>Agenda: <a href=\"https://hackmd.io/@rust-libs/SkPmShkLD\">https://hackmd.io/@rust-libs/SkPmShkLD</a></p>",
        "id": 213068478,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602525474
    },
    {
        "content": "<p>Alrighty, time to get started</p>",
        "id": 213068721,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602525623
    },
    {
        "content": "<p>ping <span class=\"user-mention\" data-user-id=\"300743\">@Sean Chen</span> to confirm you're around and taking minutes</p>",
        "id": 213068763,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602525668
    },
    {
        "content": "<p>also <span class=\"user-mention\" data-user-id=\"344196\">@Jakub Duchniewicz</span>  for the status update on type_id once we get to that</p>",
        "id": 213068804,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602525699
    },
    {
        "content": "<p>I think everyone else has already waved</p>",
        "id": 213068820,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602525708
    },
    {
        "content": "<p>I added an agenda item for anything we'd like to raise in the Libs meeting later this week</p>",
        "id": 213068944,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1602525767
    },
    {
        "content": "<p>okay so I'll start with the backtrace in core, I got a fair bit of work done on that the week before last, I got to the point where it was compiling but so far have not solved certain issues around how to actually implement the hooks</p>",
        "id": 213068947,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602525769
    },
    {
        "content": "<p>last week I didn't have any time to work on it unfortunately</p>",
        "id": 213068973,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602525783
    },
    {
        "content": "<p>so far though everything seems to be moving forward just fine, I don't for see any issues, though admittedly there are a few unanswered questions around the hooks themselves</p>",
        "id": 213069021,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602525820
    },
    {
        "content": "<p>What issues did you hit around the hooks?</p>",
        "id": 213069031,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1602525828
    },
    {
        "content": "<p>I haven't actually implemented them before :)</p>",
        "id": 213069089,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1602525845
    },
    {
        "content": "<p>mainly how to set one up, and in particular how to provide a default hook for <code>no_std</code> environments because I'm assuming we don't want to require no_std crates setup the backtrace equivalent of <code>#[panic_handler]</code> themselves</p>",
        "id": 213069140,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602525878
    },
    {
        "content": "<p>that's pretty much it for the backtrace in core work so far</p>",
        "id": 213069262,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602525971
    },
    {
        "content": "<p>next up is \"Setup <code>The Rust Error Book</code>,</p>",
        "id": 213069295,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602526004
    },
    {
        "content": "<p>Ah ok. I'm not sure what we need to do there. Would you like some more <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span> on it? Sorry if you already posted a link to a branch somewhere <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 213069314,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1602526019
    },
    {
        "content": "<p>oh, let me grab the link rn</p>",
        "id": 213069333,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602526037
    },
    {
        "content": "<p>eyes wouldn't be minded, though rn its still early</p>",
        "id": 213069358,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602526057
    },
    {
        "content": "<p>tho I think some of the unsafe code I wrote is almost certainly wrong, lol</p>",
        "id": 213069372,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602526068
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/77384\">https://github.com/rust-lang/rust/pull/77384</a></p>",
        "id": 213069433,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602526092
    },
    {
        "content": "<p>okay so, I believe <span class=\"user-mention\" data-user-id=\"344329\">@must-compute</span> setup the book in our repo</p>",
        "id": 213069450,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602526107
    },
    {
        "content": "<p>This is different than the other work on the backtrace api?</p>",
        "id": 213069474,
        "sender_full_name": "oliver",
        "timestamp": 1602526129
    },
    {
        "content": "<p>yeah we have a folder for adding book content now</p>",
        "id": 213069479,
        "sender_full_name": "must-compute",
        "timestamp": 1602526135
    },
    {
        "content": "<p>yes <span class=\"user-mention\" data-user-id=\"281739\">@oliver</span></p>",
        "id": 213069484,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602526140
    },
    {
        "content": "<p>How are they related?</p>",
        "id": 213069507,
        "sender_full_name": "oliver",
        "timestamp": 1602526168
    },
    {
        "content": "<p>I was reviewing this: <a href=\"https://github.com/rust-lang/rust/pull/64154\">https://github.com/rust-lang/rust/pull/64154</a></p>",
        "id": 213069600,
        "sender_full_name": "oliver",
        "timestamp": 1602526205
    },
    {
        "content": "<p>Sorry, was running a bit late. Here now and taking minutes :)</p>",
        "id": 213069624,
        "sender_full_name": "Sean Chen (he/him)",
        "timestamp": 1602526224
    },
    {
        "content": "<p>this work is about exporting the entire <code>Backtrace</code> interface from <code>core</code> in a way that doesn't depend on <code>alloc</code>, that one is about adding the <code>Backtrace</code> module to std itself</p>",
        "id": 213069647,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602526240
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281739\">@oliver</span> Supporting backtraces in <code>core</code> <span aria-label=\"sparkles\" class=\"emoji emoji-2728\" role=\"img\" title=\"sparkles\">:sparkles:</span> somehow <span aria-label=\"sparkles\" class=\"emoji emoji-2728\" role=\"img\" title=\"sparkles\">:sparkles:</span>  was raised as a blocker to stabilizing that API</p>",
        "id": 213069648,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1602526242
    },
    {
        "content": "<p>lol, somehow</p>",
        "id": 213069665,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602526254
    },
    {
        "content": "<p>it was me, im sorry</p>",
        "id": 213069674,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602526262
    },
    {
        "content": "<p>I'm more and more convinced that it won't be a blocker though</p>",
        "id": 213069698,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602526287
    },
    {
        "content": "<p>if there's nothing else blocking it I wonder if we might be able to start the stabilization process</p>",
        "id": 213069719,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602526307
    },
    {
        "content": "<p>I'm assuming it will still take months to hit stable, and that we could back it out if issues are discovered</p>",
        "id": 213069774,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602526323
    },
    {
        "content": "<p>might be something to bring up in the next libs meeting <span class=\"user-mention\" data-user-id=\"204346\">@Ashley Mannix</span> ?</p>",
        "id": 213069798,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602526340
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> I'll drop a ping on <a href=\"https://github.com/rust-lang/rust/pull/72981\">https://github.com/rust-lang/rust/pull/72981</a> and add it to our Libs meeting</p>",
        "id": 213069803,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1602526344
    },
    {
        "content": "<p>awesome</p>",
        "id": 213069815,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602526349
    },
    {
        "content": "<p>alrighty</p>",
        "id": 213069837,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602526361
    },
    {
        "content": "<p>next up is the blog post detailing our long term vision / goals, how's that going <span class=\"user-mention\" data-user-id=\"300743\">@Sean Chen</span>?</p>",
        "id": 213069868,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602526385
    },
    {
        "content": "<p>once the stabilization PR is merged it's two releases to stable, so 7-12 weeks or so.</p>",
        "id": 213069989,
        "sender_full_name": "Lokathor",
        "timestamp": 1602526472
    },
    {
        "content": "<p>I have a draft here: <a href=\"https://hackmd.io/GMLcORX_R7W4de0ZryDIxg?view\">https://hackmd.io/GMLcORX_R7W4de0ZryDIxg?view</a></p>",
        "id": 213070015,
        "sender_full_name": "Sean Chen (he/him)",
        "timestamp": 1602526491
    },
    {
        "content": "<p>Would like additional eyes on it to get thoughts :)</p>",
        "id": 213070038,
        "sender_full_name": "Sean Chen (he/him)",
        "timestamp": 1602526502
    },
    {
        "content": "<p>I'll start reviewing that after this meeting</p>",
        "id": 213070049,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602526517
    },
    {
        "content": "<p>I will also give my feedback just after the meeting</p>",
        "id": 213070067,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1602526536
    },
    {
        "content": "<p>Alright</p>",
        "id": 213070073,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602526544
    },
    {
        "content": "<p>onto status updates of the in progress PRs</p>",
        "id": 213070086,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602526550
    },
    {
        "content": "<p>Me too <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> <span class=\"user-mention\" data-user-id=\"300743\">@Sean Chen</span> I'll add you to the HackMD so you can create notes in the Libs group too</p>",
        "id": 213070091,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1602526552
    },
    {
        "content": "<p>Awesome, thanks y'all! :)</p>",
        "id": 213070145,
        "sender_full_name": "Sean Chen (he/him)",
        "timestamp": 1602526569
    },
    {
        "content": "<p>Generic Member Access is first</p>",
        "id": 213070156,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602526577
    },
    {
        "content": "<p>so I need to update the RFC a little because <span class=\"user-mention\" data-user-id=\"270901\">@Nika Layzell</span> updated her object-provider crate to have a nicer API</p>",
        "id": 213070188,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602526611
    },
    {
        "content": "<p>so I'd like to include that version in the RFC, but other than that its basically stuck in limbo</p>",
        "id": 213070201,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602526625
    },
    {
        "content": "<p>The next step seems to be \"get it approved\"</p>",
        "id": 213070214,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602526647
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> Does it need some libs input too?</p>",
        "id": 213070221,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1602526651
    },
    {
        "content": "<p>yes, though that should wait until I've updated the RFC to include the latest object-provider API</p>",
        "id": 213070251,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602526674
    },
    {
        "content": "<p>Is this \"attach arbitrary data to an Error\"?</p>",
        "id": 213070254,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1602526676
    },
    {
        "content": "<p>other way around, its access arbitrary data from an error</p>",
        "id": 213070313,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602526689
    },
    {
        "content": "<p>so its a generic superset of <code>source</code> and <code>backtrace</code></p>",
        "id": 213070347,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602526709
    },
    {
        "content": "<p>where <code>source()</code> = <code>err.context::&lt;&amp;dyn Error + 'static&gt;()</code></p>",
        "id": 213070377,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602526727
    },
    {
        "content": "<p>Interesting. I will note that Tide presently goes the opposite route: access arbitrary error from a http <code>Response</code>.</p>",
        "id": 213070426,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1602526753
    },
    {
        "content": "<p>not following</p>",
        "id": 213070447,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602526775
    },
    {
        "content": "<p>can you show me after the meeting?</p>",
        "id": 213070478,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602526787
    },
    {
        "content": "<p>moving on though, next up is <code>Fix the error trait / Stabilizing Backtrace</code></p>",
        "id": 213070577,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602526824
    },
    {
        "content": "<p>(Continue on, I'll comment if in the RFC if it's relevant)</p>",
        "id": 213070578,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1602526824
    },
    {
        "content": "<p>I guess we covered that one a bit already?</p>",
        "id": 213070668,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1602526882
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/Meeting.202020-10-12/near/213070577\">said</a>:</p>\n<blockquote>\n<p>moving on though, next up is <code>Fix the error trait / Stabilizing Backtrace</code></p>\n</blockquote>\n<p><a href=\"https://github.com/rust-lang/rust/issues/53487\">https://github.com/rust-lang/rust/issues/53487</a></p>",
        "id": 213070684,
        "sender_full_name": "oliver",
        "timestamp": 1602526889
    },
    {
        "content": "<p>that's currently blocked on the core in backtrace work that we already talked about so I don't think there's much more to add there, and based on earlier discussion in this meeting we may go ahead and start the stabilization work for backtrace which is I think the last bit of <code>Fix the error trait</code></p>",
        "id": 213070685,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602526890
    },
    {
        "content": "<p>tho I didn't remember to double check the issue before the meeting so I might be missing something</p>",
        "id": 213070706,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602526901
    },
    {
        "content": "<p>There's an open PR for stabilizing <code>backtrace</code>: <a href=\"https://github.com/rust-lang/rust/pull/72981\">https://github.com/rust-lang/rust/pull/72981</a></p>",
        "id": 213070730,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1602526918
    },
    {
        "content": "<p>I'm confused with all the different backtraces lol</p>",
        "id": 213070803,
        "sender_full_name": "oliver",
        "timestamp": 1602526948
    },
    {
        "content": "<p>so it looks like we might need to do some documentation work</p>",
        "id": 213070806,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602526950
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281739\">oliver</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/Meeting.202020-10-12/near/213070803\">said</a>:</p>\n<blockquote>\n<p>I'm confused with all the different backtraces lol</p>\n</blockquote>\n<p>im sorry <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 213070847,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602526988
    },
    {
        "content": "<p>alright so next up is <span class=\"user-mention\" data-user-id=\"281739\">@oliver</span>  on \"stabilizing error source iterators\"</p>",
        "id": 213070882,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602527012
    },
    {
        "content": "<p>looks like you already added some info on that to the agenda items</p>",
        "id": 213070906,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602527028
    },
    {
        "content": "<p>yeah there's the basics there, it's a rather deep item</p>",
        "id": 213070967,
        "sender_full_name": "oliver",
        "timestamp": 1602527047
    },
    {
        "content": "<p>isn't that pending on a poc to core?</p>",
        "id": 213070979,
        "sender_full_name": "DPC",
        "timestamp": 1602527055
    },
    {
        "content": "<p>I don't think so?</p>",
        "id": 213070999,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602527072
    },
    {
        "content": "<p>but the trait object vs provided methods comment makes me think it might matter</p>",
        "id": 213071018,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602527086
    },
    {
        "content": "<p>I think it's waiting for some other stabilization and there is disagreement in the comments</p>",
        "id": 213071041,
        "sender_full_name": "oliver",
        "timestamp": 1602527098
    },
    {
        "content": "<p>tho any issues introduced there wouldn't be any worse than the existing issues with downcast</p>",
        "id": 213071060,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602527109
    },
    {
        "content": "<p>I haven't caught up on it recently, but I think there were some design decisions to be made on things like whether the iterators include the current error</p>",
        "id": 213071068,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1602527112
    },
    {
        "content": "<p>I see, how could we help with making that decision?</p>",
        "id": 213071099,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602527143
    },
    {
        "content": "<p>Fix the error trait?</p>",
        "id": 213071135,
        "sender_full_name": "oliver",
        "timestamp": 1602527162
    },
    {
        "content": "<p>_wondering if we could do a write-up of the pros and cons and make a recommendation or something_</p>",
        "id": 213071163,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602527163
    },
    {
        "content": "<p>my comment was with respect to <a href=\"https://github.com/rust-lang/rust/pull/72981#issuecomment-638965446\">https://github.com/rust-lang/rust/pull/72981#issuecomment-638965446</a></p>",
        "id": 213071177,
        "sender_full_name": "DPC",
        "timestamp": 1602527173
    },
    {
        "content": "<p>oh wait, thats for backtrace and error in core</p>",
        "id": 213071202,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602527194
    },
    {
        "content": "<p>ah ok</p>",
        "id": 213071210,
        "sender_full_name": "DPC",
        "timestamp": 1602527204
    },
    {
        "content": "<p>we're on source iterators rn</p>",
        "id": 213071213,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602527205
    },
    {
        "content": "<p>Basically we know that an Iterator imp over <code>Error:source()</code> is possible and desirable to users</p>",
        "id": 213071252,
        "sender_full_name": "oliver",
        "timestamp": 1602527241
    },
    {
        "content": "<p>The convenience of the interface is problematic</p>",
        "id": 213071277,
        "sender_full_name": "oliver",
        "timestamp": 1602527262
    },
    {
        "content": "<p>And there are a ton of related issues at varying stages of progress</p>",
        "id": 213071343,
        "sender_full_name": "oliver",
        "timestamp": 1602527291
    },
    {
        "content": "<p>What do you mean by \"the convenience is problematic\"?</p>",
        "id": 213071380,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1602527311
    },
    {
        "content": "<p>Most notably as far as I can tell is fixing the error trait</p>",
        "id": 213071391,
        "sender_full_name": "oliver",
        "timestamp": 1602527318
    },
    {
        "content": "<p>when you say fixing the error trait what are you referring to?</p>",
        "id": 213071416,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602527336
    },
    {
        "content": "<blockquote>\n<p>The other issue I see blocking stability (aside from the name) is the T: Error vs dyn Error issue. For reasons that are beyond annoying, Box&lt;dyn Error&gt; does not implement Error. This makes whether methods are implemented for dyn Error or T: Error matter in really annoying ways.</p>\n</blockquote>\n<p>Hmm, I wonder if <a href=\"https://github.com/rust-lang/rust/pull/75180\">https://github.com/rust-lang/rust/pull/75180</a> feeds into this at all</p>",
        "id": 213071437,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1602527350
    },
    {
        "content": "<p>afaik the only way those are related is the <code>source</code> fn which was added by that RFC</p>",
        "id": 213071439,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602527351
    },
    {
        "content": "<p>and thats already on stable</p>",
        "id": 213071444,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602527356
    },
    {
        "content": "<p>It would be good to talk about <a href=\"https://github.com/rust-lang/rust/pull/75180\">https://github.com/rust-lang/rust/pull/75180</a> sometime <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 213071454,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1602527365
    },
    {
        "content": "<p>agreed</p>",
        "id": 213071486,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602527391
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"319552\">Jeremiah Senkpiel</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/Meeting.202020-10-12/near/213071380\">said</a>:</p>\n<blockquote>\n<p>What do you mean by \"the convenience is problematic\"?</p>\n</blockquote>\n<p>It appears to be a conflict between introducing a trait object vs. providing a new method, there is some spaghetti'ing and awkward borrow syntax, etc, in some of the designs</p>",
        "id": 213071556,
        "sender_full_name": "oliver",
        "timestamp": 1602527417
    },
    {
        "content": "<p>makes sense</p>",
        "id": 213071584,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602527445
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/Meeting.202020-10-12/near/213071416\">said</a>:</p>\n<blockquote>\n<p>when you say fixing the error trait what are you referring to?</p>\n</blockquote>\n<p>It seems to be pointing to RFC <a href=\"https://github.com/rust-lang/rust/issues/2504\">#2504</a></p>",
        "id": 213071645,
        "sender_full_name": "oliver",
        "timestamp": 1602527498
    },
    {
        "content": "<p>okay, it seems like we should resolve the fix the error trait RFC first and foremost then, and revisit the source iterator issue once that is done</p>",
        "id": 213071795,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602527580
    },
    {
        "content": "<p>does that sound accurate <span class=\"user-mention\" data-user-id=\"281739\">@oliver</span> ?</p>",
        "id": 213071805,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602527587
    },
    {
        "content": "<p>it sounds like multiple things  are blocked by \"fix the Error trait\" _(he says, probably restating the very obvious)_</p>",
        "id": 213071835,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1602527613
    },
    {
        "content": "<p>it pushes the discussion out into a broader scope yes</p>",
        "id": 213071930,
        "sender_full_name": "oliver",
        "timestamp": 1602527656
    },
    {
        "content": "<p>alright</p>",
        "id": 213072017,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602527737
    },
    {
        "content": "<p>moving on, next up is <code>stabilizing Error::type_id</code>, <span class=\"user-mention\" data-user-id=\"344196\">@Jakub Duchniewicz</span> whats the status of that issue?</p>",
        "id": 213072089,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602527773
    },
    {
        "content": "<p>No good news about stabilizing that unfortunately</p>",
        "id": 213072124,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1602527799
    },
    {
        "content": "<p>There are several approaches to that but all of them seem to be waiting for other stabilizations/RFC's</p>",
        "id": 213072172,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1602527837
    },
    {
        "content": "<p>do you know which ones they're blocked on?</p>",
        "id": 213072189,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602527848
    },
    {
        "content": "<p>#[marker] trait stabilization <a href=\"https://github.com/rust-lang/rust/issues/29864\">https://github.com/rust-lang/rust/issues/29864</a></p>",
        "id": 213072190,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1602527850
    },
    {
        "content": "<p>Is that actually something we want to stabilize?</p>",
        "id": 213072210,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1602527867
    },
    {
        "content": "<p>might as well paste all of my notes</p>",
        "id": 213072213,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1602527869
    },
    {
        "content": "<p>negative trait impls<br>\ndynamic vtable type_id (like C++ typeid keyword) <a href=\"https://github.com/rust-lang/rfcs/pull/2580\">https://github.com/rust-lang/rfcs/pull/2580</a><br>\nfinal keyword -&gt; no overriding of trait any more<br>\nnew trait TypeInfo <a href=\"https://github.com/rust-lang/rfcs/pull/2738\">https://github.com/rust-lang/rfcs/pull/2738</a></p>",
        "id": 213072214,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1602527871
    },
    {
        "content": "<p>wow, that's a lot more involved than I expected, lol</p>",
        "id": 213072277,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602527895
    },
    {
        "content": "<p><code>final</code> keyword approach and negative trait impls look most promising tho</p>",
        "id": 213072292,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1602527915
    },
    {
        "content": "<p>Is there an issue for <code>final</code>?</p>",
        "id": 213072333,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1602527947
    },
    {
        "content": "<p>As far as I know <code>Error::type_id</code> is a private detail to make downcasting work without an explicit <code>+ Any</code> bound</p>",
        "id": 213072342,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1602527954
    },
    {
        "content": "<p>That is also what it appeared to be when I skimmed it.</p>",
        "id": 213072378,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1602527993
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"319552\">@Jeremiah Senkpiel</span> did not see any</p>",
        "id": 213072419,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1602528003
    },
    {
        "content": "<p>I'm concerned this one may be a bit of a rabbit hole that we don't want to focus on rn</p>",
        "id": 213072767,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602528050
    },
    {
        "content": "<p>That is also my feeling</p>",
        "id": 213072787,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1602528064
    },
    {
        "content": "<p>marked as <code>unsound</code></p>",
        "id": 213072797,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1602528070
    },
    {
        "content": "<p>it might be good to figure out what people would want to use <code>type_id</code> for and how big of an issue it not being stable is</p>",
        "id": 213072806,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602528079
    },
    {
        "content": "<p>I've never needed it personally</p>",
        "id": 213072818,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602528089
    },
    {
        "content": "<p>From what I read it was up only for a very short window</p>",
        "id": 213072833,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1602528100
    },
    {
        "content": "<p>until the vulnerability was reported</p>",
        "id": 213072848,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1602528110
    },
    {
        "content": "<p>so judging from that, almost nobody uses it</p>",
        "id": 213072908,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1602528129
    },
    {
        "content": "<p>alright, then I say we back burner this issue</p>",
        "id": 213072931,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602528147
    },
    {
        "content": "<p>Next up <span class=\"user-mention\" data-user-id=\"120823\">@DPC</span> with <code>PanicInfo::message</code></p>",
        "id": 213072973,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602528180
    },
    {
        "content": "<p>sorry haven't made any progress on that</p>",
        "id": 213072983,
        "sender_full_name": "DPC",
        "timestamp": 1602528189
    },
    {
        "content": "<p>no worries, we'll punt that to next meeting</p>",
        "id": 213073006,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602528206
    },
    {
        "content": "<p>did you still want to have it assigned to you?</p>",
        "id": 213073018,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602528216
    },
    {
        "content": "<p>was working on another unrelated pr but i can side track that for now and work on this</p>",
        "id": 213073023,
        "sender_full_name": "DPC",
        "timestamp": 1602528217
    },
    {
        "content": "<p>ye not an issue</p>",
        "id": 213073038,
        "sender_full_name": "DPC",
        "timestamp": 1602528229
    },
    {
        "content": "<p>alrighty</p>",
        "id": 213073044,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602528232
    },
    {
        "content": "<p>Then the last status update is from <span class=\"user-mention\" data-user-id=\"344328\">@Charles Ellis O'Riley Jr.</span> on \"nicer assert messages\"</p>",
        "id": 213073099,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602528247
    },
    {
        "content": "<p>Tracking issue for RFC 2011: nicer assert messages <a href=\"https://github.com/rust-lang/rust/issues/44838\">#44838</a> -  Per the tracking issue,, assert! should be moved to a procedural macro defined in the compiler.  I'll need some insight on how to get started on that.  Secondly, I believe I know what's meant by a \"nicer assert message\".  See some examples of what I believe is asked for:</p>\n<p>let a = 1;<br>\nlet b = 2;<br>\nassert!(a == b);<br>\nthread '&lt;main&gt;' panicked at 'assertion failed:<br>\nExpected: a == b<br>\nWith expansion: 1 == 2'<br>\nWith addition operators:</p>\n<p>let a = 1;<br>\nlet b = 1;<br>\nlet c = 3;<br>\nassert!(a + b == c);<br>\nthread '&lt;main&gt;' panicked at 'assertion failed:<br>\nExpected: a + b == c<br>\nWith expansion: 1 + 1 == 3'<br>\nBool only:</p>\n<p>let v = vec![0u8;1];<br>\nassert!(v.is_empty());<br>\nthread '&lt;main&gt;' panicked at 'assertion failed:<br>\nExpected: v.is_empty()'<br>\nWith short-circuit:</p>\n<p>assert!(true &amp;&amp; false &amp;&amp; true);<br>\nthread '&lt;main&gt;' panicked at 'assertion failed:<br>\nExpected: true &amp;&amp; false &amp;&amp; true<br>\nWith expansion: true &amp;&amp; false &amp;&amp; (not evaluated)'<br>\nWith bracket blocks:</p>\n<p>let a = 1;<br>\nlet b = 1;<br>\nlet c = 3;<br>\nassert!({a + b} == c);<br>\nthread '&lt;main&gt;' panicked at 'assertion failed:<br>\nExpected: {a + b} == c<br>\nWith expansion: 2 == 3'<br>\nWith fallback:</p>\n<p>let a = NonDebug{};<br>\nlet b = NonDebug{};<br>\nassert!(a == b);<br>\nthread '&lt;main&gt;' panicked at 'assertion failed:<br>\nExpected: a == b<br>\nWith expansion: (a) == (b)'</p>\n<p>Any thoughts on this?   I'm  assuming that's what's expected after trying each example.</p>",
        "id": 213073109,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1602528253
    },
    {
        "content": "<p>(you can use backticks to paste code in zulip for easier formatting <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span>  )</p>",
        "id": 213073174,
        "sender_full_name": "DPC",
        "timestamp": 1602528302
    },
    {
        "content": "<p>?</p>",
        "id": 213073204,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1602528321
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"344328\">@Charles Ellis O'Riley Jr.</span> so is the situation that the RFC has been approved but nobody has started an implementation?</p>",
        "id": 213073209,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602528323
    },
    {
        "content": "<p>that's correct</p>",
        "id": 213073253,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1602528351
    },
    {
        "content": "<p>alright</p>",
        "id": 213073272,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602528360
    },
    {
        "content": "<p>does anyone know if this needs to be written using the built-in compiler version of procedural macros or if this can / should be developed out of tree using proc-macros and syn?</p>",
        "id": 213073348,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602528399
    },
    {
        "content": "<p>if the latter is okay then I'd definitely start by writing this as an external crate, assuming there isn't already a proof of concept impl somewhere</p>",
        "id": 213073444,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602528468
    },
    {
        "content": "<p>well if it's exported by core it would be adding  dep to core, for one, which might not be a huge deal i guess</p>",
        "id": 213073446,
        "sender_full_name": "Lokathor",
        "timestamp": 1602528469
    },
    {
        "content": "<p>if <code>syn</code> isn't already a build dep then I'm betting we probably don't want to add it as one</p>",
        "id": 213073536,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602528504
    },
    {
        "content": "<p>but I really don't know</p>",
        "id": 213073570,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602528523
    },
    {
        "content": "<p>either way, it seems like the next step is to work on implementing the RFC</p>",
        "id": 213073621,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602528554
    },
    {
        "content": "<p>So, what are some questions to come from this that I can research?</p>",
        "id": 213073627,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1602528557
    },
    {
        "content": "<p>we should probably ask for mentorship instructions from the libs / lang / maybee compiler team on how to add a new proc-macro to std, assuming that isnt in the rustc-dev-guide or something</p>",
        "id": 213073689,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602528602
    },
    {
        "content": "<p>and then we should just do the implementation</p>",
        "id": 213073741,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602528610
    },
    {
        "content": "<p>10 minutes left</p>",
        "id": 213073821,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602528664
    },
    {
        "content": "<p>thought about contacting the compiler team but wasn'tr sure.</p>",
        "id": 213073830,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1602528667
    },
    {
        "content": "<p>i think that falls under t-libs-impl (subset of compiler folk)</p>",
        "id": 213073834,
        "sender_full_name": "DPC",
        "timestamp": 1602528670
    },
    {
        "content": "<p>I'm guessing theres a zulip stream for them <span class=\"user-mention\" data-user-id=\"120823\">@DPC</span> ?</p>",
        "id": 213073863,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602528693
    },
    {
        "content": "<p>nope</p>",
        "id": 213073868,
        "sender_full_name": "DPC",
        "timestamp": 1602528698
    },
    {
        "content": "<p>I think we could do this in an external crate using proc macros with a sprinkling of specialization, but am not sure how similar that implementation would be to one baked in directly</p>",
        "id": 213073869,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1602528698
    },
    {
        "content": "<p>welp</p>",
        "id": 213073897,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602528715
    },
    {
        "content": "<p>if you wish <span class=\"user-mention\" data-user-id=\"344328\">@Charles Ellis O'Riley Jr.</span> we can swap issues</p>",
        "id": 213073901,
        "sender_full_name": "DPC",
        "timestamp": 1602528717
    },
    {
        "content": "<p>moving forward since we don't have much time left</p>",
        "id": 213074059,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602528810
    },
    {
        "content": "<p>I really don't mind seeing this through.  Assistance would be nice buty I'd like to see this completed.</p>",
        "id": 213074061,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1602528812
    },
    {
        "content": "<p>Last action item is adding an iterator API to backtrace</p>",
        "id": 213074075,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602528825
    },
    {
        "content": "<p>afaik this is currently just starting out,</p>",
        "id": 213074142,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602528852
    },
    {
        "content": "<p>Looks like there's nothing for this at the moment, but I'd like to push it forward</p>",
        "id": 213074149,
        "sender_full_name": "Sean Chen (he/him)",
        "timestamp": 1602528857
    },
    {
        "content": "<p>I had a quick look in the <code>backtrace</code> crate to see if it's come up before but didn't find anything</p>",
        "id": 213074159,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1602528862
    },
    {
        "content": "<p>It might be something to raise there first</p>",
        "id": 213074179,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1602528876
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204346\">@Ashley Mannix</span> do you think this would need an RFC?</p>",
        "id": 213074230,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602528907
    },
    {
        "content": "<p>For inclusion in <code>std</code> I think it will eventually. But in the <code>backtrace</code> crate itself I think we can do anything</p>",
        "id": 213074346,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1602528973
    },
    {
        "content": "<p>it looks like the <code>backtrace</code> crate currently provides a <code>frames()</code> fn rather than an iterator API</p>",
        "id": 213074352,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602528978
    },
    {
        "content": "<p>yeah the crate doesn't need a rfc</p>",
        "id": 213074382,
        "sender_full_name": "DPC",
        "timestamp": 1602529000
    },
    {
        "content": "<p>So an RFC would simply propose integrating that functionality from the crate into <code>std</code>?</p>",
        "id": 213074395,
        "sender_full_name": "Sean Chen (he/him)",
        "timestamp": 1602529013
    },
    {
        "content": "<p>I'm not sure we'd need to change what's in the backtrace crate at all</p>",
        "id": 213074407,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602529024
    },
    {
        "content": "<p>Sweet :)</p>",
        "id": 213074434,
        "sender_full_name": "Sean Chen (he/him)",
        "timestamp": 1602529041
    },
    {
        "content": "<p>like, just exporting an identical <code>fn frames(&amp;self) -&gt; &amp;[BacktraceFrame]</code> sounds sufficient to me</p>",
        "id": 213074448,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602529051
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 213074463,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1602529061
    },
    {
        "content": "<p>I'd be ok adding that as an unstable API to <code>Backtrace</code> without an RFC to start with (I'd just do a FCP on the implementation itself)</p>",
        "id": 213074546,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1602529099
    },
    {
        "content": "<p>if anything that sounds better to me than adding an Iterator or IntoIterator impl directly to Backtrace</p>",
        "id": 213074559,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602529109
    },
    {
        "content": "<p>awesome</p>",
        "id": 213074585,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602529130
    },
    {
        "content": "<p>that sounds like a plan to me</p>",
        "id": 213074596,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602529136
    },
    {
        "content": "<p>alright, 1 minute left</p>",
        "id": 213074630,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602529157
    },
    {
        "content": "<p>so I think we should call it here</p>",
        "id": 213074634,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602529160
    },
    {
        "content": "<p>Since my issue is on hold, I can work on something else :)</p>",
        "id": 213074642,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1602529165
    },
    {
        "content": "<p>However, it seems like nothing surfaced as of today</p>",
        "id": 213074674,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1602529191
    },
    {
        "content": "<p>I did come across a few random RFCs I think are related</p>",
        "id": 213074677,
        "sender_full_name": "oliver",
        "timestamp": 1602529193
    },
    {
        "content": "<p>Not sure about relevance</p>",
        "id": 213074687,
        "sender_full_name": "oliver",
        "timestamp": 1602529199
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"344196\">@Jakub Duchniewicz</span> once this meeting is over ill setup the next meetings agenda and figure out all the action items we created today</p>",
        "id": 213074689,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602529200
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rfcs/blob/master/text/2945-c-unwind-abi.md\">https://github.com/rust-lang/rfcs/blob/master/text/2945-c-unwind-abi.md</a></p>",
        "id": 213074760,
        "sender_full_name": "oliver",
        "timestamp": 1602529213
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281739\">@oliver</span> definitely post them in the zulip and we can figure out if we should track them</p>",
        "id": 213074779,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602529220
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rfcs/pull/2677\">https://github.com/rust-lang/rfcs/pull/2677</a></p>",
        "id": 213074784,
        "sender_full_name": "oliver",
        "timestamp": 1602529222
    },
    {
        "content": "<p>Thanks everyone for coming today</p>",
        "id": 213074798,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602529230
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rfcs/pull/2593#issuecomment-706514374\">https://github.com/rust-lang/rfcs/pull/2593#issuecomment-706514374</a></p>",
        "id": 213074814,
        "sender_full_name": "oliver",
        "timestamp": 1602529236
    },
    {
        "content": "<p>cya in two weeks!</p>",
        "id": 213074823,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602529242
    },
    {
        "content": "<p>np.  thanks</p>",
        "id": 213074829,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1602529245
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/wg-async-foundations/blob/6b423e0ca89b707534d942ac7d667a9d5f9af2f8/rfc-drafts/must_not_await_lint.md\">https://github.com/rust-lang/wg-async-foundations/blob/6b423e0ca89b707534d942ac7d667a9d5f9af2f8/rfc-drafts/must_not_await_lint.md</a></p>",
        "id": 213074831,
        "sender_full_name": "oliver",
        "timestamp": 1602529247
    },
    {
        "content": "<p><a href=\"https://crates.io/crates/error-chain\">https://crates.io/crates/error-chain</a></p>",
        "id": 213074888,
        "sender_full_name": "oliver",
        "timestamp": 1602529278
    },
    {
        "content": "<p>Did we talk about \"Box error alias\" i.e. <a href=\"https://github.com/rust-lang/rfcs/pull/2820\">https://github.com/rust-lang/rfcs/pull/2820</a>? Does anyone have a tl;dr on the status there?</p>",
        "id": 213075357,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1602529550
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"319552\">@Jeremiah Senkpiel</span> It looks like that's blocked on giving the newtype error approach used by crates like <code>anyhow</code> a chance to mature</p>",
        "id": 213075468,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1602529610
    },
    {
        "content": "<p>We don't want both a type alias for <code>type BoxedError = Box&lt;dyn Error&gt;</code> and a newtype like <code>struct BoxedError(Box&lt;dyn Error&gt;)</code>, so we don't want to commit to the type alias until we've gone further down the newtype approach in external libraries</p>",
        "id": 213075578,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1602529682
    },
    {
        "content": "<p>That's reasonable.</p>",
        "id": 213075716,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1602529763
    }
]