[
    {
        "content": "<p><a href=\"https://dev.to/e_net4/migrating-from-quick-error-to-snafu-a-story-on-revamped-error-handling-in-rust-58h9\">Migrating from quick-error to SNAFU: a story on revamped error handling in Rust</a> mentions that deciding whether or not to have something equivalent to <code>caused by: {source}</code> in an error message is a tough decision.</p>",
        "id": 210780148,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1600712374
    },
    {
        "content": "<p>I think it'd be nice if the group could help with that.</p>",
        "id": 210780164,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1600712387
    },
    {
        "content": "<p>I have opinions on this that I'd be happy to share</p>",
        "id": 210780185,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600712397
    },
    {
        "content": "<p>I think it boils down to if we think the pattern of having a reporting type and an error type where the reporting type handles the format and the error type handles the content is the best way to go</p>",
        "id": 210780260,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600712422
    },
    {
        "content": "<p>I think it is though there really are those pesky issues around failing to convert errors to reporters before printing them and losing context as a result</p>",
        "id": 210780292,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600712438
    },
    {
        "content": "<p>which _really_ sucks</p>",
        "id": 210780300,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600712441
    },
    {
        "content": "<p>SNAFU tends to encourage doing it because it makes the simpler case have more data. But it also gets in the way of the prettier outputs.</p>",
        "id": 210780313,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1600712453
    },
    {
        "content": "<p>yea</p>",
        "id": 210780326,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600712459
    },
    {
        "content": "<p>i think being able to do multi line output on CLIs and oneline outputs for logs is a very desirable property personally</p>",
        "id": 210780363,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600712473
    },
    {
        "content": "<p>fun wild idea is to add / use the formatting modifiers for Display somehow</p>",
        "id": 210780402,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1600712494
    },
    {
        "content": "<p><code>{}</code> vs <code>{#}</code></p>",
        "id": 210780425,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1600712506
    },
    {
        "content": "<p>that was <span class=\"user-mention\" data-user-id=\"119235\">@David Tolnay</span> 's idea</p>",
        "id": 210780428,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600712507
    },
    {
        "content": "<p>one second let me link you an old pre rfc of mine</p>",
        "id": 210780441,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600712514
    },
    {
        "content": "<p><a href=\"https://paper.dropbox.com/doc/Collaborative-Summary-3-Fact-Finding-Pre-RFCs-around-Error-Handling-Reporting--A8BcfCfWgPL0Szl8rqaqnVCeAQ-dnShKo1SsHtdF4Yheeoco\">https://paper.dropbox.com/doc/Collaborative-Summary-3-Fact-Finding-Pre-RFCs-around-Error-Handling-Reporting--A8BcfCfWgPL0Szl8rqaqnVCeAQ-dnShKo1SsHtdF4Yheeoco</a></p>",
        "id": 210780511,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600712532
    },
    {
        "content": "<p>the idea is either we add an <code>is_termination</code> flag to std::fmt::Formatter (david and your ideas, approximately) or we introduce a 3rd fmt trait (my idea)</p>",
        "id": 210780565,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600712567
    },
    {
        "content": "<p>but neither one solves the problem completely</p>",
        "id": 210780620,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600712603
    },
    {
        "content": "<p>well, is_termination comes close actually</p>",
        "id": 210780635,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600712612
    },
    {
        "content": "<p>well actually no they both work about the same</p>",
        "id": 210780647,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600712622
    },
    {
        "content": "<p>the problem with both is that you basically end up with competing reporters</p>",
        "id": 210780759,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600712654
    },
    {
        "content": "<p>either you report yourself via <code>is_termination</code> / <code>std::fmt::Report</code> or you get reported via your <code>Display</code> impl and a Reporting type</p>",
        "id": 210780801,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600712685
    },
    {
        "content": "<p>it seems like the only way we could properly fix this is by changing a ton of panic machinery to use specialization to see if the type you're formatting is an <code>Error</code> and if so it would need to convert it to the reporting type, and then you're somehow trying to set the reporting type used by std macros and that doesn't sound good</p>",
        "id": 210781033,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600712796
    },
    {
        "content": "<p>_incase it isn't obvious this is all very half baked rn_</p>",
        "id": 210781058,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600712809
    }
]