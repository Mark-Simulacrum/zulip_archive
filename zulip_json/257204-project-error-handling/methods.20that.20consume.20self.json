[
    {
        "content": "<p>Hi folks. Any recommendations for the following?  I have a struct method that consumes <code>self</code> and returns <code>Self</code>, kinda like a builder pattern:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">fn</span> <span class=\"nf\">consume_self</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// lots of important stuff</span>\n<span class=\"w\">    </span><span class=\"bp\">self</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Now I want to change <code>consume_self</code> so that it might fail.  For example, let's suppose that <code>consume_self</code> needs to deserialize something.  A naive design might do this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">consume_self</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">bytes</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">bincode</span>::<span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bincode</span>::<span class=\"n\">deserialize</span><span class=\"p\">(</span><span class=\"n\">bytes</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"c1\">// do something important with data</span>\n<span class=\"w\">  </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Problem: if there's an error then I lose my <code>self</code>, which is bad.  I can think of several solutions but none of them is a knock-down win.  Any recommendations?</p>",
        "id": 232885427,
        "sender_full_name": "Gus Gutoski",
        "timestamp": 1617360322
    },
    {
        "content": "<p>what is your top option currently?</p>",
        "id": 232885853,
        "sender_full_name": "oliver",
        "timestamp": 1617360661
    },
    {
        "content": "<p>One idea is to bundle <code>Self</code> into the returned error:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">consume_self</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">bytes</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"bp\">Self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">bincode</span>::<span class=\"n\">Error</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bincode</span>::<span class=\"n\">deserialize</span><span class=\"p\">(</span><span class=\"n\">bytes</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"p\">.</span><span class=\"n\">is_err</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">((</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"p\">.</span><span class=\"n\">unwrap_err</span><span class=\"p\">()));</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"c1\">// important stuff</span>\n<span class=\"w\">  </span><span class=\"bp\">self</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>This way I can recover <code>self</code> even if there's an error.  It's a bit ugly and I don't know yet how ergonomic it is for the caller.</p>",
        "id": 232886328,
        "sender_full_name": "Gus Gutoski",
        "timestamp": 1617361086
    },
    {
        "content": "<p>Another idea is to return a tuple:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">consume_self</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">bytes</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"p\">(</span><span class=\"bp\">Self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">bincode</span>::<span class=\"n\">Error</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bincode</span>::<span class=\"n\">deserialize</span><span class=\"p\">(</span><span class=\"n\">bytes</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"p\">.</span><span class=\"n\">is_err</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"c1\">// important stuff</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Ok</span><span class=\"p\">(()))</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 232886744,
        "sender_full_name": "Gus Gutoski",
        "timestamp": 1617361365
    },
    {
        "content": "<p>I have complete control over the design.  Another more exotic idea is to add a <code>Result</code> member to <code>Foo</code> and rely on the user to check it:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"c1\">// important fields</span>\n<span class=\"w\">  </span><span class=\"n\">res</span>: <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"n\">bincode</span>::<span class=\"n\">Error</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">fn</span> <span class=\"nf\">consume_self</span><span class=\"p\">(</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">bytes</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bincode</span>::<span class=\"n\">deserialize</span><span class=\"p\">(</span><span class=\"n\">bytes</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// handle error and other important stuff</span>\n<span class=\"w\">    </span><span class=\"bp\">self</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 232887488,
        "sender_full_name": "Gus Gutoski",
        "timestamp": 1617361976
    },
    {
        "content": "<p>Does it have to be a builder pattern function? You might also do <code>foo(&amp;mut self, bytes: &amp;[u8]) -&gt; Result&lt;(), bincode::Error&gt;</code></p>",
        "id": 232888013,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617362421
    },
    {
        "content": "<p>if you just want builder pattern for ergonomic reasons, I would stick to the \"naive\" version that returns <code>bincode::Result&lt;Self&gt;</code>, and use the <code>&amp;mut self</code> version for applications that don't want to lose <code>self</code> even in case of an error</p>",
        "id": 232888180,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617362540
    },
    {
        "content": "<p>Thanks for the comment!  In my application the user will always want to keep self in case of error.  I'm building a finite state machine that uses Rust's type system to enforce state transitions, so I really want to consume <code>self</code>.  A failed <code>deserialize</code> is really just another state transition.  Another idea I did not explain due to complexity is to modify the state machine design to handle the error that way.  Feel free to post more ideas!</p>",
        "id": 232888855,
        "sender_full_name": "Gus Gutoski",
        "timestamp": 1617363111
    },
    {
        "content": "<blockquote>\n<p>I'm building a finite state machine that uses Rust's type system to enforce state transitions, so I really want to consume self. A failed deserialize is really just another state transition.</p>\n</blockquote>\n<p>In that case, it sounds like you want the <code>Result&lt;Self, (Self, bincode::Error)&gt;</code> version, since you can use special types in the two branches to encode the typestate</p>",
        "id": 232889842,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617363939
    },
    {
        "content": "<p>in particular, instead of <code>(Self, bincode::Error)</code> it could be <code>ErrorType</code> which is a newtype struct around <code>(Self, bincode::Error)</code> or the parts of <code>Self</code> that are still valid</p>",
        "id": 232889916,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617364006
    },
    {
        "content": "<p>Yea, I was gonna say this sounds like how downcast uses result</p>",
        "id": 232899475,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1617370757
    },
    {
        "content": "<p>Where it either returns the concrete type of it succeeds or the original box if it fails</p>",
        "id": 232899499,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1617370776
    },
    {
        "content": "<p>Not an uncommon pattern in std</p>",
        "id": 232899525,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1617370790
    },
    {
        "content": "<p>I think hashmap has a similar api that wraps the key and value in an error type</p>",
        "id": 232899612,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1617370819
    },
    {
        "content": "<p>So if you need to return an informative error type you might want to follow they example instead</p>",
        "id": 232899658,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1617370841
    }
]