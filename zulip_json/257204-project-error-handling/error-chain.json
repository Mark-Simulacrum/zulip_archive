[
    {
        "content": "<p>So I've been maintaining error-chain to make sure new updates to the rust language don't break crates using error-chain and I thought I should solicit some feedback from this group regarding those intentions.</p>",
        "id": 210582761,
        "sender_full_name": "Andrew Gauger",
        "timestamp": 1600469176
    },
    {
        "content": "<p>I think this would be covered by the pre existing stability guaruntees of the language, in that we cannot break code that already compiles</p>",
        "id": 210582801,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600469232
    },
    {
        "content": "<p>not sure if im misunderstanding</p>",
        "id": 210582808,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600469245
    },
    {
        "content": "<p>Here's an example: <a href=\"https://github.com/rust-lang-nursery/error-chain/commit/ea8171169aec77043d132ae5799692d0305d2d59\">https://github.com/rust-lang-nursery/error-chain/commit/ea8171169aec77043d132ae5799692d0305d2d59</a></p>",
        "id": 210582895,
        "sender_full_name": "Andrew Gauger",
        "timestamp": 1600469315
    },
    {
        "content": "<p>I can't think of any plans that would deprecate anything off of the top of my head</p>",
        "id": 210583049,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600469497
    },
    {
        "content": "<p>let me double check the charter tho</p>",
        "id": 210583053,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600469500
    },
    {
        "content": "<p>i think the biggest issue might be supporting new features while maintaining support for older compiler versions</p>",
        "id": 210583128,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600469546
    },
    {
        "content": "<p>basically what you've already done</p>",
        "id": 210583131,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600469550
    },
    {
        "content": "<p>i could forsee some issues around <code>backtrace</code></p>",
        "id": 210583141,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600469562
    },
    {
        "content": "<p>but i think thats already gonna be an issue either way</p>",
        "id": 210583155,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600469572
    },
    {
        "content": "<p>or maybe its fine</p>",
        "id": 210583176,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600469588
    },
    {
        "content": "<p>i dont know</p>",
        "id": 210583180,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600469589
    },
    {
        "content": "<p>I should definitely look into how error-chain works more closely</p>",
        "id": 210583207,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600469614
    },
    {
        "content": "<p>its one of the libraries that I never looked into because when I started using rust a few years ago failure was all the rage and error-chain was already the \"old\" way of doing things :/</p>",
        "id": 210583265,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600469647
    },
    {
        "content": "<p>lol yep, that's the story with error-chain</p>",
        "id": 210583278,
        "sender_full_name": "Andrew Gauger",
        "timestamp": 1600469667
    },
    {
        "content": "<p>backtrace has already been the biggest struggle.</p>",
        "id": 210583291,
        "sender_full_name": "Andrew Gauger",
        "timestamp": 1600469685
    },
    {
        "content": "<p>also the syntax of the macro seems pretty unique</p>",
        "id": 210583292,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600469688
    },
    {
        "content": "<p>:/</p>",
        "id": 210583296,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600469693
    },
    {
        "content": "<p>so then there are two other features that I would like to pursue that would have similar implications on error-chain</p>",
        "id": 210583326,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600469715
    },
    {
        "content": "<p>first, this rfc</p>",
        "id": 210583341,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600469729
    },
    {
        "content": "<p><a href=\"https://github.com/yaahc/rfcs/blob/master/text/0000-dyn-error-generic-member-access.md\">https://github.com/yaahc/rfcs/blob/master/text/0000-dyn-error-generic-member-access.md</a></p>",
        "id": 210583345,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600469742
    },
    {
        "content": "<p>which proposes another method on the error trait that acts like a generic version of <code>fn backtrace</code></p>",
        "id": 210583355,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600469755
    },
    {
        "content": "<p>well, more accurately it superscedes both <code>backtrace</code> and <code>source</code></p>",
        "id": 210583398,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600469766
    },
    {
        "content": "<p>in theory, not sure if ppl would use it that way in practice</p>",
        "id": 210583406,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600469782
    },
    {
        "content": "<p>the other feature is error return traces, which is related to that RFC</p>",
        "id": 210583417,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600469798
    },
    {
        "content": "<p><a href=\"https://github.com/yaahc/nostd-error-poc/blob/master/fakecore/src/result.rs#L58\">https://github.com/yaahc/nostd-error-poc/blob/master/fakecore/src/result.rs#L58</a></p>",
        "id": 210583462,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600469858
    },
    {
        "content": "<p>Great, I'm not concerned with new features, but I'll read the RFC because, like you, I like rust error handling story.</p>",
        "id": 210583469,
        "sender_full_name": "Andrew Gauger",
        "timestamp": 1600469866
    },
    {
        "content": "<p>the idea being that we'd have some way to pass locations into errors during <code>?</code> so they could track every location they're propagated from</p>",
        "id": 210583482,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600469881
    },
    {
        "content": "<p>ill take a closer look at error-chain though and get familiar with its API and impl</p>",
        "id": 210583543,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600469913
    },
    {
        "content": "<p>so I can make sure we account for it in our discussions</p>",
        "id": 210583558,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600469927
    },
    {
        "content": "<p>(or you should come to our meetings)</p>",
        "id": 210583567,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600469935
    },
    {
        "content": "<p>Its pre-Error type so it was the basis for some of the things that went into std.  There's some crates afaik that still use it.  I was maintaining it for mdbook but that looks like its moved to anyhow now.</p>",
        "id": 210583703,
        "sender_full_name": "Andrew Gauger",
        "timestamp": 1600470020
    }
]