[
    {
        "content": "<p>Hello, I'm working on an <code>Iterator</code> based lexical analyzer and I've noticed I could use a lot of early returns on the <code>Option::Some</code> side of things, in case I get a matching token. This cannot use <code>?</code> for early returns, since I require the exact opposite behavior. Was inversion of this, in the form of <code>!?</code> ever considered?<br>\nOn the <code>Option</code> example, <code>!?</code> would return on <code>Option::Some</code> values and continue execution on <code>Option::None</code> values. Same easily applies to 2 other types, which are <code>Result</code> and <code>ControlFlow</code>.</p>",
        "id": 275667532,
        "sender_full_name": "Jakub Motyka",
        "timestamp": 1647529785
    },
    {
        "content": "<p>I don't think so, I expect that would be a fairly niche usage and can already be made to work with the unstable Try trait with a conversion from Option to a custom Try type that uses None as its Continue type and Some as its Break type</p>",
        "id": 275668402,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1647530086
    },
    {
        "content": "<p>Yes, I've checked the <code>Try</code> trait for custom <code>?</code> handling as well as <code>From</code> trait, which is commonly used in transforming errors. The problem I'm having is that <code>Iterator::next</code> requires me to return <code>Option</code>, while <code>ControlFlow</code> has the <code>?</code> working the way I need. I cannot implement a <code>From</code> trait on those 2, so the only other option is to literally duplicate something that's in the standard library (and that's not good). Please lmk if I missed something.</p>",
        "id": 275669223,
        "sender_full_name": "Jakub Motyka",
        "timestamp": 1647530400
    },
    {
        "content": "<p>Yeah I expect the custom type is going to have to use standard option as its residual type in order to be compatible with the iterator trait</p>",
        "id": 275669439,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1647530464
    },
    {
        "content": "<p>But I'm pretty sure this should work</p>",
        "id": 275669452,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1647530469
    },
    {
        "content": "<p>Can you link the code where you're having trouble?</p>",
        "id": 275669465,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1647530475
    },
    {
        "content": "<p>Sure, here's the troublesome early return<br>\n<a href=\"https://github.com/MiniaczQ/interpreter/blob/master/src/lexer.rs#L69\">https://github.com/MiniaczQ/interpreter/blob/master/src/lexer.rs#L69</a><br>\nexcuse the code quality, I wasn't intending to publish it for a few more days <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 275670283,
        "sender_full_name": "Jakub Motyka",
        "timestamp": 1647530741
    },
    {
        "content": "<p>oh yea I think you're right, this doesn't work</p>",
        "id": 275671355,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1647531103
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span></p>",
        "id": 275671368,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1647531106
    },
    {
        "content": "<p>because option's from residual impl expects an <code>Option&lt;!&gt;</code></p>",
        "id": 275671466,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1647531124
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2021&amp;gist=a920dba0bb1fcc1cc35721cabb22249b\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2021&amp;gist=a920dba0bb1fcc1cc35721cabb22249b</a></p>",
        "id": 275671627,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1647531181
    },
    {
        "content": "<p>hmmm</p>",
        "id": 275671717,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1647531219
    },
    {
        "content": "<p>actually</p>",
        "id": 275671720,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1647531221
    },
    {
        "content": "<p>i think this might be doable still</p>",
        "id": 275671732,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1647531224
    },
    {
        "content": "<p>just need to not use the std::option::Option as the residual type</p>",
        "id": 275671754,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1647531233
    },
    {
        "content": "<p>and then we can add the impl from the downstream crate to allow the interconversino</p>",
        "id": 275671798,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1647531244
    },
    {
        "content": "<p>lets seeee</p>",
        "id": 275671825,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1647531245
    },
    {
        "content": "<p>damnit, says it's still a conflicting impl</p>",
        "id": 275672441,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1647531467
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2021&amp;gist=859242c4bf70a8c960808c8a9bfcc01c\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2021&amp;gist=859242c4bf70a8c960808c8a9bfcc01c</a></p>",
        "id": 275672867,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1647531619
    },
    {
        "content": "<p>i don't get how this is overlapping</p>",
        "id": 275673018,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1647531679
    },
    {
        "content": "<p>I've had a similar desire at some point, but I came to the conclusion that it's better to use a custom macro for the early returns rather than try to use <code>?</code>. Primarily for others reading the code, <code>?</code> is really tied to error handling and if you're using it the opposite way it makes the code super confusing. A named macro can communicate the intent much better.</p>",
        "id": 275674295,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1647532084
    },
    {
        "content": "<p><code>Option&lt;u32&gt;</code> incompatible with <code>Option&lt;u32&gt;</code> is pretty concerning</p>",
        "id": 275674503,
        "sender_full_name": "Jakub Motyka",
        "timestamp": 1647532157
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256841\">Nick Cameron</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/Question.20mark.20operator.20inversion/near/275674295\">said</a>:</p>\n<blockquote>\n<p>I've had a similar desire at some point, but I came to the conclusion that it's better to use a custom macro for the early returns rather than try to use <code>?</code>. Primarily for others reading the code, <code>?</code> is really tied to error handling and if you're using it the opposite way it makes the code super confusing. A named macro can communicate the intent much better.</p>\n</blockquote>\n<p>Another reason why I suggested inversion operator <code>!</code> instead of custom types for this.</p>",
        "id": 275674875,
        "sender_full_name": "Jakub Motyka",
        "timestamp": 1647532295
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"486750\">Jakub Motyka</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/Question.20mark.20operator.20inversion/near/275674503\">said</a>:</p>\n<blockquote>\n<p><code>Option&lt;u32&gt;</code> incompatible with <code>Option&lt;u32&gt;</code> is pretty concerning</p>\n</blockquote>\n<p>you're referring to \"help: the trait <code>FromResidual&lt;Option&lt;u32&gt;&gt;</code> is not implemented for <code>Option&lt;u32&gt;</code>\"?</p>",
        "id": 275675172,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1647532393
    },
    {
        "content": "<p>thats because option implements <code>FromResidual&lt;Option&lt;!&gt;&gt;</code></p>",
        "id": 275675252,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1647532422
    },
    {
        "content": "<p>I'll need to read up on that then</p>",
        "id": 275675322,
        "sender_full_name": "Jakub Motyka",
        "timestamp": 1647532444
    },
    {
        "content": "<p>though now that you mention it, this may be fixable by just adding the second Option impl, I'm not sure if the compiler can handle seeing those don't overlap though</p>",
        "id": 275675378,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1647532458
    },
    {
        "content": "<p>also, im not sure we'd want to</p>",
        "id": 275675416,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1647532477
    },
    {
        "content": "<p>given nick's comments above</p>",
        "id": 275675451,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1647532488
    },
    {
        "content": "<p>it would probably also make it much easier to accidentally make mistakes when making Try impls with Options</p>",
        "id": 275675538,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1647532514
    },
    {
        "content": "<p>where people misunderstand how it works and do it backwards because now that's a thing</p>",
        "id": 275675562,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1647532522
    },
    {
        "content": "<p>tho that should be caught quickly i hope</p>",
        "id": 275675575,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1647532530
    },
    {
        "content": "<p>regardless, I'm curious to see what scott says once he's around</p>",
        "id": 275675752,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1647532573
    },
    {
        "content": "<p>he's the defacto expert on Try</p>",
        "id": 275675781,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1647532580
    },
    {
        "content": "<p>normally this project group treats try as out of scope</p>",
        "id": 275675802,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1647532588
    },
    {
        "content": "<p>tho I'm not sure I still completely agree with that decision, we made it originally because Try is a language feature more than a libs feature but really all the impls on the various try types is totally under the libs domain</p>",
        "id": 275675956,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1647532641
    },
    {
        "content": "<p>so its really both teams</p>",
        "id": 275675971,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1647532648
    },
    {
        "content": "<p>but in practice scott has done a majority of the work on it so it doesnt really matter whose team is technically responsible for it, just who is actually working on it</p>",
        "id": 275676067,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1647532679
    },
    {
        "content": "<p>You might be interested in this comment from <span class=\"user-mention silent\" data-user-id=\"125254\">kennytm</span> that implemented inversion for <code>Result</code>: <a href=\"https://github.com/rust-lang/rfcs/pull/3058#issuecomment-766365909\">https://github.com/rust-lang/rfcs/pull/3058#issuecomment-766365909</a></p>",
        "id": 275683454,
        "sender_full_name": "scottmcm",
        "timestamp": 1647534248
    },
    {
        "content": "<p>Alternatively, consider using a macro to represent the \"use the first one that gives a value\" rather than phrasing it as short-circuiting.  Something like this: &lt;<a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2021&amp;gist=32b4b4628e37648c719917dd2e8e9db7\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2021&amp;gist=32b4b4628e37648c719917dd2e8e9db7</a>&gt;</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(try_trait_v2)]</span><span class=\"w\"></span>\n\n<span class=\"fm\">macro_rules!</span><span class=\"w\"> </span><span class=\"n\">coalesce</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"cp\">$a</span>:<span class=\"nc\">expr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"w\"> </span><span class=\"cp\">$a</span><span class=\"w\"> </span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"cp\">$a</span>:<span class=\"nc\">expr</span><span class=\"w\"> </span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"cp\">$($c</span>:<span class=\"nc\">expr</span><span class=\"p\">),</span><span class=\"o\">+</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">ops</span>::<span class=\"n\">ControlFlow</span>::<span class=\"n\">Continue</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">ops</span>::<span class=\"n\">Try</span>::<span class=\"n\">branch</span><span class=\"p\">(</span><span class=\"cp\">$a</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">v</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">coalesce</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"w\"> </span><span class=\"cp\">$($c</span><span class=\"p\">),</span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"cp\">$($a</span>:<span class=\"nc\">expr</span><span class=\"p\">),</span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"p\">,)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">coalesce</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"cp\">$($a</span><span class=\"p\">),</span><span class=\"o\">+</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"w\"> </span><span class=\"n\">coalesce</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"w\"> </span><span class=\"n\">coalesce</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"w\"> </span><span class=\"n\">coalesce</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"w\"> </span><span class=\"n\">coalesce</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"w\"> </span><span class=\"n\">coalesce</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"w\"> </span><span class=\"n\">coalesce</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"fm\">unreachable!</span><span class=\"p\">()),</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"w\"> </span><span class=\"k\">loop</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">coalesce</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"nb\">Err</span><span class=\"p\">(()),</span><span class=\"w\"> </span><span class=\"k\">break</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"w\"> </span><span class=\"k\">loop</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">break</span><span class=\"w\"> </span><span class=\"n\">coalesce</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"k\">break</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"w\"> </span><span class=\"n\">coalesce</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,),</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"w\"> </span><span class=\"n\">coalesce</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,),</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Which is the v2-ized version of <a href=\"https://internals.rust-lang.org/t/something-for-coalescing-aka-generalized-improved-or-else/9295?u=scottmcm\">https://internals.rust-lang.org/t/something-for-coalescing-aka-generalized-improved-or-else/9295?u=scottmcm</a></p>",
        "id": 275685310,
        "sender_full_name": "scottmcm",
        "timestamp": 1647534604
    },
    {
        "content": "<p>I like the swap return idea, I'll definitely check that out<br>\nI made a macro for a single early return, but I don't know if there is a point in grouping those, since I have a special case in the middle for ETX. Maybe if I rearrange it a little it could work.<br>\nThanks for the feedback <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 275686468,
        "sender_full_name": "Jakub Motyka",
        "timestamp": 1647534853
    },
    {
        "content": "<p>For the lang side, I suspect it's very unlikely that an operator for the other direction would be added.</p>\n<p>But as that post on the RFC demonstrated, it's possible to spell it as <code>.bikeshed()?</code> instead of you want it.  I'm not convinced that I'd want to include that in core, but it's possible.</p>",
        "id": 275686564,
        "sender_full_name": "scottmcm",
        "timestamp": 1647534890
    },
    {
        "content": "<p>The other thing that could help in future is <a href=\"#narrow/stream/213817-t-lang/topic/try.20blocks/near/275118445\">better <code>try</code> blocks</a>.</p>\n<p>You could write your \"matching token\" stuff as returning <code>ControlFlow&lt;Token&gt;</code> instead of <code>Option&lt;Token&gt;</code>, then the <code>Iterator::next</code> could be implemented as <code>try { foo()?; bar()?; }.break_value()</code>.  (That doesn't work nicely today because of type rules, though.)</p>\n<p>Dunno if that'd be the best answer, but it'd be another thing to see how it feels.</p>",
        "id": 275687171,
        "sender_full_name": "scottmcm",
        "timestamp": 1647535054
    },
    {
        "content": "<p>Yeah, I thought mid-talk of using <code>try</code> or just having another function that returns <code>ControlFlow</code> as a middle man<br>\nI'll see what feels better to work with<br>\nAs for the lang, I didn't really expect it to be added (and this would also take ages, I'd be waay overdue on the assignment), hope there will be some more thoughts about this in the future, if/when more use cases show up</p>",
        "id": 275690187,
        "sender_full_name": "MiniaczQ",
        "timestamp": 1647535674
    },
    {
        "content": "<p>One way I've been thinking of it is that <code>try { a?; b? }</code> is basically <code>Result::and_then</code>, but we don't really have anything for <code>Result::or_else</code> right now.</p>\n<p>(A silly observation that I don't think is the right way is that of course there are demorgan's laws.  So <code>or_else</code> could hypothetically be <code>!try { (!a)?; (!b)? }</code>.  Amusingly that's basically what you mentioned originally, if <code>!</code> were postfix the way it should be.)</p>\n<p>I don't think it's necessarily the case that that's best done with <code>?</code>, though.  If you look in other languages, it's more like <a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/null-coalescing-operator\">C#'s <code>??</code> operator</a>, rather than things that are done by early-returns.</p>",
        "id": 275693899,
        "sender_full_name": "scottmcm",
        "timestamp": 1647536650
    },
    {
        "content": "<p>If suffix macros are someday a thing, maybe this could be a good use case</p>",
        "id": 275697326,
        "sender_full_name": "pachi",
        "timestamp": 1647537867
    }
]