[
    {
        "content": "<p>So, I just wrote this code for work:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">main_handling_errors</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">msg</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"Error: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">cause</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">.</span><span class=\"n\">chain</span><span class=\"p\">().</span><span class=\"n\">skip</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"fm\">write!</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"</span><span class=\"se\">\\n\\n</span><span class=\"s\">Caused by:</span><span class=\"se\">\\n</span><span class=\"s\">    {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cause</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"fm\">eprintln!</span><span class=\"p\">(</span><span class=\"s\">\"{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">msg</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">backtrace</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">.</span><span class=\"n\">backtrace</span><span class=\"p\">().</span><span class=\"n\">to_string</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">backtrace</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"s\">\"disabled backtrace\"</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">backtrace</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"s\">\"unsupported backtrace\"</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"fm\">eprintln!</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">Stack backtrace:</span><span class=\"se\">\\n</span><span class=\"s\">{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">backtrace</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">std</span>::<span class=\"n\">process</span>::<span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>It was just using <code>fn main() -&gt; anyhow::Result&lt;()&gt;</code> before, but that doesn't print a backtrace or the causes. Is there a way to make this the default for errors somehow? I know libstd can't depend on <code>anyhow</code>, but it should still be able to use the backtrace() method even though it's unstable, right? I tried adding it just now but I don't understand specialization at all:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/library/std/src/lib.rs b/library/std/src/lib.rs</span>\n<span class=\"gh\">index 43c7ec5fad3..1a76584b612 100644</span>\n<span class=\"gd\">--- a/library/std/src/lib.rs</span>\n<span class=\"gi\">+++ b/library/std/src/lib.rs</span>\n<span class=\"gu\">@@ -316,6 +316,7 @@</span>\n #![feature(slice_internals)]\n #![feature(slice_ptr_get)]\n #![feature(slice_ptr_len)]\n<span class=\"gi\">+#![feature(specialization)]</span>\n #![feature(staged_api)]\n #![feature(std_internals)]\n #![feature(stdsimd)]\n<span class=\"gh\">diff --git a/library/std/src/process.rs b/library/std/src/process.rs</span>\n<span class=\"gh\">index c9b21fcf9c6..6d336c266c6 100644</span>\n<span class=\"gd\">--- a/library/std/src/process.rs</span>\n<span class=\"gi\">+++ b/library/std/src/process.rs</span>\n<span class=\"gu\">@@ -2043,7 +2043,15 @@ fn report(self) -&gt; i32 {</span>\n }\n\n #[unstable(feature = \"termination_trait_lib\", issue = \"43301\")]\n<span class=\"gd\">-impl&lt;E: fmt::Debug&gt; Termination for Result&lt;!, E&gt; {</span>\n<span class=\"gi\">+default impl&lt;E: fmt::Debug&gt; Termination for Result&lt;!, E&gt; {</span>\n<span class=\"gi\">+    fn report(self) -&gt; i32 {</span>\n<span class=\"gi\">+        let Err(err) = self;</span>\n<span class=\"gi\">+        eprintln!(\"Error: {:?}\", err);</span>\n<span class=\"gi\">+        ExitCode::FAILURE.report()</span>\n<span class=\"gi\">+    }</span>\n<span class=\"gi\">+}</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+impl&lt;E: fmt::Debug + crate::error::Error&gt; Termination for Result&lt;!, E&gt; {</span>\n     fn report(self) -&gt; i32 {\n         let Err(err) = self;\n         eprintln!(\"Error: {:?}\", err);\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>error[E0275]: overflow evaluating the requirement `core::result::Result&lt;!, _&gt;: Termination`\n  |\n  = help: consider adding a `#![recursion_limit=&quot;256&quot;]` attribute to your crate (`std`)\n  = note: required because of the requirements on the impl of `Termination` for `core::result::Result&lt;!, _&gt;`\n  = note: 127 redundant requirements hidden\n  = note: required because of the requirements on the impl of `Termination` for `core::result::Result&lt;!, _&gt;`\n</code></pre></div>\n<p>so I thought I'd get feedback on the general idea first</p>",
        "id": 251740932,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1630599105
    },
    {
        "content": "<p>(I'm aware that depending on \"disabled backtrace\" and \"unsupported backtrace\" is a bad idea, but I didn't see a stable way to get that info)</p>",
        "id": 251741276,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1630599234
    },
    {
        "content": "<p>Have you tried <code>default fn</code> instead of <code>default impl</code>?</p>",
        "id": 251746992,
        "sender_full_name": "Gary Guo",
        "timestamp": 1630601461
    },
    {
        "content": "<p>with just that change and nothing else it compiles:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/library/std/src/process.rs b/library/std/src/process.rs</span>\n<span class=\"gh\">index c9b21fcf9c6..542c541d74f 100644</span>\n<span class=\"gd\">--- a/library/std/src/process.rs</span>\n<span class=\"gi\">+++ b/library/std/src/process.rs</span>\n<span class=\"gu\">@@ -2044,13 +2044,22 @@ fn report(self) -&gt; i32 {</span>\n\n #[unstable(feature = \"termination_trait_lib\", issue = \"43301\")]\n impl&lt;E: fmt::Debug&gt; Termination for Result&lt;!, E&gt; {\n<span class=\"gd\">-    fn report(self) -&gt; i32 {</span>\n<span class=\"gi\">+    default fn report(self) -&gt; i32 {</span>\n         let Err(err) = self;\n         eprintln!(\"Error: {:?}\", err);\n         ExitCode::FAILURE.report()\n     }\n }\n</code></pre></div>\n<p>but adding the second impl gives <code>error: cannot specialize on trait `error::Error` </code></p>",
        "id": 251747260,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1630601573
    },
    {
        "content": "<p>adding <code>default impl</code> and <code>default fn</code>, but not the second impl gives a really strange error:</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0599]: the method `report` exists for enum `core::result::Result&lt;!, E&gt;`, but its trait bounds were not satisfied\n    --&gt; library/std/src/process.rs:2033:42\n     |\n2033 |             Err(err) =&gt; Err::&lt;!, _&gt;(err).report(),\n     |                                          ^^^^^^ method cannot be called on `core::result::Result&lt;!, E&gt;` due to unsatisfied trait bounds\n     |\n    ::: /home/jnelson/src/rust/library/core/src/result.rs:503:1\n     |\n503  | pub enum Result&lt;T, E&gt; {\n     | --------------------- doesn&#39;t satisfy `core::result::Result&lt;!, E&gt;: Termination`\n     |\n     = note: the following trait bounds were not satisfied:\n             `core::result::Result&lt;!, E&gt;: Termination`\n</code></pre></div>",
        "id": 251747406,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1630601639
    },
    {
        "content": "<p>If you add <code>#![feature(specialization)]</code>, you should be able to add a second impl.</p>",
        "id": 251748059,
        "sender_full_name": "Gary Guo",
        "timestamp": 1630601887
    },
    {
        "content": "<p>But that's unsound.</p>",
        "id": 251748072,
        "sender_full_name": "Gary Guo",
        "timestamp": 1630601892
    },
    {
        "content": "<p>I wonder if <code>impl&lt;E: Debug + Error + 'static&gt;</code> specialization would be sound (it's okay to use non-specialized impl if any lifetime is involved). But I am not an expert on soundness.</p>",
        "id": 251748459,
        "sender_full_name": "Gary Guo",
        "timestamp": 1630602010
    },
    {
        "content": "<p>oh, this is with <code>feature(specialization)</code> lol</p>",
        "id": 251748784,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1630602116
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> using anyhow::Error in main should print the backtrace and sources</p>",
        "id": 251759145,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630605939
    },
    {
        "content": "<blockquote>\n<p>Is there a way to make this the default for errors somehow?</p>\n</blockquote>\n<p>so the issue is that the <code>Termination</code> impl in std for <code>Result</code> depends on <code>Debug</code> when it prints the <code>Err</code> variant</p>",
        "id": 251759581,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630606086
    },
    {
        "content": "<p>and that impl isn't a universally applicable impl</p>",
        "id": 251759748,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630606151
    },
    {
        "content": "<p>I can't remember the exact explanation I got from Niko before but the current implementation of specialization can't specialize a generic impl with another generic impl</p>",
        "id": 251759930,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630606214
    },
    {
        "content": "<p>the issue being that these trait impls can depend on lifetimes</p>",
        "id": 251760021,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630606250
    },
    {
        "content": "<p>and that causes soundness issues when specializing</p>",
        "id": 251760045,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630606260
    },
    {
        "content": "<p>so we cannot specialize <code>Termination</code> until we have a work around for that issue</p>",
        "id": 251760083,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630606277
    },
    {
        "content": "<p><a href=\"https://smallcultfollowing.com/babysteps/blog/2018/02/09/maximally-minimal-specialization-always-applicable-impls/#the-soundness-problem\">https://smallcultfollowing.com/babysteps/blog/2018/02/09/maximally-minimal-specialization-always-applicable-impls/#the-soundness-problem</a> goes in detail on the problem</p>",
        "id": 251760161,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630606303
    },
    {
        "content": "<p>but despite this <code>anyhow::Error</code> _should_ do exactly what you want</p>",
        "id": 251760279,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630606338
    },
    {
        "content": "<p>it's <code>Debug</code> impl prints the actual error report</p>",
        "id": 251760306,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630606350
    },
    {
        "content": "<p>including the backtrace and sources</p>",
        "id": 251760331,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630606359
    },
    {
        "content": "<p>so all you have to do is use a type that prints the actual report you want to see as it's <code>Debug</code> impl or you need to replace the <code>Result</code> in the return type to your own custom Result alternative that doesn't depend on <code>Debug</code></p>",
        "id": 251760417,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630606390
    },
    {
        "content": "<p>Just to confirm something, is the goal here to make it <em>possible</em> to arrange for the backtrace to be printed from the error returned from main, or to do so by default? The latter seems problematic, as it would make default error handling much noisier; sometimes people want to return an error from main as their primary error handling for a CLI program, and those errors aren't programming errors that need a backtrace.</p>",
        "id": 251761298,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630606668
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/Print.20stack.20backtrace.20when.20main.20returns.20an.20error.3F/near/251761298\">said</a>:</p>\n<blockquote>\n<p>Just to confirm something, is the goal here to make it <em>possible</em> to arrange for the backtrace to be printed from the error returned from main, or to do so by default? The latter seems problematic, as it would make default error handling much noisier; sometimes people want to return an error from main as their primary error handling for a CLI program, and those errors aren't programming errors that need a backtrace.</p>\n</blockquote>\n<p>i don't think it could even be enabled by default, since the backtrace captured from after main isn't going to have any useful context</p>",
        "id": 251761786,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630606829
    },
    {
        "content": "<p>at most we could enable displaying backtraces available through the <code>Error</code> trait when available</p>",
        "id": 251761829,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630606848
    },
    {
        "content": "<p>which I think could still be argued against</p>",
        "id": 251761864,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630606857
    },
    {
        "content": "<p>since arguably return from main is almost always intended to be user facing rather than developer facing</p>",
        "id": 251761921,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630606878
    },
    {
        "content": "<p>and backtraces aren't necessarily the most helpful information to show to users</p>",
        "id": 251761961,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630606896
    },
    {
        "content": "<p>Ideally it would be on if RUST_BACKTRACE is set in the environment, without the developer having to opt in. I agree it shouldn't be on by default.</p>",
        "id": 251767645,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1630608981
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> using anyhow::Error in main should print the backtrace and sources</p>\n</blockquote>\n<p>That was not happening for me. I'm not sure why not.</p>",
        "id": 251767785,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1630609040
    },
    {
        "content": "<p>Oh, I may have needed to enable the backtrace feature in anyhow.</p>",
        "id": 251768063,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1630609139
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/Print.20stack.20backtrace.20when.20main.20returns.20an.20error.3F/near/251767785\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> using anyhow::Error in main should print the backtrace and sources</p>\n</blockquote>\n<p>That was not happening for me. I'm not sure why not.</p>\n</blockquote>\n<p>Last I checked, I believe you have to be on nightly (or BOOTSTRAP), and have <code>RUST_LIB_BACKTRACE=1</code> or <code>RUST_BACKTRACE=1</code></p>",
        "id": 251770033,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1630609880
    },
    {
        "content": "<p>oh wait, the backtrace feature uses <code>backtrace-rs</code>? I didnt know <code>backtrace-rs</code> worked on non-nightly rust</p>",
        "id": 251770460,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1630610047
    },
    {
        "content": "<p>I was under the understanding that once backtrace was stabilized, that all errors would act like anyhow (when RUST_BACKTRACE=1), but reading the docs, upon reading the docs that is not true, hmm interesting</p>",
        "id": 251770780,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1630610174
    }
]