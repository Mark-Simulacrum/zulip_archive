[
    {
        "content": "<p>I'll admit that the generic member access RFC sort of makes my eyes glaze over, but this blog post about a crate for extracting data from trait objects struck me as similar in intent, so maybe it will be of interest: <a href=\"https://tokio.rs/blog/2021-05-valuable\">https://tokio.rs/blog/2021-05-valuable</a></p>",
        "id": 240124818,
        "sender_full_name": "bstrie",
        "timestamp": 1621897907
    },
    {
        "content": "<p>for sure, nika and I already talked with them a bit about it in their discord a few months back when they first started working on Valuable</p>",
        "id": 240125074,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1621898086
    },
    {
        "content": "<p>Looking at it though, I don't really see how it helps solve any of the problems for generic member access</p>",
        "id": 240125571,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1621898427
    },
    {
        "content": "<p>we don't need to visit the members arbitrary dyn Errors in ways that are motivated by the content of those errors</p>",
        "id": 240125595,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1621898456
    },
    {
        "content": "<p>the reason I wanted generic member access was to get <code>SpanTrace</code> out of <code>dyn Error</code>s</p>",
        "id": 240125635,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1621898471
    },
    {
        "content": "<p>or ExitCode</p>",
        "id": 240125640,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1621898482
    },
    {
        "content": "<p>or http::StatusCode</p>",
        "id": 240125646,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1621898490
    },
    {
        "content": "<p>or stuff like that</p>",
        "id": 240125648,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1621898493
    },
    {
        "content": "<p>basically a generic way to spell out the various <code>fn backtrace(&amp;self) -&gt; Option&lt;&amp;Backtrace&gt;</code> like functions that you could imagine for any specific application</p>",
        "id": 240125725,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1621898535
    },
    {
        "content": "<p>with a valuable like API we'd have go ignore all of the field names, and we'd be restricted to types that fit within the Valuable API, which is centered around an enum small set of variants, where as Generic member access relies on type erasure</p>",
        "id": 240125771,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1621898596
    }
]