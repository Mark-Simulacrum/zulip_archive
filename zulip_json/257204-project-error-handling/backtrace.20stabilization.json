[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204346\">@Ashley Mannix</span> am I correct in assuming that we need to resolve the merge conflicts in <a href=\"https://github.com/rust-lang/rust/pull/72981\">https://github.com/rust-lang/rust/pull/72981</a> before we can actually merge the RFC, regardless of the recent comment by RFC bot?</p>",
        "id": 218128611,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1606510569
    },
    {
        "content": "<p>more on this <span class=\"user-mention\" data-user-id=\"204346\">@Ashley Mannix</span></p>",
        "id": 223281034,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611084969
    },
    {
        "content": "<p>one thing im worried about is that I haven't actually taken the time yet to finish my proof of concept for backtrace in core</p>",
        "id": 223281069,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611084982
    },
    {
        "content": "<p>and i want to make sure backtrace doesn't stabilize before that is finished</p>",
        "id": 223281086,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611084991
    },
    {
        "content": "<p>that should be a blocker probably</p>",
        "id": 223281093,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611084994
    },
    {
        "content": "<p>actually we should probably add that to the list on the tracking issue</p>",
        "id": 223281120,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611085008
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> That’s fair. I think <span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> was also hoping for a more complete implementation before merging. I’ll note that as a blocker. Would you like a hand with anything on the PoC?</p>",
        "id": 223313066,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1611100073
    },
    {
        "content": "<p>the main issue right now is figuring out how to setup the hooks between core and std</p>",
        "id": 223313133,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611100103
    },
    {
        "content": "<p>so any guidance on that would be the most helpful</p>",
        "id": 223313163,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611100128
    },
    {
        "content": "<p>my impression is that the type of hooks that we want currently don't have any prior art</p>",
        "id": 223313186,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611100144
    },
    {
        "content": "<p>and we'd need to add some new support in the compiler</p>",
        "id": 223313202,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611100154
    },
    {
        "content": "<p>Ah ok. Have we run our ideas for how the backtrace hooks should work by <span class=\"user-group-mention\" data-user-group-id=\"492\">@T-compiler</span> already? I’m not really familiar with how we do hooks yet but somebody from there might have a good idea?</p>",
        "id": 223313379,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1611100261
    },
    {
        "content": "<p>no, that could be the best next step</p>",
        "id": 223314160,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611100805
    },
    {
        "content": "<p>looking at the compiler team calendar rn <a href=\"https://calendar.google.com/calendar/u/0/embed?src=6u5rrtce6lrtv07pfi3damgjus@group.calendar.google.com\">https://calendar.google.com/calendar/u/0/embed?src=6u5rrtce6lrtv07pfi3damgjus@group.calendar.google.com</a></p>",
        "id": 223314300,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611100925
    },
    {
        "content": "<p>maybe I should just attend their next triage meeting?</p>",
        "id": 223314346,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611100969
    },
    {
        "content": "<p>oh no</p>",
        "id": 223314365,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611100983
    },
    {
        "content": "<p>looks like steering meeting is what I want</p>",
        "id": 223314370,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611100987
    },
    {
        "content": "<p>which isn't for another week</p>",
        "id": 223314390,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611100995
    },
    {
        "content": "<p>ill just open an thread in their zulip channel</p>",
        "id": 223314400,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611101005
    },
    {
        "content": "<p>I went ahead and created a thread in the compilers stream</p>",
        "id": 223314985,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611101430
    },
    {
        "content": "<p><a href=\"#narrow/stream/131828-t-compiler/topic/backtrace.20hooks.20in.20core\">https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/backtrace.20hooks.20in.20core</a></p>",
        "id": 223314987,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611101431
    },
    {
        "content": "<p>looks like we can probably move forward with just adding lang_items like <code>eh_personality</code> and prove that that works</p>",
        "id": 223319109,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611104616
    },
    {
        "content": "<p>then we can talk through further design concerns I've had around no_std and see if further prototyping is necessary</p>",
        "id": 223319162,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611104644
    },
    {
        "content": "<p>but I think I've got enough for <span class=\"user-mention\" data-user-id=\"281739\">@oliver</span> and I to move forward</p>",
        "id": 223319201,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611104659
    },
    {
        "content": "<p>Sounds good!</p>",
        "id": 223332453,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1611118615
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204346\">@Ashley Mannix</span> do you know off of the top of your head any examples of methods on core types in std?</p>",
        "id": 224923730,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1612294390
    },
    {
        "content": "<p>working on the core backtrace impl again and I don't know how to break the rules</p>",
        "id": 224923763,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1612294405
    },
    {
        "content": "<p>not in std, but we probably have things like impl ToOwned for str in liballoc I'd guess</p>",
        "id": 224924038,
        "sender_full_name": "simulacrum",
        "timestamp": 1612294537
    },
    {
        "content": "<p>my guess is you're going to need to define a lang item</p>",
        "id": 224924061,
        "sender_full_name": "simulacrum",
        "timestamp": 1612294550
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[lang = </span><span class=\"s\">\"str_alloc\"</span><span class=\"cp\">]</span><span class=\"w\"></span>\n<span class=\"cp\">#[cfg(not(test))]</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 224924184,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1612294592
    },
    {
        "content": "<p>that tracks</p>",
        "id": 224924188,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1612294596
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> can you confirm  for me that its okay for us to use a lang item for backtrace?</p>",
        "id": 224925231,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1612295019
    },
    {
        "content": "<p>eddyb is a bit worried about using it on something other than a builtin type</p>",
        "id": 224925243,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1612295027
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/backtrace.20stabilization/near/224923730\">said</a>:</p>\n<blockquote>\n<p>do you know off of the top of your head any examples of methods on core types in std?</p>\n</blockquote>\n<p><code>sort</code> on slices has historically been a weird one.</p>",
        "id": 224926848,
        "sender_full_name": "scottmcm",
        "timestamp": 1612295672
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> can you say a bit more about what you'd be using the lang item for?</p>",
        "id": 225176097,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612453136
    },
    {
        "content": "<p>should I just read this topic?</p>",
        "id": 225176151,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612453156
    },
    {
        "content": "<p>Oh I have a quick summary I can link</p>",
        "id": 225176299,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1612453213
    },
    {
        "content": "<p>One second</p>",
        "id": 225176305,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1612453216
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/77384#issuecomment-772835929\">https://github.com/rust-lang/rust/pull/77384#issuecomment-772835929</a></p>",
        "id": 225176388,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1612453260
    },
    {
        "content": "<p>So there are two lang items I'm eyeing now</p>",
        "id": 225176413,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1612453277
    },
    {
        "content": "<p>digging into this more im not sure I know what I'm talking about again, lol</p>",
        "id": 225200112,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1612462674
    },
    {
        "content": "<p>the global alloc stuff isn't done with lang items</p>",
        "id": 225200125,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1612462680
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">postprocess</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">krate</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">ast</span>::<span class=\"n\">Crate</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">inject_profiler_runtime</span><span class=\"p\">(</span><span class=\"n\">krate</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">inject_allocator_crate</span><span class=\"p\">(</span><span class=\"n\">krate</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">inject_panic_runtime</span><span class=\"p\">(</span><span class=\"n\">krate</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"n\">info</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">CrateDump</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">cstore</span><span class=\"p\">));</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">report_unused_deps</span><span class=\"p\">(</span><span class=\"n\">krate</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 225200356,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1612462787
    },
    {
        "content": "<p>cool function</p>",
        "id": 225200360,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1612462789
    },
    {
        "content": "<p>_really wishing topics could exist in multiple streams_</p>",
        "id": 225202492,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1612463663
    },
    {
        "content": "<p>What would you pass to this function and what does it do?  If I had to guess your passing a crate to it.</p>",
        "id": 225202497,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1612463666
    },
    {
        "content": "<p>not sure exactly because I'm just trying to figure this out myself, but this is a method on CrateLoader</p>",
        "id": 225202765,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1612463797
    },
    {
        "content": "<p>which is a piece of the compiler</p>",
        "id": 225202818,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1612463815
    },
    {
        "content": "<p>so in this case the crate being passed in is presumably the crate being compiled</p>",
        "id": 225202941,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1612463877
    },
    {
        "content": "<p>apparently the global allocator stuff is broken for dylibs</p>",
        "id": 225203113,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1612463941
    },
    {
        "content": "<p>eddyb is telling me that if we based the backtrace stuff on global alloc we'd probably end up with backtraces that dont work in rustc</p>",
        "id": 225203142,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1612463958
    },
    {
        "content": "<p>which seems bad</p>",
        "id": 225203145,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1612463959
    },
    {
        "content": "<p><span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 225203147,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1612463961
    },
    {
        "content": "<p>I see</p>",
        "id": 225203219,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1612463995
    },
    {
        "content": "<p>pausing on this for the day soon but made some good progress</p>",
        "id": 225220247,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1612471730
    },
    {
        "content": "<p>using the <code>#[linkage]</code> feature rn which I think might not be supported on all platforms</p>",
        "id": 225220287,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1612471749
    },
    {
        "content": "<p>so i know that might need to be changed later</p>",
        "id": 225220300,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1612471753
    },
    {
        "content": "<p>but hopefully this will let me do the lib side of the backtrace move</p>",
        "id": 225220359,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1612471783
    },
    {
        "content": "<p>and then I can do the compiler side of making it all work after</p>",
        "id": 225220378,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1612471791
    },
    {
        "content": "<p>my current understanding is I wont be able to use a lang_item for the backtrace impl</p>",
        "id": 225229033,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1612475626
    },
    {
        "content": "<p>and will probably have to change the compiler to inject an extra dep if the backtrace hook symbols are never defined</p>",
        "id": 225229121,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1612475654
    },
    {
        "content": "<p>but for right now the linkage will hopefully let me work on the stuff I already understand while I figure out the compiler changes necessary</p>",
        "id": 225229192,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1612475692
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> Is this complex enough that it might be worth considering just finishing build-std support instead?</p>",
        "id": 229117085,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615054193
    },
    {
        "content": "<p>(That isn't meant as a leading question; it's a genuine one.)</p>",
        "id": 229117145,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615054213
    },
    {
        "content": "<p>I don't think so but then I haven't had a ton of time to work on the backtrace move recently so there may be a lot more issues to resolve before I'm done</p>",
        "id": 229117287,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1615054324
    },
    {
        "content": "<p>How much work would finishing build std support entail <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> ?</p>",
        "id": 229117309,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1615054338
    },
    {
        "content": "<p>My understanding is that the primary remaining issue there is \"how do we let rustc 1.x.y build std 1.x.y that uses nightly-only features without allowing version skew\".</p>",
        "id": 229117600,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615054580
    },
    {
        "content": "<p>We'd need the source-equivalent of the sysroot, as the simplest thing.</p>",
        "id": 229117614,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615054617
    },
    {
        "content": "<p>That plus a little more cargo work to integrate it would address the feature itself. Then we could start using feature flags in std, with care.</p>",
        "id": 229117649,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615054663
    },
    {
        "content": "<p>That may or may not be easier than sorting out the issues you're running into.</p>",
        "id": 229118010,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615054950
    },
    {
        "content": "<p>What do you mean by version skew?</p>",
        "id": 229120960,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1615057598
    },
    {
        "content": "<p>build-std shouldn't allow building a a version of std other than the version that precisely matches the version of rustc.</p>",
        "id": 229121516,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615058073
    },
    {
        "content": "<p>If you have a specific nightly rustc, build-std should build that specific nightly's std.</p>",
        "id": 229121542,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615058107
    },
    {
        "content": "<p>So it should come from the Rust distribution (rustup or distro), via something like the sysroot.</p>",
        "id": 229121580,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615058137
    },
    {
        "content": "<p>Aah</p>",
        "id": 229121585,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1615058152
    },
    {
        "content": "<p>What would be the follow up once we have build std setup</p>",
        "id": 229121647,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1615058206
    },
    {
        "content": "<p>My understanding was that we then merge core and std</p>",
        "id": 229121651,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1615058216
    },
    {
        "content": "<p>But that seems like a lot more work</p>",
        "id": 229121675,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1615058236
    },
    {
        "content": "<p>That can happen over time; it doesn't have to happen immediately.</p>",
        "id": 229121679,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615058250
    },
    {
        "content": "<p>We can start adding features controlled by feature flags as soon as build-std works reliably.</p>",
        "id": 229121690,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615058275
    },
    {
        "content": "<p>Yea, I'm just wondering what feature flags we'd add here to help</p>",
        "id": 229121749,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1615058294
    },
    {
        "content": "<p>Can we even feature flag part of a trait?</p>",
        "id": 229121771,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1615058319
    },
    {
        "content": "<p>As in to disable the backtrace fn</p>",
        "id": 229121774,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1615058331
    },
    {
        "content": "<p>Disable or stub out.</p>",
        "id": 229121776,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615058340
    },
    {
        "content": "<p>Or is there some simple solution I'm forgetting here</p>",
        "id": 229121777,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1615058341
    },
    {
        "content": "<p>I've been assuming that for compatibility the backtrace function should exist and return an empty backtrace.</p>",
        "id": 229121797,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615058357
    },
    {
        "content": "<p>Yea</p>",
        "id": 229121804,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1615058365
    },
    {
        "content": "<p>So then we would be future flagging alloc support inside of core?</p>",
        "id": 229121816,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1615058379
    },
    {
        "content": "<p>So basically things would start moving from std into core and that's where we add the feature flags</p>",
        "id": 229121823,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1615058396
    },
    {
        "content": "<p>Yeah. My assumption has been that we would slowly merge std and alloc <em>into</em> core (not the other way around), under feature flags, and re-export them from std and alloc.</p>",
        "id": 229121872,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615058407
    },
    {
        "content": "<p>And then core would be the new std essentially</p>",
        "id": 229121880,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1615058409
    },
    {
        "content": "<p>Gotcha</p>",
        "id": 229121885,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1615058416
    },
    {
        "content": "<p>I don't know much about how sysroots work, so I'll have to do some research</p>",
        "id": 229121911,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1615058443
    },
    {
        "content": "<p>(naming bikesheds aside, because we might ultimately rename core to std when done)</p>",
        "id": 229121915,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615058445
    },
    {
        "content": "<p>We could open another topic (probably not under project-error-handling) and I could help with what I know about sysroots and the general plan here, if that'd help?</p>",
        "id": 229121967,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615058473
    },
    {
        "content": "<p>But I can start working on that if you think it would be the more fruitful approach</p>",
        "id": 229121968,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1615058476
    },
    {
        "content": "<p>Sure</p>",
        "id": 229121971,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1615058489
    },
    {
        "content": "<p>So, I do <em>not</em> want to make the perfect the enemy of the good here. If you have a concrete idea for how to fix the backtrace issue without having to do this, and it seems doable, please by all means go for it.</p>",
        "id": 229121974,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615058503
    },
    {
        "content": "<p>If, and only if, the backtrace issue seems stuck or painful (which it sounded above like it might be, given your mention of <code>#[linkage]</code> and platform-specifics), then this <em>might</em> be a fruitful path, and it'd be wildly helpful for many other purposes too.</p>",
        "id": 229122041,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615058548
    },
    {
        "content": "<p><a href=\"#narrow/stream/122651-general/topic/build-std.2C.20sysroots.2C.20and.20backtrace\">https://rust-lang.zulipchat.com/#narrow/stream/122651-general/topic/build-std.2C.20sysroots.2C.20and.20backtrace</a></p>",
        "id": 229123061,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615059505
    },
    {
        "content": "<p>Hope that helps.</p>",
        "id": 229123065,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615059511
    },
    {
        "content": "<p>Hello Jane <em>et al</em>,  Is there a google meet link for the meeting at 2PM (5 min from now)?</p>",
        "id": 229905633,
        "sender_full_name": "Edmund Cape",
        "timestamp": 1615488992
    },
    {
        "content": "<p>... reading the posts from last week.  It looks like we are moving to every other week.  Until then, then :))</p>",
        "id": 229907340,
        "sender_full_name": "Edmund Cape",
        "timestamp": 1615489625
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 229918054,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1615493657
    },
    {
        "content": "<p>do you have access to the libs calendar <span class=\"user-mention\" data-user-id=\"388128\">@Edmund Cape</span> ?</p>",
        "id": 229931988,
        "sender_full_name": "oliver",
        "timestamp": 1615499213
    }
]