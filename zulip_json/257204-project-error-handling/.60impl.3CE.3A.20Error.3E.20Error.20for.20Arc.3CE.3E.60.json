[
    {
        "content": "<p>I'm using an error type that I need to be cheaply cloneable, but which contains types that aren't cloneable. The simple solution is to stick the inner types in an <code>Arc</code> (I don't need to mutate the error once its created). I noticed that there isn't an error impl on <code>Arc</code>, but there is for <code>Box</code>. There is already a <code>Display</code> impl for <code>Arc</code>, so adding an <code>Error</code> seems like an innocuous addition. Anyways I made <a href=\"https://github.com/rust-lang/rust/pull/80553\">a PR</a> - let me know if you think there are any issues/problems with adding it.</p>",
        "id": 221294022,
        "sender_full_name": "Richard Dodd",
        "timestamp": 1609425667
    },
    {
        "content": "<p>I cannot tell you if it will be accepted or not, but if it is, doing it for Rc would be logical no ?</p>",
        "id": 221302878,
        "sender_full_name": "Poliorcetics",
        "timestamp": 1609434321
    },
    {
        "content": "<p>Good point.</p>",
        "id": 221303378,
        "sender_full_name": "Richard Dodd",
        "timestamp": 1609434722
    },
    {
        "content": "<p>I'll wait for feedback before doing that.</p>",
        "id": 221303409,
        "sender_full_name": "Richard Dodd",
        "timestamp": 1609434732
    },
    {
        "content": "<p>One problem could be that if someone <code>impl Error for Arc&lt;MyError&gt;</code> where <code>MyError: Error</code>, then their code would stop compiling. I would be surprised if anyone had actually done this.</p>",
        "id": 221305147,
        "sender_full_name": "Richard Dodd",
        "timestamp": 1609436429
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"374619\">Richard Dodd</span> <a href=\"#narrow/stream/219381-t-libs/topic/.60impl.3CE.3A.20Error.3E.20Error.20for.20Arc.3CE.3E.60/near/221305147\">said</a>:</p>\n<blockquote>\n<p>One problem could be that if someone <code>impl Error for Arc&lt;MyError&gt;</code> where <code>MyError: Error</code>, then their code would stop compiling. I would be surprised if anyone had actually done this.</p>\n</blockquote>\n<p>as far as I can tell the orphan rules ban impls like this so that shouldn't be an issue</p>",
        "id": 221307664,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1609439107
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>   Compiling playground v0.0.1 (/playground)\nerror[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n --&gt; src/lib.rs:6:1\n  |\n6 | impl std::error::Error for Arc&lt;Error&gt; {\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^----------\n  | |                          |\n  | |                          `Arc` is not defined in the current crate\n  | impl doesn&#39;t use only types from inside the current crate\n  |\n  = note: define and implement a trait or new type instead\n</code></pre></div>",
        "id": 221307676,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1609439127
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> it will build if the <code>Error</code> type there is defined by you. This is to allow things like <code>impl From&lt;MyType&gt; for TypeInStd</code>.</p>",
        "id": 221307871,
        "sender_full_name": "Richard Dodd",
        "timestamp": 1609439350
    },
    {
        "content": "<p>^^ I think. It's a recent change (about 6 months ago?)</p>",
        "id": 221307874,
        "sender_full_name": "Richard Dodd",
        "timestamp": 1609439362
    },
    {
        "content": "<p>I think it depends on if its \"covered\" or not</p>",
        "id": 221307877,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1609439378
    },
    {
        "content": "<p>i know what you mean</p>",
        "id": 221307878,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1609439383
    },
    {
        "content": "<p>i bookmarked the release notes that document the rules because they're so convoluted</p>",
        "id": 221307885,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1609439393
    },
    {
        "content": "<p>Haha oh then you've taught me something! :)</p>",
        "id": 221307930,
        "sender_full_name": "Richard Dodd",
        "timestamp": 1609439408
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">sync</span>::<span class=\"n\">Arc</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[derive(Debug)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Error</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">error</span>::<span class=\"n\">Error</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Arc</span><span class=\"o\">&lt;</span><span class=\"n\">Error</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 221307934,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1609439415
    },
    {
        "content": "<p>this is how i tested it</p>",
        "id": 221307937,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1609439419
    },
    {
        "content": "<p>Amazing, thankyou!</p>",
        "id": 221307941,
        "sender_full_name": "Richard Dodd",
        "timestamp": 1609439426
    },
    {
        "content": "<p><a href=\"https://blog.rust-lang.org/2020/01/30/Rust-1.41.0.html#relaxed-restrictions-when-implementing-traits\">https://blog.rust-lang.org/2020/01/30/Rust-1.41.0.html#relaxed-restrictions-when-implementing-traits</a></p>",
        "id": 221307947,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1609439442
    },
    {
        "content": "<p>extremely glad I bookmarked this one now, lol</p>",
        "id": 221307951,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1609439449
    },
    {
        "content": "<p><code>While it's still true that both From and Vec were foreign, the trait (in this case From) was parameterized by a local type. Therefore, Rust 1.41.0 allows this impl.</code></p>",
        "id": 221307969,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1609439495
    },
    {
        "content": "<p><a href=\"https://rust-lang.github.io/rfcs/2451-re-rebalancing-coherence.html\">https://rust-lang.github.io/rfcs/2451-re-rebalancing-coherence.html</a></p>",
        "id": 221307978,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1609439511
    },
    {
        "content": "<p>Ahh so the <em>trait</em> has to be parameterised by the local type, not the thing its implemented on?</p>",
        "id": 221308019,
        "sender_full_name": "Richard Dodd",
        "timestamp": 1609439530
    },
    {
        "content": "<p><code>Fundamental Type: A type for which you cannot add a blanket impl backwards compatibly. This includes &amp;, &amp;mut, and Box. Any time a type T is considered local, &amp;T, &amp;mut T, and Box&lt;T&gt; are also considered local. Fundamental types cannot cover other types. Any time the term \"covered type\" is used, &amp;T, &amp;mut T, and Box&lt;T&gt; are not considered covered.</code></p>",
        "id": 221308035,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1609439575
    },
    {
        "content": "<p>so Box is fundamental but Arc is not</p>",
        "id": 221308039,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1609439580
    },
    {
        "content": "<p>so this would have been an issue for Box, ironically, lol</p>",
        "id": 221308055,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1609439587
    },
    {
        "content": "<p>I'm not sure yet if its specifically the trait</p>",
        "id": 221308069,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1609439600
    },
    {
        "content": "<p>I think it is tho</p>",
        "id": 221308075,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1609439612
    },
    {
        "content": "<p>rereading the RFC rn</p>",
        "id": 221308076,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1609439614
    },
    {
        "content": "<p><code>When implementing a foreign trait for a foreign type, the trait must have one or more type parameters. A type local to your crate must appear before any use of any type parameters. This means that impl&lt;T&gt; ForeignTrait&lt;LocalType&lt;T&gt;, T&gt; for ForeignType is valid, but impl&lt;T&gt; ForeignTrait&lt;T, LocalType&lt;T&gt;&gt; for ForeignType is not.</code></p>",
        "id": 221308233,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1609439811
    },
    {
        "content": "<p>okay yea, just the trait</p>",
        "id": 221308235,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1609439814
    },
    {
        "content": "<p>It feels like its basically been designed to cover <code>From</code> and nothing else :P</p>",
        "id": 221308247,
        "sender_full_name": "Richard Dodd",
        "timestamp": 1609439843
    },
    {
        "content": "<p>wait no im confused again</p>",
        "id": 221308404,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1609440002
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>Given impl&lt;P1..=Pn&gt; Trait&lt;T1..=Tn&gt; for T0, an impl is valid only if at least one of the following is true:\n\n* Trait is a local trait\n* All of\n        * At least one of the types T0..=Tn must be a local type. Let Ti be the first such type.\n        * No uncovered type parameters P1..=Pn may appear in T0..Ti (excluding Ti)\n</code></pre></div>",
        "id": 221308439,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1609440014
    },
    {
        "content": "<p>hmm</p>",
        "id": 221308477,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1609440072
    },
    {
        "content": "<p>this seems to imply that Arc&lt;Error&gt; should be implementable</p>",
        "id": 221308490,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1609440095
    },
    {
        "content": "<p>given the example of <code>impl Error for Arc&lt;MyError&gt;</code></p>",
        "id": 221308502,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1609440111
    },
    {
        "content": "<p>wait no</p>",
        "id": 221308551,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1609440124
    },
    {
        "content": "<p>T0 = Arc&lt;MyError&gt; not MyError</p>",
        "id": 221308558,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1609440132
    },
    {
        "content": "<p>okay so that doesn't count as a local type, and the trait isn't local</p>",
        "id": 221308577,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1609440157
    },
    {
        "content": "<p>and there are no type parameters</p>",
        "id": 221308579,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1609440163
    },
    {
        "content": "<p>so it's invalid</p>",
        "id": 221308588,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1609440169
    },
    {
        "content": "<p>okay cool</p>",
        "id": 221308591,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1609440171
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"374619\">Richard Dodd</span> <a href=\"#narrow/stream/219381-t-libs/topic/.60impl.3CE.3A.20Error.3E.20Error.20for.20Arc.3CE.3E.60/near/221308247\">said</a>:</p>\n<blockquote>\n<p>It feels like its basically been designed to cover <code>From</code> and nothing else :P</p>\n</blockquote>\n<p>It's probably pretty useful for all the <code>std::ops</code> traits too</p>",
        "id": 221308618,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1609440205
    },
    {
        "content": "<p>just about anything with a type parameter on the trait itself</p>",
        "id": 221308638,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1609440233
    },
    {
        "content": "<p>which makes sense</p>",
        "id": 221308641,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1609440238
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"219381\" href=\"/#narrow/stream/219381-t-libs/topic/.02klzzwxh.3A0000.03\">#t-libs &gt; <code>impl&lt;E: Error&gt; Error for Arc&lt;E&gt;</code></a> by <span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span></p>",
        "id": 221544248,
        "sender_full_name": "Notification Bot",
        "timestamp": 1609777190
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204346\">@Ashley Mannix</span> regarding <a href=\"https://github.com/rust-lang/rust/pull/80553#discussion_r552291239\">https://github.com/rust-lang/rust/pull/80553#discussion_r552291239</a></p>",
        "id": 221730060,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1609903610
    },
    {
        "content": "<p>actually nvm</p>",
        "id": 221734944,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1609910180
    },
    {
        "content": "<p>i was gonna disagree but I think I changed my mind</p>",
        "id": 221734947,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1609910187
    },
    {
        "content": "<p>I was a bit back-and-forth on that comment myself <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> But settled on thinking we should try make our future impls <code>?Sized</code> and treat <code>Box</code> as an oddity for now with its common use with <code>?</code> (I am still thinking an <code>anyhow</code>/<code>eyre</code>-like type should replace <code>Box&lt;dyn Error&gt;</code> someday)</p>",
        "id": 221740268,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1609917903
    },
    {
        "content": "<p>yea</p>",
        "id": 221823915,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1609967343
    },
    {
        "content": "<p>my take on it is that we should make the decision based on their relation to crates like <code>eyre</code> and <code>anyhow</code></p>",
        "id": 221823946,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1609967360
    },
    {
        "content": "<p>those crates are reporting types, and they mostly exist for convenience which is why they opt for From over Error</p>",
        "id": 221823978,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1609967383
    },
    {
        "content": "<p>but <code>Arc&lt;dyn Error&gt;</code> and friends are not reporters</p>",
        "id": 221823997,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1609967395
    },
    {
        "content": "<p>and the fact that box is implemented like one is probably not a good precident to follow</p>",
        "id": 221824041,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1609967406
    },
    {
        "content": "<p>and I dont think <code>Arc&lt;dyn Error&gt;</code> and <code>Box&lt;dyn Error&gt;</code> should be thought of as alternatives to <code>eyre</code> and <code>anyhow</code>. If you want that it should be trivial to just wrap a box and add the from impl but not the error impl</p>",
        "id": 221824084,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1609967440
    },
    {
        "content": "<p>so we should optimize for the smart pointer usecase not the dyn error usecase</p>",
        "id": 221824133,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1609967468
    },
    {
        "content": "<p>its gonna be a gross inconsistency</p>",
        "id": 221824154,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1609967481
    },
    {
        "content": "<p>but I think its for the best</p>",
        "id": 221824159,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1609967486
    },
    {
        "content": "<p>the sooner we quarantine the weird behaviour the better</p>",
        "id": 221824178,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1609967502
    },
    {
        "content": "<p>we should probably end up documenting the discrepancy somewhere</p>",
        "id": 221824247,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1609967527
    },
    {
        "content": "<p>Yeh, I guess <code>Box&lt;dyn Error&gt;</code> is our current standard library reporter but that's not really what we want. <code>Box</code> and <code>Arc</code> should just be details of the error's storage, not of its role</p>",
        "id": 221838740,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1609976295
    },
    {
        "content": "<p>Exactly</p>",
        "id": 221838762,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1609976312
    }
]