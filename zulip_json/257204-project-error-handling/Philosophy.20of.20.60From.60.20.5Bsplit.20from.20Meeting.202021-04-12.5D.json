[
    {
        "content": "<p>T implementing TryFrom for an option of itself seems unusual to me</p>",
        "id": 234219998,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1618257299
    },
    {
        "content": "<p>but I guess the inner type doesn't need to be T</p>",
        "id": 234220050,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1618257316
    },
    {
        "content": "<p>I don't really have a concrete \"oh yes I needed it here\".  Mostly it's related to my general philosophy that if something's <code>From</code> in one direction should probably be <code>TryFrom</code> (perhaps <code>From</code>) in the other direction.  (And if that's not possible, maybe <code>From</code> wasn't a good idea in the first place.)</p>",
        "id": 234221285,
        "sender_full_name": "scottmcm",
        "timestamp": 1618257765
    },
    {
        "content": "<p>I see</p>",
        "id": 234221412,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1618257814
    },
    {
        "content": "<p>Like <code>.try_into().unwrap()</code> to pull a variant out of a <code>net::IpAddr</code> feels reasonable to me -- it's like a downcast in that it's probably not something you should be doing super often, but...</p>",
        "id": 234221926,
        "sender_full_name": "scottmcm",
        "timestamp": 1618258034
    },
    {
        "content": "<p>ah, yea that one makes sense to me</p>",
        "id": 234222068,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1618258095
    },
    {
        "content": "<p>it doesn't feel like a fundamental property to me though</p>",
        "id": 234222080,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1618258101
    },
    {
        "content": "<p>like, I can see constructing something with <code>From</code> as vaguely destructive to the original input</p>",
        "id": 234222150,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1618258126
    },
    {
        "content": "<p>or I guess, potentially destructive</p>",
        "id": 234222174,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1618258145
    },
    {
        "content": "<p>Yeah, I agree it's not impossible -- <code>BinaryHeap&lt;T&gt;: From&lt;Vec&lt;T&gt;&gt;</code> is an existing example.  But at the same time that's one of those that feels like it needs a comment because it's not obvious what it's doing, and thus maybe it should have been <code>.heapify()</code> or something instead of <code>.into()</code>.</p>",
        "id": 234222415,
        "sender_full_name": "scottmcm",
        "timestamp": 1618258263
    },
    {
        "content": "<p>ah yea</p>",
        "id": 234222492,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1618258309
    },
    {
        "content": "<p>And in general, there's often multiple reasonable destructive ways to convert something, which pushes it away from <code>From</code>.</p>\n<p>But regardless, I look forward to checking in try_trait_v2 and being able to deprecate <code>NoneError</code> and force the conversation to stop <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 234222641,
        "sender_full_name": "scottmcm",
        "timestamp": 1618258365
    },
    {
        "content": "<p>feels similar to <a href=\"https://github.com/rust-lang/rust/pull/84111\">https://github.com/rust-lang/rust/pull/84111</a> , where <code>impl From&lt;[(K, V); N]&gt; for HashMap</code> loses both the order of the input and any duplicates</p>",
        "id": 234222649,
        "sender_full_name": "bstrie",
        "timestamp": 1618258371
    },
    {
        "content": "<p>I wonder if there are any good writeups on when it is and isn't appropriate to use From</p>",
        "id": 234222652,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1618258372
    },
    {
        "content": "<p>I definitely have seen a few different approaches</p>",
        "id": 234222678,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1618258384
    },
    {
        "content": "<p>specifically, when to use from vs making a constructor method</p>",
        "id": 234222733,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1618258410
    },
    {
        "content": "<p>and managing the boundary between constructors as a trait bound you can rely upon</p>",
        "id": 234222773,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1618258428
    },
    {
        "content": "<p>I always struggle with <code>T::new()</code> vs <code>T::default()</code></p>",
        "id": 234222909,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618258471
    },
    {
        "content": "<p>My \"<code>A: From&lt;B&gt;</code> probably only is good if <code>B: TryFrom&lt;A&gt;</code> makes sense too\" heuristic came out of conversations in <a href=\"https://github.com/rust-lang/rfcs/pull/2484\">https://github.com/rust-lang/rfcs/pull/2484</a></p>",
        "id": 234222942,
        "sender_full_name": "scottmcm",
        "timestamp": 1618258482
    },
    {
        "content": "<p>I'll definitely be keeping that heuristic in mind going forward to see how well it applies to my experiences</p>",
        "id": 234223056,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1618258543
    },
    {
        "content": "<p>I generally use <code>From&lt;..&gt;</code> for \"equal-ish\" types. As in, if I have a struct with a member and i'm creating the struct from that member, I would use <code>from_x</code> as a method instead of the <code>From</code> trait</p>",
        "id": 234323671,
        "sender_full_name": "DPC",
        "timestamp": 1618320236
    }
]