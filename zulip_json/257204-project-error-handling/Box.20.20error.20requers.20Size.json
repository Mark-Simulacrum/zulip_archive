[
    {
        "content": "<p>In my library, I was trying to move from <code>Box&lt;dyn Error&gt;</code> to <code>T: Error</code>. Most users want to use <code>Box&lt;dyn Error&gt;</code>, but it is more flexible for thems that want a concrete error. But I keep hitting a problem because Box only impls Error, if <code>T</code> impls Error <em>and is sized</em>. <a href=\"https://doc.rust-lang.org/src/std/error.rs.html#499-513\">Here</a>.</p>\n<p>Is there a reason for that?</p>",
        "id": 261557533,
        "sender_full_name": "Eh2406",
        "timestamp": 1637009721
    },
    {
        "content": "<p>At this point the only reason is backwards compatibility</p>",
        "id": 261558612,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1637010203
    },
    {
        "content": "<p>Would it be a breaking change to add <code>+ ?Sized</code>?</p>",
        "id": 261558700,
        "sender_full_name": "Eh2406",
        "timestamp": 1637010243
    },
    {
        "content": "<p>The current plan to fix this is to introduce a thin box type that also has the feature of  making trait objects only one pointer wide,  and on this new type implement the correct error impl</p>",
        "id": 261558718,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1637010253
    },
    {
        "content": "<p>Yes, it would be a breaking change</p>",
        "id": 261558759,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1637010286
    },
    {
        "content": "<p>It would cause overlap with from e for box dyn error</p>",
        "id": 261558774,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1637010294
    },
    {
        "content": "<p><a href=\"https://stackoverflow.com/questions/65151237/why-doesnt-boxdyn-error-implement-error\">https://stackoverflow.com/questions/65151237/why-doesnt-boxdyn-error-implement-error</a> gives some more context into this</p>",
        "id": 261558831,
        "sender_full_name": "Sean Chen (he/him)",
        "timestamp": 1637010321
    },
    {
        "content": "<p>Can we add a comment to the code linking to the issue?</p>",
        "id": 261559098,
        "sender_full_name": "Eh2406",
        "timestamp": 1637010451
    },
    {
        "content": "<p>( given how easy the fix looked, I knew I was missing something. )</p>",
        "id": 261559237,
        "sender_full_name": "Eh2406",
        "timestamp": 1637010494
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 261559273,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1637010510
    },
    {
        "content": "<p>So to back out of my X-Y problem. My library takes a callback witch can return an error. Currently <code>Box&lt;dyn Error&gt;</code>. When my code calls the callback and it returns an error, we wrap it up in some information about why (<a href=\"https://github.com/pubgrub-rs/pubgrub/blob/dev/src/error.rs#L30\">here</a>) and bubble it back out to the user of my library. It feels restrictive too require dynamic dispatch and allocations just to pass the error through my code. What is the current best practice here?</p>",
        "id": 261564023,
        "sender_full_name": "Eh2406",
        "timestamp": 1637012781
    },
    {
        "content": "<p>I'm currently away from my computer so I am only giving like vague impression and haven't actually checked the code, but my default go to would be to have trait bounds that require that the return type impls from for your error types that you're going to use to add the extra context</p>",
        "id": 261564871,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1637013209
    },
    {
        "content": "<p>Wait no actually I think that's wrong</p>",
        "id": 261564907,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1637013231
    },
    {
        "content": "<p>Because presumably you would already have their error type before you would be contextualizing it with your own</p>",
        "id": 261564976,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1637013255
    },
    {
        "content": "<p>I'll take a look when I get home</p>",
        "id": 261564987,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1637013264
    },
    {
        "content": "<p>But I know I've run into this issue almost exactly when working with Tower in the past</p>",
        "id": 261565079,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1637013316
    },
    {
        "content": "<p>okay so initial pass, you might be able to use <code>E: Into&lt;Box&lt;dyn Error&gt;&gt;</code> instead of <code>E: Error</code></p>",
        "id": 261577290,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1637019753
    },
    {
        "content": "<p>which will at least cover both, though you're still working with Box&lt;dyn Error&gt; on your end</p>",
        "id": 261577318,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1637019776
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120179\">@Eh2406</span> can you describe more why you want to switch from <code>Box&lt;dyn Error&gt;</code> to <code>T: Error</code>?</p>",
        "id": 261577381,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1637019838
    },
    {
        "content": "<p>or do you have a diff showing the changes you're trying to make to the DependencyProvider trait?</p>",
        "id": 261577631,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1637019973
    },
    {
        "content": "<p>I assume you're updating this method: <a href=\"https://github.com/pubgrub-rs/pubgrub/blob/717289be5722dd5caaa0d1f4ed13047d11a7f7fd/src/solver.rs#L256\">https://github.com/pubgrub-rs/pubgrub/blob/717289be5722dd5caaa0d1f4ed13047d11a7f7fd/src/solver.rs#L256</a></p>",
        "id": 261577639,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1637019979
    },
    {
        "content": "<p>Now I am on the road. I can reply after dinner. Thanks for the help.</p>",
        "id": 261577699,
        "sender_full_name": "Eh2406",
        "timestamp": 1637020030
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 261577711,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1637020036
    },
    {
        "content": "<p>That method is a good example. All the methods from <code>DependencyProvider</code> have <code> -&gt; Result&lt; something , Box&lt;dyn Error&gt;&gt;;</code></p>",
        "id": 261582393,
        "sender_full_name": "Eh2406",
        "timestamp": 1637022979
    },
    {
        "content": "<p>Errors should be rare, so maybe it doesn't matter very much. But it feels like I'm constraining the user.</p>",
        "id": 261582479,
        "sender_full_name": "Eh2406",
        "timestamp": 1637023058
    },
    {
        "content": "<p>If there was an associated type <code>DependencyProvider::Error</code> and everything returned <code> -&gt; Result&lt; something , Self::Error&gt;;</code>,  then our users could pick their representation. Do they need an allocation, and dynamic dispatch?</p>",
        "id": 261582706,
        "sender_full_name": "Eh2406",
        "timestamp": 1637023226
    },
    {
        "content": "<p>That would work, though you'd still need to be able to introduce your own error kinds right?</p>",
        "id": 261582794,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1637023306
    },
    {
        "content": "<p>Like a NoSolution error</p>",
        "id": 261582854,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1637023332
    },
    {
        "content": "<p>Right! We would still need our own error enum. But where it <a href=\"https://github.com/pubgrub-rs/pubgrub/blob/dev/src/error.rs#L30\">now has</a> <code>Box&lt;dyn std::error::Error&gt;</code> it would have <code>DP::Error</code>.</p>",
        "id": 261583319,
        "sender_full_name": "Eh2406",
        "timestamp": 1637023660
    },
    {
        "content": "<p>I'm wondering if you might be able to get away with adding a generic parameter to your error enum  so that users could specify how you wrap their errors</p>",
        "id": 261583546,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1637023804
    },
    {
        "content": "<p>And use that generic parameter instead of box dyn error</p>",
        "id": 261583587,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1637023832
    },
    {
        "content": "<p>I don't why last time I tried this I ended up constraining the parameter to be <code>E: Std:Error</code>, and fell down the rabbit hole of trying to figure out why <code>Box&lt;dyn Error&gt;</code> did not work as an instantiation.</p>",
        "id": 261583809,
        "sender_full_name": "Eh2406",
        "timestamp": 1637023980
    },
    {
        "content": "<p>Oh yeah, you might need to use a Deref bound or something instead of an Error bound to make it work for box and other error types</p>",
        "id": 261584157,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1637024180
    },
    {
        "content": "<p>Not sure if errors implicitly Deref to a dyn Error <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 261584170,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1637024201
    },
    {
        "content": "<p>This is where it always gets really annoying</p>",
        "id": 261584192,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1637024221
    },
    {
        "content": "<p>And this is why I want to add thin box that just avoids this problem</p>",
        "id": 261584203,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1637024228
    },
    {
        "content": "<p>Honestly, my recommendation would be to just use an error bound and possibly provide some sort of convenience function for converting box dyn errors  into something that implements error by just like wrapping it in a new type</p>",
        "id": 261584314,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1637024305
    },
    {
        "content": "<p>Like box dyn error not implementing error was a mistake and you shouldn't let it constrain your API</p>",
        "id": 261584344,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1637024338
    },
    {
        "content": "<p>It's not too hard for users to work around the issues themselves</p>",
        "id": 261584357,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1637024345
    },
    {
        "content": "<p>Hopefully not steering you wrong</p>",
        "id": 261584399,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1637024380
    },
    {
        "content": "<p>No promises though</p>",
        "id": 261584405,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1637024384
    },
    {
        "content": "<p>That is fair.</p>",
        "id": 261584423,
        "sender_full_name": "Eh2406",
        "timestamp": 1637024395
    },
    {
        "content": "<p><span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 261584424,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1637024396
    },
    {
        "content": "<p>It's amazing how many ripples a mistake in STD has.</p>",
        "id": 261584823,
        "sender_full_name": "Eh2406",
        "timestamp": 1637024619
    },
    {
        "content": "<p>:/</p>",
        "id": 261585390,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1637025055
    },
    {
        "content": "<p>hard to avoid in this case, the real cause of the issue was wanting to be able to use <code>?</code> with <code>Box&lt;dyn Error&gt;</code>, which seems clearly worth it in an abstract sense</p>",
        "id": 261585426,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1637025105
    },
    {
        "content": "<p>and the only reason we can really get away with not having the From impl now is because of the new Try trait which took a long ass time to get to the current state</p>",
        "id": 261585513,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1637025179
    },
    {
        "content": "<p>and even then it necessitates using multiple Result types which I'm still not convinced will be worth it</p>",
        "id": 261585530,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1637025204
    },
    {
        "content": "<p>Thanks for your expertise. I will give the refactor another try.</p>",
        "id": 261585551,
        "sender_full_name": "Eh2406",
        "timestamp": 1637025237
    },
    {
        "content": "<p>my pleasure, let me know if I can help any more</p>",
        "id": 261585597,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1637025260
    }
]