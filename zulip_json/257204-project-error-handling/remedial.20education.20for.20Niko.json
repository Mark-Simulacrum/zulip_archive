[
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> or others. What is the easiest and correct way to attach context to errors these days? I am using <code>anyhow</code> and I basically just want to know (e.g.) <em>which</em> file it is that I can't open anyway</p>",
        "id": 243692000,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624472280
    },
    {
        "content": "<p>just putting <code>?</code> isn't getting me the backtrace I crave :)</p>",
        "id": 243692064,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624472298
    },
    {
        "content": "<p>Perhaps with the <code>anyhow::Context</code> trait? <code>let buf = fs::read(path).with_context(|| format!(\"failed to read {:?}\", path.display()))?</code></p>",
        "id": 243692449,
        "sender_full_name": "Sean McArthur",
        "timestamp": 1624472471
    },
    {
        "content": "<p>I think it depends on the situation. Given that you already have <code>anyhow</code> and you're presumably not worrying about how this affects how you can react to specific error cases then using <code>.context</code> provided by anyhow would probably be easiest</p>",
        "id": 243692464,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1624472476
    },
    {
        "content": "<p>as Sean said</p>",
        "id": 243692501,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1624472490
    },
    {
        "content": "<p>That's what I'd suggest as well.</p>",
        "id": 243692600,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1624472528
    },
    {
        "content": "<p>alternatively if you're using <code>tracing</code> and you only need this additional context for debugging and would prefer to not have it shown in error reports to users I would recommend using <code>tracing-error</code> and <code>eyre</code></p>",
        "id": 243692607,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1624472534
    },
    {
        "content": "<p>since that's exactly what they were designed for</p>",
        "id": 243692618,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1624472539
    },
    {
        "content": "<p>There are also some helper libraries that give you functions with the same signature as <code>fs::read</code> or <code>fs::open</code> that automatically attach error context.</p>",
        "id": 243692650,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1624472556
    },
    {
        "content": "<p>Depends on where you're using it and if you mind the additional overhead of doing it for every operation.</p>",
        "id": 243692687,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1624472572
    },
    {
        "content": "<p>I don't care at all about overhead</p>",
        "id": 243950881,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624644571
    },
    {
        "content": "<p>but I care about the ergonomic hit of <code>.with_context(| format!(...))</code>, which feels awfully clunky</p>",
        "id": 243950911,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624644591
    },
    {
        "content": "<p>maybe good enough I guess</p>",
        "id": 243950924,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624644598
    },
    {
        "content": "<p>postfix macross</p>",
        "id": 243950978,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1624644614
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> do I want eyre? I care about how pretty things look when they print out</p>",
        "id": 243950979,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624644614
    },
    {
        "content": "<p>and I care about not having to work very hard</p>",
        "id": 243950987,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624644625
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/remedial.20education.20for.20Niko/near/243950979\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> do I want eyre? I care about how pretty things look when they print out</p>\n</blockquote>\n<p>if you want to control the format then you definitely want eyre</p>",
        "id": 243950993,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1624644629
    },
    {
        "content": "<p>this is for <a href=\"https://github.com/optopodi/optopodi/\">https://github.com/optopodi/optopodi/</a></p>",
        "id": 243951002,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624644636
    },
    {
        "content": "<p>unless you're happy with anyhow's defaults</p>",
        "id": 243951009,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1624644640
    },
    {
        "content": "<p>because anyhow isn't configurable</p>",
        "id": 243951014,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1624644643
    },
    {
        "content": "<p>probably I don't care that much now, but I might eventually care</p>",
        "id": 243951028,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624644651
    },
    {
        "content": "<p>does eyre support \"everything gets upcast to a single easy type\"?</p>",
        "id": 243951055,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624644669
    },
    {
        "content": "<p>if you want it to be easy and nice looking <a href=\"https://docs.rs/color-eyre/0.5.11/color_eyre/\">https://docs.rs/color-eyre/0.5.11/color_eyre/</a> is supposed to be a reasonable defaults for a fancy reporting hook</p>",
        "id": 243951061,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1624644673
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/remedial.20education.20for.20Niko/near/243951055\">said</a>:</p>\n<blockquote>\n<p>does eyre support \"everything gets upcast to a single easy type\"?</p>\n</blockquote>\n<p>not sure what you mean</p>",
        "id": 243951075,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1624644684
    },
    {
        "content": "<p><code>anyhow::Error</code> is very convenient</p>",
        "id": 243951095,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624644694
    },
    {
        "content": "<p>it supports pretty much everything anyhow does</p>",
        "id": 243951100,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1624644696
    },
    {
        "content": "<p>its a fork of anyhow</p>",
        "id": 243951102,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1624644698
    },
    {
        "content": "<p>got it</p>",
        "id": 243951115,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624644705
    },
    {
        "content": "<p>it even re-exports a lot of the renamed types with the original names</p>",
        "id": 243951120,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1624644710
    },
    {
        "content": "<p>so it should be pretty easy to drop in swap</p>",
        "id": 243951126,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1624644715
    },
    {
        "content": "<p>ok</p>",
        "id": 243951183,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624644729
    },
    {
        "content": "<p>I'll do that at some point then</p>",
        "id": 243951188,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624644733
    },
    {
        "content": "<p>sick :D</p>",
        "id": 243951193,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1624644737
    },
    {
        "content": "<p>I would like it if there were a way to get backtraces by default with zero effort on my part</p>",
        "id": 243951203,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624644746
    },
    {
        "content": "<p>(and then I can later add nice, user-understable context)</p>",
        "id": 243951218,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624644754
    },
    {
        "content": "<p>is that a thing?</p>",
        "id": 243951222,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624644758
    },
    {
        "content": "<p>stable-eyre is the \"just give me backtraces and nothing else\" hook i made</p>",
        "id": 243951241,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1624644772
    },
    {
        "content": "<p><a href=\"https://docs.rs/stable-eyre/0.2.2/stable_eyre/\">https://docs.rs/stable-eyre/0.2.2/stable_eyre/</a></p>",
        "id": 243951267,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1624644787
    },
    {
        "content": "<p>ack</p>",
        "id": 243951275,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624644792
    },
    {
        "content": "<p>otherwise same format as default</p>",
        "id": 243951279,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1624644793
    },
    {
        "content": "<p>that sounds useful</p>",
        "id": 243951281,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624644794
    },
    {
        "content": "<p>uses backtrace-rs so it works on stable, but you can't extract it through the Error trait for obvious reasons</p>",
        "id": 243951310,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1624644813
    }
]