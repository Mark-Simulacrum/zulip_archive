[
    {
        "content": "<p>If anyone has additional bandwidth, I could use a second pair of eyes on the frames iterator PR I'm working through: <a href=\"https://github.com/rust-lang/rust/pull/78299\">https://github.com/rust-lang/rust/pull/78299</a></p>",
        "id": 220401404,
        "sender_full_name": "Sean Chen (he/him)",
        "timestamp": 1608311941
    },
    {
        "content": "<p>I'm currently trying to implement <code>Iterator</code> for the <code>Frames</code> type, but I'm running into an issue with how I'm specifying the <code>Iterator</code>'s <code>type</code>.</p>",
        "id": 220401499,
        "sender_full_name": "Sean Chen (he/him)",
        "timestamp": 1608311987
    },
    {
        "content": "<p>Here's the actual error I'm getting: <a href=\"/user_uploads/4715/C-Uj8aMp5LNELK3BGStaG4bM/Screen-Shot-2020-12-18-at-11.21.36-AM.png\">Screen-Shot-2020-12-18-at-11.21.36-AM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/C-Uj8aMp5LNELK3BGStaG4bM/Screen-Shot-2020-12-18-at-11.21.36-AM.png\" title=\"Screen-Shot-2020-12-18-at-11.21.36-AM.png\"><img src=\"/user_uploads/4715/C-Uj8aMp5LNELK3BGStaG4bM/Screen-Shot-2020-12-18-at-11.21.36-AM.png\"></a></div>",
        "id": 220401908,
        "sender_full_name": "Sean Chen (he/him)",
        "timestamp": 1608312179
    },
    {
        "content": "<p>I'm confused why the compiler thinks this is specialized</p>",
        "id": 220402539,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608312478
    },
    {
        "content": "<p>is there more to the error?</p>",
        "id": 220402545,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608312481
    },
    {
        "content": "<p>oh you specified Item twice</p>",
        "id": 220402655,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608312528
    },
    {
        "content": "<p>you only need to specify it for Iterator, not IntoITerator, I think</p>",
        "id": 220402672,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608312536
    },
    {
        "content": "<p>Hm, I still get a similar error, it's just now pointing at the <code>type IntoIter</code> declaration: <a href=\"/user_uploads/4715/S5AimlxjJk0-JpM0hsFHwgh3/Screen-Shot-2020-12-18-at-1.48.36-PM.png\">Screen-Shot-2020-12-18-at-1.48.36-PM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/S5AimlxjJk0-JpM0hsFHwgh3/Screen-Shot-2020-12-18-at-1.48.36-PM.png\" title=\"Screen-Shot-2020-12-18-at-1.48.36-PM.png\"><img src=\"/user_uploads/4715/S5AimlxjJk0-JpM0hsFHwgh3/Screen-Shot-2020-12-18-at-1.48.36-PM.png\"></a></div>",
        "id": 220420237,
        "sender_full_name": "Sean Chen (he/him)",
        "timestamp": 1608321005
    },
    {
        "content": "<p>Even if I remove that line, it still complains about the same thing.</p>",
        "id": 220420263,
        "sender_full_name": "Sean Chen (he/him)",
        "timestamp": 1608321023
    },
    {
        "content": "<p>anything that is an iterator is also an <code>IntoIterator</code>: <a href=\"https://doc.rust-lang.org/stable/core/iter/trait.IntoIterator.html#impl-IntoIterator-8\">https://doc.rust-lang.org/stable/core/iter/trait.IntoIterator.html#impl-IntoIterator-8</a></p>",
        "id": 220421520,
        "sender_full_name": "nagisa",
        "timestamp": 1608321693
    },
    {
        "content": "<p>So implementing both <code>Iterator</code> and <code>IntoIterator</code> would be specializing the linked impl.</p>",
        "id": 220421563,
        "sender_full_name": "nagisa",
        "timestamp": 1608321717
    },
    {
        "content": "<p>Ah, so just implementing <code>Iterator</code> is enough?</p>",
        "id": 220421663,
        "sender_full_name": "Sean Chen (he/him)",
        "timestamp": 1608321754
    },
    {
        "content": "<p>Depends on what you're looking to achieve. I've no context here.</p>",
        "id": 220421738,
        "sender_full_name": "nagisa",
        "timestamp": 1608321791
    },
    {
        "content": "<p>It is plausible that you might want <code>IntoIterator</code> and not <code>Iterator</code> directly (much like vector or slice don't implement <code>Iterator</code> directly)</p>",
        "id": 220421784,
        "sender_full_name": "nagisa",
        "timestamp": 1608321821
    },
    {
        "content": "<p>my guess is that this is the type returned by the <code>frames</code> fn, which is supposed to be an <code>Iterator</code> already</p>",
        "id": 220421895,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1608321864
    },
    {
        "content": "<p>let me double check that vec::Iter is an iterator and not intoiter</p>",
        "id": 220421936,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1608321883
    },
    {
        "content": "<p>ye</p>",
        "id": 220421983,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1608321914
    },
    {
        "content": "<p>The <code>Frames</code> type wraps a <code>Frames::inner</code> field, which is what is holding the <code>Vec&lt;BacktraceFrame&gt;</code>s</p>",
        "id": 220422013,
        "sender_full_name": "Sean Chen (he/him)",
        "timestamp": 1608321932
    },
    {
        "content": "<p>hmmm</p>",
        "id": 220422086,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1608321963
    },
    {
        "content": "<p>So I thought I would need to implement <code>Iterator</code> for the <code>Frames</code> type to expose the <code>Vec&lt;BacktraceFrame&gt;</code>s as an iterator.</p>",
        "id": 220422116,
        "sender_full_name": "Sean Chen (he/him)",
        "timestamp": 1608321970
    },
    {
        "content": "<p>aah you implemented Iterator as just pop</p>",
        "id": 220422138,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1608321981
    },
    {
        "content": "<p>Yea, I'm also now sure popping is what we want here to yield the frames in the desired order.</p>",
        "id": 220422180,
        "sender_full_name": "Sean Chen (he/him)",
        "timestamp": 1608322001
    },
    {
        "content": "<p>I'm assuming that is fine</p>",
        "id": 220422183,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1608322003
    },
    {
        "content": "<p>I feel like a <code>VecDeque</code> and popping from the front would make more sense</p>",
        "id": 220422217,
        "sender_full_name": "Sean Chen (he/him)",
        "timestamp": 1608322025
    },
    {
        "content": "<p>But I'm not sure</p>",
        "id": 220422231,
        "sender_full_name": "Sean Chen (he/him)",
        "timestamp": 1608322032
    },
    {
        "content": "<p>Is anyone familiar with <code>std::lazy::SyncLazy</code>? <span class=\"user-mention\" data-user-id=\"204346\">@Ashley Mannix</span> suggested that it be used to replace the <code>Mutex</code> around captured backtraces:</p>\n<div class=\"codehilite\"><pre><span></span><code>// in backtrace.rs\nenum Inner {\n  Unsupported,\n  Disabled,\n  Captured(Mutex&lt;Capture&gt;),\n}\n</code></pre></div>\n<p>The <code>Captured(Mutex&lt;Capture&gt;)</code> would be changed to <code>Captured(SyncLazy&lt;Capture&gt;)</code>. </p>\n<p>Is <code>SyncLazy</code> basically a lazy <code>Mutex</code>? I'm also not really sure how to use its API to replace the calls to <code>capture.lock()</code> where we acquire the <code>Capture</code> inside the <code>Mutex</code>. Anyone have insight into this?</p>",
        "id": 221708374,
        "sender_full_name": "Sean Chen (he/him)",
        "timestamp": 1609884482
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300743\">@Sean Chen</span> im guessing its like a mutex that doesnt have an <code>&amp;mut T</code> api</p>",
        "id": 221708434,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1609884514
    },
    {
        "content": "<p>so it can only either be initialized or accessed</p>",
        "id": 221708440,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1609884521
    },
    {
        "content": "<p>i'm not positive but I think that's the new <code>once_cell</code> built into std</p>",
        "id": 221708484,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1609884549
    },
    {
        "content": "<p>Oh, so we'd replace any <code>captured.lock()</code> calls with calls to the <code>SyncLazy::force</code> method to access the type inside?</p>",
        "id": 221708622,
        "sender_full_name": "Sean Chen (he/him)",
        "timestamp": 1609884629
    },
    {
        "content": "<p>not sure</p>",
        "id": 221708657,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1609884641
    },
    {
        "content": "<p>i'll have to look at the API, in a meeting atm</p>",
        "id": 221708683,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1609884647
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300743\">@Sean Chen</span> that, or just dereference it; it Derefs to Capture</p>",
        "id": 221708787,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609884671
    },
    {
        "content": "<p>looks like yea</p>",
        "id": 221708845,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1609884693
    },
    {
        "content": "<p>oh</p>",
        "id": 221708849,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1609884700
    },
    {
        "content": "<p>^</p>",
        "id": 221708851,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1609884701
    },
    {
        "content": "<p>you can sort of imagine it as a <code>RwLock</code> that's specialized to only ever have one write</p>",
        "id": 221709409,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609885048
    },
    {
        "content": "<p>Ah yeh, that suggestion was based on an assumption that we only lock the capture to do some kind of deferred initialization work. With <code>SyncLazy</code> we can still initialize lazily, but also deref as normal and return borrows to those frames without needing any locks. It would avoid having to do any cloning</p>",
        "id": 221711012,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1609886123
    },
    {
        "content": "<p>But I should look at the backtrace impl properly to see if that’s actually the case 🙂</p>",
        "id": 221711038,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1609886145
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204346\">@Ashley Mannix</span> i moved your message to a diff topic</p>",
        "id": 221711097,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1609886166
    },
    {
        "content": "<p>assuming it was meant for this one</p>",
        "id": 221711139,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1609886188
    },
    {
        "content": "<p>Yep thanks <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span><span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span> I’m on mobile and thought I was in the right one</p>",
        "id": 221711275,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1609886297
    },
    {
        "content": "<p>Ok, so we lock the capture to call the <code>resolve</code> method. It might be slightly tricky to make the current <code>SyncLazy</code> API do that, but it should be possible with a regular old <code>sync::Once</code>. <span class=\"user-mention\" data-user-id=\"300743\">@Sean Chen</span> I can put together a quick patch now to show you what I mean if you like <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 221711997,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1609886800
    },
    {
        "content": "<p>That would be helpful <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 221712146,
        "sender_full_name": "Sean Chen (he/him)",
        "timestamp": 1609886885
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300743\">@Sean Chen</span> I ended up opening <a href=\"https://github.com/rust-lang/rust/pull/80736\">https://github.com/rust-lang/rust/pull/80736</a> <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 221720245,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1609892441
    },
    {
        "content": "<p>So I made the classic mistake of not implementing the changes in a feature branch separate from my local master branch. I <code>git pull</code>ed into my local master (where I've been making all my changes as part of this PR) to merge in <span class=\"user-mention\" data-user-id=\"204346\">@Ashley Mannix</span>'s changes and fixed a merge conflict. </p>\n<p>Am I good to push these changes to my fork? Or do I need to rebase against upstream master?</p>",
        "id": 222638044,
        "sender_full_name": "Sean Chen (he/him)",
        "timestamp": 1610568445
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300743\">@Sean Chen</span> merging and rebasing are normally second, I would be hesistant to do both</p>",
        "id": 222641256,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610569940
    },
    {
        "content": "<p>Hm, so what should I be doing instead? I want to incorporate Ashley's merged PR into mine, but I also am working from my fork's <code>master</code> branch instead of in a separate feature branch.</p>",
        "id": 222641866,
        "sender_full_name": "Sean Chen (he/him)",
        "timestamp": 1610570198
    },
    {
        "content": "<p>I am confused what your git state looks like</p>",
        "id": 222641956,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610570239
    },
    {
        "content": "<p>does <code>git push</code> work?</p>",
        "id": 222641971,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610570245
    },
    {
        "content": "<p>Yes, but I need to merge in all of the upstream changes that have taken place since my fork (which has been a while). I guess I'm under the impression that I shouldn't be merging in all of those changes into my PR, but perhaps that's a faulty assumption.</p>",
        "id": 222642367,
        "sender_full_name": "Sean Chen (he/him)",
        "timestamp": 1610570425
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300743\">@Sean Chen</span> if they're already in the master branch on the <code>rust-lang/rust</code> repo then it shouldn't matter</p>",
        "id": 222642686,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610570592
    },
    {
        "content": "<p>So.. this is fine? <a href=\"https://github.com/rust-lang/rust/pull/78299/commits/43b9783292af62b5b60e323f5939b9c9a7e9801c\">https://github.com/rust-lang/rust/pull/78299/commits/43b9783292af62b5b60e323f5939b9c9a7e9801c</a><br>\n<span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 222642977,
        "sender_full_name": "Sean Chen (he/him)",
        "timestamp": 1610570747
    },
    {
        "content": "<p>o.o</p>",
        "id": 222643217,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610570860
    },
    {
        "content": "<p>maybe not</p>",
        "id": 222643227,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610570864
    },
    {
        "content": "<p>I'd not have expected the diff to change once you updated your branch from master</p>",
        "id": 222643242,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610570877
    },
    {
        "content": "<p>Yea, I figured <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 222643247,
        "sender_full_name": "Sean Chen (he/him)",
        "timestamp": 1610570878
    },
    {
        "content": "<p>yea i have no idea what that diff means</p>",
        "id": 222643384,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610570934
    },
    {
        "content": "<p>oh its submodules</p>",
        "id": 222643397,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610570941
    },
    {
        "content": "<p>confused</p>",
        "id": 222643439,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610570971
    },
    {
        "content": "<p>Frankly, I think the cleanest way to resolve this is to just close this PR and re-open a new one. There's no real need to keep any of the history pre-merging in Ashley's PR.</p>",
        "id": 222643462,
        "sender_full_name": "Sean Chen (he/him)",
        "timestamp": 1610570983
    },
    {
        "content": "<p>you shouldn't need to close the PR to do that</p>",
        "id": 222643542,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610571012
    },
    {
        "content": "<p>you can always just squash and cleanup the history then force push your branch</p>",
        "id": 222643558,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610571021
    },
    {
        "content": "<p>So combine every commit I've made as part of this PR into a single one? What do you mean by \"cleanup the history\"?</p>",
        "id": 222644068,
        "sender_full_name": "Sean Chen (he/him)",
        "timestamp": 1610571278
    },
    {
        "content": "<p>Or by squash do you mean get rid of every commit I've made as part of this PR?</p>",
        "id": 222649239,
        "sender_full_name": "Sean Chen (he/him)",
        "timestamp": 1610573784
    },
    {
        "content": "<p>oh, that's what I thought you meant by \"not keep any history pre-merging ashley's PR\"</p>",
        "id": 222649295,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610573823
    },
    {
        "content": "<p>Sure, that works</p>",
        "id": 222649357,
        "sender_full_name": "Sean Chen (he/him)",
        "timestamp": 1610573860
    },
    {
        "content": "<p>When doing the clean up, should I only be removing commits I made from my local commit history, or just get rid of all of them since my first commit?</p>",
        "id": 222652110,
        "sender_full_name": "Sean Chen (he/him)",
        "timestamp": 1610575209
    },
    {
        "content": "<p>not sure what you mean</p>",
        "id": 222652810,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610575521
    },
    {
        "content": "<blockquote>\n<p>commits I made from my local commit history</p>\n</blockquote>",
        "id": 222652824,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610575529
    },
    {
        "content": "<p>the only other commit is the merge commit right?</p>",
        "id": 222652842,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610575540
    },
    {
        "content": "<p>Right, all the other commits that were merged in</p>",
        "id": 222652926,
        "sender_full_name": "Sean Chen (he/him)",
        "timestamp": 1610575578
    },
    {
        "content": "<p>what I'd do is back out the changes that you didnt make yourself including the merge PR</p>",
        "id": 222652955,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610575602
    },
    {
        "content": "<p>so its just your commits</p>",
        "id": 222652961,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610575605
    },
    {
        "content": "<p>then squash that down to 1 commit</p>",
        "id": 222652971,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610575612
    },
    {
        "content": "<p>then rebase that on master</p>",
        "id": 222652993,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610575625
    },
    {
        "content": "<p>has ashley's change landed on master</p>",
        "id": 222653131,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610575700
    },
    {
        "content": "<p>it has</p>",
        "id": 222653187,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610575754
    },
    {
        "content": "<p>yay</p>",
        "id": 222653189,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610575755
    },
    {
        "content": "<p>okay so yea</p>",
        "id": 222653190,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610575756
    },
    {
        "content": "<p>Another option if it gets too tangled could be to create a new temp branch from <code>master</code>, and cherry pick your commits onto it then force push it as your upstream branch. Submodules can be really nasty to work with... I always land in a mess with them <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 222658603,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1610578329
    },
    {
        "content": "<p>same</p>",
        "id": 222658646,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610578361
    },
    {
        "content": "<p>All right, Jane and I were just trying to work through my screw up, but to no avail. I'm gonna go with the nuclear option and close this PR and re-open a new one. I don't care to keep any of the history pre-Ashley's merged PR.</p>",
        "id": 222662261,
        "sender_full_name": "Sean Chen (he/him)",
        "timestamp": 1610580698
    },
    {
        "content": "<p>I don't think it was your screwup fwiw</p>",
        "id": 222662274,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610580709
    },
    {
        "content": "<p>its just git</p>",
        "id": 222662307,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610580723
    },
    {
        "content": "<p>combination of long lived branch, multiple merge commits, + submodules being updated between those merge commits</p>",
        "id": 222662334,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610580737
    },
    {
        "content": "<p>Haha, thanks for the sentiment, but I'm sure I had a part to play <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 222662335,
        "sender_full_name": "Sean Chen (he/him)",
        "timestamp": 1610580741
    },
    {
        "content": "<p>i mean, i have no idea what you should have done differently</p>",
        "id": 222662341,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610580750
    },
    {
        "content": "<p>maybe the rustc dev guide has suggestions</p>",
        "id": 222662362,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610580766
    },
    {
        "content": "<p>ill check</p>",
        "id": 222662367,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610580768
    },
    {
        "content": "<p>I think I should have rebased on top of Ashley's PR?</p>",
        "id": 222662383,
        "sender_full_name": "Sean Chen (he/him)",
        "timestamp": 1610580781
    },
    {
        "content": "<p><a href=\"https://rustc-dev-guide.rust-lang.org/git.html#quick-note-about-submodules\">https://rustc-dev-guide.rust-lang.org/git.html#quick-note-about-submodules</a></p>",
        "id": 222662443,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610580830
    },
    {
        "content": "<p>the \"if you run into an error like this you did nothing wrong\" bit at the end has me thinking you did nothing wrong</p>",
        "id": 222662521,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610580863
    },
    {
        "content": "<p>lolol</p>",
        "id": 222662529,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610580868
    },
    {
        "content": "<p>apparently there's a work around here</p>",
        "id": 222662540,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610580881
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/77620#issuecomment-705228229\">https://github.com/rust-lang/rust/issues/77620#issuecomment-705228229</a></p>",
        "id": 222662544,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610580881
    },
    {
        "content": "<p>i have no idea what that does</p>",
        "id": 222662602,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610580895
    },
    {
        "content": "<p>spooky</p>",
        "id": 222662605,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610580896
    },
    {
        "content": "<p>So I needed to run this script: <code>git diff --name-only | while read dir; do cd $dir &amp;&amp; git checkout -f HEAD &amp;&amp; git clean -d -f &amp;&amp; cd -; done</code></p>",
        "id": 222662610,
        "sender_full_name": "Sean Chen (he/him)",
        "timestamp": 1610580900
    },
    {
        "content": "<p>not sure</p>",
        "id": 222662617,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610580905
    },
    {
        "content": "<p>but lets try</p>",
        "id": 222662623,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610580909
    },
    {
        "content": "<p>Haha, sure, why not. I'll try it and report back</p>",
        "id": 222662644,
        "sender_full_name": "Sean Chen (he/him)",
        "timestamp": 1610580925
    },
    {
        "content": "<p>try doing</p>",
        "id": 222662671,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610580950
    },
    {
        "content": "<p><code>git submodule update</code> first</p>",
        "id": 222662676,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610580954
    },
    {
        "content": "<p>bah</p>",
        "id": 222663052,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610581256
    },
    {
        "content": "<p>It doesn't seem to be doing anything</p>",
        "id": 222663054,
        "sender_full_name": "Sean Chen (he/him)",
        "timestamp": 1610581259
    },
    {
        "content": "<p>still not working when i try it</p>",
        "id": 222663055,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610581259
    },
    {
        "content": "<p>yea</p>",
        "id": 222663070,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610581273
    },
    {
        "content": "<p>just go ahead and remake the PR</p>",
        "id": 222663075,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610581278
    },
    {
        "content": "<p>it looks like they encourage always rebasing</p>",
        "id": 222663096,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610581299
    },
    {
        "content": "<p>so i guess in the future just avoid merge commits</p>",
        "id": 222663105,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610581305
    }
]