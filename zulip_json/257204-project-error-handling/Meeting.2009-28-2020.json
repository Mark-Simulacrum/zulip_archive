[
    {
        "content": "<p>Meeting thread</p>",
        "id": 211527352,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601316066
    },
    {
        "content": "<p>here are the minutes and the agenda for todays meeting <a href=\"https://hackmd.io/th5k9_pBRBGmpgnFWJzUHw?both\">https://hackmd.io/th5k9_pBRBGmpgnFWJzUHw?both</a></p>",
        "id": 211527401,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601316087
    },
    {
        "content": "<p>So I think the best place to start is probably with the first issue on the agenda, stabilizing Backtrace and moving std::error::Error to core</p>",
        "id": 211527559,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601316151
    },
    {
        "content": "<p>let me pull up the issue on it so ppl can get background</p>",
        "id": 211527574,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601316160
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/project-error-handling/issues/3\">https://github.com/rust-lang/project-error-handling/issues/3</a></p>",
        "id": 211527613,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601316180
    },
    {
        "content": "<p>so to gist where this issue currently is, we need to prototype a solution for exposing <code>Backtrace</code> as a type in <code>core</code> with the interface it currently provides in <code>std</code></p>",
        "id": 211527689,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601316233
    },
    {
        "content": "<p>and I think the biggest question right now is</p>\n<p>should we do a trait object based solution internally with an unstable <code>Backtrace</code> trait in core and a stable <code>Backtrace</code> type in core or should we use global hooks like <code>panic_impl</code></p>",
        "id": 211527840,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601316313
    },
    {
        "content": "<p>the bottom of the issue has some analysis of the tradeoffs</p>",
        "id": 211527877,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601316337
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/project-error-handling/issues/3#issuecomment-699525989\">https://github.com/rust-lang/project-error-handling/issues/3#issuecomment-699525989</a></p>",
        "id": 211527905,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601316357
    },
    {
        "content": "<p>You favor global hooks?</p>",
        "id": 211527963,
        "sender_full_name": "oliver",
        "timestamp": 1601316373
    },
    {
        "content": "<p>I haven't really made up my mind personally</p>",
        "id": 211527982,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601316383
    },
    {
        "content": "<p>global hooks look like more work to use, and then if we do go that route theres questions about how that should be accomplished</p>",
        "id": 211528006,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601316398
    },
    {
        "content": "<p>because the existing global hooks are all kinda ad-hoc and magical in different ways</p>",
        "id": 211528024,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601316408
    },
    {
        "content": "<p>Does asking for a prototype generally mean producing an RFC?</p>",
        "id": 211528061,
        "sender_full_name": "oliver",
        "timestamp": 1601316438
    },
    {
        "content": "<p>but I can't think of any reason why we'd want to be able to support multiple types of Backtraces being represented via the <code>core::backtrace::Backtrace</code> type</p>",
        "id": 211528065,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601316443
    },
    {
        "content": "<p>I don't think we need an RFC at this stage</p>",
        "id": 211528084,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601316457
    },
    {
        "content": "<p>tho we might need one to merge the changes</p>",
        "id": 211528090,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601316463
    },
    {
        "content": "<p>but the main goal of the prototype is to prove we won't back ourselves into a corner if we stabilize <code>fn backtrace</code> on <code>Error</code></p>",
        "id": 211528156,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601316484
    },
    {
        "content": "<p>avoiding more global hooks is probably good. if the point is getting it into core, that's one more thing that <em>every</em> no_std user would potentially have to worry about even if they don't use backtracing.</p>",
        "id": 211528189,
        "sender_full_name": "Lokathor",
        "timestamp": 1601316505
    },
    {
        "content": "<p>ah yea thats another thing</p>",
        "id": 211528213,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601316520
    },
    {
        "content": "<p>so I don't think we should expose the need to implement those hooks to no_std users</p>",
        "id": 211528230,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601316533
    },
    {
        "content": "<p>like with <code>#[panic_handler]</code></p>",
        "id": 211528241,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601316540
    },
    {
        "content": "<p>so we'd need to provide a default implementation of those hooks in <code>no_std</code></p>",
        "id": 211528258,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601316548
    },
    {
        "content": "<p>and I don't know of any examples of that already</p>",
        "id": 211528283,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601316560
    },
    {
        "content": "<p>so that might be new features we have to add to the compiler</p>",
        "id": 211528296,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601316568
    },
    {
        "content": "<p>the advantage of the hooks though is that they're going to optimize better</p>",
        "id": 211528319,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601316585
    },
    {
        "content": "<p>because there is no virtual function calls</p>",
        "id": 211528326,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601316591
    },
    {
        "content": "<p>and I don't think that virtual function calls are really justified for the Backtrace type</p>",
        "id": 211528386,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601316605
    },
    {
        "content": "<p>which is what makes me feel like hooks might be the right solution, tho I think the language needs better support for these kinds of hooks</p>",
        "id": 211528421,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601316622
    },
    {
        "content": "<p>i made a t-lang thread about it</p>",
        "id": 211528429,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601316627
    },
    {
        "content": "<p>Backtraces arenâ€™t typically on the hot path though, right?</p>",
        "id": 211528444,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1601316636
    },
    {
        "content": "<p><a href=\"#narrow/stream/213817-t-lang/topic/global.20hooks.20and.20their.20relation.20to.20traits.20and.20vtables/near/211372160\">https://rust-lang.zulipchat.com/#narrow/stream/213817-t-lang/topic/global.20hooks.20and.20their.20relation.20to.20traits.20and.20vtables/near/211372160</a></p>",
        "id": 211528458,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601316646
    },
    {
        "content": "<p>thats true <span class=\"user-mention\" data-user-id=\"204346\">@Ashley Mannix</span></p>",
        "id": 211528475,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601316650
    },
    {
        "content": "<p>yeah they're usually on the \"i'm about to kill this thread\" path</p>",
        "id": 211528486,
        "sender_full_name": "Lokathor",
        "timestamp": 1601316658
    },
    {
        "content": "<p>tho if you put the backtrace on the stack it would increase the size of your errors</p>",
        "id": 211528490,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601316660
    },
    {
        "content": "<p>because the <code>Backtrace</code> type would be two words instead of one presumably</p>",
        "id": 211528515,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601316670
    },
    {
        "content": "<p>and that could affect the happy path</p>",
        "id": 211528527,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601316679
    },
    {
        "content": "<p>if it grows the size of your Results and therefore your stack frames</p>",
        "id": 211528546,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601316692
    },
    {
        "content": "<p>if you keep it to two words or less you can usually stay happy, but that'd for like the full Result&lt;T,E&gt;</p>",
        "id": 211528565,
        "sender_full_name": "Lokathor",
        "timestamp": 1601316703
    },
    {
        "content": "<p>that could be fixed with more indirection though</p>",
        "id": 211528568,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601316707
    },
    {
        "content": "<p>if we wanted to put it behind a second Box</p>",
        "id": 211528574,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601316713
    },
    {
        "content": "<p>but then actually</p>",
        "id": 211528656,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601316741
    },
    {
        "content": "<p>Hmm, yeh I was going to say I think the usual solution to that is to box it all up <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 211528663,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1601316745
    },
    {
        "content": "<p>core wouldn't be able to put a second box there probably</p>",
        "id": 211528667,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601316747
    },
    {
        "content": "<p>i guess maybe with <code>BoxMeUp</code></p>",
        "id": 211528678,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601316753
    },
    {
        "content": "<p>so yea this is where I'm stuck right now</p>",
        "id": 211528724,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601316787
    },
    {
        "content": "<p>not sure what choice to make</p>",
        "id": 211528735,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601316791
    },
    {
        "content": "<p>:/</p>",
        "id": 211528737,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601316792
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204346\">@Ashley Mannix</span> <span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> it sounds like yall think a Trait based solution would be fine</p>",
        "id": 211528808,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601316840
    },
    {
        "content": "<p>In core, what i'd want myself.. so i use core for making GBA games, and the emulator i test in has a fake output stream a game can use. So what I'd want as a user is a way to have some sort of backtrace that i immediately point at the output stream and get formatted to there. And I otherwise never want to pass it around or keep it in any way.</p>",
        "id": 211528880,
        "sender_full_name": "Lokathor",
        "timestamp": 1601316862
    },
    {
        "content": "<p><em>really wishes boats was participating because they did the legwork on the backtrace issue and seemed opposed to the trait based solutions</em></p>",
        "id": 211528886,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601316867
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> so you'd never use the <code>fn backtrace</code> method on the error trait probably?</p>",
        "id": 211528993,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601316933
    },
    {
        "content": "<p>It sounds like the trait-based approach has fewer magic compiler pieces and so could be easier to put together?</p>",
        "id": 211529077,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1601316964
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"204346\">Ashley Mannix</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/Meeting.20-.202020-09-28/near/211529077\">said</a>:</p>\n<blockquote>\n<p>It sounds like the trait-based approach has fewer magic compiler pieces and so could be easier to put together?</p>\n</blockquote>\n<p>I believe so, yes</p>",
        "id": 211529097,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601316976
    },
    {
        "content": "<p>Could we imagine anybody besides <code>std</code> wanting to provide the capturing implementation?</p>",
        "id": 211529248,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1601317064
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> yeah for core I think that you'd probably want something more like <code>write_backtrace_to(&amp;mut dyn FormatterThing) -&gt; Result&lt;(),FormatterThing::Error&gt;</code></p>",
        "id": 211529311,
        "sender_full_name": "Lokathor",
        "timestamp": 1601317088
    },
    {
        "content": "<p>in a general sense yes definitely, tho I don't think we have any concrete reason why they'd need to be able to have that implementation be the backing for <code>core::backtrace::Backtrace</code> rather than their own new type</p>",
        "id": 211529342,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601317108
    },
    {
        "content": "<p>that's <em>if</em> that would help avoid the boxing difficulty and make it simpler to design</p>",
        "id": 211529355,
        "sender_full_name": "Lokathor",
        "timestamp": 1601317113
    },
    {
        "content": "<p>but theres <code>tracing::SpanTrace</code> which is essentially a Backtrace</p>",
        "id": 211529368,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601317120
    },
    {
        "content": "<p>and I've also seen ppl interested in backtraces that capture wasm / python frames</p>",
        "id": 211529395,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601317129
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/Meeting.20-.202020-09-28/near/211529311\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> yeah for core I think that you'd probably want something more like <code>write_backtrace_to(&amp;mut dyn FormatterThing) -&gt; Result&lt;(),FormatterThing::Error&gt;</code></p>\n</blockquote>\n<p>that might be a good API to eventually propose on <code>Backtrace</code></p>",
        "id": 211529442,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601317150
    },
    {
        "content": "<p>maybe as an inherent function with no self parameter</p>",
        "id": 211529461,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601317161
    },
    {
        "content": "<p>Yeah I can think of a few folks from the Community Discord who would want to capture a backtrace outside of std</p>",
        "id": 211529494,
        "sender_full_name": "Lokathor",
        "timestamp": 1601317178
    },
    {
        "content": "<p>for me tho I think those ppls needs will already be met by <a href=\"https://github.com/rust-lang/rfcs/pull/2895\">https://github.com/rust-lang/rfcs/pull/2895</a></p>",
        "id": 211529580,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601317206
    },
    {
        "content": "<p>which I wrote so I could integrate <code>SpanTrace</code> with the error trait</p>",
        "id": 211529601,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601317216
    },
    {
        "content": "<p>as long as you have a way to access the different types of backtraces from <code>dyn Error</code> objects I see no reason why they'd need to integrate with the <code>core::backtrace::Backtrace</code> type</p>",
        "id": 211529674,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601317260
    },
    {
        "content": "<p>It does seem that inherent functions avoid Boats' concern in the linked comment.</p>",
        "id": 211529748,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1601317297
    },
    {
        "content": "<p>and in particular you said <code>no_std</code> ppl are more interested in formatting backtraces immediately than they are in carrying them around in <code>Error</code> types and later accessing them from type erased objects</p>",
        "id": 211529756,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601317304
    },
    {
        "content": "<p>Was it backtracing which brought up the \"we might need to merge core/alloc/std into a single crate sooner than expected\" subject i recall from the other day?</p>",
        "id": 211529784,
        "sender_full_name": "Lokathor",
        "timestamp": 1601317320
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120076\">BatmanAoD (Kyle Strand)</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/Meeting.20-.202020-09-28/near/211529748\">said</a>:</p>\n<blockquote>\n<p>It does seem that inherent functions avoid Boats' concern in the linked comment.</p>\n</blockquote>\n<p>inherent functions as in the direct fmting stuff <span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> is talking about?</p>",
        "id": 211529844,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601317330
    },
    {
        "content": "<p>kinda <span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span></p>",
        "id": 211529885,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601317353
    },
    {
        "content": "<p>this backtrace discussion is ultimately about moving <code>Error</code> to core</p>",
        "id": 211529905,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601317363
    },
    {
        "content": "<p>and there are other issues that are already present that we have to deal with</p>",
        "id": 211529939,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601317377
    },
    {
        "content": "<p>Yes, though Boats' specific example was indexing on frames.</p>",
        "id": 211529940,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1601317378
    },
    {
        "content": "<p>and I think solving those requires merging core and std</p>",
        "id": 211529969,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601317394
    },
    {
        "content": "<p><code>core::io</code> when :/</p>",
        "id": 211529981,
        "sender_full_name": "Lokathor",
        "timestamp": 1601317403
    },
    {
        "content": "<p>but we still want to be able to use the <code>Error</code> trait when we compile std with no-alloc</p>",
        "id": 211529999,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601317411
    },
    {
        "content": "<p>so the Backtrace interface still needs to be something that is completely compatible with the current core</p>",
        "id": 211530031,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601317427
    },
    {
        "content": "<p>ah, so no matter what we need a non-allocating Error</p>",
        "id": 211530037,
        "sender_full_name": "Lokathor",
        "timestamp": 1601317429
    },
    {
        "content": "<p>yea</p>",
        "id": 211530056,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601317440
    },
    {
        "content": "<p>making a <code>core::io::Error</code> is going to be real hard for that same reason<br>\nt</p>",
        "id": 211530110,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601317455
    },
    {
        "content": "<p>that would be one hell of a hacky error type</p>",
        "id": 211530113,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601317460
    },
    {
        "content": "<p><em>not convinced it really can be done</em></p>",
        "id": 211530143,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601317484
    },
    {
        "content": "<p>i suspect it'd wrap an error code u32 newtype</p>",
        "id": 211530156,
        "sender_full_name": "Lokathor",
        "timestamp": 1601317496
    },
    {
        "content": "<p>definitely down to try later tho once we've sorted the error trait stuff</p>",
        "id": 211530164,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601317497
    },
    {
        "content": "<p>it has a variant that stores a <code>Box&lt;dyn Error&gt;</code></p>",
        "id": 211530199,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601317517
    },
    {
        "content": "<p>or maybe it doesnt...</p>",
        "id": 211530225,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601317536
    },
    {
        "content": "<p>checking</p>",
        "id": 211530226,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601317538
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/stable/src/std/io/error.rs.html#67-71\">https://doc.rust-lang.org/stable/src/std/io/error.rs.html#67-71</a></p>",
        "id": 211530266,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601317552
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">enum</span> <span class=\"nc\">Repr</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Os</span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Simple</span><span class=\"p\">(</span><span class=\"n\">ErrorKind</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Custom</span><span class=\"p\">(</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">Custom</span><span class=\"o\">&gt;</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 211530288,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601317561
    },
    {
        "content": "<p>yuuup</p>",
        "id": 211530330,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601317565
    },
    {
        "content": "<p>sad days</p>",
        "id": 211530339,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601317567
    },
    {
        "content": "<p>As i've found myself saying lately, \"yay\"</p>",
        "id": 211530368,
        "sender_full_name": "Lokathor",
        "timestamp": 1601317580
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Custom</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">kind</span>: <span class=\"nc\">ErrorKind</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">error</span>: <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">error</span>::<span class=\"n\">Error</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Sync</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 211530370,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601317580
    },
    {
        "content": "<p>boxes boxes boxes boxes</p>",
        "id": 211530391,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601317590
    },
    {
        "content": "<p>That's all so very unfortunate. But also, fixable</p>",
        "id": 211530442,
        "sender_full_name": "Lokathor",
        "timestamp": 1601317618
    },
    {
        "content": "<p>oo</p>",
        "id": 211530469,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601317632
    },
    {
        "content": "<p>glad you think so</p>",
        "id": 211530474,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601317634
    },
    {
        "content": "<p>but I think this is getting off topic a bit for now</p>",
        "id": 211530483,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601317639
    },
    {
        "content": "<p>fixing io::Error has to come second so lets focus on the backtrace and trait</p>",
        "id": 211530496,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601317648
    },
    {
        "content": "<p>in core, instead of a box, you just get a <code>usize</code>, and whatever you want to do with a <code>usize</code> is up to you.</p>",
        "id": 211530518,
        "sender_full_name": "Lokathor",
        "timestamp": 1601317660
    },
    {
        "content": "<p>so it sounds like we think it would be best to just do a trait based impl for <code>Backtrace</code> in core?</p>",
        "id": 211530536,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601317669
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"204346\">@Ashley Mannix</span></p>",
        "id": 211530544,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601317674
    },
    {
        "content": "<p>seems that way</p>",
        "id": 211530622,
        "sender_full_name": "Lokathor",
        "timestamp": 1601317692
    },
    {
        "content": "<p>if yes then I'll plan on doing that impl as the next step</p>",
        "id": 211530637,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601317701
    },
    {
        "content": "<p>oh this isn't on the agenda but its something I wanted to ask</p>",
        "id": 211530682,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601317738
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204346\">@Ashley Mannix</span> should I be escalating issues from these meetings / this group to libs team meetings?</p>",
        "id": 211530722,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601317756
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> Thatâ€™s the private trait + public newtype wrapper?</p>",
        "id": 211530762,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1601317787
    },
    {
        "content": "<p>yea</p>",
        "id": 211530771,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601317791
    },
    {
        "content": "<p>it has to be a public trait I think</p>",
        "id": 211530778,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601317797
    },
    {
        "content": "<p>pub but unstable</p>",
        "id": 211530790,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601317802
    },
    {
        "content": "<p>then std would unstably implement it</p>",
        "id": 211530843,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601317813
    },
    {
        "content": "<p>wait</p>",
        "id": 211530850,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601317818
    },
    {
        "content": "<p>how would core then construct that?</p>",
        "id": 211530866,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601317826
    },
    {
        "content": "<p>So the newtype is the reporter?</p>",
        "id": 211530899,
        "sender_full_name": "oliver",
        "timestamp": 1601317842
    },
    {
        "content": "<p>not sure I'd use that term but sorta?</p>",
        "id": 211530925,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601317861
    },
    {
        "content": "<p>its like the interface that isn't subject to coherence rules</p>",
        "id": 211530936,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601317868
    },
    {
        "content": "<p>so we can add new methods without having to worry about breaking changes to downstream ppl who implemented the trait</p>",
        "id": 211530971,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601317885
    },
    {
        "content": "<p>Just for clarification: the main reason why backtrace hooks are worse solution than a <code>Backtrace</code> type in core is because it is more work for the compiler team?</p>",
        "id": 211531006,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1601317900
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> had an example of building it that appeared to work</p>",
        "id": 211531007,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1601317901
    },
    {
        "content": "<p>as opposed to having the error trait interface be <code>fn backtrace(&amp;self) -&gt; Option&lt;&amp;dyn Backtrace&gt;</code></p>",
        "id": 211531025,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601317911
    },
    {
        "content": "<p>aah yes</p>",
        "id": 211531070,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601317924
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"344196\">@Jakub Duchniewicz</span> and potentially more work for every single user too</p>",
        "id": 211531083,
        "sender_full_name": "Lokathor",
        "timestamp": 1601317925
    },
    {
        "content": "<p>so that does involve 1 hook still I think</p>",
        "id": 211531092,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601317929
    },
    {
        "content": "<p>mentioned ages ago but: there are plenty of prototype implementations that were deemed valuable enough to <em>try a quick round at implementing</em> and see how things go, in the compiler, before accepting the RFC. This is why the MCProcess also exists.</p>",
        "id": 211531110,
        "sender_full_name": "Jubilee",
        "timestamp": 1601317937
    },
    {
        "content": "<p>hmm<br>\ni guess the question is \"do we want lots of hooks or few\"</p>",
        "id": 211531128,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601317946
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/Meeting.20-.202020-09-28/near/211531110\">said</a>:</p>\n<blockquote>\n<p>mentioned ages ago but: there are plenty of prototype implementations that were deemed valuable enough to <em>try a quick round at implementing</em> and see how things go, in the compiler, before accepting the RFC. This is why the MCProcess also exists.</p>\n</blockquote>\n<p>I didn't know that</p>",
        "id": 211531160,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601317964
    },
    {
        "content": "<p>we should definitely try to find those impls</p>",
        "id": 211531184,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601317973
    },
    {
        "content": "<p>I mean in general regarding like, concepts, not necessarily specifically this.</p>",
        "id": 211531203,
        "sender_full_name": "Jubilee",
        "timestamp": 1601317987
    },
    {
        "content": "<p>(Yeah, never doing any work before an RFC is actually not the best way to discover good design, it turns out)</p>",
        "id": 211531204,
        "sender_full_name": "Lokathor",
        "timestamp": 1601317988
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/Meeting.20-.202020-09-28/near/211531083\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"344196\">Jakub Duchniewicz</span> and potentially more work for every single user too</p>\n</blockquote>\n<p>I think this is only the case if we ever let users implement these hooks</p>",
        "id": 211531230,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601318000
    },
    {
        "content": "<p>For instance, the Lazy types RFC.</p>",
        "id": 211531234,
        "sender_full_name": "Jubilee",
        "timestamp": 1601318003
    },
    {
        "content": "<p>which I expect to be years away</p>",
        "id": 211531239,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601318006
    },
    {
        "content": "<p>okay well I think we basically have a resolution</p>",
        "id": 211531356,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601318055
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> you spent some time trying to figure out how panic hooks are configured in core?</p>",
        "id": 211531360,
        "sender_full_name": "oliver",
        "timestamp": 1601318058
    },
    {
        "content": "<p>If <code>core</code> had an automatic hook, and it wasn't always removed by optimizations when unused, you'd spark a riot with the embedded people.</p>",
        "id": 211531367,
        "sender_full_name": "Lokathor",
        "timestamp": 1601318061
    },
    {
        "content": "<p>we need to do the impl, we will start with eddyb's impl and see how many hooks end up still being necessary</p>",
        "id": 211531385,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601318075
    },
    {
        "content": "<p>next agenda item?</p>",
        "id": 211531427,
        "sender_full_name": "Lokathor",
        "timestamp": 1601318094
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/Meeting.20-.202020-09-28/near/211531367\">said</a>:</p>\n<blockquote>\n<p>If <code>core</code> had an automatic hook, and it wasn't always removed by optimizations when unused, you'd spark a riot with the embedded people.</p>\n</blockquote>\n<p>I'll add this to the checklist of things to make sure we've verified for any proof of concept</p>",
        "id": 211531447,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601318106
    },
    {
        "content": "<p>okay so next</p>",
        "id": 211531471,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601318114
    },
    {
        "content": "<p>what RFCs should we be tracking and following up on?</p>",
        "id": 211531484,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601318123
    },
    {
        "content": "<p>so far I've added the backtrace RFC and the generic member access one I wrote</p>",
        "id": 211531506,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601318140
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/2895\">#2895</a></p>",
        "id": 211531518,
        "sender_full_name": "oliver",
        "timestamp": 1601318147
    },
    {
        "content": "<p>I think we area also tracking one related to linux error codes though</p>",
        "id": 211531525,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601318149
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/2504\">#2504</a></p>",
        "id": 211531589,
        "sender_full_name": "oliver",
        "timestamp": 1601318170
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281739\">@Oliver</span> is that the right issue number?</p>",
        "id": 211531592,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601318172
    },
    {
        "content": "<p>the first one</p>",
        "id": 211531597,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601318177
    },
    {
        "content": "<p>Maybe not</p>",
        "id": 211531599,
        "sender_full_name": "oliver",
        "timestamp": 1601318178
    },
    {
        "content": "<p>yea these are all linking to old rust-lang issues</p>",
        "id": 211531636,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601318194
    },
    {
        "content": "<p>lol</p>",
        "id": 211531639,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601318194
    },
    {
        "content": "<p><a href=\"https://github.com/yaahc/rfcs/blob/master/text/0000-dyn-error-generic-member-access.md\">https://github.com/yaahc/rfcs/blob/master/text/0000-dyn-error-generic-member-access.md</a></p>",
        "id": 211531645,
        "sender_full_name": "oliver",
        "timestamp": 1601318198
    },
    {
        "content": "<p>yup, so we got that one already</p>",
        "id": 211531653,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601318207
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rfcs/pull/2895\">https://github.com/rust-lang/rfcs/pull/2895</a> right issue, wrong repo</p>",
        "id": 211531659,
        "sender_full_name": "Lokathor",
        "timestamp": 1601318210
    },
    {
        "content": "<p>On the Libs project board we have 7 things with the error-handling tag: <a href=\"https://github.com/rust-lang/libs-team/projects/2#column-10224181\">https://github.com/rust-lang/libs-team/projects/2#column-10224181</a></p>",
        "id": 211531685,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1601318225
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rfcs/blob/master/text/2504-fix-error.md\">https://github.com/rust-lang/rfcs/blob/master/text/2504-fix-error.md</a></p>",
        "id": 211531698,
        "sender_full_name": "oliver",
        "timestamp": 1601318229
    },
    {
        "content": "<p>aah fantastic</p>",
        "id": 211531724,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601318244
    },
    {
        "content": "<p>now I'm wondering if it makes sense for us to have our own project board</p>",
        "id": 211531741,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601318255
    },
    {
        "content": "<p>or if we shoudl just focus on the libs team board</p>",
        "id": 211531757,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601318264
    },
    {
        "content": "<p>i set this up earlier</p>",
        "id": 211531763,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601318267
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/project-error-handling/projects/1\">https://github.com/rust-lang/project-error-handling/projects/1</a></p>",
        "id": 211531778,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601318276
    },
    {
        "content": "<p>its a bit more details because it has multiple columns related to error handling</p>",
        "id": 211531827,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601318285
    },
    {
        "content": "<p>but im not sure thats worth the cost of duplication</p>",
        "id": 211531841,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601318290
    },
    {
        "content": "<p>I'd like our own separate board, partly  so it's clearer which ones we're just focusing on.</p>",
        "id": 211531926,
        "sender_full_name": "Sean Chen (he/him)",
        "timestamp": 1601318349
    },
    {
        "content": "<p>the simd project group is likely to remove our own duplications in the next few days. it's just a hastle</p>",
        "id": 211531933,
        "sender_full_name": "Lokathor",
        "timestamp": 1601318356
    },
    {
        "content": "<p>I don't follow what the libs team is doing <span aria-label=\"innocent\" class=\"emoji emoji-1f607\" role=\"img\" title=\"innocent\">:innocent:</span></p>",
        "id": 211531959,
        "sender_full_name": "Sean Chen (he/him)",
        "timestamp": 1601318375
    },
    {
        "content": "<p>I think having a way to track status in a more fine-grained way might be worthwhile. The Libs board is intentionally not really status-focused</p>",
        "id": 211531986,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1601318394
    },
    {
        "content": "<p>lets try keeping ours as well, and we can put a link to the libs team board in our project description</p>",
        "id": 211531992,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601318397
    },
    {
        "content": "<p>Besides its use of status labels <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 211532067,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1601318415
    },
    {
        "content": "<p>can take care of that <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 211532085,
        "sender_full_name": "DPC",
        "timestamp": 1601318425
    },
    {
        "content": "<p>digging into this further</p>",
        "id": 211532091,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601318430
    },
    {
        "content": "<p>I'd love to get volunteers for each of these tracking issues to be people who are focused on resolving them</p>",
        "id": 211532108,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601318446
    },
    {
        "content": "<p>for example <a href=\"https://github.com/rust-lang/rust/issues/58520\">https://github.com/rust-lang/rust/issues/58520</a></p>",
        "id": 211532134,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601318460
    },
    {
        "content": "<p>I don't know what is holding this one up but I expect its not much</p>",
        "id": 211532153,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601318472
    },
    {
        "content": "<p>and I think it would be a good issue for just about any skill level</p>",
        "id": 211532178,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601318486
    },
    {
        "content": "<p>looks like its had some movement 2 weeks ago</p>",
        "id": 211532220,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601318514
    },
    {
        "content": "<p>maybe we should just make that part of the meeting agenda</p>",
        "id": 211532242,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601318523
    },
    {
        "content": "<p><em>status report on tracked issues</em></p>",
        "id": 211532284,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601318531
    },
    {
        "content": "<p>alright lets do that, and then when we identify stalled issues we can pick those up</p>",
        "id": 211532337,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601318569
    },
    {
        "content": "<p>If it's any skill level, I'll take a stab at it but I antiscipate I'll need some assistance.</p>",
        "id": 211532384,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1601318594
    },
    {
        "content": "<p>it seems like there's a lot to dig into here</p>",
        "id": 211532423,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601318613
    },
    {
        "content": "<p>It'll need some study</p>",
        "id": 211532451,
        "sender_full_name": "oliver",
        "timestamp": 1601318629
    },
    {
        "content": "<p>so lets not do that today, we can prep status reports on tracking issues for our next meeting</p>",
        "id": 211532457,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601318630
    },
    {
        "content": "<p>ill get volunteers or do the study myself before the next meeting</p>",
        "id": 211532503,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601318644
    },
    {
        "content": "<p>k</p>",
        "id": 211532523,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1601318647
    },
    {
        "content": "<p>so lets move onto the next agenda item</p>",
        "id": 211532530,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601318650
    },
    {
        "content": "<p>15 minutes left</p>",
        "id": 211532538,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601318652
    },
    {
        "content": "<blockquote>\n<p>Planning for \"Communicating best practices\"</p>\n</blockquote>",
        "id": 211532606,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601318682
    },
    {
        "content": "<p>So I think this basically boils down to we should setup an error handling group and start filling it out</p>",
        "id": 211532645,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601318702
    },
    {
        "content": "<p>I don't want to call it \"The Book of Error\" though because I'm worried that that may have not great overlap with \"The Book of Mormon\"</p>",
        "id": 211532695,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601318730
    },
    {
        "content": "<p>\"The Error Book\" is what I'd go with</p>",
        "id": 211532721,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601318750
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/Meeting.20-.202020-09-28/near/211532695\">said</a>:</p>\n<blockquote>\n<p>I don't want to call it \"The Book of Error\" though because I'm worried that that may have not great overlap with \"The Book of Mormon\"</p>\n</blockquote>\n<p>I thought that was the joke</p>",
        "id": 211532728,
        "sender_full_name": "Sean Chen (he/him)",
        "timestamp": 1601318754
    },
    {
        "content": "<p>i think it was, I just wanted to make sure the joke doesn't become reality</p>",
        "id": 211532792,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601318768
    },
    {
        "content": "<p>\"A Cargo Cultists Guide to Error Handling\" &lt;- keeping it spiritual :P</p>",
        "id": 211532840,
        "sender_full_name": "oliver",
        "timestamp": 1601318791
    },
    {
        "content": "<p>I think adding <code>Rust</code> to the book title will help with search results<br>\n<code>The Rust Error Book</code></p>",
        "id": 211532848,
        "sender_full_name": "must-compute",
        "timestamp": 1601318794
    },
    {
        "content": "<p>Are we for sure going with writing a book? Are there any other options on the table?</p>",
        "id": 211532852,
        "sender_full_name": "Sean Chen (he/him)",
        "timestamp": 1601318797
    },
    {
        "content": "<p>Error Handling In Rust?</p>",
        "id": 211532887,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1601318814
    },
    {
        "content": "<p>I haven't heard other proposals <span class=\"user-mention\" data-user-id=\"300743\">@Sean Chen</span></p>",
        "id": 211532892,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601318816
    },
    {
        "content": "<p>Book &lt;--&gt; Documentation</p>",
        "id": 211532910,
        "sender_full_name": "oliver",
        "timestamp": 1601318824
    },
    {
        "content": "<p>The book can be a detailed guide sort of thing, like the Rust CLI Book</p>",
        "id": 211532913,
        "sender_full_name": "must-compute",
        "timestamp": 1601318826
    },
    {
        "content": "<p>pretty interchangeable to me</p>",
        "id": 211532920,
        "sender_full_name": "oliver",
        "timestamp": 1601318830
    },
    {
        "content": "<p>I expect there will be quite a few different sections with different focuses</p>",
        "id": 211533002,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601318860
    },
    {
        "content": "<p>How about making it as user friendly as possible?</p>",
        "id": 211533009,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1601318862
    },
    {
        "content": "<p>we probably want to come up with some guidance on FFI error handling</p>",
        "id": 211533024,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601318870
    },
    {
        "content": "<p>because I've seen that as a repeat pain point that gets neglected a lot</p>",
        "id": 211533046,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601318878
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"344328\">Charles Ellis O'Riley Jr.</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/Meeting.20-.202020-09-28/near/211533009\">said</a>:</p>\n<blockquote>\n<p>How about making it as user friendly as possible?</p>\n</blockquote>\n<p>absolutely a goal</p>",
        "id": 211533103,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601318888
    },
    {
        "content": "<p>i titled it \"Book of Error\" as a pun on pain points of original error handling in rust <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 211533119,
        "sender_full_name": "DPC",
        "timestamp": 1601318895
    },
    {
        "content": "<p><code>Book&lt;Error&gt;</code></p>",
        "id": 211533166,
        "sender_full_name": "Lokathor",
        "timestamp": 1601318915
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120823\">DPC</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/Meeting.20-.202020-09-28/near/211533119\">said</a>:</p>\n<blockquote>\n<p>i titled it \"Book of Error\" as a pun on pain points of original error handling in rust :P</p>\n</blockquote>\n<p>aah, I see</p>",
        "id": 211533169,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601318916
    },
    {
        "content": "<p>lol <span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span></p>",
        "id": 211533193,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601318926
    },
    {
        "content": "<p>but does anyone have any alternate suggestions ?</p>",
        "id": 211533213,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601318935
    },
    {
        "content": "<p>So i presume we're talking about an <code>mdbook</code> \"book\"?</p>",
        "id": 211533231,
        "sender_full_name": "Lokathor",
        "timestamp": 1601318943
    },
    {
        "content": "<p>or do we all think just add a book section to the project repo and start filling it out?</p>",
        "id": 211533243,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601318948
    },
    {
        "content": "<p>yes <span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span></p>",
        "id": 211533264,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601318955
    },
    {
        "content": "<p>alrighty</p>",
        "id": 211533294,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601318971
    },
    {
        "content": "<p>yeah, mdbook on github pages is what rust users expect</p>",
        "id": 211533317,
        "sender_full_name": "Lokathor",
        "timestamp": 1601318984
    },
    {
        "content": "<p>so the last agenda item I don't think we have time to fully discuss today</p>",
        "id": 211533323,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601318986
    },
    {
        "content": "<p>ye let's carry it forward</p>",
        "id": 211533344,
        "sender_full_name": "DPC",
        "timestamp": 1601318996
    },
    {
        "content": "<p>so I'm not sure if we should get into it but lets go</p>",
        "id": 211533348,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601318998
    },
    {
        "content": "<p>we got 10 minutes i bet we can at least say something</p>",
        "id": 211533421,
        "sender_full_name": "Lokathor",
        "timestamp": 1601319020
    },
    {
        "content": "<blockquote>\n<p>How users expect error handling to be, As in, we take a leap into the future and assume all this was implemented into the language, then how it would potentially look</p>\n</blockquote>",
        "id": 211533430,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601319024
    },
    {
        "content": "<p>so this is essentially \"what is our vision for the future of error handling\"</p>",
        "id": 211533450,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601319035
    },
    {
        "content": "<p>and I have a pretty strong idea for where I want to see things go</p>",
        "id": 211533469,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601319043
    },
    {
        "content": "<p>I'd like to see error in core and the various interfaces that are unstable stabilized</p>",
        "id": 211533499,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601319054
    },
    {
        "content": "<p>I'd like an iterator API on backtrace</p>",
        "id": 211533508,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601319060
    },
    {
        "content": "<p>I want generic member access, possibly with a two way flow of information possible</p>",
        "id": 211533545,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601319074
    },
    {
        "content": "<p>I want to see error return traces</p>",
        "id": 211533554,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601319081
    },
    {
        "content": "<p>which would probably rely upon the generic member access features</p>",
        "id": 211533574,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601319091
    },
    {
        "content": "<p>The best way to write code to implement possible errors in Rust?</p>",
        "id": 211533593,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1601319102
    },
    {
        "content": "<p>This whole topic sounds like it's ripe to be published and communicated via a blog post or something.</p>",
        "id": 211533621,
        "sender_full_name": "Sean Chen (he/him)",
        "timestamp": 1601319116
    },
    {
        "content": "<p>I want to find some way to universally hook into all error reporting points for consistent error reporting across full applicatoins</p>",
        "id": 211533641,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601319122
    },
    {
        "content": "<p>so if you panic explicitly, via an unwrap, or report an error, it always uses the correct report format and preserves all context</p>",
        "id": 211533716,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601319143
    },
    {
        "content": "<p>I don't personally think its important that we get an error derive or a reporting type in std any time soon honestly</p>",
        "id": 211533772,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601319171
    },
    {
        "content": "<p>I'd like to see better handling of error enums, and then merging the error enum cases as you move up the call stack. Simply grabbing all the error info without the program reacting and moving forward in at least some of the potential error cases always seems poor.</p>",
        "id": 211533778,
        "sender_full_name": "Lokathor",
        "timestamp": 1601319173
    },
    {
        "content": "<p>I don't think that space has been explored well enough still</p>",
        "id": 211533799,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601319181
    },
    {
        "content": "<p>What about ways of recovering from recoverable errors? That seems to me like a pretty wide-open unaddressed area of concern.</p>",
        "id": 211533945,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1601319237
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120076\">BatmanAoD (Kyle Strand)</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/Meeting.20-.202020-09-28/near/211533945\">said</a>:</p>\n<blockquote>\n<p>What about ways of recovering from recoverable errors? That seems to me like a pretty wide-open unaddressed area of concern.</p>\n</blockquote>\n<p>what do you mean?</p>",
        "id": 211534010,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601319249
    },
    {
        "content": "<p>that's sorts what my error enums comment was about</p>",
        "id": 211534030,
        "sender_full_name": "Lokathor",
        "timestamp": 1601319257
    },
    {
        "content": "<p>I'd think that <code>match</code> and <code>downcast</code> pretty thoroughly cover reacting (to recover) to recoverable errors</p>",
        "id": 211534088,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601319281
    },
    {
        "content": "<p>well one thing is that the best code to react to an error doesn't always exist at the error's level.</p>",
        "id": 211534171,
        "sender_full_name": "Lokathor",
        "timestamp": 1601319319
    },
    {
        "content": "<p>Right</p>",
        "id": 211534182,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1601319323
    },
    {
        "content": "<p>_5 mins remaining_</p>",
        "id": 211534233,
        "sender_full_name": "DPC",
        "timestamp": 1601319343
    },
    {
        "content": "<p>if the user opens a PNG, and it's corrupted, the PNG parser doesn't know how to open a message box to ask the users to continue anyway or not</p>",
        "id": 211534245,
        "sender_full_name": "Lokathor",
        "timestamp": 1601319347
    },
    {
        "content": "<p>And I agree the enum-convergence as errors propogate up-stack is related</p>",
        "id": 211534247,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1601319348
    },
    {
        "content": "<p>I'd want to see us publish an The Rust Error Book, and I'd like to see us potentially contribute to <code>The Book</code> to make its error handling recommendations consistent with our final recommendations</p>",
        "id": 211534261,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601319355
    },
    {
        "content": "<p>Wouldn't it make sense to propagate that error, then?</p>",
        "id": 211534351,
        "sender_full_name": "Jubilee",
        "timestamp": 1601319391
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/Meeting.20-.202020-09-28/near/211534245\">said</a>:</p>\n<blockquote>\n<p>if the user opens a PNG, and it's corrupted, the PNG parser doesn't know how to open a message box to ask the users to continue anyway or not</p>\n</blockquote>\n<p>can you create an issue for this? seems like it might be a good discussion topic to track</p>",
        "id": 211534353,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601319394
    },
    {
        "content": "<p>uh, sure</p>",
        "id": 211534403,
        "sender_full_name": "Lokathor",
        "timestamp": 1601319417
    },
    {
        "content": "<p>re: multiple repos, aside: it makes less sense for Portable SIMD to have a project repo because we have a stdsimd repo as well.</p>",
        "id": 211534407,
        "sender_full_name": "Jubilee",
        "timestamp": 1601319419
    },
    {
        "content": "<p>thats all I can think of for now</p>",
        "id": 211534481,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601319452
    },
    {
        "content": "<p>before we conclude and since we have 3 mins, do we have \"action points\" -&gt; things people want to work on before the next meeting?</p>",
        "id": 211534577,
        "sender_full_name": "DPC",
        "timestamp": 1601319490
    },
    {
        "content": "<p>yea, I think it would be great if we could get ppl to follow up and summarize the current issues we're tracking</p>",
        "id": 211534623,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601319518
    },
    {
        "content": "<p>I'm going to be focusing on the proof of concept for core Backtrace</p>",
        "id": 211534645,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601319528
    },
    {
        "content": "<p>\"start the mdbook\" seems like something that could be done in 1 week, even if it's just TOC and CI setup</p>",
        "id": 211534669,
        "sender_full_name": "Lokathor",
        "timestamp": 1601319538
    },
    {
        "content": "<p>good point</p>",
        "id": 211534679,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601319544
    },
    {
        "content": "<p>mdbook takes lesser time to setup <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 211534694,
        "sender_full_name": "DPC",
        "timestamp": 1601319551
    },
    {
        "content": "<p>any volunteers?</p>",
        "id": 211534722,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601319564
    },
    {
        "content": "<p>I can dedicate a lot of time to the book</p>",
        "id": 211534790,
        "sender_full_name": "must-compute",
        "timestamp": 1601319597
    },
    {
        "content": "<p>I'll take a stab.  Where shouldit be placed.</p>",
        "id": 211534871,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1601319613
    },
    {
        "content": "<p>in the project-error-handling repo</p>",
        "id": 211534920,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601319636
    },
    {
        "content": "<p>let me find an example you can base things off of</p>",
        "id": 211534935,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601319642
    },
    {
        "content": "<p>you can follow the rust cli book</p>",
        "id": 211534964,
        "sender_full_name": "DPC",
        "timestamp": 1601319658
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 211534966,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1601319659
    },
    {
        "content": "<p>also wg-traits <a href=\"https://github.com/rust-lang/wg-traits\">https://github.com/rust-lang/wg-traits</a></p>",
        "id": 211534992,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601319672
    },
    {
        "content": "<p>I know they have the CI all setup already</p>",
        "id": 211535002,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601319681
    },
    {
        "content": "<p>alright we're over time</p>",
        "id": 211535068,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601319716
    },
    {
        "content": "<p>thanks everyone for coming!</p>",
        "id": 211535074,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601319720
    },
    {
        "content": "<p>and ty <span class=\"user-mention\" data-user-id=\"300743\">@Sean Chen</span> for taking the minutes</p>",
        "id": 211535122,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601319726
    },
    {
        "content": "<p>next meeting is same time 2 weeks from now</p>",
        "id": 211535136,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601319736
    },
    {
        "content": "<p>I can help with CI stuff via GH Actions</p>",
        "id": 211535139,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1601319737
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"344328\">@Charles Ellis O'Riley Jr.</span></p>",
        "id": 211535159,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1601319747
    },
    {
        "content": "<p>I'll create the agenda thread right away so people can propose agenda items as they think of things</p>",
        "id": 211535163,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601319750
    },
    {
        "content": "<p>have a good day everyone and stay safe</p>",
        "id": 211535181,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601319762
    },
    {
        "content": "<p>Cool <span class=\"user-mention\" data-user-id=\"344196\">@Jakub Duchniewicz</span></p>",
        "id": 211535241,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1601319793
    },
    {
        "content": "<p>next meeting is at the same time in 2 weeks</p>",
        "id": 211535274,
        "sender_full_name": "DPC",
        "timestamp": 1601319814
    },
    {
        "content": "<p><time datetime=\"2020-10-12T18:00:00Z\">2020-10-12T20:00:00+02:00</time></p>",
        "id": 211535316,
        "sender_full_name": "DPC",
        "timestamp": 1601319840
    },
    {
        "content": "<p>a nasty consequence of global hooks is also that they must be globally unique</p>",
        "id": 211558103,
        "sender_full_name": "nagisa",
        "timestamp": 1601331807
    },
    {
        "content": "<p>e.g. you cannot just build a codebase that in crate graph has crates that require both abort and unwind panicking mechanism</p>",
        "id": 211558129,
        "sender_full_name": "nagisa",
        "timestamp": 1601331830
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/Meeting.20-.202020-09-28/near/211558103\">said</a>:</p>\n<blockquote>\n<p>a nasty consequence of global hooks is also that they must be globally unique</p>\n</blockquote>\n<p>yea</p>",
        "id": 211558189,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601331848
    },
    {
        "content": "<p>you gotta be really sure that you're only ever going to need one implementation of that functionality in any binary if you want to use global hooks</p>",
        "id": 211558220,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601331866
    },
    {
        "content": "<p>well, the solution in this situation is to only trust the final artifact (i.e. non-library crate) to specify the global hooks</p>",
        "id": 211558323,
        "sender_full_name": "nagisa",
        "timestamp": 1601331959
    },
    {
        "content": "<p>been working well enough so far, it just leaves a bad aftertaste</p>",
        "id": 211558387,
        "sender_full_name": "nagisa",
        "timestamp": 1601331984
    },
    {
        "content": "<p>Global hook-types based on traits came up in today's lang design meeting. Generally speaking, people seemed in favor, modulo implementation details (which were considerable).</p>",
        "id": 211828069,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601500446
    },
    {
        "content": "<p>seems like a pretty restricted scope project group might be in order then?</p>",
        "id": 211828487,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601500687
    }
]