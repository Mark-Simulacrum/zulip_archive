[
    {
        "content": "<p>I started to work on issue <a href=\"https://github.com/rust-lang/rust/issues/58520\">#58520</a> where <span class=\"user-mention\" data-user-id=\"311727\">@Harald Hoyer</span> proposed and implemented the <code>chain()</code> method on <code>Error</code>. I looked through the outstanding issues and past ones and it looks to me like the most important one to be solved is <a href=\"https://github.com/rust-lang/rust/issues/69161\">this one</a> where an ambiguity is introduced due to two matching implementation of the <code>chain()</code> function. The second one is probably just a change in underlying iterator type to use <code>FusedIterator</code> instead of a regular one.</p>",
        "id": 259726136,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1635593934
    },
    {
        "content": "<p>I wonder if <a href=\"https://github.com/rust-lang/rust/pull/90104\">https://github.com/rust-lang/rust/pull/90104</a> does not solve this issue where we could disable one implementation of this function</p>",
        "id": 259726213,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1635594098
    },
    {
        "content": "<p>The second one seems perfectly sound to be implemented instantly as <code>FusedIterator</code> always returns <code>None</code> when it has been exhausted and that is what we want in case of iterating through a finite chain of errors</p>",
        "id": 259726265,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1635594166
    },
    {
        "content": "<p>apart from these two issues it does not look like there is a lot to tweak in this implementation. We could also wait for Generic Member Access and come up with a totally different way of extracting a chain of errors, for example, with a <code>.context::&lt;Chain&gt;()</code> call</p>",
        "id": 259726361,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1635594323
    }
]