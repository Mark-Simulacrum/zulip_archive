[
    {
        "content": "<p>I suggest we make a thread for blog posts where we can put some error-handling related content for sharing</p>",
        "id": 230151762,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1615628712
    },
    {
        "content": "<p><a href=\"https://mbuffett.com/posts/rust-less-error-handling/\">https://mbuffett.com/posts/rust-less-error-handling/</a></p>",
        "id": 230151768,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1615628718
    },
    {
        "content": "<p>this one points at some rough edges, specifically the <code>NoneError</code> conversion problem</p>",
        "id": 230151785,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1615628741
    },
    {
        "content": "<p>there are a couple of places on GH as well: <br>\n[1] <a href=\"https://github.com/rust-lang/project-error-handling/blob/master/advanced-error-design-patterns-book/collect-references-here\">https://github.com/rust-lang/project-error-handling/blob/master/advanced-error-design-patterns-book/collect-references-here</a><br>\n[2] <a href=\"https://github.com/rust-lang/project-error-handling/issues/24\">https://github.com/rust-lang/project-error-handling/issues/24</a></p>",
        "id": 230182984,
        "sender_full_name": "oliver",
        "timestamp": 1615662979
    },
    {
        "content": "<p>depending on whether you think this should be merged into the error design patterns reference</p>",
        "id": 230182999,
        "sender_full_name": "oliver",
        "timestamp": 1615663009
    },
    {
        "content": "<p>too bad on zulip the detailed notification settings are for streams not topics as well</p>",
        "id": 230183086,
        "sender_full_name": "oliver",
        "timestamp": 1615663125
    },
    {
        "content": "<p>do you think we would have discussion here as well or just link sharing?</p>",
        "id": 230184154,
        "sender_full_name": "oliver",
        "timestamp": 1615664284
    },
    {
        "content": "<p>I think this should be a place for: \"Hey, I found this blog! What do you think?\" And if we come to consensus that it is valuable, then we add it as a reference material.</p>",
        "id": 230184544,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1615664732
    },
    {
        "content": "<p>After all we should curate the references so that the potential reader is not overwhelmed</p>",
        "id": 230184565,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1615664758
    },
    {
        "content": "<p>I think there is probably a high-volume of directly relevant content which could be examined closer</p>",
        "id": 230184888,
        "sender_full_name": "oliver",
        "timestamp": 1615665115
    },
    {
        "content": "<p>in college I joined a informal research reading-group which was a spare-time effort to connect and read together</p>",
        "id": 230184982,
        "sender_full_name": "oliver",
        "timestamp": 1615665223
    },
    {
        "content": "<p>it wasn't the easiest to coordinate since everyone was busy and the outcomes weren't tangible</p>",
        "id": 230185070,
        "sender_full_name": "oliver",
        "timestamp": 1615665315
    },
    {
        "content": "<p>I'm generally keen for anything related to a rust reading group</p>",
        "id": 230185193,
        "sender_full_name": "oliver",
        "timestamp": 1615665445
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281739\">oliver</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/Blog.20posts/near/230185070\">said</a>:</p>\n<blockquote>\n<p>it wasn't the easiest to coordinate since everyone was busy and the outcomes weren't tangible</p>\n</blockquote>\n<p>what I mean is that it's the kind of thing that benefits the relative beginner more than the experts</p>",
        "id": 230185415,
        "sender_full_name": "oliver",
        "timestamp": 1615665670
    },
    {
        "content": "<p>so it wasn't too hard to get a group of peers together but including an instructor or even a TA was challenging</p>",
        "id": 230185494,
        "sender_full_name": "oliver",
        "timestamp": 1615665724
    },
    {
        "content": "<p>I think we could do a biweekly reading group meeting, for starters</p>",
        "id": 230185700,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1615665947
    },
    {
        "content": "<p>choosing a person in charge would be difficult though</p>",
        "id": 230185750,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1615665973
    },
    {
        "content": "<p>taking into account that we are already writing a book on the topic</p>",
        "id": 230185768,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1615665998
    },
    {
        "content": "<p>I think before or after the existing Thursday BoF might be appropriate/convenient</p>",
        "id": 230186042,
        "sender_full_name": "oliver",
        "timestamp": 1615666282
    },
    {
        "content": "<p>what I envision is taking turns live reading a article(s) with pauses for questions or observations</p>",
        "id": 230186517,
        "sender_full_name": "oliver",
        "timestamp": 1615666843
    },
    {
        "content": "<p>maybe someone taking notes if something comes out of that, so it can be ideally light on administration</p>",
        "id": 230186618,
        "sender_full_name": "oliver",
        "timestamp": 1615666932
    },
    {
        "content": "<p>some of them might be quite lengthy</p>",
        "id": 230187607,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1615668149
    },
    {
        "content": "<p>but I don't know a good alternative to reading in turns rn</p>",
        "id": 230187619,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1615668180
    },
    {
        "content": "<p>there are services where you can markup webpages and share notes</p>",
        "id": 230187711,
        "sender_full_name": "oliver",
        "timestamp": 1615668293
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281739\">oliver</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/Blog.20posts/near/230186042\">said</a>:</p>\n<blockquote>\n<p>I think before or after the existing Thursday BoF might be appropriate/convenient</p>\n</blockquote>\n<p>I'm down, do you want to run this <span class=\"user-mention\" data-user-id=\"281739\">@oliver</span> ?</p>",
        "id": 230440387,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1615852917
    },
    {
        "content": "<p>ok, let's plan to say longer after the regular BoF for a study session!</p>",
        "id": 230449908,
        "sender_full_name": "oliver",
        "timestamp": 1615860685
    },
    {
        "content": "<p>Quote from <a href=\"https://ziglang.org/learn/why_zig_rust_d_cpp/\">Zig's reasoning </a></p>\n<blockquote>\n<p>If a language makes it too easy to ignore errors, and thus to verify that a library correctly handles and bubbles up errors, it can be tempting to ignore the library and re-implement it, knowing that one handled all the relevant errors correctly. Zig is designed such that the laziest thing a programmer can do is handle errors correctly, and thus one can be reasonably confident that a library will properly bubble errors up.</p>\n</blockquote>",
        "id": 231435530,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1616487795
    },
    {
        "content": "<p>Not familiar with the language itself, but the philosophy appeals to me, and that is what we should strive for IMO</p>",
        "id": 231435670,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1616487878
    },
    {
        "content": "<p>Laziest way -&gt; best way</p>",
        "id": 231435696,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1616487902
    },
    {
        "content": "<p>Here was some commentary along these lines: <br>\n<a href=\"https://users.rust-lang.org/t/why-arent-some-basic-traits-automatically-derived/57311/10\">https://users.rust-lang.org/t/why-arent-some-basic-traits-automatically-derived/57311/10</a></p>",
        "id": 231480804,
        "sender_full_name": "oliver",
        "timestamp": 1616510350
    },
    {
        "content": "<p>I might have to re review their error handling but last time I checked I was not impressed by zigs approach</p>",
        "id": 231522472,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1616525200
    },
    {
        "content": "<p>It's basically a global enum of errors</p>",
        "id": 231522502,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1616525212
    },
    {
        "content": "<p>And as far as I know doesn't allow for composition</p>",
        "id": 231522531,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1616525227
    },
    {
        "content": "<p>So if you want to have an error cause a new error you have to create a new variant that represents the new error and it's cause</p>",
        "id": 231522606,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1616525253
    },
    {
        "content": "<p>Which restricts how you can report errors and what errors you can model</p>",
        "id": 231522668,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1616525281
    },
    {
        "content": "<p>I do like that it makes it easier in the basic case</p>",
        "id": 231522737,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1616525295
    },
    {
        "content": "<p>But I'm not convinced the tradeoff is worth it</p>",
        "id": 231522767,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1616525306
    },
    {
        "content": "<p>aren't we saying that the large error structs are anti-patterns in Rust</p>",
        "id": 231527776,
        "sender_full_name": "oliver",
        "timestamp": 1616527167
    },
    {
        "content": "<p>no, we're just saying that large error types, as in large size_of::&lt;T&gt;(), are a foot gun to be wary of</p>",
        "id": 231563389,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1616544730
    },
    {
        "content": "<p>but the solution of this isn't to avoid error composition</p>",
        "id": 231563427,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1616544758
    },
    {
        "content": "<p>its just to be wary and mindful of when to start allocating errors or audit which pieces of context are necessary, usually in response to benchmarks</p>",
        "id": 231563476,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1616544796
    },
    {
        "content": "<p>this is like, a microoptimization in most cases</p>",
        "id": 231563487,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1616544805
    }
]