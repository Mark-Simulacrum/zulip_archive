[
    {
        "content": "<p>Btw, should this group be invested in moving specialization along at all?</p>\n<p>I ask particularly because of the whole \"&lt;anyhow&gt; can't implement StdError because it would conflict between <code>From&lt;StdError&gt;</code> and <code>From&lt;Self&gt;</code>\"?</p>",
        "id": 218026087,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1606412889
    },
    {
        "content": "<p>Unless that is somehow planned to be solved somehow else? (Although I can't imagine how...)</p>",
        "id": 218026136,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1606412932
    },
    {
        "content": "<p>as long as they are part of the same specialization family?</p>",
        "id": 218026443,
        "sender_full_name": "oliver",
        "timestamp": 1606413136
    },
    {
        "content": "<p>Not sure I follow - my understanding is that what would be desirable here would be <code>impl StdError for Self</code> and then i.e. <code>From&lt;T: StdError NOT Self&gt;</code>?</p>",
        "id": 218026654,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1606413356
    },
    {
        "content": "<p>i.e. negative bounds, or a special self exclusion bound</p>",
        "id": 218026711,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1606413378
    },
    {
        "content": "<p>from what I recall there is resistance to having conditional negative impls</p>",
        "id": 218027737,
        "sender_full_name": "oliver",
        "timestamp": 1606414319
    },
    {
        "content": "<p>though this might be added for Error return traces as a missing feature</p>",
        "id": 218027806,
        "sender_full_name": "oliver",
        "timestamp": 1606414351
    },
    {
        "content": "<p>I think that negative impl is intended to be <code>impl !StdErr ..</code> rather than allowing for opt-in for various traits overlapping with conditional impls</p>",
        "id": 218027939,
        "sender_full_name": "oliver",
        "timestamp": 1606414470
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/23072#issuecomment-85960388\">https://github.com/rust-lang/rust/issues/23072#issuecomment-85960388</a></p>",
        "id": 218028609,
        "sender_full_name": "oliver",
        "timestamp": 1606415044
    },
    {
        "content": "<p>Ah, hmm, that seems like a different feature than I though. Perhaps there isn't any named/rfc'd feature for this, but I'm thinking specifically about \"negative trait bounds for generics\" (even if only for <code>Self</code>) to get around conflicting with blanket impls (e.g. <code>From&lt;T&gt; for T</code>).</p>",
        "id": 218033117,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1606419153
    },
    {
        "content": "<p>I expect this will need to be a new feature proposal</p>",
        "id": 218034012,
        "sender_full_name": "oliver",
        "timestamp": 1606420153
    },
    {
        "content": "<p>tho negative trait bounds on generics isn't in my registers</p>",
        "id": 218034292,
        "sender_full_name": "oliver",
        "timestamp": 1606420474
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211722\">@Yoshua Wuyts</span> We've talked about this, do you have any recollection of previous conversations about this \"negative trait bounds\" thing?</p>",
        "id": 218035204,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1606421471
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"319552\">@Jeremiah Senkpiel</span> maybe you could try in <a class=\"stream\" data-stream-id=\"144729\" href=\"/#narrow/stream/144729-wg-traits\">#wg-traits</a> as they're implementing the next generation torchwood and trait solving infrastructure (called chalk) and face those problems. Of course, <a class=\"stream\" data-stream-id=\"213817\" href=\"/#narrow/stream/213817-t-lang\">#t-lang</a> is also related to it.</p>",
        "id": 218036144,
        "sender_full_name": "pachi",
        "timestamp": 1606422486
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"319552\">@Jeremiah Senkpiel</span> enabling negative trait bounds to count towards coherence is one of the requirements to enable async fn main.</p>\n<p>We want to implement <code>impl&lt;F, T&gt; Termination for F where F: Future&lt;Output = T&gt;, T: Termination</code>. Which requires we declare that <code>()</code> will never implement <code>Future</code>.</p>",
        "id": 218045107,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1606433373
    },
    {
        "content": "<p>The reason for that is that Termination is defined in libstd, while both Future and unit are defined in libcore.</p>\n<p>Termination is implemented for unit. So in order for the generic impl to be valid we need to declare that unit will <em>never</em> implement Future, making it so the generic impl will never accidentally conflict in the future.</p>",
        "id": 218045340,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1606433758
    },
    {
        "content": "<p>I don't know how relevant it is to what's being discussed here; but I think this is what you may be remembering from convos we've had in the past.</p>",
        "id": 218045400,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1606433818
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211722\">Yoshua Wuyts</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/Specialization/near/218045340\">said</a>:</p>\n<blockquote>\n<p>The reason for that is that Termination is defined in libstd, while both Future and unit are defined in libcore.</p>\n<p>Termination is implemented for unit. So in order for the generic impl to be valid we need to declare that unit will <em>never</em> implement Future, making it so the generic impl will never accidentally conflict in the future.</p>\n</blockquote>\n<p>this seems like it might be solved by merging core and std</p>",
        "id": 218321976,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1606759165
    },
    {
        "content": "<p>if its an orphan rule issue</p>",
        "id": 218321993,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1606759171
    },
    {
        "content": "<p>that said</p>",
        "id": 218322016,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1606759187
    },
    {
        "content": "<p>the issue with impling Error for Box&lt;dyn Error&gt; and anyhow::Error will probably require a significant amount of work</p>",
        "id": 218322087,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1606759206
    },
    {
        "content": "<p>my understanding is that it requires that chalk implements the lattice rule</p>",
        "id": 218322128,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1606759222
    },
    {
        "content": "<p>which isn't planned afaik</p>",
        "id": 218322149,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1606759233
    },
    {
        "content": "<p>we should probably double check with <span class=\"user-group-mention\" data-user-group-id=\"692\">@WG-traits</span></p>",
        "id": 218322185,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1606759251
    },
    {
        "content": "<p>what is the lattice rule again? sounds familiar <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 218322287,
        "sender_full_name": "oliver",
        "timestamp": 1606759308
    },
    {
        "content": "<p>let me grab a link rq</p>",
        "id": 218322304,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1606759318
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1210-impl-specialization.md#the-lattice-rule\">https://github.com/rust-lang/rfcs/blob/master/text/1210-impl-specialization.md#the-lattice-rule</a></p>",
        "id": 218322366,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1606759338
    },
    {
        "content": "<p>nice, I have references to semi-lattices and consistency types</p>",
        "id": 218334311,
        "sender_full_name": "oliver",
        "timestamp": 1606764833
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/Specialization/near/218321976\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"211722\">Yoshua Wuyts</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/Specialization/near/218045340\">said</a>:</p>\n<blockquote>\n<p>The reason for that is that Termination is defined in libstd, while both Future and unit are defined in libcore.</p>\n<p>Termination is implemented for unit. So in order for the generic impl to be valid we need to declare that unit will <em>never</em> implement Future, making it so the generic impl will never accidentally conflict in the future.</p>\n</blockquote>\n<p>this seems like it might be solved by merging core and std</p>\n</blockquote>\n<p>FWIW Pattern gets around this for <code>char</code> and <code>FnOnce</code> with 'compiler magic': <a href=\"https://doc.rust-lang.org/nightly/src/core/ops/function.rs.html#145\">https://doc.rust-lang.org/nightly/src/core/ops/function.rs.html#145</a></p>",
        "id": 218343925,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606769366
    },
    {
        "content": "<p><span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 218344076,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1606769432
    },
    {
        "content": "<p>Another option might be to make coherence take into account <a href=\"https://doc.rust-lang.org/nightly/unstable-book/language-features/negative-impls.html\">https://doc.rust-lang.org/nightly/unstable-book/language-features/negative-impls.html</a></p>\n<p>And to add an <code>impl !Future for () {}</code></p>\n<p>(That seems like it'd be a bit more elegant of a way to handle the pattern problem, too.  Would at least be an interesting separate feature flag to have available to play with in core/std and see if we'd want to make it available more generally.)</p>",
        "id": 218344958,
        "sender_full_name": "scottmcm",
        "timestamp": 1606769881
    },
    {
        "content": "<p>my understanding was that negative impls somehow play poorly with exhaustiveness and how solvable the trait system is</p>",
        "id": 218345209,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1606769991
    },
    {
        "content": "<p>Sounds like a niko question, since I really don't understand how all that stuff works.</p>",
        "id": 218345418,
        "sender_full_name": "scottmcm",
        "timestamp": 1606770073
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> oh my</p>",
        "id": 218409441,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1606822388
    }
]