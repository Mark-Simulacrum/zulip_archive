[
    {
        "content": "<p>RE: <a href=\"https://github.com/nrc/provide-any/blob/dfff4e26f8f21842a7dcc19fc6a544f14bf4b18b/src/tests.rs#L76\">https://github.com/nrc/provide-any/blob/dfff4e26f8f21842a7dcc19fc6a544f14bf4b18b/src/tests.rs#L76</a></p>\n<div class=\"codehilite\"><pre><span></span><code>    fn provide_mut&lt;&#39;a&gt;(&amp;&#39;a mut self, req: &amp;mut Requisition&lt;&#39;a&gt;) {\n        req.provide_mut::&lt;String&gt;(&amp;mut self.s);\n    }\n</code></pre></div>\n<p>The <code>provide</code> APIs require that the lifetime of the provided type is exactly <code>'a</code>. This is fine for shared borrows, but means that Rust won't let us pass multiple similar exclusive borrows. For example, <code>.provide_mut(&amp;mut self.s).provide_mut(self.s.as_mut_str())</code> won't compile.</p>",
        "id": 271016300,
        "sender_full_name": "Plecra",
        "timestamp": 1644256373
    },
    {
        "content": "<p>The first solution that comes to mind is</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Demand</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">within</span><span class=\"o\">&lt;</span><span class=\"n\">C</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cx</span>: <span class=\"nc\">C</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">DemandWithin</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">DemandWithin</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">cx</span>: <span class=\"nc\">C</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">demand</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"nc\">Demand</span><span class=\"o\">&lt;'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">DemandWithin</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">provide</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">AnyUnowned</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fulfill</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">FnOnce</span><span class=\"p\">(</span><span class=\"n\">C</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 271018937,
        "sender_full_name": "Plecra",
        "timestamp": 1644257313
    },
    {
        "content": "<p>which would let an error</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">provide_context_mut</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">demand</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Demand</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">demand</span><span class=\"p\">.</span><span class=\"n\">within</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">provide</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">e</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">.</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">provide</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">e</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">.</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">as_mut_str</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 271019656,
        "sender_full_name": "Plecra",
        "timestamp": 1644257608
    },
    {
        "content": "<p>That's a good point!</p>",
        "id": 271283623,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1644416130
    },
    {
        "content": "<p>I think even more importantly, this will allow <code>provide_context_mut</code> to give its own context types, and then call <code>provide_context</code> too. Which would make the decision between <code>get_context</code>/<code>get_context_mut</code> obvious: use the highest permission you can :)</p>",
        "id": 271291283,
        "sender_full_name": "Plecra",
        "timestamp": 1644419174
    },
    {
        "content": "<p>I'm not sure how to implement DemandWithin::Provide - it must return <code>self</code>, but <a href=\"http://self.cx\">self.cx</a> will be consumed by the call to fulfill?</p>",
        "id": 271292529,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1644419688
    },
    {
        "content": "<p>yup, the declaration of <code>DemandWithin</code> is more descriptive than anything else :P We'd want to use <code>MaybeUninit</code> (using the <code>Demand</code> to track whether it's been used) or <code>Option</code></p>",
        "id": 271293398,
        "sender_full_name": "Plecra",
        "timestamp": 1644420042
    },
    {
        "content": "<p>ah, I see, so the 'within' stuff only lets the calls to provide type check, we'd still need to do something unsafe to implement it</p>",
        "id": 271294414,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1644420404
    },
    {
        "content": "<p>Nah, it wouldn't have to be. The unsafe would just be a performance optimization</p>",
        "id": 271320474,
        "sender_full_name": "Plecra",
        "timestamp": 1644429432
    },
    {
        "content": "<p>I'll implement it on my alt design real quick</p>",
        "id": 271320500,
        "sender_full_name": "Plecra",
        "timestamp": 1644429441
    },
    {
        "content": "<p>Here ya go: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=1e4c0a195b7330d7a2a769aaab31756d\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=1e4c0a195b7330d7a2a769aaab31756d</a></p>",
        "id": 271322431,
        "sender_full_name": "Plecra",
        "timestamp": 1644430063
    },
    {
        "content": "<p>unsafe could be used to optimize the overhead of that Option if we really wanted. The <code>unwrap</code> will never panic</p>",
        "id": 271322536,
        "sender_full_name": "Plecra",
        "timestamp": 1644430088
    },
    {
        "content": "<p>oh - I've used the new API in <code>&lt;Bar as Foo&gt;::food_mut</code></p>",
        "id": 271323166,
        "sender_full_name": "Plecra",
        "timestamp": 1644430315
    }
]