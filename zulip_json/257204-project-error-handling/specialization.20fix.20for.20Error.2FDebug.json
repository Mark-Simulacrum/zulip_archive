[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"344196\">@Jakub Duchniewicz</span> from the meeting, you asked about the examples niko gave for the possible work around to the specialization soundness issue</p>",
        "id": 236389249,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1619549331
    },
    {
        "content": "<p>here are the notes I took in the meeting</p>",
        "id": 236389256,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1619549335
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>Spec(Error) means ‘I implement Error in a lifetime agnostic way’\n\nImpl&lt;’a&gt; error for mytype&lt;’a&gt; // ok\n\nStruct mytype&lt;’a, ‘b&gt; { }\nimpl&lt;’a&gt; error for mytype&lt;’a, ‘a&gt; // not ok, requiring ‘b = ‘a\n\nimpl&lt;T&gt; Error for Box&lt;T&gt; where T: Error\n\nImpl Error for MyType&lt;’static&gt;\n</code></pre></div>",
        "id": 236389262,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1619549336
    },
    {
        "content": "<p>so the first line was a random throw away syntax for what it would look like</p>",
        "id": 236389306,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1619549356
    },
    {
        "content": "<p>and then the rest of them are examples of the issue</p>",
        "id": 236389340,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1619549370
    },
    {
        "content": "<p>where the first one implements error for all lifetimes</p>",
        "id": 236389349,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1619549376
    },
    {
        "content": "<p>but the other 3 potentially implement error conditionally based on lifetimes</p>",
        "id": 236389369,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1619549390
    },
    {
        "content": "<p>so the idea would be that we would specialize only for error impls that don't condition the impl on any lifetimes, and we would probably also add a lint to warn on impls that are conditional and might not specialize</p>",
        "id": 236389457,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1619549418
    },
    {
        "content": "<p>thanks, this makes it much clearer. Did not know about this soundness before you mentioned it recently!</p>",
        "id": 236390330,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1619549833
    }
]