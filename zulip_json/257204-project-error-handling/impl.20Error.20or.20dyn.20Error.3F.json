[
    {
        "content": "<p>Do we have any guidance on whether code that accepts generic errors (my case is a serialization framework) should accept:</p>\n<ul>\n<li><code>impl Error + ?Sized + 'a</code></li>\n<li><code>impl Error + 'a</code></li>\n<li><code>impl Error + 'static</code></li>\n<li><code>dyn Error + 'a</code></li>\n<li><code>dyn Error + 'static</code></li>\n</ul>\n<p>Maybe this is covered a bit by the ##<strong>project-error-handling&gt;dyn error handling</strong>  topic. For a trait like <code>Debug</code>, my suggestion would normally be <code>impl Debug + 'a</code>, but that doesn't quite work for <code>Error</code>, because then you can't downcast, and <code>&amp;dyn Error</code> isn't covered because of missing trait implementations. Then you have questions about <code>Send + Sync</code>.</p>\n<p>Do we want to make <code>impl Error</code> more useful? Or do we want to recommend code that abstracts over error types prefer one of:</p>\n<ul>\n<li><code>dyn Error + 'a</code></li>\n<li><code>dyn Error + 'static</code></li>\n<li><code>dyn Error + Send + Sync + 'static</code></li>\n</ul>\n<p>with <code>dyn Error + 'a</code> being the loosest, and <code>dyn Error + Send + Sync + 'static</code> being the tightest?</p>",
        "id": 213227086,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1602629447
    },
    {
        "content": "<p>I think we should recommend Send + Sync, the way the API guidelines do: <a href=\"https://rust-lang.github.io/api-guidelines/interoperability.html#error-types-are-meaningful-and-well-behaved-c-good-err\">https://rust-lang.github.io/api-guidelines/interoperability.html#error-types-are-meaningful-and-well-behaved-c-good-err</a></p>",
        "id": 213227122,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602629496
    },
    {
        "content": "<p>no opinion yet on <code>impl</code> vs <code>dyn</code></p>",
        "id": 213227141,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602629518
    },
    {
        "content": "<p><code>impl</code> won't really be useful unless we do something like <a href=\"https://github.com/rust-lang/rust/pull/75180\">https://github.com/rust-lang/rust/pull/75180</a></p>",
        "id": 213227550,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1602629780
    },
    {
        "content": "<p>Which seems like it can interact badly with existing inherent methods on <code>dyn Error</code>. I guess we've really geared the <code>Error</code> trait to be used as a trait object</p>",
        "id": 213227639,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1602629861
    },
    {
        "content": "<p>I think dyn is probably the better option of those two (not confident)</p>",
        "id": 213233708,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602634852
    },
    {
        "content": "<p>and for the lifetime bounds, iunno, does serialization need downcasting?</p>",
        "id": 213233733,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602634897
    },
    {
        "content": "<p>I wouldn't think so, but you _may_ need to forward through some other API that still expects <code>'static</code> (I hit this with <code>tracing</code>)</p>",
        "id": 213234489,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1602635545
    },
    {
        "content": "<p>So maybe the ultra-conservative <code>dyn Error + Send + Sync + 'static</code> is really the only useful recommendation to make?</p>",
        "id": 213234530,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1602635620
    },
    {
        "content": "<p>seems like a safe default</p>",
        "id": 213234587,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602635643
    },
    {
        "content": "<p>imo <code>impl Error</code> might make things more convenient than using <code>dyn</code></p>",
        "id": 213234986,
        "sender_full_name": "DPC",
        "timestamp": 1602636039
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120823\">@DPC</span> It _should_... But unfortunately it doesn't <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 213235012,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1602636066
    },
    {
        "content": "<p>It excludes <code>&amp;dyn Error</code> and <code>Box&lt;dyn Error&gt;</code></p>",
        "id": 213235021,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1602636078
    },
    {
        "content": "<p>dreaming of specialization</p>",
        "id": 213235055,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602636110
    },
    {
        "content": "<p>fair</p>",
        "id": 213235063,
        "sender_full_name": "DPC",
        "timestamp": 1602636117
    },
    {
        "content": "<p>Which could be point-in-time issues, but there isn't a clear path to making <code>Box&lt;dyn Error&gt;</code> implement the <code>Error</code> trait yet</p>",
        "id": 213235110,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1602636129
    },
    {
        "content": "<p>i meant more in a \"perfect world\" where we are starting from scratch and we didn't have <code>Box&lt;dyn Error&gt;</code> anywhere</p>",
        "id": 213235114,
        "sender_full_name": "DPC",
        "timestamp": 1602636136
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"204346\">Ashley Mannix</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/impl.20Error.20or.20dyn.20Error.3F/near/213235110\">said</a>:</p>\n<blockquote>\n<p>Which could be point-in-time issues, but there isn't a clear path to making <code>Box&lt;dyn Error&gt;</code> implement the <code>Error</code> trait yet</p>\n</blockquote>\n<p>does specialization not give us this in theory?</p>",
        "id": 213235161,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602636185
    },
    {
        "content": "<p>either specialization or negative impls</p>",
        "id": 213235177,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602636212
    },
    {
        "content": "<p>wait no</p>",
        "id": 213235187,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602636218
    },
    {
        "content": "<p>In a perfect world I think it would look something like:</p>\n<div class=\"codehilite\"><pre><span></span><code>pub trait Error {}\n\nimpl&lt;E: ?Sized + Error&gt; Error for &amp;E {}\nimpl&lt;E: ?Sized + Error&gt; Error for Box&lt;E&gt; {}\n\npub struct TheRealBoxError {}\nimpl Error for TheRealBoxError {}\n</code></pre></div>",
        "id": 213235190,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1602636223
    },
    {
        "content": "<p>negative impls doesnt help this one</p>",
        "id": 213235193,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602636224
    },
    {
        "content": "<p>yea</p>",
        "id": 213235263,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602636265
    },
    {
        "content": "<p>want</p>",
        "id": 213235265,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602636267
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> I always forget what specialization does and doesn't cover, but I thought because one of the conflicting impls isn't a subset of the other that it's not a specialization candidate <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 213235272,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1602636281
    },
    {
        "content": "<p>possibly</p>",
        "id": 213235306,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602636326
    },
    {
        "content": "<p>It wasn't the <code>impl Error for Box&lt;dyn Error&gt;</code> that breaks was it. It's some unrelated <code>From</code> impls?</p>",
        "id": 213235307,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1602636326
    },
    {
        "content": "<p>yea</p>",
        "id": 213235312,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602636336
    },
    {
        "content": "<p>a small \"divergence\" , is there a reason people use <code>Box&lt;dyn Error&gt;</code> for errors?</p>",
        "id": 213235315,
        "sender_full_name": "DPC",
        "timestamp": 1602636338
    },
    {
        "content": "<p>its From&lt;T&gt; for T and From&lt;E: Error&gt; For Box&lt;dyn Error&gt;</p>",
        "id": 213235320,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602636346
    },
    {
        "content": "<p>Ahh that's right</p>",
        "id": 213235335,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1602636358
    },
    {
        "content": "<p>did we decide to not add support for explicit resolution of overlap like that?</p>",
        "id": 213235390,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602636380
    },
    {
        "content": "<p>if we added a third impl From&lt;Box&lt;dyn Error&gt;&gt; for Box&lt;dyn Error&gt; that would resolve it</p>",
        "id": 213235407,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602636397
    },
    {
        "content": "<p>because that's pretty clearly a subset of both overlapping impls</p>",
        "id": 213235419,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602636419
    },
    {
        "content": "<p>afaik</p>",
        "id": 213235430,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602636429
    },
    {
        "content": "<p>Hmm, maybe we need some t-lang input on whether that's supposed to work <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 213235513,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1602636493
    },
    {
        "content": "<blockquote>\n<p>if we added a third impl From&lt;Box&lt;dyn Error&gt;&gt; for Box&lt;dyn Error&gt; that would resolve it</p>\n</blockquote>\n<p>but wouldn' that conflict with <code>From&lt;T&gt; for &lt;T&gt;</code>? (unless you are talking about +specialisation here)</p>",
        "id": 213235602,
        "sender_full_name": "DPC",
        "timestamp": 1602636597
    },
    {
        "content": "<p>Do we have a tracking issue already for making <code>&amp;E: Error</code> and <code>Box&lt;E: Error&gt;</code> implement <code>Error</code>?</p>",
        "id": 213235655,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1602636608
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120823\">@DPC</span> It would need a sprinkling of specialization magic</p>",
        "id": 213235673,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1602636627
    },
    {
        "content": "<p>this is one issue: <a href=\"https://github.com/rust-lang/rust/pull/75180\">https://github.com/rust-lang/rust/pull/75180</a></p>",
        "id": 213235684,
        "sender_full_name": "DPC",
        "timestamp": 1602636637
    },
    {
        "content": "<p>err PR</p>",
        "id": 213235697,
        "sender_full_name": "DPC",
        "timestamp": 1602636654
    },
    {
        "content": "<p>The thing I'm not sure of is whether it's supposed to be covered by specialization or not</p>",
        "id": 213235706,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1602636663
    },
    {
        "content": "<p>doesn't seem to link to anything, so i assume we don't have any tracking issue related to it</p>",
        "id": 213235719,
        "sender_full_name": "DPC",
        "timestamp": 1602636677
    },
    {
        "content": "<p>It may be the \"lattice\" form of specialization</p>",
        "id": 213235749,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1602636704
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1210-impl-specialization.md#the-lattice-rule\">https://github.com/rust-lang/rfcs/blob/master/text/1210-impl-specialization.md#the-lattice-rule</a></p>",
        "id": 213235868,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602636825
    },
    {
        "content": "<p>in the alternatives section</p>",
        "id": 213235918,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602636851
    },
    {
        "content": "<p>F</p>",
        "id": 213235919,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602636853
    },
    {
        "content": "<p>this is saddening news</p>",
        "id": 213235939,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602636885
    },
    {
        "content": "<blockquote>\n<p>Moving to the lattice rule is backwards compatible</p>\n</blockquote>\n<p>A ray of hope</p>",
        "id": 213235960,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602636919
    },
    {
        "content": "<p>Box&lt;dyn Error&gt; is an error 2030 edition lets gooo</p>",
        "id": 213235978,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602636945
    },
    {
        "content": "<p>Hmm, definitely looks like that would be a long way off if it was going to be pursued. I might set up a tracking issue then and write some stuff up on where we're at and what we could do</p>",
        "id": 213235983,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1602636956
    },
    {
        "content": "<p>good idea</p>",
        "id": 213236035,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602636985
    },
    {
        "content": "<p>I'll add that to the action items</p>",
        "id": 213236041,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602636992
    },
    {
        "content": "<p>I can assign that to myself unless someone else feels confident / interested in filling out that issue</p>",
        "id": 213236085,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602637074
    },
    {
        "content": "<p>I'm happy to do it <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 213236153,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1602637128
    },
    {
        "content": "<p>k</p>",
        "id": 213236167,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602637143
    },
    {
        "content": "<p>all yours :D</p>",
        "id": 213236178,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602637150
    },
    {
        "content": "<p>Just opened up <a href=\"https://github.com/rust-lang/project-error-handling/issues/16\">https://github.com/rust-lang/project-error-handling/issues/16</a> as a start</p>",
        "id": 213236185,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1602637155
    },
    {
        "content": "<p>the former impl in that issue isn't that hard right?</p>",
        "id": 213236217,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602637178
    },
    {
        "content": "<p>just that its breaking right?</p>",
        "id": 213236230,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602637190
    },
    {
        "content": "<p><strong>just</strong></p>",
        "id": 213236238,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602637198
    },
    {
        "content": "<p>That's right. We could just accept it and add it. It just clobbers auto deref on <code>dyn Error</code> and breaks a few things.</p>",
        "id": 213236303,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1602637239
    },
    {
        "content": "<blockquote>\n<p>It just clobbers auto deref on dyn Error</p>\n</blockquote>\n<p>wait what</p>",
        "id": 213236320,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602637260
    },
    {
        "content": "<p>That's the breakage wasn't it? Where you have <code>&amp;'short &amp;'long dyn Error</code> so the lifetime you get in methods like <code>source</code> is <code>'short</code> instead of <code>'long</code>?</p>",
        "id": 213236402,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1602637339
    },
    {
        "content": "<p>ooo</p>",
        "id": 213236414,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602637363
    },
    {
        "content": "<p>because auto deref doesn't care about lifetimes, and now &amp;dyn Error would be an error</p>",
        "id": 213236417,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602637373
    },
    {
        "content": "<p>thats wild</p>",
        "id": 213236420,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602637378
    },
    {
        "content": "<p>I have very poor memory, so I didn't recall</p>",
        "id": 213236429,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602637387
    },
    {
        "content": "<p>does the rust project make breaking changes when they think the impact is small enough?</p>",
        "id": 213236456,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602637440
    },
    {
        "content": "<p>I've always assumed that the rule was a hard one</p>",
        "id": 213236496,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602637448
    },
    {
        "content": "<p>We can decide on a case-by-case basic whether or not to accept breakage <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> Pretty much _everything_ breaks somebody</p>",
        "id": 213236517,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1602637501
    },
    {
        "content": "<p>ooh dang</p>",
        "id": 213236527,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602637512
    },
    {
        "content": "<p>very cool</p>",
        "id": 213236530,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602637514
    },
    {
        "content": "<p>In this case, I would personally happily accept that breakage by fixing those crates because making <code>&amp;dyn Error</code> implement <code>Error</code> seems really worthwhile</p>",
        "id": 213236620,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1602637598
    },
    {
        "content": "<p>I think there was about 4 of them</p>",
        "id": 213236624,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1602637612
    },
    {
        "content": "<p>yeah normally there's a crater run to assess the breakage in the ecosystem, and a decision is made based on that</p>",
        "id": 213236635,
        "sender_full_name": "DPC",
        "timestamp": 1602637627
    },
    {
        "content": "<p>But, as is usually pointed out, there is more code out there than is visible to crater.</p>",
        "id": 213237923,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1602639191
    },
    {
        "content": "<p>e.g., we are working on a 75kloc Rust project that is not open source (yet?)</p>",
        "id": 213237943,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1602639237
    },
    {
        "content": "<p>I remember hearing once of plans to make crater support private codebases</p>",
        "id": 213237997,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602639266
    },
    {
        "content": "<p>where you could opt into running crater internally and post the results somehow</p>",
        "id": 213238003,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602639276
    },
    {
        "content": "<p><em>kinda off topic</em></p>",
        "id": 213238024,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602639292
    },
    {
        "content": "<p>crater does not feel very useful to me until it becomes more accurate :( especially for rustdoc <a href=\"https://github.com/rust-lang/crater/issues/532\">https://github.com/rust-lang/crater/issues/532</a></p>",
        "id": 213238039,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602639328
    },
    {
        "content": "<p>I'll aim to have something concrete to report on by the time we sync next, which is in 2 weeks I think <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 213241293,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1602643774
    },
    {
        "content": "<p>rustdoc is an \"exception\", but for most of the other changes, crater is good enough</p>",
        "id": 213277272,
        "sender_full_name": "DPC",
        "timestamp": 1602676573
    }
]