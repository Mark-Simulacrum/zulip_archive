[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300743\">@Sean Chen</span> finally had a chance to read <a href=\"https://msirringhaus.github.io/Where-everything-went-wrong/\">https://msirringhaus.github.io/Where-everything-went-wrong/</a></p>",
        "id": 226994008,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1613754056
    },
    {
        "content": "<p>i think I'm going to do a blog post</p>",
        "id": 226994028,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1613754065
    },
    {
        "content": "<p>to follow up your blog post and go into more details on the reporting stuff in particular</p>",
        "id": 226994075,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1613754077
    },
    {
        "content": "<p>another article that mentions error handling: <a href=\"https://blog.kraken.com/post/7964/oxidizing-kraken/\">https://blog.kraken.com/post/7964/oxidizing-kraken/</a></p>",
        "id": 227005974,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1613759078
    },
    {
        "content": "<p>only briefly though</p>",
        "id": 227005981,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1613759082
    },
    {
        "content": "<blockquote>\n<p>Ideally, each fallible function would have its own error enum to precisely capture its errors and handle them, but in practice it is too verbose and leads to using the less precise Error trait or one enum per module. The language could support this better: there are several initiatives and macros exploring this.</p>\n</blockquote>",
        "id": 227005997,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1613759090
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> did you get anything finalized?</p>",
        "id": 227100959,
        "sender_full_name": "oliver",
        "timestamp": 1613837300
    },
    {
        "content": "<p>For the blog post? Not yet</p>",
        "id": 227101135,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1613837481
    },
    {
        "content": "<p>Ended up having too much to do yesterday</p>",
        "id": 227101154,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1613837490
    },
    {
        "content": "<p>sure, let me know if you wanna collab on it</p>",
        "id": 227104892,
        "sender_full_name": "oliver",
        "timestamp": 1613841479
    },
    {
        "content": "<p>I'll send you the draft once I've got it finished</p>",
        "id": 227107118,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1613843915
    },
    {
        "content": "<p>But I have a pretty good idea of what I want to say in the article</p>",
        "id": 227107122,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1613843923
    },
    {
        "content": "<p>Blog post same thing whatever</p>",
        "id": 227107124,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1613843931
    },
    {
        "content": "<p>starting to work on the blog post now</p>",
        "id": 227361707,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614039027
    },
    {
        "content": "<p><a href=\"https://hackmd.io/@rust-libs/B1wYs2WGO\">https://hackmd.io/@rust-libs/B1wYs2WGO</a> is where I'm drafting it</p>",
        "id": 227361711,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614039031
    },
    {
        "content": "<p>its still extremely rough and early</p>",
        "id": 227361714,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614039034
    },
    {
        "content": "<p>but one thing that came to mind that is probably relevant to you <span class=\"user-mention\" data-user-id=\"300743\">@Sean Chen</span></p>",
        "id": 227361816,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614039111
    },
    {
        "content": "<p>is that once we integrate the error trait with the panic runtime</p>",
        "id": 227361827,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614039118
    },
    {
        "content": "<p>we will probably want to intentionally disallow runtime handling of error payloads</p>",
        "id": 227361895,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614039139
    },
    {
        "content": "<p>the worry being that we don't want people using <code>catch_unwind</code> and downcast the <code>dyn Error</code> type and use it to actually propagate error types</p>",
        "id": 227361932,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614039175
    },
    {
        "content": "<p>probably worth surveying people who use that API and see what people do with the payload from <code>catch_unwind</code> if anything</p>",
        "id": 227362099,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614039256
    },
    {
        "content": "<p>I expect you'll find it's used most at ABI boundaries, since unwinding between Rust and C is UB</p>",
        "id": 227368925,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614043527
    },
    {
        "content": "<p>I use it at work to resume a panic after the C code returns: <a href=\"https://gitlab.com/YottaDB/Lang/YDBRust/-/blob/master/src/simple_api/mod.rs#L1403\">https://gitlab.com/YottaDB/Lang/YDBRust/-/blob/master/src/simple_api/mod.rs#L1403</a>, <a href=\"https://gitlab.com/YottaDB/Lang/YDBRust/-/blob/master/src/simple_api/mod.rs#L1580\">https://gitlab.com/YottaDB/Lang/YDBRust/-/blob/master/src/simple_api/mod.rs#L1580</a></p>",
        "id": 227369073,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614043601
    },
    {
        "content": "<p>An error would be nice, since as is you end up doing stuff like <a href=\"https://github.com/mozilla/ffi-support/blob/main/src/error.rs#L258-L269\">https://github.com/mozilla/ffi-support/blob/main/src/error.rs#L258-L269</a></p>",
        "id": 227371503,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1614045586
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> I guess I mean more specifically if anyone is doing anything with the payload after panicking other than re propagating it</p>",
        "id": 227454090,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614096077
    },
    {
        "content": "<p>Which it doesn't look like you are</p>",
        "id": 227454137,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614096085
    },
    {
        "content": "<p>Which is cool and perfect</p>",
        "id": 227454173,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614096091
    },
    {
        "content": "<p>And validates my theory that there's not really many good uses to the payload after a panic starts unwinding because it's already been reported</p>",
        "id": 227454468,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614096144
    },
    {
        "content": "<p>This post helped me understand why you can't just have a function return Result&lt;T, impl std::error::Error&gt; <a href=\"https://fasterthanli.me/articles/whats-in-the-box\">https://fasterthanli.me/articles/whats-in-the-box</a></p>",
        "id": 235120370,
        "sender_full_name": "Cam Cope",
        "timestamp": 1618800066
    },
    {
        "content": "<p>Though it does make me wish the compiler could just... walk the stack of functions that are called and calculate the max size, or something. But I think you guys already have some plans in the works for more ergonomic error handling, and it's probably more elegant/feasible</p>",
        "id": 235120827,
        "sender_full_name": "Cam Cope",
        "timestamp": 1618800661
    },
    {
        "content": "<p>The article might be a good source to borrow from when documenting the mechanics and limitations of handling errors generically though</p>",
        "id": 235120905,
        "sender_full_name": "Cam Cope",
        "timestamp": 1618800773
    },
    {
        "content": "<p>we don't have any specific changes yet in mind atm for improving ergonomics for defining error types, so proposals are definitely welcome. The one you've just described sounds similar to anon enums or some DST related ideas I've heard, but I don't think any of those ideas have had a successful RFC yet</p>",
        "id": 235224522,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1618856004
    },
    {
        "content": "<p>and ty for linking that blog post, I'll be sure to check it out</p>",
        "id": 235224586,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1618856034
    },
    {
        "content": "<p>and ill add it to the prior art issue for the book</p>",
        "id": 235224660,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1618856052
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/Reading/near/235224586\">said</a>:</p>\n<blockquote>\n<p>and ty for linking that blog post, I'll be sure to check it out</p>\n</blockquote>\n<p>everything by amos is top-tier, highly recommend</p>",
        "id": 235225537,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1618856441
    }
]