[
    {
        "content": "<p>So I think this idea is getting near the point where we should write an RFC. I had a call with <span class=\"user-mention\" data-user-id=\"310399\">@Mara</span> today where we talked a lot about the reporting ideas I was going to blog about and she largely convinced me that much of it possibly doesn't belong in std</p>",
        "id": 228020395,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614387871
    },
    {
        "content": "<p>im still re-evaluating</p>",
        "id": 228020400,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614387874
    },
    {
        "content": "<p>but there seems to be a minimal feature subset of the idea that we both agreed on completely, that I think could easily support the reporting hooks if it ends up making sense to include those in std</p>",
        "id": 228020459,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614387918
    },
    {
        "content": "<p>Heres the basic idea</p>",
        "id": 228020465,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614387926
    },
    {
        "content": "<p>add a <code>{:!}</code> specifier to the <code>fmt</code> grammar, this expects arguments to implement the <code>Error</code> trait, or possibly just deref / coerce to <code>&amp;dyn Error + 'static</code></p>",
        "id": 228020539,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614387971
    },
    {
        "content": "<p>when you print an error with this specifier it will actively utilize the <code>Error</code> trait interface to print the error, iterating over sources</p>",
        "id": 228020580,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614388012
    },
    {
        "content": "<p>the default format will be to do <code>error message: source error message: source source error message: ...</code></p>",
        "id": 228020613,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614388038
    },
    {
        "content": "<p>then <code>{:#!}</code> could do the multi line format similar to <code>eyre</code> /  <code>anyhow</code> and print the backtrace if one was captured</p>",
        "id": 228020632,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614388065
    },
    {
        "content": "<p>then we would specialize the <code>Termination</code> impl on <code>Result</code> to use this format specifier instead of <code>{:?}</code> when the error type impls <code>Error</code></p>",
        "id": 228020720,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614388116
    },
    {
        "content": "<p>additionally, we may want to specialize <code>unwrap</code> and <code>expect</code> to use this fmt specifier</p>",
        "id": 228020768,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614388156
    },
    {
        "content": "<p>One unanswered question:</p>",
        "id": 228020771,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614388162
    },
    {
        "content": "<p>I'd like to have the <code>{:!}</code> have special meaning when used in a <code>panic!</code> macro, where it includes the formatted string as the <code>Payload</code>, but also has the argument passed into <code>{:!}</code> preserved as the source error</p>",
        "id": 228020828,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614388207
    },
    {
        "content": "<p>assuming we've moved the error trait to core and added integration to <code>PanicInfo</code></p>",
        "id": 228020872,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614388255
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/.60.7B.3A!.7D.60.20fmt.20specifier.20RFC/near/228020539\">said</a>:</p>\n<blockquote>\n<p>add a <code>{:!}</code> specifier to the <code>fmt</code> grammar, this expects arguments to implement the <code>Error</code> trait, or possibly just deref / coerce to <code>&amp;dyn Error + 'static</code></p>\n</blockquote>\n<p>That seems inconsistent with other kinds of formatting specifiers, why tie this to the <code>Error</code> trait rather than adding <code>fmt::Bang</code> or similar?</p>",
        "id": 228020929,
        "sender_full_name": "nagisa",
        "timestamp": 1614388290
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/.60.7B.3A!.7D.60.20fmt.20specifier.20RFC/near/228020929\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/.60.7B.3A!.7D.60.20fmt.20specifier.20RFC/near/228020539\">said</a>:</p>\n<blockquote>\n<p>add a <code>{:!}</code> specifier to the <code>fmt</code> grammar, this expects arguments to implement the <code>Error</code> trait, or possibly just deref / coerce to <code>&amp;dyn Error + 'static</code></p>\n</blockquote>\n<p>That seems inconsistent with other kinds of formatting kinds, why tie this to the <code>Error</code> trait rather than adding <code>fmt::Bang</code> or similar?</p>\n</blockquote>\n<p>because the <code>Error</code> trait is about providing structured access to the context that needs to be reported, the goal here is to provide a Reporter built into our fmt machinery that consumes the error trait and lays out a simple report</p>",
        "id": 228021047,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614388383
    },
    {
        "content": "<p>You mentioned the default format, but I don't see how one would override it with something else in absence of such a trait.</p>",
        "id": 228021061,
        "sender_full_name": "nagisa",
        "timestamp": 1614388386
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/.60.7B.3A!.7D.60.20fmt.20specifier.20RFC/near/228021061\">said</a>:</p>\n<blockquote>\n<p>You mentioned the default format, but I don't see how one would override it with something else in absence of such a trait.</p>\n</blockquote>\n<p>via <code>Formatter</code> flags</p>",
        "id": 228021078,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614388402
    },
    {
        "content": "<p>the same way you can have an alt <code>Debug</code> format and a regular one with the same impl</p>",
        "id": 228021090,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614388420
    },
    {
        "content": "<p>you go <code>if f.alt() { // alternate formatting logic .. } else { // default formatting logic }</code></p>",
        "id": 228021146,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614388445
    },
    {
        "content": "<p>Right, but you can't customize how your type gets printed out via formatter flags. AFAICT you'd get A or B, where A and B are decided by libstd.</p>",
        "id": 228021157,
        "sender_full_name": "nagisa",
        "timestamp": 1614388449
    },
    {
        "content": "<p>yea</p>",
        "id": 228021175,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614388470
    },
    {
        "content": "<p>this is just providing a minimal not customizable set of formats for errors</p>",
        "id": 228021184,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614388484
    },
    {
        "content": "<p>like if there was a <code>fmt::Bang</code> trait</p>",
        "id": 228021219,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614388517
    },
    {
        "content": "<p>I'm missing context to discuss this, I guess.</p>",
        "id": 228021267,
        "sender_full_name": "nagisa",
        "timestamp": 1614388563
    },
    {
        "content": "<p>this would be like there was also a single type that implemented it, and it impls <code>fn new(error: &amp;dyn Error + 'static) -&gt; Bang&lt;'_&gt;</code> and every time you use a fmt macro it always wraps your error in the Bang and uses its Bang impl to print it</p>",
        "id": 228021301,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614388576
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/.60.7B.3A!.7D.60.20fmt.20specifier.20RFC/near/228021267\">said</a>:</p>\n<blockquote>\n<p>I'm missing context to discuss this, I guess.</p>\n</blockquote>",
        "id": 228021318,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614388614
    },
    {
        "content": "<p>so the context is, if you print an error using <code>Display</code> or <code>Debug</code> you usually lose context</p>",
        "id": 228021346,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614388637
    },
    {
        "content": "<p>because it wont iterate through the sources for you</p>",
        "id": 228021355,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614388645
    },
    {
        "content": "<p>so we want to make it easy and encouraged to print sources</p>",
        "id": 228021385,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614388675
    },
    {
        "content": "<p>right now the common way to do that is have a type that just wraps the dyn error and implements debug, then inside its debug impl iterates over sources and prints the report the way you want</p>",
        "id": 228021475,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614388726
    },
    {
        "content": "<p><code>{:!}</code> acts as if it was implicitly wrapping the error in a reporting type like this</p>",
        "id": 228021501,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614388763
    },
    {
        "content": "<p>and implies \"the format machinery will iterate over your sources and print this for you, using its pre-defined formats, with some customizability via format flags\"</p>",
        "id": 228021521,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614388798
    },
    {
        "content": "<p>this wouldn't be the full story on error reporting, but the idea is that more complex runtime error reporting is usually specific to the kind of application you're writing</p>",
        "id": 228021599,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614388851
    },
    {
        "content": "<p>and hard to abstract over</p>",
        "id": 228021603,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614388855
    },
    {
        "content": "<p>so we want to leave that to libraries for now</p>",
        "id": 228021608,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614388862
    },
    {
        "content": "<p>so eyre would still exist, and would let you customize your report formats and would just use <code>Debug</code></p>",
        "id": 228021634,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614388889
    },
    {
        "content": "<p>or actually it probably wouldn't but thats due to changes enabled by the new Try rfc</p>",
        "id": 228021651,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614388909
    },
    {
        "content": "<p>My two primary concerns here are: As a developer I typically want to print my errors as</p>\n<div class=\"codehilite\"><pre><span></span><code>error: &lt;display&gt;\n  caused by: &lt;display&gt;\n  caused by: ...\n</code></pre></div>\n<p>rather than a single line (or anything else) so to me being able to change how things end up looking is important. With that in mind I would end up being unable to utilize <code>{:!}</code> as proposed, much like I cannot utilize the termination trait (for the same reasons).</p>\n<p>On the rustc side of things, I find it somewhat weird to tie formatting machinery to an almost unrelated concept of error handling. On the other hand, I can see why you'd want the formatting machinery to be responsible for implementing the walking up the causation chain – if its left up to the user many will simply forget!</p>",
        "id": 228022598,
        "sender_full_name": "nagisa",
        "timestamp": 1614389614
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> <code>{:#!}</code> would look like the format you just mentioned</p>",
        "id": 228022938,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614389853
    },
    {
        "content": "<p>I wonder if specialization could be a solution to the problem of people wanting to specify a custom format/print.</p>",
        "id": 228022941,
        "sender_full_name": "nagisa",
        "timestamp": 1614389863
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/.60.7B.3A!.7D.60.20fmt.20specifier.20RFC/near/228022941\">said</a>:</p>\n<blockquote>\n<p>I wonder if specialization could be a solution to the problem of people wanting to specify a custom format/print.</p>\n</blockquote>\n<p>if we want to customize it then I think we'd use the same solution <code>eyre</code> does</p>",
        "id": 228022991,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614389886
    },
    {
        "content": "<p>which is to have a trait that is called to do the iteration and printing</p>",
        "id": 228023005,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614389897
    },
    {
        "content": "<p><code>fn report(&amp;self, error: &amp;(dyn Error + 'static), f: &amp;mut fmt::Formatter&lt;'_&gt;) -&gt; fmt::Result</code></p>",
        "id": 228023020,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614389934
    },
    {
        "content": "<p>then <code>{:!}</code> would just call this, and users could install their own reporter with a function like <code>set_hook</code> for panics</p>",
        "id": 228023056,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614389964
    },
    {
        "content": "<p>that was the original proposal</p>",
        "id": 228023065,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614389973
    },
    {
        "content": "<p>but <span class=\"user-mention\" data-user-id=\"310399\">@Mara</span> raised the point that the way you want to format it is often dependent upon the system you're using to report the error, and not necessarily universal across the application</p>",
        "id": 228023130,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614390017
    },
    {
        "content": "<p>so the default fmt machinery and panic might want to use some simple default formats, but <code>tracing</code> would probably have its own way of recording errors as structured data</p>",
        "id": 228023193,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614390077
    },
    {
        "content": "<p>and if you need to customize the output, then the right solution is probably to wrap it in another type that implements <code>Display</code></p>",
        "id": 228023224,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614390122
    },
    {
        "content": "<p>and that type can have the customizing hooks if you want like eyre</p>",
        "id": 228023282,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614390138
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/.60.7B.3A!.7D.60.20fmt.20specifier.20RFC/near/228023224\">said</a>:</p>\n<blockquote>\n<p>and if you need to customize the output, then the right solution is probably to wrap it in another type that implements <code>Display</code></p>\n</blockquote>\n<p>I've also sometimes seen this done as <code>fn something(&amp;self) -&gt; impl Display</code>, or whatever, instead of requiring passing the formatter to something.  Dunno if that fits what you're doing...</p>",
        "id": 228028884,
        "sender_full_name": "scottmcm",
        "timestamp": 1614396330
    },
    {
        "content": "<p>yea</p>",
        "id": 228028937,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614396369
    },
    {
        "content": "<p>thats pretty much how I'd recommend doing it in practice</p>",
        "id": 228028948,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614396375
    },
    {
        "content": "<p>that impl Display would probably be <code>impl Display + '_</code> and store the <code>&amp;self</code> ref inside it</p>",
        "id": 228028978,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614396409
    },
    {
        "content": "<p>If we do this, we should <em>also</em> make a fmt::Bang trait in general, and then errors simply always implement that trait</p>",
        "id": 228031046,
        "sender_full_name": "Lokathor",
        "timestamp": 1614398898
    },
    {
        "content": "<p>oooo</p>",
        "id": 228031053,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614398929
    },
    {
        "content": "<p>yes</p>",
        "id": 228031054,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614398929
    },
    {
        "content": "<p>because then we can make some sort of convention such as \"walk this\" for bang</p>",
        "id": 228031060,
        "sender_full_name": "Lokathor",
        "timestamp": 1614398947
    },
    {
        "content": "<p>eg, iterators can now bang fmt if their items can fmt, and it just prints out the iterator steps</p>",
        "id": 228031073,
        "sender_full_name": "Lokathor",
        "timestamp": 1614398964
    },
    {
        "content": "<p>I'd want to call it <code>std::fmt::Report</code></p>",
        "id": 228031274,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614399197
    },
    {
        "content": "<p>however there's also already a bit of awkwardness between debug / display / the other formatters, so maybe we could sit down and fix that up, and then use a design that is compatible with the current edition and also with a potential break for a future edition (if the fix up plan requires a break)</p>",
        "id": 228031275,
        "sender_full_name": "Lokathor",
        "timestamp": 1614399198
    },
    {
        "content": "<p>rather than <code>Bang</code></p>",
        "id": 228031276,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614399201
    },
    {
        "content": "<p>oh</p>",
        "id": 228031278,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614399217
    },
    {
        "content": "<p>wait you mean <code>fmt</code> refactor?</p>",
        "id": 228031280,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614399228
    },
    {
        "content": "<p>or do you mean how they interact with the error trait</p>",
        "id": 228031281,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614399235
    },
    {
        "content": "<p>because in the other topic today I talked a bunch about how I think the new <code>Try</code> trait lets us impl <code>Error</code> on <code>AnyError</code> style types</p>",
        "id": 228031343,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614399267
    },
    {
        "content": "<p>and this has massive implications, including on how well the fmt impls for errors compose</p>",
        "id": 228031349,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614399281
    },
    {
        "content": "<p>so my problem with them is that all the non-{debug | display} traits are supposed to be the Display form of whatever they do, and then they secretly also combine with the <code>?</code> to get a Debug form of that thing, but end users can't easily get this, so you don't benefit from that unless you've derived</p>",
        "id": 228031377,
        "sender_full_name": "Lokathor",
        "timestamp": 1614399317
    },
    {
        "content": "<p>i dont follow</p>",
        "id": 228031385,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614399355
    },
    {
        "content": "<p>so, like, <code>{:x}</code> for LowerHex, but you can also write <code>{:x?}</code> and that's Debug (LowerHexMode), the <code>?</code> \"wins\". Except users writing their own Debug impls can't see that the format was an <code>x</code> and print the debug numbers in lower hex, so if you didn't derive the impl then you don't get this special behavior</p>",
        "id": 228031511,
        "sender_full_name": "Lokathor",
        "timestamp": 1614399486
    },
    {
        "content": "<p><code>{:!?}</code> wouldn't be valid</p>",
        "id": 228031528,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614399516
    },
    {
        "content": "<p>but what about <code>{:x!}</code></p>",
        "id": 228031542,
        "sender_full_name": "Lokathor",
        "timestamp": 1614399540
    },
    {
        "content": "<p>ignored</p>",
        "id": 228031551,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614399549
    },
    {
        "content": "<p>or maybe just not accepted in the grammar</p>",
        "id": 228031564,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614399558
    },
    {
        "content": "<p>mmmmmaybethat'sfineiguess</p>",
        "id": 228031568,
        "sender_full_name": "Lokathor",
        "timestamp": 1614399576
    },
    {
        "content": "<p>lol</p>",
        "id": 228031570,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614399582
    },
    {
        "content": "<p>i still think we would be best served if we took a little time to make sure that formatting overall, as a system, was staying cohesive, and that we were leaving ourselves the most open space for the future</p>",
        "id": 228031635,
        "sender_full_name": "Lokathor",
        "timestamp": 1614399646
    },
    {
        "content": "<p>fair</p>",
        "id": 228031640,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614399662
    },
    {
        "content": "<p>I can draft an initial RFC that doesn't focus on the fmt integration</p>",
        "id": 228031661,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614399686
    },
    {
        "content": "<p>but on providing a reporter to drive the error trait interface in the basic case</p>",
        "id": 228031665,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614399704
    },
    {
        "content": "<p>or</p>",
        "id": 228031670,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614399713
    },
    {
        "content": "<p>iunno</p>",
        "id": 228031673,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614399714
    },
    {
        "content": "<p>is someone actively working on the fmt overhaul?</p>",
        "id": 228031723,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614399731
    },
    {
        "content": "<p>we could do a much more minimal change</p>",
        "id": 228031754,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614399775
    },
    {
        "content": "<p>and add a <code>report()</code> method that is blanket impled for errors</p>",
        "id": 228031781,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614399806
    },
    {
        "content": "<p>on some new trait</p>",
        "id": 228031791,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614399811
    },
    {
        "content": "<p>that just creates a <code>Display</code> type that does the formatting described</p>",
        "id": 228031799,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614399822
    },
    {
        "content": "<p>so <code>println!(\"Error: {}\", error.report());</code></p>",
        "id": 228031807,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614399841
    },
    {
        "content": "<p>It's a pet peeve of mine, but no one is working on it, because before today no one wanted to see any particular new stuff so i didn't feel pressed for time or anything.</p>",
        "id": 228031949,
        "sender_full_name": "Lokathor",
        "timestamp": 1614399974
    },
    {
        "content": "<p>this could just be a method couldnt it?</p>",
        "id": 228031964,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614400004
    },
    {
        "content": "<p>yeah it can just be a method that returns an <code>impl Display</code></p>",
        "id": 228031974,
        "sender_full_name": "Lokathor",
        "timestamp": 1614400020
    },
    {
        "content": "<p>if we require <code>: Sized</code></p>",
        "id": 228031990,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614400036
    },
    {
        "content": "<p>it could return...  &amp;dyn Display?</p>",
        "id": 228032001,
        "sender_full_name": "Lokathor",
        "timestamp": 1614400063
    },
    {
        "content": "<p>dont think so,</p>",
        "id": 228032006,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614400073
    },
    {
        "content": "<p>that would prevent temporaries</p>",
        "id": 228032009,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614400076
    },
    {
        "content": "<p>temporary whats?</p>",
        "id": 228032057,
        "sender_full_name": "Lokathor",
        "timestamp": 1614400109
    },
    {
        "content": "<p>wrappers that provide the Display impl</p>",
        "id": 228032058,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614400116
    },
    {
        "content": "<p>hm</p>",
        "id": 228032065,
        "sender_full_name": "Lokathor",
        "timestamp": 1614400132
    },
    {
        "content": "<p>i think making it <code>: Sized</code> is fine and possibly good</p>",
        "id": 228032081,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614400150
    },
    {
        "content": "<p>because we can still do a default impl that will work on dyn Errors</p>",
        "id": 228032088,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614400156
    },
    {
        "content": "<p>that returns the default <code>std::error::Report</code> type</p>",
        "id": 228032092,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614400163
    },
    {
        "content": "<p>that does the simple reporting via its Display impl</p>",
        "id": 228032093,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614400169
    },
    {
        "content": "<p>I think i prefer the <code>fmt</code> based solution though</p>",
        "id": 228032392,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614400515
    },
    {
        "content": "<p>because it more naturally leads to integration with the panic runtime</p>",
        "id": 228032395,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614400534
    },
    {
        "content": "<p>tho eeh</p>",
        "id": 228032461,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614400588
    },
    {
        "content": "<p>honestly that feels half baked</p>",
        "id": 228032463,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614400591
    },
    {
        "content": "<p>Making <code>!</code> a formatting flag rather than a separate specifier could be an option, which much like <code>fmt::Report</code> it would force users to carefully not miss implementing the walking of causation chain by themselves…</p>\n<p>The <code>#</code> flag could be repurposed too, e.g. to say that conventionally display impls with <code>#</code> should also format in their cause-chain somehow (that way not requiring any changes other than to how <code>Display</code> impls are written)</p>",
        "id": 228055379,
        "sender_full_name": "nagisa",
        "timestamp": 1614428821
    },
    {
        "content": "<p>I just saw this topic this morning. I like the general idea of having a standard \"format this as an error\" (and I like the suggestion of making it a trait, as well).</p>",
        "id": 228292596,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1614627353
    },
    {
        "content": "<p>I also wonder if <code>min_specialization</code> would be enough to be able to have specialized implementations for types that also implement <code>Error</code>.</p>",
        "id": 228292938,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1614627487
    }
]