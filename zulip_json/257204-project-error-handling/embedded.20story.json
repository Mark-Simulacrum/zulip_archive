[
    {
        "content": "<p>Hello! As someone who works on embedded and latency sensitive environments, being able to use the standard library is a breath of fresh air compared to C++, error handling alone was enough to convince many people at my team to consider rust. </p>\n<p>Reading the announcement has me both excited yet very very skeptical, excited because I use rust at home as well for fun projects and it will make that part easier, skeptical because the current way is ideal (lowest common denominator, works well with embedded and high latency requirements) </p>\n<ul>\n<li>Defining and codifying common error handling terminology.        -- sign me up</li>\n<li>Generating consensus on current error handling best practices . -- there is simply no best practice to fit all ecosystems </li>\n<li>Identifying pain points that exist in Rustâ€™s error handling story.    -- your crates are all examples of good iteration and search (as well as the presentation at rustconf)</li>\n<li>Communicating current error handling best practices.                     -- Good, you can communicate to one group without getting in the way of others</li>\n<li>Consolidating the Rust error handling ecosystem.                              -- As long as its not adopted by the stdlib. Consolidate external crates people pull in. </li>\n</ul>\n<p>One recurring theme I see in those points is best practices, those don't scale from a microcontroller to a web app to a server... etc. I am not sure what the goals of the working group are but if it is to adopt a single error handling story it will be going down the path of std and exceptions in C++</p>\n<p>final note, thank you to all the people whose names were mentioned in the announcement for your work</p>",
        "id": 210555837,
        "sender_full_name": "Antwan Gaggi",
        "timestamp": 1600452568
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281408\">@Antwan Gaggi</span> I think something especially valuable you could do is to continue advocating for the embedded story.</p>\n<p>I am biased, but I think that SNAFU <em>does</em> scale from microcontrollers to webservers (and I've used it as such!). The biggest missing piece for me is that <code>Error</code> is in libstd, not libcore. At least this is a well-known pain point that people have expressed interest in addressing.</p>",
        "id": 210556253,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1600452772
    },
    {
        "content": "<p>But explaining how you see the differences in the different worlds and how those impact your design decisions is invaluable.</p>",
        "id": 210556420,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1600452852
    },
    {
        "content": "<p>some sort of non-boxing solution is what's necessary for <code>core</code></p>",
        "id": 210562396,
        "sender_full_name": "Lokathor",
        "timestamp": 1600455868
    },
    {
        "content": "<blockquote>\n<p>One recurring theme I see in those points is best practices, those don't scale from a microcontroller to a web app to a server... etc. I am not sure what the goals of the working group are but if it is to adopt a single error handling story it will be going down the path of std and exceptions in C++</p>\n</blockquote>\n<p>When I drafted the charter I didn't really imagine a single error handling solution that everyone should adopt. I mean more of documenting all the different tools available and how to best leverage them. Some of this would be more specific to micro controllers and some would be more specific to web apps and so on.</p>",
        "id": 210562662,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600456042
    },
    {
        "content": "<blockquote>\n<p>some sort of non-boxing solution is what's necessary for <code>core</code></p>\n</blockquote>\n<p>Which is part of the reason that SNAFU doesn't require boxing :-)</p>",
        "id": 210564716,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1600457091
    },
    {
        "content": "<p>more on the core boxing btw <a href=\"https://github.com/rust-lang/project-error-handling/issues/3\">https://github.com/rust-lang/project-error-handling/issues/3</a></p>",
        "id": 210564945,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600457231
    }
]