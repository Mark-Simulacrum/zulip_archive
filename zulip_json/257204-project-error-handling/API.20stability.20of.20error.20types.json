[
    {
        "content": "<p>it feels like api stability is probably something we will want to explore as a group and document all the options and their tradeoffs</p>",
        "id": 210677589,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600624810
    },
    {
        "content": "<p>my view is that between non exhaustive enums and opaque enums neither is \"correct\"</p>",
        "id": 210677653,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600624896
    },
    {
        "content": "<p>all the options have their tradeoffs and are valid and the correct one to use depends on your needs</p>",
        "id": 210677691,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600624924
    },
    {
        "content": "<p>I wholeheartedly agree. If nothing else, I'd like to <em>raise awareness</em> that error types are a part of the crates public API. I think it's far too easy to think of them as second-class things and not pay attention to that aspect of them.</p>",
        "id": 210678068,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1600625459
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/API.20stability.20of.20error.20types/near/210677653\">said</a>:</p>\n<blockquote>\n<p>my view is that between non exhaustive enums and opaque enums neither is \"correct\"</p>\n</blockquote>\n<p>What are these error types?</p>",
        "id": 210679391,
        "sender_full_name": "Seán Kelleher",
        "timestamp": 1600627401
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"344273\">@Seán Kelleher</span> I don't understand the question</p>",
        "id": 210679400,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600627441
    },
    {
        "content": "<p>Sorry, I just didn't understand the terms; are these approaches for error handling?</p>",
        "id": 210679511,
        "sender_full_name": "Seán Kelleher",
        "timestamp": 1600627565
    },
    {
        "content": "<p>Also, I agree with the premise of supporting different approaches to error handling; I think exhaustive error handling should be possible ideally but should be opt-in, as it might not be necessary or even desirable for a given project.</p>",
        "id": 210679585,
        "sender_full_name": "Seán Kelleher",
        "timestamp": 1600627716
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"344273\">Seán Kelleher</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/API.20stability.20of.20error.20types/near/210679511\">said</a>:</p>\n<blockquote>\n<p>Sorry, I just didn't understand the terms; are these approaches for error handling?</p>\n</blockquote>\n<p>It's not fully clear to me either, the developer documentation covering opaque<br>\ntypes is less than clear (no pun intended). I believe non-exhaustive refers to<br>\ncases where a <code>match</code> is allowed to omit one or more enum variants.</p>",
        "id": 210679609,
        "sender_full_name": "oliver",
        "timestamp": 1600627794
    },
    {
        "content": "<p>they're both approaches to structuring errors to allow later changes in backwards compatible ways</p>",
        "id": 210680245,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600628738
    },
    {
        "content": "<p>for non exhaustive you use the #[non_exhaustive] annotation on your type definition and variants to prevent downstream users from matching on them exhaustively or constructing them</p>",
        "id": 210680313,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600628823
    },
    {
        "content": "<p>in the opaque type case you hide the inner values and have a kind enum usually within a struct or something and then you expose some methods for reacting to specific error kinds</p>",
        "id": 210680332,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600628861
    },
    {
        "content": "<p>such as a kind function or maybe a PartialEq implementation or w.e</p>",
        "id": 210680339,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600628876
    },
    {
        "content": "<p>there's a lot of ways to do the opaque error type approach</p>",
        "id": 210680378,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600628888
    },
    {
        "content": "<p>I personally tend to prefer non exhaustive enums but I'll use opaque errors in cases where I want to hide internals</p>",
        "id": 210680390,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600628908
    },
    {
        "content": "<p>or when I want to have members that are shared between every error kind without repeating myself a ton</p>",
        "id": 210680397,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600628925
    },
    {
        "content": "<p>I bet you could also do some sort of associated consts thing like how tracing manages their LEVEL enum</p>",
        "id": 210680412,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600628969
    },
    {
        "content": "<p>never seen someone do that for errors tho</p>",
        "id": 210680424,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600628990
    },
    {
        "content": "<p>Is \"opaque error\" a term that other people use? I only know of it from <a href=\"https://docs.rs/snafu/0.6.8/snafu/guide/opaque/index.html\">my usage in SNAFU</a>.</p>",
        "id": 210680611,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1600629260
    },
    {
        "content": "<p>Stating the problem with code:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">enum</span> <span class=\"nc\">Error</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">CaseOne</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">CaseTwo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">source</span>: <span class=\"nc\">other_crate</span>::<span class=\"n\">SomeError</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>With this semi-common definition, the library exposing <code>Error</code> can't:</p>\n<ul>\n<li>Add a variant</li>\n<li>Remove a variant</li>\n<li>Add fields to a variant</li>\n<li>Remove fields from a variant</li>\n<li>Change the type of a field in a variant</li>\n<li>Change the name of a field in a variant</li>\n<li>Change a variant from tuple-like to struct-like or vice-versa</li>\n<li>Upgrade the <code>other_crate</code> to a semver-incompatible version</li>\n</ul>\n<p>without breaking its own semver</p>",
        "id": 210680788,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1600629510
    },
    {
        "content": "<p>You can add <a href=\"https://doc.rust-lang.org/reference/attributes/type_system.html\"><code>#[non_exhaustive]</code></a> to the enum and each variant to address some but not all of those cases.</p>",
        "id": 210680855,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1600629610
    },
    {
        "content": "<p>specifically, adding that attribute allows you to </p>\n<ul>\n<li>Add a variant</li>\n<li>Add fields to a variant</li>\n</ul>\n<p>without breaking semver</p>",
        "id": 210680860,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1600629643
    },
    {
        "content": "<p>That's because <code>#[non_exhaustive]</code> effectively adds a \"fake\" variant / field that is private and cannot be matched on.</p>",
        "id": 210680916,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1600629726
    },
    {
        "content": "<p>Private to the downstream crates?</p>",
        "id": 210680949,
        "sender_full_name": "oliver",
        "timestamp": 1600629825
    },
    {
        "content": "<p>So upstream can't match on it explicitly but downstream extends it locally and this is enabled through non-exhaustive generic <code>match</code>logic in the upstream code</p>",
        "id": 210681013,
        "sender_full_name": "oliver",
        "timestamp": 1600629926
    },
    {
        "content": "<p>I feel like opaque type is a pretty common term in rust even outside of error handling but that might just be me</p>",
        "id": 210681169,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600630135
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281739\">@oliver</span> I feel like you are using \"upstream\" and \"downstream\" differently than I expect, as well as \"private <strong>to</strong>\".</p>\n<p>The crate that exposes the <code>Error</code> enum effectively has private variants / fields thanks to <code>non_exhaustive</code>. This prevents a consumer of the crate from matching on those without including a catch-all pattern (<code>..</code>). That's what allows adding new variants / fields.</p>",
        "id": 210681590,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1600630702
    },
    {
        "content": "<p><a href=\"https://rustc-dev-guide.rust-lang.org/opaque-types-type-alias-impl-trait.html\">https://rustc-dev-guide.rust-lang.org/opaque-types-type-alias-impl-trait.html</a></p>\n<p>Opaque Type is indeed a thing in Rust. Is this what you are referring to, or are you using the term in a more generic \"the inner part of my struct is all private\" manner?</p>",
        "id": 210681943,
        "sender_full_name": "Jason Smith",
        "timestamp": 1600631224
    },
    {
        "content": "<p>ooh, I'm referring to the latter</p>",
        "id": 210682444,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600631932
    },
    {
        "content": "<p>not existential types</p>",
        "id": 210682446,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600631936
    },
    {
        "content": "<p>I’m (trying) to only say “opaque error”, related to but different from “opaque type”. My meaning is inner value/type is private.</p>",
        "id": 210682453,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1600631949
    },
    {
        "content": "<p>Although I mentioned in another topic that <code>impl Error</code> is a possibility, but not I’ve ever seen.</p>",
        "id": 210682518,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1600632063
    },
    {
        "content": "<p>I made a crate to work with impl errors but I never tried popularizing It because of probably obvious reasons</p>",
        "id": 210682528,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600632092
    },
    {
        "content": "<p>but check it out</p>",
        "id": 210682531,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600632096
    },
    {
        "content": "<p>Mostly because I think it would involve generics in a way that are uncommon.</p>",
        "id": 210682536,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1600632111
    },
    {
        "content": "<p><a href=\"https://docs.rs/adhocerr/0.1.2/adhocerr/\">https://docs.rs/adhocerr/0.1.2/adhocerr/</a></p>",
        "id": 210682546,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600632122
    },
    {
        "content": "<p>slightly off topic</p>",
        "id": 210682598,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600632176
    },
    {
        "content": "<p>back to opaque errors, Id be fine with standardizing on that terminology but we should definitely keep an eye on it to see if it's causing too much confusion with existential types</p>",
        "id": 210682613,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600632211
    },
    {
        "content": "<p>standardizing on that within discussions in the project group and in our writings* that is</p>",
        "id": 210682642,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600632243
    },
    {
        "content": "<p>I wasn’t even trying to popularize that specific term (and was surprised other people used it) 😲</p>",
        "id": 210682670,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1600632294
    },
    {
        "content": "<p>It might help avoid confusion to discuss this concept (in our writings) as \"Public Error API\" vs \"private error fields\"</p>",
        "id": 210682745,
        "sender_full_name": "must-compute",
        "timestamp": 1600632415
    },
    {
        "content": "<p>since the main concern is <code>semver</code> breakage, from what I understand above.</p>",
        "id": 210682781,
        "sender_full_name": "must-compute",
        "timestamp": 1600632477
    },
    {
        "content": "<p>actually nvm what I'm suggesting might also cause confusion</p>",
        "id": 210683120,
        "sender_full_name": "must-compute",
        "timestamp": 1600632892
    },
    {
        "content": "<p>I wonder if it would be possible to add a feature to make the contents of an enum less exposed</p>",
        "id": 210684215,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600634278
    },
    {
        "content": "<p>I'm assuming there isn't but I don't know the history behind the decision to make enums pub by default</p>",
        "id": 210684264,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600634301
    },
    {
        "content": "<p>another thing that I think would be useful in the context of error handling is private trait impls</p>",
        "id": 210684274,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600634334
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/API.20stability.20of.20error.20types/near/210684264\">said</a>:</p>\n<blockquote>\n<p>I'm assuming there isn't but I don't know the history behind the decision to make enums pub by default</p>\n</blockquote>\n<p><a href=\"https://github.com/rust-lang/rust/issues/8122\">https://github.com/rust-lang/rust/issues/8122</a> has some context</p>",
        "id": 210684275,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600634336
    },
    {
        "content": "<p>Aren't there issues with fat-pointers to objects with hidden properties?</p>",
        "id": 210684372,
        "sender_full_name": "oliver",
        "timestamp": 1600634463
    },
    {
        "content": "<p>This starts to look like a FFI to me</p>",
        "id": 210684388,
        "sender_full_name": "oliver",
        "timestamp": 1600634509
    },
    {
        "content": "<p>looks like the logic was if you need a private enum you can just wrap it in a struct and it's better to have fewer keywords</p>",
        "id": 210684448,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600634563
    },
    {
        "content": "<p>Mmmmmm private trait impls.</p>",
        "id": 210684486,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1600634640
    },
    {
        "content": "<blockquote>\n<p>Aren't there issues with fat-pointers to objects with hidden properties?</p>\n</blockquote>\n<p>not sure, I didn't imagine you'd still be able to make trait objects to it, the reason I want it is so you can have from impls for external types on your error type without exposing that in your api</p>",
        "id": 210684530,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600634655
    },
    {
        "content": "<p>but I could see how that could cause issue if someone tried to turn it into a dyn From and return it from their API</p>",
        "id": 210684556,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600634694
    },
    {
        "content": "<p>I imagined that's ~how it would function.</p>",
        "id": 210684653,
        "sender_full_name": "oliver",
        "timestamp": 1600634834
    },
    {
        "content": "<p>There are also anonymous enum types</p>",
        "id": 210691332,
        "sender_full_name": "oliver",
        "timestamp": 1600645903
    },
    {
        "content": "<p><a href=\"https://internals.rust-lang.org/t/ideas-around-anonymous-enum-types/12627\">https://internals.rust-lang.org/t/ideas-around-anonymous-enum-types/12627</a></p>",
        "id": 210691371,
        "sender_full_name": "oliver",
        "timestamp": 1600645934
    },
    {
        "content": "<p>Maybe off topic here as well not sure</p>",
        "id": 210691381,
        "sender_full_name": "oliver",
        "timestamp": 1600646008
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281739\">oliver</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/API.20stability.20of.20error.20types/near/210691332\">said</a>:</p>\n<blockquote>\n<p>There are also anonymous enum types</p>\n</blockquote>\n<p>That's effectively a large part of the discussion in <a class=\"stream-topic\" data-stream-id=\"257204\" href=\"/#narrow/stream/257204-project-error-handling/topic/Better.20enums\">#project-error-handling &gt; Better enums</a></p>",
        "id": 210691440,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1600646148
    },
    {
        "content": "<p>Well that's a 210 comment thread.. I'm going to need to a tl;dr summary. What<br>\nelse could have parenthesis added for the group? A survey of what we are calling<br>\n<code>opaque errors</code> as distinct from <code>opaque types</code>? Do projects often accumulate<br>\nshared notes and references?</p>",
        "id": 210757065,
        "sender_full_name": "oliver",
        "timestamp": 1600701808
    },
    {
        "content": "<blockquote>\n<p>Well that's a 210 comment thread.. I'm going to need to a tl;dr summary.</p>\n</blockquote>\n<p>There is a discussion about how best to define errors and what improvements can be made, and a lot  of the early discussion in the thread centered around anon enums but that discussion didn't get super far because there are a lot of unresolved questions about stuff such as how do you unify the enums, name the types, etc</p>",
        "id": 210767839,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600706712
    },
    {
        "content": "<blockquote>\n<p>What else could have parenthesis added for the group? A survey of what we are calling<br>\nopaque errors as distinct from opaque types?</p>\n</blockquote>",
        "id": 210767881,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600706735
    },
    {
        "content": "<p>I don't understand this question</p>",
        "id": 210767890,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600706740
    },
    {
        "content": "<blockquote>\n<p>Do projects often accumulate shared notes and references?</p>\n</blockquote>\n<p>I don't know but I think it would be a good idea for the error handling project group even if there isn't any precedent for creating shared notes and references if only because I expect a large amount of our work is going to be producing learning materials.</p>",
        "id": 210768151,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600706872
    },
    {
        "content": "<p>I'll share my notes on that forum thread when finished.</p>",
        "id": 210779509,
        "sender_full_name": "oliver",
        "timestamp": 1600712073
    }
]