[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> Not being able to derive <code>Display</code> isn't a thing for <em>absolutely no good reason at all</em></p>",
        "id": 210669711,
        "sender_full_name": "Lokathor",
        "timestamp": 1600612759
    },
    {
        "content": "<p>That seems like a strong opinion you have that isnâ€™t immediately relevant to this topic of enums. Perhaps it would be better elsewhere?</p>",
        "id": 210669761,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1600612846
    },
    {
        "content": "<p>Well if we could drive Display we could also derive Error, was the context there is all. We don't need to elaborate on it too much though.</p>",
        "id": 210669776,
        "sender_full_name": "Lokathor",
        "timestamp": 1600612895
    },
    {
        "content": "<p>Topics are cheap, creating one is easy.</p>\n<p>no worries, I did it for you.</p>",
        "id": 210669838,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1600613012
    },
    {
        "content": "<p>i was writing a rfc for derivin display in 2019, things happened in life so didn't get about finishing it. Gonna give it a try soon</p>",
        "id": 210669840,
        "sender_full_name": "DPC",
        "timestamp": 1600613013
    },
    {
        "content": "<p>Actually I think the better long term plan, for errors, is something like jane's Reporter system, in which case the Error trait that goes with that can just drop the Display bound entirely.</p>",
        "id": 210669897,
        "sender_full_name": "Lokathor",
        "timestamp": 1600613124
    },
    {
        "content": "<p>I am curious why Display is non-derivable, it is stated that it is so <code>by design</code> because it is user-facing. Is there a specific rule in the language regarding which traits should be derivable and which not?</p>",
        "id": 210669968,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1600613277
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"344196\">@Jakub Duchniewicz</span> Could you share what the result of deriving <code>Display</code> would be for some representative types?</p>",
        "id": 210670398,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1600613894
    },
    {
        "content": "<p>I would like to derive Display the way thiserror does it, where it's basically the same as a handwritten impl but without boilerplate</p>",
        "id": 210670665,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600614294
    },
    {
        "content": "<p>so you'd have</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"cp\">#[derive(Display)]</span><span class=\"w\"></span>\n<span class=\"k\">enum</span> <span class=\"nc\">Err</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"cp\">#[display = </span><span class=\"s\">&quot;file not found&quot;</span><span class=\"cp\">]</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"n\">NotFound</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>or something like that</p>",
        "id": 210670685,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600614329
    },
    {
        "content": "<p>if it's in std, it might not want to do all the tricky bits with fields (<code>display = \"{.0}\"</code>), I'd be fine with requiring an explicit <code>impl Display</code> for that</p>",
        "id": 210670730,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600614373
    },
    {
        "content": "<p>there was some concerns for Display, as to what it \"form\" it would choose since it is user facing</p>",
        "id": 210670824,
        "sender_full_name": "DPC",
        "timestamp": 1600614555
    },
    {
        "content": "<p>Do <em>any</em> compiler-provided derives use associated attributes?</p>\n<blockquote>\n<p>the way thiserror does it,</p>\n</blockquote>\n<p>FWIW, SNAFU does something similar:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"cp\">#[derive(Display)]</span><span class=\"w\"></span>\n<span class=\"k\">enum</span> <span class=\"nc\">Err</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"cp\">#[snafu(display(</span><span class=\"s\">&quot;file not found {}&quot;</span><span class=\"cp\">, foo))]</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"n\">NotFound</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">foo</span>: <span class=\"kt\">i32</span> <span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>We forbid enums without named fields, partially because of the <code>.0</code> issue.</p>",
        "id": 210671095,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1600614954
    },
    {
        "content": "<p>wait, <span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> how would using a reporter let us drop the Display bound from the error trait?</p>",
        "id": 210671342,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600615378
    },
    {
        "content": "<p>something like eyre still needs display</p>",
        "id": 210671356,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600615416
    },
    {
        "content": "<p>I do have some ideas about a 3rd fmt trait called Report that could be used to fix some of the reporting inconsistencies at expect/unwrap/Termination</p>",
        "id": 210671407,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600615455
    },
    {
        "content": "<p>but that's also only half baked right now</p>",
        "id": 210671408,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600615464
    },
    {
        "content": "<p>and that plan relies on specialization so it's not gonna happen any time soon</p>",
        "id": 210671416,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600615487
    },
    {
        "content": "<p>i guess some code somewhere needs to know how to print a problem, and in that sense maybe it needs Display still, but i was initially thinking/hoping that the reporter would be smart enough via (<em>insert magic here</em>) to turn a plain Debug impl of an error into a report.</p>",
        "id": 210671486,
        "sender_full_name": "Lokathor",
        "timestamp": 1600615579
    },
    {
        "content": "<p>personally I wouldn't <em>want</em> debug and display to be the same or similar most of the time</p>",
        "id": 210671530,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600615683
    },
    {
        "content": "<p>except in trivial cases like <code>fn fmt(&amp;self) { self.0.fmt() }</code></p>",
        "id": 210671565,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600615742
    },
    {
        "content": "<p>agreed</p>",
        "id": 210671711,
        "sender_full_name": "DPC",
        "timestamp": 1600616015
    },
    {
        "content": "<p>That is exactly what I do almost always want out of the impl</p>",
        "id": 210672056,
        "sender_full_name": "Lokathor",
        "timestamp": 1600616639
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"344196\">Jakub Duchniewicz</span> Could you share what the result of deriving <code>Display</code> would be for some representative types?</p>\n</blockquote>\n<p>My bad, I read up the docs once again and I understand why it is non-derivable now :) <br>\nA stray thought(probably already thought over) - can't we check if a given type violates the UTF-8 requirement during compilation, thus informing user that the given type cannot derive <code>Display</code>?</p>",
        "id": 210675851,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1600622406
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"344196\">Jakub Duchniewicz</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/Deriving.20Display/near/210675851\">said</a>:</p>\n<blockquote>\n<p>can't we check if a given type violates the UTF-8 requirement during compilation, thus informing user that the given type cannot derive <code>Display</code>?</p>\n</blockquote>\n<p>I'm not following exactly what you mean by this. UTF-8  is semi-related, but ultimately feels fairly orthogonal to the point.</p>",
        "id": 210676077,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1600622721
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116155\">Jake Goulding</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/Deriving.20Display/near/210676077\">said</a>:</p>\n<blockquote>\n<p>I'm not following exactly what you mean by this. UTF-8  is semi-related, but ultimately feels fairly orthogonal to the point.</p>\n</blockquote>\n<p>Maybe I am utterly confused about why we cannot derive <code>Display</code>, but the <a href=\"https://doc.rust-lang.org/std/fmt/index.html#fmtdisplay-vs-fmtdebug\">docs</a> state it is related to UTF-8 representation of the deriving struct's fields.</p>",
        "id": 210676428,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1600623213
    },
    {
        "content": "<p>Hmm, those docs are a bit unfortunate. I prefer those <a href=\"https://doc.rust-lang.org/std/fmt/trait.Display.html\">on <code>Display</code> itself</a>:</p>\n<blockquote>\n<p>Display is similar to Debug, but Display is for user-facing output, and so cannot be derived.</p>\n</blockquote>",
        "id": 210676729,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1600623656
    },
    {
        "content": "<p>If the derive would produce inappropriate output for a type, just don't derive in that case.</p>",
        "id": 210677261,
        "sender_full_name": "Lokathor",
        "timestamp": 1600624430
    },
    {
        "content": "<p>Mmm, what exactly is it in std::error::Error that requires display formatting...? Is there a reason Debug wouldn't be good enough...? Because the repr is unstable, I guess?</p>",
        "id": 210720389,
        "sender_full_name": "Jubilee",
        "timestamp": 1600681693
    },
    {
        "content": "<p>No code in <code>Error</code> requires <code>Display</code>. Itâ€™s a semantic requirement â€” errors are generally shown to a human being. <code>Debug</code> is meant to be shown to programmers, not human beings.</p>",
        "id": 210727577,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1600687081
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/zuFA5zwdR6QOahbjSRA07CqG/rust_humanity.png\">rust_humanity.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/zuFA5zwdR6QOahbjSRA07CqG/rust_humanity.png\" title=\"rust_humanity.png\"><img src=\"/user_uploads/4715/zuFA5zwdR6QOahbjSRA07CqG/rust_humanity.png\"></a></div>",
        "id": 210734640,
        "sender_full_name": "Jubilee",
        "timestamp": 1600691976
    },
    {
        "content": "<p>omg</p>",
        "id": 210737134,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600693286
    },
    {
        "content": "<p>lol</p>",
        "id": 210737136,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600693287
    },
    {
        "content": "<p>yea, I'd say that Display is the interface to an individual error's \"error message\". Debug almost always ends up being the interface to a description of it's content.</p>",
        "id": 210737298,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600693353
    },
    {
        "content": "<p>if we switched to debug we'd still have to do all the same manual definition except now we'd be competing with the pre existing debug derive</p>",
        "id": 210737394,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600693399
    }
]