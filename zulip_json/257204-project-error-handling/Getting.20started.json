[
    {
        "content": "<p>Hi! I'm keen to help with the error handling work. Is there somewhere I can find a summary of current status and work in progress? Are there 'good first issues' I could look at?</p>",
        "id": 244500617,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1625094963
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256841\">@Nick Cameron</span> I'm excited to have your help <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span>. Right now the best sources are probably the issue tracker on the project error handling repo, the project board in the same repo, or the A-error-handling tag on the rust repo, or our action items list.</p>",
        "id": 244502927,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1625096754
    },
    {
        "content": "<p>Gimmi a second to dig up the link to the last agenda which links to previous agendas and the action items</p>",
        "id": 244502982,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1625096776
    },
    {
        "content": "<p><a href=\"https://hackmd.io/gWLFTxoSTimmrqHMq226Ug\">https://hackmd.io/gWLFTxoSTimmrqHMq226Ug</a></p>",
        "id": 244503045,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1625096870
    },
    {
        "content": "<p>Sadly haven't had a ton of time to push error handling project group work along these last couple weeks because of rust foundation work</p>",
        "id": 244503125,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1625096925
    },
    {
        "content": "<p>Great, thanks! I'll take a look. I'm kind of busy with onboarding stuff at MS + catching up with Rust, so I might be a bit slow to start, I'll get stuck in soon :-)</p>",
        "id": 244504519,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1625098266
    },
    {
        "content": "<p>Hype</p>",
        "id": 244507451,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1625101070
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256841\">@Nick Cameron</span> just got this published today: <a href=\"https://blog.rust-lang.org/inside-rust/2021/07/01/What-the-error-handling-project-group-is-working-towards.html\">https://blog.rust-lang.org/inside-rust/2021/07/01/What-the-error-handling-project-group-is-working-towards.html</a></p>",
        "id": 244634043,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1625177980
    },
    {
        "content": "<p>and it gives a pretty good overview of the current goals we have</p>",
        "id": 244634062,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1625177994
    },
    {
        "content": "<p>Awesome, thanks!</p>",
        "id": 244637582,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1625180485
    },
    {
        "content": "<p>So, question, in the shiny future outlined in the blog post, how do crates like Eyre fit in? Would they take advantage of the new Report type stuff? Would the interface to Eyre change?</p>",
        "id": 245265141,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1625709650
    },
    {
        "content": "<p>no change, std::error::Report can be thought of as an extremely basic version of <code>eyre::Report</code>, though it's not even meant to act as a trait object</p>",
        "id": 245265161,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1625709693
    },
    {
        "content": "<p>its just a minimal version of the reporting part of eyre</p>",
        "id": 245265164,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1625709700
    },
    {
        "content": "<p>eyre's default reporter might use <code>std::error::Report</code></p>",
        "id": 245265171,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1625709712
    },
    {
        "content": "<p>but beyond that it's still the thing you'd reach for when you want something more complicated like context alongside errors and thin pointer trait objects</p>",
        "id": 245265222,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1625709740
    },
    {
        "content": "<p>So, if you're using Eyre (for example), when you call report on an error, it would return eyre::Report rather than std::Report?</p>",
        "id": 245266291,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1625711308
    },
    {
        "content": "<p>Or different configurations of eyre would return different report types?</p>",
        "id": 245266325,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1625711399
    },
    {
        "content": "<p>it would return eyre::Report</p>",
        "id": 245266371,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1625711414
    },
    {
        "content": "<p>but <code>impl EyreHandler for DefaultHandler</code> might internally call <code>std::error::Report</code> when formatting errors</p>",
        "id": 245266380,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1625711437
    }
]