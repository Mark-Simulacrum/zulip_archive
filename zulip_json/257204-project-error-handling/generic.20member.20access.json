[
    {
        "content": "<p>I've been experimenting with the generic member access implementation in dyno. I think I have a similar but simpler API for the 'object provider' case. I think it handles the same requirements - no explicit type id comparison, supports references (at least those with a  lifetime bound by self) and ?Sized types, does not require Box, supports by value.</p>",
        "id": 248297870,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1628037481
    },
    {
        "content": "<p><a href=\"https://gist.github.com/nrc/293e88c0e796114ef181d1b2d5e1ac7e\">https://gist.github.com/nrc/293e88c0e796114ef181d1b2d5e1ac7e</a></p>",
        "id": 248297889,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1628037484
    },
    {
        "content": "<p>One worry is casting too and from *mut u8, which I don't recall if that is sound or not. The other worry is that maintaining the lifetime of references is pretty fragile and I'm not convinced it's sound in all variance scenarios.</p>",
        "id": 248298033,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1628037617
    },
    {
        "content": "<p>Plus its probably wildly broken in ways I don't understand</p>",
        "id": 248298045,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1628037634
    },
    {
        "content": "<p>Anyway, please take a look and tell me what I screwed up!</p>",
        "id": 248298069,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1628037675
    },
    {
        "content": "<p>Iâ€™m not sure how it handles the closure use case for async runtimes</p>",
        "id": 248302858,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1628041817
    },
    {
        "content": "<p>I found one lifetime error already!</p>",
        "id": 248303629,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1628042649
    },
    {
        "content": "<p>Gist updated to address the lifetime issue and add some comments</p>",
        "id": 248306091,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1628045986
    },
    {
        "content": "<p>In terms of pros/cons, with dyno, the Tags are more first class, which means you can write your own for your types to support more complicated types such as &amp;'a Foo&lt;'b&gt; (my provider only supports &amp;'a Foo&lt;'static&gt;), however, the end user does have to write these tags and if you have to specify the generic type parameters, you have to specify the tag rather than the type. C.f., my proposal where the type is specified. E.g., err.context::&lt;TagType&gt;()</p>",
        "id": 248307919,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1628048573
    },
    {
        "content": "<p>Is your version of the provider API implemented ontop of Tag?</p>",
        "id": 248307935,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628048629
    },
    {
        "content": "<p>Haven't had a chance yet to look at it in detail</p>",
        "id": 248307938,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628048639
    },
    {
        "content": "<p>Looks like no</p>",
        "id": 248307992,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628048671
    },
    {
        "content": "<p>No, it uses type tags, but they are not abstracted with a trait</p>",
        "id": 248308572,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1628049556
    },
    {
        "content": "<p>taking a look at the version you setup <span class=\"user-mention\" data-user-id=\"256841\">@Nick Cameron</span> it doesn't seem like it would still cover the futures executor case</p>",
        "id": 248517082,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628188341
    },
    {
        "content": "<p>or at least i don't understand how it would if T: 'static</p>",
        "id": 248517164,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628188390
    },
    {
        "content": "<p>ah i guess that's what you meant by \"for the object provider case\"</p>",
        "id": 248517328,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628188466
    },
    {
        "content": "<p>seems like a reasonable option to include in the RFC</p>",
        "id": 248517352,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628188484
    }
]