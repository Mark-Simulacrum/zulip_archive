[
    {
        "content": "<p>I've been experimenting with the generic member access implementation in dyno. I think I have a similar but simpler API for the 'object provider' case. I think it handles the same requirements - no explicit type id comparison, supports references (at least those with a  lifetime bound by self) and ?Sized types, does not require Box, supports by value.</p>",
        "id": 248297870,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1628037481
    },
    {
        "content": "<p><a href=\"https://gist.github.com/nrc/293e88c0e796114ef181d1b2d5e1ac7e\">https://gist.github.com/nrc/293e88c0e796114ef181d1b2d5e1ac7e</a></p>",
        "id": 248297889,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1628037484
    },
    {
        "content": "<p>One worry is casting too and from *mut u8, which I don't recall if that is sound or not. The other worry is that maintaining the lifetime of references is pretty fragile and I'm not convinced it's sound in all variance scenarios.</p>",
        "id": 248298033,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1628037617
    },
    {
        "content": "<p>Plus its probably wildly broken in ways I don't understand</p>",
        "id": 248298045,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1628037634
    },
    {
        "content": "<p>Anyway, please take a look and tell me what I screwed up!</p>",
        "id": 248298069,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1628037675
    },
    {
        "content": "<p>Iâ€™m not sure how it handles the closure use case for async runtimes</p>",
        "id": 248302858,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1628041817
    },
    {
        "content": "<p>I found one lifetime error already!</p>",
        "id": 248303629,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1628042649
    },
    {
        "content": "<p>Gist updated to address the lifetime issue and add some comments</p>",
        "id": 248306091,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1628045986
    },
    {
        "content": "<p>In terms of pros/cons, with dyno, the Tags are more first class, which means you can write your own for your types to support more complicated types such as &amp;'a Foo&lt;'b&gt; (my provider only supports &amp;'a Foo&lt;'static&gt;), however, the end user does have to write these tags and if you have to specify the generic type parameters, you have to specify the tag rather than the type. C.f., my proposal where the type is specified. E.g., err.context::&lt;TagType&gt;()</p>",
        "id": 248307919,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1628048573
    },
    {
        "content": "<p>Is your version of the provider API implemented ontop of Tag?</p>",
        "id": 248307935,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628048629
    },
    {
        "content": "<p>Haven't had a chance yet to look at it in detail</p>",
        "id": 248307938,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628048639
    },
    {
        "content": "<p>Looks like no</p>",
        "id": 248307992,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628048671
    },
    {
        "content": "<p>No, it uses type tags, but they are not abstracted with a trait</p>",
        "id": 248308572,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1628049556
    },
    {
        "content": "<p>taking a look at the version you setup <span class=\"user-mention\" data-user-id=\"256841\">@Nick Cameron</span> it doesn't seem like it would still cover the futures executor case</p>",
        "id": 248517082,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628188341
    },
    {
        "content": "<p>or at least i don't understand how it would if T: 'static</p>",
        "id": 248517164,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628188390
    },
    {
        "content": "<p>ah i guess that's what you meant by \"for the object provider case\"</p>",
        "id": 248517328,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628188466
    },
    {
        "content": "<p>seems like a reasonable option to include in the RFC</p>",
        "id": 248517352,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628188484
    },
    {
        "content": "<p>Thanks for looking it over! I've been on vacation for a few days, so sorry for the lack of response.</p>",
        "id": 249066589,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1628654773
    },
    {
        "content": "<p>I talked to Nika last week and understand dyno a bit better now, in particular how it can support types with lifetimes by having the user write the Tag impls</p>",
        "id": 249066630,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1628654860
    },
    {
        "content": "<p>Nice</p>",
        "id": 249066746,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628655015
    },
    {
        "content": "<p>Did she end up pushing some new versions of Dyno?</p>",
        "id": 249066752,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628655033
    },
    {
        "content": "<p>I think she did, but it may be on a branch</p>",
        "id": 249066758,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628655054
    },
    {
        "content": "<p>One sec</p>",
        "id": 249066762,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628655056
    },
    {
        "content": "<p><a href=\"https://github.com/mystor/dyno/tree/min_magic\">https://github.com/mystor/dyno/tree/min_magic</a></p>",
        "id": 249066778,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628655091
    },
    {
        "content": "<p>oh cool, I hadn't seen that</p>",
        "id": 249066979,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1628655426
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/lCPrniJuoCPJo-_7lHEKsXdL/Screenshot_20210810-2120172.png\">Screenshot_20210810-212017~2.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/lCPrniJuoCPJo-_7lHEKsXdL/Screenshot_20210810-2120172.png\" title=\"Screenshot_20210810-212017~2.png\"><img src=\"/user_uploads/4715/lCPrniJuoCPJo-_7lHEKsXdL/Screenshot_20210810-2120172.png\"></a></div>",
        "id": 249067126,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628655686
    },
    {
        "content": "<p>I also realized that last time I checked bevy had an identical crate</p>",
        "id": 249067179,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628655738
    },
    {
        "content": "<p>Trait*</p>",
        "id": 249067181,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628655742
    },
    {
        "content": "<p>That it uses for its own type erasure logic</p>",
        "id": 249067184,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628655751
    },
    {
        "content": "<p>I'm not sure if there's any significant benefit to having a common trait but it's definitely useful prior art</p>",
        "id": 249067198,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628655778
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 249067258,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1628655845
    },
    {
        "content": "<p><a href=\"https://docs.rs/bevy/0.5.0/bevy/ecs/system/trait.SystemParam.html\">https://docs.rs/bevy/0.5.0/bevy/ecs/system/trait.SystemParam.html</a></p>",
        "id": 249067304,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628655899
    },
    {
        "content": "<p>Actually it might be <a href=\"https://docs.rs/bevy/0.5.0/bevy/ecs/system/trait.SystemParamFetch.html\">https://docs.rs/bevy/0.5.0/bevy/ecs/system/trait.SystemParamFetch.html</a></p>",
        "id": 249071485,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628661722
    },
    {
        "content": "<p>And even then it's not the same</p>",
        "id": 249071529,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628661731
    },
    {
        "content": "<p>Using the new dyno, I was able to get the best of both worlds: by adding specialised methods like provide_value and context_value, you can do the generic member access thing and in the common case never know anything about the whole Tag setup, but if you need to support complex cases (like closures for the async use case) then you can still define your own tags and use a generic method with an explicit tag</p>",
        "id": 249805106,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1629259279
    },
    {
        "content": "<p><span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 249883287,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1629307503
    },
    {
        "content": "<p>Current version of the provider API I plan to propose is at <a href=\"https://github.com/nrc/provide-any\">https://github.com/nrc/provide-any</a></p>",
        "id": 250308062,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1629690521
    },
    {
        "content": "<p>It is based on Nika's dyno min-max branch, but modified a bit, in particular so that Error's API for common types is a bit more ergonomic, and to only support generic member access (downcasting based on type tags is kept as an internal detail, but could be exposed later)</p>",
        "id": 250308140,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1629690614
    },
    {
        "content": "<p>I'm writing the RFC today</p>",
        "id": 250308144,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1629690625
    },
    {
        "content": "<p>Any feedback on the API would be appreciated (I realise the code is a bit scruffy, will polish as I go along)</p>",
        "id": 250308234,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1629690786
    },
    {
        "content": "<p>I expect to have an RFC draft this week</p>",
        "id": 250308240,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1629690796
    },
    {
        "content": "<p>ready for review</p>",
        "id": 250308242,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1629690803
    },
    {
        "content": "<p>Awesome</p>",
        "id": 250308647,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1629691408
    },
    {
        "content": "<p>I'll take a look at it first thing in the morning</p>",
        "id": 250308656,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1629691417
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 250309581,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1629692728
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> other than adding context in anyhow (and Eyre) are you aware of any error libraries which have functionality similar to generic member access?</p>",
        "id": 250311151,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1629694865
    },
    {
        "content": "<p>There's traced error in the tracing error library that adds a span trace to an error that can be extracted through a dyn error via type erasure and downcast</p>",
        "id": 250312095,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1629695874
    },
    {
        "content": "<p>Which is kind of the inspiration for the whole generic member access thing or the workaround for the lack thereof</p>",
        "id": 250312139,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1629695900
    },
    {
        "content": "<p>It's kind of both</p>",
        "id": 250312140,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1629695903
    },
    {
        "content": "<p>thanks!</p>",
        "id": 250312373,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1629696293
    },
    {
        "content": "<p>oh that blanket impl of Provider for Error types is nice</p>",
        "id": 250391327,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1629743087
    },
    {
        "content": "<p>does that just work? I figured we wouldn't be able to add a new super trait</p>",
        "id": 250391349,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1629743098
    },
    {
        "content": "<p>I feel like that could easily cause coherence issues later on if people wanted to be able to use the <code>Provider</code> trait separately</p>",
        "id": 250391440,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1629743143
    },
    {
        "content": "<p>I'm imagining future incompatibility errors and or overlap</p>",
        "id": 250391464,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1629743157
    },
    {
        "content": "<p>i guess that's only an issue in the crate that defines Provider maybe</p>",
        "id": 250391553,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1629743182
    },
    {
        "content": "<p>and downstream they will always know if they impl Provider or Error</p>",
        "id": 250391579,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1629743193
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256841\">Nick Cameron</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/generic.20member.20access/near/250308140\">said</a>:</p>\n<blockquote>\n<p>It is based on Nika's dyno min-max branch, but modified a bit, in particular so that Error's API for common types is a bit more ergonomic, and to only support generic member access (downcasting based on type tags is kept as an internal detail, but could be exposed later)</p>\n</blockquote>\n<p>Am I correct in understanding that the type tags being made an internal detail hasn't happened yet for the code you linked?</p>",
        "id": 250391711,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1629743250
    },
    {
        "content": "<p>It seems to have a few pub APIs that expose the type tag interfaces atm</p>",
        "id": 250391739,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1629743268
    },
    {
        "content": "<p>overall looks good, I will have some comments about the code but I'll wait until you've polished it and got the RFC written and are ready for review</p>",
        "id": 250391968,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1629743351
    },
    {
        "content": "<p>I think that if we add the trait and the impl at the same time, then it is OK. There would only be a coherence issue if someone wanted to implement Provider for their own Error type, which they should never need to do</p>",
        "id": 250417819,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1629756042
    },
    {
        "content": "<p>type tags are exposed, but Tagged and related things are not</p>",
        "id": 250417882,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1629756082
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256841\">Nick Cameron</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/generic.20member.20access/near/250417819\">said</a>:</p>\n<blockquote>\n<p>I think that if we add the trait and the impl at the same time, then it is OK. There would only be a coherence issue if someone wanted to implement Provider for their own Error type, which they should never need to do</p>\n</blockquote>\n<p>I'm not certain that's the only way this could cause issues</p>",
        "id": 250417902,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1629756092
    },
    {
        "content": "<p>I think it is a nice compomise</p>",
        "id": 250417909,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1629756095
    },
    {
        "content": "<p>imagine someone wants to have provider as a super trait the same way that <code>Error</code> does</p>",
        "id": 250417924,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1629756100
    },
    {
        "content": "<p>and they add a blanket impl</p>",
        "id": 250417938,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1629756107
    },
    {
        "content": "<p>super trait of what?</p>",
        "id": 250417945,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1629756120
    },
    {
        "content": "<p>of their own local trait</p>",
        "id": 250417988,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1629756127
    },
    {
        "content": "<p>something where they want to add a <code>provide_context</code> method to some trait same as the Error trait does</p>",
        "id": 250418003,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1629756140
    },
    {
        "content": "<p>im trying to imagine the ways this can cause overlap</p>",
        "id": 250418009,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1629756149
    },
    {
        "content": "<p>but I want to make sure we don't run into issues like with From and Error</p>",
        "id": 250418020,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1629756158
    },
    {
        "content": "<p>seems like its probably fine</p>",
        "id": 250418039,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1629756177
    },
    {
        "content": "<p>I mean, they wouldn't be able to add impls of their trait for foreign types</p>",
        "id": 250418058,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1629756190
    },
    {
        "content": "<p>there's an Error bound on the blanket impl, so it should be fine</p>",
        "id": 250418081,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1629756203
    },
    {
        "content": "<p>(they should have Provider and Error as super traits)</p>",
        "id": 250418111,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1629756222
    },
    {
        "content": "<p>Draft RFC is ready for review: <a href=\"https://github.com/nrc/rfcs/pull/1\">https://github.com/nrc/rfcs/pull/1</a> It is not finished, though, still a couple of large TODOs in the reference section, but I doubt I'll address them for a few days so thought I'd ask for feedback now</p>",
        "id": 250866621,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1630029090
    },
    {
        "content": "<p>Anyone interested, please take a look!</p>",
        "id": 250866633,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1630029111
    },
    {
        "content": "<p>oh shiit</p>",
        "id": 250866895,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630029349
    },
    {
        "content": "<p>taking a look now</p>",
        "id": 250866897,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630029351
    },
    {
        "content": "<p>thanks!</p>",
        "id": 250866995,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1630029479
    },
    {
        "content": "<p>suddenly a refresh button</p>",
        "id": 250868714,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630030124
    },
    {
        "content": "<p>lol</p>",
        "id": 250868716,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630030124
    },
    {
        "content": "<p>OK, that was a lie, I addressed one of the reference section TODOs. I won't manage the other before next week though</p>",
        "id": 250868870,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1630030154
    },
    {
        "content": "<p>what was a lie?</p>",
        "id": 250868955,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630030178
    },
    {
        "content": "<p>ooh</p>",
        "id": 250868956,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630030179
    },
    {
        "content": "<p>the thing about the todos</p>",
        "id": 250868959,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630030182
    },
    {
        "content": "<p>yeah</p>",
        "id": 250868969,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1630030188
    },
    {
        "content": "<p>im almost done with the guide level seciton</p>",
        "id": 250868994,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630030199
    },
    {
        "content": "<p>hah, then my update was just in time!</p>",
        "id": 250869188,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1630030217
    },
    {
        "content": "<p>posted my comments</p>",
        "id": 250873656,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630031389
    },
    {
        "content": "<p>looks great btw</p>",
        "id": 250873659,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1630031391
    },
    {
        "content": "<p>thanks!</p>",
        "id": 250873991,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1630031720
    },
    {
        "content": "<blockquote>\n<p>qq on <a href=\"https://github.com/nrc/provide-any\">https://github.com/nrc/provide-any</a>, why is the TypeTag impl for Value <code>T: 'static</code> and not <code>T: ?Sized + 'static</code>? I know a <code>!Sized + 'static</code> object is pretty hard to come by (impossible?), but the code compiles fine with the looser bound</p>\n</blockquote>\n<p>edit: ignore me, it doesnt compile</p>",
        "id": 250887908,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1630044628
    },
    {
        "content": "<p>Wanted to also chime in and say that the RFC does a great job explaining the particulars of <code>provide_any</code>, which I was really struggling to wrap my head around when I was staring at the code. Great work <span class=\"user-mention\" data-user-id=\"256841\">@Nick Cameron</span> <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 250962791,
        "sender_full_name": "Sean Chen (he/him)",
        "timestamp": 1630084183
    },
    {
        "content": "<p>I also went through the RFC, finally understood some details of how this should work. One thing that Jane already mentioned is how it will work with <code>any</code>? Should we strive to have these two side by side or somehow merge them?</p>",
        "id": 251050653,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1630151526
    },
    {
        "content": "<p>It's an excellent question! I've thought about  it a bit, but as far as I can tell, there  isn't a good solution. We can't change any because it's stable and widely used. We can't be closer to any because we are working around some pretty fundamental limitations of it. We could do something simple like nest provide_any inside any (I should add that as an alternative), but I can't think of anything more significant than that.</p>",
        "id": 251097171,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1630202283
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby [she/her]</span>  (and others) I have updated the generic member access RFC to address all the comments: <a href=\"https://github.com/nrc/rfcs/pull/1\">https://github.com/nrc/rfcs/pull/1</a></p>",
        "id": 259996707,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1635860738
    },
    {
        "content": "<p>I've also improved documentation of the prototype implementation: <a href=\"https://github.com/nrc/provide-any\">https://github.com/nrc/provide-any</a></p>",
        "id": 259996818,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1635860776
    },
    {
        "content": "<p>Let me know if you have further comments. I think I would like to improve the descriptions in the RFC a little before submitting, but otherwise I think it is good to go</p>",
        "id": 259996905,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1635860828
    },
    {
        "content": "<p>I'll check it out but I recommend posting it regardless, I can leave comments on the actual PR</p>",
        "id": 259997675,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1635861168
    },
    {
        "content": "<p><a href=\"https://github.com/nrc/provide-any/blob/main/src/tests.rs#L12-L18\">https://github.com/nrc/provide-any/blob/main/src/tests.rs#L12-L18</a></p>\n<p>Ah so that's what it's all about. We're basically providing a type-to-value map on-demand that the caller can sift through to find the bit they want and hand back to the original caller.</p>\n<p>I'll have a play with this too from a logging context and see what it's like for trying to agree on standards like timestamps, errors, location info etc</p>",
        "id": 260214078,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1635984178
    },
    {
        "content": "<p>:D</p>",
        "id": 260214110,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1635984214
    },
    {
        "content": "<p>RFC posted: <a href=\"https://github.com/rust-lang/rfcs/pull/3192\">https://github.com/rust-lang/rfcs/pull/3192</a></p>",
        "id": 260257160,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1636025505
    }
]