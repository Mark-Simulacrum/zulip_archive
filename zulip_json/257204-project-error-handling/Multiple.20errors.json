[
    {
        "content": "<p>One of the things that Rust ecosystem I think didn't solve yet is a situation where a single function call wants to return multiple errors at once.</p>",
        "id": 258272184,
        "sender_full_name": "nagisa",
        "timestamp": 1634677626
    },
    {
        "content": "<p>(<code>Vec&lt;Error&gt;</code> is a natural solution here, but <code>Vec&lt;Error&gt;</code> is not an error by itself)</p>",
        "id": 258272274,
        "sender_full_name": "nagisa",
        "timestamp": 1634677676
    },
    {
        "content": "<p>and the <code>Error</code> trait isn't naturally implementable for errors that internally contain anything else than a straight chain of causations.</p>",
        "id": 258272499,
        "sender_full_name": "nagisa",
        "timestamp": 1634677768
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/Multiple.20errors/near/258272499\">said</a>:</p>\n<blockquote>\n<p>and the <code>Error</code> trait isn't naturally implementable for errors that internally contain anything else than a straight chain of causations.</p>\n</blockquote>\n<p>generic member access specifically seeks to resolve this</p>",
        "id": 258273454,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1634678175
    },
    {
        "content": "<p>where you could access an <code>Iterator&lt;Item = &amp;dyn Error&gt;</code> or a <code>&amp;[dyn Error]</code> to get access a tree like structure of causation</p>",
        "id": 258273531,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1634678218
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/Multiple.20errors/near/258272274\">said</a>:</p>\n<blockquote>\n<p>(<code>Vec&lt;Error&gt;</code> is a natural solution here, but <code>Vec&lt;Error&gt;</code> is not an error by itself)</p>\n</blockquote>\n<p>I expect that at least short term we will still want to rely on users to wrap <code>Vec&lt;Error&gt;</code> in their own types that expose the proper api for adding additional errors and re-exposing them through generic member access</p>",
        "id": 258273647,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1634678277
    },
    {
        "content": "<p>it will be interesting to see how it develops though, my feeling is that once generic member access lands all the pieces will be there for errors with multiple causes for things like parsers, but the reporting element of it and how to re-expose those multiple sources through the error trait seems like it could run into issues where people can't decide on a consistent interface (aka type parameter via generic member access) to return the sources as</p>",
        "id": 258273969,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1634678341
    },
    {
        "content": "<p>FWIW, <a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.aggregateexception?view=net-5.0\"><code>AggregateException</code></a> in C# is a royal pain -- it tends to in practice obscure what actually happened and \"normal\" ways of using exceptions end up just losing all the extra information.</p>\n<p>It's not obvious to me that <code>Error</code> and <code>Result</code> are the right way to handle multiple-issue scenarios, vs just passing some sort of <code>Extend</code> or <code>FnMut</code> to handle whatever comes up.</p>",
        "id": 258315512,
        "sender_full_name": "scottmcm",
        "timestamp": 1634708645
    },
    {
        "content": "<p>There was a URLO thread about this a while back -- I think it was <a href=\"https://users.rust-lang.org/t/continue-execution-even-if-the-result-is-err-and-return-an-error-later/17349/8?u=scottmcm\">https://users.rust-lang.org/t/continue-execution-even-if-the-result-is-err-and-return-an-error-later/17349/8?u=scottmcm</a></p>",
        "id": 258315716,
        "sender_full_name": "scottmcm",
        "timestamp": 1634708835
    },
    {
        "content": "<p>Is this completely disjoint from error-chain? Or could it be an extension of the existing API?</p>",
        "id": 259725002,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1635592236
    },
    {
        "content": "<p>from what Jane said it looks like there is a threat of non-uniform usage of this API if we leave it to the users to use Generic Member Access for this</p>",
        "id": 259725020,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1635592282
    },
    {
        "content": "<p>hence the notion of unified API</p>",
        "id": 259725022,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1635592287
    }
]