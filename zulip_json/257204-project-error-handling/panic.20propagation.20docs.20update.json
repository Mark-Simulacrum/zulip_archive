[
    {
        "content": "<p>I have a new issue that might be fun for anyone looking for quick PR to <code>rust-lang/rust</code>. <a href=\"https://github.com/rust-lang/rust/issues/79950\">https://github.com/rust-lang/rust/issues/79950</a></p>",
        "id": 219676014,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1607730590
    },
    {
        "content": "<p>so something like this line added to <a href=\"https://doc.rust-lang.org/std/panic/fn.catch_unwind.html\">https://doc.rust-lang.org/std/panic/fn.catch_unwind.html</a>: \"This function is designed to be used in conjunction with <code>resume_unwind</code> to, for example, re-propagate a caught panic without use of <code>Result</code> as described below which should not be used for type erased panic payloads.\"</p>",
        "id": 219676596,
        "sender_full_name": "oliver",
        "timestamp": 1607731138
    },
    {
        "content": "<p>yea</p>",
        "id": 219677004,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1607731518
    },
    {
        "content": "<p>I'd probably recommend using something like</p>",
        "id": 219677007,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1607731522
    },
    {
        "content": "<p><code>    let inner: () = result.unwrap_or_else(|payload| std::panic::resume_unwind(payload));</code></p>",
        "id": 219677011,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1607731526
    },
    {
        "content": "<p>and put this recommendation inside of both doc pages</p>",
        "id": 219677031,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1607731544
    },
    {
        "content": "<p>and maybe add an extra section to the <code>std::thread::Result</code> docs to warn about why <code>unwrap</code> is bad</p>",
        "id": 219677043,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1607731560
    },
    {
        "content": "<p>and there we can point out the differences between unwrap and resume_unwind</p>",
        "id": 219677120,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1607731595
    },
    {
        "content": "<p>and how one produces a new panic that has to double downcast</p>",
        "id": 219677128,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1607731603
    },
    {
        "content": "<p>alternatively</p>",
        "id": 219677149,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1607731616
    },
    {
        "content": "<p>or maybe additionally</p>",
        "id": 219677151,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1607731621
    },
    {
        "content": "<p>we might be able to update the default panic hook in <code>std</code> to handle the double downcast case</p>",
        "id": 219677182,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1607731649
    },
    {
        "content": "<p>but I think we will need <span class=\"user-mention\" data-user-id=\"310399\">@Mara</span> 's panic plan changes to make that work</p>",
        "id": 219677194,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1607731659
    },
    {
        "content": "<p>because rn I think <code>unwrap()</code> on a <code>Result&lt;T, Box&lt;dyn Any&gt;&gt;</code> will discard the box and convert it to a string when panicking, rather than reboxing it</p>",
        "id": 219677252,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1607731686
    },
    {
        "content": "<p>so we'd need to update <code>unwrap</code> to somehow try to preserve the payload</p>",
        "id": 219677265,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1607731704
    },
    {
        "content": "<p>the main advantage of unwrap is that it actually invokes the panic hook to re-report the panic</p>",
        "id": 219677302,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1607731740
    },
    {
        "content": "<p>which will give you an error message at the end of your binary's output</p>",
        "id": 219677316,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1607731755
    },
    {
        "content": "<p>rather than way back wherever it was originally caught</p>",
        "id": 219677323,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1607731763
    },
    {
        "content": "<p>but the disadvantage of this is that any backtraces in that second panic would be disconnected from the original panic</p>",
        "id": 219677332,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1607731774
    },
    {
        "content": "<p>so my preference would be to not recommend that approach, and to just tell ppl to scroll back to wherever the panic happened.</p>",
        "id": 219677358,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1607731800
    },
    {
        "content": "<p>However I'm quite worried about someone getting in a situation where they're catching many panics and its hard to correlate which panic actually brought down the system</p>",
        "id": 219677427,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1607731831
    },
    {
        "content": "<p>I think that's just an inherent problem with wrappers for things which are<br>\nnormally meant to work like e-brakes</p>",
        "id": 219677557,
        "sender_full_name": "oliver",
        "timestamp": 1607731953
    },
    {
        "content": "<p>yea</p>",
        "id": 219677581,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1607731978
    },
    {
        "content": "<p>but still, we're a systems programming language and people depend on it not really being an emergency break</p>",
        "id": 219677603,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1607732005
    },
    {
        "content": "<p>_frustration_</p>",
        "id": 219677607,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1607732012
    },
    {
        "content": "<p>part of me feels like theres a ton of issues with the design of panics in rust but I have no idea how I'd redo it in a way that satisfies the existing requirements</p>",
        "id": 219677645,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1607732041
    },
    {
        "content": "<p>and even if we could redo it we cant because back compat</p>",
        "id": 219677700,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1607732058
    },
    {
        "content": "<p>:/</p>",
        "id": 219677705,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1607732062
    },
    {
        "content": "<p>or at least we're heavily restricted</p>",
        "id": 219677712,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1607732075
    },
    {
        "content": "<p>sigh</p>",
        "id": 219677715,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1607732076
    },
    {
        "content": "<p>unless break compat as a edition release, unless some magic<br>\nmetadata capture comes along from another part of the lang</p>",
        "id": 219677767,
        "sender_full_name": "oliver",
        "timestamp": 1607732141
    },
    {
        "content": "<p>it would be interesting to spec a redesigned panic system<br>\ntho that's probably a lot of work and I don't know if there<br>\nis room given the existing timelines for the next edition</p>",
        "id": 219678002,
        "sender_full_name": "oliver",
        "timestamp": 1607732344
    },
    {
        "content": "<p>yea i dont think that should be a high priority</p>",
        "id": 219678025,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1607732371
    },
    {
        "content": "<p>feel free to spitball ideas tho</p>",
        "id": 219678034,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1607732375
    },
    {
        "content": "<p>I imagine something with better metadata capture during panic generation<br>\nbut nothing technical to point to where to start</p>",
        "id": 219678127,
        "sender_full_name": "oliver",
        "timestamp": 1607732452
    },
    {
        "content": "<p>there's already some work here being done but I don't think it applies at this level</p>",
        "id": 219679494,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1607733825
    },
    {
        "content": "<p>yeah it's very interesting</p>",
        "id": 219679542,
        "sender_full_name": "oliver",
        "timestamp": 1607733843
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310399\">@Mara</span> has been working on improving PanicInfo but that is what contains the payload</p>",
        "id": 219679557,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1607733865
    },
    {
        "content": "<p>rather than the payload itself</p>",
        "id": 219679560,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1607733868
    },
    {
        "content": "<p>and I imagine that if we add alternate versions of payloads we will still have to re-erase them when we pass them to <code>catch_unwind</code></p>",
        "id": 219679582,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1607733900
    },
    {
        "content": "<p>there might be some path to deprecation of that method where we can do a new catch_unwind that works on more rich type information rather than only being a Box&lt;Any&gt;</p>",
        "id": 219679613,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1607733941
    },
    {
        "content": "<p>like, introduce a <code>std::panic::Payload</code></p>",
        "id": 219679674,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1607733975
    },
    {
        "content": "<p>draft for first doc update: <a href=\"https://github.com/rust-lang/rust/compare/master...o752d:master\">https://github.com/rust-lang/rust/compare/master...o752d:master</a></p>",
        "id": 219679925,
        "sender_full_name": "oliver",
        "timestamp": 1607734231
    },
    {
        "content": "<p>I think the recommendation is already in the doc page of <code>resume_unwind</code></p>",
        "id": 219679981,
        "sender_full_name": "oliver",
        "timestamp": 1607734315
    },
    {
        "content": "<p>I'm just not sure about adding new <code>Payload</code>s or improving what's<br>\nalready being generated, like there might be a lot of interactions<br>\ninvolved in layering information like that, not certain just speculating</p>",
        "id": 219680178,
        "sender_full_name": "oliver",
        "timestamp": 1607734512
    },
    {
        "content": "<p>things like this just remind me conceptually of how degrees of freedom aggregate:<br>\n<a href=\"/user_uploads/4715/QYACsgw5lW9Lpv244-plkSPx/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/QYACsgw5lW9Lpv244-plkSPx/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/QYACsgw5lW9Lpv244-plkSPx/image.png\"></a></div>",
        "id": 219680434,
        "sender_full_name": "oliver",
        "timestamp": 1607734803
    }
]