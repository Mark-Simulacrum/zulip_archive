[
    {
        "content": "<p>When passing errors to existing outer systems, many times we need unique identifiers for them to recognize or classify the error type. For many systems, these are just integers as error codes. For example, 40x status code in a http rest API.</p>\n<p>I wonder if there's some existing prior arts on this part.</p>",
        "id": 210767534,
        "sender_full_name": "Charles Lew",
        "timestamp": 1600706558
    },
    {
        "content": "<p>What exactly would you want to see?</p>\n<p>Errors are types and types can have methods that return values or associated constants. Types can have traits implemented for them that have methods or associated constants.</p>",
        "id": 210768029,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1600706798
    },
    {
        "content": "<p>There's <a href=\"https://github.com/rust-lang/rust/issues/60553\">https://github.com/rust-lang/rust/issues/60553</a> which will allow this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"cp\">#![feature(arbitrary_enum_discriminant)]</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[repr(u8)]</span><span class=\"w\"></span>\n<span class=\"cp\">#[derive(Copy, Clone)]</span><span class=\"w\"></span>\n<span class=\"k\">enum</span> <span class=\"nc\">Code</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Alpha</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[repr(u8)]</span><span class=\"w\"></span>\n<span class=\"k\">enum</span> <span class=\"nc\">Error</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Alpha</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">id</span>: <span class=\"kt\">i32</span> <span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Code</span>::<span class=\"n\">Alpha</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Error</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">code</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Code</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">Code</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Error</span>::<span class=\"n\">Alpha</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">id</span>: <span class=\"mi\">99</span><span class=\"w\"> </span><span class=\"p\">}.</span><span class=\"n\">code</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 210768734,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1600707151
    },
    {
        "content": "<p>not entirely sure, maybe something like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">enum</span> <span class=\"nc\">Error</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"cp\">#[error_code(100)]</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"n\">ErrorA</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"cp\">#[error_code(101)]</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"n\">ErrorB</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>Anything that can help me avoid repeating myself is good in this case</p>",
        "id": 210769882,
        "sender_full_name": "Charles Lew",
        "timestamp": 1600707732
    },
    {
        "content": "<p>What kind of repetition are you worried about?</p>",
        "id": 210771132,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1600708297
    },
    {
        "content": "<p>One place you can look at is <code>rustc</code>'s own error codes.</p>",
        "id": 210771503,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1600708448
    },
    {
        "content": "<p>I meant repetitions like listing all the variants at the definition site and match and list them again and again in some fictional impl methods.</p>\n<p>But yes, in this case RFC 2363 might be just enough, since it's quite natural to let the discriminant correspond to the actual error codes. Just needs to wait for its stablization here. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 210773314,
        "sender_full_name": "Charles Lew",
        "timestamp": 1600709236
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116458\">Charles Lew</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/.22error.20codes.22/near/210773314\">said</a>:</p>\n<blockquote>\n<p>all the variants at the definition site and match and list them again and again in some fictional impl methods.</p>\n</blockquote>\n<p>Why would you list them in both places? Just the one <code>match</code> would be enough.</p>",
        "id": 210773515,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1600709327
    },
    {
        "content": "<p>I think the harder part is around never reusing an error code, never duplicating it, or spreading the codes across multiple types.</p>",
        "id": 210773700,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1600709403
    },
    {
        "content": "<p>I think you might want to check out strum, they have a derive for attaching attributes to enum variants</p>",
        "id": 210798083,
        "sender_full_name": "Markus Unterwaditzer",
        "timestamp": 1600721424
    },
    {
        "content": "<p><a href=\"https://github.com/Peternator7/strum/wiki/Derive-EnumProperty\">https://github.com/Peternator7/strum/wiki/Derive-EnumProperty</a></p>",
        "id": 210798114,
        "sender_full_name": "Markus Unterwaditzer",
        "timestamp": 1600721447
    },
    {
        "content": "<p>For <code>http_types::Error</code> we've essentially combined a StatusCode enum + an anyhow::Error <a href=\"https://docs.rs/http-types/2.4.0/http_types/struct.Error.html\">https://docs.rs/http-types/2.4.0/http_types/struct.Error.html</a> â€” though I'm not <em>loving</em> this pattern, it seems to work okay</p>",
        "id": 210805413,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1600725364
    }
]