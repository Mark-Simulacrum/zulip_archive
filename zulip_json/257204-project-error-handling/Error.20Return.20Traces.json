[
    {
        "content": "<p>Zig has a very cool feature I just learned about:</p>\n<p><a href=\"https://ziglang.org/documentation/master/#Error-Return-Traces\">https://ziglang.org/documentation/master/#Error-Return-Traces</a></p>\n<p>The basic idea seems to be that the runtime automatically records every time a function returns an error, so that if the program exits with an error, the entire chain of \"error events\" can be printed, even if those errors were recovered from. (It may clear the record once a function returns without an error; I'm not sure.)</p>\n<p>This is of course quite a bit of compiler magic, probably more than Rust can afford to add to all error types globally. But perhaps there's a way to achieve something similar in an opt-in way?</p>",
        "id": 214202964,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1603380248
    },
    {
        "content": "<p>I wrote a pre rfc for this a while ago and it's already mentioned on the charter</p>",
        "id": 214203154,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603380343
    },
    {
        "content": "<p><a href=\"https://paper.dropbox.com/doc/Collaborative-Summary-3-Fact-Finding-Pre-RFCs-around-Error-Handling-Reporting-dnShKo1SsHtdF4Yheeoco\">https://paper.dropbox.com/doc/Collaborative-Summary-3-Fact-Finding-Pre-RFCs-around-Error-Handling-Reporting-dnShKo1SsHtdF4Yheeoco</a></p>",
        "id": 214203288,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603380386
    },
    {
        "content": "<p>but yea, I think we can definitely have error return traces in rust</p>",
        "id": 214203337,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603380412
    },
    {
        "content": "<p>Oh! I must have glossed over that before. Nice.</p>",
        "id": 214203489,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1603380477
    }
]