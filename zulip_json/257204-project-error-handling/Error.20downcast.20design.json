[
    {
        "content": "<p>hopefully quick question to clear up some confusion for me: is there a specific reason Error::downcast is implemented by casting Box&lt;Error&gt; -&gt; raw ptr -&gt; Box&lt;T&gt;? I was implementing a similar error type for a crate and we were able to achieve the same thing using a blanket implementation for upcasting to Box&lt;Any&gt; then downcasting + unwrapping after the Any::is typecheck. curious because I'm worried I'm missing some downside that std::error::Error wanted to avoid</p>",
        "id": 232179332,
        "sender_full_name": "jam1garner",
        "timestamp": 1616951171
    },
    {
        "content": "<p>I think it's because the downcast functionality on Error is a reimplementation of Any</p>",
        "id": 232179392,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1616951265
    },
    {
        "content": "<p>for reference, this is effectively the change I'm describing: <a href=\"https://github.com/jam1garner/binrw/commit/e055ab6e73401e435c331cbe46173ddc73ab5390\">https://github.com/jam1garner/binrw/commit/e055ab6e73401e435c331cbe46173ddc73ab5390</a><br>\nand this is what such a blanket impl would look like: <a href=\"https://github.com/jam1garner/binrw/blob/e055ab6e73401e435c331cbe46173ddc73ab5390/binrw/src/error.rs#L19-L42\">https://github.com/jam1garner/binrw/blob/e055ab6e73401e435c331cbe46173ddc73ab5390/binrw/src/error.rs#L19-L42</a></p>",
        "id": 232179393,
        "sender_full_name": "jam1garner",
        "timestamp": 1616951265
    },
    {
        "content": "<p>So presumably the downcast on Any is doing the same thing Error does</p>",
        "id": 232179409,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1616951282
    },
    {
        "content": "<p>I'm guessing it was just copied</p>",
        "id": 232179453,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1616951299
    },
    {
        "content": "<p>I see. Would a implementation like the above be desirable to keep Error in sync with Any? not that I expect much changing for either implementation...</p>",
        "id": 232179519,
        "sender_full_name": "jam1garner",
        "timestamp": 1616951359
    },
    {
        "content": "<p>I doubt it, I imagine that going through Any would require extra indirection and vtables</p>",
        "id": 232179584,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1616951420
    },
    {
        "content": "<p>Not sure on that though</p>",
        "id": 232179597,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1616951429
    },
    {
        "content": "<p>This is a bit lower level than I tend to work at</p>",
        "id": 232179607,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1616951437
    },
    {
        "content": "<p>Also worth noting, with generic member access your AsAny stuff will essentially be part of the Error trait</p>",
        "id": 232179621,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1616951457
    },
    {
        "content": "<p>Because generic member access supports arbitrary up casting</p>",
        "id": 232179629,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1616951469
    },
    {
        "content": "<p>I really need to finish that RFC and get it implemented in std</p>",
        "id": 232179654,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1616951512
    },
    {
        "content": "<p>Bah</p>",
        "id": 232179657,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1616951515
    },
    {
        "content": "<p>heh. yeah I suppose most of this is just a fancy upcasting hack. thanks, good to know :)</p>",
        "id": 232179721,
        "sender_full_name": "jam1garner",
        "timestamp": 1616951552
    }
]