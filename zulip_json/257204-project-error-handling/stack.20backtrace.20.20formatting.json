[
    {
        "content": "<p>Some spitballing kind of ideas here. Starting with an example which is just <code>fn main() { Err(...).unwrap(); }</code></p>",
        "id": 249301454,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1628807327
    },
    {
        "content": "<p>Running this with RUST_BACKTRACE gives:</p>",
        "id": 249301477,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1628807345
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>stack backtrace:\n   0: rust_begin_unwind\n             at /rustc/ccffcafd55e58f769d4b0efc0064bf65e76998e4/library/std/src/panicking.rs:517:5\n   1: core::panicking::panic_fmt\n             at /rustc/ccffcafd55e58f769d4b0efc0064bf65e76998e4/library/core/src/panicking.rs:93:14\n   2: core::result::unwrap_failed\n             at /rustc/ccffcafd55e58f769d4b0efc0064bf65e76998e4/library/core/src/result.rs:1617:5\n   3: core::result::Result&lt;T,E&gt;::unwrap\n             at /rustc/ccffcafd55e58f769d4b0efc0064bf65e76998e4/library/core/src/result.rs:1299:23\n   4: hello::main\n             at ./src/main.rs:11:5\n   5: core::ops::function::FnOnce::call_once\n             at /rustc/ccffcafd55e58f769d4b0efc0064bf65e76998e4/library/core/src/ops/function.rs:227:5\n</code></pre></div>\n<p>I would like to see</p>\n<div class=\"codehilite\"><pre><span></span><code>stack backtrace:\n   0: core::result::Result&lt;T,E&gt;::unwrap\n             at &lt;core&gt;/result.rs:1299:23\n   1: hello::main\n             at ./src/main.rs:11:5\n</code></pre></div>",
        "id": 249301516,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1628807385
    },
    {
        "content": "<p>We already do some trimming (c.f., RUST_BACKTRACE=full), but I think we should do more!</p>",
        "id": 249301862,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1628807665
    },
    {
        "content": "<p>Could we do more? (Specifically here, I want to remove more stack frames which I don't think are generally useful, and remove parts of paths to some libs). Anyone have thoughts?</p>",
        "id": 249302064,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1628807809
    },
    {
        "content": "<p>I like the idea</p>",
        "id": 249302158,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628807872
    },
    {
        "content": "<p>though I wonder if we should keep the frame numbers the same and add a message indicating that some frames were filtered out</p>",
        "id": 249302234,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628807907
    },
    {
        "content": "<p>so intead it would be something like</p>",
        "id": 249302247,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628807914
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>stack backtrace:\n   3: core::result::Result&lt;T,E&gt;::unwrap\n             at &lt;core&gt;/result.rs:1299:23\n   4: hello::main\n             at ./src/main.rs:11:5\n   4 Frames omitted, use `RUST_BACKTRACE=full` to see a complete backtrace\n</code></pre></div>",
        "id": 249302251,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628807920
    },
    {
        "content": "<p>alternatively</p>",
        "id": 249302299,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628807968
    },
    {
        "content": "<p>we might want to add support for this, but not make it the default</p>",
        "id": 249302310,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628807976
    },
    {
        "content": "<p>i imagine some people might be upset if they expect to some frames and they capture a backtrace on a hard to reproduce error but then they're missing some frames that were important</p>",
        "id": 249302338,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628808003
    },
    {
        "content": "<p>though I don't see how any of the frames we'd filter here would be important</p>",
        "id": 249302377,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628808010
    },
    {
        "content": "<p>so probably not a risk, but worth being careful about</p>",
        "id": 249302386,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628808018
    },
    {
        "content": "<p>\"though I wonder if we should keep the frame numbers the same and add a message indicating that some frames were filtered out\" - that would be inconsistent with the filtering we currently do</p>",
        "id": 249302635,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1628808200
    },
    {
        "content": "<p>\"we might want to add support for this, but not make it the default\" - we already filter quite aggressively by default, so I don't think that is a risk</p>",
        "id": 249302672,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1628808229
    },
    {
        "content": "<p>oh, maybe you are referring to the path shortening?</p>",
        "id": 249302735,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1628808260
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256841\">Nick Cameron</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/stack.20backtrace.20.20formatting/near/249302635\">said</a>:</p>\n<blockquote>\n<p>\"though I wonder if we should keep the frame numbers the same and add a message indicating that some frames were filtered out\" - that would be inconsistent with the filtering we currently do</p>\n</blockquote>\n<p>ah, fair</p>",
        "id": 249302770,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628808298
    },
    {
        "content": "<p>no, no, I just forgot that we already filter the frames quite a bit</p>",
        "id": 249302791,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628808320
    },
    {
        "content": "<p>I'm thinking about the filtering I have setup in color-eyre</p>",
        "id": 249302817,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628808338
    },
    {
        "content": "<p>Maybe even:</p>\n<div class=\"codehilite\"><pre><span></span><code>stack backtrace:\n   0: core::result::Result&lt;T,E&gt;::unwrap at &lt;core&gt;/result.rs:1299:23\n   1: hello::main at ./src/main.rs:11:5\n</code></pre></div>\n<p>I think we only used two lines because of historical reasons - i.e., with the 'full' backtrace there is more data more entry</p>",
        "id": 249302822,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1628808347
    },
    {
        "content": "<p>although I guess the alignment makes things easier to read</p>",
        "id": 249302872,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1628808372
    },
    {
        "content": "<p>yea I prefer the first version you showed</p>",
        "id": 249302888,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628808390
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/M7q9OMw0nWJWkL5FIfjZzD1z/Screenshot-from-2021-08-12-15-46-13.png\">Screenshot-from-2021-08-12-15-46-13.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/M7q9OMw0nWJWkL5FIfjZzD1z/Screenshot-from-2021-08-12-15-46-13.png\" title=\"Screenshot-from-2021-08-12-15-46-13.png\"><img src=\"/user_uploads/4715/M7q9OMw0nWJWkL5FIfjZzD1z/Screenshot-from-2021-08-12-15-46-13.png\"></a></div>",
        "id": 249302895,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628808395
    },
    {
        "content": "<p>was where my suggestions were coming from</p>",
        "id": 249302929,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628808426
    },
    {
        "content": "<p>I feel like it's pretty safe to filter out the panicking frames</p>",
        "id": 249302986,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628808481
    },
    {
        "content": "<p>not confident that <code>core::ops::function::FnOnce::call_once</code> is something we should filter out</p>",
        "id": 249303027,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628808493
    },
    {
        "content": "<p>tho that pretty much just indicates you're calling a closure, and the closure itself has its own stack frame I think</p>",
        "id": 249303075,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628808545
    },
    {
        "content": "<p>let me test rq</p>",
        "id": 249303084,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628808551
    },
    {
        "content": "<p>Yeah, the closure is an implementation detail of the __rust_begin_short_backtrace machinery I think, IMO, the stacktrace should start at main, and anything outside main is stuff the user doesn't care about</p>",
        "id": 249303256,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1628808685
    },
    {
        "content": "<p>At least, doesn't <em>usually</em> care about</p>",
        "id": 249303271,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1628808697
    },
    {
        "content": "<p>hmm</p>",
        "id": 249303277,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628808704
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">call_indirect</span><span class=\"p\">(</span><span class=\"o\">||</span><span class=\"w\">  </span><span class=\"nb\">Err</span>::<span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"s\">\"\"</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">call_indirect</span><span class=\"o\">&lt;</span><span class=\"n\">F</span>: <span class=\"nb\">FnOnce</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">f</span>: <span class=\"nc\">F</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">f</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 249303345,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628808747
    },
    {
        "content": "<p>would you expect this to have the <code>call_once</code> frame twice?</p>",
        "id": 249303351,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628808756
    },
    {
        "content": "<p>once for the unwrap machinery and once for the call inside of call_indirect?</p>",
        "id": 249303359,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628808767
    },
    {
        "content": "<p>I would have, but it doesn't</p>",
        "id": 249303362,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628808771
    },
    {
        "content": "<p>I'm not sure of the rules for when <code>call_once</code> is actually invoked</p>",
        "id": 249303657,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1628808991
    },
    {
        "content": "<p>It doesn't seem to be for all closures</p>",
        "id": 249303667,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1628809001
    },
    {
        "content": "<p>Or rather it doesn't seem to be for closures at all, as in your example</p>",
        "id": 249303681,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1628809015
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>fn main() {\n    call_indirect(foo);\n}\n\nfn foo() {\n    Err::&lt;(), _&gt;(&quot;&quot;).unwrap()\n}\n\nfn call_indirect&lt;F: FnOnce()&gt;(f: F) {\n    f();\n}\n</code></pre></div>\n<p>Has two frames for call_once</p>",
        "id": 249303721,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1628809063
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>20:     0x560e8220a97b - core::ops::function::FnOnce::call_once::hd68444e2cc8c724f\n                               at /rustc/a178d0322ce20e33eac124758e837cbd80a6f633/library/core/src/ops/function.rs:227:5\n  21:     0x560e8220a6ee - std::sys_common::backtrace::__rust_begin_short_backtrace::h4853b5a3266caa3c\n                               at /rustc/a178d0322ce20e33eac124758e837cbd80a6f633/library/std/src/sys_common/backtrace.rs:125:18\n  22:     0x560e8220a771 - std::rt::lang_start::{{closure}}::h497f58961ebf7e05\n                               at /rustc/a178d0322ce20e33eac124758e837cbd80a6f633/library/std/src/rt.rs:49:18\n  23:     0x560e8221b0f9 - core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once::h2aabc384aab89b7b\n                               at /rustc/a178d0322ce20e33eac124758e837cbd80a6f633/library/core/src/ops/function.rs:259:13\n  24:     0x560e8221b0f9 - std::panicking::try::do_call::hc5fcacb7a85fc7b1\n                               at /rustc/a178d0322ce20e33eac124758e837cbd80a6f633/library/std/src/panicking.rs:401:40\n</code></pre></div>",
        "id": 249303738,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628809079
    },
    {
        "content": "<p>oooooo</p>",
        "id": 249303810,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628809108
    },
    {
        "content": "<p>So I think it must only be invoked for named functions (like <code>foo</code> in this example, or <code>main</code> in the case of the stack trace stuff)</p>",
        "id": 249303821,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1628809114
    },
    {
        "content": "<p>yea</p>",
        "id": 249303826,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628809119
    },
    {
        "content": "<p>that makes sense</p>",
        "id": 249303833,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628809126
    },
    {
        "content": "<p>that's interesting!</p>",
        "id": 249303834,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628809128
    },
    {
        "content": "<p>and the foo frame is intact, so the call_once frame seems redundant</p>",
        "id": 249303921,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628809203
    },
    {
        "content": "<p>yea, i say do it</p>",
        "id": 249303963,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628809206
    },
    {
        "content": "<p>filter the shit out of those frames!</p>",
        "id": 249303979,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628809214
    },
    {
        "content": "<p>:-)</p>",
        "id": 249304019,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1628809239
    },
    {
        "content": "<p>Do we apply this same filtering to <code>std::backtrace::Backtrace</code>?</p>",
        "id": 249304237,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628809439
    },
    {
        "content": "<p>looks like we do</p>",
        "id": 249304409,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628809550
    },
    {
        "content": "<p>acutally maybe not</p>",
        "id": 249304634,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628809769
    },
    {
        "content": "<p>ah yea, capturing it manually will only see the <code>__rust_begin_short_backtrace</code> frame</p>",
        "id": 249304780,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628809918
    },
    {
        "content": "<p>but not the <code>__rust_end_short_backtrace</code> frame</p>",
        "id": 249304825,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628809926
    },
    {
        "content": "<p>and it completely ignores them / displays them normally regardless</p>",
        "id": 249304837,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628809941
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">__rust_begin_short_backtrace</span><span class=\"o\">&lt;</span><span class=\"n\">F</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">f</span>: <span class=\"nc\">F</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">T</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">F</span>: <span class=\"nb\">FnOnce</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">T</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// prevent this frame from being tail-call optimised away</span>\n<span class=\"w\">    </span><span class=\"k\">crate</span>::<span class=\"n\">hint</span>::<span class=\"n\">black_box</span><span class=\"p\">(());</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">result</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 249304970,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628810051
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[cfg(not(test))]</span><span class=\"w\"></span>\n<span class=\"cp\">#[lang = </span><span class=\"s\">\"start\"</span><span class=\"cp\">]</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">lang_start</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">crate</span>::<span class=\"n\">process</span>::<span class=\"n\">Termination</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">static</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">main</span>: <span class=\"nc\">fn</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">T</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">argc</span>: <span class=\"kt\">isize</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">argv</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">isize</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">lang_start_internal</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"k\">crate</span>::<span class=\"n\">sys_common</span>::<span class=\"n\">backtrace</span>::<span class=\"n\">__rust_begin_short_backtrace</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">).</span><span class=\"n\">report</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">argc</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">argv</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">into_ok</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 249304981,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628810064
    },
    {
        "content": "<p>so it's passing main in to a function expecting an <code>FnOnce</code></p>",
        "id": 249305003,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628810079
    },
    {
        "content": "<p>maybe we can get rid of the <code>call_once</code> by just changing <code>__rust_begin_short_backtrace</code> to take a function pointer</p>",
        "id": 249305025,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628810107
    },
    {
        "content": "<p>I expect this will have to work differently from the current backtrace filtering</p>",
        "id": 249305242,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628810309
    },
    {
        "content": "<p>right now its just filtering out the start and the stop of the backtrace, but never frames in the middle of the output</p>",
        "id": 249305276,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628810352
    },
    {
        "content": "<p>and we cant filter out stuff related to Result using these named frames because then it would show up a bunch from user code</p>",
        "id": 249305314,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628810394
    },
    {
        "content": "<p>what's unwrap_failed...</p>",
        "id": 249305375,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628810412
    },
    {
        "content": "<p>oh, that's just to deal with monomorphization code bloat</p>",
        "id": 249305423,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628810463
    },
    {
        "content": "<p>can that show up more than once in a stack frame?</p>",
        "id": 249305467,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628810500
    },
    {
        "content": "<p>no right?</p>",
        "id": 249305470,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628810501
    },
    {
        "content": "<p>like, you can only panic once</p>",
        "id": 249305484,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628810512
    },
    {
        "content": "<p>otherwise, boom</p>",
        "id": 249305522,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628810524
    },
    {
        "content": "<p>either way, that's gonna be somewhat error prone I expect, if we don't have the begin_short_backtrace function called in the centralized points where all panics flow through</p>",
        "id": 249305594,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628810576
    },
    {
        "content": "<p>and instead have to call it inside of the various functions that can panick</p>",
        "id": 249305628,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628810608
    },
    {
        "content": "<p>but it might not actually be an issue if <code>__rust_begin_short_backtrace</code> shows up more than once?</p>",
        "id": 249305636,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628810620
    },
    {
        "content": "<p>I think it boils down to do we want to minimize the number of comparisons we have to do to filter out frames?</p>",
        "id": 249305702,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628810650
    },
    {
        "content": "<p>alternatively, is there some magical compiler way we could mark a frame as unimportant</p>",
        "id": 249305715,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628810663
    },
    {
        "content": "<p>\"maybe we can get rid of the call_once by just changing __rust_begin_short_backtrace to take a function pointer\" I think that would just use <code>Fn::call</code> rather than <code>FnOnce::call_once</code></p>",
        "id": 249305723,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1628810666
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256841\">Nick Cameron</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/stack.20backtrace.20.20formatting/near/249305723\">said</a>:</p>\n<blockquote>\n<p>\"maybe we can get rid of the call_once by just changing __rust_begin_short_backtrace to take a function pointer\" I think that would just use <code>Fn::call</code> rather than <code>FnOnce::call_once</code></p>\n</blockquote>\n<p>just tested, seems to work</p>",
        "id": 249305763,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628810708
    },
    {
        "content": "<p>I think we would need a multi-pronged solution: I think we have an off by one error at the two short backtrace marker functions, which we can solve by effectively add ing +1/-1</p>",
        "id": 249305765,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1628810714
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(backtrace)]</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// std::env::set_var(\"RUST_BACKTRACE\", \"full\");</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">backtrace</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">backtrace</span>::<span class=\"n\">Backtrace</span>::<span class=\"n\">capture</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Backtrace:</span><span class=\"se\">\\n</span><span class=\"s\">{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">backtrace</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">call_indirect</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Err</span>::<span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"s\">\"\"</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">call_indirect</span><span class=\"p\">(</span><span class=\"n\">f</span>: <span class=\"nc\">fn</span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">f</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 249305774,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628810720
    },
    {
        "content": "<p>what kind of type is <code>fn()</code>?!</p>",
        "id": 249305825,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1628810759
    },
    {
        "content": "<p>that's a function pointer</p>",
        "id": 249305865,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628810764
    },
    {
        "content": "<p>not a trait object</p>",
        "id": 249305874,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628810776
    },
    {
        "content": "<p>I tried <code>f: &amp;impl Fn</code></p>",
        "id": 249305875,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1628810777
    },
    {
        "content": "<p>yea, that's just a diff trait object</p>",
        "id": 249305881,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628810782
    },
    {
        "content": "<p>lol</p>",
        "id": 249305888,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1628810789
    },
    {
        "content": "<p>the issue with function pointers is they can't be closures that capture anything</p>",
        "id": 249305894,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628810798
    },
    {
        "content": "<p>because you can't have associated state</p>",
        "id": 249305899,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628810801
    },
    {
        "content": "<p>I wonder if that would have back compat issues?</p>",
        "id": 249305906,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1628810804
    },
    {
        "content": "<p>i don't think so, because main has never been a closure</p>",
        "id": 249305915,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628810819
    },
    {
        "content": "<p>and this is only ever called with main</p>",
        "id": 249305921,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628810824
    },
    {
        "content": "<p>and it's outside of user code</p>",
        "id": 249305927,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628810831
    },
    {
        "content": "<p>let me double check that second statement tho</p>",
        "id": 249305945,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628810849
    },
    {
        "content": "<p>i wouldn't be surprised if test code uses this</p>",
        "id": 249305950,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628810855
    },
    {
        "content": "<p>but that shouldn't be an issue</p>",
        "id": 249305953,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628810861
    },
    {
        "content": "<p>ah shit</p>",
        "id": 249306024,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628810896
    },
    {
        "content": "<p>this is used by std::thread</p>",
        "id": 249306028,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628810902
    },
    {
        "content": "<p>so we'd have to make a second start marker</p>",
        "id": 249306039,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628810920
    },
    {
        "content": "<p>one for function pointers that gets used at main and the old one for function trait objects that gets used by thread</p>",
        "id": 249306054,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628810939
    },
    {
        "content": "<p>also used by the benchmark runner</p>",
        "id": 249306070,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628810952
    },
    {
        "content": "<p>and test runner</p>",
        "id": 249306079,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628810962
    },
    {
        "content": "<p>though those can probably switch to the function pointer version</p>",
        "id": 249306090,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628810972
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256841\">Nick Cameron</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/stack.20backtrace.20.20formatting/near/249305765\">said</a>:</p>\n<blockquote>\n<p>I think we would need a multi-pronged solution: I think we have an off by one error at the two short backtrace marker functions, which we can solve by effectively add ing +1/-1</p>\n</blockquote>\n<p>thats an interesting approahc</p>",
        "id": 249306108,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628810991
    },
    {
        "content": "<p>I'm vaguely worried about having different call graphs that can happen off of either of these two marker functions</p>",
        "id": 249306162,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628811014
    },
    {
        "content": "<p>where in one situation it would have +1 extra frame and in the other it would have +2</p>",
        "id": 249306176,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628811034
    },
    {
        "content": "<p>would want to be exceedingly careful to make sure we don't end up filtering out their <code>main</code> function or something</p>",
        "id": 249306193,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628811055
    },
    {
        "content": "<p>or god forbid, the actual frame where the panic was created</p>",
        "id": 249306206,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628811066
    },
    {
        "content": "<p>so we would probably want to add a set of tests that check the backtrace contains the expected start and end frames when a panic is invoked inside of a main function, a test, a benchmark, or a thread</p>",
        "id": 249306229,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628811111
    },
    {
        "content": "<p>and I worry about a future path being added where the logic is wrong</p>",
        "id": 249306291,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628811140
    },
    {
        "content": "<p>Yeah, I think you would have to change the internals of __rust_begin_short_backtrace to make the logic wrong, so that doesn't seem too risky (just needs a comment). Not sure about __rust_end_short_backtrace though. And yeah, tests would be necessary</p>",
        "id": 249306474,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1628811360
    },
    {
        "content": "<p>oh, i thought you meant something like change the backtrace print logic so it only starts printing the frame or two after it sees the __rust_begin frame</p>",
        "id": 249306533,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628811396
    },
    {
        "content": "<p>I thinkthe other prong we could use would be to add an attribute to skip a function in backtraces. I think that would be useful for futures stuff too</p>",
        "id": 249306538,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1628811408
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256841\">Nick Cameron</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/stack.20backtrace.20.20formatting/near/249306538\">said</a>:</p>\n<blockquote>\n<p>I thinkthe other prong we could use would be to add an attribute to skip a function in backtraces. I think that would be useful for futures stuff too</p>\n</blockquote>\n<p>that does sound like the ideal solution</p>",
        "id": 249306545,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628811423
    },
    {
        "content": "<p>especially if it lets users mark frames in their code as unimportant</p>",
        "id": 249306554,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628811432
    },
    {
        "content": "<p>though I have no idea how hard it would be to implement something like that</p>",
        "id": 249306567,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628811462
    },
    {
        "content": "<p>\"oh, i thought you meant something like change the backtrace print logic so it only starts printing the frame or two after it sees the __rust_begin frame\" - Yeah, that's what I meant, but I don't think it is easier to break the logic because the call_once comes from inside the _rust_begin_short_backtrace implementation</p>",
        "id": 249306620,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1628811510
    },
    {
        "content": "<p>\"though I have no idea how hard it would be to implement something like that\" - yeah, I have no idea about the implementation :-)</p>",
        "id": 249306624,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1628811528
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256841\">Nick Cameron</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/stack.20backtrace.20.20formatting/near/249306620\">said</a>:</p>\n<blockquote>\n<p>\"oh, i thought you meant something like change the backtrace print logic so it only starts printing the frame or two after it sees the __rust_begin frame\" - Yeah, that's what I meant, but I don't think it is easier to break the logic because the call_once comes from inside the _rust_begin_short_backtrace implementation</p>\n</blockquote>\n<p>ah yea, the begin side seems easy to reason about</p>",
        "id": 249306930,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628811872
    },
    {
        "content": "<p>i guess we just need to double check the end side</p>",
        "id": 249306937,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628811880
    },
    {
        "content": "<p>i would love to see the begin and end filtering also apply to <code>std::backtrace::Backtrace</code></p>",
        "id": 249306970,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1628811919
    }
]