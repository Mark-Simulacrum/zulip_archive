[
    {
        "content": "<p>Okay so here's the issue where I've written up a bit of a summary</p>",
        "id": 214620128,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603739593
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/project-error-handling/issues/10\">https://github.com/rust-lang/project-error-handling/issues/10</a></p>",
        "id": 214620131,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603739594
    },
    {
        "content": "<p>the problem is that we'd like to be able to have more consistent error reporting</p>",
        "id": 214620290,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603739678
    },
    {
        "content": "<p>(kinda redundant)</p>",
        "id": 214620301,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603739685
    },
    {
        "content": "<p>an example being</p>",
        "id": 214620321,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603739692
    },
    {
        "content": "<p>if someone has an <code>.unwrap()</code> on a result with a type that impls <code>Debug</code> and <code>Error</code></p>",
        "id": 214620354,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603739710
    },
    {
        "content": "<p>right now it will print the debug format</p>",
        "id": 214620360,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603739717
    },
    {
        "content": "<p>if that type happens to be something like <code>anyhow::Error</code> or <code>eyre::Report</code> its kinda okay, you at least print all the sources</p>",
        "id": 214620384,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603739734
    },
    {
        "content": "<p>but then you end up printing two backtraces</p>",
        "id": 214620401,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603739748
    },
    {
        "content": "<p>the one captured in the error reprter</p>",
        "id": 214620415,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603739755
    },
    {
        "content": "<p>and the one captured by the panic reporter</p>",
        "id": 214620422,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603739759
    },
    {
        "content": "<p>panic hook</p>",
        "id": 214620465,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603739765
    },
    {
        "content": "<p>w/e you wanna call it</p>",
        "id": 214620472,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603739767
    },
    {
        "content": "<p>if you unwrap something that merely impls Error</p>",
        "id": 214620485,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603739774
    },
    {
        "content": "<p>its debug format is usually a derive format</p>",
        "id": 214620500,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603739782
    },
    {
        "content": "<p>and very verbose</p>",
        "id": 214620506,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603739784
    },
    {
        "content": "<p>and may not include its source error messages at all</p>",
        "id": 214620525,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603739794
    },
    {
        "content": "<p>Ideally I'd like panics to be able to be more information about the types they're reporting on</p>",
        "id": 214620612,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603739852
    },
    {
        "content": "<p>but I think we're pretty limited on how much we can do that</p>",
        "id": 214620648,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603739880
    },
    {
        "content": "<p>so one suggestion in the past from dtolnay was to add a <code>is_termination()</code> flag to <code>Debug</code></p>",
        "id": 214620734,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603739913
    },
    {
        "content": "<p>that indicates that the debug fmt is being used for an error report before exiting the application</p>",
        "id": 214620750,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603739928
    },
    {
        "content": "<p>this also helps resolve some issues with having to use the <code>Debug</code> format in <code>eyre</code>/<code>anyhow</code></p>",
        "id": 214620762,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603739943
    },
    {
        "content": "<p>It would be nice if the Debug fmt for Errors could see that this flag is set, and that it impls Error (somehow) and use a more consistent format</p>",
        "id": 214620932,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603740029
    },
    {
        "content": "<p>I don't thikn this really solves the problems though</p>",
        "id": 214620941,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603740033
    },
    {
        "content": "<p>first of all, I don't even think we could implement that</p>",
        "id": 214620955,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603740041
    },
    {
        "content": "<p>since derives dont have access to type information</p>",
        "id": 214620963,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603740047
    },
    {
        "content": "<p>second, that wouldn't be universally consistent</p>",
        "id": 214620968,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603740052
    },
    {
        "content": "<p>each error would be defining its own error format</p>",
        "id": 214620976,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603740059
    },
    {
        "content": "<p>I have two ideas atm that I think could work</p>",
        "id": 214621002,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603740081
    },
    {
        "content": "<p>once is concrete but doesn't cover every edge case</p>",
        "id": 214621016,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603740087
    },
    {
        "content": "<p>the other is extremely vague and half baked</p>",
        "id": 214621027,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603740094
    },
    {
        "content": "<p>for the first plan: based somewhat on <span class=\"user-mention\" data-user-id=\"310399\">@Mara</span> 's panic plan RFC</p>",
        "id": 214621052,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603740113
    },
    {
        "content": "<p>we could add a <code>panic_error</code> helper, for creating panics for error types</p>",
        "id": 214621122,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603740129
    },
    {
        "content": "<p>then</p>",
        "id": 214621137,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603740142
    },
    {
        "content": "<p>if we could somehow specialize the <code>unwrap</code>/<code>expect</code> functions on Result / Option (how???)</p>",
        "id": 214621171,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603740162
    },
    {
        "content": "<p>we could have <code>unwrap()</code> where E: Debug</p>",
        "id": 214621182,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603740173
    },
    {
        "content": "<p>and unwrap where E: Debug + Any,</p>",
        "id": 214621183,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603740178
    },
    {
        "content": "<p>and unwrap where E: Debug + Any + Error,</p>",
        "id": 214621194,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603740185
    },
    {
        "content": "<p>we might not want to bother with the any bound though</p>",
        "id": 214621205,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603740194
    },
    {
        "content": "<p>since that restricts non static errors</p>",
        "id": 214621218,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603740202
    },
    {
        "content": "<p>this would at least catch the main panic locations</p>",
        "id": 214621337,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603740258
    },
    {
        "content": "<p>and presumably the same specialization could easily be applied to the <code>Termination</code> impl on <code>Result</code></p>",
        "id": 214621361,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603740278
    },
    {
        "content": "<p>then panic handlers could be written to handle <code>dyn Error</code> types</p>",
        "id": 214621399,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603740303
    },
    {
        "content": "<p>this doesn't help with <code>eyre</code> and <code>anyhow</code></p>",
        "id": 214621408,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603740310
    },
    {
        "content": "<p>also i dont think you can box a <code>Debug + Any</code></p>",
        "id": 214621448,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603740337
    },
    {
        "content": "<p>since thats a compound trait object</p>",
        "id": 214621454,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603740341
    },
    {
        "content": "<p>so i feel like theres many reasons this plan isn't possible...</p>",
        "id": 214621465,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603740350
    },
    {
        "content": "<p>The even more half baked plans</p>",
        "id": 214621473,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603740357
    },
    {
        "content": "<p>if we added a new <code>Report</code> trait</p>",
        "id": 214621532,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603740373
    },
    {
        "content": "<p><code>std::fmt::Report</code></p>",
        "id": 214621537,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603740380
    },
    {
        "content": "<p>which is a specialized version of <code>Debug</code></p>",
        "id": 214621539,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603740385
    },
    {
        "content": "<p>so all <code>Debug</code> types impl <code>Report</code> by default with their debug impl</p>",
        "id": 214621557,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603740400
    },
    {
        "content": "<p>then you can override that</p>",
        "id": 214621572,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603740410
    },
    {
        "content": "<p>and this Report format had some sort of inverse formatting relationship</p>",
        "id": 214621593,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603740431
    },
    {
        "content": "<p>there's some global Error Reporting Object</p>",
        "id": 214621627,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603740456
    },
    {
        "content": "<p>that is somehow accessible via the <code>Report</code> api</p>",
        "id": 214621636,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603740461
    },
    {
        "content": "<p>through its formatter or something</p>",
        "id": 214621639,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603740465
    },
    {
        "content": "<p>and you could do something like</p>",
        "id": 214621650,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603740475
    },
    {
        "content": "<p><code>fmter.reporter.fmt_error(&amp;self)</code></p>",
        "id": 214621701,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603740485
    },
    {
        "content": "<p>so you pass yourself as an error trait object to the global reporter</p>",
        "id": 214621726,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603740499
    },
    {
        "content": "<p>and then there could maybe be default specialized impls for <code>Error</code> types</p>",
        "id": 214621764,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603740524
    },
    {
        "content": "<p>so if you implement Debug and Error, then instead of forwarding to the <code>Debug</code> impl, it uses the blanket provided impl from <code>std</code></p>",
        "id": 214621805,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603740549
    },
    {
        "content": "<p>which just calls <code>fmt_error</code> via the global formatter</p>",
        "id": 214621809,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603740556
    },
    {
        "content": "<p>then we switch <code>unwrap</code> and <code>expect</code> and all those panicing functions to use <code>Report</code> instead of <code>Debug</code></p>",
        "id": 214621842,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603740586
    },
    {
        "content": "<p>the more I think about it the less half baked this seems</p>",
        "id": 214621856,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603740598
    },
    {
        "content": "<p>and it seems to have less technical hurdles than the alternative solution</p>",
        "id": 214621913,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603740611
    },
    {
        "content": "<p>the formatter might not even need to be global</p>",
        "id": 214622006,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603740673
    },
    {
        "content": "<p>it might be able to go back up to the type handling the formatting itself</p>",
        "id": 214622021,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603740683
    },
    {
        "content": "<p>which could just be your panic hook</p>",
        "id": 214622028,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603740688
    },
    {
        "content": "<p>_now I want to try to proof of concept this_</p>",
        "id": 214622065,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603740703
    },
    {
        "content": "<p>This feels pretty similar to structured logging actually</p>",
        "id": 214622143,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603740729
    },
    {
        "content": "<p>and <code>tracing::Value</code></p>",
        "id": 214622146,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603740732
    },
    {
        "content": "<p>oof this is pretty long, will try to get to reading it tomorrow(?), got dragged into other things today</p>",
        "id": 214649216,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1603758365
    },
    {
        "content": "<p><del>thought this was a poem</del></p>",
        "id": 214650105,
        "sender_full_name": "DPC",
        "timestamp": 1603759320
    },
    {
        "content": "<p>sorry about this</p>",
        "id": 214650158,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603759343
    },
    {
        "content": "<p>no worries</p>",
        "id": 214650161,
        "sender_full_name": "DPC",
        "timestamp": 1603759349
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"319552\">@Jeremiah Senkpiel</span> if you prefer I can boil this down into a comment in the original github issue</p>",
        "id": 214650166,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603759359
    },
    {
        "content": "<p>a lot of the information in this thread is redundant</p>",
        "id": 214650169,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603759371
    },
    {
        "content": "<p>stuff I was thinking about but then thought better of later</p>",
        "id": 214650172,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603759379
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span>  I think it would probably be helpful if you were able to condense it into a comment. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 214653080,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1603762646
    },
    {
        "content": "<p>will do</p>",
        "id": 214653434,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603763098
    },
    {
        "content": "<p>Jane, Replied to your email.</p>",
        "id": 214653620,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1603763343
    },
    {
        "content": "<p>yea, I saw. don't worry about the minutes, I'll grab them from <span class=\"user-mention\" data-user-id=\"204346\">@Ashley Mannix</span> 's comment on the ehpg issue</p>",
        "id": 214653633,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603763369
    },
    {
        "content": "<p>For my info, was there more I needed to add?  I thought I summed everything</p>",
        "id": 214653729,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1603763486
    },
    {
        "content": "<p>I think i might be confused</p>",
        "id": 214653732,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603763496
    },
    {
        "content": "<p>it looked like from your reply you took the minutes from a previous meeting and just changed the date and put in the correct participants</p>",
        "id": 214653739,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603763512
    },
    {
        "content": "<p><span aria-label=\"innocent\" class=\"emoji emoji-1f607\" role=\"img\" title=\"innocent\">:innocent:</span>   True plus the link to the minutes.  Wasn't sure if I needed to add more to the md.</p>",
        "id": 214653827,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1603763619
    },
    {
        "content": "<p>yea, the minutes need to be of the meeting we had</p>",
        "id": 214653991,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603763842
    },
    {
        "content": "<p>not a previous meeting</p>",
        "id": 214653992,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603763844
    },
    {
        "content": "<p>but <span class=\"user-mention\" data-user-id=\"204346\">@Ashley Mannix</span> already created minutes for the meeting</p>",
        "id": 214653999,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603763856
    },
    {
        "content": "<p>so you don't need to add anything</p>",
        "id": 214654002,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603763864
    },
    {
        "content": "<p>I'll swap out the old minutes for the ones from this meeting</p>",
        "id": 214654005,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603763871
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> thanks</p>",
        "id": 214654072,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1603763985
    },
    {
        "content": "<p>I will also look into it today :)</p>",
        "id": 214668003,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1603784168
    },
    {
        "content": "<p>sorry it took so long</p>",
        "id": 215360055,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1604342359
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/project-error-handling/issues/10#issuecomment-720652610\">https://github.com/rust-lang/project-error-handling/issues/10#issuecomment-720652610</a></p>",
        "id": 215360060,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1604342361
    },
    {
        "content": "<p>but here we go</p>",
        "id": 215360063,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1604342363
    },
    {
        "content": "<p>I wrote up a shorter explanation of my idea</p>",
        "id": 215360070,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1604342370
    },
    {
        "content": "<p>this looks great!</p>",
        "id": 215364345,
        "sender_full_name": "oliver",
        "timestamp": 1604344389
    },
    {
        "content": "<p>oh, thanks! Got bogged down in day-to-day work so did not add any sensible input to the discussion yet :)</p>",
        "id": 215373465,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1604348727
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> Having two arguments to the Report trait's method feels like a workaround for existing behavior, but the kind that we have to live with for all time.</p>",
        "id": 215468268,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604417379
    },
    {
        "content": "<p>(Or a workaround for specialization not being stable yet.)</p>",
        "id": 215468393,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604417418
    },
    {
        "content": "<p>Either way, it feels like there <em>ought</em> to be some other way...</p>",
        "id": 215468422,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604417434
    },
    {
        "content": "<p>The idea of the Report trait does seem like the right answer, to specifically handle error reporting.</p>",
        "id": 215468483,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604417465
    },
    {
        "content": "<p>It seems like it wouldn't be unreasonable to require people to wrap a type in a new type and add their own Report impl, to change reporting, rather than dealing with Reporter. Unless I'm misunderstanding the rationale for the Reporter trait.</p>",
        "id": 215468744,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604417576
    },
    {
        "content": "<p>And then, if you don't need Reporter because of newtypes, you don't need to pass it to Report.</p>",
        "id": 215468872,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604417629
    },
    {
        "content": "<p>the reporter like eyre::Report would essentially be one of those new types that specializes in carrying extra context like backtraces, is optimized to be one frame on the stack, has helper fns for adding new errors to the chain, etc</p>",
        "id": 215469996,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1604418112
    },
    {
        "content": "<p>so I think you'd still want reporters, but yea I think you've got the gist of it</p>",
        "id": 215470155,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1604418159
    },
    {
        "content": "<p>I dug a little bit into the issue and related topics. The generic access API sounds exciting and (though not the simplest) will probably solve some crucial problems right now.</p>",
        "id": 215966090,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1604771863
    },
    {
        "content": "<p>so, maybe rephrasing what Josh already said. <code>Report</code> will be a drop-in replacement for Debug (by default  - with the global, predefined reporter)? and <code>Reporter</code> will give the specialization point for this reporting mechanism, right?</p>",
        "id": 215966198,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1604772005
    },
    {
        "content": "<p>reporter isn't the specialization point, assuming I'm not mixing up the terms</p>",
        "id": 215966240,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1604772121
    },
    {
        "content": "<p>reporter is the hook into the Formatter for general class errrors or panics</p>",
        "id": 215966285,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1604772144
    },
    {
        "content": "<p>so its how you say \"format me using your rules, here's all my data\"</p>",
        "id": 215966293,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1604772165
    },
    {
        "content": "<p>Report is the trait that either prints it using your own rules or asks the Reporter to print it for you</p>",
        "id": 215966302,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1604772192
    },
    {
        "content": "<p>I probably miss a lot of details still, but I see it as adding a neat layer of indirection we can fill in quite easily (with our  own formatting etc)</p>",
        "id": 215966315,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1604772195
    },
    {
        "content": "<p>yea</p>",
        "id": 215966322,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1604772206
    },
    {
        "content": "<p>I probably misused the 'specialization point' nomenclature</p>",
        "id": 215966336,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1604772230
    },
    {
        "content": "<p>the thing im trying to figure out is how to manage access to the Reporter</p>",
        "id": 215966340,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1604772237
    },
    {
        "content": "<p>should it be global?</p>",
        "id": 215966343,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1604772241
    },
    {
        "content": "<p>right now eyre has the same thing in it</p>",
        "id": 215966382,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1604772249
    },
    {
        "content": "<p>theres a global hook for constructing them</p>",
        "id": 215966385,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1604772259
    },
    {
        "content": "<p>but then the errors carry around the reporter with them</p>",
        "id": 215966393,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1604772280
    },
    {
        "content": "<p>and use that to implement the Debug impl</p>",
        "id": 215966398,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1604772289
    },
    {
        "content": "<p>what is the alternative?</p>",
        "id": 215966401,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1604772301
    },
    {
        "content": "<p>not sure</p>",
        "id": 215966412,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1604772310
    },
    {
        "content": "<p>but I see the current system as limiting</p>",
        "id": 215966424,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1604772323
    },
    {
        "content": "<p>adam recently brought up that Diagnostic in rustc is somewhat similar to this split plus the generic member access rfc</p>",
        "id": 215966434,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1604772346
    },
    {
        "content": "<p>and now I think we should aim to have any universal reporting mechanism be sufficient for rustc's needs</p>",
        "id": 215966478,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1604772370
    },
    {
        "content": "<p>but if we could get rustc using the Error trait and still getting high quality errors</p>",
        "id": 215966485,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1604772386
    },
    {
        "content": "<p>while having simple apps be able to just use something like eyre and not worry about it</p>",
        "id": 215966494,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1604772408
    },
    {
        "content": "<p>then I think we can be confident that it's the right approach</p>",
        "id": 215966496,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1604772418
    },
    {
        "content": "<p>the things I mostly worry about is accessing context with lifetimes</p>",
        "id": 215966504,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1604772431
    },
    {
        "content": "<p>like source maps</p>",
        "id": 215966505,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1604772435
    },
    {
        "content": "<p>in the reporter</p>",
        "id": 215966508,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1604772440
    },
    {
        "content": "<p>if it's global it has to be static</p>",
        "id": 215966512,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1604772446
    },
    {
        "content": "<p>which severely limits data we can access</p>",
        "id": 215966519,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1604772461
    },
    {
        "content": "<p>so part of me wants it to be a parameter passes in, but from where?</p>",
        "id": 215966520,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1604772474
    },
    {
        "content": "<p>Registering reporters at the call site is probably not the best idea</p>",
        "id": 215966880,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1604772988
    },
    {
        "content": "<p>How limiting is having a global reporter? Is it much of a hassle in eyre?</p>",
        "id": 215966901,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1604773065
    },
    {
        "content": "<p>I haven't seen any concrete cases where it's insufficient</p>",
        "id": 215967253,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1604773654
    },
    {
        "content": "<p>tho in libraries that wish to interact with it there's some breakdown</p>",
        "id": 215967263,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1604773677
    },
    {
        "content": "<p>but part of me thinks that's usually because libraries should stick to their own Error types rather than interacting with a reporter, but I know of good arguments in favor of them as well</p>",
        "id": 215967309,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1604773718
    },
    {
        "content": "<p>and is having libs maintain owned Error types the general outline we are<br>\nreferring to when thinking about a universal reporting mechanism?</p>",
        "id": 216015292,
        "sender_full_name": "oliver",
        "timestamp": 1604855036
    },
    {
        "content": "<p>or is 'any' meant to be significantly different than that?</p>",
        "id": 216015341,
        "sender_full_name": "oliver",
        "timestamp": 1604855076
    },
    {
        "content": "<p>not necessarily</p>",
        "id": 216015383,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1604855155
    },
    {
        "content": "<p>I think we can make those two goals independent</p>",
        "id": 216015424,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1604855171
    },
    {
        "content": "<p>tho we don't have 'universal reporting mechanism' defined</p>",
        "id": 216015437,
        "sender_full_name": "oliver",
        "timestamp": 1604855194
    },
    {
        "content": "<p>but I think reporting and dyn errors like anyhow should be designed with eachother in mind</p>",
        "id": 216015439,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1604855197
    },
    {
        "content": "<p>yet</p>",
        "id": 216015440,
        "sender_full_name": "oliver",
        "timestamp": 1604855198
    },
    {
        "content": "<p>yea</p>",
        "id": 216015442,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1604855202
    },
    {
        "content": "<p>so we are going to ask users to wrap their own reporters but haven't thought<br>\nthrough exactly what's included in that and how the lifetimes work when crossing<br>\ncontexts</p>",
        "id": 216015631,
        "sender_full_name": "oliver",
        "timestamp": 1604855474
    },
    {
        "content": "<p>or whatever 'accessing context' means in that respect</p>",
        "id": 216015640,
        "sender_full_name": "oliver",
        "timestamp": 1604855505
    },
    {
        "content": "<p>I think we're still pretty far from users having to worry about stuff</p>",
        "id": 216016175,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1604856226
    },
    {
        "content": "<p>but ideally most ppl shouldn't have to interact with these features at all</p>",
        "id": 216016234,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1604856264
    },
    {
        "content": "<p>what is our definition of 'accessing context' then?</p>",
        "id": 216016541,
        "sender_full_name": "oliver",
        "timestamp": 1604856646
    },
    {
        "content": "<p>I'm still confused about reporting types v. error kind patterns</p>",
        "id": 216016985,
        "sender_full_name": "oliver",
        "timestamp": 1604857231
    },
    {
        "content": "<p>my definition for context is information about an error or the system it comes from that isn't itself an error message</p>",
        "id": 216017282,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1604857640
    },
    {
        "content": "<p>so if you're writing a parser, the error might describe how syntax was violated, and the actual code snippet the error comes from would be context</p>",
        "id": 216017290,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1604857670
    },
    {
        "content": "<p>and the problem is accessing the source map (context) from an error reporter</p>",
        "id": 216017342,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1604857688
    },
    {
        "content": "<p>the universal reporting proposal might blur the line a bit between reporting types and errors</p>",
        "id": 216017366,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1604857743
    },
    {
        "content": "<p>or maybe more cleanly separate them</p>",
        "id": 216017371,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1604857752
    },
    {
        "content": "<p>(still organizing ideas in my head)</p>",
        "id": 216017378,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1604857789
    },
    {
        "content": "<p>me too <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 216017428,
        "sender_full_name": "oliver",
        "timestamp": 1604857814
    },
    {
        "content": "<p>What about having a global <code>'static</code> <code>Reporter</code> as well as allowing scoped thread-local overrides, something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">set_global_reporter</span><span class=\"p\">(</span><span class=\"n\">v</span>: <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">Reporter</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Sync</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">static</span><span class=\"o\">&gt;</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// panics if old reporter currently borrowed, or we could use Arc</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">borrow_reporter</span><span class=\"o\">&lt;</span><span class=\"n\">R</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">f</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">FnOnce</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">Reporter</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">_</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">R</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">R</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">with_scoped_reporter</span><span class=\"o\">&lt;</span><span class=\"n\">R</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">reporter</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">dyn</span><span class=\"w\"> </span><span class=\"n\">Reporter</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">FnOnce</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">R</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">R</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 216022855,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1604865899
    },
    {
        "content": "<p>does that allow for concurrent reporters?</p>",
        "id": 216030006,
        "sender_full_name": "oliver",
        "timestamp": 1604876576
    },
    {
        "content": "<p>do you think scoped thread-local reporters would be useful? I can see some uses for it, but is that a good solution for current doubts?</p>",
        "id": 216053553,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1604910021
    },
    {
        "content": "<p>a couple things: I don't know if that's been discussed specifically so it's<br>\npossible the point is out of scope tho we are meant to consider how<br>\nrepresentations inter-operate as well as how they're reached, hypothesizing about<br>\na concurrent state where some amount of context concerning the run-time is<br>\nimportant isn't too doubtful, I was largely thinking about the idea of<br>\n'accessing context' within the spirit of a 'universal reporting mechanism'<br>\nwhich was just mentioned prior to, do you have any thoughts about that?</p>",
        "id": 216089440,
        "sender_full_name": "oliver",
        "timestamp": 1604931677
    },
    {
        "content": "<p>Could you explain <code>inter-operate</code>?</p>",
        "id": 216097006,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1604934742
    },
    {
        "content": "<p>meaning that we have different representations of the error trace and they can collide?</p>",
        "id": 216097062,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1604934769
    },
    {
        "content": "<p>here: <a href=\"https://github.com/rust-lang/project-error-handling/issues/10\">https://github.com/rust-lang/project-error-handling/issues/10</a></p>",
        "id": 216097398,
        "sender_full_name": "oliver",
        "timestamp": 1604934901
    },
    {
        "content": "<p>I think conceptually collision could be an issue if errors were being generated<br>\nin parallel though I'm lacking a concrete example of that</p>",
        "id": 216097737,
        "sender_full_name": "oliver",
        "timestamp": 1604935059
    },
    {
        "content": "<p>the way it is being presented now is such that reporters won't be registered at<br>\nthe call site though I'm not clear if that encapsulates concurrency</p>",
        "id": 216097999,
        "sender_full_name": "oliver",
        "timestamp": 1604935175
    },
    {
        "content": "<p>like I think with a parent reporter the program would have to halt when a error<br>\nmessage is being generated from a sub-process</p>",
        "id": 216101840,
        "sender_full_name": "oliver",
        "timestamp": 1604936712
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281739\">oliver</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/Globally.20Consistent.20Error.20Reporting/near/216030006\">said</a>:</p>\n<blockquote>\n<p>does that allow for concurrent reporters?</p>\n</blockquote>\n<p>I think so, you can have a non-<code>'static</code> reporter be in scope on multiple threads at once if using something like rayon's scoped threads, all you need is to pass the same reporter to <code>with_scoped_reporter</code> on every thread. The reporter would need to use a <code>Mutex</code> (or other primitive) internally for any mutable state. Alternatively, the global reporter could be set for <code>'static</code> reporters and that would apply program-wide (except where locally overridden by <code>with_scoped_reporter</code>).</p>",
        "id": 216106977,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1604938616
    },
    {
        "content": "<p>rayon could probably be extended to automatically copy scoped reporters between threads if reporters are always <code>Send + Sync</code></p>",
        "id": 216107210,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1604938720
    },
    {
        "content": "<p>does that impact rayon in any way?</p>",
        "id": 216109401,
        "sender_full_name": "oliver",
        "timestamp": 1604939640
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281739\">oliver</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/Globally.20Consistent.20Error.20Reporting/near/216101840\">said</a>:</p>\n<blockquote>\n<p>like I think with a parent reporter the program would have to halt when a error<br>\nmessage is being generated from a sub-process</p>\n</blockquote>\n<p>I get you now, this seems like a relevant issue with global things</p>",
        "id": 216125929,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1604946960
    },
    {
        "content": "<p>a bunch of spaghetti reporting info is rotten, so some of the work on pointer<br>\nmetadata may enable us to capture ordering relevant data or something in<br>\nrayon perhaps</p>",
        "id": 216126787,
        "sender_full_name": "oliver",
        "timestamp": 1604947400
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"229517\">Jacob Lifshay</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/Globally.20Consistent.20Error.20Reporting/near/216106977\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"281739\">oliver</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/Globally.20Consistent.20Error.20Reporting/near/216030006\">said</a>:</p>\n<blockquote>\n<p>does that allow for concurrent reporters?</p>\n</blockquote>\n<p>I think so, you can have a non-<code>'static</code> reporter be in scope on multiple threads at once if using something like rayon's scoped threads, all you need is to pass the same reporter to <code>with_scoped_reporter</code> on every thread. The reporter would need to use a <code>Mutex</code> (or other primitive) internally for any mutable state. Alternatively, the global reporter could be set for <code>'static</code> reporters and that would apply program-wide (except where locally overridden by <code>with_scoped_reporter</code>).</p>\n</blockquote>\n<p>the biggest hole I see with this approach is the \"you need to pass the reporter to every thread\" bit. One of the goals here is to make it more or less impossible to mess up and lose information in your error messages</p>",
        "id": 216126981,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1604947512
    },
    {
        "content": "<p>the key thing being panicking on an <code>E: Error</code> type where it leaves out it's source errors</p>",
        "id": 216127011,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1604947529
    },
    {
        "content": "<p>so if we can forget to setup a reporter in a certain context and get error reports that look different that would be bad</p>",
        "id": 216127030,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1604947543
    },
    {
        "content": "<p>and violate the \"universally consistent\" goal</p>",
        "id": 216127047,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1604947548
    },
    {
        "content": "<p>Well, then just set the global error reporter using a <code>'static</code> reporter. That would automatically apply program-wide (except where overridden).</p>",
        "id": 216135791,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1604951827
    },
    {
        "content": "<p>supporting global reporters with shorter lifetimes is possible, but the semantics of what to do are quite messy when the reporter's lifetime expires and you need to replace the global reporter with the previous reporter.</p>",
        "id": 216136380,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1604952120
    }
]