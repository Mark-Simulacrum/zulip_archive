[
    {
        "content": "<p>Early impression of the teams and working groups is that GH issues and PRs get a<br>\nlot of traction and shares which OFC is always appreciated but it's still<br>\nsometimes a pretty big data dump loaded with background info and links. Maybe we<br>\nwould start by defining and including some of our key terms in the <code>rustc</code> docs<br>\nglossary and drafting a shared bibliography and tl;dr notes?</p>",
        "id": 210758206,
        "sender_full_name": "oliver",
        "timestamp": 1600702293
    },
    {
        "content": "<p>That is pretty much reflected here: <br>\n<a href=\"https://github.com/rust-lang/project-error-handling/blob/master/CHARTER.md\">https://github.com/rust-lang/project-error-handling/blob/master/CHARTER.md</a></p>",
        "id": 210758545,
        "sender_full_name": "oliver",
        "timestamp": 1600702443
    },
    {
        "content": "<p>Something like this: <a href=\"https://github.com/rust-lang/wg-async-foundations/tree/master/src\">https://github.com/rust-lang/wg-async-foundations/tree/master/src</a></p>",
        "id": 210759148,
        "sender_full_name": "oliver",
        "timestamp": 1600702702
    },
    {
        "content": "<p>I was thinking we might want to start by creating an error handling book that is stored in our project group repo and use that to develop things like a glossary of terms and chapters on discussion topics such as \"API Stability\". We can probably build a lot off of the \"Failure Book\".</p>",
        "id": 210768354,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600706973
    },
    {
        "content": "<p>An error handling book would be incredible!</p>",
        "id": 210778672,
        "sender_full_name": "oliver",
        "timestamp": 1600711704
    },
    {
        "content": "<p>Which is the Failure Book?</p>",
        "id": 210779079,
        "sender_full_name": "oliver",
        "timestamp": 1600711898
    },
    {
        "content": "<p><a href=\"https://boats.gitlab.io/failure/\">https://boats.gitlab.io/failure/</a></p>",
        "id": 210779192,
        "sender_full_name": "oliver",
        "timestamp": 1600711933
    },
    {
        "content": "<p>that's the one</p>",
        "id": 210779222,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600711953
    },
    {
        "content": "<p>another section that I think would be useful would be some api guidelines, specifically so we can explain how to write \"idiomatic error messages\", tho im not sure that will be something that we can actually define</p>",
        "id": 210779896,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600712239
    },
    {
        "content": "<p>but its worth looking into i think</p>",
        "id": 210779906,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600712244
    },
    {
        "content": "<p>i have my own conventions that I follow that I've tried to base on the conventions in std, I'd be very interested to hear everyone else's conventions</p>",
        "id": 210779974,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600712281
    },
    {
        "content": "<p>(renamed this as \"The Book of Error\" <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span> )</p>",
        "id": 210791957,
        "sender_full_name": "DPC",
        "timestamp": 1600718464
    },
    {
        "content": "<p>i like the idea of the book, I often come across people asking \"how to handle errors\" and related questions, and it would be nice to point them towards a official resource</p>",
        "id": 210792032,
        "sender_full_name": "DPC",
        "timestamp": 1600718516
    },
    {
        "content": "<p>agreed</p>",
        "id": 210792109,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600718537
    },
    {
        "content": "<p>it doesn't have to be about \"idiomatic error messages\", it can be a checklist of \"have you thought about this?\"</p>",
        "id": 210792207,
        "sender_full_name": "Jubilee",
        "timestamp": 1600718598
    },
    {
        "content": "<p>I'd like it to have a chapter that is just titled \"There's no One True Way\".</p>",
        "id": 210792257,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1600718630
    },
    {
        "content": "<p>_wondering how the Rust API Guidelines word this_</p>",
        "id": 210792260,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600718633
    },
    {
        "content": "<p>they call it guidelines</p>",
        "id": 210792340,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600718656
    },
    {
        "content": "<p>and they have a checklist</p>",
        "id": 210792346,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600718658
    },
    {
        "content": "<p>whatever we do we should follow the example set here <a href=\"https://rust-lang.github.io/api-guidelines\">https://rust-lang.github.io/api-guidelines</a> for any guidelines we come up with</p>",
        "id": 210792378,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600718677
    },
    {
        "content": "<blockquote>\n<p>Error types are meaningful and well-behaved (C-GOOD-ERR)</p>\n</blockquote>",
        "id": 210792455,
        "sender_full_name": "Jubilee",
        "timestamp": 1600718725
    },
    {
        "content": "<div class=\"message_inline_image\"><a href=\"https://upload.wikimedia.org/wikipedia/en/4/44/I_am_Error.png\"><img src=\"https://upload.wikimedia.org/wikipedia/en/4/44/I_am_Error.png\"></a></div>",
        "id": 210792600,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1600718807
    },
    {
        "content": "<p>My feels are that there should be \"here's ways of doing things. Here's pros/cons. If you still don't know what you want, start with this\"</p>",
        "id": 210792712,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1600718879
    },
    {
        "content": "<p>but i understand that people prefer to not be forced to think or design and just want The Answer.</p>",
        "id": 210792796,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1600718908
    },
    {
        "content": "<p>(I've heard that phrased as a downside to Rust in general: \"I don't like Rust because it makes you think about what you are trying to do before you do it\").</p>",
        "id": 210792948,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1600719000
    },
    {
        "content": "<p>It's entirely conceivable that error handling could be (or is already) good enough<br>\nin Rust to convert generally negative views like that into overall positive<br>\nsentiment.</p>",
        "id": 210794512,
        "sender_full_name": "oliver",
        "timestamp": 1600719650
    },
    {
        "content": "<p>My experience begs to differ</p>",
        "id": 210794545,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600719666
    },
    {
        "content": "<p>my personal feeling is that there's only so much we can do, and there will always be a subset of the rust community who is vocal about disliking how \"complicated\" error handling is in rust</p>",
        "id": 210794604,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600719708
    },
    {
        "content": "<p>Amusingly, I also heard some of the opposite:</p>\n<blockquote>\n<p>It's just I completely fail to understand what the fuss is all about when it comes to error handling. I don't understand the existence of the myriad error handling libraries, nor the vast amount of improvement ideas, which are in my book introduce zero improvements to the language.<br>\nI think Rust has an incredibly nice, convenient, consistent, and simple (!) way of dealing with errors, without magic and whatnot. It just works and it does an amazing job -- by far the best I've seen in the dozen or so languages I speak. I'm not against improvements in general, for example I like the idea of the try-blocks as it was discussed earlier this year. But to create a work-group around this and invest precious time into a non-existent problem.. I fail to see how that's useful.</p>\n</blockquote>",
        "id": 210794824,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1600719797
    },
    {
        "content": "<p><span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 210794966,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600719862
    },
    {
        "content": "<p>seems like the difference between \"I know how I like to handle errors and I have no interest in learning more about it\" and \"I dont know how to handle errors and I have no interest in learning more about it\"</p>",
        "id": 210795030,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600719903
    },
    {
        "content": "<p>alternatively you could view it as a split between \"rust error handling is overcomplicated\" and \"3rd party error handling libraries are overcomplicated\"</p>",
        "id": 210795260,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600720009
    },
    {
        "content": "<p>Which languages are considered to have a comparable error system?</p>",
        "id": 210795891,
        "sender_full_name": "oliver",
        "timestamp": 1600720323
    },
    {
        "content": "<p>Off the top of my head I can't think of a decent competitor</p>",
        "id": 210796006,
        "sender_full_name": "oliver",
        "timestamp": 1600720362
    },
    {
        "content": "<p>the problem is everyone wants a different way of error handling and wants that way to be the way <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 210796234,
        "sender_full_name": "DPC",
        "timestamp": 1600720469
    },
    {
        "content": "<p>Lots of people just want the textual simplicity of Python when writing Rust, and the answer to them is basically always going to be \"no, you don't get that.\" and then a pause, and adding, \"but maybe we can get closer.\"</p>",
        "id": 210796490,
        "sender_full_name": "Jubilee",
        "timestamp": 1600720619
    },
    {
        "content": "<p>cf. the recent proposal for a short-hand prompt API (good! the current machinery is kinda bulky!) which went all the way up to suggesting, explicitly, \"it should be one line because the Python API is one line.\"</p>",
        "id": 210797667,
        "sender_full_name": "Jubilee",
        "timestamp": 1600721208
    },
    {
        "content": "<p>One-liners can turn pretty evil honestly</p>",
        "id": 210798767,
        "sender_full_name": "oliver",
        "timestamp": 1600721790
    },
    {
        "content": "<p>Even what you want <em>to do</em> on an error matters. If you want to handle some error cases, you generally need an error enum because that's how rust handles variant situations. If you don't want to handle errors and you just want to say there was an error then <code>Box&lt;dyn ErrorTrait&gt;</code> is all you really need... unless you're no_alloc in which case it's back to the error enum (or even just integer codes, gross) for you.</p>",
        "id": 210805350,
        "sender_full_name": "Lokathor",
        "timestamp": 1600725339
    },
    {
        "content": "<p>I think a lot of people just don't want to deal with errors at all, e.g. just want to throw unchecked exceptions and forget about them, and handle them in a single try block at the top level. A lot of error \"handling\" seems to boil down to just logging that a problem occurred. I think for a lot of people, error handling just isn't the \"fun\" part of programming, and so they don't want to spend more time on it. That's just my opinion, anyway.</p>",
        "id": 210836267,
        "sender_full_name": "Seán Kelleher",
        "timestamp": 1600760210
    },
    {
        "content": "<p>I agree with Jake, that the book should probably describe the different \"main\" ways of error handling, so that at the very least there's some convention when people decide how they perform error handling, even if they do it in a custom way. Just as a suggestion, I think it should start by laying out a basic/fairly hands-off approach, because realistically, this is going to be the go-to for those people who want quick answers, I'm guessing. This will probably boil down to using <code>?</code> to throw errors that come from an <code>Error</code> enum with all of your variants, define reporters on the variants, and when you run into a problem where you need more context, this is how you add that context. This should be enough to help such people get off the ground and forget about errors. Then there could be one or two more chapters that detail extra \"layers\" of error handling, depending on how rigorous you want it. These could do things like introduce SNAFU, recommend adding all relevant context for each error, overview of Backtrace etc.</p>",
        "id": 210836826,
        "sender_full_name": "Seán Kelleher",
        "timestamp": 1600760675
    },
    {
        "content": "<p>Another suggestion is that it should hopefully be referenced, or perhaps integrated somewhat, in the Rust book; I tend to go to that as a de-facto guide on conventions, etc., and I wonder if others do too.</p>",
        "id": 210836955,
        "sender_full_name": "Seán Kelleher",
        "timestamp": 1600760768
    },
    {
        "content": "<p>I'd like the book to have a few entry points, e.g. \"coming from c-like langs\", \"from exception-based langs\", \"rust as a new lang\". And also a chapter on gradual error development, so it would describe how to lay an extendable foundation for error handling with minimal initial effort.</p>",
        "id": 210969349,
        "sender_full_name": "imbolc",
        "timestamp": 1600847698
    },
    {
        "content": "<p>\"The Book of Error\" sounds great. I already want to read it.</p>\n<p>I think it should address error production vs. consumption/libraries vs. binaries/error defining (?) vs. reporting. Personally, this distinction was the \"a-ha!\" moment after which the Rust error handling ecosystem started to make sense.</p>",
        "id": 210986077,
        "sender_full_name": "Mukund Lakshman",
        "timestamp": 1600858487
    }
]