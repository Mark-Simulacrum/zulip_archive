[
    {
        "content": "<p>FWIW I have had difficulty with all the third party options. They all seem like Frameworks with a capital F and I'm sure they are all fine but would prefer some official recommendations that the whole community can get behind. The thing that's in the standard library, the usual source of official recommendations, is the Error trait, and this seems to be generally regarded as kind of meh</p>",
        "id": 210801778,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600723322
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"271719\">@Mario Carneiro</span> can you give examples of libraries that felt like frameworks and how?</p>",
        "id": 210801878,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600723373
    },
    {
        "content": "<p>Well, I'm aware of eyre and snafu and failure and I think some others, and the names are colorful and tell me nothing about which is better for what</p>",
        "id": 210801943,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600723418
    },
    {
        "content": "<blockquote>\n<p>The thing that's in the standard library, the usual source of official recommendations, is the Error trait, and this seems to be generally regarded as kind of meh</p>\n</blockquote>\n<p>Also curious to hear more about this. I know this was the common sentiment prior to stabilizing the <code>source</code> method but recently I've not heard much feedback like this</p>",
        "id": 210801962,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600723430
    },
    {
        "content": "<p>or if they are all about the same then maybe they should consolidate</p>",
        "id": 210802019,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600723445
    },
    {
        "content": "<p>eyre is an error reporting library, snafu is an error defining proc macro library with lots of helpers, failure is both and deprecated</p>",
        "id": 210802057,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600723470
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/User.20Stories.3A.20Error.20Handling.20Pain.20Points/near/210801943\">said</a>:</p>\n<blockquote>\n<p>Well, I'm aware of eyre and snafu and failure and I think some others, and the names are colorful and tell me nothing about which is better for what</p>\n</blockquote>\n<p>this doesn't seem to explain how they feel like frameworks</p>",
        "id": 210802170,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600723541
    },
    {
        "content": "<p>Result and ? are in rust and work fine as long as you don't need big and complicated error hierarchies. That's what I use for most day to day stuff</p>",
        "id": 210802174,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600723542
    },
    {
        "content": "<p>do you have any projects you feel comfortable sharing? I'm interested in seeing how you're structuring your error types inside of <code>Result</code></p>",
        "id": 210802245,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600723572
    },
    {
        "content": "<p>I guess I just want the rust book to say \"here just do this\" and have good defaults that work for general purpose stuff</p>",
        "id": 210802280,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600723595
    },
    {
        "content": "<p>Let's see: ATM I'm working on a language server for a language of my own, and it interprets user code that can fail and I need to give good error messages there. My low tech solution is not particularly well suited to getting nice user level stack traces</p>",
        "id": 210802444,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600723683
    },
    {
        "content": "<p>the rust book has to go for the lowest common denominator, so it can't really recommend anything that's not in <code>std</code></p>",
        "id": 210802475,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600723693
    },
    {
        "content": "<p>Well I think that's part of the issue: from someone coming from another language this seems like it shouldn't be its own thing</p>",
        "id": 210802562,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600723748
    },
    {
        "content": "<p>what do you mean \"shouldn't be its own thing?\"</p>",
        "id": 210802587,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600723764
    },
    {
        "content": "<p>the idea that you would need a whole book to describe how to handle errors seems pretty scary</p>",
        "id": 210802604,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600723775
    },
    {
        "content": "<p>as in these shouldn't be separate libraries and should be built into the lang / std?</p>",
        "id": 210802608,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600723777
    },
    {
        "content": "<p>It's fine if it's a separate library as long as there is some consensus in the community that it's the right approach</p>",
        "id": 210802700,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600723816
    },
    {
        "content": "<p>but having several competing options is cognitive load</p>",
        "id": 210802724,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600723834
    },
    {
        "content": "<p>to be fair, the options you mentioned are mostly complementary rather than competing</p>",
        "id": 210802812,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600723882
    },
    {
        "content": "<p>Maybe the Book of Errors would be just the thing then</p>",
        "id": 210802855,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600723906
    },
    {
        "content": "<p>except for failure, which is deprecated and afaik inspired both eyre and snafu</p>",
        "id": 210802856,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600723906
    },
    {
        "content": "<p>eyre's source code can be traced back to failure actually</p>",
        "id": 210802927,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600723927
    },
    {
        "content": "<p>something that goes through building a mid-size program and doing good error reporting in it</p>",
        "id": 210802936,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600723931
    },
    {
        "content": "<p>eyre is a fork of anyhow which is a split of <code>fehler</code> which started as a rewrite of <code>failure</code></p>",
        "id": 210802951,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600723939
    },
    {
        "content": "<p>ah right I knew I missed a couple</p>",
        "id": 210802971,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600723955
    },
    {
        "content": "<p>that seems to be a common story, lol</p>",
        "id": 210803035,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600723995
    },
    {
        "content": "<p>hopefully something we can fix</p>",
        "id": 210803040,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600723998
    },
    {
        "content": "<p>maybe a chapter on the history and evolution of error handling in rust would be appropriate</p>",
        "id": 210803055,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600724011
    },
    {
        "content": "<p>especially because from the outside the time axis is absent</p>",
        "id": 210803086,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600724028
    },
    {
        "content": "<p>yea</p>",
        "id": 210803092,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600724037
    },
    {
        "content": "<p>It's really valuable to know now that eyre and snafu are the active ones</p>",
        "id": 210803154,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600724053
    },
    {
        "content": "<p>have you seen <span class=\"user-mention\" data-user-id=\"211722\">@Yoshua Wuyts</span> 's survey of the error handling ecosystem ?</p>",
        "id": 210803157,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600724054
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/User.20Stories.3A.20Error.20Handling.20Pain.20Points/near/210803154\">said</a>:</p>\n<blockquote>\n<p>It's really valuable to know now that eyre and snafu are the active ones</p>\n</blockquote>\n<p>its a little more complicated than this</p>",
        "id": 210803182,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600724069
    },
    {
        "content": "<p>eyre / anyhow are the most actively used reporting libraries</p>",
        "id": 210803196,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600724076
    },
    {
        "content": "<p>:P</p>",
        "id": 210803206,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600724081
    },
    {
        "content": "<p>snafu / thiserror / derive_more / a bunch more libraries exist and are active for defining errors</p>",
        "id": 210803218,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600724090
    },
    {
        "content": "<p>all of them seek to reduce boilerplate around implementing associated traits and in some cases gathering context</p>",
        "id": 210803247,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600724108
    },
    {
        "content": "<p>and then there are other error handling libraries that don't really overlap with either of those goals</p>",
        "id": 210803267,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600724125
    },
    {
        "content": "<p>such as tracing-error which is for instrumenting errors with custom defined stack traces that include runtime information</p>",
        "id": 210803291,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600724142
    },
    {
        "content": "<p>or <code>fehler</code> which adjusts the syntax of error propagation to be more like exceptions thru a proc macro</p>",
        "id": 210803322,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600724162
    },
    {
        "content": "<p>ah, now I remember that, <code>fehler</code> is ok-wrapping</p>",
        "id": 210803416,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600724195
    },
    {
        "content": "<p>and there are color-eyre and color-backtrace for customizing the format of your error reports</p>",
        "id": 210803419,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600724196
    },
    {
        "content": "<p>are those for console printing?</p>",
        "id": 210803458,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600724217
    },
    {
        "content": "<p>to a degree</p>",
        "id": 210803471,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600724223
    },
    {
        "content": "<p>color-backtrace pretty much exclusively</p>",
        "id": 210803483,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600724229
    },
    {
        "content": "<p>color-eyre right now exclusively as well tho in the future im planning on adding integration with logging</p>",
        "id": 210803504,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600724245
    },
    {
        "content": "<p>Would you say that the Error trait is sufficient for the sorts of things eyre is doing?</p>",
        "id": 210803544,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600724277
    },
    {
        "content": "<p>no</p>",
        "id": 210803586,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600724284
    },
    {
        "content": "<p>and I've already written an RFC to address the issue</p>",
        "id": 210803597,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600724294
    },
    {
        "content": "<p><a href=\"https://github.com/yaahc/rfcs/blob/master/text/0000-dyn-error-generic-member-access.md\">https://github.com/yaahc/rfcs/blob/master/text/0000-dyn-error-generic-member-access.md</a></p>",
        "id": 210803634,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600724334
    },
    {
        "content": "<p>tho now its a little out of date because my friend whose been helping me with the object-provider part of the proposed api recently did a bunch of improvements on the design</p>",
        "id": 210803669,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600724359
    },
    {
        "content": "<p>so I gotta bring those changes into the RFC</p>",
        "id": 210803678,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600724367
    },
    {
        "content": "<p>My language server has a spot where it collects errors from anywhere and everywhere (including panics) in order to not stop the show. This uses <code>Box&lt;dyn Error + Send + Sync&gt;</code> and the reporting is pretty atrocious</p>",
        "id": 210803829,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600724466
    },
    {
        "content": "<p>:/</p>",
        "id": 210803846,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600724484
    },
    {
        "content": "<p>well i can definitely recommend both eyre and anyhow for fixing reporting issues</p>",
        "id": 210803887,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600724519
    },
    {
        "content": "<p>you can think of their <code>eyre::Report</code>/<code>anyhow::Error</code> types as a fancy <code>Box&lt;dyn Error + Send + Sync + 'static&gt;</code></p>",
        "id": 210803978,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600724551
    },
    {
        "content": "<p>elsewhere I have one error type <code>ElabError</code> so that I can do the classic <code>type Result&lt;T&gt; = Result&lt;T, ElabError&gt;</code>. In principle this should be a big enum but right now it's basically a wrapper around a source location and a dyn Display</p>",
        "id": 210803991,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600724557
    },
    {
        "content": "<p>aah</p>",
        "id": 210804015,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600724573
    },
    {
        "content": "<p>so would you say you're almost exclusively reporting errors</p>",
        "id": 210804046,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600724593
    },
    {
        "content": "<p>and infrequently reacting to specific errors?</p>",
        "id": 210804056,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600724598
    },
    {
        "content": "<p>Yes, but context and location gathering is important and all hand rolled right now</p>",
        "id": 210804111,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600724623
    },
    {
        "content": "<p>gotcha</p>",
        "id": 210804126,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600724628
    },
    {
        "content": "<p>yea this seems like exactly the problem eyre/anyhow try to solve</p>",
        "id": 210804163,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600724643
    },
    {
        "content": "<p>they let you define adhoc error types from anything that implements Display</p>",
        "id": 210804198,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600724650
    },
    {
        "content": "<p>I even have a <code>try1!(..)</code> local macro in some functions order to attach some local data to an error before throwing it</p>",
        "id": 210804215,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600724661
    },
    {
        "content": "<p>rn I haven't added support for #[track_caller] but I have been meaning to</p>",
        "id": 210804225,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600724665
    },
    {
        "content": "<p>so pretty soon they will implicitly grab the location they were created</p>",
        "id": 210804247,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600724682
    },
    {
        "content": "<p>makes sense</p>",
        "id": 210804264,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600724696
    },
    {
        "content": "<p>you should be able to do the same thing currently</p>",
        "id": 210804275,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600724702
    },
    {
        "content": "<p>if you remove the <code>try1</code> macro and instead use <code>#[track_caller]</code> on your <code>From</code> impl or <code>new</code> or w/e</p>",
        "id": 210804304,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600724721
    },
    {
        "content": "<p>then you can just use <code>?</code> and it will still grab the location</p>",
        "id": 210804326,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600724734
    },
    {
        "content": "<p>Well in my case it's not the literal rust stack trace I'm collecting but rather the stack of the language I'm interpreting</p>",
        "id": 210804360,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600724759
    },
    {
        "content": "<p>ooh interesting</p>",
        "id": 210804417,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600724769
    },
    {
        "content": "<p>so it's probably more like contextual information from the rust perspective</p>",
        "id": 210804425,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600724776
    },
    {
        "content": "<p>so at each propagation point you push in a new location?</p>",
        "id": 210804445,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600724788
    },
    {
        "content": "<p>and its not a <code>std::panic::Location</code></p>",
        "id": 210804455,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600724795
    },
    {
        "content": "<p>its like</p>",
        "id": 210804456,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600724796
    },
    {
        "content": "<p>a <code>Span</code> from the source of your language?</p>",
        "id": 210804470,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600724802
    },
    {
        "content": "<p>yea</p>",
        "id": 210804475,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600724808
    },
    {
        "content": "<p>gotcha</p>",
        "id": 210804478,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600724810
    },
    {
        "content": "<p>okay yea, you'll still need your own infra for gathering those</p>",
        "id": 210804500,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600724826
    },
    {
        "content": "<p>tho <code>eyre</code> might be a good fit for collecting that info</p>",
        "id": 210804532,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600724843
    },
    {
        "content": "<p>That's fine, I just need the error object to be able to organize the info in some way</p>",
        "id": 210804566,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600724865
    },
    {
        "content": "<p>and nice printing is nice too</p>",
        "id": 210804579,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600724872
    },
    {
        "content": "<p>eyre lets you define a custom hook for creating error handlers that can store arbitrary data</p>",
        "id": 210804646,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600724891
    },
    {
        "content": "<p>heres the one for color-eyre</p>",
        "id": 210804652,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600724894
    },
    {
        "content": "<p><a href=\"https://docs.rs/color-eyre/0.5.4/src/color_eyre/lib.rs.html#397-408\">https://docs.rs/color-eyre/0.5.4/src/color_eyre/lib.rs.html#397-408</a></p>",
        "id": 210804653,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600724897
    },
    {
        "content": "<p>for instance if the error object has a thing called a stack trace I could just give it my synthetic stack trace</p>",
        "id": 210804667,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600724912
    },
    {
        "content": "<p>so instead of storing dyn Display sections for an error report which is what color-eyre is all about you could have a Vec&lt;SpanLocation&gt; for your language</p>",
        "id": 210804683,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600724923
    },
    {
        "content": "<p>and then define an extension trait for pushing new locations into the report as you propagate it up the stack</p>",
        "id": 210804699,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600724935
    },
    {
        "content": "<p>like this <a href=\"https://docs.rs/color-eyre/0.5.4/color_eyre/section/trait.Section.html\">https://docs.rs/color-eyre/0.5.4/color_eyre/section/trait.Section.html</a></p>",
        "id": 210804729,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600724949
    },
    {
        "content": "<p>_is happy to talk all day about error reporting_</p>",
        "id": 210804846,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600725010
    },
    {
        "content": "<p>lol</p>",
        "id": 210804852,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600725014
    },
    {
        "content": "<p>Yeah I still need to do my homework on this stuff, I know I've written a ball of hacks and I'm hoping that there is a magical library that solves my problems :)</p>",
        "id": 210804945,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600725087
    },
    {
        "content": "<p>_biased opinion_ that library is eyre</p>",
        "id": 210804966,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600725103
    },
    {
        "content": "<p>heh</p>",
        "id": 210805128,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600725200
    },
    {
        "content": "<p>thanks!</p>",
        "id": 210805135,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600725204
    },
    {
        "content": "<p>my pleasure</p>",
        "id": 210805145,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600725210
    },
    {
        "content": "<p>feel free to msg me directly if you want any feedback / help on error handling and reporting in general</p>",
        "id": 210805166,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600725231
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/User.20Stories.3A.20Error.20Handling.20Pain.20Points/near/210802444\">said</a>:</p>\n<blockquote>\n<p>My low tech solution is not particularly well suited to getting nice user level stack traces</p>\n</blockquote>\n<p>I feel like that's a strong suit of SNAFU. Its primary goal is in adding context to errors. That context often comes from Rust-code-level information, but can easily come from something in the state of the program.</p>\n<p>I often say that, when used as intended, SNAFU allows you to have <em>semantic backtraces</em> (as opposed to actual function-level backtraces, which it also supports).</p>",
        "id": 210810311,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1600728872
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> I think you missed some later context, the stack traces <span class=\"user-mention\" data-user-id=\"271719\">@Mario Carneiro</span>  is generating are for the programming language they're writing, not for their rust application itself</p>",
        "id": 210810483,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600729009
    },
    {
        "content": "<p>as part of a language server</p>",
        "id": 210810497,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600729023
    },
    {
        "content": "<p>I did not miss that. That's explicitly what I'm referring to:</p>\n<blockquote>\n<p>That context often comes from Rust-code-level information, <strong>but can easily come from something in the state of the program.</strong></p>\n</blockquote>",
        "id": 210810531,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1600729063
    },
    {
        "content": "<p>Thus why I'm stating that a semantic stack trace, something that is not the actual stack trace, is relevant.</p>",
        "id": 210810605,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1600729104
    },
    {
        "content": "<p>hmm, I had assumed <span class=\"user-mention\" data-user-id=\"271719\">@Mario Carneiro</span> was building up the stack trace by pushing to a list of spans, rather than wrapping error types to aggregate more ifnromation, but thats just a guess</p>",
        "id": 210810613,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600729113
    },
    {
        "content": "<p>in any case, dont mind me <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 210810645,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600729151
    },
    {
        "content": "<p>That's more or less true. Some part of the context data can be derived from the calling context, and the rest is obtained by explicitly consulting the program stack (which is a big vector of stack frames used during interpretation)</p>",
        "id": 210810684,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600729201
    },
    {
        "content": "<p>That's certainly a possibility, but that seems to still fit with what I said. That list of spans is program state. It can be added to an error when the error is constructed / handled.</p>",
        "id": 210810785,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1600729220
    },
    {
        "content": "<p>I'm not really sure what \"semantic backtrace\" means though</p>",
        "id": 210810823,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600729249
    },
    {
        "content": "<p>what is semantic about them?</p>",
        "id": 210810831,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600729254
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>Could not translate the source document &quot;foo.txt&quot;\nBecause the translation server &quot;bar.example.com&quot; could not be reached\nBecause the address could not be resolved\nBecause there is no network connection\n</code></pre></div>",
        "id": 210810991,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1600729363
    },
    {
        "content": "<p>oh, that's pretty nifty</p>",
        "id": 210811018,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600729382
    },
    {
        "content": "<p>As opposed to </p>\n<div class=\"codehilite\"><pre><span></span><code>file1.rs line 123\nfile1.rs line 345\nfile2.rs line 555\nsystem.rs line 123304\n</code></pre></div>",
        "id": 210811048,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1600729398
    },
    {
        "content": "<p>so error objects maintain a list of \"reasons\" and the <code>context()</code> function appends a new one inside <code>map_err</code>?</p>",
        "id": 210811211,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600729518
    },
    {
        "content": "<p>The <code>Error</code> trait has a <code>source</code> method that can be used to get the causal error. In SNAFU, the <code>context</code> method helps to take a causal error, wrap it into another error, adding context to it at the same time.</p>",
        "id": 210811482,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1600729746
    },
    {
        "content": "<p>so <code>fs::read_to_file(\"config.txt\").context(CouldNotReadConfig)?</code> and <code>fs::read_to_file(\"profile\").context(CouldNotReadProfile)?</code></p>",
        "id": 210811530,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1600729795
    },
    {
        "content": "<p>Also, while my project may become a library eventually, it is currently rapidly evolving and so the set of reported errors changes frequently. This is the main reason my error object is basically a string. Does snafu encourage a different style of enumerating reasons? Like where is <code>CoudNotReadProfile</code> defined?</p>",
        "id": 210811988,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600730116
    },
    {
        "content": "<p>In particular, it seems that these error types are almost always one-off things</p>",
        "id": 210812084,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600730189
    },
    {
        "content": "<p>I don't know what kind of magic would be needed to support defining an enum where the members are ad hoc defined by the various uses of a macro</p>",
        "id": 210812227,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600730313
    },
    {
        "content": "<p>I would say that <em>is</em> a weak point of SNAFU. All errors are declared in an enum (or multiple enums). A open PR also proposes supporting structs. At a bare minimum, you'd have to type</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"cp\">#[derive(Debug, Snafu)]</span><span class=\"w\"></span>\n<span class=\"k\">enum</span> <span class=\"nc\">Error</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">CouldNotReadConfig</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">source</span>: <span class=\"nc\">io</span>::<span class=\"n\">Error</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">CouldNotReadProfile</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">source</span>: <span class=\"nc\">io</span>::<span class=\"n\">Error</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 210812234,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1600730319
    },
    {
        "content": "<p>and I assume you have an attribute to give the error message for each variant?</p>",
        "id": 210812288,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600730366
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/User.20Stories.3A.20Error.20Handling.20Pain.20Points/near/210812227\">said</a>:</p>\n<blockquote>\n<p>I don't know what kind of magic would be needed to support defining an enum where the members are ad hoc defined by the various uses of a macro</p>\n</blockquote>\n<p>I'd say basically impossible, but don't let dtolnay hear me or they'll write a crate to do it by the end of the week.</p>",
        "id": 210812293,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1600730374
    },
    {
        "content": "<p>Yes, you can use <code>#[snafu(display(\"whatever\", fields_from_variant))]</code>, but that's optional (the name of the variant is used by default)</p>",
        "id": 210812363,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1600730415
    },
    {
        "content": "<p>gotcha</p>",
        "id": 210812372,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600730426
    },
    {
        "content": "<p>For your prototyping case, you'd likely leave it off</p>",
        "id": 210812377,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1600730436
    },
    {
        "content": "<p>with snafu you could define something like this right?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"cp\">#[derive(Debug, Snafu)]</span><span class=\"w\"></span>\n<span class=\"k\">enum</span> <span class=\"nc\">Error</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[snafu(display(</span><span class=\"s\">&quot;{}&quot;</span><span class=\"cp\">, msg))]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ErrorFrameString</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">source</span>: <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">Error</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">msg</span>: <span class=\"nb\">String</span> <span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[snafu(display(</span><span class=\"s\">&quot;{}&quot;</span><span class=\"cp\">, msg))]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ErrorFrameStr</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">source</span>: <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">Error</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">msg</span>: <span class=\"kp\">&amp;</span><span class=\"nb\">&#39;static</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 210812382,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600730441
    },
    {
        "content": "<p>can snafu do Option&lt;Box&lt;Error&gt;&gt; as a source?</p>",
        "id": 210812438,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600730502
    },
    {
        "content": "<p>You could write that, but not quite use it like that, due to coherence issues. You can't implement <code>From&lt;T: std::error::Error&gt; for MyError</code>: <a href=\"https://stackoverflow.com/q/37347311/155423\">How is there a conflicting implementation of <code>From</code> when using a generic type?</a></p>",
        "id": 210812510,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1600730547
    },
    {
        "content": "<p>along those lines, you could also box a dyn display (or just use the Box&lt;Error&gt; itself) and then the macro could support an input style like <code>format!</code> which instead takes the arguments and builds a struct for later display</p>",
        "id": 210812520,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600730562
    },
    {
        "content": "<p>the Box&lt;Error&gt; there is specifically referring to its own type</p>",
        "id": 210812530,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600730571
    },
    {
        "content": "<p>not a <code>std::error::Error</code></p>",
        "id": 210812535,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600730579
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"271719\">@Mario Carneiro</span> you are pretty close to designing <code>thiserror</code> or <code>anyhow</code>, I believe :-)</p>",
        "id": 210812561,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1600730604
    },
    {
        "content": "<p>lol</p>",
        "id": 210812565,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600730609
    },
    {
        "content": "<p>yea, but less efficiently</p>",
        "id": 210812575,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600730615
    },
    {
        "content": "<p>figures</p>",
        "id": 210812577,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600730618
    },
    {
        "content": "<p>you can similarly do semantic backtraces with eyre/anyhow buy using their <code>wrap_err</code> and <code>context</code> fns respectively</p>",
        "id": 210812650,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600730648
    },
    {
        "content": "<p>whch does work ontop of <code>Display</code> types</p>",
        "id": 210812657,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600730657
    },
    {
        "content": "<p>snafu is better at it when you want to be efficient about it since it doesn't have to carry around the strings or allocate most of the time</p>",
        "id": 210812680,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600730681
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/User.20Stories.3A.20Error.20Handling.20Pain.20Points/near/210812530\">said</a>:</p>\n<blockquote>\n<p>the Box&lt;Error&gt; there is specifically referring to its own type</p>\n</blockquote>\n<p>Gotcha. Then yes, with a small tweak (untested):</p>\n<div class=\"codehilite\"><pre><span></span><code>    #[snafu(display(&quot;{}&quot;, msg))]\n    #[snafu(from(Error, Box::new))]\n    ErrorFrameString { source: Box&lt;Error&gt;, msg: String },\n</code></pre></div>",
        "id": 210812681,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1600730682
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> cool</p>",
        "id": 210812692,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600730694
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> do you happen to know if enums inside of enums can end up sharing tag space?</p>",
        "id": 210812753,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600730740
    },
    {
        "content": "<p>I've always hoped that this was an optimization that exists in rust but I've never heard anyone say it is so I'm guessing no</p>",
        "id": 210812765,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600730756
    },
    {
        "content": "<p>I believe this is supposed to exist but I think there are also some reasons it can't in many cases</p>",
        "id": 210812834,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600730792
    },
    {
        "content": "<p>I'll have to think on that, but my gut reaction is \"no\" because then you couldn't get a reference to one of them cheaply as the tag would be all wrong.</p>",
        "id": 210812874,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1600730837
    },
    {
        "content": "<p>specifically, you can take a reference to the enum member and it has to be a subsequence of bytes in memory of the original enum</p>",
        "id": 210812877,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600730840
    },
    {
        "content": "<p>what jake said</p>",
        "id": 210812891,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600730854
    },
    {
        "content": "<p>if you overlap them then memcpy can destroy the tag bits when moving things in or out of the enum</p>",
        "id": 210812983,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600730920
    },
    {
        "content": "<p>:((((</p>",
        "id": 210813011,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600730943
    },
    {
        "content": "<p>If you did a whole program analysis you might be able to prove that you never take a reference to the field and thus can shrink the enum. But it's a hard sell</p>",
        "id": 210813053,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600730985
    },
    {
        "content": "<p>I think I will let someone else fight that battle, but cheer them on heartily when they do</p>",
        "id": 210813132,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600731031
    },
    {
        "content": "<p>I think I will do the same :)</p>",
        "id": 210813150,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600731062
    },
    {
        "content": "<p>Actually, maybe a more reasonable option is an attribute on an enum member saying that you opt in to this optimization and therefore you aren't allowed to take a reference to that field</p>",
        "id": 210813259,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600731153
    },
    {
        "content": "<p>oo</p>",
        "id": 210813272,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600731167
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/User.20Stories.3A.20Error.20Handling.20Pain.20Points/near/210802170\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/User.20Stories.3A.20Error.20Handling.20Pain.20Points/near/210801943\">said</a>:</p>\n<blockquote>\n<p>Well, I'm aware of eyre and snafu and failure and I think some others, and the names are colorful and tell me nothing about which is better for what</p>\n</blockquote>\n<p>this doesn't seem to explain how they feel like frameworks</p>\n</blockquote>\n<p>IMO they feel like frameworks because it's hard to transition away from them</p>",
        "id": 210815714,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600733347
    },
    {
        "content": "<p>like, I don't think <a href=\"https://github.com/rust-lang/docs.rs/issues/1014\">https://github.com/rust-lang/docs.rs/issues/1014</a> will <em>ever</em> realistically be fixed</p>",
        "id": 210815734,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600733379
    },
    {
        "content": "<p>once <code>Fail</code> (or any other error type) is in your API it kind of spreads throughout and it's hard to use anything else</p>",
        "id": 210815816,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600733429
    },
    {
        "content": "<p>hmmm</p>",
        "id": 210815842,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600733457
    },
    {
        "content": "<p>have you had trouble switching off of <code>snafu</code> / <code>thiserror</code> / other error derives built ontop of the std::error::Error trait?</p>",
        "id": 210815941,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600733551
    },
    {
        "content": "<p><code>thiserror</code>, yes</p>",
        "id": 210815952,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600733562
    },
    {
        "content": "<p>I feel like <code>Fail</code> is a special case because it fixed the error trait by being incompatible</p>",
        "id": 210815954,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600733567
    },
    {
        "content": "<p>I tried to get rid of it for <a href=\"https://github.com/jyn514/saltwater/\">https://github.com/jyn514/saltwater/</a> because of compile times, hit about 350 compile errors, and gave up</p>",
        "id": 210815973,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600733588
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/User.20Stories.3A.20Error.20Handling.20Pain.20Points/near/210815952\">said</a>:</p>\n<blockquote>\n<p><code>thiserror</code>, yes</p>\n</blockquote>\n<p>very interested in more details on this</p>",
        "id": 210815975,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600733590
    },
    {
        "content": "<p>I would expect thiserror to be the absolute easiest to switch away from</p>",
        "id": 210815982,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600733599
    },
    {
        "content": "<p>the main issue wasn't Display as much as the <code>From</code> impls</p>",
        "id": 210815988,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600733606
    },
    {
        "content": "<p>I had a <em>lot</em> of <code>#[from]</code></p>",
        "id": 210815994,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600733614
    },
    {
        "content": "<p>given that it is meant to be a drop in replacement for manually writing the trait impls</p>",
        "id": 210815996,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600733617
    },
    {
        "content": "<p>right, I could have run <code>cargo expand</code> and called it a day but it would have made it fairly unmaintainable</p>",
        "id": 210816010,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600733640
    },
    {
        "content": "<p>hold on let me find the chat logs, I never got around to opening an issue</p>",
        "id": 210816058,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600733655
    },
    {
        "content": "<p>I'd have leveraged rust-analyzer which has some actions for generating from impls for enum variants</p>",
        "id": 210816076,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600733667
    },
    {
        "content": "<p>tho those might be very recent</p>",
        "id": 210816083,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600733674
    },
    {
        "content": "<p>I only noticed them yesterday, lol</p>",
        "id": 210816094,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600733678
    },
    {
        "content": "<p>oh it was when I was working on <a href=\"https://github.com/jyn514/saltwater/pull/448\">https://github.com/jyn514/saltwater/pull/448</a></p>",
        "id": 210816168,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600733762
    },
    {
        "content": "<p>that made me really sad about compile times in general</p>",
        "id": 210816213,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600733770
    },
    {
        "content": "<p>:(</p>",
        "id": 210816243,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600733806
    },
    {
        "content": "<p>it looks like the only thing I wrote was this lol</p>\n<blockquote>\n<p>ok I take it back, I can't get rid of thiserror because of the automatic from implementations<br>\njust got 154 of these:</p>\n</blockquote>\n<div class=\"codehilite\"><pre><span></span><code>error[E0277]: the trait bound `data::error::Error: std::convert::From&lt;data::error::SemanticError&gt;` is not satisfied\n   --&gt; src/parse/expr.rs:882:42\n    |\n882 | ...                   location.error(SemanticError::TypedefInExpressionContext),\n    |                                ^^^^^ the trait `std::convert::From&lt;data::error::SemanticError&gt;` is not implemented for `data::error::Error`\n</code></pre></div>",
        "id": 210816351,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600733919
    },
    {
        "content": "<p>I probably <em>could</em> have rewritten it but at that point I wasn't willing to spend that time on the project</p>",
        "id": 210816373,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600733940
    },
    {
        "content": "<p>gotcha</p>",
        "id": 210816403,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600733974
    },
    {
        "content": "<p>sorry, didn't mean to take over the conversation haha</p>",
        "id": 210816569,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600734125
    },
    {
        "content": "<p>its fine</p>",
        "id": 210816578,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600734133
    },
    {
        "content": "<p>I think your take over fit the thread topic quite nicely actually, lol</p>",
        "id": 210816585,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600734158
    },
    {
        "content": "<p>second pain point, although this is more a language thing: I really like using <code>fn f() { fallible_op() }</code> instead of <code>fn f() { fallible_op()?; Ok(()) }</code>, but that interferes with error libraries because you have to always add <code>.map(|e| e.into())</code></p>",
        "id": 210816681,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600734276
    },
    {
        "content": "<p>works great if <code>f</code> and <code>fallible_op</code> have the same return type though</p>",
        "id": 210816705,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600734302
    },
    {
        "content": "<p>yea</p>",
        "id": 210816716,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600734310
    },
    {
        "content": "<p>this seems like part of <code>try</code> blocks which is explicitly out of scope for this project group</p>",
        "id": 210816723,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600734327
    },
    {
        "content": "<p>you could slightly shorten that if <code>.map(|e| e.into())</code> was made into an extension method</p>",
        "id": 210816744,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600734361
    },
    {
        "content": "<p>aka something like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">f</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">Error</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">try</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">fallible_op</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 210816745,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600734362
    },
    {
        "content": "<p>well, conceivably it wouldn't need try blocks if <code>Error</code> was the same type as <code>fallible_op</code>, but probably that's not possible</p>",
        "id": 210816802,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600734392
    },
    {
        "content": "<p>I'm big fan of combining <code>fn() = expr</code> and <code>try</code> blocks to solve this problem personally</p>",
        "id": 210816826,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600734414
    },
    {
        "content": "<p>that's all nightly stuff though right</p>",
        "id": 210816838,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600734433
    },
    {
        "content": "<p>but i think im gonna call this one as off topic</p>",
        "id": 210816839,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600734434
    },
    {
        "content": "<p>try syntax is a lang issue but this is a libs project group</p>",
        "id": 210816851,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600734456
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"271719\">@Mario Carneiro</span> <code>fn() = expr</code> isnt a feature at all, I'm not even sure there's been an RFC proposed for it let alone one thats been accepted</p>",
        "id": 210816866,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600734481
    },
    {
        "content": "<p>afaik its just an idea that I've heard in the past that I quite like</p>",
        "id": 210816912,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600734493
    },
    {
        "content": "<p>I think its a thing is scala</p>",
        "id": 210816918,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600734497
    },
    {
        "content": "<p><code>try</code> blocks are a nightly feature tho</p>",
        "id": 210816929,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600734510
    },
    {
        "content": "<p>I will try to wish it into existence for you</p>",
        "id": 210816938,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600734518
    },
    {
        "content": "<p>loool</p>",
        "id": 210816943,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600734524
    },
    {
        "content": "<p><code>.map_err(Into::into)</code></p>",
        "id": 210818831,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1600736460
    },
    {
        "content": "<p>Or the usual-but-surprising <code>Ok(f()?)</code></p>",
        "id": 210818845,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1600736487
    },
    {
        "content": "<p>That hits another language annoyance that types can't be coerced to (), so if f returns something you need the extra line</p>",
        "id": 210818920,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600736557
    },
    {
        "content": "<p>this comes up more in matches, often I have to write <code>arm =&gt; f(),</code> into <code>arm =&gt; { f(); }</code> to make it have type <code>()</code></p>",
        "id": 210818950,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600736599
    },
    {
        "content": "<p>Which rustfmt then makes 3 lines</p>",
        "id": 210818962,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600736614
    },
    {
        "content": "<p>But anyway definitely offtopic for this WG</p>",
        "id": 210819006,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600736644
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">u</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">lll</span><span class=\"p\">.</span><span class=\"n\">u</span><span class=\"p\">()</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 210819032,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1600736668
    },
    {
        "content": "<p>or <code>drop(lll)</code></p>",
        "id": 210819037,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1600736676
    },
    {
        "content": "<p>Oh I hadn't thought of <code>drop</code>, that's nice</p>",
        "id": 210819043,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600736691
    },
    {
        "content": "<p>I'll start using that, thanks :)</p>",
        "id": 210819052,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600736700
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> <code>fn() -&gt; R = expr</code> has been proposed before, it's not just you. no real rfc or even a draft for it though.</p>",
        "id": 210819772,
        "sender_full_name": "Lokathor",
        "timestamp": 1600737520
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/User.20Stories.3A.20Error.20Handling.20Pain.20Points/near/210812753\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116155\">Jake Goulding</span> do you happen to know if enums inside of enums can end up sharing tag space?</p>\n</blockquote>\n<p>By the way, I just found <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/69#issuecomment-459445822\">a discussion of this</a> on UCG where Rust <em>does</em> this optimization for <code>Option&lt;NonZero&gt;</code> and <code>Option&lt;bool&gt;</code>, and by taking references you can cause weird behavior that people aren't sure how or whether to classify as UB</p>",
        "id": 211364425,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601132927
    },
    {
        "content": "<p>Don't know if that was mentioned already, but here is one of 'user stories'<br>\n<a href=\"https://nick.groenen.me/posts/rust-error-handling/\">https://nick.groenen.me/posts/rust-error-handling/</a></p>",
        "id": 212185090,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1601751308
    }
]