[
    {
        "content": "<p>I was wondering if there was something blocking the stabilization of the Termination trait. It was pointed to me that there is some rough  edges and that this project is handling it. My question is: What are the rough edges?</p>",
        "id": 223072402,
        "sender_full_name": "Gray Jack",
        "timestamp": 1610931013
    },
    {
        "content": "<p>One thing that could use some attention is <a href=\"https://doc.rust-lang.org/std/process/struct.ExitCode.html\">https://doc.rust-lang.org/std/process/struct.ExitCode.html</a></p>\n<p>I think that Termination's method being <code>self -&gt; ExitCode</code> would be clearer than the <code>-&gt; i32</code> version, for example.</p>",
        "id": 223074484,
        "sender_full_name": "scottmcm",
        "timestamp": 1610934706
    },
    {
        "content": "<p>And it'd be a nice thing to stabilize anyway even if <code>Termination</code> still takes a while after -- right now one has to call <code>process::exit(c)</code> to return a code.</p>",
        "id": 223074607,
        "sender_full_name": "scottmcm",
        "timestamp": 1610934883
    },
    {
        "content": "<p>But <code>ExitCode</code> design still undecided, right? The feature itself calls it placeholder, and there was mini-RFC in the internals forum, but looks like there was no consensus if that approach was the correct one</p>",
        "id": 223078900,
        "sender_full_name": "Gray Jack",
        "timestamp": 1610942328
    },
    {
        "content": "<p>Yeah, that's what I mean by some attention.  Would be good to have someone look at it and either make a case for what it should look like, or argue that it should just get deleted.</p>",
        "id": 223082764,
        "sender_full_name": "scottmcm",
        "timestamp": 1610948322
    },
    {
        "content": "<p>If it's not useful, then it's clearly not part of <code>Termination</code> :P</p>",
        "id": 223082773,
        "sender_full_name": "scottmcm",
        "timestamp": 1610948344
    },
    {
        "content": "<p>following up on this</p>",
        "id": 223436624,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611177343
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"344196\">@Jakub Duchniewicz</span> has taken point on digging into concerns about ExitStatus and trying to finalize the Termination design</p>",
        "id": 223436662,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611177361
    },
    {
        "content": "<p>also <span class=\"user-mention\" data-user-id=\"344196\">@Jakub Duchniewicz</span> , <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> has said he'd be interested in providing input for this issue</p>",
        "id": 223436737,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611177382
    },
    {
        "content": "<p>so yall should get in touch</p>",
        "id": 223436768,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611177407
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> I'm curious about something that may overlap with some of the other work in project-error-handling. I remember there being a proposal on the table to allow errors to carry optional information like \"HTTP error code\" or potentially even \"HTML error page\", so that HTTP servers could use normal error handling and just provide an extra bit of information. That seems related to the idea of having Error carry a \"process exit code\".</p>",
        "id": 223445141,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1611181059
    },
    {
        "content": "<p>In both cases, there's a reasonable default (internal server error, default failure exit code), but also a need for applications to use arbitrary values.</p>",
        "id": 223445236,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1611181106
    },
    {
        "content": "<p>That's the generic member access rfc</p>",
        "id": 223445508,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611181273
    },
    {
        "content": "<p>And that's a good point</p>",
        "id": 223445527,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611181284
    },
    {
        "content": "<p>I think that might be a good way to tie termination to the error trait</p>",
        "id": 223445550,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611181298
    },
    {
        "content": "<p>Exactly.</p>",
        "id": 223445558,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1611181302
    },
    {
        "content": "<p>I'd much rather have that mechanism than have to manually implement <code>Termination</code>, or have some special-case code to handle both errors and an exit code...</p>",
        "id": 223445625,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1611181327
    },
    {
        "content": "<p>I'm not necessarily suggesting that it shouldn't be possible to <code>impl Termination</code> for other purposes, but a mechanism to supply an exit code via an <code>Error</code>/<code>Result</code> return would mean <code>Termination</code> itself might not need to be stable as soon.</p>",
        "id": 223445845,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1611181469
    },
    {
        "content": "<p>oh interesting</p>",
        "id": 223457111,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611189682
    },
    {
        "content": "<p>Oh, like one could add <code>fn exit_code(&amp;self) -&gt; ExitCode { ExitCode::FAILURE }</code> to <code>Error</code>.</p>",
        "id": 223462416,
        "sender_full_name": "scottmcm",
        "timestamp": 1611195267
    },
    {
        "content": "<p>yea, though likely it would not get its own method</p>",
        "id": 223462425,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611195289
    },
    {
        "content": "<p>and would be called like <code>error.context::&lt;ExitCode&gt;()</code></p>",
        "id": 223462437,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611195302
    },
    {
        "content": "<p>and it would be Option&lt;ExitCode&gt;</p>",
        "id": 223462451,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611195313
    },
    {
        "content": "<p>I guess the major problem for <code>main() -&gt; Result&lt;,&gt;</code> doing that is that right now it only needs <code>Debug</code>.</p>",
        "id": 223462489,
        "sender_full_name": "scottmcm",
        "timestamp": 1611195363
    },
    {
        "content": "<p>specialization?</p>",
        "id": 223462518,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611195376
    },
    {
        "content": "<p>Error is strictly more specific so it should work I expect</p>",
        "id": 223462525,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611195403
    },
    {
        "content": "<p>Sure, though if we're going specialization it could work pretty much however -- even <code>Into&lt;ExitCode&gt;</code>.</p>",
        "id": 223462541,
        "sender_full_name": "scottmcm",
        "timestamp": 1611195438
    },
    {
        "content": "<p>oh I like the concept of getting generic errors via <code>context</code></p>",
        "id": 223483419,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1611219883
    },
    {
        "content": "<p>I think I should ask for more ideas concerning this issue. I did some research and concluded that it is still mostly unclear what are the precise steps to take with this stabilization.</p>",
        "id": 226416279,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1613413152
    },
    {
        "content": "<p>As far as I saw, there is some groundwork done, and some impl's but the design is still mostly vague and unspecific. I talked with Jane and she agreed that we should fill in the missing details in design.</p>",
        "id": 226416547,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1613413370
    },
    {
        "content": "<p>So far the design of the trait seems to be very simple and I don't know how much we would like to extend it</p>",
        "id": 226416847,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1613413587
    },
    {
        "content": "<p><a href=\"https://internals.rust-lang.org/t/termination-hook-for-handling-error-from-main-result-someerror/13780\">https://internals.rust-lang.org/t/termination-hook-for-handling-error-from-main-result-someerror/13780</a></p>",
        "id": 226419343,
        "sender_full_name": "oliver",
        "timestamp": 1613415392
    },
    {
        "content": "<p>do we have a solution for the case where main returns <code>Result::Err</code>?</p>",
        "id": 226419406,
        "sender_full_name": "oliver",
        "timestamp": 1613415443
    },
    {
        "content": "<p>All I thought would be reporting it and translating to error code if such translation is possible</p>",
        "id": 226419737,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1613415662
    },
    {
        "content": "<p>what error code?</p>",
        "id": 226419778,
        "sender_full_name": "oliver",
        "timestamp": 1613415687
    },
    {
        "content": "<p><code>std::process::ExitCode</code></p>",
        "id": 226419899,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1613415774
    },
    {
        "content": "<p>Thanks</p>",
        "id": 226420318,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1613416065
    },
    {
        "content": "<p>I thought I was off that</p>",
        "id": 226422316,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1613417343
    },
    {
        "content": "<p>charles i thikn you're replying in the wrong topic</p>",
        "id": 226422329,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1613417356
    },
    {
        "content": "<p>I think that would be best</p>",
        "id": 226422440,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1613417427
    },
    {
        "content": "<p>I was looking at the last one</p>",
        "id": 226422948,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1613417779
    },
    {
        "content": "<p>That is Create a diagram</p>",
        "id": 226422978,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1613417812
    },
    {
        "content": "<p>still, wrong topic Charles</p>",
        "id": 226423000,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1613417833
    }
]