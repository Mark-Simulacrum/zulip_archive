[
    {
        "content": "<p>hey everyone :)</p>",
        "id": 220636736,
        "sender_full_name": "lqd",
        "timestamp": 1608588677
    },
    {
        "content": "<p>I'm not sure when we'll be able to do a sprint next year, but I hope it is soon-ish ^^ While I am fully booked in january and will not be able to take a vacation to work on the sprint, I'm on vacation now and plan to spend some time planning and preparing for the next one</p>",
        "id": 220636900,
        "sender_full_name": "lqd",
        "timestamp": 1608588767
    },
    {
        "content": "<p>There was the question of periodicity: how often should we have one. I was thinking since it was also a way for Niko to have an easier time scheduling for multiple projects requiring some block of time, worst case whether or not anyone else would participate at the same time (of course the idea is that we do), it seems that 3 months is too long a period to plan the sprints. And ideally, it would probably need to \"quite frequent\" to keep making progress. The period of WG check-ins at the t-compiler meeting seemed interesting. I expect his plate to be full so we'll see, but between 1-2 months looked interesting <em>to me</em>. A la once every 6-7 weeks, or once per Rust release :)</p>",
        "id": 220637305,
        "sender_full_name": "lqd",
        "timestamp": 1608589075
    },
    {
        "content": "<p>To make up for the fact that sometimes, our schedules would not allow to fully participate (disregarding timezones; and maybe there's leeway here, since the Boston afternoons would overlap with EU after-office hours for example), I was thinking that we'd at least prepare beforehand so that some work is at least available</p>",
        "id": 220637537,
        "sender_full_name": "lqd",
        "timestamp": 1608589218
    },
    {
        "content": "<p>Some sync time is always nice and required, but also there can be some \"async sprint\", for examples PRs to review, analyses or plans to read and so on</p>",
        "id": 220637620,
        "sender_full_name": "lqd",
        "timestamp": 1608589293
    },
    {
        "content": "<p>So my personal plans for this are at least:</p>\n<ul>\n<li>work on \"finalizing\" our rules, and make the code match that: we can't really really finalize until more work is done on some fronts which we have for the moment focused less, if at all (the <code>Location::All</code> fix, more move errors work, rules for variance and invariance, whether 'static is correctly handled, membership constraints, arguably higher-ranked subtyping with chalk, etc). At least last sprint we were able to analyze and decide on which paths to ignore for now (equality rules, only using placeholder loans for subset errors, etc). I'll also be looking to improve our implementation of the rules dealing with placeholders (where in souffl√© we were using the \";\" combinator, while our code is still hacking this by modifying the liveness data instead of having more rules)</li>\n<li>finalize the illegal subset errors work we prototyped last time</li>\n<li>document more of the rules and put them in the book</li>\n<li>hopefully add the way we discussed last sprint to temporarily bypass the move/init computation (even though I have started looking at Albin's work on this)</li>\n<li>some of the cleanups we mentioned before: since renaming the relations will require changing rustc's fact generation anyway, it's a good time to tweak the API to remove the fact cloning, or tuple reordering we're doing now</li>\n</ul>",
        "id": 220638143,
        "sender_full_name": "lqd",
        "timestamp": 1608589635
    },
    {
        "content": "<p>I have <a href=\"https://github.com/rust-lang/polonius/pull/155\">https://github.com/rust-lang/polonius/pull/155</a> for the first bullet point (which is mostly about renaming), and <a href=\"https://github.com/rust-lang/polonius/pull/156\">https://github.com/rust-lang/polonius/pull/156</a> for the subset errors; some local changes to remove the clones; and the rustc branch to update to these new names.</p>",
        "id": 220638252,
        "sender_full_name": "lqd",
        "timestamp": 1608589688
    },
    {
        "content": "<p>(I don't expect reviews or anything until the sprint)</p>",
        "id": 220638299,
        "sender_full_name": "lqd",
        "timestamp": 1608589725
    },
    {
        "content": "<p>(as a fun point about the <code>Location::All</code> work: I was earlier wondering why <a href=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/intrinsics/intrinsics-integer.rs\">https://github.com/rust-lang/rust/blob/master/src/test/ui/intrinsics/intrinsics-integer.rs</a> was so slow. Turns out there are 167M outlives tuples, the facts are 7GB. All but ~32K or so of them are \"outlives at all points\". The slowest part was the move/init analysis at 4-8 minutes or something, but even the location insensitive pass was 6s where NLLs should be &lt;200ms. I suspect similar queries on the SCCs to be in the same ballpark but I'll need to check that -- and fact generation take 1s anyways)</p>",
        "id": 220639352,
        "sender_full_name": "lqd",
        "timestamp": 1608590417
    },
    {
        "content": "<ul>\n<li>as Niko was working on his own <code>Location::All</code> fix last sprint (which IIRC would be located in fact generation only), I'll hold off for now on opening the rustc and polonius PRs for my own fix (which involve changing both fact generation and the datalog rules) until next sprint when he can tell us which of the two techniques is more viable</li>\n</ul>",
        "id": 220673664,
        "sender_full_name": "lqd",
        "timestamp": 1608630286
    },
    {
        "content": "<p>for the third bullet point, I've updated and rebased <a href=\"https://github.com/rust-lang/polonius/pull/126\">https://github.com/rust-lang/polonius/pull/126</a> which was about describing relations:</p>\n<ul>\n<li>I've renamed everything to represent the state after the earlier two PRs</li>\n<li>I've added the new relations (mostly for subset errors) that were more recent than the PR (but not described anything in the initialization and liveness analyses)</li>\n<li>I've added documentation about the loan analysis and its rules</li>\n<li>a bit of summary, a couple links here and there</li>\n</ul>\n<p>I was thinking \"introducing origin\" and \"loan introduced\" was a nice alternative to loans being \"issued\", but have not used that in the PR. What do people think ?</p>",
        "id": 220706474,
        "sender_full_name": "lqd",
        "timestamp": 1608653901
    },
    {
        "content": "<p>(I'll now work on <code>;</code> to fix our materialization of placeholder liveness at all points)</p>",
        "id": 220706764,
        "sender_full_name": "lqd",
        "timestamp": 1608654069
    },
    {
        "content": "<p>I think this is \"just\" expanding each rule that only checked whether an origin was live at a given point to also check whether the origin is a placeholder. The opt variant has interesting cases where it's trying to limit the TC explicitly to origins that die along an edge, and relies a lot on <code>!origin_live_on_entry</code>. I was tempted that this would mean one'd need to explicitly reject them with a<code>!placeholder(origin)</code> antijoin, to mirror the unions with <code>placeholder(origin)</code> that <code>;</code> creates, but I think I've convinced myself that removing the placeholders from the liveness data implicitly does the same thing (then again, maybe not). I'll try it and if it works, open a draft PR so that there can be comments about that approach during the sprint</p>",
        "id": 220733631,
        "sender_full_name": "lqd",
        "timestamp": 1608670729
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> re: <span aria-label=\"truck\" class=\"emoji emoji-1f69b\" role=\"img\" title=\"truck\">:truck:</span> it's not _that_ expensive :p it did simplify rules a lot, like I now have to add 2 to 4 slightly different expansions to 70% of the rules in the opt variant</p>",
        "id": 220737248,
        "sender_full_name": "lqd",
        "timestamp": 1608673441
    },
    {
        "content": "<p>I was actually going for \"semi-truck\" for \"semi-colon\". Emoji can be a blunt instrument sometimes <span aria-label=\"no mouth\" class=\"emoji emoji-1f636\" role=\"img\" title=\"no mouth\">:no_mouth:</span></p>",
        "id": 220737308,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1608673469
    },
    {
        "content": "<p>haha</p>",
        "id": 220737328,
        "sender_full_name": "lqd",
        "timestamp": 1608673490
    },
    {
        "content": "<p>I really just wanted to cheerlead; to let you know that someone out in the void was reading what you wrote (even if I don't follow it)</p>",
        "id": 220737378,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1608673547
    },
    {
        "content": "<p>much appreciated, friend :)</p>",
        "id": 220737619,
        "sender_full_name": "lqd",
        "timestamp": 1608673721
    },
    {
        "content": "<p>my intention is that these are mostly messages in a bottle, in a sea that will reach the future sprint, so that Niko and Albin have something to do and talk about, about this work even if I'm not there all the time :)</p>",
        "id": 220738387,
        "sender_full_name": "lqd",
        "timestamp": 1608674298
    },
    {
        "content": "<p>after testing with rustc, there seems to be no difference in results in the UI suite. I didn't add the placeholder antijoins yet but we should, so I've opened a draft PR <a href=\"https://github.com/rust-lang/polonius/pull/157\">https://github.com/rust-lang/polonius/pull/157</a> for explanation and discussion, and we'll see when the sprint comes</p>",
        "id": 220754274,
        "sender_full_name": "lqd",
        "timestamp": 1608687762
    },
    {
        "content": "<p>I've now also updated the <a href=\"https://github.com/rust-lang/polonius/pull/126\">book improvement PR</a> to add documentation and rules about the <code>LocationInsensitive</code> variant</p>",
        "id": 221006498,
        "sender_full_name": "lqd",
        "timestamp": 1609071165
    }
]