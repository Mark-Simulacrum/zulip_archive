[
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> -- where did you to do your experimentation with adding the \"equality\" stuff vs propagating all subsets?</p>",
        "id": 175658629,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568404472
    },
    {
        "content": "<p>let me get you the link</p>",
        "id": 175658677,
        "sender_full_name": "lqd",
        "timestamp": 1568404512
    },
    {
        "content": "<p>it's in an old-ish branch, before liveness was integrated, <a href=\"https://github.com/lqd/borrow-check/tree/variant_prototype\" target=\"_blank\" title=\"https://github.com/lqd/borrow-check/tree/variant_prototype\">here</a></p>",
        "id": 175658786,
        "sender_full_name": "lqd",
        "timestamp": 1568404590
    },
    {
        "content": "<p>there were <a href=\"https://hackmd.io/EqECXcd7TIGj97lVNc4dhw?view\" target=\"_blank\" title=\"https://hackmd.io/EqECXcd7TIGj97lVNc4dhw?view\">notes</a> I had when we had the video call but I can't quite remember if they reflect the exact state of the branch</p>",
        "id": 175658858,
        "sender_full_name": "lqd",
        "timestamp": 1568404653
    },
    {
        "content": "<p>which is: very hacky, some things were not working so I switched temporarily from doing some computations in datalog in rust just to eliminate a possible source of errors and have flexbility on how to compute equality / propagate it</p>",
        "id": 175658944,
        "sender_full_name": "lqd",
        "timestamp": 1568404700
    },
    {
        "content": "<p>the propagation is likely wrong, as I didn't do a lot of experimentation / or ... thinking (and tests seemed to work)</p>",
        "id": 175658999,
        "sender_full_name": "lqd",
        "timestamp": 1568404758
    },
    {
        "content": "<p>ok</p>",
        "id": 175659551,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568405155
    },
    {
        "content": "<p>thanks!</p>",
        "id": 175659554,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568405157
    },
    {
        "content": "<p>yw !</p>",
        "id": 175659673,
        "sender_full_name": "lqd",
        "timestamp": 1568405231
    },
    {
        "content": "<p>(I didn't yet work through the other filtering of interesting regions/provenances I had done on the Naive variant which made it very fast, on this variant)</p>",
        "id": 175659814,
        "sender_full_name": "lqd",
        "timestamp": 1568405336
    },
    {
        "content": "<p>ok so <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> I'm looking a bit at the code</p>",
        "id": 175662467,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568407463
    },
    {
        "content": "<p>I remember that it was quite a bit slower but I don't recall how much we figured out about that</p>",
        "id": 175662499,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568407506
    },
    {
        "content": "<p>the code is called lqd's monster</p>",
        "id": 175662509,
        "sender_full_name": "lqd",
        "timestamp": 1568407510
    },
    {
        "content": "<p>it was slower in that it calculated a lot more subsets IIRC</p>",
        "id": 175662519,
        "sender_full_name": "lqd",
        "timestamp": 1568407523
    },
    {
        "content": "<p>because of the transitive subset computation?</p>",
        "id": 175662532,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568407537
    },
    {
        "content": "<p>then I added some early small-ish filtering, and it made fast again on clap</p>",
        "id": 175662539,
        "sender_full_name": "lqd",
        "timestamp": 1568407543
    },
    {
        "content": "<p>yeah IIRC</p>",
        "id": 175662544,
        "sender_full_name": "lqd",
        "timestamp": 1568407549
    },
    {
        "content": "<p>removing uninteresting loans helped the most / a lot IIRC</p>",
        "id": 175662640,
        "sender_full_name": "lqd",
        "timestamp": 1568407614
    },
    {
        "content": "<p>yeah, that's probably something we should do anyway, though I imagine we might do it in polonius</p>",
        "id": 175662682,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568407640
    },
    {
        "content": "<p>yeah esp in the Hybrid variant</p>",
        "id": 175662694,
        "sender_full_name": "lqd",
        "timestamp": 1568407655
    },
    {
        "content": "<p>one thing that seems also true is that we could compute the <code>equality(N1, N2)</code> only if N1 &lt; N2, but that might be more annoying than it's worth</p>",
        "id": 175662711,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568407666
    },
    {
        "content": "<p>but generally his theavy filtering (I have another filtering optimization elsewhere which removes most of the TC, it's only doing the TC on subset containing loans which were invalidated) helps a lot, so much so that I wondered if we still needed the Optimized variant</p>",
        "id": 175662804,
        "sender_full_name": "lqd",
        "timestamp": 1568407719
    },
    {
        "content": "<p>but then that impacts the illegal subset relation errors</p>",
        "id": 175662839,
        "sender_full_name": "lqd",
        "timestamp": 1568407751
    },
    {
        "content": "<p>by \"heavy filtering\", you are referring to the \"non-interesting loans\"?</p>",
        "id": 175662877,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568407798
    },
    {
        "content": "<p>I guess there's really nothing <em>wrong</em> with the filtering</p>",
        "id": 175662957,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568407822
    },
    {
        "content": "<p>well, it depends on which one we mean, but e.g. the rules to remove <code>(R, R)</code> subset relations seem \"ok\"</p>",
        "id": 175662981,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568407841
    },
    {
        "content": "<p>these loans yes, but also limiting to \"interesting regions\"</p>",
        "id": 175662984,
        "sender_full_name": "lqd",
        "timestamp": 1568407843
    },
    {
        "content": "<p>(I'll get you a link to the code that will be clearer I think)</p>",
        "id": 175663023,
        "sender_full_name": "lqd",
        "timestamp": 1568407886
    },
    {
        "content": "<p>OK. I'm going to have to go in a bit, got a call</p>",
        "id": 175663042,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568407898
    },
    {
        "content": "<p><a href=\"https://gist.github.com/lqd/3fafb888589a49f13a91a8ade9fd28cf#file-naive-wip-rs-L77-L116\" target=\"_blank\" title=\"https://gist.github.com/lqd/3fafb888589a49f13a91a8ade9fd28cf#file-naive-wip-rs-L77-L116\">here it is</a></p>",
        "id": 175663129,
        "sender_full_name": "lqd",
        "timestamp": 1568407944
    },
    {
        "content": "<p>and of course the <code>requires.insert(interesting_borrow_region);</code></p>",
        "id": 175663173,
        "sender_full_name": "lqd",
        "timestamp": 1568407998
    },
    {
        "content": "<p>ah</p>",
        "id": 175663331,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568408117
    },
    {
        "content": "<p>it helps a lot on clap but probably it's not the worst use-case, the ongoing benchmarking will clear that up; at least rustc tests pass with it, a bit reassuring but we'll see :)</p>",
        "id": 175663332,
        "sender_full_name": "lqd",
        "timestamp": 1568408119
    },
    {
        "content": "<p>yeah</p>",
        "id": 175663340,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568408124
    },
    {
        "content": "<p>that's nice, though</p>",
        "id": 175663341,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568408129
    },
    {
        "content": "<p>we do a similar opt in NLL but I like how this kind of \"flows out\" from the invalidation facts</p>",
        "id": 175663355,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568408145
    },
    {
        "content": "<p>it's really just filtering before doing the joins</p>",
        "id": 175663407,
        "sender_full_name": "lqd",
        "timestamp": 1568408162
    },
    {
        "content": "<p>instead of <em>after</em></p>",
        "id": 175663432,
        "sender_full_name": "lqd",
        "timestamp": 1568408175
    },
    {
        "content": "<p>right</p>",
        "id": 175663441,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568408183
    },
    {
        "content": "<p>well i'd be happy if we can wind up with something closer to the naive rules ;)</p>",
        "id": 175663448,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568408190
    },
    {
        "content": "<p>but ofc \"illegal subset relation errors\" might need the intermediate computations :/</p>",
        "id": 175663450,
        "sender_full_name": "lqd",
        "timestamp": 1568408194
    },
    {
        "content": "<p>haha yeah me too :)</p>",
        "id": 175663469,
        "sender_full_name": "lqd",
        "timestamp": 1568408210
    },
    {
        "content": "<p>it seemed faster than the location_insensitive variant on clap</p>",
        "id": 175663483,
        "sender_full_name": "lqd",
        "timestamp": 1568408223
    },
    {
        "content": "<p>I remember thinking that this was part of the promise of equality tracking though</p>",
        "id": 175663495,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568408230
    },
    {
        "content": "<p>ofc this could be combined with location-insensitive, too</p>",
        "id": 175663520,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568408258
    },
    {
        "content": "<p>yes I ahve it elsewhere as well</p>",
        "id": 175663534,
        "sender_full_name": "lqd",
        "timestamp": 1568408271
    },
    {
        "content": "<p>I'm torn; I'm feeling some sort of desire to delete all the \"semi-optimized variants\" and get back to naive though</p>",
        "id": 175663588,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568408291
    },
    {
        "content": "<p>part of it yes was in the equality-tracking variant, in total I think 2-3 relations were filtered, this one has all the filters, the eq-tracking one only 1 I think</p>",
        "id": 175663597,
        "sender_full_name": "lqd",
        "timestamp": 1568408300
    },
    {
        "content": "<p>e.g., delete datafrog-opt, hybrid, location-insensitive, clean up the naive to work just how we want it, and then try to optimize again</p>",
        "id": 175663609,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568408311
    },
    {
        "content": "<p>but man that can be awfully slow :P</p>",
        "id": 175663629,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568408329
    },
    {
        "content": "<p>:)</p>",
        "id": 175663635,
        "sender_full_name": "lqd",
        "timestamp": 1568408334
    },
    {
        "content": "<p>but if we can do some judicious filtering like that, it might work</p>",
        "id": 175663642,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568408337
    },
    {
        "content": "<p>we could do that, but maybe just wait until we have the illegal subsets a bit more planned out</p>",
        "id": 175663657,
        "sender_full_name": "lqd",
        "timestamp": 1568408343
    },
    {
        "content": "<p>esp I wondered about the placeholder loans and what will that end up needing wrt intermediate computations of subsets and all</p>",
        "id": 175663714,
        "sender_full_name": "lqd",
        "timestamp": 1568408390
    },
    {
        "content": "<p>yeah ok next time I carve out some time I'll try to mock up what that means</p>",
        "id": 175663768,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568408404
    },
    {
        "content": "<p>I feel pretty sure we want placeholder loans tho</p>",
        "id": 175663784,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568408410
    },
    {
        "content": "<p>seems likely indeed</p>",
        "id": 175663795,
        "sender_full_name": "lqd",
        "timestamp": 1568408421
    },
    {
        "content": "<p>I think we want to be able to say that the polonius loop \"computes\" the set of loans represented by each origin at each point</p>",
        "id": 175663800,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568408428
    },
    {
        "content": "<p>vs also computing this auxiliary subset thing</p>",
        "id": 175663807,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568408439
    },
    {
        "content": "<p>I can't remember if there was another reason more than just \"it feels better\", maybe connected to this equality stuff? anyway gotta go</p>",
        "id": 175663818,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568408454
    },
    {
        "content": "<p>it seems sensible</p>",
        "id": 175663824,
        "sender_full_name": "lqd",
        "timestamp": 1568408457
    },
    {
        "content": "<p>if nothing else though it maps to oxide better :)</p>",
        "id": 175663829,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568408464
    },
    {
        "content": "<p>which feels like a good reason</p>",
        "id": 175663843,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568408476
    },
    {
        "content": "<p>alright cheers niko, enjoy the weekend :)</p>",
        "id": 175663848,
        "sender_full_name": "lqd",
        "timestamp": 1568408482
    },
    {
        "content": "<p>oh yeah for sure</p>",
        "id": 175663855,
        "sender_full_name": "lqd",
        "timestamp": 1568408489
    },
    {
        "content": "<p>(for anyone following at home, the naive rules kinda do 2 TCs, and then filter on static inputs; the previous code is about limiting the amount of work done in the 2 TCs by filtering with these static inputs before the TC, instead of after — obvious in retrospect, but some other analysis possibly needing some of the data made this hard to notice for a year :)</p>",
        "id": 175664663,
        "sender_full_name": "lqd",
        "timestamp": 1568409212
    },
    {
        "content": "<p>I cleaned up the equality prototype a bit, as it used to rely on features of my datafrog fork, and rebased over master</p>",
        "id": 176212299,
        "sender_full_name": "lqd",
        "timestamp": 1568999842
    },
    {
        "content": "<p>the branch is at <a href=\"https://github.com/lqd/borrow-check/tree/variant_prototype2\" target=\"_blank\" title=\"https://github.com/lqd/borrow-check/tree/variant_prototype2\">https://github.com/lqd/borrow-check/tree/variant_prototype2</a></p>",
        "id": 176212324,
        "sender_full_name": "lqd",
        "timestamp": 1568999857
    },
    {
        "content": "<p>this time it has both versions, with a bool you can toggle in the prototype variant to choose between the 2, and includes the subset/requires filtering, otherwise rustc tests were too slow, and a new input set for all the test cases we mentioned along the way (the \"polonius-imprecision\" dataset)</p>",
        "id": 176212446,
        "sender_full_name": "lqd",
        "timestamp": 1568999904
    },
    {
        "content": "<p>version 1, implemented from Niko's 1st comment (with itself containing a known imprecision fixed by Niko's 2nd comment): \"static equality\". TLDR: it kinda works, indeed fixes the \"polonius-imprecision/unnecessary_error\" test (but ofc fails the \"polonius-imprecision/flow_sensitive_equality_required\" case causing the 2nd version to exist). However, 2 rustc tests fail when trying it out for real (2 cases which are expected to fail but do compile)</p>",
        "id": 176212489,
        "sender_full_name": "lqd",
        "timestamp": 1568999937
    },
    {
        "content": "<p>version 2, derived from Niko's 2nd comment: \"flow sensitive equality\". TLDR: indeed passes the \"polonius-imprecision/flow_sensitive_equality_required\" case but works a bit less overall for now, as it eg fails on the \"polonius-imprecision/cycle_unification\" test where it doesn't detect the error, which I hadn't noticed before. Trying it out in rustc, 16 tests fail (a mix of tests which shouldn't compile but do, and others with less errors than expected) including both from the previous version.</p>",
        "id": 176212556,
        "sender_full_name": "lqd",
        "timestamp": 1568999975
    },
    {
        "content": "<p>so the plan is to locate the source of the 2 errors of v1, because it seems related to equality rather than its flow-sensitivity or lack thereof (or a mistake in both versions), and debug/understand why v2 fails to find the error on \"cycle_unification\"</p>",
        "id": 176212749,
        "sender_full_name": "lqd",
        "timestamp": 1569000087
    },
    {
        "content": "<blockquote>\n<p>I cleaned up the equality prototype a bit, as it used to rely on features of my datafrog fork, and rebased over master</p>\n</blockquote>\n<p>Is there a reason why you can't merge your Datafrog fork?</p>",
        "id": 176220739,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1569005658
    },
    {
        "content": "<p>(I assume there is, but I'm curious)</p>",
        "id": 176220753,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1569005670
    },
    {
        "content": "<p>it's mostly in an experimental state, there's no reason per se, rather than needing to do the work to complete / reject the experiments. in this case it was about having 1 leaper (easy to upstream if needed, but not super important) and dumping all the tuples datafrog creates à la datalog provenance but done on the cheap</p>",
        "id": 176220990,
        "sender_full_name": "lqd",
        "timestamp": 1569005862
    },
    {
        "content": "<p>(I mentioned this because if someone checked out the previous branch it wouldn't build without a bit of massaging — which I've done in the new one)</p>",
        "id": 176221281,
        "sender_full_name": "lqd",
        "timestamp": 1569006035
    },
    {
        "content": "<p>I think figured out problem 2: flow sensitive equality was dependent on liveness across edges (like the requires relation) but it shouldn’t IIUC, with that fixed it should work the on cycle_unification test case (funnily enough, that rule could now use Leapers of size 1 :)</p>",
        "id": 176258297,
        "sender_full_name": "lqd",
        "timestamp": 1569059735
    },
    {
        "content": "<blockquote>\n<p>Niko: I think we want to be able to say that the polonius loop \"computes\" the set of loans represented by each origin at each point</p>\n</blockquote>\n<p>for a \"minimal subset\" of loans/origins/points actually needed to detect errors, right ?</p>",
        "id": 176376808,
        "sender_full_name": "lqd",
        "timestamp": 1569251009
    },
    {
        "content": "<p>also this begs the question <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>, if we <em>had to choose</em> between 1) what we have today with the <a href=\"https://github.com/lqd/borrow-check/blob/variant_prototype2/inputs/polonius-imprecision/polonius-imprecision.rs#L4-L22\" target=\"_blank\" title=\"https://github.com/lqd/borrow-check/blob/variant_prototype2/inputs/polonius-imprecision/polonius-imprecision.rs#L4-L22\">\"unnecessary_error\" caveat</a> that NLL also has, or 2) the prototype as initially described in <a href=\"https://github.com/rust-lang/polonius/issues/107#issue-452778031\" target=\"_blank\" title=\"https://github.com/rust-lang/polonius/issues/107#issue-452778031\">issue #120</a> with the <a href=\"https://github.com/lqd/borrow-check/blob/variant_prototype2/inputs/polonius-imprecision/polonius-imprecision.rs#L43-L62\" target=\"_blank\" title=\"https://github.com/lqd/borrow-check/blob/variant_prototype2/inputs/polonius-imprecision/polonius-imprecision.rs#L43-L62\">\"flow_sensitive_equality_required\" caveat</a> from the second comment, and that option 1 doesn't have but NLL has, or 3) \"flow sensitive equality\" as the solution to both previous options caveats with the doubts that flow-sensitivity may be hard to pull off, what would we choose ? :)</p>",
        "id": 176521909,
        "sender_full_name": "lqd",
        "timestamp": 1569370950
    },
    {
        "content": "<p>(by \"may be hard to pull off\" I mean 50-500k equality tuples flowing through 50k+ CFGs is slow rn — eg too slow to complete <code>clap</code> again, like option 2 before the interestingness filtering; maybe there can be similar judicious filtering to apply here, maybe increasing the granularity to blocks, maybe partially propagating equality of an origin who is equated to different origins at different points)</p>",
        "id": 176522008,
        "sender_full_name": "lqd",
        "timestamp": 1569371101
    },
    {
        "content": "<p>(maybe just buggy :)</p>",
        "id": 176522107,
        "sender_full_name": "lqd",
        "timestamp": 1569371222
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 176524012,
        "sender_full_name": "lqd",
        "timestamp": 1569373339
    },
    {
        "content": "<p>I refuse to choose :P</p>",
        "id": 177088353,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569957455
    },
    {
        "content": "<p>I can't really understand why equality tuples should be harder than the subset tuples we had before</p>",
        "id": 177088412,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569957483
    },
    {
        "content": "<p>Something is confusing to me</p>",
        "id": 177088417,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569957487
    },
    {
        "content": "<p>maybe it's doing the TC before propagating it, but something is fishy indeed</p>",
        "id": 177089921,
        "sender_full_name": "lqd",
        "timestamp": 1569958544
    },
    {
        "content": "<p>I'll look into it more</p>",
        "id": 177090000,
        "sender_full_name": "lqd",
        "timestamp": 1569958592
    },
    {
        "content": "<p>(and look at making the rules better utilize the fact that equality is symmetric, as right now we'll have both values in the facts)</p>",
        "id": 177090205,
        "sender_full_name": "lqd",
        "timestamp": 1569958729
    },
    {
        "content": "<p><em>stomping fist on table</em> I shall investigate !</p>",
        "id": 177090260,
        "sender_full_name": "lqd",
        "timestamp": 1569958788
    },
    {
        "content": "<p>here's the data I mentioned tuesday:<br>\n- the <a href=\"https://gist.github.com/lqd/daf89ef74917a595e7fb68bc0f890fb6#file-cycle_unification-mir\" target=\"_blank\" title=\"https://gist.github.com/lqd/daf89ef74917a595e7fb68bc0f890fb6#file-cycle_unification-mir\">MIR</a>, <br>\n- a filtered <a href=\"https://gist.github.com/lqd/daf89ef74917a595e7fb68bc0f890fb6#file-vizualisation-dot\" target=\"_blank\" title=\"https://gist.github.com/lqd/daf89ef74917a595e7fb68bc0f890fb6#file-vizualisation-dot\">graphviz file</a> output to remove the liveness facts cause they're not the problem here (but which reminds me we still keep in-memory even after computing it, and we'll solve that when moving to a more pipeline-ish process). <br>\n- note that the source is <a href=\"https://gist.github.com/lqd/daf89ef74917a595e7fb68bc0f890fb6#file-input_code-rs\" target=\"_blank\" title=\"https://gist.github.com/lqd/daf89ef74917a595e7fb68bc0f890fb6#file-input_code-rs\">this</a> where I've removed type ascription to simplify the MIR and remove a bunch of facts</p>\n<p>the missed error is at bb10[0], and the live loan is \"L1\": bw1; so we can ignore all the L0 and L2 facts (I can filter them out of the graphviz if need be), the origin we're interested in is '11</p>",
        "id": 177797983,
        "sender_full_name": "lqd",
        "timestamp": 1570704506
    },
    {
        "content": "<p>we can see that '11 is equated with '16 at bb7[3], itself being equated to '19 at bb7[10]. L1 is in '9, '19, '20, '23 at the call site, and none of those will be live at the error site</p>",
        "id": 177798843,
        "sender_full_name": "lqd",
        "timestamp": 1570705365
    },
    {
        "content": "<p>(L1 is mostly in '17 from its creation (bb7[6]) until just before the call at bb7[12] where it flows into '20)</p>",
        "id": 177799120,
        "sender_full_name": "lqd",
        "timestamp": 1570705626
    },
    {
        "content": "<p>(I'll add equality tuples to the graphviz, it's not clear enough otherwise -- edit: done)</p>",
        "id": 177800023,
        "sender_full_name": "lqd",
        "timestamp": 1570706535
    },
    {
        "content": "<p>what usually happens: '11 and '16 are joined in equality by '19 at bb7[10], where '16 dies; at the call site '20 flows into '9, then '19 and into '11 which we wanted</p>",
        "id": 177801480,
        "sender_full_name": "lqd",
        "timestamp": 1570708199
    },
    {
        "content": "<p>here there should be an equality TC at bb7[10] otherwise that link is lost</p>",
        "id": 177801645,
        "sender_full_name": "lqd",
        "timestamp": 1570708381
    },
    {
        "content": "<p>(sorry, I'm back, I had to go buy a house :p)</p>",
        "id": 177804734,
        "sender_full_name": "lqd",
        "timestamp": 1570711034
    },
    {
        "content": "<p>and with that, we're back in business</p>",
        "id": 177809171,
        "sender_full_name": "lqd",
        "timestamp": 1570713936
    },
    {
        "content": "<p>(I can't really test clap, there's data missing in the repo since liveness landed; I'll try to add that back and then test it out; and run rustc's tests as well)</p>",
        "id": 177809438,
        "sender_full_name": "lqd",
        "timestamp": 1570714100
    },
    {
        "content": "<p>rustc results: a couple more OOM/huge memory uses (some possibly unrelated to this variant, where other variants seem to also use a lot of memory, and could bypass the problem via location insensitivity; and others which only happend with the prototype), 2 cases which now start compiling:<br>\n- first, <a href=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/borrowck/mut-borrow-in-loop.rs\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/borrowck/mut-borrow-in-loop.rs\">borrowck/mut-borrow-in-loop.rs</a>: borrowing in an infinite loop, and which seems unclear to me from a cursory look (like, it seems the loan could only last for the call and not continue into the next iteration ?)<br>\n- and <a href=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/nll/promoted-bounds.rs\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/nll/promoted-bounds.rs\">nll/promoted-bounds.rs</a> which feels like it shouldn't compile tho :p</p>\n<p>so there's surely some other bugs lurking in there still</p>",
        "id": 177823183,
        "sender_full_name": "lqd",
        "timestamp": 1570722359
    },
    {
        "content": "<p>apart from that, <a href=\"https://github.com/lqd/borrow-check/blob/variant_prototype2/polonius-engine/src/output/prototype.rs\" target=\"_blank\" title=\"https://github.com/lqd/borrow-check/blob/variant_prototype2/polonius-engine/src/output/prototype.rs\">here's how it looks</a> with help from the datapond generator (and manually converted to leapjoins, indices removed, etc), and perf seems ok (with interesting-ness filtering ofc)</p>",
        "id": 177858247,
        "sender_full_name": "lqd",
        "timestamp": 1570745233
    },
    {
        "content": "<p>Both examples should fail to compile. The functions in the loops have to borrow the reference for <code>'a</code>because of their types (although it's pretty hard to make a function pointer where this is a problem).</p>",
        "id": 178224956,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1571166870
    },
    {
        "content": "<p>thanks <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> I'll analyze those in more detail then and see where the rules break down</p>",
        "id": 178225058,
        "sender_full_name": "lqd",
        "timestamp": 1571166936
    }
]