[
    {
        "content": "<p>Hey folks,</p>\n<p>Sorry if this isn't quite the right place to ask, but I've been going through the nll test suite and I'm curious about how issue 58053 would go through Polonius. Does this still error? It seems a bit odd to me that the type checker doesn't figure out that the origin of the result is the same as the origin of the argument.</p>\n<p>I have a playground link here: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=8f967ccd6b534b992ea48ff9a4f451c2\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=8f967ccd6b534b992ea48ff9a4f451c2\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=8f967ccd6b534b992ea48ff9a4f451c2</a></p>",
        "id": 188561039,
        "sender_full_name": "Aaron Weiss",
        "timestamp": 1582130453
    },
    {
        "content": "<p>I think it would error similarly, at least right now: it was my impression that properly handling closures would require higher-rankedness via chalk, but Niko/Matthew would probably know better than me :)</p>",
        "id": 188565981,
        "sender_full_name": "lqd",
        "timestamp": 1582133649
    },
    {
        "content": "<p>(similarly, extracting <code>f</code> to a function would make it compile under today's NLL)</p>",
        "id": 188566599,
        "sender_full_name": "lqd",
        "timestamp": 1582134123
    },
    {
        "content": "<p>(and I believe this should be solved when higher-ranked lifetimes on closures are supported, like <a href=\"https://github.com/rust-lang/rust/issues/55526\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/55526\">https://github.com/rust-lang/rust/issues/55526</a> or <a href=\"https://github.com/rust-lang/rust/issues/58052\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/58052\">https://github.com/rust-lang/rust/issues/58052</a>)</p>",
        "id": 188568908,
        "sender_full_name": "lqd",
        "timestamp": 1582135568
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> so, if I'm understanding correctly, the issue is basically that f and g should have a type like <code>fn&lt;'a&gt;(&amp;'a i32) -&gt; &amp;'a i32</code>, but are instead getting some type without the quantification?</p>",
        "id": 188571019,
        "sender_full_name": "Aaron Weiss",
        "timestamp": 1582137013
    },
    {
        "content": "<p>it's a little weird because I've encountered other scenarios like that, and in Oxide, annotating them with local (rather than polymorphic) provenances leads to the same behavior as Rust, but in this case, I get different behavior (Oxide seems to admit the program even with local provenances).</p>",
        "id": 188571086,
        "sender_full_name": "Aaron Weiss",
        "timestamp": 1582137082
    },
    {
        "content": "<p>If f and g are indeed getting not-quantified lifetimes/provenances/origins, then I'll have to figure out why I'm not producing the same error in that case.</p>",
        "id": 188571194,
        "sender_full_name": "Aaron Weiss",
        "timestamp": 1582137151
    },
    {
        "content": "<p>Unfortunately I’m not sure of the specifics (there was also another case where quantification was short circuited as ‘static) but for the NLL case maybe <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> could help you there for instance</p>",
        "id": 188574814,
        "sender_full_name": "lqd",
        "timestamp": 1582139566
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127262\">@Aaron Weiss</span> the tl;dr is that this is outside of polonius</p>",
        "id": 189056624,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582661748
    },
    {
        "content": "<p>at least <em>at present</em>, the compiler determines the signatures of functions like that in its initial phases of type inference</p>",
        "id": 189056684,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582661773
    },
    {
        "content": "<p>and polonius (and NLL checker, etc) comes later and is just <em>given</em> that signature</p>",
        "id": 189056690,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582661785
    },
    {
        "content": "<p>now, it is true that we could probably do better</p>",
        "id": 189056698,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582661790
    },
    {
        "content": "<p>and I'm a bit surprised that that test case doesn't work, though I remember now that <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> and I were talking about this at some point and I had forgotten about it</p>",
        "id": 189056730,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582661824
    },
    {
        "content": "<p>we don't support a kind of \"fully explicit\" way of annotating the types on closures, which is kind of annoying</p>",
        "id": 189056747,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582661834
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I figured that it was related to inference, but I can't figure out an annotated version of the program that I can explain why it produces an error in terms of how Oxide works (or how Polonius seems to work).</p>",
        "id": 189063819,
        "sender_full_name": "Aaron Weiss",
        "timestamp": 1582666630
    },
    {
        "content": "<p>I tried to annotate it like so:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">tmp</span>: <span class=\"kt\">i32</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">i</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;t0</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">tmp</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">f</span>: <span class=\"nc\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"na\">&#39;f1</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"na\">&#39;f2</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;f1</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"o\">|</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"na\">&#39;f2</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">//~^ ERROR lifetime may not live long enough</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">j</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;t0</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">g</span>: <span class=\"nc\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"na\">&#39;x1</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"na\">&#39;x2</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;x1</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">//~^ ERROR lifetime may not live long enough</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">k</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;t0</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 189063852,
        "sender_full_name": "Aaron Weiss",
        "timestamp": 1582666653
    },
    {
        "content": "<p>But from my perspective, since these lifetime variables are local to the scope we're in, it's fine to equate them (by flowing loans from e.g. 'f1 into 'f2).</p>",
        "id": 189063966,
        "sender_full_name": "Aaron Weiss",
        "timestamp": 1582666720
    },
    {
        "content": "<p>Is this because there's some other more syntactic check that actually happens here _before_ getting into the borrow checker (regardless of its implementation)?</p>",
        "id": 189064034,
        "sender_full_name": "Aaron Weiss",
        "timestamp": 1582666793
    },
    {
        "content": "<p>If so, what is that syntactic check doing exactly?</p>",
        "id": 189064043,
        "sender_full_name": "Aaron Weiss",
        "timestamp": 1582666799
    },
    {
        "content": "<p>(also, please forgive my abuse-of-notation that is using unboxed function types for closures)</p>",
        "id": 189064162,
        "sender_full_name": "Aaron Weiss",
        "timestamp": 1582666872
    },
    {
        "content": "<p>yeah, a solid question <span class=\"user-mention\" data-user-id=\"127262\">@Aaron Weiss</span> -- I have to go look -- I remember when I was last looking at this question that it seemed to be inferring a type like <code>fn(&amp;'a) -&gt; &amp;'b</code>, which wouldn't really be legal to type even</p>",
        "id": 189629383,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583266147
    },
    {
        "content": "<blockquote>\n<p>we don't support a kind of \"fully explicit\" way of annotating the types on closures, which is kind of annoying</p>\n</blockquote>\n<p>Can you use the trick of accepting and returning the closure?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">restrict</span><span class=\"p\">(</span><span class=\"n\">f</span>: <span class=\"nc\">F</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">F</span>: <span class=\"nb\">Fn</span><span class=\"p\">(</span><span class=\"cm\">/* All the specifics you need */</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">f</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">usage</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">restrict</span><span class=\"p\">(</span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"cm\">/* ... */</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 189826274,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1583435820
    },
    {
        "content": "<p>yeah that should work here</p>",
        "id": 189842426,
        "sender_full_name": "lqd",
        "timestamp": 1583446128
    }
]