[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> A (potentially) quick question: has anybody tried optimization that merges origins? To my understanding, this is always sound (modulo universal regions) because it only expands origins, which should be fine.</p>",
        "id": 250394999,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1629744643
    },
    {
        "content": "<p>not necessarily in so clear terms :)</p>",
        "id": 250395274,
        "sender_full_name": "lqd",
        "timestamp": 1629744770
    },
    {
        "content": "<p>but I think we could say that the whole journey of the equality prototype resulting from <a href=\"https://github.com/rust-lang/polonius/issues/107\">https://github.com/rust-lang/polonius/issues/107</a> also dealt with merging equal origins</p>",
        "id": 250395388,
        "sender_full_name": "lqd",
        "timestamp": 1629744824
    },
    {
        "content": "<p>Thanks! I will check it out.</p>",
        "id": 250395524,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1629744882
    },
    {
        "content": "<p>there are a few threads here on zulip as well about it</p>",
        "id": 250395564,
        "sender_full_name": "lqd",
        "timestamp": 1629744900
    },
    {
        "content": "<p>niko will surely be able to describe this better than I can, but I do remember that one of its points (maybe not in the OP there, but the later prototypes that evolved from it, and ultimately failed but still contained interesting grains of truth worth analyzing IMO) was about producing loans in parent equal origins rather than the usual one</p>",
        "id": 250396065,
        "sender_full_name": "lqd",
        "timestamp": 1629745151
    },
    {
        "content": "<p>Thanks for the pointers! I will read up a bit and come back if my idea still seems to be unexplored/viable.</p>",
        "id": 250396938,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1629745520
    },
    {
        "content": "<p>awesome, looking forward to it :)</p>",
        "id": 250397129,
        "sender_full_name": "lqd",
        "timestamp": 1629745583
    },
    {
        "content": "<p>you could also probably argue that arielb's NLL Graph SSA proposal could achieve some of this via dominance in the subset graph (even though, as described, I imagine it was really more about loan propagation in the CFG), and what I mentioned for <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Polonius.20Hackathon.202021-07-30/near/246830005\">potential sprint ideas</a> as \"- subset graph compression: computing subsets/loans over subset SCCs\"</p>",
        "id": 250464536,
        "sender_full_name": "lqd",
        "timestamp": 1629799792
    }
]