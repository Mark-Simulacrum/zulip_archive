[
    {
        "content": "<p>Hi folks, I’m a research intern at VMware (PhD student at ETH Zürich, where I worked with Frank). I’m currently experimenting with “duct-taping” polonius to the <code>dafny</code> programming language (if you’re unfamiliar, it’s a verification+imperative language from MSR; its imperative part is similar to c#). I’m working with some of the authors of the IronClad/IronFleet papers on a new verification project attempting to extend the usability of the tools to large code-bases. As others have realised, we think linear types are an important step forward (as they alleviate some of the compelxity of reasoning); we have basic (experimental) linear type support built to dafny, and my plan is to extend this support to more of the idioms allowed in rust (thanks to borrowing). Because polonius it’s nicely factored out as a datalog engine, it seems like a prime candidate to attempt the integration.<br>\nI realise this may be equal parts(?) interesting and terrifying for peeps in the WG :) The good news is that you’d have another “user”, who’s also happy to contribute diagnostic/other fixes; the “bad\" news is that we’re somehow misusing the analysis for a different language.</p>",
        "id": 202299600,
        "sender_full_name": "Andrea Lattuada",
        "timestamp": 1593432104
    },
    {
        "content": "<p>interesting :)</p>",
        "id": 202305968,
        "sender_full_name": "lqd",
        "timestamp": 1593436031
    },
    {
        "content": "<p>dafny seemed nice, even though I also had my eye on why3 and whiley</p>",
        "id": 202306038,
        "sender_full_name": "lqd",
        "timestamp": 1593436071
    },
    {
        "content": "<p>but I need to mention that the analyses in polonius are not finalized yet, it's still a work in progress. maybe focusing on reusing the datalog rules and concepts, more so than the complete implementation itself (which can and will change), could be a \"less unstable\" basis for your own work</p>",
        "id": 202306761,
        "sender_full_name": "lqd",
        "timestamp": 1593436453
    },
    {
        "content": "<p>Yup! We like dafny for a few reasons, one being that we think it’s more natural for engineers who don’t have a verification background (and, for the same reason, we’ve also been looking at Prusti, the Viper-based verifier for Rust developed at ETH). Thanks for the note. I’m aware that Polonius isn’t finalised, and that’s totally fine by me/us; the final language it would target in our project isn’t well defined yet either. If things diverge, that’s totally okay! (although I have a feeling that some of the things that are still WIP in polonius are for features we don’t need yet, like the interaction with traits). I’ll try to keep a divergent branch orderly, so we can still cherry-pick if there’s anything of use to the “real” polonius. Other reasons I’m experimenting with Polonius: (i) I can write some rust and see what the generated facts look like and (ii)  datafrog is neat and I’m already a bit familiar.</p>",
        "id": 202323762,
        "sender_full_name": "Andrea Lattuada",
        "timestamp": 1593443369
    },
    {
        "content": "<p>(Also, please let me know if this is out-of-scope for the wg-polonius stream and I’ll move the communication elsewhere.)</p>",
        "id": 202323935,
        "sender_full_name": "Andrea Lattuada",
        "timestamp": 1593443433
    },
    {
        "content": "<p>This sounds super cool! I've been looking at doing stuff with Dafny as well; I'm a PhD student for my day job where I work on string solvers for SMT and applying them for verification</p>",
        "id": 203017797,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1594056503
    },
    {
        "content": "<p>I would also suggest perhaps using something like Soufflé if you can rather than datafrog; as nice as it is, I believe Soufflé is much more mature</p>",
        "id": 203018362,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1594056855
    },
    {
        "content": "<p>Off topic, but what is a <code>string solvers</code>?</p>",
        "id": 203022538,
        "sender_full_name": "Eh2406",
        "timestamp": 1594059110
    },
    {
        "content": "<p>I know some about SAT and have some idea about how SMT is an extension, but don't know that term.</p>",
        "id": 203022900,
        "sender_full_name": "Eh2406",
        "timestamp": 1594059330
    },
    {
        "content": "<p>Some googling later, it extends the available data types to include  <code>string</code>. That makes sense. I'll let myself out.</p>",
        "id": 203024825,
        "sender_full_name": "Eh2406",
        "timestamp": 1594060396
    },
    {
        "content": "<p>It's also crazy hard to solve!<br>\n(edit: SMT 2020 just finished today and the invited talk by P. Rümmer was exactly about that: string solving)</p>",
        "id": 203037988,
        "sender_full_name": "c-cube",
        "timestamp": 1594067944
    },
    {
        "content": "<p>there was also a talk at pldi recently</p>",
        "id": 203039650,
        "sender_full_name": "lqd",
        "timestamp": 1594068942
    },
    {
        "content": "<p>Links?</p>",
        "id": 203059519,
        "sender_full_name": "Eh2406",
        "timestamp": 1594085568
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"304512\">c-cube</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/dafny/near/203037988\">said</a>:</p>\n<blockquote>\n<p>It's also crazy hard to solve!<br>\n(edit: SMT 2020 just finished today and the invited talk by P. Rümmer was exactly about that: string solving)</p>\n</blockquote>\n<p>Philipp Rümmer is my supervisor. :)</p>",
        "id": 203075775,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1594108879
    }
]