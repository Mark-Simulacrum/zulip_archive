[
    {
        "content": "<p>So I read <a href=\"https://github.com/rust-lang-nursery/polonius/issues/156\">polonius#156</a></p>",
        "id": 247725466,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627660041
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> one question I have</p>",
        "id": 247725510,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627660067
    },
    {
        "content": "<p>yes</p>",
        "id": 247725537,
        "sender_full_name": "lqd",
        "timestamp": 1627660079
    },
    {
        "content": "<p>(a) the code for opt vs naive is very similar -- or, it is at first</p>",
        "id": 247725608,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627660092
    },
    {
        "content": "<p>then I guess that naive leverages having the full subset relation available</p>",
        "id": 247725620,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627660100
    },
    {
        "content": "<p>yeah</p>",
        "id": 247725626,
        "sender_full_name": "lqd",
        "timestamp": 1627660110
    },
    {
        "content": "<p>in the hybrid variant:</p>",
        "id": 247725661,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627660126
    },
    {
        "content": "<p>we are right now just filtering</p>",
        "id": 247725668,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627660130
    },
    {
        "content": "<p>did I see some logic that tried to skip populating the placeholder if we know they won't get any errors?</p>",
        "id": 247725692,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627660149
    },
    {
        "content": "<p>(naive can take advantage of the full subset, that Opt cannot)</p>",
        "id": 247725696,
        "sender_full_name": "lqd",
        "timestamp": 1627660151
    },
    {
        "content": "<p>i.e., maybe calculate the rest</p>",
        "id": 247725700,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627660153
    },
    {
        "content": "<p>it seems like a place where magic sets would also apply</p>",
        "id": 247725719,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627660162
    },
    {
        "content": "<p>e.g., if know the LHS of all placeholders that <em>might</em> have an error</p>",
        "id": 247725737,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627660171
    },
    {
        "content": "<p>we could only compute <code>subset_placeholder</code> for those</p>",
        "id": 247725752,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627660176
    },
    {
        "content": "<p>but that is maybe worth just nothing for later :)</p>",
        "id": 247725757,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627660183
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/subset.20relations.20PR.20polonius.23156/near/247725692\">said</a>:</p>\n<blockquote>\n<p>did I see some logic that tried to skip populating the placeholder if we know they won't get any errors?</p>\n</blockquote>\n<p>in general or in this PR ?</p>",
        "id": 247725858,
        "sender_full_name": "lqd",
        "timestamp": 1627660215
    },
    {
        "content": "<p>we mentioned doing it before in the hybrid variant indeed</p>",
        "id": 247725911,
        "sender_full_name": "lqd",
        "timestamp": 1627660243
    },
    {
        "content": "<p>(and part of what you referred to earlier as \"easy filtering\")</p>",
        "id": 247725947,
        "sender_full_name": "lqd",
        "timestamp": 1627660260
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/subset.20relations.20PR.20polonius.23156/near/247725858\">said</a>:</p>\n<blockquote>\n<p>in general or in this PR ?</p>\n</blockquote>\n<p>in this PR</p>",
        "id": 247726000,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627660287
    },
    {
        "content": "<p>it definitely skips doing the more involved analysis if there are no errors at all</p>",
        "id": 247726029,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627660301
    },
    {
        "content": "<p>anyway, I'm basically ready to r+ it regardless</p>",
        "id": 247726059,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627660310
    },
    {
        "content": "<p>just thinking about next steps</p>",
        "id": 247726062,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627660313
    },
    {
        "content": "<p>would you want I add this to the PR ?</p>",
        "id": 247726078,
        "sender_full_name": "lqd",
        "timestamp": 1627660322
    },
    {
        "content": "<p>ah ok</p>",
        "id": 247726096,
        "sender_full_name": "lqd",
        "timestamp": 1627660323
    },
    {
        "content": "<p>I still suspect that a touch of filtering from the insensitive one would get us really, really far</p>",
        "id": 247726120,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627660325
    },
    {
        "content": "<p>agreed :) this will be my next task</p>",
        "id": 247726162,
        "sender_full_name": "lqd",
        "timestamp": 1627660343
    },
    {
        "content": "<p>I forget how much of this you've already proven out :)</p>",
        "id": 247726164,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627660345
    },
    {
        "content": "<p>shall I just merge the above then?</p>",
        "id": 247726181,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627660352
    },
    {
        "content": "<p>also, we should get the repo on bors...</p>",
        "id": 247726187,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627660356
    },
    {
        "content": "<p>I would say so</p>",
        "id": 247726193,
        "sender_full_name": "lqd",
        "timestamp": 1627660360
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/polonius/pull/156#discussion_r680018563\">https://github.com/rust-lang/polonius/pull/156#discussion_r680018563</a> &lt;-- I left one nit</p>",
        "id": 247726212,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627660369
    },
    {
        "content": "<p>(agreed, it was supposed to be enabled but doesn't seem to work)</p>",
        "id": 247726218,
        "sender_full_name": "lqd",
        "timestamp": 1627660371
    },
    {
        "content": "<p>although it's not too important</p>",
        "id": 247726219,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627660372
    },
    {
        "content": "<p>just something that took me a bit to figure out</p>",
        "id": 247726248,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627660382
    },
    {
        "content": "<p>I \"proved\" a bit, but not the whole thing, in particular my older experiments were more about filtering for illegal access errors</p>",
        "id": 247726299,
        "sender_full_name": "lqd",
        "timestamp": 1627660411
    },
    {
        "content": "<p>I'll add the comment right now</p>",
        "id": 247726428,
        "sender_full_name": "lqd",
        "timestamp": 1627660467
    },
    {
        "content": "<p>done, and pushed <a href=\"https://github.com/rust-lang/polonius/pull/156/commits/594c7df887d7f1e480880b1ebac7402f3c196b95\">https://github.com/rust-lang/polonius/pull/156/commits/594c7df887d7f1e480880b1ebac7402f3c196b95</a></p>",
        "id": 247728602,
        "sender_full_name": "lqd",
        "timestamp": 1627661477
    }
]