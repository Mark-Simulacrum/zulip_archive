[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">expr</span><span class=\"p\">.</span><span class=\"n\">mul_value</span><span class=\"p\">(</span><span class=\"n\">expr</span><span class=\"p\">.</span><span class=\"n\">signal</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"mf\">6.0</span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>cannot borrow `expr` as mutable more than once at a time\n</pre></div>\n\n\n<p>I know that NLL in general fixed this for outer mutable, inner immutable, but why doesn't it solve it for 2x mutable</p>",
        "id": 186522425,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1579892332
    },
    {
        "content": "<p>repro:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"nc\">Example</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Example</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">inner</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">outer</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"p\">())</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">ex</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Example</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ex</span><span class=\"p\">.</span><span class=\"n\">outer</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">.</span><span class=\"n\">inner</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 186522775,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1579892542
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> the idea of 2PB (two-phase borrow) was that the outer <code>&amp;mut</code> is treated like an <code>&amp;</code> borrow until it is actualy used, <em>more or less</em></p>",
        "id": 188232907,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581705455
    },
    {
        "content": "<p>this makes it compatible with an inner <code>&amp;</code></p>",
        "id": 188232916,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581705462
    },
    {
        "content": "<p>because two <code>&amp;</code> mix</p>",
        "id": 188232927,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581705474
    },
    {
        "content": "<p>but it is not compatible with an inner <code>&amp;mut</code></p>",
        "id": 188232931,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581705479
    },
    {
        "content": "<p>if we wanted to support that, we'd have had to add a new kind of borrow -- i.e., an \"unactivated\" <code>&amp;mut</code> wouldn't act like an <code>&amp;</code>, it would act like something else (<code>&amp;const</code>, maybe... \"somebody else can mutate\")</p>",
        "id": 188232994,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581705504
    },
    {
        "content": "<p>it's less clear that this is ok</p>",
        "id": 188232999,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581705508
    },
    {
        "content": "<p>and it seemed to add more concepts</p>",
        "id": 188233006,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581705513
    },
    {
        "content": "<p>so we opted not to support it</p>",
        "id": 188233029,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581705526
    },
    {
        "content": "<p>but yeah sometimes it's annoying</p>",
        "id": 188233032,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581705529
    },
    {
        "content": "<p>You know, I never actually thought about what \"2 phase\" actually meant, but that's a pretty clear description!</p>",
        "id": 188233058,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1581705544
    },
    {
        "content": "<p>(one of the nicest post about 2PB is <a href=\"https://smallcultfollowing.com/babysteps/blog/2017/03/01/nested-method-calls-via-two-phase-borrowing/\" target=\"_blank\" title=\"https://smallcultfollowing.com/babysteps/blog/2017/03/01/nested-method-calls-via-two-phase-borrowing/\">https://smallcultfollowing.com/babysteps/blog/2017/03/01/nested-method-calls-via-two-phase-borrowing/</a> -- which is more descriptive than say <a href=\"https://rust-lang.github.io/rustc-guide/borrow_check/two_phase_borrows.html\" target=\"_blank\" title=\"https://rust-lang.github.io/rustc-guide/borrow_check/two_phase_borrows.html\">https://rust-lang.github.io/rustc-guide/borrow_check/two_phase_borrows.html</a> -- even though it's still unclear to me how close/far the actual implementation ended up being in practice, especially related to the stacked borrows model and <a href=\"https://github.com/rust-lang/rust/issues/59159\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/59159\">#59159</a>)</p>",
        "id": 188361515,
        "sender_full_name": "lqd",
        "timestamp": 1581929890
    }
]