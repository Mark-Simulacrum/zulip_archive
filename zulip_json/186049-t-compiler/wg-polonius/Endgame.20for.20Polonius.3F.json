[
    {
        "content": "<p>Is the general consensus that the culmination of the Polonius effort will include an embedded datalog solver in <code>rustc</code>? Or is datalog just meant for prototyping the \"sets of loans\" approach to borrow-checking? My assumption is the former, since otherwise I don't see a reason to have datalog versions of liveness/initialization: those problems are already well understood. Having a datalog solver would also make it easier to implement other analyses (pointer analysis for mir-opt comes to mind). On the other hand, it will be very difficult to make the datalog version execute as fast as a hand-optimized version, so there will be pressure to switch if/when the final semantics are decided on.</p>\n<p>This question is important for me, since it will determine how much effort should be spent trying to speed up the datafrog and/or the Polonius rules.</p>",
        "id": 221365150,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1609529405
    },
    {
        "content": "<p>this is a question that is hard for me to answer unfortunately: I'll try to summarize, and be extra clear when things are my opinion, and when there's consensus</p>",
        "id": 221370706,
        "sender_full_name": "lqd",
        "timestamp": 1609537901
    },
    {
        "content": "<p>I think the endgame plan is not yet set in stone. I think the consensus would be that if we could get away with it, we would.</p>",
        "id": 221370835,
        "sender_full_name": "lqd",
        "timestamp": 1609538057
    },
    {
        "content": "<p>That is, we do have the prototyping use-case you mention, absolutely. And if that prototype was acceptable to use in production, I can't think of why we wouldn't use it.</p>",
        "id": 221370913,
        "sender_full_name": "lqd",
        "timestamp": 1609538191
    },
    {
        "content": "<p>There's also value in having \"the whole of the borrow checker\" in a single, easy to understand place (that's a bit handwavy as so much of that behaviour also depends on rust-to-MIR and MIR-to-facts lowering, NLL-constraints-to-facts lowering, etc), and in a library that others could use, say rust-analyzer in an ideal world</p>",
        "id": 221371080,
        "sender_full_name": "lqd",
        "timestamp": 1609538422
    },
    {
        "content": "<p>so those are why we currently have re-done the parts you mention, with the results you mention, it is indeed hard to match the already existing versions.</p>",
        "id": 221371159,
        "sender_full_name": "lqd",
        "timestamp": 1609538537
    },
    {
        "content": "<p>whether that's enough of a justification we're not sure</p>",
        "id": 221371165,
        "sender_full_name": "lqd",
        "timestamp": 1609538568
    },
    {
        "content": "<p>at least those are the goals</p>",
        "id": 221371172,
        "sender_full_name": "lqd",
        "timestamp": 1609538583
    },
    {
        "content": "<p>my own thoughts are: as things stand today, I'm not sure we can get away with it. I don't know what your dataflow expertise tells you about this question ?</p>",
        "id": 221371268,
        "sender_full_name": "lqd",
        "timestamp": 1609538749
    },
    {
        "content": "<p>we also lack information to have an informed opinion: we lack both data and benchmarks.</p>",
        "id": 221371328,
        "sender_full_name": "lqd",
        "timestamp": 1609538816
    },
    {
        "content": "<p>we also don't know our \"budget\": what is considered an acceptable cost for the increased precision we'd gain</p>",
        "id": 221371395,
        "sender_full_name": "lqd",
        "timestamp": 1609538891
    },
    {
        "content": "<p>especially thinking this cost is hard to quantify in practice: we have access to a lot of code and benchmarks that do compile. The vast majority of that will pass the location insensitive analysis: modulo some subtlety about fact generation, more dialogue between rustc and polonius to possibly avoid some work, all those will be super fast. Whenever there's a \"potential error\" (either of 2 kinds) we'll also be able to heavily filter the data that does not contribute to these 2 errors, making even the location-sensitive analyses \"not that slow\"</p>",
        "id": 221371693,
        "sender_full_name": "lqd",
        "timestamp": 1609539375
    },
    {
        "content": "<p>This is also why we have been focusing on correctness and completeness, before focusing on performance</p>",
        "id": 221371712,
        "sender_full_name": "lqd",
        "timestamp": 1609539433
    },
    {
        "content": "<p>but they are ultimately related in the \"if we can't pull it off, what do we do\" sense, and this is where I've been focusing most of my efforts (trying to come up with different ways of making that work and failing at that a whole lot) rather than move errors or liveness.</p>",
        "id": 221371852,
        "sender_full_name": "lqd",
        "timestamp": 1609539672
    },
    {
        "content": "<p>if that happens, the rules and datafrog will still be invaluable as reference implementations whose behaviour we need to match</p>",
        "id": 221371908,
        "sender_full_name": "lqd",
        "timestamp": 1609539734
    },
    {
        "content": "<p>sorry for the brain dump <span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span> I hope it was somewhat coherent, but that question probably needs <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 221371925,
        "sender_full_name": "lqd",
        "timestamp": 1609539798
    }
]