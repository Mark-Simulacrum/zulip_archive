[
    {
        "content": "<p>Starting a topic</p>",
        "id": 250938488,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630074047
    },
    {
        "content": "<p>I suppose I could prototype in souffle format :)</p>",
        "id": 250939001,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630074258
    },
    {
        "content": "<p>just to be contrary I'm using racket ;)</p>",
        "id": 250939011,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630074261
    },
    {
        "content": "<p>(I love racket now)</p>",
        "id": 250939037,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630074270
    },
    {
        "content": "<p>in all seriousness, <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span>, did we land the current rules in the polonius book?</p>",
        "id": 250939121,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630074313
    },
    {
        "content": "<p>I feel like I asked you this last sprint</p>",
        "id": 250939143,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630074321
    },
    {
        "content": "<p><a href=\"https://rust-lang.github.io/polonius/rules/loans.html\">https://rust-lang.github.io/polonius/rules/loans.html</a></p>",
        "id": 250939180,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630074339
    },
    {
        "content": "<p>yes, apart from the disjunctive rules about placeholder liveness, for which there are two WIP PRs, and a 3rd one will probably needed to replace one of these 2 once we have what we need in datafrog</p>",
        "id": 250939282,
        "sender_full_name": "lqd",
        "timestamp": 1630074366
    },
    {
        "content": "<p>I guess <a href=\"https://hackmd.io/CGMNjt1hR_qYtsR9hgdGmw\">https://hackmd.io/CGMNjt1hR_qYtsR9hgdGmw</a> is still up to date</p>",
        "id": 250939357,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630074403
    },
    {
        "content": "<p>(there maybe some slight difference in nomenclature on some internal relations; or the absence of the illegal subset relations rules in the book)</p>",
        "id": 250939361,
        "sender_full_name": "lqd",
        "timestamp": 1630074405
    },
    {
        "content": "<p>(as well)</p>",
        "id": 250939367,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630074409
    },
    {
        "content": "<p>some questions I had just thinking about the idea (so they may become moot once we have more details):</p>\n<ul>\n<li>we remember that propagating subsets is important, and that's currently done using liveness (i.e. liveness is not only used to detect errors in the 3-point formulation). what, if anything, is replacing that</li>\n<li>(I'm imagining loan invalidations to be propagated in the CFG, and potential additional loan invalidations of a loan that was invalidated ealier, would be a no-op rather than an error ?)</li>\n</ul>",
        "id": 250939697,
        "sender_full_name": "lqd",
        "timestamp": 1630074543
    },
    {
        "content": "<p>re: subsets, a good question, I imagine that the \"placeholder loan\" concept might replace that</p>",
        "id": 250939924,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630074631
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/purely.20forward.20propagation/near/250939357\">said</a>:</p>\n<blockquote>\n<p>I guess <a href=\"https://hackmd.io/CGMNjt1hR_qYtsR9hgdGmw\">https://hackmd.io/CGMNjt1hR_qYtsR9hgdGmw</a> is still up to date</p>\n</blockquote>\n<p>this one is the most up to date, as I have added the actual subset errors rules we use</p>",
        "id": 250939933,
        "sender_full_name": "lqd",
        "timestamp": 1630074633
    },
    {
        "content": "<p>I should also refresh my memory about the eq limitation</p>",
        "id": 250939966,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630074647
    },
    {
        "content": "<p>I'll go read the privmsgs where you sent me all the context ;)</p>",
        "id": 250939983,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630074654
    },
    {
        "content": "<p>:)</p>",
        "id": 250940006,
        "sender_full_name": "lqd",
        "timestamp": 1630074665
    },
    {
        "content": "<p>(the book still references only the placeholder loans approach, but it's still used in the location-insensitive variant so it's not unusual)</p>",
        "id": 250940036,
        "sender_full_name": "lqd",
        "timestamp": 1630074678
    },
    {
        "content": "<p>the example:</p>",
        "id": 250940069,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630074692
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(nll)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![allow(unused_variables, unused_assignments)]</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">random_bool</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">unimplemented!</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"kt\">u32</span><span class=\"p\">,)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"mi\">0</span><span class=\"p\">,);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">y</span>: <span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"kt\">u32</span><span class=\"p\">,)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"mi\">1</span><span class=\"p\">,);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">random_bool</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">y</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// creates `'x: 'y` subset relation</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">random_bool</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">z</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// creates {L0} in 'x constraint</span>\n<span class=\"w\">        </span><span class=\"c1\">// this point, we have `'x: 'y` and `{L0} in `'x`, so we also have `{L0} in 'y`</span>\n<span class=\"w\">        </span><span class=\"nb\">drop</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// polonius flags an (unnecessary) error</span>\n\n<span class=\"w\">    </span><span class=\"nb\">drop</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 250940076,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630074694
    },
    {
        "content": "<p>I think indeed that the approach I have in mind does not flag an error here</p>",
        "id": 250940320,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630074792
    },
    {
        "content": "<p>but let me try to sketch it first :P</p>",
        "id": 250940340,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630074803
    },
    {
        "content": "<p>hackmd: <a href=\"https://hackmd.io/KpK0ICQOQLSPxIcNIlhkJQ\">https://hackmd.io/KpK0ICQOQLSPxIcNIlhkJQ</a></p>",
        "id": 250940346,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630074808
    },
    {
        "content": "<p>:)</p>",
        "id": 250940349,
        "sender_full_name": "lqd",
        "timestamp": 1630074808
    },
    {
        "content": "<p>On a (potentially?) related note, I was reading this paper: <a href=\"https://dl.acm.org/doi/abs/10.1145/3409006\">https://dl.acm.org/doi/abs/10.1145/3409006</a></p>",
        "id": 250940724,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630074960
    },
    {
        "content": "<p>it's very good</p>",
        "id": 250940728,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630074962
    },
    {
        "content": "<p>big props to Lionel Parreaux :)</p>",
        "id": 250940803,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630074976
    },
    {
        "content": "<blockquote>\n<p>no abstract algebra is inflicted on readers.</p>\n</blockquote>",
        "id": 250940895,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1630075012
    },
    {
        "content": "<p>I sent you this paper a while back</p>",
        "id": 250941119,
        "sender_full_name": "lqd",
        "timestamp": 1630075094
    },
    {
        "content": "<p>ha! well, I independently rediscovered it then</p>",
        "id": 250941147,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630075108
    },
    {
        "content": "<p>and the other more comprehensive one</p>",
        "id": 250941167,
        "sender_full_name": "lqd",
        "timestamp": 1630075116
    },
    {
        "content": "<p>I had read the thesis in the past and ... kind of ... grocked it</p>",
        "id": 250941172,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630075120
    },
    {
        "content": "<p>as well as the scala impl</p>",
        "id": 250941174,
        "sender_full_name": "lqd",
        "timestamp": 1630075120
    },
    {
        "content": "<p>right</p>",
        "id": 250941182,
        "sender_full_name": "lqd",
        "timestamp": 1630075124
    },
    {
        "content": "<p>but I like Lionel's formulation better indeed :)</p>",
        "id": 250941205,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630075133
    },
    {
        "content": "<p>there was also another cute impl (cubiml) which does some things better than this one (and others, worse)</p>",
        "id": 250941239,
        "sender_full_name": "lqd",
        "timestamp": 1630075150
    },
    {
        "content": "<p>I haven't decided yet whether I think it makes sense to apply to Rust, but one thing that he covers which I thought was interesting</p>",
        "id": 250941242,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630075152
    },
    {
        "content": "<p>was the idea of using universes (he calls them 'levels') to do let generalization</p>",
        "id": 250941260,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630075160
    },
    {
        "content": "<p>I think that could be very useful for us with closures</p>",
        "id": 250941296,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630075174
    },
    {
        "content": "<p>nice :)</p>",
        "id": 250941322,
        "sender_full_name": "lqd",
        "timestamp": 1630075190
    },
    {
        "content": "<p>(apparently an Oleg innovation?)</p>",
        "id": 250941325,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630075192
    },
    {
        "content": "<p>I had idly mused about the connection at some point but never thought too much about it. It makes total sense.</p>",
        "id": 250941399,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630075211
    },
    {
        "content": "<p>the Lionel formulation kind of reminds me of the subtype checker we had <em>before</em> we adopted our current approach</p>",
        "id": 250941472,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630075244
    },
    {
        "content": "<p>15-part series on cubiml, with some analysis and simplifications of Lionel's work, <a href=\"https://blog.polybdenum.com/2020/10/17/subtype-inference-by-example-part-15-type-annotations.html\">https://blog.polybdenum.com/2020/10/17/subtype-inference-by-example-part-15-type-annotations.html</a></p>",
        "id": 250941487,
        "sender_full_name": "lqd",
        "timestamp": 1630075249
    },
    {
        "content": "<p>which also computed upper- and lower- bunds on each type variable, but wasn't as smart in other ways</p>",
        "id": 250941500,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630075255
    },
    {
        "content": "<p>ok thanks :)</p>",
        "id": 250941531,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630075271
    },
    {
        "content": "<p>sorry I'm so slow to catch up to your citations! :)</p>",
        "id": 250941543,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630075276
    },
    {
        "content": "<p>I wish those blog posts were in PDF form</p>",
        "id": 250941632,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630075321
    },
    {
        "content": "<p><span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 250941645,
        "sender_full_name": "lqd",
        "timestamp": 1630075323
    },
    {
        "content": "<p>I guess I can print them out</p>",
        "id": 250941654,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630075323
    },
    {
        "content": "<p>levels here are debruijn levels, right ?</p>",
        "id": 250941705,
        "sender_full_name": "lqd",
        "timestamp": 1630075340
    },
    {
        "content": "<p>what they call levels are equivalent to universes from what I can tell</p>",
        "id": 250941741,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630075356
    },
    {
        "content": "<p>I guess they are also debruijn levels</p>",
        "id": 250941763,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630075368
    },
    {
        "content": "<p>i.e., as you pass a \"forall\" you increment it :)</p>",
        "id": 250941780,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630075377
    },
    {
        "content": "<p>I've never heard the term \"debruijn level\"</p>",
        "id": 250941809,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630075389
    },
    {
        "content": "<p>yeah :)</p>",
        "id": 250941813,
        "sender_full_name": "lqd",
        "timestamp": 1630075392
    },
    {
        "content": "<p>so I am sort of guessing :)</p>",
        "id": 250941818,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630075395
    },
    {
        "content": "<p>Lionel's paper references <a href=\"http://okmij.org/ftp/ML/generalization.html#levels\">this blog post</a> for a more in-depth description of levels</p>",
        "id": 250941952,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1630075446
    },
    {
        "content": "<p>I need to go back to find my bookmarks of kmett's and kovacs literature</p>",
        "id": 250941966,
        "sender_full_name": "lqd",
        "timestamp": 1630075454
    },
    {
        "content": "<p>On another unrelated note, this library is cool:</p>",
        "id": 250942096,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630075512
    },
    {
        "content": "<p><a href=\"https://docs.rs/egg/0.6.0/egg/\">https://docs.rs/egg/0.6.0/egg/</a></p>",
        "id": 250942113,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630075519
    },
    {
        "content": "<p>I am pondering if we can use it for associated types -- although it seems very similar to an approach I consdiered and rejected in the past</p>",
        "id": 250942168,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630075544
    },
    {
        "content": "<p>but maybe I was wrong</p>",
        "id": 250942195,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630075556
    },
    {
        "content": "<p>yeah eqsat is dope, mention them to eddy and eternaleye if you want to have fun convos :)</p>",
        "id": 250942361,
        "sender_full_name": "lqd",
        "timestamp": 1630075612
    },
    {
        "content": "<p>at some point I was trying to work with this algorithm, congruence closure</p>",
        "id": 250942493,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630075663
    },
    {
        "content": "<p>which is sort of like a building block for eqsat from what I can tell</p>",
        "id": 250942520,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630075673
    },
    {
        "content": "<p>but it does <em>seem</em> like we could absolutely use eqsat, combined with a chalk-like approach</p>",
        "id": 250942601,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630075691
    },
    {
        "content": "<p>to run through and keep adding in \"normalizations\"</p>",
        "id": 250942620,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630075698
    },
    {
        "content": "<p>until a fixed point is reached</p>",
        "id": 250942629,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630075703
    },
    {
        "content": "<p>I'm not sure if that will potentially run infinitely</p>",
        "id": 250942659,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630075716
    },
    {
        "content": "<p>(IIRC kixiron is trying to use egg in vmware's compiler which I thought was differential-datalog, but maybe it's a different one)</p>",
        "id": 250942661,
        "sender_full_name": "lqd",
        "timestamp": 1630075716
    },
    {
        "content": "<p>I think that the eqsat graph's hash-consing <em>may</em> help here</p>",
        "id": 250942679,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630075723
    },
    {
        "content": "<p>I know someone who uses <code>egg</code> for some optimization work, and his conclusion was</p>\n<blockquote>\n<p>egg allows for propagating data upwards with incredible ease, something that’s traditionally rather boilerplate-full, but propagating data downwards is tricky because you aren’t looking at a single instance of something, the same eclass used as a function parameter somewhere could also be used in a completely different context, so assumptions can’t be universally made about things below you based on what’s above</p>\n</blockquote>",
        "id": 250942681,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1630075723
    },
    {
        "content": "<p>this is the same kix btw</p>",
        "id": 250942713,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1630075736
    },
    {
        "content": "<p>that makes sense</p>",
        "id": 250942775,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630075761
    },
    {
        "content": "<p>for the purposes I need, I don't know that this is a problem</p>",
        "id": 250942802,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630075771
    },
    {
        "content": "<p>afaik it's related to optimization of the dataflow code they generate from ddlog</p>",
        "id": 250942820,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1630075781
    },
    {
        "content": "<p>IIRC cycles are currently problematic with it</p>",
        "id": 250942834,
        "sender_full_name": "lqd",
        "timestamp": 1630075787
    },
    {
        "content": "<p>they suggested for downwards to</p>\n<blockquote>\n<p>duplicate the graph underneath the invocation site, rewrite it and union it with the invocation site</p>\n</blockquote>",
        "id": 250943029,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1630075847
    },
    {
        "content": "<p>I'm trying to bring back into cache now</p>",
        "id": 250944601,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630076420
    },
    {
        "content": "<p>some of the canonical Polonius examples :)</p>",
        "id": 250944661,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630076436
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/polonius/blob/master/inputs/issue-47680/issue-47680.rs\">https://github.com/rust-lang/polonius/blob/master/inputs/issue-47680/issue-47680.rs</a> and <a href=\"https://github.com/rust-lang/polonius/blob/master/inputs/vec-push-ref/vec-push-ref.rs\">https://github.com/rust-lang/polonius/blob/master/inputs/vec-push-ref/vec-push-ref.rs</a> at the very least</p>",
        "id": 250944821,
        "sender_full_name": "lqd",
        "timestamp": 1630076493
    },
    {
        "content": "<p>yeah</p>",
        "id": 250944871,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630076513
    },
    {
        "content": "<p>those are a good two to start with</p>",
        "id": 250944887,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630076520
    },
    {
        "content": "<p>I was just re-reading the early blog posts</p>",
        "id": 250944941,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630076528
    },
    {
        "content": "<p>and getting lost in this <a href=\"https://github.com/rust-lang/rust/commit/50a3dd40ae8ae6494e55d5cfc29eafdb4172af52\">grody syntax</a></p>",
        "id": 250944969,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630076542
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>        #debug[&quot;parent of node %d is node %d&quot;, child_id, parent_id];\n</code></pre></div>",
        "id": 250944990,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630076550
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>    let fn_cx = alt fk {\n      visit::fk_item_fn(*) | visit::fk_method(*) | visit::fk_res(*) |\n      visit::fk_ctor(*) {\n        // Top-level functions are a root scope.\n        {parent: some(id), closure_parent: some(id) with cx}\n      }\n\n      visit::fk_anon(*) | visit::fk_fn_block(*) {\n        // Closures use the closure_parent.\n        {parent: cx.closure_parent with cx}\n      }\n    };\n</code></pre></div>",
        "id": 250945032,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630076568
    },
    {
        "content": "<p>heh</p>",
        "id": 250945035,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630076570
    },
    {
        "content": "<p>:D</p>",
        "id": 250945091,
        "sender_full_name": "lqd",
        "timestamp": 1630076602
    },
    {
        "content": "<p>so good</p>",
        "id": 250945103,
        "sender_full_name": "lqd",
        "timestamp": 1630076609
    },
    {
        "content": "<p>(<a href=\"https://github.com/lqd/borrow-check/blob/variant_prototype3/inputs/polonius-imprecision/polonius-imprecision.rs\">https://github.com/lqd/borrow-check/blob/variant_prototype3/inputs/polonius-imprecision/polonius-imprecision.rs</a> is also interesting for the link to the eq adjacent examples, including the \"unnecessary error\" example posted above, and the <code>cfg_propagation_required</code>requiring subset propagation)</p>",
        "id": 250945284,
        "sender_full_name": "lqd",
        "timestamp": 1630076677
    },
    {
        "content": "<p>Yeah, I had kind of forgotten all the polonius interesting-ness around subset propagation</p>",
        "id": 250945452,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630076762
    },
    {
        "content": "<p>I'm trying to think why this is just ... not a thing in the other code I was writing</p>",
        "id": 250945521,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630076780
    },
    {
        "content": "<p>probably because, like oxide, I was not doing inference, and it falls out from invariance otherwise</p>",
        "id": 250945591,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630076818
    },
    {
        "content": "<p>interesting</p>",
        "id": 250945963,
        "sender_full_name": "lqd",
        "timestamp": 1630076972
    },
    {
        "content": "<p>I probably should familiarize myself better with all their work and implementation, at the very least to see such differences. I do remember we talked about <em>some</em> with aatxe on a call years ago</p>",
        "id": 250946147,
        "sender_full_name": "lqd",
        "timestamp": 1630077043
    },
    {
        "content": "<p>yes</p>",
        "id": 250946168,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630077056
    },
    {
        "content": "<p>I remember puzzling over exactly this question</p>",
        "id": 250946179,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630077059
    },
    {
        "content": "<p>which is what led us to the \"unnecessary error\" example in the first  place</p>",
        "id": 250946214,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630077071
    },
    {
        "content": "<p>I am still wondering, as an aside</p>",
        "id": 250946255,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630077085
    },
    {
        "content": "<p>my happiest result would be if this line of inquiry ultimately makes polonius unnecessary</p>",
        "id": 250946288,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630077100
    },
    {
        "content": "<p>because the rules for subtyping and all the rest move into chalk and the type checker in general</p>",
        "id": 250946309,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630077111
    },
    {
        "content": "<p>this is how Dada works and it's really kind of nice</p>",
        "id": 250946356,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630077124
    },
    {
        "content": "<p>yeah</p>",
        "id": 250946384,
        "sender_full_name": "lqd",
        "timestamp": 1630077134
    },
    {
        "content": "<p>at least for illegal accesses errors, and still TBD for illegal subset relationship errors I assume</p>",
        "id": 250946431,
        "sender_full_name": "lqd",
        "timestamp": 1630077162
    },
    {
        "content": "<p>yeah :)</p>",
        "id": 250946469,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630077183
    },
    {
        "content": "<p>I think it can all fit though</p>",
        "id": 250946491,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630077191
    },
    {
        "content": "<p>this is partly why I was reading on that Lionel paper</p>",
        "id": 250946503,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630077199
    },
    {
        "content": "<p>(and will read your other cites)</p>",
        "id": 250946509,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630077202
    },
    {
        "content": "<p>oh shit</p>",
        "id": 250946580,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630077240
    },
    {
        "content": "<p>I gotta go look up our new names lol</p>",
        "id": 250946605,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630077244
    },
    {
        "content": "<p>not region...origin?</p>",
        "id": 250946650,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630077259
    },
    {
        "content": "<p>(the Parreaux work is more formal, but the other was interesting, not necessarily as ground-breaking say. most of the work of condensing Dolan's ideas are, IIRC, in Parreaux') (but cubiml is implemented in ......... rust :)</p>",
        "id": 250946686,
        "sender_full_name": "lqd",
        "timestamp": 1630077280
    },
    {
        "content": "<p>\"o-region\"</p>",
        "id": 250946687,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1630077281
    },
    {
        "content": "<p>I like Dada's <em>lease</em> :P</p>",
        "id": 250946736,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630077306
    },
    {
        "content": "<p>I feel you've confused yourself with dada's lease and al</p>",
        "id": 250946751,
        "sender_full_name": "lqd",
        "timestamp": 1630077314
    },
    {
        "content": "<p>dang it, the joke's been snatched up already <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 250946775,
        "sender_full_name": "lqd",
        "timestamp": 1630077330
    },
    {
        "content": "<p>from our polonius doc:</p>",
        "id": 250947297,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630077533
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Prolog\"><pre><span></span><code><span class=\"nf\">origin_contains_loan_on_entry</span><span class=\"p\">(</span><span class=\"nv\">Origin</span><span class=\"p\">,</span> <span class=\"nv\">Loan</span><span class=\"p\">,</span> <span class=\"nv\">Node</span><span class=\"p\">)</span> <span class=\"p\">:-</span>\n  <span class=\"nf\">loan_issued_at</span><span class=\"p\">(</span><span class=\"nv\">Origin</span><span class=\"p\">,</span> <span class=\"nv\">Loan</span><span class=\"p\">,</span> <span class=\"nv\">Node</span><span class=\"p\">).</span>\n</code></pre></div>",
        "id": 250947302,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630077537
    },
    {
        "content": "<p>isn't that a bit bogus?</p>",
        "id": 250947320,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630077544
    },
    {
        "content": "<p>like, if the loan is issued at a particular point</p>",
        "id": 250947350,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630077561
    },
    {
        "content": "<p>I would think it is contained <em>on exit</em></p>",
        "id": 250947359,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630077565
    },
    {
        "content": "<p>curious</p>",
        "id": 250947361,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630077566
    },
    {
        "content": "<p>I've never been very happy with the way polonius splits points into start and mid</p>",
        "id": 250947388,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630077586
    },
    {
        "content": "<p>mostly because it's twice as many points</p>",
        "id": 250947395,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630077591
    },
    {
        "content": "<p>and because I somehow can't remember why it's necessary</p>",
        "id": 250947407,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630077597
    },
    {
        "content": "<p>but I know that when I take it away things stop working :P</p>",
        "id": 250947459,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630077605
    },
    {
        "content": "<p>I wonder if it's because of being sloppy like that</p>",
        "id": 250947469,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630077609
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/purely.20forward.20propagation/near/250947459\">said</a>:</p>\n<blockquote>\n<p>but I know that when I take it away things stop working :P</p>\n</blockquote>\n<p>it's <em>something</em> like this, I recall</p>",
        "id": 250947491,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630077625
    },
    {
        "content": "<p>that there is some edge case for things like <code>x = x.next</code></p>",
        "id": 250947512,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630077638
    },
    {
        "content": "<p>this one may just be a slight nomenclature error while we've changed the rules. there were no differentiation between exit and entry states in the naming before. it was just \"requires\"</p>",
        "id": 250947609,
        "sender_full_name": "lqd",
        "timestamp": 1630077683
    },
    {
        "content": "<p>right</p>",
        "id": 250947639,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630077701
    },
    {
        "content": "<p>but that's what I'm wondering</p>",
        "id": 250947646,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630077704
    },
    {
        "content": "<p>in particular, maybe instead of start/mid points</p>",
        "id": 250947665,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630077712
    },
    {
        "content": "<p>we could have two relations</p>",
        "id": 250947679,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630077718
    },
    {
        "content": "<p>like <code>requires_on_entry</code></p>",
        "id": 250947684,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630077720
    },
    {
        "content": "<p>and <code>requires_on_exit</code></p>",
        "id": 250947725,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630077724
    },
    {
        "content": "<p>well, <code>origin_contains_loan_on_entry</code></p>",
        "id": 250947736,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630077731
    },
    {
        "content": "<p>you get the idea :)</p>",
        "id": 250947754,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630077741
    },
    {
        "content": "<p>I'm going to try it</p>",
        "id": 250947803,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630077761
    },
    {
        "content": "<p>(the move/init fact generation also had a couple of similar subtle things about those points)</p>",
        "id": 250947838,
        "sender_full_name": "lqd",
        "timestamp": 1630077777
    },
    {
        "content": "<p>yes, I vaguely recall that</p>",
        "id": 250947864,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630077788
    },
    {
        "content": "<p>maybe <span class=\"user-mention\" data-user-id=\"204115\">@Amanda Stjerna</span> remembers better</p>",
        "id": 250947898,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630077802
    },
    {
        "content": "<p>or her thesis :)</p>",
        "id": 250947907,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630077805
    },
    {
        "content": "<p>(there's another thread here where I had talked about this init false positive in more detail (and which is probably still not fixed correctly) while investigating it)</p>",
        "id": 250948146,
        "sender_full_name": "lqd",
        "timestamp": 1630077912
    },
    {
        "content": "<p>(just now realizing that the CFG diagrams hat text in them all this time, but my browser rendered that in white <span aria-label=\"rolling eyes\" class=\"emoji emoji-1f644\" role=\"img\" title=\"rolling eyes\">:rolling_eyes:</span> )</p>",
        "id": 250949911,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1630078613
    },
    {
        "content": "<p>the graphviz outputs you mean ?</p>",
        "id": 250950043,
        "sender_full_name": "lqd",
        "timestamp": 1630078672
    },
    {
        "content": "<p>yeah</p>",
        "id": 250950054,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1630078680
    },
    {
        "content": "<p>rather unfortunate</p>",
        "id": 250950123,
        "sender_full_name": "lqd",
        "timestamp": 1630078692
    },
    {
        "content": "<p>fixed that now, but before I though niko just hadn't gotten to them yet...</p>",
        "id": 250950170,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1630078717
    },
    {
        "content": "<p>(credit where credit is due IIRC it was <span class=\"user-mention silent\" data-user-id=\"116852\">Andrea Lattuada</span>'s work, which was later improved)</p>",
        "id": 250950440,
        "sender_full_name": "lqd",
        "timestamp": 1630078833
    },
    {
        "content": "<p>(what was?)</p>",
        "id": 250950468,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630078847
    },
    {
        "content": "<p>the graphviz outputs</p>",
        "id": 250950574,
        "sender_full_name": "lqd",
        "timestamp": 1630078897
    },
    {
        "content": "<p>In the <code>Example A</code> CFG, in <code>C</code> we'd infer <code>invalidate_loan(L0) -&gt; (+ origin_contains_loan_on_entry(L0, 'b)) origin_invalidated('b) -&gt; (+ subset('b, 'a)) origin_invalidated('a)</code>, right?</p>",
        "id": 250952023,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1630079577
    },
    {
        "content": "<p>Re: the entry/exit question, I suspected that we could remove that distinction from the current borrow-checker when I was refactoring the dataflow framework. Currently, we allow dataflow analyses to make changes both <em>before</em> and <em>after</em> a statement, and you can inspect the state at any point in between those changes. However,  <code>borrowck</code> only inspects the state in-between the before- and after-effects except for some special terminators (<code>Return</code> and some generator-related ones), which could be handled specially.</p>\n<p>That suggests we could move the \"before\" effect (which is called \"kill_loans_out_of_scope\") into the  \"after\" effect for the previous statement (which sets bits for borrows that occur at that location, among some other things).</p>\n<p>I'm not sure what the equivalent formulation is in Polonius, but I think you're right that we don't need to do the split.</p>",
        "id": 250952131,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1630079634
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"337115\">Domenic Quirl</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/purely.20forward.20propagation/near/250952023\">said</a>:</p>\n<blockquote>\n<p>In the <code>Example A</code> CFG, in <code>C</code> we'd infer <code>invalidate_loan(L0) -&gt; (+ origin_contains_loan_on_entry(L0, 'b)) origin_invalidated('b) -&gt; (+ subset('b, 'a)) origin_invalidated('a)</code>, right?</p>\n</blockquote>\n<p>I don't understand the question, <span class=\"user-mention\" data-user-id=\"337115\">@Domenic Quirl</span></p>",
        "id": 250952578,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630079822
    },
    {
        "content": "<p>are you asking why is the <code>'a</code> origin invalidated?</p>",
        "id": 250952623,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630079845
    },
    {
        "content": "<p>I'm trying to follow your notes, and got confused that the facts in that block list <code>origin_invalidated('a)</code> first</p>",
        "id": 250952755,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1630079889
    },
    {
        "content": "<p>cause in my mind the first thing that is invalidated is <code>'b</code>, because it is contained in <code>L0</code></p>",
        "id": 250952869,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1630079945
    },
    {
        "content": "<p>and then because of <code>subset</code> this also affects <code>'a</code></p>",
        "id": 250952905,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1630079963
    },
    {
        "content": "<p>I see</p>",
        "id": 250952947,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630079981
    },
    {
        "content": "<p>is that correct?</p>",
        "id": 250952958,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1630079987
    },
    {
        "content": "<p>yes</p>",
        "id": 250952970,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630079992
    },
    {
        "content": "<p>the ordering isn't really significant</p>",
        "id": 250952992,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630080000
    },
    {
        "content": "<p>(what there has been a hackmd all along <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span>)</p>",
        "id": 250953043,
        "sender_full_name": "lqd",
        "timestamp": 1630080005
    },
    {
        "content": "<p><a href=\"https://hackmd.io/KpK0ICQOQLSPxIcNIlhkJQ?view\">https://hackmd.io/KpK0ICQOQLSPxIcNIlhkJQ?view</a></p>",
        "id": 250953098,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1630080020
    },
    {
        "content": "<p>but you are correct that <code>'a</code> contains <code>L0</code> from <code>'b</code></p>",
        "id": 250953125,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630080025
    },
    {
        "content": "<p>(yeah, I re-read the backscroll to notice the link :)</p>",
        "id": 250953172,
        "sender_full_name": "lqd",
        "timestamp": 1630080042
    },
    {
        "content": "<p>(so ignore the graphviz BS I was saying, since you were mentioning this hackmd)</p>",
        "id": 250953261,
        "sender_full_name": "lqd",
        "timestamp": 1630080077
    },
    {
        "content": "<p>I love how we managed to use like <em>all the HTML escaped characters</em> in Rust syntax</p>",
        "id": 250953358,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630080110
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/purely.20forward.20propagation/near/250952992\">said</a>:</p>\n<blockquote>\n<p>the ordering isn't really significant</p>\n</blockquote>\n<p>alright that's what I thought <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span> <br>\nSince I haven't really worked with these rules yet I'm trying to make sure I don't just feel like the conclusion facts make sense to me from knowing the Rust program, but also what rules / other facts they are derived from</p>",
        "id": 250953365,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1630080112
    },
    {
        "content": "<p>it's kind of maximally inconvenient</p>",
        "id": 250953370,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630080115
    },
    {
        "content": "<p>not maximally minimal <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 250953501,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1630080159
    },
    {
        "content": "<p>do we need origin invalidation to be flow-sensitive ?</p>",
        "id": 250954245,
        "sender_full_name": "lqd",
        "timestamp": 1630080488
    },
    {
        "content": "<p>yes</p>",
        "id": 250954502,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630080613
    },
    {
        "content": "<p>so I think <a href=\"https://hackmd.io/KpK0ICQOQLSPxIcNIlhkJQ#Example-vec-temp\">example vec temp</a> is the reason that we propagate subset relations</p>",
        "id": 250954542,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630080637
    },
    {
        "content": "<p>and also perhaps a key difference between the \"type system\" formulation and polonius, in a sense</p>",
        "id": 250954583,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630080659
    },
    {
        "content": "<p>it's actually a pretty interesting example</p>",
        "id": 250954785,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630080745
    },
    {
        "content": "<p>there are two, I think, key parts</p>",
        "id": 250954827,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630080767
    },
    {
        "content": "<ul>\n<li>until we call <code>Vec::push</code>, the type of the vector <em>isn't</em> dependent on the loan of <code>x</code></li>\n</ul>",
        "id": 250954884,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630080791
    },
    {
        "content": "<ul>\n<li>when we call <code>Vec::push</code> on <code>tmp</code>, it 'propagates' that dependency into the type of <code>v</code></li>\n</ul>",
        "id": 250954933,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630080817
    },
    {
        "content": "<p>(why does that &lt;td&gt;&lt;td&gt; keep happening??)</p>",
        "id": 250955802,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630081147
    },
    {
        "content": "<p>am I typing it?</p>",
        "id": 250955809,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630081149
    },
    {
        "content": "<p>I feel like I'm only copy and pasting</p>",
        "id": 250955830,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630081158
    },
    {
        "content": "<p>maybe not :)</p>",
        "id": 250955835,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630081160
    },
    {
        "content": "<p>maybe they're \"helpful\"ly added by hackmd</p>",
        "id": 250955910,
        "sender_full_name": "lqd",
        "timestamp": 1630081197
    },
    {
        "content": "<p>I feel like it's a hackmd bug</p>",
        "id": 250955971,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630081205
    },
    {
        "content": "<p><code>origin_contains_loan_on_entry</code> this annoys me</p>",
        "id": 250956154,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630081295
    },
    {
        "content": "<p>it should be <code>loan_in_origin</code> I think. :)</p>",
        "id": 250956173,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630081303
    },
    {
        "content": "<p>so that it matches <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>∈</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x \\in y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span></p>",
        "id": 250956202,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630081315
    },
    {
        "content": "<p>and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>⊆</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x \\subseteq y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊆</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span></p>",
        "id": 250956249,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630081324
    },
    {
        "content": "<p>(i.e., little thing on the left)</p>",
        "id": 250956262,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630081330
    },
    {
        "content": "<p>you can just change its name in the document so that it distracts you less :)</p>",
        "id": 250956553,
        "sender_full_name": "lqd",
        "timestamp": 1630081448
    },
    {
        "content": "<p>done</p>",
        "id": 250956723,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630081536
    },
    {
        "content": "<p>Hm, some of the facts in the example are known earlier than written, right?</p>",
        "id": 250957109,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1630081687
    },
    {
        "content": "<p>E.g. the <code>x = 23</code> assignment would already invalidate the origins</p>",
        "id": 250957137,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1630081705
    },
    {
        "content": "<p>but then only the second call to <code>len</code> is an invalid access</p>",
        "id": 250957197,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1630081733
    },
    {
        "content": "<p>I think it's written correctly</p>",
        "id": 250957236,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630081750
    },
    {
        "content": "<p>the point is that the origin is not invalidated <em>on entry</em> yet</p>",
        "id": 250957264,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630081764
    },
    {
        "content": "<p>but only as we enter the next node</p>",
        "id": 250957268,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630081769
    },
    {
        "content": "<p>the effects of node N only show up in its successors</p>",
        "id": 250957311,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630081788
    },
    {
        "content": "<p>oh, it's on entry</p>",
        "id": 250957365,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1630081802
    },
    {
        "content": "<p>ok so I thnk i'm starting to see how this will work :)</p>",
        "id": 250957564,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630081871
    },
    {
        "content": "<p>I'm still feeling a bit \"bah\" about the details of what happens when you overwrite a pointer</p>",
        "id": 250957592,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630081884
    },
    {
        "content": "<p>I feel like there needs to be some sort of \"reset\" operation for when a value is overwritten</p>",
        "id": 250957733,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630081949
    },
    {
        "content": "<p>like our existing \"loan killed at\" maybe ?</p>",
        "id": 250958087,
        "sender_full_name": "lqd",
        "timestamp": 1630082107
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">22</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">44</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// `x` points at `p`</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// Loan L0, `y` points at `p` too</span>\n<span class=\"c1\">// ...</span>\n<span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// `x` points at `q`; kills L0</span>\n</code></pre></div>",
        "id": 250958209,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1630082162
    },
    {
        "content": "<p>right, that's the sort of example I was thinking about</p>",
        "id": 250958327,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630082204
    },
    {
        "content": "<p>I think it's not <em>loan killed</em></p>",
        "id": 250958332,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630082208
    },
    {
        "content": "<p>it's <em>origin killed</em></p>",
        "id": 250958344,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630082213
    },
    {
        "content": "<p>i.e., \"every reference with this origin was overwritten\"</p>",
        "id": 250958352,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630082219
    },
    {
        "content": "<p>since we only use origins once, that's easy to ascertain ;)</p>",
        "id": 250958371,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630082227
    },
    {
        "content": "<p>that allows us to remove it from the subset relation, remove it from <code>origin_invalidated</code>, and so forth</p>",
        "id": 250958392,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630082240
    },
    {
        "content": "<p>those things are no longer true</p>",
        "id": 250958401,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630082245
    },
    {
        "content": "<p>it still has that \"transtive-closure-at-every-node\" character :)</p>",
        "id": 250958458,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630082273
    },
    {
        "content": "<p>I .. forget what we use loan-killed-at for, is that for the <code>temp = temp.next</code> pattern ?</p>",
        "id": 250958568,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630082309
    },
    {
        "content": "<p>yeah</p>",
        "id": 250958597,
        "sender_full_name": "lqd",
        "timestamp": 1630082325
    },
    {
        "content": "<p>and killing borrows of a.b.c if a is overwritten</p>",
        "id": 250958655,
        "sender_full_name": "lqd",
        "timestamp": 1630082356
    },
    {
        "content": "<p>but that's the same thing</p>",
        "id": 250958679,
        "sender_full_name": "lqd",
        "timestamp": 1630082372
    },
    {
        "content": "<p>ah, yes, I think we want that too</p>",
        "id": 250958859,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630082439
    },
    {
        "content": "<p>this indicates that:</p>",
        "id": 250958877,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630082449
    },
    {
        "content": "<p>the path in the loan is no longer applicable, such that modifications to the path will no longer invalidate any data</p>",
        "id": 250959011,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630082518
    },
    {
        "content": "<p>that's a different thing though</p>",
        "id": 250959095,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630082540
    },
    {
        "content": "<p>Can you maybe explain some more how these are different than, on assignment to <code>a</code>, invalidating any loan <code>L: kind(path)</code> where <code>path</code> has <code>a</code>? If I rephrase my current understanding, with <code>invalidate_loan</code> the data behind the loan is invalid to access, while with <code>loan_killed</code> it is still valid, but no longer behind the loan?</p>",
        "id": 250959727,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1630082846
    },
    {
        "content": "<p>I don't yet understand where <code>origin_killed</code> fits into this picture</p>",
        "id": 250959760,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1630082863
    },
    {
        "content": "<p>Oh, is it that if I <code>kill</code> a loan for <code>a.b.c</code>, I can later invalidate it by accessing <code>a.b.c</code> again, but that doesn't matter because <code>a.b.c</code> is now something different?</p>",
        "id": 250960807,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1630083316
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"337115\">Domenic Quirl</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/purely.20forward.20propagation/near/250959727\">said</a>:</p>\n<blockquote>\n<p>Can you maybe explain some more how these are different than, on assignment to <code>a</code>, invalidating any loan <code>L: kind(path)</code> where <code>path</code> has <code>a</code>? If I rephrase my current understanding, with <code>invalidate_loan</code> the data behind the loan is invalid to access, while with <code>loan_killed</code> it is still valid, but no longer behind the loan?</p>\n</blockquote>\n<p>yes, we probably need a better name than \"killed\" for this</p>",
        "id": 250961290,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630083529
    },
    {
        "content": "<p>but as an example:</p>",
        "id": 250961296,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630083532
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">22</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">p</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 250961341,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630083553
    },
    {
        "content": "<p>given that setup</p>",
        "id": 250961343,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630083557
    },
    {
        "content": "<p>if I do <code>x = 23</code>, I <em>invalidate</em> the loan <code>&amp;mut x</code></p>",
        "id": 250961358,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630083565
    },
    {
        "content": "<p><code>p</code> can no longer be used because the memory it references has changed</p>",
        "id": 250961365,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630083571
    },
    {
        "content": "<p>(and not through it)</p>",
        "id": 250961411,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630083589
    },
    {
        "content": "<p>but if I do:</p>",
        "id": 250961428,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630083597
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">22</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">44</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">p</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">q</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">p</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 250961541,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630083620
    },
    {
        "content": "<p><code>q</code> borrowed <code>*p</code></p>",
        "id": 250961566,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630083627
    },
    {
        "content": "<p>and yet changing <code>p</code> to point at something else doesn't <em>invalidate</em> <code>q</code></p>",
        "id": 250961600,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630083642
    },
    {
        "content": "<p>the memory <code>q</code> references (<code>x</code>) is still unchanged</p>",
        "id": 250961627,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630083657
    },
    {
        "content": "<p>and, indeed, if we now to <code>*p = 23;</code></p>",
        "id": 250961674,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630083679
    },
    {
        "content": "<p>that doesn't invalidate <code>q</code> either, even though <code>q</code> borrowed <code>*p</code></p>",
        "id": 250961699,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630083691
    },
    {
        "content": "<p>that makes sense I think</p>",
        "id": 250961856,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1630083757
    },
    {
        "content": "<p>assigning to <code>p</code> would invalidate anything that has a loan <code>&amp;mut p</code>, but not <code>&amp;mut *p</code></p>",
        "id": 250961922,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1630083788
    },
    {
        "content": "<p>correct</p>",
        "id": 250962009,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630083837
    },
    {
        "content": "<p>it's kind of \"loan_inapplicable\"</p>",
        "id": 250962059,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630083846
    },
    {
        "content": "<p>\"outdated\"</p>",
        "id": 250962066,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630083850
    },
    {
        "content": "<p>something :)</p>",
        "id": 250962068,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630083851
    },
    {
        "content": "<p>and assigning to <code>*p</code> invalidates anything that has a loan <code>&amp;mut *p</code>, but only _after_ that was last \"killed\"</p>",
        "id": 250962078,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1630083855
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"337115\">@Domenic Quirl</span> FYI this is discussed in the first Polonius blog post <a href=\"https://smallcultfollowing.com/babysteps/blog/2018/04/27/an-alias-based-formulation-of-the-borrow-checker/#the-requires-relation\">https://smallcultfollowing.com/babysteps/blog/2018/04/27/an-alias-based-formulation-of-the-borrow-checker/#the-requires-relation</a> a few paragraphs down</p>",
        "id": 250962089,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1630083860
    },
    {
        "content": "<p>so the old loan in <code>q</code> is no longer bound by this, but if I had <code>let mut r = &amp;mut *p;</code> between the two re-assignments, it would</p>",
        "id": 250962254,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1630083941
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"118594\">Dylan MacKenzie (ecstatic-morse)</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/purely.20forward.20propagation/near/250962089\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"337115\">Domenic Quirl</span> FYI this is discussed in the first Polonius blog post <a href=\"https://smallcultfollowing.com/babysteps/blog/2018/04/27/an-alias-based-formulation-of-the-borrow-checker/#the-requires-relation\">https://smallcultfollowing.com/babysteps/blog/2018/04/27/an-alias-based-formulation-of-the-borrow-checker/#the-requires-relation</a> a few paragraphs down</p>\n</blockquote>\n<p>I have read most of this before, but it's different in here when y'all are moving so fast <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 250962372,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1630083995
    },
    {
        "content": "<p>the terminology is also quite dated</p>",
        "id": 250962412,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630084015
    },
    {
        "content": "<p>So then <code>origin_killed</code> is mostly to filter out origins from other relations that are no longer useful?</p>",
        "id": 250962676,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1630084118
    },
    {
        "content": "<p>(the origins, not the relations)</p>",
        "id": 250962699,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1630084129
    },
    {
        "content": "<p>yes</p>",
        "id": 250962933,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630084232
    },
    {
        "content": "<p>I should play out <span class=\"user-mention\" data-user-id=\"118594\">@Dylan MacKenzie (ecstatic-morse)</span>'s example, but the idea of \"kill origin\"</p>",
        "id": 250962967,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630084248
    },
    {
        "content": "<p>(note that I changed all input facts to the <em>imperative</em>)</p>",
        "id": 250962976,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630084253
    },
    {
        "content": "<p>anyway, the idea of \"kill origin\" is similar</p>",
        "id": 250962988,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630084261
    },
    {
        "content": "<p>if you had</p>",
        "id": 250962992,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630084263
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"o\">....</span><span class=\"w\"></span>\n<span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">y</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 250963032,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630084282
    },
    {
        "content": "<p>\"clearly\" <code>p</code> is not affected by this change to <code>x</code></p>",
        "id": 250963043,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630084291
    },
    {
        "content": "<p>because it has a new value now</p>",
        "id": 250963054,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630084296
    },
    {
        "content": "<p>we used to manage this through liveness -- p was \"dead\" on entry</p>",
        "id": 250963070,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630084304
    },
    {
        "content": "<p>but I think that using this concept of \"killing\" is better</p>",
        "id": 250963100,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630084319
    },
    {
        "content": "<p>if we are trying to propagate everything forward</p>",
        "id": 250963152,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630084327
    },
    {
        "content": "<p>So right now we have this rule for propagating <code>loan_in_origin</code> across the CFG</p>\n<div class=\"codehilite\" data-code-language=\"Prolog\"><pre><span></span><code><span class=\"nf\">loan_in_origin</span><span class=\"p\">(</span><span class=\"nv\">L</span><span class=\"p\">,</span> <span class=\"nv\">O</span><span class=\"p\">,</span> <span class=\"nv\">N2</span><span class=\"p\">)</span> <span class=\"p\">:-</span> <span class=\"o\">//</span> <span class=\"nv\">Carried</span> <span class=\"s s-Atom\">over</span> <span class=\"s s-Atom\">from</span> <span class=\"s s-Atom\">predecessor</span>\n  <span class=\"nf\">cfg_edge</span><span class=\"p\">(</span><span class=\"nv\">N1</span><span class=\"p\">,</span> <span class=\"nv\">N2</span><span class=\"p\">),</span>\n  <span class=\"nf\">loan_in_origin</span><span class=\"p\">(</span><span class=\"nv\">L</span><span class=\"p\">,</span> <span class=\"nv\">O</span><span class=\"p\">,</span> <span class=\"nv\">N1</span><span class=\"p\">),</span>\n  <span class=\"p\">!</span><span class=\"nf\">loan_killed</span><span class=\"p\">(</span><span class=\"nv\">L</span><span class=\"p\">,</span> <span class=\"nv\">N1</span><span class=\"p\">),</span>\n  <span class=\"p\">!</span><span class=\"nf\">loan_invalidated</span><span class=\"p\">(</span><span class=\"nv\">L</span><span class=\"p\">,</span> <span class=\"nv\">N1</span><span class=\"p\">).</span>\n</code></pre></div>\n<p>and this one for <code>origin_invalidated</code></p>\n<div class=\"codehilite\" data-code-language=\"Prolog\"><pre><span></span><code><span class=\"nf\">origin_invalidated</span><span class=\"p\">(</span><span class=\"nv\">O</span><span class=\"p\">,</span> <span class=\"nv\">N2</span><span class=\"p\">)</span> <span class=\"p\">:-</span> <span class=\"o\">//</span> <span class=\"nv\">Introduced</span> <span class=\"s s-Atom\">by</span> <span class=\"s s-Atom\">predecessor</span>\n  <span class=\"nf\">cfg_edge</span><span class=\"p\">(</span><span class=\"nv\">N1</span><span class=\"p\">,</span> <span class=\"nv\">N2</span><span class=\"p\">),</span>\n  <span class=\"nf\">loan_in_origin</span><span class=\"p\">(</span><span class=\"nv\">L</span><span class=\"p\">,</span> <span class=\"nv\">O</span><span class=\"p\">,</span> <span class=\"nv\">N1</span><span class=\"p\">),</span>\n  <span class=\"nf\">loan_invalidated</span><span class=\"p\">(</span><span class=\"nv\">L</span><span class=\"p\">,</span> <span class=\"nv\">N1</span><span class=\"p\">).</span>\n</code></pre></div>\n<p>It looks a bit funny to remove invalidated loans from origins, but then to use <code>loan_in_origin</code> to compute <code>origin_invalidated</code>. I think what makes this work is the fact that the loan will no longer be in the origin at N2 (the successor) but it <em>will</em> be at N1, which is when we record the error. Is this the right intuition?</p>",
        "id": 250963164,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1630084335
    },
    {
        "content": "<p>(actually liveness uses the same terminology; <code>p</code> is considered killed on that node, so it is not live in prior nodes...)</p>",
        "id": 250963182,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630084346
    },
    {
        "content": "<p>Also couldn't <code>p</code> be live still since I could use it still after the <code>x += 10</code>?</p>",
        "id": 250963219,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1630084362
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/purely.20forward.20propagation/near/250963100\">said</a>:</p>\n<blockquote>\n<p>but I think that using this concept of \"killing\" is better</p>\n</blockquote>\n<p>This is \"killing\" as in <code>loan_killed_at</code> right? This clicks for me, since liveness and <code>loan_killed_at</code> seemed to be fulfilling a very similar role.</p>",
        "id": 250963324,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1630084417
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"118594\">@Dylan MacKenzie (ecstatic-morse)</span> yes. I'm not sure if I have that right, now that you mention it, in that I think it would be best if an origin <em>either</em> contains loans <em>or</em> is invalidated</p>",
        "id": 250963331,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630084419
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"118594\">Dylan MacKenzie (ecstatic-morse)</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/purely.20forward.20propagation/near/250963324\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/purely.20forward.20propagation/near/250963100\">said</a>:</p>\n<blockquote>\n<p>but I think that using this concept of \"killing\" is better</p>\n</blockquote>\n<p>This is \"killing\" as in <code>loan_killed_at</code> right? This clicks for me, since liveness and <code>loan_killed_at</code> seemed to be fulfilling a very similar role.</p>\n</blockquote>\n<p>correct</p>",
        "id": 250963372,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630084439
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"337115\">Domenic Quirl</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/purely.20forward.20propagation/near/250963219\">said</a>:</p>\n<blockquote>\n<p>Also couldn't <code>p</code> be live still since I could use it still after the <code>x += 10</code>?</p>\n</blockquote>\n<p><code>p</code> is dead on entry to <code>p = &amp;y</code> but (potentially) live on exit</p>",
        "id": 250963453,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630084462
    },
    {
        "content": "<p>i.e., it would be live if it is used again later</p>",
        "id": 250963468,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630084470
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/purely.20forward.20propagation/near/250963331\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"118594\">Dylan MacKenzie (ecstatic-morse)</span> yes. I'm not sure if I have that right, now that you mention it, in that I think it would be best if an origin <em>either</em> contains loans <em>or</em> is invalidated</p>\n</blockquote>\n<p>but I don't think it's <em>harmful</em> as is</p>",
        "id": 250963610,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630084543
    },
    {
        "content": "<p>just...noisy</p>",
        "id": 250963615,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630084545
    },
    {
        "content": "<p>it might be nicer to compute \"invalidated loans on exit\"</p>",
        "id": 250963638,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630084555
    },
    {
        "content": "<p>but that I guess requires negative rules</p>",
        "id": 250963711,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630084572
    },
    {
        "content": "<p>yeah... I don't want to go there</p>",
        "id": 250963723,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630084580
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"118594\">Dylan MacKenzie (ecstatic-morse)</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/purely.20forward.20propagation/near/250958209\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">22</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">44</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// `x` points at `p`</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// Loan L0, `y` points at `p` too</span>\n<span class=\"c1\">// ...</span>\n<span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// `x` points at `q`; kills L0</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>let me work this example</p>",
        "id": 250964059,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630084719
    },
    {
        "content": "<p>(mind if I match the remaining relation names in the graphs?)</p>",
        "id": 250964304,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1630084818
    },
    {
        "content": "<p>nope</p>",
        "id": 250964319,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630084826
    },
    {
        "content": "<p>I put a &lt;hr&gt; in at a certain point where I wanted to go back over them</p>",
        "id": 250964350,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630084840
    },
    {
        "content": "<p>because I'm not sure they're consistent. :)</p>",
        "id": 250964361,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630084844
    },
    {
        "content": "<p>Is \"overwritten\" or \"redirected\" a better name than \"killed\"? The fact that liveness uses \"kill\" for variables that are no longer live is unfortunate. \"overwrite\" is a bit less visceral though.</p>",
        "id": 250964609,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1630084945
    },
    {
        "content": "<p>heh</p>",
        "id": 250964658,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630084968
    },
    {
        "content": "<p>I considered \"overwrite\" but it doesn't <em>obviously</em> say kill to me</p>",
        "id": 250964674,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630084975
    },
    {
        "content": "<p>in fact it kind of sounds like invalidate?</p>",
        "id": 250964686,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630084979
    },
    {
        "content": "<p>redirect is not bad</p>",
        "id": 250964701,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630084985
    },
    {
        "content": "<p>inapplicable is not a verb</p>",
        "id": 250964720,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630084993
    },
    {
        "content": "<p><code>inapplicate_loan</code> :)</p>",
        "id": 250964740,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630085002
    },
    {
        "content": "<p>I like <code>redirect_</code>, shall we try that?</p>",
        "id": 250964775,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630085015
    },
    {
        "content": "<p>it sounds like we're going to <em>redirect the loan from X to Y</em></p>",
        "id": 250964800,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630085028
    },
    {
        "content": "<p>where we really mean \"the path of this loan has been redirected\" or something</p>",
        "id": 250964813,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630085037
    },
    {
        "content": "<p>There's \"obviate\" I guess but that's pretty unfriendly to non-native speakers</p>",
        "id": 250964964,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1630085099
    },
    {
        "content": "<p>oooh</p>",
        "id": 250964969,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630085103
    },
    {
        "content": "<p>it's more like the target of the loan no longer matches its path</p>",
        "id": 250964971,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1630085104
    },
    {
        "content": "<p>I like obviate</p>",
        "id": 250964986,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630085109
    },
    {
        "content": "<p>Whatever helps you think about stuff.</p>",
        "id": 250964990,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1630085111
    },
    {
        "content": "<p>it's just a word I am fond of :)</p>",
        "id": 250965006,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630085119
    },
    {
        "content": "<p>well</p>",
        "id": 250965141,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630085174
    },
    {
        "content": "<p>it's more pedestrian but</p>",
        "id": 250965153,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630085180
    },
    {
        "content": "<p><code>remove_</code> ?</p>",
        "id": 250965159,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630085183
    },
    {
        "content": "<p>it's ... like literally what we do :)</p>",
        "id": 250965184,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630085194
    },
    {
        "content": "<p>\"we remove this loan from all origins\"</p>",
        "id": 250965195,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630085199
    },
    {
        "content": "<p>/vote What should we call the kill relations?</p>",
        "id": 250965296,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630085248
    },
    {
        "content": "<p>Is the difference between \"remove\" and \"invalidate\" clear?</p>",
        "id": 250965303,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1630085251
    },
    {
        "content": "<p>/poll What should we call the kill relations?</p>",
        "id": 250965323,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630085257
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"118594\">Dylan MacKenzie (ecstatic-morse)</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/purely.20forward.20propagation/near/250965303\">said</a>:</p>\n<blockquote>\n<p>Is the difference between \"remove\" and \"invalidate\" clear?</p>\n</blockquote>\n<p>I don't know...</p>",
        "id": 250965383,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630085279
    },
    {
        "content": "<p>That would be my only concern.</p>",
        "id": 250965437,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1630085285
    },
    {
        "content": "<p>it at least sounds different</p>",
        "id": 250965442,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630085286
    },
    {
        "content": "<p>another option:</p>",
        "id": 250965487,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630085302
    },
    {
        "content": "<p><code>ignore_</code></p>",
        "id": 250965499,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630085305
    },
    {
        "content": "<p>added a few more options to my poll :)</p>",
        "id": 250965528,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630085323
    },
    {
        "content": "<p><code>forget_</code></p>",
        "id": 250965533,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630085326
    },
    {
        "content": "<p>forget is unterrible</p>",
        "id": 250965548,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630085336
    },
    {
        "content": "<p>I like forget actually</p>",
        "id": 250965581,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1630085353
    },
    {
        "content": "<p>maybe people think of <code>std::mem::forget</code> :)</p>",
        "id": 250965583,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630085355
    },
    {
        "content": "<p>but hopefully not</p>",
        "id": 250965588,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630085357
    },
    {
        "content": "<p>This is confusing me again</p>",
        "id": 250965617,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1630085379
    },
    {
        "content": "<p>I get that \"killed\" loans are in a way independent of their path</p>",
        "id": 250965726,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1630085418
    },
    {
        "content": "<p>but surely they still have implications</p>",
        "id": 250965735,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1630085426
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"118594\">Dylan MacKenzie (ecstatic-morse)</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/purely.20forward.20propagation/near/250965581\">said</a>:</p>\n<blockquote>\n<p>I like forget actually</p>\n</blockquote>\n<p>(me too)</p>",
        "id": 250965739,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630085429
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"337115\">Domenic Quirl</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/purely.20forward.20propagation/near/250965735\">said</a>:</p>\n<blockquote>\n<p>but surely they still have implications</p>\n</blockquote>\n<p>at present, not really</p>",
        "id": 250965783,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630085450
    },
    {
        "content": "<p>that said</p>",
        "id": 250965793,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630085453
    },
    {
        "content": "<p>depending on how we wind up handling placeholder errors</p>",
        "id": 250965813,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630085461
    },
    {
        "content": "<p>I could see \"empty set\" being misinterpreted as <code>'static</code> at some point</p>",
        "id": 250965832,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630085467
    },
    {
        "content": "<p>but I would manage that by changing how \"forget\" works somehow</p>",
        "id": 250965878,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630085490
    },
    {
        "content": "<p>e.g., introducing a loan for the scope</p>",
        "id": 250965904,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630085499
    },
    {
        "content": "<p>actually forget would probably stay unchanged</p>",
        "id": 250965918,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630085505
    },
    {
        "content": "<p>but we would have a loan representing the underlying stack slow or something</p>",
        "id": 250965942,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630085512
    },
    {
        "content": "<p>that is invalidated when it is popped</p>",
        "id": 250965952,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630085518
    },
    {
        "content": "<p>what if I have</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">22</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">44</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">p</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">u32</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">q</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">u32</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;*</span><span class=\"n\">p</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">y</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">23</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"fm\">dbg!</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 250966059,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1630085551
    },
    {
        "content": "<p>the trick here is that the origin for <code>q</code> contains (initially) two loans</p>",
        "id": 250966149,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630085585
    },
    {
        "content": "<p>one for <code>*p</code> and one for <code>x</code></p>",
        "id": 250966157,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630085589
    },
    {
        "content": "<p>so we forget the one for <code>*p</code> but not the other</p>",
        "id": 250966171,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630085595
    },
    {
        "content": "<p>well, _that_ cleared up a lot of my confusion <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 250966312,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1630085657
    },
    {
        "content": "<p>in that case that loan is just no longer necessary <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 250966449,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1630085726
    },
    {
        "content": "<p>interesting</p>",
        "id": 250966596,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630085780
    },
    {
        "content": "<p>in some sense the loan refers <em>only to</em></p>",
        "id": 250966610,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630085786
    },
    {
        "content": "<p>the memory owned by that location</p>",
        "id": 250966620,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630085791
    },
    {
        "content": "<p><code>resolve</code></p>",
        "id": 250966700,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1630085837
    },
    {
        "content": "<p><code>filter_out</code></p>",
        "id": 250966706,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1630085840
    },
    {
        "content": "<p><code>clear</code></p>",
        "id": 250966725,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1630085850
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> How does this formulation handle when a variable gets overwritten?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">22</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">44</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">p</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// Loan L0</span>\n<span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// Loan L1</span>\n<span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\">   </span><span class=\"c1\">// invalidates(L0)</span>\n<span class=\"n\">print</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">p</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>This is the canonical liveness example.</p>",
        "id": 250966834,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1630085895
    },
    {
        "content": "<p>(one sec)</p>",
        "id": 250967277,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630086099
    },
    {
        "content": "<p>Also, are you interested in me using the souffle branch to prototype this? The thought of serializing data to and from a Lisp makes me nervous.</p>",
        "id": 250967490,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1630086185
    },
    {
        "content": "<p>lol</p>",
        "id": 250967523,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630086202
    },
    {
        "content": "<p>I was joking about racket, although they do have a datalog mode that (gasp!) doesn't use s-expressions</p>",
        "id": 250967550,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630086214
    },
    {
        "content": "<p>soufle is fine</p>",
        "id": 250967554,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630086216
    },
    {
        "content": "<p>racket datalog is super cool</p>",
        "id": 250967563,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1630086219
    },
    {
        "content": "<p>/me whispers <span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> is gone so we don't have to spell Soufflé right anymore</p>",
        "id": 250967694,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1630086258
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> is active on zulip though.</p>",
        "id": 250967828,
        "sender_full_name": "bjorn3",
        "timestamp": 1630086317
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/purely.20forward.20propagation/near/250967554\">said</a>:</p>\n<blockquote>\n<p>soufle is fine</p>\n</blockquote>\n<p>Okay. I'll keep working on that.</p>",
        "id": 250967971,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1630086368
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/purely.20forward.20propagation/near/250967828\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> is active on zulip though.</p>\n</blockquote>\n<p>(They mentioned they were going AFK for the moment)</p>",
        "id": 250968030,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1630086402
    },
    {
        "content": "<p>ok, sorry, back</p>",
        "id": 250968060,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630086417
    },
    {
        "content": "<p>uh <span class=\"user-mention\" data-user-id=\"118594\">@Dylan MacKenzie (ecstatic-morse)</span> I was working out a different example, but I can switch to that one :)</p>",
        "id": 250968083,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630086429
    },
    {
        "content": "<p>quickly though:</p>",
        "id": 250968140,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630086463
    },
    {
        "content": "<p>what I expect to happen here is</p>",
        "id": 250968257,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630086495
    },
    {
        "content": "<p>with <code>p = &amp;y</code>, we will have a <code>forget_origin('0)</code> fact</p>",
        "id": 250968308,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630086520
    },
    {
        "content": "<p>ps:</p>",
        "id": 250968336,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630086532
    },
    {
        "content": "<p><a href=\"https://hackmd.io/KpK0ICQOQLSPxIcNIlhkJQ#Assumptions-about-ordering\">https://hackmd.io/KpK0ICQOQLSPxIcNIlhkJQ#Assumptions-about-ordering</a></p>",
        "id": 250968340,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630086532
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"337115\">Domenic Quirl</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/purely.20forward.20propagation/near/250966706\">said</a>:</p>\n<blockquote>\n<p><code>filter_out</code></p>\n</blockquote>\n<p>I kind of like this btw</p>",
        "id": 250968432,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630086575
    },
    {
        "content": "<p>though it's two words</p>",
        "id": 250968444,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630086583
    },
    {
        "content": "<p>but I guess I can live with that</p>",
        "id": 250968453,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630086585
    },
    {
        "content": "<p>either forget or \"filter out\" seems best</p>",
        "id": 250968487,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630086603
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/purely.20forward.20propagation/near/250968308\">said</a>:</p>\n<blockquote>\n<p>with <code>p = &amp;y</code>, we will have a <code>forget_origin('0)</code> fact</p>\n</blockquote>\n<p>anyway, this means that we will still have \"origin_contains_loan\" facts for <code>'1</code> but not for <code>'0</code>, there will no relations around that</p>",
        "id": 250968596,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630086640
    },
    {
        "content": "<p>we'll then introduce <code>'3 &lt;= '0</code></p>",
        "id": 250968616,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630086650
    },
    {
        "content": "<p>so when you get <code>x += 1</code>, the <code>'1</code> would be \"invalidated\"</p>",
        "id": 250968661,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630086666
    },
    {
        "content": "<p>but who cares</p>",
        "id": 250968666,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630086669
    },
    {
        "content": "<p>we could probably add some \"forget\" facts for <code>'1</code> too</p>",
        "id": 250968679,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630086675
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">22</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">44</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">p</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// Loan L0</span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">p_copy</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// Loan L1</span>\n<span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\">   </span><span class=\"c1\">// invalidates(L0)</span>\n<span class=\"n\">print</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">p</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"n\">print</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">p_copy</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>And that still works if we take a copy of <code>p</code> in between?</p>",
        "id": 250968688,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1630086679
    },
    {
        "content": "<p>just to clean up the things that propagate</p>",
        "id": 250968692,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630086680
    },
    {
        "content": "<p><code>p_copy</code> would contain L0 here, but <code>p = &amp;y</code> forgets L0</p>",
        "id": 250968853,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1630086737
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"118594\">Dylan MacKenzie (ecstatic-morse)</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/purely.20forward.20propagation/near/250968688\">said</a>:</p>\n<blockquote>\n<p>And that still works if we take a copy of <code>p</code> in between?</p>\n</blockquote>\n<p>in this case, the type of <code>p_copy</code> will have distinct origins from the type of <code>p</code></p>",
        "id": 250968856,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630086738
    },
    {
        "content": "<p>those origins are not forgotten</p>",
        "id": 250968871,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630086742
    },
    {
        "content": "<p>it's only valid to <em>forget</em> an origin if you overwrite <em>all things that reference it</em></p>",
        "id": 250968928,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630086765
    },
    {
        "content": "<p>so either <code>p_copy</code> has to have different origins (which is what rustc would do) or we ought not to forget it here (which loses precision)</p>",
        "id": 250968956,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630086777
    },
    {
        "content": "<p>I think I like forget. one word ftw.</p>",
        "id": 250969012,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630086803
    },
    {
        "content": "<p><code>forget_origin('0)</code> into <code>'3 &lt;= '0</code> feels confusing to me</p>",
        "id": 250969287,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1630086910
    },
    {
        "content": "<p>what do you mean by \"into '3 &lt;= '0\"?</p>",
        "id": 250969452,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630086973
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/purely.20forward.20propagation/near/250968616\">said</a>:</p>\n<blockquote>\n<p>we'll then introduce <code>'3 &lt;= '0</code></p>\n</blockquote>\n<p>this was what I was referring to with \"into\"</p>",
        "id": 250969511,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1630087003
    },
    {
        "content": "<p>where first you \"forget\" the origin, but then we continue to use it</p>",
        "id": 250969583,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1630087038
    },
    {
        "content": "<p>I see</p>",
        "id": 250969595,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630087043
    },
    {
        "content": "<p>like, terminology wise it's confusing?</p>",
        "id": 250969599,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630087048
    },
    {
        "content": "<p>yeah</p>",
        "id": 250969617,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1630087054
    },
    {
        "content": "<p>it's really like \"forget all previous associations with '0\"</p>",
        "id": 250969627,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630087060
    },
    {
        "content": "<p>maybe <code>freshen</code> ?</p>",
        "id": 250969642,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630087068
    },
    {
        "content": "<p>I would expect \"forget\" to imply that the origin is gone/irrelevant</p>",
        "id": 250969653,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1630087072
    },
    {
        "content": "<p>(I liked <code>clear</code>, but I've already voted that)</p>",
        "id": 250969769,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1630087104
    },
    {
        "content": "<p>I see your point</p>",
        "id": 250969787,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630087112
    },
    {
        "content": "<p>clear is good too</p>",
        "id": 250969797,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630087116
    },
    {
        "content": "<p>it's familiar from places like <code>vec.clear()</code>, after which the vec still exists, but is empty</p>",
        "id": 250969906,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1630087170
    },
    {
        "content": "<p>ok, let's do \"clear\"</p>",
        "id": 250969964,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630087199
    },
    {
        "content": "<p>whereas you've previously mentioned <code>mem::forget</code> associations with \"forget\"</p>",
        "id": 250970094,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1630087226
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/purely.20forward.20propagation/near/250969964\">said</a>:</p>\n<blockquote>\n<p>ok, let's do \"clear\"</p>\n</blockquote>\n<p><em>happy noises</em></p>",
        "id": 250970146,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1630087243
    },
    {
        "content": "<p>I have to join a call now</p>",
        "id": 250970193,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630087261
    },
    {
        "content": "<p>if others want to try and bring the doc into sync, that's fine with me, else I'll poke at it later</p>",
        "id": 250970230,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630087275
    },
    {
        "content": "<p>but I feel like it's...starting to make sense</p>",
        "id": 250970242,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630087279
    },
    {
        "content": "<p>I'm not totally happy with the little \"temporary origin\" we do for a borrow expression</p>",
        "id": 250970321,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630087315
    },
    {
        "content": "<p>it's just kind of annoying</p>",
        "id": 250970327,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630087319
    },
    {
        "content": "<p>but it's a minor thing</p>",
        "id": 250970381,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630087326
    },
    {
        "content": "<p>Okay, yeah we're at four hours, so I have to go.</p>",
        "id": 250970539,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1630087422
    },
    {
        "content": "<p>I'll do the remaining <code>kill_</code>s in the doc before I leave</p>",
        "id": 250970580,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1630087442
    },
    {
        "content": "<p>An interesting question is if any / which of the inputs is \"new\" or needs to be computed additionally to the main analysis</p>",
        "id": 250970718,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1630087505
    },
    {
        "content": "<p>I think <code>clear_origin</code> for sure right?</p>",
        "id": 250970914,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1630087595
    },
    {
        "content": "<p>Sure seems like it to me</p>",
        "id": 250970953,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1630087617
    },
    {
        "content": "<p>Though I'm guessing it's something that could be computed from other info we do have?</p>",
        "id": 250971003,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1630087646
    },
    {
        "content": "<p>Or maybe not if it happens on assignments <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 250971227,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1630087743
    },
    {
        "content": "<p>I don't think so. We don't have the \"all\" part anywhere. </p>\n<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> when you have a minute we need some clarity on how to generate <code>clear_origin</code>.</p>",
        "id": 250971340,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1630087803
    },
    {
        "content": "<p><code>access</code> would use  the info that liveness has, I guess?</p>",
        "id": 250972737,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1630088397
    },
    {
        "content": "<p>I'll write up some notes on generating the facts, but I want to work through the examples a bit more first</p>",
        "id": 250984141,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630093022
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"118594\">@Dylan MacKenzie (ecstatic-morse)</span> the soufflé joke was <em>chef’s kiss</em></p>",
        "id": 250989008,
        "sender_full_name": "lqd",
        "timestamp": 1630095205
    },
    {
        "content": "<p>(reading the backscroll and the hackmd, this all sounds super cool, great work y’all. I’ll need to study this in depth to help out)</p>",
        "id": 250989546,
        "sender_full_name": "lqd",
        "timestamp": 1630095482
    },
    {
        "content": "<p>overall it still looks pretty similar to our current setup, which I guess is expected. </p>\n<p>additionally propagating invalidated origins may be a bit heavier than what we do now (though I guess maybe we could only check the accessed origins’ parents for invalidated ones?) but this would also benefit if done on blocks/SCCs. </p>\n<p>hopefully removing the dependency on liveness is a big enough win by allowing the rules to be integrated elsewhere (say, in chalk). </p>\n<p>I’d need to study this more but maybe it would also allow to more easily remove our uses of loans altogether (and a TC + a propagation or two). (this may be a foolish idea/endeavor)</p>",
        "id": 251006453,
        "sender_full_name": "lqd",
        "timestamp": 1630104724
    },
    {
        "content": "<blockquote>\n<p>I’d need to study this more but maybe it would also allow to more easily remove our uses of loans altogether (and a TC + a propagation or two). (this may be a foolish idea/endeavor)</p>\n</blockquote>\n<p>I was thinking this as well, which suggests that it may indeed be foolish <span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span></p>",
        "id": 251006905,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1630105039
    },
    {
        "content": "<p>I think I slightly mentioned this in passing in the list of topics from last time, but it’s been on my mind since niko’s old \"subset relation considered harmful\" thread, and it seems intuitive it could be \"origin_contains_loan relation considered harmful\" by hand waving the (possibly flawed) idea that everything you can currently do with a loan you can do with that loan’s introducing origin</p>",
        "id": 251007525,
        "sender_full_name": "lqd",
        "timestamp": 1630105474
    },
    {
        "content": "<blockquote>\n<p>I was thinking this as well, which suggests that it may indeed be foolish <span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span></p>\n</blockquote>\n<p>I’ll answer this with this great american saying: \"au contraire, mon frère\"</p>",
        "id": 251007780,
        "sender_full_name": "lqd",
        "timestamp": 1630105674
    },
    {
        "content": "<p>I'm not sure if I understand what you all mean by \"removing our use of loans altogether\"</p>",
        "id": 251008552,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630106262
    },
    {
        "content": "<p>but removing a TC is always good :)</p>",
        "id": 251008556,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630106268
    },
    {
        "content": "<p>I'm going to go over the doc now</p>",
        "id": 251008563,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630106274
    },
    {
        "content": "<p>and try to bring it in a consistent state</p>",
        "id": 251008570,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630106278
    },
    {
        "content": "<p>Unifying loans and origins came up while I was looking into the SSA thing. When subset relations for a given origin are frozen, checking for loan invalidation is just reachability in the subset graph. You don't need to have a separate class of lifetimes (loans) whose membership in origins are tracked across the CFG</p>",
        "id": 251008692,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1630106356
    },
    {
        "content": "<p>Obviously that involves creating many more origins, so it's not obviously more efficient, and there were other problems around killed loans</p>",
        "id": 251008808,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1630106425
    },
    {
        "content": "<p>loans and their containment are in my mind just materialization of a path through the subset graph from the introducing origin to a containing origin at a given point</p>",
        "id": 251008910,
        "sender_full_name": "lqd",
        "timestamp": 1630106499
    },
    {
        "content": "<p>(in the narrow context of \"loan analysis\" of course, not the path/place + mode concept in general)</p>",
        "id": 251009141,
        "sender_full_name": "lqd",
        "timestamp": 1630106662
    },
    {
        "content": "<p>hmmm so</p>",
        "id": 251010096,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630107436
    },
    {
        "content": "<p>I have no idea what you all just wrote</p>",
        "id": 251010105,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630107448
    },
    {
        "content": "<p><em>however</em></p>",
        "id": 251010109,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630107451
    },
    {
        "content": "<p>I think what <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> wrote is what I was just thinking :)</p>",
        "id": 251010126,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630107468
    },
    {
        "content": "<p><span aria-label=\"crystal ball\" class=\"emoji emoji-1f52e\" role=\"img\" title=\"crystal ball\">:crystal_ball:</span></p>",
        "id": 251010175,
        "sender_full_name": "lqd",
        "timestamp": 1630107484
    },
    {
        "content": "<p>which is that, right now, we have <code>&amp;'a &lt;place&gt;</code> and that creates a loan that is associated with <code>'a</code></p>",
        "id": 251010180,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630107490
    },
    {
        "content": "<p>but maybe we just need the <code>'a</code>?</p>",
        "id": 251010186,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630107494
    },
    {
        "content": "<p>i.e., it's a kind of \"special origin\" that we know to be associated with the borrow so to speak?</p>",
        "id": 251010205,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630107511
    },
    {
        "content": "<p>and we can invalidate said origins, and anything that is a subset of them?</p>",
        "id": 251010217,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630107524
    },
    {
        "content": "<p>it seems at least possible that it could work :)</p>",
        "id": 251010251,
        "sender_full_name": "lqd",
        "timestamp": 1630107559
    },
    {
        "content": "<p>that’s what we seem to be all thinking indeed !</p>",
        "id": 251010342,
        "sender_full_name": "lqd",
        "timestamp": 1630107618
    },
    {
        "content": "<p>....hmmm....</p>",
        "id": 251010371,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630107652
    },
    {
        "content": "<p>yeah it seems like it should work :)</p>",
        "id": 251010375,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630107655
    },
    {
        "content": "<p>also omg working these examples through by hand is sort of painful</p>",
        "id": 251010397,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630107674
    },
    {
        "content": "<p>I am wondering about Dr Racket :)</p>",
        "id": 251010413,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630107688
    },
    {
        "content": "<p>or perhaps soufflé</p>",
        "id": 251010421,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630107699
    },
    {
        "content": "<p>Yes. I think it depends on what exactly you have in mind for <code>clear_origin</code>. Propagating \"loans\" is necessary when there's a path from an invalidated borrow to a live region, but the components of that path aren't all \"live\" at a single point in the CFG</p>",
        "id": 251010496,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1630107741
    },
    {
        "content": "<p>well</p>",
        "id": 251010537,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630107787
    },
    {
        "content": "<p>is it?</p>",
        "id": 251010541,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630107790
    },
    {
        "content": "<p>Using our existing definitions of loans and liveness</p>",
        "id": 251010550,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1630107798
    },
    {
        "content": "<p>what I had in mind for <code>clear_origin</code> was simple: when you write to a place, you take the type of that place, and you \"clear origin\" for every origin appearing in that type</p>",
        "id": 251010562,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630107810
    },
    {
        "content": "<p>(presuming they only appear there)</p>",
        "id": 251010565,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630107814
    },
    {
        "content": "<p>I imagine though that the \"loan region\" associated with the borrow will take the place of the loan just fine</p>",
        "id": 251010609,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630107843
    },
    {
        "content": "<p>it would never be <del>killed</del> cleared</p>",
        "id": 251010626,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630107849
    },
    {
        "content": "<p>because it doesn't appear in the type of any place that can be assigned to</p>",
        "id": 251010634,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630107860
    },
    {
        "content": "<p>/me tries to think of an interesting example</p>",
        "id": 251010793,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1630108027
    },
    {
        "content": "<p>(yeah, the old borrow_region now \"issuing origin\" (AKA \"introducing origin\" in my location-insensitive reachability formulation, and now also this hackmd’s since it mentions loans being introduced in origins))</p>",
        "id": 251010868,
        "sender_full_name": "lqd",
        "timestamp": 1630108085
    },
    {
        "content": "<p>I guess I better brush off my soufflé</p>",
        "id": 251010903,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630108132
    },
    {
        "content": "<p>it appears that racket's datalog doesn't have negative clauses?</p>",
        "id": 251010909,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630108141
    },
    {
        "content": "<p><a href=\"https://docs.racket-lang.org/datalog/datalog.html\">https://docs.racket-lang.org/datalog/datalog.html</a></p>",
        "id": 251010910,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630108141
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>N1 :- -(N, 1),\n</code></pre></div>",
        "id": 251010923,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630108154
    },
    {
        "content": "<p>maybe that's what this is?</p>",
        "id": 251010941,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630108174
    },
    {
        "content": "<p>maybe with the tilde</p>",
        "id": 251010953,
        "sender_full_name": "lqd",
        "timestamp": 1630108196
    },
    {
        "content": "<p>doesn't seem to like it</p>",
        "id": 251011003,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630108209
    },
    {
        "content": "<p>I should really install souffle</p>",
        "id": 251011009,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630108211
    },
    {
        "content": "<p>Hmm that's unfortunate</p>",
        "id": 251011084,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1630108274
    },
    {
        "content": "<p>we should debug Dylan’s prototype and use that</p>",
        "id": 251011088,
        "sender_full_name": "lqd",
        "timestamp": 1630108282
    },
    {
        "content": "<p>unfortunately <a href=\"https://souffle-lang.github.io/install\">https://souffle-lang.github.io/install</a> doesn't work for me on debian</p>",
        "id": 251011118,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630108316
    },
    {
        "content": "<p>maybe I'm running some old debian or something</p>",
        "id": 251011183,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630108340
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/purely.20forward.20propagation/near/251011088\">said</a>:</p>\n<blockquote>\n<p>we should debug Dylan’s prototype and use that</p>\n</blockquote>\n<p>you mean the prototype souffle integration?</p>",
        "id": 251011199,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630108354
    },
    {
        "content": "<p>Well you can prototype with just the <code>souffle</code> binary. Running the test suite will be easier with integration, however.</p>",
        "id": 251011212,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1630108368
    },
    {
        "content": "<p>yeah, but that prototype integration will surely require installing soufflé as well, and if that doesn’t work :/</p>",
        "id": 251011257,
        "sender_full_name": "lqd",
        "timestamp": 1630108412
    },
    {
        "content": "<p>I'm on fedora and built from source FWIW</p>",
        "id": 251011262,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1630108417
    },
    {
        "content": "<p>I'm building from source</p>",
        "id": 251011342,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630108463
    },
    {
        "content": "<p>it’s going to be apparent when you try the hackmd’s rules but a couple of initializations of the static inputs are likely missing, e.g. loan_in_origin(L, O, N1) :- introduce_loan(L, O, N1).</p>",
        "id": 251011552,
        "sender_full_name": "lqd",
        "timestamp": 1630108657
    },
    {
        "content": "<p>heh, ok, I can't build from source either</p>",
        "id": 251011675,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630108744
    },
    {
        "content": "<p>I have to upgrade whatever ancient debian I am running I think</p>",
        "id": 251011691,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630108753
    },
    {
        "content": "<p>I'm going to pack it in for the night and poke at this tomorrow :)</p>",
        "id": 251011698,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630108758
    },
    {
        "content": "<p>They have a container as well, if worst comes to worst</p>",
        "id": 251011730,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1630108794
    },
    {
        "content": "<p>they need a web playground</p>",
        "id": 251011835,
        "sender_full_name": "lqd",
        "timestamp": 1630108821
    },
    {
        "content": "<p>Here's my belated example, where I think you need something like loans, for posterity</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">x</span> <span class=\"kt\">u32</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">foo</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">y</span> <span class=\"kt\">u32</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// 'y &lt;: 'x</span>\n\n<span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"mi\">42</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// clears 'x</span>\n<span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">142</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// invalidates foo, which is still present in `y`</span>\n\n<span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 251012044,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1630108991
    },
    {
        "content": "<p>I’ll go sleep as well, thanks for the great conversations today y’all, it’s been a pleasure as always!</p>",
        "id": 251012126,
        "sender_full_name": "lqd",
        "timestamp": 1630109057
    },
    {
        "content": "<p><code>x</code> is cleared and/or becomes dead, so there's no chain from the borrow of <code>foo</code> to <code>y</code> where all the components are \"live\" or \"not cleared\" at a single point in the CFG.</p>\n<p>So I'm interested to see how the new formulation handles that, but also not interested in making Niko compute it by hand.</p>\n<p><strong>edit</strong> Actually maybe you need an extra intermediary between <code>x</code> and <code>y</code> for the above to be true.</p>",
        "id": 251012271,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1630109194
    },
    {
        "content": "<p>I did manage to install souffle :)</p>",
        "id": 251066053,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630167579
    },
    {
        "content": "<p>I take it the exploration is going to take place here <a href=\"https://github.com/nikomatsakis/polonius.next\">https://github.com/nikomatsakis/polonius.next</a></p>",
        "id": 251070013,
        "sender_full_name": "lqd",
        "timestamp": 1630171656
    },
    {
        "content": "<p>let us know how we can help !</p>",
        "id": 251070690,
        "sender_full_name": "lqd",
        "timestamp": 1630172331
    },
    {
        "content": "<p><a href=\"https://github.com/nikomatsakis/polonius.next\">https://github.com/nikomatsakis/polonius.next</a></p>",
        "id": 251070691,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630172331
    },
    {
        "content": "<p>well, I just transcribed the rules</p>",
        "id": 251070694,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630172336
    },
    {
        "content": "<p>have to take a break now, I was going to try and create a test input and see if ... it actually works</p>",
        "id": 251070699,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630172345
    },
    {
        "content": "<p>I'm now feeling like 99.9% sure we could just get rid of loans and have \"special\" origins instead</p>",
        "id": 251070707,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630172354
    },
    {
        "content": "<p>but I figured I'd transcribe it as described first</p>",
        "id": 251070711,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630172363
    },
    {
        "content": "<p>maybe I forgot a rule in there? not sure :)</p>",
        "id": 251070719,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630172372
    },
    {
        "content": "<p>feel free to clone and play around with it</p>",
        "id": 251070724,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630172379
    },
    {
        "content": "<p>(I fixed one in the hackmd after you transcribed them; I'll open a PR)</p>",
        "id": 251070797,
        "sender_full_name": "lqd",
        "timestamp": 1630172421
    },
    {
        "content": "<p>when you say \"special\" origin, do you mean it would be different from the one where the loan is introduced ? (I was expecting the introducing origin to be it)</p>",
        "id": 251070962,
        "sender_full_name": "lqd",
        "timestamp": 1630172613
    },
    {
        "content": "<p>that's the one I had in mind</p>",
        "id": 251071185,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630172845
    },
    {
        "content": "<p>I just mean that this origin plays a special roel</p>",
        "id": 251071188,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630172852
    },
    {
        "content": "<p>cool, I just wanted to make sure we had the same idea</p>",
        "id": 251071385,
        "sender_full_name": "lqd",
        "timestamp": 1630173009
    },
    {
        "content": "<p>tonight I'll try to create a test input from one of the hackmd examples</p>",
        "id": 251071424,
        "sender_full_name": "lqd",
        "timestamp": 1630173059
    },
    {
        "content": "<p>I have a few more minutes</p>",
        "id": 251071537,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630173158
    },
    {
        "content": "<p>(and just so you don't look for it <a href=\"https://github.com/nikomatsakis/polonius.next/blob/3ee1427d24176109188ee3db2b8683f5362617c2/src/polonius.dl#L69-L71\">https://github.com/nikomatsakis/polonius.next/blob/3ee1427d24176109188ee3db2b8683f5362617c2/src/polonius.dl#L69-L71</a> -&gt; the subset should be <code>subset(O1, O2, N),</code></p>",
        "id": 251071541,
        "sender_full_name": "lqd",
        "timestamp": 1630173161
    },
    {
        "content": "<p>I can't find like... any docs in souffle</p>",
        "id": 251071547,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630173166
    },
    {
        "content": "<p>about what format it expects :)</p>",
        "id": 251071553,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630173172
    },
    {
        "content": "<p>I guess it's a file per input relation?</p>",
        "id": 251071561,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630173177
    },
    {
        "content": "<p>yeah</p>",
        "id": 251071564,
        "sender_full_name": "lqd",
        "timestamp": 1630173181
    },
    {
        "content": "<p>much like our existing inputs IIRC</p>",
        "id": 251071574,
        "sender_full_name": "lqd",
        "timestamp": 1630173188
    },
    {
        "content": "<p>they worked directly if memory serves</p>",
        "id": 251071591,
        "sender_full_name": "lqd",
        "timestamp": 1630173208
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/purely.20forward.20propagation/near/251071541\">said</a>:</p>\n<blockquote>\n<p>(and just so you don't look for it <a href=\"https://github.com/nikomatsakis/polonius.next/blob/3ee1427d24176109188ee3db2b8683f5362617c2/src/polonius.dl#L69-L71\">https://github.com/nikomatsakis/polonius.next/blob/3ee1427d24176109188ee3db2b8683f5362617c2/src/polonius.dl#L69-L71</a> -&gt; the subset should be <code>subset(O1, O2, N),</code></p>\n</blockquote>\n<p>weird, i'm surprised that type-checked with soufflé</p>",
        "id": 251071596,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630173212
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/purely.20forward.20propagation/near/251071574\">said</a>:</p>\n<blockquote>\n<p>much like our existing inputs IIRC</p>\n</blockquote>\n<p>not, I think, a coincidence</p>",
        "id": 251071604,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630173221
    },
    {
        "content": "<p>:D</p>",
        "id": 251071616,
        "sender_full_name": "lqd",
        "timestamp": 1630173233
    },
    {
        "content": "<p>we're probably missing a couple things here and there like <code>loan_in_origin(L, O, N) :- introduce_loan(L, O, N).</code></p>",
        "id": 251071715,
        "sender_full_name": "lqd",
        "timestamp": 1630173316
    },
    {
        "content": "<p>no big deal</p>",
        "id": 251071736,
        "sender_full_name": "lqd",
        "timestamp": 1630173350
    },
    {
        "content": "<p>(btw I've been assured soufflé doesn't have requirements about case, so we could technically have our lower case names as before, and be closer to our rust/datafrog formulation; which I thought could be cute)</p>",
        "id": 251071824,
        "sender_full_name": "lqd",
        "timestamp": 1630173477
    },
    {
        "content": "<p>hmm</p>",
        "id": 251071828,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630173479
    },
    {
        "content": "<p>my first attempt to run it isn't working :)</p>",
        "id": 251071874,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630173496
    },
    {
        "content": "<p>there must be some example somewhere</p>",
        "id": 251071908,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630173563
    },
    {
        "content": "<p>are there soufflé errors or just no output ?</p>",
        "id": 251071910,
        "sender_full_name": "lqd",
        "timestamp": 1630173564
    },
    {
        "content": "<p>oh, I see, it doesn't want strings</p>",
        "id": 251071946,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630173604
    },
    {
        "content": "<p>oh really</p>",
        "id": 251071988,
        "sender_full_name": "lqd",
        "timestamp": 1630173615
    },
    {
        "content": "<p><a href=\"https://souffle-lang.github.io/simple\">https://souffle-lang.github.io/simple</a> has indeed only integers in its csv</p>",
        "id": 251072023,
        "sender_full_name": "lqd",
        "timestamp": 1630173644
    },
    {
        "content": "<p>but maybe it's just because of the relation types</p>",
        "id": 251072043,
        "sender_full_name": "lqd",
        "timestamp": 1630173671
    },
    {
        "content": "<p>hmm</p>",
        "id": 251072052,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630173687
    },
    {
        "content": "<p>I pushed what I had but it doesn't work</p>",
        "id": 251072055,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630173694
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>athena. souffle src/polonius.dl -F test/example-a/\nError loading data: Values missing in line 1; cannot parse fact file access.facts!\n\nError loading data: Values missing in line 1; cannot parse fact file invalidate_loan.facts!\n\nError loading data: Values missing in line 1; cannot parse fact file introduce_loan.facts!\n\nError loading data: Values missing in line 1; cannot parse fact file introduce_subset.facts!\n\nError loading data: Values missing in line 1; cannot parse fact file cfg_edge.facts!\n</code></pre></div>",
        "id": 251072064,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630173705
    },
    {
        "content": "<p>I'll also look at it</p>",
        "id": 251072073,
        "sender_full_name": "lqd",
        "timestamp": 1630173720
    },
    {
        "content": "<p><a href=\"https://github.com/souffle-lang/souffle/tree/master/tests/example/access-policy/facts\">https://github.com/souffle-lang/souffle/tree/master/tests/example/access-policy/facts</a></p>",
        "id": 251072114,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630173727
    },
    {
        "content": "<p><a href=\"https://github.com/souffle-lang/souffle/blob/master/tests/example/access-policy/facts/employee.facts\">https://github.com/souffle-lang/souffle/blob/master/tests/example/access-policy/facts/employee.facts</a></p>",
        "id": 251072117,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630173735
    },
    {
        "content": "<p>it's weird</p>",
        "id": 251072119,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630173737
    },
    {
        "content": "<p>maybe those aren't real tabs</p>",
        "id": 251072123,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630173740
    },
    {
        "content": "<p>maybe it's the atom types, \"Symbol\"</p>",
        "id": 251072124,
        "sender_full_name": "lqd",
        "timestamp": 1630173741
    },
    {
        "content": "<p>(that vscode is inserting)</p>",
        "id": 251072127,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630173745
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/purely.20forward.20propagation/near/251072124\">said</a>:</p>\n<blockquote>\n<p>maybe it's the atom types, \"Symbol\"</p>\n</blockquote>\n<p>I don't think so</p>",
        "id": 251072132,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630173751
    },
    {
        "content": "<p>there are like 4 choices</p>",
        "id": 251072134,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630173754
    },
    {
        "content": "<p>symbol and various numbers</p>",
        "id": 251072137,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630173761
    },
    {
        "content": "<p>interesting</p>",
        "id": 251072138,
        "sender_full_name": "lqd",
        "timestamp": 1630173764
    },
    {
        "content": "<p><a href=\"https://github.com/souffle-lang/souffle/blob/master/tests/example/access-policy/access-policy.dl#L3\">https://github.com/souffle-lang/souffle/blob/master/tests/example/access-policy/access-policy.dl#L3</a></p>",
        "id": 251072146,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630173773
    },
    {
        "content": "<p>we used to just declare them as .type X IIRC <a href=\"https://gist.github.com/lqd/88f6eb5dd75e3850d2abc1242dbcea4a\">https://gist.github.com/lqd/88f6eb5dd75e3850d2abc1242dbcea4a</a></p>",
        "id": 251072150,
        "sender_full_name": "lqd",
        "timestamp": 1630173776
    },
    {
        "content": "<p>(see above)</p>",
        "id": 251072151,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630173776
    },
    {
        "content": "<p>true</p>",
        "id": 251072161,
        "sender_full_name": "lqd",
        "timestamp": 1630173786
    },
    {
        "content": "<p>yeah</p>",
        "id": 251072169,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630173809
    },
    {
        "content": "<p>I have to use vi so I can insert real tabs</p>",
        "id": 251072172,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630173813
    },
    {
        "content": "<p>haha</p>",
        "id": 251072181,
        "sender_full_name": "lqd",
        "timestamp": 1630173823
    },
    {
        "content": "<p>there's a space vs tab selector at the bottom of vscode, and some commands, so that you can use real tabs</p>",
        "id": 251072365,
        "sender_full_name": "lqd",
        "timestamp": 1630174017
    },
    {
        "content": "<p>ok, I pushed something that works</p>",
        "id": 251072386,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630174039
    },
    {
        "content": "<p>at least for \"example A\" :)</p>",
        "id": 251072393,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630174049
    },
    {
        "content": "<p>lol now we need the tool to convert that stuff into graphviz</p>",
        "id": 251072404,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630174067
    },
    {
        "content": "<p>I guess that <em>writing</em> the facts isn't so bad -- at least this can compute the transitive closures etc</p>",
        "id": 251072461,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630174095
    },
    {
        "content": "<p>we can probably update the polonius graphviz to reference these new relations</p>",
        "id": 251072510,
        "sender_full_name": "lqd",
        "timestamp": 1630174157
    },
    {
        "content": "<p>(if our existing outputs are good enough) otherwise I'll whip something up looking like the hackmd graphs</p>",
        "id": 251072600,
        "sender_full_name": "lqd",
        "timestamp": 1630174232
    },
    {
        "content": "<p>it wouldn't be hard to write a quick python script or something</p>",
        "id": 251072602,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630174235
    },
    {
        "content": "<p>that generates the graphviz from the fact / csv files</p>",
        "id": 251072606,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630174240
    },
    {
        "content": "<p>for sure</p>",
        "id": 251072611,
        "sender_full_name": "lqd",
        "timestamp": 1630174250
    },
    {
        "content": "<p>we could add one more input relation that is like node_text</p>",
        "id": 251072615,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630174256
    },
    {
        "content": "<p>so that we can have <code>a.     x = 22</code></p>",
        "id": 251072626,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630174267
    },
    {
        "content": "<p>stuff like that</p>",
        "id": 251072627,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630174269
    },
    {
        "content": "<p>and then we can generate exactly the graphviz that is in the hackmd, which I thought looked decent</p>",
        "id": 251072633,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630174282
    },
    {
        "content": "<p>that would be helpful</p>",
        "id": 251072636,
        "sender_full_name": "lqd",
        "timestamp": 1630174286
    },
    {
        "content": "<p>(or something even better...)</p>",
        "id": 251072637,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630174286
    },
    {
        "content": "<p>yeah, it's worth the trouble</p>",
        "id": 251072643,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630174296
    },
    {
        "content": "<p>yeah they were indeed clear</p>",
        "id": 251072645,
        "sender_full_name": "lqd",
        "timestamp": 1630174299
    },
    {
        "content": "<p>I'll work on this as well</p>",
        "id": 251072658,
        "sender_full_name": "lqd",
        "timestamp": 1630174311
    },
    {
        "content": "<p>that would be excellent :)</p>",
        "id": 251072701,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630174326
    },
    {
        "content": "<p>I am going to stop for now!</p>",
        "id": 251072706,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630174330
    },
    {
        "content": "<p>I'll add you to the repo</p>",
        "id": 251072708,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630174332
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/purely.20forward.20propagation/near/251072701\">said</a>:</p>\n<blockquote>\n<p>that would be excellent :)</p>\n</blockquote>\n<p>done :)</p>\n<p>I've pushed a first take of some hacky python code to the graphviz branch <a href=\"https://github.com/nikomatsakis/polonius.next/tree/graphviz\">https://github.com/nikomatsakis/polonius.next/tree/graphviz</a></p>\n<ul>\n<li>I've added the <code>node_text</code> relation to show a summary/line of code at the beginning of the node (soufflé doesn't read it but I've kept the same format as the other fact files)</li>\n<li>it's described in the readme, but you pass it both the input, and output facts generated by soufflé (I've made all computed intermediary relations <code>.output</code> for this purpose) so that it can show both in the graph</li>\n<li>I've only tested on the <code>example-a</code> facts (with python 3.7, and on an old version of soufflé, apparently I can't build it from source anymore...), and it seems to produce the same graph. Since it uses the same html format, it's probably best seen embedded in a hackmd for now.</li>\n</ul>",
        "id": 251095212,
        "sender_full_name": "lqd",
        "timestamp": 1630199705
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/purely.20forward.20propagation/near/251070707\">said</a>:</p>\n<blockquote>\n<p>I'm now feeling like 99.9% sure we could just get rid of loans and have \"special\" origins instead</p>\n</blockquote>\n<p>(if you remember, doing this is what I was (succintly) describing under the name <code>odisseus</code> way back when :)</p>",
        "id": 251095705,
        "sender_full_name": "lqd",
        "timestamp": 1630200322
    },
    {
        "content": "<p>sorry I didn't grok it then :)</p>",
        "id": 251119773,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630229140
    },
    {
        "content": "<p>I also do remember pondering \"why do we need loans' many times</p>",
        "id": 251119790,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630229161
    },
    {
        "content": "<p>so maybe we'll rediscover it?</p>",
        "id": 251119831,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630229167
    },
    {
        "content": "<p>or maybe the forward prop makes a difference</p>",
        "id": 251119840,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630229176
    },
    {
        "content": "<p>nice, looks great!</p>",
        "id": 251119982,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630229344
    },
    {
        "content": "<p>merged into main</p>",
        "id": 251120168,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630229541
    },
    {
        "content": "<p>no need to be sorry, it was poorly explained surely, and half baked thoughts; now is its time to shine or be invalidated (after analyzing more examples like Dylan’s above, that may currently still require loans, for the time being.)</p>",
        "id": 251121209,
        "sender_full_name": "lqd",
        "timestamp": 1630230769
    },
    {
        "content": "<p>I'm creating a quick-and-dirty fact parser to make writing future examples easier</p>",
        "id": 251123683,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630233527
    },
    {
        "content": "<p>and to have a little test harness</p>",
        "id": 251123684,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630233530
    },
    {
        "content": "<p>almost done :)</p>",
        "id": 251123686,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630233532
    },
    {
        "content": "<p>I have to look at Dylan's example, indeed, I've been putting it off until we have a more useful tool to iterate faster :)</p>",
        "id": 251123701,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630233548
    },
    {
        "content": "<p>I realize of course that writing the graphviz thing in python was silly, we should port it to Rust, but anyway</p>",
        "id": 251123710,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630233572
    },
    {
        "content": "<p>(done, pushed)</p>",
        "id": 251124868,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630234847
    },
    {
        "content": "<p>ok, we have a simple test harness now. you can run <code>cargo test --all</code> to use it</p>",
        "id": 251126460,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630236674
    },
    {
        "content": "<p>now let me transcribe another test or two :P</p>",
        "id": 251126463,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630236681
    },
    {
        "content": "<p>ok, going to stop for now...</p>",
        "id": 251127337,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630237697
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"118594\">Dylan MacKenzie (ecstatic-morse)</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/purely.20forward.20propagation/near/251012044\">said</a>:</p>\n<blockquote>\n<p>Here's my belated example, where I think you need something like loans, for posterity</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">x</span> <span class=\"kt\">u32</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">foo</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">y</span> <span class=\"kt\">u32</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// 'y &lt;: 'x</span>\n\n<span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"mi\">42</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// clears 'x</span>\n<span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">142</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// invalidates foo, which is still present in `y`</span>\n\n<span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>ftr, though, I think this example would work just fine</p>",
        "id": 251127380,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630237761
    },
    {
        "content": "<p>how I imagine it working is that <code>&amp;foo</code> is kind of <code>&amp;'0 foo</code>, so we would also have <code>'0 &lt;: 'x</code></p>",
        "id": 251127385,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630237775
    },
    {
        "content": "<p>and hence <code>'0 &lt;: 'y</code></p>",
        "id": 251127388,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630237778
    },
    {
        "content": "<p>and <code>foo = 142</code> would be \"invalidate_origin('0)\", which would also invalidate <code>'y</code> because <code>'0 &lt;: 'y</code></p>",
        "id": 251127399,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630237794
    },
    {
        "content": "<p>this new perspective seems to make issue-47680 kind of .. trivial, which is interesting</p>",
        "id": 251127482,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630237852
    },
    {
        "content": "<p>Did a bit more poking, wrote up some comments on the rules I was (trying) to \"faithfully\" apply</p>",
        "id": 251139716,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630251283
    },
    {
        "content": "<p>so much great work, but you should enjoy your sunday !</p>",
        "id": 251139814,
        "sender_full_name": "lqd",
        "timestamp": 1630251415
    },
    {
        "content": "<p>you also sneakily added a cheeky \"just use origins, no loans\" commit <span aria-label=\"heart eyes\" class=\"emoji emoji-1f60d\" role=\"img\" title=\"heart eyes\">:heart_eyes:</span></p>",
        "id": 251139962,
        "sender_full_name": "lqd",
        "timestamp": 1630251584
    },
    {
        "content": "<p>heh, true. I'm going to stop now, just been a bit curious. I'm still feeling a bit confused about the right behavior of an <code>&amp;mut x</code> and how much \"invalidation\" of a loan should propagate.</p>",
        "id": 251140280,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630251899
    },
    {
        "content": "<p>Something feels funny about propagating invalid loans</p>",
        "id": 251140288,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630251904
    },
    {
        "content": "<p>instead of propagating (and removing) <em>valid</em> loans</p>",
        "id": 251140296,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630251909
    },
    {
        "content": "<p>feels a bit backward? but maybe it fits better with datalog actually</p>",
        "id": 251140312,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630251930
    },
    {
        "content": "<p>since valid would intersect on control flow, but invalid is union</p>",
        "id": 251140320,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630251938
    },
    {
        "content": "<p>one thought: it would be good to make a <em>broken</em> version of the <code>issue-47680</code>. Like what is the version that <em>should not</em> type check?</p>",
        "id": 251140434,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630252045
    },
    {
        "content": "<p>(great comments for the rules to generate inputs)</p>",
        "id": 251140665,
        "sender_full_name": "lqd",
        "timestamp": 1630252266
    },
    {
        "content": "<p>maybe doing the mutation in a different function, to borrow for the whole duration of the loop. I think such examples were the ones which made us notice the flaws in the eq variant</p>",
        "id": 251140789,
        "sender_full_name": "lqd",
        "timestamp": 1630252390
    },
    {
        "content": "<p>(On my phone now but I’ll also try to look for such examples, at the very least so you don’t do all the work yourself…)</p>",
        "id": 251140862,
        "sender_full_name": "lqd",
        "timestamp": 1630252457
    },
    {
        "content": "<p>fuuu, come on soufflé, <a href=\"https://github.com/nikomatsakis/polonius.next/blob/97ee59a36d9e765f81dc68d5fd1a327090ecd97e/src/polonius.dl#L105\">https://github.com/nikomatsakis/polonius.next/blob/97ee59a36d9e765f81dc68d5fd1a327090ecd97e/src/polonius.dl#L105</a></p>",
        "id": 253493960,
        "sender_full_name": "lqd",
        "timestamp": 1631742859
    },
    {
        "content": "<p>maybe there's no type checking at all in the interpreter ...</p>",
        "id": 253494447,
        "sender_full_name": "lqd",
        "timestamp": 1631743162
    },
    {
        "content": "<p>yeah, that's annoying</p>",
        "id": 253593026,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1631803314
    },
    {
        "content": "<p>(good to know: more recent versions do complain about the file)</p>",
        "id": 253619247,
        "sender_full_name": "lqd",
        "timestamp": 1631813557
    },
    {
        "content": "<p>(maybe we should do our prototyping <em>with the loans</em>, and then try to remove them. that could help temporarily avoid subtleties related to propagating origin invalidations through the cfg and subsets, and ordering. An example of subtlely could be in the issue-47680 loop, where clearing + accessing + invalidating could happen at the same point after propagation from the back edge, depending on which points clearing stops the propagation, etc)</p>",
        "id": 253654565,
        "sender_full_name": "lqd",
        "timestamp": 1631827951
    },
    {
        "content": "<p>I finally managed to get the repository running</p>",
        "id": 253946868,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1632059710
    },
    {
        "content": "<p>Last week I tried to get it up on my Windows machine and in WSL, but both were uncooperative</p>",
        "id": 253946898,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1632059750
    },
    {
        "content": "<p>but now I have everything running on an actual linux machine</p>",
        "id": 253946948,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1632059777
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/purely.20forward.20propagation/near/251095212\">said</a>:</p>\n<blockquote>\n<p>I've pushed a first take of some hacky python code to the graphviz branch <a href=\"https://github.com/nikomatsakis/polonius.next/tree/graphviz\">https://github.com/nikomatsakis/polonius.next/tree/graphviz</a><br>\n[...] Since it uses the same html format, it's probably best seen embedded in a hackmd for now.</p>\n</blockquote>\n<p>made a small PR to also generate a PDF if <code>dot</code> is available, so we can look at the output without the need for this</p>",
        "id": 253947063,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1632059908
    },
    {
        "content": "<p>here, that is</p>",
        "id": 254708739,
        "sender_full_name": "lqd",
        "timestamp": 1632492111
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> you mean moving the graphviz script to Rust?</p>",
        "id": 254708873,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1632492148
    },
    {
        "content": "<p>ah that's true I can rewrite the python graphviz export to rust</p>",
        "id": 254708904,
        "sender_full_name": "lqd",
        "timestamp": 1632492163
    },
    {
        "content": "<p>did you guys see I added PDF generation there if <code>dot</code> is installed? (if we want that. Can ofc also be moved to Rust directly w/o the PR)</p>",
        "id": 254709032,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1632492224
    },
    {
        "content": "<p>I saw that sorry I didn't respond</p>",
        "id": 254709078,
        "sender_full_name": "lqd",
        "timestamp": 1632492242
    },
    {
        "content": "<p>I haven't seen how the pdfs look</p>",
        "id": 254709131,
        "sender_full_name": "lqd",
        "timestamp": 1632492251
    },
    {
        "content": "<p>Yes, I meant rewriting the graphviz script to Rust</p>",
        "id": 254709134,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632492252
    },
    {
        "content": "<p>I'd probably stick to souffle for now</p>",
        "id": 254709167,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632492266
    },
    {
        "content": "<p>though I still don't want to use it in the fullness of time</p>",
        "id": 254709199,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632492279
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/purely.20forward.20propagation/near/254709078\">said</a>:</p>\n<blockquote>\n<p>I saw that sorry I didn't respond</p>\n</blockquote>\n<p>Dw, I didn't expect anything to happen before today. It's also not that important</p>",
        "id": 254709218,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1632492287
    },
    {
        "content": "<p>the graphs should look identical though</p>",
        "id": 254709251,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1632492301
    },
    {
        "content": "<p>great :)</p>",
        "id": 254709273,
        "sender_full_name": "lqd",
        "timestamp": 1632492309
    },
    {
        "content": "<p>let me sketch the input format I was thinking of</p>",
        "id": 254709294,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632492315
    },
    {
        "content": "<p>side note that it's always so fun to use rust on a project that's not rustc :P</p>",
        "id": 254709342,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632492335
    },
    {
        "content": "<p>so if you've all had the time to read what I wrote here last time (soufflé errors, loan-less variation)</p>",
        "id": 254709374,
        "sender_full_name": "lqd",
        "timestamp": 1632492344
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/purely.20forward.20propagation/near/254709199\">said</a>:</p>\n<blockquote>\n<p>though I still don't want to use it in the fullness of time</p>\n</blockquote>\n<p>(it seems to also not work very well on Windows or WSL, from my experience just recently)</p>",
        "id": 254709380,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1632492347
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/purely.20forward.20propagation/near/254709374\">said</a>:</p>\n<blockquote>\n<p>so if you've all had the time to read what I wrote here last time (soufflé errors, loan-less variation)</p>\n</blockquote>\n<p>uh...</p>",
        "id": 254709467,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632492366
    },
    {
        "content": "<p>I think I did the loan-less variation, right?</p>",
        "id": 254709483,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632492371
    },
    {
        "content": "<p>thing is, you need a recent ubuntu dom</p>",
        "id": 254709491,
        "sender_full_name": "lqd",
        "timestamp": 1632492374
    },
    {
        "content": "<p>yes niko</p>",
        "id": 254709509,
        "sender_full_name": "lqd",
        "timestamp": 1632492383
    },
    {
        "content": "<p>oh, right</p>",
        "id": 254709511,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632492384
    },
    {
        "content": "<p>I remember</p>",
        "id": 254709516,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632492385
    },
    {
        "content": "<p>you're saying that there were typos and bugs</p>",
        "id": 254709532,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632492391
    },
    {
        "content": "<p>yup</p>",
        "id": 254709540,
        "sender_full_name": "lqd",
        "timestamp": 1632492394
    },
    {
        "content": "<p>let me rebuild souffle</p>",
        "id": 254709607,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632492414
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"337115\">@Domenic Quirl</span> if you use the 20.04 on WSL you'll be able to build the latest soufflé version and it does work</p>",
        "id": 254709617,
        "sender_full_name": "lqd",
        "timestamp": 1632492416
    },
    {
        "content": "<p>(I believe)</p>",
        "id": 254709645,
        "sender_full_name": "lqd",
        "timestamp": 1632492427
    },
    {
        "content": "<p>trying to remember how to do that</p>",
        "id": 254709660,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632492432
    },
    {
        "content": "<p>otherwise you only get an old one</p>",
        "id": 254709673,
        "sender_full_name": "lqd",
        "timestamp": 1632492437
    },
    {
        "content": "<p>cmake build=build or something lke that</p>",
        "id": 254709679,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632492438
    },
    {
        "content": "<p>IIRC there were 2 small changes I had to make for everything to run, which you (<span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> ) pointed out here</p>",
        "id": 254709681,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1632492441
    },
    {
        "content": "<p><a href=\"https://souffle-lang.github.io/build\">https://souffle-lang.github.io/build</a></p>",
        "id": 254709729,
        "sender_full_name": "lqd",
        "timestamp": 1632492462
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/purely.20forward.20propagation/near/254709617\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"337115\">Domenic Quirl</span> if you use the 20.04 on WSL you'll be able to build the latest soufflé version and it does work</p>\n</blockquote>\n<p>unfortunately it didn't for me - I upgraded both WSL and the installed Ubuntu, but I could only get it to work on another machine with proper linux (non Ubuntu)</p>",
        "id": 254709875,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1632492506
    },
    {
        "content": "<p>that works for me for now</p>",
        "id": 254709896,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1632492514
    },
    {
        "content": "<p>so:</p>\n<ul>\n<li>the current soufflé version of the rules \"don't compile\" depending on the soufflé version you have. I have \"fixed\" this, but if you do it simply, then invalidation propagation will be incorrect</li>\n</ul>",
        "id": 254709949,
        "sender_full_name": "lqd",
        "timestamp": 1632492534
    },
    {
        "content": "<p>just wanted to point out that for people joining they may go though similar troubles</p>",
        "id": 254709959,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1632492539
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/src/polonius.dl b/src/polonius.dl</span>\n<span class=\"gh\">index 7905b84..c5297fb 100644</span>\n<span class=\"gd\">--- a/src/polonius.dl</span>\n<span class=\"gi\">+++ b/src/polonius.dl</span>\n<span class=\"gu\">@@ -97,12 +97,12 @@ origin_invalidated(O2, N2) :- // Introduced by predecessor</span>\n   cfg_edge(N1, N2),\n   !clear_origin(O2, N1),\n   subset(O1, O2, N1),\n<span class=\"gd\">-  invalidate_origin(L, O1).</span>\n<span class=\"gi\">+  invalidate_origin(O1, N1).</span>\n\n origin_invalidated(O, N2) :- // Introduced by predecessor\n   cfg_edge(N1, N2),\n   !clear_origin(O, N1),\n<span class=\"gd\">-  invalidate_origin(L, O, N1).</span>\n<span class=\"gi\">+  invalidate_origin(O, N1).</span>\n</code></pre></div>",
        "id": 254710201,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1632492618
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> is this what you mean by \"simply\"?</p>",
        "id": 254710238,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1632492632
    },
    {
        "content": "<p>yes</p>",
        "id": 254710251,
        "sender_full_name": "lqd",
        "timestamp": 1632492635
    },
    {
        "content": "<p>this makes it compile and pass tests</p>",
        "id": 254710324,
        "sender_full_name": "lqd",
        "timestamp": 1632492656
    },
    {
        "content": "<p>but will not propagate invalidations</p>",
        "id": 254710339,
        "sender_full_name": "lqd",
        "timestamp": 1632492660
    },
    {
        "content": "<p>so if you had some dummy cfg points between invalidations it won't detect the errors</p>",
        "id": 254710386,
        "sender_full_name": "lqd",
        "timestamp": 1632492684
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> did you push those changes?</p>",
        "id": 254710421,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632492703
    },
    {
        "content": "<p>I see those errors</p>",
        "id": 254710442,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632492712
    },
    {
        "content": "<p>(now)</p>",
        "id": 254710448,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632492713
    },
    {
        "content": "<p>strangely, cargo test still works?!</p>",
        "id": 254710460,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632492720
    },
    {
        "content": "<p>I didn't push, let me get the version I have</p>",
        "id": 254710518,
        "sender_full_name": "lqd",
        "timestamp": 1632492730
    },
    {
        "content": "<p>Yeah, one thing I noticed also was that right now invalidation only triggers if the access is right after the <code>invalidate_origin</code></p>",
        "id": 254710542,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1632492739
    },
    {
        "content": "<p>but then we go into the subtlety I mentioned above</p>",
        "id": 254710561,
        "sender_full_name": "lqd",
        "timestamp": 1632492747
    },
    {
        "content": "<p>which is the case in all of the current tests</p>",
        "id": 254710619,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1632492769
    },
    {
        "content": "<p>but obviously not generally</p>",
        "id": 254710653,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1632492785
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/purely.20forward.20propagation/near/254710339\">said</a>:</p>\n<blockquote>\n<p>but will not propagate invalidations</p>\n</blockquote>\n<p>ok ok</p>",
        "id": 254710673,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632492791
    },
    {
        "content": "<p>I missed this</p>",
        "id": 254710677,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632492792
    },
    {
        "content": "<p>that's what I'm here for</p>",
        "id": 254710701,
        "sender_full_name": "lqd",
        "timestamp": 1632492804
    },
    {
        "content": "<p>would be great to have a test that fails, then</p>",
        "id": 254710717,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632492808
    },
    {
        "content": "<p>yeah, we'll craft one :)</p>",
        "id": 254710794,
        "sender_full_name": "lqd",
        "timestamp": 1632492842
    },
    {
        "content": "<p>so I was playing with <a href=\"https://gist.github.com/lqd/ec35dfd13a2fbfecbe9eae0240fe90f9\">https://gist.github.com/lqd/ec35dfd13a2fbfecbe9eae0240fe90f9</a></p>",
        "id": 254710857,
        "sender_full_name": "lqd",
        "timestamp": 1632492851
    },
    {
        "content": "<p>in particular, this tries to propagate invalidations</p>",
        "id": 254711167,
        "sender_full_name": "lqd",
        "timestamp": 1632492962
    },
    {
        "content": "<p>pshed your changes</p>",
        "id": 254711202,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632492965
    },
    {
        "content": "<p>now let me try to understand what it is you are saying is the problem</p>",
        "id": 254711237,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632492978
    },
    {
        "content": "<p>I didn't push them because I wanted to talk about them with y'all :)</p>",
        "id": 254711259,
        "sender_full_name": "lqd",
        "timestamp": 1632492984
    },
    {
        "content": "<p>so I've tried to do the propagations with</p>\n<div class=\"codehilite\" data-code-language=\"Prolog\"><pre><span></span><code><span class=\"nf\">origin_invalidated</span><span class=\"p\">(</span><span class=\"nv\">O</span><span class=\"p\">,</span> <span class=\"nv\">N2</span><span class=\"p\">)</span> <span class=\"p\">:-</span> <span class=\"o\">//</span> <span class=\"nv\">Introduced</span> <span class=\"s s-Atom\">by</span> <span class=\"s s-Atom\">predecessor</span>\n  <span class=\"nf\">cfg_edge</span><span class=\"p\">(</span><span class=\"nv\">N1</span><span class=\"p\">,</span> <span class=\"nv\">N2</span><span class=\"p\">),</span>\n  <span class=\"p\">!</span><span class=\"nf\">clear_origin</span><span class=\"p\">(</span><span class=\"nv\">O</span><span class=\"p\">,</span> <span class=\"nv\">N1</span><span class=\"p\">),</span>\n  <span class=\"p\">(</span><span class=\"nf\">invalidate_origin</span><span class=\"p\">(</span><span class=\"nv\">O</span><span class=\"p\">,</span> <span class=\"nv\">N1</span><span class=\"p\">)</span> <span class=\"p\">;</span> <span class=\"nf\">origin_invalidated</span><span class=\"p\">(</span><span class=\"nv\">O</span><span class=\"p\">,</span> <span class=\"nv\">N1</span><span class=\"p\">)).</span> <span class=\"o\">//</span> <span class=\"s s-Atom\">this</span>\n</code></pre></div>",
        "id": 254711378,
        "sender_full_name": "lqd",
        "timestamp": 1632493026
    },
    {
        "content": "<p>oh, I see</p>",
        "id": 254711577,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632493100
    },
    {
        "content": "<p>duh</p>",
        "id": 254711586,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632493102
    },
    {
        "content": "<p>/me thinks</p>",
        "id": 254711601,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632493109
    },
    {
        "content": "<p>now the question is when do we stop them, because in the <code>issue-47680</code> test, the back edge in the loop will reach this point <a href=\"https://github.com/nikomatsakis/polonius.next/blob/cf4c87ca5a107942fa25867e525cf5c0447c6599/tests/issue-47680/program.txt#L29-L48\">https://github.com/nikomatsakis/polonius.next/blob/cf4c87ca5a107942fa25867e525cf5c0447c6599/tests/issue-47680/program.txt#L29-L48</a> and generate an error</p>",
        "id": 254711639,
        "sender_full_name": "lqd",
        "timestamp": 1632493128
    },
    {
        "content": "<p>and this is why I was playing with stopping them here <a href=\"https://gist.github.com/lqd/ec35dfd13a2fbfecbe9eae0240fe90f9#file-polonius-dl-L98-L99\">https://gist.github.com/lqd/ec35dfd13a2fbfecbe9eae0240fe90f9#file-polonius-dl-L98-L99</a></p>",
        "id": 254711750,
        "sender_full_name": "lqd",
        "timestamp": 1632493178
    },
    {
        "content": "<p>Hm, I wonder if that is sufficient</p>",
        "id": 254711941,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1632493235
    },
    {
        "content": "<p>so, step 1</p>",
        "id": 254711961,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632493242
    },
    {
        "content": "<p>I think the right rules are</p>",
        "id": 254711971,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632493245
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Prolog\"><pre><span></span><code><span class=\"s s-Atom\">////////////////////////////////////////////</span>\n<span class=\"p\">.</span><span class=\"s s-Atom\">decl</span> <span class=\"nf\">origin_invalidated</span><span class=\"p\">(</span><span class=\"nn\">o</span><span class=\"p\">:</span> <span class=\"nv\">Origin</span><span class=\"p\">,</span> <span class=\"nn\">n</span><span class=\"p\">:</span> <span class=\"nv\">Node</span><span class=\"p\">)</span>\n<span class=\"p\">.</span><span class=\"s s-Atom\">output</span> <span class=\"s s-Atom\">origin_invalidated</span>\n\n<span class=\"nf\">origin_invalidated</span><span class=\"p\">(</span><span class=\"nv\">O2</span><span class=\"p\">,</span> <span class=\"nv\">N</span><span class=\"p\">)</span> <span class=\"p\">:-</span> <span class=\"o\">//</span> <span class=\"nv\">Introduced</span> <span class=\"s s-Atom\">by</span> <span class=\"s s-Atom\">predecessor</span>\n  <span class=\"nf\">subset</span><span class=\"p\">(</span><span class=\"nv\">O1</span><span class=\"p\">,</span> <span class=\"nv\">O2</span><span class=\"p\">,</span> <span class=\"nv\">N</span><span class=\"p\">),</span>\n  <span class=\"nf\">origin_invalidated</span><span class=\"p\">(</span><span class=\"nv\">O1</span><span class=\"p\">,</span> <span class=\"nv\">N1</span><span class=\"p\">).</span>\n\n<span class=\"nf\">origin_invalidated</span><span class=\"p\">(</span><span class=\"nv\">O</span><span class=\"p\">,</span> <span class=\"nv\">N2</span><span class=\"p\">)</span> <span class=\"p\">:-</span> <span class=\"o\">//</span> <span class=\"nv\">Introduced</span> <span class=\"s s-Atom\">by</span> <span class=\"s s-Atom\">predecessor</span>\n  <span class=\"nf\">cfg_edge</span><span class=\"p\">(</span><span class=\"nv\">N1</span><span class=\"p\">,</span> <span class=\"nv\">N2</span><span class=\"p\">),</span>\n  <span class=\"p\">!</span><span class=\"nf\">clear_origin</span><span class=\"p\">(</span><span class=\"nv\">O</span><span class=\"p\">,</span> <span class=\"nv\">N1</span><span class=\"p\">),</span>\n  <span class=\"nf\">invalidate_origin</span><span class=\"p\">(</span><span class=\"nv\">O</span><span class=\"p\">,</span> <span class=\"nv\">N1</span><span class=\"p\">).</span>\n\n<span class=\"nf\">origin_invalidated</span><span class=\"p\">(</span><span class=\"nv\">O</span><span class=\"p\">,</span> <span class=\"nv\">N2</span><span class=\"p\">)</span> <span class=\"p\">:-</span> <span class=\"o\">//</span> <span class=\"nv\">Introduced</span> <span class=\"s s-Atom\">by</span> <span class=\"s s-Atom\">predecessor</span>\n  <span class=\"nf\">cfg_edge</span><span class=\"p\">(</span><span class=\"nv\">N1</span><span class=\"p\">,</span> <span class=\"nv\">N2</span><span class=\"p\">),</span>\n  <span class=\"p\">!</span><span class=\"nf\">clear_origin</span><span class=\"p\">(</span><span class=\"nv\">O</span><span class=\"p\">,</span> <span class=\"nv\">N1</span><span class=\"p\">),</span>\n  <span class=\"nf\">origin_invalidated</span><span class=\"p\">(</span><span class=\"nv\">O</span><span class=\"p\">,</span> <span class=\"nv\">N1</span><span class=\"p\">).</span>\n</code></pre></div>",
        "id": 254711975,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632493248
    },
    {
        "content": "<p>oops, bad comments</p>",
        "id": 254711997,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632493258
    },
    {
        "content": "<p>Or, more precisely, what happens if an origin gets invalidated at <code>N1</code>, but both cleared and accessed at <code>N2</code></p>",
        "id": 254712012,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1632493265
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Prolog\"><pre><span></span><code><span class=\"s s-Atom\">////////////////////////////////////////////</span>\n<span class=\"p\">.</span><span class=\"s s-Atom\">decl</span> <span class=\"nf\">origin_invalidated</span><span class=\"p\">(</span><span class=\"nn\">o</span><span class=\"p\">:</span> <span class=\"nv\">Origin</span><span class=\"p\">,</span> <span class=\"nn\">n</span><span class=\"p\">:</span> <span class=\"nv\">Node</span><span class=\"p\">)</span>\n<span class=\"p\">.</span><span class=\"s s-Atom\">output</span> <span class=\"s s-Atom\">origin_invalidated</span>\n\n<span class=\"o\">//</span> <span class=\"nv\">If</span> <span class=\"s s-Atom\">origin</span> <span class=\"nv\">O1</span> <span class=\"o\">is</span> <span class=\"s s-Atom\">invalidated</span> <span class=\"s s-Atom\">on</span> <span class=\"s s-Atom\">entry</span> <span class=\"s s-Atom\">to</span> <span class=\"s s-Atom\">node</span> <span class=\"nv\">N</span><span class=\"p\">,</span>\n<span class=\"o\">//</span> <span class=\"s s-Atom\">and</span> <span class=\"nv\">O1</span> <span class=\"s s-Atom\">&lt;=</span> <span class=\"nv\">O2</span> <span class=\"s s-Atom\">in</span> <span class=\"s s-Atom\">node</span> <span class=\"nv\">N</span><span class=\"p\">,</span>\n<span class=\"o\">//</span> <span class=\"s s-Atom\">then</span> <span class=\"nv\">O2</span> <span class=\"o\">is</span> <span class=\"s s-Atom\">invalidated</span> <span class=\"s s-Atom\">on</span> <span class=\"s s-Atom\">entry</span><span class=\"p\">.</span>\n<span class=\"nf\">origin_invalidated</span><span class=\"p\">(</span><span class=\"nv\">O2</span><span class=\"p\">,</span> <span class=\"nv\">N</span><span class=\"p\">)</span> <span class=\"p\">:-</span>\n  <span class=\"nf\">subset</span><span class=\"p\">(</span><span class=\"nv\">O1</span><span class=\"p\">,</span> <span class=\"nv\">O2</span><span class=\"p\">,</span> <span class=\"nv\">N</span><span class=\"p\">),</span>\n  <span class=\"nf\">origin_invalidated</span><span class=\"p\">(</span><span class=\"nv\">O1</span><span class=\"p\">,</span> <span class=\"nv\">N</span><span class=\"p\">).</span>\n\n<span class=\"nf\">origin_invalidated</span><span class=\"p\">(</span><span class=\"nv\">O</span><span class=\"p\">,</span> <span class=\"nv\">N2</span><span class=\"p\">)</span> <span class=\"p\">:-</span> <span class=\"o\">//</span> <span class=\"nv\">Introduced</span> <span class=\"s s-Atom\">by</span> <span class=\"s s-Atom\">predecessor</span>\n  <span class=\"nf\">cfg_edge</span><span class=\"p\">(</span><span class=\"nv\">N1</span><span class=\"p\">,</span> <span class=\"nv\">N2</span><span class=\"p\">),</span>\n  <span class=\"p\">!</span><span class=\"nf\">clear_origin</span><span class=\"p\">(</span><span class=\"nv\">O</span><span class=\"p\">,</span> <span class=\"nv\">N1</span><span class=\"p\">),</span>\n  <span class=\"p\">(</span><span class=\"nf\">invalidate_origin</span><span class=\"p\">(</span><span class=\"nv\">O</span><span class=\"p\">,</span> <span class=\"nv\">N1</span><span class=\"p\">);</span> <span class=\"nf\">origin_invalidated</span><span class=\"p\">(</span><span class=\"nv\">O</span><span class=\"p\">,</span> <span class=\"nv\">N1</span><span class=\"p\">)).</span>\n</code></pre></div>",
        "id": 254712086,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632493303
    },
    {
        "content": "<p>corrected</p>",
        "id": 254712095,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632493305
    },
    {
        "content": "<p>that said, <code>vec_temp</code> does still fail, and I think this is good -- I remember I was thinking about this question of \"when to stop\"</p>",
        "id": 254712251,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632493359
    },
    {
        "content": "<p>let me see what you did next :</p>",
        "id": 254712257,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632493361
    },
    {
        "content": "<p>I see</p>",
        "id": 254712300,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632493385
    },
    {
        "content": "<p>this is where I went, this is kinda subtle and maybe we should talk about it :)</p>",
        "id": 254712366,
        "sender_full_name": "lqd",
        "timestamp": 1632493416
    },
    {
        "content": "<p>yeah, gimme a sec :)</p>",
        "id": 254712537,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632493465
    },
    {
        "content": "<p>well, first, do you see what my changes are about?</p>",
        "id": 254712556,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632493473
    },
    {
        "content": "<p>I'm going to push them so we're on a common page</p>",
        "id": 254712570,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632493478
    },
    {
        "content": "<p>btw, in the graphviz output, I think it'd be nice to have the names of the basic blocks</p>",
        "id": 254712635,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632493511
    },
    {
        "content": "<p>I think I see what the changes are about</p>",
        "id": 254712679,
        "sender_full_name": "lqd",
        "timestamp": 1632493538
    },
    {
        "content": "<p>I think the problem with vec-temp is actually incorrect input facts</p>",
        "id": 254712989,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632493664
    },
    {
        "content": "<p>but I'm not sure :)</p>",
        "id": 254713092,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632493691
    },
    {
        "content": "<p>I do wonder if the subsets which are cleared at the same point would need to be invalidated or not <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 254713104,
        "sender_full_name": "lqd",
        "timestamp": 1632493697
    },
    {
        "content": "<p>here is what goes wrong</p>",
        "id": 254713107,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632493698
    },
    {
        "content": "<p>yeah, so the question here is exactly when to clear, and getting precise about that question was partly what I hopd to do by forcing us to have an IR :)</p>",
        "id": 254713161,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632493720
    },
    {
        "content": "<p>:)</p>",
        "id": 254713219,
        "sender_full_name": "lqd",
        "timestamp": 1632493745
    },
    {
        "content": "<p>here is the vec-temp example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">22</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"cm\">/* a */</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"fm\">vec!</span><span class=\"p\">[];</span><span class=\"w\"> </span><span class=\"cm\">/* b */</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"cm\">/* c */</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">tmp</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"cm\">/* d */</span><span class=\"w\"></span>\n<span class=\"nb\">Vec</span>::<span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">tmp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"cm\">/* e */</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 254713241,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632493756
    },
    {
        "content": "<p>or at least the relevant part</p>",
        "id": 254713256,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632493763
    },
    {
        "content": "<p>what happens is that we have an origin which I am calling <code>'L_x</code></p>",
        "id": 254713293,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632493777
    },
    {
        "content": "<p>it corresponds to the <code>let p = &amp;x</code> &lt;-- the <code>&amp;x</code> here</p>",
        "id": 254713318,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632493788
    },
    {
        "content": "<p>(that's also when I did wonder if the loan-<em>full</em> had the exact same precision requirements so that we could punt that for later)</p>",
        "id": 254713319,
        "sender_full_name": "lqd",
        "timestamp": 1632493788
    },
    {
        "content": "<p>The idea of \"clearing\" seems to be: when existing values with that origin no longer refer to the same value</p>",
        "id": 254713497,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632493841
    },
    {
        "content": "<p>so I believe it is correct to clear <code>'L_x</code> when executing <code>&amp;x</code></p>",
        "id": 254713550,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632493858
    },
    {
        "content": "<p>but something feels funny and I'm trying to tease it out</p>",
        "id": 254713570,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632493868
    },
    {
        "content": "<p>it's not as \"obvious\" to me as clearing the lifetimes in <code>p</code> when we overwrite it</p>",
        "id": 254713588,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632493877
    },
    {
        "content": "<p>the reason we get an error right now, to spell it out, is that:</p>",
        "id": 254713618,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632493888
    },
    {
        "content": "<p><code>let mut x = 22</code> -- that assigns to <code>x</code>, so we generate an \"invalidate L_x fact\"</p>",
        "id": 254713643,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632493900
    },
    {
        "content": "<p>this propagates forward and causes an error on line <code>e</code></p>",
        "id": 254713664,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632493909
    },
    {
        "content": "<p>you could imagine a loop</p>",
        "id": 254713724,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632493923
    },
    {
        "content": "<p>where an old borrow of <code>x</code> was carried around the loop in some variable</p>",
        "id": 254713755,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632493938
    },
    {
        "content": "<p>but I think that will work fine (we can concoct the example) -- </p>\n<p>what will happen is that we will clear the <code>L-x</code> origin, but whatever origin is in that loop-carried variable will still be invalidated and inaccessible</p>",
        "id": 254713845,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632493972
    },
    {
        "content": "<p>is that making sense?</p>",
        "id": 254713884,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632493990
    },
    {
        "content": "<p>some of the clearing is still a bit unintuitive to me personally</p>",
        "id": 254713936,
        "sender_full_name": "lqd",
        "timestamp": 1632494015
    },
    {
        "content": "<p>I'm updating the text comment with the rules</p>",
        "id": 254714051,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632494048
    },
    {
        "content": "<p>it would be good to talk it out more :)</p>",
        "id": 254714061,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632494051
    },
    {
        "content": "<p>the comment is a bit confusing</p>",
        "id": 254714092,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632494062
    },
    {
        "content": "<p>even to me, and I wrote it :P</p>",
        "id": 254714105,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632494069
    },
    {
        "content": "<p>I thnk it'd be good to try and express the \"fact generation\" rules more mathematically</p>",
        "id": 254714124,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632494080
    },
    {
        "content": "<p>yeah</p>",
        "id": 254714145,
        "sender_full_name": "lqd",
        "timestamp": 1632494093
    },
    {
        "content": "<p>that will help with the tests as well</p>",
        "id": 254714174,
        "sender_full_name": "lqd",
        "timestamp": 1632494106
    },
    {
        "content": "<p><a href=\"https://hackmd.io/a3WYlvxdSnSgMcc8tHOwZA\">hackmd for notes</a></p>",
        "id": 254714293,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632494158
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/oQ8p8O0tpMWqkKOP7Fw8mvCL/graph.dot.pdf\">graph.dot.pdf</a>  (<code>vec-temp</code> graph with the current rules)</p>",
        "id": 254714853,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1632494342
    },
    {
        "content": "<p>lol am I just reproducing MIR</p>",
        "id": 254715088,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632494431
    },
    {
        "content": "<p>I guess mildly simplified :)</p>",
        "id": 254715096,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632494436
    },
    {
        "content": "<p>smolmir</p>",
        "id": 254715164,
        "sender_full_name": "lqd",
        "timestamp": 1632494469
    },
    {
        "content": "<p>/me is caught up with this thread now.</p>",
        "id": 254715172,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1632494474
    },
    {
        "content": "<p>I'm looking over the examples</p>",
        "id": 254715204,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632494490
    },
    {
        "content": "<p>I think the AST I've got so far can basically express them</p>",
        "id": 254715219,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632494497
    },
    {
        "content": "<p>except we need struct declarations</p>",
        "id": 254715228,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632494503
    },
    {
        "content": "<p>(highlighting important relations in the graphviz output would be nice: <code>invalidated_origin_accessed</code> comes to mind)</p>",
        "id": 254715453,
        "sender_full_name": "lqd",
        "timestamp": 1632494586
    },
    {
        "content": "<p>so</p>",
        "id": 254715638,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632494675
    },
    {
        "content": "<p>I'm looking at Vec_temp</p>",
        "id": 254715646,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632494679
    },
    {
        "content": "<p>let me sketch out some of my thinking in terms of this ast</p>",
        "id": 254715665,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632494687
    },
    {
        "content": "<p>there's something I'm unsure about in this example niko</p>",
        "id": 254715675,
        "sender_full_name": "lqd",
        "timestamp": 1632494694
    },
    {
        "content": "<p>it still fails, as expected</p>",
        "id": 254715686,
        "sender_full_name": "lqd",
        "timestamp": 1632494700
    },
    {
        "content": "<p>it passes for me, now</p>",
        "id": 254715708,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632494708
    },
    {
        "content": "<p>but carry on</p>",
        "id": 254715714,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632494710
    },
    {
        "content": "<p>what is the problem you were looking for ?</p>",
        "id": 254715720,
        "sender_full_name": "lqd",
        "timestamp": 1632494711
    },
    {
        "content": "<p>(because I updated the facts)</p>",
        "id": 254715727,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632494714
    },
    {
        "content": "<p>oh ok I hadn't caught that, thank you</p>",
        "id": 254715750,
        "sender_full_name": "lqd",
        "timestamp": 1632494725
    },
    {
        "content": "<p>well, I only gave a prefix of the example :)</p>",
        "id": 254715755,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632494727
    },
    {
        "content": "<p>full example</p>",
        "id": 254715769,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632494735
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// let mut x = 22;</span>\n<span class=\"c1\">// let mut v = vec![];</span>\n<span class=\"c1\">// let p = &amp;x;</span>\n<span class=\"c1\">// let mut tmp = &amp;mut v;</span>\n<span class=\"c1\">// Vec::push(tmp, p);</span>\n<span class=\"c1\">// x = 23;</span>\n<span class=\"c1\">// Vec::len(v); // ERROR</span>\n</code></pre></div>",
        "id": 254715777,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632494737
    },
    {
        "content": "<p>so there is still an error, but not on line <code>e</code></p>",
        "id": 254715799,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632494747
    },
    {
        "content": "<p>rather on the final line</p>",
        "id": 254715803,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632494749
    },
    {
        "content": "<p>the key idea here is that we have a borrow of <code>x</code> (p = &amp;x)</p>",
        "id": 254715897,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632494772
    },
    {
        "content": "<p>and a borow of <code>v</code> (&amp;mut v)</p>",
        "id": 254715914,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632494780
    },
    {
        "content": "<p>and the two are independent</p>",
        "id": 254715921,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632494783
    },
    {
        "content": "<p>they come together when <code>Vec::push</code> is called</p>",
        "id": 254715931,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632494790
    },
    {
        "content": "<p>but also, not that the call occurs through <code>tmp</code></p>",
        "id": 254715952,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632494799
    },
    {
        "content": "<p>and yet the connection from <code>v</code> to <code>x</code> is remembered in <code>v</code></p>",
        "id": 254715991,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632494816
    },
    {
        "content": "<p>(some variants of polonius didn't capture this)</p>",
        "id": 254716009,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632494823
    },
    {
        "content": "<p>(random note don't mind me, I thought maybe there was a clear missing because <code>Vec::len(v);</code> would read <code>Vec::len(&amp;v);</code> in regular rust)</p>",
        "id": 254716101,
        "sender_full_name": "lqd",
        "timestamp": 1632494862
    },
    {
        "content": "<p>ah, that's true</p>",
        "id": 254716200,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632494891
    },
    {
        "content": "<p>you could model this more precisely</p>",
        "id": 254716217,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632494898
    },
    {
        "content": "<p>I think I'm going to give up and just add generis</p>",
        "id": 254716699,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632495098
    },
    {
        "content": "<p>I'm going to toy with implementing this a bit</p>",
        "id": 254716705,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632495102
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/purely.20forward.20propagation/near/254716217\">said</a>:</p>\n<blockquote>\n<p>you could model this more precisely</p>\n</blockquote>\n<p>I don't thik it matters though, you'd get a similar error</p>",
        "id": 254716743,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632495115
    },
    {
        "content": "<p>having the error on line e rather than g was the difference we mentioned, on the 3-point errors</p>",
        "id": 254716753,
        "sender_full_name": "lqd",
        "timestamp": 1632495120
    },
    {
        "content": "<p>well</p>",
        "id": 254716857,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632495149
    },
    {
        "content": "<p>I think old-style polonius would give the error at the line <code>x = ...</code></p>",
        "id": 254716876,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632495158
    },
    {
        "content": "<p>line <code>f</code> I think it is</p>",
        "id": 254716896,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632495165
    },
    {
        "content": "<p>the thing is that both lines are necessary for the error - both not modifying the variable and not using the vec after should cause the error to go away, right?</p>",
        "id": 254716922,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1632495176
    },
    {
        "content": "<p>correct</p>",
        "id": 254716955,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632495191
    },
    {
        "content": "<p>so basically the error is \"the assignment to <code>x</code> (f) is invalid, because <code>x</code> is borrowed (c) <em>and</em> that borrow is used later (through (g))\"</p>",
        "id": 254717038,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1632495226
    },
    {
        "content": "<p>ah right on <code>f</code> like NLLs</p>",
        "id": 254717128,
        "sender_full_name": "lqd",
        "timestamp": 1632495248
    },
    {
        "content": "<p>which means for error reporting we probably need all of this info</p>",
        "id": 254717177,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1632495267
    },
    {
        "content": "<p>yeah the errors are like (using regular old-style vocabulary):</p>\n<ul>\n<li>where the loan is created</li>\n<li>where it's invalidated</li>\n<li>where it's later used</li>\n</ul>",
        "id": 254717885,
        "sender_full_name": "lqd",
        "timestamp": 1632495553
    },
    {
        "content": "<p>those \"landmarks\" don't change, but the error point will switch from the 2nd to the 3rd</p>",
        "id": 254718135,
        "sender_full_name": "lqd",
        "timestamp": 1632495634
    },
    {
        "content": "<p>Hmm, it took me a while to wrap my head around clearing the \"invalidates\" relation for a variable when it's borrowed. It's clear that you have to do it, and it seems to work for loops and conditionals, but I don't have a great intuition for it.</p>",
        "id": 254718464,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1632495751
    },
    {
        "content": "<p>How does error reporting work currently with non-next polonius? It doesn't seem like the algorithms collect the 3-point info from a quick look, so is that handled by <code>rustc</code>?</p>",
        "id": 254718499,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1632495763
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"118594\">Dylan MacKenzie (ecstatic-morse)</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/purely.20forward.20propagation/near/254718464\">said</a>:</p>\n<blockquote>\n<p>Hmm, it took me a while to wrap my head around clearing the \"invalidates\" relation for a variable when it's borrowed. It's clear that you have to do it, and it seems to work for loops and conditionals, but I don't have a great intuition for it.</p>\n</blockquote>\n<p>what do you mean by variable here? an origin?</p>",
        "id": 254718580,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632495791
    },
    {
        "content": "<p>Err, yes origin.</p>",
        "id": 254718637,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1632495815
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"337115\">@Domenic Quirl</span>  I think it's because we currently run \"one and a half borrowck\", and the piece of code which looks at NLL constraints to look for diagnostics takes care of that</p>",
        "id": 254718674,
        "sender_full_name": "lqd",
        "timestamp": 1632495826
    },
    {
        "content": "<p>I think the thing is that a <code>&amp;'x foo</code> expression is kind of \"short-hand\" for</p>\n<div class=\"codehilite\"><pre><span></span><code>{ let tmp: &amp;&#39;x T = &amp;foo; tmp }\n</code></pre></div>",
        "id": 254718803,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632495859
    },
    {
        "content": "<p>so for the same reason it makes sense to clear origins in <code>x</code> when you do <code>x = ...</code>, you can clear origins that appear in <code>tmp</code> (and remember that we assume that no origin appears in two places)</p>",
        "id": 254718883,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632495887
    },
    {
        "content": "<p>that is, that every variable has unique origins in its type</p>",
        "id": 254718914,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632495899
    },
    {
        "content": "<p>the clear would be wrong otherwise</p>",
        "id": 254718953,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632495911
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/purely.20forward.20propagation/near/254718674\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"337115\">Domenic Quirl</span>  I think it's because we currently run \"one and a half borrowck\", and the piece of code which looks at NLL constraints to look for diagnostics takes care of that</p>\n</blockquote>\n<p>so for the future this is something that needs to be added to Polonius or is the plan that this integration remains?</p>",
        "id": 254719013,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1632495935
    },
    {
        "content": "<p>And the origin that we're clearing is in <code>tmp</code>. Yes, that makes sense.</p>",
        "id": 254719033,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1632495943
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"337115\">@Domenic Quirl</span> probably still TBD. However the facts + datalog model worked quite nicely to gather that information: it's computed as part of just executing the rules.</p>",
        "id": 254719259,
        "sender_full_name": "lqd",
        "timestamp": 1632496017
    },
    {
        "content": "<p>(à la \"why is there an error here\", \"oh because this origin is invalidated, and used here\" \"why is this origin invalidated\", and so on)</p>",
        "id": 254719366,
        "sender_full_name": "lqd",
        "timestamp": 1632496058
    },
    {
        "content": "<p>(this looks more like top-down execution though)</p>",
        "id": 254719401,
        "sender_full_name": "lqd",
        "timestamp": 1632496076
    },
    {
        "content": "<p>Alright</p>",
        "id": 254719493,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1632496103
    },
    {
        "content": "<p>Then for the remaining time I think the most immediate I can do is the Python -&gt; Rust point as long as the test format is under construction</p>",
        "id": 254719604,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1632496154
    },
    {
        "content": "<p>You mind merging my previous PR on that first?</p>",
        "id": 254719775,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1632496208
    },
    {
        "content": "<p>sure</p>",
        "id": 254719795,
        "sender_full_name": "lqd",
        "timestamp": 1632496220
    },
    {
        "content": "<p>(I've kept that in sync while niko updated the rules just now, so should match)</p>",
        "id": 254719801,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1632496222
    },
    {
        "content": "<p>Thanks <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 254719937,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1632496293
    },
    {
        "content": "<p>np :)</p>",
        "id": 254719959,
        "sender_full_name": "lqd",
        "timestamp": 1632496301
    },
    {
        "content": "<p>it's still not super clear to me why we're expecting an error on line <code>e</code> on <code>vec-temp</code>, compared to <code>f</code> and <code>g</code></p>",
        "id": 254728004,
        "sender_full_name": "lqd",
        "timestamp": 1632499331
    },
    {
        "content": "<p>back now</p>",
        "id": 254730163,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632500135
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> we <em>don't</em> expect an error on line e</p>",
        "id": 254730184,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632500146
    },
    {
        "content": "<p>the problem was that we were <em>getting</em> an error before</p>",
        "id": 254730205,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632500154
    },
    {
        "content": "<p><span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 254730483,
        "sender_full_name": "lqd",
        "timestamp": 1632500265
    },
    {
        "content": "<p>that was unfortunate</p>",
        "id": 254730693,
        "sender_full_name": "lqd",
        "timestamp": 1632500348
    },
    {
        "content": "<p>but it makes sense now</p>",
        "id": 254730788,
        "sender_full_name": "lqd",
        "timestamp": 1632500385
    },
    {
        "content": "<p>sorry for the confusion</p>",
        "id": 254731375,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632500607
    },
    {
        "content": "<p>oh no worries, it also helped in trying to validate my understanding</p>",
        "id": 254731717,
        "sender_full_name": "lqd",
        "timestamp": 1632500738
    },
    {
        "content": "<p>I've been waiting until we have a functional prototype to really explore .next, but I'm curious how it would handle diamond-shaped CFGs where a loan/origin is invalidated in one branch but associated with a variable in another, and then those two branches merge back together. Something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"mi\">22</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">maybe</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// invalidate x</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"fm\">dbg!</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// access p (or *p?)</span>\n</code></pre></div>\n<p>Mostly I'm just writing this down so I don't forget.</p>",
        "id": 255979553,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1633294933
    },
    {
        "content": "<p>I don't think the <code>x = 0</code> will invalidate anything here since nothing is borrowing from x ?</p>",
        "id": 256115339,
        "sender_full_name": "lqd",
        "timestamp": 1633374734
    },
    {
        "content": "<p>but that makes <a href=\"https://github.com/nikomatsakis/polonius.next/blob/835e060c92a52598b49add8dac130ce8608490c4/tests/vec-temp/program.txt#L19-L21\">this</a> confusing vs <a href=\"https://github.com/nikomatsakis/polonius.next/blob/835e060c92a52598b49add8dac130ce8608490c4/src/polonius.dl#L34-L36\">this</a> (but the latter was surely written prior to \"loan origins\")</p>",
        "id": 256116121,
        "sender_full_name": "lqd",
        "timestamp": 1633375064
    },
    {
        "content": "<p>Hmm, so you would only invalidate loans that may reach (in the CFG) the point where the invalidation occurs?</p>",
        "id": 256117843,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1633375751
    },
    {
        "content": "<p>I thought so</p>",
        "id": 256118804,
        "sender_full_name": "lqd",
        "timestamp": 1633376106
    },
    {
        "content": "<p>Okay. I think that works. Could we encode that in datalog instead of making fact generation responsible? When we move things into fact generation we lose some of the clarity of thought that datalog provides.</p>",
        "id": 256121076,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1633377022
    },
    {
        "content": "<p>Probably hard to do if <code>invalidate_origin</code>is part of fact generation generally?</p>",
        "id": 256121776,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1633377268
    },
    {
        "content": "<p>that's a lack of clarity that I feel we have today: the thought of having a complete description of the borrowcking rules is nice and all, but in actuality it's like 50% of the problem, the other 50% are in fact generation, and the final 50% are in the surface syntax to MIR lowering pipeline (incl. desugarings, temporaries, etc) ^^</p>",
        "id": 256121912,
        "sender_full_name": "lqd",
        "timestamp": 1633377322
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"337115\">Domenic Quirl</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/purely.20forward.20propagation/near/256121776\">said</a>:</p>\n<blockquote>\n<p>Probably hard to do if <code>invalidate_origin</code>is part of fact generation generally?</p>\n</blockquote>\n<p>I don't think so, you just need to track the point at which loans originate and create a filtered version of <code>origin_invalidated</code> that only includes facts where that loan reaches the point of invalidation</p>",
        "id": 256123339,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1633377848
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"118594\">Dylan MacKenzie (ecstatic-morse)</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/purely.20forward.20propagation/near/256123339\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"337115\">Domenic Quirl</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/purely.20forward.20propagation/near/256121776\">said</a>:</p>\n<blockquote>\n<p>Probably hard to do if <code>invalidate_origin</code>is part of fact generation generally?</p>\n</blockquote>\n<p>I don't think so, you just need to track the point at which loans originate and create a filtered version of <code>origin_invalidated</code> that only includes facts where that loan reaches the point of invalidation</p>\n</blockquote>\n<p>right, I meant using the \"original\" <code>invalidate_origin</code>. I got the mental model that CFG-based rule computations are (relatively) expensive, which this would be since it includes reachability. That's partly because I recall reading some discussion on the topic of splitting CFG nodes in on-entry and on-exit, though I'd need to find that again to remember the details. So, is this actually something we need to keep in mind or not (and does it matter if the alternative is checking the same thing during fact generation)?</p>",
        "id": 256126966,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1633379115
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/purely.20forward.20propagation/near/256121912\">said</a>:</p>\n<blockquote>\n<p>that's a lack of clarity that I feel we have today: the thought of having a complete description of the borrowcking rules is nice and all, but in actuality it's like 50% of the problem, the other 50% are in fact generation, and the final 50% are in the surface syntax to MIR lowering pipeline (incl. desugarings, temporaries, etc) ^^</p>\n</blockquote>\n<p>I feel like the lowering is less of an issue conceptually, because it __should__ (with a lot of asterisks concerning that it doesn't actually in all cases) reflect the program that the user originally wrote. Or at least the semantics that Rust programmers are taught/learn about</p>",
        "id": 256128841,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1633379871
    },
    {
        "content": "<p>CFG-based rules are currently more expensive in datalog since a) we ignore basic blocks and b) we use sparse data structures (where <code>rustc</code> uses bitsets). Neither of those are fundamental restrictions.</p>\n<p>Ultimately, I hope we will end up with a \"naive\" version of the borrow-checker expressed as much as possible in datalog, with the fact generation layer kept very simple. Then an equivalent optimized version (likely hand-written, but possibly also in datalog if we are clever enough). I don't think moving things out of the \"naive\" version and into fact generation is the right approach while we're still worried about correctness. Unless the performance is so bad that running test suites becomes too onerous, but that's a high burden of proof.</p>",
        "id": 256129821,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1633380256
    },
    {
        "content": "<p>Like the fact that we need to consider reachability when deciding whether a loan is invalidated or not is part of the \"essence\" of .next, and shouldn't be hidden away in fact generation.</p>",
        "id": 256130165,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1633380391
    },
    {
        "content": "<p>the invalidations and kill rules today have the same flavour of being encoded in fact generation</p>",
        "id": 256130659,
        "sender_full_name": "lqd",
        "timestamp": 1633380644
    },
    {
        "content": "<p>I see, thanks a lot for the explanations <span class=\"user-mention\" data-user-id=\"118594\">@Dylan MacKenzie (ecstatic-morse)</span> <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 256131133,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1633380889
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"118594\">Dylan MacKenzie (ecstatic-morse)</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/purely.20forward.20propagation/near/256130165\">said</a>:</p>\n<blockquote>\n<p>Like the fact that we need to consider reachability when deciding whether a loan is invalidated or not is part of the \"essence\" of .next, and shouldn't be hidden away in fact generation.</p>\n</blockquote>\n<p>And I definitely agree with this sentiment</p>",
        "id": 256131307,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1633380969
    },
    {
        "content": "<p>I guess today's invalidation seems pretty straightforward to me (assuming I'm not missing anything). killed is more subtle, but I think it's because the underlying idea is subtle. I'm not sure how to express it better in datalog.</p>",
        "id": 256131382,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1633381018
    },
    {
        "content": "<p>Okay, two phase borrows makes it not so straightforward <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 256131779,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1633381209
    },
    {
        "content": "<p>(<em>ooor</em> if we <em>do</em> generate an invalidation of <code>'L_x</code> on assignments (except when we don't want to, for optimization purposes when nothing has borrowed <code>x</code> yet), then that would mean that instead the accesses of <code>p</code> do not access <code>'L_x</code>: it's not in the type of <code>p</code>, and only the <code>'L_x &lt;: 'p</code>relation exists — and that would look pretty much like the <code>vec-temp</code> example)</p>",
        "id": 256140595,
        "sender_full_name": "lqd",
        "timestamp": 1633385038
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/purely.20forward.20propagation/near/256116121\">said</a>:</p>\n<blockquote>\n<p>but that makes <a href=\"https://github.com/nikomatsakis/polonius.next/blob/835e060c92a52598b49add8dac130ce8608490c4/tests/vec-temp/program.txt#L19-L21\">this</a> confusing vs <a href=\"https://github.com/nikomatsakis/polonius.next/blob/835e060c92a52598b49add8dac130ce8608490c4/src/polonius.dl#L34-L36\">this</a> (but the latter was surely written prior to \"loan origins\" -- edit: actually maybe not, as it mentions them explicitly, then I'm not understanding them in the same way, evidently)</p>\n</blockquote>\n<p>I think we could use some clarification in general on what actions constitute invalidations of which origins (regarding the comments in the <code>.dl</code> file).</p>",
        "id": 256393101,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1633518567
    },
    {
        "content": "<p>I'm adding some tests, namely for the \"killing and murder\" example from <a href=\"https://hackmd.io/KpK0ICQOQLSPxIcNIlhkJQ?view#Example-killing-and-murder\">this HackMD</a></p>",
        "id": 256393245,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1633518657
    },
    {
        "content": "<p>to have that, I'm adding uses for both <code>x</code> and <code>y</code> after all of the pointer assignments, and randomly looked at <code>*y = 11</code> as a use of <code>y</code>.</p>",
        "id": 256393337,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1633518715
    },
    {
        "content": "<p>If this is translated to facts as only a use of the associated lifetime <code>'y</code> of <code>y</code>, then the version that __shouldn't__ work, because I removed the re-assignment of <code>x</code> so <code>x</code> and <code>y</code> alias, works, because the only relation between the two is in the origin <code>'L_*x</code> from <code>y</code> borrowing <code>*x</code> (which is a subset of both <code>'x</code> and <code>'y</code> because of the \"unrolling\" of <code>*x</code> from <a href=\"https://github.com/nikomatsakis/polonius.next/blob/835e060c92a52598b49add8dac130ce8608490c4/src/polonius.dl#L52\">here</a>)</p>",
        "id": 256393672,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1633518924
    },
    {
        "content": "<p>The rules work out, however, if the assignment also invalidates <code>'L_*x</code>, i.e. the origin associated with the target <code>*x</code> of <code>y</code>, which gets overwritten by the assignment</p>",
        "id": 256393836,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1633519013
    },
    {
        "content": "<p>Akin to our above discussion, I would file that under \"fact generation magic\" from the perspective of the logical rules</p>",
        "id": 256394168,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1633519209
    },
    {
        "content": "<p>But maybe a part of this is that there is no notion of mutability currently in the facts, just origins, and all of the mutability distinctions are inside the fact generation comment.</p>",
        "id": 256394300,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1633519300
    },
    {
        "content": "<p>Same with paths: currently everything is encoded into <code>'L_path</code></p>",
        "id": 256394480,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1633519382
    },
    {
        "content": "<p><a href=\"https://github.com/nikomatsakis/polonius.next/pull/3\">https://github.com/nikomatsakis/polonius.next/pull/3</a></p>",
        "id": 256396633,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1633520549
    },
    {
        "content": "<p>Side note: this was definitely interesting and necessary to get my brain to think about a few things again <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 256396888,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1633520712
    },
    {
        "content": "<p>Okay, I've got one more example that I think is problematic with PFP.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">nondet</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"fm\">todo!</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">v</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"fm\">vec!</span><span class=\"p\">[];</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">nondet</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">tmp</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// L0</span>\n<span class=\"w\">        </span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">tmp</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>We need to <code>clear</code> L0 immediately before it is created, otherwise loops with mutable borrows would always fail due to loans invalidating themselves. However, in the above example we <em>need</em> a loan to invalidate itself, since multiple copies may be stored in <code>v</code>.</p>",
        "id": 256764060,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1633709711
    },
    {
        "content": "<p>Said another way, there's only a single CFG point in which <code>L0</code> is invalid. With liveness that was fine, because invalidation of a loan at a single point while it was part of a live origin was enough to cause a borrow error. But now we rely on propagating loan invalidation until it reaches an access of a region containing that loan, and I don't think that can happen here.</p>",
        "id": 256764560,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1633709902
    },
    {
        "content": "<p><span aria-label=\"scream\" class=\"emoji emoji-1f631\" role=\"img\" title=\"scream\">:scream:</span></p>",
        "id": 256767528,
        "sender_full_name": "lqd",
        "timestamp": 1633711063
    },
    {
        "content": "<p>/me shakes fist at loops</p>",
        "id": 256768612,
        "sender_full_name": "lqd",
        "timestamp": 1633711488
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> should have a look</p>",
        "id": 256769991,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1633712127
    },
    {
        "content": "<p>yes, at everything we said this week in this thread</p>",
        "id": 256770112,
        "sender_full_name": "lqd",
        "timestamp": 1633712165
    },
    {
        "content": "<p>yeah, this is a good example. I think it's solveable, but I'll have to think about it.</p>",
        "id": 256770333,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633712273
    },
    {
        "content": "<p>We should make invalidation a topic for the sprint</p>",
        "id": 256770416,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1633712291
    },
    {
        "content": "<p>there's something missing from the model as we have it</p>",
        "id": 256770441,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633712300
    },
    {
        "content": "<p>I haven't read the other backscroll but I'll try to look a bit alter</p>",
        "id": 256770461,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633712307
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> btw I've been wondering if you had a wip--?</p>",
        "id": 256770484,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633712316
    },
    {
        "content": "<p>if so, I'd say open a PR, even if it doesn't work at all</p>",
        "id": 256770514,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633712326
    },
    {
        "content": "<p>Mutability, the path/loan targets from the test PR and <span class=\"user-mention\" data-user-id=\"118594\">@Dylan MacKenzie (ecstatic-morse)</span>'s examples all touch invalidation</p>",
        "id": 256770551,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1633712341
    },
    {
        "content": "<p>I have very little indeed, and wanted to ask more detail because it's a tad confusing, as we said in this thread</p>",
        "id": 256770768,
        "sender_full_name": "lqd",
        "timestamp": 1633712406
    },
    {
        "content": "<p>but ok</p>",
        "id": 256770777,
        "sender_full_name": "lqd",
        "timestamp": 1633712410
    },
    {
        "content": "<p>it's not gonna help much <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <a href=\"https://github.com/nikomatsakis/polonius.next/pull/4\">https://github.com/nikomatsakis/polonius.next/pull/4</a></p>",
        "id": 256771230,
        "sender_full_name": "lqd",
        "timestamp": 1633712573
    },
    {
        "content": "<p>thanks :)</p>",
        "id": 256771716,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633712761
    },
    {
        "content": "<p>I'll keep working on it, cause it's useless rn</p>",
        "id": 256771819,
        "sender_full_name": "lqd",
        "timestamp": 1633712792
    },
    {
        "content": "<p>I was blaming loops but they're not the culprit here, right ? it's the clearing of the loan origin, which stops propagating the invalidation. and if it stops propagation, then an access immediately after that will not be an error ? e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">tmp1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// invalidates and clears 'L_x</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">tmp2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// accesses non-invalidated 'L_x ???</span>\n</code></pre></div>",
        "id": 256780575,
        "sender_full_name": "lqd",
        "timestamp": 1633716224
    },
    {
        "content": "<p>Those are two different loans, not the same loan</p>",
        "id": 256781238,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1633716487
    },
    {
        "content": "<p>They are connected by the fact that they invalidate one another, but they're not literally the same</p>",
        "id": 256781324,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1633716538
    },
    {
        "content": "<p>Does that make sense?</p>",
        "id": 256781394,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1633716573
    },
    {
        "content": "<p>This would need uses for both <code>tmp</code>s to fail</p>",
        "id": 256781788,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1633716746
    },
    {
        "content": "<p>also <code>'L_x</code> is not a part of <code>x</code>, so shouldn't be accessed in the <code>tmp2</code> assignment</p>",
        "id": 256781834,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1633716772
    },
    {
        "content": "<p>Also, I just tried to put the original example (of today) into facts, and it _does_ error</p>",
        "id": 256781899,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1633716799
    },
    {
        "content": "<p>... but it only errors because the original assignment to <code>x</code> invalidates <code>L_x</code> and that erroneously propagates <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 256781972,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1633716832
    },
    {
        "content": "<p>(which may be related to the \"invalidating things that don't exist yet\" issue)</p>",
        "id": 256782120,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1633716888
    },
    {
        "content": "<p>there is a mismatch with the loop in that we have a notion of connectedness (reachability), but not one of time</p>",
        "id": 256782213,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1633716921
    },
    {
        "content": "<p>fact generation is evidently not clear to me</p>",
        "id": 256782217,
        "sender_full_name": "lqd",
        "timestamp": 1633716923
    },
    {
        "content": "<p>essentially, the issue is that the lifetime of the inner reference is extended by putting it into <code>v</code>, which makes it survive until the next iteration of the loop</p>",
        "id": 256782347,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1633716972
    },
    {
        "content": "<p>or, to phrase this differently, storing the reference in <code>v</code> prevents it from going out of scope at the end of its original iteration</p>",
        "id": 256782439,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1633717012
    },
    {
        "content": "<p>Fixing \"invalidating things that don't yet exist\" solves the example I posted earlier in the week as well, right Domenic?</p>",
        "id": 256782540,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1633717060
    },
    {
        "content": "<p>I think that was our hypothesis with the \"diamond shape\" example, yeah. I didn't look at that in fact-detail yet</p>",
        "id": 256782690,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1633717107
    },
    {
        "content": "<p>But the thing is that we _want_ today's example (I've dubbed it <code>single-invalidation-loop</code>) to still error, even without invalidating unrelated loans</p>",
        "id": 256782841,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1633717183
    },
    {
        "content": "<p>Yes. I think the underlying issues are separate. Filtering by reachability doesn't help with loops.</p>",
        "id": 256783165,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1633717316
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/sXYsQffv-lBZUJVrFGdJLiac/graph.dot.pdf\">graph.dot.pdf</a> <br>\nthis is the graph without the erroneous propagation</p>",
        "id": 256783375,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1633717403
    },
    {
        "content": "<p>I just want to note that our loop problem is exclusively with the <em>same</em> borrow within a cycle. Not different borrows of the same variable like in lqds example.</p>",
        "id": 256783444,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1633717433
    },
    {
        "content": "<p>sure, I'll delete it to stop further confusion</p>",
        "id": 256783589,
        "sender_full_name": "lqd",
        "timestamp": 1633717486
    },
    {
        "content": "<p>No no!</p>",
        "id": 256783765,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1633717556
    },
    {
        "content": "<p>It took me a while to remember that those weren't the same loan</p>",
        "id": 256783858,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1633717581
    },
    {
        "content": "<p>there's two things: neither the invalidation nor <code>subset('L_x, 'v)</code> (which is derived transitively <code>'L_x -&gt;(assignment) 'p -&gt;(push) 'tmp1 -&gt;(assignment) 'v</code>) get propagated from the repeated borrow</p>",
        "id": 256783867,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1633717585
    },
    {
        "content": "<p>it also took me a while</p>",
        "id": 256783935,
        "sender_full_name": "lqd",
        "timestamp": 1633717620
    },
    {
        "content": "<p>and I remembered that exact same point an hour ago</p>",
        "id": 256783963,
        "sender_full_name": "lqd",
        "timestamp": 1633717633
    },
    {
        "content": "<p>Because they're filtered by <code>clear_origin</code></p>",
        "id": 256783981,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1633717641
    },
    {
        "content": "<p>and have forgotten it in the same hour</p>",
        "id": 256783988,
        "sender_full_name": "lqd",
        "timestamp": 1633717645
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"118594\">Dylan MacKenzie (ecstatic-morse)</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/purely.20forward.20propagation/near/256783981\">said</a>:</p>\n<blockquote>\n<p>Because they're filtered by <code>clear_origin</code></p>\n</blockquote>\n<p>yeah</p>",
        "id": 256784015,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1633717657
    },
    {
        "content": "<p>just even if the invalidation <em>was</em> propagated, it wouldn't reach <code>v</code> and it's accesses due to subsets also being cleared</p>",
        "id": 256784128,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1633717697
    },
    {
        "content": "<p>This leads me to think that we'll need two kinds of clears, one for subset and one for invalidation</p>",
        "id": 256784206,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1633717735
    },
    {
        "content": "<p>grrrr... today on: will I ever learn how italics work in Zulip?: Probably no.</p>",
        "id": 256784253,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1633717752
    },
    {
        "content": "<p>Assuming that the self-invalidation problem is solvable</p>",
        "id": 256784278,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1633717764
    },
    {
        "content": "<p>Possible. Though only having the subsets doesn't help either ^^</p>",
        "id": 256784360,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1633717798
    },
    {
        "content": "<p>I keep coming back to liveness</p>",
        "id": 256784419,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1633717807
    },
    {
        "content": "<p>because the issue is that we can reach the same CFG point again while the original borrow is still live</p>",
        "id": 256784519,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1633717846
    },
    {
        "content": "<p>and in a way that doesn't match lexical scopes</p>",
        "id": 256784570,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1633717864
    },
    {
        "content": "<p>Yes. I'm also worried we'll end up reinventing the liveness version, but in a more convoluted way.</p>",
        "id": 256784579,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1633717867
    },
    {
        "content": "<p>But still, it's good to fully explore the solution space. Maybe there's some deeper insight to be gained. And a negative result is still a result.</p>",
        "id": 256784709,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1633717916
    },
    {
        "content": "<p>Gtg now, but we should definitely talk about this more next week</p>",
        "id": 256785041,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1633718039
    },
    {
        "content": "<p>yeah</p>",
        "id": 256785163,
        "sender_full_name": "lqd",
        "timestamp": 1633718073
    },
    {
        "content": "<p>what should we do in the meantime though</p>",
        "id": 256785191,
        "sender_full_name": "lqd",
        "timestamp": 1633718086
    },
    {
        "content": "<p>Still do fact generation with the current rules?</p>",
        "id": 256785362,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1633718154
    },
    {
        "content": "<p>(as far as we understand them)</p>",
        "id": 256785384,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1633718162
    },
    {
        "content": "<p>The manual tests are really tedious and error-prone, so I think even if we just want to try some more variations fact gen would be very useful</p>",
        "id": 256785492,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1633718198
    },
    {
        "content": "<p>it'll at least be easier to test these examples with some fact generation</p>",
        "id": 256785508,
        "sender_full_name": "lqd",
        "timestamp": 1633718206
    },
    {
        "content": "<p>and variations indeed, agreed</p>",
        "id": 256785585,
        "sender_full_name": "lqd",
        "timestamp": 1633718242
    }
]