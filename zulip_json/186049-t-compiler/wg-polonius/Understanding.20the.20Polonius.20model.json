[
    {
        "content": "<p>Hi Polonius team, after a productive thread (<a class=\"stream-topic\" data-stream-id=\"122651\" href=\"/#narrow/stream/122651-general/topic/Relationship.20between.20lifetimes.20and.20aliasing\">#general &gt; Relationship between lifetimes and aliasing</a>) I've set out to better understand the Polonius model. A first question: would you agree with this statement?</p>\n<blockquote>\n<p>In the Polonius model of borrows, the borrow checker is an abstract interpreter that computes the set of possible locations that a pointer can have at any point in the program.</p>\n</blockquote>\n<p>I realize that doesn't include details about whether the loans are mutable and whether loan terms are violated. But it struck me that Polonius looks much more like an abstract interpreter than the classic borrow checker does.</p>",
        "id": 232761511,
        "sender_full_name": "Will Crichton",
        "timestamp": 1617285853
    },
    {
        "content": "<p>Also, importantly Polonius is (in a way) a _flow-insensitive_ data analysis because the set of possible loans is accumulated across all points, rather than computed differently for each point. Therefore a reference's region has a single value, rather than a different value per point. </p>\n<p>But that description doesn't seem to take into account the refinement of <code>subset</code>/<code>requires</code> as described in Niko's blog post: <a href=\"http://smallcultfollowing.com/babysteps/blog/2018/04/27/an-alias-based-formulation-of-the-borrow-checker/#refining-constraint-propagation-with-liveness\">http://smallcultfollowing.com/babysteps/blog/2018/04/27/an-alias-based-formulation-of-the-borrow-checker/#refining-constraint-propagation-with-liveness</a></p>",
        "id": 232762938,
        "sender_full_name": "Will Crichton",
        "timestamp": 1617286346
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"265377\">Will Crichton</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Understanding.20the.20Polonius.20model/near/232761511\">said</a>:</p>\n<blockquote>\n<p>Hi Polonius team, after a productive thread (<a class=\"stream-topic\" data-stream-id=\"122651\" href=\"/#narrow/stream/122651-general/topic/Relationship.20between.20lifetimes.20and.20aliasing\">#general &gt; Relationship between lifetimes and aliasing</a>) I've set out to better understand the Polonius model. A first question: would you agree with this statement?</p>\n<blockquote>\n<p>In the Polonius model of borrows, the borrow checker is an abstract interpreter that computes the set of possible locations that a pointer can have at any point in the program.</p>\n</blockquote>\n</blockquote>\n<p>Yes. This is exactly what Prusti exploits for verification.</p>",
        "id": 232816641,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1617307407
    },
    {
        "content": "<p>Just it is important to note that when you cross the function boundary, the lifetimes act as a way to abstract over possible locations.</p>",
        "id": 232816745,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1617307451
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"265377\">Will Crichton</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Understanding.20the.20Polonius.20model/near/232762938\">said</a>:</p>\n<blockquote>\n<p>Also, importantly Polonius is (in a way) a _flow-insensitive_ data analysis because the set of possible loans is accumulated across all points, rather than computed differently for each point. Therefore a reference's region has a single value, rather than a different value per point. </p>\n</blockquote>\n<p>This sounds wrong to me, probably I do not understand what you mean. Could you give an example?</p>",
        "id": 232817110,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1617307617
    },
    {
        "content": "<p>In Polonius, <code>loan_live_at(L, P)</code> is computed for each program point <code>P</code> as described in Niko's <a href=\"http://smallcultfollowing.com/babysteps/blog/2018/04/27/an-alias-based-formulation-of-the-borrow-checker/\">blog post</a>.</p>",
        "id": 232817440,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1617307750
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116109\">@Vytautas Astrauskas [he/him]</span> thanks for the clarification. And actually the flow-sensitive part isn't super important, so don't worry about that.</p>\n<p>But I do actually have a question for you -- I'm trying to write an OOPSLA paper about my Rust program slicer. One goal is to create a more formal argument for why the borrow checker's information is sufficient to conservatively estimate the aliases for any borrow (at the MIR level). Do you know of any related work that makes a similar argument? I've checked out Prusti, RustBelt, and Oxide but none seems quite appropriate -- Prusti focuses on encoding into Viper, RustBelt focuses on implications of unsafe and uses an outdated notion of lifetimes, and Oxide focuses on surface-level Rust and not MIR.</p>",
        "id": 232819494,
        "sender_full_name": "Will Crichton",
        "timestamp": 1617308681
    },
    {
        "content": "<p>My current intuition (and the relevance to Polonius) is to make the following argument:</p>\n<ul>\n<li>MIR pointers have an unknown \"true provenance\", or the set of loans they can actually refer to in any possible execution of the program</li>\n<li>\n<p>Pointers are annotated with a provenance variable, and the borrow checker tells us two things about provenance variables: </p>\n<ol>\n<li>if the provenance variable is the direct result of a loan (ie an &amp;p rvalue)</li>\n<li>outlives relations between the provenance variable and other provenance variables</li>\n</ol>\n</li>\n<li>\n<p>A pointer's approximate provenance can be computed as the union of the approximate provenance of all pointers that outlive it plus any direct loans</p>\n</li>\n<li>If the borrow checker correctly computes the necessary set of outlives relations, then a pointer's approximate provenance is a superset of the true provenance, and hence a sound approximation to the aliases of the pointer</li>\n</ul>",
        "id": 232820242,
        "sender_full_name": "Will Crichton",
        "timestamp": 1617309010
    },
    {
        "content": "<p>I'm trying to figure out:<br>\na) is this argument correct?<br>\nb) if so, do I need to define my own  MIR formalism, or I can reuse one like e.g. in RustBelt<br>\nc) which parts of this argument have already been made in related work vs. I need to justify myself<br>\nd) how to precisely talk about the \"necessary set of outlives relations\", ie the sufficient condition that rustc must meet for alias analysis to be correct</p>",
        "id": 232820968,
        "sender_full_name": "Will Crichton",
        "timestamp": 1617309307
    },
    {
        "content": "<blockquote>\n<p>One goal is to create a more formal argument for why the borrow checker's information is sufficient to conservatively estimate the aliases for any borrow (at the MIR level).</p>\n</blockquote>\n<p>Isn't this basically an argument that the Rust type system is sound?</p>",
        "id": 232822490,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1617310004
    },
    {
        "content": "<p>Or to phrase it differently: if the borrow checker's information would not be sufficient, I, think, that would imply that the Rust type system is unsound.</p>",
        "id": 232822691,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1617310096
    },
    {
        "content": "<blockquote>\n<p>RustBelt focuses uses an outdated notion of lifetimes</p>\n</blockquote>\n<p>I would not agree with this. Even though the paper was written before NLL and Polonius, I think the presented approach is flexible enough to handle most examples. I know that there are problems with two-phase borrows, but that is the only limitation I remember.</p>",
        "id": 232823135,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1617310286
    },
    {
        "content": "<blockquote>\n<p>a) is this argument correct?</p>\n</blockquote>\n<p>I do not see any mistakes, but it is also a bit late now for me to give a proper answer.</p>\n<blockquote>\n<p>b) if so, do I need to define my own MIR formalism, or I can reuse one like e.g. in RustBelt</p>\n</blockquote>\n<p>This literary looks like you are trying to prove the soundness of Polonius. One option would be to try to prove it against operational semantics, which would be <a href=\"https://www.ralfj.de/blog/2019/11/18/stacked-borrows-paper.html\">Stacked Borrows</a>.</p>\n<blockquote>\n<p>c) which parts of this argument have already been made in related work vs. I need to justify myself</p>\n</blockquote>\n<p>Do you actually need to? Cannot you just assume the correctness of the compiler?</p>",
        "id": 232825264,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1617311225
    },
    {
        "content": "<p>Re: the type system, I agree, and part of the point is to elucidate the link between alias analysis and Rust's type system.  Rust doesn't actually compute aliases and use them in type checking, so it's not immediately obvious that the borrow checker outputs are sufficient to compute aliases.</p>\n<p>And yes I don't meant to imply that the RustBelt formalism is no longer useful. But rather the connection between borrows and aliases is much clearer (I think) when lifetimes are provenances (ie set of loans) instead of regions (sets of locations).</p>",
        "id": 232825294,
        "sender_full_name": "Will Crichton",
        "timestamp": 1617311244
    },
    {
        "content": "<p>One key bit is that I'd like to articulate this point in a way that's distinct from whether Rust is using classic borrow checking, NLL, or Polonius. I want to say \"if a compiler infers at least the right set of outlives constraints, then this method of computing aliases is sound\" and then make a high-level argument as to why any particular version of the borrow checker infers the \"right\" set of constraints.</p>",
        "id": 232825702,
        "sender_full_name": "Will Crichton",
        "timestamp": 1617311444
    },
    {
        "content": "<p>Couldn't you make an argument that if the borrow checker would not do a proper over-approximation of aliases, the type system would be unsound?</p>",
        "id": 232825894,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1617311527
    },
    {
        "content": "<p>I do not think you can have the same proof for all three versions of the borrow checker.</p>",
        "id": 232825965,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1617311581
    },
    {
        "content": "<blockquote>\n<p>And yes I don't meant to imply that the RustBelt formalism is no longer useful. But rather the connection between borrows and aliases is much clearer (I think) when lifetimes are provenances (ie set of loans) instead of regions (sets of locations).</p>\n</blockquote>\n<p>As far as I understand RustBelt, it actually does not care which interpretation of lifetimes you take. It works with both.</p>",
        "id": 232826182,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1617311640
    },
    {
        "content": "<blockquote>\n<p>Couldn't you make an argument that if the borrow checker would not do a proper over-approximation of aliases, the type system would be unsound?</p>\n</blockquote>\n<p>Yes this seems reasonable. I'll have to think about the argument, thanks for the suggestion.</p>\n<blockquote>\n<p>As far as I understand RustBelt, it actually does not care which interpretation of lifetimes you take. It works with both.</p>\n</blockquote>\n<p>Ok, I will see if I can make the argument above using the RustBelt model.</p>",
        "id": 232826495,
        "sender_full_name": "Will Crichton",
        "timestamp": 1617311811
    }
]