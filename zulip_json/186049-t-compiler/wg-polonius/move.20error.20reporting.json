[
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span></p>",
        "id": 205802906,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596466259
    },
    {
        "content": "<p>hey</p>",
        "id": 205802932,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596466272
    },
    {
        "content": "<p>Ok, so I started looking at how move errors work currently, and it's the same kind of \"moving balls under cups\" type of situation as I remember from before</p>",
        "id": 205803150,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596466349
    },
    {
        "content": "<p>Various bits of data going into various data structures, etc</p>",
        "id": 205803181,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596466363
    },
    {
        "content": "<p>heh</p>",
        "id": 205803182,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596466363
    },
    {
        "content": "<p>yes</p>",
        "id": 205803196,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596466372
    },
    {
        "content": "<p>But as far as I understand it, move errors are generated early, before even the Polonius facts are assembled</p>",
        "id": 205803218,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596466383
    },
    {
        "content": "<p>I think at some point I was trying to keep a line so that the move error reporting largely recomputed details that it needed,</p>",
        "id": 205803224,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596466386
    },
    {
        "content": "<p>partly to make polonius error reporting easier</p>",
        "id": 205803244,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596466394
    },
    {
        "content": "<p>And I haven't figured out where they are actually emitted yet</p>",
        "id": 205803246,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596466396
    },
    {
        "content": "<p>but that may have given way to expediency</p>",
        "id": 205803249,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596466397
    },
    {
        "content": "<p>there are also perhaps a few different phases</p>",
        "id": 205803278,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596466411
    },
    {
        "content": "<p>It seems like something like that to me</p>",
        "id": 205803306,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596466423
    },
    {
        "content": "<p>i.e., I know we report <em>some</em> errors when we create \"move paths\", like a move of a field of a struct w/ dtor</p>",
        "id": 205803314,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596466426
    },
    {
        "content": "<p>hmm</p>",
        "id": 205803485,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596466499
    },
    {
        "content": "<p>I wouldn't say that was apparent from what I read</p>",
        "id": 205803521,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596466516
    },
    {
        "content": "<p>I could be wrong but I'm pretty sure :)</p>",
        "id": 205803601,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596466560
    },
    {
        "content": "<p>I'm loading up the code now</p>",
        "id": 205803694,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596466594
    },
    {
        "content": "<p>It seems to me like the reporting happens somewhere in <code>borrow_check</code>, in the function <code>do_mir_borrowck</code>, possibly only on lines 314 and 357</p>",
        "id": 205803969,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596466730
    },
    {
        "content": "<p>But they accumulate earlier than that. I'm having trouble following the \"promoted\" errors</p>",
        "id": 205804120,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596466796
    },
    {
        "content": "<p>ok so</p>",
        "id": 205804262,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596466844
    },
    {
        "content": "<p>on line 287 you have</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code>    if let Err((move_data, move_errors)) = move_data_results {\n</code></pre></div>\n\n\n</blockquote>",
        "id": 205804293,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596466851
    },
    {
        "content": "<p>my memory is that the <code>move_errors</code> here refer to paths that were moved but which are not allowed to be moved</p>",
        "id": 205804321,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596466864
    },
    {
        "content": "<p>I guess those errors aren't <em>reported</em> yet, just gathered</p>",
        "id": 205804353,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596466878
    },
    {
        "content": "<p>oh, well, then there is this line (314)</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code>        promoted_mbcx.report_move_errors(move_errors);\n</code></pre></div>\n\n\n</blockquote>",
        "id": 205804398,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596466896
    },
    {
        "content": "<p>It seems like that, but I also think there is some recomputation done as well, on the <code>promoted_errors</code> as well?</p>",
        "id": 205804496,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596466922
    },
    {
        "content": "<p>but let me check I mean maybne I'm wrong :)</p>",
        "id": 205804499,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596466922
    },
    {
        "content": "<p>The move errors also have categories, it seems</p>",
        "id": 205804550,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596466937
    },
    {
        "content": "<p>well</p>",
        "id": 205804570,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596466942
    },
    {
        "content": "<p>we do some consolidation I thnk</p>",
        "id": 205804581,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596466945
    },
    {
        "content": "<p>ok I see</p>",
        "id": 205804695,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596466996
    },
    {
        "content": "<p>It seems the first difference is between moves out of a union or an \"illegal move\"</p>",
        "id": 205804702,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596467000
    },
    {
        "content": "<p>so the \"promoted\" MIR is basically inline constants</p>",
        "id": 205804710,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596467003
    },
    {
        "content": "<p>ah</p>",
        "id": 205804734,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596467011
    },
    {
        "content": "<p>so when we compile a function <code>foo</code></p>",
        "id": 205804764,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596467023
    },
    {
        "content": "<p>we actually create a little tree of <code>foo</code> plus any inline constants</p>",
        "id": 205804794,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596467034
    },
    {
        "content": "<p>these are called \"promoted\" because the idea is that we \"promote\" some expressions from runtime to compilation time</p>",
        "id": 205804861,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596467048
    },
    {
        "content": "<p>e.g., <code>let x = 22 + 44</code> the <code>22+44</code> would be promoted</p>",
        "id": 205804882,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596467056
    },
    {
        "content": "<p>you can see this because <code>let x: &amp;'static u32 = &amp;(22 + 44)</code> is legal</p>",
        "id": 205804906,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596467066
    },
    {
        "content": "<p>Ah, I see</p>",
        "id": 205804933,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596467080
    },
    {
        "content": "<p>anyway for each of those promoted expressions we have a little \"attached MIR\" that gets borrow checked at the same time</p>",
        "id": 205804940,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596467082
    },
    {
        "content": "<p>oh ok, and we have to borrow-check them separately</p>",
        "id": 205804983,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596467102
    },
    {
        "content": "<p>yeah, they are basically distinct functions</p>",
        "id": 205805371,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596467249
    },
    {
        "content": "<p>anyway it looks like <code>report_move_errors</code> is <em>only</em>  reporting illegal moves</p>",
        "id": 205805550,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596467327
    },
    {
        "content": "<p>do you know if we are even detecting those presently in polonius?</p>",
        "id": 205805564,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596467334
    },
    {
        "content": "<p>I think the <em>other</em> errors get reported during this code:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"w\">    </span><span class=\"n\">dataflow</span>::<span class=\"n\">visit_results</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"n\">body</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">traversal</span>::<span class=\"n\">reverse_postorder</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">body</span><span class=\"p\">).</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"p\">(</span><span class=\"n\">bb</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">bb</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"n\">results</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">mbcx</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 205805636,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596467375
    },
    {
        "content": "<p>Aah, I see</p>",
        "id": 205805653,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596467386
    },
    {
        "content": "<p>that code basically walks over the control-flow graph and triggers callbacks for each statement etc</p>",
        "id": 205805673,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596467401
    },
    {
        "content": "<p>at that point, the various dataflow sets are updated with the location being visited</p>",
        "id": 205805722,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596467410
    },
    {
        "content": "<p>on line 573 you can see</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;cx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">dataflow</span>::<span class=\"n\">ResultsVisitor</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;cx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">MirBorrowckCtxt</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;cx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 205805757,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596467433
    },
    {
        "content": "<p>which defines those callbacks</p>",
        "id": 205805787,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596467452
    },
    {
        "content": "<p>for example</p>",
        "id": 205805788,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596467453
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">visit_statement_before_primary_effect</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">flow_state</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Flows</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;cx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">stmt</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;cx</span><span class=\"w\"> </span><span class=\"n\">Statement</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">location</span>: <span class=\"nc\">Location</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">debug</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;MirBorrowckCtxt::process_statement({:?}, {:?}): {:?}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">location</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">stmt</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">flow_state</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">span</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">stmt</span><span class=\"p\">.</span><span class=\"n\">source_info</span><span class=\"p\">.</span><span class=\"n\">span</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">check_activations</span><span class=\"p\">(</span><span class=\"n\">location</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">span</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">flow_state</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">stmt</span><span class=\"p\">.</span><span class=\"n\">kind</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">StatementKind</span>::<span class=\"n\">Assign</span><span class=\"p\">(</span><span class=\"k\">box</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lhs</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"n\">rhs</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">consume_rvalue</span><span class=\"p\">(</span><span class=\"n\">location</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">rhs</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">span</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">flow_state</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">                </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">mutate_place</span><span class=\"p\">(</span><span class=\"n\">location</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">lhs</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">span</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">Shallow</span><span class=\"p\">(</span><span class=\"nb\">None</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">JustWrite</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">flow_state</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 205805792,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596467455
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/move.20error.20reporting/near/205805550\">said</a>:</p>\n<blockquote>\n<p>anyway it looks like <code>report_move_errors</code> is <em>only</em>  reporting illegal moves</p>\n</blockquote>\n<p>No, I don't think we do, at least not unless they trigger some other kind of error</p>",
        "id": 205805825,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596467477
    },
    {
        "content": "<p>this is invoked on the statement -- the name \"before primary effect\" means that the <code>flow_state</code> contains the values before the statement takes eeffect</p>",
        "id": 205805833,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596467479
    },
    {
        "content": "<p>I also don't think we do, we should probably add this to some list of \"things to think about\"</p>",
        "id": 205805857,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596467493
    },
    {
        "content": "<p>anyway, if you click <code>consume_rvalue</code> (say)</p>",
        "id": 205805881,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596467510
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">consume_rvalue</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">location</span>: <span class=\"nc\">Location</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"n\">rvalue</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">span</span><span class=\"p\">)</span>: <span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"na\">&#39;cx</span><span class=\"w\"> </span><span class=\"n\">Rvalue</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Span</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">flow_state</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Flows</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;cx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>on line 1249</p>",
        "id": 205805922,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596467522
    },
    {
        "content": "<p><em>it</em> will take you to <code>access_place</code></p>",
        "id": 205805958,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596467536
    },
    {
        "content": "<p>the comment claims this checks the initialization state</p>",
        "id": 205806034,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596467585
    },
    {
        "content": "<p>but I haven't found that code yet :)</p>",
        "id": 205806043,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596467591
    },
    {
        "content": "<p>ah well</p>",
        "id": 205806065,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596467602
    },
    {
        "content": "<p>Well I'm using emacs so there's no clicking</p>",
        "id": 205806073,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596467607
    },
    {
        "content": "<p>rust-analyzer works with ermacs ;)</p>",
        "id": 205806096,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596467619
    },
    {
        "content": "<p>but ok</p>",
        "id": 205806100,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596467621
    },
    {
        "content": "<p>But I guess I really should have something with a bit better code navigation</p>",
        "id": 205806101,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596467621
    },
    {
        "content": "<p>Just for...code navigation</p>",
        "id": 205806125,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596467636
    },
    {
        "content": "<p>(I've converted to vscode with rust-analyzer, it's pretty nice)</p>",
        "id": 205806198,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596467653
    },
    {
        "content": "<p>anyway, <code>check_access_permissions</code> does do at least <em>some</em> checking</p>",
        "id": 205806237,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596467668
    },
    {
        "content": "<p>i.e., it reports an error if you assign to a non-mutable local variable <em>and</em> that variable has ever been assigned before</p>",
        "id": 205806357,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596467693
    },
    {
        "content": "<p>(I'm seriously considering something like that)</p>",
        "id": 205806406,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596467704
    },
    {
        "content": "<p>I guess that's probably something we left out of the rules too</p>",
        "id": 205806424,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596467707
    },
    {
        "content": "<p>haha surprise</p>",
        "id": 205806529,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596467729
    },
    {
        "content": "<p>I guess we must have, since we don't have any notion of mutability</p>",
        "id": 205806655,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596467776
    },
    {
        "content": "<p><code>check_if_full_path_is_moved</code></p>",
        "id": 205806826,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596467880
    },
    {
        "content": "<p>invoked from <code>check_if_path_or_subpath_is_moved</code></p>",
        "id": 205806901,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596467895
    },
    {
        "content": "<p>invoked from <code>consume_rvalue</code></p>",
        "id": 205806939,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596467912
    },
    {
        "content": "<p>I thik that the comments on <code>access_place</code> are just a bit wrong</p>",
        "id": 205806949,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596467918
    },
    {
        "content": "<p>anyway, that seems to be the code that actually checks that each place expression (path) that we access is initialized</p>",
        "id": 205806971,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596467934
    },
    {
        "content": "<p>if it finds that there is an access to a location that was moved, it invokes</p>",
        "id": 205807014,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596467960
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"w\">            </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">report_use_of_moved_or_uninitialized</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">location</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">desired_action</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">(</span><span class=\"n\">prefix</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">place_span</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">place_span</span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">mpi</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 205807028,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596467968
    },
    {
        "content": "<p>so that's probably roughly speaking the code we want to try and hook into</p>",
        "id": 205807083,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596467992
    },
    {
        "content": "<p>...this would have taken me <em>days</em></p>",
        "id": 205807319,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596468116
    },
    {
        "content": "<p>I guess the question is how difficult it will be :)</p>",
        "id": 205807808,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596468361
    },
    {
        "content": "<p>I have to go look at those arguments</p>",
        "id": 205807855,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596468367
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"k\">crate</span>::<span class=\"n\">borrow_check</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">report_use_of_moved_or_uninitialized</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">location</span>: <span class=\"nc\">Location</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">desired_action</span>: <span class=\"nc\">InitializationRequiringAction</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"n\">moved_place</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">used_place</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">span</span><span class=\"p\">)</span>: <span class=\"p\">(</span><span class=\"n\">PlaceRef</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">PlaceRef</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Span</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">mpi</span>: <span class=\"nc\">MovePathIndex</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 205807872,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596468378
    },
    {
        "content": "<p>so the <code>desired_action</code> ...</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"cp\">#[derive(Copy, Clone, Debug)]</span><span class=\"w\"></span>\n<span class=\"k\">enum</span> <span class=\"nc\">InitializationRequiringAction</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Update</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Borrow</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">MatchOn</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Use</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Assignment</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">PartialAssignment</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 205807922,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596468409
    },
    {
        "content": "<p>well, let's step back a second, what does a polonius error look like</p>",
        "id": 205807950,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596468428
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>move_error(Path, TargetNode) :-\n    path_maybe_uninitialized_on_exit(Path, SourceNode),\n    cfg_edge(SourceNode, TargetNode),\n    path_accessed_at(Path, TargetNode).\n</code></pre></div>",
        "id": 205807978,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596468446
    },
    {
        "content": "<p>heh ok so we're missing some info to give truly <em>good</em> errors</p>",
        "id": 205808084,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596468503
    },
    {
        "content": "<p>but we can fake it a bit to start</p>",
        "id": 205808091,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596468508
    },
    {
        "content": "<p>we don't know the <em>initialization requiring action</em></p>",
        "id": 205808107,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596468516
    },
    {
        "content": "<p>we also don't know the <em>moved place</em></p>",
        "id": 205808121,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596468522
    },
    {
        "content": "<p>side note that we should <em>probably</em> change from <code>Path</code> in our nomenclature to <code>Place</code></p>",
        "id": 205808182,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596468547
    },
    {
        "content": "<p>even though I prefer <code>Path</code>, I think I've lost that argument and I don't care to keep arguing about it :)</p>",
        "id": 205808212,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596468562
    },
    {
        "content": "<p>anyway, the \"moved place\" is, well, the one that was moved</p>",
        "id": 205808431,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596468668
    },
    {
        "content": "<p>and the \"used place\" is the one that was used</p>",
        "id": 205808439,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596468672
    },
    {
        "content": "<p>but in the polonius rules as we wrote them, we kind of eagerly \"expand\" the set of moved places, right?</p>",
        "id": 205808457,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596468684
    },
    {
        "content": "<p>i.e, if you move <code>a</code> at location P, we also consider that a move of <code>a.b</code> and <code>a.c</code></p>",
        "id": 205808483,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596468696
    },
    {
        "content": "<p>so that by the time we get to the access, we don't know the original moved path</p>",
        "id": 205808498,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596468705
    },
    {
        "content": "<p>this may <em>also</em> be a source of inefficiency</p>",
        "id": 205808506,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596468712
    },
    {
        "content": "<p>I'm not sure, but reporting inaccurate information <em>may</em> lead to ICEs during error reporting</p>",
        "id": 205808589,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596468737
    },
    {
        "content": "<p>worth a try though :)</p>",
        "id": 205808591,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596468739
    },
    {
        "content": "<p>i.e., we could give a dummy use and use the same path for use/move place</p>",
        "id": 205808618,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596468751
    },
    {
        "content": "<p>the <code>mpi</code> we ought to be able to just lookup</p>",
        "id": 205808646,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596468768
    },
    {
        "content": "<p>does that all make sense?</p>",
        "id": 205808650,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596468770
    },
    {
        "content": "<p>I guess the question then is whether we want to re-formulate the rules to track more information -- for example, we could include the <code>InitializationRequiringAction</code> in the <code>path_accessed_at</code> fact readily enough</p>",
        "id": 205808729,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596468807
    },
    {
        "content": "<p>the harder bit is the move-path vs used-path</p>",
        "id": 205808876,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596468859
    },
    {
        "content": "<p>this may be related to the errors around partial initialization, actually</p>",
        "id": 205808922,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596468882
    },
    {
        "content": "<p>because I think part of what makes it hard is stuff like</p>\n<ul>\n<li>move the path <code>p</code></li>\n<li>initialize the path <code>p.q</code></li>\n</ul>",
        "id": 205808970,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596468909
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/move.20error.20reporting/near/205808650\">said</a>:</p>\n<blockquote>\n<p>does that all make sense?</p>\n</blockquote>\n<p>Yes!</p>",
        "id": 205809067,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596468955
    },
    {
        "content": "<p>the current Polonius code will handle this correctly, but if you just stored the actual moves/initializations, that'd be confusing, because initializing the path <code>p.q</code> kind of \"undoes\" the effect of moving <code>p</code> but only partially</p>",
        "id": 205809068,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596468955
    },
    {
        "content": "<p>ah</p>",
        "id": 205809214,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596469015
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/move.20error.20reporting/near/205808729\">said</a>:</p>\n<blockquote>\n<p>I guess the question then is whether we want to re-formulate the rules to track more information -- for example, we could include the <code>InitializationRequiringAction</code> in the <code>path_accessed_at</code> fact readily enough</p>\n</blockquote>\n<p>I'm not sure I follow this</p>",
        "id": 205809234,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596469027
    },
    {
        "content": "<p>What is <code>InitializationRequiringAction</code>? A \"tag\"? Also what does it actually mean?</p>",
        "id": 205809302,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596469067
    },
    {
        "content": "<p>it is used for error reporting</p>",
        "id": 205809484,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596469145
    },
    {
        "content": "<p>it just describes the kind of thing that the code was doing</p>",
        "id": 205809492,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596469150
    },
    {
        "content": "<p>so that we can report it to the user</p>",
        "id": 205809502,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596469155
    },
    {
        "content": "<p>i.e., <code>match foo.bar</code> and <code>drop(foo.bar)</code> wind up getting reported slightly differently</p>",
        "id": 205809537,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596469176
    },
    {
        "content": "<p>but both access <code>foo.bar</code></p>",
        "id": 205809543,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596469180
    },
    {
        "content": "<p>something like that</p>",
        "id": 205809556,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596469188
    },
    {
        "content": "<p>Ah, ok I see, so we would need to sort of keep that around as a label</p>",
        "id": 205810186,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596469449
    },
    {
        "content": "<p>yeah</p>",
        "id": 205810252,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596469477
    },
    {
        "content": "<p>one other thing is that I imagine we're going to get a lot of duplicate errors</p>",
        "id": 205810277,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596469491
    },
    {
        "content": "<p>with the current propagation setup the way it is</p>",
        "id": 205810285,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596469495
    },
    {
        "content": "<p>e.g., if you have something like this:</p>",
        "id": 205810313,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596469503
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">initialize</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"o\">&amp;</span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"o\">&amp;</span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">y</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"nb\">drop</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"nb\">drop</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 205810363,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596469532
    },
    {
        "content": "<p>I think that we would create paths for <code>p.x</code> and <code>p.y</code></p>",
        "id": 205810382,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596469541
    },
    {
        "content": "<p>and when we initialize <code>p</code> we will propagate forward <code>p.x</code> and <code>p.y</code></p>",
        "id": 205810400,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596469550
    },
    {
        "content": "<p>but then we will expand <code>drop(p)</code> to an access of <code>p</code>, <code>p.x</code> and <code>p.y</code></p>",
        "id": 205810444,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596469563
    },
    {
        "content": "<p>and the <em>second</em> drop will report <em>three</em> errors</p>",
        "id": 205810467,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596469571
    },
    {
        "content": "<p>so maybe it really is worth thinking about reformulating the rules in a less... eager to expand sort of way</p>",
        "id": 205810508,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596469595
    },
    {
        "content": "<p>this would probably also do wonders for efficiency</p>",
        "id": 205810523,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596469602
    },
    {
        "content": "<p>Hm, yes, I guess so</p>",
        "id": 205810770,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596469721
    },
    {
        "content": "<p>It <em>would</em> be interesting to see what that does for performance and the OOM problems</p>",
        "id": 205810824,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596469758
    },
    {
        "content": "<p>Probably not much, but one can hope</p>",
        "id": 205810840,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596469770
    },
    {
        "content": "<p>it'd be a lot fewer facts to propagate</p>",
        "id": 205810855,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596469783
    },
    {
        "content": "<p>I think though an interesting question is what we would do about partial re-initialization</p>",
        "id": 205810933,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596469810
    },
    {
        "content": "<p>I remember when we made that an error in the NLL checker, we were basically going for consistency, but we thought that probably we ultimately wanted to support it</p>",
        "id": 205810962,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596469826
    },
    {
        "content": "<p>Still, I think it's ok if we take advantage of that in polonius for now :P</p>",
        "id": 205811004,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596469841
    },
    {
        "content": "<p>I would think it s probably not enough to completely \"change the game\" when it comes to perf, that we would also want to consider adopting a basic-block-based analysis</p>",
        "id": 205811089,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596469888
    },
    {
        "content": "<p>(Though one could certainly express that in datalog, whether one <em>should</em> is another question)</p>",
        "id": 205811106,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596469898
    },
    {
        "content": "<p>(When it comes to perf, another interesting question that I don't know the answer to: polonius uses tuples, which are optimized for \"sparse\" computations. rustc uses bitsets, which are more efficient, but you pay the worst-case cost all the time. Actually I can't remember, rustc may be using sparse bitsets as a kind of hybrid)</p>",
        "id": 205811249,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596469965
    },
    {
        "content": "<p>Hm</p>",
        "id": 205811499,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596470080
    },
    {
        "content": "<p>reading the rules it doesn't seem like it'd be <em>that</em> hard to convert</p>",
        "id": 205811532,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596470094
    },
    {
        "content": "<p>I think maybe we would need to change the rules to run initialisation \"backwards\"</p>",
        "id": 205811541,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596470098
    },
    {
        "content": "<p>I.e. let the access propagate transitively down the move path and hit the move, rather than the other way around?</p>",
        "id": 205811601,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596470126
    },
    {
        "content": "<p>so, if you assume that \"partially initialization\" a moved path is illegal</p>",
        "id": 205811610,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596470132
    },
    {
        "content": "<p>i.e., if I move a path P, I cannot then initialize some child path of P, I must initialize P itself</p>",
        "id": 205811641,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596470148
    },
    {
        "content": "<p>(or an ancestor of P, perhaps)</p>",
        "id": 205811713,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596470168
    },
    {
        "content": "<p>these rules:</p>",
        "id": 205811746,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596470186
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>path_maybe_uninitialized_on_exit(Path, Node) :-\n    path_moved_at(Path, Node).\n\npath_maybe_uninitialized_on_exit(Path, TargetNode) :-\n    path_maybe_uninitialized_on_exit(Path, SourceNode),\n    cfg_edge(SourceNode, TargetNode),\n    !path_assigned_at(Path, TargetNode).\n</code></pre></div>",
        "id": 205811748,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596470188
    },
    {
        "content": "<p>if you change <code>path_moved_at</code> to <code>path_moved_at_base</code></p>",
        "id": 205811770,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596470201
    },
    {
        "content": "<p>I think they \"just work\"</p>",
        "id": 205811817,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596470222
    },
    {
        "content": "<p>it gets harder if you permit partial initialization, though not impossible, you'd have to add in some extra facts</p>",
        "id": 205811870,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596470243
    },
    {
        "content": "<p>at that point, the <code>path_maybe_unitialized_on_exit</code> is a bit of a misnomer though</p>",
        "id": 205811892,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596470259
    },
    {
        "content": "<p>it's kind of <code>path_maybe_moved_on_exit</code></p>",
        "id": 205811897,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596470264
    },
    {
        "content": "<p>and then you need to modify the <code>move_error</code> rule to be something like</p>",
        "id": 205811967,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596470283
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>move_error(Path, TargetNode) :-\n    path_maybe_moved_on_exit(AncestorPath, SourceNode),\n    cfg_edge(SourceNode, TargetNode),\n    path_accessed_at_base(Path, TargetNode), // &lt;-- changed to base\n    path_ancestor(AncestorPath, Path).\n</code></pre></div>",
        "id": 205812035,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596470318
    },
    {
        "content": "<p>maybe <code>path_maybe_directly_moved_on_exit</code> is a better name :P</p>",
        "id": 205812084,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596470342
    },
    {
        "content": "<p>(you would of course want to remove <code>path_assigned_at</code> entirely, also in the rules above)</p>",
        "id": 205812123,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596470364
    },
    {
        "content": "<p>the idea would be to only expand the relationships between paths once, independently of any node</p>",
        "id": 205812141,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596470378
    },
    {
        "content": "<p>ah, ok I see</p>",
        "id": 205812155,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596470388
    },
    {
        "content": "<p>we would do a similar thing for <code>path_maybe_initialized_on_exit</code>, I imagine...</p>",
        "id": 205812268,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596470429
    },
    {
        "content": "<p>is the only role of that to compute <code>var_maybe_partly_initialized_on_exit</code>?</p>",
        "id": 205812284,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596470437
    },
    {
        "content": "<p>it appears so</p>",
        "id": 205812307,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596470450
    },
    {
        "content": "<p>because surely we could do <em>that</em> more efficiently too... :)</p>",
        "id": 205812395,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596470487
    },
    {
        "content": "<p>but I guess that's independent, \"just\" an optimiztion</p>",
        "id": 205812434,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596470518
    },
    {
        "content": "<p>Haha</p>",
        "id": 205812454,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596470523
    },
    {
        "content": "<p>I wonder if I should start with the rustc connection anyway, despite knowing it will blow up, and then work on the polonius changes</p>",
        "id": 205812550,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596470564
    },
    {
        "content": "<p>(side note that I remember putting quite a bit of effort into hand-tuning the liveness computation in rustc, and in particular it takes advantage of the fact that \"drop live\" is a superset of \"use live\" )</p>",
        "id": 205812562,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596470576
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"204115\">Albin Stjerna</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/move.20error.20reporting/near/205812550\">said</a>:</p>\n<blockquote>\n<p>I wonder if I should start with the rustc connection anyway, despite knowing it will blow up, and then work on the polonius changes</p>\n</blockquote>\n<p>yeah I was wondering the same</p>",
        "id": 205812574,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596470584
    },
    {
        "content": "<p>might make sense</p>",
        "id": 205812590,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596470592
    },
    {
        "content": "<p>Just because that would be an easier way of running Polonius</p>",
        "id": 205812598,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596470596
    },
    {
        "content": "<p>it'd be nice to be able to visualize the errors</p>",
        "id": 205812604,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596470599
    },
    {
        "content": "<p>even if we just do it for individual tests</p>",
        "id": 205812612,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596470604
    },
    {
        "content": "<p>Also lets me wait for the cargo bug to be fixed</p>",
        "id": 205812617,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596470606
    },
    {
        "content": "<p>right</p>",
        "id": 205812623,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596470610
    },
    {
        "content": "<p>well I think you should be able to mock <em>something</em> up based on what I said above</p>",
        "id": 205812859,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596470738
    },
    {
        "content": "<p>I'm curious if it will ICE like crazy but worth a try</p>",
        "id": 205812882,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596470746
    },
    {
        "content": "<p>Yes!</p>",
        "id": 205814065,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596471370
    },
    {
        "content": "<p>ah Albin in case you haven't seen it, <a href=\"https://github.com/rust-lang/rust/issues/70797\">https://github.com/rust-lang/rust/issues/70797</a> was the issue I mentioned earlier relating to the move errors false positives, we haven't analyzed it yet but it could eventually be an interesting test for your move errors work -- and also the change that could have caused that (if it's a valid problem) was <a href=\"https://github.com/rust-lang/rust/pull/70546/files#diff-b05a06387184e401e73a1e9da3fdff0f\">https://github.com/rust-lang/rust/pull/70546/files#diff-b05a06387184e401e73a1e9da3fdff0f</a> where path accesses were the only path fact on the start point (and maybe <em>that</em> could impact your move errors rules)</p>",
        "id": 205818635,
        "sender_full_name": "lqd",
        "timestamp": 1596473692
    },
    {
        "content": "<p>Interesting, thanks!</p>",
        "id": 205819196,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596473962
    },
    {
        "content": "<p>at least it's an easy revert back to its original position in case we need to do so :)</p>",
        "id": 205819495,
        "sender_full_name": "lqd",
        "timestamp": 1596474093
    },
    {
        "content": "<p>oh yeah I forgot about that</p>",
        "id": 205821518,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596475030
    },
    {
        "content": "<p>would be worth digging into what is going on there</p>",
        "id": 205821529,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596475038
    },
    {
        "content": "<p>btw NLL rejects this case with the same error</p>",
        "id": 205852206,
        "sender_full_name": "lqd",
        "timestamp": 1596492006
    },
    {
        "content": "<p>(and I would think that the error is correct because the temporary has a destructor)</p>",
        "id": 205854612,
        "sender_full_name": "lqd",
        "timestamp": 1596493633
    },
    {
        "content": "<p>mm that's not clear</p>",
        "id": 205854848,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596493821
    },
    {
        "content": "<p>I wonder if rewriting to <code>match</code> would make it work</p>",
        "id": 205854898,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596493863
    },
    {
        "content": "<p>i.e., on the <code>None</code> path, there are no references</p>",
        "id": 205854915,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596493878
    },
    {
        "content": "<p>and on the <code>Some</code> path, we move out into <code>p</code>p</p>",
        "id": 205854922,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596493886
    },
    {
        "content": "<p>let's see what rewriting with a match does with polonius, as I don't think it would make a difference in NLL</p>",
        "id": 205855185,
        "sender_full_name": "lqd",
        "timestamp": 1596494064
    },
    {
        "content": "<p>same error</p>",
        "id": 205855343,
        "sender_full_name": "lqd",
        "timestamp": 1596494170
    },
    {
        "content": "<p>interesting in any case</p>",
        "id": 205855360,
        "sender_full_name": "lqd",
        "timestamp": 1596494186
    },
    {
        "content": "<p>but I don't think it's the first time we've encountered possible imprecision with temporaries with Drop impls</p>",
        "id": 205856487,
        "sender_full_name": "lqd",
        "timestamp": 1596495137
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/move.20error.20reporting/near/205805857\">said</a>:</p>\n<blockquote>\n<p>I also don't think we do, we should probably add this to some list of \"things to think about\"</p>\n</blockquote>\n<p>Update: I have now <a href=\"https://hackmd.io/c6ooQFV-QJilsmEE15FsKQ?view#To-Think-About\">added this list to the hackMD</a>.</p>",
        "id": 205888337,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596534162
    },
    {
        "content": "<p>how goes <span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> ?</p>",
        "id": 205912302,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596550789
    },
    {
        "content": "<p>Forward!</p>",
        "id": 205913117,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596551146
    },
    {
        "content": "<p>I have intercepted the old logic and, I think, replaced it with something, and I'm a coffee break away from the Moment of Truth</p>",
        "id": 205913310,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596551240
    },
    {
        "content": "<p>awesome !</p>",
        "id": 205913502,
        "sender_full_name": "lqd",
        "timestamp": 1596551326
    },
    {
        "content": "<p>Essentially I just replace the entire <code>check_if_path_or_subpath_is_moved</code> with \"unpack Polonius results\"</p>",
        "id": 205913752,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596551424
    },
    {
        "content": "<p>interesting</p>",
        "id": 205913813,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596551452
    },
    {
        "content": "<p>That leaves the move errors we don't implement in, I think, and may possibly use the ones we have</p>",
        "id": 205913815,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596551453
    },
    {
        "content": "<p>Ok, so it works for all the errors in smoke-test except this one;</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0506]: cannot assign to `*x` because it is borrowed\n  --&gt; /home/albin/polonius/inputs/smoke-test/polonius-smoke-test.rs:35:9\n   |\n30 | pub fn position_dependent_outlives(x: &amp;mut i32, cond: bool) -&gt; &amp;mut i32 {\n   |                                       - let&#39;s call the lifetime of this reference `&#39;1`\n31 |     let y = &amp;mut *x;\n   |             ------- borrow of `*x` occurs here\n32 |     if cond {\n33 |         return y;\n   |                - returning this value requires that `*x` is borrowed for `&#39;1`\n34 |     } else {\n35 |         *x = 0;\n   |         ^^^^^^ assignment to borrowed `*x` occurs here\n</code></pre></div>",
        "id": 205916923,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596552847
    },
    {
        "content": "<p>which is what we expect, right?</p>",
        "id": 205917075,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596552920
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> define \"does not work\" I guess?</p>",
        "id": 205918139,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596553378
    },
    {
        "content": "<p>we don't expect an error for that test case</p>",
        "id": 205918187,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596553406
    },
    {
        "content": "<p>when using polonius, anyway</p>",
        "id": 205918191,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596553411
    },
    {
        "content": "<p>Exactly, that's what I meant</p>",
        "id": 205918391,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596553507
    },
    {
        "content": "<p>We get the other errors as far as I can tell by eye exactly the same, including the move error</p>",
        "id": 205918414,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596553521
    },
    {
        "content": "<p>So we know move error reporting works in at least one case</p>",
        "id": 205918438,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596553531
    },
    {
        "content": "<p>We also know it's really using the Polonius output, because I suppressed all other output</p>",
        "id": 205918454,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596553543
    },
    {
        "content": "<p>(just an early return)</p>",
        "id": 205918468,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596553552
    },
    {
        "content": "<p>I'll run the tests and see what happens</p>",
        "id": 205918570,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596553580
    },
    {
        "content": "<p>great</p>",
        "id": 205918701,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596553649
    },
    {
        "content": "<p>Uppdate: it might have err OOM-crashed, I’m not sure because my computer is unresponsive</p>",
        "id": 205918871,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596553750
    },
    {
        "content": "<p>heh</p>",
        "id": 205919131,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596553895
    },
    {
        "content": "<p>uh oh</p>",
        "id": 205919139,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596553900
    },
    {
        "content": "<p>It’s printing a <em>lot</em> of ^[[D:s, whatever that means</p>",
        "id": 205920118,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596554208
    },
    {
        "content": "<p>those are rustc's tests ?</p>",
        "id": 205920171,
        "sender_full_name": "lqd",
        "timestamp": 1596554240
    },
    {
        "content": "<p>Yes, in compare mode</p>",
        "id": 205920202,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596554262
    },
    {
        "content": "<p>did you delete the 2 OOMing in fact gen ?</p>",
        "id": 205920224,
        "sender_full_name": "lqd",
        "timestamp": 1596554278
    },
    {
        "content": "<p>Err no</p>",
        "id": 205920279,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596554287
    },
    {
        "content": "<p>Ok I get a lot of failures on the ui tests</p>",
        "id": 205920309,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596554301
    },
    {
        "content": "<p>could be that :)</p>",
        "id": 205920312,
        "sender_full_name": "lqd",
        "timestamp": 1596554303
    },
    {
        "content": "<p>there should be around 6 or 8 failing (with possibly 2 others being slow/OOMing in move errors or somewhere, which I had to kill yesterday)</p>",
        "id": 205920412,
        "sender_full_name": "lqd",
        "timestamp": 1596554353
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> are you running with <code>--bless</code> ?</p>",
        "id": 205920567,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596554419
    },
    {
        "content": "<p>Definitely more than that failing now, perhaps  20 or so at least</p>",
        "id": 205920582,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596554432
    },
    {
        "content": "<p>I'm specifically running <code>$ ./x.py test -i --stage 1 --compare-mode polonius src/test/ui</code></p>",
        "id": 205920651,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596554467
    },
    {
        "content": "<p>the good thing is that that means you hooked something up correctly</p>",
        "id": 205920667,
        "sender_full_name": "lqd",
        "timestamp": 1596554477
    },
    {
        "content": "<p>and from now on you'll know for sure that it works :)</p>",
        "id": 205920785,
        "sender_full_name": "lqd",
        "timestamp": 1596554500
    },
    {
        "content": "<p>Haha yes, I did something well enough to break something</p>",
        "id": 205920803,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596554506
    },
    {
        "content": "<p>But more to the point, should I add <code>--bless</code> to the arguments?</p>",
        "id": 205920933,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596554549
    },
    {
        "content": "<p>Also, will there be a log of the failing diffs somewhere that I can inspect?</p>",
        "id": 205921040,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596554597
    },
    {
        "content": "<p>that's what blessing will do yeah</p>",
        "id": 205921064,
        "sender_full_name": "lqd",
        "timestamp": 1596554608
    },
    {
        "content": "<p>you'll have .stderr files containing the changed output</p>",
        "id": 205921097,
        "sender_full_name": "lqd",
        "timestamp": 1596554627
    },
    {
        "content": "<p>with <code>--bless</code> you would then use <code>git diff</code> to see what happened</p>",
        "id": 205921105,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596554632
    },
    {
        "content": "<p>that will also unfortunately contain the 6-8 cases I mentioned</p>",
        "id": 205921155,
        "sender_full_name": "lqd",
        "timestamp": 1596554643
    },
    {
        "content": "<p>probably best if you can avoid the OOMing tests though :)</p>",
        "id": 205921237,
        "sender_full_name": "lqd",
        "timestamp": 1596554683
    },
    {
        "content": "<p>they will be annoying regardless of blessing the output</p>",
        "id": 205921300,
        "sender_full_name": "lqd",
        "timestamp": 1596554712
    },
    {
        "content": "<p>modulo one or two being OOM or killed, the failures as of today, with no polonius modifications should be more or less these:</p>\n<div class=\"codehilite\"><pre><span></span><code>failures:\n    [ui (polonius)] ui/closures/closure-expected-type/expect-region-supply-region-2.rs\n    [ui (polonius)] ui/closures/closure-expected-type/expect-region-supply-region.rs\n    [ui (polonius)] ui/hrtb/hrtb-just-for-static.rs\n    [ui (polonius)] ui/hrtb/hrtb-perfect-forwarding.rs\n    [ui (polonius)] ui/issues/issue-26217.rs\n    [ui (polonius)] ui/issues/issue-74564-if-expr-stack-overflow.rs\n    [ui (polonius)] ui/lub-glb/old-lub-glb-hr-noteq2.rs\n    [ui (polonius)] ui/regions/region-multiple-lifetime-bounds-on-fns-where-clause.rs\n</code></pre></div>",
        "id": 205923021,
        "sender_full_name": "lqd",
        "timestamp": 1596555514
    },
    {
        "content": "<p>so unless there are obvious move errors differences there which I wouldn't expect, don't worry about them when you see them fail</p>",
        "id": 205923114,
        "sender_full_name": "lqd",
        "timestamp": 1596555563
    },
    {
        "content": "<p>(I'd love it if we could double check our existing blessed expectations, especially the ones with differences in the number of errors, eg with closures, or maybe `static which I don't feel we handle or special-case exactly the same way)</p>",
        "id": 205923371,
        "sender_full_name": "lqd",
        "timestamp": 1596555694
    },
    {
        "content": "<p>There are absolutely more errors:</p>\n<div class=\"codehilite\"><pre><span></span><code>failures:\n    [ui (polonius)] ui/async-await/multiple-lifetimes/hrtb.rs\n    [ui (polonius)] ui/borrowck/borrowck-asm.rs\n    [ui (polonius)] ui/borrowck/borrowck-box-sensitivity.rs\n    [ui (polonius)] ui/borrowck/borrowck-closures-slice-patterns-ok.rs\n    [ui (polonius)] ui/borrowck/borrowck-closures-slice-patterns.rs\n    [ui (polonius)] ui/borrowck/borrowck-field-sensitivity-rpass.rs\n    [ui (polonius)] ui/borrowck/borrowck-field-sensitivity.rs\n    [ui (polonius)] ui/borrowck/borrowck-init-in-fru.rs\n    [ui (polonius)] ui/borrowck/borrowck-move-out-from-array-match.rs\n    [ui (polonius)] ui/borrowck/borrowck-move-out-from-array-no-overlap-match.rs\n    [ui (polonius)] ui/borrowck/borrowck-move-out-from-array-no-overlap.rs\n    [ui (polonius)] ui/borrowck/borrowck-move-out-from-array-use-match.rs\n    [ui (polonius)] ui/borrowck/borrowck-move-out-from-array-use-no-overlap-match.rs\n    [ui (polonius)] ui/borrowck/borrowck-move-out-from-array-use-no-overlap.rs\n    [ui (polonius)] ui/borrowck/borrowck-move-out-from-array-use.rs\n    [ui (polonius)] ui/borrowck/borrowck-move-out-from-array.rs\n    [ui (polonius)] ui/borrowck/borrowck-multiple-captures.rs\n    [ui (polonius)] ui/borrowck/borrowck-partial-reinit-1.rs\n    [ui (polonius)] ui/borrowck/borrowck-partial-reinit-2.rs\n    [ui (polonius)] ui/borrowck/borrowck-partial-reinit-3.rs\n    [ui (polonius)] ui/borrowck/borrowck-partial-reinit-4.rs\n    [ui (polonius)] ui/borrowck/borrowck-uninit-field-access.rs\n    [ui (polonius)] ui/borrowck/borrowck-uninit-in-assignop.rs\n    [ui (polonius)] ui/borrowck/borrowck-uninit-ref-chain.rs\n    [ui (polonius)] ui/borrowck/borrowck-union-move-assign.rs\n    [ui (polonius)] ui/borrowck/borrowck-union-move.rs\n    [ui (polonius)] ui/borrowck/borrowck-use-in-index-lvalue.rs\n    [ui (polonius)] ui/borrowck/borrowck-use-uninitialized-in-cast-trait.rs\n    [ui (polonius)] ui/borrowck/borrowck-use-uninitialized-in-cast.rs\n    [ui (polonius)] ui/closures/closure-expected-type/expect-region-supply-region-2.rs\n    [ui (polonius)] ui/closures/closure-expected-type/expect-region-supply-region.rs\n    [ui (polonius)] ui/drop/dynamic-drop-async.rs\n    [ui (polonius)] ui/hrtb/hrtb-just-for-static.rs\n    [ui (polonius)] ui/hrtb/hrtb-perfect-forwarding.rs\n    [ui (polonius)] ui/ifmt.rs\n    [ui (polonius)] ui/intrinsics/intrinsics-integer.rs\n    [ui (polonius)] ui/issues/issue-17263.rs\n    [ui (polonius)] ui/issues/issue-17385.rs\n    [ui (polonius)] ui/issues/issue-19340-2.rs\n    [ui (polonius)] ui/issues/issue-26217.rs\n    [ui (polonius)] ui/issues/issue-2718.rs\n    [ui (polonius)] ui/issues/issue-27282-move-match-input-into-guard.rs\n    [ui (polonius)] ui/issues/issue-29166.rs\n    [ui (polonius)] ui/issues/issue-3609.rs\n    [ui (polonius)] ui/issues/issue-42679.rs\n    [ui (polonius)] ui/issues/issue-74564-if-expr-stack-overflow.rs\n    [ui (polonius)] ui/liveness/liveness-use-after-move.rs\n    [ui (polonius)] ui/lub-glb/old-lub-glb-hr-noteq2.rs\n    [ui (polonius)] ui/moves/moves-sru-moved-field.rs\n    [ui (polonius)] ui/mpsc_stress.rs\n    [ui (polonius)] ui/nll/issue-21232-partial-init-and-erroneous-use.rs\n    [ui (polonius)] ui/nll/issue-48623-closure.rs\n    [ui (polonius)] ui/nll/issue-48623-generator.rs\n    [ui (polonius)] ui/nll/issue-51512.rs\n    [ui (polonius)] ui/nll/user-annotations/patterns.rs\n    [ui (polonius)] ui/numbers-arithmetic/saturating-float-casts.rs\n    [ui (polonius)] ui/pattern/move-ref-patterns/borrowck-move-ref-pattern.rs\n    [ui (polonius)] ui/pattern/move-ref-patterns/feature-gate-move_ref_pattern.rs\n    [ui (polonius)] ui/pattern/move-ref-patterns/issue-53840.rs\n    [ui (polonius)] ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-inside.rs\n    [ui (polonius)] ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs\n    [ui (polonius)] ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs\n    [ui (polonius)] ui/regions/region-multiple-lifetime-bounds-on-fns-where-clause.rs\n    [ui (polonius)] ui/resource-assign-is-not-copy.rs\n    [ui (polonius)] ui/self/elision/alias-async.rs\n    [ui (polonius)] ui/self/elision/assoc-async.rs\n    [ui (polonius)] ui/self/elision/lt-alias-async.rs\n    [ui (polonius)] ui/self/elision/lt-assoc-async.rs\n    [ui (polonius)] ui/self/elision/lt-ref-self-async.rs\n    [ui (polonius)] ui/self/elision/lt-self-async.rs\n    [ui (polonius)] ui/self/elision/lt-struct-async.rs\n    [ui (polonius)] ui/self/elision/multiple-ref-self-async.rs\n    [ui (polonius)] ui/self/elision/ref-alias-async.rs\n    [ui (polonius)] ui/self/elision/ref-assoc-async.rs\n    [ui (polonius)] ui/self/elision/ref-mut-alias-async.rs\n    [ui (polonius)] ui/self/elision/ref-mut-self-async.rs\n    [ui (polonius)] ui/self/elision/ref-mut-struct-async.rs\n    [ui (polonius)] ui/self/elision/ref-self-async.rs\n    [ui (polonius)] ui/self/elision/ref-struct-async.rs\n    [ui (polonius)] ui/self/elision/self-async.rs\n    [ui (polonius)] ui/self/elision/struct-async.rs\n    [ui (polonius)] ui/threads-sendsync/send_str_treemap.rs\n    [ui (polonius)] ui/traits/trait-bounds-in-arc.rs\n    [ui (polonius)] ui/type-alias-impl-trait/type-alias-impl-trait-tuple.rs\n    [ui (polonius)] ui/unboxed-closures/unboxed-closures-move-some-upvars-in-by-ref-closure.rs\n    [ui (polonius)] ui/union/union-borrow-move-parent-sibling.rs\n    [ui (polonius)] ui/use/use-after-move-self-based-on-type.rs\n    [ui (polonius)] ui/use/use-after-move-self.rs\n    [ui (polonius)] ui/walk-struct-literal-with.rs\n    [ui (polonius)] ui/wrapping-int-combinations.rs\n\ntest result: FAILED. 10380 passed; 90 failed; 72 ignored; 0 measured; 0 filtered out\n</code></pre></div>",
        "id": 205923456,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596555725
    },
    {
        "content": "<p>I'll try again with --bless and see what the differences are</p>",
        "id": 205923502,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596555756
    },
    {
        "content": "<p>ui/numbers-arithmetic/saturating-float-casts.rs and ui/wrapping-int-combinations.rs are the 2 known OOMs</p>",
        "id": 205923525,
        "sender_full_name": "lqd",
        "timestamp": 1596555779
    },
    {
        "content": "<p>the ones in ui/borrowck/ about moves and partial reinits should be interesting</p>",
        "id": 205923792,
        "sender_full_name": "lqd",
        "timestamp": 1596555938
    },
    {
        "content": "<p>It seems we get some spurious errors I assume to be the same</p>",
        "id": 205923952,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596556022
    },
    {
        "content": "<p>how so ?</p>",
        "id": 205924212,
        "sender_full_name": "lqd",
        "timestamp": 1596556171
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error[E0382]: use of moved value: `f`\n  --&gt; /home/albin/rust/src/test/ui/self/elision/lt-alias-async.rs:13:30\n   |\nLL |     async fn take_self(self, f: &amp;u32) -&gt; &amp;u32 {\n   |                        ----  ^ value used here after move\n   |                        |\n   |                        value moved here\n   |\n   = note: move occurs because `self` has type `Struct&lt;&#39;_&gt;`, which does not implement the `Copy` trait\n</code></pre></div>",
        "id": 205924339,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596556226
    },
    {
        "content": "<p>This...makes no sense, the code looks like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>    async fn take_self(self, f: &amp;u32) -&gt; &amp;u32 {\n        f\n    }\n</code></pre></div>",
        "id": 205924394,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596556264
    },
    {
        "content": "<p><code>self</code> and <code>f</code> aren't even related in any way</p>",
        "id": 205924419,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596556280
    },
    {
        "content": "<p>I do wonder whether the way async fns are desugared can be special wrt to self ...</p>",
        "id": 205924971,
        "sender_full_name": "lqd",
        "timestamp": 1596556581
    },
    {
        "content": "<p>I'll investigate more later. I'm still chalking this up as a partial success!</p>",
        "id": 205927139,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596557667
    },
    {
        "content": "<p>it definitely is a success !</p>",
        "id": 205927319,
        "sender_full_name": "lqd",
        "timestamp": 1596557755
    },
    {
        "content": "<p>great job already :)</p>",
        "id": 205927459,
        "sender_full_name": "lqd",
        "timestamp": 1596557810
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 205927679,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596557917
    },
    {
        "content": "<p>that's great -- those errors <em>do</em> look like nonsense but I imagine it has something to do with how we're faking the data</p>",
        "id": 205928562,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596558413
    },
    {
        "content": "<p>push the branch somewhere, <span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> ?</p>",
        "id": 205928571,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596558420
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/move.20error.20reporting/near/205928571\">said</a>:</p>\n<blockquote>\n<p>push the branch somewhere, <span class=\"user-mention silent\" data-user-id=\"204115\">Albin Stjerna</span> ?</p>\n</blockquote>\n<p>Sorry, I was making dinner. It's already at my fork, <a href=\"https://github.com/albins/rust\">https://github.com/albins/rust</a></p>",
        "id": 205939025,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596564096
    },
    {
        "content": "<p>Should I already open a WIP pull request against Rust?</p>",
        "id": 205939102,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596564123
    },
    {
        "content": "<p>niko had asked yesterday if we had a rundown of the move errors computation slowness, and I do now, on <code>clap</code> which takes 100-110s:</p>\n<ul>\n<li>70-80s are spent on uninit <a href=\"https://github.com/rust-lang/polonius/blob/master/polonius-engine/src/output/initialization.rs#L176-L183\">in this rule</a></li>\n<li>20-30s are spent on <a href=\"https://github.com/rust-lang/polonius/blob/master/polonius-engine/src/output/initialization.rs#L198-L206\">the move errors rule</a></li>\n<li>the <code>compute_transitive_paths</code> is fast compared to the other two, if I comment those two, so compute only the maybe init required for liveness, it's around 450ms for the whole initialization parts of the pipeline</li>\n</ul>",
        "id": 205955067,
        "sender_full_name": "lqd",
        "timestamp": 1596572256
    },
    {
        "content": "<p>I think we can speedup that rule some more, too</p>",
        "id": 205964253,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596577149
    },
    {
        "content": "<p>seems likely</p>",
        "id": 205964584,
        "sender_full_name": "lqd",
        "timestamp": 1596577342
    },
    {
        "content": "<p>I'll spend today working on diagnosing the errors in the ui tests I saw yesterday, trying to figure out what goes wrong</p>",
        "id": 205996040,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596613336
    },
    {
        "content": "<p>(maybe also do a quick location flipping of the access fact just in case ;)</p>",
        "id": 205996189,
        "sender_full_name": "lqd",
        "timestamp": 1596613559
    },
    {
        "content": "<p>beautiful v2.0 :D <a href=\"/user_uploads/4715/hO95MovzXx0soVy8Dhg7YNH2/image.png\">tracy_profile.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/hO95MovzXx0soVy8Dhg7YNH2/image.png\" title=\"tracy_profile.png\"><img src=\"/user_uploads/4715/hO95MovzXx0soVy8Dhg7YNH2/image.png\"></a></div>",
        "id": 206002213,
        "sender_full_name": "lqd",
        "timestamp": 1596618742
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> wait, what is that?</p>",
        "id": 206003334,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596619736
    },
    {
        "content": "<p>looks slick</p>",
        "id": 206003340,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596619739
    },
    {
        "content": "<p>it's <a href=\"https://github.com/wolfpld/tracy\">https://github.com/wolfpld/tracy</a> :)</p>",
        "id": 206003378,
        "sender_full_name": "lqd",
        "timestamp": 1596619775
    },
    {
        "content": "<p>it's very slick indeed, better on windows rn as it mixes manual instrumentation and sampling</p>",
        "id": 206003465,
        "sender_full_name": "lqd",
        "timestamp": 1596619812
    },
    {
        "content": "<p>nice...</p>",
        "id": 206003543,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596619880
    },
    {
        "content": "<p>maybe for once I might have a reason to develop on windows</p>",
        "id": 206003558,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596619894
    },
    {
        "content": "<p>on linux it \"just\" does the manual instrumentation</p>",
        "id": 206003633,
        "sender_full_name": "lqd",
        "timestamp": 1596619937
    },
    {
        "content": "<p>so it's -Zself-profile like, with aggregation, querying, graphical views, comparisons between profile runs (!) etc etc</p>",
        "id": 206003659,
        "sender_full_name": "lqd",
        "timestamp": 1596619965
    },
    {
        "content": "<p>of course it works within rustc as well</p>",
        "id": 206003678,
        "sender_full_name": "lqd",
        "timestamp": 1596619984
    },
    {
        "content": "<p>(I've posted some more screenshots of rustc integration before <a href=\"#narrow/stream/187831-t-compiler.2Fwg-self-profile/topic/tracy\">here</a> where I just mimicked the -Zself-profile events, and an example of the sampling on polonius in <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/general/near/206000707\">this other screenshot</a>)</p>",
        "id": 206003706,
        "sender_full_name": "lqd",
        "timestamp": 1596620028
    },
    {
        "content": "<p>(there also was the recent <a href=\"https://github.com/bombomby/optick-rs\">https://github.com/bombomby/optick-rs</a> but this one's GUI only works on windows (data collection is system-independent), while Tracy's works everywhere)</p>",
        "id": 206004074,
        "sender_full_name": "lqd",
        "timestamp": 1596620391
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/move.20error.20reporting/near/205996189\">said</a>:</p>\n<blockquote>\n<p>(maybe also do a quick location flipping of the access fact just in case ;)</p>\n</blockquote>\n<p>Remind me, was it that we moved the access event from start-point to mid-point?</p>",
        "id": 206004487,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596620798
    },
    {
        "content": "<p>it caused move errors false positives on the datasets inside the repo</p>",
        "id": 206005207,
        "sender_full_name": "lqd",
        "timestamp": 1596621392
    },
    {
        "content": "<p>some things were initialized or uninit and across blocks the event and the move error were at the same point</p>",
        "id": 206005229,
        "sender_full_name": "lqd",
        "timestamp": 1596621422
    },
    {
        "content": "<p>my investigation into that was <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/move.20errors/near/191031867\">https://rust-lang.zulipchat.com/#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/move.20errors/near/191031867</a></p>",
        "id": 206005262,
        "sender_full_name": "lqd",
        "timestamp": 1596621453
    },
    {
        "content": "<p>it seemed to make sense, but at the same time likely caused <a href=\"https://github.com/rust-lang/rust/issues/70797\">https://github.com/rust-lang/rust/issues/70797</a> which we still don't exactly know for sure what's going on there</p>",
        "id": 206005354,
        "sender_full_name": "lqd",
        "timestamp": 1596621511
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/move.20error.20reporting/near/205996189\">said</a>:</p>\n<blockquote>\n<p>(maybe also do a quick location flipping of the access fact just in case ;)</p>\n</blockquote>\n<p>Doing this now :)</p>",
        "id": 206029215,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596638083
    },
    {
        "content": "<p>maybe read the linked thread, you didn't remember why it was the only fact at this kind of point, but of course there could ahve been a reason, maybe discussing with matthew or niko</p>",
        "id": 206029339,
        "sender_full_name": "lqd",
        "timestamp": 1596638153
    },
    {
        "content": "<p>but the case of initializing a local from a call was the issue</p>",
        "id": 206029428,
        "sender_full_name": "lqd",
        "timestamp": 1596638187
    },
    {
        "content": "<p>as both init and move error were checking the same point</p>",
        "id": 206029456,
        "sender_full_name": "lqd",
        "timestamp": 1596638199
    },
    {
        "content": "<p>it was an interesting case :)</p>",
        "id": 206029482,
        "sender_full_name": "lqd",
        "timestamp": 1596638212
    },
    {
        "content": "<p>at least the repo contains enough different datasets to test move errors a bit, see if there are false positives or not, and so on</p>",
        "id": 206029558,
        "sender_full_name": "lqd",
        "timestamp": 1596638250
    },
    {
        "content": "<p>Yes, but I remember spending a lot of time thinking about that. It might have been a mistake though; I'll compare it to what I wrote in my thesis</p>",
        "id": 206029676,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596638292
    },
    {
        "content": "<p>but yeah, maybe we do need to flip it back where it used to be :) (the new issue with temporaries + drop is also interesting)</p>",
        "id": 206029737,
        "sender_full_name": "lqd",
        "timestamp": 1596638313
    },
    {
        "content": "<p>I mean, just because I thought hard about it doesn't mean I didn't butter-finger that particular line in Rust</p>",
        "id": 206029757,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596638324
    },
    {
        "content": "<p>yeah it could be a simple typo</p>",
        "id": 206029798,
        "sender_full_name": "lqd",
        "timestamp": 1596638345
    },
    {
        "content": "<p>Also, specifically open/closed intervals is something I frequently struggle with, so I might have just messed it up</p>",
        "id": 206029884,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596638390
    },
    {
        "content": "<p>We'll know when the tests finish I guess</p>",
        "id": 206029962,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596638412
    },
    {
        "content": "<p>I myself don't remember if you had talked about this specific case of initializing with calls with <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> when you were coming up with the rules</p>",
        "id": 206030019,
        "sender_full_name": "lqd",
        "timestamp": 1596638440
    },
    {
        "content": "<p>as it seemed move errors really did detect errors along an edge, while this seemed to be at a specific point ?</p>",
        "id": 206030085,
        "sender_full_name": "lqd",
        "timestamp": 1596638470
    },
    {
        "content": "<p>as this could have been fixed two ways:</p>\n<ul>\n<li>moving one of the colliding facts, and have the existing rules detect the error, as it'd now be on an edge -- which is what I did</li>\n<li>change the rules</li>\n</ul>",
        "id": 206030410,
        "sender_full_name": "lqd",
        "timestamp": 1596638626
    },
    {
        "content": "<p>I have <a href=\"https://hackmd.io/@albins/Byh_rBOZv\">some related lab notes</a> (so happy I kept those), but that seems to be mainly about emitting initialisation facts</p>",
        "id": 206030665,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596638749
    },
    {
        "content": "<p>For function arguments, that is</p>",
        "id": 206030796,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596638811
    },
    {
        "content": "<p>are we discussing the \"false positive\" case?</p>",
        "id": 206036038,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596641033
    },
    {
        "content": "<p>its cause yeah</p>",
        "id": 206036415,
        "sender_full_name": "lqd",
        "timestamp": 1596641169
    },
    {
        "content": "<p>the false positive fix which ended up creating that other issue</p>",
        "id": 206036481,
        "sender_full_name": "lqd",
        "timestamp": 1596641209
    },
    {
        "content": "<p>in case it also impacts the move errors Albin is seeing now on rustc tests</p>",
        "id": 206036513,
        "sender_full_name": "lqd",
        "timestamp": 1596641229
    },
    {
        "content": "<p>It seems to, because I don't think I see nearly as many failures when I switched back mid/start points for fact emission, but for whatever reason the test script has been stuck on if-expr-stack-overflow for a long time now</p>",
        "id": 206037138,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596641512
    },
    {
        "content": "<p>I'm considering killing it</p>",
        "id": 206037153,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596641516
    },
    {
        "content": "<p>Ok, that seems to have worked in the sense that the test terminated. I now have...different errors, so there is clearly an interaction going on</p>",
        "id": 206037281,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596641558
    },
    {
        "content": "<p>Ok that didn't solve it anyway, so I'd have to investigate this further</p>",
        "id": 206037514,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596641673
    },
    {
        "content": "<p>if I wanted to examine the failure,</p>",
        "id": 206037607,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596641718
    },
    {
        "content": "<p>how would I do so :)</p>",
        "id": 206037624,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596641723
    },
    {
        "content": "<p>should I use <span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span>'s branch?</p>",
        "id": 206037632,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596641728
    },
    {
        "content": "<p>(is it published somewhere..?)</p>",
        "id": 206037641,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596641732
    },
    {
        "content": "<p>also, remind me which test it is etc</p>",
        "id": 206037652,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596641737
    },
    {
        "content": "<p>Yes, you can more or less check out my branch and run one of the failing tests</p>",
        "id": 206037672,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596641747
    },
    {
        "content": "<p>what test are you trying btw ?</p>",
        "id": 206037745,
        "sender_full_name": "lqd",
        "timestamp": 1596641768
    },
    {
        "content": "<p>branch is <a href=\"https://github.com/albins/rust\">https://github.com/albins/rust</a></p>",
        "id": 206037751,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596641769
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/move.20error.20reporting/near/206037745\">said</a>:</p>\n<blockquote>\n<p>what test are you trying btw ?</p>\n</blockquote>\n<p>All of them, I guess? I'm running <code>./x.py test -i --stage 1 --compare-mode polonius src/test/ui --bless</code></p>",
        "id": 206037900,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596641841
    },
    {
        "content": "<p>One example of a failing test is <code>async-await/multiple-lifetimes/hrtb.rs</code></p>",
        "id": 206038001,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596641884
    },
    {
        "content": "<p>(that one specifically works fine if I reverse @lqd's changes and emit <code>path_accessed_at_base</code> at the start-point rather than mid-point)</p>",
        "id": 206038181,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596641996
    },
    {
        "content": "<p>I haven't verified this, but I see very little overlap in which files error</p>",
        "id": 206038470,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596642132
    },
    {
        "content": "<p>Which sort of gives me the feeling that the move errors are \"almost correct\"</p>",
        "id": 206038520,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596642159
    },
    {
        "content": "<p>ah actually I should mention this</p>",
        "id": 206137844,
        "sender_full_name": "lqd",
        "timestamp": 1596719259
    },
    {
        "content": "<p>the false positive fix didn't just remove the unexpected errors in the polonius repo on code that should work, it also made polonius match NLLs again on 2 of the rustc tests related to move/init analysis we talked about at the time: <a href=\"https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src/test/ui/nll/maybe-initialized-drop-implicit-fragment-drop.rs\">maybe-initialized-drop-implicit-fragment-drops</a><br>\nand <a href=\"https://github.com/rust-lang/rust/blob/2a663555ddf36f6b041445894a8c175cd1bc718c/src/test/ui/nll/maybe-initialized-drop-with-uninitialized-fragments.rs\">maybe-initialized-drop-with-uninitialized-fragments</a></p>",
        "id": 206138286,
        "sender_full_name": "lqd",
        "timestamp": 1596719503
    },
    {
        "content": "<p>my understanding is that they started to compile because of the changes in fact generation done to support move errors; we ultimately want them to compile; and they can be close to the \"spurious issue\"</p>",
        "id": 206138611,
        "sender_full_name": "lqd",
        "timestamp": 1596719672
    },
    {
        "content": "<p>alright <a href=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/issues/issue-74564-if-expr-stack-overflow.rs\">this rustc test</a> will be interesting to try with the new move errors rules implementation, as the current one either doesn't complete or OOM I'm not sure (both <code>var_maybe_partly_initialized_on_exit</code> and <code>move_error</code> relations exhibit this issue)</p>",
        "id": 206181422,
        "sender_full_name": "lqd",
        "timestamp": 1596739727
    }
]