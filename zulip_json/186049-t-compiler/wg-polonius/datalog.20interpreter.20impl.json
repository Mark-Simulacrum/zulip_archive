[
    {
        "content": "<p><a href=\"https://twitter.com/guswynn/status/1336091790223368194?s=20\">https://twitter.com/guswynn/status/1336091790223368194?s=20</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/guswynn/status/1336091790223368194?s=20\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/885028954658271232/2er7hcYh_normal.jpg\"></a><p><a href=\"https://twitter.com/yoshuawuyts\">@yoshuawuyts</a> why does chalk have its own solver, but polonious uses this?</p><span>- g̶͇̻̀ū̵̯͙͎́s̷̙͉̥̓͒͠ (@guswynn)</span></div></div><p>why does chalk have its own solver, but polonious uses datafrog? Is it for perf and datafrog makes proof of concepts easier? Chalk and polonious both use datalog right? or does chalk need something higher than datalog?</p>",
        "id": 219157240,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1607387156
    },
    {
        "content": "<p>chalk’s is different and more prolog like indeed, not datalog. datafrog was actually made for polonius, so it is Polonius’ solver in that way</p>",
        "id": 219161798,
        "sender_full_name": "lqd",
        "timestamp": 1607391445
    },
    {
        "content": "<p>(polonius did not exist as such then, only as experiments within NLLs, but the datalog engine was made to replace the timely-dataflow based implementation of these experiments, which live on as polonius)</p>",
        "id": 219161978,
        "sender_full_name": "lqd",
        "timestamp": 1607391667
    },
    {
        "content": "<p>if prolog is a super-set datalog, why not merge the core engine parts of chalk and polonious?</p>",
        "id": 219228562,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1607445084
    },
    {
        "content": "<p>Chalk's solver also goes a bit beyond prolog's clauses</p>",
        "id": 219231032,
        "sender_full_name": "lqd",
        "timestamp": 1607446262
    },
    {
        "content": "<p>it's not only Horn clauses</p>",
        "id": 219231056,
        "sender_full_name": "lqd",
        "timestamp": 1607446273
    },
    {
        "content": "<p>but one generalisation: Hereditary Harrop formulas/predicates</p>",
        "id": 219231202,
        "sender_full_name": "lqd",
        "timestamp": 1607446336
    },
    {
        "content": "<p>we do need some of those for Rust, but that job can be shared between chalk and polonius</p>",
        "id": 219231272,
        "sender_full_name": "lqd",
        "timestamp": 1607446367
    },
    {
        "content": "<p>so the current line of thought is (and bear in mind this is where we have done the least design work or prototyping as of now)</p>",
        "id": 219231344,
        "sender_full_name": "lqd",
        "timestamp": 1607446418
    },
    {
        "content": "<p>to have them collaborate, rather than merged into one, chalk's handling higher-ranked subtyping and generating \"current polonius\" facts</p>",
        "id": 219231532,
        "sender_full_name": "lqd",
        "timestamp": 1607446512
    },
    {
        "content": "<p>in particular it's not absolutely set in stone that we're going to use a datalog engine to do the different polonius analyses</p>",
        "id": 219231669,
        "sender_full_name": "lqd",
        "timestamp": 1607446568
    },
    {
        "content": "<p>There is a big difference between prolog and datalog. Prolog starts at the goal and works down towards facts that could satisfy them. Datalog starts with facts and repeatedly applies the rules until no further facts can be discovered. Chalk has to use prolog as the set of derivable facts is often infinite. This is not the case for polonious, so datalog can be used, which could be more efficient.</p>",
        "id": 219231711,
        "sender_full_name": "bjorn3",
        "timestamp": 1607446594
    },
    {
        "content": "<p>it's what we use now, because it's extremely easy to prototype, concise, clear and relatively performant to do so</p>",
        "id": 219231718,
        "sender_full_name": "lqd",
        "timestamp": 1607446597
    },
    {
        "content": "<p>but it's also currently not exactly scaling to what we need it to, so we'll see how this shakes out</p>",
        "id": 219231814,
        "sender_full_name": "lqd",
        "timestamp": 1607446641
    },
    {
        "content": "<p>(Niko has a post on concerns about higher-ranked subtyping if you're interested <a href=\"https://smallcultfollowing.com/babysteps/blog/2019/01/21/hereditary-harrop-region-constraints/\">https://smallcultfollowing.com/babysteps/blog/2019/01/21/hereditary-harrop-region-constraints/</a>)</p>",
        "id": 219231958,
        "sender_full_name": "lqd",
        "timestamp": 1607446705
    },
    {
        "content": "<p>(technically both directions of evaluation can work in datalog, the \"top-down evaluation\" is the most prolog-y, and the \"bottom-up evaluation\" is exactly how bjorn3 described -- and datafrog is currently the latter kind)</p>",
        "id": 219232165,
        "sender_full_name": "lqd",
        "timestamp": 1607446816
    },
    {
        "content": "<p>just to illustrate why, even though we love the benefits of datalog, it's not necessarily the greatest solution to everything: the location insensitive analysis can be reframed as another problem, and if anyone knows a datalog engine that will do that, detect arbitrary rules and transform them into reachability queries on the condensation graph of the CFG, with bonus points if it computes the SCCs and the reachability acceleration structure at the same time, like Nuutila's modified Tarjan's method, <em>please let me know</em> :)</p>",
        "id": 219233243,
        "sender_full_name": "lqd",
        "timestamp": 1607447314
    },
    {
        "content": "<p>(also the queries need to not allocate)</p>",
        "id": 219233465,
        "sender_full_name": "lqd",
        "timestamp": 1607447408
    },
    {
        "content": "<p>interesting, my concern/thinking was that while a datalog engine could be more efficient, more time may have been spent on the efficiency of the chalk solver then it may still be faster than datafrog (obviously this is not tested), and it could be less code to maintain, but i see now its much more subtle that than</p>\n<p>as well as what <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> said, for prototyping, simplicity is key for now</p>",
        "id": 219234179,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1607447715
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/datalog.20interpreter.20impl/near/219231532\">said</a>:</p>\n<blockquote>\n<p>to have them collaborate, rather than merged into one, chalk's handling higher-ranked subtyping and generating \"current polonius\" facts</p>\n</blockquote>\n<p>wait chalk and polonious will have to interact? or will chalk have to produce some info about sub-typing that polonious has to be given?</p>",
        "id": 219234357,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1607447780
    },
    {
        "content": "<p>since they compute different things it's not easy to compare them on efficiency, but in truth not that much has been done on efficiency in either solvers; mostly because correctness needs to come first in these sensitive cases</p>",
        "id": 219234476,
        "sender_full_name": "lqd",
        "timestamp": 1607447830
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/datalog.20interpreter.20impl/near/219233243\">said</a>:</p>\n<blockquote>\n<p>just to illustrate why, even though we love the benefits of datalog, it's not necessarily the greatest solution to everything: the location insensitive analysis can be reframed as another problem, and if anyone knows a datalog engine that will do that, detect arbitrary rules and transform them into reachability queries on the condensation graph of the CFG, with bonus points if it computes the SCCs and the reachability acceleration structure at the same time, like Nuutila's modified Tarjan's method, <em>please let me know</em> <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n</blockquote>\n<p>this is an interesting comment and I clearly have a lot to learn about</p>",
        "id": 219234481,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1607447835
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/datalog.20interpreter.20impl/near/219234476\">said</a>:</p>\n<blockquote>\n<p>since they compute different things it's not easy to compare them on efficiency, but in truth not that much has been done on efficiency in either solvers; mostly because correctness needs to come first in these sensitive cases</p>\n</blockquote>\n<p>ah</p>",
        "id": 219234523,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1607447851
    },
    {
        "content": "<p>I think im going to re-read every chalk and polonious post niko has made this week</p>",
        "id": 219234818,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1607447999
    },
    {
        "content": "<p>again, not that much has been done on these advanced topics (as we haven't finished handling the most basic topics yet), and of course Niko was the one doing that, so take this with a grain of salt :) my recollection is that chalk will produce polonius facts and interact with it while solving higher-ranked stuff</p>",
        "id": 219234822,
        "sender_full_name": "lqd",
        "timestamp": 1607448001
    },
    {
        "content": "<p>there has been chalk branches in that direction, and some design work, so one could say it's still in the design phase ^^ there's a plan, but until we either have the time to devote to the topic, or chalk is finished and there's nothing else to do but look at that, it's still a tentative plan</p>",
        "id": 219235045,
        "sender_full_name": "lqd",
        "timestamp": 1607448094
    },
    {
        "content": "<p>unfortunately life gets in the way and none of us have a lot of time available to dedicate to polonius; this is why we have this different sprint model where we periodically make the time and hack together. hopefully we can pick that up early next year once things clear up for everybody</p>",
        "id": 219235305,
        "sender_full_name": "lqd",
        "timestamp": 1607448214
    },
    {
        "content": "<p>I hope that answers your questions</p>",
        "id": 219235452,
        "sender_full_name": "lqd",
        "timestamp": 1607448261
    },
    {
        "content": "<p>yeah to be clear, i wasnt expecting anything soon, just getting my bearing to see if I can help out at some point! <br>\nglad to hear next year there might be interesting stuff happening!</p>",
        "id": 219235484,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1607448280
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/datalog.20interpreter.20impl/near/219235452\">said</a>:</p>\n<blockquote>\n<p>I hope that answers your questions</p>\n</blockquote>\n<p>it does, thanks!!</p>",
        "id": 219235499,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1607448286
    },
    {
        "content": "<p>sure, no problem</p>",
        "id": 219235519,
        "sender_full_name": "lqd",
        "timestamp": 1607448298
    }
]