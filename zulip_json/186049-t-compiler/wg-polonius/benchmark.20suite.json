[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I'm a bit unsure of what to do about the benchmarking task (as well). First of all, are there any benchmarks already that I should use? Second, as I said, would I be free to use Criterion or do you work with some specific benchmarking infrastructure that I should follow? If so, is there anyone I can ask about that?</p>",
        "id": 161043741,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1552902966
    },
    {
        "content": "<p>I had a meeting with Tobias (my sort of shadow supervisor) today and he suggested I do something similar to what Carter does and generate benchmark input from a few popular crates (or preferably many).</p>",
        "id": 161069661,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1552924308
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> well, yes, we have an existing benchmark suite that the compiler uses, and it has tools for running it. You can view the \"official\" results on &lt;<a href=\"https://perf.rust-lang.org/\" target=\"_blank\" title=\"https://perf.rust-lang.org/\">https://perf.rust-lang.org/</a>&gt;.  <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> earlier ran this same suite, but with Polonius enabled (<a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/finding.20perf.20spikes\" title=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/finding.20perf.20spikes\">discussion here</a>). Repeating this would give you a good \"overall picture\" of rustc compilation time, though with some caveats, in that the integration right now is not optimal.</p>\n<p>However, I think Tobias is correct that it would be good to create more sets of <em>benchmarking facts</em> in polonius. Presently we have only one just set, <a href=\"https://github.com/rust-lang/polonius/tree/master/inputs/clap-rs\" target=\"_blank\" title=\"https://github.com/rust-lang/polonius/tree/master/inputs/clap-rs\">clap-rs</a>, which was a case that was historically problematic. The README for polonius talks about how to generate facts for a random rs file.</p>\n<p>Which leaves the question of how to choose the cases we include. Probably we should pick some representatives from the <a href=\"http://perf.rust-lang.org\" target=\"_blank\" title=\"http://perf.rust-lang.org\">perf.rust-lang.org</a> benchmark suite.</p>",
        "id": 161156975,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553006865
    },
    {
        "content": "<p>Looking over that thread, <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> posted some results already we could look at.</p>\n<ul>\n<li>the optimized algorithm (<a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/finding.20perf.20spikes/near/158969083\" title=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/finding.20perf.20spikes/near/158969083\">here</a>)</li>\n<li>the location insensitive algorithm (<a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/finding.20perf.20spikes/near/159015362\" title=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/finding.20perf.20spikes/near/159015362\">here</a>)</li>\n</ul>",
        "id": 161157236,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553007023
    },
    {
        "content": "<p>In terms of benchmark <em>inputs</em>, one challenge is that the polonius inputs are <em>per fn</em>, whereas the perf suite is testing the compilation time of an entire crate.</p>",
        "id": 161157445,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553007149
    },
    {
        "content": "<p>I would not pick tuple-stress (5000x overhead... hmm....) just yet, because I think that's a separate issue. Maybe we can start by picking out some of the smaller test cases that are relatively simple, e.g. keccak.</p>",
        "id": 161157626,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553007258
    },
    {
        "content": "<p>The sources for perf can be found here <a href=\"https://github.com/rust-lang-nursery/rustc-perf\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/rustc-perf\">https://github.com/rust-lang-nursery/rustc-perf</a> I believe</p>",
        "id": 161157674,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553007291
    },
    {
        "content": "<p>(<span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> is pretty busy these days but I bet they could help you with running the test suite on your own, if that thread doesn't cover it for you)</p>",
        "id": 161157735,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553007320
    },
    {
        "content": "<p>I guess we could start by trying to convert keccak into a benchmark just because I <em>know</em> it's one big fn, so that's an easy one. It's also an interesting edge case, iirc. I think it uses a macro to generate a really big control-flow graph.</p>",
        "id": 161157779,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553007356
    },
    {
        "content": "<p>I'm a bit surprised the location insensitive didn't help more there</p>",
        "id": 161157819,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553007363
    },
    {
        "content": "<p>(Actually, <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> -- those results -- what exactly were they comparing, do you know? Was that \"no NLL at all\" vs \"NLL with polonius enabled\"?)</p>",
        "id": 161157860,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553007387
    },
    {
        "content": "<blockquote>\n<p>(Actually, <span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> -- those results -- what exactly were they comparing, do you know? Was that \"no NLL at all\" vs \"NLL with polonius enabled\"?)</p>\n</blockquote>\n<p>which ones specifically?</p>",
        "id": 161163927,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1553011626
    },
    {
        "content": "<p>was everything against AST if I'm not wrong</p>",
        "id": 161163958,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1553011649
    },
    {
        "content": "<p>I did do a GitHub search for repositories with code enabling NLL and generated facts from about twelve of them or so, but nothing takes any measurable time to execute on my machine, except fact generation, which for some instances generated hundreds of megabytes of tuples</p>",
        "id": 161164107,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1553011738
    },
    {
        "content": "<p>(I figured it's not so interesting to analyse code not using NLL, in particular with the hybrid algorithm)</p>",
        "id": 161164170,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1553011768
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> ok -- if they were comparing against the ast borrow checker, I guess what we really need to be doing is comparing AST vs NLL vs Polonius.</p>",
        "id": 161168219,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553014415
    },
    {
        "content": "<p>yeah, if I remember correct we had</p>",
        "id": 161170355,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1553015677
    },
    {
        "content": "<p>AST vs NLL and AST vs Polonius</p>",
        "id": 161170386,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1553015691
    },
    {
        "content": "<p>maybe we can get those numbers into a spreadsheet or something so we can compare better</p>",
        "id": 161173823,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553017584
    },
    {
        "content": "<p>Do you mean mine or <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span>'s?</p>",
        "id": 161177161,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1553019939
    },
    {
        "content": "<blockquote>\n<p>to analyse code not using NLL</p>\n</blockquote>\n<p>Everything in Rust 2018 will be using (some form of) NLL</p>",
        "id": 161182340,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1553023630
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> ok, so it means I should look for either edition = 2018 or the NLL feature flag?</p>",
        "id": 161184861,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1553025639
    },
    {
        "content": "<p>I would think that's more accurate (it's not 100% complete as there's lots of ways to specify the edition)</p>",
        "id": 161184990,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1553025766
    },
    {
        "content": "<p>Here's a <a href=\"/user_uploads/4715/ZeEbWfM3acDA99J-3MLY99JT/results.csv\" target=\"_blank\" title=\"results.csv\">CSV file</a>  with the results of running Polonius' various algorithms against the crates I found, but as I mentioned they really are mostly at zero.</p>",
        "id": 161190743,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1553030165
    },
    {
        "content": "<p>Numbers are not per-crate but per-function as ususal</p>",
        "id": 161190807,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1553030235
    },
    {
        "content": "<p>(if I'm going with something like this, I should try to reverse engineer at least part of what Crater does and do that probably, but this was something of a proof-of-concept of sorts)</p>",
        "id": 161190903,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1553030295
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I generated tuples on keccak and ran them through Polonius, but I still get roughly zero seconds on every function; I'm starting to suspect I'm doing something wrong when generating the inputs</p>",
        "id": 161267848,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1553101297
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> Could you share how you did to run rustc-perf with Polonius? I haven't managed to figure out how to do that from reading the READMEs in the repository</p>",
        "id": 161267951,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1553101344
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> did you read the topic, there was some discussion about how to do it in there</p>",
        "id": 161272371,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553103880
    },
    {
        "content": "<p>Have you tried just running the benchmark suite unedited?</p>",
        "id": 161272800,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553104124
    },
    {
        "content": "<p>You might ping <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> -- if they're around, they might be able to help</p>",
        "id": 161272829,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553104145
    },
    {
        "content": "<p>It looks like to enable polonius, <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/finding.20perf.20spikes/near/158930500\" title=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/finding.20perf.20spikes/near/158930500\">the idea was to edit the sources and add the command line parameter for now</a></p>",
        "id": 161272856,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553104164
    },
    {
        "content": "<blockquote>\n<p>Have you tried just running the benchmark suite unedited?</p>\n</blockquote>\n<p>I didn't manage to get the build command for collector to produce any binaries, but it compiles now.</p>",
        "id": 161278752,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1553107362
    },
    {
        "content": "<p>Ok, so the settings enabled when benchmarking are not set in perf/collector but in rustc itself? So I guess I should compile a local copy of rustc and run that</p>",
        "id": 161278803,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1553107395
    },
    {
        "content": "<p>Ah ok I need Linux to run the performance benchmarks</p>",
        "id": 161279895,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1553108085
    },
    {
        "content": "<blockquote>\n<p>Ok, so the settings enabled when benchmarking are not set in perf/collector but in rustc itself? So I guess I should compile a local copy of rustc and run that</p>\n</blockquote>\n<p>wait no</p>",
        "id": 161281192,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553108996
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> they are set in the perf/collector -- you can add some custom flags</p>",
        "id": 161281245,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553109005
    },
    {
        "content": "<blockquote>\n<p>Ah ok I need Linux to run the performance benchmarks</p>\n</blockquote>\n<p>oh :)</p>",
        "id": 161281263,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553109011
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>Ah ok I need Linux to run the performance benchmarks</p>\n</blockquote>\n<p>oh :)</p>\n</blockquote>\n<p>It's fine, I already have a Vagrant box up</p>",
        "id": 161281309,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1553109071
    },
    {
        "content": "<p>Just surprised :)</p>",
        "id": 161281320,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1553109081
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"204115\">Albin Stjerna</span> they are set in the perf/collector -- you can add some custom flags</p>\n</blockquote>\n<p>Ah, right, and I took the link in the Zulip message you linked to a bit too literally, I see</p>",
        "id": 161281433,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1553109163
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 161281540,
        "sender_full_name": "simulacrum",
        "timestamp": 1553109243
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> I'll be around for the next ~hour or so if you have questions</p>",
        "id": 161281541,
        "sender_full_name": "simulacrum",
        "timestamp": 1553109243
    },
    {
        "content": "<p>The reason we need linux is that we only support <code>perf</code> as the stats collection backend</p>",
        "id": 161281597,
        "sender_full_name": "simulacrum",
        "timestamp": 1553109278
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"204115\">Albin Stjerna</span> I'll be around for the next ~hour or so if you have questions</p>\n</blockquote>\n<p>Thanks! I'll let you know. :)</p>",
        "id": 161281610,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1553109292
    },
    {
        "content": "<p>I think in the future it's plausible we'll support other things but I don't have the time to do the legwork</p>",
        "id": 161281612,
        "sender_full_name": "simulacrum",
        "timestamp": 1553109294
    },
    {
        "content": "<p>That sounds like an incredibly reasonable set of priorities</p>",
        "id": 161281660,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1553109322
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> Could you share how you did to run rustc-perf with Polonius? I haven't managed to figure out how to do that from reading the READMEs in the repository</p>\n</blockquote>\n<p>did you figure this out?</p>",
        "id": 161287722,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1553113514
    },
    {
        "content": "<p>sorry but I have been very busy</p>",
        "id": 161287734,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1553113522
    },
    {
        "content": "<p>after Rust Latam I'd be a new person <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 161287753,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1553113541
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> Could you share how you did to run rustc-perf with Polonius? I haven't managed to figure out how to do that from reading the READMEs in the repository</p>\n</blockquote>\n<p>did you figure this out?</p>\n</blockquote>\n<p>I think so, but thanks!</p>",
        "id": 161289049,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1553114407
    },
    {
        "content": "<blockquote>\n<p>after Rust Latam I'd be a new person <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>\n</blockquote>\n<p>As I usually say to my friends when they are organising things (or otherwise seem overburdened); don't die! (I know it's a very low bar)</p>",
        "id": 161289654,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1553114839
    },
    {
        "content": "<p>Update: I think the benchmarks are running now. I get no output what so ever, but the fans on my computer sound like it is about to take off from my desk, so something is happening anyway</p>",
        "id": 161333533,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1553165083
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>after Rust Latam I'd be a new person <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>\n</blockquote>\n<p>As I usually say to my friends when they are organising things (or otherwise seem overburdened); don't die! (I know it's a very low bar)</p>\n</blockquote>\n<p>hehehe, it's a very time consuming thing to do :)</p>",
        "id": 161348184,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1553177321
    },
    {
        "content": "<p>Ok, I'm not sure if it was a good idea, but I have now tweaked rustc-perf to also run a Polonius pass, similar to the NLL pass, and it seems to be working: <a href=\"/user_uploads/4715/KH2FK6bGdDIcXUxpRm7yuLSb/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">cargo-check wall clock time</a>, <a href=\"/user_uploads/4715/dENbejnKhCbfITcij3PNk3LW/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">cargo-check max-rss</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/KH2FK6bGdDIcXUxpRm7yuLSb/pasted_image.png\" target=\"_blank\" title=\"cargo-check wall clock time\"><img src=\"/user_uploads/4715/KH2FK6bGdDIcXUxpRm7yuLSb/pasted_image.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/4715/dENbejnKhCbfITcij3PNk3LW/pasted_image.png\" target=\"_blank\" title=\"cargo-check max-rss\"><img src=\"/user_uploads/4715/dENbejnKhCbfITcij3PNk3LW/pasted_image.png\"></a></div>",
        "id": 161690671,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1553550202
    },
    {
        "content": "<p>Tomorrow I'll try running the it for all of them and not just cargo and see how they behave; it would be interesting to do some clustering to figure out if the overhead for using Polonius over NLL is constant or if it only happens in some packages, hopefully I can use that information to extract a few types and construct some benchmarks</p>",
        "id": 161690793,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1553550283
    },
    {
        "content": "<ul>\n<li><a href=\"/user_uploads/4715/HdeXdS_Vnkfvevcdljzec9qO/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">Less than 50% performance regression NLL -&gt; Polonius</a><div class=\"message_inline_image\"><a href=\"/user_uploads/4715/HdeXdS_Vnkfvevcdljzec9qO/pasted_image.png\" target=\"_blank\" title=\"Less than 50% performance regression NLL -&gt; Polonius\"><img src=\"/user_uploads/4715/HdeXdS_Vnkfvevcdljzec9qO/pasted_image.png\"></a></div></li>\n<li><a href=\"/user_uploads/4715/J79ZWEeZay1WvOiwTxn-AwbD/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">More than 50% performance regression NLL -&gt; Polonius</a> <div class=\"message_inline_image\"><a href=\"/user_uploads/4715/J79ZWEeZay1WvOiwTxn-AwbD/pasted_image.png\" target=\"_blank\" title=\"More than 50% performance regression NLL -&gt; Polonius\"><img src=\"/user_uploads/4715/J79ZWEeZay1WvOiwTxn-AwbD/pasted_image.png\"></a></div></li>\n<li><a href=\"/user_uploads/4715/lQ3gOyo_BPPnJFssqDYe0I8u/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">Bar plot (percentages, log-scale)</a><div class=\"message_inline_image\"><a href=\"/user_uploads/4715/lQ3gOyo_BPPnJFssqDYe0I8u/pasted_image.png\" target=\"_blank\" title=\"Bar plot (percentages, log-scale)\"><img src=\"/user_uploads/4715/lQ3gOyo_BPPnJFssqDYe0I8u/pasted_image.png\"></a></div></li>\n</ul>",
        "id": 161776472,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1553616207
    },
    {
        "content": "<p>I guess a few of those in the middle would make good benchmarking targets?</p>",
        "id": 161776580,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1553616263
    },
    {
        "content": "<p>Just for kicks, I did some k-means clustering on the same data (that is, relative performance for RSS and wall-clock time), gave it 8 classes (a number I arbitrarily made up), and it came up with one each for html5ever, tuple-stress, wg-grammar, ucd, encoding, inflate, and clap-rs, and everything else it binned in the same category. This seems fairly reasonable to me, as those are outliers and the others have roughly similar performance.</p>",
        "id": 161779683,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1553618316
    },
    {
        "content": "<p>It's also interesting to note that inflate, ucd, and wg-grammar all have worse relative memory performance than in terms of time, for whatever that might be worth</p>",
        "id": 161782197,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1553619900
    },
    {
        "content": "<p>I guess that has to have something to do with the number of tuples shoveled between Polonius and rustc?</p>",
        "id": 161782260,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1553619946
    },
    {
        "content": "<p>Oh, and <a href=\"/user_uploads/4715/83IR1Dv0V68PZP7wcHTPCITn/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">this is how the relative difference (in percent) look plotted</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/83IR1Dv0V68PZP7wcHTPCITn/pasted_image.png\" target=\"_blank\" title=\"this is how the relative difference (in percent) look plotted\"><img src=\"/user_uploads/4715/83IR1Dv0V68PZP7wcHTPCITn/pasted_image.png\"></a></div>",
        "id": 161842714,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1553679552
    },
    {
        "content": "<p>Ok, so for everyone who wasn't at the meeting but who might be interested (that is, everyone except <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>); I hacked together a set of scripts to a) scrape GitHub and <a href=\"http://crates.io\" target=\"_blank\" title=\"http://crates.io\">crates.io</a> for crates, in order of popularity (stars/recent downloads) and b) time <code>cargo check</code> under both NLL and Polonius on them.</p>\n<p>I ran each <code>cargo check</code> three times, and recorded the smallest runtime (as measured in wall-clock time). I also used the three records to calculate p-values for the null hypothesis (that is, no difference between NLL and Polonius).</p>\n<p><a href=\"/user_uploads/4715/NyWe7YilTPnKpHlidgUyj1tx/results.csv\" target=\"_blank\" title=\"results.csv\">Here is a CSV with about 900 of the results</a></p>",
        "id": 162942924,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1554838500
    },
    {
        "content": "<p>I also have a list of the crates I discarded because they didn't compile (or, in some cases, because they had wonky pull URLs)</p>",
        "id": 162943215,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1554838706
    },
    {
        "content": "<p>I tried using Criterion for benchmarking the facts currently in the repo, under both the hybrid method and the optimised Datafrog algorithm, and <a href=\"/user_uploads/4715/XqzLc3df42MpnUGDRkFMdlwS/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">the results seem to show a minor improvement for some cases with a minor overhead in others</a>.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/XqzLc3df42MpnUGDRkFMdlwS/pasted_image.png\" target=\"_blank\" title=\"the results seem to show a minor improvement for some cases with a minor overhead in others\"><img src=\"/user_uploads/4715/XqzLc3df42MpnUGDRkFMdlwS/pasted_image.png\"></a></div>",
        "id": 163364507,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1555319720
    },
    {
        "content": "<p>(The clap-rs facts take too long to be viable; Criterion is only good for micro-benchmarks)</p>",
        "id": 163364587,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1555319779
    },
    {
        "content": "<p>Unless you want to wait literal hours for results</p>",
        "id": 163364591,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1555319786
    },
    {
        "content": "<p>Code is <a href=\"https://github.com/albins/polonius/tree/criterion-%C2%B5bench\" target=\"_blank\" title=\"https://github.com/albins/polonius/tree/criterion-%C2%B5bench\">in the polonius-µbench branch of my fork</a> and is executed by just running <code>cargo bench</code> (works on non-nightly as well).</p>",
        "id": 163365271,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1555320557
    },
    {
        "content": "<p>OK, because I didn't sleep well and had to do something more brainless, I kept running the trial compilation and now I can report from building a little over 3000 crates that there seems to be very little difference between Polonius and NLL: </p>\n<ul>\n<li>the median p-value shows no significant difference in runtime</li>\n<li>geometric means of runtimes across all builds is 0.554 for Polonius and 0.534 for plain NLL.</li>\n<li>the vast majority of runtimes falls within the category of between a 0 and 5 % runtime increase when enabling Polonius: <a href=\"/user_uploads/4715/-lkK49kV9cM67voLTHtT4ocp/Unknown.png\" target=\"_blank\" title=\"Unknown.png\">Bar plot of runtime increases in percents</a><div class=\"message_inline_image\"><a href=\"/user_uploads/4715/-lkK49kV9cM67voLTHtT4ocp/Unknown.png\" target=\"_blank\" title=\"Bar plot of runtime increases in percents\"><img src=\"/user_uploads/4715/-lkK49kV9cM67voLTHtT4ocp/Unknown.png\"></a></div></li>\n</ul>",
        "id": 163720444,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1555660420
    },
    {
        "content": "<p>Actually, this is suspiciously good, I'll have to investigate</p>",
        "id": 163720454,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1555660438
    },
    {
        "content": "<p>The most likely explanation is that the entire build process is timed and that dependencies are not built with Polonius enabled; the build process is a bit opaque to me</p>",
        "id": 163720521,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1555660507
    },
    {
        "content": "<blockquote>\n<p>Actually, this is suspiciously good, I'll have to investigate</p>\n</blockquote>\n<p>Heh, indeed</p>",
        "id": 163759952,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555703092
    }
]