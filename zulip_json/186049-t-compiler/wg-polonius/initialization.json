[
    {
        "content": "<p>Hi <span class=\"user-group-mention\" data-user-group-id=\"1184\">@WG-polonius</span>! By now Niko should be on vacation (DON'T READ NIKO, VACATE!),  but I figured I should give working on initialisation a shot anyway. I have a rough idea of what I should do, and some questions, including one on error reporting that <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/illegal.20subset.20relations.20polonius.2399/near/161234884\" title=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/illegal.20subset.20relations.20polonius.2399/near/161234884\">overlaps</a> with @lqd's work on illegal subset relations.</p>\n<p>Would anyone be willing to have a quick chat about this at some point? It makes more sense to me to see if anyone has answers to my questions before I start digging the answers out of Rust and/or make assumptions.</p>",
        "id": 170875528,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563181521
    },
    {
        "content": "<p>with Niko and Felix gone, maybe Matthew would be a good person to talk to</p>",
        "id": 170878397,
        "sender_full_name": "lqd",
        "timestamp": 1563184308
    },
    {
        "content": "<p>or ofc eddyb</p>",
        "id": 170878463,
        "sender_full_name": "lqd",
        "timestamp": 1563184343
    },
    {
        "content": "<p>Hmh, yes probably</p>",
        "id": 170880018,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563185890
    },
    {
        "content": "<p>Thanks</p>",
        "id": 170880033,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563185904
    },
    {
        "content": "<p>Ping <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> to begin with, would you have the time to talk a bit about initialisation at some point?</p>",
        "id": 170881374,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563187142
    },
    {
        "content": "<p>I should be free and at my computer in 7-8 hours. I could answer any really simple questions now.</p>",
        "id": 170884026,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1563190021
    },
    {
        "content": "<p>/me does not read</p>",
        "id": 170884516,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1563190554
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> thanks! Poke me when you're available, or preferably slightly before that so I can get to a computer :)</p>",
        "id": 170886836,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563192978
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> I haven't forgotten your generous offer to read what I write about Polonius, but I got sidetracked by writing a Pratt parser/Pratt parser generator in Rust, a creature that seems to be conspicuously absent from the Rust ecosystem. Just curious, have there been discussions about strengthening the Rust parser ecosystem? Or is it considered not particularly important considering the existence of other well-known external tools like Ragel that already target Rust? I haven't worked in this space long enough to know.</p>",
        "id": 170908055,
        "sender_full_name": "Robert Jacobson",
        "timestamp": 1563207443
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"226268\">@Robert Jacobson</span> I don't know, honestly, I'm rather new here myself.</p>",
        "id": 170911495,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563210036
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> I should be able to discuss things in 20-30 minutes</p>",
        "id": 170912849,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1563211102
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> Yay!</p>",
        "id": 170914716,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563212266
    },
    {
        "content": "<p>Ok, I'm here</p>",
        "id": 170915811,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1563213136
    },
    {
        "content": "<p>So, there were some notes on this here: <a href=\"https://paper.dropbox.com/doc/Polonius-and-initialization--Ag9uxQB9rVuyu~JQ71KkYscwAg-mNvR4jqITCdsJDUMEhFbv\" target=\"_blank\" title=\"https://paper.dropbox.com/doc/Polonius-and-initialization--Ag9uxQB9rVuyu~JQ71KkYscwAg-mNvR4jqITCdsJDUMEhFbv\">https://paper.dropbox.com/doc/Polonius-and-initialization--Ag9uxQB9rVuyu~JQ71KkYscwAg-mNvR4jqITCdsJDUMEhFbv</a></p>",
        "id": 170915898,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1563213214
    },
    {
        "content": "<p>...which I don't have write access to</p>",
        "id": 170916330,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1563213490
    },
    {
        "content": "<p>But the last section provides some details on what to do.</p>",
        "id": 170916687,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1563213752
    },
    {
        "content": "<p>If you have an email for me (feel free to PM) I can invite you</p>",
        "id": 170916707,
        "sender_full_name": "simulacrum",
        "timestamp": 1563213772
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> Yes, I had a look at them earlier</p>",
        "id": 170916747,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563213798
    },
    {
        "content": "<p>I think I understand the big picture: so I want to produce the following facts:<br>\n- \"path x1 is a child of path x2\"<br>\n- \"path x was accessed at point p\" facts<br>\n- \"path x was initialised at point p\" facts<br>\n- \"path x was deinitialised at point p\"</p>",
        "id": 170916917,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563213931
    },
    {
        "content": "<p>I think it would be fairly straightforward to use that to calculate which paths are inintialised maybe/for sure where, and then from that to errors on invalid access</p>",
        "id": 170917029,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563213999
    },
    {
        "content": "<p>However, I think I should start by calculating <code>var_initialized_on_exit(V, P)</code> because I already have those tuples collected</p>",
        "id": 170917085,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563214035
    },
    {
        "content": "<p>It should be true if the variable V might be initialised at P</p>",
        "id": 170917098,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563214044
    },
    {
        "content": "<p>So step 1 is to implement <code>Atom</code> for <code>MovePathIndex</code> (the one defined here: <a href=\"https://github.com/rust-lang/rust/blob/f3f9d6dfd92dfaeb14df891ad27b2531809dd734/src/librustc_mir/dataflow/move_paths/mod.rs#L16\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/f3f9d6dfd92dfaeb14df891ad27b2531809dd734/src/librustc_mir/dataflow/move_paths/mod.rs#L16\">https://github.com/rust-lang/rust/blob/f3f9d6dfd92dfaeb14df891ad27b2531809dd734/src/librustc_mir/dataflow/move_paths/mod.rs#L16</a>)</p>",
        "id": 170917110,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1563214055
    },
    {
        "content": "<p>Ok, that was another question I had, what I should use for the input</p>",
        "id": 170917124,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563214069
    },
    {
        "content": "<p>But that was my best candidate :)</p>",
        "id": 170917136,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563214080
    },
    {
        "content": "<blockquote>\n<p>However, I think I should start by calculating <code>var_initialized_on_exit(V, P)</code> because I already have those tuples collected</p>\n</blockquote>\n<p>That sounds more sensible than trying to implement the remaining half of the borrow checker</p>",
        "id": 170917193,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1563214096
    },
    {
        "content": "<p>Arr, How Hard Could It Be™</p>",
        "id": 170917215,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563214118
    },
    {
        "content": "<p>Very hard with the time you have.</p>",
        "id": 170917228,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1563214136
    },
    {
        "content": "<p>True</p>",
        "id": 170917235,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563214143
    },
    {
        "content": "<p>Most of the facts can be extracted from this struct <a href=\"https://github.com/rust-lang/rust/blob/f3f9d6dfd92dfaeb14df891ad27b2531809dd734/src/librustc_mir/dataflow/move_paths/mod.rs#L99\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/f3f9d6dfd92dfaeb14df891ad27b2531809dd734/src/librustc_mir/dataflow/move_paths/mod.rs#L99\">https://github.com/rust-lang/rust/blob/f3f9d6dfd92dfaeb14df891ad27b2531809dd734/src/librustc_mir/dataflow/move_paths/mod.rs#L99</a></p>",
        "id": 170917250,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1563214164
    },
    {
        "content": "<p>Isn't that sort of cheating?</p>",
        "id": 170917266,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563214178
    },
    {
        "content": "<p>Because that struct already kind of has all the initialisation data, right?</p>",
        "id": 170917277,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563214191
    },
    {
        "content": "<p>It only has where things are initialized and deinitialized, not the initialization flow data.</p>",
        "id": 170917377,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1563214235
    },
    {
        "content": "<p>Oh, ok, then it makes sense</p>",
        "id": 170917405,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563214260
    },
    {
        "content": "<p>Ok, and that one obviously has the mapping from local &lt;-&gt; move paths</p>",
        "id": 170917429,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563214277
    },
    {
        "content": "<p>So that was...all my questions I think</p>",
        "id": 170917448,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563214295
    },
    {
        "content": "<p><code>rev_lookup</code> contains the relations between move paths and locals, and the parent relation.</p>",
        "id": 170917463,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1563214313
    },
    {
        "content": "<p>and <code>moves</code> and <code>inits</code>contain the initializations and deinitializations</p>",
        "id": 170917551,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1563214361
    },
    {
        "content": "<p>Yes, I'm already using it to get var_initialized_on_exit (which should probably be renamed to var_may_be_initialized_on_exit)</p>",
        "id": 170917557,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563214366
    },
    {
        "content": "<p>Which leaves the \"used at\" facts, which you fortunately don't need for <code>var_may_be_initialized_on_exit</code></p>",
        "id": 170917590,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1563214403
    },
    {
        "content": "<p>no, and I already have them right?</p>",
        "id": 170917599,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563214416
    },
    {
        "content": "<p>I needed them for liveness</p>",
        "id": 170917609,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563214427
    },
    {
        "content": "<p>Unless I need a used at for a move path and not a variable hmm</p>",
        "id": 170917677,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563214454
    },
    {
        "content": "<p>Yes</p>",
        "id": 170917686,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1563214462
    },
    {
        "content": "<p>So liveness considers <code>x.a</code> a use of <code>x</code>, but for move errors it's only a use of <code>x.a</code></p>",
        "id": 170917705,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1563214488
    },
    {
        "content": "<p>ah of course</p>",
        "id": 170917721,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563214502
    },
    {
        "content": "<p>so it's higher resolution</p>",
        "id": 170917728,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563214509
    },
    {
        "content": "<p>Actually, they shouldn't be too bad to generate</p>",
        "id": 170917873,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1563214594
    },
    {
        "content": "<p>You can add a <code>visit_place</code> method to the implementation here: <a href=\"https://github.com/rust-lang/rust/blob/099f9e4e8aac3968888636e2126c4b7f8e6bb2d3/src/librustc_mir/borrow_check/nll/invalidation.rs#L57\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/099f9e4e8aac3968888636e2126c4b7f8e6bb2d3/src/librustc_mir/borrow_check/nll/invalidation.rs#L57\">https://github.com/rust-lang/rust/blob/099f9e4e8aac3968888636e2126c4b7f8e6bb2d3/src/librustc_mir/borrow_check/nll/invalidation.rs#L57</a></p>",
        "id": 170917936,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1563214650
    },
    {
        "content": "<p>Then you generate a uses fact if the context is a non-mutating use, or it's a <code>MutatingUse(Borrow)</code>.</p>",
        "id": 170918170,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1563214782
    },
    {
        "content": "<p>Hm, ok, and how do I go from there to the MovePathIndex of the use?</p>",
        "id": 170918239,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563214813
    },
    {
        "content": "<p><code>move_data.rev_lookup.find()</code>, and then extract the move path from the returned value.</p>",
        "id": 170918341,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1563214921
    },
    {
        "content": "<p>Ah, ok so I have that in the context</p>",
        "id": 170918393,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563214933
    },
    {
        "content": "<p>You can add it.</p>",
        "id": 170918401,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1563214942
    },
    {
        "content": "<p>Ok, that makes sense</p>",
        "id": 170918455,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563214990
    },
    {
        "content": "<p>That's not quite correct for <code>Box</code> de-references and inline asm. But it should be a close approximation.</p>",
        "id": 170918479,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1563215013
    },
    {
        "content": "<p>and it can be fixed.</p>",
        "id": 170918490,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1563215023
    },
    {
        "content": "<p>Ah, ok</p>",
        "id": 170918563,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563215053
    },
    {
        "content": "<p>and assigning to any dereference....</p>",
        "id": 170918569,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1563215061
    },
    {
        "content": "<p>Haha</p>",
        "id": 170918594,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563215076
    },
    {
        "content": "<p>What I have learned from this project is that it's a miracle that any compiler ever works for anything</p>",
        "id": 170918611,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563215096
    },
    {
        "content": "<p>So true</p>",
        "id": 170918637,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1563215109
    },
    {
        "content": "<p>I currently have a sheet of paper containing a very messy mind-map of which module calls which function where to populate data for which other function, and that's just to have an idea for where Polonius intersects with NLL</p>",
        "id": 170918682,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563215156
    },
    {
        "content": "<p>Ok, but I think that's more than enough to get me started. Do you also have a suggestion for where to intercept <code>MoveData</code> and start emitting facts?</p>",
        "id": 170918784,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563215210
    },
    {
        "content": "<p>Do you think <code>liveness::generate()</code> would do, or should it be earlier?</p>",
        "id": 170918931,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563215324
    },
    {
        "content": "<p>I'd probably do it right when we create the <code>AllFacts</code></p>",
        "id": 170919273,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1563215568
    },
    {
        "content": "<p>In the totally accurately named nll/mod.rs:compute_regions</p>",
        "id": 170919296,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1563215604
    },
    {
        "content": "<p>I did wonder about that one</p>",
        "id": 170919307,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563215617
    },
    {
        "content": "<p>But that sounds good</p>",
        "id": 170919382,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563215672
    },
    {
        "content": "<p>Thank you so much!</p>",
        "id": 170919386,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563215677
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> I ran into a snag of sorts; I'm not sure I understand how MIR <code>Local</code>s translate to their corresponding <code>MovePathIndex</code>es. So what I did was I populated the <code>var_starts_path</code> fact from basically dumping the lookups in <code>MovePathLookup</code> so that I have tuples of <code>(Local, MovePathIndex)</code>. In my small sample program, this generates one <code>MovePathIndex</code>per <code>Local</code>, basically, which is weird because many of them map to the same place. Basically, I don't know where to look for the information that somehow shows that a case like <code>_1 = _2</code> means <code>_1</code> now is the \"same\" as <code>_2</code>, for some definition of sameness.</p>",
        "id": 171606968,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563975934
    },
    {
        "content": "<p>Or, I guess what is weird is that when I try to populate my <code>parent</code>relation by iterating over all the <code>MovePaths</code> in <code>MoveData</code> and adding a tuple per entry I get from <code>move_path.parents()</code>, I only get one interesting parent relationship and nothing matching the move paths where things are actually moved out of my tuple</p>",
        "id": 171607157,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563976076
    },
    {
        "content": "<p>Specifically, my code looks like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">populate_polonius_move_facts</span><span class=\"p\">(</span><span class=\"n\">all_facts</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">AllFacts</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">move_data</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">MoveData</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;_</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_location_table</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">LocationTable</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">all_facts</span><span class=\"p\">.</span><span class=\"n\">var_starts_path</span><span class=\"p\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">move_data</span><span class=\"p\">.</span><span class=\"n\">rev_lookup</span><span class=\"p\">.</span><span class=\"n\">iter_locals_enumerated</span><span class=\"p\">().</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">m</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"p\">)));</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">idx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">move_path</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">move_data</span><span class=\"p\">.</span><span class=\"n\">move_paths</span><span class=\"p\">.</span><span class=\"n\">iter_enumerated</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">all_facts</span><span class=\"p\">.</span><span class=\"n\">parent</span><span class=\"p\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">move_path</span><span class=\"p\">.</span><span class=\"n\">parents</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">move_data</span><span class=\"p\">.</span><span class=\"n\">move_paths</span><span class=\"p\">).</span><span class=\"n\">iter</span><span class=\"p\">().</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|&amp;</span><span class=\"n\">parent</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">parent</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">idx</span><span class=\"p\">)));</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>I would have expected the \"interesting\" <code>MoveIndex</code>es to also have <code>parent</code>s, but they don't? Is this because my program isn't interesting enough (i.e. compiles)?</p>",
        "id": 171607335,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563976196
    },
    {
        "content": "<p>Perhaps I should hold off judgement until I have Init events and see where that would get me</p>",
        "id": 171607979,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563976603
    },
    {
        "content": "<p>Also, when looking at the <code>Init</code>struct, the documentation says that \"initializations can be from an argument or from a statement\". What does it mean for an initialisation to happen in an argument?</p>",
        "id": 171612001,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563979438
    },
    {
        "content": "<blockquote>\n<p>Also, when looking at the <code>Init</code>struct, the documentation says that \"initializations can be from an argument or from a statement\". What does it mean for an initialisation to happen in an argument?</p>\n</blockquote>\n<p>given <code>fn f(x: i32) {}</code> <code>x</code> is initialized \"before the function starts\". That's recorded as an initialization from an assignment</p>",
        "id": 171630658,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1563992911
    },
    {
        "content": "<p>For the other stuff it would be helpful to see the function that you're testing on and output facts</p>",
        "id": 171630966,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1563993129
    },
    {
        "content": "<p>I'll do some more thinking tomorrow and see if I can figure out what I would even expect it to do and let you know. There <em>is</em> a chance that it actually works and that I'm just confused. I think I should have most of the logic for calculating <code>var_maybe_initialized_on_exit</code>(which should probably be called <code>var_maybe_partially_initialized_on_exit</code>, but that's just too long)</p>",
        "id": 171640795,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1564000373
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> Ok, so I put everything together and added some compare functionality similar to what I did for provenance variable liveness. I haven't verified that the parenthood relationship works yet, but I have identified a definite problem with terminators that I don't know how to handle, and would very much appreciate your input on.</p>\n<p><strong>Situation</strong>: there is a basic block, (N) with a terminator <code>terminator(N)</code> that performs one or more function calls with moves (of  <code>m</code>) and one assignment (of <code>a</code>), like <code>a = foo(move m)</code>, with terminators going to a block (<code>RETURN</code>) and (<code>UNWIND</code>).<br>\n<strong>What should happen</strong>: it's unclear to me whether <code>m</code> should be considered initialised in <code>terminator(N)</code>. Does the move always happen before the call? However, it <em>is</em> clear to me that in <code>RETURN</code>, <code>m</code>should be deinitialised (definitely), and <code>a</code>should be initialised (definitely).<br>\n<strong>What actually happens</strong>: the rustc-generated <code>var_maybe_initialized_on_exit</code> has:<br>\n-  <code>var_maybe_initialized_on_exit(a, terminator(N)) = False.</code><br>\n- <code>var_maybe_initialized_on_exit(a, start(RETURN)) = True.</code><br>\n- <code>var_maybe_initialized_on_exit(a, start(UNWIND)) = False.</code><br>\n- <code>var_maybe_initialized_on_exit(m, start(UNWIND)) = False.</code></p>\n<p>However, as Polonius doesn't see the difference between a terminator and a regular point in the program-flow, in other words it treats both arms the same: both the move and the initialisation happens before the unwind arm.</p>\n<p><strong>Suggested fix</strong>: Would it be sufficient to just emit <code>initialized_at(a, start(RETURN))</code> in this case, you think?</p>",
        "id": 171679550,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1564050520
    },
    {
        "content": "<p>Livened is able to ignore most of this due to how MIR is constructed. Moving the initialization to the start of the return block is the correct fix for now. I should probably go through the handling of calls in MIR again sometime, because it's a bit of a hack that doesn't easily port to polonius.</p>",
        "id": 171729877,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1564090722
    },
    {
        "content": "<p>Ok, I'll try that and see what else breaks/was already broken. :)</p>",
        "id": 171777067,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1564150558
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 171777084,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1564150562
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> Ok, I'm almost there now. I just have two problems left:<br>\n- my emitted facts and the ones in Polonius don't always agree on when a move caused by a function call happens. This is a bit confusing, as I just emit facts straight from <code>MoveData</code>. I'll have a look at that later, but:<br>\n- I currently don't know how to set function arguments as initialised. I know I can find them in <code>MoveData::inits</code>, but they don't have a <code>Location</code>of any kind in the case of an <code>InitLocation::Argument</code>. So I guess my question is: how do I find the <code>Location</code>of the start of the function taking a <code>Local</code>as argument?</p>",
        "id": 172216605,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1564663304
    },
    {
        "content": "<p>(or, I guess I could just find all functions and mark their arguments as initialised if that's easier)</p>",
        "id": 172216665,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1564663335
    },
    {
        "content": "<p><code>InitLocation:: Argument</code> really should be <code>Parameter</code>, it  should be fine to use the start point of the CFG for them.</p>",
        "id": 172218167,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1564664686
    },
    {
        "content": "<p>Hmh, and how would I find that?</p>",
        "id": 172218214,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1564664733
    },
    {
        "content": "<p>I mean, I do have access to the MIR <code>Body</code>, but how do I even tell which function I am in?</p>",
        "id": 172218288,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1564664775
    },
    {
        "content": "<p>Or is it one <code>Body</code>per function?</p>",
        "id": 172218305,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1564664799
    },
    {
        "content": "<p>Ah yes, ok</p>",
        "id": 172218327,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1564664821
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> Ok, now the calculated <code>var_maybe_initialized_on_exit</code>:s actually produce the same <code>region_live_at</code> values for all inputs (yay!), and mostly the same input facts as Rust. I still have a problem with moves in function calls though. For example, I have a function like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">13</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">data</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">x</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;y = {:?}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;x = {:?}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>It has  <a href=\"/user_uploads/4715/l96eRsR9pC4SIjKHhGDvgy4b/rustc.main.-.nll.0.pdf\" target=\"_blank\" title=\"rustc.main.-.nll.0.pdf\">this MIR</a>, and <a href=\"/user_uploads/4715/kMUWbz-hs6KW1dHiNiUBOgpD/drop-liveness-error-polonius.pdf\" target=\"_blank\" title=\"drop-liveness-error-polonius.pdf\">these Polonius inputs/results</a>. Notably, the only difference to the expected values is the status of the moved variables <code>_25</code> and <code>_46</code>. The discrepancy happens for <code>_25</code> after the terminator <code>_23 = const std::fmt::ArgumentV1::&lt;'_&gt;::new::&lt;Foo&lt;'_&gt;&gt;(move _24, move _25)</code>. In the facts I generate, <code>_25</code>is immediately moved and so is moved on entry to bb2, and on the entire unwind path. In the inputs from rustc (which may be buggy), it is moved by a <code>StorageDead</code> immediately upon entry to 2, but also magically resurrects at the end of the unwind path (in the <code>resume</code> block); despite both versions agreeing that it's uninitialised in both predecessor blocks (3 and 8).</p>\n<p>The same thing (except the magical resurrection) happens to <code>_46</code>.</p>\n<p>What is the expected behaviour here? Can a move in a terminator somehow not happen? Why is the first argument moved and not the second one?</p>",
        "id": 172236223,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1564676855
    },
    {
        "content": "<p>I can't get the polonius inputs pdf to load correctly</p>",
        "id": 172257874,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1564691030
    },
    {
        "content": "<p><code>_25</code> and <code>_46</code> definitely shouldn't be initialized after the function calls.</p>",
        "id": 172258072,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1564691142
    },
    {
        "content": "<p>Ok, then I’ll have a closer look at the other reported differences and see if they are identical and if so consider it a bug in the current fact generation</p>",
        "id": 172287942,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1564728685
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> Ok, I have gone through the cases where my output is different from Rustc's, and in almost all cases it's the same problem (a move in a function call not happening until a later <code>StorageDead</code>). In the other two cases it must also be a bug, because they have variables suddenly being initialised without ever having even been even mentioned in the MIR. In other words, I think the computed <code>var_maybe_initialised_on_exit</code>is now correct, with some degree of confidence.</p>\n<p>The question now becomes what to do with the old facts. I would like to remove the old <code>var_initialised_on_exit</code>logic from rustc, and possibly also the entire input fact from Polonius, because it was always an ugly hack. However, that means I can no longer run the comparison tests (some of which fail spuriously anyway).</p>\n<p>That also has a follow-on question, which is: should I also throw away the <code>region_live_at</code> input, which I now also have logic to calculate? Similar problems apply here: that would mean that we lose the infrastructure for verifying it, but on the other hand, we already have.</p>\n<p>Finally, I could extend the Polonius grammar to also have support for formulating all the initialisation-related facts. This is probably a prerequisite for testing them at all, but it would also be a lot of work for little gain.</p>\n<p>What do you think I should do?</p>",
        "id": 172309993,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1564753813
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span>  to removing the licenses and initialized on exit facts.</p>",
        "id": 172310713,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1564754360
    },
    {
        "content": "<p>\"licenses\"?</p>",
        "id": 172310741,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1564754391
    },
    {
        "content": "<p>Liveness</p>",
        "id": 172312663,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1564755864
    },
    {
        "content": "<p>ah, ok! And what do I do about the tests?</p>",
        "id": 172315401,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1564757902
    },
    {
        "content": "<p>Remove them</p>",
        "id": 172332088,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1564771184
    },
    {
        "content": "<p>This is going to be <em>so</em> satisfying :)</p>",
        "id": 172336001,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1564774414
    },
    {
        "content": "<p>I'm a bit confused about something that should be basic datafrog, but for some reason doesn't work as I expect it to. So I'm fixing a bug in the liveness calculations by filtering out initial values for <code>var_drop_live_at</code>to only contain variables that are actually initialised when they were dropped. I create a static variable for the <code>var_drop_used</code> <br>\n relation for use with leapjoins, and then I proceed like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">// var_drop_live(V, P) :-</span>\n<span class=\"c1\">//     var_drop_used(V, P),</span>\n<span class=\"c1\">//     var_maybe_initialzed_on_exit(V, P).</span>\n<span class=\"n\">var_drop_live_var</span><span class=\"p\">.</span><span class=\"n\">from_leapjoin</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"o\">&amp;</span><span class=\"n\">var_drop_used_var</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"n\">var_maybe_initialized_on_exit_rel</span><span class=\"p\">.</span><span class=\"n\">extend_with</span><span class=\"p\">(</span><span class=\"o\">|&amp;</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_p</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"o\">|&amp;</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">p</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>Shouldn't this do a join on V, excluding any V:s not in both <code>var_maybe_initialized_on_exit</code> and <code>var_drop_used</code>? Or have I misunderstood how this works? Also, I don't understand why I get wildly different outputs depending on which tuple I select <code>p</code>from?</p>",
        "id": 172508799,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1565015425
    },
    {
        "content": "<p>(Ping <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> who maybe knows and perhaps doesn't hang around here)</p>",
        "id": 172508826,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1565015451
    },
    {
        "content": "<p>As far as I can tell, it behaves like an outer join!?</p>",
        "id": 172510688,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1565016985
    },
    {
        "content": "<p>Update: it's not that, because the same thing happens if I make the \"join\" myself, but the facts _are_ correct and there should never be any join. I don't understand!? HOW can <code>var_drop_live_at</code> be true for <code>_2</code> here? It's very clearly not in <code>var_maybe_initialized_on_exit</code>: <br>\n<a href=\"/user_uploads/4715/LkH_WskCHFh6xuC6rq471KzH/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/LkH_WskCHFh6xuC6rq471KzH/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/4715/LkH_WskCHFh6xuC6rq471KzH/pasted_image.png\"></a></div>",
        "id": 172532332,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1565034560
    },
    {
        "content": "<p>(The name \"<code>_on_exit</code>\" is also wrong, it should be <code>on_entry</code>I guess?)</p>",
        "id": 172532460,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1565034654
    },
    {
        "content": "<p>(sorry I'm on holidays and missed the ping)</p>",
        "id": 172534388,
        "sender_full_name": "lqd",
        "timestamp": 1565036098
    },
    {
        "content": "<p>IIUC you're effectively encoding an outer join</p>",
        "id": 172534423,
        "sender_full_name": "lqd",
        "timestamp": 1565036119
    },
    {
        "content": "<p>but the datalog does not only join on V here</p>",
        "id": 172534444,
        "sender_full_name": "lqd",
        "timestamp": 1565036145
    },
    {
        "content": "<p>P is also present in both relations</p>",
        "id": 172534503,
        "sender_full_name": "lqd",
        "timestamp": 1565036164
    },
    {
        "content": "<p>what you're looking for, IIUC, is to filter the (V, P)s present in both relations only</p>",
        "id": 172534573,
        "sender_full_name": "lqd",
        "timestamp": 1565036261
    },
    {
        "content": "<p>however, this won't be possible/easy (it's a gamble depending on the data) with a leapjoin for now</p>",
        "id": 172534628,
        "sender_full_name": "lqd",
        "timestamp": 1565036284
    },
    {
        "content": "<p>they have a weird under-specified/undocumented criterion wrt well-formedness, that is they expect to have a least one <code>extend_with</code> (I think) and even though that's what you have here the leaper for the join should probably be <code>filter_with</code> — but if you do that the leapjoin won't be well-formed anymore (until at least until we relax this requirement in <span aria-label=\"frog\" class=\"emoji emoji-1f438\" role=\"img\" title=\"frog\">:frog:</span>)</p>",
        "id": 172534736,
        "sender_full_name": "lqd",
        "timestamp": 1565036396
    },
    {
        "content": "<p>Haha, I just spent 20 minutes trying to figure out how this happened and was <em>so proud</em> of myself for figuring it out, only to realise you just replied :)</p>",
        "id": 172534739,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1565036399
    },
    {
        "content": "<p>That was after literal hours of debugging earlier today</p>",
        "id": 172534804,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1565036425
    },
    {
        "content": "<p>so, what you're looking for here is a regular join between variables/relations setup to filter, that is, where the whole tuple is a \"key\" like ((V,P), ()) — there are examples of that in the naive/datafrogopt variants IIRC</p>",
        "id": 172534821,
        "sender_full_name": "lqd",
        "timestamp": 1565036452
    },
    {
        "content": "<p>sorry :)</p>",
        "id": 172534827,
        "sender_full_name": "lqd",
        "timestamp": 1565036461
    },
    {
        "content": "<p>Oh that's by no means your fault :)</p>",
        "id": 172534843,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1565036479
    },
    {
        "content": "<p>still good that you were able to figure it out on your own :)</p>",
        "id": 172534852,
        "sender_full_name": "lqd",
        "timestamp": 1565036484
    },
    {
        "content": "<p>But great, now I think I know how to proceed yay</p>",
        "id": 172534882,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1565036508
    },
    {
        "content": "<p>yeah once you know how to encode this pattern you'll be good I think</p>",
        "id": 172534949,
        "sender_full_name": "lqd",
        "timestamp": 1565036540
    },
    {
        "content": "<p>the <code>borrow_live_at</code> <a href=\"https://github.com/rust-lang/polonius/blob/master/polonius-engine/src/output/naive.rs#L55\" target=\"_blank\" title=\"https://github.com/rust-lang/polonius/blob/master/polonius-engine/src/output/naive.rs#L55\">here</a> is a good example</p>",
        "id": 172535010,
        "sender_full_name": "lqd",
        "timestamp": 1565036615
    },
    {
        "content": "<p>the join is <a href=\"https://github.com/rust-lang/polonius/blob/master/polonius-engine/src/output/naive.rs#L150-L156\" target=\"_blank\" title=\"https://github.com/rust-lang/polonius/blob/master/polonius-engine/src/output/naive.rs#L150-L156\">here</a> (to fill it) and an example of using it in a join <a href=\"https://github.com/rust-lang/polonius/blob/master/polonius-engine/src/output/naive.rs#L158\" target=\"_blank\" title=\"https://github.com/rust-lang/polonius/blob/master/polonius-engine/src/output/naive.rs#L158\">here</a> and <code>invalidates</code> is also setup the same way <a href=\"https://github.com/rust-lang/polonius/blob/master/polonius-engine/src/output/naive.rs#L58\" target=\"_blank\" title=\"https://github.com/rust-lang/polonius/blob/master/polonius-engine/src/output/naive.rs#L58\">here</a></p>",
        "id": 172535080,
        "sender_full_name": "lqd",
        "timestamp": 1565036650
    },
    {
        "content": "<p>It looks like literally the same pattern, but with a 3-tuple</p>",
        "id": 172535082,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1565036654
    },
    {
        "content": "<p>And I also looked at it earlier today when trying to figure out if I did something wrong</p>",
        "id": 172535091,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1565036671
    },
    {
        "content": "<p>Oh well, I'll go to sleep first I guess</p>",
        "id": 172535115,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1565036692
    },
    {
        "content": "<p>Thank you! :)</p>",
        "id": 172535118,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1565036694
    },
    {
        "content": "<p>the datalog-to-datafrog encoding is a bit hard to read immediately after writing it :)</p>",
        "id": 172535145,
        "sender_full_name": "lqd",
        "timestamp": 1565036722
    },
    {
        "content": "<p>it's .. a bit unreadable for sure</p>",
        "id": 172535169,
        "sender_full_name": "lqd",
        "timestamp": 1565036751
    },
    {
        "content": "<p>you're very welcome, at least I knew how to help here :)</p>",
        "id": 172535224,
        "sender_full_name": "lqd",
        "timestamp": 1565036769
    },
    {
        "content": "<p>(I updated an earlier message to add another case which is even more similar, encoding <code>errors(B, P) :- invalidates(B, P), borrow_live_at(B, P).</code>)</p>",
        "id": 172535902,
        "sender_full_name": "lqd",
        "timestamp": 1565037334
    },
    {
        "content": "<p>Ok so now I think I have a different bug in my actual logic haha</p>",
        "id": 172566975,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1565077347
    },
    {
        "content": "<p>Because I currently ignore <em>all</em> drops of uninitialised variables, and that's not correct is it? At least, that gives different region liveness from the one supplied by rustc</p>",
        "id": 172566995,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1565077399
    },
    {
        "content": "<p>Ah, I see the bug now. At a <code>drop()</code>, I only consider a variable actually drop-used if it is initialised, but there's an off-by-one error in this logic: it's a tautology that <code>drop(x)</code> means <code>x</code>is not initialised on exit from that statement. I need to join on the <em>previous</em> statement.</p>",
        "id": 172567326,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1565077856
    },
    {
        "content": "<p>(which will always be just one statement because the drop always occurs mid-point)</p>",
        "id": 172567394,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1565077930
    },
    {
        "content": "<p>Wohooo that did it!</p>",
        "id": 172568473,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1565079153
    },
    {
        "content": "<p>And using only joins on relations no less</p>",
        "id": 172568486,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1565079177
    },
    {
        "content": "<p>In the process of debugging this, I also made a Python script that takes the input from cargo test and produces readable output in Markdown, should I put that somewhere in case it's useful to anyone else?</p>",
        "id": 172569684,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1565080427
    },
    {
        "content": "<p>It looks something like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"gp\">$</span> cargo <span class=\"nb\">test</span> implicit_fragment <span class=\"p\">|</span> ./parse-diff-output.py\n<span class=\"go\">    Finished dev [unoptimized + debuginfo] target(s) in 0.07s</span>\n<span class=\"go\">     Running target/debug/deps/polonius-55bdf7bb7cdabdf9</span>\n<span class=\"go\">error: test failed, to rerun pass &#39;--lib&#39;</span>\n<span class=\"gp\">#</span><span class=\"c1\"># `maybe_initialized_drop_implicit_fragment_drop_main::computed_region_live_at_same_as_input`</span>\n<span class=\"go\">- `Start(bb3[0])`:  **missing**: _#13r</span>\n<span class=\"go\">- `Mid(bb3[0])`:    **missing**: _#13r</span>\n<span class=\"go\">- `Start(bb7[5])`:  **missing**: _#16r</span>\n<span class=\"go\">- `Mid(bb7[5])`:    **missing**: _#16r</span>\n<span class=\"go\">- `Start(bb8[0])`:  **missing**: _#16r</span>\n<span class=\"go\">- `Mid(bb8[0])`:    **missing**: _#16r</span>\n<span class=\"go\">- `Start(bb9[0])`:  **missing**: _#16r</span>\n<span class=\"go\">- `Mid(bb9[0])`:    **missing**: _#16r</span>\n<span class=\"go\">- `Start(bb10[0])`: **missing**: _#16r</span>\n<span class=\"go\">- `Mid(bb10[0])`:   **missing**: _#16r</span>\n<span class=\"go\">- `Start(bb11[0])`: **missing**: _#16r</span>\n<span class=\"go\">- `Mid(bb11[0])`:   **missing**: _#16r</span>\n<span class=\"go\">- `Start(bb11[1])`: **missing**: _#16r</span>\n<span class=\"go\">- `Mid(bb11[1])`:   **missing**: _#16r</span>\n<span class=\"go\">- `Start(bb11[2])`: **missing**: _#16r</span>\n<span class=\"go\">- `Mid(bb11[2])`:   **missing**: _#16r</span>\n<span class=\"go\">- `Start(bb11[3])`: **missing**: _#16r</span>\n<span class=\"go\">- `Mid(bb11[3])`:   **missing**: _#16r</span>\n<span class=\"go\">- `Start(bb11[4])`: **missing**: _#16r</span>\n<span class=\"go\">- `Mid(bb11[4])`:   **missing**: _#16r</span>\n</pre></div>",
        "id": 172569769,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1565080502
    },
    {
        "content": "<p>Hmh, maybe it's not useful anymore now that the big <code>region_live_at</code>comparisons are soon gone</p>",
        "id": 172569806,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1565080545
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> cc <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> </p>\n<p>Ok, I have finished generating <code>var_maybe_initialized_on_exit</code> and have removed <code>region_live_at</code>. Last time I checked, it passed all tests, but I'm currently having some troubles in the methods comparing the location-insensitive analysis to the full one. I don't understand them yet, but will debug later.</p>\n<p>My implementation doesn't do the full move analysis, but I have fact generation for path access, and I have written comments mocking the Datalog I think is needed. I think it's come to the point where there's a point in having someone take a look at it, if you have the time. There's no rush, because I'm leaving for some vacation until August 15th.</p>\n<p>I'm thinking that I should not try to finish the full move analysis as part of my thesis work as Matthew suggested. I will also leave the job of updating polonius-parser to work with these gazillion new facts, but I will absolutely try to do that at some point, just not under deadline.</p>\n<p>PRs are at <a href=\"https://github.com/rust-lang-nursery/polonius/issues/110\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/issues/110\">polonius#110</a> and <a href=\"https://github.com/rust-lang/rust/issues/62800\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/62800\">rust#62800</a>, but they don't have the updated facts yet.</p>",
        "id": 172690420,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1565193454
    },
    {
        "content": "<p>nicely done :)</p>",
        "id": 172709246,
        "sender_full_name": "lqd",
        "timestamp": 1565207339
    },
    {
        "content": "<p>don't worry about the parser I can take care of that</p>",
        "id": 172709296,
        "sender_full_name": "lqd",
        "timestamp": 1565207373
    },
    {
        "content": "<p>I think Matthew or Niko would be better than me looking at the rustc side but I can look at the polonius for sure</p>",
        "id": 172709442,
        "sender_full_name": "lqd",
        "timestamp": 1565207452
    },
    {
        "content": "<p>(I'll myself be back from vacation around the same time as you)</p>",
        "id": 172709494,
        "sender_full_name": "lqd",
        "timestamp": 1565207504
    },
    {
        "content": "<p>Ok, I have done some further hunting of the bug I mentioned. The problem is this: Polonius + rustc with my latest changes reports no errors for smoke-test's <code>return_ref_to_local()</code>. Or rather, my new logic, including the new <code>region_live_at</code>, works fine. However, sometime after I remove <code>region_live_at</code>, the new fact generation (or Polonius) somehow changes behaviour and it stops working. This is very weird because the problem seems to stem from incorrect subset relation propagation, but there are no changes to either that part of the code, nor to any related fact generation code, and as far as I can tell, the inputs are identical.</p>\n<p>Last good commit on my branch is <a href=\"https://github.com/albins/polonius/commit/6b0fc8e6cf0cc5019af26a32898ae8c0064592dd\" target=\"_blank\" title=\"https://github.com/albins/polonius/commit/6b0fc8e6cf0cc5019af26a32898ae8c0064592dd\">https://github.com/albins/polonius/commit/6b0fc8e6cf0cc5019af26a32898ae8c0064592dd</a>, and the last good one on my Rustc branch is <a href=\"https://github.com/albins/rust/commit/c265a4108307ede999049c71650f95bd2d539d5e\" target=\"_blank\" title=\"https://github.com/albins/rust/commit/c265a4108307ede999049c71650f95bd2d539d5e\">https://github.com/albins/rust/commit/c265a4108307ede999049c71650f95bd2d539d5e</a>.</p>",
        "id": 173384113,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1565970401
    },
    {
        "content": "<p>I'll continue looking at this tomorrow, but I just can't wrap my head around it!</p>",
        "id": 173384161,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1565970451
    },
    {
        "content": "<p>Ok, this is nuts. I have the following in the correct output (HEAD of my master branch):<br>\n<a href=\"/user_uploads/4715/yYyEKevRrZjI44698V6Hz6Pu/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/yYyEKevRrZjI44698V6Hz6Pu/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/4715/yYyEKevRrZjI44698V6Hz6Pu/pasted_image.png\"></a></div><p>and then I have this at HEAD of my working branch:<br>\n<a href=\"/user_uploads/4715/vloc_-mACT7cgHNzSFaThe-r/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/vloc_-mACT7cgHNzSFaThe-r/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/4715/vloc_-mACT7cgHNzSFaThe-r/pasted_image.png\"></a></div><p>Those are...the same facts?! Also, this is my diff of <code>naive.rs</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"gh\">diff --git a/polonius-engine/src/output/naive.rs b/polonius-engine/src/output/naive.rs</span>\n<span class=\"gh\">index 1cf252ed16..028fdfd4d3 100644</span>\n<span class=\"gd\">--- a/polonius-engine/src/output/naive.rs</span>\n<span class=\"gi\">+++ b/polonius-engine/src/output/naive.rs</span>\n<span class=\"gu\">@@ -13,26 +13,37 @@</span>\n use std::collections::{BTreeMap, BTreeSet};\n use std::time::Instant;\n\n<span class=\"gi\">+use crate::output::initialization;</span>\n use crate::output::liveness;\n use crate::output::Output;\n use facts::{AllFacts, Atom};\n\n use datafrog::{Iteration, Relation, RelationLeaper};\n\n<span class=\"gd\">-pub(super) fn compute&lt;Region: Atom, Loan: Atom, Point: Atom, Variable: Atom&gt;(</span>\n<span class=\"gi\">+pub(super) fn compute&lt;Region: Atom, Loan: Atom, Point: Atom, Variable: Atom, MovePath: Atom&gt;(</span>\n     dump_enabled: bool,\n<span class=\"gd\">-    all_facts: AllFacts&lt;Region, Loan, Point, Variable&gt;,</span>\n<span class=\"gd\">-) -&gt; Output&lt;Region, Loan, Point, Variable&gt; {</span>\n<span class=\"gi\">+    all_facts: AllFacts&lt;Region, Loan, Point, Variable, MovePath&gt;,</span>\n<span class=\"gi\">+) -&gt; Output&lt;Region, Loan, Point, Variable, MovePath&gt; {</span>\n     let mut result = Output::new(dump_enabled);\n\n<span class=\"gi\">+    let var_maybe_initialized_on_exit = initialization::init_var_maybe_initialized_on_exit(</span>\n<span class=\"gi\">+        all_facts.child,</span>\n<span class=\"gi\">+        all_facts.path_belongs_to_var,</span>\n<span class=\"gi\">+        all_facts.initialized_at,</span>\n<span class=\"gi\">+        all_facts.moved_out_at,</span>\n<span class=\"gi\">+        all_facts.path_accessed_at,</span>\n<span class=\"gi\">+        &amp;all_facts.cfg_edge,</span>\n<span class=\"gi\">+        &amp;mut result,</span>\n<span class=\"gi\">+    );</span>\n<span class=\"gi\">+</span>\n     let region_live_at = liveness::init_region_live_at(\n         all_facts.var_used,\n         all_facts.var_drop_used,\n         all_facts.var_defined,\n         all_facts.var_uses_region,\n         all_facts.var_drops_region,\n<span class=\"gi\">+        var_maybe_initialized_on_exit,</span>\n         &amp;all_facts.cfg_edge,\n<span class=\"gd\">-        all_facts.region_live_at,</span>\n         all_facts.universal_region,\n         &amp;mut result,\n     );\n</pre></div>",
        "id": 173399239,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1565982455
    },
    {
        "content": "<p>Update: it's a fact generation bug. The dereferencing of <code>_2</code>never causes a use-fact to be emitted. I think this may be due to the lazy reference generation? I.e. <code>_2</code> is dereferenced, but only to create a copy, it seems?</p>\n<p>What I think should happen if I understand the reasoning correctly is that Polonius should infer through outlives relations that _0 outlives the value it is referring to and return an error, presumably when the value is moved by the <code>StorageDead()</code> just before the terminator, but the propagation of the outlives relation relies on the liveness of <code>_2</code>'s provenance variable, r6.</p>\n<p>Here is the MIR:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">StorageLive</span><span class=\"p\">(</span><span class=\"n\">_1</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">_1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"k\">i32</span><span class=\"w\"></span>\n<span class=\"n\">FakeRead</span><span class=\"p\">(</span><span class=\"n\">ForLet</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_1</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">StorageLive</span><span class=\"p\">(</span><span class=\"n\">_2</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">_2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">_1</span><span class=\"w\"></span>\n<span class=\"n\">_0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">_2</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">StorageDead</span><span class=\"p\">(</span><span class=\"n\">_1</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">StorageDead</span><span class=\"p\">(</span><span class=\"n\">_2</span><span class=\"p\">)</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>Also, should a used variable be considered used at the start of the expression where it is used, or mid-point?</p>",
        "id": 173533550,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1566211197
    },
    {
        "content": "<p>As a reminder, I use the following MIR Visitor to extract variable uses:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Visitor</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">UseFactsExtractor</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;_</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">visit_local</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">local</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Local</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">context</span>: <span class=\"nc\">PlaceContext</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">location</span>: <span class=\"nc\">Location</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">categorize</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">DefUse</span>::<span class=\"n\">Def</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">insert_def</span><span class=\"p\">(</span><span class=\"n\">local</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">location</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">DefUse</span>::<span class=\"n\">Use</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">insert_use</span><span class=\"p\">(</span><span class=\"n\">local</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">location</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">DefUse</span>::<span class=\"nb\">Drop</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">insert_drop_use</span><span class=\"p\">(</span><span class=\"n\">local</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">location</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>Clearly there is some type of use I am missing here?</p>",
        "id": 173533751,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1566211335
    },
    {
        "content": "<p>(I now also use the same Visitor to visit places and emit move-path-uses for future move analysis)</p>",
        "id": 173533799,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1566211393
    },
    {
        "content": "<p>You're missing a <code>super_place</code> call in your <code>visit_place</code> override.</p>",
        "id": 173537244,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1566215226
    },
    {
        "content": "<p>What does that do?</p>",
        "id": 173538798,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1566216860
    },
    {
        "content": "<p>well it...makes the rest work. :)</p>",
        "id": 173539674,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1566217720
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 173539676,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1566217724
    },
    {
        "content": "<p>HA, ok <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <a href=\"https://github.com/rust-lang-nursery/polonius/issues/110\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/issues/110\">polonius#110</a> and <a href=\"https://github.com/rust-lang/rust/issues/62800\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/62800\">rust#62800</a> are ready for review!</p>",
        "id": 173545077,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1566222557
    },
    {
        "content": "<p>...presuming it passes the tests</p>",
        "id": 173545099,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1566222599
    },
    {
        "content": "<p>But it Does On My Machine™</p>",
        "id": 173545153,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1566222615
    },
    {
        "content": "<blockquote>\n<p>HA, ok <span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"https://github.com/rust-lang-nursery/polonius/issues/110\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/issues/110\">polonius#110</a> and <a href=\"https://github.com/rust-lang/rust/issues/62800\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/62800\">rust#62800</a> are ready for review!</p>\n</blockquote>\n<p>just saw this</p>",
        "id": 174260520,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1566933076
    },
    {
        "content": "<p>Great!</p>",
        "id": 174260532,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1566933081
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Ok, I have been thinking about your comments on <code>var_maybe_initialized_on_exit</code> a lot. I think the case is as follows:</p>\n<ul>\n<li>the current code should be equivalent to what was there before. That is, whenever a variable had some path initialized, the variable was considered initialized. <a href=\"https://github.com/albins/rust/commit/c265a4108307ede999049c71650f95bd2d539d5e\" target=\"_blank\" title=\"https://github.com/albins/rust/commit/c265a4108307ede999049c71650f95bd2d539d5e\">[Commit removing old logic]</a>. What I used was <code>self.cx.flow_inits.has_any_child_of(move_path)</code>, which must mean that, right?</li>\n<li>the reason for doing this was when calculating drop-liveness <em>of a reference</em> (since that is the only liveness Polonius cares about), like this:</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span><span class=\"nf\">var_drop_live</span><span class=\"p\">(</span><span class=\"nv\">V</span><span class=\"p\">,</span> <span class=\"nv\">P</span><span class=\"p\">)</span> <span class=\"p\">:-</span>\n     <span class=\"nf\">var_drop_used</span><span class=\"p\">(</span><span class=\"nv\">V</span><span class=\"p\">,</span> <span class=\"nv\">P</span><span class=\"p\">),</span>\n     <span class=\"nf\">var_maybe_initialized_on_exit</span><span class=\"p\">(</span><span class=\"nv\">V</span><span class=\"p\">,</span> <span class=\"nv\">P</span><span class=\"p\">).</span>\n</pre></div>\n\n\n<ul>\n<li>This is where I realise I don't fully understand what is going on there. I remember why we had this problem: we want to keep a reference inside a struct live if that struct implements its own drop, but that drop would only happen if the variable was actually initialised.</li>\n<li>However, I don't understand how this logic would connect the dropping of a struct to the references inside of it. I presume there is some intermediate MIR logic here that I am missing?</li>\n<li>Given how I understand this, though, I don't see why we would care about the initialisation of anything below root-levels of references. The only path that is interesting is that of a variable holding the reference itself, right? And I presume that doesn't have any children? However, we would never be able to tell the difference with region_live_at if we over-estimated here, which is why I think we haven't seen any problems.</li>\n</ul>",
        "id": 174530249,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1567158477
    },
    {
        "content": "<p>I also have an idea for how to do move errors:</p>\n<ul>\n<li>I track maybe initialized paths, precisely as you suggested in the code review</li>\n<li>I also track maybe moved paths analogously with initialisations and moves switching places in the transitive closure calculation</li>\n<li>therefore, a surely initialised path is maybe initialised paths set-minus maybe moved paths</li>\n<li>move errors is accesses set-minus surely initialised paths</li>\n</ul>",
        "id": 174530726,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1567158874
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span>  </p>\n<blockquote>\n<p>That is, whenever a variable had some path initialized, the variable was considered initialized. </p>\n</blockquote>\n<p>Yes, <code>has_any_child_of</code> is saying \"if any path that begins with <code>move_path</code> is considered initialized...\". That seems to map to the rule for <code>var_maybe_initialized_on_exit</code> for sure.</p>",
        "id": 174534470,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567163210
    },
    {
        "content": "<p>I'm not sure I fully understand your later  comments, let me take a stab</p>",
        "id": 174534473,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567163222
    },
    {
        "content": "<p>So, just talking about <strong>MIR</strong>, if you have <code>DROP(x)</code>, that is considered a no-op if <code>x</code> has been moved. We don't always know that statically. In a later phase (\"elaborate drops\"), we will extend the MIR to either eliminate no-op DROP terminators, or to add boolean variables that conditionally execute them if needed.</p>",
        "id": 174534500,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567163277
    },
    {
        "content": "<p>In some cases they will be transformed into <code>DROP(x.y.z)</code>, if only some sub-path is initialized.</p>",
        "id": 174534555,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567163302
    },
    {
        "content": "<p>(But, in those cases, <code>x</code> and <code>x.y</code> cannot have destructors, due to other NLL rules)</p>",
        "id": 174534576,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567163340
    },
    {
        "content": "<p>(This all makes sense so far?)</p>",
        "id": 174534591,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567163376
    },
    {
        "content": "<blockquote>\n<p>Given how I understand this, though, I don't see why we would care about the initialisation of anything below root-levels of references.</p>\n</blockquote>",
        "id": 174534675,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567163439
    },
    {
        "content": "<p>It's true that the current incarnation of NLL is somewhat restrictive about initialized sub-paths. For example you can't compile code like this, iirc:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">x</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"mi\">22</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"n\">v</span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"mi\">44</span><span class=\"p\">];</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>but I think we <em>intend</em> to support such things eventually (c.f. <a href=\"https://github.com/rust-lang/rust/issues/54987\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54987\">https://github.com/rust-lang/rust/issues/54987</a>)</p>",
        "id": 174534796,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567163578
    },
    {
        "content": "<p>In such a case, you would never have a direct initialization of <code>x</code></p>",
        "id": 174534816,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567163601
    },
    {
        "content": "<p>I was imagining then a scenario like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">x</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">...;</span><span class=\"w\"></span>\n<span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">drop</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>",
        "id": 174534880,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567163643
    },
    {
        "content": "<p>If we only tracked initialization at the level of local variables, we would see that <code>x</code> is initialized after <code>x.0 = ...</code> but we couldn't say for sure that <code>x</code> is <strong>not</strong> initialized after <code>std::mem::drop</code>, because we only saw a single field moved and not the entire thing.</p>",
        "id": 174534911,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567163680
    },
    {
        "content": "<p>Anyway, to be clear, I believe that the rules as you wrote them were equivalent to the changes I was suggesting -- but I felt like the setup you had would be a bit less efficient and/or clear.</p>",
        "id": 174534938,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567163715
    },
    {
        "content": "<blockquote>\n<ul>\n<li>move errors is accesses set-minus surely initialised paths</li>\n</ul>\n</blockquote>\n<p>it seems mildly simpler to say that errors are <code>accessed</code> intersected with <code>maybe_moved</code>?</p>",
        "id": 174535014,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567163789
    },
    {
        "content": "<p>Ah, I guess you also want an error if it is uninitialized, is your point</p>",
        "id": 174535019,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567163803
    },
    {
        "content": "<p>Except that uninitialized things are considered moved to start</p>",
        "id": 174535025,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567163817
    },
    {
        "content": "<p>I see I already wrote a <a href=\"https://github.com/lark-exploration/lark/blob/87d1e42107ced29f5ef23b70ef66e3b6fa2e74de/components/lark-type-check/src/full_inference/analysis/initialization.rs#L23-L35\" target=\"_blank\" title=\"https://github.com/lark-exploration/lark/blob/87d1e42107ced29f5ef23b70ef66e3b6fa2e74de/components/lark-type-check/src/full_inference/analysis/initialization.rs#L23-L35\">summary of how Lark handled things</a> -- it was doing a different sort of analysis than the one you are doing. In particular, it was just doing the \"move errors\" part. That is, detecting access to uninitialized or moved paths.</p>",
        "id": 174535547,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567164374
    },
    {
        "content": "<p>But some parts are relevant.</p>",
        "id": 174535557,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567164386
    },
    {
        "content": "<p>Re-reading that code, I <em>feel</em> like it too is does more transitive closures than are really necessary</p>",
        "id": 174536006,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567164949
    },
    {
        "content": "<blockquote>\n<p>Anyway, to be clear, I believe that the rules as you wrote them were equivalent to the changes I was suggesting -- but I felt like the setup you had would be a bit less efficient and/or clear.</p>\n</blockquote>\n<p>I guess the key question here is: would that lead to correct calculations of <code>region_live_at</code>?</p>",
        "id": 174537109,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1567166225
    },
    {
        "content": "<blockquote>\n<p>Except that uninitialized things are considered moved to start</p>\n</blockquote>\n<p>Avoiding a notion of \"to start\" is specifically why I went about the acrobatics I described; I don't have any concept of \"to start\" in Datafrog, right?</p>",
        "id": 174537187,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1567166290
    },
    {
        "content": "<p>There is no <code>first_node_of_cfg</code>, and I'd rather not just guess it's index 0</p>",
        "id": 174537211,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1567166328
    },
    {
        "content": "<p>so I landed <a href=\"https://github.com/rust-lang/polonius/pull/110\" target=\"_blank\" title=\"https://github.com/rust-lang/polonius/pull/110\">https://github.com/rust-lang/polonius/pull/110</a></p>",
        "id": 174823739,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567540719
    },
    {
        "content": "<p>now we need a new polonius release, right?</p>",
        "id": 174823744,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567540723
    },
    {
        "content": "<p>(am I the only one with such privileges?)</p>",
        "id": 174823749,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567540731
    },
    {
        "content": "<p>Yes please</p>",
        "id": 174823754,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1567540736
    },
    {
        "content": "<p>and yes, I think so</p>",
        "id": 174823757,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1567540739
    },
    {
        "content": "<p>/me has no idea</p>",
        "id": 174823778,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1567540759
    },
    {
        "content": "<p>hmm no it should be more folks</p>",
        "id": 174823982,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567540863
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> can do it, for example</p>",
        "id": 174823995,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567540868
    },
    {
        "content": "<p>can I ?!</p>",
        "id": 174824036,
        "sender_full_name": "lqd",
        "timestamp": 1567540899
    },
    {
        "content": "<p>I didn't know that</p>",
        "id": 174824097,
        "sender_full_name": "lqd",
        "timestamp": 1567540922
    },
    {
        "content": "<p>maybe :)</p>",
        "id": 174824150,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567540970
    },
    {
        "content": "<p>the wg-compiler-nll github team has access, which I might actually want to revoke, along with the compiler team</p>",
        "id": 174824175,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567540998
    },
    {
        "content": "<p>but I think I should add the compiler-contributors team</p>",
        "id": 174824186,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567541003
    },
    {
        "content": "<p>which includes you</p>",
        "id": 174824205,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567541022
    },
    {
        "content": "<p>you're probably also a member of wg-compiler-nll ...</p>",
        "id": 174824216,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567541033
    },
    {
        "content": "<p>yes</p>",
        "id": 174824259,
        "sender_full_name": "lqd",
        "timestamp": 1567541044
    },
    {
        "content": "<p><em>anyway</em> I'll publish v0.10.0</p>",
        "id": 174824297,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567541092
    },
    {
        "content": "<p>done -- <span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> do you want to modify <a href=\"https://github.com/rust-lang/rust/issues/62800\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/62800\">rust#62800</a> to use it?</p>",
        "id": 174824487,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567541239
    },
    {
        "content": "<p>(thanks for the release, I'll learn how to do it in the future so we don't have to bother you :)</p>",
        "id": 174824628,
        "sender_full_name": "lqd",
        "timestamp": 1567541346
    },
    {
        "content": "<p>no worries, I just don't like things to be bottlenecked on me</p>",
        "id": 174825266,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567541769
    },
    {
        "content": "<p>I'll do it tomorrow!</p>",
        "id": 174829458,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1567544787
    },
    {
        "content": "<p>Signed, going to bed</p>",
        "id": 174829462,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1567544793
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  <a href=\"https://github.com/rust-lang/rust/issues/62800\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/62800\">rust#62800</a> should be ready to merge once CI passes!</p>",
        "id": 174859197,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1567583593
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> ah I see some tidy checks failed, CI didn't get to run yet</p>",
        "id": 174861672,
        "sender_full_name": "lqd",
        "timestamp": 1567586004
    },
    {
        "content": "<p><em>sigh</em> of course</p>",
        "id": 174861792,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1567586126
    },
    {
        "content": "<p>Guess it must be due to the rebase or something, I’ll have a look</p>",
        "id": 174861811,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1567586149
    },
    {
        "content": "<p>Ah, it was the file where the try blocks cause rustfmt to error out, that explains things</p>",
        "id": 174862897,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1567587179
    },
    {
        "content": "<p>Anyway, it passes now</p>",
        "id": 174862905,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1567587189
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> By the way, I plan on eventually following Niko's suggestions and perform a precise analysis on move paths. You mentioned that I could use the rustc unit tests. Do you...err...know how to run those with Polonius? Also, that should probably go in the book at some point, I guess</p>",
        "id": 175884134,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1568707230
    },
    {
        "content": "<p>yeah it's the <code>--compare-mode polonius</code> flag to add to your <code>x.py test</code> invocation</p>",
        "id": 175885463,
        "sender_full_name": "lqd",
        "timestamp": 1568708635
    },
    {
        "content": "<p>note that right now there are 2 OOMS, and 4-5 benign failures tho</p>",
        "id": 175885552,
        "sender_full_name": "lqd",
        "timestamp": 1568708710
    },
    {
        "content": "<p>since they're in the run pass maybe <code>--pass check</code> could be helpful in avoiding the OOMs, but I didn't try that (as I had them deleted locally to try to compare durations)</p>",
        "id": 175885643,
        "sender_full_name": "lqd",
        "timestamp": 1568708783
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> Thanks, I guess I can just ignore those. Do you know how comprehensive those tests are, otherwise? I.e. how likely are they to catch a subtle mistake?</p>",
        "id": 175902963,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1568725132
    },
    {
        "content": "<p>I guess subtlety can be easily missed and it can depend on the specific domain you're testing</p>",
        "id": 175903097,
        "sender_full_name": "lqd",
        "timestamp": 1568725210
    },
    {
        "content": "<p>different areas are more or less well covered</p>",
        "id": 175903120,
        "sender_full_name": "lqd",
        "timestamp": 1568725227
    },
    {
        "content": "<p>say, it'll be better to pass those 10K tests than none at all :)</p>",
        "id": 175903205,
        "sender_full_name": "lqd",
        "timestamp": 1568725283
    },
    {
        "content": "<p>and if the area isn't covered well enough, we can always, and should, add more tests</p>",
        "id": 175903303,
        "sender_full_name": "lqd",
        "timestamp": 1568725342
    },
    {
        "content": "<p>in general there are some tests in many areas</p>",
        "id": 175903430,
        "sender_full_name": "lqd",
        "timestamp": 1568725439
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> You mentioned a problem with leapjoins that only filtered, does this happen when you have an expression like:</p>\n<div class=\"codehilite\"><pre><span></span>path_definitely_initialized_at(Path, Point) :-\n        path_maybe_initialized_on_exit(Path, Point),\n        !path_maybe_moved_at(Path, Point).\n</pre></div>\n\n\n<p>Where all components are actually <code>Relation</code>s?</p>",
        "id": 178112121,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1571066316
    },
    {
        "content": "<p>if you're talking about Relation::from_leapjoin or similar I don't know; I only used them with variables</p>",
        "id": 178112222,
        "sender_full_name": "lqd",
        "timestamp": 1571066394
    },
    {
        "content": "<p>I assume it could apply</p>",
        "id": 178112260,
        "sender_full_name": "lqd",
        "timestamp": 1571066403
    },
    {
        "content": "<p>Ah, ok. But is it a compilation error or a runtime error?</p>",
        "id": 178112291,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1571066412
    },
    {
        "content": "<p>the WF-ness rule is : \"there needs to be an extend_with\" (IIRC, surely Frank would know better, but I think it's this)</p>",
        "id": 178112307,
        "sender_full_name": "lqd",
        "timestamp": 1571066424
    },
    {
        "content": "<p>Ah, ok</p>",
        "id": 178112315,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1571066430
    },
    {
        "content": "<p>runtime error, sometimes</p>",
        "id": 178112316,
        "sender_full_name": "lqd",
        "timestamp": 1571066431
    },
    {
        "content": "<p>it depends on the data IIRC</p>",
        "id": 178112328,
        "sender_full_name": "lqd",
        "timestamp": 1571066442
    },
    {
        "content": "<p>Is there an easy work-around?</p>",
        "id": 178112332,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1571066446
    },
    {
        "content": "<p>for variables yes, use a regular join hehe</p>",
        "id": 178112358,
        "sender_full_name": "lqd",
        "timestamp": 1571066464
    },
    {
        "content": "<p>for relations I don't know sorry, niko added that API but I've never had the opportunity to use it yet</p>",
        "id": 178112380,
        "sender_full_name": "lqd",
        "timestamp": 1571066493
    },
    {
        "content": "<p>I'll try it and see what happens</p>",
        "id": 178112398,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1571066512
    },
    {
        "content": "<p>My original problem was that I wanted to antijoin on a variable, which you cannot do (I guess because it might lead to future tuples needing to be retracted)</p>",
        "id": 178112484,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1571066554
    },
    {
        "content": "<p>So I had to stage my computation</p>",
        "id": 178112496,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1571066562
    },
    {
        "content": "<p>Which means that in the end, all I really have are Relations</p>",
        "id": 178112508,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1571066572
    },
    {
        "content": "<p>not even one variable ?</p>",
        "id": 178112533,
        "sender_full_name": "lqd",
        "timestamp": 1571066595
    },
    {
        "content": "<p>Nope</p>",
        "id": 178112537,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1571066599
    },
    {
        "content": "<p>maybe you can then artificially make one variable</p>",
        "id": 178112571,
        "sender_full_name": "lqd",
        "timestamp": 1571066625
    },
    {
        "content": "<p>I guess I can</p>",
        "id": 178112579,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1571066632
    },
    {
        "content": "<p>It works as a quick work-around :)</p>",
        "id": 178112590,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1571066641
    },
    {
        "content": "<p>what relation are you producing ?</p>",
        "id": 178112646,
        "sender_full_name": "lqd",
        "timestamp": 1571066663
    },
    {
        "content": "<p>So it's a four-stage process: first I compute transitive closure of path accesses, then I use those to compute paths that may be moved or not moved, then I calculate the definitely-moved ones and I use those to generate move errors</p>",
        "id": 178112710,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1571066721
    },
    {
        "content": "<p>Basically, move errors = path access - known initialised paths</p>",
        "id": 178112731,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1571066743
    },
    {
        "content": "<p>seems like move errors are an intensional predicate</p>",
        "id": 178112734,
        "sender_full_name": "lqd",
        "timestamp": 1571066747
    },
    {
        "content": "<p>known initialised paths = maybe initialised paths - maybe moved paths</p>",
        "id": 178112800,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1571066775
    },
    {
        "content": "<p>err maybe?</p>",
        "id": 178112805,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1571066784
    },
    {
        "content": "<p>(what does that mean?)</p>",
        "id": 178112815,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1571066793
    },
    {
        "content": "<p>it's producing tuples, not input data; those are usually variables, except for your stratification problem as you mentioned, there you had no choice</p>",
        "id": 178112862,
        "sender_full_name": "lqd",
        "timestamp": 1571066843
    },
    {
        "content": "<p>Ah, ok, yes</p>",
        "id": 178112897,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1571066868
    },
    {
        "content": "<p>but yeah if stratification is turning every join into a separate iteration, that's unfortunate</p>",
        "id": 178113024,
        "sender_full_name": "lqd",
        "timestamp": 1571066945
    },
    {
        "content": "<p>and here a couple variables at the last step should unblock you</p>",
        "id": 178113054,
        "sender_full_name": "lqd",
        "timestamp": 1571066969
    },
    {
        "content": "<p>Yes, thanks!</p>",
        "id": 178113235,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1571067101
    },
    {
        "content": "<p>Ok, revamped initialisation logic compiling now :)</p>",
        "id": 178116111,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1571069223
    },
    {
        "content": "<p>Let's see if it messed up any ui-tests first, and <em>then</em> worry about how to verify move errors</p>",
        "id": 178116131,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1571069246
    },
    {
        "content": "<p>This looks...slightly promising? I can't see how these failures would be due to initialisation:</p>\n<div class=\"codehilite\"><pre><span></span>failures:\n    [ui] ui/abi/cross-crate/anon-extern-mod-cross-crate-2.rs\n    [ui] ui/abi/duplicated-external-mods.rs\n    [ui] ui/abi/extern/extern-crosscrate.rs\n    [ui] ui/abi/foreign/foreign-dupe.rs\n    [ui] ui/abi/invoke-external-foreign.rs\n</pre></div>",
        "id": 178129864,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1571080308
    },
    {
        "content": "<p>All the errors are from <code>ld</code></p>",
        "id": 178129937,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1571080348
    },
    {
        "content": "<p>Hmm, difficult to say if I changed anything: literally stopping all generation of <code>child</code> in Rust gives me no additional errors, so either I'm doing something wrong or it doesn't cover move paths x drop-liveness very much</p>",
        "id": 178182474,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1571138233
    },
    {
        "content": "<p>what kind of errors are you expecting and where ?</p>",
        "id": 178183773,
        "sender_full_name": "lqd",
        "timestamp": 1571139320
    },
    {
        "content": "<p>That is a good question. So what I did was I stopped emitting <code>child</code> at all, which would mean that nothing would be drop-live, so I would expect Polonius to under-report some errors with structs implementing their own drop if they hold a loan that is violated.</p>",
        "id": 178188724,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1571143351
    },
    {
        "content": "<p>I know I lifted some examples from the compiletests into Polonius inputs, and those should at least cause problems</p>",
        "id": 178188763,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1571143387
    },
    {
        "content": "<p>...ok no I get it it shouldn't cause a problem</p>",
        "id": 178188865,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1571143461
    },
    {
        "content": "<p>...because initialisation is always precise enough I think, or at least it is in the example I am thinking of</p>",
        "id": 178188902,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1571143498
    },
    {
        "content": "<p>Anyway, the shared context stuff would have been nice now, because then I could use it to report errors from the initialisation step :)</p>",
        "id": 178189850,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1571144213
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 181097772,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574158742
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 181097782,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574158752
    },
    {
        "content": "<p>Ok, so the move error code is...not correct</p>",
        "id": 181105821,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574166049
    },
    {
        "content": "<p>Precisely how, I don't know yet</p>",
        "id": 181105828,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574166055
    },
    {
        "content": "<p>It is also INCREDIBLY slow on clap</p>",
        "id": 181106287,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574166511
    },
    {
        "content": "<p>Ah, it's at least one fact generation bug, I generate <code>path_accessed_at()</code> events at midpoint, should be start-point</p>",
        "id": 181106538,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574166780
    },
    {
        "content": "<p>Update: I think it's...working after fixing that. I mean, I'm sure there might be edge cases, but it's working for the simple cases I have tried so far.</p>",
        "id": 181112468,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574171685
    },
    {
        "content": "<p>Hey all, be here soon</p>",
        "id": 181112939,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574172040
    },
    {
        "content": "<p>Me too, I'm getting some tea</p>",
        "id": 181112953,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574172054
    },
    {
        "content": "<p>OK</p>",
        "id": 181113347,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574172355
    },
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> where we at here :)</p>",
        "id": 181113452,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574172428
    },
    {
        "content": "<p>PS I prob have to go in ~3hr, at least for a bit</p>",
        "id": 181113577,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574172538
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> one thing I wanted to do is to update the <a href=\"https://hackmd.io/CGMNjt1hR_qYtsR9hgdGmw\" target=\"_blank\" title=\"https://hackmd.io/CGMNjt1hR_qYtsR9hgdGmw\">\"canonical polonius rules\"</a> to include the rules for initialization and liveness</p>",
        "id": 181114201,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574172950
    },
    {
        "content": "<blockquote>\n<p>PS I prob have to go in ~3hr, at least for a bit</p>\n</blockquote>\n<p>Fine by me, I'd like to go home around then</p>",
        "id": 181114206,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574172960
    },
    {
        "content": "<p>That means we have to argue about the names of everything :)</p>",
        "id": 181114283,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574173007
    },
    {
        "content": "<p>lol</p>",
        "id": 181114294,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574173016
    },
    {
        "content": "<p>well let's start with whatever names :)</p>",
        "id": 181114299,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574173023
    },
    {
        "content": "<p>first off, I guess, I should start by looking at your PR?</p>",
        "id": 181114311,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574173032
    },
    {
        "content": "<p>I guess!</p>",
        "id": 181114317,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574173040
    },
    {
        "content": "<p>I have restructured the code a bit so that the passes are clearer</p>",
        "id": 181114343,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574173059
    },
    {
        "content": "<p>I also think the passes are probably a bad idea and we should think about a better way to do them</p>",
        "id": 181114367,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574173077
    },
    {
        "content": "<p>But it's not a gigantonormous function anymore</p>",
        "id": 181114435,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574173100
    },
    {
        "content": "<p>I'll update the hackmd while you are looking :)</p>",
        "id": 181114681,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574173231
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> maybe we can do that a bit together?</p>",
        "id": 181115068,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574173457
    },
    {
        "content": "<p>I'm reading now</p>",
        "id": 181115070,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574173458
    },
    {
        "content": "<p>Sure!</p>",
        "id": 181115080,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574173471
    },
    {
        "content": "<p>to start, what are the fresh inputs</p>",
        "id": 181115093,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574173477
    },
    {
        "content": "<p>I guess some of that is already present in the code</p>",
        "id": 181115128,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574173500
    },
    {
        "content": "<p>Well, there are no new inputs since my last PR</p>",
        "id": 181115141,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574173504
    },
    {
        "content": "<p>right so we should look at the <a href=\"https://github.com/rust-lang/polonius/blob/90a08116c1b1f43f6ea1f08045f31a9a875b4529/polonius-engine/src/facts.rs\" target=\"_blank\" title=\"https://github.com/rust-lang/polonius/blob/90a08116c1b1f43f6ea1f08045f31a9a875b4529/polonius-engine/src/facts.rs\">facts.rs</a></p>",
        "id": 181115199,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574173539
    },
    {
        "content": "<p>I can do better <a href=\"/user_uploads/4715/OTt_X5ILh4Ap90BvEAgvNA44/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/OTt_X5ILh4Ap90BvEAgvNA44/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/4715/OTt_X5ILh4Ap90BvEAgvNA44/pasted_image.png\"></a></div>",
        "id": 181115331,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574173592
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/jqJj0V1uS473IoruhnyQ7REd/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/jqJj0V1uS473IoruhnyQ7REd/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/4715/jqJj0V1uS473IoruhnyQ7REd/pasted_image.png\"></a></div>",
        "id": 181115396,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574173642
    },
    {
        "content": "<blockquote>\n<p>dramatis personae </p>\n</blockquote>\n<p><span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span> :)</p>",
        "id": 181115431,
        "sender_full_name": "lqd",
        "timestamp": 1574173666
    },
    {
        "content": "<p>If you liked that, you should see my Hamlet quotes at the start of every chapter</p>",
        "id": 181115500,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574173685
    },
    {
        "content": "<p>I mean, I spent a <em>lot</em> of time rewriting that thing, I might as well get to be a bit silly</p>",
        "id": 181115515,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574173700
    },
    {
        "content": "<p>I'll be looking forward to your updated manuscript :)</p>",
        "id": 181115531,
        "sender_full_name": "lqd",
        "timestamp": 1574173716
    },
    {
        "content": "<p>here's a spoiler: <a href=\"/user_uploads/4715/MsjOVv961XI6_IbR87cZnUak/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/MsjOVv961XI6_IbR87cZnUak/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/4715/MsjOVv961XI6_IbR87cZnUak/pasted_image.png\"></a></div>",
        "id": 181115577,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574173748
    },
    {
        "content": "<p>nice</p>",
        "id": 181115586,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574173762
    },
    {
        "content": "<p>I also have examples for every slightly complex rule</p>",
        "id": 181115610,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574173781
    },
    {
        "content": "<p>nice :)</p>",
        "id": 181115618,
        "sender_full_name": "lqd",
        "timestamp": 1574173786
    },
    {
        "content": "<p>I wrote those specifically with the idea of porting them to The Book</p>",
        "id": 181115625,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574173793
    },
    {
        "content": "<p>beautiful</p>",
        "id": 181115638,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574173801
    },
    {
        "content": "<p>ok, so, I am copying some of that over</p>",
        "id": 181115681,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574173805
    },
    {
        "content": "<p>I added a section 'liveness-related inputs'</p>",
        "id": 181115697,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574173813
    },
    {
        "content": "<p>(I let everyone know you were re-working your draft btw <a href=\"https://rust-lang.github.io/compiler-team/minutes/triage-meeting/2019-11-14/\" target=\"_blank\" title=\"https://rust-lang.github.io/compiler-team/minutes/triage-meeting/2019-11-14/\">https://rust-lang.github.io/compiler-team/minutes/triage-meeting/2019-11-14/</a> :) (Working group sync a bit down)</p>",
        "id": 181115703,
        "sender_full_name": "lqd",
        "timestamp": 1574173820
    },
    {
        "content": "<p>can you say a bit about <code>var_initialized_on_entry</code></p>",
        "id": 181115736,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574173841
    },
    {
        "content": "<p>Ok, so it solves an off-by-one problem</p>",
        "id": 181115751,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574173861
    },
    {
        "content": "<p>is that <code>initialized_at</code> from the code?</p>",
        "id": 181115766,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574173870
    },
    {
        "content": "<p>Not really</p>",
        "id": 181115790,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574173896
    },
    {
        "content": "<p>initialized_at says that something becomes initialised at mid-point of somewhere</p>",
        "id": 181115814,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574173917
    },
    {
        "content": "<p>var_initialized_on_exit is the \"propagated\" version of that; it moves across the CFG as you would expect</p>",
        "id": 181115891,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574173947
    },
    {
        "content": "<p>but it stops at a move</p>",
        "id": 181115901,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574173955
    },
    {
        "content": "<p>Which means that <em>every</em> move would have a move error (I think)</p>",
        "id": 181115926,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574173974
    },
    {
        "content": "<p>So what it says intuitively is that if we know that a move is initialized on exit from somewhere, we also know that it's initialized when arriving at the successor (but not necessarily when leaving it)</p>",
        "id": 181115996,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574174024
    },
    {
        "content": "<blockquote>\n<p>var_initialized_on_exit is the \"propagated\" version of that; it moves across the CFG as you would expect</p>\n</blockquote>\n<p>two questions</p>",
        "id": 181116007,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574174034
    },
    {
        "content": "<p>first, the image above says <code>var_initialized_on_*entry*</code></p>",
        "id": 181116056,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574174047
    },
    {
        "content": "<p>second, it says it's a \"fact\"</p>",
        "id": 181116065,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574174052
    },
    {
        "content": "<p>There's two of them, and they are facts from the perspective of liveness</p>",
        "id": 181116120,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574174092
    },
    {
        "content": "<p>I see</p>",
        "id": 181116147,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574174108
    },
    {
        "content": "<p>I'm kind of fudging it in the table</p>",
        "id": 181116161,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574174114
    },
    {
        "content": "<p>I hadn't thought about the question of distinct \"phases\"</p>",
        "id": 181116186,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574174131
    },
    {
        "content": "<p>I guess it makes sense to start with the <em>move</em> stuff? (that is kind of the first phase?)</p>",
        "id": 181116302,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574174180
    },
    {
        "content": "<p>I guess, yes</p>",
        "id": 181116318,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574174190
    },
    {
        "content": "<p>I mean, the move analysis forks</p>",
        "id": 181116334,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574174200
    },
    {
        "content": "<p>One part goes into liveness, and the other continues to become move errors</p>",
        "id": 181116345,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574174210
    },
    {
        "content": "<p>But computationally the move analysis happens first :)</p>",
        "id": 181116386,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574174244
    },
    {
        "content": "<p>I really should just down your thesis right now, shouldn't I</p>",
        "id": 181116393,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574174246
    },
    {
        "content": "<p>It might be the fastest way to understand what I'm doing yes</p>",
        "id": 181116479,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574174284
    },
    {
        "content": "<p>But don't read the old one</p>",
        "id": 181116489,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574174292
    },
    {
        "content": "<p>send me the correct link</p>",
        "id": 181116524,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574174302
    },
    {
        "content": "<p>let's dial back a bit</p>",
        "id": 181116544,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574174312
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/wo3Mo_EQ9MKiWGbd2qI-sMn4/Thesis.pdf\" target=\"_blank\" title=\"Thesis.pdf\">here's the newest draft</a></p>",
        "id": 181116551,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574174319
    },
    {
        "content": "<p>I'm thinking that a flat hackmd with \"all the rules\" is probably not best</p>",
        "id": 181116558,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574174323
    },
    {
        "content": "<p>let's start by writing out the overall flow</p>",
        "id": 181116570,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574174333
    },
    {
        "content": "<p>I'm guessing that's in the thesis</p>",
        "id": 181116737,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574174430
    },
    {
        "content": "<p>I have these, which are less accurate now:<br>\n<a href=\"/user_uploads/4715/UKWkcn0bUv-gZET7CMLLYfMP/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">Very high</a> <a href=\"/user_uploads/4715/Jz4YtpOC9RSQ9XHc-nK9Q6Z9/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">Slightly lower</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/UKWkcn0bUv-gZET7CMLLYfMP/pasted_image.png\" target=\"_blank\" title=\"Very high\"><img src=\"/user_uploads/4715/UKWkcn0bUv-gZET7CMLLYfMP/pasted_image.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/4715/Jz4YtpOC9RSQ9XHc-nK9Q6Z9/pasted_image.png\" target=\"_blank\" title=\"Slightly lower\"><img src=\"/user_uploads/4715/Jz4YtpOC9RSQ9XHc-nK9Q6Z9/pasted_image.png\"></a></div>",
        "id": 181116747,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574174437
    },
    {
        "content": "<p>(move errors are kind of a happy bonus)</p>",
        "id": 181116763,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574174451
    },
    {
        "content": "<p>heh, just found those</p>",
        "id": 181116765,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574174452
    },
    {
        "content": "<p>(this is really quite beautifully done)</p>",
        "id": 181116848,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574174509
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 181116867,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574174517
    },
    {
        "content": "<p>I really needed to hear that, given that I had literally no input for months, then got \"ok but this is incomprehensible\" as feedback from my subject reviewer, then spent almost two months' of evenings and weekends rewriting it into this</p>",
        "id": 181116966,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574174567
    },
    {
        "content": "<p>It wasn't all bad though because I didn't like the first version, and I do like this one</p>",
        "id": 181117003,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574174582
    },
    {
        "content": "<p>And as I said, it should be straightforward to cannibalise it into the book</p>",
        "id": 181117031,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574174597
    },
    {
        "content": "<p>sorry for not giving you more feedback earlier :)</p>",
        "id": 181117205,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574174715
    },
    {
        "content": "<p>anyway, I think the \"big picture\" is this:</p>",
        "id": 181117212,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574174724
    },
    {
        "content": "<p>It's all right, I'm blaming Tobias more than you :)</p>",
        "id": 181117224,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574174729
    },
    {
        "content": "<p>me too :P</p>",
        "id": 181117233,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574174735
    },
    {
        "content": "<ul>\n<li>\n<p>Initialization analysis<br>\n    * computes which Paths are initialized at each cfg node<br>\n    * reports errors for things that are used when not necessarily initialized</p>\n</li>\n<li>\n<p>Liveness analysis<br>\n    * computes which variables may be used in the future at each cfg node, and how<br>\n    * this in turn suggests which <em>origins</em> are 'live' (meaning that they may be dereferenced)</p>\n</li>\n<li>\n<p>Origin analysis<br>\n    * computes which loans may be referenced by each origin<br>\n    * this in turn suggests which <em>loans</em> are 'live' (meaning that references resulting from them may be dereferenced)</p>\n</li>\n</ul>",
        "id": 181117253,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574174744
    },
    {
        "content": "<p>(I have to find a better phrasing for the last part, since it doesn't account for 'killed' loans, but anyway)</p>",
        "id": 181117329,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574174765
    },
    {
        "content": "<p>oh and I forgot to add that liveness uses initialization to make its results more precise</p>",
        "id": 181117432,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574174837
    },
    {
        "content": "<p>I think it would be incorrect without it, but yes</p>",
        "id": 181117453,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574174854
    },
    {
        "content": "<p>so in terms of your PR btw</p>",
        "id": 181117602,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574174922
    },
    {
        "content": "<p>it's useful for me to pull this stuff together, but what do you see as the actual bits of coding needed before it can land?</p>",
        "id": 181117621,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574174941
    },
    {
        "content": "<p>It took me a long time to realise that conceptually it's not that a drop of something moved is a no-op, it's not even the responsibility of that drop, given that the object has been moved to somewhere else (which should drop it).</p>",
        "id": 181117645,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574174957
    },
    {
        "content": "<p>Hmm, I would need to change some things in rustc</p>",
        "id": 181117660,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574174974
    },
    {
        "content": "<p>Notably, I need to emit accessed_at() at start and not mid-point</p>",
        "id": 181117669,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574174985
    },
    {
        "content": "<p>Also make child() non-transitive</p>",
        "id": 181117683,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574174996
    },
    {
        "content": "<p>(not required, but reasonable)</p>",
        "id": 181117689,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574175000
    },
    {
        "content": "<p>And perhaps rename path_belongs_to_var to something like path_starts_in_var</p>",
        "id": 181117771,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574175028
    },
    {
        "content": "<p>(I'm skimming the code in the PR itself, which so far seems very good)</p>",
        "id": 181117785,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574175042
    },
    {
        "content": "<p>Also, I do we want to use Hungarian notation and have _var pre- and suffixes?</p>",
        "id": 181117824,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574175069
    },
    {
        "content": "<p>I think we should rename <code>child</code> to <code>parent</code></p>",
        "id": 181117890,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574175122
    },
    {
        "content": "<p>for consistency with <code>ancestor</code></p>",
        "id": 181117940,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574175125
    },
    {
        "content": "<p>(side note)</p>",
        "id": 181117942,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574175127
    },
    {
        "content": "<p>Hm, yes, I have both, but I need to index it from the left</p>",
        "id": 181117961,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574175137
    },
    {
        "content": "<p>Or at some point I had both anyway</p>",
        "id": 181117966,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574175145
    },
    {
        "content": "<blockquote>\n<p>Also, I do we want to use Hungarian notation and have _var pre- and suffixes?</p>\n</blockquote>\n<p>I don't quite follow this</p>",
        "id": 181117979,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574175158
    },
    {
        "content": "<p>Ok so many but not all relations follow a convention where they record what they are relations between</p>",
        "id": 181118004,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574175178
    },
    {
        "content": "<p>For example <code>var_uses_region</code></p>",
        "id": 181118020,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574175191
    },
    {
        "content": "<p>(Which I guess is now called something else)</p>",
        "id": 181118034,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574175202
    },
    {
        "content": "<p>Given that we typically know the type of the relations, <code>var</code> and <code>region</code> are sort of redundant, right?</p>",
        "id": 181118070,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574175229
    },
    {
        "content": "<p>Also, we are inconsistent with this</p>",
        "id": 181118073,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574175233
    },
    {
        "content": "<p>We are also inconsistent with the <code>_at</code> suffix</p>",
        "id": 181118119,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574175244
    },
    {
        "content": "<p>good video on the topic (which kinda disagrees with the premise that knowing the types of the arguments is <em>always</em> redundant to the relation name) <a href=\"https://www.youtube.com/watch?v=Uska9DgJEoo\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=Uska9DgJEoo\">https://www.youtube.com/watch?v=Uska9DgJEoo</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"Uska9DgJEoo\" href=\"https://www.youtube.com/watch?v=Uska9DgJEoo\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=Uska9DgJEoo\"><img src=\"https://i.ytimg.com/vi/Uska9DgJEoo/default.jpg\"></a></div>",
        "id": 181118351,
        "sender_full_name": "lqd",
        "timestamp": 1574175363
    },
    {
        "content": "<p>I agree we are somewhat inconsistent :)</p>",
        "id": 181118418,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574175387
    },
    {
        "content": "<p>I don't feel the need to record 100% of the types</p>",
        "id": 181118470,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574175427
    },
    {
        "content": "<p>in the name</p>",
        "id": 181118482,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574175435
    },
    {
        "content": "<p>and I definitely don't want to go full-on <code>pn_moved_out</code> or something</p>",
        "id": 181118499,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574175447
    },
    {
        "content": "<p>but I do find that having some redundancy helps me when reading</p>",
        "id": 181118521,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574175463
    },
    {
        "content": "<p>I view the types in the declarations as being for the compiler</p>",
        "id": 181118538,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574175472
    },
    {
        "content": "<p>and the types in the names as being for the reader</p>",
        "id": 181118550,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574175476
    },
    {
        "content": "<p>but e.g. <code>moved_out_at(Path, Node)</code> .. hmm .. <code>path_moved_out_at(Path, Node)</code> feels like an improvement, likely</p>",
        "id": 181118618,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574175499
    },
    {
        "content": "<p><code>path_moved_out_at_node</code>, not sure :)</p>",
        "id": 181118628,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574175506
    },
    {
        "content": "<p>I definitely like the ordering of the arguments to \"match\" the name somehow</p>",
        "id": 181118664,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574175531
    },
    {
        "content": "<p>maybe just writing everything out would feel better?</p>",
        "id": 181118684,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574175548
    },
    {
        "content": "<p>I'm thinking about e.g. <code>contains</code> -- something like <code>origin_contains_loan</code>... probably clearer ..</p>",
        "id": 181118705,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574175569
    },
    {
        "content": "<p>on the other hand I was pretty happy with <code>placeholder(Origin, Loan)</code></p>",
        "id": 181118814,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574175618
    },
    {
        "content": "<p>and I cannot imagine that \"hungarian style notation\" would improve that</p>",
        "id": 181118829,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574175630
    },
    {
        "content": "<p>(it's not a verb, I guess)</p>",
        "id": 181118840,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574175643
    },
    {
        "content": "<p>the other thing we sometimes have to record if <code>foo_base</code> vs <code>foo</code> (transitive)</p>",
        "id": 181119007,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574175737
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> some other inconsistencies, which seem perhaps more imporant:</p>\n<ul>\n<li><code>moved_out_at</code> -- a move occurred at this point</li>\n<li><code>path_maybe_moved_at</code> -- the path may have been moved some time before this point</li>\n</ul>",
        "id": 181119242,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574175893
    },
    {
        "content": "<p>Hmm</p>",
        "id": 181119276,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574175911
    },
    {
        "content": "<p>seems related to transitive vs direct</p>",
        "id": 181119284,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574175918
    },
    {
        "content": "<p>maybe best answered by just not using the term \"moved\" for both</p>",
        "id": 181119305,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574175936
    },
    {
        "content": "<p>I guess that is <code>path_maybe_uninitialized_on_entry</code>?</p>",
        "id": 181119388,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574175967
    },
    {
        "content": "<p>Hm, yes, I guess so</p>",
        "id": 181119413,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574175979
    },
    {
        "content": "<p>These include/exclude things are <em>really</em> tricky</p>",
        "id": 181119447,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574176001
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> so <code>var_maybe_initialized_on_exit</code></p>",
        "id": 181119873,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574176253
    },
    {
        "content": "<p>this is specifically concluding: is there <em>any</em> subpath  of the variable that is initialized</p>",
        "id": 181119882,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574176263
    },
    {
        "content": "<p>It used to be that</p>",
        "id": 181119896,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574176274
    },
    {
        "content": "<p>hmm</p>",
        "id": 181119904,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574176278
    },
    {
        "content": "<p>It's not anymore</p>",
        "id": 181119907,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574176282
    },
    {
        "content": "<p>It's the opposite</p>",
        "id": 181119912,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574176285
    },
    {
        "content": "<p>It specifically tracks if the <em>root path</em> of <code>x</code> was moved</p>",
        "id": 181119935,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574176303
    },
    {
        "content": "<p>I guess the question is what this input means</p>",
        "id": 181119957,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574176316
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>path_belongs_to_var\n</pre></div>",
        "id": 181119965,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574176320
    },
    {
        "content": "<p>You asked when I introduced it and you were right</p>",
        "id": 181120022,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574176336
    },
    {
        "content": "<p>I want to change it to <code>path_is_root_of_var</code> or something like that</p>",
        "id": 181120062,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574176367
    },
    {
        "content": "<p>I think is should just be</p>",
        "id": 181120071,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574176373
    },
    {
        "content": "<p><code>path_is_var</code></p>",
        "id": 181120074,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574176375
    },
    {
        "content": "<p>...yes, that works better</p>",
        "id": 181120084,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574176382
    },
    {
        "content": "<p>It's what we want for drop-liveness anyway, right?</p>",
        "id": 181120116,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574176401
    },
    {
        "content": "<p>Because we only care about full moves</p>",
        "id": 181120122,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574176407
    },
    {
        "content": "<p>Given that the drop() override is attached to whatever was rooted at that variable</p>",
        "id": 181120175,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574176438
    },
    {
        "content": "<p>well that was the next question</p>",
        "id": 181120232,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574176452
    },
    {
        "content": "<p>I mean if the variable is <em>partly</em> initialized</p>",
        "id": 181120239,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574176459
    },
    {
        "content": "<p>we still have to drop those parts that remain</p>",
        "id": 181120260,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574176467
    },
    {
        "content": "<p>I guess I'll check it out when I get that far</p>",
        "id": 181120271,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574176475
    },
    {
        "content": "<p>ps I've been editing the hackmd</p>",
        "id": 181120279,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574176482
    },
    {
        "content": "<p>I see that</p>",
        "id": 181120284,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574176487
    },
    {
        "content": "<p>not sure if you're following along at all</p>",
        "id": 181120287,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574176489
    },
    {
        "content": "<p>ok</p>",
        "id": 181120288,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574176490
    },
    {
        "content": "<p>I am!</p>",
        "id": 181120290,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574176492
    },
    {
        "content": "<p>...sort of</p>",
        "id": 181120294,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574176494
    },
    {
        "content": "<p>I'm doing some on the fly renaming :P</p>",
        "id": 181120296,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574176496
    },
    {
        "content": "<p>...ok not sufficiently</p>",
        "id": 181120318,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574176505
    },
    {
        "content": "<p>I think we should start documenting conventions at the top maybe</p>",
        "id": 181120320,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574176506
    },
    {
        "content": "<p>YES</p>",
        "id": 181120329,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574176512
    },
    {
        "content": "<p>hmm, wait</p>",
        "id": 181120432,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574176566
    },
    {
        "content": "<p>I'm taking a stab at some, feel free to tell me that they are bad :)</p>",
        "id": 181120454,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574176581
    },
    {
        "content": "<p>There was a reason why <code>paty_maybe_moved_...</code> was called that</p>",
        "id": 181120462,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574176587
    },
    {
        "content": "<p>(I think we're not consistently following them yet)</p>",
        "id": 181120469,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574176590
    },
    {
        "content": "<blockquote>\n<p>There was a reason why <code>paty_maybe_moved_...</code> was called that</p>\n</blockquote>\n<p>what was that</p>",
        "id": 181120489,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574176600
    },
    {
        "content": "<p>Uninitialised should be <em>de</em>initialised</p>",
        "id": 181120493,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574176603
    },
    {
        "content": "<p>ah, interesting</p>",
        "id": 181120508,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574176612
    },
    {
        "content": "<p>Because this relation does <em>not</em> capture a variable that has never been initialised</p>",
        "id": 181120511,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574176616
    },
    {
        "content": "<p>Ok, +1 to deinitialized</p>",
        "id": 181120523,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574176625
    },
    {
        "content": "<p>that said</p>",
        "id": 181120531,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574176634
    },
    {
        "content": "<p>That would have required starting at the root of the CFG, which I did not have</p>",
        "id": 181120532,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574176635
    },
    {
        "content": "<p>I just proposed the convention of <code>on_entry</code> vs <code>at</code> to distinguish \"instantaneous\" things from \"over path\" things</p>",
        "id": 181120549,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574176648
    },
    {
        "content": "<p>Ok, sounds reasonable</p>",
        "id": 181120570,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574176664
    },
    {
        "content": "<p>so we could maybe just use <code>moved</code></p>",
        "id": 181120575,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574176667
    },
    {
        "content": "<p>though I sort of like the idea of also trying to separate out the property</p>",
        "id": 181120611,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574176682
    },
    {
        "content": "<p>e.g., <code>initialized_at</code> vs <code>initialized_on_entry</code></p>",
        "id": 181120657,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574176688
    },
    {
        "content": "<p>we would need a different name for the former otherwise, which is maybe ok (\"assigned\"?)</p>",
        "id": 181120666,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574176698
    },
    {
        "content": "<p>ok so <code>at</code> would be my <code>on exit</code>?</p>",
        "id": 181120677,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574176702
    },
    {
        "content": "<p>well I mean we have <code>initialized_at</code> which is an input fact, right?</p>",
        "id": 181120701,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574176721
    },
    {
        "content": "<p>Aah ok you meant like that</p>",
        "id": 181120711,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574176725
    },
    {
        "content": "<p>that just says \"there is an initialization at this point\"</p>",
        "id": 181120713,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574176726
    },
    {
        "content": "<p>Ok that makes sense</p>",
        "id": 181120723,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574176735
    },
    {
        "content": "<p>So any input fact would be <code>_at</code>, and the computed relations would be <code>_on_entry</code> or <code>on_exit</code></p>",
        "id": 181120788,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574176787
    },
    {
        "content": "<p>Makes sense!</p>",
        "id": 181120794,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574176789
    },
    {
        "content": "<p>but shall we also try to have distinct \"relation names\"?</p>",
        "id": 181120857,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574176806
    },
    {
        "content": "<p>I just updated to <code>assigned_at</code> for example and I think it's useful</p>",
        "id": 181120872,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574176818
    },
    {
        "content": "<p>redundancy ftw</p>",
        "id": 181120877,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574176822
    },
    {
        "content": "<p>You mean from facts? I guess it makes sense too</p>",
        "id": 181120882,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574176823
    },
    {
        "content": "<p>yeah, I am doing that</p>",
        "id": 181120991,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574176894
    },
    {
        "content": "<p>which suggests \"deinitialized\"</p>",
        "id": 181120996,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574176897
    },
    {
        "content": "<p>that's ok I think?</p>",
        "id": 181121019,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574176910
    },
    {
        "content": "<p>Or moved?</p>",
        "id": 181121025,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574176913
    },
    {
        "content": "<p>I think \"deinitialized\" is good</p>",
        "id": 181121038,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574176918
    },
    {
        "content": "<p>\"move\" is the action</p>",
        "id": 181121090,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574176925
    },
    {
        "content": "<p>\"deinitialized\" is the state</p>",
        "id": 181121094,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574176928
    },
    {
        "content": "<p>That tracks, because I can imagine other types of deinitialisation perhaps maybe I don't know</p>",
        "id": 181121127,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574176950
    },
    {
        "content": "<p>right</p>",
        "id": 181121136,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574176958
    },
    {
        "content": "<p>In some future version of Rust</p>",
        "id": 181121148,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574176966
    },
    {
        "content": "<p>Or maybe if there's weirdness involved, like I don't know inline assembly or something</p>",
        "id": 181121178,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574176985
    },
    {
        "content": "<p>Matthew said there were edge cases with inline assembly that wouldn't work with what I'm doing</p>",
        "id": 181121222,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574177018
    },
    {
        "content": "<p>heh oh dear</p>",
        "id": 181121262,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574177037
    },
    {
        "content": "<p>ok well I'm just reading through the code and transcribing</p>",
        "id": 181121364,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574177073
    },
    {
        "content": "<p>so far so good</p>",
        "id": 181121365,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574177074
    },
    {
        "content": "<p>I've updated the names, hopefully consistently</p>",
        "id": 181121375,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574177081
    },
    {
        "content": "<p>me and <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> said yesterday that we'd probably try to go over the code at the end</p>",
        "id": 181121391,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574177092
    },
    {
        "content": "<p>to try and make it match the names in the hackmd</p>",
        "id": 181121398,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574177096
    },
    {
        "content": "<p>which introduces some \"mapping confusion\" for the time being but hopefully we can handle it</p>",
        "id": 181121427,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574177109
    },
    {
        "content": "<p>Hmm, this looks wrong though:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nf\">path_maybe_deinitialized_on_entry</span><span class=\"p\">(</span><span class=\"nv\">Path</span><span class=\"p\">,</span> <span class=\"nv\">Node</span><span class=\"p\">)</span> <span class=\"p\">:-</span>\n    <span class=\"nf\">path_moved_at</span><span class=\"p\">(</span><span class=\"nv\">Path</span><span class=\"p\">,</span> <span class=\"nv\">Node</span><span class=\"p\">).</span>\n</pre></div>",
        "id": 181121433,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574177112
    },
    {
        "content": "<p>should probably record the names from the code</p>",
        "id": 181121435,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574177114
    },
    {
        "content": "<p>yes, it does</p>",
        "id": 181121450,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574177127
    },
    {
        "content": "<p>I'm with deinitialized <em>on exit</em>, but not on entry</p>",
        "id": 181121475,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574177143
    },
    {
        "content": "<p>yes, though your comment suggests otherwise</p>",
        "id": 181121485,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574177153
    },
    {
        "content": "<p>score on for naming conventions</p>",
        "id": 181121490,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574177158
    },
    {
        "content": "<p>Yes, definitely</p>",
        "id": 181121539,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574177164
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"c1\">// path_maybe_moved_at(Path, Point): There exists at least one path through</span>\n<span class=\"w\">    </span><span class=\"c1\">// the CFG to Point such that `Path` has been moved out by the time we</span>\n<span class=\"w\">    </span><span class=\"c1\">// arrive at `Point` without it being re-initialized for sure.</span>\n</pre></div>",
        "id": 181121547,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574177169
    },
    {
        "content": "<p>Makes that much clearer and might have been a bug</p>",
        "id": 181121555,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574177174
    },
    {
        "content": "<p>\"we arrive at\"</p>",
        "id": 181121562,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574177177
    },
    {
        "content": "<p>The tell-tale sign is that it has the same shape as <code>initialized_on_exit</code>but not the same suffix :)</p>",
        "id": 181121694,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574177260
    },
    {
        "content": "<p>I'm trying to remember</p>",
        "id": 181121724,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574177280
    },
    {
        "content": "<p>is there a reason to distinguish \"definitely initialized\" from \"maybe deinitialized\"?</p>",
        "id": 181121781,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574177295
    },
    {
        "content": "<p>ah well I guess it's exactly</p>",
        "id": 181121789,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574177300
    },
    {
        "content": "<p>the fact that <em>un</em>initialized things are distinct?</p>",
        "id": 181121795,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574177306
    },
    {
        "content": "<p>maybe deinitialized doesn't capture \"never initialized\"</p>",
        "id": 181121927,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574177400
    },
    {
        "content": "<p>right</p>",
        "id": 181122002,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574177422
    },
    {
        "content": "<p>in some versions of the compiler at least</p>",
        "id": 181122013,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574177431
    },
    {
        "content": "<p>we generated a \"move\" for a <code>let x</code> that does not initialize <code>x</code></p>",
        "id": 181122020,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574177438
    },
    {
        "content": "<p>but anyway</p>",
        "id": 181122021,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574177439
    },
    {
        "content": "<p>I'm definitely finding this naming convention helpful</p>",
        "id": 181122027,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574177446
    },
    {
        "content": "<p>e.g.</p>",
        "id": 181122029,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574177447
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>path_definitely_initialized_on_exit(Path, Node) :-\n    path_maybe_initialized_on_exit(Path, Node),\n    !path_maybe_deinitialized_on_exit(Path, Node).\n</pre></div>",
        "id": 181122036,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574177453
    },
    {
        "content": "<p>vs <code>path_definitely_initialized_at</code></p>",
        "id": 181122064,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574177472
    },
    {
        "content": "<p>I would have guessed that the latter meant \"on entry\"</p>",
        "id": 181122071,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574177478
    },
    {
        "content": "<p>but it must be on exit...</p>",
        "id": 181122074,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574177481
    },
    {
        "content": "<p>Yes, it's much clearer</p>",
        "id": 181122080,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574177486
    },
    {
        "content": "<p>I feel like I need to draw this actually</p>",
        "id": 181122104,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574177502
    },
    {
        "content": "<p>I'm not.. entirely convinced this is true</p>",
        "id": 181122119,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574177515
    },
    {
        "content": "<p>e.g.</p>",
        "id": 181122175,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574177525
    },
    {
        "content": "<p>No, set subtraction is weird</p>",
        "id": 181122177,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574177526
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">something</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">44</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"n\">print</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>",
        "id": 181122203,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574177545
    },
    {
        "content": "<p>here <code>a</code> is \"maybe initialized\"</p>",
        "id": 181122216,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574177551
    },
    {
        "content": "<p>but it is not \"maybe deinitialized\"</p>",
        "id": 181122223,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574177555
    },
    {
        "content": "<p>hmmmm</p>",
        "id": 181122236,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574177563
    },
    {
        "content": "<p>Ok so maybe I didn't solve the problem I thought I solved</p>",
        "id": 181122259,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574177582
    },
    {
        "content": "<p>Or well, it did solve the problem I was trying to solve, which was just</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"n\">print</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>",
        "id": 181122419,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574177658
    },
    {
        "content": "<p>it seems like we need <em>some</em> sort of action for \"uninitialized variable\"</p>",
        "id": 181122563,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574177746
    },
    {
        "content": "<p>Yes, I guess we do</p>",
        "id": 181122583,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574177758
    },
    {
        "content": "<p>e.g. maybe some facts that indicate the root</p>",
        "id": 181122584,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574177758
    },
    {
        "content": "<p>this could take many forms</p>",
        "id": 181122630,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574177764
    },
    {
        "content": "<p>well wait</p>",
        "id": 181122648,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574177781
    },
    {
        "content": "<p>er ok I guess that we can't readily do \"intersection\" of many flows</p>",
        "id": 181122712,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574177820
    },
    {
        "content": "<p>No, I ran into that problem many times trying to design this solution</p>",
        "id": 181122769,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574177860
    },
    {
        "content": "<p>I imagine this might take the form then of a <code>start_node</code> fact and perhaps <code>initialized_at(Path, Node)</code> facts for the parameters</p>",
        "id": 181122785,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574177877
    },
    {
        "content": "<blockquote>\n<p>No, I ran into that problem many times trying to design this solution</p>\n</blockquote>\n<p>yes I think this is (well, partly) why we have traditionally propagated \"moves\"</p>",
        "id": 181122846,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574177893
    },
    {
        "content": "<p>(I think the other reason was that it's better for errors)</p>",
        "id": 181122863,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574177901
    },
    {
        "content": "<p>I'm not wild about <code>start_node</code> fact -- have to think -- well I guess it's ok. I'm just thinking about what to do for unreachable code blocks</p>",
        "id": 181122914,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574177941
    },
    {
        "content": "<p>I don't honestly know what the current borrow checker does</p>",
        "id": 181122947,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574177963
    },
    {
        "content": "<p>(answer: you don't get errors from dead code (<a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=ce02613083bb8aafc9b46eeeb783cc04\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=ce02613083bb8aafc9b46eeeb783cc04\">playground</a>))</p>",
        "id": 181123101,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574178035
    },
    {
        "content": "<p>that's what I thought, though I couldn't quite remember where we landed</p>",
        "id": 181123161,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574178072
    },
    {
        "content": "<blockquote>\n<p>I imagine this might take the form then of a <code>start_node</code> fact and perhaps <code>initialized_at(Path, Node)</code> facts for the parameters</p>\n</blockquote>\n<p>actually I guess this doesn't work</p>",
        "id": 181123207,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574178100
    },
    {
        "content": "<p>you really need something to enumerate the set of \"uninitialized\" variables</p>",
        "id": 181123226,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574178112
    },
    {
        "content": "<p>Hm, yes I guess</p>",
        "id": 181123317,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574178148
    },
    {
        "content": "<p>I'm going quickly to check how borrow checker handles error reporting btw</p>",
        "id": 181123420,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574178192
    },
    {
        "content": "<p>The hard part is formulating this without saying something about all edges going into a node</p>",
        "id": 181123423,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574178194
    },
    {
        "content": "<p>Which we cannot capture</p>",
        "id": 181123438,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574178208
    },
    {
        "content": "<p>tracking \"uninitialized\" things seems easy enough</p>",
        "id": 181123443,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574178215
    },
    {
        "content": "<p>You mean, as in never initialised?</p>",
        "id": 181123463,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574178232
    },
    {
        "content": "<p>yeah</p>",
        "id": 181123473,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574178238
    },
    {
        "content": "<p>like if we had <code>local_variable(Var)</code> facts and <code>start_node(Node)</code></p>",
        "id": 181123538,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574178253
    },
    {
        "content": "<p>What would <code>local_variable</code> do?</p>",
        "id": 181123574,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574178275
    },
    {
        "content": "<p>you could do </p>\n<div class=\"codehilite\"><pre><span></span>path_maybe_uninitialized_on_exit(Path, Node) :-\n    local_variable(Var),\n    path_is_var(Path, Var),\n    start_node(Node)\n</pre></div>",
        "id": 181123596,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574178291
    },
    {
        "content": "<p>or alternatively the compiler could generate <code>path_moved_at</code> facts for all local variables at the start node</p>",
        "id": 181123639,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574178311
    },
    {
        "content": "<p>And <code>local_variable()</code> would essentially mean \"not an argument\"?</p>",
        "id": 181123665,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574178329
    },
    {
        "content": "<p>correct</p>",
        "id": 181123680,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574178337
    },
    {
        "content": "<p>we probably also want to record the arguments as initialzied -- but I guess we must already generate <code>path_initialized_at</code> facts for those</p>",
        "id": 181123708,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574178355
    },
    {
        "content": "<p>now that I think about it</p>",
        "id": 181123711,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574178357
    },
    {
        "content": "<p>or else we'd get errors all over the place</p>",
        "id": 181123718,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574178361
    },
    {
        "content": "<p>(seems worth noting)</p>",
        "id": 181123765,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574178366
    },
    {
        "content": "<p>Yes, I guess we must</p>",
        "id": 181123786,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574178382
    },
    {
        "content": "<p>Hmm, no I'm not sure come to think about it</p>",
        "id": 181123819,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574178399
    },
    {
        "content": "<p>No wait, that works, for some reason</p>",
        "id": 181123890,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574178452
    },
    {
        "content": "<p>...yes because the arguments get initialized at the start of the block</p>",
        "id": 181123942,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574178476
    },
    {
        "content": "<p>ok, so, from skimming the code it appears to me that</p>",
        "id": 181124278,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574178621
    },
    {
        "content": "<p>the current borrow checker is also tracking \"uninitialized paths\"</p>",
        "id": 181124317,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574178641
    },
    {
        "content": "<p>which seems good</p>",
        "id": 181124319,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574178642
    },
    {
        "content": "<p>I know at some point we tracked instead \"in-scope moves\", in a sense</p>",
        "id": 181124331,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574178650
    },
    {
        "content": "<p>but I think we now compute those lazilly at the point of error instead</p>",
        "id": 181124352,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574178664
    },
    {
        "content": "<p>this suggests to me <span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> that the most consistent thing would be to add <code>path_moved_at</code> actions at the start block for local variables</p>",
        "id": 181124394,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574178687
    },
    {
        "content": "<p>(or some other name that winds up \"unioned together\")</p>",
        "id": 181124428,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574178704
    },
    {
        "content": "<blockquote>\n<p>but I think we now compute those lazilly at the point of error instead</p>\n</blockquote>\n<p>specifically, in the <code>get_moved_indices</code> method, which I vaguely recall now</p>",
        "id": 181124616,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574178790
    },
    {
        "content": "<p>In that case, I thnk we can rename to <code>path_maybe_uninitialized_on_exit</code> and remove the \"known initialized\" computation altogether</p>",
        "id": 181124883,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574178925
    },
    {
        "content": "<p>(which I have done in the doc, along with noting the assumption that <code>path_moved_at</code> includes tuples for all local variables at the start point)</p>",
        "id": 181124944,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574178958
    },
    {
        "content": "<p>Ok, sounds good!</p>",
        "id": 181125054,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574178993
    },
    {
        "content": "<p>I will note though that it should be possible to compute intersection too, as the cfg-edge is a fact</p>",
        "id": 181125064,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574178996
    },
    {
        "content": "<p>There are extensions to datalog that include cerain operators</p>",
        "id": 181125081,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574179006
    },
    {
        "content": "<p>If we wanted, one could imagine coding that up</p>",
        "id": 181125109,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574179023
    },
    {
        "content": "<p>But let's not go there for now</p>",
        "id": 181125116,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574179026
    },
    {
        "content": "<p>Nah</p>",
        "id": 181125128,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574179031
    },
    {
        "content": "<p>Ok good, then I can just fix that in my report as well and it will be...probably correct</p>",
        "id": 181125164,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574179052
    },
    {
        "content": "<p>lol</p>",
        "id": 181125381,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574179162
    },
    {
        "content": "<p>I'll have a look at emitting the facts in Rust</p>",
        "id": 181125409,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574179183
    },
    {
        "content": "<p>if I'm not mistaken</p>",
        "id": 181125426,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574179194
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>        // move_error(path, point) :-\n        //     path_accessed_at(path, point),\n        //     !path_definitely_initialized_at(path, point).\n</pre></div>",
        "id": 181125433,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574179197
    },
    {
        "content": "<p>is wrong</p>",
        "id": 181125437,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574179198
    },
    {
        "content": "<p>precisely because of the on-entry vs on-exit confusion</p>",
        "id": 181125514,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574179211
    },
    {
        "content": "<p>a-ha!</p>",
        "id": 181125535,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574179225
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>move_error(Path, TargetNode) :-\n    cfg_edge(SourceNode, TargetNode),\n    path_accessed_at(Path, TargetNode),\n    path_maybe_uninitialized_on_exit(SourceNode).\n</pre></div>",
        "id": 181125594,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574179263
    },
    {
        "content": "<p>So the join we want is path_definitely_initialized_on_entry?</p>",
        "id": 181125598,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574179263
    },
    {
        "content": "<p>that seems more correct, right?</p>",
        "id": 181125613,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574179271
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>move_error(Path, TargetNode) :-\n    path_maybe_uninitialized_on_exit(Path, SourceNode),\n    cfg_edge(SourceNode, TargetNode),\n    path_accessed_at(Path, TargetNode).\n</pre></div>",
        "id": 181125687,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574179315
    },
    {
        "content": "<p>reordered and minor nits fixed</p>",
        "id": 181125696,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574179320
    },
    {
        "content": "<p>Hm yes that looks correct to me</p>",
        "id": 181125753,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574179333
    },
    {
        "content": "<p>The fact that this is no longer an antijoin might speed things up dramatically</p>",
        "id": 181125861,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574179393
    },
    {
        "content": "<p>ok, so the only remaining bit of confusion here</p>",
        "id": 181125869,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574179399
    },
    {
        "content": "<p>Also, eliminate most of the pipeline</p>",
        "id": 181125879,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574179404
    },
    {
        "content": "<p>is precisely what <code>var_maybe_initialized_on_exit</code> should be</p>",
        "id": 181125887,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574179406
    },
    {
        "content": "<p>I think it probably wants to be \"any subpart of this variable is initialized\"</p>",
        "id": 181125935,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574179434
    },
    {
        "content": "<p>however, I'm trying to remember just what we do in the existing borrow check</p>",
        "id": 181125947,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574179441
    },
    {
        "content": "<p>I know it's a bit.. more complex than that</p>",
        "id": 181125991,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574179445
    },
    {
        "content": "<p>or maybe it's not</p>",
        "id": 181125999,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574179458
    },
    {
        "content": "<p>(in particular, the role of this variable is to suppress drops where the value is dropped but not, in fact, initialized, right?)</p>",
        "id": 181126027,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574179479
    },
    {
        "content": "<p>but let me start looking at liveness now, I guess</p>",
        "id": 181126139,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574179540
    },
    {
        "content": "<blockquote>\n<p>(in particular, the role of this variable is to suppress drops where the value is dropped but not, in fact, initialized, right?)</p>\n</blockquote>\n<p>It's only used when a variable implements its own deallocator</p>",
        "id": 181126228,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574179579
    },
    {
        "content": "<p>We use it when a drop of a variable may happen, and that variable overrides drop() in order to force any origin inside of that variable (which may be a compex struct) to be live</p>",
        "id": 181126364,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574179654
    },
    {
        "content": "<p>That's all</p>",
        "id": 181126365,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574179655
    },
    {
        "content": "<p>Yeah, I think that the more complex part comes when computing the <code>invalidates</code> facts</p>",
        "id": 181127185,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574180050
    },
    {
        "content": "<p>ps, that would be better renamed to <code>loan_invalidated_at</code>...</p>",
        "id": 181127200,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574180061
    },
    {
        "content": "<p>OK, <strong>bikeshed time</strong></p>",
        "id": 181127503,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574180219
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>var_uses_origin\n</pre></div>",
        "id": 181127519,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574180227
    },
    {
        "content": "<p>or</p>",
        "id": 181127524,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574180228
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>var_uses_data_with_origin\n</pre></div>",
        "id": 181127535,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574180237
    },
    {
        "content": "<p>or something like that</p>",
        "id": 181127540,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574180243
    },
    {
        "content": "<p>the latter is probably too long</p>",
        "id": 181127550,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574180248
    },
    {
        "content": "<p>It's a bit long yes</p>",
        "id": 181127571,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574180262
    },
    {
        "content": "<p>(note that the term provenance doesn't (I don't think) read any better  here)</p>",
        "id": 181127635,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574180284
    },
    {
        "content": "<p>No, and I don't like \"uses\" either</p>",
        "id": 181127693,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574180328
    },
    {
        "content": "<p>It's too abstract; what is happening here is...more concrete than that</p>",
        "id": 181127709,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574180337
    },
    {
        "content": "<p><code>var_may_come_from_origin</code>?</p>",
        "id": 181127766,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574180359
    },
    {
        "content": "<p><code>var_may_refer_to_origin</code>?</p>",
        "id": 181127830,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574180383
    },
    {
        "content": "<p><code>var_refers_to_origin</code> is ok</p>",
        "id": 181127935,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574180420
    },
    {
        "content": "<p>but what about <code>var_drops_origin</code></p>",
        "id": 181127966,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574180440
    },
    {
        "content": "<p>Yes that's very opaque</p>",
        "id": 181128152,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574180548
    },
    {
        "content": "<p>Also, the relation is really indirect</p>",
        "id": 181128167,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574180555
    },
    {
        "content": "<p>the origin is...used in a drop of var</p>",
        "id": 181128199,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574180569
    },
    {
        "content": "<p>Haha, I just found this code, which I apparently wrote:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">// Arguments are initialized on function entry</span>\n<span class=\"w\">            </span><span class=\"n\">InitLocation</span>::<span class=\"n\">Argument</span><span class=\"p\">(</span><span class=\"n\">local</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">assert</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">body</span><span class=\"p\">.</span><span class=\"n\">local_kind</span><span class=\"p\">(</span><span class=\"n\">local</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">LocalKind</span>::<span class=\"n\">Arg</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">fn_entry</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Location</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">block</span>: <span class=\"nc\">BasicBlock</span>::<span class=\"n\">from_u32</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"k\">u32</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">statement_index</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">all_facts</span><span class=\"p\">.</span><span class=\"n\">initialized_at</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">((</span><span class=\"n\">init</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">location_table</span><span class=\"p\">.</span><span class=\"n\">start_index</span><span class=\"p\">(</span><span class=\"n\">fn_entry</span><span class=\"p\">)));</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 181128452,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574180712
    },
    {
        "content": "<p>So ok, that was me</p>",
        "id": 181128488,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574180735
    },
    {
        "content": "<p>I like my descritpion</p>",
        "id": 181128510,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574180746
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>// References with the given origin may be\n// dereferenced when the variable is used\n.decl var_uses_origin(Variable, Origin)\n\n// References with the given origin may be\n// dereferenced when the variable is dropped\n.decl var_drops_origin(Variable, Origin)\n</pre></div>",
        "id": 181128531,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574180762
    },
    {
        "content": "<p>but I don't know how to turn those comments into concise relation names :)</p>",
        "id": 181128587,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574180773
    },
    {
        "content": "<p>use_of_var_derefs_origin(Var, Origin)</p>",
        "id": 181128611,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574180788
    },
    {
        "content": "<p>drop_of_var_derefs_origin(Var, Origin)</p>",
        "id": 181128624,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574180795
    },
    {
        "content": "<p>maybe?</p>",
        "id": 181128625,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574180797
    },
    {
        "content": "<p>var_use_derefs_origin / var_drop_derefs_origin ?</p>",
        "id": 181128893,
        "sender_full_name": "lqd",
        "timestamp": 1574180968
    },
    {
        "content": "<p>also plausible</p>",
        "id": 181129057,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574181049
    },
    {
        "content": "<p>ps <span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> I am pretty sure that we want to compute (what I am calling) <code>var_maybe_partly_initialized_on_exit</code> -- i.e., it's true if any sub-path of the variable is initialized.</p>",
        "id": 181129107,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574181080
    },
    {
        "content": "<p>I'll have to check the code but I feel like that must be what it is using</p>",
        "id": 181129120,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574181089
    },
    {
        "content": "<p>Hmm, that's what I was computing before</p>",
        "id": 181129133,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574181098
    },
    {
        "content": "<p>(that said, I could imagine us trying to make this more precise in the future)</p>",
        "id": 181129148,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574181101
    },
    {
        "content": "<p>e.g. if you have</p>",
        "id": 181129167,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574181112
    },
    {
        "content": "<p>I think I got the same liveness output if I made it simpler</p>",
        "id": 181129169,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574181112
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[],</span><span class=\"w\"> </span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[]);</span><span class=\"w\"></span>\n<span class=\"n\">drop</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>",
        "id": 181129235,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574181125
    },
    {
        "content": "<p>the drop of <code>x</code> is still going to drop <code>x.0</code>, and is hence still relevant</p>",
        "id": 181129248,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574181133
    },
    {
        "content": "<p>(working on initial moves for non-arguments)</p>",
        "id": 181129251,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574181135
    },
    {
        "content": "<p>ok, well, we should work this out</p>",
        "id": 181129273,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574181147
    },
    {
        "content": "<p>Yes, we should</p>",
        "id": 181129326,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574181184
    },
    {
        "content": "<p>The question I guess becomes what MIR that will translate to</p>",
        "id": 181129353,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574181206
    },
    {
        "content": "<p>the MIR will have a drop of X in that case</p>",
        "id": 181129496,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574181275
    },
    {
        "content": "<p>there is a later pass that converts it to <code>drop(x.0)</code>, but it hasn't executed yet</p>",
        "id": 181129506,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574181286
    },
    {
        "content": "<p>I will check the code in a bit</p>",
        "id": 181129516,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574181294
    },
    {
        "content": "<p>I'm still going over the liveness rules</p>",
        "id": 181129525,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574181297
    },
    {
        "content": "<p>I think what would happen is that the MIR would have an extraction of x.1 into a variable, and then drop that variable</p>",
        "id": 181129555,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574181322
    },
    {
        "content": "<p>And then that variable would be initialized</p>",
        "id": 181129581,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574181339
    },
    {
        "content": "<p>according to Polonius</p>",
        "id": 181129592,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574181349
    },
    {
        "content": "<p>I gotta find some place to drop other notes</p>",
        "id": 181129667,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574181385
    },
    {
        "content": "<p>e.g., there is an efficiency thing</p>",
        "id": 181129672,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574181390
    },
    {
        "content": "<p>in particular in the borrow checker, we stop computing \"drop-use\" ranges when we see that something is \"use live\"</p>",
        "id": 181129700,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574181413
    },
    {
        "content": "<p>because we know that a full use always uses all the origins that a drop-use would use</p>",
        "id": 181129712,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574181422
    },
    {
        "content": "<p>That's smart</p>",
        "id": 181129738,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574181439
    },
    {
        "content": "<p>this might dramatically reduce the number of tuples</p>",
        "id": 181129745,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574181441
    },
    {
        "content": "<p>in certain cases, at least</p>",
        "id": 181129753,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574181446
    },
    {
        "content": "<p>well... up to 2x I guess :)</p>",
        "id": 181129765,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574181455
    },
    {
        "content": "<p>Drop-liveness is incredibly uncommon</p>",
        "id": 181129769,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574181457
    },
    {
        "content": "<p>Remember, I think we only compute this for structs that implement <code>drop()</code></p>",
        "id": 181129795,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574181480
    },
    {
        "content": "<p>Maybe not all the precursors perhaps</p>",
        "id": 181129862,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574181501
    },
    {
        "content": "<p>Yes, I know</p>",
        "id": 181129882,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574181514
    },
    {
        "content": "<p>It's ok as is for now</p>",
        "id": 181129889,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574181518
    },
    {
        "content": "<p>I noted it as an \"opt opportunity\"</p>",
        "id": 181129901,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574181526
    },
    {
        "content": "<blockquote>\n<p>var_use_derefs_origin / var_drop_derefs_origin ?</p>\n</blockquote>\n<p>I think this one is probably best from our bikeshed? or else <code>use_of_var...</code></p>",
        "id": 181130004,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574181601
    },
    {
        "content": "<p>Yes, I agree!</p>",
        "id": 181130088,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574181631
    },
    {
        "content": "<p>I personally find the <code>use_of_var_derefs_origin</code> a bit clearer, if verbose</p>",
        "id": 181130094,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574181634
    },
    {
        "content": "<p>mostly because my brain keeps trying to read \"use\" as a verb</p>",
        "id": 181130108,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574181646
    },
    {
        "content": "<p>and not a noun</p>",
        "id": 181130109,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574181647
    },
    {
        "content": "<p>but I would go with whichever</p>",
        "id": 181130126,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574181665
    },
    {
        "content": "<p>Me too</p>",
        "id": 181130581,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574181979
    },
    {
        "content": "<p>I don't have a strong preference either way</p>",
        "id": 181130585,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574181987
    },
    {
        "content": "<p>I'm going to head home soon by the way, and have dinner</p>",
        "id": 181130605,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574182001
    },
    {
        "content": "<p>It seems the test cases I wrote all work, and so does Niko's, when I add moves at the start of the function!</p>",
        "id": 181131689,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574182765
    },
    {
        "content": "<p>woohoo</p>",
        "id": 181131719,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574182782
    },
    {
        "content": "<p>not sure if you saw but I've basically finished writing up the rules in hackmd</p>",
        "id": 181131732,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574182790
    },
    {
        "content": "<p>they diverge slightly from your branch in the ways we discussed</p>",
        "id": 181131737,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574182795
    },
    {
        "content": "<p>That's good; I'll fix the branch to follow your suggestions</p>",
        "id": 181131821,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574182828
    },
    {
        "content": "<p>I ... think they are correct :)</p>",
        "id": 181131833,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574182840
    },
    {
        "content": "<p>let me know if you see any discrepancies</p>",
        "id": 181131842,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574182845
    },
    {
        "content": "<p>(sorry I wasn't able to follow much (if any) of what was going on :/ but I see you two have made a lot of concrete progress on naming, rules, reviewing most of the pipeline, etc thank you <span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> and <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> for your time y'all are awesome)</p>",
        "id": 181131903,
        "sender_full_name": "lqd",
        "timestamp": 1574182901
    },
    {
        "content": "<p>My gut feeling says the rules you have will run significantly faster than the ones I had before</p>",
        "id": 181131911,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574182911
    },
    {
        "content": "<p>They seem to require less fighting with Datafrog</p>",
        "id": 181131993,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574182945
    },
    {
        "content": "<p>when we're all done with this, we need to write up a \"sprint report\" for Inside Rust blog</p>",
        "id": 181131997,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574182949
    },
    {
        "content": "<p>Note that one of the todos in my PR is precisely verifying what you were arguing against, <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>, that is that we can get away with not computing partial initialization for drop-liveness :)</p>",
        "id": 181132205,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574183100
    },
    {
        "content": "<p>I'm still not convinced</p>",
        "id": 181132268,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574183143
    },
    {
        "content": "<p>I should come up with a good test</p>",
        "id": 181132270,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574183143
    },
    {
        "content": "<p>the new renaming, analyses descriptions, etc, in the hackmd, are super cool, great job</p>",
        "id": 181165158,
        "sender_full_name": "lqd",
        "timestamp": 1574205852
    },
    {
        "content": "<p>My plan is to add them to the book in my PR as well</p>",
        "id": 181186550,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574236881
    },
    {
        "content": "<p>Ok, I have spent most of the day implementing most of the rules Niko described, including renamings</p>",
        "id": 181229699,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574270975
    },
    {
        "content": "<p>of...virtually all liveness-and-initialization-touching facts</p>",
        "id": 181229724,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574270990
    },
    {
        "content": "<p>Which I just finished, coming soon in the PR I hope</p>",
        "id": 181229768,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574271003
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> nice &lt;3</p>",
        "id": 181231864,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574272354
    },
    {
        "content": "<p>You say NOW, wait until you see the diff</p>",
        "id": 181235425,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574274756
    },
    {
        "content": "<p>Just imagine the fact regeneration mess</p>",
        "id": 181235439,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574274771
    },
    {
        "content": "<p>The PR is now completely unreadable</p>",
        "id": 181236920,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574275987
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> If it turns out you can convince me that we need to worry about partial initialization for drops, I propose that we just join path_is_var through ancestor and use that rather than extra facts.</p>",
        "id": 181237595,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574276437
    },
    {
        "content": "<p>I gave up already and implemented that :)</p>",
        "id": 181285012,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574325265
    },
    {
        "content": "<p>This means that the initialization thing just needs a book entry</p>",
        "id": 181285026,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574325285
    },
    {
        "content": "<p>And then it's ready for reveiw</p>",
        "id": 181285030,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574325291
    },
    {
        "content": "<p>It made the initialization pipeline super clean</p>",
        "id": 181285074,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574325352
    },
    {
        "content": "<p>Because now there's two steps where the first one consumes all inputs and elaborates, and the other one starts from the first one's conclusions</p>",
        "id": 181285120,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574325379
    },
    {
        "content": "<blockquote>\n<p>I gave up already and implemented that :)</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> so I thought about the question of whether you need to track partial initialization. I think the example I was imagining was one like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"o\">&amp;</span><span class=\"n\">x</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"o\">&amp;</span><span class=\"n\">y</span><span class=\"p\">]);</span><span class=\"w\"></span>\n<span class=\"n\">drop</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"c1\">// here, because `v` will be dropped, I think both x and y are *both* considered borrowed still</span>\n</pre></div>\n\n\n<p>OK, actually, that example doesn't error -- but that's because we know that <code>Vec</code> doesn't refernce its data. <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=6ac253efc262ae2526c528519d411177\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=6ac253efc262ae2526c528519d411177\">This version does error</a>, when we use a random type with a dtor.</p>",
        "id": 181603739,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574387372
    },
    {
        "content": "<p>I realized as I was writing it up though that the way the rules are written, I think</p>",
        "id": 181603742,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574387389
    },
    {
        "content": "<p>you will have here 2 initialized paths -- <code>v</code> and <code>v.0</code> -- and one uninitialized path -- <code>v.1</code></p>",
        "id": 181603789,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574387408
    },
    {
        "content": "<p>it may well therefore be true that we only need to consider the  local variable path<code>v</code></p>",
        "id": 181603794,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574387429
    },
    {
        "content": "<p>however</p>",
        "id": 181603796,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574387434
    },
    {
        "content": "<p>well it still feels \"more right\" to me to consider all the paths :)</p>",
        "id": 181603802,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574387448
    },
    {
        "content": "<p>but I guess the point is that <code>initialized_on_entry(Path, Point)</code> (or whatever we called it) really means that the path is (at least) <strong>partially initialized</strong> on entry</p>",
        "id": 181603812,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574387473
    },
    {
        "content": "<p>and, at least sometimes, we will have subpaths -- so for it to be fully initialized, all subpaths must also be present</p>",
        "id": 181603821,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574387495
    },
    {
        "content": "<p>sorry if this is a conversation we already had</p>",
        "id": 181603826,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574387505
    },
    {
        "content": "<p>I guess I would say, with that understanding, and if we document the relation in that way, I am comfortable with the version that just checks for the path that is <em>equal</em> to the variable -- but I also think they are both equivalent</p>",
        "id": 181603870,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574387531
    },
    {
        "content": "<p>anyway so what branches here are ready for merge :)</p>",
        "id": 181603874,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574387547
    },
    {
        "content": "<p>We could merge my PR I think, and I could send a later PR documenting it in the book</p>",
        "id": 181624995,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574417921
    },
    {
        "content": "<p>\"My PR\" = <a href=\"https://github.com/rust-lang-nursery/polonius/issues/135\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/issues/135\">polonius#135</a></p>",
        "id": 181625028,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574417952
    },
    {
        "content": "<p>I don't know why cargo fmt errors on CI; <em>my</em> cargo fmt doesn't suggest any changes???</p>",
        "id": 181625265,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574418167
    },
    {
        "content": "<p>a couple notes, 1) I think you don't need to into_iter/iter.collect, you could extend(x.iter()) (or sometimes it's also possible to just move the relation from your context into the variables) 2) Vec::new isn't an expensive operation, so no real need to avoid one creation with the <code>or_insert_with(Vec::new)</code>, that being said, it's probably easier/best to use <code>or_default</code> instead</p>",
        "id": 181627172,
        "sender_full_name": "lqd",
        "timestamp": 1574419849
    },
    {
        "content": "<p>3) how much of these new/updated .facts datasets do we need ? I think a lot of those were added as unit tests back in the first liveness PRs, but then were removed from the tests, but the <code>./inputs/</code> datasets were kept IIRC. They might have already served their purpose, or are you often rerunning polonius with all these liveness and initialization datasets ? if they're less useful now than they were before, maybe we can delete the ones we don't re-run often and are not automatically checked by the unit tests, what do you think ?</p>",
        "id": 181637373,
        "sender_full_name": "lqd",
        "timestamp": 1574429598
    },
    {
        "content": "<blockquote>\n<p>a couple notes, 1) I think you don't need to into_iter/iter.collect, you could extend(x.iter()) (or sometimes it's also possible to just move the relation from your context into the variables) 2) Vec::new isn't an expensive operation, so no real need to avoid one creation with the <code>or_insert_with(Vec::new)</code>, that being said, it's probably easier/best to use <code>or_default</code> instead</p>\n</blockquote>\n<p>Thanks! I did that because it was suggested by Clippy, I could of course change that back :)</p>",
        "id": 181958469,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574798851
    },
    {
        "content": "<blockquote>\n<p>3) how much of these new/updated .facts datasets do we need ? I think a lot of those were added as unit tests back in the first liveness PRs, but then were removed from the tests, but the <code>./inputs/</code> datasets were kept IIRC. They might have already served their purpose, or are you often rerunning polonius with all these liveness and initialization datasets ? if they're less useful now than they were before, maybe we can delete the ones we don't re-run often and are not automatically checked by the unit tests, what do you think ?</p>\n</blockquote>\n<p>Very few of them, and I think it makes sense to aim for using polonius-parser etc instead</p>",
        "id": 181958556,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574798915
    },
    {
        "content": "<p>ok then we can clean this up later, after move errors land</p>",
        "id": 181958638,
        "sender_full_name": "lqd",
        "timestamp": 1574798994
    },
    {
        "content": "<p>Sounds good! I'd like to write something in the book and look at extending the parser as well, but I'm not sure how much time I have this week</p>",
        "id": 181958746,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574799035
    },
    {
        "content": "<p>I've been procrastinating the actual research I'm supposed to do a bit too much :(</p>",
        "id": 181958801,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574799075
    },
    {
        "content": "<p>I was about to ask/look for what you'd need in the parser ?</p>",
        "id": 181958804,
        "sender_full_name": "lqd",
        "timestamp": 1574799076
    },
    {
        "content": "<p>Basically none of the facts I added exist there yet</p>",
        "id": 181958816,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574799093
    },
    {
        "content": "<p>And I'm not sure how to handle variables in general, to be honest</p>",
        "id": 181958820,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574799103
    },
    {
        "content": "<p>Because explicitly declaring both path parent/child relations and variables seems a bit redundant</p>",
        "id": 181958872,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574799125
    },
    {
        "content": "<p>indeed</p>",
        "id": 181958888,
        "sender_full_name": "lqd",
        "timestamp": 1574799151
    },
    {
        "content": "<p>the liveness facts would need to be added as well, right ? not just the initialization ones ?</p>",
        "id": 181958908,
        "sender_full_name": "lqd",
        "timestamp": 1574799180
    },
    {
        "content": "<p>ah no, some are already there</p>",
        "id": 181959141,
        "sender_full_name": "lqd",
        "timestamp": 1574799326
    },
    {
        "content": "<p>Yes, but I think they are incomplete</p>",
        "id": 181959413,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574799465
    },
    {
        "content": "<p>I'd have to do an inventory :)</p>",
        "id": 181959417,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574799469
    },
    {
        "content": "<p>But I think I know enough to write the rules without any greater problems</p>",
        "id": 181959479,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574799489
    },
    {
        "content": "<p>I just don't have time right now</p>",
        "id": 181959515,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574799495
    },
    {
        "content": "<p>to write the initialization/move errors rules you mean ?</p>",
        "id": 181959610,
        "sender_full_name": "lqd",
        "timestamp": 1574799566
    },
    {
        "content": "<p>or something related to the parser and unit tests</p>",
        "id": 181959633,
        "sender_full_name": "lqd",
        "timestamp": 1574799586
    },
    {
        "content": "<p>Both :)</p>",
        "id": 181959718,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574799630
    },
    {
        "content": "<p>But yes, the parser, and the unit tests</p>",
        "id": 181959724,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574799638
    },
    {
        "content": "<p>As in \"the last bits of work to do on initialisation\"</p>",
        "id": 181959741,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574799661
    },
    {
        "content": "<p>if you already have in mind how they're supposed to work, and have the time to leave a couple notes somewhere, I can look at it if it would help</p>",
        "id": 181959812,
        "sender_full_name": "lqd",
        "timestamp": 1574799709
    },
    {
        "content": "<p>Sure! I'll see if I can describe it in the PR sometime tomorrow</p>",
        "id": 181959937,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574799788
    },
    {
        "content": "<p>No wait, no time like the present</p>",
        "id": 181959950,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574799798
    },
    {
        "content": "<p>alright :)</p>",
        "id": 181959985,
        "sender_full_name": "lqd",
        "timestamp": 1574799838
    },
    {
        "content": "<p>I'll have a little unexpected time since what I was planning on doing apparently needs to wait for niko to be back, so I can look at this parser thing for the initialization facts earlier than I thought</p>",
        "id": 181960090,
        "sender_full_name": "lqd",
        "timestamp": 1574799901
    },
    {
        "content": "<p>Ah!</p>",
        "id": 181961554,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574801016
    },
    {
        "content": "<p>Ok, it's here: <a href=\"https://github.com/rust-lang/polonius/pull/135#issuecomment-558809090\" target=\"_blank\" title=\"https://github.com/rust-lang/polonius/pull/135#issuecomment-558809090\">https://github.com/rust-lang/polonius/pull/135#issuecomment-558809090</a></p>",
        "id": 181961561,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574801020
    },
    {
        "content": "<p>I wrote some discussion of what I think should be done as well</p>",
        "id": 181961568,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574801035
    },
    {
        "content": "<p>Because I'm not clear how \"bare bones\" the input should be, and I think it makes a lot of sense to do some abstracting</p>",
        "id": 181961825,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574801063
    },
    {
        "content": "<p>sweet, thank you :)</p>",
        "id": 181962328,
        "sender_full_name": "lqd",
        "timestamp": 1574801340
    },
    {
        "content": "<p>Hey, you're the one who just volunteered to do my work for me <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span>️</p>",
        "id": 181963458,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574802068
    },
    {
        "content": "<p>ofc whatever we do here will be less validating than rustc's tests, so integrating init/move errors  will be the most important :)</p>",
        "id": 181967917,
        "sender_full_name": "lqd",
        "timestamp": 1574805314
    }
]