[
    {
        "content": "<p>Ok, so how does the versioning for polonius-engine work; the one with the Hybrid engine becomes 0.6.3? Also, should I do the version increment as part of the pull request or is there some other standard way of doing that? I realise I am asking for the mentoring instructions task early :)</p>",
        "id": 160863682,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1552646640
    },
    {
        "content": "<p>Also, is there any particular reason why we aren't using Criterion for benchmarking? It seems incredibly cool to me, and I really like the repeated benchmarks to ensure that the changes are statistically significant</p>",
        "id": 160863782,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1552646719
    },
    {
        "content": "<p>Can <em>I</em> even Cargo publish new versions? I assume one needs some sort of special powers for that?</p>",
        "id": 160863972,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1552646907
    },
    {
        "content": "<blockquote>\n<p>Ok, so how does the versioning for polonius-engine work; the one with the Hybrid engine becomes 0.6.3? Also, should I do the version increment as part of the pull request or is there some other standard way of doing that? I realise I am asking for the mentoring instructions task early :)</p>\n</blockquote>\n<p>Yeah, I guess this would be 0.6.3 -- technically, I suppose, extending a public enum is a breaking change though so we could make it 0.70</p>",
        "id": 160872713,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552655413
    },
    {
        "content": "<blockquote>\n<p>Also, is there any particular reason why we aren't using Criterion for benchmarking? It seems incredibly cool to me, and I really like the repeated benchmarks to ensure that the changes are statistically significant</p>\n</blockquote>\n<p>not really, except that generated random data that is meaningful to polonius is non-trivial</p>",
        "id": 160872736,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552655443
    },
    {
        "content": "<p>I'm not super familiar with criterion, so maybe I'm saying something confused</p>",
        "id": 160872743,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552655451
    },
    {
        "content": "<p>In the datafrog repository I did setup some kind of testing at least that was using quickcheck or some variant thereof</p>",
        "id": 160872778,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552655480
    },
    {
        "content": "<p>that might be a place we could do benchmarking too</p>",
        "id": 160872788,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552655486
    },
    {
        "content": "<p>Ah, but Criterion is for benchmarking, not for generating test input, apparently it replaces the built-in benchmarking and does some sort of statistical analysis on repeat experiments</p>",
        "id": 160884610,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1552663336
    },
    {
        "content": "<p>I think it also has facilities for comparing changes in performance between versions somehow but I haven't at all looked into that</p>",
        "id": 160884705,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1552663409
    },
    {
        "content": "<blockquote>\n<p>extending a public enum is a breaking change</p>\n</blockquote>\n<p>Sounds like you could add the hidden non-exhaustive enum variant to prevent another major version bump in the future</p>",
        "id": 160955496,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1552749821
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>add the hidden non-exhaustive enum variant to prevent another major version bump in the future</p>\n</blockquote>\n</blockquote>\n<p>I am not sure what this means; do you mean to use two enums?</p>",
        "id": 161042850,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1552902081
    },
    {
        "content": "<p>Also, does anyone know what the next step is for this? I have made the changes to rustc that <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> suggested, but I don't know how to go about version-bumping Polonius (modulo the changes <span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> suggested).</p>",
        "id": 161043199,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1552902445
    },
    {
        "content": "<p>Something like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">enum</span> <span class=\"nc\">PoloniusAlgo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Slow</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Fast</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ReallyFast</span><span class=\"p\">,</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"cp\">#[doc(hidden)]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">__NonExhaustive</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>For more context, see <a href=\"https://rust-lang.github.io/rfcs/2008-non-exhaustive.html\" target=\"_blank\" title=\"https://rust-lang.github.io/rfcs/2008-non-exhaustive.html\">RFC 2008</a></p>",
        "id": 161056748,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1552915595
    },
    {
        "content": "<p>TL;DR: by hiding one variant, it's hard (but not impossible) to match on all of the variants, forcing consumers to have a catch-all variant. Without that last variant, people could write</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">algo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Slow</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Fast</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ReallyFast</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>And then adding a new variant would cause their code to fail to compile.</p>",
        "id": 161056949,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1552915743
    },
    {
        "content": "<p>instead, with the hidden variant, they are \"forced\" to write</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">algo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Slow</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Fast</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ReallyFast</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>Then adding a new variant will fall into the last arm</p>",
        "id": 161057239,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1552915957
    },
    {
        "content": "<p>There's reasons that both are good â€” maybe you <em>do</em> want to force people to address the new variant when its added</p>",
        "id": 161057291,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1552916020
    },
    {
        "content": "<p>And bumping a semver-incompatible versions isn't really a big inconvenience.</p>",
        "id": 161057349,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1552916044
    },
    {
        "content": "<p>Ah, ok. I didn't know about hidden variants, thanks for explaining!</p>",
        "id": 161057562,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1552916219
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> ok I've merged <a href=\"https://github.com/rust-lang-nursery/polonius/issues/102\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/issues/102\">polonius#102</a> (your PR). The next steps for integrating into rustc would be the following:</p>\n<p>1. First, we have to release a new version of polonius-engine<br>\n  - typically, I do this by creating a PR that bumps the <code>version = \"XXX\"</code> numbers in the relevant Cargo.toml files -- maybe you want to create this PR?<br>\n  - then I can run cargo publish<br>\n2. Then, we have to open a PR against <em>rustc</em> that changes the Cargo.toml file to use this newer version and updates the source</p>",
        "id": 161156660,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553006653
    },
    {
        "content": "<p>1. Done: <a href=\"https://github.com/rust-lang/polonius/pull/103\" target=\"_blank\" title=\"https://github.com/rust-lang/polonius/pull/103\">https://github.com/rust-lang/polonius/pull/103</a><br>\n2. Queued up and waiting for publish!</p>",
        "id": 161163557,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1553011402
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> <a href=\"https://github.com/rust-lang/polonius/pull/103#pullrequestreview-216933775\" target=\"_blank\" title=\"https://github.com/rust-lang/polonius/pull/103#pullrequestreview-216933775\">left a review here</a></p>",
        "id": 161282418,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553109840
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"204115\">Albin Stjerna</span> <a href=\"https://github.com/rust-lang/polonius/pull/103#pullrequestreview-216933775\" target=\"_blank\" title=\"https://github.com/rust-lang/polonius/pull/103#pullrequestreview-216933775\">left a review here</a></p>\n</blockquote>\n<p>Thanks, addressed and pushed!</p>",
        "id": 161284112,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1553111136
    }
]