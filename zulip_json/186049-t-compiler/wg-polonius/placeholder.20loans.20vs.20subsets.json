[
    {
        "content": "<p>this is mostly an implementation detail in my mind</p>",
        "id": 205801916,
        "sender_full_name": "lqd",
        "timestamp": 1596465729
    },
    {
        "content": "<p>I agree but it's worth trying to settle it</p>",
        "id": 205801947,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596465754
    },
    {
        "content": "<p>I'd also be curious to hear from <span class=\"user-mention\" data-user-id=\"127262\">@Aaron Weiss</span> a bit more about the oxide side of things, but maybe he's not able to communicate much at present</p>",
        "id": 205801981,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596465773
    },
    {
        "content": "<p>oh of course it's worth doing so, I didn't mean to imply the opposite sorry</p>",
        "id": 205802061,
        "sender_full_name": "lqd",
        "timestamp": 1596465822
    },
    {
        "content": "<p>So, if I recall correctly, this is ultimately a question of how to address relationships between quantified provenances/lifetimes, right?</p>",
        "id": 205804182,
        "sender_full_name": "Aaron Weiss",
        "timestamp": 1596466807
    },
    {
        "content": "<p>Or well, between the local kind and the quantified kind.</p>",
        "id": 205804539,
        "sender_full_name": "Aaron Weiss",
        "timestamp": 1596466933
    },
    {
        "content": "<p>If so, I think we probably have deviated somewhat from Polonius in this area, but what we do is closer to subsets. In particular, we don’t associate any sets directly with quantified provenances, and we relate local and qualified provenances only when the former’s loan sets consist of reborrows from qualified provenances that outlive the qualified provenance in question.</p>",
        "id": 205804948,
        "sender_full_name": "Aaron Weiss",
        "timestamp": 1596467088
    },
    {
        "content": "<p>right</p>",
        "id": 205804969,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596467098
    },
    {
        "content": "<p>in my original formulation <a href=\"http://smallcultfollowing.com/babysteps/blog/2019/01/17/polonius-and-region-errors/\">I wrote in this blog post</a>, we basically looked at the set of \"required subset relations\" between origins/regions and reported errors if those exceeded what the where clause permitted</p>",
        "id": 205805110,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596467151
    },
    {
        "content": "<p>but then we switched to having \"placeholder loans\"</p>",
        "id": 205805172,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596467163
    },
    {
        "content": "<p>it's very, very similar, it's maybe a bit messier, but it has the advantage that you can always replace an origin with a set of loans</p>",
        "id": 205805210,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596467181
    },
    {
        "content": "<p>I think \"provenance = origin\"</p>",
        "id": 205805253,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596467200
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>subset_error(R1, R2, P) :-\n  subset(R1, R2, P),      // `R1: R2` required at `P`\n  placeholder_region(R1), // `R1` is a placeholder\n  placeholder_region(R2), // `R2` is also a placeholder\n  !known_subset(R1, R2).  // `R1: R2` is not a &quot;known subset&quot; relation.\n</code></pre></div>",
        "id": 205805330,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596467229
    },
    {
        "content": "<p>that's from the blog post, it was kind of the key rule</p>",
        "id": 205805339,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596467236
    },
    {
        "content": "<p>I guess I'm open to either formulation, I did like being able to replace origins with \"sets of loans\" entirely</p>",
        "id": 205805431,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596467278
    },
    {
        "content": "<p>but I think it's mostly a conceptual thing</p>",
        "id": 205805484,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596467293
    },
    {
        "content": "<p>still it made it more obviously equivalent to some of the formalisms I've seen proposd</p>",
        "id": 205805516,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596467308
    },
    {
        "content": "<p>Yeah, so I think that what we’re doing is more or less looking at the required subset relations. In our setting, it’s a subtyping-style constraint, but checking the relation on a local and qualified provenance has us basically drudge up whatever qualified provenances the local one was reborrowed from (using loans that contain a dereference which I’ve been calling “reborrow loans”) and check that the relation holds from the where bounds.</p>",
        "id": 205806089,
        "sender_full_name": "Aaron Weiss",
        "timestamp": 1596467618
    },
    {
        "content": "<p>I don’t know that we really had a good reason for doing one or the other except that the path through the design space I took ended up with these reborrow loans and this style of solution seemed most apparent to me at the time. Maybe just because of distance from when we discussed placeholders.</p>",
        "id": 205806327,
        "sender_full_name": "Aaron Weiss",
        "timestamp": 1596467687
    },
    {
        "content": "<p>I do think the idea of being able to replace origins with sets of loans is a nice one because it gives a clear sense of what an origin “means.”</p>",
        "id": 205806800,
        "sender_full_name": "Aaron Weiss",
        "timestamp": 1596467862
    },
    {
        "content": "<p>Right</p>",
        "id": 205807177,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596468026
    },
    {
        "content": "<p>That was my main concern, that otherwise it was like \"an origin is a set of loans, but also it has an identity of its own\"</p>",
        "id": 205807207,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596468041
    },
    {
        "content": "<p><em>that said</em></p>",
        "id": 205807239,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596468060
    },
    {
        "content": "<p>Yeah, that’s more-or-less what they are in Oxide right now. The identity matters for at least a few pieces of our system.</p>",
        "id": 205807268,
        "sender_full_name": "Aaron Weiss",
        "timestamp": 1596468079
    },
    {
        "content": "<p>origins always have something of a persistent identity</p>",
        "id": 205807270,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596468082
    },
    {
        "content": "<p>i.e., in today's formulation, we track the subsets which must hold between origins -- and those \"flow forward\" and must be maintained in later bits of the CFG</p>",
        "id": 205807312,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596468107
    },
    {
        "content": "<p>in the equality variant, the same is true, but just less commonly</p>",
        "id": 205807320,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596468116
    },
    {
        "content": "<p>so it's not like you could ever <em>truly</em> erase the origins I guess</p>",
        "id": 205807374,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596468129
    },
    {
        "content": "<p>In the sense that you need to know which ones flow forward and which ones don’t?</p>",
        "id": 205807407,
        "sender_full_name": "Aaron Weiss",
        "timestamp": 1596468154
    },
    {
        "content": "<p>my memory of oxide is dated</p>",
        "id": 205807427,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596468166
    },
    {
        "content": "<p>but what I remember from there was that</p>",
        "id": 205807436,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596468170
    },
    {
        "content": "<p>in invariant contexts, you would have to have <em>the same origin</em> in the type</p>",
        "id": 205807451,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596468180
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127262\">Aaron Weiss</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/placeholder.20loans.20vs.20subsets/near/205807407\">said</a>:</p>\n<blockquote>\n<p>In the sense that you need to know which ones flow forward and which ones don’t?</p>\n</blockquote>\n<p>right in the sense that you have to remember which origins must remain equal to one another because they got \"entangled\" b some previous bit of code</p>",
        "id": 205807541,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596468219
    },
    {
        "content": "<p>this is basically our way of encoding the flow-sensitive type system..</p>",
        "id": 205807620,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596468254
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/polonius/issues/107\">examples and some related discussion</a></p>",
        "id": 205807638,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596468264
    },
    {
        "content": "<p>this is the key example</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">v</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;&amp;</span><span class=\"na\">&#39;v</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[];</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">p</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;&amp;</span><span class=\"na\">&#39;p</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">.);</span><span class=\"w\"> </span><span class=\"c1\">// any changes to &#39;p here *should* affect &#39;v</span>\n</code></pre></div>",
        "id": 205807658,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596468275
    },
    {
        "content": "<p>here, <code>'v</code> and <code>'p</code> are not independent</p>",
        "id": 205807678,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596468285
    },
    {
        "content": "<p>my recollection is that oxide would've required that the user write <code>'v</code> in <code>p</code></p>",
        "id": 205807717,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596468298
    },
    {
        "content": "<p>re: invariant contexts, If that wasn’t true in the past, it’s true now because we actually have an ordering on our environments and we require provenances to occur earlier in the environment in order to outlive another. So, invariance would require that to be true in both directions meaning it would have to be exactly the same.</p>",
        "id": 205807743,
        "sender_full_name": "Aaron Weiss",
        "timestamp": 1596468317
    },
    {
        "content": "<p>(and indeed we formulated a variant like that, but then found that it was too flow insensitive to accept <a href=\"https://github.com/rust-lang/polonius/issues/107#issuecomment-499427026\">this example</a>)</p>",
        "id": 205807744,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596468319
    },
    {
        "content": "<p>So, what you’re doing is essentially allowing them the different names, but recording that ‘v and ‘p are equal?</p>",
        "id": 205808112,
        "sender_full_name": "Aaron Weiss",
        "timestamp": 1596468520
    },
    {
        "content": "<p>correct</p>",
        "id": 205808278,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596468596
    },
    {
        "content": "<p>the interesting part about <em>that</em> is that this equality can be flow-sensitive</p>",
        "id": 205808373,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596468629
    },
    {
        "content": "<p>(the same is true in our code today, except that we are not recording <em>equality</em> but <code>p &lt;= q</code> relations)</p>",
        "id": 205808413,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596468654
    },
    {
        "content": "<p>I think Oxide in its current form would reject the example you just linked for essentially the same reason the flow-insensitive equality would.</p>",
        "id": 205808949,
        "sender_full_name": "Aaron Weiss",
        "timestamp": 1596468899
    },
    {
        "content": "<p>The fact that the identity of origins does matter then makes the argument for placeholder loans less compelling to me personally.</p>",
        "id": 205809312,
        "sender_full_name": "Aaron Weiss",
        "timestamp": 1596469071
    },
    {
        "content": "<p>Since it does really mean that an origin is always a set of loans with a unique identity plus context-dependent constraints on the relationship between those identities.</p>",
        "id": 205809454,
        "sender_full_name": "Aaron Weiss",
        "timestamp": 1596469130
    },
    {
        "content": "<p>(I myself was mostly assuming the theoretical aspect would be relatively similar between the 2 but didn't think about the impact on the Equality variant or invariance; on the operational side, placeholder loans mesh well with location insensitivity, but not with trying to limit the propagation of subsets; I like the neatness of the model using placeholder loans, and origins as set of loans, but at the same time I see loan propagation as just materializing the fact that two origins were once reachable via space/subsets and time/cfg -- and hoped we could sometimes avoid materializing them altogether)</p>",
        "id": 205809736,
        "sender_full_name": "lqd",
        "timestamp": 1596469260
    },
    {
        "content": "<p>ack, I think I have the other topics in this stream not visible</p>",
        "id": 205813311,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596470995
    },
    {
        "content": "<p>so I think I persuaded myself that we don't need to do everything via placeholders</p>",
        "id": 205813395,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596471025
    },
    {
        "content": "<p>for the reason that we <em>still</em> can't just replace origins with sets of loans</p>",
        "id": 205813406,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596471034
    },
    {
        "content": "<p>so really you can't think of the polonius rules that way, or at least, it's a non-trivial change to achieve it</p>",
        "id": 205813459,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596471073
    },
    {
        "content": "<p>should we <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> adjust the hackmd rules to match and try to make polonius match then?</p>",
        "id": 205814084,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596471379
    },
    {
        "content": "<p>modify the rules to compute subset errors via rules about subsets ?</p>",
        "id": 205814339,
        "sender_full_name": "lqd",
        "timestamp": 1596471523
    },
    {
        "content": "<p>yeah I mean it's a pretty small modification I guess</p>",
        "id": 205814625,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596471687
    },
    {
        "content": "<p>I'll start gathering those</p>",
        "id": 205814632,
        "sender_full_name": "lqd",
        "timestamp": 1596471689
    },
    {
        "content": "<p>I'll do it</p>",
        "id": 205814650,
        "sender_full_name": "lqd",
        "timestamp": 1596471700
    },
    {
        "content": "<p>so you can focus on more important things</p>",
        "id": 205814681,
        "sender_full_name": "lqd",
        "timestamp": 1596471721
    },
    {
        "content": "<p>I guess I could also add the location-insensitive rules to the hackmd at the same time (as it can still use placeholder loans very naturally anyways)</p>",
        "id": 205815027,
        "sender_full_name": "lqd",
        "timestamp": 1596471885
    },
    {
        "content": "<p>which rules do you mean?</p>",
        "id": 205815445,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596472118
    },
    {
        "content": "<p>but that sounds useful</p>",
        "id": 205815467,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596472132
    },
    {
        "content": "<p>the simple rules used by the location-insensitive analysis</p>",
        "id": 205815500,
        "sender_full_name": "lqd",
        "timestamp": 1596472148
    },
    {
        "content": "<p>how do they rely on placeholder loans?</p>",
        "id": 205815645,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596472213
    },
    {
        "content": "<p>they don't yet, but in order to still have a fast pre-pass we can \"potential subset errors\" to the location-insensitive analysis</p>",
        "id": 205815716,
        "sender_full_name": "lqd",
        "timestamp": 1596472255
    },
    {
        "content": "<p>(it probably wouldn't be complicated to add the subset-errors via subset rules, but for placeholder loans I think it was literally a single character change)</p>",
        "id": 205816047,
        "sender_full_name": "lqd",
        "timestamp": 1596472427
    },
    {
        "content": "<p>right, so, the location insensitive analysis computes <code>SUBSET(OriginA, OriginB)</code> across the whole CFG, right?</p>",
        "id": 205816051,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596472430
    },
    {
        "content": "<p>so presumably we could determine whether any placeholders wind up that set?</p>",
        "id": 205816119,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596472448
    },
    {
        "content": "<p>er, I mean, whether any \"placeholder origins\" wind up in that set</p>",
        "id": 205816140,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596472460
    },
    {
        "content": "<p>I guess it's not clear how that would help us maybe</p>",
        "id": 205816165,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596472475
    },
    {
        "content": "<p>yes that's what the the analysis does and indeed just checking whether a placeholder loan ends up in there was easy</p>",
        "id": 205816566,
        "sender_full_name": "lqd",
        "timestamp": 1596472663
    },
    {
        "content": "<p>I guess though that if we adopt the \"subset relation\" approach to reporting errors, well, I suppose it can still be useful</p>",
        "id": 205816763,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596472743
    },
    {
        "content": "<p>I was thinking that it wouldn't obviously help in allowing us to avoid computation but</p>",
        "id": 205816782,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596472752
    },
    {
        "content": "<p>it doesn't help us that much more than the regular subset-rules subset errors but it mapped naturally to this existing relation, compared to having more relations; it was mostly cute that a single character was enough to make the placeholder loan computation location-insensitive</p>",
        "id": 205816814,
        "sender_full_name": "lqd",
        "timestamp": 1596472770
    },
    {
        "content": "<p>at least the <code>subset_error</code> can only iterate over placeholder origins that may be involved in errors</p>",
        "id": 205816825,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596472777
    },
    {
        "content": "<p>(also the <code>outlives_everywhere</code> idea to fix the OOM mapped naturally to the location-insensitive analysis)</p>",
        "id": 205817016,
        "sender_full_name": "lqd",
        "timestamp": 1596472849
    },
    {
        "content": "<p>my recollection is that these potential loan errors and potential subset errors do allow for a lot of filtering in the regular location-sensitive analyses</p>",
        "id": 205817108,
        "sender_full_name": "lqd",
        "timestamp": 1596472906
    },
    {
        "content": "<p>the real win would be if we can compute fewer subset relations</p>",
        "id": 205821567,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596475061
    },
    {
        "content": "<p>(at least in this specific case)</p>",
        "id": 205821576,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596475070
    },
    {
        "content": "<p>that's also interesting as splitting subset errors from placeholder loans can allow to filter the data independently with the results of the pre-pass</p>",
        "id": 205828605,
        "sender_full_name": "lqd",
        "timestamp": 1596478733
    },
    {
        "content": "<p>I recall that when we heavily filtered the outlives relation to remove all the subsets which couldn't easily reach an error, it had quite an impact on clap, and that's the kind of things we can't easily do when both are intertwined</p>",
        "id": 205829076,
        "sender_full_name": "lqd",
        "timestamp": 1596478938
    }
]