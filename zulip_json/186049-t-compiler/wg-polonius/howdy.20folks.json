[
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 249871443,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629302355
    },
    {
        "content": "<p>I'm back from 2 weeks vacation and curious to hear what follow-up work happened after sprint</p>",
        "id": 249871491,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629302379
    },
    {
        "content": "<p>I've done the following:</p>\n<ul>\n<li>Wrote a <a href=\"https://github.com/rust-lang/polonius/issues/172#issuecomment-890112849\">summary of the HRTB discussion</a><br>\n    - as you can tell from the notes, I'm still having some trouble adapting to the \"universes\" mental model. I'm trying to remind myself that you have like a 5 year head start, but I think I'm going to need to buckle down and work through some examples involving HRTBS.</li>\n<li>Reviewed the outstanding datafrog PRs from <span class=\"user-mention silent\" data-user-id=\"320917\">regexident</span>. I merged their first cleanup PR, but their substantive one is <a href=\"https://github.com/rust-lang/datafrog/pull/34#discussion_r682956287\">too big of a footgun</a>. I opened <a href=\"https://github.com/rust-lang/datafrog/issues/38\">rust-lang/datafrog#38</a>, which would be a better project for a new contributor.</li>\n<li>opened <a href=\"https://github.com/rust-lang/datafrog/issues/35\">rust-lang/datafrog#35</a>, a really big speedup for leapjoin that is easy to prove correct.</li>\n<li>opened <a href=\"https://github.com/rust-lang/datafrog/issues/36\">rust-lang/datafrog#36</a> and <a href=\"https://github.com/rust-lang/datafrog/issues/37\">rust-lang/datafrog#37</a>, small additions to the datafrog API that reduce the amount of boilerplate in Polonius.</li>\n<li>Started a Souffle backend for Polonius (about 3/4 done now), that will give us more confidence that our <code>datafrog</code> code correctly computes the equivalent datalog program and allow us to iterate faster.</li>\n</ul>",
        "id": 249873978,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1629303477
    },
    {
        "content": "<p>I also had some discussions with <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> about the optimized variant. One was in <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/TC.20.3A-.20TC.2C.20TC\">https://rust-lang.zulipchat.com/#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/TC.20.3A-.20TC.2C.20TC</a>, about whether we can avoid doing <code>subset(...) :- subset(...), subset(...)</code>, which is slow. I think the conclusion was that we could if we were only computing <code>loan_errors</code>, but <code>subset_errors</code> complicate things.</p>",
        "id": 249874672,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1629303805
    },
    {
        "content": "<p>I opened <a href=\"https://github.com/rust-lang/polonius/issues/175\">rust-lang/polonius#175</a> to track progress on creating documentation  for the optimized variant as it exists today.</p>",
        "id": 249875009,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1629303952
    },
    {
        "content": "<blockquote>\n<p>soufflé backend</p>\n</blockquote>\n<p><span aria-label=\"heart eyes\" class=\"emoji emoji-1f60d\" role=\"img\" title=\"heart eyes\">:heart_eyes:</span></p>",
        "id": 249889926,
        "sender_full_name": "lqd",
        "timestamp": 1629310315
    },
    {
        "content": "<p>I myself have done </p>\n<ul>\n<li>the necessary work to test rustc with master polonius to make a release and switch rustc to the Hybrid variant back</li>\n<li>and then made that polonius release</li>\n<li>and then opened the rustc PR to update to that release -- all of this you of course already know Niko since you r+'ed this already ^^. </li>\n<li>I looked at <a href=\"https://github.com/rust-lang-nursery/polonius/issues/176\">polonius#176</a> about the subset TC (but it's still not super easy to fix this inefficiency). </li>\n<li>Updating rustc UI tests made me compile this list of tests that challenge our current prototype for various reasons which I describe in <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Challenges.20for.20move.2Finit.2C.20liveness.2C.20and.20.60Location.3A.3AAll.60\">this thread</a></li>\n<li>Reviewed the many issues and PRs from Dylan; (and tried to explain and transfer a few things there that were mostly folklore in my head into Dylan's head via github comments <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span> )</li>\n<li>Continued work on sharing the location-insensitive results in the location-sensitive analyses</li>\n</ul>\n<p>a few other tiny things I forget (like trying to crystalize the dada ideas into implementable rules)</p>\n<p>I have not done: the inside rust blog post I promised I'd have ready by the time you'd be back</p>",
        "id": 249891607,
        "sender_full_name": "lqd",
        "timestamp": 1629311066
    },
    {
        "content": "<p>The Soufflé backend really sounds interesting! Is there something one could look at already <span class=\"user-mention\" data-user-id=\"118594\">@Dylan MacKenzie (ecstatic-morse)</span>, or does that have to wait until 4/4 are finished?</p>",
        "id": 249914374,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1629322144
    },
    {
        "content": "<p>As for me, after I needed all of the sprint time (and then some) to get to a lexer/parser combination that is an actual improvement in both debug and release, I spent some more time cleaning up and adding documentation. In particular, <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> suggested that I add some info about the necessary steps for maintaining the parser if the input facts are modified. All of this is <a href=\"https://github.com/rust-lang/polonius/pull/173\">https://github.com/rust-lang/polonius/pull/173</a>.</p>",
        "id": 249914758,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1629322408
    },
    {
        "content": "<p>After that, I mostly came back to the sprint threads and tried to understand the discussions you had (and their results) <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 249914886,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1629322480
    },
    {
        "content": "<p>The speed at which all of your conversations happened at the same time definitely went over my head while we were \"live\"</p>",
        "id": 249915054,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1629322575
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"337115\">@Domenic Quirl</span> 3/4 of the way to a very rough prototype. All the FFI and fact loading/unloading is done. I just have to expose it from the front-end. It's really more like 11/16 there, but I'm an optimist at heart</p>",
        "id": 249916020,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1629323241
    },
    {
        "content": "<p>We gonna do our sprint this friday?</p>",
        "id": 250392882,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629743678
    },
    {
        "content": "<p>I have to read this topic lol</p>",
        "id": 250392891,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629743683
    },
    {
        "content": "<p>What I've been doing may seem different but is related</p>",
        "id": 250392985,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629743731
    },
    {
        "content": "<p>I've been poking on an alternate borrowing system...</p>",
        "id": 250393020,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629743748
    },
    {
        "content": "<p>...which suggests a different formulation of polonius that may be profitable</p>",
        "id": 250393035,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629743758
    },
    {
        "content": "<p>I should maybe try to do some sort of write-up before friday</p>",
        "id": 250393093,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629743769
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/howdy.20folks/near/250392882\">said</a>:</p>\n<blockquote>\n<p>We gonna do our sprint this friday?</p>\n</blockquote>\n<p>yes !</p>",
        "id": 250393619,
        "sender_full_name": "lqd",
        "timestamp": 1629744019
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/howdy.20folks/near/250393035\">said</a>:</p>\n<blockquote>\n<p>...which suggests a different formulation of polonius that may be profitable</p>\n</blockquote>\n<p>we already have enough of the information we need in the current facts, right ?</p>",
        "id": 250393696,
        "sender_full_name": "lqd",
        "timestamp": 1629744061
    },
    {
        "content": "<p>(e.g. I would imagine here that it would be being able to validate/invalidate subsets themselves ?)</p>",
        "id": 250393788,
        "sender_full_name": "lqd",
        "timestamp": 1629744115
    },
    {
        "content": "<p>Yes, for a straight-forward port, we have enough</p>",
        "id": 250394371,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629744369
    },
    {
        "content": "<p>To give some background, the basic idea is to avoid computing liveness. Whereas polonius today tracks what loans are live, and makes it an error to invalidate a loan if it is live, the idea would be to track which loans are <em>valid</em>, and make it an error to access a reference based on an invalid reference.</p>",
        "id": 250394917,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629744606
    },
    {
        "content": "<p>This makes all the computation \"forward\" (no backwards flow like we have now for liveness)</p>",
        "id": 250394942,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629744616
    },
    {
        "content": "<p>and basically just removes a big chunk of logic</p>",
        "id": 250394947,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629744621
    },
    {
        "content": "<p>seems strictly simpler to me</p>",
        "id": 250394959,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629744628
    },
    {
        "content": "<p>Is there a canonical dataflow analysis that corresponds to \"valid\" loans? There's some correspondence between use-def trees (forward) and liveness (backward) in that one computes which <strong>variables</strong> are used later and one computes which <strong>definitions of variables</strong> are used later.</p>",
        "id": 250401083,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1629747545
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span>:  <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">static</span> <span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">l</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">l</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// `x` is \"dead\" here according to liveness</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Liveness has issues in programs like this one right? I think I stole this example for the <code>Location::All</code> issue.</p>",
        "id": 250401649,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1629747837
    },
    {
        "content": "<p>(If you have a less contrived example,  please share <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> )</p>",
        "id": 250401807,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1629747908
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"118594\">Dylan MacKenzie (ecstatic-morse)</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/howdy.20folks/near/250401083\">said</a>:</p>\n<blockquote>\n<p>Is there a canonical dataflow analysis that corresponds to \"valid\" loans?</p>\n</blockquote>\n<p>the forwards validation idea reminded me most of the init/uninit dataflow analyses, but I'm not sure if this is at all correct ^^ a quick write-up would indeed be super cool for us to talk about / prototype this friday</p>",
        "id": 250402941,
        "sender_full_name": "lqd",
        "timestamp": 1629748514
    },
    {
        "content": "<p>Yeah, I'll wait for a write-up. I'm not great at synchronous design work.</p>",
        "id": 250403553,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1629748795
    },
    {
        "content": "<p>same :)</p>",
        "id": 250405779,
        "sender_full_name": "lqd",
        "timestamp": 1629749901
    },
    {
        "content": "<p>I haven't done much, but I see <a href=\"https://github.com/rust-lang/rust/issues/86977\">#86977</a> has landed now which makes my job easier. I had something come up so I can't come to the sprint tomorrow either, but I will try to hack on the visualisation tool in the spare time I had and what work time I can steal. Essentially the problem is that I have a puppy which leaves me with about half an hour of spare time each working day right now, but I still have some time on the weekends.</p>",
        "id": 250749244,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1629972329
    },
    {
        "content": "<p>Also, my internship with IMDEA is cancelled :(</p>",
        "id": 250749384,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1629972426
    },
    {
        "content": "<p>oh :(</p>",
        "id": 250775170,
        "sender_full_name": "lqd",
        "timestamp": 1629985980
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/howdy.20folks/near/250392891\">said</a>:</p>\n<blockquote>\n<p>I have to read this topic lol</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/howdy.20folks/near/250393093\">said</a>:</p>\n<blockquote>\n<p>I should maybe try to do some sort of write-up before friday</p>\n</blockquote>\n<p>coming back from vacation, and with the edition work, I suspect you didn't have the time to do these :)</p>",
        "id": 250931118,
        "sender_full_name": "lqd",
        "timestamp": 1630070840
    }
]