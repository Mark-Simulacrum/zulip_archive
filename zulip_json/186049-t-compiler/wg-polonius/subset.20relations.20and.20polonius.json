[
    {
        "content": "<p>So I had a long chat with <span class=\"user-mention\" data-user-id=\"127262\">@Aaron Weiss</span> today and I think we convinced ourselves that the polonius model needs a modest but non-trivial revision. The good news is that it becomes at once simpler and more precise.</p>",
        "id": 167212574,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559583251
    },
    {
        "content": "<p>The good news is that, in the end, we will no longer need to propagate the <code>subset</code> relation between points -- only the (transitive) <code>contains</code> relation. However, we will have to do a \"pre-pass\" that looks for cycles amongst the subset relations established at any point and performs unification. (Or this could potentially happen during type-check.)</p>",
        "id": 167212651,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559583326
    },
    {
        "content": "<p>(This will also mean <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> that we wind up wanting to create \"placeholder loans\" to handle illegal subset relations.)</p>",
        "id": 167212665,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559583348
    },
    {
        "content": "<p>oh interesting</p>",
        "id": 167212804,
        "sender_full_name": "lqd",
        "timestamp": 1559583458
    },
    {
        "content": "<p>is there any bad news ? :)</p>",
        "id": 167212883,
        "sender_full_name": "lqd",
        "timestamp": 1559583506
    },
    {
        "content": "<p>(apart from being a non-trivial piece of work, that is)</p>",
        "id": 167212926,
        "sender_full_name": "lqd",
        "timestamp": 1559583535
    },
    {
        "content": "<p>do we already have an intuition about what the increased precision buys us ?</p>",
        "id": 167212975,
        "sender_full_name": "lqd",
        "timestamp": 1559583571
    },
    {
        "content": "<p>I think it will be better overall</p>",
        "id": 167213105,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559583649
    },
    {
        "content": "<p>Here is an example where existing polonius is imprecise:</p>",
        "id": 167213116,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559583656
    },
    {
        "content": "<p>we should check that ;)</p>",
        "id": 167213139,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559583666
    },
    {
        "content": "<p>(the problems prompting this change would also be interesting to learn :)</p>",
        "id": 167213166,
        "sender_full_name": "lqd",
        "timestamp": 1559583690
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;x</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">y</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;y</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">something</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// creates `&#39;x: &#39;y` subset relation</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">something</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">z</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// creates {L0} in &#39;x constraint</span>\n<span class=\"w\">  </span><span class=\"c1\">// this point, we have `&#39;x: &#39;y` and `{L0} in `&#39;x`, so we also have `{L0} in &#39;y`</span>\n<span class=\"w\">  </span><span class=\"n\">drop</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"n\">z</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// polonius flags an (unnecessary) error</span>\n\n<span class=\"n\">drop</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>",
        "id": 167213283,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559583749
    },
    {
        "content": "<p>the problem here is that the loan L0 makes its way into <code>'y</code> but it shouldn't</p>",
        "id": 167213310,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559583773
    },
    {
        "content": "<p>I'd be happy to schedule a call and try to talk out the intuitions here -- it was helpful to discuss with <span class=\"user-mention\" data-user-id=\"127262\">@Aaron Weiss</span> and I imagine trying to explain it a few more times would be helpful too :)</p>",
        "id": 167213346,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559583809
    },
    {
        "content": "<p>which reminds me that I'm not sure if I ever posted that polonius lecture from a few days back</p>",
        "id": 167213363,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559583828
    },
    {
        "content": "<p>and by days I mean months or whatever :P</p>",
        "id": 167213369,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559583839
    },
    {
        "content": "<p>:)</p>",
        "id": 167213384,
        "sender_full_name": "lqd",
        "timestamp": 1559583844
    },
    {
        "content": "<p>I thinkI ran into problems because it had some errant notifications I had to edit out</p>",
        "id": 167213419,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559583850
    },
    {
        "content": "<p>yeah</p>",
        "id": 167213422,
        "sender_full_name": "lqd",
        "timestamp": 1559583854
    },
    {
        "content": "<p>and I never found a satisafactory way of doing that :)</p>",
        "id": 167213423,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559583856
    },
    {
        "content": "<p>despite purchasing Adobe Premiere</p>",
        "id": 167213428,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559583863
    },
    {
        "content": "<p>I don't think we posted this one yet</p>",
        "id": 167213429,
        "sender_full_name": "lqd",
        "timestamp": 1559583864
    },
    {
        "content": "<p>should just open up my mac where such stuff is easy</p>",
        "id": 167213451,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559583884
    },
    {
        "content": "<p>that's very understandable</p>",
        "id": 167213453,
        "sender_full_name": "lqd",
        "timestamp": 1559583884
    },
    {
        "content": "<p>video editing takes time, which is rare and precious :)</p>",
        "id": 167213536,
        "sender_full_name": "lqd",
        "timestamp": 1559583941
    },
    {
        "content": "<p>it's really rather painful on my surface</p>",
        "id": 167213554,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559583955
    },
    {
        "content": "<p>I'm not sure if that's windows fault, or the hardware isn't up to it, or what</p>",
        "id": 167213607,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559583964
    },
    {
        "content": "<p>a call with Albin also, discussing this could be nice indeed</p>",
        "id": 167213662,
        "sender_full_name": "lqd",
        "timestamp": 1559584002
    },
    {
        "content": "<p>(I'd need to prepare a bit, and it could be tight wrt scheduling, but definitely worthwhile)</p>",
        "id": 167213728,
        "sender_full_name": "lqd",
        "timestamp": 1559584052
    },
    {
        "content": "<p>that example is interesting</p>",
        "id": 167213759,
        "sender_full_name": "lqd",
        "timestamp": 1559584081
    },
    {
        "content": "<p>and the idea of limiting the  <code>subset</code> TC = &lt;3</p>",
        "id": 167214183,
        "sender_full_name": "lqd",
        "timestamp": 1559584338
    },
    {
        "content": "<p>the other relevant example (the one that motivated propagating subset relations in the first place) is</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">v</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;&amp;</span><span class=\"na\">&#39;v</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[];</span><span class=\"w\"></span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">p</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;&amp;</span><span class=\"na\">&#39;p</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// creates L0</span>\n<span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// adds L0 to &#39;p, needs to *indirectly* add to `&#39;v`</span>\n\n<span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// should be an error</span>\n<span class=\"n\">drop</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>",
        "id": 167214219,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559584369
    },
    {
        "content": "<p>today this works because we create <code>'v: 'p</code> and <code>'p: 'v</code> at the <code>&amp;mut v</code> point</p>",
        "id": 167214248,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559584392
    },
    {
        "content": "<p>and we propagate those forward</p>",
        "id": 167214250,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559584395
    },
    {
        "content": "<p>but the alternate we propose is to detect that cycle and basically unify <code>'v</code> and <code>'p</code> before polonius runs (or as a pre-pass in polonius, unclear)</p>",
        "id": 167214259,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559584412
    },
    {
        "content": "<p>so that the program is effectively</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">v</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;&amp;</span><span class=\"na\">&#39;v</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[];</span><span class=\"w\"></span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">p</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;&amp;</span><span class=\"na\">&#39;v</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// creates L0</span>\n<span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// adds L0 to &#39;v</span>\n\n<span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// is an error because `L0 in &#39;v` and `v` is live</span>\n<span class=\"n\">drop</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>",
        "id": 167214347,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559584448
    },
    {
        "content": "<p>(arguably a more straight-forward approach)</p>",
        "id": 167214361,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559584464
    },
    {
        "content": "<p>seems simpler indeed</p>",
        "id": 167214421,
        "sender_full_name": "lqd",
        "timestamp": 1559584514
    },
    {
        "content": "<p>it seems like it'd be potentially nice to do this in polonius, but I'm not really sure how to encode cycle detection in datafrog. I recall <span class=\"user-mention\" data-user-id=\"116609\">@Frank McSherry</span> has some examples for differential dataflow at least though.</p>",
        "id": 167214532,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559584573
    },
    {
        "content": "<p>very interesting, I'll need to look into this more for sure</p>",
        "id": 167214551,
        "sender_full_name": "lqd",
        "timestamp": 1559584595
    },
    {
        "content": "<p>(it'd be \"not terribly hard\" to do on the rust side too)</p>",
        "id": 167214579,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559584626
    },
    {
        "content": "<p>(I wonder if Frank's recent talk was recorded/publicly available)</p>",
        "id": 167214624,
        "sender_full_name": "lqd",
        "timestamp": 1559584680
    },
    {
        "content": "<p>There's still something mildly bugging me about using cycles in the subset relations to decide what has to be equal but I can't quite put my finger on it. It's just strange to me that the combination of <code>a &lt;= b</code> and <code>b &lt;= a</code> is distinct from the effect of each statement independently (in that it kind of propagates throughout the whole graph)</p>",
        "id": 167214666,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559584685
    },
    {
        "content": "<p>But I think what it boils down is that there is some <em>more precise</em> situation when you would need equality but we don't quite have the tool to capture that</p>",
        "id": 167214691,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559584711
    },
    {
        "content": "<p>and maybe it doesn't matter in practice</p>",
        "id": 167214703,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559584722
    },
    {
        "content": "<p>I haven't come up with a good example where it would</p>",
        "id": 167214707,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559584726
    },
    {
        "content": "<blockquote>\n<p>(I wonder if Frank's recent talk was recorded/publicly available)</p>\n</blockquote>\n<p>I was talking to Frank about giving a talk over Zoom at some point (a \"rustc lecture series\" sort of talk)</p>",
        "id": 167214751,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559584756
    },
    {
        "content": "<p>but we never decided on a date or topic I think :)</p>",
        "id": 167214758,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559584762
    },
    {
        "content": "<p>I HAVE BEEN SUMMONED!</p>",
        "id": 167214772,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1559584784
    },
    {
        "content": "<blockquote>\n<p>I haven't come up with a good example where it would</p>\n</blockquote>\n<p>it's also a bit harder for me to think about these in the abstract, coming up with examples in these subtle edge cases</p>",
        "id": 167214843,
        "sender_full_name": "lqd",
        "timestamp": 1559584810
    },
    {
        "content": "<p>What do you need to do with cycle detection, now? Like, strongly connected components, or something simpler?</p>",
        "id": 167214852,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1559584824
    },
    {
        "content": "<blockquote>\n<p>nikomatsakis: but we never decided on a date or topic I think :)</p>\n</blockquote>\n<p>I did a meet-up on Rust and Datalog just recently, kind of as a warm up to this. I've been thinking about it, but also not 100% sure I grok what would be most interesting and useful.</p>",
        "id": 167215029,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1559584966
    },
    {
        "content": "<blockquote>\n<p>What do you need to do with cycle detection, now? Like, strongly connected components, or something simpler?</p>\n</blockquote>\n<p>SCC -- we have these \"subset\" relations like <code>a &lt;= b</code> and we would need to detect cases where, at some point P, there is a <code>a &lt;= b</code> and <code>b &lt;= a</code> and then \"unify\" a and b at all other points</p>",
        "id": 167215232,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559585140
    },
    {
        "content": "<p>(as I wrote above, though, it's not clear this should be done in polonius)</p>",
        "id": 167215263,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559585162
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116609\">@Frank McSherry</span> I can try to write up some pseduo-rules to better communicate what I mean, but in short I want to do a series of SCC computations and compute equality classes (\"unification\"-like)</p>",
        "id": 167215480,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559585297
    },
    {
        "content": "<p>maybe too short</p>",
        "id": 167215483,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559585300
    },
    {
        "content": "<p>To just throw out some information: cycle <em>detection</em> is pretty easy in differential dataflow, and probably also in datalog (maybe?). However, this is just the problem of detecting if there is a cycle, which can be less than what you might want.</p>\n<p>What you <em>might</em> want is the strongly connected component decomposition, which assigns to each node an identifier such that nodes with the same identifier have the same transitive reachability information. Everyone in a cycle would get the same identifier, but you could have a graph with multiple cycles each of which shouldn't get the same identifiers. Because graphs may not be symmetric, you might have some cycles that can reach other cycles, but not vice-versa, and that needs to be accurately reflected.</p>",
        "id": 167215695,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1559585438
    },
    {
        "content": "<p>we definitely more than just knowing <em>if</em> there is a cycle, we want to be able to say what the members are of each cycle</p>",
        "id": 167215744,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559585481
    },
    {
        "content": "<p>that said, the graphs are probably very small</p>",
        "id": 167215761,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559585505
    },
    {
        "content": "<p>so it occurs to me that something naive, like computing reachability, might suffice</p>",
        "id": 167215770,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559585520
    },
    {
        "content": "<p>though I would need some way to get a \"representative\"</p>",
        "id": 167215824,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559585533
    },
    {
        "content": "<p>I can sort of imagine how to do this, I guess...</p>",
        "id": 167215852,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559585560
    },
    {
        "content": "<p>I'll try to toy with something later on maybe</p>",
        "id": 167215863,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559585577
    },
    {
        "content": "<p>So, SCC computation is a packaged program in differential dataflow (<a href=\"https://github.com/TimelyDataflow/differential-dataflow/blob/master/src/algorithms/graphs/scc.rs\" target=\"_blank\" title=\"https://github.com/TimelyDataflow/differential-dataflow/blob/master/src/algorithms/graphs/scc.rs\">https://github.com/TimelyDataflow/differential-dataflow/blob/master/src/algorithms/graphs/scc.rs</a>) which .. it could use some love to make it a bit easier to grok the input and output ... but.</p>",
        "id": 167215922,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1559585627
    },
    {
        "content": "<blockquote>\n<p>nikomatsakis: though I would need some way to get a \"representative\"</p>\n</blockquote>\n<p>What the SCC code in DD looks like is: you show up with a graph with node identifiers, and edges between identifiers. It then does a bunch of computational magic and comes back with a collection of pairs <code>(Node, Node)</code> where each node exists in the first position, and has the smallest node identifier in its SCC in the second position.</p>",
        "id": 167216054,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1559585717
    },
    {
        "content": "<p>So you get a representative for free, but it happens to be one that we choose (if there were another rule about which node identifier you want to propagate, that could work too, but \"smallest\" is really easy).</p>",
        "id": 167216133,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1559585763
    },
    {
        "content": "<p>Strictly speaking, the code at the moment actually returns the edges within SCCs rather than the SCCs themselves, but .. I could fix that pretty quick if and when you want to try things out.</p>",
        "id": 167216178,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1559585807
    },
    {
        "content": "<p>You could also just use a vanilla SCC algorithm, which will go much faster if you aren't yet at \"inputs change and we want to react quickly\" yet.</p>",
        "id": 167216228,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1559585836
    },
    {
        "content": "<blockquote>\n<p>So you get a representative for free, but it happens to be one that we choose (if there were another rule about which node identifier you want to propagate, that could work too, but \"smallest\" is really easy).</p>\n</blockquote>\n<p>this is roughly what I had in mind, yes.</p>",
        "id": 167222514,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559589796
    },
    {
        "content": "<p>would we expect the motivating example to fail in Polonius today, or would it require supporting illegal subset relations errors ?</p>",
        "id": 167229213,
        "sender_full_name": "lqd",
        "timestamp": 1559594232
    },
    {
        "content": "<p>(I saw this conversation, but I'm going to bed so I'll read it properly tomorrow!)</p>",
        "id": 167231145,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1559595356
    },
    {
        "content": "<p>(I'm not seeing it yet, and expected L0 to be killed after the 2nd if, so no unnecessary Polonius error here <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> ?)</p>",
        "id": 167232679,
        "sender_full_name": "lqd",
        "timestamp": 1559596380
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> did you actually try it?</p>",
        "id": 167232853,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559596495
    },
    {
        "content": "<p>yes :/</p>",
        "id": 167232874,
        "sender_full_name": "lqd",
        "timestamp": 1559596506
    },
    {
        "content": "<p>I would expect an error today, but it may take a bit of tweaking to set it up correctly :)</p>",
        "id": 167232876,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559596507
    },
    {
        "content": "<p>right</p>",
        "id": 167232879,
        "sender_full_name": "lqd",
        "timestamp": 1559596514
    },
    {
        "content": "<p>the tweaking must be what I'm missing indeed</p>",
        "id": 167232905,
        "sender_full_name": "lqd",
        "timestamp": 1559596546
    },
    {
        "content": "<p>what is the example as you have it setup?</p>",
        "id": 167232977,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559596571
    },
    {
        "content": "<p>say, <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=cb0c551c37d12ca83c176b6777845db4\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=cb0c551c37d12ca83c176b6777845db4\">this</a> will faill with just nlls but work in Polonius</p>",
        "id": 167232993,
        "sender_full_name": "lqd",
        "timestamp": 1559596589
    },
    {
        "content": "<p>(eternal personal reminder to add <code>-Z</code> support to the playground)</p>",
        "id": 167233104,
        "sender_full_name": "lqd",
        "timestamp": 1559596682
    },
    {
        "content": "<p>(it's also worth noting that I could be missing something)</p>",
        "id": 167233134,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559596690
    },
    {
        "content": "<p>but ok I think I see why it's not reproducing, let me think about the most elegant variant :)</p>",
        "id": 167233187,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559596776
    },
    {
        "content": "<p>I guess I can test this wth <code>-Zpolonius</code> myself</p>",
        "id": 167233193,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559596783
    },
    {
        "content": "<p>(I did have a mockup with <code>-Z</code> support to the playground, and eddy often asks ;)</p>",
        "id": 167233314,
        "sender_full_name": "lqd",
        "timestamp": 1559596876
    },
    {
        "content": "<p>I think something like this is probably good: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=52fbcbf0fdf3c55542476842053994a6\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=52fbcbf0fdf3c55542476842053994a6\">playground</a></p>",
        "id": 167233417,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559596976
    },
    {
        "content": "<p>I basically just changed from <code>let mut x: &amp;u32</code> to <code>let mut x: (&amp;u32,) = ...</code></p>",
        "id": 167233436,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559596989
    },
    {
        "content": "<p>so that the <code>x.0 = ...</code> doesn't completely kill</p>",
        "id": 167233443,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559597000
    },
    {
        "content": "<p>you could probably make a more realistic example with <code>vec![]</code> and <code>push</code> or something</p>",
        "id": 167233464,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559597017
    },
    {
        "content": "<p>I <em>think</em> the new formulation I am proposing would handle the example above</p>",
        "id": 167233480,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559597032
    },
    {
        "content": "<p>ah yes, it does trigger thanks a lot</p>",
        "id": 167233540,
        "sender_full_name": "lqd",
        "timestamp": 1559597049
    },
    {
        "content": "<blockquote>\n<p>I <em>think</em> the new formulation I am proposing would handle the example above</p>\n</blockquote>\n<p>maybe we can prototype it \"quickly\"</p>",
        "id": 167233684,
        "sender_full_name": "lqd",
        "timestamp": 1559597185
    },
    {
        "content": "<p>Hmm, yes.</p>",
        "id": 167234112,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559597579
    },
    {
        "content": "<p>it'd be useful if we added some <code>min</code>-like operators to datafrog somewhere</p>",
        "id": 167234211,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559597652
    },
    {
        "content": "<p>question is precisely <em>where</em> :)</p>",
        "id": 167234214,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559597656
    },
    {
        "content": "<p>well you know</p>",
        "id": 167234647,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559598097
    },
    {
        "content": "<p>we could pretty easily write the code we need in polonius in <em>rust</em> I guess</p>",
        "id": 167234657,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559598110
    },
    {
        "content": "<p>(yeah that's what I was thinking as well, I was wondering about the updated rules, if we just needed to simply not do the <code>subset</code> TC — probably not)</p>",
        "id": 167235110,
        "sender_full_name": "lqd",
        "timestamp": 1559598459
    },
    {
        "content": "<p>( <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span> was misspoken, as IIRC the TC at a single point would not change, but propagating subsets along the CFG would not be necessary anymore)</p>",
        "id": 167244334,
        "sender_full_name": "lqd",
        "timestamp": 1559607261
    },
    {
        "content": "<blockquote>\n<p>we could pretty easily write the code we need in polonius in <em>rust</em> I guess</p>\n</blockquote>\n<p>There is a great joke here about everyone rewriting their C(++) stuff in Rust, and the Rust people now basically inventing something else to rewrite parts of Rust in because Rust is already in Rust</p>",
        "id": 167276539,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1559642136
    },
    {
        "content": "<p>Ok, I have read through this but <em>not</em> fully digested it. I think I'll need some more examples and/or careful deductions on paper (for/by myself) to figure this out. Which is good, because it reminds me that I should go through the actual borrow check logic and make sure I understand it too, and not just the parts I'm working on.</p>",
        "id": 167308748,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1559663901
    },
    {
        "content": "<p>(same for me ;)</p>",
        "id": 167310413,
        "sender_full_name": "lqd",
        "timestamp": 1559664785
    },
    {
        "content": "<p>in case it's useful, this should be a small program which would need subsets to be propagated along the CFG to emit an error:</p>\n<div class=\"codehilite\"><pre><span></span>universal_regions { }\nblock B0 {\n    outlives(&#39;r1: &#39;r0);\n    borrow_region_at(&#39;r2, L0), outlives(&#39;r2: &#39;r1), region_live_at(&#39;r0), region_live_at(&#39;r1);\n    invalidates(L0), region_live_at(&#39;r0);\n}\n</pre></div>",
        "id": 167407904,
        "sender_full_name": "lqd",
        "timestamp": 1559753438
    },
    {
        "content": "<p>(I think :p)</p>",
        "id": 167408081,
        "sender_full_name": "lqd",
        "timestamp": 1559753563
    },
    {
        "content": "<p>and if we need more examples, the <code>vec-push-ref</code> cases in our input facts dataset also need this CFG propagation (and they're similar to the examples at the start of this thread)</p>",
        "id": 167428831,
        "sender_full_name": "lqd",
        "timestamp": 1559767629
    },
    {
        "content": "<p>(I seem to have lost my bugpoint-like tool for helping reduce NLL facts automatically; I might have to reduce datalog facts manually like they used to do in the 18th century)</p>",
        "id": 167429025,
        "sender_full_name": "lqd",
        "timestamp": 1559767792
    },
    {
        "content": "<blockquote>\n<p>and if we need more examples, the <code>vec-push-ref</code> cases in our input facts dataset also need this CFG propagation (and they're similar to the examples at the start of this thread)</p>\n</blockquote>\n<p>I was just thinking about this example</p>",
        "id": 167441855,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559781197
    },
    {
        "content": "<p>and wondering how it related</p>",
        "id": 167441857,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559781206
    },
    {
        "content": "<p>btw <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> I <em>think</em> <a href=\"https://github.com/rust-lang-nursery/polonius/issues/107\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/issues/107\">polonius#107</a> describes a way to prototype this idea</p>",
        "id": 167442033,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559781476
    },
    {
        "content": "<p>thanks for writing that up :) I'll look at it in more detail later today. I don't have the intuition yet that we only needed the propagation for <em>equal</em> regions</p>",
        "id": 167456140,
        "sender_full_name": "lqd",
        "timestamp": 1559802987
    },
    {
        "content": "<p>Noticed an interesting example, <a href=\"https://github.com/rust-lang/polonius/issues/107#issuecomment-499427026\" target=\"_blank\" title=\"https://github.com/rust-lang/polonius/issues/107#issuecomment-499427026\">described here</a>. I'm curious <span class=\"user-mention\" data-user-id=\"127262\">@Aaron Weiss</span> what the Oxide type system would do here.</p>",
        "id": 167466839,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559814492
    },
    {
        "content": "<p>(in a rare display of bad luck, reducing the \"propagating subsets along the CFG is sometimes necessary\"-case -- ensuring the error is emitted -- effectively turned it into the \"propagating subsets along the CFG is sometimes imprecise\"-case, so my previous example shows the error which <em>shouldn't appear</em>)</p>",
        "id": 167470635,
        "sender_full_name": "lqd",
        "timestamp": 1559818154
    },
    {
        "content": "<blockquote>\n<p>Noticed an interesting example, <a href=\"https://github.com/rust-lang/polonius/issues/107#issuecomment-499427026\" target=\"_blank\" title=\"https://github.com/rust-lang/polonius/issues/107#issuecomment-499427026\">described here</a>. I'm curious <span class=\"user-mention silent\" data-user-id=\"127262\">Aaron Weiss</span> what the Oxide type system would do here.</p>\n</blockquote>\n<p>to continue on this point though, even if <code>equal</code> must be propagated along the CFG, that is still potentially more efficient that <code>subset</code>. This is because the equal relation is <em>reflexive</em>, so in principle we ought to be implement it nicely.</p>\n<p>One related thing I've been wondering about is the connection to <em>liveness</em>. A key part of the polonius analysis is removing tuples that touch on dead regions, but that feels like it is serving a <em>similar</em> purpose to this new twist -- i.e., helping to separate \"instantaneous behavior\" from a \"continuous connection\". (Witness that to reproduce the imprecision in my origin example, I had to introduce tuples to sidestep the liveness analysis.)</p>",
        "id": 167475777,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559823309
    },
    {
        "content": "<blockquote>\n<p>Noticed an interesting example, <a href=\"https://github.com/rust-lang/polonius/issues/107#issuecomment-499427026\" target=\"_blank\" title=\"https://github.com/rust-lang/polonius/issues/107#issuecomment-499427026\">described here</a>. I'm curious <span class=\"user-mention silent\" data-user-id=\"127262\">Aaron Weiss</span> what the Oxide type system would do here.</p>\n</blockquote>\n<p>Since Oxide only requires type information to be on the same page at the <em>end</em> of the branches, I <em>think</em> this example should work in a fairly straightforward manner. Locally, within each branch, the provenance stuff works out, and at the end of the branch, they both agree on the state of the world (so there's not even a question of \"whether or not unifying the two states will succeed\").</p>",
        "id": 167493977,
        "sender_full_name": "Aaron Weiss",
        "timestamp": 1559835994
    },
    {
        "content": "<p>(I quickly prototyped this and it <em>seems to pass the repo's tests</em> — I wasn't able to try on rustc's yet. In particular the <code>vec-push-ref</code> ones pass, and they seem to depend on cfg propagation for some reason — still unsure why as of now. Still, I must have made some mistake in that it may not be working/OOMs on clap)</p>",
        "id": 167509621,
        "sender_full_name": "lqd",
        "timestamp": 1559846541
    },
    {
        "content": "<p>the question <span class=\"user-mention\" data-user-id=\"127262\">@Aaron Weiss</span> is whether the type of <code>p</code>, <code>a</code> and <code>b</code> will have to use the same provenance for the <code>&amp;u32</code></p>",
        "id": 167528298,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559859601
    },
    {
        "content": "<p>Ah, I think with how T-Assign is setup right now, the answer is yes.</p>",
        "id": 167528519,
        "sender_full_name": "Aaron Weiss",
        "timestamp": 1559859750
    },
    {
        "content": "<p>Actually, I'm not so sure. It might work in Oxide if they're different as long as they're provenances that _can_ unify (i.e. they're not unrelated parameterized provenance variables).</p>",
        "id": 167528718,
        "sender_full_name": "Aaron Weiss",
        "timestamp": 1559859915
    },
    {
        "content": "<p>This is definitely something I should try when I actually manage to get the implementation working.</p>",
        "id": 167528740,
        "sender_full_name": "Aaron Weiss",
        "timestamp": 1559859948
    },
    {
        "content": "<p>I worked on this last night, and even if I’m not 100% sure of the new behavior (I feel it’s computing <em>a lot</em> more \"requires\" than before, therefore slower) I also had a tiny thought that had some interesting results: historically we used to compute every \"borrow_live_at\", and I didn’t expect limiting those to only track invalidated loans would be that impactful. With this, the prototype passes clap fast (most of the new computation seems about previously untracked regions, and is mostly ignored with this filter), and so I also tried tracking equality across the CFG, and that seems to work as well, no \"polonius-imprecision unnecessary-error\" or with your example in the issue \"polonius-imprecision flow-sensitive-equality-required\" <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> :) I’ll test in rustc later today, these tests were only in the polonius inputs.</p>",
        "id": 170438155,
        "sender_full_name": "lqd",
        "timestamp": 1562665306
    },
    {
        "content": "<p>(I'm not sure on how exactly to control the equality propagation yet, and it might be a coincidence that both tests and the new issue pass, until I've verified in rustc; but I only propagated equality in the cfg if both equal regions were live at the end point of the edge — this might indeed require changing)</p>",
        "id": 170438735,
        "sender_full_name": "lqd",
        "timestamp": 1562665809
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> I'm not quite sure what you mean -- you implemented the filter on the existing rules, you mean?</p>",
        "id": 170439986,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562667126
    },
    {
        "content": "<p>Is this code in an open PR?</p>",
        "id": 170439992,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562667143
    },
    {
        "content": "<p>yes, on both the existing rules and the different versions of the prototype; not yet in a PR though, it's on top of <a href=\"https://github.com/lqd/borrow-check/tree/variant_prototype\" target=\"_blank\" title=\"https://github.com/lqd/borrow-check/tree/variant_prototype\">this branch</a></p>",
        "id": 170440082,
        "sender_full_name": "lqd",
        "timestamp": 1562667252
    },
    {
        "content": "<p>I can update the branch if you want ?</p>",
        "id": 170440094,
        "sender_full_name": "lqd",
        "timestamp": 1562667288
    },
    {
        "content": "<p>I'm a bit wary of said filter changing behavior</p>",
        "id": 170440837,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562667991
    },
    {
        "content": "<p>Unless you're saying that it's just running faster but getting same results</p>",
        "id": 170440859,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562668022
    },
    {
        "content": "<p>I guess i'd like to take a look at the original, unfiltered version of your new analysis</p>",
        "id": 170440885,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562668049
    },
    {
        "content": "<p>I hope it's not changing results but will check on the test suite later today</p>",
        "id": 170440886,
        "sender_full_name": "lqd",
        "timestamp": 1562668053
    },
    {
        "content": "<p>is that still in the branch? it's something I've been meaning to return to</p>",
        "id": 170440889,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562668058
    },
    {
        "content": "<p>but basically what I mean is I'm filteting borrow regions to only look at loans which might be invalidated</p>",
        "id": 170440949,
        "sender_full_name": "lqd",
        "timestamp": 1562668097
    },
    {
        "content": "<p>that changes results of computing all the borrow live at tuples, but those are only useful joined with invalidations</p>",
        "id": 170440961,
        "sender_full_name": "lqd",
        "timestamp": 1562668120
    },
    {
        "content": "<p>that is, I feel I'm only tracking the loans which matter now, instead of all loans</p>",
        "id": 170440988,
        "sender_full_name": "lqd",
        "timestamp": 1562668154
    },
    {
        "content": "<p>Cool -- definitely something I wanted to try doing.</p>",
        "id": 170441019,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562668197
    },
    {
        "content": "<p>I'm not really sure what my expectations were, but I can imagine it being a big win</p>",
        "id": 170441079,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562668213
    },
    {
        "content": "<p>a bit like we talked about reusing the results of the location insensitive analysis, limiting the full analysis to only those loans; instead it's the limiting it to the invalidated loans</p>",
        "id": 170441084,
        "sender_full_name": "lqd",
        "timestamp": 1562668217
    },
    {
        "content": "<p>again I hope to validate rustc's behavior with the tests first but it was interesting yes :)</p>",
        "id": 170441099,
        "sender_full_name": "lqd",
        "timestamp": 1562668238
    },
    {
        "content": "<blockquote>\n<p>a bit like we talked about reusing the results of the location insensitive analysis, limiting the full analysis to only those loans; instead it's the limiting it to the invalidated loans</p>\n</blockquote>\n<p>yeah good point, maybe we didn't consider this variant? I can't remember.</p>",
        "id": 170441111,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562668252
    },
    {
        "content": "<p>it doesn't ring a bell which is weird cause it seems \"obvious\"</p>",
        "id": 170441138,
        "sender_full_name": "lqd",
        "timestamp": 1562668272
    },
    {
        "content": "<p>Indeed</p>",
        "id": 170441142,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562668277
    },
    {
        "content": "<p>Ah well</p>",
        "id": 170441149,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562668290
    },
    {
        "content": "<p>but we've prototyped the other information sharing in the hybrid variant</p>",
        "id": 170441152,
        "sender_full_name": "lqd",
        "timestamp": 1562668294
    },
    {
        "content": "<p>I think maybe this arises from</p>",
        "id": 170441153,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562668296
    },
    {
        "content": "<p><code>&amp;*x</code> where <code>x: &amp;T</code>?</p>",
        "id": 170441157,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562668303
    },
    {
        "content": "<p>i.e., if you borrow <code>&amp;x</code> and <code>x</code> is immutable, it will have a <code>StorageDead</code> that invalidates it</p>",
        "id": 170441170,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562668320
    },
    {
        "content": "<p>but if you are borrowing <code>&amp;*x</code> it may never</p>",
        "id": 170441214,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562668330
    },
    {
        "content": "<p>we optimize this case in \"normal\" NLL, too</p>",
        "id": 170441219,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562668338
    },
    {
        "content": "<p>still feels strange that this kinda fixes the prototype on clap (so I'd like to investigate more here ofc; that might mean that clap is fine but some other case where most borrow regions are invalidated will still be slow on datafrogopt or the prototype)</p>",
        "id": 170441224,
        "sender_full_name": "lqd",
        "timestamp": 1562668350
    },
    {
        "content": "<p>yeah this may be a good optimization but perhaps ultimately less good than the insensitive variant (and, of course, you could probably apply it there too, no?)</p>",
        "id": 170441260,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562668383
    },
    {
        "content": "<p>I did yeah :)</p>",
        "id": 170441674,
        "sender_full_name": "lqd",
        "timestamp": 1562668753
    },
    {
        "content": "<p>everywhere</p>",
        "id": 170441676,
        "sender_full_name": "lqd",
        "timestamp": 1562668758
    },
    {
        "content": "<p>it's a bit subtle to see since the borrow regions are straight out of rustc, so the relation's content is a bit most obvious there</p>",
        "id": 170441782,
        "sender_full_name": "lqd",
        "timestamp": 1562668836
    },
    {
        "content": "<p>here's the updated prototype niko: <a href=\"https://github.com/lqd/borrow-check/commit/262e42b2dbe76cfde9c3dee6c108224186275feb\" target=\"_blank\" title=\"https://github.com/lqd/borrow-check/commit/262e42b2dbe76cfde9c3dee6c108224186275feb\">link</a></p>",
        "id": 170442855,
        "sender_full_name": "lqd",
        "timestamp": 1562669876
    },
    {
        "content": "<p>still feels like it might work thanks to luck, so I'll want to understand more of the behaviour without this filtering (and without the flow sensitive equality present in this commit)</p>",
        "id": 170442948,
        "sender_full_name": "lqd",
        "timestamp": 1562669974
    },
    {
        "content": "<p>but it seemed like it was tracking at least 10x more <code>requires</code></p>",
        "id": 170442958,
        "sender_full_name": "lqd",
        "timestamp": 1562669994
    },
    {
        "content": "<blockquote>\n<p>here's the updated prototype niko: <a href=\"https://github.com/lqd/borrow-check/commit/262e42b2dbe76cfde9c3dee6c108224186275feb\" target=\"_blank\" title=\"https://github.com/lqd/borrow-check/commit/262e42b2dbe76cfde9c3dee6c108224186275feb\">link</a></p>\n</blockquote>\n<p>this is pre-optimization, right?</p>",
        "id": 170443038,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562670066
    },
    {
        "content": "<blockquote>\n<p>but it seemed like it was tracking at least 10x more <code>requires</code></p>\n</blockquote>\n<p>I wanted to check how you implemented it, this seems plausible, but I suspect we can cut it down in other ways too</p>",
        "id": 170443051,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562670078
    },
    {
        "content": "<p>actually, it's with the optimization</p>",
        "id": 170443059,
        "sender_full_name": "lqd",
        "timestamp": 1562670086
    },
    {
        "content": "<p>ah ok</p>",
        "id": 170443065,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562670091
    },
    {
        "content": "<p>the optimization is <a href=\"https://github.com/lqd/borrow-check/commit/262e42b2dbe76cfde9c3dee6c108224186275feb#diff-d5df4d540115464d1451e38b7f0acf7aR167\" target=\"_blank\" title=\"https://github.com/lqd/borrow-check/commit/262e42b2dbe76cfde9c3dee6c108224186275feb#diff-d5df4d540115464d1451e38b7f0acf7aR167\">this</a></p>",
        "id": 170443175,
        "sender_full_name": "lqd",
        "timestamp": 1562670168
    },
    {
        "content": "<p>+1</p>",
        "id": 170443189,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562670184
    },
    {
        "content": "<p>I fear it's just optimizing clap tho :)</p>",
        "id": 170443199,
        "sender_full_name": "lqd",
        "timestamp": 1562670208
    },
    {
        "content": "<p>(or cases where the set of invalidated loans is lower than the set of borrow regions' loans, say)</p>",
        "id": 170443229,
        "sender_full_name": "lqd",
        "timestamp": 1562670238
    },
    {
        "content": "<p>well, if it's the <code>&amp;*x</code> case that I was describing, then I think it's more general than that</p>",
        "id": 170443274,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562670250
    },
    {
        "content": "<p>I'd like to investigate if it's those indeed</p>",
        "id": 170443283,
        "sender_full_name": "lqd",
        "timestamp": 1562670268
    },
    {
        "content": "<p>though I suspect the <em>best</em> would be to (a) use this optimization for the flow insensitive variant and then (b) use results from flow insensitive variant to inform the flow sensitive version</p>",
        "id": 170443287,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562670274
    },
    {
        "content": "<p>yeah true</p>",
        "id": 170443294,
        "sender_full_name": "lqd",
        "timestamp": 1562670285
    },
    {
        "content": "<p>optimizations while the correctness story is still a bit in flux feels strange, but we've already prototyped the sharing between the 2 variants so I'm not worried we can do these easy and effective optimizations there</p>",
        "id": 170443410,
        "sender_full_name": "lqd",
        "timestamp": 1562670406
    },
    {
        "content": "<p>I have hopes to do a lot of this before you return from vacation :)</p>",
        "id": 170443590,
        "sender_full_name": "lqd",
        "timestamp": 1562670619
    },
    {
        "content": "<p>(ofc the prototype is terrible WIP, I split it into 2 computations just so I could control the equality in rust, but it's probably doable in datafrog)</p>",
        "id": 170443637,
        "sender_full_name": "lqd",
        "timestamp": 1562670717
    },
    {
        "content": "<p>(I gtg for a bit and then I can test this in rustc)</p>",
        "id": 170443687,
        "sender_full_name": "lqd",
        "timestamp": 1562670757
    },
    {
        "content": "<p>ran this variant on rustc tests, only 15 more failures, impressive</p>",
        "id": 170471792,
        "sender_full_name": "lqd",
        "timestamp": 1562692467
    },
    {
        "content": "<p>some of them look bad though, like compiling things which probably shouldn't compile :)</p>",
        "id": 170471818,
        "sender_full_name": "lqd",
        "timestamp": 1562692498
    },
    {
        "content": "<p>polonius is like \"you may not like it but this is what peak borrowcking looks like\" -- I'll thin those out over the summer, so we know why it's doing this, probably just bugs rather than unsoundness (otherwise we might have heard about it from aatxe)</p>",
        "id": 170472024,
        "sender_full_name": "lqd",
        "timestamp": 1562692645
    }
]