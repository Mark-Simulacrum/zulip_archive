[
    {
        "content": "<p>I have a question. If we have a move error at some MIR statement x, should it happen at <code>Start(x)</code>or <code>Mid(x)</code>? Both make sense to me, but I lean towards <code>Start(x)</code> if the evaluation happens before the effect (which is the only way I see there being any point to separating start/mid).</p>",
        "id": 179939815,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1572965968
    },
    {
        "content": "<p>Invalidates error are at the start point, so I would expect move errors to also be at the start point.</p>",
        "id": 179948090,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1572970807
    },
    {
        "content": "<p>Great thanks :)</p>",
        "id": 179956654,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1572975833
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span>  I've tried to trace the move errors a bit just to see if something obvious jumps at you, there's a false positive in the dataset issue-47680 (it's small-ish, especially compared to clap :)  it finds an unexpected move error: <code>\"Start(bb8[1])\" \"mp11\"</code> which seems to come all the way up  via <code>path_maybe_uninitialized_on_exit</code> (from possibly the beginning of the whole phase 2)</p>",
        "id": 190029636,
        "sender_full_name": "lqd",
        "timestamp": 1583704781
    },
    {
        "content": "<p><a href=\"https://gist.github.com/lqd/127d46f9c56ea474ed3cb6cdd09b1168\" target=\"_blank\" title=\"https://gist.github.com/lqd/127d46f9c56ea474ed3cb6cdd09b1168\">here's a trace</a> of the tuples created during both phases of initialization<br>\nand the error itself appears in round 41 of phase 2:</p>\n<div class=\"codehilite\"><pre><span></span> `move_error(Path { index: 2 }, Point { index: 46 })` tuple created, from leapjoining `path_maybe_uninitialized_on_exit(Path { index: 2 }, Point { index: 45 })` with value `Point { index: 46 }`\n</pre></div>",
        "id": 190029641,
        "sender_full_name": "lqd",
        "timestamp": 1583704801
    },
    {
        "content": "<p>Is the path a variable or a function argument?</p>",
        "id": 190062629,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1583756383
    },
    {
        "content": "<p>I don't know, it looks like a variable in the code, but mp11 doesn't doesn't appear in <a href=\"https://github.com/rust-lang/polonius/blob/master/inputs/issue-47680/nll-facts/main/path_is_var.facts\" target=\"_blank\" title=\"https://github.com/rust-lang/polonius/blob/master/inputs/issue-47680/nll-facts/main/path_is_var.facts\">https://github.com/rust-lang/polonius/blob/master/inputs/issue-47680/nll-facts/main/path_is_var.facts</a> -- then again I know nothing about these facts and rules</p>",
        "id": 190065157,
        "sender_full_name": "lqd",
        "timestamp": 1583758696
    },
    {
        "content": "<p>The relation between move paths and variables is slightly byzantine</p>",
        "id": 190215754,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1583869230
    },
    {
        "content": "<p>apparently, there's a hierarchy: mp5.mp10.mp11</p>",
        "id": 190215839,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1583869291
    },
    {
        "content": "<p>And mp5 is _5</p>",
        "id": 190215859,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1583869305
    },
    {
        "content": "<p>Ok, so it's a regular variable, moved at start, and assigned at <code>Start(bb4[0])</code>, which should also initialise all its children</p>",
        "id": 190216049,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1583869417
    },
    {
        "content": "<p>This looks a lot like an off-by-one</p>",
        "id": 190216180,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1583869482
    },
    {
        "content": "<p>Because at <code>Mid(bb8[1])</code>, mp11 is moved</p>",
        "id": 190216203,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1583869497
    },
    {
        "content": "<p>And the error happens at <code>Start(bb8[1])</code></p>",
        "id": 190216296,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1583869563
    },
    {
        "content": "<p>I guess it's caused by the join with the accessed-by relationship, presumably caused by a move expression at bb8[1]</p>",
        "id": 190216395,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1583869619
    },
    {
        "content": "<p>I was so <em>sure</em> I fixed the problems with overlaps in move statements</p>",
        "id": 190216436,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1583869646
    },
    {
        "content": "<p>It might also be related to propagation from path transitivity in <code>path_maybe_uninitialized_on_exit</code>, I'll have to check the rules</p>",
        "id": 190217071,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1583870007
    },
    {
        "content": "<p>I was wondering whether you expected <code>conditional_init</code> to emit 2 move errors btw ?</p>",
        "id": 190218310,
        "sender_full_name": "lqd",
        "timestamp": 1583870718
    },
    {
        "content": "<p>What is <code>conditional_init</code>?</p>",
        "id": 190219058,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1583871219
    },
    {
        "content": "<p>one of the move errors test you added</p>",
        "id": 190219560,
        "sender_full_name": "lqd",
        "timestamp": 1583871504
    },
    {
        "content": "<p>in the smoke-test dataset</p>",
        "id": 190219584,
        "sender_full_name": "lqd",
        "timestamp": 1583871514
    },
    {
        "content": "<p>here <a href=\"https://github.com/rust-lang/polonius/blob/master/inputs/smoke-test/polonius-smoke-test.rs#L73-L78\" target=\"_blank\" title=\"https://github.com/rust-lang/polonius/blob/master/inputs/smoke-test/polonius-smoke-test.rs#L73-L78\">https://github.com/rust-lang/polonius/blob/master/inputs/smoke-test/polonius-smoke-test.rs#L73-L78</a></p>",
        "id": 190219677,
        "sender_full_name": "lqd",
        "timestamp": 1583871570
    },
    {
        "content": "<p>...</p>",
        "id": 190219699,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1583871588
    },
    {
        "content": "<p>I guess it should emit one?</p>",
        "id": 190219779,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1583871625
    },
    {
        "content": "<p>I'm not really sure how the facts map back to rustc errors</p>",
        "id": 190219805,
        "sender_full_name": "lqd",
        "timestamp": 1583871644
    },
    {
        "content": "<p>on line 76, it should say that a may not be initialized</p>",
        "id": 190219807,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1583871647
    },
    {
        "content": "<p>I'm not sure either</p>",
        "id": 190219833,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1583871664
    },
    {
        "content": "<p>but maybe one of those 2 is the same off by one as earlier</p>",
        "id": 190219835,
        "sender_full_name": "lqd",
        "timestamp": 1583871664
    },
    {
        "content": "<p>That sounds likely</p>",
        "id": 190219866,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1583871689
    },
    {
        "content": "<p>I don't have the MIR handy but those 2 errors are a bit apart from each other so it seemed likely</p>",
        "id": 190219881,
        "sender_full_name": "lqd",
        "timestamp": 1583871706
    },
    {
        "content": "<p>I saw that while encoding it into a unit test <a href=\"https://github.com/rust-lang/polonius/pull/144/commits/a1e97641a09901aea761ffdec744517fa227bc99#diff-c5fc4beef0f03493c2e9a9c876073f0fR716-R741\" target=\"_blank\" title=\"https://github.com/rust-lang/polonius/pull/144/commits/a1e97641a09901aea761ffdec744517fa227bc99#diff-c5fc4beef0f03493c2e9a9c876073f0fR716-R741\">https://github.com/rust-lang/polonius/pull/144/commits/a1e97641a09901aea761ffdec744517fa227bc99#diff-c5fc4beef0f03493c2e9a9c876073f0fR716-R741</a></p>",
        "id": 190219916,
        "sender_full_name": "lqd",
        "timestamp": 1583871723
    },
    {
        "content": "<p>but it may be encoding another false positive at the same time</p>",
        "id": 190219982,
        "sender_full_name": "lqd",
        "timestamp": 1583871751
    },
    {
        "content": "<p>if it is indeed the off by one, at least this function is super simple</p>",
        "id": 190220222,
        "sender_full_name": "lqd",
        "timestamp": 1583871853
    },
    {
        "content": "<p>which should make analysis easier than the earlier one</p>",
        "id": 190220256,
        "sender_full_name": "lqd",
        "timestamp": 1583871870
    },
    {
        "content": "<p>I have a lead on the false positive error from the <code>conditional_init</code> dataset (the earliest of the two errors: <code>Start(bb2[0]), mp3</code>). <code>_3</code> is interesting because it's a call's return place.</p>\n<p><a href=\"/user_uploads/4715/f89tR8UtAewF6MuPoPJIiOIN/image.png\" target=\"_blank\" title=\"image.png\">MIR excerpt</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/f89tR8UtAewF6MuPoPJIiOIN/image.png\" target=\"_blank\" title=\"MIR excerpt\"><img src=\"/user_uploads/4715/f89tR8UtAewF6MuPoPJIiOIN/image.png\"></a></div><p>The terminator we're looking at is from the <code>_3 = random()</code> call leading to <code>bb2</code> and rustc generates a fact saying <code>_3</code> will be initialized on the non-panic path, at the start location of the successor block (<code>Start(bb2[0])</code>, where our error happens).</p>\n<p>The rule for move errors is:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nf\">move_error</span><span class=\"p\">(</span><span class=\"nv\">Path</span><span class=\"p\">,</span> <span class=\"nv\">TargetNode</span><span class=\"p\">)</span> <span class=\"p\">:-</span>\n   <span class=\"nf\">path_maybe_uninitialized_on_exit</span><span class=\"p\">(</span><span class=\"nv\">Path</span><span class=\"p\">,</span> <span class=\"nv\">SourceNode</span><span class=\"p\">),</span>\n   <span class=\"nf\">cfg_edge</span><span class=\"p\">(</span><span class=\"nv\">SourceNode</span><span class=\"p\">,</span> <span class=\"nv\">TargetNode</span><span class=\"p\">),</span>\n   <span class=\"nf\">path_accessed_at</span><span class=\"p\">(</span><span class=\"nv\">Path</span><span class=\"p\">,</span> <span class=\"nv\">TargetNode</span><span class=\"p\">).</span>\n</pre></div>\n\n\n<p>so here <code>SourceNode = Mid(bb0[3])</code>, <code>TargetNode = Start(bb2[0])</code> and there must be a <code>path_access_at</code> the target node. This path access fact at the start node is generated <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/borrow_check/type_check/liveness/polonius.rs#L44-L47\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/borrow_check/type_check/liveness/polonius.rs#L44-L47\">here</a> which I assume because of some uses <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/borrow_check/type_check/liveness/polonius.rs#L70-L80\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/borrow_check/type_check/liveness/polonius.rs#L70-L80\">here</a>. </p>\n<p>The rules seem designed specifically to compute a move error on an edge rather than at a point, so I'm not sure whether this path access should have been at the mid point, or if it's the other way around and the rule should look at uninitialized accesses at single points ?<br>\nI'll try and emit the fact at the mid point and see if anything breaks.</p>",
        "id": 191031867,
        "sender_full_name": "lqd",
        "timestamp": 1584560484
    },
    {
        "content": "<blockquote>\n<p>I'll try and emit the fact at the mid point and see if anything breaks.</p>\n</blockquote>\n<p>answer: a lot of things break, this start point is load-bearing</p>",
        "id": 191033850,
        "sender_full_name": "lqd",
        "timestamp": 1584561464
    },
    {
        "content": "<p>maybe this will help you <span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span>, or maybe you and niko already talked about this</p>",
        "id": 191034255,
        "sender_full_name": "lqd",
        "timestamp": 1584561642
    },
    {
        "content": "<p>or maybe move errors could be ignoring these cases, by allowing access + assignment at the target node ?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nf\">move_error</span><span class=\"p\">(</span><span class=\"nv\">Path</span><span class=\"p\">,</span> <span class=\"nv\">TargetNode</span><span class=\"p\">)</span> <span class=\"p\">:-</span>\n   <span class=\"nf\">path_maybe_uninitialized_on_exit</span><span class=\"p\">(</span><span class=\"nv\">Path</span><span class=\"p\">,</span> <span class=\"nv\">SourceNode</span><span class=\"p\">),</span>\n   <span class=\"nf\">cfg_edge</span><span class=\"p\">(</span><span class=\"nv\">SourceNode</span><span class=\"p\">,</span> <span class=\"nv\">TargetNode</span><span class=\"p\">),</span>\n   <span class=\"nf\">path_accessed_at</span><span class=\"p\">(</span><span class=\"nv\">Path</span><span class=\"p\">,</span> <span class=\"nv\">TargetNode</span><span class=\"p\">),</span>\n   <span class=\"p\">!</span><span class=\"nf\">path_assigned_at</span><span class=\"p\">(</span><span class=\"s s-Atom\">path</span><span class=\"p\">,</span> <span class=\"nv\">TargetNode</span><span class=\"p\">).</span>\n</pre></div>",
        "id": 191043428,
        "sender_full_name": "lqd",
        "timestamp": 1584566270
    },
    {
        "content": "<p>(but wouldn't fix some of the other false positives I've seen, so hard to say)</p>",
        "id": 191043744,
        "sender_full_name": "lqd",
        "timestamp": 1584566430
    },
    {
        "content": "<p>(and I think the false positives in <code>clap</code> have the same shape as this one in <code>conditional_init</code>)</p>",
        "id": 191051112,
        "sender_full_name": "lqd",
        "timestamp": 1584570708
    },
    {
        "content": "<p>while some of the other false positives like in <code>issue-47680</code> were caused by a <a href=\"https://github.com/rust-lang/polonius/blob/master/polonius-engine/src/output/initialization.rs#L51-L52\" target=\"_blank\" title=\"https://github.com/rust-lang/polonius/blob/master/polonius-engine/src/output/initialization.rs#L51-L52\">small typo</a></p>",
        "id": 191051159,
        "sender_full_name": "lqd",
        "timestamp": 1584570722
    },
    {
        "content": "<p>(I'll re-check the previous path access fact start/mid location tests with the typo fixed)</p>",
        "id": 191052198,
        "sender_full_name": "lqd",
        "timestamp": 1584571445
    },
    {
        "content": "<p>muuuuuch better, yay, and it also fixes the 3 <code>maybe-drop-*</code> tests changes: they go back to their prior behavior and we don't have 2 unexpected passes / 1 unexpected fail</p>",
        "id": 191056275,
        "sender_full_name": "lqd",
        "timestamp": 1584574300
    },
    {
        "content": "<p>Yay! Nice job!</p>",
        "id": 191081176,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1584605855
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> do you maybe remember a reason why these accesses were initially at the start point while other uses were at the mid point ? if not, it's probably ok to move it there as well :)</p>",
        "id": 191083411,
        "sender_full_name": "lqd",
        "timestamp": 1584607622
    },
    {
        "content": "<p>it doesn't seem to impact the <code>var_maybe_partly_initialized_on_exit</code> part of move/init which impacts liveness and loan analysis so that's that. I guess we'll know more when we finally emit the move errors <span aria-label=\"clown\" class=\"emoji emoji-1f921\" role=\"img\" title=\"clown\">:clown:</span></p>",
        "id": 191083827,
        "sender_full_name": "lqd",
        "timestamp": 1584607929
    },
    {
        "content": "<p>Err</p>",
        "id": 191085725,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1584609150
    },
    {
        "content": "<p>I have a memory</p>",
        "id": 191085746,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1584609164
    },
    {
        "content": "<p>But I think they should happen at mid-point</p>",
        "id": 191085800,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1584609192
    },
    {
        "content": "<p>seems sensible to me as well</p>",
        "id": 191085941,
        "sender_full_name": "lqd",
        "timestamp": 1584609249
    },
    {
        "content": "<p>I'll take care of it</p>",
        "id": 191085991,
        "sender_full_name": "lqd",
        "timestamp": 1584609284
    },
    {
        "content": "<p>the sweet dance of updating the 2 repos in lockstep :)</p>",
        "id": 191086030,
        "sender_full_name": "lqd",
        "timestamp": 1584609312
    },
    {
        "content": "<p>I'm so happy this wasn't some big thing (probably)</p>",
        "id": 191092284,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1584612914
    },
    {
        "content": "<p>more and more I think we'll have to compute them differently, it's not datafrog's strong suit</p>",
        "id": 191092614,
        "sender_full_name": "lqd",
        "timestamp": 1584613089
    },
    {
        "content": "<p>but let's get them correct first and then we can refactor all we want</p>",
        "id": 191092691,
        "sender_full_name": "lqd",
        "timestamp": 1584613146
    },
    {
        "content": "<p>in the mean time it'll just be tough to work on anything downstream from move errors</p>",
        "id": 191092735,
        "sender_full_name": "lqd",
        "timestamp": 1584613183
    },
    {
        "content": "<p>(on the big datasets)</p>",
        "id": 191092816,
        "sender_full_name": "lqd",
        "timestamp": 1584613219
    },
    {
        "content": "<p>but yeah, same, good news :)</p>",
        "id": 191093068,
        "sender_full_name": "lqd",
        "timestamp": 1584613363
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> I've updated <a href=\"https://github.com/rust-lang/polonius/pull/144\" target=\"_blank\" title=\"https://github.com/rust-lang/polonius/pull/144\">https://github.com/rust-lang/polonius/pull/144</a> to fix the subpaths false positives</p>",
        "id": 191259085,
        "sender_full_name": "lqd",
        "timestamp": 1584718538
    },
    {
        "content": "<p>one PR down, two to go</p>",
        "id": 191259213,
        "sender_full_name": "lqd",
        "timestamp": 1584718574
    },
    {
        "content": "<p>(maybe three, if we count the one to update the version and publish the release needed for the two other PRs)</p>",
        "id": 191259386,
        "sender_full_name": "lqd",
        "timestamp": 1584718640
    },
    {
        "content": "<p>should be rather straightforward to review if you ignore the fact updates commits :)</p>",
        "id": 191259526,
        "sender_full_name": "lqd",
        "timestamp": 1584718684
    },
    {
        "content": "<p>maybe I'll just bump polonius-engine to 0.12.1 in this PR (edit: done, it'll save a PR :)</p>",
        "id": 191261512,
        "sender_full_name": "lqd",
        "timestamp": 1584719494
    },
    {
        "content": "<p>Excellent, I'll have a look at it during the weekend!</p>",
        "id": 191262722,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1584719991
    },
    {
        "content": "<p>sweet, thank you; I'll get to work on the rustc and fact updates ones then</p>",
        "id": 191262903,
        "sender_full_name": "lqd",
        "timestamp": 1584720053
    },
    {
        "content": "<p>(I also added a few low hanging fruit commits for some move/init cleanups)</p>",
        "id": 191274081,
        "sender_full_name": "lqd",
        "timestamp": 1584724744
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> I think it looks great; I love how reviewing this teaches me how to write better code as well</p>",
        "id": 191404103,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1584894685
    },
    {
        "content": "<p>Merged it!</p>",
        "id": 191404349,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1584895070
    },
    {
        "content": "<p>(I just assumed I could)</p>",
        "id": 191404361,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1584895082
    },
    {
        "content": "<p>thanks a bunch</p>",
        "id": 191417072,
        "sender_full_name": "lqd",
        "timestamp": 1584912492
    },
    {
        "content": "<p>0.12.1 published, rustc PR to fix the remaining (I hope) move errors false positives + UI test expectations <a href=\"https://github.com/rust-lang/rust/pull/70546\" title=\"https://github.com/rust-lang/rust/pull/70546\">https://github.com/rust-lang/rust/pull/70546</a></p>",
        "id": 192202042,
        "sender_full_name": "lqd",
        "timestamp": 1585528995
    },
    {
        "content": "<p>when it lands I'll update the polonius repo facts again (the branch is \"ready\" using the rustc PR fact gen here <a href=\"https://github.com/rust-lang/polonius/compare/master...lqd:fix_move_errors\" title=\"https://github.com/rust-lang/polonius/compare/master...lqd:fix_move_errors\">https://github.com/rust-lang/polonius/compare/master...lqd:fix_move_errors</a>  but that output may change by the time the PR lands -- also it's huge, mostly because of some changes in rustc <code>outlives</code> output, maybe the recent regionck change)</p>",
        "id": 192202051,
        "sender_full_name": "lqd",
        "timestamp": 1585529018
    },
    {
        "content": "<p>(but this should all go away if we go with the previous plan I mentioned to fix the OOMs, all those are materialization of the <code>Locations::All</code> subsets)</p>",
        "id": 192202969,
        "sender_full_name": "lqd",
        "timestamp": 1585530598
    },
    {
        "content": "<p>turns out it landed very quickly, so here's the updated facts PR <a href=\"https://github.com/rust-lang/polonius/pull/147\" title=\"https://github.com/rust-lang/polonius/pull/147\">https://github.com/rust-lang/polonius/pull/147</a>, and we should be good on move errors until we actually emit them in rustc</p>",
        "id": 192304500,
        "sender_full_name": "lqd",
        "timestamp": 1585595985
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> so I was reading this topic</p>",
        "id": 193818686,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586810434
    },
    {
        "content": "<p>I'm not 100% sure what ultimately changed in the rules -- should I look at the PR?</p>",
        "id": 193818713,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586810456
    },
    {
        "content": "<p>or should I sit and read this topic carefully</p>",
        "id": 193818729,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586810472
    },
    {
        "content": "<p>or both :)</p>",
        "id": 193818731,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586810473
    },
    {
        "content": "<p>which PR ?</p>",
        "id": 193818735,
        "sender_full_name": "lqd",
        "timestamp": 1586810475
    },
    {
        "content": "<p>the rustc one or polonius one ?</p>",
        "id": 193818745,
        "sender_full_name": "lqd",
        "timestamp": 1586810483
    },
    {
        "content": "<p>oh it seemed lke you wrote a PR</p>",
        "id": 193818748,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586810486
    },
    {
        "content": "<p>I want to know what changed in the polonius rules</p>",
        "id": 193818764,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586810501
    },
    {
        "content": "<p>so I guess the plonius one</p>",
        "id": 193818771,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586810507
    },
    {
        "content": "<p>I wrote a rustc PR but didn't change the polonius rules</p>",
        "id": 193818780,
        "sender_full_name": "lqd",
        "timestamp": 1586810516
    },
    {
        "content": "<p>just rustc fact gen</p>",
        "id": 193818788,
        "sender_full_name": "lqd",
        "timestamp": 1586810519
    },
    {
        "content": "<p>I'm curious if you also updated the <a href=\"https://hackmd.io/CGMNjt1hR_qYtsR9hgdGmw\" title=\"https://hackmd.io/CGMNjt1hR_qYtsR9hgdGmw\">Polonius Rules</a></p>",
        "id": 193818835,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586810524
    },
    {
        "content": "<p>oh</p>",
        "id": 193818837,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586810525
    },
    {
        "content": "<p>(a fact location)</p>",
        "id": 193818847,
        "sender_full_name": "lqd",
        "timestamp": 1586810529
    },
    {
        "content": "<p><em>ah</em></p>",
        "id": 193818853,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586810532
    },
    {
        "content": "<p>interesting</p>",
        "id": 193818870,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586810534
    },
    {
        "content": "<p>let met get you a link</p>",
        "id": 193818941,
        "sender_full_name": "lqd",
        "timestamp": 1586810581
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/70546/files#diff-b05a06387184e401e73a1e9da3fdff0f\" title=\"https://github.com/rust-lang/rust/pull/70546/files#diff-b05a06387184e401e73a1e9da3fdff0f\">this</a> was the meat of it (and then this required to update the facts in the polonius repo ofc)</p>",
        "id": 193818993,
        "sender_full_name": "lqd",
        "timestamp": 1586810618
    },
    {
        "content": "<p>(the rest of the changes were about updating the test expectations)</p>",
        "id": 193819014,
        "sender_full_name": "lqd",
        "timestamp": 1586810634
    },
    {
        "content": "<p>so I don't think anything changed in the polonius rules about move errors if I understood everything correctly, and it's still supposed to match what you and Albin devised last time :)</p>",
        "id": 193819209,
        "sender_full_name": "lqd",
        "timestamp": 1586810739
    },
    {
        "content": "<p>(we <em>might</em> have to change some things as they're now a bit slow)</p>",
        "id": 193819367,
        "sender_full_name": "lqd",
        "timestamp": 1586810813
    },
    {
        "content": "<p>does that clear things up ?</p>",
        "id": 193820185,
        "sender_full_name": "lqd",
        "timestamp": 1586811337
    },
    {
        "content": "<p>interesting</p>",
        "id": 193935597,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586887446
    },
    {
        "content": "<p>so basically we had an access at the <em>start</em> point</p>",
        "id": 193935605,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586887453
    },
    {
        "content": "<p>and you moved it to the <em>mid</em> point</p>",
        "id": 193935643,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586887477
    },
    {
        "content": "<p>I think that sounds right, yes</p>",
        "id": 193935669,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586887496
    },
    {
        "content": "<p>most things happen at the mid point</p>",
        "id": 193935681,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586887499
    },
    {
        "content": "<p>I have to remember what the role of <em>start</em> point was exactly -- I think it had something to do with higher-ranked regions</p>",
        "id": 193935729,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586887523
    },
    {
        "content": "<p>yes only accesses were at the start point, which created move errors on calls initializing return places at the start point of the following block</p>",
        "id": 193947756,
        "sender_full_name": "lqd",
        "timestamp": 1586893508
    },
    {
        "content": "<p>it sounded right to me as well, and overall fixed the false positives in the local datasets, but the only useful validation will be rustcs tests, when we do emit the move errors in rustc</p>",
        "id": 193947999,
        "sender_full_name": "lqd",
        "timestamp": 1586893642
    },
    {
        "content": "<p>(loan invalidations also happen on the start point)</p>",
        "id": 193948690,
        "sender_full_name": "lqd",
        "timestamp": 1586893989
    },
    {
        "content": "<p>So exciting.</p>",
        "id": 194032584,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586958467
    }
]