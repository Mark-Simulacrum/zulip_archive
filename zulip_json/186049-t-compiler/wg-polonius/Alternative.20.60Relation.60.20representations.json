[
    {
        "content": "<p>I alluded to this in <a class=\"stream-topic\" data-stream-id=\"186049\" href=\"/#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Optimization.20PRs\">#t-compiler/wg-polonius &gt; Optimization PRs</a>, but I don't see a fundamental reason why <code>Relation</code>s must be stored as lists of tuples. Am I missing something? One obstacle is the fact that <code>Leaper</code> currently operates on <code>Vec&lt;&amp;'_ Val&gt;</code> instead of <code>Vec&lt;Val&gt;</code>, but this can be changed (see <a href=\"https://github.com/rust-lang/datafrog/issues/19\">rust-lang/datafrog#19</a>).</p>",
        "id": 221365937,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1609530715
    },
    {
        "content": "<p>We spend a lot of time binary searching <code>cfg_edge</code> while running the initialization rules, and I suspect there's other dense relations that would benefit from <code>O(1)</code> lookup on their keys</p>",
        "id": 221366068,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1609530889
    },
    {
        "content": "<p>I don't think there are fundamental reasons for that, just that it's easy to implement a datafrog engine that way</p>",
        "id": 221372072,
        "sender_full_name": "lqd",
        "timestamp": 1609540030
    },
    {
        "content": "<p>some context which might be important: I think Frank did most of this in a weekend or something</p>",
        "id": 221372084,
        "sender_full_name": "lqd",
        "timestamp": 1609540064
    },
    {
        "content": "<p>and that was enough to be better than using DD (both in compile time and running time)</p>",
        "id": 221372138,
        "sender_full_name": "lqd",
        "timestamp": 1609540139
    },
    {
        "content": "<p>Leapers did seem to offer a way to separate the representation (or at least offer a way to make different representations work together), but now that I think about it I've only experimented with different relations for antijoins with bloom and counting quotient filters, without changing or abstracting the representation. This impression was probably wrong, I didn't even hit the API snag you mention</p>",
        "id": 221372453,
        "sender_full_name": "lqd",
        "timestamp": 1609540624
    },
    {
        "content": "<p>(also note: the move/init rules you mention above are incomplete, probably contain bugs, and are currently doing more work than necessary; albin and niko worked on them last sprint in this thread <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/move.20error.20reporting\">https://rust-lang.zulipchat.com/#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/move.20error.20reporting</a> if you're interested in them specifically)</p>",
        "id": 221373243,
        "sender_full_name": "lqd",
        "timestamp": 1609541861
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Alternative.20.60Relation.60.20representations/near/221372084\">said</a>:</p>\n<blockquote>\n<p>some context which might be important: I think Frank did most of this in a weekend or something</p>\n</blockquote>\n<p>Souffle also doesn't use an \"adjacency list\" representation, it's BTrees or a custom radix tree (called a brie), so it's not just datafrog, but point taken.</p>",
        "id": 221374799,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1609544386
    },
    {
        "content": "<p>if we're optimizing binary search, I was thinking some <code>Relation</code>s could also benefit from having a different layout while still using the same representation, like using van Emde Boas or Eytzinger layouts (classic paper from pvk <a href=\"https://arxiv.org/abs/1509.05053\">https://arxiv.org/abs/1509.05053</a>) for our joins with static inputs</p>",
        "id": 221523817,
        "sender_full_name": "lqd",
        "timestamp": 1609767618
    },
    {
        "content": "<p>I wonder how much time we spend doing range queries vs. single-element lookups. sorted lists are optimal in terms of instructions  once the first element is found, and should be close to cache-optimal as well. I wonder how vEB trees or B-trees stack up here.</p>",
        "id": 221581571,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1609794852
    },
    {
        "content": "<p>Also, I wonder how much of datafrog's performance is due to the way the <code>stable</code> part of a variable is optimized for writes</p>",
        "id": 221581640,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1609794883
    },
    {
        "content": "<p>(Not sure what to call the list of sorted lists with exponentially increasing lengths, it's kinda like an in-memory log-structured merge tree I guess?)</p>",
        "id": 221581791,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1609794949
    },
    {
        "content": "<p>It's gotta be a lot faster than writing to the middle of a B-tree.</p>",
        "id": 221581913,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1609794985
    },
    {
        "content": "<p>(One of the optimizations I was gonna investigate was a larger minimum capacity for  the smallest list in <code>stable</code>. It should be a cache-line's worth of data, but I think it's 1 right now?)</p>",
        "id": 221582259,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1609795155
    },
    {
        "content": "<p>Anyways, I'm kind of off optimizing datafrog right now. Time would be better spent adding features (arithmetic predicates, automatic stratification, etc.) IMO.</p>",
        "id": 221582695,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1609795366
    },
    {
        "content": "<p>it very well could be</p>",
        "id": 221583391,
        "sender_full_name": "lqd",
        "timestamp": 1609795734
    },
    {
        "content": "<p>(esp. if it were to be used in rustc for some of the various analyses?)</p>",
        "id": 221583594,
        "sender_full_name": "lqd",
        "timestamp": 1609795831
    }
]