[
    {
        "content": "<p>Take a look at this branch (all tests pass, but I had to edit the facts so...)</p>\n<p><a href=\"https://github.com/nikomatsakis/polonius.next/pull/15\">https://github.com/nikomatsakis/polonius.next/pull/15</a></p>\n<p>The idea is reintroduce loans, but I called them <em>leases</em>.</p>",
        "id": 259579895,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635539618
    },
    {
        "content": "<p>Cause I think that name works better :)</p>",
        "id": 259579914,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635539630
    },
    {
        "content": "<p>I personally found it easier to think about</p>",
        "id": 259579999,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635539657
    },
    {
        "content": "<ul>\n<li>Overwriting a place: generate <code>clear_origin</code> for all regions that are (uniquely) in that place (which is all of them)</li>\n</ul>",
        "id": 259580062,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635539691
    },
    {
        "content": "<ul>\n<li>Also, invalidate any leases <em>of</em> that place</li>\n</ul>",
        "id": 259580082,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635539703
    },
    {
        "content": "<ul>\n<li>There is the interesting case of clearing a lease of <code>*x</code> when you write to <code>x</code></li>\n</ul>",
        "id": 259580098,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635539714
    },
    {
        "content": "<p>I didn't try to be smart, so I introduced</p>\n<ul>\n<li><code>member_on_entry</code></li>\n<li><code>member_on_exit</code></li>\n</ul>\n<p>though I suspect we could coallesce the relations.</p>",
        "id": 259580183,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635539762
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Reintroducing.20loans/near/259579895\">said</a>:</p>\n<blockquote>\n<p>The idea is reintroduce loans, but I called them <em>leases</em>.</p>\n</blockquote>\n<p>dada !</p>",
        "id": 259580245,
        "sender_full_name": "lqd",
        "timestamp": 1635539802
    },
    {
        "content": "<p>:whistle:</p>",
        "id": 259580258,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635539815
    },
    {
        "content": "<p>thanks for fixing the unroll rules there as well</p>",
        "id": 259581481,
        "sender_full_name": "lqd",
        "timestamp": 1635540567
    },
    {
        "content": "<p>actually, I have a question about those</p>",
        "id": 259581609,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635540636
    },
    {
        "content": "<p>but let me finish reading the changes first</p>",
        "id": 259581624,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635540643
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>// * Generate `clear_origin` for each loan origin that is cleared by reads/writes\n//     * e.g., if there is a lease `&#39;L_*temp` where `temp: &amp;T` and this expression writes to `temp`, then `&#39;L_*temp` is cleared,\n//       not invalidated. This is because memory at `*temp` is not owned, so it is not freed by writing to `temp`,\n//       but `*temp` no longer names the same memory anymore.\n</code></pre></div>",
        "id": 259581885,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635540800
    },
    {
        "content": "<p>/me not being a native english speaker doesn't see much of the semantic differences between lease, loan, and borrow</p>",
        "id": 259581933,
        "sender_full_name": "lqd",
        "timestamp": 1635540827
    },
    {
        "content": "<p>this seems... wrong now? It's the same logic as before (which is also present in a different formulation for <code>clear_lease</code> below), but loan origins are not a thing anymore in this model. And in particular, there is no <em>origin</em> <code>'L_*temp</code></p>",
        "id": 259582069,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635540897
    },
    {
        "content": "<p>the only actual origins that get cleared should be those that are overwritten by assignments</p>",
        "id": 259582115,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635540938
    },
    {
        "content": "<p>right?</p>",
        "id": 259582121,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635540940
    },
    {
        "content": "<p>seems like should be <code>clear_lease</code> right ?</p>",
        "id": 259582369,
        "sender_full_name": "lqd",
        "timestamp": 1635541067
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Reintroducing.20loans/near/259581481\">said</a>:</p>\n<blockquote>\n<p>thanks for fixing the unroll rules there as well</p>\n</blockquote>\n<p>re: unrolling, the new comment says</p>\n<div class=\"codehilite\"><pre><span></span><code>// * For every `&amp;&#39;L_P P` expression assigned to a place of type `&amp;&#39;O T`:\n//          * If `P = *Q` where `Q: &amp;&#39;Q mut T`, then `&#39;Q &lt;= &#39;O`\n</code></pre></div>\n<p>but then in the test case that has unrolling there is</p>\n<div class=\"codehilite\"><pre><span></span><code>d: &quot;y = &amp;&#39;L_*x mut *x&quot; {\n    // Unroll `*x` where `x: &amp;&#39;x mut u32`\n    introduce_subset(&#39;x, &#39;y)\n</code></pre></div>",
        "id": 259582504,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635541137
    },
    {
        "content": "<p>I think we noticed before that while these look the same, they actually mean the reverse thing, so only one of these can be right</p>",
        "id": 259582559,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635541166
    },
    {
        "content": "<p>To me, it makes sense the way it is in the facts. That is, instead of <code>'x -&gt; 'L_*x</code> and then <code>'L_*x -&gt; 'y</code> (which was the result before), we now have <code>'x -&gt; 'y</code> directly</p>",
        "id": 259582738,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635541233
    },
    {
        "content": "<p>That's still a somewhat subtle change, but it has the same effect logially</p>",
        "id": 259582778,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635541265
    },
    {
        "content": "<p>so I think the written rules would need to be <code>'O &lt;= 'Q</code>?</p>",
        "id": 259582870,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635541317
    },
    {
        "content": "<p>I think with the new precision \"assigned to a place of type <code>&amp;'O T</code>\" it looks good ?</p>",
        "id": 259582944,
        "sender_full_name": "lqd",
        "timestamp": 1635541343
    },
    {
        "content": "<p>(or maybe we want to get rid of this notation completely for these docs, since this is at least the second time we get hung up on this)</p>",
        "id": 259582969,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635541359
    },
    {
        "content": "<p>let me re-read this more carefully</p>",
        "id": 259583001,
        "sender_full_name": "lqd",
        "timestamp": 1635541389
    },
    {
        "content": "<p>(right after I finish this call :)</p>",
        "id": 259583315,
        "sender_full_name": "lqd",
        "timestamp": 1635541584
    },
    {
        "content": "<p>I'm looking for the last time we talked about this</p>",
        "id": 259583355,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635541621
    },
    {
        "content": "<p><a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Sprint.202021-10-15.20prep/near/257263557\">https://rust-lang.zulipchat.com/#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Sprint.202021-10-15.20prep/near/257263557</a> <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> this is what you previously mentioned</p>",
        "id": 259583581,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635541743
    },
    {
        "content": "<p>and I think  the same issue exists here</p>",
        "id": 259583602,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635541764
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Reintroducing.20loans/near/259582369\">said</a>:</p>\n<blockquote>\n<p>seems like should be <code>clear_lease</code> right ?</p>\n</blockquote>\n<p>also yes on this, but there is a paragraph for leases right below that has the same example again, and nothing about the actual clear rules for origins. So that's why I assumed that to be the thing to change</p>",
        "id": 259583713,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635541822
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Reintroducing.20loans/near/259579895\">said</a>:</p>\n<blockquote>\n<p>The idea is reintroduce loans, but I called them <em>leases</em>.</p>\n</blockquote>\n<p>(completely unrelated, this sounds like it could be coming straight from marketing ^^)</p>",
        "id": 259583770,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635541872
    },
    {
        "content": "<p>Still in the call so could be that I'm missing things and misunderstanding the difference you're seeing (esp if it's related to the fat that Q is a &amp;mut),  but here's how I quickly read that before:</p>\n<p>from &amp;'O T = &amp;'L_P P<br>\nwe have 'L_P &lt;: 'O</p>\n<p>if P = *Q, where Q: &amp;'Q T, 'Q &lt;: 'L_P</p>\n<p>and transitively, 'Q &lt;: 'O ?</p>",
        "id": 259584342,
        "sender_full_name": "lqd",
        "timestamp": 1635542176
    },
    {
        "content": "<p>what is <code>&lt;:</code> now?</p>",
        "id": 259584534,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635542256
    },
    {
        "content": "<p>subset, outlives</p>",
        "id": 259584544,
        "sender_full_name": "lqd",
        "timestamp": 1635542266
    },
    {
        "content": "<p>flows into</p>",
        "id": 259584553,
        "sender_full_name": "lqd",
        "timestamp": 1635542270
    },
    {
        "content": "<p>is it <code>&lt;=</code> as in the comment, or <code>:</code> outlives</p>",
        "id": 259584558,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635542273
    },
    {
        "content": "<p>or something else</p>",
        "id": 259584591,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635542282
    },
    {
        "content": "<p>(I'm asking because this is precisely the issue - I think we agree on what the actual lifetimes look like, but from your previous comment I was under the impression that <code>&lt;=</code> is <em>reversed</em>  from <code>:</code>)</p>",
        "id": 259584661,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635542353
    },
    {
        "content": "<p>I don't remember if Niko meant &lt;= shorter in this document ^^ but I thought they said last time that it was the regular subset/outlives</p>",
        "id": 259584663,
        "sender_full_name": "lqd",
        "timestamp": 1635542354
    },
    {
        "content": "<p>and in the comments so far <code>&lt;:</code> was the subtyping relationship, so that kinda didn't help my confusion <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 259584691,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635542390
    },
    {
        "content": "<p>so before the PR we had a borrow of <code>P = *Q</code> where <code>Q: &amp;'O mut T</code>, then <code>'L_P &lt;= O</code></p>",
        "id": 259584890,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635542520
    },
    {
        "content": "<p>(<code>'O</code> is now something else)</p>",
        "id": 259584984,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635542554
    },
    {
        "content": "<p>either it was correct before, and &lt;= meant shorter, or it is now correct and &lt;= means longer (and subset) :)</p>",
        "id": 259584985,
        "sender_full_name": "lqd",
        "timestamp": 1635542555
    },
    {
        "content": "<p>I think it's the second case</p>",
        "id": 259584993,
        "sender_full_name": "lqd",
        "timestamp": 1635542560
    },
    {
        "content": "<p>which translated to <code>introduce_subset('O, 'L_P)</code> in the tests</p>",
        "id": 259585011,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635542571
    },
    {
        "content": "<p>so whichever of the two it is, the meaning of <code>&lt;=</code> seems to have flipped with this PR</p>",
        "id": 259585089,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635542635
    },
    {
        "content": "<p>and we can decide what to do with that</p>",
        "id": 259585141,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635542648
    },
    {
        "content": "<p>I think my preference would be to just replace the comments to contain the actual facts to avoid this confusion</p>",
        "id": 259585380,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635542794
    },
    {
        "content": "<p>the imprecision somewhere makes it hard indeed to say whether the operator was wrong or the operands were, but as we agree on the lifetimes, the actual facts should be <code>introduce_subset('x, 'y)</code> for a <code>'x &lt;: 'y</code> (which is also <code>'x: 'y</code>)</p>",
        "id": 259589874,
        "sender_full_name": "lqd",
        "timestamp": 1635545991
    },
    {
        "content": "<p>(like <a href=\"https://github.com/nikomatsakis/polonius.next/blob/3f27a7cc363e217e533f994850214d269eeaf606/tests/killing-and-murder/program.txt#L42-L43\">https://github.com/nikomatsakis/polonius.next/blob/3f27a7cc363e217e533f994850214d269eeaf606/tests/killing-and-murder/program.txt#L42-L43</a>)</p>",
        "id": 259589929,
        "sender_full_name": "lqd",
        "timestamp": 1635546005
    },
    {
        "content": "<p>(or sometimes <code>introduce_lease</code> with this PR, yeah having the actual facts would now be interesting <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span> )</p>",
        "id": 259590596,
        "sender_full_name": "lqd",
        "timestamp": 1635546460
    },
    {
        "content": "<p>I just read the naive rules of regular Polonius again and it was striking how similar the auxiliary rules have become now (subsets and liveness).</p>",
        "id": 259695426,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635549172
    },
    {
        "content": "<p>The formulation of errors is different conceptually (invalidate live loans vs access invalid loans), but other than that it feels like we have mostly ended up with more distinct and precise notions of clearing things</p>",
        "id": 259695523,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635549256
    },
    {
        "content": "<p>Despite that, there is no doubt in my mind that the <code>.next</code> rules are more intuitive for some reason. They just \"feel\" better</p>",
        "id": 259695596,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635549327
    },
    {
        "content": "<p>At the same time, it seems like computationally we are computing a similar liveness, subset and lease membership information, while additionally propagating invalidation across the CFG</p>",
        "id": 259695735,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635549456
    },
    {
        "content": "<p>That is, I'm pretty sure that it's possible to remove the <code>origin_invalidated</code>relation(s) and error just based on <code>invalidate_origin</code>for member leases (which includes liveness as a propagation constraint) to emulate the original angle on errors</p>",
        "id": 259696140,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635549792
    },
    {
        "content": "<p>And that might actually do less work then if all of this is indeed the case</p>",
        "id": 259696241,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635549866
    },
    {
        "content": "<p>At least there should be a mapping, because invalidating a lease inside a live origin means that origin will later be accessed without being cleared in between, so be accessed while invalidated</p>",
        "id": 259696573,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635550200
    },
    {
        "content": "<p>that's what I was trying to convey last time, adding liveness makes .next a lot closer to the current rules (and the intuitiveness could just be familiarity) and makes it less appealing to me personally</p>",
        "id": 259698223,
        "sender_full_name": "lqd",
        "timestamp": 1635551857
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"337115\">@Domenic Quirl</span> <code>'a: 'b</code> is outlives; it is also <code>'a &lt;= 'b</code> in polonius (subset)</p>",
        "id": 259873851,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635778608
    },
    {
        "content": "<p>for <em>lifetimes</em> (sets of points), it is <code>&gt;=</code></p>",
        "id": 259873890,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635778624
    },
    {
        "content": "<p>but for sets of leases, it is <code>&lt;=</code></p>",
        "id": 259873904,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635778631
    },
    {
        "content": "<p>think about this:</p>",
        "id": 259873919,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635778643
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">p</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">p</span> <span class=\"kt\">u32</span>\n<span class=\"nc\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">q</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">q</span> <span class=\"kt\">u32</span>\n\n<span class=\"nc\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 259873948,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635778659
    },
    {
        "content": "<p>this is legal if <code>&amp;'q u32 &lt;: &amp;'p u32</code> and hence <code>'q: 'p</code></p>",
        "id": 259873965,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635778670
    },
    {
        "content": "<p>i.e., <code>'q</code> is flowing into <code>'p</code></p>",
        "id": 259873973,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635778675
    },
    {
        "content": "<p>for origins, this means that <code>'p</code>'s origin is a <em>superset</em> of <code>q</code> -- it comes from <code>q</code>, but maybe other places too</p>",
        "id": 259874058,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635778704
    },
    {
        "content": "<p>hence <code>'q &lt;= 'p</code></p>",
        "id": 259874061,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635778706
    },
    {
        "content": "<p>for lifetimes, <code>'q</code> has more points in time than <code>'p</code>, because otherwise <code>'p</code> could be used somewhere that <code>'q</code> is not valid, and <code>'p</code> may contain data from <code>'q</code>...</p>",
        "id": 259874136,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635778753
    },
    {
        "content": "<p>I can't quite tell if that answers your question :)</p>",
        "id": 259874176,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635778767
    },
    {
        "content": "<p>I'll have to double check the text I wrote to see that it is consistent</p>",
        "id": 259874185,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635778773
    },
    {
        "content": "<p>it's easy to get turned out around here</p>",
        "id": 259874195,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635778778
    },
    {
        "content": "<p><code>'p</code> and <code>'q</code> are visually quite similar making this for a confusing read <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 259874219,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1635778794
    },
    {
        "content": "<p>doh</p>",
        "id": 259875574,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635779409
    },
    {
        "content": "<p><code>a = b</code></p>",
        "id": 259875585,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635779413
    },
    {
        "content": "<p>data from <code>b</code> flows into <code>a</code>, so <code>&amp;'b u32 &lt;: &amp;'a u32</code></p>",
        "id": 259875599,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635779416
    },
    {
        "content": "<p>either way, we write this as <code>'b: 'a</code></p>",
        "id": 259875629,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635779431
    },
    {
        "content": "<p>in lease model, this means that <code>'b &lt;= 'a</code> (covariant) -- i.e., the set of leases in <code>'b</code> are a subset of those in <code>'a</code>, as it may come from add'l places</p>",
        "id": 259875659,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635779447
    },
    {
        "content": "<p>in \"points in time\" model, this means that <code>'a &lt;= 'b</code> (contravariant!), because the source must outlive the target</p>",
        "id": 259875717,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635779471
    },
    {
        "content": "<p>I'm curious <span class=\"user-mention\" data-user-id=\"118594\">@Dylan MacKenzie (ecstatic-morse)</span> whether you had a chance to review <a href=\"https://github.com/nikomatsakis/polonius.next/pull/15\">https://github.com/nikomatsakis/polonius.next/pull/15</a></p>",
        "id": 259923970,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635802122
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Reintroducing.20loans/near/259874185\">said</a>:</p>\n<blockquote>\n<p>I'll have to double check the text I wrote to see that it is consistent</p>\n</blockquote>\n<p>I believe what I wrote is consistent, but I think I will rewrite it to use the <code>:</code> notation instead of <code>&lt;=</code></p>",
        "id": 259924048,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635802174
    },
    {
        "content": "<p>(fixed)</p>",
        "id": 259924259,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635802258
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Reintroducing.20loans/near/259874176\">said</a>:</p>\n<blockquote>\n<p>I can't quite tell if that answers your question :)</p>\n</blockquote>\n<p>It was certainly helpful... but I think </p>\n<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Reintroducing.20loans/near/259924048\">said</a>:</p>\n<blockquote>\n<p>I will rewrite it to use the <code>:</code> notation instead of <code>&lt;=</code></p>\n</blockquote>\n<p>this is the best possible outcome regardless ^^</p>",
        "id": 259933991,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635808884
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Reintroducing.20loans/near/259698223\">said</a>:</p>\n<blockquote>\n<p>adding liveness makes .next a lot closer to the current rules and makes it less appealing to me personally</p>\n</blockquote>\n<p>This got me thinking again about other ways to do liveness <em>within purely forward propagation</em>. After tinkering with it over the week-end I can now confidently say that that is pain - at least for me, it got to the point where I as a mere human just became increasingly confused about what effects are supposed to happen when rather quickly. <em>But</em> I think it's possible to track enough info going forward to know what subset relations to activate after seeing the relevant variables as live.</p>\n<p>I made <a href=\"https://github.com/domenicquirl/polonius.next/blob/purely-forward-liveness/dl/polonius_dl.dl\">https://github.com/domenicquirl/polonius.next/blob/purely-forward-liveness/dl/polonius_dl.dl</a> after I got fed up trying to encode this in Soufflé and moved to DDLog, because that has built-in collection types (sets, in particular). It matches the tests that we have so far, which might not mean I got everything completely right, but should be sufficient as a POC.</p>",
        "id": 259935400,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635809410
    },
    {
        "content": "<p>I'll say that I have no idea what that means, or if that even means anything</p>",
        "id": 259935435,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635809444
    },
    {
        "content": "<p>The number of tuples is surprisingly low given that it does set accumulation, but at the very least conceptually it's very much a \"could\" where I haven't let myself be stopped by the \"should\". I'd certainly rather have some backwards-ness than having to think about and maintain this all day ^^</p>",
        "id": 259935619,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635809609
    },
    {
        "content": "<p>(it also doesn't actually help with your/our gripe of needing liveness, since it's just represented in a different, perhaps more convoluted way, so, yeah.)</p>",
        "id": 259935732,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635809687
    },
    {
        "content": "<p>but it's interesting</p>",
        "id": 259935859,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635809719
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Reintroducing.20loans/near/259923970\">said</a>:</p>\n<blockquote>\n<p>I'm curious <span class=\"user-mention silent\" data-user-id=\"118594\">Dylan MacKenzie (ecstatic-morse)</span> whether you had a chance to review <a href=\"https://github.com/nikomatsakis/polonius.next/pull/15\">https://github.com/nikomatsakis/polonius.next/pull/15</a></p>\n</blockquote>\n<p>I looked over the handwritten facts pretty closely this evening and left a few comments. I don't think I have as good of an intuition for the rules themselves yet.</p>\n<p>One of the things I liked about the old formulation was that <code>origin_live_at</code> was self-contained, whereas in this one <code>clear_origin</code> is doing double duty, making origins go dead when they are assigned to and also participating in <code>origin_invalidated</code> and <code>member</code>. This would be fine if <code>clear_origin</code> had a more straightforward meaning in Rust like <code>access_origin</code> does. Maybe it does, but I just don't know what it is. Overwriting a variable/path is obvious, but I don't see the connection between that and the write to <code>x</code> clearing <code>*x</code>.</p>\n<p>Am I right that this version gives us the \"field-sensitive\" liveness that NIko mentioned elsewhere, since <code>access_origin</code> and <code>clear_origin</code> are able to handle projections.</p>",
        "id": 259949603,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1635823551
    },
    {
        "content": "<p>Ah, I think Domenic already addressed my review comment at the top of this thread.</p>",
        "id": 259949657,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1635823589
    },
    {
        "content": "<p>is there an explanation/summary about why the concept of \"loan origins\" was introduced ? I missed most of the sprint and would expect you discussed it then, maybe it's in the hackmd ?</p>",
        "id": 259982231,
        "sender_full_name": "lqd",
        "timestamp": 1635852467
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"337115\">Domenic Quirl</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Reintroducing.20loans/near/259935619\">said</a>:</p>\n<blockquote>\n<p>I'd certainly rather have some backwards-ness than having to think about and maintain this all day ^^</p>\n</blockquote>\n<p>agreed, if we need liveness we need liveness, might as well use it. it's unfortunate, but then that begs the question of the fundamental differences with the current version.</p>",
        "id": 259982670,
        "sender_full_name": "lqd",
        "timestamp": 1635852742
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"337115\">Domenic Quirl</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Reintroducing.20loans/near/259935732\">said</a>:</p>\n<blockquote>\n<p>(it also doesn't actually help with your/our gripe of needing liveness, since it's just represented in a different, perhaps more convoluted way, so, yeah.)</p>\n</blockquote>\n<p>it's not a gripe per se, it's the stated goal of .next. if it doesn't work out, it doesn't work out, it's ok ^^</p>",
        "id": 259982905,
        "sender_full_name": "lqd",
        "timestamp": 1635852910
    },
    {
        "content": "<p>the more precise control of effects over time rather than space allows to have our usual cfgs (and not double the points) compared to today, so that's a big yes from me; but at the same time, it is untested. So I'm not sure we're in a position to compare both approaches just yet (at first glance, the differences are small enough to wonder whether it just moves the error locations). That being said, the formulation with loans does look clearer than the one with \"loan origins\" (but I assumed that was more because I wasn't sure what they were modeling, hence the question about them above) apart from the same questions dylan and domenic pointed out above about clearing origins/loans</p>",
        "id": 259984474,
        "sender_full_name": "lqd",
        "timestamp": 1635853886
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Reintroducing.20loans/near/259982231\">said</a>:</p>\n<blockquote>\n<p>is there an explanation/summary about why the concept of \"loan origins\" was introduced ? I missed most of the sprint and would expect you discussed it then, maybe it's in the hackmd ?</p>\n</blockquote>\n<p>the short version is that it was necessary to move from the (MIR-translation based) <code>kill_origin</code> input facts to actual computed liveness</p>",
        "id": 259986524,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635855076
    },
    {
        "content": "<p>the <code>kill</code> facts were only \"generated\" (hand-written) for origins in the types of variables. Doing a liveness computation generally for all origins means it affects type origins and loan origins (those of borrows) equally.</p>",
        "id": 259986732,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635855234
    },
    {
        "content": "<p>And the logic will always kill something like an <code>'L_x</code>, because these origins are never accessed directly (because there is no way to reference them)</p>",
        "id": 259986893,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635855338
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Reintroducing.20loans/near/259984474\">said</a>:</p>\n<blockquote>\n<p>the more precise control of effects over time rather than space allows to have our usual cfgs (and not double the points)</p>\n</blockquote>\n<p>I would argue that to some extent this is still reflected in having <code>relation_on_entry</code> and <code>relation_on_entry</code> facts, though perhaps in a nicer manner than actually splitting the CFG nodes</p>",
        "id": 259987166,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635855522
    },
    {
        "content": "<p>yes but some of these on_entry + on_exit relations' existence doesn't seem fundamental to this PR ? while splitting the cfg also required duplicating the liveness data to these new points.</p>\n<p>maybe it looks like it helps more than it actually does</p>",
        "id": 259988699,
        "sender_full_name": "lqd",
        "timestamp": 1635856393
    },
    {
        "content": "<p>It's not specifically the PR, the current <code>main</code> rules from last sprint already have this split for their version of liveness and, notably, for the subset relation</p>",
        "id": 259989246,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635856724
    },
    {
        "content": "<p>Having that might be better than double nodes (idk, but I do find it to be reasonably understandable logically at least). My intention was more to point out that these relations are a different representation of the same underlying thing, namely that at the start of a node and at the end of a node different properties hold</p>",
        "id": 259989456,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635856842
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"118594\">Dylan MacKenzie (ecstatic-morse)</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Reintroducing.20loans/near/259949603\">said</a>:</p>\n<blockquote>\n<p>This would be fine if <code>clear_origin</code> had a more straightforward meaning in Rust like <code>access_origin</code> does. Maybe it does, but I just don't know what it is.</p>\n</blockquote>\n<p>I think it does -- I believe (in this formulation) that it corresponds specifically to \"all values with this origin in their type were overwritten (and hence now refer to something different\".</p>\n<blockquote>\n<p>Overwriting a variable/path is obvious, but I don't see the connection between that and the write to x clearing *x.</p>\n</blockquote>\n<p>Well, if <code>x</code> is has changed then <code>*x</code> has too, no?</p>\n<p>Ah, I guess you are referring to the use of <code>clear_origin</code> for when we write to <code>temp</code> and we wish to clear loans of <code>*temp</code>? But that is <code>clear_lease</code>, right? So presumably not.</p>",
        "id": 259998814,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635861642
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"337115\">Domenic Quirl</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Reintroducing.20loans/near/259583713\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Reintroducing.20loans/near/259582369\">said</a>:</p>\n<blockquote>\n<p>seems like should be <code>clear_lease</code> right ?</p>\n</blockquote>\n<p>also yes on this, but there is a paragraph for leases right below that has the same example again, and nothing about the actual clear rules for origins. So that's why I assumed that to be the thing to change</p>\n</blockquote>\n<p>Looks like Domenic and Remy already discussed this above. Perhaps the fact generation section I was looking at is outdated and can be removed?</p>",
        "id": 260026806,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1635872784
    },
    {
        "content": "<p>So, yes <code>clear_origin</code> is whenever a variable (with an origin in its type) is written to</p>",
        "id": 260026926,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1635872847
    },
    {
        "content": "<p>In traditional pointer analyses, <code>*x</code> and <code>x</code> are treated as totally different places, which I think is contributing to my confusion.</p>",
        "id": 260027575,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1635873151
    },
    {
        "content": "<p>Here, when you overwrite <code>x</code>, you can no longer access the set of loans in <code>*x</code> via that name, so we clear <code>*x</code>. In our framework, clearing does not preclude accesses through some other path (e.g. <code>*y</code> if <code>y == x</code>).</p>",
        "id": 260027762,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1635873248
    },
    {
        "content": "<p>So maybe we should just remove the term \"lease origin\" from that section? Is the distinction from a regular origin meaningful in this context?</p>",
        "id": 260027925,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1635873353
    },
    {
        "content": "<p>I've also added a few comments</p>",
        "id": 260057128,
        "sender_full_name": "lqd",
        "timestamp": 1635886752
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"118594\">@Dylan MacKenzie (ecstatic-morse)</span> I pushed some comments that tried to give a clearer explanation for <em>what</em> each input fact means</p>",
        "id": 260130791,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635944773
    },
    {
        "content": "<p>I'm thinking that if we start to incorporate the \"initialization\" analysis, things might wind up being nicer</p>",
        "id": 260131657,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635945196
    },
    {
        "content": "<p>e.g. the base fact for <code>x = y</code> would be <code>assigned(x)</code> instead</p>",
        "id": 260131672,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635945203
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> regarding the re-introduction of leases: it's not an open and shut case, but what we found in discussing was that there were several cases where we wanted to treat \"loan origins\" differently from \"normal origins\", and that some of the complexity in the rules was deriving from trying to conflate them.</p>",
        "id": 260133407,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635946059
    },
    {
        "content": "<p>One prime example was the rule that said: given an <code>&amp;'Lx x</code> expression, you want to \"clear\" <code>'Lx</code></p>",
        "id": 260133448,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635946078
    },
    {
        "content": "<p>that rule was clearly <em>needed</em> but it was hard to square it intuitively</p>",
        "id": 260133509,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635946086
    },
    {
        "content": "<p>it just goes away with leases</p>",
        "id": 260133518,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635946091
    },
    {
        "content": "<p>the reason for that rule was that, when you initialize <code>x</code> to begin with, you have <code>x = 5</code>, that was introducing an \"invalidate origin\" rule</p>",
        "id": 260133547,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635946108
    },
    {
        "content": "<p>and we needed to clear that invalidation</p>",
        "id": 260133560,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635946114
    },
    {
        "content": "<p>but in fact invalidating a <em>lease</em> is instantaneous, and it just causes any origins that <em>contain</em> the lease to be invalidated</p>",
        "id": 260133605,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635946145
    },
    {
        "content": "<p>in a case like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"w\"></span>\n<span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">x</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 260133627,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635946157
    },
    {
        "content": "<p>there are no origins containing the lease yet (it hasn't started)</p>",
        "id": 260133635,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635946165
    },
    {
        "content": "<p>so it's a no-op</p>",
        "id": 260133640,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635946166
    },
    {
        "content": "<p>we furthermore reasoned that the <em>actual number of tuples</em> was no different, we're just giving them different <em>names</em></p>",
        "id": 260133666,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635946182
    },
    {
        "content": "<p>that said, <span class=\"user-mention\" data-user-id=\"337115\">@Domenic Quirl</span> remained unconvinced :)</p>",
        "id": 260133788,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635946224
    },
    {
        "content": "<p>To clarify, unconvinced only in the sense that I saw an opportunity to relatively closely align the rules with current \"things\" in Rust in that</p>\n<ul>\n<li>regular \"type\" origins ^= lifetimes the user writes (or elides),</li>\n<li>\"loan\" origins ^= lifetimes of borrows, and then</li>\n<li>\"placeholder\" origins ^= \"generic\"/named lifetimes (the new rules don't have placeholders yet, but there was some discussion during the call that modelling them as loans <em>could be</em> less intuitive than origins)</li>\n</ul>\n<p>all potentially modulo some details, but I feel drawn to such an alignment because imo it increases understandability of the rules by people that are not us</p>",
        "id": 260134688,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635946621
    },
    {
        "content": "<p>With the proposed rules with loans, some things definitely become nicer. A good example of this I think is exactly the \"marking of loan origins\" in the liveness rules - with loans, \"a loan has been propagated and is now invalidated for a live origin\" is better/more intuitive too me than \"for technical reasons we consider loan origins to always be live (but only because there is no real way to ever access them, so what are we to do)\"</p>",
        "id": 260134933,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635946744
    },
    {
        "content": "<p>But I wanted to point out that there are <em>also</em> arguments for the \"loan origin\" version, and that I felt like at least part of why this <code>mark_as_loan_origin</code> stuff seems confusing may be that the naming is unclear/could better reflect what this models</p>",
        "id": 260135202,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635946863
    },
    {
        "content": "<p>thanks a bunch for the explanations ! current polonius also had at some point a vocabulary of \"loan origins\" (but just in relations, they had no semantic differences): \"borrow regions\"</p>",
        "id": 260173854,
        "sender_full_name": "lqd",
        "timestamp": 1635962822
    },
    {
        "content": "<p>at least I'm still hopeful that loans are not fundamental to the model</p>",
        "id": 260176361,
        "sender_full_name": "lqd",
        "timestamp": 1635963865
    },
    {
        "content": "<p>(and hope we don't forget the people who <em>currently</em> understand the rules and are not us, and not cause them too many unneeded changes, like terminology for example :)</p>",
        "id": 260177448,
        "sender_full_name": "lqd",
        "timestamp": 1635964335
    },
    {
        "content": "<p>btw I've checked this PR's <code>on_entry</code>/<code>on_exit</code> relations that we've discussed recently, and they all seem trivially inlinable. we could probably mark the <code>on_entry</code> relations <code>inline</code> now if we wanted to (but I don't think it's supported in older versions of soufflé)</p>",
        "id": 260213442,
        "sender_full_name": "lqd",
        "timestamp": 1635983688
    },
    {
        "content": "<p>I've been pondering terminology</p>",
        "id": 260320995,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1636053619
    },
    {
        "content": "<p>I wonder if an <em>origin</em> would, actually, be better called a <em>lease</em> ?</p>",
        "id": 260321006,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1636053629
    },
    {
        "content": "<p>and then a <em>lease</em> would be something like... well, to continue the metaphor it'd probably be a \"property\"</p>",
        "id": 260321035,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1636053650
    },
    {
        "content": "<p>lol</p>",
        "id": 260321037,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1636053651
    },
    {
        "content": "<p>but we could <em>almost</em> just call it a place</p>",
        "id": 260321042,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1636053655
    },
    {
        "content": "<p>i.e., \"a lease is a set of places that may be references (and the way in which they may be referenced)\"</p>",
        "id": 260321059,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1636053663
    },
    {
        "content": "<p>one interesting thing about this:</p>",
        "id": 260321091,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1636053684
    },
    {
        "content": "<p>it is totally reasonable to say \"a lease l1 outlives the lease l2\"</p>",
        "id": 260321108,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1636053690
    },
    {
        "content": "<p>and it has the right intution</p>",
        "id": 260321123,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1636053697
    },
    {
        "content": "<p>\"a lease l1 outlives a lease l2 iff places(l1) subset of places(l2)\"</p>",
        "id": 260321150,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1636053714
    },
    {
        "content": "<p>this makes sense because a lease <em>ends</em> when the places it may be borrowed from are accessed in an incompatible way</p>",
        "id": 260321209,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1636053727
    },
    {
        "content": "<p>it feels like convincing the world to rename from lifetime =&gt; lease would be easier</p>",
        "id": 260321237,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1636053742
    },
    {
        "content": "<p>than lifetime =&gt; origin</p>",
        "id": 260321240,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1636053744
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Reintroducing.20loans/near/260321006\">said</a>:</p>\n<blockquote>\n<p>I wonder if an <em>origin</em> would, actually, be better called a <em>lease</em> ?</p>\n</blockquote>\n<p>\"tranche\"</p>",
        "id": 260324458,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1636055289
    },
    {
        "content": "<p>(although I think it literally means \"portion\", which is kind of the opposite of \"set\")</p>",
        "id": 260324598,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1636055377
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Reintroducing.20loans/near/260130791\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"118594\">Dylan MacKenzie (ecstatic-morse)</span> I pushed some comments that tried to give a clearer explanation for <em>what</em> each input fact means</p>\n</blockquote>\n<p>I did look at this, btw. Would it be useful to compare and contrast the new formulation with the old now that it has converged somewhat?</p>",
        "id": 260324772,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1636055460
    },
    {
        "content": "<p>I think <code>clear_origin</code> and <code>access_origin</code> are now analagous to <code>var_accessed_at</code> and <code>var_defined_at</code> from the liveness rules, but they are now field-sensitive (accessing a projection of a variable no longer accesses all origins in that variable).</p>",
        "id": 260324999,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1636055576
    },
    {
        "content": "<p><code>clear_lease</code> is now exactly <code>kill_loan</code> (unless I've missed something, I was trying to clarify that above)</p>",
        "id": 260325107,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1636055627
    },
    {
        "content": "<p><code>member</code> is <code>origin_contains_loan_at</code>/<code>requires</code></p>",
        "id": 260325343,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1636055741
    },
    {
        "content": "<p>We've also introduced a division between \"entry\" and \"exit\" that doesn't exist in the original rules, which added an extra CFG node to differentiate between the two. I like encoding the division explicitly in the rules, since splitting CFG nodes moves the complexity to fact generation.</p>\n<p>Is this transformation separable? I think it arose because we needed to be more precise about how <code>invalidated</code> gets cleared/propagates, but the old formulation might have benefited as well.</p>",
        "id": 260325840,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1636055958
    },
    {
        "content": "<p>Finally, in the old formulation, <code>invalidated</code> existed at a single point. Now, we propagate it forward and defer the borrow error until an access actually occurs. I still don't understand why this is necessary now that we have included a notion of liveness: the fact that an origin is live means we know that it will be accessed later.</p>",
        "id": 260326252,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1636056120
    },
    {
        "content": "<p>Obviously it's still correct, and it maps more closely to the way we think about error messages, which involve an invalidation followed by an access. But the old formulation had a pretty simple translation: \"an error occurs when a loan is invalidated while still accessible via a live origin\".  I feel like propagating <code>invalidated</code> muddies this somewhat, and I'm not sure what the benefit is.</p>",
        "id": 260326858,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1636056362
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"118594\">Dylan MacKenzie (ecstatic-morse)</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Reintroducing.20loans/near/260324458\">said</a>:</p>\n<blockquote>\n<p>\"tranche\"</p>\n</blockquote>\n<p>based on me not getting this, might not be the best choice for non-native speakers? <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 260327444,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1636056627
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Reintroducing.20loans/near/259698223\">said</a>:</p>\n<blockquote>\n<p>that's what I was trying to convey last time, adding liveness makes .next a lot closer to the current rules (and the intuitiveness could just be familiarity) and makes it less appealing to me personally (it's possible it will need a less complicated optimized variant so I'm still hopeful)</p>\n</blockquote>\n<p>I think what I'm trying to say is that I feel the same as <span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> does.  The latest (sound) version of .next seems like more of a small change to the old ruleset than something new.</p>",
        "id": 260327461,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1636056636
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"337115\">Domenic Quirl</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Reintroducing.20loans/near/260327444\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"118594\">Dylan MacKenzie (ecstatic-morse)</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Reintroducing.20loans/near/260324458\">said</a>:</p>\n<blockquote>\n<p>\"tranche\"</p>\n</blockquote>\n<p>based on me not getting this, might not be the best choice for non-native speakers? <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n</blockquote>\n<p>Parlez-vous Francais?</p>",
        "id": 260327790,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1636056781
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"118594\">Dylan MacKenzie (ecstatic-morse)</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Reintroducing.20loans/near/260325840\">said</a>:</p>\n<blockquote>\n<p>Is this transformation separable? I think it arose because we needed to be more precise about how <code>invalidated</code> gets cleared/propagates, but the old formulation might have benefited as well.</p>\n</blockquote>\n<p>I think we could apply the same thinking to the current formulation to get rid of mid-points</p>",
        "id": 260328092,
        "sender_full_name": "lqd",
        "timestamp": 1636056912
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"118594\">@Dylan MacKenzie (ecstatic-morse)</span>  the french community already has the perfect use of \"tranche\" for a kind of slice <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span>  <a href=\"https://github.com/nox/tranche\">https://github.com/nox/tranche</a></p>",
        "id": 260328334,
        "sender_full_name": "lqd",
        "timestamp": 1636057024
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> I think at least part of the CFG splitting was to handle assignments arising from a function return  (which doesn't take effect along the unwind path) I assume \"entry\" and \"exit\" could solve this, but I wonder how complex the ordering would get.</p>",
        "id": 260328564,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1636057134
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"118594\">Dylan MacKenzie (ecstatic-morse)</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Reintroducing.20loans/near/260327790\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"337115\">Domenic Quirl</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Reintroducing.20loans/near/260327444\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"118594\">Dylan MacKenzie (ecstatic-morse)</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Reintroducing.20loans/near/260324458\">said</a>:</p>\n<blockquote>\n<p>\"tranche\"</p>\n</blockquote>\n<p>based on me not getting this, might not be the best choice for non-native speakers? <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n</blockquote>\n<p>Parlez-vous Francais?</p>\n</blockquote>\n<p>(I don't by the way)</p>",
        "id": 260328611,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1636057156
    },
    {
        "content": "<p>Aber wir können ein bisschen auf Deutsch reden</p>",
        "id": 260328863,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1636057283
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"118594\">Dylan MacKenzie (ecstatic-morse)</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Reintroducing.20loans/near/260326252\">said</a>:</p>\n<blockquote>\n<p>Finally, in the old formulation, <code>invalidated</code> existed at a single point. Now, we propagate it forward and defer the borrow error until an access actually occurs. I still don't understand why this is necessary now that we have included a notion of liveness: the fact that an origin is live means we know that it will be accessed later.</p>\n</blockquote>\n<p>I don't think it is. See <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Reintroducing.20loans/near/259695735\">https://rust-lang.zulipchat.com/#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Reintroducing.20loans/near/259695735</a> and following</p>",
        "id": 260329061,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1636057353
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"118594\">Dylan MacKenzie (ecstatic-morse)</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Reintroducing.20loans/near/260328863\">said</a>:</p>\n<blockquote>\n<p>Aber wir können ein bisschen auf Deutsch reden</p>\n</blockquote>\n<p>Wer würde denn sowas tun? :D</p>",
        "id": 260329165,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1636057422
    },
    {
        "content": "<p>Ich nicht.</p>",
        "id": 260329338,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1636057511
    },
    {
        "content": "<p>noch ich</p>",
        "id": 260329436,
        "sender_full_name": "lqd",
        "timestamp": 1636057558
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"337115\">Domenic Quirl</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Reintroducing.20loans/near/260329061\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"118594\">Dylan MacKenzie (ecstatic-morse)</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Reintroducing.20loans/near/260326252\">said</a>:</p>\n<blockquote>\n<p>Finally, in the old formulation, <code>invalidated</code> existed at a single point. Now, we propagate it forward and defer the borrow error until an access actually occurs. I still don't understand why this is necessary now that we have included a notion of liveness: the fact that an origin is live means we know that it will be accessed later.</p>\n</blockquote>\n<p>I don't think it is. See <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Reintroducing.20loans/near/259695735\">https://rust-lang.zulipchat.com/#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Reintroducing.20loans/near/259695735</a> and following</p>\n</blockquote>\n<p>Yeah, I'm in full agreement. I've had a horrible run of restating your ideas, btw. Sorry about that.</p>",
        "id": 260329559,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1636057601
    },
    {
        "content": "<p>I wouldn't worry too much about that if I were you ^^</p>",
        "id": 260330889,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1636058211
    },
    {
        "content": "<p>You're also selling yourself too short here</p>",
        "id": 260330920,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1636058228
    },
    {
        "content": "<p>and if we removed the invalidation propagation then we'd land even closer to the current formulation</p>",
        "id": 260332497,
        "sender_full_name": "lqd",
        "timestamp": 1636058955
    },
    {
        "content": "<p>I see the point that reintroducing liveness made the propagation of invalid less useful</p>",
        "id": 260671944,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1636385260
    },
    {
        "content": "<p>it also seems strictly less efficient?</p>",
        "id": 260671976,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1636385270
    },
    {
        "content": "<p>That's very interesting and I have to ponder it :)</p>",
        "id": 260672057,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1636385290
    },
    {
        "content": "<p>but whilst I ponder, I think removing it would be good =)</p>",
        "id": 260672117,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1636385311
    },
    {
        "content": "<p>in that case, <a href=\"http://polonius.next\">polonius.next</a> is inching closer indeed. I do think I like this <em>codebase</em> a bit more, in particular i'm excited about the front-end approach, though I've yet to poke on that code at all</p>",
        "id": 260672173,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1636385332
    },
    {
        "content": "<p>I think I will land the PR, we can explore removing the forward-compatibility</p>",
        "id": 260683863,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1636389878
    },
    {
        "content": "<p>the current and .next frontends are not that different in spirit :) having some fact gen over a richer syntax (rather than a low level fact based one) is going to be way more useful however, a nicer approach indeed</p>",
        "id": 260719023,
        "sender_full_name": "lqd",
        "timestamp": 1636405581
    },
    {
        "content": "<p>yes</p>",
        "id": 260729462,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1636411235
    }
]