[
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> -- in <a href=\"https://github.com/rust-lang-nursery/polonius/issues/109\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/issues/109\">polonius#109</a>, you mentioned perf was abysmal?</p>",
        "id": 169554850,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562149496
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> It might have been a bit of an overstatement, given that I haven't even measured it, but I mainly meant the delta of performance introduced by the changes surely must be, given that I am for every variable walking the entire MIR and generating facts, etc</p>",
        "id": 169556708,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1562151670
    },
    {
        "content": "<p>It's not a problem yet, especially as we're not going to keep it</p>",
        "id": 169556717,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1562151687
    },
    {
        "content": "<p>ok ok</p>",
        "id": 169556728,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562151706
    },
    {
        "content": "<p>But it seems that the liveness calculations in general does play a big role in the solve-time in my benchmarks</p>",
        "id": 169556730,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1562151707
    },
    {
        "content": "<p>yeah, we need to investigate -- among other things, we don't actually need to compute liveness for all variables</p>",
        "id": 169556782,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562151737
    },
    {
        "content": "<p>this was something we spent some time tuning in rustc</p>",
        "id": 169556786,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562151742
    },
    {
        "content": "<p>I can imagine</p>",
        "id": 169556790,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1562151750
    },
    {
        "content": "<p>This is the heatmap from 789 518 functions of 1738 crates: <br>\n<a href=\"/user_uploads/4715/bIWeZb5Al5DLoe3-yjx2d9PH/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/bIWeZb5Al5DLoe3-yjx2d9PH/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/4715/bIWeZb5Al5DLoe3-yjx2d9PH/pasted_image.png\"></a></div>",
        "id": 169556808,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1562151790
    },
    {
        "content": "<p>(where it is among other things obvious that my analysis on the CFG gave no useful information)</p>",
        "id": 169556821,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1562151817
    },
    {
        "content": "<p>It's correlation vs normalised runtime</p>",
        "id": 169556830,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1562151831
    },
    {
        "content": "<p>In particular, the initialisation and liveness facts are <em>really</em> hot</p>",
        "id": 169556884,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1562151867
    },
    {
        "content": "<p>But yes, More Analysis Needed™</p>",
        "id": 169556891,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1562151879
    },
    {
        "content": "<p>(I had some errands, but I'll finish the PRs for review soon!)</p>",
        "id": 169556898,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1562151894
    },
    {
        "content": "<p>Oh, and these are histograms for the solve-times: <a href=\"/user_uploads/4715/a4oAzKiLbByaneOZO1frAz9p/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/a4oAzKiLbByaneOZO1frAz9p/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/4715/a4oAzKiLbByaneOZO1frAz9p/pasted_image.png\"></a></div>",
        "id": 169556923,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1562151929
    },
    {
        "content": "<p>As you can see, very short solve-times completely dominate</p>",
        "id": 169556976,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1562151973
    },
    {
        "content": "<p>one other thing -- in the PR, there is a CLI flag for disabling the <code>region_live_at</code> facts -- do we need that? can we just remove said facts altogether?</p>",
        "id": 169556990,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562151989
    },
    {
        "content": "<blockquote>\n<p>As you can see, very short solve-times completely dominate</p>\n</blockquote>\n<p>what is the range of samples here?</p>",
        "id": 169556997,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562152007
    },
    {
        "content": "<p>For solve-times?</p>",
        "id": 169557004,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1562152016
    },
    {
        "content": "<p>Hmh, I guess we could, but then we can't do the verification anymore</p>",
        "id": 169557016,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1562152033
    },
    {
        "content": "<p>But my plan was to remove it in the long run</p>",
        "id": 169557023,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1562152045
    },
    {
        "content": "<p>yeah, I wondered about that, it also seems fine to keep it for verification purposes</p>",
        "id": 169557033,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562152069
    },
    {
        "content": "<p>I'm just shooting for simplicity :)</p>",
        "id": 169557034,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562152073
    },
    {
        "content": "<p>I'm fine with eventual simplicity :)</p>",
        "id": 169557072,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1562152082
    },
    {
        "content": "<blockquote>\n<p>For solve-times?</p>\n</blockquote>\n<p>right I mean what are the \"Test cases\"</p>",
        "id": 169557077,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562152084
    },
    {
        "content": "<p>Ah, the test cases are all the facts generated by analysing 1738 of the most popular (downloads on <a href=\"http://crates.io\" target=\"_blank\" title=\"http://crates.io\">crates.io</a> and stars on github) crates</p>",
        "id": 169557099,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1562152118
    },
    {
        "content": "<p>I have more, but ran out of hard disk space to store the facts</p>",
        "id": 169557110,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1562152128
    },
    {
        "content": "<blockquote>\n<p>... generated by analysing 1738 of the most popular (downloads on <a href=\"http://crates.io\" target=\"_blank\" title=\"http://crates.io\">crates.io</a> and stars on github) crates</p>\n</blockquote>\n<p>do you happen to remember how many of those actually failed to build ?</p>",
        "id": 169557968,
        "sender_full_name": "lqd",
        "timestamp": 1562153250
    },
    {
        "content": "<p>No, I didn't collect that data. Hmm, I even think a vast number of those succeeded building</p>",
        "id": 169558207,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1562153535
    },
    {
        "content": "<p>Because I may have only included those</p>",
        "id": 169558224,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1562153571
    },
    {
        "content": "<p>Yes, I think so</p>",
        "id": 169558227,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1562153578
    },
    {
        "content": "<p>That's not great now that I think about it</p>",
        "id": 169558235,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1562153587
    },
    {
        "content": "<p>oh it makes perfect sense to do so for benchmarks; I was just trying to gather new data by proxy, of possible Polonius bugs :)</p>",
        "id": 169558308,
        "sender_full_name": "lqd",
        "timestamp": 1562153678
    },
    {
        "content": "<p>Oh, cool; the heatmap changes when you filter out the (arguably very few) functions above 10 000 edges in the CFG</p>",
        "id": 169558315,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1562153694
    },
    {
        "content": "<p>(almost all of them end up on 10 000 edges or fewer)</p>",
        "id": 169558332,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1562153720
    },
    {
        "content": "<p>Then the CFG doesn't matter at all, and the number of variables and <code>var_defined</code>dominate along with the other <code>var_...</code> tuples</p>",
        "id": 169558405,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1562153774
    },
    {
        "content": "<p>I can't wait for our correctness/testing/validation to be improved so we can see how many of those edges are actually needed. I have coined the term \"differential liveness\" and am looking for a reason to use it when we possibly bring CFG compression back from limbo :)</p>",
        "id": 169558469,
        "sender_full_name": "lqd",
        "timestamp": 1562153840
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 169558704,
        "sender_full_name": "lqd",
        "timestamp": 1562154086
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> I might need some new benchmarks more representative than <code>clap</code>, could you tell me which of your 10000 test crates looked interesting to profile ? (eg. the slowest running or the ones with the biggest overhead; or maybe also the ones where the overhead is big <em>without</em> counting the fact generation time) thanks in advance :)</p>",
        "id": 171398332,
        "sender_full_name": "lqd",
        "timestamp": 1563762408
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"204115\">Albin Stjerna</span> I might need some new benchmarks more representative than <code>clap</code>, could you tell me which of your 10000 test crates looked interesting to profile ? (eg. the slowest running or the ones with the biggest overhead; or maybe also the ones where the overhead is big <em>without</em> counting the fact generation time) thanks in advance :)</p>\n</blockquote>\n<p>I don't measure fact-generation time (but I probably should). In fact, I don't even record specifically which repositories have timeouts or memory-outs. But I can get you a list of long-running repositories or repositories (in terms of Polonius runtime) with large inputs!</p>",
        "id": 171445890,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563813297
    },
    {
        "content": "<p>The worst recorded runtime (a severe outlier by more than a factor of 10) is from this repo: <a href=\"https://github.com/thuleqaid/rust-aaplus\" target=\"_blank\" title=\"https://github.com/thuleqaid/rust-aaplus\">https://github.com/thuleqaid/rust-aaplus</a></p>",
        "id": 171446023,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563813391
    },
    {
        "content": "<p>Ah, so that's a large const array, surprise</p>",
        "id": 171446081,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563813448
    },
    {
        "content": "<p>Let's see if I can find something a bit more interesting</p>",
        "id": 171446093,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563813457
    },
    {
        "content": "<p>Fascinating, about 64% of the functions in the data set have no loans at all</p>",
        "id": 171446828,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563814037
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> Hm, this method has the worst recorded runtime: <a href=\"https://github.com/rodrimati1992/type_level/blob/master/derive_type_level_lib/src/typelevel/compiletime_traits.rs#L29\" target=\"_blank\" title=\"https://github.com/rodrimati1992/type_level/blob/master/derive_type_level_lib/src/typelevel/compiletime_traits.rs#L29\">https://github.com/rodrimati1992/type_level/blob/master/derive_type_level_lib/src/typelevel/compiletime_traits.rs#L29</a></p>",
        "id": 171447528,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563814557
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 171447727,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563814685
    },
    {
        "content": "<p>Woops, I apparently managed to dump the whole file, not the head of the file</p>",
        "id": 171447784,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563814748
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/hLCwSpMwuVhlYOa-jUw-TMcb/largest.csv\" target=\"_blank\" title=\"largest.csv\">Here's a CSV with the 500 slowest functions and their programs (=repositories)</a></p>",
        "id": 171447953,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563814851
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> awesome thanks a lot</p>",
        "id": 171453051,
        "sender_full_name": "lqd",
        "timestamp": 1563818539
    },
    {
        "content": "<p>that will be super helpful, I’ll try some of them later tonight</p>",
        "id": 171453081,
        "sender_full_name": "lqd",
        "timestamp": 1563818571
    },
    {
        "content": "<p>Let me know if you want actual fact files!</p>",
        "id": 171453102,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563818596
    },
    {
        "content": "<p>I have fact files coming out of my ears</p>",
        "id": 171453105,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563818601
    },
    {
        "content": "<p>Literally 400 GB</p>",
        "id": 171453108,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563818605
    },
    {
        "content": "<p>But it was very good that you asked, because it made me aware of the no-loans outliers which had some very extreme values, and my data got much less messy after removing them</p>",
        "id": 171453195,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563818663
    },
    {
        "content": "<p>the OOMs would be interesting to know, and like the other case I mentioned earlier we can even know if it’s in the facts or Polonius itself</p>",
        "id": 171453275,
        "sender_full_name": "lqd",
        "timestamp": 1563818735
    },
    {
        "content": "<p>and also, the ones where Polonius and NLLs don’t give the same answer (I assume all these benchmarks must somehow compile today, any Polonius error would be... annoying :)</p>",
        "id": 171453369,
        "sender_full_name": "lqd",
        "timestamp": 1563818798
    },
    {
        "content": "<p>but until my PR lands, at the very least this can happen in cases where Polonius lacks some \"killed\" facts, and there’s probably other bugs of the sort elsewhere</p>",
        "id": 171453447,
        "sender_full_name": "lqd",
        "timestamp": 1563818863
    },
    {
        "content": "<p>(but if you got facts for most of those, I assume they didn’t OOM during fact generation)</p>",
        "id": 171453582,
        "sender_full_name": "lqd",
        "timestamp": 1563818954
    },
    {
        "content": "<p>64% with no loans oh wow</p>",
        "id": 171453890,
        "sender_full_name": "lqd",
        "timestamp": 1563819219
    },
    {
        "content": "<p>if there are no invalidations (when we’ve also dealt with illegal subsets relations) we can bail early :)</p>",
        "id": 171453968,
        "sender_full_name": "lqd",
        "timestamp": 1563819274
    },
    {
        "content": "<p>(but some of the work I’ve been doing should help there anyway so I’ll check some of those out as well)</p>",
        "id": 171454037,
        "sender_full_name": "lqd",
        "timestamp": 1563819341
    },
    {
        "content": "<p>do you have the data from which you’ve extracted the csv available somewhere ? I’m very much looking forward to reading your masters btw !</p>",
        "id": 171454352,
        "sender_full_name": "lqd",
        "timestamp": 1563819579
    },
    {
        "content": "<blockquote>\n<p>do you have the data from which you’ve extracted the csv available somewhere?</p>\n</blockquote>\n<p>No, I only have it in raw form otherwise, that is just the fact files in TSVs. Those are the 400 GBs of files. I do have some error logs which I think could be analysed to figure out what went wrong, but that's about it. From the perspective of my analysis, the CSV <em>is</em> the \"raw\" data.</p>\n<blockquote>\n<p>I’m very much looking forward to reading your masters btw !</p>\n</blockquote>\n<p>Aww thank you :)</p>",
        "id": 171461041,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563824500
    },
    {
        "content": "<p>The runtime for the naive algorithm is...weird though. <a href=\"/user_uploads/4715/ObYGaA-kj3ScQ9NnxmLk7Si6/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">This is an attempt at correlating it to various inputs</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/ObYGaA-kj3ScQ9NnxmLk7Si6/pasted_image.png\" target=\"_blank\" title=\"This is an attempt at correlating it to various inputs\"><img src=\"/user_uploads/4715/ObYGaA-kj3ScQ9NnxmLk7Si6/pasted_image.png\"></a></div>",
        "id": 171461537,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563824875
    },
    {
        "content": "<p>Looks almost exponential or something</p>",
        "id": 171461613,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563824921
    },
    {
        "content": "<p>Also, even the less intelligent hybrid version <a href=\"/user_uploads/4715/pS9MHHR4gwbioNexW56R7x6P/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pays off slightly</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/pS9MHHR4gwbioNexW56R7x6P/pasted_image.png\" target=\"_blank\" title=\"pays off slightly\"><img src=\"/user_uploads/4715/pS9MHHR4gwbioNexW56R7x6P/pasted_image.png\"></a></div>",
        "id": 171461663,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563824977
    },
    {
        "content": "<p>yeah the naive algorithm does a lot of compute and then throws most of it away</p>",
        "id": 171462298,
        "sender_full_name": "lqd",
        "timestamp": 1563825470
    },
    {
        "content": "<p>But apparently it's worth it!</p>",
        "id": 171462401,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563825531
    },
    {
        "content": "<p>That's the shocking part</p>",
        "id": 171462405,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563825536
    },
    {
        "content": "<blockquote>\n<p>From the perspective of my analysis, the CSV <em>is</em> the \"raw\" data.</p>\n<p>yeah this CSV is what I was referring to as \"the data\", ie on the whole 10k suite</p>\n</blockquote>",
        "id": 171462435,
        "sender_full_name": "lqd",
        "timestamp": 1563825559
    },
    {
        "content": "<p>Ah, ok, well <em>that</em> I can just upload</p>",
        "id": 171462449,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563825571
    },
    {
        "content": "<p>err, maybe</p>",
        "id": 171462460,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563825577
    },
    {
        "content": "<p>no one else will probably read this, so I can tell you, I tried heavily filtering the variants, the speed on clap is insane :p</p>",
        "id": 171462506,
        "sender_full_name": "lqd",
        "timestamp": 1563825603
    },
    {
        "content": "<p>ok, it's 500MB so maybe not</p>",
        "id": 171462543,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563825606
    },
    {
        "content": "<p>What does \"heavily filtering\" mean?</p>",
        "id": 171462581,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563825634
    },
    {
        "content": "<p>What did you filter in/out?</p>",
        "id": 171462588,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563825640
    },
    {
        "content": "<p>only tracking the loans which can have errors, only do the TC on the regions downstream from the borrow regions of the loans which can be invalidated</p>",
        "id": 171462629,
        "sender_full_name": "lqd",
        "timestamp": 1563825670
    },
    {
        "content": "<p>(kinda annoying wrt illegal subset relations, but as the DatafrogOpt variant couldn't compute them via <code>subset</code> we'd have to deal with that eventually, and I think I can do this filtering for good)</p>",
        "id": 171462744,
        "sender_full_name": "lqd",
        "timestamp": 1563825738
    },
    {
        "content": "<p>Ah, ok. When do you do the filtering? When generating facts or in Polonius itself?</p>",
        "id": 171462787,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563825772
    },
    {
        "content": "<p>rn in Polonius</p>",
        "id": 171462809,
        "sender_full_name": "lqd",
        "timestamp": 1563825785
    },
    {
        "content": "<p>Ah, ok</p>",
        "id": 171462827,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563825801
    },
    {
        "content": "<p>to be able to use the same infrastructure to share between the loc insensitive variant and the variants</p>",
        "id": 171462839,
        "sender_full_name": "lqd",
        "timestamp": 1563825810
    },
    {
        "content": "<p><a href=\"https://we.tl/t-HYSaCIUqNd\" target=\"_blank\" title=\"https://we.tl/t-HYSaCIUqNd\">Here's the full CSV</a></p>",
        "id": 171462851,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563825818
    },
    {
        "content": "<p>except that I can also only filter for each analysis, and it does basically the same thing on clap</p>",
        "id": 171462931,
        "sender_full_name": "lqd",
        "timestamp": 1563825847
    },
    {
        "content": "<p>that's why I'd like to try on more inputs</p>",
        "id": 171462939,
        "sender_full_name": "lqd",
        "timestamp": 1563825856
    },
    {
        "content": "<p>thanks a lot for the CSV :)</p>",
        "id": 171462949,
        "sender_full_name": "lqd",
        "timestamp": 1563825867
    },
    {
        "content": "<p>No problem! :)</p>",
        "id": 171462958,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563825877
    },
    {
        "content": "<p>I can send you the WIP if you want</p>",
        "id": 171463031,
        "sender_full_name": "lqd",
        "timestamp": 1563825927
    },
    {
        "content": "<p>(once you know what to do it's pretty simple anyway)</p>",
        "id": 171463147,
        "sender_full_name": "lqd",
        "timestamp": 1563826005
    },
    {
        "content": "<p>Sure, why not</p>",
        "id": 171463351,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563826163
    },
    {
        "content": "<p>pretty effective on clap but we'll see</p>",
        "id": 171463947,
        "sender_full_name": "lqd",
        "timestamp": 1563826570
    },
    {
        "content": "<p>the locinsensitive pre-pass would just more heavily filter the possible loans</p>",
        "id": 171464031,
        "sender_full_name": "lqd",
        "timestamp": 1563826641
    },
    {
        "content": "<p>instead of all the invalidated ones</p>",
        "id": 171464056,
        "sender_full_name": "lqd",
        "timestamp": 1563826664
    },
    {
        "content": "<p>That sounds like a good idea</p>",
        "id": 171464138,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563826695
    },
    {
        "content": "<p>I wonder how well the input facts would compress, given that they are tab-separated text files</p>",
        "id": 171464166,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563826722
    },
    {
        "content": "<p>Probably incredibly well</p>",
        "id": 171464176,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563826729
    },
    {
        "content": "<p>(I also have a prototype of sharing the pre-pass results)</p>",
        "id": 171464216,
        "sender_full_name": "lqd",
        "timestamp": 1563826756
    },
    {
        "content": "<p>haha yeah maybe :)</p>",
        "id": 171464230,
        "sender_full_name": "lqd",
        "timestamp": 1563826766
    },
    {
        "content": "<p>if it does well on other inputs, I wish I tried this a year ago...</p>",
        "id": 171464330,
        "sender_full_name": "lqd",
        "timestamp": 1563826816
    },
    {
        "content": "<p>I really wish we had a robust benchmarking infrastructure of some sort</p>",
        "id": 171464368,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563826860
    },
    {
        "content": "<p>Every time I think about something to optimise I see the wall in the factory at CERN where they made the gigantic dipole magnets; YOU CAN ONLY MAKE AS WELL AS YOU CAN MEASURE</p>",
        "id": 171464424,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563826904
    },
    {
        "content": "<p>maybe we can extend lolbench</p>",
        "id": 171464428,
        "sender_full_name": "lqd",
        "timestamp": 1563826907
    },
    {
        "content": "<p>It seems defunct?</p>",
        "id": 171464528,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563826965
    },
    {
        "content": "<p>I have a strong feeling the route of \"improvise a set of Python scripts\" isn't the right one :)</p>",
        "id": 171464569,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563826996
    },
    {
        "content": "<p>Or, it absolutely was for shipping my thesis on time, but not for infrastructure</p>",
        "id": 171464582,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563827010
    },
    {
        "content": "<p>yeah anp doesn't have much time to work on it nowadays, but he did a bunch of work on it, to get stable numbers, gather hardware counters, etc</p>",
        "id": 171464605,
        "sender_full_name": "lqd",
        "timestamp": 1563827031
    },
    {
        "content": "<p>automate regression detection etc</p>",
        "id": 171464656,
        "sender_full_name": "lqd",
        "timestamp": 1563827047
    },
    {
        "content": "<p>he did a talk about it as well</p>",
        "id": 171464681,
        "sender_full_name": "lqd",
        "timestamp": 1563827075
    },
    {
        "content": "<p>Cool</p>",
        "id": 171464691,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563827086
    },
    {
        "content": "<blockquote>\n<p>I wonder how well the input facts would compress, given that they are tab-separated text files</p>\n</blockquote>\n<p>I think 10x easily (esp for the bigger ones, like clap), maybe it could be interesting to have them as zip files in the repo and the polonius binary could stream the .facts files</p>",
        "id": 171465412,
        "sender_full_name": "lqd",
        "timestamp": 1563827717
    },
    {
        "content": "<p>although I think clap's size has reduced a lot since you regenerated it in the liveness PR</p>",
        "id": 171465512,
        "sender_full_name": "lqd",
        "timestamp": 1563827818
    },
    {
        "content": "<p>I don't know if it's from rustc changes or something else (what version of clap did you generate those from ?) but I think the Naive variant processed the new ones around twice as fast as the old facts</p>",
        "id": 171465614,
        "sender_full_name": "lqd",
        "timestamp": 1563827897
    },
    {
        "content": "<blockquote>\n<p>what version of clap did you generate those from?</p>\n</blockquote>\n<p>The one in current crater, I think.</p>\n<p>Yes, there definitely is a lot of interactions with other rustc changes affecting the Polonius inputs.</p>",
        "id": 171516269,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563887370
    },
    {
        "content": "<p>in crater or the old in rustc-perf ?</p>",
        "id": 171516359,
        "sender_full_name": "lqd",
        "timestamp": 1563887419
    },
    {
        "content": "<p>(the latter is the one which caused problems IIRC)</p>",
        "id": 171516395,
        "sender_full_name": "lqd",
        "timestamp": 1563887447
    },
    {
        "content": "<p>I'm having a bit of trouble reproducing some of the slower benchmarks you mentioned, maybe generating the facts has become quite slow</p>",
        "id": 171517896,
        "sender_full_name": "lqd",
        "timestamp": 1563888495
    },
    {
        "content": "<p>(probably when the liveness  or partial initialization data is huge ? -- update: yes in this benchmark's case it was a lot of <code>var_initialized_at_exit</code> taking 10x the time)</p>",
        "id": 171518359,
        "sender_full_name": "lqd",
        "timestamp": 1563888822
    },
    {
        "content": "<p>Hmm, it was probably the old one in rustc-perf now that you mention it</p>",
        "id": 171531706,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563897220
    },
    {
        "content": "<p>Yes, probably. It's incredibly inefficiently implemented which might skew the results</p>",
        "id": 171531781,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563897253
    },
    {
        "content": "<p>Means I will probably have to re-do the analysis</p>",
        "id": 171531796,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563897270
    },
    {
        "content": "<p>Given that I'm currently working on removing that input</p>",
        "id": 171531804,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563897283
    },
    {
        "content": "<p>just to make sure I checked <code>typelevel-compiletime_traits-{{impl}}[1]-to_tokens</code> I can reproduce your 30+s seconds on the Naive variant, and indeed my latest rev works nicely on it</p>",
        "id": 171533612,
        "sender_full_name": "lqd",
        "timestamp": 1563898628
    },
    {
        "content": "<p>are the Naive/Hybrid/DatafrogOpt times in your CSV taken with rustc btw ? or by running polonius with -a ?</p>",
        "id": 171533734,
        "sender_full_name": "lqd",
        "timestamp": 1563898708
    },
    {
        "content": "<p>to make sure again, are these benchmarks only for code which has no errors under <code>-Z polonius</code> ? if that's the case I wonder if the <code>LocationInsensitive</code> returns errors in some of these cases, so we can see the difference it would make to share the results from <code>LocationInsensitive</code> to <code>DatafrogOpt</code> in the <code>Hybrid</code> variant.</p>",
        "id": 171534107,
        "sender_full_name": "lqd",
        "timestamp": 1563899029
    },
    {
        "content": "<p>(although it's <em>possible</em> the <code>Naive</code> variant is already getting good enough at finding no errors pretty fast - again, modulo subregion obligations; it may be time for some synthetic benchmarks as well)</p>",
        "id": 171534359,
        "sender_full_name": "lqd",
        "timestamp": 1563899227
    },
    {
        "content": "<blockquote>\n<p>are the Naive/Hybrid/DatafrogOpt times in your CSV taken with rustc btw ? or by running polonius with -a ?</p>\n</blockquote>\n<p>Just running Polonius! Specifically, I have <code>--skip-timing --ignore-region-live-at</code></p>",
        "id": 171541104,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563904102
    },
    {
        "content": "<p>Regarding errors, that's...harder</p>",
        "id": 171541146,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563904143
    },
    {
        "content": "<p>But anything that returns a non-zero exit status on fact generation would have been discarded</p>",
        "id": 171541161,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563904160
    },
    {
        "content": "<p>Or anything that returned something non-zero when doing <code>cargo +nightly check</code> with <code>RUSTFLAGS</code> set to <code>-Zborrowck=mir</code></p>",
        "id": 171541460,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563904333
    },
    {
        "content": "<p>Oh, I should add: times are recorded by Python itself and I'm taking the minimum over three runs</p>",
        "id": 171541595,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563904427
    },
    {
        "content": "<p>It should be the same as the standard unix <code>time</code> command would report, but who knows how it would relate to the Polonius output</p>",
        "id": 171541680,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563904462
    },
    {
        "content": "<p>Actually, if I ever re-do it, I should probably only run one time and in stead parse the output and use the times reported by Polonius, but I just wanted something I knew worked and not have to deal with wonky output or mismatches etc</p>",
        "id": 171541733,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563904503
    },
    {
        "content": "<p>ah ok, running the polonius binary will also contain the time to read the files on disk, there will be many avoidable clones of the facts, etc</p>",
        "id": 171558677,
        "sender_full_name": "lqd",
        "timestamp": 1563916592
    },
    {
        "content": "<p>Yes, that's true</p>",
        "id": 171587246,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563956521
    },
    {
        "content": "<p>Maybe we should put some work into a pure profiling mode, e.g. one that, say, outputs CSV directly to stdout</p>",
        "id": 171587309,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563956582
    },
    {
        "content": "<p>(by \"we\" I mean \"I\")</p>",
        "id": 171587327,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563956602
    },
    {
        "content": "<p>But there already is something like that for rustc, right?</p>",
        "id": 171587339,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563956619
    },
    {
        "content": "<p>yeah and that's what lokalmatador was working on, using the profiling systems inside rustc to time polonius</p>",
        "id": 171587876,
        "sender_full_name": "lqd",
        "timestamp": 1563957195
    },
    {
        "content": "<p>since they were already gathering some data I assume the general setup was completed</p>",
        "id": 171587911,
        "sender_full_name": "lqd",
        "timestamp": 1563957243
    },
    {
        "content": "<p>ah but they might have deleted their GH account, with the WIP branch mentioned <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/profiling/near/166400526\" title=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/profiling/near/166400526\">here</a></p>",
        "id": 171588002,
        "sender_full_name": "lqd",
        "timestamp": 1563957358
    },
    {
        "content": "<p>Oh, that's too bad</p>",
        "id": 171606672,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563975665
    },
    {
        "content": "<p>Ok I should absolutely talk to Yannis about Polonius, I just need to catch him when he’s not being accosted by anyone else which is all the time</p>",
        "id": 178859146,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1571841175
    },
    {
        "content": "<p>I think Niko talked to him about that at SPLASH last year :)</p>",
        "id": 178859222,
        "sender_full_name": "lqd",
        "timestamp": 1571841227
    },
    {
        "content": "<p>He held a talk about how Datalog was the future of programming specifically mentioning some problematic join patterns that I'm quite sure are behind my abysmal liveness performance</p>",
        "id": 178929702,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1571904541
    },
    {
        "content": "<p>HA Yannis promised to have a look at my Datalog rules and see if he saw some Smart Things™️ I could do. He also seemed genuinely sad <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> wasn't coming. :(</p>",
        "id": 178930631,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1571905432
    },
    {
        "content": "<p>(I think I didn't mention it but I also worked on helping automate more of our datalog to datafrog pipeline specifically to implement the provenance graphs rules rewriting Yannis describes in the declarative debugging paper)</p>",
        "id": 178936088,
        "sender_full_name": "lqd",
        "timestamp": 1571910534
    },
    {
        "content": "<p>(oh and if anyone is interested in the specific talk, it's from a <a href=\"https://arxiv.org/abs/1905.00402\" target=\"_blank\" title=\"https://arxiv.org/abs/1905.00402\">paper from a few months back</a> and is <a href=\"https://www.youtube.com/watch?v=iwOFK6M1gG8\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=iwOFK6M1gG8\">already available on youtube</a>)</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"iwOFK6M1gG8\" href=\"https://www.youtube.com/watch?v=iwOFK6M1gG8\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=iwOFK6M1gG8\"><img src=\"https://i.ytimg.com/vi/iwOFK6M1gG8/default.jpg\"></a></div>",
        "id": 178937917,
        "sender_full_name": "lqd",
        "timestamp": 1571912085
    },
    {
        "content": "<p>Wow cool!</p>",
        "id": 178953383,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1571925114
    },
    {
        "content": "<p>Also I of course didn’t ask Yannis to debug my code, I said hi, explained what I had been working on and asked for a book recommendation.</p>",
        "id": 178953799,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1571925350
    },
    {
        "content": "<p>I realised I sounded like a jerk</p>",
        "id": 178953816,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1571925360
    },
    {
        "content": "<p>I have been thinking about something. If the root of the performance problem with liveness and initialisation is that we over-compute, why don't we compute these relations top-down instead? I.e first compute a set of potentially interesting origins by joining with potential errors, then join that subset to their corresponding variables, and then compute liveness for <em>those</em> variables?</p>",
        "id": 179271359,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1572293953
    },
    {
        "content": "<p>And the same with initialisation of course; first compute a set of interesting move paths by finding accesses and reference-containing structs, and then determining the initialisation for those?</p>",
        "id": 179271550,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1572294078
    },
    {
        "content": "<p>We probably should. I think that we need to be a bit more clever to see large enough savings, and having everything fully implemented makes this easier.</p>",
        "id": 179271758,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1572294215
    },
    {
        "content": "<p>Ok, good, that means I haven't completely misunderstood everything :)</p>",
        "id": 179273560,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1572295323
    },
    {
        "content": "<p>computing the set of potentially interesting origins with potential errors and then going up is the version of the Naive variant I sent you a couple months back, and which I've recently said made 20x on liveness on clap :) (and that was only using invalidated loans here, the potential erroneous loans from <code>LocationInsensitive</code> filter everything even more as I prototyped before)</p>",
        "id": 179288941,
        "sender_full_name": "lqd",
        "timestamp": 1572307745
    },
    {
        "content": "<p>and 30x on initialization on clap, but prevented from computing all init/move errors, since it was computing over only move paths belonging to variables having origins in their types into which potential erroneous loans could flow</p>",
        "id": 179289137,
        "sender_full_name": "lqd",
        "timestamp": 1572307955
    },
    {
        "content": "<p>(it will still be bottom-up unless you don't mean top-down/bottom-up in the datalog/prolog sense, and overall there are also eg the MST/DT transforms which hope to make a query's bottom-up evaluation need the tuples a top-down evaluation would need; and if you do mean top-down in the datalog sense then we'd need a different \"solver\", like an SLG solver, maybe chalk's)</p>",
        "id": 179289442,
        "sender_full_name": "lqd",
        "timestamp": 1572308365
    },
    {
        "content": "<p>until we have all we need implemented, the performance work and the completeness work kinda deadlock each other, for example: depending on how we implement illegal subset relations, the filtering we describe here could be undersirable (even <code>DatafrogOpt</code> already clashes with some of these different possibilities). now for this particular example, placeholder loans (the 3rd way to implement these errors) seem to allow for these optimisations so yay</p>",
        "id": 179289838,
        "sender_full_name": "lqd",
        "timestamp": 1572308836
    },
    {
        "content": "<p>and, probably, \"all we need\" doesn't include the currently nebulous plan of dealing with higher ranked subregions via a chalk-to-polonius lowering step :) (I hope)</p>",
        "id": 179289988,
        "sender_full_name": "lqd",
        "timestamp": 1572309025
    },
    {
        "content": "<blockquote>\n<p>... unless you don't mean top-down/bottom-up in the datalog/prolog sense ...</p>\n</blockquote>\n<p>I did, but I meant in the dumbest way possible</p>",
        "id": 179346193,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1572366232
    },
    {
        "content": "<p>(thank you for explaining!)</p>",
        "id": 179346198,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1572366237
    },
    {
        "content": "<p>I meant as in, do the joins in datafrog one at a time and compute them until fixpoint one at a time</p>",
        "id": 179346284,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1572366269
    },
    {
        "content": "<p>For some interesting tuples</p>",
        "id": 179346288,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1572366274
    }
]