[
    {
        "content": "<p>Howdy <span class=\"user-group-mention\" data-user-group-id=\"1184\">@WG-polonius</span>. I recently published a <a href=\"https://ecstaticmorse.net/posts/quantifier-elimination/\">blog post</a> describing a strategy for reducing higher-ranked trait bounds to unquantified region constraints. It's a response to <a href=\"https://smallcultfollowing.com/babysteps/blog/2019/01/21/hereditary-harrop-region-constraints/\">\"Polonius and the case of the hereditary harrop predicate\"</a>, although that post is quite old and may not reflect the current thinking around HRTBs. Even if some or all of my ideas are already known to the Polonius team, the blog post may still be useful since I was able to find relevant prior art that I haven't seen discussed anywhere, specifically some results on precedence constraints in atomic Boolean algebras showing a limit on how powerful our region logic can be while remaining decidable.</p>\n<p>I had these ideas back when I was making some trivial fixes to get up to speed with Polonius. I was hesitant to share them at the time because I was both unsure about their novelty and worried I had made a trivial mistake somewhere: I'm an amateur mathematician and a lousy one at that. I had planned to start with a more concrete proposal about using a variant of the SSA transformation to speed up computing borrow errors, but that idea turned out to have a fatal flaw. Partly because of that negative result and partly because of some health problems, I stopped working on Polonius in my free time. Now that I'm feeling better, however, it seemed wasteful not to publish my results despite the possibility of a minor embarrassment.</p>",
        "id": 237573768,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1620251437
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span> hey Dylan &lt;3</p>",
        "id": 237574073,
        "sender_full_name": "lqd",
        "timestamp": 1620251628
    },
    {
        "content": "<p>this looks lovely I'll read it carefully; hope everything's better health-wise</p>",
        "id": 237574211,
        "sender_full_name": "lqd",
        "timestamp": 1620251711
    },
    {
        "content": "<p>from the top of my head, your mentioning the variant of the SSA transformation, reminds me, IIRC, of arielb talking about Graph SSA for easier borrow checking <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 237574368,
        "sender_full_name": "lqd",
        "timestamp": 1620251803
    },
    {
        "content": "<p>(but maybe I'm conflating this with their Ref 2 Î¦ model)</p>",
        "id": 237574499,
        "sender_full_name": "lqd",
        "timestamp": 1620251885
    },
    {
        "content": "<p>it would be cool if <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> had an update to that plan to share btw ? <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span>  since chalk has made a lot of progress since then (and they may have some of those ideas fresh from the recent rust verification workshop)</p>",
        "id": 237574810,
        "sender_full_name": "lqd",
        "timestamp": 1620252041
    },
    {
        "content": "<p>Yeah, I've seen an IRLO thread where  they discussed SSA, although my idea's a bit different. I'm hoping to write it up and let others take a crack at fixing it.</p>",
        "id": 237575062,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1620252188
    },
    {
        "content": "<p>the Revesz paper also looks very interesting, thanks a bunch for writing this up</p>",
        "id": 237575242,
        "sender_full_name": "lqd",
        "timestamp": 1620252295
    },
    {
        "content": "<p>(maybe the algorithm they had in mind isn't exactly the same as yours, but I agree that it does sound a lot like the discussions I remember from Niko &amp; wg-traits, that chalk would handle the quantifiers from higher-ranked constraints and emit quantifier-free constraints for polonius to solve ; maybe it was also because this would be needed during trait-solving, rather than a concern solely about borrow checking ?)</p>",
        "id": 237578079,
        "sender_full_name": "lqd",
        "timestamp": 1620254109
    },
    {
        "content": "<p>(or maybe operational concerns on how to apply this within existing datalog engines ? hopefully they'll explain :)</p>",
        "id": 237586808,
        "sender_full_name": "lqd",
        "timestamp": 1620260157
    },
    {
        "content": "<p>what an enjoyable read</p>",
        "id": 237586854,
        "sender_full_name": "lqd",
        "timestamp": 1620260172
    },
    {
        "content": "<p>I believe that lower bounds on universal quantification are similarly eliminated in current NLLs, <code>for&lt;'a&gt; 'b: 'a</code> being eliminated as <code>'b: 'static</code>. Interestingly, this substitution does show up sometimes in user code as an unexpected <code>'static</code> bound surfaced in error messages and diagnostics, and surprises them of course.</p>",
        "id": 237586858,
        "sender_full_name": "lqd",
        "timestamp": 1620260177
    },
    {
        "content": "<p>I'm not exactly sure what Niko had in mind when they mentioned implication as a richer constraint we'll eventually need, but I <em>believe</em> that disjunction would be used for the now-existing <a href=\"https://rustc-dev-guide.rust-lang.org/borrow_check/region_inference/member_constraints.html\">member constraints</a> that arise from <code>impl Trait</code>, and the <code>async fn</code> desugaring. As you mention, I'm not sure either whether quantifiers are allowed there (I'd be surprised), so maybe indeed we could allow disjunction only outside of quantifiers.</p>",
        "id": 237586894,
        "sender_full_name": "lqd",
        "timestamp": 1620260214
    },
    {
        "content": "<p>again, lovely post, thanks for writing it. I'm excited for more :)</p>",
        "id": 237587216,
        "sender_full_name": "lqd",
        "timestamp": 1620260467
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Quantifier.20elimination.20for.20HRTBs/near/237586858\">said</a>:</p>\n<blockquote>\n<p>I believe that lower bounds on universal quantification are similarly eliminated in current NLLs, <code>for&lt;'a&gt; 'b: 'a</code> being eliminated as <code>'b: 'static</code>. Interestingly, this substitution does show up sometimes in user code as an unexpected <code>'static</code> bound surfaced in error messages and diagnostics, and surprises them of course.</p>\n</blockquote>\n<p>Yeah, I suspect all of my QE rules already exist somewhere in the NLL implementation, though I wasn't able to find where. NLL also has sets with subset relations, they're just sets of program locations instead of loans, so the QE stuff still applies. At least now there's a long-winded justification for them somewhere <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span>.</p>",
        "id": 237729161,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1620335134
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Quantifier.20elimination.20for.20HRTBs/near/237586894\">said</a>:</p>\n<blockquote>\n<p>I'm not exactly sure what Niko had in mind when they mentioned implication as a richer constraint we'll eventually need, but I <em>believe</em> that disjunction would be used for the now-existing <a href=\"https://rustc-dev-guide.rust-lang.org/borrow_check/region_inference/member_constraints.html\">member constraints</a> that arise from <code>impl Trait</code>, and the <code>async fn</code> desugaring. As you mention, I'm not sure either whether quantifiers are allowed there (I'd be surprised), so maybe indeed we could allow disjunction only outside of quantifiers.</p>\n</blockquote>\n<p>Thanks. That's good to know. AFAICT, the main problem is disjunction inside a universal quantifier. We don't have to deal with negation, so we can convert to disjunctive normal form using only the distributive law, and existential quantifiers distribute over disjunction. I don't know how to prove statements like <code>forall&lt;'x&gt; { 'x : 'a || 'a : 'x }</code>, however. It might not be an issue like you said.</p>",
        "id": 237730994,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1620335644
    },
    {
        "content": "<p>so <span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span> I read your post btw :)</p>",
        "id": 239090398,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621258815
    },
    {
        "content": "<p>I keep meaning to write here!</p>",
        "id": 239090402,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621258817
    },
    {
        "content": "<p>tl;dr yes I was aware of that, but it's too simplistic to really work</p>",
        "id": 239090420,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621258823
    },
    {
        "content": "<p>I have more thoughts that I've not gotten arond to writing up in blog post form</p>",
        "id": 239090471,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621258837
    },
    {
        "content": "<p>though I'm expecting to consult with some folks soon about this very topic!</p>",
        "id": 239090492,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621258846
    },
    {
        "content": "<p>who have deeper knowledge than me</p>",
        "id": 239090505,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621258850
    }
]