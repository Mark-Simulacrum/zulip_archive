[
    {
        "content": "<p>I'm working on pushing my prototypes computing subset errors:</p>\n<ul>\n<li>first, computing them in the location-insensitive variant, which should show that here placeholder loans map a bit better (as there's no need for a dedicated relation to maintain subsets of placeholder origins)</li>\n<li>then, adding them to the Opt variant, with the subset-based rules, as placeholder loans don't work here</li>\n<li>finally, switching the Naive variant from placeholder loans to subset-based rules and updating the rules in the hackmd if you're all happy with them</li>\n</ul>",
        "id": 205894123,
        "sender_full_name": "lqd",
        "timestamp": 1596539325
    },
    {
        "content": "<p>this is great!</p>",
        "id": 205906002,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596547776
    },
    {
        "content": "<p>I'm close to finishing the 1st part (adding tests as we speak, which reminds me that we'd also need some more testing, refactoring tests, etc :)</p>",
        "id": 205906205,
        "sender_full_name": "lqd",
        "timestamp": 1596547905
    },
    {
        "content": "<p>alright here are the location-insensitive subset errors <a href=\"https://github.com/lqd/borrow-check/tree/subset_errors_are_back_with_a_vengeance\">https://github.com/lqd/borrow-check/tree/subset_errors_are_back_with_a_vengeance</a></p>",
        "id": 205908115,
        "sender_full_name": "lqd",
        "timestamp": 1596548973
    },
    {
        "content": "<p>(I'll run rustc tests now, but wanted to publish it so you could take a look; there's a kind of hack I disliked but is no big deal: as we can call the location insensitive variant directly, and that normal subset errors are keyed by their location, when debugging I put them at the 0 point)</p>",
        "id": 205908528,
        "sender_full_name": "lqd",
        "timestamp": 1596549137
    },
    {
        "content": "<p>I like that it shows the placeholder loans neatness :) we add the contained loans, and just remove the locations from the rules</p>",
        "id": 205908592,
        "sender_full_name": "lqd",
        "timestamp": 1596549180
    },
    {
        "content": "<p>(in the naive variant, there are too many subsets we don't need to also push subset error computations down to the <code>requires</code> relation, while we don't maintain transitive subsets in the location-insensitive pass; also in the Naive variant placeholder loans come into conflict with our lack of coolness about things that are true at all points of the cfg)</p>",
        "id": 205908851,
        "sender_full_name": "lqd",
        "timestamp": 1596549291
    },
    {
        "content": "<p>let me take a look</p>",
        "id": 205910175,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596549871
    },
    {
        "content": "<p>it's very simple</p>",
        "id": 205910340,
        "sender_full_name": "lqd",
        "timestamp": 1596549948
    },
    {
        "content": "<p>so</p>",
        "id": 205911417,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596550438
    },
    {
        "content": "<p>this is still using the placeholder loan approach, right?</p>",
        "id": 205911468,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596550445
    },
    {
        "content": "<p>(just to make sure I understand what I'm reading)</p>",
        "id": 205911477,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596550449
    },
    {
        "content": "<p>I don't see any edits to the \"naive\" code, right?</p>",
        "id": 205911590,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596550509
    },
    {
        "content": "<p>I guess that it just kind of \"falls out\" because we're already saying 'only propagate those loans that might be involved in an error'?</p>",
        "id": 205911633,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596550529
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/subset.20errors.20rework/near/205908592\">said</a>:</p>\n<blockquote>\n<p>I like that it shows the placeholder loans neatness :) we add the contained loans, and just remove the locations from the rules</p>\n</blockquote>\n<p>to be clear, if you think placeholder loans work out nicer than the subset approach, I'm happy for us to keep using them :)</p>",
        "id": 205911822,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596550594
    },
    {
        "content": "<p>yes this is only part 1 of 3 of the list above, adding them to the location insensitive variant</p>",
        "id": 205911876,
        "sender_full_name": "lqd",
        "timestamp": 1596550621
    },
    {
        "content": "<p>using placeholder loans for now, but we can still change it later :)</p>",
        "id": 205911912,
        "sender_full_name": "lqd",
        "timestamp": 1596550635
    },
    {
        "content": "<p>which we can decide once more of the work is done on the opt and naive variant</p>",
        "id": 205911983,
        "sender_full_name": "lqd",
        "timestamp": 1596550662
    },
    {
        "content": "<p>yeah</p>",
        "id": 205912110,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596550703
    },
    {
        "content": "<p>I see the appeal</p>",
        "id": 205912114,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596550706
    },
    {
        "content": "<p>in particular I can imagine that it might be helpful because all the errors are then based on \"loan propagation\" only</p>",
        "id": 205912164,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596550726
    },
    {
        "content": "<p>specifically as of course it's a kind of duplication; maybe performance can be a deciding factor but it's currently hard to tell</p>",
        "id": 205912174,
        "sender_full_name": "lqd",
        "timestamp": 1596550730
    },
    {
        "content": "<p>yeah</p>",
        "id": 205912210,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596550745
    },
    {
        "content": "<p>I guess I think we should look to what makes the rules \"feel\" most elegant</p>",
        "id": 205912237,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596550757
    },
    {
        "content": "<p>because I suspect we may have to do horrible things to them in the name of performance anyway ;)</p>",
        "id": 205912277,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596550773
    },
    {
        "content": "<p>yeah :D</p>",
        "id": 205912287,
        "sender_full_name": "lqd",
        "timestamp": 1596550781
    },
    {
        "content": "<p>alright, part 2/3 is here with the last 5 commits of <a href=\"https://github.com/lqd/borrow-check/commits/subset_errors_are_back_with_a_vengeance\">https://github.com/lqd/borrow-check/commits/subset_errors_are_back_with_a_vengeance</a></p>",
        "id": 205935878,
        "sender_full_name": "lqd",
        "timestamp": 1596562430
    },
    {
        "content": "<p>this adds the subset errors computation to the Opt variant, and would also show what it'd take to switch the Naive variant to using the subset-based rules</p>",
        "id": 205935977,
        "sender_full_name": "lqd",
        "timestamp": 1596562462
    },
    {
        "content": "<p>I definitely need to run rustc's tests of course but they should pass</p>",
        "id": 205936045,
        "sender_full_name": "lqd",
        "timestamp": 1596562501
    },
    {
        "content": "<p>and with that the <code>Hybrid</code> variant works again, so ♪ the opts are back in toooo-wn ♫</p>",
        "id": 205936102,
        "sender_full_name": "lqd",
        "timestamp": 1596562538
    },
    {
        "content": "<p>no apparent new failures on rustc's tests</p>",
        "id": 205950119,
        "sender_full_name": "lqd",
        "timestamp": 1596569685
    },
    {
        "content": "<p>the test run seemed faster as well, but it's still heavily dominated by move errors</p>",
        "id": 205950442,
        "sender_full_name": "lqd",
        "timestamp": 1596569867
    },
    {
        "content": "<p>and finally, part 3/3 if we decide it's cool, using subset-based rules in the naive variant <a href=\"https://github.com/lqd/borrow-check/commit/33a554ad8a6cead1a132ddb3dd747911247f3690\">https://github.com/lqd/borrow-check/commit/33a554ad8a6cead1a132ddb3dd747911247f3690</a> -- not particularly earth-shattering</p>",
        "id": 205963047,
        "sender_full_name": "lqd",
        "timestamp": 1596576446
    },
    {
        "content": "<p>(all in all it's cool that the location-insensitive variant can now be used again, but I do recall computing potential loan and subset errors on the condensation graph manually was like 20x on clap — that is, in absolute values, from 20ms to 1ms)</p>",
        "id": 205965331,
        "sender_full_name": "lqd",
        "timestamp": 1596577799
    },
    {
        "content": "<p>I forgot I could disable move errors to have an idea of the Hybrid variant duration on tests, looks like 10% if I remove the &lt;10 current failures and tests behaving weirdly and that we have to analyze and fix (could be fact generation, or some of the computations I'm not sure)</p>",
        "id": 205971845,
        "sender_full_name": "lqd",
        "timestamp": 1596582432
    },
    {
        "content": "<p>for this I'll open PRs for the two branches above if you all like the changes</p>",
        "id": 206003574,
        "sender_full_name": "lqd",
        "timestamp": 1596619915
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> let me take a look..</p>",
        "id": 206022783,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596634791
    },
    {
        "content": "<p>sweet thank you, it’s not urgent or anything</p>",
        "id": 206022892,
        "sender_full_name": "lqd",
        "timestamp": 1596634841
    },
    {
        "content": "<p>I just wanted to check if polonius' profiling regions would show up inside rustc's profiling regions, they do, the top row is rustc <a href=\"/user_uploads/4715/7TS1ITZCHYsmXJuxa-K1aI7V/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/7TS1ITZCHYsmXJuxa-K1aI7V/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/7TS1ITZCHYsmXJuxa-K1aI7V/image.png\"></a></div>",
        "id": 206023833,
        "sender_full_name": "lqd",
        "timestamp": 1596635357
    },
    {
        "content": "<p>(that being said, nagisa has made a tracy subscriber for <code>tracing</code>, and oli has/is in the process of making rustc use <code>tracing</code> instead of <code>log</code>)</p>",
        "id": 206024052,
        "sender_full_name": "lqd",
        "timestamp": 1596635472
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> looking at the naive rules first</p>",
        "id": 206026060,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596636500
    },
    {
        "content": "<p>it feels like they could get <em>more</em> naive</p>",
        "id": 206026075,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596636506
    },
    {
        "content": "<p>but maybe you structured it this way because of efficiency</p>",
        "id": 206026086,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596636512
    },
    {
        "content": "<p>or maybe I'm missing something</p>",
        "id": 206026088,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596636514
    },
    {
        "content": "<p>i.e., you have</p>",
        "id": 206026098,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596636518
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>subset_placeholder(O1, O2, N) :-\n    subset(O1, O2, N),\n    placeholder_region(O1).\n</code></pre></div>\n\n\n<p>and the transitive rule for that</p>",
        "id": 206026100,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596636519
    },
    {
        "content": "<p>but presumably we could just say that </p>\n<div class=\"codehilite\"><pre><span></span><code>subset_errors(O1, O2, N) :-\n    subset(O1, O2, N),\n    placeholder_region(O1),\n    placeholder_region(O2),\n    !known_subset(O1, O2)\n</code></pre></div>",
        "id": 206026224,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596636594
    },
    {
        "content": "<p>right?</p>",
        "id": 206026226,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596636596
    },
    {
        "content": "<p>i.e., we don't really <em>need</em> the <code>subset_placeholder</code> rule</p>",
        "id": 206026281,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596636610
    },
    {
        "content": "<p>I think it was indeed one of the options we talked about but you came up with it in the post I think</p>",
        "id": 206026317,
        "sender_full_name": "lqd",
        "timestamp": 1596636637
    },
    {
        "content": "<p>that it was indeed for efficiency and the way to not be impacted by the heavy subset filtering in the Opt variant</p>",
        "id": 206026360,
        "sender_full_name": "lqd",
        "timestamp": 1596636660
    },
    {
        "content": "<p>the opt rules are a bit more complex</p>",
        "id": 206026365,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596636662
    },
    {
        "content": "<p>yeah, ok, in the <em>opt</em> rules we don't have the \"transitive subset\" to intersect with</p>",
        "id": 206026401,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596636682
    },
    {
        "content": "<p>right</p>",
        "id": 206026409,
        "sender_full_name": "lqd",
        "timestamp": 1596636688
    },
    {
        "content": "<p>we surely could use the simpler way for the Naive rules since we do have the subset TC here</p>",
        "id": 206026454,
        "sender_full_name": "lqd",
        "timestamp": 1596636715
    },
    {
        "content": "<p>I can do that</p>",
        "id": 206026572,
        "sender_full_name": "lqd",
        "timestamp": 1596636763
    },
    {
        "content": "<p>it simplifies the variant at the slight expense of having another way to compute erroneous subsets but it's not a big deal and no one will know since we haven't yet documented the Opt rules :)</p>",
        "id": 206026662,
        "sender_full_name": "lqd",
        "timestamp": 1596636820
    },
    {
        "content": "<p>sorry, got distracted by some other things --</p>",
        "id": 206030653,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596638743
    },
    {
        "content": "<p>but it seems like keeping the naive rules naive is a good thing</p>",
        "id": 206030667,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596638749
    },
    {
        "content": "<p>that said, i'm wondering about weaving in the <code>LocationInsensitive</code> stuff here</p>",
        "id": 206030684,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596638760
    },
    {
        "content": "<p>where ?</p>",
        "id": 206030740,
        "sender_full_name": "lqd",
        "timestamp": 1596638771
    },
    {
        "content": "<p>I think right now we are using that primarily to stop <em>loans</em> from propagating, is that right <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> ?</p>",
        "id": 206030742,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596638771
    },
    {
        "content": "<p>oh, you had some more commits I think I maybe didn't read yet</p>",
        "id": 206030757,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596638783
    },
    {
        "content": "<p>this branch has subset errors in the 3 variants yeah</p>",
        "id": 206030790,
        "sender_full_name": "lqd",
        "timestamp": 1596638804
    },
    {
        "content": "<p>location-insensitive is the one we talked about a bit before, using placeholder loans</p>",
        "id": 206030814,
        "sender_full_name": "lqd",
        "timestamp": 1596638821
    },
    {
        "content": "<p>so that we could resurrect the Hybrid variant (variant-alooza)</p>",
        "id": 206030869,
        "sender_full_name": "lqd",
        "timestamp": 1596638855
    },
    {
        "content": "<p>to now finally be able to use the location-insensitive \"potential errors\" to filter origins and loans in the location sensitive analysis (Opt, in the most common case, but the same applies to the Naive variant if we wanted to)</p>",
        "id": 206031002,
        "sender_full_name": "lqd",
        "timestamp": 1596638907
    },
    {
        "content": "<p>so we'd use that both to stop loans from propagating, but prior to that, also limit which origins they should transitively propagate to</p>",
        "id": 206031157,
        "sender_full_name": "lqd",
        "timestamp": 1596638983
    },
    {
        "content": "<p>yeah but the main thing is</p>",
        "id": 206031334,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596639049
    },
    {
        "content": "<p>that if we are computing placeholder errors from the (transitive) subset</p>",
        "id": 206031351,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596639058
    },
    {
        "content": "<p>we still need to compute the transitive subset :P</p>",
        "id": 206031359,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596639062
    },
    {
        "content": "<p>sorry, let me phrase that another way</p>",
        "id": 206031385,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596639070
    },
    {
        "content": "<p>:)</p>",
        "id": 206031392,
        "sender_full_name": "lqd",
        "timestamp": 1596639074
    },
    {
        "content": "<p>I don't thikn we have ever had a variant of the naive analysis that tries to avoid computing parts of the subset relation, is that true?</p>",
        "id": 206031420,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596639087
    },
    {
        "content": "<p>yeah but Naive does that anyway</p>",
        "id": 206031431,
        "sender_full_name": "lqd",
        "timestamp": 1596639092
    },
    {
        "content": "<p>that is my recollection as well</p>",
        "id": 206031447,
        "sender_full_name": "lqd",
        "timestamp": 1596639099
    },
    {
        "content": "<p>apart from:</p>",
        "id": 206031478,
        "sender_full_name": "lqd",
        "timestamp": 1596639115
    },
    {
        "content": "<p>yeah and for <em>opt</em> we're saying \"we compute the full transitive subset, but only starting from those placeholders that may be involved in errors\"</p>",
        "id": 206031486,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596639120
    },
    {
        "content": "<p>(or you could imagine doing that, anyway)</p>",
        "id": 206031528,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596639125
    },
    {
        "content": "<p>( we could also just keep the naive/opt setup analogous )</p>",
        "id": 206031571,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596639146
    },
    {
        "content": "<ul>\n<li>optimization cases where we use the results of the location-insensitive pass to filter the outlives and borrow regions used in the sensitive analyses</li>\n</ul>",
        "id": 206031586,
        "sender_full_name": "lqd",
        "timestamp": 1596639154
    },
    {
        "content": "<ul>\n<li>actually there was just a single item in that list :)</li>\n</ul>",
        "id": 206031614,
        "sender_full_name": "lqd",
        "timestamp": 1596639171
    },
    {
        "content": "<p>for opt we're not really computing the full transitive subset</p>",
        "id": 206031658,
        "sender_full_name": "lqd",
        "timestamp": 1596639198
    },
    {
        "content": "<p>for Naive we do, and the quote would be exactly that</p>",
        "id": 206031704,
        "sender_full_name": "lqd",
        "timestamp": 1596639217
    },
    {
        "content": "<p>I guess I'm a bit lax</p>",
        "id": 206031736,
        "sender_full_name": "lqd",
        "timestamp": 1596639240
    },
    {
        "content": "<p>and handwaving too much which subsets we compute starting from placeholders</p>",
        "id": 206031806,
        "sender_full_name": "lqd",
        "timestamp": 1596639262
    },
    {
        "content": "<p>hopefully the essence of what I meant came through ...</p>",
        "id": 206031880,
        "sender_full_name": "lqd",
        "timestamp": 1596639300
    },
    {
        "content": "<p>ok. so basically I'm just thinking about a few things</p>",
        "id": 206031920,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596639322
    },
    {
        "content": "<ul>\n<li>if we use placeholder <em>loans</em> (instead of subset) then it's kind of obvious how to incorporate the insensitive analysis</li>\n</ul>",
        "id": 206031991,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596639360
    },
    {
        "content": "<p>having subset_placeholder may allow us to filter differently when we want to compute loan errors and subset errors</p>",
        "id": 206032048,
        "sender_full_name": "lqd",
        "timestamp": 1596639371
    },
    {
        "content": "<p>(i.e., we are already looking for loans that may be part of errors, and we restrict those from propagating)</p>",
        "id": 206032066,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596639381
    },
    {
        "content": "<p>essentially I guess I'm trying to think which formulation feels simpler overall</p>",
        "id": 206032098,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596639395
    },
    {
        "content": "<p>I think the appeal of the subset analysis for me was that, in the naive case at least, it was basically just adding one extra rule</p>",
        "id": 206032123,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596639406
    },
    {
        "content": "<p>what is a bit confusing is that we can still use the potential loan errors (not potential subset errors) from LocIns to filter loans</p>",
        "id": 206032168,
        "sender_full_name": "lqd",
        "timestamp": 1596639427
    },
    {
        "content": "<p>anyway I think all this code looks good and I am kind of happy with whichever approach ultimately</p>",
        "id": 206032175,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596639431
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/subset.20errors.20rework/near/206032168\">said</a>:</p>\n<blockquote>\n<p>what is a bit confusing is that we can still use the potential loan errors (not potential subset errors) from LocIns to filter loans</p>\n</blockquote>\n<p>I mean we want to do this, right?</p>",
        "id": 206032208,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596639452
    },
    {
        "content": "<p>sure</p>",
        "id": 206032212,
        "sender_full_name": "lqd",
        "timestamp": 1596639457
    },
    {
        "content": "<p>we probably want to do this in the opt variant, too</p>",
        "id": 206032227,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596639469
    },
    {
        "content": "<p>right right</p>",
        "id": 206032237,
        "sender_full_name": "lqd",
        "timestamp": 1596639475
    },
    {
        "content": "<p>I guess overall the opt variant feels like it'd be a bit simpler using a placeholder <em>loans</em> approach</p>",
        "id": 206032304,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596639496
    },
    {
        "content": "<p>yeah but it doesn't work as is there</p>",
        "id": 206032337,
        "sender_full_name": "lqd",
        "timestamp": 1596639517
    },
    {
        "content": "<p>why not?</p>",
        "id": 206032351,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596639526
    },
    {
        "content": "<p>there are too little subsets</p>",
        "id": 206032354,
        "sender_full_name": "lqd",
        "timestamp": 1596639526
    },
    {
        "content": "<p>I'm imagining that it would work like this:</p>\n<ul>\n<li>we add a rule that says \"at every node N, the placeholder origin O includes the placeholder loan L\"</li>\n</ul>",
        "id": 206032412,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596639560
    },
    {
        "content": "<p>this can propagate like any other loan through the subset relations</p>",
        "id": 206032429,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596639570
    },
    {
        "content": "<p>(just a sec let me look at the rules to make sure I'm not saying an incorrect thing on why it didn't work)</p>",
        "id": 206032431,
        "sender_full_name": "lqd",
        "timestamp": 1596639572
    },
    {
        "content": "<p>and then we have a error rule to say</p>\n<ul>\n<li>\"if there is a placehoder origin O1 that contains a loan L2 and it's not a known member\"</li>\n</ul>",
        "id": 206032465,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596639594
    },
    {
        "content": "<p>(and we can filter that first rule down to loans that are potentially involved in errors)</p>",
        "id": 206032533,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596639607
    },
    {
        "content": "<p>what I recall was: we didn't have enough <code>contains</code> (requires) data for the placeholder loans approach</p>",
        "id": 206032588,
        "sender_full_name": "lqd",
        "timestamp": 1596639641
    },
    {
        "content": "<p>hmm</p>",
        "id": 206032661,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596639686
    },
    {
        "content": "<p>I have to remember</p>",
        "id": 206032669,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596639690
    },
    {
        "content": "<p>I'm not sure I debugged it to the point of knowing which data was missing and which rule filtered it</p>",
        "id": 206032674,
        "sender_full_name": "lqd",
        "timestamp": 1596639695
    },
    {
        "content": "<p>do we not compute the transitive <code>contains</code> in the opt variant either?</p>",
        "id": 206032681,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596639697
    },
    {
        "content": "<p>but it's easy enough to try</p>",
        "id": 206032685,
        "sender_full_name": "lqd",
        "timestamp": 1596639699
    },
    {
        "content": "<p>I thought we did</p>",
        "id": 206032688,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596639702
    },
    {
        "content": "<p>we do but it's heaviliy filtered down</p>",
        "id": 206032701,
        "sender_full_name": "lqd",
        "timestamp": 1596639711
    },
    {
        "content": "<p>we have less subsets, so we have less requires, was my recollection</p>",
        "id": 206032778,
        "sender_full_name": "lqd",
        "timestamp": 1596639736
    },
    {
        "content": "<p>the placeholder loans rules are super easy to copy paste if you want to try it in the opt variant</p>",
        "id": 206032823,
        "sender_full_name": "lqd",
        "timestamp": 1596639763
    },
    {
        "content": "<p>I can whip something up if you want ?</p>",
        "id": 206032864,
        "sender_full_name": "lqd",
        "timestamp": 1596639781
    },
    {
        "content": "<p>sure, I'm skimming the rules now</p>",
        "id": 206032882,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596639788
    },
    {
        "content": "<p>you do want me to do it you mean ?</p>",
        "id": 206033095,
        "sender_full_name": "lqd",
        "timestamp": 1596639891
    },
    {
        "content": "<p>(I remembered that since placeholders contained their loans at all points, loan propagation along the cfg created duplicates which needed to be deduped, for all rounds, at all cfg points, so it should be less efficient than the subset-based rules -- it's not important to this conversation, I just remembered this looking at it, but it's just our \"X at all points are suboptimal\")</p>",
        "id": 206033361,
        "sender_full_name": "lqd",
        "timestamp": 1596639999
    },
    {
        "content": "<p>I'm making Opt use placeholder loans rn</p>",
        "id": 206033479,
        "sender_full_name": "lqd",
        "timestamp": 1596640059
    },
    {
        "content": "<p>yeah, might as well try it</p>",
        "id": 206034153,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596640331
    },
    {
        "content": "<p>ok wait <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span></p>",
        "id": 206034652,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596640502
    },
    {
        "content": "<p>so I think I see</p>",
        "id": 206034665,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596640504
    },
    {
        "content": "<p>I guess the opt variant is smarter than I remembered :)</p>",
        "id": 206034683,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596640510
    },
    {
        "content": "<p>it's a bit rushed but I have it</p>",
        "id": 206034685,
        "sender_full_name": "lqd",
        "timestamp": 1596640513
    },
    {
        "content": "<p>haha</p>",
        "id": 206034693,
        "sender_full_name": "lqd",
        "timestamp": 1596640515
    },
    {
        "content": "<p>in particular, it doesn't propagate loans indiscriminantly</p>",
        "id": 206034706,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596640521
    },
    {
        "content": "<p>i.e., it waits until an origin goes to dead</p>",
        "id": 206034771,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596640547
    },
    {
        "content": "<p>to propagate the loans from that origin to its successors</p>",
        "id": 206034789,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596640554
    },
    {
        "content": "<p>right !</p>",
        "id": 206034862,
        "sender_full_name": "lqd",
        "timestamp": 1596640569
    },
    {
        "content": "<p>so I can imagine that just adding the naive rules</p>",
        "id": 206034869,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596640572
    },
    {
        "content": "<p>is not going to work :)</p>",
        "id": 206034877,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596640575
    },
    {
        "content": "<p>that's what I was handwaving all along (jk)</p>",
        "id": 206034902,
        "sender_full_name": "lqd",
        "timestamp": 1596640584
    },
    {
        "content": "<p>this works out ok for the borrow rules beacuse</p>",
        "id": 206034904,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596640584
    },
    {
        "content": "<p>we don't care <em>which</em> origin contains a loan</p>",
        "id": 206034924,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596640596
    },
    {
        "content": "<p>if you want to try for some reason, here's a diff <a href=\"https://gist.github.com/lqd/1358b95bccb5e4c3672a61517bda471b\">https://gist.github.com/lqd/1358b95bccb5e4c3672a61517bda471b</a></p>",
        "id": 206034931,
        "sender_full_name": "lqd",
        "timestamp": 1596640598
    },
    {
        "content": "<p>we only care that <em>some</em> live origin contains the loan</p>",
        "id": 206034944,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596640602
    },
    {
        "content": "<p>but for the <em>subset errors</em>, that's not true</p>",
        "id": 206034963,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596640610
    },
    {
        "content": "<p>so... ok... now I'm convinced that placeholder loans the wrong approach</p>",
        "id": 206035020,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596640638
    },
    {
        "content": "<p>:)</p>",
        "id": 206035030,
        "sender_full_name": "lqd",
        "timestamp": 1596640645
    },
    {
        "content": "<p>basically, the way that we use them is distinct</p>",
        "id": 206035047,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596640653
    },
    {
        "content": "<p>so it doesn't really help us to leverage the loan mechanism in the opt variant</p>",
        "id": 206035064,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596640663
    },
    {
        "content": "<p>and the <em>naive</em> variant is even simpler with the subset approach</p>",
        "id": 206035077,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596640670
    },
    {
        "content": "<p>but it looks good for the location-insensitive one</p>",
        "id": 206035089,
        "sender_full_name": "lqd",
        "timestamp": 1596640674
    },
    {
        "content": "<p>sure, but location insensitive can also be extended to use the origin-relations approach very easily, right?</p>",
        "id": 206035177,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596640700
    },
    {
        "content": "<p>sure</p>",
        "id": 206035192,
        "sender_full_name": "lqd",
        "timestamp": 1596640707
    },
    {
        "content": "<p>i.e., it computes the transitive subset relation but it just does it without considering the nodes</p>",
        "id": 206035197,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596640708
    },
    {
        "content": "<p>it's easy to do so but we might not want to maintain the subsets if we don't really need to</p>",
        "id": 206035226,
        "sender_full_name": "lqd",
        "timestamp": 1596640723
    },
    {
        "content": "<p>for the purity of rules this argument wouldn't matter of course</p>",
        "id": 206035254,
        "sender_full_name": "lqd",
        "timestamp": 1596640738
    },
    {
        "content": "<p>does it currently not compute the transitive subset relation at all?</p>",
        "id": 206035264,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596640743
    },
    {
        "content": "<p>location-insensitive, I mean</p>",
        "id": 206035281,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596640749
    },
    {
        "content": "<p>it just propagates loans?</p>",
        "id": 206035290,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596640752
    },
    {
        "content": "<p>I guess that makes sense</p>",
        "id": 206035304,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596640755
    },
    {
        "content": "<p>no</p>",
        "id": 206035321,
        "sender_full_name": "lqd",
        "timestamp": 1596640763
    },
    {
        "content": "<p>yup just loans</p>",
        "id": 206035342,
        "sender_full_name": "lqd",
        "timestamp": 1596640770
    },
    {
        "content": "<p>ok, so, what you're saying is:</p>",
        "id": 206035382,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596640792
    },
    {
        "content": "<p>we can keep the concept of placeholder origin with a paired placeholder loan</p>",
        "id": 206035404,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596640801
    },
    {
        "content": "<p>but only the location insensitive analysis uses the loan for anything</p>",
        "id": 206035460,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596640808
    },
    {
        "content": "<p>(which is why it was really fast and easy to make the location insensitive analyses as reachability queries on the condensation graph)</p>",
        "id": 206035491,
        "sender_full_name": "lqd",
        "timestamp": 1596640822
    },
    {
        "content": "<p>we could of course also have the insensitive analysis</p>",
        "id": 206035495,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596640824
    },
    {
        "content": "<p>for example yeah, but that's really not a big deal either way</p>",
        "id": 206035534,
        "sender_full_name": "lqd",
        "timestamp": 1596640838
    },
    {
        "content": "<p>propagate a distinct relation that is just for \"outlived placeholder origins\"</p>",
        "id": 206035538,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596640839
    },
    {
        "content": "<p>i.e., we'd have the \"transitive loans contained in origin X\" and the \"transitive placeholder origins contained in origin X\"</p>",
        "id": 206035603,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596640868
    },
    {
        "content": "<p>instead of just one set of tuples</p>",
        "id": 206035616,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596640872
    },
    {
        "content": "<p>that combines them both</p>",
        "id": 206035622,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596640875
    },
    {
        "content": "<p>both methods work here, I'm not sure if there's that much of an eficiency difference tbh</p>",
        "id": 206035628,
        "sender_full_name": "lqd",
        "timestamp": 1596640877
    },
    {
        "content": "<p>right, I imagine it's kind of \"six in one, half a dozen in the other\"</p>",
        "id": 206035652,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596640888
    },
    {
        "content": "<p>sure</p>",
        "id": 206035657,
        "sender_full_name": "lqd",
        "timestamp": 1596640889
    },
    {
        "content": "<p>:)</p>",
        "id": 206035672,
        "sender_full_name": "lqd",
        "timestamp": 1596640895
    },
    {
        "content": "<p>the only advantage I see is not having \"placeholder loans\" as a thing at all</p>",
        "id": 206035675,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596640896
    },
    {
        "content": "<p>at the cost of some duplication in the \"location insensitive\" rules</p>",
        "id": 206035696,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596640906
    },
    {
        "content": "<p>and the known contains relation that goes with them</p>",
        "id": 206035713,
        "sender_full_name": "lqd",
        "timestamp": 1596640912
    },
    {
        "content": "<p>well we still need a <code>known_subset</code> relation</p>",
        "id": 206035774,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596640924
    },
    {
        "content": "<p>sure</p>",
        "id": 206035786,
        "sender_full_name": "lqd",
        "timestamp": 1596640927
    },
    {
        "content": "<p>but yeah</p>",
        "id": 206035798,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596640931
    },
    {
        "content": "<p>as of now we have both</p>",
        "id": 206035807,
        "sender_full_name": "lqd",
        "timestamp": 1596640934
    },
    {
        "content": "<p>seems a bit better to me to just have \"placeholder origins\"</p>",
        "id": 206035822,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596640941
    },
    {
        "content": "<p>yesterday we only had <code>known_contains</code></p>",
        "id": 206035831,
        "sender_full_name": "lqd",
        "timestamp": 1596640944
    },
    {
        "content": "<p>the location insensitive rules we'd be duplicating are very simple</p>",
        "id": 206035859,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596640955
    },
    {
        "content": "<p>very</p>",
        "id": 206035874,
        "sender_full_name": "lqd",
        "timestamp": 1596640963
    },
    {
        "content": "<p>and then the output is kind of the \"loans involved in errors\" and \"placeholder origins involved in errors\"</p>",
        "id": 206035892,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596640971
    },
    {
        "content": "<p>and we can filter things in a straightforward way using those</p>",
        "id": 206035922,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596640984
    },
    {
        "content": "<p>I honestly don't mind either way until we have proof that one is obviously better than the other</p>",
        "id": 206035962,
        "sender_full_name": "lqd",
        "timestamp": 1596641004
    },
    {
        "content": "<p>exactly</p>",
        "id": 206035973,
        "sender_full_name": "lqd",
        "timestamp": 1596641008
    },
    {
        "content": "<p>I'm convinced :)</p>",
        "id": 206035997,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596641015
    },
    {
        "content": "<p>it's not a major difference, I agree</p>",
        "id": 206036013,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596641020
    },
    {
        "content": "<p>it's not super easy to know how to filter the different relations depending on whether a potential error, or potential subset error, or both, involve a given loan / origin</p>",
        "id": 206036112,
        "sender_full_name": "lqd",
        "timestamp": 1596641051
    },
    {
        "content": "<p>on a slightly unrelated topic, because I'm finding \"error\" to lack precision, how would you call the loan analysis errors, compared to subset errors. \"illegal access errors\" ?</p>",
        "id": 206036246,
        "sender_full_name": "lqd",
        "timestamp": 1596641112
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/subset.20errors.20rework/near/206036112\">said</a>:</p>\n<blockquote>\n<p>it's not super easy to know how to filter the different relations depending on whether a potential error, or potential subset error, or both, involve a given loan / origin</p>\n</blockquote>\n<p>say more?</p>",
        "id": 206036759,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596641341
    },
    {
        "content": "<p>for example, if LocIns finds a single potential illegal access error we can eliminate all other borrow regions</p>",
        "id": 206036854,
        "sender_full_name": "lqd",
        "timestamp": 1596641390
    },
    {
        "content": "<p>we can also look at all origins which the introducing origin flows into</p>",
        "id": 206036957,
        "sender_full_name": "lqd",
        "timestamp": 1596641424
    },
    {
        "content": "<p>and remove the others</p>",
        "id": 206036962,
        "sender_full_name": "lqd",
        "timestamp": 1596641429
    },
    {
        "content": "<p>if now there's also a potential subset error, things are more complicated</p>",
        "id": 206037034,
        "sender_full_name": "lqd",
        "timestamp": 1596641463
    },
    {
        "content": "<p>we need to make sure that filtering the outlives constraints doesn't remove the path between the placeholders</p>",
        "id": 206037126,
        "sender_full_name": "lqd",
        "timestamp": 1596641506
    },
    {
        "content": "<p>maybe, just maybe, having the two different transitive subsets could help here, but I haven't looked into it</p>",
        "id": 206037386,
        "sender_full_name": "lqd",
        "timestamp": 1596641622
    },
    {
        "content": "<p>so I mostly meant that we had to be careful when making use of the results of the LocIns variant in the Naive or Opt variants (as part of the Hybrid context) to optimize possibly differently with these 2 kinds of potential errors</p>",
        "id": 206037629,
        "sender_full_name": "lqd",
        "timestamp": 1596641726
    },
    {
        "content": "<p>I see</p>",
        "id": 206037758,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596641772
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/subset.20errors.20rework/near/206036957\">said</a>:</p>\n<blockquote>\n<p>we can also look at all origins which the introducing origin flows into</p>\n</blockquote>\n<p>this is the part that interacts, right?</p>",
        "id": 206037779,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596641782
    },
    {
        "content": "<p>we can certainly compute two \"parallel\" subset relationships</p>",
        "id": 206037839,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596641808
    },
    {
        "content": "<p>yeah that's a key part, I'm not sure if it's the only part tho</p>",
        "id": 206037880,
        "sender_full_name": "lqd",
        "timestamp": 1596641831
    },
    {
        "content": "<p>absolutely</p>",
        "id": 206037896,
        "sender_full_name": "lqd",
        "timestamp": 1596641841
    },
    {
        "content": "<p>I was initially imagining that we would just filter the loans that get \"introduced\" into the <code>contains</code> (<code>requires</code>?) relationship</p>",
        "id": 206037916,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596641850
    },
    {
        "content": "<p>that's easy</p>",
        "id": 206037922,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596641853
    },
    {
        "content": "<p>the relations should be heavility filtered anyway so having both relationships if need be wouldn't matter much</p>",
        "id": 206037953,
        "sender_full_name": "lqd",
        "timestamp": 1596641871
    },
    {
        "content": "<p>I guess I'm imagining that we can have a relation like <code>contains</code>, but call it <code>contains_placeholder(origin1, origin2, node)</code></p>",
        "id": 206037958,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596641875
    },
    {
        "content": "<p>this is probably <code>subset_placeholder</code> <em>but</em> I think using a distinct name is maybe less confusing? unclera :)</p>",
        "id": 206038013,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596641891
    },
    {
        "content": "<p>perhaps more confusing actually, I take it back</p>",
        "id": 206038026,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596641898
    },
    {
        "content": "<p>anyway the point is that it would be built using <code>subset_base</code> only</p>",
        "id": 206038034,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596641907
    },
    {
        "content": "<p>for potential loan errors we can indeed filter <code>requires</code> that's immediate</p>",
        "id": 206038035,
        "sender_full_name": "lqd",
        "timestamp": 1596641907
    },
    {
        "content": "<p>but we don't have to do the TC on \"useless origins\"</p>",
        "id": 206038059,
        "sender_full_name": "lqd",
        "timestamp": 1596641919
    },
    {
        "content": "<p>(does that work...that might require a lot of duplication I guess for the logic that moves it between nodes)</p>",
        "id": 206038061,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596641924
    },
    {
        "content": "<p>and can filter <code>subsets</code> as well via filtering <code>outlives</code></p>",
        "id": 206038092,
        "sender_full_name": "lqd",
        "timestamp": 1596641941
    },
    {
        "content": "<p>yeah so at least in the <em>opt</em> variant, I was imagining that we would (a) control which loans we introduce and (b) only compute the <code>subset_placeholder</code> if the placeholder origin is known to be part of a potential error</p>",
        "id": 206038174,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596641991
    },
    {
        "content": "<p>agreed</p>",
        "id": 206038244,
        "sender_full_name": "lqd",
        "timestamp": 1596642013
    },
    {
        "content": "<p>but if we are going to restrict the <code>subset</code> relation itself</p>",
        "id": 206038255,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596642024
    },
    {
        "content": "<p>it seems elegant and straightforward</p>",
        "id": 206038256,
        "sender_full_name": "lqd",
        "timestamp": 1596642025
    },
    {
        "content": "<p>I guess I'm not sure that's worth the effort :)</p>",
        "id": 206038273,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596642033
    },
    {
        "content": "<p>in the naive variant, presumably, it could be</p>",
        "id": 206038285,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596642039
    },
    {
        "content": "<p>we don't have to for opt yeah</p>",
        "id": 206038291,
        "sender_full_name": "lqd",
        "timestamp": 1596642042
    },
    {
        "content": "<p>for naive it's trivial, easy and effective</p>",
        "id": 206038305,
        "sender_full_name": "lqd",
        "timestamp": 1596642052
    },
    {
        "content": "<p>well, it's easy, but then it potentially eliminates errors,</p>",
        "id": 206038325,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596642062
    },
    {
        "content": "<p>(at least on clap :)</p>",
        "id": 206038328,
        "sender_full_name": "lqd",
        "timestamp": 1596642062
    },
    {
        "content": "<p>butI guess the answer is that we can include all origins that may be involved in subset errors too?</p>",
        "id": 206038344,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596642075
    },
    {
        "content": "<p>(can we compute that readily enough?)</p>",
        "id": 206038362,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596642087
    },
    {
        "content": "<p>yup</p>",
        "id": 206038367,
        "sender_full_name": "lqd",
        "timestamp": 1596642092
    },
    {
        "content": "<p>I did that once</p>",
        "id": 206038384,
        "sender_full_name": "lqd",
        "timestamp": 1596642103
    },
    {
        "content": "<p>and turns out it prevents most filtering unfortunately on clap ;)</p>",
        "id": 206038485,
        "sender_full_name": "lqd",
        "timestamp": 1596642138
    },
    {
        "content": "<p>oh well</p>",
        "id": 206038490,
        "sender_full_name": "lqd",
        "timestamp": 1596642140
    },
    {
        "content": "<p>so basically we have:</p>\n<ul>\n<li>each loan L that may be live at the point of a contradicting access</li>\n<li>each placeholder origin O1 that may be a subset of some other placeholder origin O2, where <code>O1: O2</code> that is outside the \"known subsets\" </li>\n<li>all origins that contain those loans or placeholders</li>\n</ul>",
        "id": 206038493,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596642142
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/subset.20errors.20rework/near/206038485\">said</a>:</p>\n<blockquote>\n<p>and turns out it prevents most filtering unfortunately on clap ;)</p>\n</blockquote>\n<p>wait, what?</p>",
        "id": 206038511,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596642152
    },
    {
        "content": "<p>it's just the shape of the clap dataset I think</p>",
        "id": 206038538,
        "sender_full_name": "lqd",
        "timestamp": 1596642175
    },
    {
        "content": "<p>that confuses me</p>",
        "id": 206038573,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596642200
    },
    {
        "content": "<p>sorry:</p>",
        "id": 206038583,
        "sender_full_name": "lqd",
        "timestamp": 1596642206
    },
    {
        "content": "<p>are you saying that, in clap at least, there are a lot of potential errors?</p>",
        "id": 206038604,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596642221
    },
    {
        "content": "<p>though to be fair I hadn't limited it only to placeholder <em>only</em> involved in potential subset errors</p>",
        "id": 206038606,
        "sender_full_name": "lqd",
        "timestamp": 1596642221
    },
    {
        "content": "<p>and so the filtering isn't that effective</p>",
        "id": 206038619,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596642226
    },
    {
        "content": "<p>ah</p>",
        "id": 206038633,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596642235
    },
    {
        "content": "<p>sorry I'm confusing you</p>",
        "id": 206038639,
        "sender_full_name": "lqd",
        "timestamp": 1596642238
    },
    {
        "content": "<p>you were saying you limited it to \"anything derived from a <em>placeholder</em>\"</p>",
        "id": 206038648,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596642242
    },
    {
        "content": "<p>there are no potential subset errors in clap</p>",
        "id": 206038687,
        "sender_full_name": "lqd",
        "timestamp": 1596642245
    },
    {
        "content": "<p>yes</p>",
        "id": 206038691,
        "sender_full_name": "lqd",
        "timestamp": 1596642246
    },
    {
        "content": "<p>ok ok</p>",
        "id": 206038699,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596642249
    },
    {
        "content": "<p>I can understand that</p>",
        "id": 206038706,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596642253
    },
    {
        "content": "<p>sorry I had forgotten that key point</p>",
        "id": 206038716,
        "sender_full_name": "lqd",
        "timestamp": 1596642257
    },
    {
        "content": "<p>that does seem imp't</p>",
        "id": 206038756,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596642265
    },
    {
        "content": "<p>turns out something in clap flows into a placeholder and limits filtering</p>",
        "id": 206038770,
        "sender_full_name": "lqd",
        "timestamp": 1596642273
    },
    {
        "content": "<p>it has a weird shape actually, like 2 huge SCCs or something</p>",
        "id": 206038802,
        "sender_full_name": "lqd",
        "timestamp": 1596642287
    },
    {
        "content": "<p>I see, yes, that sounds quite plausible</p>",
        "id": 206038809,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596642290
    },
    {
        "content": "<p>but I think we can limit to cases that may involve <em>errors</em></p>",
        "id": 206038831,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596642303
    },
    {
        "content": "<p>and that is probably a big difference</p>",
        "id": 206038842,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596642308
    },
    {
        "content": "<p>right</p>",
        "id": 206038846,
        "sender_full_name": "lqd",
        "timestamp": 1596642310
    },
    {
        "content": "<p>it absolutely was on illegal access errors so I presume it will on subset errors as well</p>",
        "id": 206038884,
        "sender_full_name": "lqd",
        "timestamp": 1596642330
    },
    {
        "content": "<p>especially since subset errors are, I believe, heavier to compute than the others</p>",
        "id": 206038934,
        "sender_full_name": "lqd",
        "timestamp": 1596642354
    },
    {
        "content": "<p>but maybe clap skewed my view</p>",
        "id": 206038997,
        "sender_full_name": "lqd",
        "timestamp": 1596642366
    },
    {
        "content": "<p>illegal access errors traversals are numerous but shallow in the subset graph, subset errors traversals are few but traverse deeper</p>",
        "id": 206039075,
        "sender_full_name": "lqd",
        "timestamp": 1596642408
    },
    {
        "content": "<p>(or subset multigraph since we don't really link 'static to regular origins -- or hypergraph with <code>outlives</code> as hyperedges between the cfg points, I'm still unsure how to describe it)</p>",
        "id": 206039830,
        "sender_full_name": "lqd",
        "timestamp": 1596642798
    },
    {
        "content": "<p>(that also makes it hard to find papers in the literature to solve our problems for us)</p>",
        "id": 206039956,
        "sender_full_name": "lqd",
        "timestamp": 1596642851
    },
    {
        "content": "<p>transitive closures of dynamic graphs don't really work as is, worst case optimal joins on k^n trees either (though they have a nice data structure I wish I could use because of the naming resemblance: <code>lqdags</code> :)</p>",
        "id": 206040594,
        "sender_full_name": "lqd",
        "timestamp": 1596643151
    },
    {
        "content": "<p>heh</p>",
        "id": 206042946,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596644147
    },
    {
        "content": "<p>ok, well, we should try to document some of the plans from this thread into the hackmd</p>",
        "id": 206042971,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596644161
    },
    {
        "content": "<p>I have to run and grab some lunch but will do</p>",
        "id": 206043017,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596644165
    },
    {
        "content": "<p>great, thank you</p>",
        "id": 206043586,
        "sender_full_name": "lqd",
        "timestamp": 1596644407
    },
    {
        "content": "<p>I’ll turn the naive rules more naive soon-ish</p>",
        "id": 206043640,
        "sender_full_name": "lqd",
        "timestamp": 1596644444
    },
    {
        "content": "<p>and document them in the hackmd, before opening the PR, maybe add them to the book as well now that is think about it</p>",
        "id": 206043736,
        "sender_full_name": "lqd",
        "timestamp": 1596644498
    },
    {
        "content": "<p>enjoy your meal, bon appétit</p>",
        "id": 206043746,
        "sender_full_name": "lqd",
        "timestamp": 1596644506
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> took me a while but I'm adding stuff to <a href=\"https://github.com/rust-lang/polonius/issues/153\">https://github.com/rust-lang/polonius/issues/153</a></p>",
        "id": 206065322,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596654575
    },
    {
        "content": "<p>I may get some of the details wrong, please double check =)</p>",
        "id": 206065324,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596654583
    },
    {
        "content": "<p>Will do :) thanks for doing that</p>",
        "id": 206068955,
        "sender_full_name": "lqd",
        "timestamp": 1596656585
    },
    {
        "content": "<p>that's a great summary</p>",
        "id": 206089622,
        "sender_full_name": "lqd",
        "timestamp": 1596669670
    }
]