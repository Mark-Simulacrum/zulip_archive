[
    {
        "content": "<p>Should I stop working on Souffle integration in <code>rustc</code> current? It's basically done btw, just needs some cleanup. The main motivation was prototyping, but it seems like Niko's frontend is another way of solving that problem.</p>",
        "id": 254720397,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1632496477
    },
    {
        "content": "<p>I would think that this would still be worthwhile</p>",
        "id": 254720559,
        "sender_full_name": "lqd",
        "timestamp": 1632496550
    },
    {
        "content": "<p>esp since you've already done a bunch of work on it and it seems close to being ready</p>",
        "id": 254720652,
        "sender_full_name": "lqd",
        "timestamp": 1632496582
    },
    {
        "content": "<p>like: there still be can be some prototyping left to do, when this encounters the real MIR (and we've done the new fact generation)</p>",
        "id": 254720936,
        "sender_full_name": "lqd",
        "timestamp": 1632496699
    },
    {
        "content": "<p>I do want to know what <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> thinks, but I'll try to get it in a reviewable state over the weekend.</p>",
        "id": 254720942,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1632496702
    },
    {
        "content": "<p>sure, me too, that was just my personal opinion</p>",
        "id": 254720998,
        "sender_full_name": "lqd",
        "timestamp": 1632496725
    },
    {
        "content": "<p>it seems orthogonal enough I guess</p>",
        "id": 254730376,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632500218
    },
    {
        "content": "<p>I envision a <a href=\"http://polonius.next\">polonius.next</a> front-end as being a way to capture isolate regression tests and things</p>",
        "id": 254730404,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632500228
    },
    {
        "content": "<p>like the old NLL-prototype tests, the ones we currently have in the polonius repo (but richer, like we discussed a few times before IIRC), and the chalk self-contained tests (which I believe can be extracted from rust-analyzer or something)</p>",
        "id": 254731037,
        "sender_full_name": "lqd",
        "timestamp": 1632500489
    },
    {
        "content": "<p>Okay, just let me know what's most beneficial in the near-term and I'll try to work with that. I don't want to be off doing my own thing if others are blocked on the lack of a prototyping system.</p>",
        "id": 254731229,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1632500552
    },
    {
        "content": "<p>OK <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> moving to this topic</p>",
        "id": 254733236,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632501356
    },
    {
        "content": "<p>so I added this ast module you can see :)</p>",
        "id": 254733307,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632501365
    },
    {
        "content": "<p>it corresponds very closely to what you see in the hackmd</p>",
        "id": 254733353,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632501384
    },
    {
        "content": "<p>oh I guess I have to deal with recursive types, bah</p>",
        "id": 254733395,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632501399
    },
    {
        "content": "<p>yup</p>",
        "id": 254733397,
        "sender_full_name": "lqd",
        "timestamp": 1632501399
    },
    {
        "content": "<p>now I was working on a PEG parser...</p>",
        "id": 254733453,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632501422
    },
    {
        "content": "<p>which is fairly simple</p>",
        "id": 254733537,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632501462
    },
    {
        "content": "<p>I see</p>",
        "id": 254733625,
        "sender_full_name": "lqd",
        "timestamp": 1632501488
    },
    {
        "content": "<p>so I could commit this and you could try to finish that out, if you wanted :)</p>",
        "id": 254733641,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632501497
    },
    {
        "content": "<p>alternatively,</p>",
        "id": 254733651,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632501503
    },
    {
        "content": "<p>if you prefer,</p>",
        "id": 254733652,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632501504
    },
    {
        "content": "<p>you can work on fact generation</p>",
        "id": 254733659,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632501508
    },
    {
        "content": "<p>ok that sounds good to me :)</p>",
        "id": 254733667,
        "sender_full_name": "lqd",
        "timestamp": 1632501510
    },
    {
        "content": "<p>I was going to write some function from <code>&amp;Ast -&gt; Vec&lt;Facts&gt;</code></p>",
        "id": 254733673,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632501515
    },
    {
        "content": "<p>either work for me tbh</p>",
        "id": 254733686,
        "sender_full_name": "lqd",
        "timestamp": 1632501520
    },
    {
        "content": "<p>I have no idea how hard that will be</p>",
        "id": 254733709,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632501531
    },
    {
        "content": "<p>I'm fine with either one, the fact generation is a bit more exploratory :P but it might be a good way to ensure we agree on the rules</p>",
        "id": 254733764,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632501558
    },
    {
        "content": "<p>(i.e., if you take first stab at it, then I review)</p>",
        "id": 254733797,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632501570
    },
    {
        "content": "<p>let's do that-- you try the fact generation to start :)</p>",
        "id": 254733852,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632501592
    },
    {
        "content": "<p>alright that sounds good, I'll try to start with fact gen</p>",
        "id": 254733872,
        "sender_full_name": "lqd",
        "timestamp": 1632501599
    },
    {
        "content": "<p>let me push the ast code</p>",
        "id": 254733923,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632501604
    },
    {
        "content": "<p>and I'll comment out the parser for now</p>",
        "id": 254733935,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632501608
    },
    {
        "content": "<p>done</p>",
        "id": 254734094,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632501674
    },
    {
        "content": "<p>thanks :)</p>",
        "id": 254734120,
        "sender_full_name": "lqd",
        "timestamp": 1632501689
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> the <code>ast.rs</code> file seems missing ^^</p>",
        "id": 254734500,
        "sender_full_name": "lqd",
        "timestamp": 1632501830
    },
    {
        "content": "<p>oh ..?</p>",
        "id": 254734513,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632501836
    },
    {
        "content": "<p>doh :)</p>",
        "id": 254734520,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632501839
    },
    {
        "content": "<p>pushed</p>",
        "id": 254734638,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632501879
    },
    {
        "content": "<p>thanks <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 254734715,
        "sender_full_name": "lqd",
        "timestamp": 1632501912
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> pushing some code, incomplete parser</p>",
        "id": 254738463,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632503310
    },
    {
        "content": "<p>timely, I was creating up a dummy ast to start emitting some facts ...</p>",
        "id": 254738691,
        "sender_full_name": "lqd",
        "timestamp": 1632503405
    },
    {
        "content": "<p>I'll try to have statements up soon</p>",
        "id": 254738864,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632503482
    },
    {
        "content": "<p>don't rush on my behalf, I'm so slow :/</p>",
        "id": 254739219,
        "sender_full_name": "lqd",
        "timestamp": 1632503629
    },
    {
        "content": "<p>(I'm unlikely to have something interesting to show before the member constraints call but will continue over the weekend)</p>",
        "id": 254739472,
        "sender_full_name": "lqd",
        "timestamp": 1632503673
    },
    {
        "content": "<p>no worries</p>",
        "id": 254739541,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632503686
    },
    {
        "content": "<p>I'm hoping to have the parser by then</p>",
        "id": 254739561,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632503690
    },
    {
        "content": "<p>it's close</p>",
        "id": 254739569,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632503691
    },
    {
        "content": "<p>awesome</p>",
        "id": 254739759,
        "sender_full_name": "lqd",
        "timestamp": 1632503751
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> pushed some more stuff, can now parse basic blocks, statements</p>",
        "id": 254741287,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632504387
    },
    {
        "content": "<p>thanks a bunch :)</p>",
        "id": 254741365,
        "sender_full_name": "lqd",
        "timestamp": 1632504426
    },
    {
        "content": "<p>oh, I forget semicolons</p>",
        "id": 254741523,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632504488
    },
    {
        "content": "<p>I should add those</p>",
        "id": 254741528,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632504490
    },
    {
        "content": "<p>pushed struct declarations</p>",
        "id": 254743563,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632505303
    },
    {
        "content": "<p>ok, pushed fn prototypes</p>",
        "id": 254745966,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632506323
    },
    {
        "content": "<p>so parser is \"code complete\"</p>",
        "id": 254745986,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632506334
    },
    {
        "content": "<p>incredible, right on time as you predicted :)</p>",
        "id": 254746089,
        "sender_full_name": "lqd",
        "timestamp": 1632506383
    },
    {
        "content": "<p>heh, yes</p>",
        "id": 254746329,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632506454
    },
    {
        "content": "<p>just curious, <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span>, if you ever had any time to poke on this :) no worries if not!</p>",
        "id": 255778575,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633108882
    },
    {
        "content": "<p>we should schedule the next hackathon</p>",
        "id": 255778592,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633108890
    },
    {
        "content": "<p>I'm poking as we speak</p>",
        "id": 255778618,
        "sender_full_name": "lqd",
        "timestamp": 1633108905
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> Looking through the PR now. We want to handle <code>drop(place)</code> like <code>let place_ref = &amp;mut place; Drop::drop(place_ref);</code> (treat it like a mutable borrow). This isn't implemented currently right?</p>",
        "id": 257732880,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1634318155
    },
    {
        "content": "<p>right, it is not yet</p>",
        "id": 257732979,
        "sender_full_name": "lqd",
        "timestamp": 1634318191
    },
    {
        "content": "<p>there are some semantics I'm unsure of in the current AST</p>",
        "id": 257733033,
        "sender_full_name": "lqd",
        "timestamp": 1634318217
    },
    {
        "content": "<p>Okay. I could work on that, or something else. Whatever you like.</p>",
        "id": 257733109,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1634318252
    },
    {
        "content": "<p>some expressions are parsed as drop, and I'm unsure whether that's on purpose and real drops or just a catch all, etc</p>",
        "id": 257733215,
        "sender_full_name": "lqd",
        "timestamp": 1634318288
    },
    {
        "content": "<p>for sure, I myself wanted to push a bit more on emitting subset facts</p>",
        "id": 257733261,
        "sender_full_name": "lqd",
        "timestamp": 1634318314
    },
    {
        "content": "<p>Lemme have a look</p>",
        "id": 257733268,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1634318317
    },
    {
        "content": "<p>did anything jump at you being egregiously wrong ?</p>",
        "id": 257733313,
        "sender_full_name": "lqd",
        "timestamp": 1634318343
    },
    {
        "content": "<p>Not yet. Is there some place I should look at first?</p>",
        "id": 257733383,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1634318378
    },
    {
        "content": "<p>not anything specific</p>",
        "id": 257733547,
        "sender_full_name": "lqd",
        "timestamp": 1634318449
    },
    {
        "content": "<p>Ah, so this is not the MIR's <code>Drop</code>. It's just anything that's not an assignment.</p>",
        "id": 257733557,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1634318453
    },
    {
        "content": "<p>it looked like it</p>",
        "id": 257733608,
        "sender_full_name": "lqd",
        "timestamp": 1634318478
    },
    {
        "content": "<p>but maybe it's supposed to be later, I wasn't sure</p>",
        "id": 257733644,
        "sender_full_name": "lqd",
        "timestamp": 1634318496
    },
    {
        "content": "<p>I think I added a todo about this</p>",
        "id": 257733656,
        "sender_full_name": "lqd",
        "timestamp": 1634318502
    },
    {
        "content": "<p>there are other workarounds I had to use here and there to get function calls to parse, adding move/copy etc for the arguments</p>",
        "id": 257733774,
        "sender_full_name": "lqd",
        "timestamp": 1634318539
    },
    {
        "content": "<p>I don't think so. I assume we'd write out the function call manually. The name just confused me, so we can remove that one TODO.</p>",
        "id": 257733934,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1634318604
    },
    {
        "content": "<p>sounds good</p>",
        "id": 257733960,
        "sender_full_name": "lqd",
        "timestamp": 1634318617
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Polonius.2Enext.20frontend/near/257733774\">said</a>:</p>\n<blockquote>\n<p>there are other workarounds I had to use here and there to get function calls to parse, adding move/copy etc for the arguments</p>\n</blockquote>\n<p>I'll poke around here.</p>",
        "id": 257734100,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1634318654
    },
    {
        "content": "<p>great, thank you</p>",
        "id": 257734221,
        "sender_full_name": "lqd",
        "timestamp": 1634318702
    },
    {
        "content": "<p>re: your GH comment, good idea to rename the ast node from Drop to something else less confusing</p>",
        "id": 257735059,
        "sender_full_name": "lqd",
        "timestamp": 1634319054
    },
    {
        "content": "<p>Do you know if we'll need bounds on lifetime parameters in function prototypes?</p>",
        "id": 257735630,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1634319300
    },
    {
        "content": "<p>I think so right?</p>",
        "id": 257735680,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1634319319
    },
    {
        "content": "<p>I was expecting so yeah</p>",
        "id": 257735705,
        "sender_full_name": "lqd",
        "timestamp": 1634319329
    },
    {
        "content": "<p>Okay. I could do that (which would avoid merge conflicts). Unless there's something else on the critical path.</p>",
        "id": 257735880,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1634319402
    },
    {
        "content": "<p>it's fine by me, but it also seems like tedious tasks while your talents could be served in more important areas; unfortunately I'm not sure whether there's something on the critical path</p>",
        "id": 257736185,
        "sender_full_name": "lqd",
        "timestamp": 1634319531
    },
    {
        "content": "<p>but that would definitely be useful and appreciated, let's be clear ^^</p>",
        "id": 257736403,
        "sender_full_name": "lqd",
        "timestamp": 1634319607
    },
    {
        "content": "<p>(ah another parsing related one was: I was thinking we could collect the full statement somewhere in the ast node, in order to emit it as <code>node_text</code> for soufflé and the fact viz) (but I could also just pretty print the ast and emit that, it just seemed easier to do while parsing)</p>",
        "id": 257736600,
        "sender_full_name": "lqd",
        "timestamp": 1634319714
    },
    {
        "content": "<p>Does the parser generator support <code>Span</code>s?</p>",
        "id": 257736800,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1634319807
    },
    {
        "content": "<p>I haven't checked this crate at all, I have no idea</p>",
        "id": 257736935,
        "sender_full_name": "lqd",
        "timestamp": 1634319858
    },
    {
        "content": "<p>I'll check. That seems like a \"principled\" way of handling things.</p>",
        "id": 257737033,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1634319904
    },
    {
        "content": "<p>very true, they must somewhat do so to support parsing errors</p>",
        "id": 257737104,
        "sender_full_name": "lqd",
        "timestamp": 1634319942
    },
    {
        "content": "<p>hopefully it's not just some internal construct and is usable in the grammar</p>",
        "id": 257737394,
        "sender_full_name": "lqd",
        "timestamp": 1634320057
    },
    {
        "content": "<p>They do. I'll span some stuff. Doing lifetime bounds on function parameters requires porting over the variance rules, which will be a bit involved.</p>",
        "id": 257737575,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1634320122
    },
    {
        "content": "<p>yeah I'm going to port the variance rules to emit the correct introduce_subset facts</p>",
        "id": 257737710,
        "sender_full_name": "lqd",
        "timestamp": 1634320178
    },
    {
        "content": "<p>we probably will need the ones about implied bounds as well and I'm not sure we have some definitive documentation about this, like we have for variance (maybe we can make do without them until then)</p>",
        "id": 257737930,
        "sender_full_name": "lqd",
        "timestamp": 1634320263
    },
    {
        "content": "<p>(or maybe if we don't expect they help validate/invalidate the proof of concept analysis, we don't do that and add fact gen to rustc instead)</p>",
        "id": 257738223,
        "sender_full_name": "lqd",
        "timestamp": 1634320384
    },
    {
        "content": "<p>I don't think we'll have implied bounds unless we have lifetime bounds on structs. Is that in the cards for the frontend? At some point we'll feel good enough about all this that we'll port it to rustc</p>",
        "id": 257738255,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1634320399
    },
    {
        "content": "<p>in the absolute we could be super thorough in the frontend, to help with in-tree tests and all, whether that's worth the work to do all that, and if/when we do that work, I'm not sure ^^ probably the best bang for our buck is porting to rustc sooner rather than later</p>",
        "id": 257738743,
        "sender_full_name": "lqd",
        "timestamp": 1634320594
    },
    {
        "content": "<p>(especially once we figure out the current set of problematic cases you've uncovered, so that we can look for more of those in rustc's tests :)</p>",
        "id": 257739227,
        "sender_full_name": "lqd",
        "timestamp": 1634320801
    },
    {
        "content": "<p>I've got some <code>ariadne</code> boilerplate laying around, so I'll do the <code>Span</code> stuff and then re-evaluate.</p>",
        "id": 257739328,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1634320815
    },
    {
        "content": "<p>sweet</p>",
        "id": 257739590,
        "sender_full_name": "lqd",
        "timestamp": 1634320925
    },
    {
        "content": "<p>I have some time today, so I could help out a bit. I see a few open tasks (mostly from your todos) that wouldn't conflict too much with the main PR:</p>\n<ul>\n<li>lifetime parameters on functions</li>\n<li>borrows and invalidations of struct fields</li>\n<li>sanity check for types (no field projections on an <code>i32</code>)</li>\n<li>write down (or link to) detailed rules for loan invalidation</li>\n</ul>",
        "id": 257856681,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1634414201
    },
    {
        "content": "<p>all of those sound great to me</p>",
        "id": 257856798,
        "sender_full_name": "lqd",
        "timestamp": 1634414285
    },
    {
        "content": "<p>thanks for the 2 earlier PRs, I'll merge the last one and rebase over them</p>",
        "id": 257856828,
        "sender_full_name": "lqd",
        "timestamp": 1634414315
    },
    {
        "content": "<p>Cool. You'll have to keep the input string around while emitting facts, but that shouldn't be a problem.</p>",
        "id": 257856862,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1634414360
    },
    {
        "content": "<p>yeah, sounds fine</p>",
        "id": 257856885,
        "sender_full_name": "lqd",
        "timestamp": 1634414393
    },
    {
        "content": "<p>it'll probably change the parser test snapshots, so I'll find out hwo to move them out of band while doing the rebase</p>",
        "id": 257856969,
        "sender_full_name": "lqd",
        "timestamp": 1634414420
    },
    {
        "content": "<p>(it's probably just calling one of the other assertions, with json/yaml formats instead of just inline Debug output)</p>",
        "id": 257857005,
        "sender_full_name": "lqd",
        "timestamp": 1634414445
    },
    {
        "content": "<p>Oh, actually I didn't think inline snapshots could be blessed, but that's wrong: <a href=\"https://docs.rs/insta/1.8.0/insta/index.html#inline-snapshots\">https://docs.rs/insta/1.8.0/insta/index.html#inline-snapshots</a></p>",
        "id": 257857039,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1634414476
    },
    {
        "content": "<p>though as I said in the comment, even just this debug assert has nice ergonomics since they're automatically updated</p>",
        "id": 257857051,
        "sender_full_name": "lqd",
        "timestamp": 1634414490
    },
    {
        "content": "<p>yeah that's really nice</p>",
        "id": 257857064,
        "sender_full_name": "lqd",
        "timestamp": 1634414504
    },
    {
        "content": "<p>Yeah, my bad. It's just personal preference. The status quo is fine then.</p>",
        "id": 257857117,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1634414526
    },
    {
        "content": "<p>oh I don't mind, it makes the tests simpler/shorter</p>",
        "id": 257857141,
        "sender_full_name": "lqd",
        "timestamp": 1634414548
    },
    {
        "content": "<p>hopefully the stored snapshots are still readable as AST documentation</p>",
        "id": 257857164,
        "sender_full_name": "lqd",
        "timestamp": 1634414574
    },
    {
        "content": "<p>they should look fine in RON, we'll see :) otherwise yeah we can just keep them as-is for some easy to read reference</p>",
        "id": 257857328,
        "sender_full_name": "lqd",
        "timestamp": 1634414726
    },
    {
        "content": "<p>RON is dope. Especially for ASTs</p>",
        "id": 257857403,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1634414783
    },
    {
        "content": "<p>I'll do that then</p>",
        "id": 257857489,
        "sender_full_name": "lqd",
        "timestamp": 1634414880
    },
    {
        "content": "<p>Also, I wonder if we'll want a \"shallow\" borrow (a shared borrow of a place that doesn't conflict with mutable borrows of that place's fields). I don't think we'll be able to replicate examples using <code>match</code> otherwise.</p>",
        "id": 257857847,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1634415157
    },
    {
        "content": "<p>oh I hadn't considered that, that sounds like something we'd need (I remember <code>match</code>, guards, fake reads etc being touchy but have litle to no experience with them)</p>",
        "id": 257858234,
        "sender_full_name": "lqd",
        "timestamp": 1634415451
    },
    {
        "content": "<p>FWIW regarding <code>insta</code>, there is also an assertion that keeps the current format, but as a file. So the <code>Debug</code> is saved in the snapshot file</p>",
        "id": 257863818,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1634420728
    },
    {
        "content": "<p>which one is that ? is it done by using a snapshot name in all macros actually ?</p>",
        "id": 257863964,
        "sender_full_name": "lqd",
        "timestamp": 1634420845
    },
    {
        "content": "<p>(ie, do the macros both support inline snapshots and out of bands snapshots ?)</p>",
        "id": 257864041,
        "sender_full_name": "lqd",
        "timestamp": 1634420884
    },
    {
        "content": "<p>(looks like it)</p>",
        "id": 257864066,
        "sender_full_name": "lqd",
        "timestamp": 1634420913
    },
    {
        "content": "<p>It's this one </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">insta</span>::<span class=\"n\">assert_snapshot</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">snapshot_name_from_thread</span><span class=\"p\">().</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"could not compute snapshot name\"</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">tree</span><span class=\"p\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"p\">.</span><span class=\"n\">resolver</span><span class=\"p\">().</span><span class=\"n\">as_ref</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 257864372,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1634421222
    },
    {
        "content": "<p>(don't mind the weird way to call debug, this is from a project of mine)</p>",
        "id": 257864444,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1634421269
    },
    {
        "content": "<p>So yeah, name plus output plus input (since input appears in the snapshots as a reference)</p>",
        "id": 257864501,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1634421340
    },
    {
        "content": "<p>it looks like just asserting works like this as well</p>",
        "id": 257864519,
        "sender_full_name": "lqd",
        "timestamp": 1634421358
    },
    {
        "content": "<p>the name being optional, it creates an out of band snapshot with its own generated name</p>",
        "id": 257864570,
        "sender_full_name": "lqd",
        "timestamp": 1634421375
    },
    {
        "content": "<p>seems to work nicely, thanks for the info !</p>",
        "id": 257864578,
        "sender_full_name": "lqd",
        "timestamp": 1634421387
    },
    {
        "content": "<p>(and there's a VSCode extension to help with snapshot files as well, nice)</p>",
        "id": 257864609,
        "sender_full_name": "lqd",
        "timestamp": 1634421437
    },
    {
        "content": "<p>Possible, it's been I while since I made these</p>",
        "id": 257864616,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1634421448
    },
    {
        "content": "<p>Tell me if you can get that extension to work, I don't think it did for me at the time</p>",
        "id": 257864684,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1634421487
    },
    {
        "content": "<p>will do, though I suspect one doesn't need it as much if you mostly use inline snapshots like I did here</p>",
        "id": 257864701,
        "sender_full_name": "lqd",
        "timestamp": 1634421530
    },
    {
        "content": "<p>But sounds like the snapshots in general work for you <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 257864704,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1634421533
    },
    {
        "content": "<p>yeah using insta was a great recommendation, thanks</p>",
        "id": 257864747,
        "sender_full_name": "lqd",
        "timestamp": 1634421596
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"337115\">Domenic Quirl</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Polonius.2Enext.20frontend/near/257864684\">said</a>:</p>\n<blockquote>\n<p>Tell me if you can get that extension to work, I don't think it did for me at the time</p>\n</blockquote>\n<p>I don't think it works correctly for me either, it doesn't jump to the stored snapshots at least. the other commands may work, and there's some UI to compare snapshots but that's less feature-ful than the CLI</p>",
        "id": 258260873,
        "sender_full_name": "lqd",
        "timestamp": 1634673143
    },
    {
        "content": "<p>I'm not sure what you all would like to see in fact generation before we start merging some of it ? But I've marked <a href=\"https://github.com/nikomatsakis/polonius.next/pull/4\">https://github.com/nikomatsakis/polonius.next/pull/4</a> as not WIP any more. It's missing a bunch of things and all, but hopefully it's a start.</p>\n<p>Dylan has been kindly adding some things that were missing elsewhere, in the parser and implementing some rules already. It will likely be easier to improve fact gen after all these have been merged (rather than rebasing this big PR if we merge these newer ones first).</p>",
        "id": 258265231,
        "sender_full_name": "lqd",
        "timestamp": 1634674828
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Polonius.2Enext.20frontend/near/258260873\">said</a>:</p>\n<blockquote>\n<p>I don't think it works correctly for me either, it doesn't jump to the stored snapshots at least. the other commands may work, and there's some UI to compare snapshots but that's less feature-ful than the CLI</p>\n</blockquote>\n<p>Also thanks for sharing <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 258339294,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1634722989
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Polonius.2Enext.20frontend/near/258265231\">said</a>:</p>\n<blockquote>\n<p>I'm not sure what you all would like to see in fact generation before we start merging some of it ? But I've marked <a href=\"https://github.com/nikomatsakis/polonius.next/pull/4\">https://github.com/nikomatsakis/polonius.next/pull/4</a> as not WIP any more. It's missing a bunch of things and all, but hopefully it's a start.</p>\n<p>Dylan has been kindly adding some things that were missing elsewhere, in the parser and implementing some rules already. It will likely be easier to improve fact gen after all these have been merged (rather than rebasing this big PR if we merge these newer ones first).</p>\n</blockquote>\n<p>I think it's just that in general, we should be careful with integrating parts of the pipeline that are knowingly incorrect. We know about that and are actively working on fact gen at the moment, so if you're saying that will be easier if we merge the partial implementation then I'm ok with saying \"go for it\". But we should keep an eye on this and make sure to patch it up as soon as possible, at least to the level we have discovered things already so it matches our current understanding.</p>",
        "id": 258339686,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1634723188
    }
]