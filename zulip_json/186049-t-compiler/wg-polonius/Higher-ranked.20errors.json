[
    {
        "content": "<p>so <span class=\"user-mention\" data-user-id=\"118594\">@Dylan MacKenzie (ecstatic-morse)</span> -- it seems like the first thing is to ask whether you understand the universe stuff currently compiler is using --</p>",
        "id": 247718146,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627656754
    },
    {
        "content": "<p>No I do not. What parts of the compiler should I read?</p>",
        "id": 247718276,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627656814
    },
    {
        "content": "<p>I mean, I assume it is basically what was in my post</p>",
        "id": 247718300,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627656831
    },
    {
        "content": "<p>?</p>",
        "id": 247718337,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627656840
    },
    {
        "content": "<p><a href=\"https://rustc-dev-guide.rust-lang.org/borrow_check/region_inference/placeholders_and_universes.html\">https://rustc-dev-guide.rust-lang.org/borrow_check/region_inference/placeholders_and_universes.html</a></p>",
        "id": 247718418,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627656860
    },
    {
        "content": "<p>probably worth skimming that just aso we are using same vocabulary in the same way</p>",
        "id": 247718449,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627656878
    },
    {
        "content": "<p>these docs are extremely good</p>",
        "id": 247718451,
        "sender_full_name": "lqd",
        "timestamp": 1627656880
    },
    {
        "content": "<p>I am imagining that we will include \"universe\" information in our input facts and that we will look for outlives relations where the universe doesn't line up and convert them</p>",
        "id": 247718549,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627656942
    },
    {
        "content": "<p>Let me find the part of the compiler that does that today</p>",
        "id": 247718558,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627656948
    },
    {
        "content": "<p>the part that emits the outlives relationships ?</p>",
        "id": 247718654,
        "sender_full_name": "lqd",
        "timestamp": 1627656979
    },
    {
        "content": "<p>(if so: <a href=\"https://github.com/rust-lang/rust/blob/87dc8242484110c75596a91ebd2043a476c09839/compiler/rustc_mir/src/borrow_check/type_check/mod.rs#L270-L293\">https://github.com/rust-lang/rust/blob/87dc8242484110c75596a91ebd2043a476c09839/compiler/rustc_mir/src/borrow_check/type_check/mod.rs#L270-L293</a>)</p>",
        "id": 247718867,
        "sender_full_name": "lqd",
        "timestamp": 1627657092
    },
    {
        "content": "<p>(read through, still grokking)</p>",
        "id": 247719018,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627657197
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/87dc8242484110c75596a91ebd2043a476c09839/compiler/rustc_mir/src/borrow_check/region_infer/mod.rs#L628-L663\">https://github.com/rust-lang/rust/blob/87dc8242484110c75596a91ebd2043a476c09839/compiler/rustc_mir/src/borrow_check/region_infer/mod.rs#L628-L663</a></p>",
        "id": 247719183,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627657244
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> I think it's more about where the outlives constraints themselves are getting generated</p>",
        "id": 247719190,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627657245
    },
    {
        "content": "<p>this is the code I was thinking of</p>",
        "id": 247719194,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627657250
    },
    {
        "content": "<p>ah ok sorry <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 247719240,
        "sender_full_name": "lqd",
        "timestamp": 1627657268
    },
    {
        "content": "<p>basically the input to the existing region solver contains region variables in different universes</p>",
        "id": 247719241,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627657269
    },
    {
        "content": "<p>and placeholders in those universes</p>",
        "id": 247719267,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627657277
    },
    {
        "content": "<p>The SCC here is cyclical lifetime constraints? ('a: 'b: 'c: 'a)?</p>",
        "id": 247719292,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627657286
    },
    {
        "content": "<p>correct</p>",
        "id": 247719303,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627657292
    },
    {
        "content": "<p>actually I think that the gist where I described this was good too</p>",
        "id": 247719342,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627657309
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/65232\">https://github.com/rust-lang/rust/pull/65232</a></p>",
        "id": 247719457,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627657349
    },
    {
        "content": "<p>trying to find that MCP</p>",
        "id": 247719497,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627657366
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> do you have that link handy?</p>",
        "id": 247719509,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627657374
    },
    {
        "content": "<p><a href=\"https://gist.github.com/nikomatsakis/8bfda6c1119727e13ec6e98f33d2b696#future-directions-let-the-trait-solver-solve-higher-ranked-things\">https://gist.github.com/nikomatsakis/8bfda6c1119727e13ec6e98f33d2b696#future-directions-let-the-trait-solver-solve-higher-ranked-things</a></p>",
        "id": 247719538,
        "sender_full_name": "lqd",
        "timestamp": 1627657386
    },
    {
        "content": "<p>yeah, so that whole write-up gives some context</p>",
        "id": 247719611,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627657425
    },
    {
        "content": "<p>Okay, and what are <code>member_constraints</code>?</p>",
        "id": 247719618,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627657427
    },
    {
        "content": "<p>ah :)</p>",
        "id": 247719623,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627657432
    },
    {
        "content": "<p>those are orthogonal</p>",
        "id": 247719654,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627657441
    },
    {
        "content": "<p>but basically they say: \"the value of this region must be one of the following values\"</p>",
        "id": 247719710,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627657450
    },
    {
        "content": "<p>i.e., </p>\n<div class=\"codehilite\" data-code-language=\"TeX\"><pre><span></span><code>x <span class=\"k\">\\in</span> <span class=\"nb\">{</span> a, b, c <span class=\"nb\">}</span>\n</code></pre></div>",
        "id": 247719736,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627657462
    },
    {
        "content": "<p>Oh yeah, those arise from a new language feature right?</p>",
        "id": 247719750,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627657469
    },
    {
        "content": "<p>oh, that didn't do what I wanted <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>∈</mo><mo stretchy=\"false\">{</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo separator=\"true\">,</mo><mi>c</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">x \\in \\{a, b, c\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mclose\">}</span></span></span></span></p>",
        "id": 247719752,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627657471
    },
    {
        "content": "<p>from impl Trait</p>",
        "id": 247719777,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627657480
    },
    {
        "content": "<p>there we go :)</p>",
        "id": 247719837,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627657506
    },
    {
        "content": "<p>Type alias impl Trait? or  APIT/RPIT</p>",
        "id": 247719845,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627657507
    },
    {
        "content": "<p>RPIT</p>",
        "id": 247719859,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627657513
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/61997\">https://github.com/rust-lang/rust/issues/61997</a></p>",
        "id": 247719886,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627657524
    },
    {
        "content": "<p><a href=\"https://rustc-dev-guide.rust-lang.org/borrow_check/region_inference/member_constraints.html\">https://rustc-dev-guide.rust-lang.org/borrow_check/region_inference/member_constraints.html</a></p>",
        "id": 247719930,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627657545
    },
    {
        "content": "<p>probably worth reading</p>",
        "id": 247720019,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627657568
    },
    {
        "content": "<p>So it will take me a bit to get an intuition for the universe rules, but I can do that async</p>",
        "id": 247720030,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627657572
    },
    {
        "content": "<p>since ... probably polonius needs to handle those too :)</p>",
        "id": 247720035,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627657575
    },
    {
        "content": "<p>yeah so .. uh .. go read a bit and we'll sync back in a bit  :)</p>",
        "id": 247720062,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627657587
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Higher-ranked.20errors/near/247719457\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/rust-lang/rust/pull/65232\">https://github.com/rust-lang/rust/pull/65232</a></p>\n</blockquote>\n<p>I think we should add the lattice in the PR description to the rustc dev guide btw</p>",
        "id": 247722647,
        "sender_full_name": "lqd",
        "timestamp": 1627658657
    },
    {
        "content": "<p>sounds right</p>",
        "id": 247722734,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627658698
    },
    {
        "content": "<p>how goes, <span class=\"user-mention\" data-user-id=\"118594\">@Dylan MacKenzie (ecstatic-morse)</span> ?</p>",
        "id": 247726698,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627660578
    },
    {
        "content": "<p>Slowly <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> I have some  questions:</p>\n<ul>\n<li>\n<p>What are the difficulties you foresee in integrating universe-style handling of HRTBs with the <code>subset_errors</code> proposals in Polonius? Does this even make sense? Asked anoterh way, in Polonius, the plan is (roughly) to compute all the ubset constraints on bound lifetimes, then compare them with the subset relations we derive from the function body. Is this compatible with the current system?</p>\n</li>\n<li>\n<p>In the dev-guide, HRTBs on the left side of an outlives relation get replaced by existential variables, while those on the right side get replaced by universal ones. What's the rationale for this?</p>\n</li>\n</ul>",
        "id": 247728726,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627661528
    },
    {
        "content": "<p>Part of the difficulty I'm having is that there are constraints like CFG (holds at all points) and <code>end</code>. I don't know if these are still relevant to Polonius.</p>",
        "id": 247728952,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627661642
    },
    {
        "content": "<p>To expand on the first point a bit, it sort of seems like universes are just a really fast way of determining when an inference-derived outlives relationship can possibly be present in the prescribed relationships on bound regions.</p>",
        "id": 247729368,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627661852
    },
    {
        "content": "<p>If I see a derived  outlives relationship (involving a variable from an inner universe) escape into an outer universe, I know that cannot possibly be derivable from the provided outlives relationships</p>",
        "id": 247729596,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627661986
    },
    {
        "content": "<p>OK, so:</p>",
        "id": 247729789,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627662077
    },
    {
        "content": "<ul>\n<li>For the subset relations:</li>\n</ul>",
        "id": 247729798,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627662082
    },
    {
        "content": "<p>ack, sorry</p>",
        "id": 247730773,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627662519
    },
    {
        "content": "<p>got distracted</p>",
        "id": 247730776,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627662521
    },
    {
        "content": "<p>ok, so, the <em>subset errors</em> are all about relationships between the placeholder regions from the function declaration</p>",
        "id": 247730815,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627662540
    },
    {
        "content": "<p>those are all in the root universe</p>",
        "id": 247730819,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627662543
    },
    {
        "content": "<p>of course they can interact here, since you might have <code>forall&lt;'b&gt; 'a: 'b</code> where <code>'a</code> is a placeholder region</p>",
        "id": 247730849,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627662562
    },
    {
        "content": "<p>and yes, universes are basically a fast way to encode the ordering</p>",
        "id": 247730960,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627662605
    },
    {
        "content": "<p>tbh I am not sure what I imagine yet, so let's talk it out a bit</p>",
        "id": 247730989,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627662625
    },
    {
        "content": "<p>there was a period where I was trying to encode all the logic into polonius that the NLL checker currently does</p>",
        "id": 247731059,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627662673
    },
    {
        "content": "<p>it was quite painful to express in datalog</p>",
        "id": 247731064,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627662677
    },
    {
        "content": "<p>not impossible, but painful</p>",
        "id": 247731067,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627662679
    },
    {
        "content": "<p>but maybe we start <span class=\"user-mention\" data-user-id=\"118594\">@Dylan MacKenzie (ecstatic-morse)</span> by encoding \"what is the input to the NLL checker today\"</p>",
        "id": 247731124,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627662713
    },
    {
        "content": "<p>I think it is something like this:</p>",
        "id": 247731132,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627662718
    },
    {
        "content": "<p><em>all</em> the logic includes like reducing subtype relationships to region constraints?</p>",
        "id": 247731136,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627662719
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>placeholder_origin(O:origin, L:loan, U:universe)\n</code></pre></div>",
        "id": 247731229,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627662761
    },
    {
        "content": "<p>and then</p>",
        "id": 247731240,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627662766
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>universe_less_than(U1:universe, U2:universe) -- U1 &lt; U2 means that U1 has fewer names than U2\n</code></pre></div>",
        "id": 247731320,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627662812
    },
    {
        "content": "<p>let's ignore the whole transitive blah blah and just assume that it works magically</p>",
        "id": 247731330,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627662824
    },
    {
        "content": "<p>oh and one other thing</p>",
        "id": 247731350,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627662837
    },
    {
        "content": "<p>Yep no problem</p>",
        "id": 247731355,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627662840
    },
    {
        "content": "<p>actually</p>",
        "id": 247731405,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627662851
    },
    {
        "content": "<p>replace what I said with</p>\n<div class=\"codehilite\"><pre><span></span><code>origin_universe(O:origin, U:universe)\nuniverse_less_than(U1:universe, U2:universe) // U1 &lt; U2\n</code></pre></div>",
        "id": 247731510,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627662876
    },
    {
        "content": "<p>we have some placeholders too </p>\n<div class=\"codehilite\"><pre><span></span><code>.decl placeholder(O:origin, L:loan)\n</code></pre></div>",
        "id": 247731648,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627662904
    },
    {
        "content": "<p>but we can join that with <code>origin_universe</code></p>",
        "id": 247731697,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627662913
    },
    {
        "content": "<p>actually, <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span>, the approach your PR took, it's not \"in sync\" with <a href=\"https://hackmd.io/CGMNjt1hR_qYtsR9hgdGmw?view\">the rules as documented</a>, correct?</p>",
        "id": 247731781,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627662930
    },
    {
        "content": "<p>for subset errors you mean ?</p>",
        "id": 247731869,
        "sender_full_name": "lqd",
        "timestamp": 1627662952
    },
    {
        "content": "<p>also, I think that we should move those rules out from the hackmd and into the polonius book</p>",
        "id": 247731870,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627662955
    },
    {
        "content": "<p>right</p>",
        "id": 247731874,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627662956
    },
    {
        "content": "<p>or is it? I forget</p>",
        "id": 247731881,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627662958
    },
    {
        "content": "<p>I feel like we went back to my older approach, right?</p>",
        "id": 247731930,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627662966
    },
    {
        "content": "<p>instead of using loans</p>",
        "id": 247731935,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627662968
    },
    {
        "content": "<p>or I forget</p>",
        "id": 247731957,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627662979
    },
    {
        "content": "<p>yeah it solely about subsets now</p>",
        "id": 247731959,
        "sender_full_name": "lqd",
        "timestamp": 1627662981
    },
    {
        "content": "<p>ok good</p>",
        "id": 247731966,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627662985
    },
    {
        "content": "<p><em>anyway</em></p>",
        "id": 247731977,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627662989
    },
    {
        "content": "<p>(let me check what we have in the rules and in the book)</p>",
        "id": 247731991,
        "sender_full_name": "lqd",
        "timestamp": 1627662994
    },
    {
        "content": "<p>point is that we have a universe for each origin</p>",
        "id": 247732004,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627663002
    },
    {
        "content": "<p>and in particular placeholder origins are known to inhabit their universe</p>",
        "id": 247732029,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627663018
    },
    {
        "content": "<p>with me so far, Dylan?</p>",
        "id": 247732037,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627663021
    },
    {
        "content": "<p>Yes.</p>",
        "id": 247732050,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627663027
    },
    {
        "content": "<p>that is I think what the compiler is computing</p>",
        "id": 247732057,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627663031
    },
    {
        "content": "<p>so what NLL basically does is say:</p>",
        "id": 247732075,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627663041
    },
    {
        "content": "<ul>\n<li>if some origin O in universe U1 would have to outlive a placeholder P from universe U2...</li>\n<li>and U1 &lt; U2 (and hence O cannot name P)...</li>\n<li>then O must be 'static</li>\n</ul>",
        "id": 247732215,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627663087
    },
    {
        "content": "<p>this is basically the rule from your blog post :)</p>",
        "id": 247732221,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627663093
    },
    {
        "content": "<p>we do this by computing SCCs, and finding the min universe of all things in the SCC, etc</p>",
        "id": 247732297,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627663142
    },
    {
        "content": "<p>but that's still the basic idea, you could use a more naive iteration</p>",
        "id": 247732312,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627663149
    },
    {
        "content": "<p>This comes from this paragraph?</p>\n<blockquote>\n<p>Now there are two ways that could happen. First, if U(V1) can see the universe x (i.e., x &lt;= U(V1)), then we can just add placeholder(x) to value(V1) and be done. But if not, then we have to approximate: we may not know what set of elements placeholder(x) represents, but we should be able to compute some sort of upper bound B for it – some region B that outlives placeholder(x). For now, we'll just use 'static for that (since it outlives everything) – in the future, we can sometimes be smarter here (and in fact we have code for doing this already in other contexts). Moreover, since 'static is in the root universe U0, we know that all variables can see it – so basically if we find that value(V2) contains placeholder(x) for some universe x that V1 can't see, then we force V1 to 'static.</p>\n</blockquote>",
        "id": 247732333,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627663159
    },
    {
        "content": "<p>From the dev-guide?</p>",
        "id": 247732356,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627663169
    },
    {
        "content": "<p>Correct</p>",
        "id": 247732372,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627663181
    },
    {
        "content": "<p>so polonius works a bit differently</p>",
        "id": 247732541,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627663249
    },
    {
        "content": "<p>it doesn't have <em>outlives</em></p>",
        "id": 247732549,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627663252
    },
    {
        "content": "<p>it has <em>subset</em></p>",
        "id": 247732552,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627663255
    },
    {
        "content": "<p>And consequently no upper bound</p>",
        "id": 247732597,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627663281
    },
    {
        "content": "<p>yes but the ordering is reversed</p>",
        "id": 247732621,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627663292
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 247732623,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627663293
    },
    {
        "content": "<p>(<code>'static</code> is the lower bound)</p>",
        "id": 247732628,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627663296
    },
    {
        "content": "<p>Ah okay yes</p>",
        "id": 247732639,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627663302
    },
    {
        "content": "<p>(is that right?) /me thinks</p>",
        "id": 247732662,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627663312
    },
    {
        "content": "<p>if you have <code>&amp;'a u32 &lt;: &amp;'b u32</code> you get <code>subset('a, 'b)</code></p>",
        "id": 247732734,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627663336
    },
    {
        "content": "<p>and you get <code>outlives('a: 'b)</code></p>",
        "id": 247732753,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627663345
    },
    {
        "content": "<p>so if you had <code>forall&lt;'b&gt; subset('a, 'b)</code></p>",
        "id": 247732787,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627663361
    },
    {
        "content": "<p>then <code>'a</code> would have to be the empty set</p>",
        "id": 247732799,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627663365
    },
    {
        "content": "<p>in order for us to know that is true</p>",
        "id": 247732805,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627663368
    },
    {
        "content": "<p>and 'static is the empty set</p>",
        "id": 247732811,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627663373
    },
    {
        "content": "<p>so it all maps :)</p>",
        "id": 247732817,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627663375
    },
    {
        "content": "<p>so I am wondering</p>",
        "id": 247732880,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627663405
    },
    {
        "content": "<p>it <em>seems</em> like you could just do the same subset error thing that <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span>'s PR does now</p>",
        "id": 247732930,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627663428
    },
    {
        "content": "<p>but add in an extra check</p>",
        "id": 247732937,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627663433
    },
    {
        "content": "<p>something like</p>",
        "id": 247732941,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627663434
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>universe_error(o_error) :-\n    placeholder(o_placeholder),\n    universe(o_placeholder, u_placeholder),\n    subset(o_placeholder, o_error, P),\n    universe(o_error, u_error),\n    universe_less_than(u_error, u_placeholder),\n    contains(o_error, L1), // o_error is non-empty?\n</code></pre></div>",
        "id": 247733142,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627663515
    },
    {
        "content": "<p>er wait</p>",
        "id": 247733187,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627663534
    },
    {
        "content": "<p>one thing is missing :)</p>",
        "id": 247733193,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627663538
    },
    {
        "content": "<p>something like that</p>",
        "id": 247733224,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627663553
    },
    {
        "content": "<p>we already get errors for two placeholders being related that aren't known to be related</p>",
        "id": 247733316,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627663579
    },
    {
        "content": "<p>so I think the only case we have to worry about is something that has a loan from the program itself</p>",
        "id": 247733332,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627663591
    },
    {
        "content": "<p>(<span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> are you following along here?)</p>",
        "id": 247733366,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627663617
    },
    {
        "content": "<p>(not yet, but I'm catching up)</p>",
        "id": 247733412,
        "sender_full_name": "lqd",
        "timestamp": 1627663644
    },
    {
        "content": "<p>this seems kinda' easy so I'm wondering if I'm missing something</p>",
        "id": 247733433,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627663656
    },
    {
        "content": "<p>ah I remember</p>",
        "id": 247733443,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627663664
    },
    {
        "content": "<p>indeed before I was trying to encode \"environments\"</p>",
        "id": 247733454,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627663671
    },
    {
        "content": "<p>and getting annoying</p>",
        "id": 247733466,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627663674
    },
    {
        "content": "<p>e.g. to handle something like <code>for&lt;'a, 'b&gt; if ('a: 'b, 'b: 'a) { ... /* in here, 'a = 'b */ ... }</code></p>",
        "id": 247733531,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627663690
    },
    {
        "content": "<p>but if we aren't trying to be smarter than the compiler, maybe it's not very hard</p>",
        "id": 247733559,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627663705
    },
    {
        "content": "<p>how would a loan from the program itself appear in such an error btw ?</p>",
        "id": 247733576,
        "sender_full_name": "lqd",
        "timestamp": 1627663713
    },
    {
        "content": "<p>well for example</p>",
        "id": 247733607,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627663727
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">a</span><span class=\"w\"> </span>: <span class=\"o\">'</span><span class=\"na\">b</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">22</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 247733652,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627663752
    },
    {
        "content": "<p>(I'm not trying to poke holes or anything, genuinely curious and don't know the answer to the question)</p>",
        "id": 247733663,
        "sender_full_name": "lqd",
        "timestamp": 1627663754
    },
    {
        "content": "<p>in the <code>bar</code> function, the origin for <code>&amp;x</code>  will include a loan of <code>x</code></p>",
        "id": 247733715,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627663779
    },
    {
        "content": "<p>but it will be required to outlive a placeholder in some fresh universe</p>",
        "id": 247733739,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627663789
    },
    {
        "content": "<p>(to account for the <code>for&lt;'b&gt; 'a: 'b</code> where clause on <code>foo</code>)</p>",
        "id": 247733756,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627663800
    },
    {
        "content": "<p>ok I'm starting to see, thank you</p>",
        "id": 247733851,
        "sender_full_name": "lqd",
        "timestamp": 1627663837
    },
    {
        "content": "<p>In your example, is the universe with  the <code>where</code> clause less than or greater than that of the body of <code>bar</code>?</p>",
        "id": 247733860,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627663843
    },
    {
        "content": "<p>the other case is something like</p>",
        "id": 247733871,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627663846
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">a</span><span class=\"w\"> </span>: <span class=\"o\">'</span><span class=\"na\">b</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"o\">&lt;'</span><span class=\"na\">x</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">x</span> <span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 247733918,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627663871
    },
    {
        "content": "<p>this should be an error, but here, since we don't have placeholder loans, the error would fall out from your existing logic, <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span></p>",
        "id": 247733946,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627663889
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"118594\">Dylan MacKenzie (ecstatic-morse)</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Higher-ranked.20errors/near/247733860\">said</a>:</p>\n<blockquote>\n<p>In your example, is the universe with  the <code>where</code> clause less than or greater than that of the body of <code>bar</code>?</p>\n</blockquote>\n<p>let me spell it out in more detail</p>",
        "id": 247733970,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627663903
    },
    {
        "content": "<p>when type-checking bar, we start out with just universe U0</p>",
        "id": 247733983,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627663912
    },
    {
        "content": "<p>example:</p>",
        "id": 247733991,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627663917
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">a</span><span class=\"w\"> </span>: <span class=\"o\">'</span><span class=\"na\">b</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">22</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">y</span> <span class=\"kt\">u32</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// giving a name 'y here for convenience</span>\n<span class=\"w\">    </span><span class=\"n\">foo</span>::<span class=\"o\">&lt;'</span><span class=\"na\">y</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 247734075,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627663951
    },
    {
        "content": "<p>let's say it is like this to keep it simple</p>",
        "id": 247734099,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627663964
    },
    {
        "content": "<p><code>'y</code> will be in the universe U0</p>",
        "id": 247734108,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627663969
    },
    {
        "content": "<p>because all regions are that are not created via some forall</p>",
        "id": 247734133,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627663982
    },
    {
        "content": "<p>the <code>let y = &amp;x</code> has a corresponding loan, let's call it L0</p>",
        "id": 247734167,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627664001
    },
    {
        "content": "<p>so there is some <code>contains('y, L0)</code> relation generated (this is just basic polonius)</p>",
        "id": 247734182,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627664012
    },
    {
        "content": "<p>also we probably renamed that</p>",
        "id": 247734187,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627664015
    },
    {
        "content": "<p>but it's something like that :)</p>",
        "id": 247734193,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627664019
    },
    {
        "content": "<p>with me so far?</p>",
        "id": 247734219,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627664028
    },
    {
        "content": "<p><code>loan_issued_at</code> or <code>origin_contains_loan_on_entry</code></p>",
        "id": 247734327,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627664063
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Higher-ranked.20errors/near/247734133\">said</a>:</p>\n<blockquote>\n<p>because all regions are that are not created via some forall</p>\n</blockquote>\n<p>(this is actually not strictly true in the code, I think, but it's true enough for our purposes right now, I can explain later)</p>",
        "id": 247734331,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627664065
    },
    {
        "content": "<p>Yep!</p>",
        "id": 247734332,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627664066
    },
    {
        "content": "<p><code>contains</code> is <code>loan_issued_at</code> I think</p>",
        "id": 247734342,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627664077
    },
    {
        "content": "<p>Yeah, the latter is just the transitive version</p>",
        "id": 247734380,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627664100
    },
    {
        "content": "<p>ok so then we type-check <code>foo</code> which requires us to prove <code>for&lt;'b&gt; 'y: 'b</code></p>",
        "id": 247734394,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627664104
    },
    {
        "content": "<p>to do that, we create a new universe (<code>U1</code>) and make an associated placeholder, we'll call it <code>!1</code></p>",
        "id": 247734430,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627664123
    },
    {
        "content": "<p>'<code>b</code> becomes <code>!1</code> and so we have to prove: <code>'y: !1</code></p>",
        "id": 247734457,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627664136
    },
    {
        "content": "<p>we add that as a regular constraint, a <code>subset</code> relation</p>",
        "id": 247734478,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627664145
    },
    {
        "content": "<p>in <em>polonius</em>, it appears at the point of the call to <code>foo</code></p>",
        "id": 247734492,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627664155
    },
    {
        "content": "<p>bu that's not very relevant for our purposes just now</p>",
        "id": 247734507,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627664160
    },
    {
        "content": "<p>for now I'm going to ignore locations</p>",
        "id": 247734557,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627664170
    },
    {
        "content": "<p>so polonius has as its input:</p>",
        "id": 247734569,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627664176
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>universe(&#39;y, U0)\nuniverse(!1, U1)\nuniverse_less_than(U0, U1)\nloan_issued_at(&#39;y, Loan1, Node1)\nsubset(&#39;y, !1, Point2)\ncfg_edge(Node1, Node2)\n</code></pre></div>",
        "id": 247734646,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627664228
    },
    {
        "content": "<p>I think we called points nodes :)</p>",
        "id": 247734676,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627664243
    },
    {
        "content": "<p>I'm familiar with both versions of the terminology, so just use whatever comes natural</p>",
        "id": 247734709,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627664268
    },
    {
        "content": "<p>anyway we now compute the <code>origin_contains_loan_on_entry</code> ... ah, interesting</p>",
        "id": 247734714,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627664276
    },
    {
        "content": "<p>It's all making perfect sense so far.</p>",
        "id": 247734715,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627664276
    },
    {
        "content": "<p>well the way I was saying it was this</p>",
        "id": 247734722,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627664281
    },
    {
        "content": "<p>(<code>loan_issued_at</code> is the old <code>borrow_region</code>, the static data where the loans are issued/introduced at a given point. <code>contains</code> is the computation of the origins' contents at all points <code>origin_contains_loan_on_entry</code> via subset and loan propagation)</p>",
        "id": 247734757,
        "sender_full_name": "lqd",
        "timestamp": 1627664284
    },
    {
        "content": "<p>we compute <code>origin_contains_loan_on_entry</code> and we get</p>\n<div class=\"codehilite\"><pre><span></span><code>origin_contains_loan_on_entry(&#39;y, Loan1, Point2)\n</code></pre></div>",
        "id": 247734799,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627664314
    },
    {
        "content": "<p>I guess we also get</p>",
        "id": 247734805,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627664317
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>origin_contains_loan_on_entry(&#39;y, Loan1, Point3)\norigin_contains_loan_on_entry(!1, Loan1, Point3)\n</code></pre></div>\n<p>where <code>Point3</code> is the successor of <code>Point2</code></p>",
        "id": 247734824,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627664334
    },
    {
        "content": "<p>(which is the thing I thought was interesting)</p>",
        "id": 247734833,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627664340
    },
    {
        "content": "<p>Do we? Because at some point 'y becomes no longer live.</p>",
        "id": 247734927,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627664390
    },
    {
        "content": "<p>well, ignore that</p>",
        "id": 247735016,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627664418
    },
    {
        "content": "<p>(Not sure where exactly <code>Point3</code> is?)</p>",
        "id": 247735028,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627664421
    },
    {
        "content": "<p>(for now :)</p>",
        "id": 247735033,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627664423
    },
    {
        "content": "<p>so what I was <em>going</em> to say was something like:</p>\n<ul>\n<li>we can see that at Point2 we have</li>\n<li><code>'y</code> (in U0) must be less than <code>!1</code> (in U1)</li>\n<li>we don't know what U1 is, so that means <code>'y</code> must be the empty set</li>\n<li>but here we see it has a loan</li>\n<li>--&gt; error</li>\n</ul>",
        "id": 247735064,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627664439
    },
    {
        "content": "<p>but this is seeming a bit weird to me now</p>",
        "id": 247735076,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627664444
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"118594\">Dylan MacKenzie (ecstatic-morse)</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Higher-ranked.20errors/near/247735028\">said</a>:</p>\n<blockquote>\n<p>(Not sure where exactly <code>Point3</code> is?)</p>\n</blockquote>\n<p>the successor to Point2</p>",
        "id": 247735093,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627664455
    },
    {
        "content": "<p>there must be one</p>",
        "id": 247735094,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627664457
    },
    {
        "content": "<p>in the limit, it's the return node or whatever</p>",
        "id": 247735109,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627664465
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Higher-ranked.20errors/near/247735076\">said</a>:</p>\n<blockquote>\n<p>but this is seeming a bit weird to me now</p>\n</blockquote>\n<p>specifically, this .. logic about \"'y must be the empty set\" seems odd because it could sort of apply to any placeholder etc</p>",
        "id": 247735191,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627664509
    },
    {
        "content": "<p>I'm trying to remember</p>",
        "id": 247735261,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627664528
    },
    {
        "content": "<p>if we have code like this--</p>",
        "id": 247735271,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627664534
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">static</span> <span class=\"kt\">u32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">22</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">&amp;</span><span class=\"n\">x</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 247735290,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627664550
    },
    {
        "content": "<p>I <em>think</em> the way that we report an error on this is maybe a bit surprising</p>",
        "id": 247735322,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627664573
    },
    {
        "content": "<p>basically we see that <code>x</code> goes <code>LivenessDead</code></p>",
        "id": 247735339,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627664585
    },
    {
        "content": "<p>but the loan is a member of the \"static\" origin (which is always live)</p>",
        "id": 247735356,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627664598
    },
    {
        "content": "<p>and so we report an error</p>",
        "id": 247735360,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627664601
    },
    {
        "content": "<p>that's always felt like a <em>bit</em> of a hack to me; I think it's \"sound\", but it's not capturing something important</p>",
        "id": 247735426,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627664638
    },
    {
        "content": "<p>And that logic only applies to the \"regions are sets of CFG locations\" way of thinking?</p>",
        "id": 247735476,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627664651
    },
    {
        "content": "<p>I think what happens is that sometimes we wind up with loans that are for things that are not owned by the current stack frame</p>",
        "id": 247735515,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627664676
    },
    {
        "content": "<p>so e.g. a case that SHOULD compile, let this:</p>",
        "id": 247735524,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627664682
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"kt\">u32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;*</span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// loan L0</span>\n<span class=\"w\">    </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"c1\">// here, 'a contains loan L0, but that's ok</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 247735570,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627664706
    },
    {
        "content": "<p>this \"works\" by the rules as I described because there is no liveness dead that affects L0</p>",
        "id": 247735600,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627664723
    },
    {
        "content": "<p>but it feels like a weird setup to me</p>",
        "id": 247735639,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627664739
    },
    {
        "content": "<p>this kind of gets back to the observation that \"origins as sets of loans\" is maybe not right-- or more to the point, a loan is maybe better described as a pair of a <code>(shared|mutable, place)</code></p>",
        "id": 247735736,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627664768
    },
    {
        "content": "<p>well I guess that's not the key point</p>",
        "id": 247735750,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627664778
    },
    {
        "content": "<p>anway, sorry, I'm kind of going afield here</p>",
        "id": 247735791,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627664804
    },
    {
        "content": "<p>it may be relevant but let me bring it back to what we were talking about :P</p>",
        "id": 247735810,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627664816
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Higher-ranked.20errors/near/247735064\">said</a>:</p>\n<blockquote>\n<p>so what I was <em>going</em> to say was something like:</p>\n<ul>\n<li>we can see that at Point2 we have</li>\n<li><code>'y</code> (in U0) must be less than <code>!1</code> (in U1)</li>\n<li>we don't know what U1 is, so that means <code>'y</code> must be the empty set</li>\n<li>but here we see it has a loan</li>\n<li>--&gt; error</li>\n</ul>\n</blockquote>\n<p>this rule probably works-ish, <em>but</em></p>",
        "id": 247735829,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627664826
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Higher-ranked.20errors/near/247734824\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code>origin_contains_loan_on_entry(&#39;y, Loan1, Point3)\norigin_contains_loan_on_entry(!1, Loan1, Point3)\n</code></pre></div>\n<p>where <code>Point3</code> is the successor of <code>Point2</code></p>\n</blockquote>\n<p>this is interesting because</p>",
        "id": 247735834,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627664833
    },
    {
        "content": "<p>No, these examples are <strong>really</strong> helpful for me</p>",
        "id": 247735846,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627664840
    },
    {
        "content": "<p>I could imagine a rule like \"if you have a placeholder that contains a loan, error\"</p>",
        "id": 247735867,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627664855
    },
    {
        "content": "<p>except that it wouldn't <em>quite</em> work because of the examples I gave above</p>",
        "id": 247735886,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627664866
    },
    {
        "content": "<p>so we would have to start being more thoughtful</p>",
        "id": 247735948,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627664886
    },
    {
        "content": "<p>about which loans are ok :)</p>",
        "id": 247735956,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627664894
    },
    {
        "content": "<p>still that feels a bit more 'like polonius' -- i.e., polonius adds loans into sets, and errors if sets contain loans they shouldn't</p>",
        "id": 247735982,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627664912
    },
    {
        "content": "<p>versus this \"enforce that the other variable must be the empty set\"</p>",
        "id": 247736013,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627664925
    },
    {
        "content": "<p>I'm trying to capture my intution but that is a funny rule :)</p>",
        "id": 247736036,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627664938
    },
    {
        "content": "<p>it's like swimming in the reverse direction</p>",
        "id": 247736058,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627664949
    },
    {
        "content": "<p>there is one final detail I should note :)</p>",
        "id": 247736127,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627664997
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Higher-ranked.20errors/near/247735867\">said</a>:</p>\n<blockquote>\n<p>I could imagine a rule like \"if you have a placeholder that contains a loan, error\"</p>\n</blockquote>\n<p>Because most \"loans\" arise from borrows inside the function body and shouldn't escape?</p>",
        "id": 247736128,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627664997
    },
    {
        "content": "<p>really it is this: if the loan doesn't contain a deref</p>",
        "id": 247736206,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627665025
    },
    {
        "content": "<p>it's a loan of something that will die when we leave---you know</p>",
        "id": 247736228,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627665036
    },
    {
        "content": "<p>I wonder if the existing rules 'just work\" :P</p>",
        "id": 247736240,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627665045
    },
    {
        "content": "<p>i.e., if we can consider those higher-universe placeholders live everywhere</p>",
        "id": 247736250,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627665052
    },
    {
        "content": "<p>like other placeholders</p>",
        "id": 247736257,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627665054
    },
    {
        "content": "<p>then when we drop <code>x</code> in the code above, we'd report an error?</p>",
        "id": 247736271,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627665061
    },
    {
        "content": "<p>Well a deref of a placeholder region specifically</p>",
        "id": 247736287,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627665071
    },
    {
        "content": "<p>it's almost like we can just ignore universes for polonius</p>",
        "id": 247736310,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627665087
    },
    {
        "content": "<p>and things just fall out</p>",
        "id": 247736313,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627665089
    },
    {
        "content": "<p>can that be true?</p>",
        "id": 247736316,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627665091
    },
    {
        "content": "<p>seems like...maybe</p>",
        "id": 247736334,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627665105
    },
    {
        "content": "<p>(I have now a vague recollection of realizing this once before)</p>",
        "id": 247736466,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627665178
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Higher-ranked.20errors/near/247736310\">said</a>:</p>\n<blockquote>\n<p>it's almost like we can just ignore universes for polonius</p>\n</blockquote>\n<p>This is what I was thinking, that the <code>subset_errors</code> approach should just work</p>",
        "id": 247736482,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627665184
    },
    {
        "content": "<p>this might be the magic of 'static being the empty set :)</p>",
        "id": 247736484,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627665186
    },
    {
        "content": "<p>I see, you were maybe ahead of me</p>",
        "id": 247736494,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627665194
    },
    {
        "content": "<p>A broken clock...</p>",
        "id": 247736526,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627665208
    },
    {
        "content": "<p>lol please</p>",
        "id": 247736539,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627665214
    },
    {
        "content": "<p>(I was missing <em>a lot</em> of the nuances)</p>",
        "id": 247736543,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627665217
    },
    {
        "content": "<p>um ok well it'd be nice if there was nothing to be done here :)</p>",
        "id": 247736558,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627665225
    },
    {
        "content": "<p>besides write-up some tests :P</p>",
        "id": 247736585,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627665241
    },
    {
        "content": "<p>I\"m trying to think</p>",
        "id": 247736662,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627665266
    },
    {
        "content": "<p>so ... you might have ....</p>",
        "id": 247736672,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627665273
    },
    {
        "content": "<p>I guess if you just were proving things that aren't coming from the program itself</p>",
        "id": 247736685,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627665283
    },
    {
        "content": "<p>e.g.</p>",
        "id": 247736687,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627665284
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>exists&lt;&#39;a&gt; { forall&lt;&#39;b&gt; { &#39;a: &#39;b } }\n</code></pre></div>\n<p>well, that's true, it's static</p>",
        "id": 247736738,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627665316
    },
    {
        "content": "<p>So, to test this hypothesis, I need to write  the code that reduces the quantified region constraints (which I can presumably get from the NLL checker) to quantifier free ones, feed them into Polonius and then start running HRTB tests and see what breaks?</p>",
        "id": 247736805,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627665360
    },
    {
        "content": "<p>the whole 'empty thing is just a non-issue in polonius</p>",
        "id": 247736860,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627665373
    },
    {
        "content": "<p>we just don't have that concept</p>",
        "id": 247736863,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627665376
    },
    {
        "content": "<p>which I think is part of the rason that I was careful in the code I landed</p>",
        "id": 247736878,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627665383
    },
    {
        "content": "<p>because at some point the NLL solver thought that <code>forall&lt;'a&gt; { exists&lt;'b&gt; { 'a: 'b } }</code> was true</p>",
        "id": 247736944,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627665434
    },
    {
        "content": "<p>(sorry I can't contribute much to the conversation yet -- but I'm <del>following</del> limping along)</p>",
        "id": 247736961,
        "sender_full_name": "lqd",
        "timestamp": 1627665443
    },
    {
        "content": "<p>wait</p>",
        "id": 247736964,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627665445
    },
    {
        "content": "<p>that is true :P</p>",
        "id": 247736971,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627665447
    },
    {
        "content": "<p>Correct, since we don't need an upper bound. You can define one, obviously, but I think I realized when writing that blog post that it was more trouble than it was worth since it will always result in an error or something down the line?</p>",
        "id": 247736972,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627665448
    },
    {
        "content": "<p>sorry</p>",
        "id": 247736973,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627665450
    },
    {
        "content": "<p><code>exists&lt;'a&gt; { forall&lt;'b&gt; { 'b: 'a } }</code></p>",
        "id": 247736985,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627665460
    },
    {
        "content": "<p><em>that</em></p>",
        "id": 247736987,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627665462
    },
    {
        "content": "<p>ok, this is the case</p>",
        "id": 247737015,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627665481
    },
    {
        "content": "<p>Whereas when regions are sets of CFG locations, you <em>need</em> a <code>'empty</code> and a <code>'static</code></p>",
        "id": 247737089,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627665504
    },
    {
        "content": "<p>if you just try to prove this in isolation -- something goes wrong</p>",
        "id": 247737093,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627665509
    },
    {
        "content": "<p>if you just ignore universes, I mean</p>",
        "id": 247737106,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627665520
    },
    {
        "content": "<p>we will get <code>'a</code> being in universe U0 (say) and then a <code>!1</code> placeholder</p>",
        "id": 247737150,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627665550
    },
    {
        "content": "<p>and the rule that <code>!1 &lt;= 'a</code></p>",
        "id": 247737164,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627665557
    },
    {
        "content": "<p>but we ought not to be able to add <code>!1</code> to <code>'a</code>, because it is universe U0</p>",
        "id": 247737184,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627665570
    },
    {
        "content": "<p>so I do think you need a rule looking for this case</p>",
        "id": 247737196,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627665578
    },
    {
        "content": "<p>it's not the rule I wrote before though</p>",
        "id": 247737205,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627665583
    },
    {
        "content": "<p>it's saying:</p>\n<ul>\n<li>is there a subset relation <code>'a &lt;= 'b</code> somewhere</li>\n<li>in which <code>'a</code> is a placeholder region in universe Um</li>\n<li>and <code>'b</code> is universe Un</li>\n<li>and Un &lt; Um</li>\n</ul>",
        "id": 247737282,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627665613
    },
    {
        "content": "<p>we have test cases that create this scenario; it arises when you try to prove things in traits and so forth</p>",
        "id": 247737324,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627665645
    },
    {
        "content": "<p>(one sec, literal catfight is occurring)</p>",
        "id": 247737342,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627665657
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Item</span>: <span class=\"nc\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">T</span>: <span class=\"nc\">Bar</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">T</span>::<span class=\"n\">Item</span>: <span class=\"nc\">Foo</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 247737512,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627665746
    },
    {
        "content": "<p>which I found linked in <a href=\"https://github.com/rust-lang/rust/pull/65232\">https://github.com/rust-lang/rust/pull/65232</a></p>",
        "id": 247737570,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627665782
    },
    {
        "content": "<p>(<a href=\"https://github.com/rust-lang/rust/issues/57639\">#57639</a>)</p>",
        "id": 247737577,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627665787
    },
    {
        "content": "<p>Does well-formedness checkingof <code>Foo</code> impact this example?</p>",
        "id": 247737771,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627665889
    },
    {
        "content": "<p>I don't think so</p>",
        "id": 247737821,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627665924
    },
    {
        "content": "<p>(sorry, reading your comment now)</p>",
        "id": 247737832,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627665931
    },
    {
        "content": "<p>I'm not sure if that's the best example</p>",
        "id": 247737834,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627665932
    },
    {
        "content": "<p>I feel like there was a clearer one</p>",
        "id": 247737850,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627665943
    },
    {
        "content": "<p>it had to do with .. ah ... mm yes</p>",
        "id": 247737876,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627665956
    },
    {
        "content": "<p>I remember</p>",
        "id": 247737878,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627665957
    },
    {
        "content": "<p>something like this</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">TheTrait</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">TheTrait</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">take</span><span class=\"o\">&lt;</span><span class=\"n\">X</span>: <span class=\"nc\">TheTrait</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">take</span>::<span class=\"o\">&lt;</span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">]</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 247737976,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627665998
    },
    {
        "content": "<p>sadly, this should not compile I believe</p>",
        "id": 247737986,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627666006
    },
    {
        "content": "<p>because trait matching is invariant</p>",
        "id": 247737999,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627666014
    },
    {
        "content": "<p>and <code>fn(&amp;'a u32) != for&lt;'a&gt; fn(&amp;'a u32)</code></p>",
        "id": 247738014,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627666021
    },
    {
        "content": "<p>but it did compile for a while</p>",
        "id": 247738033,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627666032
    },
    {
        "content": "<p>precisely because the universe checker I first implemented was naive about this :)</p>",
        "id": 247738060,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627666052
    },
    {
        "content": "<p>this is why we added multiple 'empty, one for each universe</p>",
        "id": 247738074,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627666061
    },
    {
        "content": "<p>so we don't have a \"true bottom\"</p>",
        "id": 247738080,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627666064
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Higher-ranked.20errors/near/247737282\">said</a>:</p>\n<blockquote>\n<p>it's saying:</p>\n<ul>\n<li>is there a subset relation <code>'a &lt;= 'b</code> somewhere</li>\n<li>in which <code>'a</code> is a placeholder region in universe Um</li>\n<li>and <code>'b</code> is universe Un</li>\n<li>and Un &lt; Um</li>\n</ul>\n</blockquote>\n<p>these are the current <code>UpperBoundUniverseConflict</code> right ?</p>",
        "id": 247738144,
        "sender_full_name": "lqd",
        "timestamp": 1627666087
    },
    {
        "content": "<p>define current? in rustc?</p>",
        "id": 247738164,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627666102
    },
    {
        "content": "<p>yes</p>",
        "id": 247738168,
        "sender_full_name": "lqd",
        "timestamp": 1627666106
    },
    {
        "content": "<p>sounds correct</p>",
        "id": 247738179,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627666113
    },
    {
        "content": "<p>so the tl;dr of all this is, I think:</p>\n<ul>\n<li>polonius does need universe info</li>\n<li>it's missing one rule, to capture <code>exists&lt;'a&gt; { forall&lt;'b&gt; { 'b: 'a } }</code> and make that an error</li>\n<li>but the existing subset errors capture the other stuff</li>\n</ul>",
        "id": 247738234,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627666153
    },
    {
        "content": "<p>in particular, they capture the other pattern, <code>exists&lt;'a&gt; { forall&lt;'b&gt; { 'a: 'b } }</code> where <code>'a</code> cannot be <code>'static</code> for some reason</p>",
        "id": 247738292,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627666180
    },
    {
        "content": "<p>(and this last case works without any special logic because data from the loans from <code>'a</code> that prevent it from being <code>'static</code> have to flow into the placeholder <code>'b</code> anyway)</p>",
        "id": 247738417,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627666242
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"118594\">@Dylan MacKenzie (ecstatic-morse)</span> if you're keen to continue, I imagine that having worked this out, we could open an issue with a summary of these notes , and I can review PRs over the next few weeks :)</p>",
        "id": 247738501,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627666312
    },
    {
        "content": "<p>but you definitely have to summarize the above points :)</p>",
        "id": 247738570,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627666330
    },
    {
        "content": "<p>because I will forget</p>",
        "id": 247738575,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627666333
    },
    {
        "content": "<p>still, that's pretty cool -- that means \"parity for polonius\" is kind of unblocked!</p>",
        "id": 247738634,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627666368
    },
    {
        "content": "<p>Yep! I'll write something up today</p>",
        "id": 247738685,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627666400
    },
    {
        "content": "<p>(I'm gonna be AFK for a few minutes here though)</p>",
        "id": 247738710,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627666415
    },
    {
        "content": "<p>I'm myself still a bit unsure about the relationship with trait selection, as described in the MCP gist, and the changes we'd need to do in rustc</p>",
        "id": 247738823,
        "sender_full_name": "lqd",
        "timestamp": 1627666455
    },
    {
        "content": "<p>I think what this means for trait selection is:</p>",
        "id": 247738912,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627666512
    },
    {
        "content": "<p>well I have to re-read my own gist ;)</p>",
        "id": 247738931,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627666525
    },
    {
        "content": "<p>but I think that chalk's existing approach can more or less work with this</p>",
        "id": 247738934,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627666532
    },
    {
        "content": "<p>it's jsut that if/when we want to get smarter</p>",
        "id": 247738946,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627666538
    },
    {
        "content": "<p>we have to figure some stuff out :)</p>",
        "id": 247738950,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627666541
    },
    {
        "content": "<p>:)</p>",
        "id": 247738968,
        "sender_full_name": "lqd",
        "timestamp": 1627666550
    },
    {
        "content": "<p>in particular to fix <a href=\"https://github.com/rust-lang/rust/issues/25860\">https://github.com/rust-lang/rust/issues/25860</a> the way I <em>originally</em> planned to, I think we have to get smarter</p>",
        "id": 247739036,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627666571
    },
    {
        "content": "<p>regardless, I'd like at some point to get more serious about WF under binders, and for that we have to get smarter</p>",
        "id": 247739060,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627666585
    },
    {
        "content": "<p>... but it can wait</p>",
        "id": 247739074,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627666599
    },
    {
        "content": "<p>it's a very nice surprise if it all works out as summarized above, thank you both for working on this topic</p>",
        "id": 247739100,
        "sender_full_name": "lqd",
        "timestamp": 1627666619
    },
    {
        "content": "<p>yes!</p>",
        "id": 247739796,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627666976
    },
    {
        "content": "<p>what a great result</p>",
        "id": 247739800,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627666978
    },
    {
        "content": "<p>thanks <span class=\"user-mention\" data-user-id=\"118594\">@Dylan MacKenzie (ecstatic-morse)</span> for pointing out I was letting the perfect be the enemy of the good :)</p>",
        "id": 247739845,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627667002
    },
    {
        "content": "<p>For anyone interested, I wrote some detailed notes on this conversation over <a href=\"https://github.com/rust-lang/polonius/issues/172#issuecomment-890112849\">on the HRTB issue</a>. I also included some questions and comments (in italics) that I wasn't able to conjure in the moment. (I'm a bit slow <span aria-label=\"cry\" class=\"emoji emoji-1f622\" role=\"img\" title=\"cry\">:cry:</span> ) Hopefully this gives Niko some idea of how limited my current knowledge is <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> . Though I think I can get there in a reasonable amount of time.</p>",
        "id": 247841822,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627795951
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"427743\">Tomáš Linhart</span> has marked this topic as resolved.</p>",
        "id": 247863490,
        "sender_full_name": "Notification Bot",
        "timestamp": 1627831255
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"427743\">Tomáš Linhart</span> has marked this topic as unresolved.</p>",
        "id": 247863493,
        "sender_full_name": "Notification Bot",
        "timestamp": 1627831262
    }
]