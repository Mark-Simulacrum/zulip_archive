[
    {
        "content": "<p>I also have some more general questions about polonius:</p>\n<ul>\n<li>is the <code>borrow_live_at</code> relation considered 'bug-free' ? I have some examples that have surprising results. </li>\n<li>am I correct to assume that a <code>Loan</code> in the polonius sense always has exactly one owner at any point it is alive? (anything else wouldn't really make sense tbh)</li>\n</ul>",
        "id": 214863625,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1603903185
    },
    {
        "content": "<p>for <code>borrow_live_at</code> it's a bit subtle, first of all the relation is not completely, strictly speaking, needed to be materialized. The computation's goal is to find different types of errors, and those don't require computing the full contents of origins at all points of the CFG: as an oversimplified example, illegal access errors can only happen for invalidated loans, therefore, tracking the others is not needed since they can't produce errors.</p>",
        "id": 214872157,
        "sender_full_name": "lqd",
        "timestamp": 1603906676
    },
    {
        "content": "<p>Similarly, illegal subset errors can only happen on placeholder loans (which are to be phased out anyways, but it's just to illustrate my point) -- and earlier in the pipeline, before doing the full location-sensitive analysis, there's a location-insensitive pre-pass which first checks (and filters out (WIP)) the loans to limit the full pass to those possibly error-producing loans (origins will in the future be similarly filtered at this point, if they don't participate in subset or illegal access errors, there's no need to compute their contents), and in this case, the relation wouldn't be computed at all.</p>",
        "id": 214872222,
        "sender_full_name": "lqd",
        "timestamp": 1603906690
    },
    {
        "content": "<p>It used to be considered bug-free by itself, but it's not used by itself anymore: it's at the end of the pipeline, after move/init analysis whose correctness and equivalence with rustc has not been validated yet (and there have been false positives before, and there may still be) <span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> is working on this specific part and would know more than I do</p>",
        "id": 214872304,
        "sender_full_name": "lqd",
        "timestamp": 1603906737
    },
    {
        "content": "<p>all these can make for surprising results :)</p>",
        "id": 214872408,
        "sender_full_name": "lqd",
        "timestamp": 1603906796
    },
    {
        "content": "<p>for the other question I guess it depends on what you mean by \"owner\": if you mean origin then not really, a loan can flow into placeholder origins (AKA universal region / free region) which are live at all points</p>",
        "id": 214872815,
        "sender_full_name": "lqd",
        "timestamp": 1603906959
    },
    {
        "content": "<p>By owner I mean a <code>Variable</code>, though that may not even make sense in the context of polonius. </p>\n<p>Thanks for the explanation about <code>borrow_live_at</code>, though it's also disappointing for my purpose. I guess I'll need to reimplement a version of polonius if I want to get the liveness of borrows at all points in the CFG. Though I'm really only interested in the points loans die at.</p>\n<p>In short I'm hoping to use polonius to identify when borrows die, and which variable was holding the borrow when it died. The second part I should be able to calculate by considering moves in the MIR graph, but for the first bit I need polonius to tell me which borrows are alive at each point.</p>",
        "id": 214877771,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1603908983
    },
    {
        "content": "<p>As far as I can tell the information returned from <code>borrow_live_at</code> works for me, though there are some surprising results, they don't seem lead me to do anything unsound. I hope that access to this relation stays as polonius evolves!</p>",
        "id": 214878483,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1603909372
    },
    {
        "content": "<p>for the foreseeable future (as you can see there's not a lot of activity ATM) you <em>should</em> be able to only use the parts of the pipeline you need: liveness -&gt; move/init analysis (with the caveat I've mentioned earlier) -&gt; <code>Naive</code> variant (bypassing the LocationInsensitive, and Optimized variants, the latter of which only computes the subset TC and contained loans on some of the origins dying at edges, etc)</p>",
        "id": 214878638,
        "sender_full_name": "lqd",
        "timestamp": 1603909461
    },
    {
        "content": "<p>yep I currently only use the naive version, I'm definitely not as performance sensitive as rustc is</p>",
        "id": 214878685,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1603909492
    },
    {
        "content": "<p>For a surprising result, I found it surprising that a loan could die in one branch of an if statement but be alive at the end</p>",
        "id": 214878737,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1603909522
    },
    {
        "content": "<p>I believe that access to the relation will be available in some form or another, especially if the datalog computation is used for validation rather than production (for performance reasons, say), especially in the Naive variant; as it's at the very least useful for debugging and testing and so on</p>",
        "id": 214878859,
        "sender_full_name": "lqd",
        "timestamp": 1603909574
    },
    {
        "content": "<p>effectively that a program execution could follow a path where a loan disappears from the live set and re-enters later</p>",
        "id": 214878863,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1603909577
    },
    {
        "content": "<p>at the end, meaning after the branch ? this sounds like an expected case but maybe I'm misunderstanding</p>",
        "id": 214879556,
        "sender_full_name": "lqd",
        "timestamp": 1603909921
    },
    {
        "content": "<p>(say, since the points following the branch have to expect either branch could have been taken, and expect the union of results)</p>",
        "id": 214879764,
        "sender_full_name": "lqd",
        "timestamp": 1603910037
    },
    {
        "content": "<p>yea I guess I expected the loan to be counted as alive in a branch where it wasn't used since it would be used again in the future</p>",
        "id": 214879870,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1603910086
    },
    {
        "content": "<p>again, this behavior doesn't cause problems for me, it's just surprising</p>",
        "id": 214879953,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1603910136
    },
    {
        "content": "<p>sure :)</p>",
        "id": 214879976,
        "sender_full_name": "lqd",
        "timestamp": 1603910145
    },
    {
        "content": "<p>since if a loan is dead in any branch it can't actually be used afterwards (if my intuition is correct) all it can do is die after the branches merge</p>",
        "id": 214880070,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1603910179
    },
    {
        "content": "<p>(the datafrog_opt variant could be useful for you to look at dying origins and similar, it <em>should</em> have the points you need)</p>",
        "id": 214880099,
        "sender_full_name": "lqd",
        "timestamp": 1603910198
    },
    {
        "content": "<p>I actually don't need anything about origins (which are lifetimes / regions, right?)</p>",
        "id": 214880116,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1603910218
    },
    {
        "content": "<p>yeah</p>",
        "id": 214880133,
        "sender_full_name": "lqd",
        "timestamp": 1603910226
    },
    {
        "content": "<p>yea they only matter for meta theory in my case</p>",
        "id": 214880147,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1603910238
    },
    {
        "content": "<p>I guess it depends whether you consider loans to have liveness per se, is what I mean, they're live if they're contained in an origin live at a point</p>",
        "id": 214880216,
        "sender_full_name": "lqd",
        "timestamp": 1603910277
    },
    {
        "content": "<p>so the points where they die mixes both containment and origin liveness</p>",
        "id": 214880291,
        "sender_full_name": "lqd",
        "timestamp": 1603910307
    },
    {
        "content": "<p>but yeah, you know better than me what you actually need of course :)</p>",
        "id": 214880342,
        "sender_full_name": "lqd",
        "timestamp": 1603910334
    },
    {
        "content": "<p>ah hm, ok. I've pretty much ignored the <code>origin_live_on_entry</code> relation sine <code>borrow_live_at</code> seemed to be exactly what I needed. I hadn't considered that a loan could be in <code>borrow_live_at</code> after its origin had died</p>",
        "id": 214880590,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1603910502
    },
    {
        "content": "<p>ahh the theory to implementation gap :P</p>",
        "id": 214880790,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1603910598
    },
    {
        "content": "<p>loans can indeed flow from origin to origin even if they're dead or dying (that's what the opt variant tries to ensure)</p>",
        "id": 214881082,
        "sender_full_name": "lqd",
        "timestamp": 1603910753
    },
    {
        "content": "<p>ok, printing region liveness in my debug viewer definitely helps understand this</p>",
        "id": 214881349,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1603910880
    },
    {
        "content": "<p>thanks for the help I think I understand how to correctly find where loans die now :P</p>",
        "id": 214881422,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1603910898
    },
    {
        "content": "<p>(and as you've seen origins can surprisingly \"resurrect\" )</p>",
        "id": 214881451,
        "sender_full_name": "lqd",
        "timestamp": 1603910914
    },
    {
        "content": "<p>mais, de rien :) <span aria-label=\"baguette\" class=\"emoji emoji-1f956\" role=\"img\" title=\"baguette\">:baguette:</span></p>",
        "id": 214881477,
        "sender_full_name": "lqd",
        "timestamp": 1603910925
    },
    {
        "content": "<p>yep!</p>",
        "id": 214881479,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1603910925
    },
    {
        "content": "<p>the naive version computes strictly larger relations than the opt version, correct? ie im not missing out on tuples by using the naive version?</p>",
        "id": 214882481,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1603911377
    },
    {
        "content": "<p>right</p>",
        "id": 214882529,
        "sender_full_name": "lqd",
        "timestamp": 1603911403
    },
    {
        "content": "<p>(to sum up, loans flow from origin to origin along the CFG <em>regardless</em> of liveness, the only thing that can stop a loan from flowing is a kill point)</p>",
        "id": 214882636,
        "sender_full_name": "lqd",
        "timestamp": 1603911455
    },
    {
        "content": "<p>yep, merci!</p>",
        "id": 214882805,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1603911524
    },
    {
        "content": "<p>haha</p>",
        "id": 214882833,
        "sender_full_name": "lqd",
        "timestamp": 1603911538
    }
]