[
    {
        "content": "<p>Ok here's the datalog-to-datafrog \"prototyping compiler\" PR I mentioned before: <a href=\"https://github.com/rust-lang/polonius/pull/132\" target=\"_blank\" title=\"https://github.com/rust-lang/polonius/pull/132\">https://github.com/rust-lang/polonius/pull/132</a> it does help when trying out rules (or doing Demand Transformation)</p>\n<p>I've been bitten by weirdness around <code>write!</code>, <code>rustfmt</code> and whitespace line-endings inside the macro, so I'm not sure it'll pass CI. (It does pass locally, but was having random whitespace added/removed). It's not supposed to be especially robust or anything, just giving it valid decls and rules, and it should work: normally one mostly just has to add where to find the data to put in the Relations/Variables. I tested this workflow on the <code>Naive</code> rules and it passed tests after I filled the 5-6 relations in <code>AllFacts</code>. </p>\n<p>(this thing is also inefficient &amp; clones strings left and right but oh well :)</p>\n<p>let me know what you think</p>",
        "id": 177305332,
        "sender_full_name": "lqd",
        "timestamp": 1570155495
    },
    {
        "content": "<p>I think it’s pretty gosh damned cool is what I think</p>",
        "id": 177373591,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1570218784
    },
    {
        "content": "<p>(it's still very buggy but I'll fix it over time, add tests etc)</p>",
        "id": 177374703,
        "sender_full_name": "lqd",
        "timestamp": 1570219640
    },
    {
        "content": "<p>(yeah, maybe that should be in its own repo temporarily, until it's more stable and better tested, before being upstreamed in datafrog, so I'll close the PR for now and move it to a more appropriate location)</p>",
        "id": 177470152,
        "sender_full_name": "lqd",
        "timestamp": 1570384705
    },
    {
        "content": "<p>There might even be a case for it being its own crate perhaps?</p>",
        "id": 177501024,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1570438286
    },
    {
        "content": "<p>That way, it could be used for code-generation as a dev-dependency like for example lalrpop</p>",
        "id": 177501079,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1570438325
    },
    {
        "content": "<p>maybe.  Although it's not a complete solution that will take all datalog programs and spit out a perfect datafrog computation (datafrog has its own limitations and API requirements), I'm mostly interested in making it easy for us to test out things in polonius. I'll put it in its own \"utils\" crate for the time being, maybe with some of the other hacky things from my datafrog fork (eg \"datalog provenance\" AKA a println for every rule firing, and a function that extracts some target tuple's provenance from this log)</p>",
        "id": 177521416,
        "sender_full_name": "lqd",
        "timestamp": 1570456643
    },
    {
        "content": "<p>datafrog generator moved here <a href=\"https://github.com/lqd/datapond\" target=\"_blank\" title=\"https://github.com/lqd/datapond\">https://github.com/lqd/datapond</a> <span class=\"user-mention\" data-user-id=\"116109\">@Vytautas Astrauskas</span> (I plan to dogfood it there for a while, maybe add DT to it, etc, and then see what Niko and Frank think about upstreaming those to datafrog directly)</p>",
        "id": 177544276,
        "sender_full_name": "lqd",
        "timestamp": 1570471402
    },
    {
        "content": "<p>(I hope it helps but it's likely not going to work 100%, it's really only intended in the limited context of polonius, not every datalog computation; and even then only gets you part of the way there, you still need to know datafrog and how to set it up etc)</p>",
        "id": 177544492,
        "sender_full_name": "lqd",
        "timestamp": 1570471541
    },
    {
        "content": "<p>of course as soon as I add why-provenance, I actually also need why-not-provenance to understand what is going on in the flow sensitive equality variant <span aria-label=\"sweat\" class=\"emoji emoji-1f613\" role=\"img\" title=\"sweat\">:sweat:</span></p>",
        "id": 177574725,
        "sender_full_name": "lqd",
        "timestamp": 1570495652
    },
    {
        "content": "<blockquote>\n<p>datafrog generator moved here <a href=\"https://github.com/lqd/datapond\" target=\"_blank\" title=\"https://github.com/lqd/datapond\">https://github.com/lqd/datapond</a> <span class=\"user-mention silent\" data-user-id=\"116109\">Vytautas Astrauskas</span> (I plan to dogfood it there for a while, maybe add DT to it, etc, and then see what Niko and Frank think about upstreaming those to datafrog directly)</p>\n</blockquote>\n<p>Thanks!</p>",
        "id": 177593105,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1570523239
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> Are you currently working on datapond?</p>",
        "id": 185188304,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1578553575
    },
    {
        "content": "<p>I would like to start using it for my project and, therefore, would like to finish converting it into a procedural macro.</p>",
        "id": 185188319,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1578553641
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116109\">@Vytautas Astrauskas</span>  I have been looking at different examples to find more bugs, and fixed a few, but there are more (related to renaming/arguments and index uses, etc) — but if \"currently\" means \"right this second\" then no :) I have seen you push cool new work! I also seem to have lost the query syntax we looked at during rustfest so haven't been able to do a lot wrt syntax/parsing unfortunately (but as mentioned I wanted to try more rule examples to find bugs first)</p>",
        "id": 185189537,
        "sender_full_name": "lqd",
        "timestamp": 1578555552
    },
    {
        "content": "<p>(I think we’d want to test your queries before finishing the proc macro though ? Just to make sure it handles enough of what you need correctly-ish)</p>",
        "id": 185190496,
        "sender_full_name": "lqd",
        "timestamp": 1578556873
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> Have you pushed all your changes? I am thinking to look into it in 4 hours or so.</p>",
        "id": 185193794,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1578560134
    },
    {
        "content": "<p>yeah, the rest of my (local) WIP isn't big and can be rebased easily</p>",
        "id": 185193889,
        "sender_full_name": "lqd",
        "timestamp": 1578560215
    },
    {
        "content": "<p>Could you still please push it to some branch?</p>",
        "id": 185194791,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1578561137
    },
    {
        "content": "<p>I would like to restructure code a bit to make it easier to maintain, which would make your changes impossible to rebase.</p>",
        "id": 185194843,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1578561209
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116109\">@Vytautas Astrauskas</span>  I don't have access to this computer for a few days :/ go ahead don't worry about it, I'll take care of that afterwards, it was mostly about filtering index uses (so that random variable renaming would not generate duplicate useless indices)</p>",
        "id": 185198873,
        "sender_full_name": "lqd",
        "timestamp": 1578565044
    },
    {
        "content": "<p>I also wanted to make structural changes so that it's also easier to test in isolation but haven't started yet</p>",
        "id": 185198898,
        "sender_full_name": "lqd",
        "timestamp": 1578565079
    },
    {
        "content": "<p>OK. Thanks!</p>",
        "id": 185199198,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1578565378
    },
    {
        "content": "<p>Let's see how far I get <span aria-label=\"smile\" class=\"emoji emoji-263a\" role=\"img\" title=\"smile\">:smile:</span>.</p>",
        "id": 185199218,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1578565389
    },
    {
        "content": "<p>good luck :D</p>",
        "id": 185200523,
        "sender_full_name": "lqd",
        "timestamp": 1578566594
    },
    {
        "content": "<p>(and also thanks &lt;3)</p>",
        "id": 185201066,
        "sender_full_name": "lqd",
        "timestamp": 1578567139
    }
]