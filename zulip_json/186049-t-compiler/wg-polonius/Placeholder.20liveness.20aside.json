[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"118594\">@Dylan MacKenzie (ecstatic-morse)</span> btw did you have specific questions in mind about either placeholder liveness or <code>Location::All</code> ?</p>",
        "id": 250955819,
        "sender_full_name": "lqd",
        "timestamp": 1630081152
    },
    {
        "content": "<p>You placeholder liveness PR seems like something we should obviously do. Is that right? We just need to add the API to datafrog to make it less verbose?</p>",
        "id": 250956099,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1630081263
    },
    {
        "content": "<p>that's my impression as well</p>",
        "id": 250956150,
        "sender_full_name": "lqd",
        "timestamp": 1630081293
    },
    {
        "content": "<p>we make do by materializing the tuples directly, and that does simplify the rules in a sense</p>",
        "id": 250956260,
        "sender_full_name": "lqd",
        "timestamp": 1630081329
    },
    {
        "content": "<p>but it's not super clean/satisfying</p>",
        "id": 250956292,
        "sender_full_name": "lqd",
        "timestamp": 1630081346
    },
    {
        "content": "<p>Okay, the changes aren't very difficult. I was just waiting to see if someone wanted to pick them up or if I should do it myself.</p>",
        "id": 250956298,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1630081349
    },
    {
        "content": "<p>At least the datafrog changes will give us the option.</p>",
        "id": 250956335,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1630081366
    },
    {
        "content": "<p>right</p>",
        "id": 250956346,
        "sender_full_name": "lqd",
        "timestamp": 1630081371
    },
    {
        "content": "<p>but there's no rush for this of course</p>",
        "id": 250956355,
        "sender_full_name": "lqd",
        "timestamp": 1630081378
    },
    {
        "content": "<p>Okay, I'll ping regexident again.</p>",
        "id": 250956378,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1630081387
    },
    {
        "content": "<p>so we could still wait to see if regexident wants to do them</p>",
        "id": 250956395,
        "sender_full_name": "lqd",
        "timestamp": 1630081393
    },
    {
        "content": "<p>So the more interesting thing is <a href=\"https://github.com/rust-lang/rust/issues/50938\">#50938</a></p>",
        "id": 250956400,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1630081396
    },
    {
        "content": "<p>yeah</p>",
        "id": 250956592,
        "sender_full_name": "lqd",
        "timestamp": 1630081465
    },
    {
        "content": "<p>so this one Niko has more of the backstory and a couple WIP branches to fix it</p>",
        "id": 250956646,
        "sender_full_name": "lqd",
        "timestamp": 1630081492
    },
    {
        "content": "<p>but the gist is (and maybe you know this already) there are a few cases (maybe all) related to type ascription that are materialized at all points of the CFG</p>",
        "id": 250956721,
        "sender_full_name": "lqd",
        "timestamp": 1630081535
    },
    {
        "content": "<p>Niko brought this up during the last sprint, but there's two ways to generate an error when e.g.  a local variable gets returned from a function.</p>",
        "id": 250956792,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1630081563
    },
    {
        "content": "<p>The way we do it now is to invalidate all loans corresponding to locals at the return place, but that cause an error in the weird case Niko gives in <a href=\"https://github.com/rust-lang/rust/issues/50938\">#50938</a></p>",
        "id": 250956937,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1630081613
    },
    {
        "content": "<p>But another way is to check for <code>subset</code> relations between non-placeholder <em>origin</em>s and placeholder ones</p>",
        "id": 250957057,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1630081677
    },
    {
        "content": "<p>it also manifests as a different way that is not related to semantics</p>",
        "id": 250957249,
        "sender_full_name": "lqd",
        "timestamp": 1630081756
    },
    {
        "content": "<p>for functions with many subsets/such cases of ascription and big CFGs, it OOMs in fact generation</p>",
        "id": 250957461,
        "sender_full_name": "lqd",
        "timestamp": 1630081827
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/50938\">#50938</a> and the similar PRs are what seems the correct but harder way to fix these issues</p>",
        "id": 250957567,
        "sender_full_name": "lqd",
        "timestamp": 1630081873
    },
    {
        "content": "<p>since it has no known impact on our rules</p>",
        "id": 250957693,
        "sender_full_name": "lqd",
        "timestamp": 1630081930
    },
    {
        "content": "<p>whereas I went the <a href=\"https://github.com/lqd/rust/commit/ec3712202e5204f6547fbf9a7c3bb8c8cf5215ee\">https://github.com/lqd/rust/commit/ec3712202e5204f6547fbf9a7c3bb8c8cf5215ee</a> relation splitting route</p>",
        "id": 250957722,
        "sender_full_name": "lqd",
        "timestamp": 1630081944
    },
    {
        "content": "<p>which does change the rules a lot</p>",
        "id": 250957767,
        "sender_full_name": "lqd",
        "timestamp": 1630081970
    },
    {
        "content": "<p>in last years's sprint I remember <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> had another branch for this, which was more advanced/complete than <a href=\"https://github.com/rust-lang/rust/issues/50938\">#50938</a> but there were still a few things to do</p>",
        "id": 250957862,
        "sender_full_name": "lqd",
        "timestamp": 1630082020
    },
    {
        "content": "<p>Ah, okay. Your change is similar to your placeholder liveness one in a sense, since we have a separate fact for some relation that holds at all CFG points, and presumably we could do a similar disjunction whenever <code>subset</code> appears in a rule?</p>",
        "id": 250958064,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1630082097
    },
    {
        "content": "<p>it's possible yeah</p>",
        "id": 250958157,
        "sender_full_name": "lqd",
        "timestamp": 1630082137
    },
    {
        "content": "<p>the key thing was to not only move the OOM from rustc to polonius</p>",
        "id": 250958190,
        "sender_full_name": "lqd",
        "timestamp": 1630082153
    },
    {
        "content": "<p>which could happen if we just evaluated a similar rule materializing the same facts</p>",
        "id": 250958272,
        "sender_full_name": "lqd",
        "timestamp": 1630082173
    },
    {
        "content": "<p>True. The optimized variant would handle it elegantly though. Not so much the naive one.</p>",
        "id": 250958377,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1630082230
    },
    {
        "content": "<p>yeah</p>",
        "id": 250958420,
        "sender_full_name": "lqd",
        "timestamp": 1630082252
    },
    {
        "content": "<p>and the impact of the relation splitting is harder to quantify on the optimized variant, making sure it .. still works</p>",
        "id": 250958531,
        "sender_full_name": "lqd",
        "timestamp": 1630082291
    },
    {
        "content": "<p>(which would have been easier to do with your souffl√©-prototype)</p>",
        "id": 250958819,
        "sender_full_name": "lqd",
        "timestamp": 1630082419
    },
    {
        "content": "<p>Hmm. I'll think about that. It should work since the optimized variant is concerned primarily with origins that become dead, which obviously never happens for placeholder regions, but actually writing that down might be hard.</p>",
        "id": 250958839,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1630082430
    },
    {
        "content": "<p>I don't think it only happens for placeholders</p>",
        "id": 250958908,
        "sender_full_name": "lqd",
        "timestamp": 1630082466
    },
    {
        "content": "<p>I'm still interested in the principled fix, though. I'll ask Niko about his other branch once he finishes his train of thought.</p>",
        "id": 250958924,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1630082473
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/50938\">#50938</a> says it only happens for parameters and the return place. Can non-placeholder lifetimes appear in those positions?</p>",
        "id": 250959022,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1630082522
    },
    {
        "content": "<p>maybe in the return place for erroneous code</p>",
        "id": 250959317,
        "sender_full_name": "lqd",
        "timestamp": 1630082646
    },
    {
        "content": "<p>my recollection is that this is also related to type ascription so maybe <a href=\"https://github.com/rust-lang/rust/issues/50938\">#50938</a> doesn't describe all uses, or I'm wrong, or maybe both</p>",
        "id": 250959400,
        "sender_full_name": "lqd",
        "timestamp": 1630082688
    },
    {
        "content": "<p>(I'll find the examples I know where this happens so maybe it'll be illuminating)</p>",
        "id": 250959509,
        "sender_full_name": "lqd",
        "timestamp": 1630082743
    },
    {
        "content": "<p>I'm trying to page some of that back in</p>",
        "id": 250959690,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630082823
    },
    {
        "content": "<p>I was basically removing <code>Liveness::All</code></p>",
        "id": 250959704,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630082831
    },
    {
        "content": "<p>many of the uses can be done at a specific place (e.g., on entry, or on a return node)</p>",
        "id": 250959719,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630082841
    },
    {
        "content": "<p>but I don't remember the difficulties I encountered</p>",
        "id": 250959759,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630082863
    },
    {
        "content": "<p>e.g it happens in <a href=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/numbers-arithmetic/saturating-float-casts-impl.rs\">https://github.com/rust-lang/rust/blob/master/src/test/ui/numbers-arithmetic/saturating-float-casts-impl.rs</a> but that's hard to see here, it's somewhat hidden in the implementation of assert_eq vs assert</p>",
        "id": 250960012,
        "sender_full_name": "lqd",
        "timestamp": 1630082988
    },
    {
        "content": "<p>I do \"have it in for\" Locations::All</p>",
        "id": 250960123,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630083021
    },
    {
        "content": "<p>it annoys me</p>",
        "id": 250960127,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630083023
    },
    {
        "content": "<p>(so, likely here that's about either params or the return place in this example)</p>",
        "id": 250960141,
        "sender_full_name": "lqd",
        "timestamp": 1630083031
    },
    {
        "content": "<p>(the materialization was here <a href=\"https://github.com/rust-lang/rust/blob/8301de16dafc81a3b5d94aa0707ad83bdb56a599/src/librustc_mir/borrow_check/nll/type_check/mod.rs#L229-L233\">https://github.com/rust-lang/rust/blob/8301de16dafc81a3b5d94aa0707ad83bdb56a599/src/librustc_mir/borrow_check/nll/type_check/mod.rs#L229-L233</a> -- this has since be moved to a different file but I had that link handy)</p>",
        "id": 250960261,
        "sender_full_name": "lqd",
        "timestamp": 1630083092
    },
    {
        "content": "<p>(for this example, my notes at the time: 130752 outlives constraints at all points x 170646 points in the CFG)</p>",
        "id": 250960376,
        "sender_full_name": "lqd",
        "timestamp": 1630083132
    },
    {
        "content": "<p>Okay, well I can look for where we generate <code>Locations::All</code> outlives constraints and categorize them</p>",
        "id": 250961160,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1630083472
    }
]