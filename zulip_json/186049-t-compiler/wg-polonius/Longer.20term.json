[
    {
        "content": "<p>In the long term, I want to make <code>datafrog</code> generic over multiple relation data structures, instead of requiring everything to be a sorted list of tuples. Move/init data tends to be pretty dense, so something as simple as a linear array of <code>BitSet</code>s might actually save memory, and  <strong>O</strong>(1) lookup will speed things up when the relation is large.  There are also some more advanced data structures that have fast range queries on dense data... <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 247868782,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627839094
    },
    {
        "content": "<p>In the short term, we could bypass move/init entirely by emitting (drop) liveness facts directly from <code>rustc</code>. These are dense as well, but</p>\n<p>- a) it's only a single dense relation, as opposed to several<br>\n  - b) we could do all the field-sensitive computations in <code>rustc</code> as opposed to Polonius</p>\n<p>I don't really like this, since it seems like a nontrivial amount of work to put off something that we have to do anyway</p>",
        "id": 247868905,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627839283
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"118594\">Dylan MacKenzie (ecstatic-morse)</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Challenges.20for.20move.2Finit.2C.20liveness.2C.20and.20.60Location.3A.3AAll.60/near/247868782\">said</a>:</p>\n<blockquote>\n<p>In the long term, I want to make <code>datafrog</code> generic over multiple relation data structures, instead of requiring everything to be a sorted list of tuples. Move/init data tends to be pretty dense, so something as simple as a linear array of <code>BitSet</code>s might actually save memory, and  <strong>O</strong>(1) lookup will speed things up when the relation is large.  There are also some more advanced data structures that have fast range queries on dense data... <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>\n</blockquote>\n<p>This also seems like something a suitably committed newbie could do, since you don't need a lot of familiarity with the borrow checker rules themselves.</p>",
        "id": 247869067,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627839595
    },
    {
        "content": "<p>There's also <a href=\"https://github.com/rust-lang/polonius/issues/80\">rust-lang/polonius#80</a>, which seems like it's an easy win, although it doesn't scale easily to multiple analyses, since points that are unintersting in one analysis (borrows and loans) may be interesting to another (initializedness) so you'd have to move from one compressed CFG to another as you move through the various analyses</p>",
        "id": 247869325,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627840020
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> Is there anything you want done in the short-term? I'd like to write up some mentoring instructions for my idea, since it shouldn't make Polonius any more complex while we're still in the prototyping phase. It's all <code>datafrog</code></p>",
        "id": 247869382,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627840101
    },
    {
        "content": "<p>sounds good to me actually. I don't know if you've also seen the couple PRs opened on datafrog recently ?</p>",
        "id": 247869455,
        "sender_full_name": "lqd",
        "timestamp": 1627840227
    },
    {
        "content": "<p>FWIW, compressing the input facts on-disk seems like an easy win to me, and supporting multiple input methods is something we'll definitely want to do in the future (when all this data gets transferred in-memory), but it might not make a big difference? You have better intuition than I</p>",
        "id": 247869465,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627840253
    },
    {
        "content": "<p>these PRs could be interesting to look at as well</p>",
        "id": 247869469,
        "sender_full_name": "lqd",
        "timestamp": 1627840266
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Challenges.20for.20move.2Finit.2C.20liveness.2C.20and.20.60Location.3A.3AAll.60/near/247869455\">said</a>:</p>\n<blockquote>\n<p>sounds good to me actually. I don't know if you've also seen the couple PRs opened on datafrog recently ?</p>\n</blockquote>\n<p>No! Cool, I'll check them out now.</p>",
        "id": 247869472,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627840282
    },
    {
        "content": "<p>(I just saw that my micro-optimizations got merged at some point during my open-source hiatus)</p>",
        "id": 247869478,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627840309
    },
    {
        "content": "<p>what kinds of wins do you expect from compressing on disk (apart from the one where we don't have +1M diffs every time we update them of course ;) -- we should really mark them as binary in the repo) ? it should only matter for the polonius binary, ie when we manually run the benchmarks or tests, rather than for rustc</p>",
        "id": 247869552,
        "sender_full_name": "lqd",
        "timestamp": 1627840391
    },
    {
        "content": "<p>hopefully eg prusti and others only use polonius-engine via the in-memory facts</p>",
        "id": 247869569,
        "sender_full_name": "lqd",
        "timestamp": 1627840433
    },
    {
        "content": "<p>if datafrog is fun for you, there must be a lot of fun things to do there for sure :) some bitmap filters could be interesting for antijoins (maybe Lemire's recent Xor Filters / Binary Fuse Filters -- that sounds like fun :)</p>",
        "id": 247869639,
        "sender_full_name": "lqd",
        "timestamp": 1627840561
    },
    {
        "content": "<p>(Revealing the depths of my naivete) Does one dump facts to disk when running the <code>rustc</code> test suite? Are there a lot of multiple GB fact files? If so, would expect multiple seconds to be spent just doing disk I/O</p>",
        "id": 247869683,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627840591
    },
    {
        "content": "<p>and for real I'm sure I remember a paper from Paul Khuong where they benchmarked binary search in depth and either the eytzinger or vEB layout came out on top</p>",
        "id": 247869696,
        "sender_full_name": "lqd",
        "timestamp": 1627840626
    },
    {
        "content": "<p>no no rustc uses the in-memory facts as well</p>",
        "id": 247869702,
        "sender_full_name": "lqd",
        "timestamp": 1627840647
    },
    {
        "content": "<p>Yeah, I think you linked me to eytzinger layout one</p>",
        "id": 247869703,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627840647
    },
    {
        "content": "<p>Ah well there you go <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 247869706,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627840658
    },
    {
        "content": "<p>mostly only our in-tree benchmarks, and therefore some tests, should be the only users of the on-disk facts</p>",
        "id": 247869714,
        "sender_full_name": "lqd",
        "timestamp": 1627840680
    },
    {
        "content": "<p>So the 41GB you mention above is pure memory usage? Or do you dump facts to disk to get an idea of their size?</p>",
        "id": 247869761,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627840724
    },
    {
        "content": "<p>but you're right that loading the bigger benchmarks, + interning, is slow AF</p>",
        "id": 247869762,
        "sender_full_name": "lqd",
        "timestamp": 1627840726
    },
    {
        "content": "<p>it was pure on-disk dumps when I manually asked rustc to emit the facts files</p>",
        "id": 247869773,
        "sender_full_name": "lqd",
        "timestamp": 1627840745
    },
    {
        "content": "<p>it's easier to obtain a rough estimate of the size and time it took to emit the on-disk facts + the actual tuples counts</p>",
        "id": 247869833,
        "sender_full_name": "lqd",
        "timestamp": 1627840806
    },
    {
        "content": "<p>Yep, makes perfect sense to me</p>",
        "id": 247869859,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627840824
    },
    {
        "content": "<p>(we can have the fact generation timing via rustc self-profiling)</p>",
        "id": 247869879,
        "sender_full_name": "lqd",
        "timestamp": 1627840851
    },
    {
        "content": "<p>do you think we're at a point where we can actually work on HRTB or would we need more actionable items (we can produce such a list of actionable items next sprint) ?</p>",
        "id": 247869957,
        "sender_full_name": "lqd",
        "timestamp": 1627840948
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/datafrog/issues/34\">rust-lang/datafrog#34</a> seems pretty cool BTW, although I haven't looked at the implementation</p>",
        "id": 247869978,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627840993
    },
    {
        "content": "<p>we can probably add universes to the facts and so on, but if that's the only actionable item we can accomplish now there's no rush to do so</p>",
        "id": 247869986,
        "sender_full_name": "lqd",
        "timestamp": 1627841018
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Challenges.20for.20move.2Finit.2C.20liveness.2C.20and.20.60Location.3A.3AAll.60/near/247869957\">said</a>:</p>\n<blockquote>\n<p>do you think we're at a point where we can actually work on HRTB ou would we need more actionable items (we can produce such a list of actionable items next sprint) ?</p>\n</blockquote>\n<p>I'm not, others might be, that higher-ranked errors conversation was like drinking from a fire hose</p>",
        "id": 247869988,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627841022
    },
    {
        "content": "<p>nice, that's the one PR whose title seemed the most interesting :)</p>",
        "id": 247870034,
        "sender_full_name": "lqd",
        "timestamp": 1627841049
    },
    {
        "content": "<p>same, honestly :)</p>",
        "id": 247870037,
        "sender_full_name": "lqd",
        "timestamp": 1627841064
    },
    {
        "content": "<p>The canonical example for HRTBs and the borrow checker is like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">a</span><span class=\"w\"> </span>: <span class=\"o\">'</span><span class=\"na\">b</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">22</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">y</span> <span class=\"kt\">u32</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// giving a name 'y here for convenience</span>\n<span class=\"w\">    </span><span class=\"n\">foo</span>::<span class=\"o\">&lt;'</span><span class=\"na\">y</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>But we don't <em>need</em> universes to handle this, since <code>for&lt;'b&gt;  'a: 'b</code> can be reduced to <code>'a: 'static</code></p>",
        "id": 247870137,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627841237
    },
    {
        "content": "<p>(for datafrog, there are some recent cool sorting papers, or some of Lemire's work on SIMD galloping and set intersections that would probably be fun and useful)</p>",
        "id": 247870187,
        "sender_full_name": "lqd",
        "timestamp": 1627841284
    },
    {
        "content": "<p>I think I'm failing to understand the boundary between type-checking/trait-solving and borrow-checking</p>",
        "id": 247870213,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627841304
    },
    {
        "content": "<p>+1 :)</p>",
        "id": 247870220,
        "sender_full_name": "lqd",
        "timestamp": 1627841320
    },
    {
        "content": "<p>And some more complex examples would be helpful</p>",
        "id": 247870225,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627841323
    },
    {
        "content": "<p>Boy I've really polluted this thread</p>",
        "id": 247870230,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627841340
    },
    {
        "content": "<p>probably the canonical example would have to be involving subset relationships where one origin is in a universe that can't name the other</p>",
        "id": 247870244,
        "sender_full_name": "lqd",
        "timestamp": 1627841376
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Challenges.20for.20move.2Finit.2C.20liveness.2C.20and.20.60Location.3A.3AAll.60/near/247870187\">said</a>:</p>\n<blockquote>\n<p>(for datafrog, there are some recent cool sorting papers, or some of Lemire's work on SIMD galloping and set intersections that would probably be fun and useful)</p>\n</blockquote>\n<p>Yeah, and all of this stuff is non-intrusive and beginner-friendly (like beginner to Rust, you still have to know what you're doing)</p>",
        "id": 247870246,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627841386
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"118594\">Dylan MacKenzie (ecstatic-morse)</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Longer.20term/near/247870230\">said</a>:</p>\n<blockquote>\n<p>Boy I've really polluted this thread</p>\n</blockquote>\n<p>fixed :)</p>",
        "id": 247870292,
        "sender_full_name": "lqd",
        "timestamp": 1627841412
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Challenges.20for.20move.2Finit.2C.20liveness.2C.20and.20.60Location.3A.3AAll.60/near/247870244\">said</a>:</p>\n<blockquote>\n<p>probably the canonical example would have to be involving subset relationships where one origin is in a universe that can't name the other</p>\n</blockquote>\n<p>Okay, so this example appears in the dev-guide</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">t</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"nc\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">b</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span>: <span class=\"nc\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">c</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">b</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 247870306,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627841445
    },
    {
        "content": "<p>(I'll go grab dinner now, good talking to you, as always :)</p>",
        "id": 247870312,
        "sender_full_name": "lqd",
        "timestamp": 1627841475
    },
    {
        "content": "<p>Is this what you're thinking about?</p>",
        "id": 247870313,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627841483
    },
    {
        "content": "<p>yes</p>",
        "id": 247870314,
        "sender_full_name": "lqd",
        "timestamp": 1627841487
    },
    {
        "content": "<p>You too <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span></p>",
        "id": 247870315,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627841493
    },
    {
        "content": "<p>these examples from the dev guide where eg <code>'b: 'a</code> where <code>'b</code> is a placeholder in a universe <code>'a</code> can't name (IIRC)</p>",
        "id": 247870321,
        "sender_full_name": "lqd",
        "timestamp": 1627841519
    },
    {
        "content": "<p>Okay, I'll spend some time thinking about that type of program (filling in the ellipses), even generating some more test cases would be worthwhile I think, even if I can't solve them before getting more help from Niko</p>",
        "id": 247870380,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627841606
    },
    {
        "content": "<p>Enjoy your meal!</p>",
        "id": 247870385,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627841621
    },
    {
        "content": "<p>there definitely are rustc UI tests with HRTBs that don't trigger polonius errors. I'm not sure how the universes show up there in the subtyping relatonships but I'll find the ones I'm thinking of</p>",
        "id": 247875586,
        "sender_full_name": "lqd",
        "timestamp": 1627849499
    },
    {
        "content": "<p>this one is basically the same as the canonical example from above <a href=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/issues/issue-26217.rs\">https://github.com/rust-lang/rust/blob/master/src/test/ui/issues/issue-26217.rs</a></p>",
        "id": 247875865,
        "sender_full_name": "lqd",
        "timestamp": 1627850019
    },
    {
        "content": "<p>Right, yeah. From the \"quantifier elimination\"  POV, you would  rewrite the bound on <code>foo</code> as <code>T: 'static</code> during constraint generation, much like the other example.</p>",
        "id": 247879851,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627856258
    },
    {
        "content": "<p>Whereas from the universe POV, you have <code>'foo</code> (<code>'a</code> in <code>foo</code>) in U1, and <code>'bar</code> in U0, and also an implied bound like <code>'bar: 'foo</code>, which means you replace <code>'foo</code> with <code>'static</code>?</p>",
        "id": 247879984,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627856454
    },
    {
        "content": "<p>(My intuition for the universe rules is very poor)</p>",
        "id": 247879988,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627856469
    },
    {
        "content": "<p>I suspect there's a more complex case where not everything is immediately available, so quantifier eliminations \"can't see\" what substitution needs to be done but the universe check can still handle things, but I don't think I've seen one yet.</p>",
        "id": 247880745,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627857729
    },
    {
        "content": "<p>And I'm not as good as Niko at materializing examples.</p>",
        "id": 247880750,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627857748
    }
]