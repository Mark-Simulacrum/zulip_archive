[
    {
        "content": "<p>Q/A for <span class=\"user-mention\" data-user-id=\"218716\">@lokalmatador</span></p>",
        "id": 164023311,
        "sender_full_name": "lokalmatador",
        "timestamp": 1556048701
    },
    {
        "content": "<p>OK, I've got to run but I can give one <em>very quick</em> tip =)</p>",
        "id": 164023333,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556048717
    },
    {
        "content": "<p>nah it's fine, I got a pile to work off now (better read) - I'll drop a line as soon as I start doing some actual work with rustc - I thin by then the first questions will arise</p>",
        "id": 164023482,
        "sender_full_name": "lokalmatador",
        "timestamp": 1556048834
    },
    {
        "content": "<p>but thanks!</p>",
        "id": 164023484,
        "sender_full_name": "lokalmatador",
        "timestamp": 1556048837
    },
    {
        "content": "<p>So what I was going to suggest <span class=\"user-mention\" data-user-id=\"218716\">@lokalmatador</span> is that the <code>time</code> function can be used to \"drop-in\" timing measurements. <a href=\"https://github.com/rust-lang/rust/blob/e305df1846a6d985315917ae0c81b74af8b4e641/src/librustc_driver/lib.rs#L321-L330\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/e305df1846a6d985315917ae0c81b74af8b4e641/src/librustc_driver/lib.rs#L321-L330\">Here is an example where we invoke it</a></p>",
        "id": 164108230,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556131521
    },
    {
        "content": "<p>If I recall, I inserted some calls to this before to dump out timing measurements for how long it takes to borrow check each function</p>",
        "id": 164108241,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556131534
    },
    {
        "content": "<p>Specifically, I think I replaced <a href=\"https://github.com/rust-lang/rust/blob/e305df1846a6d985315917ae0c81b74af8b4e641/src/librustc_mir/borrow_check/mod.rs#L121\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/e305df1846a6d985315917ae0c81b74af8b4e641/src/librustc_mir/borrow_check/mod.rs#L121\">this line</a> with something like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">time</span><span class=\"p\">(</span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">sess</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">format</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;borrow_check({:?})&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">def_id</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">do_mir_borrowck</span><span class=\"p\">(...));</span><span class=\"w\"></span>\n</pre></div>",
        "id": 164108425,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556131639
    },
    {
        "content": "<p>and then you can run the compiler with (I think) <code>-Ztime-passes</code> -- this is a kind of deprecated profiler, but sufficient I think for this purpose</p>",
        "id": 164108442,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556131662
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> is working on a nice replacement and may have some suggestions</p>",
        "id": 164108452,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556131673
    },
    {
        "content": "<p>maybe that new infrastructure can be used very easily here too, not sure</p>",
        "id": 164108502,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556131685
    },
    {
        "content": "<p>of course you could always write your own profiler too -- we just need to take start/stop measurements dump the elapsed time, along with the <code>def_id</code></p>",
        "id": 164108513,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556131701
    },
    {
        "content": "<p>we can then run this on some tests and we'll see how long each fn took</p>",
        "id": 164108520,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556131709
    },
    {
        "content": "<p>one complication is that the <code>do_mir_borrowck</code> function sometimes recurses, specifically around closures...</p>",
        "id": 164108561,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556131746
    },
    {
        "content": "<p>inserting that call there will measure the standard NLL borrow check, of course, not polonius -- we can then measure twice, once with polonius enabled, and compare the difference</p>",
        "id": 164108584,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556131770
    },
    {
        "content": "<p>in fact, I wonder if it's easier to just insert some <code>eprintln!</code> calls (or perhaps <code>info!</code> or something so they don't print by default) and post-process the data with a quick script</p>",
        "id": 164108605,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556131791
    },
    {
        "content": "<p>that would let us readily handle the recursive case</p>",
        "id": 164108612,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556131797
    },
    {
        "content": "<p>e.g., print out a start stamp / end stamp</p>",
        "id": 164108673,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556131808
    },
    {
        "content": "<p>ok, thanks for elaborating</p>",
        "id": 164110238,
        "sender_full_name": "lokalmatador",
        "timestamp": 1556132680
    },
    {
        "content": "<p>I suppose it'd be nice if we could have some kind of code that we can check-in, such that we can readily generate spreadsheets etc in the future</p>",
        "id": 164110390,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556132778
    },
    {
        "content": "<p>yup</p>",
        "id": 164110406,
        "sender_full_name": "lokalmatador",
        "timestamp": 1556132792
    },
    {
        "content": "<p>(one easy way to do this would be to have the compiler self-profile and to generate <code>debug!</code> statements that we can grep for)</p>",
        "id": 164110415,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556132801
    },
    {
        "content": "<p>although hmm</p>",
        "id": 164110434,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556132816
    },
    {
        "content": "<p>so if it just generates <code>debug!</code> statements at specific points</p>",
        "id": 164110440,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556132823
    },
    {
        "content": "<p>we can check-in the scripts to post-process that output into the polonius repo</p>",
        "id": 164110454,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556132832
    },
    {
        "content": "<p>that seems like a good enough setup too</p>",
        "id": 164110470,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556132843
    },
    {
        "content": "<p>If you want to use <code>-Z self-profile</code>, the easiest thing to do would be to call the <code>start_activity()</code> and <code>end_activity()</code> methods on the <code>SelfProfiler</code>  which can take arbitrary strings. Here's an example:</p>\n<p><a href=\"https://github.com/rust-lang/rust/blob/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src/librustc_interface/passes.rs#L72-L80\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src/librustc_interface/passes.rs#L72-L80\">https://github.com/rust-lang/rust/blob/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src/librustc_interface/passes.rs#L72-L80</a></p>",
        "id": 164111053,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1556133309
    },
    {
        "content": "<p>The tooling here is currently kind of basic but after you've made that change, you'll need to build rustc, then run it with the <code>-Z self-profile</code> flag. You'll get three output files in your working directory. From there, you can use the tool in <a href=\"https://github.com/rust-lang/measureme/pull/17\" target=\"_blank\" title=\"https://github.com/rust-lang/measureme/pull/17\">this PR</a> to get timing data out of those binary files</p>",
        "id": 164111208,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1556133423
    },
    {
        "content": "<p>The self-profiler should correctly handle the recursive case so you don't need to do anything there.</p>",
        "id": 164111314,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1556133486
    },
    {
        "content": "<p>I see. Thanks for the info!</p>",
        "id": 164111337,
        "sender_full_name": "lokalmatador",
        "timestamp": 1556133509
    },
    {
        "content": "<p>Let me know if you decide to go that route and have questions. I'd be happy to answer them or help you get unstuck.</p>",
        "id": 164111396,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1556133555
    },
    {
        "content": "<p>That might be the right thing then</p>",
        "id": 164113353,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556135015
    },
    {
        "content": "<p>alright</p>",
        "id": 166400330,
        "sender_full_name": "lokalmatador",
        "timestamp": 1558645755
    },
    {
        "content": "<p>so I dug around the last coupla days I think I found the locations where profiling for polonius should be done</p>",
        "id": 166400364,
        "sender_full_name": "lokalmatador",
        "timestamp": 1558645784
    },
    {
        "content": "<p>this is what I changed: <a href=\"https://github.com/lokalmatador/rust/commit/3953fa1a48e9bf08b9ee729a7d3d2dacee5ffd95\" target=\"_blank\" title=\"https://github.com/lokalmatador/rust/commit/3953fa1a48e9bf08b9ee729a7d3d2dacee5ffd95\">https://github.com/lokalmatador/rust/commit/3953fa1a48e9bf08b9ee729a7d3d2dacee5ffd95</a></p>",
        "id": 166400526,
        "sender_full_name": "lokalmatador",
        "timestamp": 1558645890
    },
    {
        "content": "<p>everything compiles and using it seems to output some profiling data for the statements I added, but now I'm stuck with measureme</p>",
        "id": 166400547,
        "sender_full_name": "lokalmatador",
        "timestamp": 1558645922
    },
    {
        "content": "<p>cloned it (today) and compiled it and now I get that</p>",
        "id": 166400596,
        "sender_full_name": "lokalmatador",
        "timestamp": 1558645930
    },
    {
        "content": "<p><code>thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"GenericActivity\"`,\n right: `\"Query\"`', summarize/src/analysis.rs:150:17</code></p>",
        "id": 166400616,
        "sender_full_name": "lokalmatador",
        "timestamp": 1558645950
    },
    {
        "content": "<p>maybe <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span>  has an idea why this happens?</p>",
        "id": 166400627,
        "sender_full_name": "lokalmatador",
        "timestamp": 1558645963
    },
    {
        "content": "<p>also, <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> , is this what you inteded with profiling? and also, are the locations correct?</p>",
        "id": 166400658,
        "sender_full_name": "lokalmatador",
        "timestamp": 1558645987
    },
    {
        "content": "<p>I can tell you <em>what's</em> happening but I don't know <em>why</em>.</p>\n<p>Profiler events get recorded as either a Start event or a Stop event and then an event type.</p>\n<p>When the summarization tool runs, it keeps of stack of events that happen per thread. When a Stop event gets processed, we look at the previous event on the stack and make sure it matches the event we're currently processing.</p>\n<p>In this case, that assertion is failing. Based on the message, the last Start event we saw on this thread was for a \"GenericActivity\" event type but now the Stop event we're processing is for a \"Query\" event type.</p>",
        "id": 166401318,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1558646552
    },
    {
        "content": "<p>It almost looks like there's event missing from the file but that shouldn't happen and I've never seen it</p>",
        "id": 166401361,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1558646590
    },
    {
        "content": "<p>How big is your <code>.events</code> file?</p>",
        "id": 166401380,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1558646606
    },
    {
        "content": "<p>308K</p>",
        "id": 166401485,
        "sender_full_name": "lokalmatador",
        "timestamp": 1558646681
    },
    {
        "content": "<p>Can you file a bug report on <a href=\"https://github.com/rust-lang/measureme\" target=\"_blank\" title=\"https://github.com/rust-lang/measureme\">https://github.com/rust-lang/measureme</a> ?</p>",
        "id": 166401699,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1558646857
    },
    {
        "content": "<p>And include all three files</p>",
        "id": 166401707,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1558646864
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 166401796,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1558646906
    },
    {
        "content": "<p>sure</p>",
        "id": 166401867,
        "sender_full_name": "lokalmatador",
        "timestamp": 1558646974
    },
    {
        "content": "<blockquote>\n<p>Can you file a bug report on <a href=\"https://github.com/rust-lang/measureme\" target=\"_blank\" title=\"https://github.com/rust-lang/measureme\">https://github.com/rust-lang/measureme</a> ?</p>\n</blockquote>\n<p>done - though I could not add a proper label...</p>",
        "id": 166404050,
        "sender_full_name": "lokalmatador",
        "timestamp": 1558648721
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"218716\">@lokalmatador</span> that looks like what I intended, yes. It's a bit of an underestimate in that it's only profiling the cost of \"inner loop\" of polonius and not the cost of generating the facts themselves, but it'd still be useful data.</p>",
        "id": 166718144,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559051043
    },
    {
        "content": "<p>Did you ever figure out what was going wrong with measureme?</p>",
        "id": 166718161,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559051050
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"218716\">lokalmatador</span> that looks like what I intended, yes. It's a bit of an underestimate in that it's only profiling the cost of \"inner loop\" of polonius and not the cost of generating the facts themselves, but it'd still be useful data.</p>\n</blockquote>\n<p>I see. For my understanding: Polonius uses the same facts as NLL, right?</p>",
        "id": 166730482,
        "sender_full_name": "lokalmatador",
        "timestamp": 1559058895
    },
    {
        "content": "<p>so it boils down to also profile NLL's fact generation</p>",
        "id": 166730561,
        "sender_full_name": "lokalmatador",
        "timestamp": 1559058933
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"218716\">@lokalmatador</span> More or less, there are some Polonius-specific fact generation steps, notably an entire MIR traversal to extract variable uses, but I can't remember if that's in the code you're profiling yet. I think I remember a nested loop doing some sort of Polonius-only work somewhere in <code>trace::trace()</code>as well.</p>",
        "id": 166746701,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1559068997
    },
    {
        "content": "<p>But it's heavily piggy-backing off of NLL's calculations as far as I can tell</p>",
        "id": 166746830,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1559069055
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"218716\">@lokalmatador</span> The issue with <code>measureme</code> is that <a href=\"https://github.com/lokalmatador/rust/commit/3953fa1a48e9bf08b9ee729a7d3d2dacee5ffd95#diff-cce7509357d5dcbb2c3bd87102f77005R213\" target=\"_blank\" title=\"https://github.com/lokalmatador/rust/commit/3953fa1a48e9bf08b9ee729a7d3d2dacee5ffd95#diff-cce7509357d5dcbb2c3bd87102f77005R213\">this line</a> in your diff should use <code>end_activity</code> instead of <code>start_activity</code>.</p>",
        "id": 166989866,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559303315
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"218716\">lokalmatador</span> The issue with <code>measureme</code> is that <a href=\"https://github.com/lokalmatador/rust/commit/3953fa1a48e9bf08b9ee729a7d3d2dacee5ffd95#diff-cce7509357d5dcbb2c3bd87102f77005R213\" target=\"_blank\" title=\"https://github.com/lokalmatador/rust/commit/3953fa1a48e9bf08b9ee729a7d3d2dacee5ffd95#diff-cce7509357d5dcbb2c3bd87102f77005R213\">this line</a> in your diff should use <code>end_activity</code> instead of <code>start_activity</code>.</p>\n</blockquote>\n<p>hey <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span>,  just saw it on github. Totally my bad, sorry for bothering with that stupid question :D I'll proof read my code thrice from now on ;) Anyways, thanks for clarifying!</p>",
        "id": 167059165,
        "sender_full_name": "lokalmatador",
        "timestamp": 1559372198
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"218716\">@lokalmatador</span> No worries! I had to look through your diff twice before I spotted it myself <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 167069541,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559390372
    },
    {
        "content": "<p>hm, to whoever stumbles upon this (but maybe <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> wants to reply), at the beginning we at some point talked about also dumping tuple counts</p>",
        "id": 168863174,
        "sender_full_name": "lokalmatador",
        "timestamp": 1561392965
    },
    {
        "content": "<p>1. so do we still want to do this?<br>\n2. that seems a little trickier as I cannot reuse the profiling stuff which is there - well I could by dumping some string that contains the number of tuples if this is ok, but in an ideal world, we probably want something else; could the NLL fact dumping stuff be reused?</p>",
        "id": 168863299,
        "sender_full_name": "lokalmatador",
        "timestamp": 1561393119
    },
    {
        "content": "<p>just trying to avoid to introduce too much new stuff somehow...</p>",
        "id": 168863308,
        "sender_full_name": "lokalmatador",
        "timestamp": 1561393131
    },
    {
        "content": "<p>no need to discuss now, but tomorrow maybe</p>",
        "id": 168863335,
        "sender_full_name": "lokalmatador",
        "timestamp": 1561393166
    },
    {
        "content": "<p>in the meantime, I'll continue playing with rustc-perf and give some benchmarks a shot</p>",
        "id": 168864667,
        "sender_full_name": "lokalmatador",
        "timestamp": 1561394419
    },
    {
        "content": "<p>well the tuple counts we can also get very easily just by inspecting the output</p>",
        "id": 168874891,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561401988
    },
    {
        "content": "<p>I guess I think we *may want to do it</p>",
        "id": 168874910,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561402012
    },
    {
        "content": "<p>I'm trying to remember</p>",
        "id": 168874915,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561402016
    },
    {
        "content": "<p>I think my main motivation was being able to correlate timing with tuple counts maybe?</p>",
        "id": 168874942,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561402038
    },
    {
        "content": "<p>starting with just timing seems ok</p>",
        "id": 168874949,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561402043
    },
    {
        "content": "<blockquote>\n<p>I think my main motivation was being able to correlate timing with tuple counts maybe?</p>\n</blockquote>\n<p>that sounds very reasonable</p>",
        "id": 168875094,
        "sender_full_name": "lokalmatador",
        "timestamp": 1561402154
    },
    {
        "content": "<p>ok, then I'll focus on the timing for now</p>",
        "id": 168875115,
        "sender_full_name": "lokalmatador",
        "timestamp": 1561402168
    },
    {
        "content": "<p>I don't think this is useful for you yet <span class=\"user-mention\" data-user-id=\"218716\">@lokalmatador</span>, but as part of my work for my thesis, I have collected about 17 000 Git repositories containing Rust code that compiles with Nightly Rust (selected by number of Github stars and downloads on <a href=\"http://crates.io\" target=\"_blank\" title=\"http://crates.io\">crates.io</a>), and have now generated around 70 GB of Polonius inputs from them. I plan on doing a quick tuple count and run Polonius against them and see how the correlations look. :)</p>",
        "id": 168878855,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1561405234
    },
    {
        "content": "<p>(this is an excuse to have more colourful graphs in my report)</p>",
        "id": 168878968,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1561405332
    },
    {
        "content": "<p>Ah, apparently I have inputs from roughly 1700 repositories, or precisely 789 658 functions.</p>",
        "id": 168879000,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1561405375
    },
    {
        "content": "<p>(I do all of this from Python scripts like an animal)</p>",
        "id": 168879057,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1561405435
    },
    {
        "content": "<p>(yeah we can always add these tuple counts/graph/correlate them later  — interestingly enough, we might also be able to dump them with datafrog;  it'll also dump the whole counts at each iteration of the computation, including outputs and intermediate relations, not just inputs, using <a href=\"https://github.com/rust-lang/datafrog/pull/21\" target=\"_blank\" title=\"https://github.com/rust-lang/datafrog/pull/21\">this</a>  — but polonius doesn't use this rev of datafrog yet though IIRC)</p>",
        "id": 168880369,
        "sender_full_name": "lqd",
        "timestamp": 1561406412
    },
    {
        "content": "<blockquote>\n<p>I don't think this is useful for you yet <span class=\"user-mention silent\" data-user-id=\"218716\">lokalmatador</span>, but as part of my work for my thesis, I have collected about 17 000 Git repositories containing Rust code that compiles with Nightly Rust (selected by number of Github stars and downloads on <a href=\"http://crates.io\" target=\"_blank\" title=\"http://crates.io\">crates.io</a>), and have now generated around 70 GB of Polonius inputs from them. I plan on doing a quick tuple count and run Polonius against them and see how the correlations look. :)</p>\n</blockquote>\n<p>wow, that's a lot :D <br>\nyeah maybe we can briefly talk about it tonite if it makes sense for me to reuse it</p>",
        "id": 168914674,
        "sender_full_name": "lokalmatador",
        "timestamp": 1561446372
    },
    {
        "content": "<p>Here's <a href=\"/user_uploads/4715/4B3a82Cpj8PCR44PRmQQGTyc/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">a heatmap of inputs affecting solve-time for rougly 789 000 functions from popular crates </a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/4B3a82Cpj8PCR44PRmQQGTyc/pasted_image.png\" target=\"_blank\" title=\"a heatmap of inputs affecting solve-time for rougly 789 000 functions from popular crates \"><img src=\"/user_uploads/4715/4B3a82Cpj8PCR44PRmQQGTyc/pasted_image.png\"></a></div>",
        "id": 169388870,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1561982446
    }
]