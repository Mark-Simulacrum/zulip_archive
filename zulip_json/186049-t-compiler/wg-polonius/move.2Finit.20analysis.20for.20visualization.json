[
    {
        "content": "<p>Hi Polonius team! I'm an undergrad working with University of Michigan's Fp_lab Rustviz project to visualize rust programs for better user experience. Here's a demo: <a href=\"http://fplab.eecs.umich.edu:8000/\">http://fplab.eecs.umich.edu:8000/</a> Essentially we are detecting where variables are borrowed and returned, initialized and dropped to generate corresponding visulization that could assist user in debugging their program. I've heard that <span class=\"user-mention\" data-user-id=\"204115\">@Amanda Stjerna</span> had done some work regarding moves and inits in polonius. Right how I'm quite new to rustc and polonius repo and I'd like to know more details of how and where they are implemented (and how could I improve it). If anyone could help point out where I could find these info that would be great help!</p>",
        "id": 246374424,
        "sender_full_name": "Haochen Zhang",
        "timestamp": 1626610247
    },
    {
        "content": "<p>Amanda can provide more answers but I can at least share some details about the \"where\" question:</p>\n<ul>\n<li>the rules describing the move/init analysis are in <a href=\"https://hackmd.io/CGMNjt1hR_qYtsR9hgdGmw?view#Initialization-analysis\">this document</a>. There's often a short explanation of some of its parts to introduce how a relation is computed.</li>\n<li>the polonius implementation (and I don't know the status wrt the rules above, I only remember it was still a work in progress) is in <a href=\"https://github.com/rust-lang/polonius/blob/master/polonius-engine/src/output/initialization.rs\">this file</a> </li>\n<li>the facts that are used in these rules are generated in rustc, and the areas where facts are generated are generally tracked in the self-profiler with the <code>polonius_fact_generation</code> task. So <a href=\"https://github.com/rust-lang/rust/search?q=polonius_fact_generation\">searching for that</a> will find where  the code to generate these facts starts. The inputs themselves are described in the hackmd and code above, and can then be found in these <code>polonius_fact_generation</code> blocks: rustc fills the fields of <a href=\"https://github.com/rust-lang/polonius/blob/a4b3684aea9add867c60b9509891b10d7a74f189/polonius-engine/src/facts.rs#L6-L90\">the <code>AllFacts</code> \"database\" struct</a> where the fields are named according to the relations that the rules expect</li>\n</ul>",
        "id": 246378891,
        "sender_full_name": "lqd",
        "timestamp": 1626615006
    },
    {
        "content": "<p>I remember there was a discussion about how to visualize this data on internals a while back. I think there was some good work on mockups for the front end, but the back end never happened. There are a lot of people that will love to see any progress you make!</p>",
        "id": 246392745,
        "sender_full_name": "Eh2406",
        "timestamp": 1626634343
    },
    {
        "content": "<p>In case you want to bridge Polonius information with MIR, you may find <a href=\"https://github.com/rust-lang/rust/pull/86977\">my PR</a> useful. The comment contains a link to the Prusti code that shows how to use it. If you have any questions, let me know.</p>",
        "id": 246502610,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1626723225
    },
    {
        "content": "<p>nice !</p>",
        "id": 246503642,
        "sender_full_name": "lqd",
        "timestamp": 1626723687
    },
    {
        "content": "<p>Nice, improvising Rust visualization is indeed an approach that many beginners will be thankful to have <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n<p>A nit, though: in the following diagram, I'd change the line for <code>z</code> to start at the end of the rhs block, since that's only when <code>z</code> starts living: <a href=\"/user_uploads/4715/fQMQN_U6FRIqQBu5_deGYszq/Screen-Shot-2021-07-19-at-21.46.27.png\">Screen-Shot-2021-07-19-at-21.46.27.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/fQMQN_U6FRIqQBu5_deGYszq/Screen-Shot-2021-07-19-at-21.46.27.png\" title=\"Screen-Shot-2021-07-19-at-21.46.27.png\"><img src=\"/user_uploads/4715/fQMQN_U6FRIqQBu5_deGYszq/Screen-Shot-2021-07-19-at-21.46.27.png\"></a></div>",
        "id": 246504561,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1626724116
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232018\">Daniel Henry-Mantilla</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/move.2Finit.20analysis.20for.20visualization/near/246504561\">said</a>:</p>\n<blockquote>\n<p>Nice, improvising Rust visualization is indeed an approach that many beginners will be thankful to have <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n<p>A nit, though: in the following diagram, I'd change the line for <code>z</code> to start at the end of the rhs block, since that's only when <code>z</code> starts living: <a href=\"/user_uploads/4715/fQMQN_U6FRIqQBu5_deGYszq/Screen-Shot-2021-07-19-at-21.46.27.png\">Screen-Shot-2021-07-19-at-21.46.27.png</a></p>\n</blockquote>\n<p>Hi Daniel! Thanks for the interest in the work! Could you specify what do you mean by the end of the rhs block?</p>",
        "id": 246835647,
        "sender_full_name": "Haochen Zhang",
        "timestamp": 1626954190
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120179\">Eh2406</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/move.2Finit.20analysis.20for.20visualization/near/246392745\">said</a>:</p>\n<blockquote>\n<p>I remember there was a discussion about how to visualize this data on internals a while back. I think there was some good work on mockups for the front end, but the back end never happened. There are a lot of people that will love to see any progress you make!</p>\n</blockquote>\n<p>Thanks! We definitely noticed some really nice front-end mock-ups works regarding data visualization. I'm guessing you are probably refering to this one: <a href=\"https://blog.adamant-lang.org/2019/rust-lifetime-visualization-ideas/\">https://blog.adamant-lang.org/2019/rust-lifetime-visualization-ideas/</a> Our goal is to eventually auto-gen all the visualization and integrate them to tools like VSCode</p>",
        "id": 246836234,
        "sender_full_name": "Haochen Zhang",
        "timestamp": 1626954687
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"421546\">Haochen Zhang</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/move.2Finit.20analysis.20for.20visualization/near/246835647\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"232018\">Daniel Henry-Mantilla</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/move.2Finit.20analysis.20for.20visualization/near/246504561\">said</a>:</p>\n<blockquote>\n<p>Nice, improvising Rust visualization is indeed an approach that many beginners will be thankful to have <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n<p>A nit, though: in the following diagram, I'd change the line for <code>z</code> to start at the end of the rhs block, since that's only when <code>z</code> starts living: <a href=\"/user_uploads/4715/fQMQN_U6FRIqQBu5_deGYszq/Screen-Shot-2021-07-19-at-21.46.27.png\">Screen-Shot-2021-07-19-at-21.46.27.png</a></p>\n</blockquote>\n<p>Hi Daniel! Thanks for the interest in the work! Could you specify what do you mean by the end of the rhs block?</p>\n</blockquote>\n<p>Should be fixed. Seems only to support on firefox for now</p>",
        "id": 246950147,
        "sender_full_name": "Haochen Zhang",
        "timestamp": 1627027206
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"421546\">Haochen Zhang</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/move.2Finit.20analysis.20for.20visualization/near/246835647\">said</a>:</p>\n<blockquote>\n<p>Hi Daniel! Thanks for the interest in the work! Could you specify what do you mean by the end of the rhs block?</p>\n</blockquote>\n<p>Lines 3 to 7 is a block (right hand side of the declaration) defining the value of z, the left hand side of the declaration. So the declaration and assignment of <code>z</code> only truly takes place from line 7 onwards:</p>\n<p><a href=\"/user_uploads/4715/Ue9Zxhbwk7n4jjD-o6iknJZj/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/Ue9Zxhbwk7n4jjD-o6iknJZj/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/Ue9Zxhbwk7n4jjD-o6iknJZj/image.png\"></a></div><p>That's why I suggest that the lifetime of <code>z</code> be trimmed so that it only starts at line 7 <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 247400466,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1627424817
    },
    {
        "content": "<p>it's been done indeed <a href=\"/user_uploads/4715/UmiADm8YxHtQ5ymXpOsRFCr7/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/UmiADm8YxHtQ5ymXpOsRFCr7/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/UmiADm8YxHtQ5ymXpOsRFCr7/image.png\"></a></div>",
        "id": 247400782,
        "sender_full_name": "lqd",
        "timestamp": 1627425037
    },
    {
        "content": "<p>(modulo the off-by-one on the last line, say :)</p>",
        "id": 247400852,
        "sender_full_name": "lqd",
        "timestamp": 1627425100
    }
]