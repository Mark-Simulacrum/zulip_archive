[
    {
        "content": "<p>hello :)</p>",
        "id": 177086767,
        "sender_full_name": "lqd",
        "timestamp": 1569956442
    },
    {
        "content": "<p>/me hides in shame, because he hasn't had any time for polonius lately</p>",
        "id": 177086831,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569956489
    },
    {
        "content": "<p>:)</p>",
        "id": 177086839,
        "sender_full_name": "lqd",
        "timestamp": 1569956497
    },
    {
        "content": "<p>this week Matthew made this cool PR <a href=\"https://github.com/rust-lang/rust/pull/64749\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/64749\">https://github.com/rust-lang/rust/pull/64749</a></p>",
        "id": 177086872,
        "sender_full_name": "lqd",
        "timestamp": 1569956520
    },
    {
        "content": "<p>which fixes the last failure in the test suite (not the OOMs)</p>",
        "id": 177086938,
        "sender_full_name": "lqd",
        "timestamp": 1569956541
    },
    {
        "content": "<blockquote>\n<p>/me hides in shame, because he hasn't had any time for polonius lately</p>\n</blockquote>\n<p>SAME</p>",
        "id": 177086964,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1569956553
    },
    {
        "content": "<p>computing which things outlive free regions as a liveness optimization is interesting since liveness is also done in polonius</p>",
        "id": 177087064,
        "sender_full_name": "lqd",
        "timestamp": 1569956616
    },
    {
        "content": "<p>I wonder if that affects things or not, speed-wise</p>",
        "id": 177087157,
        "sender_full_name": "lqd",
        "timestamp": 1569956660
    },
    {
        "content": "<p>at least reducing the number of variables we compute liveness in polonius, I think ?</p>",
        "id": 177087190,
        "sender_full_name": "lqd",
        "timestamp": 1569956691
    },
    {
        "content": "<p>I think liveness is sort of computed before regions/origins/provenances enters into the equation</p>",
        "id": 177087242,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1569956722
    },
    {
        "content": "<p>there seems to be an NLL fix in there as well, even though the PR text only mentions Polonius, but I could be interpreting things wrong</p>",
        "id": 177087276,
        "sender_full_name": "lqd",
        "timestamp": 1569956738
    },
    {
        "content": "<p>So the main point of optimisation should probably be to stop computing liveness for variables that are neither structs with (structs with...) references or holding references themselves</p>",
        "id": 177087357,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1569956773
    },
    {
        "content": "<p>Or, not to even emit those into Polonius in the first place</p>",
        "id": 177087373,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1569956786
    },
    {
        "content": "<p>some of this is done in rustc but was disabled because it broke polonius</p>",
        "id": 177087404,
        "sender_full_name": "lqd",
        "timestamp": 1569956817
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> Is this in the \"test difference\" PR you mean?</p>",
        "id": 177087418,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1569956828
    },
    {
        "content": "<p>Or are you referring to some other PR?</p>",
        "id": 177087426,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1569956835
    },
    {
        "content": "<p>So NLL does this same optimization</p>",
        "id": 177087430,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569956837
    },
    {
        "content": "<p>basically for the same reason</p>",
        "id": 177087432,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569956841
    },
    {
        "content": "<p>this PR re-enables it (now that I think liveness takes care of that)</p>",
        "id": 177087444,
        "sender_full_name": "lqd",
        "timestamp": 1569956846
    },
    {
        "content": "<p>Aaah ok</p>",
        "id": 177087453,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1569956850
    },
    {
        "content": "<p>Cool!</p>",
        "id": 177087460,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1569956855
    },
    {
        "content": "<p>and at the same time fixes the overflow in generating drop facts during fact generation</p>",
        "id": 177087484,
        "sender_full_name": "lqd",
        "timestamp": 1569956877
    },
    {
        "content": "<p>I sort of imaged that eventually we would want to do this analysis <em>in</em> polonius</p>",
        "id": 177087520,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569956882
    },
    {
        "content": "<p>(but I think it makes sense to do in rustc for now, and maybe forever)</p>",
        "id": 177087540,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569956894
    },
    {
        "content": "<p>(which is what you and Matthew talked about before Albin IIRC)</p>",
        "id": 177087541,
        "sender_full_name": "lqd",
        "timestamp": 1569956896
    },
    {
        "content": "<p>yeah, or maybe rustc and polonius would need to have a more interactive dialog when computing, to limit the number of facts to generate, etc</p>",
        "id": 177087577,
        "sender_full_name": "lqd",
        "timestamp": 1569956936
    },
    {
        "content": "<p>as for me, I've opened another inconsequential PR just to clean up some of the profiling data I had, and where interning in the polonius-bin was dominating the results</p>",
        "id": 177087601,
        "sender_full_name": "lqd",
        "timestamp": 1569956952
    },
    {
        "content": "<p>right, we might ship over some initial set of facts, etc</p>",
        "id": 177087605,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569956958
    },
    {
        "content": "<p>my one announcement is</p>",
        "id": 177087613,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569956963
    },
    {
        "content": "<p>I intend to start work in earnest on my RBR presentation this week</p>",
        "id": 177087621,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569956970
    },
    {
        "content": "<p>so maybe I'll try to draft some of you into suffering through a dry run or two</p>",
        "id": 177087650,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569956986
    },
    {
        "content": "<p>awesome</p>",
        "id": 177087659,
        "sender_full_name": "lqd",
        "timestamp": 1569957000
    },
    {
        "content": "<p>we'll see how much detail I want to do...</p>",
        "id": 177087723,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569957017
    },
    {
        "content": "<p>and also worked on generalizing the \"interesting\"-ness filtering by transforming the naive rules à la magic sets to be demand driven (there's some talk about that in another thread)</p>",
        "id": 177087725,
        "sender_full_name": "lqd",
        "timestamp": 1569957018
    },
    {
        "content": "<p>I've implemented these in datafrog (painful) but doesn't quite work yet (and maybe is flawed)</p>",
        "id": 177087774,
        "sender_full_name": "lqd",
        "timestamp": 1569957047
    },
    {
        "content": "<p>writing the rules being painful made me try to do a datalog to datafrog compiler as I mentioned there</p>",
        "id": 177087808,
        "sender_full_name": "lqd",
        "timestamp": 1569957069
    },
    {
        "content": "<p>so I have a tiny prototype of this, it doesn't setup data/relations/indices but can generate the (regular, not leapjoins) join/anti/map calls, etc</p>",
        "id": 177087851,
        "sender_full_name": "lqd",
        "timestamp": 1569957108
    },
    {
        "content": "<p>and obviously do the DT (Demand Transformation) from subsumtive tabling paper/thesis</p>",
        "id": 177087926,
        "sender_full_name": "lqd",
        "timestamp": 1569957143
    },
    {
        "content": "<p>(which seemed to work on the examples form the paper, but maybe not for us)</p>",
        "id": 177087949,
        "sender_full_name": "lqd",
        "timestamp": 1569957170
    },
    {
        "content": "<p>woah</p>",
        "id": 177087963,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569957181
    },
    {
        "content": "<p>...that was kind of my reaction too</p>",
        "id": 177088004,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1569957226
    },
    {
        "content": "<p>I've also worked on the OOMs just by emitting the materialized outlives on a different relation (à la <code>outlives_everywhere</code> but didn't modify the rules to take that into account)</p>",
        "id": 177088018,
        "sender_full_name": "lqd",
        "timestamp": 1569957236
    },
    {
        "content": "<p>I don't know if it's the right solution but at least I saw that a lot of those were <code>equal</code> as we assumed :)</p>",
        "id": 177088088,
        "sender_full_name": "lqd",
        "timestamp": 1569957260
    },
    {
        "content": "<p>haha &lt;3</p>",
        "id": 177088104,
        "sender_full_name": "lqd",
        "timestamp": 1569957275
    },
    {
        "content": "<blockquote>\n<p>I intend to start work in earnest on my RBR presentation this week</p>\n</blockquote>\n<p>wasn't aware there's a polonius talk... looking forward to it <a href=\"https://rust-belt-rust.com/sessions/#polonius\" target=\"_blank\" title=\"https://rust-belt-rust.com/sessions/#polonius\">https://rust-belt-rust.com/sessions/#polonius</a></p>",
        "id": 177088116,
        "sender_full_name": "Tshepang Lekhonkhobe",
        "timestamp": 1569957290
    },
    {
        "content": "<p>I'm feeling doubtful with the flow-sensitive equality, I might be missing something but it might be hard to make it perform acceptably</p>",
        "id": 177088293,
        "sender_full_name": "lqd",
        "timestamp": 1569957387
    },
    {
        "content": "<p>very exciting</p>",
        "id": 177088311,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569957408
    },
    {
        "content": "<p>as I was saying in the <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/equality.20regions/near/176521909\" title=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/equality.20regions/near/176521909\">dedicated topic</a></p>",
        "id": 177088312,
        "sender_full_name": "lqd",
        "timestamp": 1569957408
    },
    {
        "content": "<p>I plan to spent this afternoon reviewing, so I'll review <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span>'s PR, but let me know if there are other things that are more-or-less urgnt</p>",
        "id": 177088336,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569957430
    },
    {
        "content": "<blockquote>\n<p>very exciting</p>\n</blockquote>\n<p>what is exciting ?</p>",
        "id": 177088349,
        "sender_full_name": "lqd",
        "timestamp": 1569957449
    },
    {
        "content": "<p>just all your updates :)</p>",
        "id": 177088429,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569957501
    },
    {
        "content": "<p>that typing came a bit late / out-of-sync with the rest of the conversation, sorry</p>",
        "id": 177088439,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569957511
    },
    {
        "content": "<blockquote>\n<p>I'm feeling doubtful with the flow-sensitive equality, I might be missing something but it might be hard to make it perform acceptably</p>\n</blockquote>\n<p>I left some replies in the topic, but this definitely merits more work</p>",
        "id": 177088448,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569957524
    },
    {
        "content": "<p>there are a couple PRs to review in the polonius repo if you have some time (but probably more interesting ones already waiting on rustc :) like the renaming we mentioned seems done, etc</p>",
        "id": 177088456,
        "sender_full_name": "lqd",
        "timestamp": 1569957527
    },
    {
        "content": "<p>argh yeah</p>",
        "id": 177088464,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569957535
    },
    {
        "content": "<p>ok</p>",
        "id": 177088467,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569957538
    },
    {
        "content": "<p>I've got to see if I can dedicate at least an hour a week to polonius</p>",
        "id": 177088479,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569957549
    },
    {
        "content": "<p>seems like I should be able to squeeze that from <em>somewhere</em> :)</p>",
        "id": 177088485,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569957557
    },
    {
        "content": "<p>nothing major in any case</p>",
        "id": 177088488,
        "sender_full_name": "lqd",
        "timestamp": 1569957560
    },
    {
        "content": "<p>()but prob not till after RBR)</p>",
        "id": 177088496,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569957566
    },
    {
        "content": "<p>hopefully I'll have made more progress by then to have at least some things to review</p>",
        "id": 177088533,
        "sender_full_name": "lqd",
        "timestamp": 1569957594
    },
    {
        "content": "<p>there were some other datafrog-related things I mentioned in another dedicated topic, but I forgot if I haven't mentioned this last meeting tbh :)</p>",
        "id": 177088604,
        "sender_full_name": "lqd",
        "timestamp": 1569957635
    },
    {
        "content": "<p>I think you didn't, at least not the code generation stuff</p>",
        "id": 177088640,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1569957668
    },
    {
        "content": "<p>ah yes, mostly I meant the specialized relations we could do for our use-cases</p>",
        "id": 177088666,
        "sender_full_name": "lqd",
        "timestamp": 1569957698
    },
    {
        "content": "<p>eg bitsets/bloom filters for the <code>killed</code> relations etc</p>",
        "id": 177088697,
        "sender_full_name": "lqd",
        "timestamp": 1569957721
    },
    {
        "content": "<p>Ah, I don't recall you mentioning them</p>",
        "id": 177088753,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1569957737
    },
    {
        "content": "<p>But I might have just forgotten :)</p>",
        "id": 177088763,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1569957746
    },
    {
        "content": "<p>if anyone feels adventurous, they were <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/notes.20on.20datafrog\" title=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/notes.20on.20datafrog\">here</a></p>",
        "id": 177088791,
        "sender_full_name": "lqd",
        "timestamp": 1569957769
    },
    {
        "content": "<p>and I think that's pretty much it :)</p>",
        "id": 177088816,
        "sender_full_name": "lqd",
        "timestamp": 1569957784
    },
    {
        "content": "<p>/me has been saving those for when he has a bit of time to read :)</p>",
        "id": 177088818,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569957789
    },
    {
        "content": "<p>I guess when I finally start working on initialisation, I should start after the great renaming?</p>",
        "id": 177088828,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1569957798
    },
    {
        "content": "<p>I.e. merging the pull requests on my fork and going from there</p>",
        "id": 177088846,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1569957820
    },
    {
        "content": "<p>this week I plan on finishing this tiny compiler so that writing rules is a bit easier, hopefully looking into demand-transformed rules and why they don't always work (and if that's a flaw in the approach or my derivation)</p>",
        "id": 177088933,
        "sender_full_name": "lqd",
        "timestamp": 1569957862
    },
    {
        "content": "<p>yeah I think so Albin, it's \"just\" needs reviewing/discussing otherwise</p>",
        "id": 177088968,
        "sender_full_name": "lqd",
        "timestamp": 1569957893
    },
    {
        "content": "<p>Ok, so with any luck I will find some time to work on initialisation</p>",
        "id": 177089005,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1569957922
    },
    {
        "content": "<p>but it might create annoyances otherwise; at least it's not blocking on the \"what to do\" part, more so the specifics of the code could have conflicts</p>",
        "id": 177089038,
        "sender_full_name": "lqd",
        "timestamp": 1569957947
    },
    {
        "content": "<blockquote>\n<p>this week I plan on finishing this tiny compiler so that writing rules is a bit easier, hopefully looking into demand-transformed rules and why they don't always work (and if that's a flaw in the approach or my derivation)</p>\n</blockquote>\n<p>where is this compiler living?</p>",
        "id": 177089135,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569958007
    },
    {
        "content": "<p>and how do you invoke it?</p>",
        "id": 177089137,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569958010
    },
    {
        "content": "<p>I'd also like to see if the non-OOMy facts could easily map to the <code>equal</code> variant</p>",
        "id": 177089162,
        "sender_full_name": "lqd",
        "timestamp": 1569958029
    },
    {
        "content": "<p>right now it's a just a function in my polonius-bin repo</p>",
        "id": 177089203,
        "sender_full_name": "lqd",
        "timestamp": 1569958067
    },
    {
        "content": "<p>which is being invoked with a string of the rules, and it prints out the analysis and some rust code on stdout :p</p>",
        "id": 177089270,
        "sender_full_name": "lqd",
        "timestamp": 1569958092
    },
    {
        "content": "<p>a bit <em>artisanal</em></p>",
        "id": 177089328,
        "sender_full_name": "lqd",
        "timestamp": 1569958139
    },
    {
        "content": "<p>ah ok :)</p>",
        "id": 177089338,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569958145
    },
    {
        "content": "<p>might eventually make a nice addition to datafrog, as a procedural macro or something</p>",
        "id": 177089348,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569958152
    },
    {
        "content": "<p>yeah</p>",
        "id": 177089356,
        "sender_full_name": "lqd",
        "timestamp": 1569958159
    },
    {
        "content": "<p>even though as I mentioned before maybe a proc macro would hide the real code too much</p>",
        "id": 177089371,
        "sender_full_name": "lqd",
        "timestamp": 1569958172
    },
    {
        "content": "<p>seeing how often we try to optimize said code, removing indices, etc</p>",
        "id": 177089388,
        "sender_full_name": "lqd",
        "timestamp": 1569958185
    },
    {
        "content": "<p>maybe if I could spit a super query plan or something, but that seems unlikely</p>",
        "id": 177089491,
        "sender_full_name": "lqd",
        "timestamp": 1569958221
    },
    {
        "content": "<p>as it's suuuuuuuper hard and long to do :)</p>",
        "id": 177089524,
        "sender_full_name": "lqd",
        "timestamp": 1569958249
    },
    {
        "content": "<p>it shouldn't be too hard to get into a PR in the next couple weeks I think</p>",
        "id": 177089579,
        "sender_full_name": "lqd",
        "timestamp": 1569958292
    },
    {
        "content": "<p>(at least it could help a bit with prototyping rules, etc, more so than generating a perfectly formed computation one need not touch anymore)</p>",
        "id": 177089670,
        "sender_full_name": "lqd",
        "timestamp": 1569958352
    },
    {
        "content": "<p>if anyone has something else to add we're just on the 30mins mark :)</p>",
        "id": 177089702,
        "sender_full_name": "lqd",
        "timestamp": 1569958381
    },
    {
        "content": "<p>thanks <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span></p>",
        "id": 177089729,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569958398
    },
    {
        "content": "<blockquote>\n<p>even though as I mentioned before maybe a proc macro would hide the real code too much</p>\n</blockquote>\n<p>yeah this is why I've figured we'd hold off on those until now, but maybe we can get it smart enough</p>",
        "id": 177089748,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569958414
    },
    {
        "content": "<p>yeah</p>",
        "id": 177089771,
        "sender_full_name": "lqd",
        "timestamp": 1569958438
    },
    {
        "content": "<p>ah but thank <em>you</em> all for your time :) <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 177089819,
        "sender_full_name": "lqd",
        "timestamp": 1569958448
    }
]