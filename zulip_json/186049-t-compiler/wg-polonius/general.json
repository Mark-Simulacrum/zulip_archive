[
    {
        "content": "<blockquote>\n<p>I'll speak for myself but I describe Polonius as NLL 2.0</p>\n</blockquote>\n<p>Clearly that should be denoted as <code>NLL(2)</code></p>",
        "id": 160511637,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1552333672
    },
    {
        "content": "<p>The Zulip documentation <a href=\"help/format-your-message-using-markdown#mentions\" target=\"_blank\" title=\"help/format-your-message-using-markdown#mentions\">uses \"Polonius\" as an example username</a>. What are the odds?</p>",
        "id": 161581475,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1553437338
    },
    {
        "content": "<p>I have noticed that I cannot compile the rand crate (which is a very common dependency)  with Polonius enabled in the Rust nightly (<code>-Zpolonius -Zborrowck=mir -Ztwo-phase-borrows</code>, though the same happens without <code>-Zpolonius</code>). I get this error:</p>\n<div class=\"codehilite\"><pre><span></span>/Users/albin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.4.6/src/read.rs:73:24: error[E0499]: cannot borrow `_` as mutable more than once at a time\n/Users/albin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.4.6/src/read.rs:73:29: error[E0506]: cannot assign to `_` because it is borrowed\n/Users/albin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.4.6/src/read.rs:73:29: error[E0499]: cannot borrow `_` as mutable more than once at a time\n/Users/albin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.4.6/src/read.rs:73:29: error[E0506]: cannot assign to `_` because it is borrowed\nerror: aborting due to 4 previous errors\nerror: Could not compile `rand`.\nwarning: build failed, waiting for other jobs to finish...\nerror: build failed\n</pre></div>\n\n\n<p>Why is this and should I be using a different set of parameters?</p>",
        "id": 162794667,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1554707483
    },
    {
        "content": "<p>Also, where <em>is</em> everybody? I haven't heard anything from anyone in weeks now?</p>",
        "id": 162795867,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1554709088
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> , some people, like <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> and <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> have been in Rustconf Latam last week.</p>",
        "id": 162799618,
        "sender_full_name": "pachi",
        "timestamp": 1554713405
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125416\">@pachi</span> I see, and they stayed for two weeks? Makes sense</p>",
        "id": 162799634,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1554713434
    },
    {
        "content": "<p>Probably they were preparing or organising the conf</p>",
        "id": 162799689,
        "sender_full_name": "pachi",
        "timestamp": 1554713506
    },
    {
        "content": "<p>the conference was in Montevideo which is where I live, so I didn't move</p>",
        "id": 162807130,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554721605
    },
    {
        "content": "<p>had a lot of work :)</p>",
        "id": 162807132,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554721609
    },
    {
        "content": "<blockquote>\n<p>I have noticed that I cannot compile the rand crate (which is a very common dependency)  with Polonius enabled in the Rust nightly (<code>-Zpolonius -Zborrowck=mir -Ztwo-phase-borrows</code>, though the same happens without <code>-Zpolonius</code>). I get this error:</p>\n<p>/Users/albin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.4.6/src/read.rs:73:24: error[E0499]: cannot borrow <code>_</code> as mutable more than once at a time<br>\n/Users/albin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.4.6/src/read.rs:73:29: error[E0506]: cannot assign to <code>_</code> because it is borrowed<br>\n/Users/albin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.4.6/src/read.rs:73:29: error[E0499]: cannot borrow <code>_</code> as mutable more than once at a time<br>\n/Users/albin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.4.6/src/read.rs:73:29: error[E0506]: cannot assign to <code>_</code> because it is borrowed<br>\nerror: aborting due to 4 previous errors<br>\nerror: Could not compile <code>rand</code>.<br>\nwarning: build failed, waiting for other jobs to finish...<br>\nerror: build failed</p>\n<p>Why is this and should I be using a different set of parameters?</p>\n</blockquote>\n<p>if you compile that just with nll on I guess that works, right?</p>",
        "id": 162807263,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554721744
    },
    {
        "content": "<p>oh, just noticed that you said that it doesn't work without <code>-Zpolonius</code>, if you do <code>-Zborrowck=mir -Ztwo-phase-borrows</code> you're running in pure nll mode</p>",
        "id": 162807494,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554721962
    },
    {
        "content": "<p>have you checked rand code?</p>",
        "id": 162807511,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554721985
    },
    {
        "content": "<blockquote>\n<p>have you checked rand code?</p>\n</blockquote>\n<p>no, but I did compile it with just NLL (that is, without the Polonius command switch; it works neither with nor without). I figured that I maybe was doing the wrong thing.</p>",
        "id": 162809615,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1554724312
    },
    {
        "content": "<p>It seems those are from a quite old version though, so maybe that's the reason</p>",
        "id": 162809875,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1554724548
    },
    {
        "content": "<p>Yes, because it seems the master branch compiles, I think</p>",
        "id": 162809948,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1554724605
    },
    {
        "content": "<p>Or so my preliminary tests say</p>",
        "id": 162809952,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1554724617
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>have you checked rand code?</p>\n</blockquote>\n<p>no, but I did compile it with just NLL (that is, without the Polonius command switch; it works neither with nor without). I figured that I maybe was doing the wrong thing.</p>\n</blockquote>\n<p>I'm not sure what does that means exactly</p>",
        "id": 162819518,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554732155
    },
    {
        "content": "<p>it doesn't work in Polonius</p>",
        "id": 162819528,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554732164
    },
    {
        "content": "<p>it works using migrate mode</p>",
        "id": 162819534,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554732171
    },
    {
        "content": "<p>and it doesn't work in nll only mode</p>",
        "id": 162819544,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554732179
    },
    {
        "content": "<p>?</p>",
        "id": 162819545,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554732179
    },
    {
        "content": "<p>that's what you meant?</p>",
        "id": 162819550,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554732184
    },
    {
        "content": "<p>remember that in migrate mode if nll fails falls back to ast mode</p>",
        "id": 162819671,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554732261
    },
    {
        "content": "<p>it may be happening something like that</p>",
        "id": 162819680,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554732269
    },
    {
        "content": "<blockquote>\n<p>it works using migrate mode</p>\n</blockquote>\n<p>What is migrate mode? No options at all? In that case, yes, I presume it does, or nobody would depend on those crates</p>",
        "id": 162838324,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1554745000
    },
    {
        "content": "<p>But this is surprising to me, as I thought NLL was supposed to only allow more types of code by expanding the reasoning, so everything that compiles without NLL should compile with it, right?</p>",
        "id": 162838419,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1554745055
    },
    {
        "content": "<blockquote>\n<p>But this is surprising to me, as I thought NLL was supposed to only allow more types of code by expanding the reasoning, so everything that compiles without NLL should compile with it, right?</p>\n</blockquote>\n<p>As far as I know, it can happen that the code used to compile because the old AST borrow checker has a bug that was fixed in NLL. In this case, the compiler should report a warning instead of a hard error.</p>",
        "id": 162912378,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1554818233
    },
    {
        "content": "<p>That was my impression as well, but these are absolutely hard errors. In that case, I think it's worth a bit of detective work to figure out what is going on</p>",
        "id": 162912470,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1554818300
    },
    {
        "content": "<p>Wait, do you know whether using <code>-Zborrowck=mir</code> isn't basically telling rustc to use the MIR borrow checker <strong>without</strong> migrate mode?</p>",
        "id": 162912805,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1554818509
    },
    {
        "content": "<p>It seems that the default for <code>-Zborrowck</code> now is <code>migrate</code>: <a href=\"https://github.com/rust-lang/rust/blob/a5dfdc589a1b44f01cb640cd0244372dcbbd6f37/src/tools/compiletest/src/runtest.rs#L1845\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/a5dfdc589a1b44f01cb640cd0244372dcbbd6f37/src/tools/compiletest/src/runtest.rs#L1845\">https://github.com/rust-lang/rust/blob/a5dfdc589a1b44f01cb640cd0244372dcbbd6f37/src/tools/compiletest/src/runtest.rs#L1845</a>.</p>",
        "id": 162913078,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1554818672
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> Do you get a warning when compiling the <code>rand</code> crate with no flags?</p>",
        "id": 162913134,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1554818726
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116109\">@Vytautas Astrauskas</span>  I haven't tried it, mainly because it's an old version being pulled in as a dependency of another crate, but I presume it must have at some point compiled with something</p>",
        "id": 162913267,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1554818806
    },
    {
        "content": "<p>I wanted to hear if this was expected before investigating further as it's incredibly tangential to what I am actually doing, which is trying out Polonius on some crates</p>",
        "id": 162913288,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1554818824
    },
    {
        "content": "<p>I see. Makes sense.</p>",
        "id": 162920014,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1554822845
    },
    {
        "content": "<p>is there any outstanding work that I can contribute to? i've been trying to re-familiarize myself with polonius</p>",
        "id": 163033367,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1554921815
    },
    {
        "content": "<p>interesting finding about <code>rand-0.4.6</code> as for me it doesn't build with <code>-Zpolonius</code> (regardless of the variant, and without testing the Hybrid one) on the latest nightly and with these same errors -- but does build with AST and MIR borrowck. AFAICT the rand 0.4.* versions are \"old\" (0.4.6 is recent but the first 0.4 is from 2017), and the latest, 0.6.5, seems to build both with and without <code>-Zpolonius</code>, I think because the code has been since changed. I'll look at extracting it, but it might be some of the more advanced cases where the behaviour differs in rustc between NLL and polonius (I think because not everything is \"hooked up\", Matthew would know more since they were the ones who managed to re-enable polonius and I forgot which cases were handled and which weren't -- I could be misremembering though)</p>",
        "id": 163179618,
        "sender_full_name": "lqd",
        "timestamp": 1555067371
    },
    {
        "content": "<p>the <code>rand 0.4.6</code> NLL / polonius difference: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=7369c3d90d9b0a2ada3a290bf968e876\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=7369c3d90d9b0a2ada3a290bf968e876\">extraction</a>, <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=f60c7f2cba8a0a144d18bfb79a1b2d38\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=f60c7f2cba8a0a144d18bfb79a1b2d38\">reduction</a></p>",
        "id": 163195488,
        "sender_full_name": "lqd",
        "timestamp": 1555079575
    },
    {
        "content": "<p>I've finally moved the parser to dev dependencies so that clean builds are way shorter without having to build lalrpop et al :) (in <a href=\"https://github.com/rust-lang-nursery/polonius/issues/106\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/issues/106\">polonius#106</a>)</p>",
        "id": 163751255,
        "sender_full_name": "lqd",
        "timestamp": 1555696174
    },
    {
        "content": "<p>Dag nabbit, one of these days I will make LALRPOP build faster.</p>",
        "id": 163759971,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555703114
    },
    {
        "content": "<p>But in the meantime :P maybe we should switch to that PEG parser crate I see floating about?</p>",
        "id": 163759978,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555703126
    },
    {
        "content": "<p>This one <a href=\"https://github.com/pest-parser/pest\" target=\"_blank\" title=\"https://github.com/pest-parser/pest\">https://github.com/pest-parser/pest</a></p>",
        "id": 163759985,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555703146
    },
    {
        "content": "<p>Looks pretty nifty and -- for this purpose -- PEG seems just fine.</p>",
        "id": 163760056,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555703192
    },
    {
        "content": "<blockquote>\n<p>I've finally moved the parser to dev dependencies so that clean builds are way shorter without having to build lalrpop et al :) (in <a href=\"https://github.com/rust-lang-nursery/polonius/issues/106\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/issues/106\">polonius#106</a>)</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> merged but see above :)</p>",
        "id": 163760119,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555703269
    },
    {
        "content": "<p>ah yes, interesting thought :) a PEG crate for <code>nom</code> came out recently as well (unsure about licensing though, GPL)</p>",
        "id": 163760322,
        "sender_full_name": "lqd",
        "timestamp": 1555703434
    },
    {
        "content": "<p>yeah, whichever. I have no opinion about licensing. Prob best to avoid GPL if we can</p>",
        "id": 163760689,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555703831
    },
    {
        "content": "<p>I have a general code style question. One of the things that has been making it hard for me to follow the code in rustc is the use of very large container types with generic names like \"facts\". I am therefore considering using a style where I write more verbose but also more explicit code. For example, changing the fact-extracting visitor from this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\"> </span><span class=\"n\">LivenessFactsExtractor</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">facts</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">location_table</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">visit_mir</span><span class=\"p\">(</span><span class=\"n\">mir</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>to this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">LivenessPointFactsExtractor</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">var_defined</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">facts</span><span class=\"p\">.</span><span class=\"n\">var_defined</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">var_used</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">facts</span><span class=\"p\">.</span><span class=\"n\">var_used</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">var_drop_used</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">facts</span><span class=\"p\">.</span><span class=\"n\">var_drop_used</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">location_table</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">visit_mir</span><span class=\"p\">(</span><span class=\"n\">mir</span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>",
        "id": 165145137,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557305234
    },
    {
        "content": "<p>What I like about this is that it's now explicit from the code which facts are actually populated, and from the name that it is point-associated facts. What I don't like is that it's way more verbose than before, and what I'm ambivalent about is that it's more brittle to changes in interfaces, which is sometimes a good thing and sometimes a bad thing I think</p>",
        "id": 165145220,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557305319
    },
    {
        "content": "<p>A particular bad smell is that I now have to re-declare the types of the vectors that are populated, which is good (I see the types involved right there in the file I am working on) and bad (if they change I have to change them everywhere)</p>",
        "id": 165145263,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557305398
    },
    {
        "content": "<p>Yeah, I can imagine that it's kind of non-obvious which fact sets are populated where. I don't have a strong opinion. I'd say try it for a while and see how it feels.</p>",
        "id": 165159252,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557319675
    },
    {
        "content": "<p>Regarding the types, you could also consider a type alias</p>",
        "id": 165159304,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557319705
    },
    {
        "content": "<p>But overall I don't think they're repeated <em>that</em> many times, and obviously the compiler will catch any place that you overlook, so I wouldn't worry abut it myself.</p>",
        "id": 165159321,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557319734
    },
    {
        "content": "<p>I finally posted the <a href=\"https://github.com/rust-lang/compiler-team/pull/91\" target=\"_blank\" title=\"https://github.com/rust-lang/compiler-team/pull/91\">notes</a> from the previous meetings, sorry it took this long</p>",
        "id": 165610268,
        "sender_full_name": "lqd",
        "timestamp": 1557829453
    },
    {
        "content": "<p>I won't be able to attend the meeting tonight as of some work event...sorry...but, to update you: currently working through the profiling stuff and soon able to start emitting data from the compiler - fingers crossed!</p>",
        "id": 165629006,
        "sender_full_name": "lokalmatador",
        "timestamp": 1557845551
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"218716\">@lokalmatador</span> thanks for the heads up :)</p>",
        "id": 165632957,
        "sender_full_name": "lqd",
        "timestamp": 1557848422
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"218716\">@lokalmatador</span> awesome!</p>",
        "id": 165643550,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557855456
    },
    {
        "content": "<p>I actually don't know if I can make it to the meeting tonight either</p>",
        "id": 165643570,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557855468
    },
    {
        "content": "<p>(as mentioned a couple weeks ago, I'll be traveling next week <span aria-label=\"beach\" class=\"emoji emoji-1f3d6\" role=\"img\" title=\"beach\">:beach:</span>)</p>",
        "id": 166435916,
        "sender_full_name": "lqd",
        "timestamp": 1558689578
    },
    {
        "content": "<p>Apparently, this is a control flow graph: <a href=\"/user_uploads/4715/_S55vq1RtbrnMbG7nePc5u5v/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/_S55vq1RtbrnMbG7nePc5u5v/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/4715/_S55vq1RtbrnMbG7nePc5u5v/pasted_image.png\"></a></div>",
        "id": 166700775,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1559037798
    },
    {
        "content": "<p>(I'm extending Polonius to generate graphviz files with liveness data for easier visualisation and debugging)</p>",
        "id": 166700797,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1559037829
    },
    {
        "content": "<p>I'm hoping to generate, as my subject reviewer named them, \"fat rainbows\" of liveness trails across these for my thesis</p>",
        "id": 166700875,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1559037878
    },
    {
        "content": "<blockquote>\n<p>Apparently, this is a control flow graph: <a href=\"/user_uploads/4715/_S55vq1RtbrnMbG7nePc5u5v/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/_S55vq1RtbrnMbG7nePc5u5v/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/4715/_S55vq1RtbrnMbG7nePc5u5v/pasted_image.png\"></a></div></blockquote>\n<p>strangely beautiful</p>",
        "id": 166718510,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559051264
    },
    {
        "content": "<p>sorry I might not be able to make it to tomorrow's meeting; I think Niko might be unavailable because of Mozilla All Hands — if that's the case, maybe we can have async updates this week ? (I myself have continued on the the test suite, the easy cases are pretty much done — but will need a 2nd set of eyes — and the more problematic cases seem very much like bugs; I'd like to investigate more, esp around facts which might be missing) (I still haven't typed up notes for last week's meeting sorrryyyyyyyyy my plan is to do so on thursday)</p>",
        "id": 168338828,
        "sender_full_name": "lqd",
        "timestamp": 1560798554
    },
    {
        "content": "<p>I am indeed unavailable this week</p>",
        "id": 168345029,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560803690
    },
    {
        "content": "<p>I'll report in tomorrow, but I have progress (or, well, more failing test cases than before, but still). In case I manage to work everything out before the next meeting and everyone's gone, I can always work on teaching myself enough about type systems to understand the Oxide paper</p>",
        "id": 168345916,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1560804392
    },
    {
        "content": "<p>Ok, update: I have spent some time working on generating <code>var_initialized_on_exit</code> facts in rustc. It's almost working, and results are promising, but I have a problem with the start of unwind blocks not having their variables initialised. I'm doing this in <code>trace.rs</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">add_polonius_var_initialized_on_exit_for</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">local</span>: <span class=\"nc\">Local</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">move_path</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">cx</span><span class=\"p\">.</span><span class=\"n\">move_data</span><span class=\"p\">.</span><span class=\"n\">rev_lookup</span><span class=\"p\">.</span><span class=\"n\">find_local</span><span class=\"p\">(</span><span class=\"n\">local</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">facts</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">cx</span><span class=\"p\">.</span><span class=\"n\">typeck</span><span class=\"p\">.</span><span class=\"n\">borrowck_context</span><span class=\"p\">.</span><span class=\"n\">all_facts</span><span class=\"p\">.</span><span class=\"n\">as_mut</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">block</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">cx</span><span class=\"p\">.</span><span class=\"n\">body</span><span class=\"p\">.</span><span class=\"n\">basic_blocks</span><span class=\"p\">().</span><span class=\"n\">indices</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">debug</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;polonius: generating initialization facts for {:?} in {:?}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">local</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">block</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"c1\">// iterate through the block, applying the effects of each statement</span>\n<span class=\"w\">        </span><span class=\"c1\">// up to and including location, and populate `var_initialized_on_exit`</span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">cx</span><span class=\"p\">.</span><span class=\"n\">flow_inits</span><span class=\"p\">.</span><span class=\"n\">reset_to_entry_of</span><span class=\"p\">(</span><span class=\"n\">block</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">statement_index</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">..</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">cx</span><span class=\"p\">.</span><span class=\"n\">body</span><span class=\"p\">[</span><span class=\"n\">block</span><span class=\"p\">].</span><span class=\"n\">statements</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">current_location</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Location</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">block</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">statement_index</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">cx</span><span class=\"p\">.</span><span class=\"n\">flow_inits</span><span class=\"p\">.</span><span class=\"n\">reconstruct_statement_effect</span><span class=\"p\">(</span><span class=\"n\">current_location</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"c1\">// statement has not yet taken effect:</span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">cx</span><span class=\"p\">.</span><span class=\"n\">flow_inits</span><span class=\"p\">.</span><span class=\"n\">has_any_child_of</span><span class=\"p\">(</span><span class=\"n\">move_path</span><span class=\"p\">).</span><span class=\"n\">is_some</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">facts</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">.</span><span class=\"n\">var_initialized_on_exit</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">((</span><span class=\"n\">local</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">cx</span><span class=\"p\">.</span><span class=\"n\">location_table</span><span class=\"p\">.</span><span class=\"n\">start_index</span><span class=\"p\">(</span><span class=\"n\">current_location</span><span class=\"p\">)));</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"c1\">// statement has now taken effect</span>\n<span class=\"w\">            </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">cx</span><span class=\"p\">.</span><span class=\"n\">flow_inits</span><span class=\"p\">.</span><span class=\"n\">apply_local_effect</span><span class=\"p\">(</span><span class=\"n\">current_location</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">cx</span><span class=\"p\">.</span><span class=\"n\">flow_inits</span><span class=\"p\">.</span><span class=\"n\">has_any_child_of</span><span class=\"p\">(</span><span class=\"n\">move_path</span><span class=\"p\">).</span><span class=\"n\">is_some</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">facts</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">.</span><span class=\"n\">var_initialized_on_exit</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">((</span><span class=\"n\">local</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">cx</span><span class=\"p\">.</span><span class=\"n\">location_table</span><span class=\"p\">.</span><span class=\"n\">mid_index</span><span class=\"p\">(</span><span class=\"n\">current_location</span><span class=\"p\">)));</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"c1\">// apply the effects of the terminator and push it if needed</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">terminator_location</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">cx</span><span class=\"p\">.</span><span class=\"n\">body</span><span class=\"p\">.</span><span class=\"n\">terminator_loc</span><span class=\"p\">(</span><span class=\"n\">block</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">cx</span><span class=\"p\">.</span><span class=\"n\">flow_inits</span><span class=\"p\">.</span><span class=\"n\">reset_to_exit_of</span><span class=\"p\">(</span><span class=\"n\">block</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">cx</span><span class=\"p\">.</span><span class=\"n\">flow_inits</span><span class=\"p\">.</span><span class=\"n\">has_any_child_of</span><span class=\"p\">(</span><span class=\"n\">move_path</span><span class=\"p\">).</span><span class=\"n\">is_some</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">facts</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">var_initialized_on_exit</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">((</span><span class=\"n\">local</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">cx</span><span class=\"p\">.</span><span class=\"n\">location_table</span><span class=\"p\">.</span><span class=\"n\">mid_index</span><span class=\"p\">(</span><span class=\"n\">terminator_location</span><span class=\"p\">)));</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>In other words, I am going through the statements of each block and for each statement emit facts for the start and mid-point of each Location before and after the statement has taken effect respectively. I suspect I should do something before the first statement of each block to get the flow analysis to \"catch up\". Any suggestions?</p>",
        "id": 168415534,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1560873817
    },
    {
        "content": "<p>(I had to emit facts for each Location, as the propagation of drop-liveness would stop as soon as it reached a Location where the facts were not emitted, due to how the rules are currently written)</p>",
        "id": 168415702,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1560873903
    },
    {
        "content": "<p>(for <code>return</code> blocks everything works fine)</p>",
        "id": 168415790,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1560873957
    },
    {
        "content": "<p>...I think</p>",
        "id": 168415822,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1560873963
    },
    {
        "content": "<p>Yes, I can confirm: if I manually edit the input facts so that the first Location has the same initialization for Start as for Mid, it produces the same <code>region_live_at</code>as rustc does for one of the problematic test cases</p>",
        "id": 168418264,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1560875796
    },
    {
        "content": "<p>hi, I unfortunately won't be able to make it to the meeting tonight. Nevertheless, short update: working on perf stuff, should have some results next week.</p>",
        "id": 168423962,
        "sender_full_name": "lokalmatador",
        "timestamp": 1560878440
    },
    {
        "content": "<p>Also, ping <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  for <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/general/near/168415534\" title=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/general/near/168415534\">https://rust-lang.zulipchat.com/#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/general/near/168415534</a> whenever you get back! I still haven't figured this out.</p>",
        "id": 168525314,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1560964189
    },
    {
        "content": "<p>I will also be away next week from Wednesday, as my girlfriend finally comes back from Australia on Wednesday, and I have  a family vacation Thursday--Sunday.</p>",
        "id": 168525503,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1560964290
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> sorry, was very busy last week, let me check that out now</p>",
        "id": 168873107,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561400756
    },
    {
        "content": "<p>I'm wondering if you are having some problems due to the <code>before_statement_effect</code>, which I kind of forgot about</p>",
        "id": 168873406,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561400905
    },
    {
        "content": "<blockquote>\n<p>Yes, I can confirm: if I manually edit the input facts so that the first Location has the same initialization for Start as for Mid, it produces the same <code>region_live_at</code>as rustc does for one of the problematic test cases</p>\n</blockquote>\n<p>can you say a bit more about this?</p>",
        "id": 168873469,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561400970
    },
    {
        "content": "<p>i.e., what is the value <em>before</em> you changed it, and what is the value <em>afterwards</em>?</p>",
        "id": 168873470,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561400976
    },
    {
        "content": "<p>actually the <code>before_statement_effect</code> is only relevant to the \"borrows\" set, which isn't the dataflow we're walking over here, so that's probably irrelevant</p>",
        "id": 168873563,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561401020
    },
    {
        "content": "<blockquote>\n<p>i.e., what is the value <em>before</em> you changed it, and what is the value <em>afterwards</em>?</p>\n</blockquote>\n<p>another option <span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> would be to point me at your branch + the test in question</p>",
        "id": 168874871,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561401964
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Welcome back! Ok, what seems to happen is that with the new fact-generation code and the new <code>var_drop_live</code> code, the maybe-initialized-drop-with-uninitialized-fragments test case _almost_ works. However, in the specific case of an unwind block when some variables are initialised in the parent block, they seem to be not initialised (that is, missing) in the generated facts for the start of the first line of the unwind block. They \"become\" initialised again at mid-point, but by then the liveness propagation may have stopped and it's too late.</p>\n<p>What I specifically did was adding the following facts to <code>var_initialized_on_exit</code>:</p>\n<div class=\"codehilite\"><pre><span></span>- &quot;_6&quot;  &quot;Start of bb9[0]&quot;\n- &quot;_6&quot;  &quot;Start(bb3[0])&quot;\n- &quot;_6&quot;  &quot;Start(bb11[3])&quot;\n- &quot;_6&quot;  &quot;Start(bb13[0])&quot;\n- &quot;_6&quot;  &quot;Start(bb14[3])&quot;\n- &quot;_6&quot;  &quot;Start(bb12[0])&quot;\n- &quot;_2&quot;  &quot;Start(bb3[0])&quot;\n</pre></div>",
        "id": 168878420,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1561404910
    },
    {
        "content": "<p>This is all very weird, because it works for the return successor!</p>",
        "id": 168878459,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1561404942
    },
    {
        "content": "<p>So I suspect I am somehow missing some detail of how the reset of <code>flow_init</code> works. Maybe I need to shake something/pull some lever for something to reset-but-not-that-much</p>",
        "id": 168878537,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1561404991
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> yeah that code is just a <em>bit</em> subtle...</p>",
        "id": 168879188,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561405549
    },
    {
        "content": "<p>let me check out the dumped mir I guess</p>",
        "id": 168879195,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561405557
    },
    {
        "content": "<p>Thanks :)</p>",
        "id": 168879274,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1561405610
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> do you know if all of those are needed?</p>",
        "id": 168880215,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561406344
    },
    {
        "content": "<p>e.g., the first one is a bit strange</p>",
        "id": 168880222,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561406348
    },
    {
        "content": "<p>since (from what I can tell) <code>_6</code> is moved in <code>bb7</code> which dominates <code>bb9</code> (I think)</p>",
        "id": 168880239,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561406362
    },
    {
        "content": "<p>otoh <code>bb3</code> .. seems correct</p>",
        "id": 168880298,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561406399
    },
    {
        "content": "<p>hmm but bb9 has a drop of <code>_6</code></p>",
        "id": 168880436,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561406472
    },
    {
        "content": "<p>I guess I should view the dot</p>",
        "id": 168880441,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561406475
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/P5Yw3-GTJT2D7-DnyiTVqe_8/maybe-initialized-drop-with-uninitialized-fragments-facts.pdf\" target=\"_blank\" title=\"maybe-initialized-drop-with-uninitialized-fragments-facts.pdf\">maybe-initialized-drop-with-uninitialized-fragments-facts.pdf</a> <a href=\"/user_uploads/4715/K_LI-ym1SfO6afjWR4oQGYwU/maybe-initialized-drop-with-uninitialized-fragments-liveness.pdf\" target=\"_blank\" title=\"maybe-initialized-drop-with-uninitialized-fragments-liveness.pdf\">maybe-initialized-drop-with-uninitialized-fragments-liveness.pdf</a></p>",
        "id": 168880541,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1561406524
    },
    {
        "content": "<blockquote>\n<p>since (from what I can tell) <code>_6</code> is moved in <code>bb7</code> which dominates <code>bb9</code> (I think)</p>\n</blockquote>\n<p>ok that's mistaken, it's a move of <code>_6.1</code></p>",
        "id": 168880553,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561406531
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> what are you using <code>var_initialized_on_exit</code> for?</p>",
        "id": 168880676,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561406640
    },
    {
        "content": "<p>that's a .. dangerous concept</p>",
        "id": 168880725,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561406648
    },
    {
        "content": "<p>er wait</p>",
        "id": 168880748,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561406668
    },
    {
        "content": "<p>I meant specifically around the terminator</p>",
        "id": 168880751,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561406672
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I am using it for <code>var_drop_live</code>, as you proposed</p>",
        "id": 168880753,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1561406673
    },
    {
        "content": "<p>yeah sorry I was confusing myself</p>",
        "id": 168880765,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561406685
    },
    {
        "content": "<p>Haha it's ok, you've been away</p>",
        "id": 168880801,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1561406718
    },
    {
        "content": "<p>That's very normal</p>",
        "id": 168880806,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1561406724
    },
    {
        "content": "<p>Anyway the code for <code>var_drop_live</code>is now:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">// var_drop_live(V, P) :-</span>\n<span class=\"w\">        </span><span class=\"c1\">//     var_drop_live(V, Q),</span>\n<span class=\"w\">        </span><span class=\"c1\">//     cfg_edge(P, Q),</span>\n<span class=\"w\">        </span><span class=\"c1\">//     !var_defined(V, P)</span>\n<span class=\"w\">        </span><span class=\"c1\">//     var_initialized_on_exit(V, P).</span>\n<span class=\"w\">        </span><span class=\"c1\">// extend p with v:s from q such that v is not in q, there is an edge from p to q</span>\n<span class=\"w\">        </span><span class=\"n\">var_drop_live_var</span><span class=\"p\">.</span><span class=\"n\">from_leapjoin</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"o\">&amp;</span><span class=\"n\">var_drop_live_var</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">var_defined_rel</span><span class=\"p\">.</span><span class=\"n\">extend_anti</span><span class=\"p\">(</span><span class=\"o\">|&amp;</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_q</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">cfg_edge_reverse_rel</span><span class=\"p\">.</span><span class=\"n\">extend_with</span><span class=\"p\">(</span><span class=\"o\">|&amp;</span><span class=\"p\">(</span><span class=\"n\">_v</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">var_initialized_on_exit_rel</span><span class=\"p\">.</span><span class=\"n\">extend_with</span><span class=\"p\">(</span><span class=\"o\">|&amp;</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_q</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"o\">|&amp;</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_q</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">p</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>",
        "id": 168880879,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1561406774
    },
    {
        "content": "<p>there is this subtle distinction</p>",
        "id": 168880926,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561406836
    },
    {
        "content": "<p>that <em>may</em> be relevant here</p>",
        "id": 168880931,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561406848
    },
    {
        "content": "<p>if you have a basic block that ends on a call like:</p>\n<div class=\"codehilite\"><pre><span></span>X = foo(...) return BB1 unwind BB2\n</pre></div>",
        "id": 168880944,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561406862
    },
    {
        "content": "<p>then <code>X</code> is initialized on entry to BB1 but not on entry to BB2</p>",
        "id": 168880951,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561406870
    },
    {
        "content": "<p>but I don't immediately see how that's relevant to the example</p>",
        "id": 168880956,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561406876
    },
    {
        "content": "<p>that said</p>",
        "id": 168881077,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561406978
    },
    {
        "content": "<p>I'm wondering if <code>var_initialized_on_exit_rel</code> is really what we want, as opposed to <code>var_initialized_on_entry</code></p>",
        "id": 168881090,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561406992
    },
    {
        "content": "<p>I'm not sure how much this matters though to your problem though</p>",
        "id": 168881261,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561407133
    },
    {
        "content": "<p>I think I should think hard about those variable names in general</p>",
        "id": 168881297,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1561407171
    },
    {
        "content": "<p>Because they are getting very inconsistent</p>",
        "id": 168881328,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1561407193
    },
    {
        "content": "<p>I think we want on <em>entry</em> -- i.e., it is live on entry to P if it is initialized on entry to P and might be dropped later</p>",
        "id": 168881468,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561407282
    },
    {
        "content": "<p>but what I'm trying to remember now is whether there is a good flag to dump the \"initialization\" data in flow-graph form</p>",
        "id": 168881492,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561407303
    },
    {
        "content": "<p>maybe <code>-Zunpretty=flowgraph=main</code></p>",
        "id": 168881505,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561407314
    },
    {
        "content": "<p>but it doesn't seem to work for things that get a compilation error</p>",
        "id": 168881518,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561407324
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> or <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> : is there a way to dump out the dataflow stats as part of a MIR dump?</p>",
        "id": 168881935,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561407640
    },
    {
        "content": "<p>I guess not</p>",
        "id": 168882060,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561407743
    },
    {
        "content": "<blockquote>\n<p>I think we want on <em>entry</em> -- i.e., it is live on entry to P if it is initialized on entry to P and might be dropped later</p>\n</blockquote>\n<p>I'm not completely sure this isn't what I am actually doing in the code above. :)</p>",
        "id": 168882370,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1561407988
    },
    {
        "content": "<p>Ok, I'm going to bed now, but I'll read up on what happened while I was away in the morning!</p>",
        "id": 168882403,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1561408010
    },
    {
        "content": "<blockquote>\n<p>I'm not completely sure this isn't what I am actually doing in the code above. :)</p>\n</blockquote>\n<p>Heh, yes. I think you're computing something in the middle..</p>",
        "id": 168883409,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561408900
    },
    {
        "content": "<p>Ah, there is this attribute, but it appears to have bitrotted:</p>\n<div class=\"codehilite\"><pre><span></span>#[rustc_mir(borrowck_graphviz_postflow=&quot;mir_dump/main.dot&quot;)]\n</pre></div>",
        "id": 168883881,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561409279
    },
    {
        "content": "<p>at least, the output I get is rejected by <code>dot</code></p>",
        "id": 168883925,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561409285
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> is this code pushed to your branch in <a href=\"https://github.com/rust-lang/rust/pull/60266\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/60266\">https://github.com/rust-lang/rust/pull/60266</a> ?</p>",
        "id": 168884719,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561409984
    },
    {
        "content": "<p>seems like no :(</p>",
        "id": 168884793,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561410019
    },
    {
        "content": "<p>The attribute you identified is indeed what I would have used</p>",
        "id": 168886445,
        "sender_full_name": "pnkfelix",
        "timestamp": 1561411496
    },
    {
        "content": "<p>It is too bad we have not been testing that dot would be able to handle the output. Or that it conforms to a way smaller subset grammar</p>",
        "id": 168886474,
        "sender_full_name": "pnkfelix",
        "timestamp": 1561411532
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"204115\">Albin Stjerna</span> is this code pushed to your branch in <a href=\"https://github.com/rust-lang/rust/pull/60266\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/60266\">https://github.com/rust-lang/rust/pull/60266</a> ?</p>\n</blockquote>\n<p>No, I wanted to avoid having 5000 commits with non-working code, but I'll push it soon!</p>",
        "id": 168913084,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1561444278
    },
    {
        "content": "<p>I really expected this to be something small of the type \"no no you dummy you have to call <code>yak_shave</code> first to make the magic florb frob the bar\"</p>",
        "id": 168913159,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1561444364
    },
    {
        "content": "<p>Err, it's 2 am where you are so maybe there's no rush</p>",
        "id": 168913184,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1561444410
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Pushed! <a href=\"https://github.com/rust-lang/rust/pull/60266/commits/aa520f76f9330aab9e0d36a7173f92acc4a5a6d6\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/60266/commits/aa520f76f9330aab9e0d36a7173f92acc4a5a6d6\">https://github.com/rust-lang/rust/pull/60266/commits/aa520f76f9330aab9e0d36a7173f92acc4a5a6d6</a></p>",
        "id": 168914931,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1561446791
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> ok let me see if I can reproduce then</p>",
        "id": 168950857,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561478371
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> looks like I need some version of polonius with <code>var_initialized_on_exit</code> in the fact set</p>",
        "id": 168965163,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561488198
    },
    {
        "content": "<p>although i'm trying to do a local build where I remove some of that stuff and just insert <code>debug!</code></p>",
        "id": 168965266,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561488257
    },
    {
        "content": "<p>Ah, you can use this branch if you want to: <a href=\"https://github.com/albins/polonius/tree/phase-1-initialization\" target=\"_blank\" title=\"https://github.com/albins/polonius/tree/phase-1-initialization\">https://github.com/albins/polonius/tree/phase-1-initialization</a></p>",
        "id": 168965291,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1561488276
    },
    {
        "content": "<p>It, err, should work</p>",
        "id": 168965298,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1561488284
    },
    {
        "content": "<p>mostly I wanted debug output anyway</p>",
        "id": 168965355,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561488313
    },
    {
        "content": "<p>it's building now</p>",
        "id": 168965362,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561488316
    },
    {
        "content": "<p>That sounds reasonable</p>",
        "id": 168965371,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1561488321
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> I've been inspecting these results</p>",
        "id": 168969741,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561491348
    },
    {
        "content": "<p>first question, you have this diff:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">           </span><span class=\"c1\">//self.cx.flow_inits.reconstruct_terminator_effect(terminator_location);</span>\n<span class=\"w\">            </span><span class=\"c1\">//self.cx.flow_inits.apply_local_effect(terminator_location);</span>\n<span class=\"w\">            </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">cx</span><span class=\"p\">.</span><span class=\"n\">flow_inits</span><span class=\"p\">.</span><span class=\"n\">reset_to_exit_of</span><span class=\"p\">(</span><span class=\"n\">block</span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>",
        "id": 168969858,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561491432
    },
    {
        "content": "<p>I assume that's just you messing around?&gt;</p>",
        "id": 168969864,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561491436
    },
    {
        "content": "<p>I think the bug is really simple</p>",
        "id": 168969883,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561491456
    },
    {
        "content": "<p>though it took me a while to see it</p>",
        "id": 168969891,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561491466
    },
    {
        "content": "<p>This is precisely what I expected!</p>",
        "id": 168969912,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1561491481
    },
    {
        "content": "<p>And yes, there was quite some messing around</p>",
        "id": 168969958,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1561491487
    },
    {
        "content": "<p>you <a href=\"https://github.com/rust-lang/rust/blob/aa520f76f9330aab9e0d36a7173f92acc4a5a6d6/src/librustc_mir/borrow_check/nll/type_check/liveness/trace.rs#L216-L220\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/aa520f76f9330aab9e0d36a7173f92acc4a5a6d6/src/librustc_mir/borrow_check/nll/type_check/liveness/trace.rs#L216-L220\">are pushing results for <code>mid_index(terminator_location)</code></a></p>",
        "id": 168969977,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561491513
    },
    {
        "content": "<p>but never any results for <code>start_index(terminator_location)</code></p>",
        "id": 168969987,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561491529
    },
    {
        "content": "<p>I think your pattern is roughly correct</p>",
        "id": 168969993,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561491537
    },
    {
        "content": "<p>also I've decided that \"on exit\" is probably indeed what we were looking for</p>",
        "id": 168970013,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561491551
    },
    {
        "content": "<p>though I imagine it's .. roughly equivalent to \"on entry\"</p>",
        "id": 168970025,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561491565
    },
    {
        "content": "<p>Aaah, and I need to do that?</p>",
        "id": 168970057,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1561491596
    },
    {
        "content": "<p>yes, all of your missing points were the <em>start</em> location of a terminator</p>",
        "id": 168970107,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561491606
    },
    {
        "content": "<p>Doesn't the first row of the loop do that?</p>",
        "id": 168970114,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1561491610
    },
    {
        "content": "<p>Hm, no because that starts at the first point I guess</p>",
        "id": 168970123,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1561491621
    },
    {
        "content": "<p>Which isn't at the terminator?</p>",
        "id": 168970129,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1561491627
    },
    {
        "content": "<p>it does the start/mid points of <em>statements</em></p>",
        "id": 168970130,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561491628
    },
    {
        "content": "<p>Ah, and the terminator isn't...ok I get it</p>",
        "id": 168970140,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1561491640
    },
    {
        "content": "<p>anyway I think that's what's missing</p>",
        "id": 168970182,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561491691
    },
    {
        "content": "<p>re: on exit vs on entry, well, we have an edge <code>P -&gt; Q</code></p>",
        "id": 168970198,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561491711
    },
    {
        "content": "<p>Hmm, ok, wait no, the <code>reset_to_exit_of</code> wasn't spurious</p>",
        "id": 168970246,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1561491726
    },
    {
        "content": "<p>we can't say \"live on entry to Q\" because that's too imprecise -- Q may have multiple predecessors</p>",
        "id": 168970251,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561491730
    },
    {
        "content": "<p>I thought that was the right way to \"fast-forward\" the flow analysis to the state at the terminator</p>",
        "id": 168970274,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1561491755
    },
    {
        "content": "<blockquote>\n<p>Hmm, ok, wait no, the <code>reset_to_exit_of</code> wasn't spurious</p>\n</blockquote>\n<p>I <em>think</em> it's equivalent but I'm not <em>100%</em> sure</p>",
        "id": 168970285,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561491767
    },
    {
        "content": "<p>it would indeed fast-forward if you hadn't walked the statements already</p>",
        "id": 168970290,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561491773
    },
    {
        "content": "<p>but I also think it's fine</p>",
        "id": 168970298,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561491780
    },
    {
        "content": "<p>Which I should have done</p>",
        "id": 168970303,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1561491782
    },
    {
        "content": "<p>So it should be a no-op</p>",
        "id": 168970310,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1561491787
    },
    {
        "content": "<p>the key thing is to do this</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">            </span><span class=\"c1\">// apply the effects of the terminator and push it if needed</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">terminator_location</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">cx</span><span class=\"p\">.</span><span class=\"n\">body</span><span class=\"p\">.</span><span class=\"n\">terminator_loc</span><span class=\"p\">(</span><span class=\"n\">block</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">cx</span><span class=\"p\">.</span><span class=\"n\">flow_inits</span><span class=\"p\">.</span><span class=\"n\">has_any_child_of</span><span class=\"p\">(</span><span class=\"n\">move_path</span><span class=\"p\">).</span><span class=\"n\">is_some</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">debug</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"s\">&quot;var_initialized_on_exit({:?}, {:?})&quot;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">local</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">cx</span><span class=\"p\">.</span><span class=\"n\">location_table</span><span class=\"p\">.</span><span class=\"n\">start_index</span><span class=\"p\">(</span><span class=\"n\">terminator_location</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"c1\">//self.cx.flow_inits.reconstruct_terminator_effect(terminator_location);</span>\n<span class=\"w\">            </span><span class=\"c1\">//self.cx.flow_inits.apply_local_effect(terminator_location);</span>\n<span class=\"w\">            </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">cx</span><span class=\"p\">.</span><span class=\"n\">flow_inits</span><span class=\"p\">.</span><span class=\"n\">reset_to_exit_of</span><span class=\"p\">(</span><span class=\"n\">block</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">cx</span><span class=\"p\">.</span><span class=\"n\">flow_inits</span><span class=\"p\">.</span><span class=\"n\">has_any_child_of</span><span class=\"p\">(</span><span class=\"n\">move_path</span><span class=\"p\">).</span><span class=\"n\">is_some</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">debug</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"s\">&quot;var_initialized_on_exit({:?}, {:?})&quot;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">local</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">cx</span><span class=\"p\">.</span><span class=\"n\">location_table</span><span class=\"p\">.</span><span class=\"n\">mid_index</span><span class=\"p\">(</span><span class=\"n\">terminator_location</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 168970323,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561491798
    },
    {
        "content": "<p>except not with <code>debug!</code> logs :)</p>",
        "id": 168970331,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561491803
    },
    {
        "content": "<blockquote>\n<p>So it should be a no-op</p>\n</blockquote>\n<p>yeah I think it's .. well, not a no-op, but equivalent to the commented out lines</p>",
        "id": 168970348,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561491820
    },
    {
        "content": "<p>The question is whether I need to make some additional statement at the terminator take effect before emitting the state at mid-point?</p>",
        "id": 168970363,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1561491828
    },
    {
        "content": "<p>That's what I think I thought too</p>",
        "id": 168970421,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1561491846
    },
    {
        "content": "<p>you do need to do <em>something</em> between start/end</p>",
        "id": 168970442,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561491868
    },
    {
        "content": "<p>Aah ok</p>",
        "id": 168970446,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1561491870
    },
    {
        "content": "<p>I'll try that and see what happens!</p>",
        "id": 168970450,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1561491875
    },
    {
        "content": "<p>I think applying the \"reconstructed terminator effect\"</p>",
        "id": 168970452,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561491876
    },
    {
        "content": "<p>and \"reset to exit of\" is equivalent</p>",
        "id": 168970459,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561491881
    },
    {
        "content": "<p>reset to exit of basically jumps back to the start and then applies the \"complete gen/kill sets\" for the entire block, which I believe include all statements + terminator</p>",
        "id": 168970471,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561491906
    },
    {
        "content": "<p>(as it is, you've already applied the gen/kill sets up to but not including the terminator)</p>",
        "id": 168970480,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561491917
    },
    {
        "content": "<p>pretty sure it's \"six in one, half a dozen in the other\", as they say...</p>",
        "id": 168970499,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561491935
    },
    {
        "content": "<p>Ok, that's where I was confused</p>",
        "id": 168970501,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1561491936
    },
    {
        "content": "<p>I thought the terminator <em>was</em> a statement</p>",
        "id": 168970512,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1561491943
    },
    {
        "content": "<p>I see</p>",
        "id": 168970517,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561491948
    },
    {
        "content": "<p>Ok, recompiling now...</p>",
        "id": 168970644,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1561492051
    },
    {
        "content": "<p>HA, it works for the previously failing cases</p>",
        "id": 168972836,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1561493634
    },
    {
        "content": "<p>But err, has a regression</p>",
        "id": 168972842,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1561493638
    },
    {
        "content": "<p>I'll have to look at that later</p>",
        "id": 168972885,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1561493644
    },
    {
        "content": "<p>I have to go to sleep now :)</p>",
        "id": 168972921,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1561493692
    },
    {
        "content": "<p>Or well, at least stop working and start winding down</p>",
        "id": 168972951,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1561493713
    },
    {
        "content": "<blockquote>\n<p>But err, has a regression</p>\n</blockquote>\n<p>which one :)</p>",
        "id": 168991116,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561510362
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> (intermittently back to explain this): it's both <code>optional_drop_enum()</code> and <code>drop_enum()</code> from <code>enum-drop-access</code>. What seems to happen in <code>drop_enum()</code> (and I'd bet it's the same in <code>optional_drop_enum()</code>) is:</p>\n<ul>\n<li>variable <code>_1</code> is dropped in <code>bb8</code> and should be drop-live from there upwards</li>\n<li>a missing <code>var_initialized_on_exit</code>in just that block stops it from being propagated</li>\n<li><code>_1</code> <em>is</em> initialised at the start of <code>bb8[0]</code>, but is drop-used at <code>bb8[1]</code>. However, the MIR for bb8 looks like this (!?) and there shouldn't even be a <code>bb8[1]</code>?!</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\"> </span><span class=\"n\">bb8</span>: <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">          </span><span class=\"n\">drop</span><span class=\"p\">(</span><span class=\"n\">_1</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"p\">[</span><span class=\"k\">return</span>: <span class=\"nc\">bb9</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">unwind</span>: <span class=\"nc\">bb1</span><span class=\"p\">];</span><span class=\"w\"> </span><span class=\"c1\">// bb8[0]: scope 0 at enum-drop-access.rs:20:1: 20:2</span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<ul>\n<li>the actual code in the test is this:</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">enum</span> <span class=\"nc\">DropOption</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">Drop</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">DropOption</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">drop</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// Dropping opt could access the value behind the reference,</span>\n<span class=\"k\">fn</span> <span class=\"nf\">drop_enum</span><span class=\"p\">(</span><span class=\"n\">opt</span>: <span class=\"nc\">DropOption</span><span class=\"o\">&lt;&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">opt</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">DropOption</span>::<span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"c1\">//~ ERROR</span>\n<span class=\"w\">            </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">DropOption</span>::<span class=\"nb\">None</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>I don't see why this bug would appear now, given that I have only added <em>more</em> initialisation facts from Rustc, but one is not supposed to understand everything I guess.</p>",
        "id": 169302360,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1561823214
    },
    {
        "content": "<p>I'll have a closer look on Monday :)</p>",
        "id": 169303316,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1561825024
    },
    {
        "content": "<p>Update: the reason for the problem was stale <code>region_live_at</code> data with incorrect locations, so I added back the code to generate <code>region_live_at</code> to Rustc for now, and everything is working.</p>",
        "id": 169388744,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1561982345
    },
    {
        "content": "<p>I'm considering if it would be a good idea to split the inputs from Rust into separate structs internally early on entry and have <code>AllFacts</code> just be an interface into the engine, so that the now rather orthogonal components (such as the liveness parts) can handle their own data separately. Any thoughts?</p>",
        "id": 169389086,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1561982667
    },
    {
        "content": "<blockquote>\n<p>so I added back the code to generate <code>region_live_at</code> to Rustc for now, and everything is working.</p>\n</blockquote>\n<p>this means liveness in Polonius computes the same <code>region_live_at</code> facts in memory, as the ones we read on disk from rustc ? if so, <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span>  :)</p>",
        "id": 169413494,
        "sender_full_name": "lqd",
        "timestamp": 1562001651
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> glad to hear things are working</p>",
        "id": 169419001,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562005546
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> yes, precisely. :)</p>",
        "id": 169419461,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1562005844
    },
    {
        "content": "<p>most of the test failures are <a href=\"https://hackmd.io/CjYB0fs4Q9CweyeTdKWyEg?view\" target=\"_blank\" title=\"https://hackmd.io/CjYB0fs4Q9CweyeTdKWyEg?view\">triaged</a>, there 4 cases left (3 variations on a theme, and seems possibly simple to categorize; and another \"weird but probably straightforward to categorize); and in addition some cases that could be bugs in fact generation</p>",
        "id": 169428810,
        "sender_full_name": "lqd",
        "timestamp": 1562013122
    },
    {
        "content": "<p>possibly \"ready to double check\"</p>",
        "id": 169428920,
        "sender_full_name": "lqd",
        "timestamp": 1562013198
    },
    {
        "content": "<p>even though until all of those have issues filed or PRs posted, one could still go on — so I'll probably do so (and post the PR for the commits I have, for the issues which just look fine; if others agree with this pre-triage)</p>",
        "id": 169429038,
        "sender_full_name": "lqd",
        "timestamp": 1562013312
    },
    {
        "content": "<p>hi, I unfortunately again won't be able to attend tonight as of going to a concert; got the tickets last year...</p>",
        "id": 169455857,
        "sender_full_name": "lokalmatador",
        "timestamp": 1562047823
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> what should I be reviewing :)</p>",
        "id": 169495689,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562085153
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/60266\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/60266\">#60266</a> needs a rebase + handling conflicts it seems</p>",
        "id": 169495860,
        "sender_full_name": "lqd",
        "timestamp": 1562085266
    },
    {
        "content": "<p>or maybe is it still WIP <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 169496010,
        "sender_full_name": "lqd",
        "timestamp": 1562085336
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span>, <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>: yes, but we also need to version-bump Polonius with the new dummy initialisation facts before the Rust branch can be merged. I’ll get that done tomorrow morning and poke you when it’s ready to review, Niko!</p>",
        "id": 169505617,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1562091521
    },
    {
        "content": "<p>Oh it would be so good to have the rustc branch merged and not have to deal with the constant rebasing</p>",
        "id": 169505687,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1562091567
    },
    {
        "content": "<p>ah true :)</p>",
        "id": 169506823,
        "sender_full_name": "lqd",
        "timestamp": 1562092290
    },
    {
        "content": "<p>since we talked about it last week (I have not written the notes from last week's meeting <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span>) I think there are a couple tasks which could be tackled by new contributors:<br>\n- some refactoring: especially about naming relations, variables, or datalog rules; we were talking how <code>requires</code> is a name we should change, maybe test organization and the likes<br>\n- increase the coverage of the rustc integration: after talking with Matthew it seems we probably should test more of the fact generation system, add the missing features etc</p>",
        "id": 169508251,
        "sender_full_name": "lqd",
        "timestamp": 1562093210
    },
    {
        "content": "<p>not that they <em>should</em> be done by someone else, just that they might :) (I was planning on looking at fact generation next actually)</p>",
        "id": 169508912,
        "sender_full_name": "lqd",
        "timestamp": 1562093651
    },
    {
        "content": "<p>for debugging, some datalog provenance would be nice as well, à la Yannis Smaragdakis (who I think Niko knows) — and such a feature would likely cause naming confusion if we renamed regions to provenances <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 169509017,
        "sender_full_name": "lqd",
        "timestamp": 1562093748
    },
    {
        "content": "<p>Well, judging by my background research, it seems Smaragdakis is one of the go-to authorities on static analysis in Datalog</p>",
        "id": 169559455,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1562154847
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> Is that a trace of how the tuple propagation works?</p>",
        "id": 169559466,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1562154858
    },
    {
        "content": "<p>yeah a provenance graph for the facts, say, this tuple was emitted at this round, because of rule X and input tuples Y from relations Z, and so on for the dependent tuples, would be useful to understand why Polonius ultimately computes an error</p>",
        "id": 169559647,
        "sender_full_name": "lqd",
        "timestamp": 1562155033
    },
    {
        "content": "<p>Ah, yes; it's what I have been doing in my head to debug my code :)</p>",
        "id": 169559673,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1562155065
    },
    {
        "content": "<p>either for debugging the whole analysis, or specific rules while we're implementing new ones (or also useful to see duplicate tuple generation, eg for performance)</p>",
        "id": 169559724,
        "sender_full_name": "lqd",
        "timestamp": 1562155087
    },
    {
        "content": "<p>It's kind of fun though, propagating things across graphs. Sort of like crossword puzzles</p>",
        "id": 169559731,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1562155097
    },
    {
        "content": "<p>yeah :)</p>",
        "id": 169559739,
        "sender_full_name": "lqd",
        "timestamp": 1562155108
    },
    {
        "content": "<p>Ooh yes</p>",
        "id": 169559740,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1562155110
    },
    {
        "content": "<p>(or an interactive mode, \"please Polonius, proceed to the next round\", or datafrog REPL)</p>",
        "id": 169559933,
        "sender_full_name": "lqd",
        "timestamp": 1562155314
    },
    {
        "content": "<p>Hi,</p>\n<p>by now I know I have not contributed much. However, I unfortunately cannot continue at this point. As of a recent job switch, I'm horribly exhausted due to an increase in work load. Also, I recently committed to training a local RoboCup team (robotics still being my favorite hobbyhorse), meaning that my evenings now will be very busy. That said and considering my own list or priorities I for now have to resign from contributing to rustc as I just don't know anymore how to fit this into my schedule. Sorry for letting you guys down, but for now this is the only feasible way for me. If at some point I again find the time to contribute, be sure I will call out once again.</p>",
        "id": 169802119,
        "sender_full_name": "lokalmatador",
        "timestamp": 1562488053
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"218716\">@lokalmatador</span> Ok, so I can't speak in any official capacity or anything given that I'm just a random student and all, but I think this sounds like a very good way of handling shifting ground conditions and the best possible failure mode under the circumstances? The way I see things you haven't let anybody down at all. Good luck with your new job, and I hope it gets better as you settle in!</p>\n<p>Also, please remember to take care of yourself in case it doesn't. I say this as someone who hardly knows someone who hasn't gone through completely avoidable burnout anymore.</p>",
        "id": 169825175,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1562530894
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"218716\">@lokalmatador</span> no worries, take care of yourself first :)</p>",
        "id": 169826341,
        "sender_full_name": "lqd",
        "timestamp": 1562533116
    },
    {
        "content": "<p>with Albin ending their master thesis soon, and Niko on vacation next week, maybe this WG won't need weekly sync meetings for the summer/until fall, as well ? (like wg-traits for example)</p>",
        "id": 169877180,
        "sender_full_name": "lqd",
        "timestamp": 1562598251
    },
    {
        "content": "<p>what do you think <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ?</p>",
        "id": 169893116,
        "sender_full_name": "lqd",
        "timestamp": 1562610505
    },
    {
        "content": "<p>(esp if there's other/more pressing work to be done during this time?)</p>",
        "id": 169893433,
        "sender_full_name": "lqd",
        "timestamp": 1562610766
    },
    {
        "content": "<p>that sounds right</p>",
        "id": 169893572,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562610878
    },
    {
        "content": "<p>I actually can't make the mtg tomorrow either</p>",
        "id": 169893574,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562610882
    },
    {
        "content": "<p>alright :)</p>",
        "id": 169893627,
        "sender_full_name": "lqd",
        "timestamp": 1562610934
    },
    {
        "content": "<p>I will adjust the calendar I guess</p>",
        "id": 169893651,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562610946
    },
    {
        "content": "<p>I've made progress in identifying issues in the <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/rustc.20compare-mode.20polonius\" title=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/rustc.20compare-mode.20polonius\">dedicated thread</a> and will try to continue on this and the other potential refinement until you're back</p>",
        "id": 169893926,
        "sender_full_name": "lqd",
        "timestamp": 1562611195
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> it's likely going to be just us two tonight, so no real pressing need to have a meeting in the evening :) my update is: I've myself worked on the test suite quite a bit and found some interesting things, and have a promising lead thanks to Matthew and Niko. I've continued a bit on the refinement prototype and also found some interesting things there (though I still wish to investigate / need to test more). I didn't manage to write up the previous meeting notes yet (I'm not sure anybody reads them but I'll get it done <em>eventually</em> ;)</p>",
        "id": 170443883,
        "sender_full_name": "lqd",
        "timestamp": 1562671043
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> Oh, that's great! I skimmed some of your posts but I haven't yet taken the time to get into the details of what you are doing. :)</p>\n<p>I don't think I need a meeting either, but just to say something, I have been working a bit on my thesis and continued work on collecting crates and benchmarking/profiling their facts. It looks like the final tally might be around 10 000 repositories analysed, but workloads now take a long time to run so it's not done yet. I also did the final work to prepare the pull requests for liveness, and have written notes about what I expect to have to do to get the full initialisation analysis done. If Niko doesn't have any time to introduce me, I'll go out on a limb and see where that gets me.</p>\n<p>Finally, I am also sort of working on taking Aaron's work on formalising the borrow check in Oxide and showing how it translates to the Polonius rules via some fudging about Mir for my thesis, with as little fudging as possible (I mean, I would love to have something formal, but I'm <em>never</em> going to have time for that).</p>",
        "id": 170447010,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1562674056
    },
    {
        "content": "<p>these 10 000 repositories will come in handy to check for correctness !</p>",
        "id": 170448026,
        "sender_full_name": "lqd",
        "timestamp": 1562675081
    },
    {
        "content": "<p>at the very least we should be able to have a clearer picture on possible regressions, and have test cases for the features we know are missing, with your crater-lite</p>",
        "id": 170448069,
        "sender_full_name": "lqd",
        "timestamp": 1562675159
    },
    {
        "content": "<p>really cool, awesome job! I'm also looking forward to the rustc liveness PR landing hopefully soon <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 170448168,
        "sender_full_name": "lqd",
        "timestamp": 1562675239
    },
    {
        "content": "<p>Thank you, and me too!</p>",
        "id": 170479098,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1562697559
    },
    {
        "content": "<p>Meanwhile, in my benchmarking scripts; I am letting my Python process analysing the nll-facts call itself as a child process with each crate in order to be able to set rlimits for the child process and avoid being OOM-killed on huge inputs</p>",
        "id": 170479424,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1562697811
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> on <a href=\"https://github.com/rust-lang/rust/pull/64749\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/64749\">https://github.com/rust-lang/rust/pull/64749</a> - I was actually running tests with the Location::All <a href=\"https://github.com/rust-lang/rust/pull/64749/files#diff-ba0753882d4be5cd693895bfb01a889bL39-L58\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/64749/files#diff-ba0753882d4be5cd693895bfb01a889bL39-L58\">hack</a> removed earlier today</p>",
        "id": 176679587,
        "sender_full_name": "lqd",
        "timestamp": 1569519939
    },
    {
        "content": "<p>awesome job</p>",
        "id": 176679713,
        "sender_full_name": "lqd",
        "timestamp": 1569520037
    },
    {
        "content": "<p>GG on the hrtb due-to-where-clause fix as well</p>",
        "id": 176679953,
        "sender_full_name": "lqd",
        "timestamp": 1569520189
    },
    {
        "content": "<p>I assume CI didn't run the nll compare mode but you probably did</p>",
        "id": 176680098,
        "sender_full_name": "lqd",
        "timestamp": 1569520278
    },
    {
        "content": "<p>(or maybe t-infra enabled it on PR builders already)</p>",
        "id": 176680125,
        "sender_full_name": "lqd",
        "timestamp": 1569520297
    },
    {
        "content": "<p>btw you mention a commit to revert in that PR, was it the one about running the polonius compare mode on CI which was already removed, or the latest one which is more about NLLs than Polonius per se ?</p>",
        "id": 176775653,
        "sender_full_name": "lqd",
        "timestamp": 1569610919
    },
    {
        "content": "<p>I was talking about the commit that I have already reverted.</p>",
        "id": 176775874,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1569611005
    },
    {
        "content": "<p>ah alright, I'll mark the comment resolved then</p>",
        "id": 176775906,
        "sender_full_name": "lqd",
        "timestamp": 1569611022
    },
    {
        "content": "<p>and  S-waiting-on-review as well, since everything seems done ? (it's waiting on author rn)</p>",
        "id": 176776084,
        "sender_full_name": "lqd",
        "timestamp": 1569611123
    },
    {
        "content": "<p>done</p>",
        "id": 176776257,
        "sender_full_name": "lqd",
        "timestamp": 1569611219
    },
    {
        "content": "<p>I've been playing with rewriting the <code>Naive</code> rules to model demand propagation as if they were evaluated top-down (à la magic sets), and they should look like this (modulo some massaging around the <code>errors</code> entry point):</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nf\">errors</span><span class=\"p\">(</span><span class=\"nv\">B</span><span class=\"p\">,</span> <span class=\"nv\">P</span><span class=\"p\">)</span> <span class=\"p\">:-</span> <span class=\"nf\">d_errors_bb</span><span class=\"p\">(</span><span class=\"nv\">B</span><span class=\"p\">,</span> <span class=\"nv\">P</span><span class=\"p\">),</span> <span class=\"nf\">invalidates</span><span class=\"p\">(</span><span class=\"nv\">B</span><span class=\"p\">,</span> <span class=\"nv\">P</span><span class=\"p\">),</span> <span class=\"nf\">borrow_live_at</span><span class=\"p\">(</span><span class=\"nv\">B</span><span class=\"p\">,</span> <span class=\"nv\">P</span><span class=\"p\">).</span>\n<span class=\"nf\">borrow_live_at</span><span class=\"p\">(</span><span class=\"nv\">B</span><span class=\"p\">,</span> <span class=\"nv\">P</span><span class=\"p\">)</span> <span class=\"p\">:-</span> <span class=\"nf\">d_borrow_live_at_bb</span><span class=\"p\">(</span><span class=\"nv\">B</span><span class=\"p\">,</span> <span class=\"nv\">P</span><span class=\"p\">),</span> <span class=\"nf\">requires</span><span class=\"p\">(</span><span class=\"nv\">R</span><span class=\"p\">,</span> <span class=\"nv\">B</span><span class=\"p\">,</span> <span class=\"nv\">P</span><span class=\"p\">),</span> <span class=\"nf\">region_live_at</span><span class=\"p\">(</span><span class=\"nv\">R</span><span class=\"p\">,</span> <span class=\"nv\">P</span><span class=\"p\">).</span>\n<span class=\"nf\">requires</span><span class=\"p\">(</span><span class=\"nv\">R</span><span class=\"p\">,</span> <span class=\"nv\">B</span><span class=\"p\">,</span> <span class=\"nv\">P</span><span class=\"p\">)</span> <span class=\"p\">:-</span> <span class=\"nf\">d_requires_fbb</span><span class=\"p\">(</span><span class=\"nv\">B</span><span class=\"p\">,</span> <span class=\"nv\">P</span><span class=\"p\">),</span> <span class=\"nf\">borrow_region</span><span class=\"p\">(</span><span class=\"nv\">R</span><span class=\"p\">,</span> <span class=\"nv\">B</span><span class=\"p\">,</span> <span class=\"nv\">P</span><span class=\"p\">).</span>\n<span class=\"nf\">requires</span><span class=\"p\">(</span><span class=\"nv\">R2</span><span class=\"p\">,</span> <span class=\"nv\">B</span><span class=\"p\">,</span> <span class=\"nv\">P</span><span class=\"p\">)</span> <span class=\"p\">:-</span> <span class=\"nf\">d_requires_fbb</span><span class=\"p\">(</span><span class=\"nv\">B</span><span class=\"p\">,</span> <span class=\"nv\">P</span><span class=\"p\">),</span> <span class=\"nf\">requires</span><span class=\"p\">(</span><span class=\"nv\">R1</span><span class=\"p\">,</span> <span class=\"nv\">B</span><span class=\"p\">,</span> <span class=\"nv\">P</span><span class=\"p\">),</span> <span class=\"nf\">subset</span><span class=\"p\">(</span><span class=\"nv\">R1</span><span class=\"p\">,</span> <span class=\"nv\">R2</span><span class=\"p\">,</span> <span class=\"nv\">P</span><span class=\"p\">).</span>\n<span class=\"nf\">requires</span><span class=\"p\">(</span><span class=\"nv\">R</span><span class=\"p\">,</span> <span class=\"nv\">B</span><span class=\"p\">,</span> <span class=\"nv\">Q</span><span class=\"p\">)</span> <span class=\"p\">:-</span> <span class=\"nf\">d_requires_fbb</span><span class=\"p\">(</span><span class=\"nv\">B</span><span class=\"p\">,</span> <span class=\"nv\">Q</span><span class=\"p\">),</span> <span class=\"nf\">requires</span><span class=\"p\">(</span><span class=\"nv\">R</span><span class=\"p\">,</span> <span class=\"nv\">B</span><span class=\"p\">,</span> <span class=\"nv\">P</span><span class=\"p\">),</span> <span class=\"p\">!</span><span class=\"nf\">killed</span><span class=\"p\">(</span><span class=\"nv\">B</span><span class=\"p\">,</span> <span class=\"nv\">P</span><span class=\"p\">),</span> <span class=\"nf\">cfg_edge</span><span class=\"p\">(</span><span class=\"nv\">P</span><span class=\"p\">,</span> <span class=\"nv\">Q</span><span class=\"p\">),</span> <span class=\"nf\">region_live_at</span><span class=\"p\">(</span><span class=\"nv\">R</span><span class=\"p\">,</span> <span class=\"nv\">Q</span><span class=\"p\">).</span>\n<span class=\"nf\">requires</span><span class=\"p\">(</span><span class=\"nv\">R</span><span class=\"p\">,</span> <span class=\"nv\">B</span><span class=\"p\">,</span> <span class=\"nv\">P</span><span class=\"p\">)</span> <span class=\"p\">:-</span> <span class=\"nf\">d_requires_fbf</span><span class=\"p\">(</span><span class=\"nv\">B</span><span class=\"p\">),</span> <span class=\"nf\">borrow_region</span><span class=\"p\">(</span><span class=\"nv\">R</span><span class=\"p\">,</span> <span class=\"nv\">B</span><span class=\"p\">,</span> <span class=\"nv\">P</span><span class=\"p\">).</span>\n<span class=\"nf\">requires</span><span class=\"p\">(</span><span class=\"nv\">R2</span><span class=\"p\">,</span> <span class=\"nv\">B</span><span class=\"p\">,</span> <span class=\"nv\">P</span><span class=\"p\">)</span> <span class=\"p\">:-</span> <span class=\"nf\">d_requires_fbf</span><span class=\"p\">(</span><span class=\"nv\">B</span><span class=\"p\">),</span> <span class=\"nf\">requires</span><span class=\"p\">(</span><span class=\"nv\">R1</span><span class=\"p\">,</span> <span class=\"nv\">B</span><span class=\"p\">,</span> <span class=\"nv\">P</span><span class=\"p\">),</span> <span class=\"nf\">subset</span><span class=\"p\">(</span><span class=\"nv\">R1</span><span class=\"p\">,</span> <span class=\"nv\">R2</span><span class=\"p\">,</span> <span class=\"nv\">P</span><span class=\"p\">).</span>\n<span class=\"nf\">requires</span><span class=\"p\">(</span><span class=\"nv\">R</span><span class=\"p\">,</span> <span class=\"nv\">B</span><span class=\"p\">,</span> <span class=\"nv\">Q</span><span class=\"p\">)</span> <span class=\"p\">:-</span> <span class=\"nf\">d_requires_fbf</span><span class=\"p\">(</span><span class=\"nv\">B</span><span class=\"p\">),</span> <span class=\"nf\">requires</span><span class=\"p\">(</span><span class=\"nv\">R</span><span class=\"p\">,</span> <span class=\"nv\">B</span><span class=\"p\">,</span> <span class=\"nv\">P</span><span class=\"p\">),</span> <span class=\"p\">!</span><span class=\"nf\">killed</span><span class=\"p\">(</span><span class=\"nv\">B</span><span class=\"p\">,</span> <span class=\"nv\">P</span><span class=\"p\">),</span> <span class=\"nf\">cfg_edge</span><span class=\"p\">(</span><span class=\"nv\">P</span><span class=\"p\">,</span> <span class=\"nv\">Q</span><span class=\"p\">),</span> <span class=\"nf\">region_live_at</span><span class=\"p\">(</span><span class=\"nv\">R</span><span class=\"p\">,</span> <span class=\"nv\">Q</span><span class=\"p\">).</span>\n<span class=\"nf\">subset</span><span class=\"p\">(</span><span class=\"nv\">R1</span><span class=\"p\">,</span> <span class=\"nv\">R2</span><span class=\"p\">,</span> <span class=\"nv\">P</span><span class=\"p\">)</span> <span class=\"p\">:-</span> <span class=\"nf\">d_subset_bfb</span><span class=\"p\">(</span><span class=\"nv\">R1</span><span class=\"p\">,</span> <span class=\"nv\">P</span><span class=\"p\">),</span> <span class=\"nf\">outlives</span><span class=\"p\">(</span><span class=\"nv\">R1</span><span class=\"p\">,</span> <span class=\"nv\">R2</span><span class=\"p\">,</span> <span class=\"nv\">P</span><span class=\"p\">).</span>\n<span class=\"nf\">subset</span><span class=\"p\">(</span><span class=\"nv\">R1</span><span class=\"p\">,</span> <span class=\"nv\">R3</span><span class=\"p\">,</span> <span class=\"nv\">P</span><span class=\"p\">)</span> <span class=\"p\">:-</span> <span class=\"nf\">d_subset_bfb</span><span class=\"p\">(</span><span class=\"nv\">R1</span><span class=\"p\">,</span> <span class=\"nv\">P</span><span class=\"p\">),</span> <span class=\"nf\">subset</span><span class=\"p\">(</span><span class=\"nv\">R1</span><span class=\"p\">,</span> <span class=\"nv\">R2</span><span class=\"p\">,</span> <span class=\"nv\">P</span><span class=\"p\">),</span> <span class=\"nf\">subset</span><span class=\"p\">(</span><span class=\"nv\">R2</span><span class=\"p\">,</span> <span class=\"nv\">R3</span><span class=\"p\">,</span> <span class=\"nv\">P</span><span class=\"p\">).</span>\n<span class=\"nf\">subset</span><span class=\"p\">(</span><span class=\"nv\">R1</span><span class=\"p\">,</span> <span class=\"nv\">R2</span><span class=\"p\">,</span> <span class=\"nv\">Q</span><span class=\"p\">)</span> <span class=\"p\">:-</span> <span class=\"nf\">d_subset_bfb</span><span class=\"p\">(</span><span class=\"nv\">R1</span><span class=\"p\">,</span> <span class=\"nv\">Q</span><span class=\"p\">),</span> <span class=\"nf\">subset</span><span class=\"p\">(</span><span class=\"nv\">R1</span><span class=\"p\">,</span> <span class=\"nv\">R2</span><span class=\"p\">,</span> <span class=\"nv\">P</span><span class=\"p\">),</span> <span class=\"nf\">cfg_edge</span><span class=\"p\">(</span><span class=\"nv\">P</span><span class=\"p\">,</span> <span class=\"nv\">Q</span><span class=\"p\">),</span> <span class=\"nf\">region_live_at</span><span class=\"p\">(</span><span class=\"nv\">R1</span><span class=\"p\">,</span> <span class=\"nv\">Q</span><span class=\"p\">),</span> <span class=\"nf\">region_live_at</span><span class=\"p\">(</span><span class=\"nv\">R2</span><span class=\"p\">,</span> <span class=\"nv\">Q</span><span class=\"p\">).</span>\n<span class=\"nf\">subset</span><span class=\"p\">(</span><span class=\"nv\">R1</span><span class=\"p\">,</span> <span class=\"nv\">R2</span><span class=\"p\">,</span> <span class=\"nv\">P</span><span class=\"p\">)</span> <span class=\"p\">:-</span> <span class=\"nf\">d_subset_bff</span><span class=\"p\">(</span><span class=\"nv\">R1</span><span class=\"p\">),</span> <span class=\"nf\">outlives</span><span class=\"p\">(</span><span class=\"nv\">R1</span><span class=\"p\">,</span> <span class=\"nv\">R2</span><span class=\"p\">,</span> <span class=\"nv\">P</span><span class=\"p\">).</span>\n<span class=\"nf\">subset</span><span class=\"p\">(</span><span class=\"nv\">R1</span><span class=\"p\">,</span> <span class=\"nv\">R3</span><span class=\"p\">,</span> <span class=\"nv\">P</span><span class=\"p\">)</span> <span class=\"p\">:-</span> <span class=\"nf\">d_subset_bff</span><span class=\"p\">(</span><span class=\"nv\">R1</span><span class=\"p\">),</span> <span class=\"nf\">subset</span><span class=\"p\">(</span><span class=\"nv\">R1</span><span class=\"p\">,</span> <span class=\"nv\">R2</span><span class=\"p\">,</span> <span class=\"nv\">P</span><span class=\"p\">),</span> <span class=\"nf\">subset</span><span class=\"p\">(</span><span class=\"nv\">R2</span><span class=\"p\">,</span> <span class=\"nv\">R3</span><span class=\"p\">,</span> <span class=\"nv\">P</span><span class=\"p\">).</span>\n<span class=\"nf\">subset</span><span class=\"p\">(</span><span class=\"nv\">R1</span><span class=\"p\">,</span> <span class=\"nv\">R2</span><span class=\"p\">,</span> <span class=\"nv\">Q</span><span class=\"p\">)</span> <span class=\"p\">:-</span> <span class=\"nf\">d_subset_bff</span><span class=\"p\">(</span><span class=\"nv\">R1</span><span class=\"p\">),</span> <span class=\"nf\">subset</span><span class=\"p\">(</span><span class=\"nv\">R1</span><span class=\"p\">,</span> <span class=\"nv\">R2</span><span class=\"p\">,</span> <span class=\"nv\">P</span><span class=\"p\">),</span> <span class=\"nf\">cfg_edge</span><span class=\"p\">(</span><span class=\"nv\">P</span><span class=\"p\">,</span> <span class=\"nv\">Q</span><span class=\"p\">),</span> <span class=\"nf\">region_live_at</span><span class=\"p\">(</span><span class=\"nv\">R1</span><span class=\"p\">,</span> <span class=\"nv\">Q</span><span class=\"p\">),</span> <span class=\"nf\">region_live_at</span><span class=\"p\">(</span><span class=\"nv\">R2</span><span class=\"p\">,</span> <span class=\"nv\">Q</span><span class=\"p\">).</span>\n<span class=\"nf\">d_borrow_live_at_bb</span><span class=\"p\">(</span><span class=\"nv\">B</span><span class=\"p\">,</span> <span class=\"nv\">P</span><span class=\"p\">)</span> <span class=\"p\">:-</span> <span class=\"nf\">d_errors_bb</span><span class=\"p\">(</span><span class=\"nv\">B</span><span class=\"p\">,</span> <span class=\"nv\">P</span><span class=\"p\">),</span> <span class=\"nf\">invalidates</span><span class=\"p\">(</span><span class=\"nv\">B</span><span class=\"p\">,</span> <span class=\"nv\">P</span><span class=\"p\">).</span>\n<span class=\"nf\">d_requires_fbb</span><span class=\"p\">(</span><span class=\"nv\">B</span><span class=\"p\">,</span> <span class=\"nv\">P</span><span class=\"p\">)</span> <span class=\"p\">:-</span> <span class=\"nf\">d_borrow_live_at_bb</span><span class=\"p\">(</span><span class=\"nv\">B</span><span class=\"p\">,</span> <span class=\"nv\">P</span><span class=\"p\">).</span>\n<span class=\"nf\">d_subset_bfb</span><span class=\"p\">(</span><span class=\"nv\">R1</span><span class=\"p\">,</span> <span class=\"nv\">P</span><span class=\"p\">)</span> <span class=\"p\">:-</span> <span class=\"nf\">d_requires_fbb</span><span class=\"p\">(</span><span class=\"nv\">B</span><span class=\"p\">,</span> <span class=\"nv\">P</span><span class=\"p\">),</span> <span class=\"nf\">requires</span><span class=\"p\">(</span><span class=\"nv\">R1</span><span class=\"p\">,</span> <span class=\"nv\">B</span><span class=\"p\">,</span> <span class=\"nv\">P</span><span class=\"p\">).</span>\n<span class=\"nf\">d_requires_fbf</span><span class=\"p\">(</span><span class=\"nv\">B</span><span class=\"p\">)</span> <span class=\"p\">:-</span> <span class=\"nf\">d_requires_fbb</span><span class=\"p\">(</span><span class=\"nv\">B</span><span class=\"p\">,</span> <span class=\"nv\">Q</span><span class=\"p\">).</span>\n<span class=\"nf\">d_subset_bfb</span><span class=\"p\">(</span><span class=\"nv\">R1</span><span class=\"p\">,</span> <span class=\"nv\">P</span><span class=\"p\">)</span> <span class=\"p\">:-</span> <span class=\"nf\">d_requires_fbf</span><span class=\"p\">(</span><span class=\"nv\">B</span><span class=\"p\">),</span> <span class=\"nf\">requires</span><span class=\"p\">(</span><span class=\"nv\">R1</span><span class=\"p\">,</span> <span class=\"nv\">B</span><span class=\"p\">,</span> <span class=\"nv\">P</span><span class=\"p\">).</span>\n<span class=\"nf\">d_subset_bfb</span><span class=\"p\">(</span><span class=\"nv\">R2</span><span class=\"p\">,</span> <span class=\"nv\">P</span><span class=\"p\">)</span> <span class=\"p\">:-</span> <span class=\"nf\">d_subset_bfb</span><span class=\"p\">(</span><span class=\"nv\">R1</span><span class=\"p\">,</span> <span class=\"nv\">P</span><span class=\"p\">),</span> <span class=\"nf\">subset</span><span class=\"p\">(</span><span class=\"nv\">R1</span><span class=\"p\">,</span> <span class=\"nv\">R2</span><span class=\"p\">,</span> <span class=\"nv\">P</span><span class=\"p\">).</span>\n<span class=\"nf\">d_subset_bff</span><span class=\"p\">(</span><span class=\"nv\">R1</span><span class=\"p\">)</span> <span class=\"p\">:-</span> <span class=\"nf\">d_subset_bfb</span><span class=\"p\">(</span><span class=\"nv\">R1</span><span class=\"p\">,</span> <span class=\"nv\">Q</span><span class=\"p\">).</span>\n<span class=\"nf\">d_subset_bfb</span><span class=\"p\">(</span><span class=\"nv\">R2</span><span class=\"p\">,</span> <span class=\"nv\">P</span><span class=\"p\">)</span> <span class=\"p\">:-</span> <span class=\"nf\">d_subset_bff</span><span class=\"p\">(</span><span class=\"nv\">R1</span><span class=\"p\">),</span> <span class=\"nf\">subset</span><span class=\"p\">(</span><span class=\"nv\">R1</span><span class=\"p\">,</span> <span class=\"nv\">R2</span><span class=\"p\">,</span> <span class=\"nv\">P</span><span class=\"p\">).</span>\n</pre></div>",
        "id": 176921970,
        "sender_full_name": "lqd",
        "timestamp": 1569841544
    },
    {
        "content": "<p>as luck would have it, the result is still stratified (which was likely, but still)</p>",
        "id": 176921981,
        "sender_full_name": "lqd",
        "timestamp": 1569841560
    },
    {
        "content": "<p>I haven't tested this yet, but that wall of text begs a datalog-to-datafrog \"compiler\" (or helper at least) so I've been toying with that as well</p>",
        "id": 176922082,
        "sender_full_name": "lqd",
        "timestamp": 1569841672
    },
    {
        "content": "<blockquote>\n<p>I haven't tested this yet, but that wall of text begs a datalog-to-datafrog \"compiler\" (or helper at least) so I've been toying with that as well</p>\n</blockquote>\n<p>Nearing Soufflé at a frightening pace</p>",
        "id": 176968471,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1569873790
    },
    {
        "content": "<p>I was just going to drop in and apologise for missing the meeting when I realised it's Monday today, so that's how my day is going</p>",
        "id": 176968530,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1569873837
    },
    {
        "content": "<p>Just out of curiosity, how are you doing the datalog-to-datafrog-ification, are you generating Rust code or is it a macro?</p>",
        "id": 176968651,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1569873899
    },
    {
        "content": "<p>Can you even make Rust macros that powerful to begin with?</p>",
        "id": 176968677,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1569873913
    },
    {
        "content": "<blockquote>\n<p>Just out of curiosity, how are you doing the datalog-to-datafrog-ification, are you generating Rust code or is it a macro?</p>\n</blockquote>\n<p>right now just generating analysis data, rules, some indices (the joins are a bit trickier, not that much, but I haven't completed them yet). no proc macro yet, while I think it's probably doable albeit a bit tricky, it's likely to me that a macro hides too much of the generated code, whereas we'd like to see everything, reorder, remove indices, etc</p>",
        "id": 176970709,
        "sender_full_name": "lqd",
        "timestamp": 1569875079
    },
    {
        "content": "<p>I planned on testing this first with soufflé, and then promptly forgot about it, so I've been implementing it with datafrog and the million intermediary steps and indices ... <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 176970842,
        "sender_full_name": "lqd",
        "timestamp": 1569875170
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/polonius/pull/133\" target=\"_blank\" title=\"https://github.com/rust-lang/polonius/pull/133\">https://github.com/rust-lang/polonius/pull/133</a> fixes clap</p>",
        "id": 177926703,
        "sender_full_name": "lqd",
        "timestamp": 1570813182
    },
    {
        "content": "<p>A person at SPLASH had an entire infrastructure for scraping GitHub and performing experiments so I talked to them about adapting that for my Polonius evaluations. I have no idea if that’s a good idea or not, but I figured that heck why not try. :)</p>",
        "id": 178843809,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1571829904
    },
    {
        "content": "<p>From what I gathered the pipeline sounded reasonable anyway</p>",
        "id": 178844364,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1571830487
    },
    {
        "content": "<p>I know we already have crater but if there’s an actual generalised crawling system for these types of things going around I can see why it might be a good idea to get on the bandwagon</p>",
        "id": 178844403,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1571830538
    },
    {
        "content": "<blockquote>\n<p>A person at SPLASH had an entire infrastructure for scraping GitHub and performing experiments so I talked to them about adapting that for my Polonius evaluations. I have no idea if that’s a good idea or not, but I figured that heck why not try. :)</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> Do you remember who?</p>",
        "id": 180020539,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1573037643
    },
    {
        "content": "<p>Yes! Andrea Rosa with the NAB project. Here: <a href=\"https://2019.splashcon.org/details/splash-2019-Posters/6/NAB-Automated-Large-scale-Multi-language-Dynamic-Program-Analysis-in-Public-Code-Rep\" target=\"_blank\" title=\"https://2019.splashcon.org/details/splash-2019-Posters/6/NAB-Automated-Large-scale-Multi-language-Dynamic-Program-Analysis-in-Public-Code-Rep\">https://2019.splashcon.org/details/splash-2019-Posters/6/NAB-Automated-Large-scale-Multi-language-Dynamic-Program-Analysis-in-Public-Code-Rep</a></p>",
        "id": 180022894,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1573039803
    },
    {
        "content": "<p>I'm in an email conversation with them about how hard it would be to adapt this for my Polonius input study</p>",
        "id": 180022925,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1573039851
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 180023330,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1573040272
    },
    {
        "content": "<p>just a heads up: someone archived the paper document <a href=\"https://paper.dropbox.com/doc/Polonius-Roadmap--Apwt4mtm3X77Ztz9GFsQ8I4yAg-hk3a9ynduUN2gk1A0NNTF\" target=\"_blank\" title=\"https://paper.dropbox.com/doc/Polonius-Roadmap--Apwt4mtm3X77Ztz9GFsQ8I4yAg-hk3a9ynduUN2gk1A0NNTF\">https://paper.dropbox.com/doc/Polonius-Roadmap--Apwt4mtm3X77Ztz9GFsQ8I4yAg-hk3a9ynduUN2gk1A0NNTF</a> -- it's happened before but this time I'm unable to restore it</p>",
        "id": 182430258,
        "sender_full_name": "lqd",
        "timestamp": 1575366306
    },
    {
        "content": "<p>I saw</p>",
        "id": 182489331,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1575403321
    },
    {
        "content": "<p>I was, apparently</p>",
        "id": 182489524,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1575403425
    },
    {
        "content": "<p>heh nice, thanks :)</p>",
        "id": 182489540,
        "sender_full_name": "lqd",
        "timestamp": 1575403438
    },
    {
        "content": "<p>I wonder if we can remove the person (I forget their handle) who restored it</p>",
        "id": 182489615,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1575403470
    },
    {
        "content": "<p>I guess it's a sign to move it elsewhere ? this feature of dropbox paper where you archive it for everyone while you only wanted it to archive for yourself is unfortunate</p>",
        "id": 182489644,
        "sender_full_name": "lqd",
        "timestamp": 1575403488
    },
    {
        "content": "<p>Apparently I could remove them, so I did</p>",
        "id": 182489654,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1575403500
    },
    {
        "content": "<p>I guess that's what they wanted</p>",
        "id": 182489659,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1575403503
    },
    {
        "content": "<p>But yes probably</p>",
        "id": 182489667,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1575403513
    },
    {
        "content": "<blockquote>\n<p>Apparently I could remove them, so I did</p>\n</blockquote>\n<p>no mercy from Albin :)</p>",
        "id": 182489686,
        "sender_full_name": "lqd",
        "timestamp": 1575403523
    },
    {
        "content": "<p>I mean, it's the same person and they clearly didn't want to have any part in it</p>",
        "id": 182489715,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1575403550
    },
    {
        "content": "<p>thanks a bunch for the quick review <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> :)</p>",
        "id": 183060746,
        "sender_full_name": "lqd",
        "timestamp": 1575985992
    },
    {
        "content": "<p>You're welcome! :)</p>",
        "id": 183062329,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1575987080
    },
    {
        "content": "<blockquote>\n<p>just a heads up: someone archived the paper document <a href=\"https://paper.dropbox.com/doc/Polonius-Roadmap--Apwt4mtm3X77Ztz9GFsQ8I4yAg-hk3a9ynduUN2gk1A0NNTF\" target=\"_blank\" title=\"https://paper.dropbox.com/doc/Polonius-Roadmap--Apwt4mtm3X77Ztz9GFsQ8I4yAg-hk3a9ynduUN2gk1A0NNTF\">https://paper.dropbox.com/doc/Polonius-Roadmap--Apwt4mtm3X77Ztz9GFsQ8I4yAg-hk3a9ynduUN2gk1A0NNTF</a> -- it's happened before but this time I'm unable to restore it</p>\n</blockquote>\n<p>ps we should switch to hackmd I think</p>",
        "id": 183097570,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576008906
    },
    {
        "content": "<p>agreed</p>",
        "id": 183097628,
        "sender_full_name": "lqd",
        "timestamp": 1576008962
    },
    {
        "content": "<p>I'm guessing today's meeting is cancelled, but happy holidays everyone! :)</p>",
        "id": 184170182,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1577195042
    },
    {
        "content": "<p><span aria-label=\"holiday tree\" class=\"emoji emoji-1f384\" role=\"img\" title=\"holiday tree\">:holiday_tree:</span></p>",
        "id": 184170423,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1577195397
    },
    {
        "content": "<p><span aria-label=\"holiday tree\" class=\"emoji emoji-1f384\" role=\"img\" title=\"holiday tree\">:holiday_tree:</span><span aria-label=\"snowman\" class=\"emoji emoji-2603\" role=\"img\" title=\"snowman\">:snowman:</span>️<span aria-label=\"champagne\" class=\"emoji emoji-1f37e\" role=\"img\" title=\"champagne\">:champagne:</span></p>",
        "id": 184226828,
        "sender_full_name": "lqd",
        "timestamp": 1577298280
    },
    {
        "content": "<p>I wanted to mention I won't be available for tomorrow's meeting, if everyone's back already. I don't have a lot to update anyway: slowly working on improving the datafrog generator</p>",
        "id": 184932519,
        "sender_full_name": "lqd",
        "timestamp": 1578335236
    },
    {
        "content": "<p>I’m back but I don’t have anything more interesting to say than that I’ve rebased my initialisation branch against master and removed all my updated facts (which means that some tests no longer pass).</p>",
        "id": 185044543,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1578424992
    },
    {
        "content": "<p>I’ll have to think about which facts to keep and add at least one test that exercises the initialisation part</p>",
        "id": 185044587,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1578425032
    },
    {
        "content": "<p>Also, rebasing my changes to rustc was harder, as I thought :(</p>",
        "id": 185044682,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1578425073
    },
    {
        "content": "<p>I've not done anything ... I'm back-ish now...</p>",
        "id": 185048343,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578427116
    },
    {
        "content": "<p>just in case knowing about this a day early could change people's plans about tomorrow's meeting, I myself have nothing to report unfortunately: I haven't had any time to work on polonius this week, sorry :/</p>",
        "id": 185537574,
        "sender_full_name": "lqd",
        "timestamp": 1578949607
    },
    {
        "content": "<p>Me neither, and I have a cold so my brain is mush :(</p>",
        "id": 185625229,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1579027065
    },
    {
        "content": "<p>I guess it'll be a blessing in disguise by allowing Matthew and Niko to have the time to talk about typeck and region solving</p>",
        "id": 185630740,
        "sender_full_name": "lqd",
        "timestamp": 1579030128
    },
    {
        "content": "<p><span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 185634220,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579032118
    },
    {
        "content": "<p>Sorry I've been so out of it lately as well</p>",
        "id": 185634272,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579032126
    },
    {
        "content": "<p>Vytautas has been working wonders on the datafrog generator though, eg a WIP proc macro <a href=\"https://github.com/lqd/datapond/pull/2\" target=\"_blank\" title=\"https://github.com/lqd/datapond/pull/2\">https://github.com/lqd/datapond/pull/2</a> :D</p>",
        "id": 185634587,
        "sender_full_name": "lqd",
        "timestamp": 1579032307
    },
    {
        "content": "<p>Cool!</p>",
        "id": 185706247,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1579100947
    },
    {
        "content": "<p>sorry again, my home laptop still hasn't been repaired and I won't be able to attend tonight's meeting :/ I haven't had much time to use my work computer at lunch breaks either, but I'm trying to understand/review the datafrog generator PR Vytautas has been doing; so, not much progress or things to report unfortunately</p>",
        "id": 186173822,
        "sender_full_name": "lqd",
        "timestamp": 1579605939
    },
    {
        "content": "<p>It's fine by me, I don't have anything interesting to say yet either</p>",
        "id": 186214482,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1579632857
    },
    {
        "content": "<p>I'm currently working on...rebasing my changes to rustc</p>",
        "id": 186214499,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1579632868
    },
    {
        "content": "<p>hey all</p>",
        "id": 186219718,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579636115
    },
    {
        "content": "<p>so I actually had a very uneven work day because</p>",
        "id": 186219723,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579636121
    },
    {
        "content": "<p>I fell over the weekend and was at the doctor getting an x-ray (no fractures, just bruising)</p>",
        "id": 186219743,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579636136
    },
    {
        "content": "<p>and in general it's been a bit hard for me to type today as areuslt</p>",
        "id": 186219764,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579636149
    },
    {
        "content": "<p>all of which is to say, doing somewhat better now, but it's ok by me to skip :P</p>",
        "id": 186219774,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579636162
    },
    {
        "content": "<p>oh wow, get well soon Niko</p>",
        "id": 186222869,
        "sender_full_name": "lqd",
        "timestamp": 1579638027
    },
    {
        "content": "<p>I think it's probably a good idea (and shouldn't be too difficult) to do location-insensitive subset errors, either via subsets or placeholder loans, so that the <code>Hybrid</code> variant can help us out greatly again. Even if <code>LocationInsensitive</code> would be more computationally intensive than it is today, it'd be milliseconds to save seconds (and IIRC the location-insensitive loan analysis is heavily dominated by move/init analysis and liveness by 20x-40x each on <code>clap</code>)</p>",
        "id": 189726940,
        "sender_full_name": "lqd",
        "timestamp": 1583350769
    },
    {
        "content": "<p>(yes, I know, perf is for later <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span>)</p>",
        "id": 189727187,
        "sender_full_name": "lqd",
        "timestamp": 1583350932
    },
    {
        "content": "<p>(also to help pre-filter the interesting origins to those possibly causing subset errors in the regular loan analysis, not just for the <code>Hybrid</code> variant)</p>",
        "id": 189727671,
        "sender_full_name": "lqd",
        "timestamp": 1583351233
    },
    {
        "content": "<p>ah some facts are broken on master :/</p>",
        "id": 189898300,
        "sender_full_name": "lqd",
        "timestamp": 1583505276
    },
    {
        "content": "<p>trying to update them made me see that move errors are taking 1m40s on clap</p>",
        "id": 189898578,
        "sender_full_name": "lqd",
        "timestamp": 1583505414
    },
    {
        "content": "<p>here's a fix for the facts <a href=\"https://github.com/rust-lang/polonius/pull/144\" target=\"_blank\" title=\"https://github.com/rust-lang/polonius/pull/144\">https://github.com/rust-lang/polonius/pull/144</a> with a couple tests for move errors cc <span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span></p>",
        "id": 189932025,
        "sender_full_name": "lqd",
        "timestamp": 1583527407
    },
    {
        "content": "<p>beautiful :D <a href=\"/user_uploads/4715/uGf7shwG1bq1Ba1e9vCXJ_OF/image.png\">tracy_profile.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/uGf7shwG1bq1Ba1e9vCXJ_OF/image.png\" title=\"tracy_profile.png\"><img src=\"/user_uploads/4715/uGf7shwG1bq1Ba1e9vCXJ_OF/image.png\"></a></div>",
        "id": 206000707,
        "sender_full_name": "lqd",
        "timestamp": 1596617420
    },
    {
        "content": "<p>My day:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// SAFETY: This is only safe if we no longer have any</span>\n<span class=\"c1\">// outstanding references to `parser`. Since we can</span>\n<span class=\"c1\">// only get here if the token was `None` or an</span>\n<span class=\"c1\">// `Error`, there can be no references.</span>\n<span class=\"c1\">//</span>\n<span class=\"c1\">// This is a manifestation of NLL case 3.</span>\n</code></pre></div>",
        "id": 226261564,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1613243248
    },
    {
        "content": "<p>I have basic knowledge about Polonius and I have some spare time. <br>\nWhat can I do to contribute to Polonius?</p>",
        "id": 242555255,
        "sender_full_name": "lengyijun",
        "timestamp": 1623650128
    },
    {
        "content": "<p>I think niko will have some potentially interesting feedback soon about our uses of solvers. But if that basically validates how chalk/polonius have been doing, maybe pushing on move errors could the most logical place. </p>\n<p>That is, helping what Amanda was analyzing, looking for, and so on in this topic <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/move.20error.20reporting\">https://rust-lang.zulipchat.com/#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/move.20error.20reporting</a> -- there are a couple of unexplained things in the move error analysis, causing, say, false positives (depending on which point some facts are located) and incorrect results. </p>\n<p>The analysis itself is surely incomplete, at the very least wrt partial moves (<a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/move.20errors.3A.20partial.20assignments.20to.20moved.20variables\">https://rust-lang.zulipchat.com/#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/move.20errors.3A.20partial.20assignments.20to.20moved.20variables</a>) and maybe more, and so on.</p>",
        "id": 242557309,
        "sender_full_name": "lqd",
        "timestamp": 1623652486
    },
    {
        "content": "<p>Ooo solvers would be interesting!</p>",
        "id": 245938441,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1626255938
    },
    {
        "content": "<p>If I play my cards right and all the dominoes fall where I want them to, my dissertation topic will be an SMT solver in Rust (which, for some reason, nobody's really done), plus caveats of course.</p>",
        "id": 245938563,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1626256014
    },
    {
        "content": "<p>You know, something like \"first solver to frob the blarfs while borking the worbel without zuuling the frooz\"</p>",
        "id": 245938593,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1626256057
    }
]