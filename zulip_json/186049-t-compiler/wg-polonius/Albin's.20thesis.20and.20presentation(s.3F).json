[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Ok, so I have a question of formalism. We have this (* reads off of back of hand *) <a href=\"/user_uploads/4715/zGaEEQNLHHJWRCyJ1LtAwZsX/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">subtyping rule</a> . But our analysis takes places into account. How do we formulate that? Should that be part of the rule as well? Also, I know the types should probably be some sort of generic parameters as well.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/zGaEEQNLHHJWRCyJ1LtAwZsX/pasted_image.png\" target=\"_blank\" title=\"subtyping rule\"><img src=\"/user_uploads/4715/zGaEEQNLHHJWRCyJ1LtAwZsX/pasted_image.png\"></a></div>",
        "id": 167062650,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1559378172
    },
    {
        "content": "<p>Also, the analysis is both contest-sensitive (which I take to mean \"respects function boundaries\") and flow-sensitive (which I take to mean \"analyses per program point\"), right? I get my definitions from <a href=\"http://doi.acm.org/10.1145/1480881.1480911\" target=\"_blank\" title=\"http://doi.acm.org/10.1145/1480881.1480911\">http://doi.acm.org/10.1145/1480881.1480911</a></p>",
        "id": 167068044,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1559387713
    },
    {
        "content": "<p>I don't believe it is context sensitive in the usual sense, because it is intra-procedural (not inter-procedural).</p>",
        "id": 167068668,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559388761
    },
    {
        "content": "<p>That said, formulating Polonius as a type system <em>is</em> a bit tricky. You may want to check out the work that <span class=\"user-mention\" data-user-id=\"127262\">@Aaron Weiss</span> has been doing for some inspiration in what that might look like.</p>",
        "id": 167068680,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559388820
    },
    {
        "content": "<p>(I'll fish out a link at some point, or perhaps someone else will supply it)</p>",
        "id": 167068723,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559388848
    },
    {
        "content": "<p>Certainly Polonius is flow-sensitive</p>",
        "id": 167068726,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559388857
    },
    {
        "content": "<blockquote>\n<p>I don't believe it is context sensitive in the usual sense, because it is intra-procedural (not inter-procedural).</p>\n</blockquote>\n<p>I guess I think this is more of a N/A than anything else. The user kind of gives us, in the form of function signatures, the \"summary\" of the effects of our callees.</p>",
        "id": 167068732,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559388890
    },
    {
        "content": "<blockquote>\n<p>That said, formulating Polonius as a type system <em>is</em> a bit tricky. You may want to check out the work that <span class=\"user-mention silent\" data-user-id=\"127262\">Aaron Weiss</span> has been doing for some inspiration in what that might look like.</p>\n</blockquote>\n<p>the basic idea though is that you have an environment that is changing as you move through the control flow</p>",
        "id": 167068744,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559388924
    },
    {
        "content": "<p>your subtyping rule had no environment at all, that doesn't work</p>",
        "id": 167068746,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559388938
    },
    {
        "content": "<p>I feel like if this is going to be part of your thesis it's...probably out of scope</p>",
        "id": 167068790,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559388971
    },
    {
        "content": "<p>That is, I would probably try to formulate polonius more in terms of a static analysis than a type system</p>",
        "id": 167068793,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559388993
    },
    {
        "content": "<p>Answering <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>'s call for a link: the latest version of the paper is available <a href=\"https://aaronweiss.us/pubs/draft19-oxide.pdf\" target=\"_blank\" title=\"https://aaronweiss.us/pubs/draft19-oxide.pdf\">on my website</a>, but there's a bunch of ongoing changes that have started in the (unreleased and not-very-human-readable) tech report first. So, if there's not an urgent need to look at this stuff, there ought to be a new version on my website (and arXiv) in a little over a month.</p>",
        "id": 167216415,
        "sender_full_name": "Aaron Weiss",
        "timestamp": 1559585995
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127262\">@Aaron Weiss</span> Thank you! I have skimmed the draft of your Oxide paper, in fact it's one of the first ones I read for my background section, but I haven't nearly digested it yet. The type theory is far above my head, but I think explaining that is one of the things my subject reviewer is good for :)</p>",
        "id": 167230568,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1559595028
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> if you have any questions that they can’t answer (or that you’d rather ask me anyway), I’m happy to help!</p>",
        "id": 167239230,
        "sender_full_name": "Aaron Weiss",
        "timestamp": 1559602031
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127262\">@Aaron Weiss</span> Thank you! It's not urgent; the deadline for my thesis is roughly August or so, give or take 20 days, and nothing really depends on the theoretical parts, so it's not blocking anything. While you are here though, do you have any suggestions for introductory reading on type theory? They didn't do a great job of that in my programming language semantics course, and I don't really know where to start</p>",
        "id": 167275564,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1559641450
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> <a href=\"https://www.cis.upenn.edu/~bcpierce/tapl/\" target=\"_blank\" title=\"https://www.cis.upenn.edu/~bcpierce/tapl/\">https://www.cis.upenn.edu/~bcpierce/tapl/</a> is a good book if you haven't read it</p>",
        "id": 167276849,
        "sender_full_name": "centril",
        "timestamp": 1559642353
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> Thank you! I haven't</p>",
        "id": 167277386,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1559642725
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> <a href=\"http://www.cse.chalmers.se/edu/year/2018/course/DAT350/\" target=\"_blank\" title=\"http://www.cse.chalmers.se/edu/year/2018/course/DAT350/\">http://www.cse.chalmers.se/edu/year/2018/course/DAT350/</a> might also be a good resource</p>",
        "id": 167277470,
        "sender_full_name": "centril",
        "timestamp": 1559642817
    },
    {
        "content": "<p>Yeah, TAPL is the classic recommendation. Though, you may also like Bob Harper’s Principles and Foundations of Programming Languages (PFPL) which I’ve read... some of.</p>",
        "id": 167294343,
        "sender_full_name": "Aaron Weiss",
        "timestamp": 1559655753
    },
    {
        "content": "<p>Lectures from OPLSS on YouTube could prove useful too. Every year, they have some intro stuff on type theory, logical relations, etc.</p>",
        "id": 167294413,
        "sender_full_name": "Aaron Weiss",
        "timestamp": 1559655793
    },
    {
        "content": "<p>(the OPLSS lectures are <a href=\"https://www.youtube.com/channel/UCDe6N9R7U-RYWA57wzJQ2SQ\" target=\"_blank\" title=\"https://www.youtube.com/channel/UCDe6N9R7U-RYWA57wzJQ2SQ\">here</a>)</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"channel\" href=\"https://www.youtube.com/channel/UCDe6N9R7U-RYWA57wzJQ2SQ\" target=\"_blank\" title=\"https://www.youtube.com/channel/UCDe6N9R7U-RYWA57wzJQ2SQ\"><img src=\"https://i.ytimg.com/vi/channel/default.jpg\"></a></div>",
        "id": 167294630,
        "sender_full_name": "lqd",
        "timestamp": 1559655905
    },
    {
        "content": "<p>I guess I have my work cut out for me now. Thanks everyone!</p>",
        "id": 167301029,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1559659579
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/-SIPYnkgATvmMEMjYw5CB1dw/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">My (new) working title for the talk</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/-SIPYnkgATvmMEMjYw5CB1dw/pasted_image.png\" target=\"_blank\" title=\"My (new) working title for the talk\"><img src=\"/user_uploads/4715/-SIPYnkgATvmMEMjYw5CB1dw/pasted_image.png\"></a></div>",
        "id": 167461511,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1559809378
    },
    {
        "content": "<p>I really appreciate the timing of the  reformulated subset relations right before the talk. \"Hi err we have this formulation sort of but it doesn't work really and we have a new thing which probably does and might be faster but I didn't work on those so it's not <em>my</em> fault!\"</p>",
        "id": 167554652,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1559892729
    },
    {
        "content": "<p>(I honestly think this is funny and I'm not actually worried; it just shows the benefits of doing the reformulation in a declarative and easily iterated-on language to begin with)</p>",
        "id": 167554657,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1559892773
    },
    {
        "content": "<p>I personally think <a href=\"/user_uploads/4715/SsfVehr9y4sOKQtNjs44SG-Q/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">this joke is the high point of my presentation</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/SsfVehr9y4sOKQtNjs44SG-Q/pasted_image.png\" target=\"_blank\" title=\"this joke is the high point of my presentation\"><img src=\"/user_uploads/4715/SsfVehr9y4sOKQtNjs44SG-Q/pasted_image.png\"></a></div>",
        "id": 167830589,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1560242476
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1184\">@WG-polonius</span> Hi! This is a draft of my presentation for tomorrow (<a href=\"/user_uploads/4715/dNLl9xEXyUdnH8Xo0PObRq7H/Polonius-Presentation.pdf\" target=\"_blank\" title=\"Polonius-Presentation.pdf\">animated</a>, <a href=\"/user_uploads/4715/RJVvTwYd2DjOXTOisFiGbkqD/Polonius-Presentation-no-animations.pdf\" target=\"_blank\" title=\"Polonius-Presentation-no-animations.pdf\">no animations</a>). I'd like some feedback if you have the time, in particular on terminology and technical details of my examples to make sure I'm not completely off.</p>",
        "id": 167836011,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1560247510
    },
    {
        "content": "<p>(I might have to axe some things)</p>",
        "id": 167836022,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1560247528
    },
    {
        "content": "<p>Update: nope, I'm within my time budget if I don't go overboard explaining the datalog</p>",
        "id": 167838468,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1560249988
    },
    {
        "content": "<p>Also I think I might have overdone a) the Hamlet references and b) the number of animations</p>",
        "id": 167838490,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1560250023
    },
    {
        "content": "<p>looks good to me:)</p>",
        "id": 167874802,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560276494
    },
    {
        "content": "<p>(same for me :)</p>",
        "id": 167875021,
        "sender_full_name": "lqd",
        "timestamp": 1560276613
    },
    {
        "content": "<p>Thanks! I survived the presentation and I think it went all right. Though the person after me introduced Soufflé, Doop, and Datalog itself so the ordering could perhaps have been better.</p>",
        "id": 167950229,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1560348467
    },
    {
        "content": "<p>I could really have used that in my presentation in stead of just saying “this is what Datalog looks like but I don’t have time to explain the details”</p>",
        "id": 167950317,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1560348515
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127262\">@Aaron Weiss</span> I have a question about Oxide, if you have the time. Reading the type inference rules, I don't understand how the unification of reference types upon assignment (T-Assign) works. As I understand the assignment rule, it starts given a statement <code>x = y</code> where x, y are references, require that x and y unify as a prerequisite, and some evaluation of the RHS (which I'm not concerned with due to MIR). That makes sense to me. However, as I understand it, the type unification would merge the LHS and RHS' provenance variables into the resulting type tau-n, which I never see used again anywhere in the rule, and then update the mapping to...what? I would have expected the substitution-yielding subtyping of T-Let in stead.</p>",
        "id": 174885610,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1567606341
    },
    {
        "content": "<p>(I am basically trying to find the part of Oxide I need to prod to find the subtyping rule of Niko's first blog entry, in order to get to Polonius)</p>",
        "id": 174885683,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1567606390
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> you're asking pretty directly about the parts that were broken before, and that have (hopefully) been fixed in the latest version of Oxide. There's still unfortunately a bunch of work to be done though before we push out an updated draft. :\\</p>",
        "id": 174928558,
        "sender_full_name": "Aaron Weiss",
        "timestamp": 1567636045
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127262\">@Aaron Weiss</span> but that should be the same as in Polonius right? What I don’t understand (I think) is how a) variable liveness (and therefore loan liveness) comes into play and b) how loans ever get removed from provenance variables (corresponding to Polonius’ killed fact).</p>",
        "id": 174948563,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1567665163
    },
    {
        "content": "<p>What I’m trying to do is to hand-wave a bit and say “look Oxide is roughly the same as Polonius”</p>",
        "id": 174948583,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1567665218
    },
    {
        "content": "<p>Perhaps I should be looking at the operational semantics in stead, but I wanted to understand the typing judgements first.</p>",
        "id": 174948705,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1567665367
    },
    {
        "content": "<p>I can make the question somewhat simpler though; <a href=\"/user_uploads/4715/ixijL69e6wfWE93nE8lry8mY/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">in this rule, what happens to tau-n and where does tau come from?</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/ixijL69e6wfWE93nE8lry8mY/pasted_image.png\" target=\"_blank\" title=\"in this rule, what happens to tau-n and where does tau come from?\"><img src=\"/user_uploads/4715/ixijL69e6wfWE93nE8lry8mY/pasted_image.png\"></a></div>",
        "id": 174958760,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1567676848
    },
    {
        "content": "<p>\\tau_n is ignored because it's really using unification there as a sort of type compatibility, rather than actually caring about the result. Choosing to use \\tau_u in places-typ is essentially how you end up killing the loans that were present in \\tau_o (\\tau_n would contain loans from both \\tau_u and \\tau_o). The \\tau is actually \\overline{\\tau} and comes from computing places-typ there.</p>",
        "id": 174977443,
        "sender_full_name": "Aaron Weiss",
        "timestamp": 1567692904
    },
    {
        "content": "<p>In actuality though, this setup was confusing, and we've since changed it to more directly reflect this kind of \"overwriting\" behavior (as compared to the combining behavior that is present in the other uses of unification).</p>",
        "id": 174977593,
        "sender_full_name": "Aaron Weiss",
        "timestamp": 1567692977
    },
    {
        "content": "<p>So, in my latest (internal) draft, the rule doesn't quite look the same.</p>",
        "id": 174977627,
        "sender_full_name": "Aaron Weiss",
        "timestamp": 1567693006
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/KRVjquTdWSTInbFr-0Yr1TGn/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">It looks like this.</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/KRVjquTdWSTInbFr-0Yr1TGn/pasted_image.png\" target=\"_blank\" title=\"It looks like this.\"><img src=\"/user_uploads/4715/KRVjquTdWSTInbFr-0Yr1TGn/pasted_image.png\"></a></div>",
        "id": 174977640,
        "sender_full_name": "Aaron Weiss",
        "timestamp": 1567693016
    },
    {
        "content": "<p>the \\mathcal{L}^\\prime - \\mathcal{p} there (and the fact that the unification judgment, now written &lt;~, uses the overwrite (-) mode)  is more-or-less how we've implemented the kill rules.</p>",
        "id": 174977822,
        "sender_full_name": "Aaron Weiss",
        "timestamp": 1567693124
    },
    {
        "content": "<p>But like I said, there's still a bunch more work that I have to do before we actually push a whole updated thing (though I hope that we're finally closing in on something that is good overall).</p>",
        "id": 174977882,
        "sender_full_name": "Aaron Weiss",
        "timestamp": 1567693162
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127262\">@Aaron Weiss</span> I see, thank you. So what happens is that you first use unification to verify that the types of the assignment are compatible (e.g., I'm not trying to assign a tuple to an integer), and it doesn't modify the provenance variables. That makes sense to me.</p>\n<p>Ok, so then I just don't fully understand places-typ(pi, tau-u). I get that it expands to all paths rooted in pi and would return a set, which you use to update gamma with the new mapping and kill the old loans. I don't get where the new mapping is introduced, or what it is mapping to. I guess you want it to expand to pi's old mappings before assignment in order to catch the paths you want to overwrite?</p>",
        "id": 175047328,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1567760735
    },
    {
        "content": "<p>(Sorry for all the questions!)</p>",
        "id": 175047331,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1567760741
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1184\">@WG-polonius</span>  I now have a draft version of my thesis that I'm not completely embarrassed by and would appreciate any and all feedback on! In particular, I would appreciate feedback on technical aspects. Also, I apologize in advance for mangling the very pretty Oxide typing judgements.</p>\n<p><a href=\"/user_uploads/4715/ufu5BGNrkzVbV8FtkK3Tco6M/Albins-Thesis-draft-version.pdf\" target=\"_blank\" title=\"Albins-Thesis-draft-version.pdf\">Albins-Thesis-draft-version.pdf</a></p>",
        "id": 175065565,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1567777517
    },
    {
        "content": "<p>(It doesn't have the final numbers of my benchmarking re-run, but they should look like the ones in the current version)</p>",
        "id": 175065700,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1567777585
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> an in-text citation hygiene thing: you should probably just write four authors last names instead of writing three authors last names and \"et. al.\"</p>",
        "id": 175095902,
        "sender_full_name": "Aaron Weiss",
        "timestamp": 1567798072
    },
    {
        "content": "<p>Also, if you do want to make the typing rules a bit cleaner: you can add <code>\\,</code> <code>\\;</code> and <code>\\ </code> as spacing characters that will actually be rendered in math mode.</p>",
        "id": 175095971,
        "sender_full_name": "Aaron Weiss",
        "timestamp": 1567798097
    },
    {
        "content": "<p>Thank you; I'll look into both of them. All named citations are from \\citeauthor, but you can probably tweak how many authors it lets through</p>",
        "id": 175096333,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1567798380
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-group-mention\" data-user-group-id=\"1184\">@WG-polonius</span>  I now have a draft version of my thesis that I'm not completely embarrassed by and would appreciate any and all feedback on! In particular, I would appreciate feedback on technical aspects. Also, I apologize in advance for mangling the very pretty Oxide typing judgements.</p>\n<p><a href=\"/user_uploads/4715/ufu5BGNrkzVbV8FtkK3Tco6M/Albins-Thesis-draft-version.pdf\" target=\"_blank\" title=\"Albins-Thesis-draft-version.pdf\">Albins-Thesis-draft-version.pdf</a></p>\n</blockquote>\n<p>I see figure 2.1 and listing 2.1 are mixed up with each other</p>",
        "id": 175097596,
        "sender_full_name": "Tshepang Lekhonkhobe",
        "timestamp": 1567799302
    },
    {
        "content": "<p>same with figure 2.2 and listing 2.2</p>",
        "id": 175097740,
        "sender_full_name": "Tshepang Lekhonkhobe",
        "timestamp": 1567799435
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> I'll try to make some time to read the whole thing soon and send you some feedback if I can.</p>",
        "id": 175099220,
        "sender_full_name": "Aaron Weiss",
        "timestamp": 1567800540
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"204115\">Albin Stjerna</span> I'll try to make some time to read the whole thing soon and send you some feedback if I can.</p>\n</blockquote>\n<p>Thank you! :)</p>",
        "id": 175127995,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1567838001
    },
    {
        "content": "<p>Update: I presented today. I don't think my opponent, an electrical engineer who hasn't taken a compilers course and who clearly didn't spend a lot of time preparing questions (the first one was \"what real-world problem does this solve?\"), ever understood most of it, but people ate the cookies I made, laughed at most of the jokes, and nobody threw tomatoes so overall I think it went all right.</p>",
        "id": 176969253,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1569874240
    },
    {
        "content": "<p>what is <em>opponent</em> <span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span></p>",
        "id": 177024942,
        "sender_full_name": "Tshepang Lekhonkhobe",
        "timestamp": 1569908185
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119529\">@Tshepang Lekhonkhobe</span>: basically another student who is responsible for reading my thesis draft, give me feedback on it and prepare questions for my presentation.</p>",
        "id": 177027054,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1569910930
    },
    {
        "content": "<p>I've finally read the thesis, pretty cool. The stats parts was interesting to get an idea of somewhat typical inputs <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 177073620,
        "sender_full_name": "lqd",
        "timestamp": 1569948133
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> pg 33 you say \"we also excluded all functions that had no loans at all fromthe analysis, a surprisingly large portion; almost47%. \", is this data in your 3 078 110 lines (500MB) repo-stats.csv files you once shared with me ? (I ask because I'm seeing 63%)</p>",
        "id": 178115279,
        "sender_full_name": "lqd",
        "timestamp": 1571068612
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> I think I re-ran the analysis since then, but I think so</p>",
        "id": 178116076,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1571069184
    },
    {
        "content": "<p>I remember that the numbers changed anyway</p>",
        "id": 178116090,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1571069198
    },
    {
        "content": "<p>is this new csv available somewhere btw ?</p>",
        "id": 178116112,
        "sender_full_name": "lqd",
        "timestamp": 1571069223
    },
    {
        "content": "<p>Err, possibly</p>",
        "id": 178116154,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1571069264
    },
    {
        "content": "<p>(as I'm also planning some day to look at the slowest / biggest functions there, probably <code>rust-aaplus</code> or something)</p>",
        "id": 178116242,
        "sender_full_name": "lqd",
        "timestamp": 1571069340
    },
    {
        "content": "<p>How did I send it last time?</p>",
        "id": 178116244,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1571069340
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>$ wc -l repo-stats.csv\n 3939484 repo-stats.csv\n$ du -h repo-stats.csv\n663M    repo-stats.csv\n</pre></div>",
        "id": 178116264,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1571069361
    },
    {
        "content": "<p>here <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/performance/near/171462851\" title=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/performance/near/171462851\">https://rust-lang.zulipchat.com/#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/performance/near/171462851</a></p>",
        "id": 178116392,
        "sender_full_name": "lqd",
        "timestamp": 1571069466
    },
    {
        "content": "<p>yeah seems like a newer one, 800K more functions or so</p>",
        "id": 178116446,
        "sender_full_name": "lqd",
        "timestamp": 1571069521
    },
    {
        "content": "<p>I'm uploading it now! :)</p>",
        "id": 178116529,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1571069567
    },
    {
        "content": "<p>awesome, thank you</p>",
        "id": 178116583,
        "sender_full_name": "lqd",
        "timestamp": 1571069633
    },
    {
        "content": "<p>the biggest outliers probably haven't changed since then though ?</p>",
        "id": 178116639,
        "sender_full_name": "lqd",
        "timestamp": 1571069650
    },
    {
        "content": "<p>Probably not, but let's find out!</p>",
        "id": 178116675,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1571069692
    },
    {
        "content": "<p>I had</p>\n<div class=\"codehilite\"><pre><span></span>highest `borrow_region`: 4049 - imgui-ext parser-emmit_tag_tokens\nhighest `cfg_edge`: 308072 - fastcmp {{impl}}-feq\nhighest `invalidates`: 4518016 - capstone-rs {{impl}}[528]-fmt\nhighest `killed`: 1790 - imgui-ext parser-emmit_tag_tokens\nhighest `regions`: 41175 - gleam ffi-{{impl}}[1]-load_with\nhighest `cfg nodes`: 21678 - fastcmp {{impl}}-feq\n\nhighest `min(3) Naive runtime`: 779.1390095889801 - rust-aaplus aaelp2000-G_ELP10\nhighest `min(3) Hybrid runtime`: 777.7702879499411 - rust-aaplus aaelp2000-G_ELP10\nhighest `min(3) DatafrogOpt runtime`: 768.0480983849848 - rust-aaplus aaelp2000-G_ELP10\n</pre></div>",
        "id": 178117177,
        "sender_full_name": "lqd",
        "timestamp": 1571070097
    },
    {
        "content": "<p><a href=\"https://we.tl/t-cdzolRegZi\" target=\"_blank\" title=\"https://we.tl/t-cdzolRegZi\">https://we.tl/t-cdzolRegZi</a></p>",
        "id": 178117314,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1571070191
    },
    {
        "content": "<p>There, the new one</p>",
        "id": 178117319,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1571070195
    },
    {
        "content": "<p>thanks a bunch</p>",
        "id": 178117337,
        "sender_full_name": "lqd",
        "timestamp": 1571070221
    },
    {
        "content": "<p>your loans and borrow_regions columns seem ... strange ? how are you computing loans ?</p>",
        "id": 178117584,
        "sender_full_name": "lqd",
        "timestamp": 1571070456
    },
    {
        "content": "<p>(or maybe the columns changed between the two, I'll check that haha)</p>",
        "id": 178117681,
        "sender_full_name": "lqd",
        "timestamp": 1571070544
    },
    {
        "content": "<p>ah yes ofc it was that, sneaky :)</p>",
        "id": 178117726,
        "sender_full_name": "lqd",
        "timestamp": 1571070599
    },
    {
        "content": "<p>(still looks like 60+% without loans, most likely const/statics/promoted)</p>",
        "id": 178118440,
        "sender_full_name": "lqd",
        "timestamp": 1571071093
    },
    {
        "content": "<p>slowest seem to be in <code>rust-unic</code> now though, only 295</p>",
        "id": 178118480,
        "sender_full_name": "lqd",
        "timestamp": 1571071135
    },
    {
        "content": "<p>aaplus must have OOM-ed :)</p>",
        "id": 178118505,
        "sender_full_name": "lqd",
        "timestamp": 1571071153
    },
    {
        "content": "<p>loving the <code>highest universal_region: 125 - gll parse_grammar-{{impl}}[49]-all-{{closure}}[1]</code> auto generated code</p>",
        "id": 178118876,
        "sender_full_name": "lqd",
        "timestamp": 1571071429
    },
    {
        "content": "<p>/me blinks at highest cfg_edge: 2152391 - zip_codes ZIP_CODES</p>",
        "id": 178119290,
        "sender_full_name": "lqd",
        "timestamp": 1571071787
    },
    {
        "content": "<p>Yes there are a few...odd ones there</p>",
        "id": 178129768,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1571080219
    },
    {
        "content": "<p>Ok, so as I mentioned, Tobias wasn't happy with my thesis. The sunny side of this is that one of the things he came down on really hard was my use of Stupid Jargon (my words), and with some luck one of the things I will produce is very concrete examples for when facts are emitted in a (hopefully) human-readable format. Which is, I guess, great for Polonius documentation, and also makes it worth putting some effort into</p>",
        "id": 178461067,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1571394099
    },
    {
        "content": "<p>I also have a question about MIR that's been bugging me. So it says in the RFC that MIR is \"static single assignment except for borrow expressions\", but as far as I can tell it's not at all in SSA form. Assigning to the same variable multiple times does not introduce more temporaries?</p>",
        "id": 178461280,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1571394324
    },
    {
        "content": "<p>As part of clearing up my thesis, I have made a table of the facts I currently use, with examples. Does anyone see anything wrong with it? <a href=\"/user_uploads/4715/MB9lLXq_tvTPgBqgFBGnqwUt/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/MB9lLXq_tvTPgBqgFBGnqwUt/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/4715/MB9lLXq_tvTPgBqgFBGnqwUt/pasted_image.png\"></a></div>",
        "id": 179346355,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1572366329
    },
    {
        "content": "<p>(at a glance, I think <code>killed</code> and <code>invalidates</code> <em>may be</em> too similar, it's not about the same loans IIRC)</p>",
        "id": 179348732,
        "sender_full_name": "lqd",
        "timestamp": 1572367787
    },
    {
        "content": "<p>I <em>am</em> having some trouble keeping them apart, but you mean for pedagogical reasons?</p>",
        "id": 179360112,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1572374100
    },
    {
        "content": "<p>Honestly I realised I didn't fully understand <code>killed</code>, and had to try some different versions of the same code to get a feeling for it</p>",
        "id": 179360195,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1572374156
    },
    {
        "content": "<p>Ok, I think I understand. However, I don't really understand what loan would be <code>killed</code> in this case, the one of <code>x</code>or the one of <code>y</code>?:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">random</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>Looking at the actual MIR and Polonius facts for that case, the shuffling and re-borrowing makes me have a hard time figuring out what's going on.</p>",
        "id": 179435684,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1572444831
    },
    {
        "content": "<p>The case where <code>killed</code> facts actually matter is something like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"nc\">T</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">r</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">r</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\">          </span><span class=\"c1\">// Kills the loan on the line above.</span>\n</pre></div>",
        "id": 179468983,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1572464278
    },
    {
        "content": "<p>They're generated in a lot of other cases as well, but usually if there's a live loan that's killed it's also invalidated, which results in an error.</p>",
        "id": 179469095,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1572464363
    },
    {
        "content": "<p>Ok, so it basically covers some cases but not all. I see!</p>",
        "id": 179611741,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1572601455
    },
    {
        "content": "<p>(I have precisely that example in my thesis)</p>",
        "id": 179611748,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1572601475
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 179611750,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1572601478
    },
    {
        "content": "<p>Me: \"Oh no I'm really behind on the work on my thesis\"<br>\nAlso me: <a href=\"/user_uploads/4715/cIUxhLaDuZyFXD58iKotML6a/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/cIUxhLaDuZyFXD58iKotML6a/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/4715/cIUxhLaDuZyFXD58iKotML6a/pasted_image.png\"></a></div>",
        "id": 179620597,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1572610554
    }
]