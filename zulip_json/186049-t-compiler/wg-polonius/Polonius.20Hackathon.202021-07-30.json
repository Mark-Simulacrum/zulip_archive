[
    {
        "content": "<p>Hey, so it's official! We're having a 4h Polonius Hackathon, starting at <time datetime=\"2021-07-30T14:00:00Z\">2021-07-30T10:00:00-04:00</time>, subject to the caveat that this is the last day before I take a vacation and hence if something urgent comes up .. well .. that may interfere. <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> and <span class=\"user-mention\" data-user-id=\"204115\">@Amanda Stjerna</span> will participate, but if there are other folks who might be interested, comment on this topic and we'll talk about whether we can find a suitable task.</p>",
        "id": 245968502,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626273350
    },
    {
        "content": "<p>I'd like to, though I still have some question about polonius.</p>",
        "id": 246674177,
        "sender_full_name": "lengyijun",
        "timestamp": 1626835609
    },
    {
        "content": "<p>I'll be around then. Hopefully it goes better than my last attempt <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span>.</p>",
        "id": 246776651,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1626900635
    },
    {
        "content": "<p>here's a sample of what's been on my mind (some for the last 3 years) that I thought could be interesting tasks and discussion points for the next sprint:</p>\n<div class=\"codehilite\"><pre><span></span><code>- catch up\n\n- update on john harrison discussions: even if it&#39;s not yet at the polonius topic and only discussed chalk,\n  we depend on chalk so it&#39;s of interest\n\n- plan for higher ranked subtyping and chalk interaction: this blocks us on chalk, can we do something about it ? can we do\n  something similar in spirit to what was done to the trait solver to support GAT without waiting on chalk: local changes that\n  sidestep the issue. If this is more about the datalog implementation than the model itself, we can talk about moving off of\n  datalog.\n\n - (edit: done) *** make a rustc branch to update fact generation to current polonius master, so that people can work\n\n - reviewing and landing the subset errors PR\n - reviewing the already landed docs PR\n - talking about the work dylan has done on docs/book\n - talking about the WIP PR removing the materialization of placeholders&#39; liveness at all points, and possible datafrog\n   improvements to make it less painful\n\n - ** removing the Locations::All hack: an alternative to remy&#39;s &quot;outlives_everywhere&quot; relation to fix the fact generation\n   OOMs, and fixing a big efficiency problem since that&#39;s &gt;95% of the 860K subsets in clap (33k are regular ones; unknown\n   if these stats are representative or not) especially in the datalog model like all &quot;things are true at each point&quot; are\n   (niko has already started on this)\n\n - model: reachability/odisseus. loans are not fundamental IMO, loans and issuing/introducing origins are bijective,\n          origins are not really sets of loans (as we saw with the equality variant) (already in progress)\n - model: SSA -&gt; arielb&#39;s, dylan&#39;s explorations\n - model explorations: equality (tease out the interesting things buried among things that didn&#39;t work out in the\n   equality variant, esp to fix the current &quot;polonius imprecision&quot;)\n\n - cfg compression: removing the need for 2 points per MIR statement (I guess these exist because of datalog constraints on the needed ordering) and check\n   if it&#39;s actually needed in to have both in all analyses and if we can avoid that easily (move/init, liveness)\n - cfg compression (intra-block): limiting intra-block edges to where they matter (old PR experiment) and removing the others\n - cfg compression (inter-block): computing subsets/loans on cfg blocks/SCCs (thoughts and experiments have been\n   done by remy and dylan)\n - subset graph compression: computing subsets/loans over subset SCCs\n - making loc ins a bunch of reachability queries over the cfg and subset condensation graphs (already in progress)\n\n - * move/init analysis:\n   - * debugging move/init analysis (possibly beginner friendly)\n   - * completing move/init analysis, partial moves and the likes\n   - make move errors early return in `compute` (beginner friendly)\n   - understanding the current limitations of move/init analysis, making rustc tests pass with it, validating it\n   - maybe bypass move/init + liveness ? going directly to loan analysis (possibly resurrecting some of the initial fact\n     generation code) (possibly beginner friendly)\n   - add move/init facts to test parser (beginner friendly ?)\n\n - test parser: move away from lalrpop (beginner friendly)\n - improve tests and validation: more tests, more features in the test framework, refactor tests (/tests, modules per\n   feature/analysis), make it possible to add tests and run them without compiling using text files with the test facts format\n   (some of this is beginner friendly)\n\n - benchmark and stats from amanda\n - make latest polonius master thesis pdf available again ? (the zulip link s3 storage doesn&#39;t work anymore)\n\n - enriching the data from rustc to polonius: similar effort to the shared type library, we&#39;re missing a lot of info (SCCs, CFG\n   blocks, dominator info, etc) that is already computed\n\n - working on sharing info between LocIns and Naive (for testing purposes), LocIns and Opt in the Hybrid variant\n   (already in-progress; also niko&#39;s comment in GH issues)\n\n - beginner friendly: fix typos in rules, check that they match the hackmd, number the rules so that they&#39;re easier to refer to\n - beginner friendly: update the &quot;state of ui tests&quot; to the most recent version of polonius and ui test suite (and also for the PR about subset errors)\n\n----------\nupdate 1:\n\n- polonius debugging / visualization: either in polonius, or on rustc à la -Zdump-mir=polonius including some facts in the mir dump\n- more stats and logging/querying of provenance information in datafrog (*some* hacky work has been done about fact logging)\n- talk about Vytautas&#39; https://github.com/rust-lang/rust/pull/86977 and in general Polonius users like prusti: what kind of stability do we want to maintain for users who rely on polonius implementation details like the facts structure and output. Also in general, should people be using polonius like this, or in other formal methods work (as what somewhat advertised in the recent verification workshop), or the visualization work in another thread: with its known bugs and imprecision, and incompleteness, could we quickly discuss these kinds of things to ensure they&#39;re not being built on faulty foundations ?\n- make polonius take ownership of the facts to stop cloning them (and other assorted fact changes, like changing ordering when the rules expect a certain key first) (beginner friendly)\n\n----------\nupdate 2:\n- model discussion about features we&#39;ve at least talked about: interaction with variance (there&#39;s probably nothing\n  to be done on our side here), or with member constraints (which are more directly related)\n- the rustc UI tests seem to show differences with NLL output for some &#39;static related errors, closures, or some implementations dealing with higher-ranked things: review the existing blessed test expectations in these areas, and try to understand/reduce them to see if the differences are in the rules, the output data, the input data, or in diagnostics (somewhat beginner friendly).\n\n\n----------\nupdate 3:\n- this one is for dylan: van Emde Boas layout for static/input relations in datafrog :joy:\n- some PRs have been opened recently in datafrog\n- try using soufflé (likely beginner friendly) dylan and rémy have souflé .dl files for the analyses IIRC (or at least a way to have them but could require dumping some of the liveness data from that part of the process)\n</code></pre></div>",
        "id": 246830005,
        "sender_full_name": "lqd",
        "timestamp": 1626949462
    },
    {
        "content": "<p>the ones with  a star are higher priority (and I plan on doing the 3-star task before next week, so that no one is blocked on it), there are also some ideas marked \"beginner friendly\"</p>",
        "id": 246830068,
        "sender_full_name": "lqd",
        "timestamp": 1626949512
    },
    {
        "content": "<p>I likely have also missed some things</p>",
        "id": 246830223,
        "sender_full_name": "lqd",
        "timestamp": 1626949617
    },
    {
        "content": "<p>let everyone know if you also have ideas and we can add them to an agenda and decide either before or at the beginning of the sprint :)</p>",
        "id": 246830235,
        "sender_full_name": "lqd",
        "timestamp": 1626949625
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"204115\">@Amanda Stjerna</span> <span class=\"user-mention\" data-user-id=\"389101\">@lengyijun</span> <span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span> pinging just so you know about these ideas above in advance for the polonius sprint, please take a look</p>",
        "id": 246830453,
        "sender_full_name": "lqd",
        "timestamp": 1626949797
    },
    {
        "content": "<p>I have a suggestion on visualization of polonius.</p>\n<p>The graphviz file generated by <code>--graphviz-file</code> doesn't contain mir statements.<br>\nIt's inconvenient for debugging.<br>\nI suggest to put mir statements inside the dot file.</p>\n<h1>Possible approach</h1>\n<p>Add a <code>dump-polonius</code> parameter to rustc.<br>\nRustc generate the graphviz file based on intermediate mir and polonius output.</p>",
        "id": 246835972,
        "sender_full_name": "lengyijun",
        "timestamp": 1626954477
    },
    {
        "content": "<p>the problem is there are no mir statements in polonius to include in this graphviz file</p>",
        "id": 246841618,
        "sender_full_name": "lqd",
        "timestamp": 1626958151
    },
    {
        "content": "<p>but this has been suggested before yes, for the same reasons</p>",
        "id": 246841636,
        "sender_full_name": "lqd",
        "timestamp": 1626958163
    },
    {
        "content": "<p>what we were thinking at the time was more of a similar mechanism to the NLL dump-mir but including polonius facts</p>",
        "id": 246841665,
        "sender_full_name": "lqd",
        "timestamp": 1626958181
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Polonius.20Hackathon.202021-07-30/near/246830005\">said</a>:</p>\n<blockquote>\n<p>here's a sample of what's been on my mind (some for the last 3 years) that I thought could be interesting tasks and discussion points for the next sprint:</p>\n<p><div class=\"codehilite\"><pre><span></span><code> - test parser: move away from lalrpop (beginner friendly)\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Can you expand a bit more on this, in particular whether there has already been discussion on what to move _to_? Parsing could be a small thing I could help with on my own, and it's something that sounds like I don't need to have all of rustc set up (I'm moving this week-end, so there's some other things I'll need to set up again first). </p>\n<p>I'm also interested to help in other areas on the Polonius side. Though there, while I've read many of the post, notes and talks on Polonius, I'd probably need more guidance regarding the actual code.</p>",
        "id": 246844883,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1626959877
    },
    {
        "content": "<p>it's just an idea I've had, and we can discuss it. The main requirement for me would be: moving to something that compiles faster at the very least, and that compiles <em>fast</em> if at all possible. Could be <code>nom</code> or something else.</p>",
        "id": 246857288,
        "sender_full_name": "lqd",
        "timestamp": 1626965307
    },
    {
        "content": "<p>note that hacking on polonius doesn't usually require all of rustc set up (though it sometimes is indispensable of course) that's one of the points of the whole librarification effort :)</p>",
        "id": 246857441,
        "sender_full_name": "lqd",
        "timestamp": 1626965384
    },
    {
        "content": "<p>Yes I know, AFAIK it is mainly fact generation that is inside rustc? It's not a problem in the long run, I've just heard that the setup takes a while and I'll have to take my PC down tomorrow to move it over ^^</p>",
        "id": 246887066,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1626978462
    },
    {
        "content": "<p>I'd like to look into this next week. Does the hackathon involve a call or similar that I should be present for (if so, where)? Or is the plan to just all work at the same time</p>",
        "id": 246887539,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1626978658
    },
    {
        "content": "<p>probably both</p>",
        "id": 246889924,
        "sender_full_name": "lqd",
        "timestamp": 1626979792
    },
    {
        "content": "<p>e.g. at least have a call at the beginning: it'll be higher bandwidth to discuss what to do, what not to do, whether it's listed in the ideas above or not -- and also how to do so. </p>\n<p>Before working how people prefer, either on their own, using zulip, etc. we could have a call running for longer to allow more discussion, but not everyone can be in an environment for long calls.</p>",
        "id": 246890190,
        "sender_full_name": "lqd",
        "timestamp": 1626979939
    },
    {
        "content": "<p>we'll see how it goes :) don't feel obligated to attend a call or anything</p>",
        "id": 246890343,
        "sender_full_name": "lqd",
        "timestamp": 1626980041
    },
    {
        "content": "<p>Alright, thanks! If there is one I'd like to attend at least to introduce myself so you know who I am, since I'm new. Looking forward to it!</p>",
        "id": 246892118,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1626981008
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Polonius.20Hackathon.202021-07-30/near/246830068\">said</a>:</p>\n<blockquote>\n<p>(and I plan on doing the 3-star task before next week, so that no one is blocked on it)</p>\n</blockquote>\n<p>here it is, a branch updating rustc to the current polonius master with the new relation names <a href=\"https://github.com/lqd/rust/tree/polonius-master\">https://github.com/lqd/rust/tree/polonius-master</a></p>",
        "id": 246900549,
        "sender_full_name": "lqd",
        "timestamp": 1626985530
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"389101\">lengyijun</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Polonius.20Hackathon.202021-07-30/near/246835972\">said</a>:</p>\n<blockquote>\n<p>I have a suggestion on visualization of polonius.</p>\n<p>The graphviz file generated by <code>--graphviz-file</code> doesn't contain mir statements.<br>\nIt's inconvenient for debugging.<br>\nI suggest to put mir statements inside the dot file.</p>\n<h1>Possible approach</h1>\n<p>Add a <code>dump-polonius</code> parameter to rustc.<br>\nRustc generate the graphviz file based on intermediate mir and polonius output.</p>\n</blockquote>\n<p>Prusti has code that does this, so if you want I can try moving that code to the Rust compiler. However, there is one problem: if we try to display all facts all the same time, the visualization becomes unreadable. Therefore, we need an option that controls what information should be included in the graphviz file.</p>\n<p>Let me know what are your thoughts on this.</p>",
        "id": 247023352,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1627069621
    },
    {
        "content": "<p>Excited for tomorrow!</p>\n<p>As you could probably guess from <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Quantifier.20elimination.20for.20HRTBs\">https://rust-lang.zulipchat.com/#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Quantifier.20elimination.20for.20HRTBs</a>, I'm most interested in reaching feature-parity with the in-tree borrow checker. IIUC, the biggest hurdle is HRTBs, but maybe that's just solved by chalk (though I'd like to understand exactly how), and we'd be better off thinking about other things. For example:</p>\n<blockquote>\n<ul>\n<li>the rustc UI tests seem to show differences with NLL output for some 'static related errors, closures, or some implementations dealing with higher-ranked things: review the existing blessed test expectations in these areas, and try to understand/reduce them to see if the differences are in the rules, the output data, the input data, or in diagnostics (somewhat beginner friendly).</li>\n</ul>\n</blockquote>\n<p>Besides that, here's some ideas from <span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span>'s list (thanks btw!) that I have thoughts about:</p>\n<ul>\n<li>\n<p>Handle placeholder liveness more efficiently: </p>\n<ul>\n<li><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> has basically solved this, it just needs sign-off from Niko.</li>\n<li>I  do think that having a datalog frontend that allows for succinct disjunctive rules would greatly benefit this type of stuff going forward, but a bespoke datalog compiler is a pretty big undertaking. My impression when I first got into Polonius was that it would be quite nice to have an interface to Souffle for faster prototyping. I'm interested in Niko's thoughts on this, because they switched away from Souffle relatively early in the development process. Perhaps it's not as nice as I'm making it out to be?</li>\n</ul>\n</li>\n<li>\n<p>Removing <code>Location::All</code>.</p>\n<ul>\n<li>I haven't looked into this more than superficially. Once again, it seems like we already know the correct approach (see <a href=\"https://github.com/rust-lang/rust/issues/50938\">#50938</a>), but we need to think through its consequences and make sure they're acceptable.</li>\n</ul>\n</li>\n<li>\n<p>SSA / region equality</p>\n<ul>\n<li>I was exploring an alternative execution model for Polonius where the subset relationships between regions (now origins) were fixed, and instead we created a brand new region for a given variable when its subset relationship changed in the CFG. That new region would be tied to the previous region for the variable based on whether it was live.  (There's a few more details, but I'm still loading all this back into cache)</li>\n<li>This was inpsired by SSA, but the transformation occurs on regions rather than variables.</li>\n<li>This handles equality constraints between regions quite nicely, since they no longer change across the CFG.</li>\n<li>However, I couldn't find a way to handle killed loans elegantly, and besides this is just an optimization, AFAICT the optimized variant is fast enough already. I don't think this is high priority.</li>\n</ul>\n</li>\n<li>\n<p>Move/init analysis</p>\n<ul>\n<li>This isn't a top priority for me RN, since it's trying to replicate the existing analyses in <code>rustc</code> rather than breaking new ground. However, I think this will change once librarification is further along, because it will be important for analysis/verification tools built on top of Polonius.</li>\n<li>As I understand it, datalog version is quite slow at the moment because the set of init/uninit facts is dense. I've looked at a few ways to mitigate this (all of them mentioned by <span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> already). We could ignore uninteresting points in the CFG (this may already be implemented?), incorporate basic blocks into the datalog rules to avoid explicitly computing intrablock init/uninit facts, or extend Datalog with an alternate way of storing facts (sets of tuples are not ideal for dense relations, Souffle has a bespoke data-structure for this).</li>\n<li>Hoping to talk with <span class=\"user-mention\" data-user-id=\"204115\">@Amanda Stjerna</span> about some of this, since I suspect they have more insight than I do.</li>\n</ul>\n</li>\n</ul>\n<p>Mostly, I'm interested in Polonius as a way to implement powerful, lifetime-aware alias/pointer analyses for use in optimization and formal verification. I assume that making Polonius a viable candidate for the actual upstream borrow-checker is an important part of this, but maybe we could be doing more to help the Prusti folks (and others working on formal verification) in the interim?</p>",
        "id": 247609442,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627577275
    },
    {
        "content": "<p>have you noticed the vEB layout item dedicated to you ? <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 247610493,
        "sender_full_name": "lqd",
        "timestamp": 1627577777
    },
    {
        "content": "<blockquote>\n<p>the optimized variant is fast enough already</p>\n</blockquote>\n<p>not quite. maybe with the ongoing work of taking advantage of the location-insensitive pre-pass as a quick filter (loans/subsets/etc) for the location-sensitive analysis.</p>",
        "id": 247611035,
        "sender_full_name": "lqd",
        "timestamp": 1627578034
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> I did, and chose to ignore it. I've moved on to Y-tries <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 247611067,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627578056
    },
    {
        "content": "<p>to give a ballpark of the opt analysis (and I've done these measurements last year so I may be misremembering) without counting the move/init analysis (which is incomplete, likely has bugs, and is very slow), analyzing the single function from clap takes seconds</p>",
        "id": 247611312,
        "sender_full_name": "lqd",
        "timestamp": 1627578172
    },
    {
        "content": "<p>(IIRC it does pass the location-insensitive test, so it's not like we'd have to run it here)</p>",
        "id": 247611346,
        "sender_full_name": "lqd",
        "timestamp": 1627578196
    },
    {
        "content": "<p>and NLL borrow checks the whole <code>clap</code> crate, which has in the hundreds of functions, including a handful that are as big as our benchmark (and some which are actually bigger) in 500ms or something</p>",
        "id": 247611531,
        "sender_full_name": "lqd",
        "timestamp": 1627578266
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Polonius.20Hackathon.202021-07-30/near/247611035\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>the optimized variant is fast enough already</p>\n</blockquote>\n<p>not quite. maybe with the ongoing work of taking advantage of the location-insensitive pre-pass as a quick filter (loans/subsets/etc) for the location-sensitive analysis.</p>\n</blockquote>\n<p>Ah, interesting. How fast is \"fast enough\" to you? Are we like, within an order of magnitude of NLL? As I understand it, there's some overhead due to fact generation because of how decoupled Polonius is so it's hard to do a totally fair measurement.</p>",
        "id": 247611642,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627578317
    },
    {
        "content": "<p>Got it (man I'm slow)</p>",
        "id": 247611755,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627578367
    },
    {
        "content": "<p>we'd really need to bring back amanda's benchmarks to answer this question with some confidence, but we purposefully chose to ignore perf in order to focus on correctness / completeness</p>",
        "id": 247611787,
        "sender_full_name": "lqd",
        "timestamp": 1627578380
    },
    {
        "content": "<p>tbf the \"hybrid analysis\" with the filtering I mentioned is very promising</p>",
        "id": 247611875,
        "sender_full_name": "lqd",
        "timestamp": 1627578421
    },
    {
        "content": "<p>but even with that I'm not sure yet how fast is fast enough :) but we can all talk about that tomorrow for sure if that's of interest to everyone</p>",
        "id": 247611955,
        "sender_full_name": "lqd",
        "timestamp": 1627578460
    },
    {
        "content": "<p>Yeah, for me \"fast enough\" for now is more like: Is this fast enough that testing modified rulesets locally isn't awful</p>",
        "id": 247612055,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627578487
    },
    {
        "content": "<p>yeah</p>",
        "id": 247612083,
        "sender_full_name": "lqd",
        "timestamp": 1627578504
    },
    {
        "content": "<p>Not \"we could upstream this today and users wouldn't notice\"</p>",
        "id": 247612088,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627578505
    },
    {
        "content": "<p>in that case it absolutely is already fast enough, for development purposes</p>",
        "id": 247612118,
        "sender_full_name": "lqd",
        "timestamp": 1627578517
    },
    {
        "content": "<p>we can easily improve the loc-ins analysis doing reachability queries, I remember it was an order of magnitude faster than the datalog one</p>",
        "id": 247612188,
        "sender_full_name": "lqd",
        "timestamp": 1627578553
    },
    {
        "content": "<p>(Move/init is <em>not</em> at the first point from experience, hence why I spent more time talking about optimizations)</p>",
        "id": 247612224,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627578571
    },
    {
        "content": "<p>agreed, of course :)</p>",
        "id": 247612271,
        "sender_full_name": "lqd",
        "timestamp": 1627578591
    },
    {
        "content": "<p>The hybrid approach is mostly blocked on implementation complexity right? Integrating new information into the optimized variant was definitely beyond my capabilities. You seem able to do it though.</p>",
        "id": 247612458,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627578672
    },
    {
        "content": "<p>all the points in your list sound good to me as well</p>",
        "id": 247612464,
        "sender_full_name": "lqd",
        "timestamp": 1627578675
    },
    {
        "content": "<p>yeah I've \"done it\" before, before adding subset errors</p>",
        "id": 247612538,
        "sender_full_name": "lqd",
        "timestamp": 1627578717
    },
    {
        "content": "<p>and then afterwards as well where it was more complicated, I don't think I've completed this though</p>",
        "id": 247612618,
        "sender_full_name": "lqd",
        "timestamp": 1627578746
    },
    {
        "content": "<p>there's some \"untested\" analysis about this from niko if you're interested in that, I hadn't had the time to check it out yet (since last summer ....)</p>",
        "id": 247612698,
        "sender_full_name": "lqd",
        "timestamp": 1627578792
    },
    {
        "content": "<p>I think I understand the \"core idea\" behind the optimized variant, but some documentation (both high-level and per-rule) would be really helpful, especially if you plan on onboarding more people. It was a pretty big hurdle for me.</p>",
        "id": 247612732,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627578805
    },
    {
        "content": "<p>another good point</p>",
        "id": 247612777,
        "sender_full_name": "lqd",
        "timestamp": 1627578827
    },
    {
        "content": "<p>(that we should add to a list)</p>",
        "id": 247612852,
        "sender_full_name": "lqd",
        "timestamp": 1627578845
    },
    {
        "content": "<p>Well, I dunno. It's easy to say \"you should document all of this\", but that might not actually be the best use of time if a) the rules are changing and b) you don't plan on onboarding in the near future.</p>",
        "id": 247612957,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627578899
    },
    {
        "content": "<p>That said, we should document <em>some</em> of this.</p>",
        "id": 247613014,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627578919
    },
    {
        "content": "<p>right, I mostly meant that we shouldn't forget this idea, and then decide tomorrow whether it's a good use of our time</p>",
        "id": 247613102,
        "sender_full_name": "lqd",
        "timestamp": 1627578958
    },
    {
        "content": "<p>but if we manage to have a more regular cadence, we should definitely both document and prepare for onboarding if we can</p>",
        "id": 247613183,
        "sender_full_name": "lqd",
        "timestamp": 1627578988
    },
    {
        "content": "<p>(I'm happy to do that part BTW, since it's quite good for my understanding and leaves y'all free to work on more interesting stuff)</p>",
        "id": 247613195,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627578993
    },
    {
        "content": "<p>I'll get you niko's comment about the hybrid analysis I'm thinking about</p>",
        "id": 247613345,
        "sender_full_name": "lqd",
        "timestamp": 1627579082
    },
    {
        "content": "<p>I think it's <a href=\"https://github.com/rust-lang/polonius/issues/153#issuecomment-669413867\">https://github.com/rust-lang/polonius/issues/153#issuecomment-669413867</a> but it's multiple comments really</p>",
        "id": 247613675,
        "sender_full_name": "lqd",
        "timestamp": 1627579226
    },
    {
        "content": "<p>there are also some introductory comments about the optimized variant ^^</p>",
        "id": 247614096,
        "sender_full_name": "lqd",
        "timestamp": 1627579378
    },
    {
        "content": "<p>(that you probably already know/understand)</p>",
        "id": 247614329,
        "sender_full_name": "lqd",
        "timestamp": 1627579446
    },
    {
        "content": "<p>Right, I've read that thread before. The idea is that you can use the results of the location-insensitive variant to prune facts in the location-sensitive version right? Like, there's no need to propagate loans that are known not to be involved in borrow errors?</p>",
        "id": 247614608,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627579567
    },
    {
        "content": "<p>exactly</p>",
        "id": 247614625,
        "sender_full_name": "lqd",
        "timestamp": 1627579579
    },
    {
        "content": "<blockquote>\n<p>I do think that having a datalog frontend that allows for succinct disjunctive rules would greatly benefit this type of stuff going forward, but a bespoke datalog compiler is a pretty big undertaking</p>\n</blockquote>\n<p>I'm also interested in this. Apart from the fact that it would obviously be some amount of effort to switch, from conversations I've had with someone working on DDLog (not Souffle, but from what I understand Frank McSherry was involved in creating the current <code>datafrog</code>), optimization of which joins are created when compiling the logical statements is still very much WIP in many places.</p>\n<p>As a user/developer, it would be very nice indeed though if such an interface existed that could be used for specifying at least many of the rules, while maybe for some it would still be necessary  to fall back to \"manual\" Rust code on some lower level (which DDLog for example can already do). There is a lot of value (to me, personally) in not having to leave the \"logic and rules\" part of thinking about an analysis like this, that is basically formal verification, to deal with implementation and efficiency. Whether this is realistic is a very different question, ofc.</p>",
        "id": 247614706,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1627579621
    },
    {
        "content": "<p>the loans that aren't involved in location-insensitive errors can't trigger location-sensitive errors</p>",
        "id": 247614710,
        "sender_full_name": "lqd",
        "timestamp": 1627579624
    },
    {
        "content": "<p>on this topic have you two seen \"my\" (mostly completely revamped by Vytautas really) <a href=\"https://github.com/lqd/datapond/\">https://github.com/lqd/datapond/</a> ?</p>",
        "id": 247614777,
        "sender_full_name": "lqd",
        "timestamp": 1627579660
    },
    {
        "content": "<p>(and similarly you can prune much of the subset graph downstream from the origins introducing these uninteresting loans)</p>",
        "id": 247615000,
        "sender_full_name": "lqd",
        "timestamp": 1627579757
    },
    {
        "content": "<p>(I'm glossing over things just to get the point across)</p>",
        "id": 247615065,
        "sender_full_name": "lqd",
        "timestamp": 1627579789
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"118594\">ecstatic-morse</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Polonius.20Hackathon.202021-07-30/near/247612732\">said</a>:</p>\n<blockquote>\n<p>I think I understand the \"core idea\" behind the optimized variant, but some documentation (both high-level and per-rule) would be really helpful, especially if you plan on onboarding more people. It was a pretty big hurdle for me.</p>\n</blockquote>\n<p>Also I'll just add to this that, as someone who has not (yet?) actively worked on Polonius, reading the optimized analysis did leave some things unclear even with the current comments. I can kind of make out that things like <code>dead_borrow_region_can_reach_dead</code> (and the initially very confusing <code>dead_borrow_region_can_reach_dead_1</code>, whose purpose is then explained in some later comment) are used to limit what has to be considered for other rules, but how _exactly_ they interact is harder to see.</p>",
        "id": 247615184,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1627579824
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Polonius.20Hackathon.202021-07-30/near/247613675\">said</a>:</p>\n<blockquote>\n<p>I think it's <a href=\"https://github.com/rust-lang/polonius/issues/153#issuecomment-669413867\">https://github.com/rust-lang/polonius/issues/153#issuecomment-669413867</a> but it's multiple comments really</p>\n</blockquote>\n<p>I'll try reading through this before tomorrow though, thanks for the link!</p>",
        "id": 247615241,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1627579859
    },
    {
        "content": "<p>(brb after dinner)</p>",
        "id": 247615299,
        "sender_full_name": "lqd",
        "timestamp": 1627579889
    },
    {
        "content": "<p>I have yes. My preference for an alternative datalog engine (as opposed to a frontend for datafrog) is due to some more advanced features (integer predicates, dense storage) that would be nontrivial to implement. While we're still in a prototype phase, it seems like we should direct resources towards the rulesets and not towards a datalog engine. However, disjunction, rule inlining, and leaploin could be done without too much effort in <code>datapond</code> I think, so it remains a perfectly viable option.</p>",
        "id": 247615575,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627580022
    },
    {
        "content": "<p>I remembered we talked about this last time, and had added \"try using soufflé\" to the list of possible things to talk about tomorrow</p>",
        "id": 247615884,
        "sender_full_name": "lqd",
        "timestamp": 1627580171
    },
    {
        "content": "<p>I suspect that once you get used to writing rules by hand using the datafrog API it's actually not too bad, and you do gain some additional flexibility (I think there's some manual filtering of facts that's not expressible in datalog or something?). But it's pretty hard to read compared to pure datalog, so it will be harder to onboard people. You (<span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span>) and <span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span>  are basically the only people qualified to evaluate that tradeoff I would say</p>",
        "id": 247615888,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627580175
    },
    {
        "content": "<p>Go eat!</p>",
        "id": 247615976,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627580197
    },
    {
        "content": "<p>Also <span aria-label=\"hi\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"hi\">:hi:</span> <span class=\"user-mention\" data-user-id=\"337115\">@Domenic Quirl</span>. I also find them pretty opaque. I suspect we could improve the state of things tomorrow.</p>",
        "id": 247616451,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627580320
    },
    {
        "content": "<p>Gladly. My understanding is probably not enough yet to add new, definitive statements myself (and I'm also set to spend some time on the fact parser), but I'd love to take this opportunity to understand them more <span aria-label=\"relaxed\" class=\"emoji emoji-263a\" role=\"img\" title=\"relaxed\">:relaxed:</span></p>",
        "id": 247616817,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1627580499
    },
    {
        "content": "<p>Yeah, I'm probably only 80% there myself. I think the rule-by-rule documentation is actually pretty good, but a top-level overview of why dying regions are important would have helped me.</p>",
        "id": 247617200,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627580650
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">           </span><span class=\"c1\">// Cleanup step: remove symmetries</span>\n<span class=\"w\">            </span><span class=\"c1\">// - remove origins which are `subset`s of themselves</span>\n<span class=\"w\">            </span><span class=\"c1\">//</span>\n<span class=\"w\">            </span><span class=\"c1\">// FIXME: investigate whether is there a better way to do that without complicating</span>\n<span class=\"w\">            </span><span class=\"c1\">// the rules too much, because it would also require temporary variables and</span>\n<span class=\"w\">            </span><span class=\"c1\">// impact performance. Until then, the big reduction in tuples improves performance</span>\n<span class=\"w\">            </span><span class=\"c1\">// a lot, even if we're potentially adding a small number of tuples</span>\n<span class=\"w\">            </span><span class=\"c1\">// per round just to remove them in the next round.</span>\n<span class=\"w\">            </span><span class=\"n\">subset_o1p</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">recent</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">borrow_mut</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">elements</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">retain</span><span class=\"p\">(</span><span class=\"o\">|&amp;</span><span class=\"p\">((</span><span class=\"n\">origin1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">origin2</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">origin1</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"n\">origin2</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>This is the \"manual filtering\" I was thinking of btw, it's definitely expressible in datalog.</p>",
        "id": 247617333,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627580717
    },
    {
        "content": "<p>and we can use leapers to do that more cleanly, when using leapjoins</p>",
        "id": 247617600,
        "sender_full_name": "lqd",
        "timestamp": 1627580860
    },
    {
        "content": "<p>there are some things that are inherited from NLLs, it is my recollection that the importance of dying regions is one of these things, but we can make sure of that tomorrow by asking niko</p>",
        "id": 247617849,
        "sender_full_name": "lqd",
        "timestamp": 1627580968
    },
    {
        "content": "<p>(my recollection is, but I could be misremembering: during NLL development, these edges were recognized as important, to accept some patterns, leading to more expressive code accepted by the MIR borrowck)</p>",
        "id": 247618645,
        "sender_full_name": "lqd",
        "timestamp": 1627581336
    },
    {
        "content": "<p>Oh, I wasn't aware that it was derived from NLL. The idea (as I understand it) is that so long as both origins are live, there's no need to eagerly propagate all their loans from one to the other. We can lazily traverse the subset relation among live regions for loans that are invalidated. This is no longer true once an origin dies, and the newly deceased origin could become live again, at which point any new member loans do not propagate back through prior subset relations.</p>",
        "id": 247619084,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627581541
    },
    {
        "content": "<p>(Oh man, I need to think a bit harder about how to phrase this. I suspect that is not clear at all)</p>",
        "id": 247619165,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627581576
    },
    {
        "content": "<p>my intuition is similar: loans are only propagated through the cfg via live origins, therefore when one dies, we try to see if it can reach another live origin to continue propagation. otherwise none of its contents will escape the dying point and we don't need to track it</p>",
        "id": 247619969,
        "sender_full_name": "lqd",
        "timestamp": 1627581910
    },
    {
        "content": "<p>I actually made things a bit more complicated above. If there's a subset relation <code>'0: '1</code>, but both those origins are live, there's no need to propagate loans from '1 to '0 (or the reverse? I forget the direction) because it's a borrow error if a loan is invalidated while <em>any</em> region it belongs to is live.</p>",
        "id": 247620298,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627582078
    },
    {
        "content": "<p>(yeah it propagates forward from '0 to '1)</p>",
        "id": 247620408,
        "sender_full_name": "lqd",
        "timestamp": 1627582112
    },
    {
        "content": "<p>And the fact that '1 is live means it will cause that borrow error before any of its supersets, so we can ignore them.</p>",
        "id": 247620499,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627582168
    },
    {
        "content": "<p>liveness doesn't really matter if you're talking about propagation at a single point though</p>",
        "id": 247620622,
        "sender_full_name": "lqd",
        "timestamp": 1627582218
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Polonius.20Hackathon.202021-07-30/near/247613675\">said</a>:</p>\n<blockquote>\n<p>I think it's <a href=\"https://github.com/rust-lang/polonius/issues/153#issuecomment-669413867\">https://github.com/rust-lang/polonius/issues/153#issuecomment-669413867</a> but it's multiple comments really</p>\n</blockquote>\n<p>In <a href=\"https://github.com/rust-lang/polonius/issues/153#issuecomment-669423499\">https://github.com/rust-lang/polonius/issues/153#issuecomment-669423499</a> niko writes</p>\n<blockquote>\n<p>In particular, when an origin goes dead, it will remove that origin, but also compute the transitive closure of subset relations and things that origin may have been involved in, so that if you have O1: O2: O3 and O2 goes dead, we can add a subset(O1, O3) tuple (we will also add any loans found in O2 to O3 at this time). This means that the optimized errors never have a complete picture of which loans belong to which origins, and we also don't know the full set of \"superset origins\".</p>\n</blockquote>",
        "id": 247620636,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1627582229
    },
    {
        "content": "<p>And further:</p>\n<blockquote>\n<p>This works out well for illegal access errors: for that purpose, we only care which loans are live, we don't care which origin they are found in. So we don't need to know those full sets.</p>\n</blockquote>",
        "id": 247620687,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1627582261
    },
    {
        "content": "<p>nice :)</p>",
        "id": 247620732,
        "sender_full_name": "lqd",
        "timestamp": 1627582295
    },
    {
        "content": "<p>(where, if I understand correctly, illegal access errors are the errors from \"regular\" loans and origins, as opposed to subset errors, which stem from placeholders?)</p>",
        "id": 247620866,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1627582351
    },
    {
        "content": "<p>(it remains to be seen whether that has any impact on diagnostics)</p>",
        "id": 247620886,
        "sender_full_name": "lqd",
        "timestamp": 1627582360
    },
    {
        "content": "<p>illegal subset errors are specifically about the absence of a declared relationship between universal regions / free regions / named lifetimes in function headers</p>",
        "id": 247621056,
        "sender_full_name": "lqd",
        "timestamp": 1627582446
    },
    {
        "content": "<p>(placeholders in polonius indeed) if such a subset relationship is found and it wasn't declared, it's an error</p>",
        "id": 247621114,
        "sender_full_name": "lqd",
        "timestamp": 1627582489
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Polonius.20Hackathon.202021-07-30/near/247620622\">said</a>:</p>\n<blockquote>\n<p>liveness doesn't really matter if you're talking about propagation at a single point though</p>\n</blockquote>\n<p>Not quite sure what you mean here. A borrow error happens when a loan is invalidated while an origin containing that loan is live.</p>",
        "id": 247621121,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627582492
    },
    {
        "content": "<p>sure</p>",
        "id": 247621151,
        "sender_full_name": "lqd",
        "timestamp": 1627582509
    },
    {
        "content": "<p>what I mean is that the loan will be propagated at that point regardless of liveness</p>",
        "id": 247621184,
        "sender_full_name": "lqd",
        "timestamp": 1627582524
    },
    {
        "content": "<p>and thei<br>\n<span class=\"user-mention silent\" data-user-id=\"118594\">ecstatic-morse</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Polonius.20Hackathon.202021-07-30/near/247620499\">said</a>:</p>\n<blockquote>\n<p>And the fact that '1 is live means it will cause that borrow error before any of its supersets, so we can ignore them.</p>\n</blockquote>\n<p>and that I'm not sure about this \"before\" here</p>",
        "id": 247621317,
        "sender_full_name": "lqd",
        "timestamp": 1627582579
    },
    {
        "content": "<p>Really? don't we only propagate loans into live origins?</p>\n<div class=\"codehilite\"><pre><span></span><code>            // origin_contains_loan_on_entry(origin, loan, point2) :-\n            //   origin_contains_loan_on_entry(origin, loan, point1),\n            //   !loan_killed_at(loan, point1),\n            //   cfg_edge(point1, point2),\n            //   origin_live_on_entry(origin, point2).\n</code></pre></div>",
        "id": 247621322,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627582580
    },
    {
        "content": "<p>ok so</p>",
        "id": 247621346,
        "sender_full_name": "lqd",
        "timestamp": 1627582599
    },
    {
        "content": "<p>loans are propagated in two ways</p>",
        "id": 247621369,
        "sender_full_name": "lqd",
        "timestamp": 1627582611
    },
    {
        "content": "<p>1) at a single point through subsets</p>",
        "id": 247621379,
        "sender_full_name": "lqd",
        "timestamp": 1627582618
    },
    {
        "content": "<p>2) between 2 points, like the rule you show, according to liveness</p>",
        "id": 247621408,
        "sender_full_name": "lqd",
        "timestamp": 1627582636
    },
    {
        "content": "<p>so at a single point a loan can flow in and out of dead origins, but not continue its path through the cfg without live origins</p>",
        "id": 247621576,
        "sender_full_name": "lqd",
        "timestamp": 1627582739
    },
    {
        "content": "<p>Right, but subset relations only get propagated between points for live origins, so 1) is also dependent on liveness but indirectly.</p>",
        "id": 247621606,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627582758
    },
    {
        "content": "<p>yeah but there can be subset relationships at a given point without them having been propagated</p>",
        "id": 247621638,
        "sender_full_name": "lqd",
        "timestamp": 1627582790
    },
    {
        "content": "<p>Only <code>subset_base</code> though</p>",
        "id": 247621702,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627582811
    },
    {
        "content": "<p>and their TC but yeah</p>",
        "id": 247621738,
        "sender_full_name": "lqd",
        "timestamp": 1627582836
    },
    {
        "content": "<p>(the transitive closure of <code>subset_base</code>)</p>",
        "id": 247621745,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627582841
    },
    {
        "content": "<p>^^</p>",
        "id": 247621754,
        "sender_full_name": "lqd",
        "timestamp": 1627582848
    },
    {
        "content": "<p>But when do we have a constraint in <code>subset_base</code> for an origin that isn't live?</p>",
        "id": 247621807,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627582880
    },
    {
        "content": "<p>it's my belief that most subsets are about dead origins</p>",
        "id": 247621868,
        "sender_full_name": "lqd",
        "timestamp": 1627582919
    },
    {
        "content": "<p>maybe \"most\" is a bit me projecting, but I was looking at this once and was surprised. even when loans are introduced</p>",
        "id": 247621956,
        "sender_full_name": "lqd",
        "timestamp": 1627582958
    },
    {
        "content": "<p>Hmm, that's interesting. My impression is that <code>origin_contains_loan_on_entry</code> is mostly about dead origins.</p>",
        "id": 247622011,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627582985
    },
    {
        "content": "<p>Not sure whether this is a meaningful disagreement or a semantic one</p>",
        "id": 247622067,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627583009
    },
    {
        "content": "<p>we'll need to validate these assumptions in any case :)</p>",
        "id": 247622084,
        "sender_full_name": "lqd",
        "timestamp": 1627583021
    },
    {
        "content": "<p>Because that's what \"remembers\" the loans that have been propagated across subset relations for regions that were formerly alive.</p>",
        "id": 247622170,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627583046
    },
    {
        "content": "<p>oh I'm not disagreeing with the core of what you're saying, to be clear. I'm sorry if I have given this impression !</p>",
        "id": 247622184,
        "sender_full_name": "lqd",
        "timestamp": 1627583052
    },
    {
        "content": "<p>My understanding of the optimized variant was that it delays propagating loans between origins that are still alive, because a borrow error will be created for whatever origin contains an invalidated loan. There's no need to find <em>all</em> live origins that contain the invalidated loan. (this is what I meant with \"before\", though it's not \"before\" in time, more like \"before\" when traversing the graph of subset relations)</p>",
        "id": 247622508,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627583208
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Polonius.20Hackathon.202021-07-30/near/247622184\">said</a>:</p>\n<blockquote>\n<p>oh I'm not disagreeing with the core of what you're saying, to be clear. I'm sorry if I have given this impression !</p>\n</blockquote>\n<p>Disagreeing is good if it furthers one of our understandings. For the record, you are one of the most pleasant people to disagree with I have encountered in a professional setting.</p>",
        "id": 247622673,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627583290
    },
    {
        "content": "<p>I don't think many would say the same about me :smiling:</p>",
        "id": 247622755,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627583338
    },
    {
        "content": "<p>our only disagreement is about vEB trees <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 247622777,
        "sender_full_name": "lqd",
        "timestamp": 1627583351
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"118594\">ecstatic-morse</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Polonius.20Hackathon.202021-07-30/near/247622067\">said</a>:</p>\n<blockquote>\n<p>Not sure whether this is a meaningful disagreement or a semantic one</p>\n</blockquote>\n<p>This was more about whether my hypothesis is testable.</p>",
        "id": 247622801,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627583365
    },
    {
        "content": "<p>(I have to leave for a quick meeting)</p>",
        "id": 247622844,
        "sender_full_name": "lqd",
        "timestamp": 1627583389
    },
    {
        "content": "<p>No worries. We should be having this conversation with Niko present anyways.</p>",
        "id": 247622919,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627583411
    },
    {
        "content": "<p>this paragraph <a href=\"https://gist.github.com/nikomatsakis/8bfda6c1119727e13ec6e98f33d2b696#future-directions-let-the-trait-solver-solve-higher-ranked-things\">https://gist.github.com/nikomatsakis/8bfda6c1119727e13ec6e98f33d2b696#future-directions-let-the-trait-solver-solve-higher-ranked-things</a> will be interesting wrt the chalk+polonius collaboration that we mentioned in passing earlier</p>",
        "id": 247629453,
        "sender_full_name": "lqd",
        "timestamp": 1627586767
    },
    {
        "content": "<p>(btw <span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span> since you mentioned Y-fast tries, I'll continue this chain with <code>lqdag</code>s if you enjoy compact data structures -- and which are <em>not</em> named after me :)</p>",
        "id": 247629867,
        "sender_full_name": "lqd",
        "timestamp": 1627586983
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Polonius.20Hackathon.202021-07-30/near/247629867\">said</a>:</p>\n<blockquote>\n<p>(btw <span class=\"user-mention silent\" data-user-id=\"118594\">ecstatic-morse</span> since you mentioned Y-fast tries, I'll continue this chain with <code>lqdag</code>s if you enjoy compact data structures -- and which are <em>not</em> named after me <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n</blockquote>\n<p>You're giving me too much credit, I definitely said Y-trie <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> . In my defense, I only skimmed that chapter.</p>",
        "id": 247630102,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627587093
    },
    {
        "content": "<p>which book are you thinking of btw ?</p>",
        "id": 247630326,
        "sender_full_name": "lqd",
        "timestamp": 1627587222
    },
    {
        "content": "<p>ODS ?</p>",
        "id": 247630352,
        "sender_full_name": "lqd",
        "timestamp": 1627587241
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Polonius.20Hackathon.202021-07-30/near/247630326\">said</a>:</p>\n<blockquote>\n<p>which book are you thinking of btw ?</p>\n</blockquote>\n<p>I actually think I learned about vEB tries from an MIT lecture series. I don't know if it's in ODS.</p>",
        "id": 247631539,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627587841
    },
    {
        "content": "<p>erik demaine's series ! so good</p>",
        "id": 247631639,
        "sender_full_name": "lqd",
        "timestamp": 1627587883
    },
    {
        "content": "<p>Haha yeah! He's the one that really made dynamic programming click for me as a concept. The \"optimal fingering for guitar\" example in particular</p>",
        "id": 247631983,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627588052
    },
    {
        "content": "<p>But now we're really off-topic</p>",
        "id": 247632009,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627588064
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116109\">Vytautas Astrauskas [he/him]</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Polonius.20Hackathon.202021-07-30/near/247023352\">said</a>:</p>\n<blockquote>\n<p>Prusti has code that does this, so if you want I can try moving that code to the Rust compiler. However, there is one problem: if we try to display all facts all the same time, the visualization becomes unreadable. Therefore, we need an option that controls what information should be included in the graphviz file.</p>\n<p>Let me know what are your thoughts on this.</p>\n</blockquote>\n<p>Another option would be to dump as much data as possible and then have a tool select parts of that data to generate various visualisations, ideally interactively, but that's not exactly the minimal viable product version.</p>\n<p>(Hi I'm preparing for the hackathon by, among other things, reading up on my enormous backlog).</p>",
        "id": 247698968,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1627646619
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Polonius.20Hackathon.202021-07-30/near/246890190\">said</a>:</p>\n<blockquote>\n<p>not everyone can be in an environment for long calls.</p>\n</blockquote>\n<p>I have sole custody of our puppy today for some slightly complicated reasons, so I can't be in long calls or even work unlimited bursts, but this is also why I start early to make up. Also: gosh darn it I'm rusty.</p>",
        "id": 247699152,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1627646729
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"118594\">Dylan MacKenzie (ecstatic-morse)</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Polonius.20Hackathon.202021-07-30/near/247609442\">said</a>:</p>\n<blockquote>\n<ul>\n<li>Move/init analysis<ul>\n<li>This isn't a top priority for me RN, since it's trying to replicate the existing analyses in <code>rustc</code> rather than breaking new ground. However, I think this will change once librarification is further along, because it will be important for analysis/verification tools built on top of Polonius.</li>\n<li>As I understand it, datalog version is quite slow at the moment because the set of init/uninit facts is dense. I've looked at a few ways to mitigate this (all of them mentioned by <span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> already). We could ignore uninteresting points in the CFG (this may already be implemented?), incorporate basic blocks into the datalog rules to avoid explicitly computing intrablock init/uninit facts, or extend Datalog with an alternate way of storing facts (sets of tuples are not ideal for dense relations, Souffle has a bespoke data-structure for this).</li>\n<li>Hoping to talk with <span class=\"user-mention silent\" data-user-id=\"204115\">Amanda Stjerna</span> about some of this, since I suspect they have more insight than I do.</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>Bold assumption!</p>\n<blockquote>\n<p>Mostly, I'm interested in Polonius as a way to implement powerful, lifetime-aware alias/pointer analyses for use in optimization and formal verification. I assume that making Polonius a viable candidate for the actual upstream borrow-checker is an important part of this, but maybe we could be doing more to help the Prusti folks (and others working on formal verification) in the interim?</p>\n</blockquote>\n<p>I think this is a great idea and that's also one of the things I hope to look into at my upcoming 6-month internship, which also is about extracting precisely that information. I'm getting the impression that there's a crowd lining up to get the sort of data Polonius consumes and, in some cases, produces intermittently, and that it would make sense and accelerate work on verification etc to provide a better interface to that, even if it's no-promises-made-holds-together-with-duct-tape quality.</p>",
        "id": 247699745,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1627647109
    },
    {
        "content": "<p>Also, if anyone's missed it, <a href=\"/user_uploads/4715/Lng_BM1wQiSsZVZlLnpNRQ8R/Thesis.pdf\">here's my thesis again</a></p>",
        "id": 247701396,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1627648258
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"204115\">Amanda Stjerna</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Polonius.20Hackathon.202021-07-30/near/247699152\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Polonius.20Hackathon.202021-07-30/near/246890190\">said</a>:</p>\n<blockquote>\n<p>not everyone can be in an environment for long calls.</p>\n</blockquote>\n<p>I can't be in long calls or even work unlimited bursts</p>\n</blockquote>\n<p>I doubt niko's able to do calls either</p>",
        "id": 247707158,
        "sender_full_name": "lqd",
        "timestamp": 1627651527
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> so I'm trying to catch up on all this :)</p>",
        "id": 247709660,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627652684
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"204115\">Amanda Stjerna</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Polonius.20Hackathon.202021-07-30/near/247699745\">said</a>:</p>\n<blockquote>\n<p>I'm getting the impression that there's a crowd lining up to get the sort of data Polonius consumes and, in some cases, produces intermittently, and that it would make sense and accelerate work on verification etc to provide a better interface to that, even if it's no-promises-made-holds-together-with-duct-tape quality.</p>\n</blockquote>\n<p>a bit scary, it's incomplete, doesn't always work, etc could be shaky grounds for serious formal work ? :)</p>",
        "id": 247709848,
        "sender_full_name": "lqd",
        "timestamp": 1627652772
    },
    {
        "content": "<p><span aria-label=\"hi\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"hi\">:hi:</span> all</p>",
        "id": 247710193,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627652939
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> you had a list of things early on, is that pulled out into a hackmd or something?</p>",
        "id": 247710425,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627653046
    },
    {
        "content": "<p>not atm but I'll do that</p>",
        "id": 247710439,
        "sender_full_name": "lqd",
        "timestamp": 1627653057
    },
    {
        "content": "<p>good</p>",
        "id": 247710448,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627653063
    },
    {
        "content": "<p>also one thing I'd like to discuss is \"next sprint timing\" :P</p>",
        "id": 247710470,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627653072
    },
    {
        "content": "<p>(it's <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Polonius.20Hackathon.202021-07-30/near/246830005\">https://rust-lang.zulipchat.com/#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Polonius.20Hackathon.202021-07-30/near/246830005</a> rn)</p>",
        "id": 247710475,
        "sender_full_name": "lqd",
        "timestamp": 1627653075
    },
    {
        "content": "<p><a href=\"https://hackmd.io/1t4CR635QKKFTRN-2qexsg\">https://hackmd.io/1t4CR635QKKFTRN-2qexsg</a></p>",
        "id": 247710621,
        "sender_full_name": "lqd",
        "timestamp": 1627653142
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> a sprint like 4 days, or 4h with a more regular cadence ?</p>",
        "id": 247710659,
        "sender_full_name": "lqd",
        "timestamp": 1627653163
    },
    {
        "content": "<p>what I meant is: is this a 1-off thing, or should we try again in a month or so :)</p>",
        "id": 247710693,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627653190
    },
    {
        "content": "<p>maybe too early to say</p>",
        "id": 247710711,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627653201
    },
    {
        "content": "<p>I guess I think we should try again</p>",
        "id": 247710742,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627653212
    },
    {
        "content": "<p>and that may affect our priorities a touch</p>",
        "id": 247710756,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627653219
    },
    {
        "content": "<p>if the second one, I've started vacation a couple hours ago, so won't be available in 2 weeks, but in 4 definitely</p>",
        "id": 247710757,
        "sender_full_name": "lqd",
        "timestamp": 1627653220
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"204115\">Amanda Stjerna</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Polonius.20Hackathon.202021-07-30/near/247698968\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116109\">Vytautas Astrauskas [he/him]</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Polonius.20Hackathon.202021-07-30/near/247023352\">said</a>:</p>\n<blockquote>\n<p>Prusti has code that does this, so if you want I can try moving that code to the Rust compiler. However, there is one problem: if we try to display all facts all the same time, the visualization becomes unreadable. Therefore, we need an option that controls what information should be included in the graphviz file.</p>\n<p>Let me know what are your thoughts on this.</p>\n</blockquote>\n<p>Another option would be to dump as much data as possible and then have a tool select parts of that data to generate various visualisations, ideally interactively, but that's not exactly the minimal viable product version.</p>\n</blockquote>\n<p>I think it would be super cool to have such an interactive tool, but not sure I have time for that right now… ☹</p>",
        "id": 247710833,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1627653246
    },
    {
        "content": "<p>so bi monthly is ok with everyone (no obligation to join every time of course) we can make it a regular thing, we probably should imo</p>",
        "id": 247710905,
        "sender_full_name": "lqd",
        "timestamp": 1627653290
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Polonius.20Hackathon.202021-07-30/near/247710756\">said</a>:</p>\n<blockquote>\n<p>and that may affect our priorities a touch</p>\n</blockquote>\n<p>in the sense, that what we should do today would include some preparation for the longer term you mean ?</p>",
        "id": 247711015,
        "sender_full_name": "lqd",
        "timestamp": 1627653349
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Polonius.20Hackathon.202021-07-30/near/247710757\">said</a>:</p>\n<blockquote>\n<p>if the second one, I've started vacation a couple hours ago, so won't be available in 2 weeks, but in 4 definitely</p>\n</blockquote>\n<p>I'm not available in 2 weeks either :)</p>",
        "id": 247711201,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627653438
    },
    {
        "content": "<p>we can pencil in <time datetime=\"2021-08-27T14:00:00Z\">2021-08-27T16:00:00+02:00</time> for the next one :)</p>",
        "id": 247711202,
        "sender_full_name": "lqd",
        "timestamp": 1627653439
    },
    {
        "content": "<p>Yeah, that works I think</p>",
        "id": 247711268,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627653469
    },
    {
        "content": "<p>let's do it, hopefully more people can join at that time as well</p>",
        "id": 247711371,
        "sender_full_name": "lqd",
        "timestamp": 1627653510
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Polonius.20Hackathon.202021-07-30/near/247711371\">said</a>:</p>\n<blockquote>\n<p>let's do it, hopefully more people can join at that time as well</p>\n</blockquote>\n<p>Works for me, I'm pretty flexible as long as I have advance notice.</p>",
        "id": 247711442,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627653546
    },
    {
        "content": "<p>ok, gonna go grab some coffee, brb</p>",
        "id": 247711517,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627653588
    },
    {
        "content": "<p>/me is reading <span class=\"user-mention silent\" data-user-id=\"204115\">Amanda Stjerna</span>'s thesis</p>",
        "id": 247711626,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627653619
    },
    {
        "content": "<p>hmm, actually, <span class=\"user-mention\" data-user-id=\"204115\">@Amanda Stjerna</span>, where can I find that :)</p>",
        "id": 247711751,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627653690
    },
    {
        "content": "<p>I should put it in my PDF library, I don't thikn it's there</p>",
        "id": 247711760,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627653701
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"204115\">Amanda Stjerna</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Polonius.20Hackathon.202021-07-30/near/247701396\">said</a>:</p>\n<blockquote>\n<p>Also, if anyone's missed it, <a href=\"/user_uploads/4715/Lng_BM1wQiSsZVZlLnpNRQ8R/Thesis.pdf\">here's my thesis again</a></p>\n</blockquote>",
        "id": 247711765,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627653705
    },
    {
        "content": "<p>Hello all <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 247711832,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1627653726
    },
    {
        "content": "<p>btw <span class=\"user-mention\" data-user-id=\"204115\">@Amanda Stjerna</span> you had a repository of benchmarks that you used to gather stats for the thesis IIRC, is the repo available somewhere ? ( I think it was)</p>",
        "id": 247711991,
        "sender_full_name": "lqd",
        "timestamp": 1627653827
    },
    {
        "content": "<p>all right, shall we get started?</p>",
        "id": 247712139,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627653885
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Polonius.20Hackathon.202021-07-30/near/247710621\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://hackmd.io/1t4CR635QKKFTRN-2qexsg\">https://hackmd.io/1t4CR635QKKFTRN-2qexsg</a></p>\n</blockquote>\n<p>lqd's notes</p>",
        "id": 247712169,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627653896
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Polonius.20Hackathon.202021-07-30/near/247711202\">said</a>:</p>\n<blockquote>\n<p>we can pencil in <time datetime=\"2021-08-27T14:00:00Z\">2021-08-27T16:00:00+02:00</time> for the next one :)</p>\n</blockquote>\n<p>loose plan for next sprint</p>",
        "id": 247712195,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627653907
    },
    {
        "content": "<p>I guess the first question is who is here :)</p>",
        "id": 247712232,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627653921
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Polonius.20Hackathon.202021-07-30/near/247711991\">said</a>:</p>\n<blockquote>\n<p>btw <span class=\"user-mention silent\" data-user-id=\"204115\">Amanda Stjerna</span> you had a repository of benchmarks that you used to gather stats for the thesis IIRC, is the repo available somewhere ? ( I think it was)</p>\n</blockquote>\n<p>Here it is! <a href=\"https://github.com/amandasystems/msc-polonius-fact-study\">https://github.com/amandasystems/msc-polonius-fact-study</a></p>",
        "id": 247712296,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1627653953
    },
    {
        "content": "<p>I don't remember how much of a \"polonius roadmap\" we have written down, <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span></p>",
        "id": 247712300,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627653957
    },
    {
        "content": "<p>I remember one <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 247712380,
        "sender_full_name": "lqd",
        "timestamp": 1627653975
    },
    {
        "content": "<p>but not how much we had written it down</p>",
        "id": 247712421,
        "sender_full_name": "lqd",
        "timestamp": 1627653997
    },
    {
        "content": "<p>ok-- I'm thinking (a) it'd be useful to review that and (b) to get an idea of what the folks who are here are looking to do (if they have a plan)</p>",
        "id": 247712524,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627654045
    },
    {
        "content": "<p>Does <a href=\"https://rust-lang.github.io/polonius/current_status.html\">https://rust-lang.github.io/polonius/current_status.html</a> count? <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 247712530,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1627654047
    },
    {
        "content": "<p>I had something like this <a href=\"https://hackmd.io/zZFc7xCWQpK_mssQbiZqeQ\">https://hackmd.io/zZFc7xCWQpK_mssQbiZqeQ</a></p>",
        "id": 247712532,
        "sender_full_name": "lqd",
        "timestamp": 1627654047
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"337115\">Domenic Quirl</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Polonius.20Hackathon.202021-07-30/near/247712530\">said</a>:</p>\n<blockquote>\n<p>Does <a href=\"https://rust-lang.github.io/polonius/current_status.html\">https://rust-lang.github.io/polonius/current_status.html</a> count? <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n</blockquote>\n<p>actually not terrible :) but perhaps a bit more detail... :)</p>",
        "id": 247712604,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627654080
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Polonius.20Hackathon.202021-07-30/near/247712532\">said</a>:</p>\n<blockquote>\n<p>I had something like this <a href=\"https://hackmd.io/zZFc7xCWQpK_mssQbiZqeQ\">https://hackmd.io/zZFc7xCWQpK_mssQbiZqeQ</a></p>\n</blockquote>\n<p>this looks nice :)</p>",
        "id": 247712666,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627654093
    },
    {
        "content": "<p>(but it's quite old at this point, not that so much has changed since then that it's completely invalidated)</p>",
        "id": 247712674,
        "sender_full_name": "lqd",
        "timestamp": 1627654097
    },
    {
        "content": "<p>I'm also remembering that in the last sprint we had a kind of doc, too, right?</p>",
        "id": 247712684,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627654101
    },
    {
        "content": "<p>we should probably make a hackmd team</p>",
        "id": 247712709,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627654111
    },
    {
        "content": "<p>those are useful</p>",
        "id": 247712712,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627654113
    },
    {
        "content": "<p>yes, I'll try to find the docs from last sprint</p>",
        "id": 247712736,
        "sender_full_name": "lqd",
        "timestamp": 1627654124
    },
    {
        "content": "<p>did you know, <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> , that there are two hackmd users with the name \"lqd\"?</p>",
        "id": 247712797,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627654150
    },
    {
        "content": "<p>yeah :/</p>",
        "id": 247712807,
        "sender_full_name": "lqd",
        "timestamp": 1627654155
    },
    {
        "content": "<p>one of those was created via GH and the other not maybe</p>",
        "id": 247712839,
        "sender_full_name": "lqd",
        "timestamp": 1627654175
    },
    {
        "content": "<p>that's super confusing including for me ...</p>",
        "id": 247712873,
        "sender_full_name": "lqd",
        "timestamp": 1627654186
    },
    {
        "content": "<p>rules doc <a href=\"https://hackmd.io/CGMNjt1hR_qYtsR9hgdGmw?view\">https://hackmd.io/CGMNjt1hR_qYtsR9hgdGmw?view</a></p>",
        "id": 247712890,
        "sender_full_name": "lqd",
        "timestamp": 1627654191
    },
    {
        "content": "<p>are they both you? :)</p>",
        "id": 247712897,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627654194
    },
    {
        "content": "<p>I believe so :3</p>",
        "id": 247712922,
        "sender_full_name": "lqd",
        "timestamp": 1627654203
    },
    {
        "content": "<p>ok so <a href=\"https://hackmd.io/@polonius\">https://hackmd.io/@polonius</a> exists now</p>",
        "id": 247712998,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627654222
    },
    {
        "content": "<p>I added lqd, I can add others too</p>",
        "id": 247713004,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627654226
    },
    {
        "content": "<p>but we can collect docs in there</p>",
        "id": 247713009,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627654231
    },
    {
        "content": "<p>hackmd picks up one of the accounts randomly when I use it ...</p>",
        "id": 247713031,
        "sender_full_name": "lqd",
        "timestamp": 1627654245
    },
    {
        "content": "<p><a href=\"https://hackmd.io/c6ooQFV-QJilsmEE15FsKQ\">https://hackmd.io/c6ooQFV-QJilsmEE15FsKQ</a> &lt;-- from previous sprint :)</p>",
        "id": 247713094,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627654282
    },
    {
        "content": "<p>I have <code>@amandas</code> by the way</p>",
        "id": 247713108,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1627654292
    },
    {
        "content": "<p>I'm <code>ecstatic-morse</code> on HackMD</p>",
        "id": 247713113,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627654297
    },
    {
        "content": "<p>previous sprint tracking <a href=\"https://hackmd.io/c6ooQFV-QJilsmEE15FsKQ\">https://hackmd.io/c6ooQFV-QJilsmEE15FsKQ</a></p>",
        "id": 247713118,
        "sender_full_name": "lqd",
        "timestamp": 1627654298
    },
    {
        "content": "<p>ah you already found it :)</p>",
        "id": 247713137,
        "sender_full_name": "lqd",
        "timestamp": 1627654306
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Polonius.20Hackathon.202021-07-30/near/247712532\">said</a>:</p>\n<blockquote>\n<p>I had something like this <a href=\"https://hackmd.io/zZFc7xCWQpK_mssQbiZqeQ\">https://hackmd.io/zZFc7xCWQpK_mssQbiZqeQ</a></p>\n</blockquote>\n<p>can you transfer this into the polonius team?</p>",
        "id": 247713323,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627654391
    },
    {
        "content": "<p>I'm going to make a doc for this sprint</p>",
        "id": 247713358,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627654408
    },
    {
        "content": "<p>or, we can use the one <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> already made, duh</p>",
        "id": 247713379,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627654419
    },
    {
        "content": "<p>I needed to change my handle because I joined hackmd with github. Am now <code>@domenicquirl</code></p>",
        "id": 247713382,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1627654419
    },
    {
        "content": "<p>(if you transfer it in)</p>",
        "id": 247713391,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627654421
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Polonius.20Hackathon.202021-07-30/near/247713323\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Polonius.20Hackathon.202021-07-30/near/247712532\">said</a>:</p>\n<blockquote>\n<p>I had something like this <a href=\"https://hackmd.io/zZFc7xCWQpK_mssQbiZqeQ\">https://hackmd.io/zZFc7xCWQpK_mssQbiZqeQ</a></p>\n</blockquote>\n<p>can you transfer this into the polonius team?</p>\n</blockquote>\n<p>done</p>",
        "id": 247713420,
        "sender_full_name": "lqd",
        "timestamp": 1627654434
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Polonius.20Hackathon.202021-07-30/near/247713391\">said</a>:</p>\n<blockquote>\n<p>(if you transfer it in)</p>\n</blockquote>\n<p>done as well</p>",
        "id": 247713505,
        "sender_full_name": "lqd",
        "timestamp": 1627654465
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Polonius.20Hackathon.202021-07-30/near/247712890\">said</a>:</p>\n<blockquote>\n<p>rules doc <a href=\"https://hackmd.io/CGMNjt1hR_qYtsR9hgdGmw?view\">https://hackmd.io/CGMNjt1hR_qYtsR9hgdGmw?view</a></p>\n</blockquote>\n<p>From a quick look, this has more (namely, anything) on initialization and liveness than the book, but doesn't have the optimized variant?</p>",
        "id": 247713512,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1627654470
    },
    {
        "content": "<p>also <a href=\"https://hackmd.io/1t4CR635QKKFTRN-2qexsg\">this one</a>, <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span></p>",
        "id": 247713525,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627654478
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204115\">@Amanda Stjerna</span> Is section <strong>6.5.3</strong> from your thesis discussed on the roadmap anywhere? Or is it solved now?</p>",
        "id": 247713528,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627654481
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"337115\">@Domenic Quirl</span> that sounds right, the plan was to remove the optimized variant</p>",
        "id": 247713553,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627654494
    },
    {
        "content": "<p>Addressing a Provenance Variable Imprecision Bug</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">z</span>: <span class=\"kt\">u32</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">x</span> <span class=\"kt\">u32</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">y</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">y</span> <span class=\"kt\">u32</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">something</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// creates `'x subset-of 'y`.</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">something</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">z</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// creates {L0} in 'x constraint.</span>\n<span class=\"c1\">//</span>\n<span class=\"c1\">// at this point, we have</span>\n<span class=\"c1\">// `'x subset-of 'y` and `{L0} in `'x`,</span>\n<span class=\"c1\">// so we also have `{L0} in 'y` (wrong).</span>\n<span class=\"nb\">drop</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"n\">z</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// Polonius: false positive error</span>\n<span class=\"nb\">drop</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 247713555,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627654495
    },
    {
        "content": "<p>get everything <em>correct first</em></p>",
        "id": 247713561,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627654499
    },
    {
        "content": "<p>and then revisit optimizations</p>",
        "id": 247713566,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627654502
    },
    {
        "content": "<p>especially because there  were some things we wanted to settle about precision</p>",
        "id": 247713590,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627654510
    },
    {
        "content": "<p>Ohh ok, good to know</p>",
        "id": 247713624,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1627654530
    },
    {
        "content": "<p>but also because it seemed like <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span>'s experiments suggested that we could get a lot of the optimization we want from relatively simple filtering tests</p>",
        "id": 247713627,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627654531
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Polonius.20Hackathon.202021-07-30/near/247713525\">said</a>:</p>\n<blockquote>\n<p>also <a href=\"https://hackmd.io/1t4CR635QKKFTRN-2qexsg\">this one</a>, <span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span></p>\n</blockquote>\n<p>I think I did that one, right ?</p>",
        "id": 247713629,
        "sender_full_name": "lqd",
        "timestamp": 1627654532
    },
    {
        "content": "<p>possibly</p>",
        "id": 247713640,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627654541
    },
    {
        "content": "<p>(seems like the owner is indeed the polonius team)</p>",
        "id": 247713680,
        "sender_full_name": "lqd",
        "timestamp": 1627654559
    },
    {
        "content": "<p>great!</p>",
        "id": 247713770,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627654584
    },
    {
        "content": "<p>ok, so I'm poking at it</p>",
        "id": 247713776,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627654586
    },
    {
        "content": "<p>I think it'd be good to map out some tasks :)</p>",
        "id": 247713789,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627654591
    },
    {
        "content": "<p>it seems like one thing for me to do is to review stuff</p>",
        "id": 247713815,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627654599
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"118594\">Dylan MacKenzie (ecstatic-morse)</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Polonius.20Hackathon.202021-07-30/near/247713528\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"204115\">Amanda Stjerna</span> Is section <strong>6.5.3</strong> from your thesis discussed on the roadmap anywhere? Or is it solved now?</p>\n</blockquote>\n<p>I think most of the work on this happened sort of over my head, for <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  and <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> who worked on this, that's the provenance variable imprecision bug: <a href=\"/user_uploads/4715/FmN9IrwFMSXXwrxlp7eAKzHP/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/FmN9IrwFMSXXwrxlp7eAKzHP/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/FmN9IrwFMSXXwrxlp7eAKzHP/image.png\"></a></div>",
        "id": 247713834,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1627654609
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Polonius.20Hackathon.202021-07-30/near/247713627\">said</a>:</p>\n<blockquote>\n<p>but also because it seemed like <span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span>'s experiments suggested that we could get a lot of the optimization we want from relatively simple filtering tests</p>\n</blockquote>\n<p>those were indeed related to the hybrid variant</p>",
        "id": 247713858,
        "sender_full_name": "lqd",
        "timestamp": 1627654621
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> yesterday it seemed there was also overwhelming demand for some more information, rationale, etc about the optimized variant</p>",
        "id": 247713909,
        "sender_full_name": "lqd",
        "timestamp": 1627654647
    },
    {
        "content": "<p>the people need to know !</p>",
        "id": 247713920,
        "sender_full_name": "lqd",
        "timestamp": 1627654654
    },
    {
        "content": "<p>I'm still of the mind we should remove it rather than explain it :P</p>",
        "id": 247713943,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627654670
    },
    {
        "content": "<p>but I can spend some time answering questions if desired</p>",
        "id": 247713970,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627654681
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> That was assuming that modifications would have to update the optimized variant as well</p>",
        "id": 247714012,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627654685
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Polonius.20Hackathon.202021-07-30/near/247713920\">said</a>:</p>\n<blockquote>\n<p>the people need to know !</p>\n</blockquote>\n<p>Well, only if it continues to exist probably</p>",
        "id": 247714024,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1627654693
    },
    {
        "content": "<p>we cannot remove it don't worry :p</p>",
        "id": 247714054,
        "sender_full_name": "lqd",
        "timestamp": 1627654712
    },
    {
        "content": "<p>or I guess it depends on what we're trying to do with this</p>",
        "id": 247714084,
        "sender_full_name": "lqd",
        "timestamp": 1627654728
    },
    {
        "content": "<p>if for example we don't use datalog for production</p>",
        "id": 247714104,
        "sender_full_name": "lqd",
        "timestamp": 1627654741
    },
    {
        "content": "<p>if speed is not a concern for some of the use cases then we can remove it if you want, as long as we don't lose its insights, ideas, etc</p>",
        "id": 247714176,
        "sender_full_name": "lqd",
        "timestamp": 1627654784
    },
    {
        "content": "<p>My gut reaction is that it would be easier to iron out all the correctness bugs on top of the naive variant, then reimplement the ideas from the optimized variant</p>",
        "id": 247714286,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627654816
    },
    {
        "content": "<p>for correctness purposes, the Naive one was not unbearably slow in the rustc UI tests</p>",
        "id": 247714294,
        "sender_full_name": "lqd",
        "timestamp": 1627654821
    },
    {
        "content": "<p>I guess the question is</p>",
        "id": 247714322,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627654832
    },
    {
        "content": "<p>Instead of having to keep them in sync, which slows things down.</p>",
        "id": 247714328,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627654835
    },
    {
        "content": "<p>can we add some simple filtering that makes it \"good enough\" to run the rustc tests</p>",
        "id": 247714345,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627654847
    },
    {
        "content": "<p>what's killing use in rustc tests is the move analysis, and the locations::all hack</p>",
        "id": 247714378,
        "sender_full_name": "lqd",
        "timestamp": 1627654869
    },
    {
        "content": "<p>ok so I'm looking over the <a href=\"https://hackmd.io/c6ooQFV-QJilsmEE15FsKQ?view\">notes from the previous sprint</a></p>",
        "id": 247714415,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627654893
    },
    {
        "content": "<p>otherwise it's good enough, not great compared to the hybrid analysis, but good enough</p>",
        "id": 247714423,
        "sender_full_name": "lqd",
        "timestamp": 1627654895
    },
    {
        "content": "<p>I think those goals still seem... you know ... not bad</p>",
        "id": 247714432,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627654899
    },
    {
        "content": "<p>yeah</p>",
        "id": 247714553,
        "sender_full_name": "lqd",
        "timestamp": 1627654946
    },
    {
        "content": "<p>those are still relevant</p>",
        "id": 247714567,
        "sender_full_name": "lqd",
        "timestamp": 1627654952
    },
    {
        "content": "<p>let's do this</p>",
        "id": 247714587,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627654963
    },
    {
        "content": "<p>let's try to make a high-level roadmap for the next 10 minutes</p>",
        "id": 247714598,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627654969
    },
    {
        "content": "<p>in <a href=\"https://hackmd.io/1t4CR635QKKFTRN-2qexsg?edit\">the sprint doc</a> for now</p>",
        "id": 247714627,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627654984
    },
    {
        "content": "<p>I want to validate some assumptions</p>",
        "id": 247714641,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627654988
    },
    {
        "content": "<p>so I wrote out a first milestone, \"feature complete\"</p>",
        "id": 247714773,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627655062
    },
    {
        "content": "<p>(PS, elsewhere I adopted the name \"lease\" instead of \"origin\" and I kind of like it :)</p>",
        "id": 247714950,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627655151
    },
    {
        "content": "<p>I saw that :3</p>",
        "id": 247714984,
        "sender_full_name": "lqd",
        "timestamp": 1627655163
    },
    {
        "content": "<p>so-- did we do the Great Renaming ?</p>",
        "id": 247715047,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627655179
    },
    {
        "content": "<p>yeah</p>",
        "id": 247715062,
        "sender_full_name": "lqd",
        "timestamp": 1627655185
    },
    {
        "content": "<p>apart from maybe one or 2 small cases</p>",
        "id": 247715071,
        "sender_full_name": "lqd",
        "timestamp": 1627655192
    },
    {
        "content": "<p>the big question mark is \"higher-ranked\" stuff</p>",
        "id": 247715083,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627655197
    },
    {
        "content": "<p>The Greater Renaming?</p>",
        "id": 247715087,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627655198
    },
    {
        "content": "<p>in terms of that first milestone</p>",
        "id": 247715107,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627655207
    },
    {
        "content": "<p>that I forgot but mentioned in the subset errors PR (IIRC)</p>",
        "id": 247715109,
        "sender_full_name": "lqd",
        "timestamp": 1627655209
    },
    {
        "content": "<p>I'm still of the opinion that figuring out higher-ranked errors is not polonius's job</p>",
        "id": 247715171,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627655244
    },
    {
        "content": "<p>everything's pretty much renamed, and there's a rust branch linked in the doc that matches the new relations</p>",
        "id": 247715172,
        "sender_full_name": "lqd",
        "timestamp": 1627655247
    },
    {
        "content": "<p>but that's going to make it hard to meet the milestone until it gets resolved</p>",
        "id": 247715217,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627655268
    },
    {
        "content": "<p>we definitely need chalk for this, right ? as mentioned in the leak check MCP paragraph ?</p>",
        "id": 247715308,
        "sender_full_name": "lqd",
        "timestamp": 1627655293
    },
    {
        "content": "<p>that's my preferred approach still</p>",
        "id": 247715355,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627655321
    },
    {
        "content": "<p>but I do wonder if, in the fullness of time,</p>",
        "id": 247715371,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627655327
    },
    {
        "content": "<p>the problem is that we try to \"carve up\" the solving</p>",
        "id": 247715384,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627655333
    },
    {
        "content": "<p>and it'd be better to kind of merge polonius rules with chalk rules into one big logic party</p>",
        "id": 247715402,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627655344
    },
    {
        "content": "<p>needing complete chalk integration in rustc to achieve the first milestone is going to take a while</p>",
        "id": 247715403,
        "sender_full_name": "lqd",
        "timestamp": 1627655345
    },
    {
        "content": "<p>yeah</p>",
        "id": 247715415,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627655350
    },
    {
        "content": "<p>I'm thinking about what kind of hack we can do in the interim</p>",
        "id": 247715422,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627655355
    },
    {
        "content": "<p>the compiler is pretty dumb about higher-ranked errors</p>",
        "id": 247715429,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627655360
    },
    {
        "content": "<p>we might be able to hack up something equally dumb to get us by</p>",
        "id": 247715450,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627655371
    },
    {
        "content": "<p>s/dumb/simplistic/</p>",
        "id": 247715500,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627655400
    },
    {
        "content": "<p>e.g. the approach that <span class=\"user-mention\" data-user-id=\"118594\">@Dylan MacKenzie (ecstatic-morse)</span> was describing might work</p>",
        "id": 247715577,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627655419
    },
    {
        "content": "<p>I don't think the compiler is really any smarter than that</p>",
        "id": 247715604,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627655436
    },
    {
        "content": "<p>Trying to follow - would that be the idea of translating higher-ranked bounds to something simpler, and then give that to polonius, or something else that's more on the compiler side?</p>",
        "id": 247715651,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1627655457
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Polonius.20Hackathon.202021-07-30/near/247715577\">said</a>:</p>\n<blockquote>\n<p>e.g. the approach that <span class=\"user-mention silent\" data-user-id=\"118594\">Dylan MacKenzie (ecstatic-morse)</span> was describing might work</p>\n</blockquote>\n<p>(to be clear, no offense meant on this approach :)</p>",
        "id": 247715666,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627655460
    },
    {
        "content": "<p>but ultimately we may need to merge into a \"big logic party\" ? I guess we'lls ee what john harrison ends up suggesting ?</p>",
        "id": 247715707,
        "sender_full_name": "lqd",
        "timestamp": 1627655477
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"337115\">Domenic Quirl</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Polonius.20Hackathon.202021-07-30/near/247715651\">said</a>:</p>\n<blockquote>\n<p>Trying to follow - would that be the idea of translating higher-ranked bounds to something simpler, and then give that to polonius, or something else that's more on the compiler side?</p>\n</blockquote>\n<p>my preference would be to translate on the compiler side</p>",
        "id": 247715715,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627655480
    },
    {
        "content": "<p>No worries <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> You'll have to try pretty hard to offend me</p>",
        "id": 247715731,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627655489
    },
    {
        "content": "<p>so that polonius is just getting stuff at the \"root level\" or whatever</p>",
        "id": 247715739,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627655494
    },
    {
        "content": "<p>because that is what I think chalk would do</p>",
        "id": 247715773,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627655514
    },
    {
        "content": "<p>however, that code might live in polonius if we wanted</p>",
        "id": 247715831,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627655525
    },
    {
        "content": "<p>e.g. the compiler might give stuff with universes</p>",
        "id": 247715841,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627655531
    },
    {
        "content": "<p>and we do a light translation step where we \"lift up\" outlives</p>",
        "id": 247715857,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627655540
    },
    {
        "content": "<p>so that if you have <code>for&lt;'a&gt; X: 'a</code>, we translate it to <code>X: 'static</code></p>",
        "id": 247715876,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627655549
    },
    {
        "content": "<p>which I think is basically the upshot of your blog post, <span class=\"user-mention\" data-user-id=\"118594\">@Dylan MacKenzie (ecstatic-morse)</span> ?</p>",
        "id": 247715890,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627655556
    },
    {
        "content": "<p>does this only matter during trait selection ?</p>",
        "id": 247715913,
        "sender_full_name": "lqd",
        "timestamp": 1627655571
    },
    {
        "content": "<p>this is also kind of what the compiler does today, iirc...</p>",
        "id": 247715914,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627655571
    },
    {
        "content": "<p>...I think this seems right. We should try to do something like that in polonius to get us by</p>",
        "id": 247715942,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627655590
    },
    {
        "content": "<p>Correct, yeah you don't need another solver.</p>",
        "id": 247715977,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627655612
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116109\">@Vytautas Astrauskas [he/him]</span> one thing I am wondering, do you have needs/desires/opinions that come from Prusti?</p>",
        "id": 247715988,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627655621
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"118594\">@Dylan MacKenzie (ecstatic-morse)</span> can you link to your blog post?</p>",
        "id": 247716067,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627655649
    },
    {
        "content": "<p>iirc, it was a nice explanation, worth storing in the notes</p>",
        "id": 247716075,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627655653
    },
    {
        "content": "<p>For the simple cases at least</p>",
        "id": 247716078,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627655655
    },
    {
        "content": "<p>right</p>",
        "id": 247716084,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627655659
    },
    {
        "content": "<p>so, in terms of the milestone, <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span>, let's turn those into checkboxes</p>",
        "id": 247716125,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627655685
    },
    {
        "content": "<p>and what would we need to do in polonius ? is it only about illegal subset relationship errors ? we wouldn't be borrowcking completely, right ?</p>",
        "id": 247716129,
        "sender_full_name": "lqd",
        "timestamp": 1627655687
    },
    {
        "content": "<p>to see what we have and don't have</p>",
        "id": 247716132,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627655688
    },
    {
        "content": "<p>Among the things from yesterday I read <a href=\"https://gist.github.com/nikomatsakis/8bfda6c1119727e13ec6e98f33d2b696#complication-no-best-simplification\">https://gist.github.com/nikomatsakis/8bfda6c1119727e13ec6e98f33d2b696#complication-no-best-simplification</a>, which seems to suggest there are constellations that are more difficult?</p>",
        "id": 247716140,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1627655693
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Polonius.20Hackathon.202021-07-30/near/247716129\">said</a>:</p>\n<blockquote>\n<p>and what would we need to do in polonius ? is it only about illegal subset relationship errors ? we wouldn't be borrowcking completely, right ?</p>\n</blockquote>\n<p>tcorrec</p>",
        "id": 247716148,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627655697
    },
    {
        "content": "<p><a href=\"https://ecstaticmorse.net/posts/quantifier-elimination/\">https://ecstaticmorse.net/posts/quantifier-elimination/</a> is my blog post on HRTBs</p>",
        "id": 247716166,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627655708
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"337115\">Domenic Quirl</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Polonius.20Hackathon.202021-07-30/near/247716140\">said</a>:</p>\n<blockquote>\n<p>Among the things from yesterday I read <a href=\"https://gist.github.com/nikomatsakis/8bfda6c1119727e13ec6e98f33d2b696#complication-no-best-simplification\">https://gist.github.com/nikomatsakis/8bfda6c1119727e13ec6e98f33d2b696#complication-no-best-simplification</a>, which seems to suggest there are constellations that are more difficult?</p>\n</blockquote>\n<p>that's right-- it's just that the compiler doesn't do a good job today</p>",
        "id": 247716171,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627655711
    },
    {
        "content": "<p>so to match its behavior is I think not that hard</p>",
        "id": 247716189,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627655719
    },
    {
        "content": "<p>some of that gist is more me thinking ahead to the behavior I want</p>",
        "id": 247716198,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627655728
    },
    {
        "content": "<p>(although lately I've had some alternative ideas for other ways we might solve things)</p>",
        "id": 247716214,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627655739
    },
    {
        "content": "<p>(which are still sort of half-formed)</p>",
        "id": 247716225,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627655745
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Polonius.20Hackathon.202021-07-30/near/247715988\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116109\">Vytautas Astrauskas [he/him]</span> one thing I am wondering, do you have needs/desires/opinions that come from Prusti?</p>\n</blockquote>\n<p>We need to know <code>outlives</code> relationship between regions.</p>",
        "id": 247716245,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1627655759
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Polonius.20Hackathon.202021-07-30/near/247716198\">said</a>:</p>\n<blockquote>\n<p>some of that gist is more me thinking ahead to the behavior I want</p>\n</blockquote>\n<p>I'm very interested in this btw</p>",
        "id": 247716252,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627655762
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116109\">@Vytautas Astrauskas [he/him]</span> get with the modern terminology :P</p>",
        "id": 247716329,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627655787
    },
    {
        "content": "<p>although it's probably further down the line</p>",
        "id": 247716375,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627655819
    },
    {
        "content": "<p>I'm reading more of the notes</p>",
        "id": 247716459,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627655872
    },
    {
        "content": "<blockquote>\n<ul>\n<li>\n<p>model: reachability/odisseus. loans are not fundamental IMO, loans and issuing/introducing origins are bijective,<br>\n          origins are not really sets of loans (as we saw with the equality variant) (already in progress)</p>\n</li>\n<li>\n<p>model: SSA -&gt; arielb's, dylan's explorations</p>\n</li>\n<li>model explorations: equality (tease out the interesting things buried among things that didn't work out in the <br>\n   equality variant, esp to fix the current \"polonius imprecision\")</li>\n</ul>\n</blockquote>\n<p>this sounds interesting! I feel kind of out of date</p>",
        "id": 247716510,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627655886
    },
    {
        "content": "<p>sounds like the action item for this particular sprint here, though, is more like \"collect links and read up\"?</p>",
        "id": 247716537,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627655905
    },
    {
        "content": "<p>I'm not sure we have a lot of links about those though</p>",
        "id": 247716601,
        "sender_full_name": "lqd",
        "timestamp": 1627655952
    },
    {
        "content": "<p>I feel at the last sprint we ended up with a reasonable set of rules</p>",
        "id": 247716639,
        "sender_full_name": "lqd",
        "timestamp": 1627655985
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"118594\">@Dylan MacKenzie (ecstatic-morse)</span> do you want to investigate the HR error stuff?</p>",
        "id": 247716732,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627656019
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Polonius.20Hackathon.202021-07-30/near/247716639\">said</a>:</p>\n<blockquote>\n<p>I feel at the last sprint we ended up with a reasonable set of rules</p>\n</blockquote>\n<p>I also feel that way</p>",
        "id": 247716745,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627656025
    },
    {
        "content": "<p>I'm not sure if they're all implemented or not?</p>",
        "id": 247716752,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627656029
    },
    {
        "content": "<p>they are for 2 out of the 3 error kinds we want to emit</p>",
        "id": 247716795,
        "sender_full_name": "lqd",
        "timestamp": 1627656062
    },
    {
        "content": "<p>modulo: 2 WIP PRs</p>",
        "id": 247716806,
        "sender_full_name": "lqd",
        "timestamp": 1627656069
    },
    {
        "content": "<p>links to those PRs?</p>",
        "id": 247716822,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627656081
    },
    {
        "content": "<p>(are they on polonius repo?)</p>",
        "id": 247716832,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627656087
    },
    {
        "content": "<p>but the 3rd kind is move errors, and those already work</p>",
        "id": 247716833,
        "sender_full_name": "lqd",
        "timestamp": 1627656087
    },
    {
        "content": "<ul>\n<li>Removing <code>Location::All</code>.<ul>\n<li>I haven't looked into this more than superficially. Once again, it seems like we already know the correct approach (see <a href=\"https://github.com/rust-lang/rust/issues/50938\">#50938</a>), but we need to think through its consequences and make sure they're acceptable.</li>\n</ul>\n</li>\n</ul>",
        "id": 247716844,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627656094
    },
    {
        "content": "<p>1) moving away from placeholder loans and computing subset errors everywhere <a href=\"https://github.com/rust-lang/polonius/pull/156\">https://github.com/rust-lang/polonius/pull/156</a></p>",
        "id": 247716870,
        "sender_full_name": "lqd",
        "timestamp": 1627656114
    },
    {
        "content": "<p>so I see discusison of souffle</p>",
        "id": 247716877,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627656118
    },
    {
        "content": "<p>(sorry, there's a lot of notes!)</p>",
        "id": 247716925,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627656128
    },
    {
        "content": "<p>I'd be <em>ok</em> with integrating it, but (a) linking to C++ is I think a non-starter for rustc integration</p>",
        "id": 247716936,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627656139
    },
    {
        "content": "<p>(b) I didn't find it to perform particularly well, but that's probably because I didn't tune it very much :)</p>",
        "id": 247716949,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627656149
    },
    {
        "content": "<p>2) disjunctive queries to better match the rules: liveness of placeholders <a href=\"https://github.com/rust-lang/polonius/pull/157\">https://github.com/rust-lang/polonius/pull/157</a></p>",
        "id": 247716960,
        "sender_full_name": "lqd",
        "timestamp": 1627656160
    },
    {
        "content": "<p>I do agree that datafrog is not the most user friendly of things</p>",
        "id": 247716969,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627656164
    },
    {
        "content": "<p>early on we tried some bespoke data structures and things and basically datafrog smoked them all</p>",
        "id": 247716989,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627656176
    },
    {
        "content": "<p>but I have no objections in the long term :)</p>",
        "id": 247717029,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627656190
    },
    {
        "content": "<p>no objections even to moving away from datalog ? :3</p>",
        "id": 247717054,
        "sender_full_name": "lqd",
        "timestamp": 1627656219
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Polonius.20Hackathon.202021-07-30/near/247716732\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"118594\">Dylan MacKenzie (ecstatic-morse)</span> do you want to investigate the HR error stuff?</p>\n</blockquote>\n<p>Yes! A tiny bit of mentoring at the start would be greatly appreciated though. Is there a good subset of <code>rustc</code> tests or is it just anything with an HRTB?</p>\n<p>(we can talk at the end once the roadmap is done)</p>",
        "id": 247717055,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627656220
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Polonius.20Hackathon.202021-07-30/near/247716833\">said</a>:</p>\n<blockquote>\n<p>but the 3rd kind is move errors, and those already work</p>\n</blockquote>\n<p>Didn't they have a soundness bug? I can't remember anymore but I remember something going wrong with some of the code I worked on, so either moves or initialisation.</p>",
        "id": 247717067,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1627656224
    },
    {
        "content": "<p>Task lists:</p>",
        "id": 247717153,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627656259
    },
    {
        "content": "<ul>\n<li>[ ] Review <a href=\"https://github.com/rust-lang/polonius/pull/156\">https://github.com/rust-lang/polonius/pull/156</a> -- nikomatsakis</li>\n<li>[ ] Review <a href=\"https://github.com/rust-lang/polonius/pull/157\">https://github.com/rust-lang/polonius/pull/157</a> -- nikomatsakis</li>\n<li>[ ] Work with Dylan Stiles to get a plan around HRTB -- nikomatsakis</li>\n<li>[ ] Refactor parser to not use lalrpop -- domenicquirl</li>\n</ul>",
        "id": 247717159,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627656264
    },
    {
        "content": "<p>seems like we're missing some stuff for other folks ;)</p>",
        "id": 247717165,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627656267
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204115\">@Amanda Stjerna</span> soundness I couldn't tell, but there were some issues and incompleteness sure. By \"work\" I meant the move errors in rustc</p>",
        "id": 247717171,
        "sender_full_name": "lqd",
        "timestamp": 1627656269
    },
    {
        "content": "<p>er, Dylan Stiles--oops :)</p>",
        "id": 247717184,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627656281
    },
    {
        "content": "<p>that's an old friend of mine</p>",
        "id": 247717187,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627656283
    },
    {
        "content": "<p>:D</p>",
        "id": 247717190,
        "sender_full_name": "lqd",
        "timestamp": 1627656286
    },
    {
        "content": "<p>apparently my brain \"autocompletes\" Dylan that way :)</p>",
        "id": 247717214,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627656295
    },
    {
        "content": "<p>we're all friends here</p>",
        "id": 247717216,
        "sender_full_name": "lqd",
        "timestamp": 1627656298
    },
    {
        "content": "<p>Ah, so essentially translating Polonius errors to rustc? That should be finished</p>",
        "id": 247717230,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1627656308
    },
    {
        "content": "<p>My attempt to join the real name gang has failed spectacularly</p>",
        "id": 247717232,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627656309
    },
    {
        "content": "<p>yeah so there are two parts, right? there's </p>\n<ul>\n<li>polonius computes correct errors</li>\n</ul>\n<p>and </p>\n<ul>\n<li>polonius reports errors to rustc, which reports them</li>\n</ul>",
        "id": 247717370,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627656365
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"204115\">Amanda Stjerna</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Polonius.20Hackathon.202021-07-30/near/247717230\">said</a>:</p>\n<blockquote>\n<p>Ah, so essentially translating Polonius errors to rustc? That should be done</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"204115\">@Amanda Stjerna</span> I meant rustc already reports move errors before borrowcking, so we're not blocked on polonius computing them and emitting them correctly</p>",
        "id": 247717371,
        "sender_full_name": "lqd",
        "timestamp": 1627656366
    },
    {
        "content": "<p>Aha ok I see</p>",
        "id": 247717394,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1627656377
    },
    {
        "content": "<p>it sounded like <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> there was some work updating rustc to match polonius?</p>",
        "id": 247717402,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627656386
    },
    {
        "content": "<p>yes</p>",
        "id": 247717410,
        "sender_full_name": "lqd",
        "timestamp": 1627656392
    },
    {
        "content": "<p>I was also intrigued by this discussion of debuggability etc</p>",
        "id": 247717412,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627656394
    },
    {
        "content": "<p>if someone needs to use rustc master with polonius master -&gt; <a href=\"https://github.com/lqd/rust/tree/polonius-master\">https://github.com/lqd/rust/tree/polonius-master</a></p>",
        "id": 247717451,
        "sender_full_name": "lqd",
        "timestamp": 1627656423
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Polonius.20Hackathon.202021-07-30/near/247717451\">said</a>:</p>\n<blockquote>\n<p>if someone needs to use rustc master with polonius master -&gt; <a href=\"https://github.com/lqd/rust/tree/polonius-master\">https://github.com/lqd/rust/tree/polonius-master</a></p>\n</blockquote>\n<p>is there a pending PR for that?</p>",
        "id": 247717489,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627656444
    },
    {
        "content": "<p>otherwise the fact generation doesn't match anymore, the relation have changed names</p>",
        "id": 247717492,
        "sender_full_name": "lqd",
        "timestamp": 1627656446
    },
    {
        "content": "<p>not yet, here's why</p>",
        "id": 247717498,
        "sender_full_name": "lqd",
        "timestamp": 1627656454
    },
    {
        "content": "<p>1) I'd like to land at least the subsets PR first</p>",
        "id": 247717536,
        "sender_full_name": "lqd",
        "timestamp": 1627656473
    },
    {
        "content": "<p>2) I'm not in love with how I did disjunctive queries in the other PR (super verbose, and it's not done until we've all talked about it)</p>",
        "id": 247717615,
        "sender_full_name": "lqd",
        "timestamp": 1627656501
    },
    {
        "content": "<p>then publish another version and update rustc</p>",
        "id": 247717636,
        "sender_full_name": "lqd",
        "timestamp": 1627656513
    },
    {
        "content": "<p>got it, ok</p>",
        "id": 247717674,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627656529
    },
    {
        "content": "<p>so should we add \"talk about X\" to the list?</p>",
        "id": 247717795,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627656599
    },
    {
        "content": "<p>but I can open a PR whenever anyone needs it</p>",
        "id": 247717802,
        "sender_full_name": "lqd",
        "timestamp": 1627656602
    },
    {
        "content": "<p>sure !</p>",
        "id": 247717861,
        "sender_full_name": "lqd",
        "timestamp": 1627656616
    },
    {
        "content": "<p>I guess put things in <a href=\"https://hackmd.io/1t4CR635QKKFTRN-2qexsg?edit\">https://hackmd.io/1t4CR635QKKFTRN-2qexsg?edit</a> with your name on them :)</p>",
        "id": 247717900,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627656643
    },
    {
        "content": "<p>who else needs tasks? <span class=\"user-mention\" data-user-id=\"204115\">@Amanda Stjerna</span> ... ?</p>",
        "id": 247717929,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627656659
    },
    {
        "content": "<p>Yes! I honestly have no idea where to start</p>",
        "id": 247717949,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1627656671
    },
    {
        "content": "<p>I'm trying to remember what I was doing with <code>Locations::All</code></p>",
        "id": 247717965,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627656677
    },
    {
        "content": "<p>and failing :)</p>",
        "id": 247717968,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627656680
    },
    {
        "content": "<p>you had a WIP branch about that at the last sprint, right ?</p>",
        "id": 247718000,
        "sender_full_name": "lqd",
        "timestamp": 1627656694
    },
    {
        "content": "<p>I did</p>",
        "id": 247718012,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627656699
    },
    {
        "content": "<p>I mean Is ort of remember</p>",
        "id": 247718018,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627656704
    },
    {
        "content": "<p>based on the earlier branch</p>",
        "id": 247718025,
        "sender_full_name": "lqd",
        "timestamp": 1627656708
    },
    {
        "content": "<p>I was basically finding locations for everything, I think...</p>",
        "id": 247718027,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627656711
    },
    {
        "content": "<p>I'd have to find that branch</p>",
        "id": 247718040,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627656718
    },
    {
        "content": "<p>some were tricky</p>",
        "id": 247718042,
        "sender_full_name": "lqd",
        "timestamp": 1627656720
    },
    {
        "content": "<blockquote>\n<ul>\n<li>\n<p>move/init analysis !:</p>\n<ul>\n<li>debugging move/init analysis (possibly beginner friendly) !</li>\n<li>completing move/init analysis, partial moves and the likes !</li>\n<li>make move errors early return in <code>compute</code> (beginner friendly)</li>\n<li>understanding the current limitations of move/init analysis, making rustc tests pass with it, validating it</li>\n<li>\n<p>maybe bypass move/init + liveness ? going directly to loan analysis (possibly resurrecting some of the initial fact<br>\n   generation code) (possibly beginner friendly)</p>\n</li>\n<li>\n<p>add move/init facts to test parser (beginner friendly ?)<br>\n ```</p>\n</li>\n</ul>\n</li>\n</ul>\n</blockquote>",
        "id": 247718088,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627656726
    },
    {
        "content": "<p>how do we debug the move/init analysis? :)</p>",
        "id": 247718174,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627656768
    },
    {
        "content": "<p>and... what need completion?</p>",
        "id": 247718201,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627656782
    },
    {
        "content": "<p>maybe that's a good place for <span class=\"user-mention\" data-user-id=\"204115\">@Amanda Stjerna</span> ?</p>",
        "id": 247718213,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627656786
    },
    {
        "content": "<h1>Check: does everybody have a task?</h1>",
        "id": 247720853,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627657927
    },
    {
        "content": "<p>I propose that we go off and do things and check back in in ~30 minutes or somethign</p>",
        "id": 247721075,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627657941
    },
    {
        "content": "<p>I'm going to review your PRs, <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span></p>",
        "id": 247721091,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627657946
    },
    {
        "content": "<p>awesome thanks a bunch :)</p>",
        "id": 247721124,
        "sender_full_name": "lqd",
        "timestamp": 1627657960
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> btw don't bother much with the WIP PR about placeholder liveness, it's mostly for discussion (because there's probably a need to explicitly add antijoins here and there, which were implicit before) whether the approach was OK with y'all (I'd surely prefer if we added some datafrog helpers rather than me inlining all expressions like I did).</p>\n<p>the one about illegal subset relationships errors is more worthy of your time</p>",
        "id": 247723267,
        "sender_full_name": "lqd",
        "timestamp": 1627658964
    },
    {
        "content": "<p>that's the one I'm reading now</p>",
        "id": 247723560,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627659099
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Polonius.20Hackathon.202021-07-30/near/247721075\">said</a>:</p>\n<blockquote>\n<p>I propose that we go off and do things and check back in in ~30 minutes or somethign</p>\n</blockquote>\n<p>Hey folks -- how's it going :)</p>",
        "id": 247726287,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627660404
    },
    {
        "content": "<p>My report: I read <a href=\"https://github.com/rust-lang/polonius/pull/156\">https://github.com/rust-lang/polonius/pull/156</a> and plan to r+ :)</p>",
        "id": 247726315,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627660421
    },
    {
        "content": "<p>Got caught off guard by 2015 edition, but lexer should be mostly done regardless <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 247726951,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1627660687
    },
    {
        "content": "<p>I'm stealing some stuff from <span class=\"user-mention\" data-user-id=\"116109\">@Vytautas Astrauskas [he/him]</span> to get off the ground with the visualisation tool, but had to take a break to entertain the puppy</p>",
        "id": 247726974,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1627660702
    },
    {
        "content": "<p>Is it fine if the parser moves to 2018, or is it 2015 for a specific reason?</p>",
        "id": 247726996,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1627660711
    },
    {
        "content": "<p>it's fine</p>",
        "id": 247727017,
        "sender_full_name": "lqd",
        "timestamp": 1627660723
    },
    {
        "content": "<p>2018 is better :)</p>",
        "id": 247727091,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627660745
    },
    {
        "content": "<p>let's go directly to 2021 <span aria-label=\"clown\" class=\"emoji emoji-1f921\" role=\"img\" title=\"clown\">:clown:</span></p>",
        "id": 247727108,
        "sender_full_name": "lqd",
        "timestamp": 1627660753
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> you would say that we should for sure remove the <code>Locations::All</code>hack rather than the <code>outlives_everywhere</code>dedicated relation that I had, right ? (to avoid the OOMs in rustc fact generation, and avoiding 95% of the outlives facts in clap)</p>",
        "id": 247727291,
        "sender_full_name": "lqd",
        "timestamp": 1627660827
    },
    {
        "content": "<p>I would say that</p>",
        "id": 247727382,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627660866
    },
    {
        "content": "<p>if we can :)</p>",
        "id": 247727391,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627660869
    },
    {
        "content": "<p>for one thing, that extra relation made the code more complex</p>",
        "id": 247727416,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627660879
    },
    {
        "content": "<p>for sure</p>",
        "id": 247727578,
        "sender_full_name": "lqd",
        "timestamp": 1627660949
    },
    {
        "content": "<p>especially in the opt variant</p>",
        "id": 247727597,
        "sender_full_name": "lqd",
        "timestamp": 1627660965
    },
    {
        "content": "<p>(and I feel it's a bit risky to change these rules this way)</p>",
        "id": 247727643,
        "sender_full_name": "lqd",
        "timestamp": 1627660992
    },
    {
        "content": "<p>I'm trying to decide what to do next</p>",
        "id": 247727808,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627661075
    },
    {
        "content": "<p>I can read your other PR</p>",
        "id": 247727815,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627661079
    },
    {
        "content": "<p>That's probably a good start</p>",
        "id": 247727825,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627661085
    },
    {
        "content": "<p>I was also going to invest a bit of time in documenting our plans</p>",
        "id": 247727849,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627661095
    },
    {
        "content": "<p>I'm not sure it's important to read the other PR now tbh</p>",
        "id": 247728059,
        "sender_full_name": "lqd",
        "timestamp": 1627661201
    },
    {
        "content": "<p>It sounded like you wanted to talk about some aspect of it?</p>",
        "id": 247728087,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627661214
    },
    {
        "content": "<p>in general yeah</p>",
        "id": 247728102,
        "sender_full_name": "lqd",
        "timestamp": 1627661226
    },
    {
        "content": "<p>we don't have to do that <em>now</em>, but if there's nothing more interesting to you in the list, sure we can do that :)</p>",
        "id": 247728131,
        "sender_full_name": "lqd",
        "timestamp": 1627661248
    },
    {
        "content": "<p>let me give it a quick eye</p>",
        "id": 247728146,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627661259
    },
    {
        "content": "<p>maybe rebase it after landing <a href=\"https://github.com/rust-lang-nursery/polonius/issues/156\">polonius#156</a>?</p>",
        "id": 247728276,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627661310
    },
    {
        "content": "<p>sure</p>",
        "id": 247728390,
        "sender_full_name": "lqd",
        "timestamp": 1627661372
    },
    {
        "content": "<p>would you want to read it after I rebased ? (I'm not sure whether it conflicts with 156)</p>",
        "id": 247728452,
        "sender_full_name": "lqd",
        "timestamp": 1627661403
    },
    {
        "content": "<p>I'm skimming it now, doesn't matter</p>",
        "id": 247728501,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627661411
    },
    {
        "content": "<p>I'm going to have to leave soon but this was great!</p>",
        "id": 247740210,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627667170
    },
    {
        "content": "<p>We should record our wins</p>",
        "id": 247740226,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627667177
    },
    {
        "content": "<h1>Wins!</h1>",
        "id": 247740234,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627667182
    },
    {
        "content": "<ul>\n<li>Reviewed <a href=\"https://github.com/rust-lang-nursery/polonius/issues/156\">polonius#156</a> and r+'d</li>\n</ul>",
        "id": 247740248,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627667197
    },
    {
        "content": "<ul>\n<li>DIscussed higher-ranked errors with <span class=\"user-mention\" data-user-id=\"118594\">@Dylan MacKenzie (ecstatic-morse)</span> and figured out how to extend polonius to match existing borrow checker behavior</li>\n</ul>",
        "id": 247740282,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627667224
    },
    {
        "content": "<ul>\n<li>Talked briefly about <a href=\"https://github.com/rust-lang-nursery/polonius/issues/157\">polonius#157</a> but didn't reach conclusions :)</li>\n</ul>",
        "id": 247740314,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627667243
    },
    {
        "content": "<ul>\n<li>Re-established context around long term plans</li>\n</ul>",
        "id": 247740332,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627667252
    },
    {
        "content": "<ul>\n<li>Scheduled <time datetime=\"2021-08-27T14:00:00Z\">2021-08-27T16:00:00+02:00</time> as follow-up :)</li>\n</ul>",
        "id": 247740395,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627667283
    },
    {
        "content": "<p>The rest of y'all should log things as appropriate, then maybe <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> we can do a Inside Rust blog post?</p>",
        "id": 247740451,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627667311
    },
    {
        "content": "<p>since we're about to hit the expected end time for this little sprint: thanks a lot for your time and participation everyone, <span class=\"user-mention\" data-user-id=\"204115\">@Amanda Stjerna</span> <span class=\"user-mention\" data-user-id=\"337115\">@Domenic Quirl</span> <span class=\"user-mention\" data-user-id=\"118594\">@Dylan MacKenzie (ecstatic-morse)</span> <span class=\"user-mention\" data-user-id=\"116109\">@Vytautas Astrauskas [he/him]</span> and <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> you're all ... <em>the best</em> !</p>",
        "id": 247740472,
        "sender_full_name": "lqd",
        "timestamp": 1627667321
    },
    {
        "content": "<p>oh great idea :)</p>",
        "id": 247740494,
        "sender_full_name": "lqd",
        "timestamp": 1627667333
    },
    {
        "content": "<p>(also, we may want to adjust <a href=\"https://github.com/rust-lang/team/blob/master/teams/wg-polonius.toml\">https://github.com/rust-lang/team/blob/master/teams/wg-polonius.toml</a>)</p>",
        "id": 247740544,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627667365
    },
    {
        "content": "<p><a href=\"https://calendar.google.com/event?action=TEMPLATE&amp;tmeid=MnVoZmxtM3ZqbWxwbnRycGtvZjAxMWxkM3EgNnU1cnJ0Y2U2bHJ0djA3cGZpM2RhbWdqdXNAZw&amp;tmsrc=6u5rrtce6lrtv07pfi3damgjus%40group.calendar.google.com\">calendar event for next sprint</a></p>",
        "id": 247740782,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627667499
    },
    {
        "content": "<p>once we gather everything, I'll have a blog PR ready by the time you're back from vacation</p>",
        "id": 247740812,
        "sender_full_name": "lqd",
        "timestamp": 1627667522
    },
    {
        "content": "<p>(enjoy your vacation -- don't work on dada too much ;) amanda as well enjoy your vacation :)</p>",
        "id": 247740909,
        "sender_full_name": "lqd",
        "timestamp": 1627667570
    },
    {
        "content": "<p>Thanks y'all</p>",
        "id": 247741022,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1627667628
    },
    {
        "content": "<p>I'll keep working on this for a bit the following days; I had a major puppy event and had to run off to entertain him before I really got off the ground, but the good news is that this will allow for <span class=\"user-mention\" data-user-id=\"116109\">@Vytautas Astrauskas [he/him]</span> PR to land which will hopefully make things easier for me anyway :)</p>",
        "id": 247748158,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1627671321
    },
    {
        "content": "<p>After lexer generators (<code>logos</code>) were _also_ taking a good while to compile, I ended up removing literally all dependencies to get compile times down. Opened <a href=\"https://github.com/rust-lang/polonius/pull/173\">https://github.com/rust-lang/polonius/pull/173</a> for the result</p>",
        "id": 247764746,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1627680626
    },
    {
        "content": "<p>Time to read up on what the rest of y'all were up to while I was bashing my head against the compile-time wall</p>",
        "id": 247764950,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1627680740
    },
    {
        "content": "<p>I'll have to find some actual logic work for next time now <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 247764998,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1627680778
    },
    {
        "content": "<p>(quick update on finishing what we started during the sprint: the polonius-engine release is done, and here's the PR to update rustc to it <a href=\"https://github.com/rust-lang/rust/pull/87738\">https://github.com/rust-lang/rust/pull/87738</a>)</p>",
        "id": 248287547,
        "sender_full_name": "lqd",
        "timestamp": 1628028621
    }
]