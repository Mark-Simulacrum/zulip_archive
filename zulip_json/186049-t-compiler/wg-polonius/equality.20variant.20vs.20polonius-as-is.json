[
    {
        "content": "<p>this one is important with respect to users</p>",
        "id": 205802020,
        "sender_full_name": "lqd",
        "timestamp": 1596465797
    },
    {
        "content": "<p>(side note that it feels like it wants to use union-set in the ultimate impl...)</p>",
        "id": 205802048,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596465815
    },
    {
        "content": "<p>I had this old implementation of the equality rules <a href=\"https://github.com/lqd/borrow-check/tree/variant_prototype2\">https://github.com/lqd/borrow-check/tree/variant_prototype2</a> which was my last look at the rules. I remember I had to add another TC of the equality tuples compared to just propagating them as mentioned on the issue, as they were missing an error in one of our examples. I rambled the analysis and fix, in this other topic starting <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/equality.20regions/near/177797983\">here</a> which ends with the rustc test cases with unexpected results: 2 cases which shouldn't be compiling but do so with the prototype</p>",
        "id": 205813749,
        "sender_full_name": "lqd",
        "timestamp": 1596471222
    },
    {
        "content": "<p>OK</p>",
        "id": 205814006,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596471361
    },
    {
        "content": "<p>let me try to catch up here, I feel like this is the most interesting unknown <em>at present</em>, right?</p>",
        "id": 205814114,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596471405
    },
    {
        "content": "<p>(not sure btw if you following along with what <span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> and I were saying in <a class=\"stream-topic\" data-stream-id=\"186049\" href=\"/#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/move.20error.20reporting\">#t-compiler/wg-polonius &gt; move error reporting</a>, it looks like we could speed that up somewhat while also getting the error reporting that rustc wants...)</p>",
        "id": 205814180,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596471443
    },
    {
        "content": "<p>(I was not entirely following but that's great to hear !)</p>",
        "id": 205814379,
        "sender_full_name": "lqd",
        "timestamp": 1596471552
    },
    {
        "content": "<p>it feels like a very interesting unknown indeed</p>",
        "id": 205814426,
        "sender_full_name": "lqd",
        "timestamp": 1596471584
    },
    {
        "content": "<p>and one that at least you wouldn't \"waste\" your precious little time on updating hackmd rules that I can do in the meantime :)</p>",
        "id": 205814536,
        "sender_full_name": "lqd",
        "timestamp": 1596471638
    },
    {
        "content": "<p>I'm looking at the two test cases you cited in the \"ramble\"</p>",
        "id": 205814859,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596471805
    },
    {
        "content": "<p>:) rambling-as-a-service</p>",
        "id": 205815079,
        "sender_full_name": "lqd",
        "timestamp": 1596471912
    },
    {
        "content": "<p>So I want to try and reproduce this case: <a href=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/nll/promoted-bounds.rs\">https://github.com/rust-lang/rust/blob/master/src/test/ui/nll/promoted-bounds.rs</a></p>",
        "id": 205815662,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596472224
    },
    {
        "content": "<p>off the top of my head, I can't see why it would not get an error. I expect that we would force <code>c</code> to be <code>{Lb, La}</code> (where those are loans from <code>&amp;l</code> and <code>&amp;5</code> repsectively)</p>",
        "id": 205815873,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596472329
    },
    {
        "content": "<p>and hence we should get an error when we leave the scope of <code>{...}</code> that block because of some statement like <code>STORAGE_DEAD(l)</code></p>",
        "id": 205815944,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596472372
    },
    {
        "content": "<p>in order for me to do that, <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span>, do I have to build a rustc that links against your branch? Or can I just generate the facts I guess?</p>",
        "id": 205815993,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596472398
    },
    {
        "content": "<p>oh sorry I don't remember if I had pushed it, let me check (I tend not to do so)</p>",
        "id": 205816182,
        "sender_full_name": "lqd",
        "timestamp": 1596472484
    },
    {
        "content": "<p>(since it's an old polonius branch, generating new facts wouldn't work either, after the relations have been renamed and so on)</p>",
        "id": 205816287,
        "sender_full_name": "lqd",
        "timestamp": 1596472536
    },
    {
        "content": "<p>ok, maybe a worthwhile experiment would be to try and \"rebase\"</p>",
        "id": 205816333,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596472556
    },
    {
        "content": "<p>but I think your dedicated half day for the sprint is close to ending ?</p>",
        "id": 205816341,
        "sender_full_name": "lqd",
        "timestamp": 1596472560
    },
    {
        "content": "<p>if so, I can prepare both the rustc branch and polonius rebased prototype later today</p>",
        "id": 205816412,
        "sender_full_name": "lqd",
        "timestamp": 1596472582
    },
    {
        "content": "<p>yeah, I've got to go, I've got a bit more time -- I might pop back in later and do a few more things, not sure yet</p>",
        "id": 205816526,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596472638
    },
    {
        "content": "<p>if nothing else though I have to attend the lang-team meeting in a few hours :)</p>",
        "id": 205816554,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596472656
    },
    {
        "content": "<p>alright I will start preparing these 2</p>",
        "id": 205817197,
        "sender_full_name": "lqd",
        "timestamp": 1596472935
    },
    {
        "content": "<p>it's more important / useful than the OOM fixes, and we can talk a bit about those later in the sprint</p>",
        "id": 205817265,
        "sender_full_name": "lqd",
        "timestamp": 1596472988
    },
    {
        "content": "<p>I agree, this is probably the biggest unknown</p>",
        "id": 205821490,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596475013
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> alright I've finished rebasing and adding subset errors to the prototype <a href=\"https://github.com/lqd/borrow-check/tree/variant_prototype3\">https://github.com/lqd/borrow-check/tree/variant_prototype3</a></p>",
        "id": 205839188,
        "sender_full_name": "lqd",
        "timestamp": 1596484133
    },
    {
        "content": "<p>did you want to run rustc's tests with it or just the one example from earlier ? if it's the former I can push a rustc branch to make it easier to test</p>",
        "id": 205839402,
        "sender_full_name": "lqd",
        "timestamp": 1596484220
    },
    {
        "content": "<p>otherwise any recent nightly's facts would work</p>",
        "id": 205839441,
        "sender_full_name": "lqd",
        "timestamp": 1596484243
    },
    {
        "content": "<p>here is the rustc branch for easy testing if need be <a href=\"https://github.com/lqd/rust/tree/equality_prototype\">https://github.com/lqd/rust/tree/equality_prototype</a></p>",
        "id": 205841366,
        "sender_full_name": "lqd",
        "timestamp": 1596485272
    },
    {
        "content": "<p>ooh, nice</p>",
        "id": 205842747,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596486063
    },
    {
        "content": "<p>most of the variant was generated by datapond so it's definitely, absolutely, not at all efficient. For example, equal origins are still present in <code>subsets</code> which will take some deduping at the end of each round, and so on, but that shouldn't matter for our tests at least</p>",
        "id": 205843373,
        "sender_full_name": "lqd",
        "timestamp": 1596486391
    },
    {
        "content": "<p>output on promoted-bounds:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ cargo run -q -- ./inputs/promoted-bounds/nll-facts/main/ --show-tuples -a naive &amp;&amp; cargo run -q -- ./inputs/promoted-bounds/nll-facts/main/ --show-tuples -a prototype\n--------------------------------------------------\nDirectory: ./inputs/promoted-bounds/nll-facts/main/\nTime: 0.061s\n# errors\nerrors &quot;Start(bb2[7])&quot; &quot;bw0&quot;\n# move_errors\n# subset_errors\n--------------------------------------------------\nDirectory: ./inputs/promoted-bounds/nll-facts/main/\nTime: 0.064s\n# errors\n# move_errors\n# subset_errors\n</code></pre></div>",
        "id": 205843911,
        "sender_full_name": "lqd",
        "timestamp": 1596486719
    },
    {
        "content": "<p>you didn't check in the promoted-bounds inputs, right?</p>",
        "id": 205855363,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596494191
    },
    {
        "content": "<p>I don't see them, anyway</p>",
        "id": 205855366,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596494196
    },
    {
        "content": "<p>no but I can do so</p>",
        "id": 205855376,
        "sender_full_name": "lqd",
        "timestamp": 1596494204
    },
    {
        "content": "<p>just a sec</p>",
        "id": 205855387,
        "sender_full_name": "lqd",
        "timestamp": 1596494213
    },
    {
        "content": "<p>it's ok, I generated them</p>",
        "id": 205855518,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596494309
    },
    {
        "content": "<p>I see the output now</p>",
        "id": 205855529,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596494322
    },
    {
        "content": "<p>ah ok</p>",
        "id": 205855647,
        "sender_full_name": "lqd",
        "timestamp": 1596494414
    },
    {
        "content": "<p>I was just about to push</p>",
        "id": 205855666,
        "sender_full_name": "lqd",
        "timestamp": 1596494433
    },
    {
        "content": "<p>I'm trying to remember what kind of debug output there is</p>",
        "id": 205856992,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596495566
    },
    {
        "content": "<p>e.g., I guess I can't readily get a graphviz of the cfg?</p>",
        "id": 205857004,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596495575
    },
    {
        "content": "<p>you can IIRC</p>",
        "id": 205857127,
        "sender_full_name": "lqd",
        "timestamp": 1596495636
    },
    {
        "content": "<p>probably <code>--graphviz-file somefile.dot</code></p>",
        "id": 205857183,
        "sender_full_name": "lqd",
        "timestamp": 1596495675
    },
    {
        "content": "<p>it will have some facts so it's not just the cfg</p>",
        "id": 205857229,
        "sender_full_name": "lqd",
        "timestamp": 1596495709
    },
    {
        "content": "<p>yeah</p>",
        "id": 205857462,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596495867
    },
    {
        "content": "<p>useful maybe</p>",
        "id": 205857465,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596495871
    },
    {
        "content": "<p>they can easily be removed to just leave the cfg IIRC</p>",
        "id": 205857517,
        "sender_full_name": "lqd",
        "timestamp": 1596495923
    },
    {
        "content": "<p>(last time I rambled while debugging I also had to add the equality tuples to the graphviz output)</p>",
        "id": 205857853,
        "sender_full_name": "lqd",
        "timestamp": 1596496264
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> I realize I might be a bit confused -- the <code>promoted-boudns</code> test. With naive, at least, it generates an error--- like it's supposed to, right?</p>",
        "id": 205861731,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596500299
    },
    {
        "content": "<p><em>oh</em>, I have to run with <code>Prototype</code>...</p>",
        "id": 205861754,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596500324
    },
    {
        "content": "<p>right :)</p>",
        "id": 205861763,
        "sender_full_name": "lqd",
        "timestamp": 1596500336
    },
    {
        "content": "<p>that part of the command line was scrolled out on my earlier output</p>",
        "id": 205861802,
        "sender_full_name": "lqd",
        "timestamp": 1596500375
    },
    {
        "content": "<p>ok, so, digging a bit ...</p>",
        "id": 205863867,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596503062
    },
    {
        "content": "<p>at bb0[22]</p>",
        "id": 205863873,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596503074
    },
    {
        "content": "<p>we have <code> _8 = move _9(move _10, move _11) -&gt; [return: bb2, unwind: bb1];</code></p>",
        "id": 205863883,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596503090
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>    let _8: &amp;&#39;_#70r i32;\n    let mut _9: fn(&amp;&#39;_#71r i32, &amp;&#39;_#72r i32) -&gt; &amp;&#39;_#73r i32 {shorten_lifetime::&lt;&#39;_#71r, &#39;_#72r, &#39;_#73r&gt;}; // in scope 0 at promoted-bounds.rs:20:17: 20:37\n    let mut _10: &amp;&#39;_#74r i32;            // in scope 0 at promoted-bounds.rs:20:38: 20:39\n    let mut _11: &amp;&#39;_#75r i32;            // in scope 0 at promoted-bounds.rs:20:41: 20:42\n</code></pre></div>",
        "id": 205863902,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596503111
    },
    {
        "content": "<p>but</p>",
        "id": 205863921,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596503143
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>outlives(&quot;\\&#39;_#73r&quot;, &quot;\\&#39;_#70r&quot;, _)\noutlives(&quot;\\&#39;_#74r&quot;, &quot;\\&#39;_#71r&quot;, _)\noutlives(&quot;\\&#39;_#75r&quot;, &quot;\\&#39;_#72r&quot;, _)\n</code></pre></div>",
        "id": 205863928,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596503156
    },
    {
        "content": "<p>there seems to be missing a relationship between 71, 72, and 73</p>",
        "id": 205863981,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596503174
    },
    {
        "content": "<p>that would've been established by the where clauses on <code>_9</code></p>",
        "id": 205863994,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596503191
    },
    {
        "content": "<p>i.e., for the type to be well-formed</p>",
        "id": 205864004,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596503203
    },
    {
        "content": "<p>I'm not 100% sure where that would be checked</p>",
        "id": 205864013,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596503222
    },
    {
        "content": "<p>that's very interesting</p>",
        "id": 205879724,
        "sender_full_name": "lqd",
        "timestamp": 1596526110
    },
    {
        "content": "<p><del>both that it can show a problem in fact generation, and that the Naive variant is able to overcome it <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></del> maybe not, at least I think the relationship would show up in facts if it was a direct call and not via a function pointer, where the relationship would be discovered during the computation</p>",
        "id": 205880135,
        "sender_full_name": "lqd",
        "timestamp": 1596526618
    },
    {
        "content": "<p>ah if you use a direct call, the prototype variant does indeed find the error</p>",
        "id": 205881475,
        "sender_full_name": "lqd",
        "timestamp": 1596528049
    },
    {
        "content": "<p>I think NLLs would work similarly on this relationship, that is 71 &lt;: 73, 72 &lt;: 73 follow via <code>_31</code> (<code>let mut _31: &amp;'_#104r fn(&amp;'_#105r i32, &amp;'_#106r i32) -&gt; &amp;'_#107r i32</code>) with 71 &lt;: 105 &lt;: 107 &lt;: 73 and 72 &lt;: 106 &lt;: 107 &lt;: 73 (with some intermediate origins from <code>_1</code>removed)</p>",
        "id": 205882453,
        "sender_full_name": "lqd",
        "timestamp": 1596528854
    },
    {
        "content": "<p>it's not as clear in the facts as it is in the MIR <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span> I'm not seeing the <code>outlves</code> facts involving 71 or 72 we'd expect from the MIR, and that is probably what you meant all along</p>",
        "id": 205883251,
        "sender_full_name": "lqd",
        "timestamp": 1596529639
    },
    {
        "content": "<p>these facts are super confusing, it's like the regions have different names</p>",
        "id": 205887516,
        "sender_full_name": "lqd",
        "timestamp": 1596533431
    },
    {
        "content": "<p>going by the subset graph shape, I think we have <code>71 &lt;: 61 &lt;: 105</code> showing up as <code>77 &lt;: 67 &lt;: 115</code></p>",
        "id": 205887926,
        "sender_full_name": "lqd",
        "timestamp": 1596533803
    },
    {
        "content": "<p>ok I might be starting to get a hunch for what the problem is</p>",
        "id": 205888320,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596534150
    },
    {
        "content": "<p>the regions <em>are</em> indeed confusing but my hunch is this</p>",
        "id": 205888779,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596534546
    },
    {
        "content": "<p>(side note that the proliferation of intermediate regions and so forth is probably kind of painful for polonius, it's exactly what the opt variants were trying to help... i.e., avoid propagating loan regions along every subset edge...)</p>",
        "id": 205888817,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596534583
    },
    {
        "content": "<p>anyway my <em>hunch</em> is that, somewhere, we <em>are</em> enforcing the relationship between 71, 72, and 73 -- but we're establishing it once and then expecting it to remain true, but the whole idea of this variant was that we don't have to do that</p>",
        "id": 205888911,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596534643
    },
    {
        "content": "<p>this example seems to suggest that this idea is wrong, that at least <em>sometimes</em> we do need to carry subset relations forward</p>",
        "id": 205888928,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596534657
    },
    {
        "content": "<p>I'm trying to wrap my head around it :)</p>",
        "id": 205888938,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596534671
    },
    {
        "content": "<p>I remember having this feeling that the notion of carrying equality constraints forward also kind of felt like a hack</p>",
        "id": 205888953,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596534693
    },
    {
        "content": "<p>i.e., that there is a deeper distinction between 'momentary' relations and 'permanent' relations</p>",
        "id": 205888976,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596534713
    },
    {
        "content": "<p>the latter coming about effectively when you create two kind of distinct aliases, and you need to keep a relationship between the parts</p>",
        "id": 205889044,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596534748
    },
    {
        "content": "<p>or maybe I'm looking at this wrong</p>",
        "id": 205889456,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596535093
    },
    {
        "content": "<p>maybe the problem is not that the subset relation <em>should've</em> propagated forward, so much as that we are not enforcing that the type is well-formed at the location or something like that</p>",
        "id": 205889511,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596535151
    },
    {
        "content": "<p>gonna have to go and come back later though :)</p>",
        "id": 205889534,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596535180
    },
    {
        "content": "<p>the example as given doesn't show it, but something I'm thinking about is this variant:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">promoted_fn_item_ref</span>: <span class=\"nc\">fn</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">shorten_lifetime</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 205890151,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596535760
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=c9d4058a68c306b75008b65b28d6f0da\">playground</a></p>",
        "id": 205890168,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596535775
    },
    {
        "content": "<p>it's interesting because the <code>_</code> are going to be instantiated to various <code>&amp;'X i32</code>, <code>&amp;'Y i32</code>, and <code>&amp;'Z i32</code>, and there has to be a relationship between X, Y, and Z that persists</p>",
        "id": 205890241,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596535810
    },
    {
        "content": "<p>but that relationship doesn't come from the <code>fn</code> type itself, it comes from the <code>shorten_lifetime</code> type</p>",
        "id": 205890249,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596535822
    },
    {
        "content": "<p>this makes me think that the equality variant as written is sort of flawed indeed, that there <em>is</em> a concept of \"transient\" subset relationships that are only enforced at a particular point, but it's more subtle than I was giving credit to</p>",
        "id": 205890290,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596535877
    },
    {
        "content": "<p>it's pretty subtle and kinda hard to wrap my head around in conversation, without focusing hard on the equality propagation rules for each example</p>",
        "id": 205890556,
        "sender_full_name": "lqd",
        "timestamp": 1596536131
    },
    {
        "content": "<p>I think my take-away here is that the equality variant is kind of incorrect</p>",
        "id": 205904172,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596546795
    },
    {
        "content": "<p>it'd be good to write up the examples in a bit more detail <em>but</em></p>",
        "id": 205904185,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596546805
    },
    {
        "content": "<p>there is probably a different way to formulate the rules to accept the program(s) I initially wanted to accept</p>",
        "id": 205904209,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596546822
    },
    {
        "content": "<p>I think it'd be more like -- can we identify those cases where the subset relation has to hold <em>instantaneously</em> and just enforce them at a single point and not propagate them forward?</p>",
        "id": 205904294,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596546860
    },
    {
        "content": "<p>but I also think maybe the best \"immediate step\" here is to take some notes and defer this until we've made progress in other areas</p>",
        "id": 205904324,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596546876
    },
    {
        "content": "<p>we expected it to be incorrect :)</p>",
        "id": 205904887,
        "sender_full_name": "lqd",
        "timestamp": 1596547186
    },
    {
        "content": "<p>some notes/summary would be good for later</p>",
        "id": 205905013,
        "sender_full_name": "lqd",
        "timestamp": 1596547241
    },
    {
        "content": "<p>I can focus on it in the future if it's important, with more dedication than the quick hack job that it is</p>",
        "id": 205905122,
        "sender_full_name": "lqd",
        "timestamp": 1596547307
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/equality.20variant.20vs.20polonius-as-is/near/205904887\">said</a>:</p>\n<blockquote>\n<p>we expected it to be incorrect :)</p>\n</blockquote>\n<p>well, I mean that the <em>concept</em> is incorrect</p>",
        "id": 205905424,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596547452
    },
    {
        "content": "<p>you <em>can't</em> just propagate equality</p>",
        "id": 205905436,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596547457
    },
    {
        "content": "<p>I didn't quite expect that at least :)</p>",
        "id": 205905453,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596547467
    },
    {
        "content": "<p>I was thinking maybe it was an impl bug or something else</p>",
        "id": 205905472,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596547482
    },
    {
        "content": "<p>oh :)</p>",
        "id": 205905474,
        "sender_full_name": "lqd",
        "timestamp": 1596547485
    },
    {
        "content": "<p>me neither evidently, it's interesting/scary that such subtlety was only present in one or two tests</p>",
        "id": 205905564,
        "sender_full_name": "lqd",
        "timestamp": 1596547533
    },
    {
        "content": "<p>which reminds me, that maybe the other unexpected case may contain a different cause</p>",
        "id": 205905590,
        "sender_full_name": "lqd",
        "timestamp": 1596547557
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/equality.20variant.20vs.20polonius-as-is/near/205905564\">said</a>:</p>\n<blockquote>\n<p>me neither evidently, it's interesting/scary that such subtlety was only present in one or two tests</p>\n</blockquote>\n<p>yeah, I was thinking about that :)</p>",
        "id": 205905921,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596547733
    },
    {
        "content": "<p>ok well let me post an update to the issue</p>",
        "id": 205905967,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596547752
    },
    {
        "content": "<p>I forget, did we have an example that compiles with NLL but does not compile with polinius?</p>",
        "id": 205906891,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596548288
    },
    {
        "content": "<p>I feel like we did</p>",
        "id": 205906893,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596548290
    },
    {
        "content": "<p>I found this motivating example on Zulip but I also think maybe it's wrong, though it could (maybe) be <em>made</em> correct</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"w\"> </span><span class=\"mi\">13</span>:<span class=\"mi\">42</span><span class=\"w\"></span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;x</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">y</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;y</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">something</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// creates `&#39;x: &#39;y` subset relation</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">something</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">z</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// creates {L0} in &#39;x constraint</span>\n<span class=\"w\">  </span><span class=\"c1\">// this point, we have `&#39;x: &#39;y` and `{L0} in `&#39;x`, so we also have `{L0} in &#39;y`</span>\n<span class=\"w\">  </span><span class=\"nb\">drop</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"n\">z</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// polonius flags an (unnecessary) error</span>\n\n<span class=\"nb\">drop</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>wrong in the sense that I think polonius with just subset rules would accept it</p>",
        "id": 205907174,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596548475
    },
    {
        "content": "<p>in particular, I think <code>x = &amp;z</code> should make <code>'x</code> be <em>dead</em> on entry to that point, so we would drop the <code>'x: 'y</code> subset relation</p>",
        "id": 205907198,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596548499
    },
    {
        "content": "<p>I don't remember we had an example that compiled with NLLs and was rejected by polonius</p>",
        "id": 205907363,
        "sender_full_name": "lqd",
        "timestamp": 1596548584
    },
    {
        "content": "<p>oh I see that we already found that</p>",
        "id": 205907374,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596548592
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=52fbcbf0fdf3c55542476842053994a6\">this was a revised version of the motivating example</a></p>",
        "id": 205907387,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596548602
    },
    {
        "content": "<p>ah right right</p>",
        "id": 205907388,
        "sender_full_name": "lqd",
        "timestamp": 1596548603
    },
    {
        "content": "<p>although it too <em>could</em> be resolved with a more precise version</p>",
        "id": 205907407,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596548617
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/equality.20variant.20vs.20polonius-as-is/near/205907363\">said</a>:</p>\n<blockquote>\n<p>I don't remember we had an example that compiled with NLLs and was rejected by polonius</p>\n</blockquote>\n<p>I could be wrong, for some reason I thought we did</p>",
        "id": 205907424,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596548624
    },
    {
        "content": "<p>the \"polonius imprecision unnecessary error\"</p>",
        "id": 205907428,
        "sender_full_name": "lqd",
        "timestamp": 1596548626
    },
    {
        "content": "<p>if we don't, that's good :)</p>",
        "id": 205907432,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596548628
    },
    {
        "content": "<p>I was basically wondering if there was <em>some extension</em> that would be required to make polonius not break any NLL code</p>",
        "id": 205907516,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596548661
    },
    {
        "content": "<p>I feel like NLL also rejected that</p>",
        "id": 205907585,
        "sender_full_name": "lqd",
        "timestamp": 1596548695
    },
    {
        "content": "<p>it appears it does reject it</p>",
        "id": 205907656,
        "sender_full_name": "lqd",
        "timestamp": 1596548742
    },
    {
        "content": "<p>yes, it does</p>",
        "id": 205907756,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596548778
    },
    {
        "content": "<p>at least crater would be our best bet to find such a case if it exists, compared to finding code that doesn't compile today and <em>shouldn't</em> compile with polonius either</p>",
        "id": 205907790,
        "sender_full_name": "lqd",
        "timestamp": 1596548803
    },
    {
        "content": "<p>+1</p>",
        "id": 205907823,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596548827
    },
    {
        "content": "<p>I would be curious to get <span class=\"user-mention\" data-user-id=\"127262\">@Aaron Weiss</span>'s take on the promoted-bounds example, though. MAybe I can draft up my even more troublesome variant of it.</p>",
        "id": 205908586,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596549179
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=f836e6c86a68e41b5f2140efe298edfc\">example</a></p>",
        "id": 205908760,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596549243
    },
    {
        "content": "<p>(we could publish a \"puzzle of the day\" of similar examples, like the sudoku cryptic, but for lifetimes :)</p>",
        "id": 205909042,
        "sender_full_name": "lqd",
        "timestamp": 1596549370
    },
    {
        "content": "<p>my writeup: <a href=\"https://github.com/rust-lang/polonius/issues/107#issuecomment-668612953\">https://github.com/rust-lang/polonius/issues/107#issuecomment-668612953</a></p>",
        "id": 205909403,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596549535
    },
    {
        "content": "<p>It seems sort of obvious that this is broken now</p>",
        "id": 205909435,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596549547
    },
    {
        "content": "<p>but of course it wasn't before :)</p>",
        "id": 205909447,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596549550
    },
    {
        "content": "<p>not sure if I should just close the issue or what</p>",
        "id": 205909501,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596549582
    },
    {
        "content": "<p>I'll leave it for now, at least we settled that mystery</p>",
        "id": 205909521,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596549592
    },
    {
        "content": "<p>yeah let's keep it, it's food for thought for the future as there seems to be some real insight in there</p>",
        "id": 205909636,
        "sender_full_name": "lqd",
        "timestamp": 1596549639
    },
    {
        "content": "<p>(on the topic of \"exactly one example that showed the problem\", I am interested in how we could try to prove polonius correct... but one thing at a time, and it seems like <span class=\"user-mention\" data-user-id=\"127262\">@Aaron Weiss</span> and <span class=\"user-mention\" data-user-id=\"116852\">@Andrea Lattuada</span> are kind of doing work paving that route)</p>",
        "id": 205909696,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596549666
    },
    {
        "content": "<p>/me curious about dafny</p>",
        "id": 205909717,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596549676
    },
    {
        "content": "<p>maybe we need an F* to rust extractor like \"rusty kremlin\" (IIRC oxide is in F*?)</p>",
        "id": 205909899,
        "sender_full_name": "lqd",
        "timestamp": 1596549755
    },
    {
        "content": "<p>(maybe kremlin would work as is heh)</p>",
        "id": 205909988,
        "sender_full_name": "lqd",
        "timestamp": 1596549800
    },
    {
        "content": "<p>I've finished reading the writeup and it's great, super clear, thanks a bunch</p>",
        "id": 205939257,
        "sender_full_name": "lqd",
        "timestamp": 1596564201
    }
]