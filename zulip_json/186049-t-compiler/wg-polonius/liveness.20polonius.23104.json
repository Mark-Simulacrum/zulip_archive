[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> I see in my to do list that I was supposed to provide some more notes about the next steps for <a href=\"https://github.com/rust-lang-nursery/polonius/issues/104\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/issues/104\">polonius#104</a> -- I'm not 100% sure where you are</p>",
        "id": 163762456,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555705520
    },
    {
        "content": "<p>If you happen to be around, I have a few questions for you, otherwise I'll take a best guess</p>",
        "id": 163762463,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555705533
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> ok you can <a href=\"https://github.com/rust-lang/polonius/issues/104#issuecomment-485011791\" target=\"_blank\" title=\"https://github.com/rust-lang/polonius/issues/104#issuecomment-485011791\">see the notes here</a> -- please leave any questions and I'll try to answer, or we can discuss on Tuesday</p>",
        "id": 163764374,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555707292
    },
    {
        "content": "<p>I was just going to bed when this happened but I will have a look later! Thanks! And at a first glance this was roughly what I needed to get un-stuck, thank you!</p>",
        "id": 163789192,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1555740971
    },
    {
        "content": "<p>For what it's worth, these are my notes from when I tried to figure this out myself. I wasn't <em>that</em> far off!:</p>\n<p>## How Calculation Works<br>\n1. <code>all_facts</code>is initialised in <code>nll/mod.rs</code>, in <code>compute_regions()</code><br>\n2. the variable <code>constraints</code>of type <code>MirTypeckRegionConstraints</code>is extracted from <code>type_check::type_check()</code>’s return value<br>\n3. its field <code>liveness_constraints</code>contains <code>LivenessValues</code>, and seems to be filled with live locals in <code>liveness::generate()</code>, which delegates the computation to <code>trace::trace()</code>, as filtered through <code>regions_that_outlive_free_regions()</code> and then <code>compute_live_locals()</code> (used to filter the set of variables to actually bother tracing)<br>\n## Notes<br>\n- The extraction from MIR happens in the <code>LocalUseMap</code>, which we can probably just steal and use.</p>\n<p>## Questions<br>\n- should we still compute live locals, or should that pre-filtering too happen in Polonius? It looks very linear to me so maybe that’s fine?<br>\n- what happens with variable (“point”) IDs in translation?  The important thing I guess is that it is the same as the ones used in the CFG?<br>\n- If we need to run both NLL and Polonius separately, how do we architect the liveness computation-ectomy, given that NLL needs it?<br>\n- What should we actually use for the Variable ID in rustc? How do we deal with the fact that variables seems to be unique to regions? Do we need to generate new IDs? Can we just use Locals?</p>",
        "id": 163983809,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1556022217
    },
    {
        "content": "<p>Ok, so I have a question now: I have something that seems to work and produces used/defined facts and serialises them to files in rustc, but I have no idea if they are correct as I don't really understand the output. Is there any obvious way to verify it?</p>\n<p>Also, I am using the <code>start_index</code> of the <code>Location</code>s for the variables, is that reasonable? I'm not sure about the difference.</p>",
        "id": 164090543,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1556119406
    },
    {
        "content": "<p>(Ping @lqd and <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> )</p>",
        "id": 164090622,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1556119449
    },
    {
        "content": "<p>(none of this is pushed anywhere)</p>",
        "id": 164090641,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1556119470
    },
    {
        "content": "<p>I was thinking you might be able to compare your rustc output to your test inputs ?</p>",
        "id": 164096025,
        "sender_full_name": "lqd",
        "timestamp": 1556123160
    },
    {
        "content": "<p>(but maybe they’re only in the program facts form so this wouldn’t help)</p>",
        "id": 164096145,
        "sender_full_name": "lqd",
        "timestamp": 1556123211
    },
    {
        "content": "<p>I was also thinking this data could be related to the other facts, eg region_live_at, and comparing that relationship à la metamorphic testing</p>",
        "id": 164096494,
        "sender_full_name": "lqd",
        "timestamp": 1556123454
    },
    {
        "content": "<p>other than eyeballing and trying to compare to the existing NLL liveness (but I’m not sure they’re identical yet) :(</p>",
        "id": 164096649,
        "sender_full_name": "lqd",
        "timestamp": 1556123572
    },
    {
        "content": "<p>maybe <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> has ideas in addition to niko</p>",
        "id": 164096692,
        "sender_full_name": "lqd",
        "timestamp": 1556123600
    },
    {
        "content": "<blockquote>\n<p>Is there any obvious way to verify it?</p>\n</blockquote>\n<p>Well, <em>sort of</em> maybe -- polonius had some kind of graphviz mode that we used for visualization, which might let you at least inspect it more naturally. But I don't remember the details and I kind of doubt it will help. Of course, when we get things far enough along, we'll be able to compare the behavior with the existing solver.</p>\n<blockquote>\n<p>Also, I am using the <code>start_index</code> of the <code>Location</code>s for the variables, is that reasonable? I'm not sure about the difference.</p>\n</blockquote>\n<p>So, the <em>start point</em> is where we enter the statement, and the <em>mid point</em> is kind of where the statement \"takes effect\". (To be honest, it would be good to revisit why we have these two points, and some other specifics of polonius -- I had hoped we'd be doing more regular video chats for that purpose.)</p>",
        "id": 164108010,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556131349
    },
    {
        "content": "<p>Anyway, to answer your question -- I think that we should be using the <em>mid</em> point</p>",
        "id": 164108059,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556131398
    },
    {
        "content": "<blockquote>\n<p>Anyway, to answer your question -- I think that we should be using the <em>mid</em> point</p>\n</blockquote>\n<p>I had a vague memory of this which is why I thought to ask; I'll change it to use the mid-points</p>",
        "id": 164170315,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1556199475
    },
    {
        "content": "<p>Ok, eyeballing the output and comparing it to the Mir for one of the test inputs, I think it's correct. Should I add the updated inputs with the var_used and var_defined facts to the liveness PR (<a href=\"https://github.com/rust-lang-nursery/polonius/issues/105\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/issues/105\">polonius#105</a>)?</p>",
        "id": 164176490,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1556203449
    },
    {
        "content": "<p>I have also opened rust#60266 and marked it as WIP</p>",
        "id": 164176582,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1556203508
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/60266\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/60266\">rust#60266</a></p>",
        "id": 164177582,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556204162
    },
    {
        "content": "<p>(I added a new linkifier for that format)</p>",
        "id": 164177610,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556204167
    },
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> this looks basically right -- I guess we need to start laying out next steps, eh?</p>",
        "id": 164300941,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556315622
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> yep!</p>",
        "id": 164322406,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1556348990
    },
    {
        "content": "<p>OK, I added some notes onto <a href=\"https://github.com/rust-lang-nursery/polonius/issues/104\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/issues/104\">polonius#104</a></p>",
        "id": 164566832,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556651545
    },
    {
        "content": "<p>they're kind of high-level, <span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span>, so feel free to fire questions</p>",
        "id": 164566845,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556651561
    },
    {
        "content": "<p>I think the order I would do things is to:</p>\n<ul>\n<li>extend with drop-uses first and track those</li>\n<li>then try to replace the region-live-at in the way I described</li>\n</ul>",
        "id": 164566863,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556651577
    },
    {
        "content": "<p>this way we should be able to test as we go</p>",
        "id": 164566875,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556651585
    },
    {
        "content": "<p>Also, maybe we should try to schedule some time to discuss and plan out again?</p>",
        "id": 164567198,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556651825
    },
    {
        "content": "<blockquote>\n<p>Also, maybe we should try to schedule some time to discuss and plan out again?</p>\n</blockquote>\n<p>Sounds good to me! I'll read through your instructions tomorrow and see where that gets me</p>",
        "id": 164571535,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1556654472
    },
    {
        "content": "<p>This is a great time to write the section of my thesis that explains what regions are, because I just realised I'm not 100% clear on that</p>",
        "id": 164604756,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1556693372
    },
    {
        "content": "<p>Indeed, a good question. Polonius's take is that a \"region\" is <em>itself</em> sort of meaningless. It is a unique identifier for a particular reference, essentially. However, when you combine this region with <code>subset</code> relations and other things, we determine the relationship of regions to other regions -- basically, the aliasing relationships between references.</p>",
        "id": 164611121,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556702525
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I have added the logic to do drop-live calculations to polonius and rustc (see <a href=\"https://github.com/rust-lang-nursery/polonius/issues/105\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/issues/105\">polonius#105</a> for the logic and <a href=\"https://github.com/rust-lang/rust/issues/60266\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/60266\">rust#60266</a> for the fact generation). Was this what you had in mind?</p>",
        "id": 164771287,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1556864836
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> looking</p>",
        "id": 164800156,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556894713
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> I <a href=\"https://github.com/rust-lang/polonius/issues/104#issuecomment-489681898\" target=\"_blank\" title=\"https://github.com/rust-lang/polonius/issues/104#issuecomment-489681898\">answered you</a> on GH -- sorry, it's hard for me to monitor GH notifications.</p>",
        "id": 164995781,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557159734
    },
    {
        "content": "<p>Hopefully that makes sense to you.</p>",
        "id": 164995792,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557159742
    },
    {
        "content": "<p>I think so, but was I correct in my assumption that we do need to track drops for points and then do the same point-to-region translation for drops as we do for uses?</p>",
        "id": 164995877,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557159812
    },
    {
        "content": "<p>Or have I gotten these mixed up completely?</p>",
        "id": 164995886,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557159822
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"204115\">Albin Stjerna</span> I <a href=\"https://github.com/rust-lang/polonius/issues/104#issuecomment-489681898\" target=\"_blank\" title=\"https://github.com/rust-lang/polonius/issues/104#issuecomment-489681898\">answered you</a> on GH -- sorry, it's hard for me to monitor GH notifications.</p>\n</blockquote>\n<p>I understand; should I ask questions here or ping you in my questions in GH? What's the best way for you?</p>",
        "id": 164995972,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557159865
    },
    {
        "content": "<blockquote>\n<p>I have added the logic to do drop-live calculations to polonius and rustc (see <a href=\"https://github.com/rust-lang-nursery/polonius/issues/105\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/issues/105\">polonius#105</a> for the logic and <a href=\"https://github.com/rust-lang/rust/issues/60266\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/60266\">rust#60266</a> for the fact generation). Was this what you had in mind?</p>\n</blockquote>\n<p>also, these commits look good</p>",
        "id": 164995979,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557159873
    },
    {
        "content": "<blockquote>\n<p>I understand; should I ask questions here or ping you in my questions in GH? What's the best way for you?</p>\n</blockquote>\n<p>I'd prefer Zulip</p>",
        "id": 164995984,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557159882
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>I understand; should I ask questions here or ping you in my questions in GH? What's the best way for you?</p>\n</blockquote>\n<p>I'd prefer Zulip</p>\n</blockquote>\n<p>Noted!</p>",
        "id": 164995994,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557159889
    },
    {
        "content": "<blockquote>\n<p>I think so, but was I correct in my assumption that we do need to track drops for points and then do the same point-to-region translation for drops as we do for uses?</p>\n</blockquote>\n<p>Yes -- so <a href=\"https://github.com/rust-lang-nursery/polonius/issues/105\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/issues/105\">polonius#105</a> is figuring out where things are \"drop-live\"</p>",
        "id": 164996009,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557159904
    },
    {
        "content": "<p>Also, I'll try to be better at pinging you :)</p>",
        "id": 164996046,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557159913
    },
    {
        "content": "<p>and your previous commits figured out where things are \"use-live\"</p>",
        "id": 164996049,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557159914
    },
    {
        "content": "<p>er, to be clear, where <em>variables</em> are drop/use-live</p>",
        "id": 164996067,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557159928
    },
    {
        "content": "<p>the next step is to translate that into the points where <em>regions</em> are live</p>",
        "id": 164996071,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557159936
    },
    {
        "content": "<p>the rules are roughly like this:</p>\n<div class=\"codehilite\"><pre><span></span>region_live_at(R, P) :-\n    var_live_at(V, P),\n    var_uses_region(V, R).\n\nregion_live_at(R, P) :-\n    var_drop_live_at(V, P),\n    var_drops_region(V, R).\n</pre></div>",
        "id": 164996147,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557159979
    },
    {
        "content": "<p>And the var_uses_region is a fact, but where does it come from? Fixpoint iteration on subtype relationships from assignments?</p>",
        "id": 164996200,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557160028
    },
    {
        "content": "<p>no, it has nothing to do with that</p>",
        "id": 164996222,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557160046
    },
    {
        "content": "<p>it comes by enumerating the regions in the variable's type</p>",
        "id": 164996227,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557160053
    },
    {
        "content": "<p>Aaah, ok</p>",
        "id": 164996232,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557160058
    },
    {
        "content": "<p>i.e., if the type of <code>V</code> is <code>Foo&lt;'1&gt;</code>, then we have <code>var_uses_region(V, '1)</code></p>",
        "id": 164996244,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557160075
    },
    {
        "content": "<p>the \"drops\" relation is a bit more complex</p>",
        "id": 164996250,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557160081
    },
    {
        "content": "<p>in that it is a subset of the regions in the variable's type</p>",
        "id": 164996302,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557160094
    },
    {
        "content": "<p>though we could start by generating the same sets (it'd be an overapproximation)</p>",
        "id": 164996313,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557160101
    },
    {
        "content": "<p>that might be worthwhile because I think that the rustc analysis is more precise in some other ways, when it comes to drops</p>",
        "id": 164996331,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557160118
    },
    {
        "content": "<p>so we can focus on getting the polonius rules right, and have rustc generate too many tuples</p>",
        "id": 164996346,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557160136
    },
    {
        "content": "<p>then come back to this</p>",
        "id": 164996356,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557160141
    },
    {
        "content": "<p>Ah, and it would be an over-approximation because not all those uses will actually end in a drop?</p>",
        "id": 164996766,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557160436
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> what I meant by 'overapprox' is that the <code>var_drops_region</code> would have more tuples that we need</p>",
        "id": 164997054,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557160629
    },
    {
        "content": "<p>a simple example would be <code>x: &amp;'a u32</code>, which is a no-op when dropped (and NLL knows that)</p>",
        "id": 164997068,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557160643
    },
    {
        "content": "<p>Ah, ok you mean like that</p>",
        "id": 164997080,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557160653
    },
    {
        "content": "<p>Ok, that makes sense</p>",
        "id": 164997081,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557160656
    },
    {
        "content": "<p>in fact, we'll actually handle that correctly <em>anyway</em>, for other reasons (MIR would have no drop for this type)</p>",
        "id": 164997092,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557160662
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> I was trying to get you a few tips of where to edit</p>",
        "id": 164997465,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557160894
    },
    {
        "content": "<p>Yay</p>",
        "id": 164997492,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557160915
    },
    {
        "content": "<p>If I'm not mistaken, the next step is to generate the <code>var_uses_region</code> and <code>var_drops_region</code> facts in rustc?</p>",
        "id": 164997571,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557160959
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> Let me know if <a href=\"https://github.com/rust-lang/polonius/issues/104#issuecomment-489691804\" target=\"_blank\" title=\"https://github.com/rust-lang/polonius/issues/104#issuecomment-489691804\">these instructions</a> make sense to you</p>",
        "id": 164998424,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557161632
    },
    {
        "content": "<p>Let me read through them</p>",
        "id": 164998731,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557161845
    },
    {
        "content": "<p>But yes, I think that's the next step as well</p>",
        "id": 164998745,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557161857
    },
    {
        "content": "<blockquote>\n<p>So I think what you want to do in your branch is to extend the \"popular var liveness function\" so that it iterates over the variables declared in mir (the mir.local_decls field). </p>\n</blockquote>\n<p>First I thought this would be a bad idea because it would mean that the logic would get intermingled with the old logic for calculating liveness/regions, but I don't think that's a problem given that we are planning to remove those when the Polonius logic works, right?</p>",
        "id": 164999354,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557162329
    },
    {
        "content": "<p>So basically, we'd just drop the <code>region_live_at</code> logic</p>",
        "id": 164999437,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557162381
    },
    {
        "content": "<p>Which is interesting, because I guess we could have the compiler save the old values for <code>region_live_at</code> and compare it to the one gotten from Polonius to ensure it's consistent</p>",
        "id": 164999480,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557162434
    },
    {
        "content": "<p>Yeah, we could do that, and yes, that logic will eventually go away</p>",
        "id": 164999961,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557162834
    },
    {
        "content": "<p>Keeping the ability to compare is probably a good idea</p>",
        "id": 165000015,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557162847
    },
    {
        "content": "<p>Great! Then I have an idea of where to start tomorrow</p>",
        "id": 165001608,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557163932
    },
    {
        "content": "<p>I'll try to make note of candidates for refactoring for when the precalculation-ectomy happens as well, maybe I can make the code less hard to follow and/or add some documentation</p>",
        "id": 165003283,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557165228
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> how goes?</p>",
        "id": 165086267,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557245783
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I spent the morning writing the background section of my report/thesis that explains regions etc while reading through your instructions in the issue on GitHub and cross-referencing with your blog posts, and I think that was a good way to figure out what was going on, but I only got so far as to implement the facts for var_use region and var_drops_region to Polonius. So far things are going well, and I think I have a clear idea of what to do to generate the facts in Rust, but I never got to that before having a migraine attack, and I've been asleep since</p>",
        "id": 165092124,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557250000
    },
    {
        "content": "<p>I did have some trouble figuring out how to add the facts to the polonius-parser lalrpop grammar though, because I'm not sure how to add facts that aren't connected to a point, but I just put that off until later</p>",
        "id": 165092471,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557250280
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  var_drops_region and var_uses_region fact generation pushed. The code is more opaque than I would have liked it as I had to work around ownership of some of the essentially global variables passed around between functions, but it appears to be working™</p>",
        "id": 165167062,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557325324
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> can you send me a link to the PR(s)?</p>",
        "id": 165181879,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557335789
    },
    {
        "content": "<p>we should probably put them both in the topic title: I think it's <a href=\"https://github.com/rust-lang-nursery/polonius/issues/105\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/issues/105\">polonius#105</a> and <a href=\"https://github.com/rust-lang/rust/issues/60266\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/60266\">#60266</a> for the rustc side</p>",
        "id": 165183853,
        "sender_full_name": "lqd",
        "timestamp": 1557337246
    },
    {
        "content": "<blockquote>\n<p>we should probably put them both in the topic title: I think it's <a href=\"https://github.com/rust-lang-nursery/polonius/issues/105\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/issues/105\">polonius#105</a> and <a href=\"https://github.com/rust-lang/rust/issues/60266\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/60266\">#60266</a> for the rustc side</p>\n</blockquote>\n<p>That sounds like a good idea, but I also think it's just the Datafrog code left before the whole liveness logic is done, more or less?</p>",
        "id": 165200565,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557349212
    },
    {
        "content": "<p>Also, <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>: <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> was right, it's <a href=\"https://github.com/rust-lang-nursery/polonius/issues/105\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/issues/105\">polonius#105</a> and <a href=\"https://github.com/rust-lang/rust/issues/60266\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/60266\">rust#60266</a></p>",
        "id": 165200714,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557349340
    },
    {
        "content": "<p>I'll get to that tomorrow!</p>",
        "id": 165200754,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557349385
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I just realised that it seems that region live uses <a href=\"https://github.com/rust-lang/rust/blob/81a6aadf83afb53ed7a5a21a283f1f23f68638dd/src/librustc_mir/borrow_check/nll/type_check/liveness/trace.rs#L532\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/81a6aadf83afb53ed7a5a21a283f1f23f68638dd/src/librustc_mir/borrow_check/nll/type_check/liveness/trace.rs#L532\">seems to be generated for both the start and mid-points</a>. Does that mean I should emit a <code>var_live</code> at both the start and mid-points? Does this matter?</p>",
        "id": 165238306,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557395630
    },
    {
        "content": "<p>I...think this should just work out as long as the variable liveness calculations are correct?</p>",
        "id": 165238467,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557395776
    },
    {
        "content": "<p>I think that should just fall out naturally, <span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> --</p>",
        "id": 165238520,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557395851
    },
    {
        "content": "<p>we propagate liveness backwards through the CFG</p>",
        "id": 165238527,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557395860
    },
    {
        "content": "<p>Hmh</p>",
        "id": 165238539,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557395867
    },
    {
        "content": "<p>So if you have a \"use\" at the mid point, it will be \"live\" at the entry point</p>",
        "id": 165238540,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557395868
    },
    {
        "content": "<p>Why is the region_live_at relation a 3-tuple?</p>",
        "id": 165238547,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557395875
    },
    {
        "content": "<p>Err, I meant variable</p>",
        "id": 165238593,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557395885
    },
    {
        "content": "<p>What are the 3 things? I forget</p>",
        "id": 165238610,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557395897
    },
    {
        "content": "<p>it could be a mistake :)</p>",
        "id": 165238612,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557395901
    },
    {
        "content": "<p>Region, Point, and...the empty tuple</p>",
        "id": 165238615,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557395907
    },
    {
        "content": "<p>oh</p>",
        "id": 165238620,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557395912
    },
    {
        "content": "<p>that's a \"technicality\"</p>",
        "id": 165238622,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557395915
    },
    {
        "content": "<p>sometimes datafrog wants things to have <code>(key, value)</code> form</p>",
        "id": 165238626,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557395925
    },
    {
        "content": "<p>Aah, ok</p>",
        "id": 165238629,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557395929
    },
    {
        "content": "<p>but in this case the (region, point) is the key</p>",
        "id": 165238633,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557395936
    },
    {
        "content": "<p>I ran into some trouble converting the region_live_at back to the relation copy, which I presume must be done at each iteration to keep up with changes</p>",
        "id": 165238771,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557396027
    },
    {
        "content": "<p>But then it's just a matter of adapting it</p>",
        "id": 165238780,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557396040
    },
    {
        "content": "<p>uh</p>",
        "id": 165238789,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557396056
    },
    {
        "content": "<p>I'm confused :)</p>",
        "id": 165238792,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557396060
    },
    {
        "content": "<p>oh, well, we should be removing the region-live-at relation I thnk</p>",
        "id": 165238816,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557396076
    },
    {
        "content": "<p>it would just become a variable</p>",
        "id": 165238820,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557396079
    },
    {
        "content": "<p>I thought it was technically necessary for some Datafrog shenanigans?</p>",
        "id": 165238830,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557396095
    },
    {
        "content": "<p>(maybe rename the existing one)</p>",
        "id": 165238834,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557396101
    },
    {
        "content": "<p>hmm, oh, because we're using leapjoin?</p>",
        "id": 165238844,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557396114
    },
    {
        "content": "<p>we probably need to stop using leapjoin then</p>",
        "id": 165238850,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557396121
    },
    {
        "content": "<p>I guess that makes sense</p>",
        "id": 165238898,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557396132
    },
    {
        "content": "<p>relations are supposed to be \"fixed sets that are not varying\"</p>",
        "id": 165238903,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557396139
    },
    {
        "content": "<p>I think we should stick to that :)</p>",
        "id": 165238905,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557396142
    },
    {
        "content": "<p>otoh</p>",
        "id": 165238915,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557396155
    },
    {
        "content": "<p>wait :)</p>",
        "id": 165238918,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557396160
    },
    {
        "content": "<p>Err yes now that you mention that, it sounds like a bad idea to work around the fundamentals of the system</p>",
        "id": 165238921,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557396161
    },
    {
        "content": "<p>we could do the liveness computation as a pre-step</p>",
        "id": 165238923,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557396165
    },
    {
        "content": "<p>and create the relation only at the end</p>",
        "id": 165238925,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557396169
    },
    {
        "content": "<p>i.e., we can have two iterations</p>",
        "id": 165238930,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557396178
    },
    {
        "content": "<p>I considered that as well, but I'm not sure if it's a good idea</p>",
        "id": 165238946,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557396187
    },
    {
        "content": "<p>I think it would be</p>",
        "id": 165238952,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557396194
    },
    {
        "content": "<p>among other things, it's probably better locality</p>",
        "id": 165238958,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557396209
    },
    {
        "content": "<p>Hmm yes probably because propagation is always additive</p>",
        "id": 165238959,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557396210
    },
    {
        "content": "<p>in general, it makes sense for us to \"stratify\" when we can I think</p>",
        "id": 165238968,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557396227
    },
    {
        "content": "<p>So there's no such thing as having partially completed solutions eliminate parts of the search space for other variables</p>",
        "id": 165238975,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557396235
    },
    {
        "content": "<p>not sure if I understand</p>",
        "id": 165239030,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557396250
    },
    {
        "content": "<p>oh, I see, you're saying \"beacuse it's purely additive, that doesn't happen\"</p>",
        "id": 165239039,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557396266
    },
    {
        "content": "<p>yeah, all of the relations are monotonic -- ever growing</p>",
        "id": 165239043,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557396274
    },
    {
        "content": "<p>I'm still too stuck in discrete optimisation where it's the opposite: variables start out enormous and loose values</p>",
        "id": 165239067,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557396302
    },
    {
        "content": "<p>But yes, I guess the liveness is completely orthogonal</p>",
        "id": 165239097,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557396337
    },
    {
        "content": "<p>I see. Still, even there, if you have two variables X and Y, where X depends on Y but not vice versa, it's <em>probably</em> better to iterate and find the minimal Y first..? Anyway, I don't know much about that.</p>",
        "id": 165239103,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557396345
    },
    {
        "content": "<p>And having it separate would make it easier to share code between the various implementations</p>",
        "id": 165239105,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557396354
    },
    {
        "content": "<p>Yes</p>",
        "id": 165239151,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557396365
    },
    {
        "content": "<p>I was thinking about that too</p>",
        "id": 165239156,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557396368
    },
    {
        "content": "<p>this would probably be a separate file that naive + opt etc can all share</p>",
        "id": 165239159,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557396378
    },
    {
        "content": "<p>Not necessarily, because you could learn things about the relations between X and Y such that you can use a partial assignment of Y to immediately shrink the search space of X</p>",
        "id": 165239167,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557396395
    },
    {
        "content": "<p>Which might prevent you from exploring large amounts of non-solutions, or worse solutions if you are optimising</p>",
        "id": 165239194,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557396437
    },
    {
        "content": "<p>But as this is just fix-point set membership, it shouldn't matter. I'll get right to extracting the liveness logic</p>",
        "id": 165239215,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557396476
    },
    {
        "content": "<p>Ok, I have something that seems to work now, but doesn't pass tests. I'll investigate closer later :)</p>",
        "id": 165244151,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557401784
    },
    {
        "content": "<p>It also doesn't dump the tuples internal to the liveness calculations when dump is enabled</p>",
        "id": 165244170,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557401820
    },
    {
        "content": "<p>And I'm not using the drop-liveness for anything yet, which makes me think that something's still missing</p>",
        "id": 165244202,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557401879
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> you need a rule like</p>\n<div class=\"codehilite\"><pre><span></span>region_live_at(R, P) :- drop_live_at(V, P), var_drops_region(V, R)\n</pre></div>",
        "id": 165245859,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557403558
    },
    {
        "content": "<p>could that be what's missing?</p>",
        "id": 165245914,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557403575
    },
    {
        "content": "<p>That shouldn’t make any difference should it? Isn’t the over-estimates drop_live_at identical to var_live_at:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">add_regions</span><span class=\"p\">(</span><span class=\"n\">local</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">local_decl</span><span class=\"p\">.</span><span class=\"n\">ty</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">all_facts</span><span class=\"p\">.</span><span class=\"n\">var_uses_regions</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">add_regions</span><span class=\"p\">(</span><span class=\"n\">local</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">local_decl</span><span class=\"p\">.</span><span class=\"n\">ty</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">all_facts</span><span class=\"p\">.</span><span class=\"n\">var_drops_regions</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// FIXME(polonius#104) overapproximation</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 165256248,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557411368
    },
    {
        "content": "<p>Also I had the impression that the idea was to have a separate region logic for the dropped-live relation?</p>",
        "id": 165256433,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557411499
    },
    {
        "content": "<blockquote>\n<p>And I'm not using the drop-liveness for anything yet, which makes me think that something's still missing</p>\n</blockquote>\n<p>you said you are not using drop-liveness for anything</p>",
        "id": 165267291,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557418768
    },
    {
        "content": "<p>I was saying where I expected the <code>drop_live_at</code> relation to be used</p>",
        "id": 165267302,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557418785
    },
    {
        "content": "<p>Note though that even though <code>var_drops_region</code> and <code>var_uses_region</code> will indeed be the same, the <code>drop_live_at</code> relation is different -- it is \"generated\" from each drop, but the <code>use_live_at</code> relation is generated from each <strong>use</strong></p>",
        "id": 165267374,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557418815
    },
    {
        "content": "<blockquote>\n<p>Note though that even though <code>var_drops_region</code> and <code>var_uses_region</code> will indeed be the same, the <code>drop_live_at</code> relation is different -- it is \"generated\" from each drop, but the <code>use_live_at</code> relation is generated from each <strong>use</strong></p>\n</blockquote>\n<p>Ah, of course. So a region can be made live by either being drop-live or use-live, and the lookup in var_drops_region is just that, a lookup, which is why it's safe to over-estimate it. For some reason I had  it in my mind that we were going to separate drops and uses all the way, so that we calculated a region_live_at and a region_drop_live_at, which is why I was confused.</p>",
        "id": 165318455,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557476736
    },
    {
        "content": "<p>Hm, ok all test inputs except the foo functions of vec-push-ref produces identical output to the one from rustc for <code>region_live_at</code>.  They generate a relatively large set of relations (in the range of hundreds), so diffing them is not easy, but I'll look into it</p>",
        "id": 165327051,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557486515
    },
    {
        "content": "<p>Ok, the difference seems to be the following:</p>\n<div class=\"codehilite\"><pre><span></span>&quot;Start(bb0[11])&quot;: input region_live_at &quot;\\&#39;_#14r&quot; != calculated &quot;\\&#39;_#15r&quot;, &quot;\\&#39;_#14r&quot;\n&quot;Mid(bb0[11])&quot;: input region_live_at &quot;\\&#39;_#14r&quot; != calculated &quot;\\&#39;_#15r&quot;, &quot;\\&#39;_#14r&quot;\n&quot;Start(bb4[0])&quot;: input region_live_at &quot;\\&#39;_#13r&quot; != calculated &quot;\\&#39;_#14r&quot;, &quot;\\&#39;_#13r&quot;\n&quot;Mid(bb4[0])&quot;: input region_live_at &quot;\\&#39;_#13r&quot; != calculated &quot;\\&#39;_#14r&quot;, &quot;\\&#39;_#13r&quot;\n&quot;Start(bb13[3])&quot;: input region_live_at &quot;\\&#39;_#21r&quot; != calculated &quot;\\&#39;_#13r&quot;, &quot;\\&#39;_#21r&quot;\n&quot;Mid(bb13[3])&quot;: input region_live_at &quot;\\&#39;_#21r&quot; != calculated &quot;\\&#39;_#13r&quot;, &quot;\\&#39;_#21r&quot;\n</pre></div>\n\n\n<p>I'm trying to look into what is happening now</p>\n<p>signed, <code>albin --verbose</code></p>",
        "id": 165336703,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557495574
    },
    {
        "content": "<p>Also, I'm experimenting with adding a flag to do comparisons for region_live_at to the polonius binary</p>",
        "id": 165336730,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557495598
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span> RUST_LOG=info ./target/debug/polonius -a Naive -v -c inputs/vec-push-ref/nll-facts/foo1\n INFO 2019-05-10T14:09:11Z: polonius::cli: region facts compare mode enabled: ignoring provided region_live_at\n INFO 2019-05-10T14:09:11Z: polonius_engine::output::liveness: compute_liveness() completed: 130 tuples, 3.22311ms\n INFO 2019-05-10T14:09:11Z: polonius_engine::output::naive: errors is complete: 1 tuples, 5.607188ms\n--------------------------------------------------\nDirectory: inputs/vec-push-ref/nll-facts/foo1\nTime: 0.010s\nMISMATCH at location &quot;Start(bb16[2])&quot;: calculated has +[&quot;\\&#39;_#13r&quot;], -[]\nMISMATCH at location &quot;Mid(bb4[0])&quot;: calculated has +[&quot;\\&#39;_#14r&quot;], -[]\nMISMATCH at location &quot;Mid(bb14[0])&quot;: calculated has +[&quot;\\&#39;_#21r&quot;, &quot;\\&#39;_#13r&quot;], -[]\nMISMATCH at location &quot;Mid(bb0[11])&quot;: calculated has +[&quot;\\&#39;_#15r&quot;], -[]\nMISMATCH at location &quot;Mid(bb7[0])&quot;: calculated has +[&quot;\\&#39;_#13r&quot;], -[]\nMISMATCH at location &quot;Mid(bb16[2])&quot;: calculated has +[&quot;\\&#39;_#13r&quot;], -[]\nMISMATCH at location &quot;Start(bb16[0])&quot;: calculated has +[&quot;\\&#39;_#13r&quot;], -[]\nMISMATCH at location &quot;Start(bb16[3])&quot;: calculated has +[&quot;\\&#39;_#13r&quot;], -[]\nMISMATCH at location &quot;Mid(bb15[0])&quot;: calculated has +[&quot;\\&#39;_#13r&quot;, &quot;\\&#39;_#21r&quot;], -[]\nMISMATCH at location &quot;Start(bb13[3])&quot;: calculated has +[&quot;\\&#39;_#13r&quot;], -[]\nMISMATCH at location &quot;Start(bb2[0])&quot;: calculated has +[&quot;\\&#39;_#14r&quot;], -[]\nMISMATCH at location &quot;Start(bb7[0])&quot;: calculated has +[&quot;\\&#39;_#13r&quot;], -[]\nMISMATCH at location &quot;Mid(bb16[3])&quot;: calculated has +[&quot;\\&#39;_#13r&quot;], -[]\nMISMATCH at location &quot;Mid(bb16[0])&quot;: calculated has +[&quot;\\&#39;_#13r&quot;], -[]\nMISMATCH at location &quot;Mid(bb13[3])&quot;: calculated has +[&quot;\\&#39;_#13r&quot;], -[]\nMISMATCH at location &quot;Start(bb16[1])&quot;: calculated has +[&quot;\\&#39;_#13r&quot;], -[]\nMISMATCH at location &quot;Start(bb14[0])&quot;: calculated has +[&quot;\\&#39;_#21r&quot;, &quot;\\&#39;_#13r&quot;], -[]\nMISMATCH at location &quot;Mid(bb16[1])&quot;: calculated has +[&quot;\\&#39;_#13r&quot;], -[]\nMISMATCH at location &quot;Start(bb4[0])&quot;: calculated has +[&quot;\\&#39;_#14r&quot;], -[]\nMISMATCH at location &quot;Start(bb15[0])&quot;: calculated has +[&quot;\\&#39;_#13r&quot;, &quot;\\&#39;_#21r&quot;], -[]\nMISMATCH at location &quot;Mid(bb2[0])&quot;: calculated has +[&quot;\\&#39;_#14r&quot;], -[]\nMISMATCH at location &quot;Start(bb0[11])&quot;: calculated has +[&quot;\\&#39;_#15r&quot;], -[]\n</pre></div>",
        "id": 165338838,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557497370
    },
    {
        "content": "<p>Ok, so there's an over-approximation of the liveness of some regions</p>",
        "id": 165338923,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557497421
    },
    {
        "content": "<p>there's also a Compare algorithm for debugging/testing (initially to check for differences between Naive and DatafrogOpt), maybe it can be extended for these comparisons as well (although I believe the goal is to eventually remove the rustc-exported <code>region_live_at</code> facts, so it would maybe only be useful for a short while ?)</p>",
        "id": 165377199,
        "sender_full_name": "lqd",
        "timestamp": 1557528111
    },
    {
        "content": "<p>@lqd Yes, I think this is all very temporary I guess.</p>",
        "id": 165509115,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557737090
    },
    {
        "content": "<p>Update: I have updated the graphviz output to account for all the liveness facts and outputs (including both region liveness as input and output), and am going through the discrepancies. So far it has been the case every time that a live region in Polonius output that wasn't in the rustc input was derived from a drop-live variable that was correctly calculated as live from the input, so I think this is just an over-approximation</p>",
        "id": 165509291,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557737248
    },
    {
        "content": "<p>Yes, I can confirm this is the case for all mismatches in foo1 of push-vec-ref</p>",
        "id": 165513028,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557740795
    },
    {
        "content": "<p>...and some samples from foo2 indicates the same problem</p>",
        "id": 165513336,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557741117
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> seems like trying to get drop-live correct is a good next step</p>",
        "id": 165555059,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557772058
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"204115\">Albin Stjerna</span> seems like trying to get drop-live correct is a good next step</p>\n</blockquote>\n<p>Yup! Also, I tried removing the generation of region_live_at in rustc and it seems to cause a panic in the compiler due to an unwrap() in some compiletest cases, but I haven't managed to look into it.</p>",
        "id": 165555190,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557772130
    },
    {
        "content": "<p>(I <code>--bless</code>:ed the output from before I removed the logic and used that for comparison)</p>",
        "id": 165555232,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557772164
    },
    {
        "content": "<p>OK, <span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> --</p>",
        "id": 165555995,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557772644
    },
    {
        "content": "<p>I guess I'll try dumping some notes here?</p>",
        "id": 165556041,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557772674
    },
    {
        "content": "<p>Or would you rather I leave them in Github</p>",
        "id": 165556043,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557772677
    },
    {
        "content": "<p>Whichever is the most convenient for you works for me!</p>",
        "id": 165556111,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557772697
    },
    {
        "content": "<p>First off, you understand why the \"drop live\" set of regions is a smaller set than the \"use live\"?</p>",
        "id": 165556182,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557772743
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Only very vaguely; I do realise that it might not always be necessary to actually have the referenced value in order to perform a drop, is that correct?</p>",
        "id": 165556263,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557772784
    },
    {
        "content": "<p>Yes. The most obvious example is <code>&amp;T</code> -- dropping a reference is a no-op</p>",
        "id": 165556382,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557772832
    },
    {
        "content": "<p>that's kind of the \"definition\" of borrowing--</p>",
        "id": 165556396,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557772839
    },
    {
        "content": "<p>you don't free the memory when your borrowed reference goes out of scope ;)</p>",
        "id": 165556414,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557772848
    },
    {
        "content": "<p>Ah, no that would be...bad</p>",
        "id": 165556470,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557772871
    },
    {
        "content": "<p>In any case, we have a bunch of existing infrastructure around this, mostly to support cyclic data structures in some cases.</p>",
        "id": 165556476,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557772874
    },
    {
        "content": "<p>To some extent that's historical (pre-exists the move to NLL, anyway)</p>",
        "id": 165556512,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557772889
    },
    {
        "content": "<p>the summary is roughly this:</p>\n<ul>\n<li>if your type declares <code>Drop</code>, then we assume it might access any of its fields</li>\n<li>but if it does <strong>not</strong>, then we know that all it does is to free its fields</li>\n<li>and there is an (unstable) way that types can declare that all they do is <em>drop</em> data</li>\n</ul>",
        "id": 165556648,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557772946
    },
    {
        "content": "<p>so e.g. we know that a <code>Vec&lt;&amp;T&gt;</code> does not, in its destructor, use those references</p>",
        "id": 165556666,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557772960
    },
    {
        "content": "<p>this permits you to create cycles in some cases</p>",
        "id": 165556685,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557772973
    },
    {
        "content": "<p>e.g., you can have an arena that allocates memory</p>",
        "id": 165556695,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557772981
    },
    {
        "content": "<p>and you can allocate a vector in that arena</p>",
        "id": 165556715,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557772986
    },
    {
        "content": "<p>which contains references to other things allocated from that arena</p>",
        "id": 165556722,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557772992
    },
    {
        "content": "<p>Ah, and the vector of course doesn't bother managing the actual data it saves references to, makes sense</p>",
        "id": 165556757,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557773014
    },
    {
        "content": "<p>this is a \"cycle\" of sorts because we cannot really tell whether the vector or the things it is referencing will be freed first</p>",
        "id": 165556762,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557773017
    },
    {
        "content": "<p>(but we don't care)</p>",
        "id": 165556770,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557773020
    },
    {
        "content": "<p>(since we know that the vector won't be accessing those things)</p>",
        "id": 165556805,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557773038
    },
    {
        "content": "<p>so that's kind of the \"background\"</p>",
        "id": 165556855,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557773044
    },
    {
        "content": "<p>what we basically want to do is to leverage this already existing code</p>",
        "id": 165556877,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557773055
    },
    {
        "content": "<p>which essentially, given a type <code>T</code>, will figure out what set of other types have to be live when <code>T</code> is dropped</p>",
        "id": 165556935,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557773079
    },
    {
        "content": "<p>Hm, this sounds like it might translate to some sort of transitive logic</p>",
        "id": 165557028,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557773115
    },
    {
        "content": "<p>that is what this <a href=\"https://github.com/rust-lang/rust/blob/a9ec99f4201ec33026a468ef1289f98a95b4d71a/src/librustc_mir/borrow_check/nll/type_check/liveness/trace.rs#L538-L554\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/a9ec99f4201ec33026a468ef1289f98a95b4d71a/src/librustc_mir/borrow_check/nll/type_check/liveness/trace.rs#L538-L554\"><code>compute_drop_data</code></a> function is doing</p>",
        "id": 165557033,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557773118
    },
    {
        "content": "<p>well, polonius doesn't really have to do this bit</p>",
        "id": 165557050,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557773128
    },
    {
        "content": "<p>I figured it sounded very much like something that must happen in rustc</p>",
        "id": 165557114,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557773159
    },
    {
        "content": "<p>Or at least should</p>",
        "id": 165557174,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557773171
    },
    {
        "content": "<p>YEah</p>",
        "id": 165557193,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557773186
    },
    {
        "content": "<p>I guess the real function that you want to start from is <a href=\"https://github.com/rust-lang/rust/blob/a9ec99f4201ec33026a468ef1289f98a95b4d71a/src/librustc_mir/borrow_check/nll/type_check/liveness/trace.rs#L446-L457\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/a9ec99f4201ec33026a468ef1289f98a95b4d71a/src/librustc_mir/borrow_check/nll/type_check/liveness/trace.rs#L446-L457\"><code>add_drop_live_facts_for</code></a></p>",
        "id": 165557213,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557773204
    },
    {
        "content": "<p>But can this <em>just</em> be done in rustc, i.e. by not emitting drop-use facts in the right places, or is there more to this?</p>",
        "id": 165557263,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557773241
    },
    {
        "content": "<p>yeah, it can just be done in rustc, the idea is that we will emit the <code>var_drops_region</code> facts</p>",
        "id": 165557394,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557773293
    },
    {
        "content": "<p>to account for this</p>",
        "id": 165557402,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557773296
    },
    {
        "content": "<p>i.e., if you have a variable <code>x</code> with a type like <code>Vec&lt;&amp;'a u32&gt;</code></p>",
        "id": 165557418,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557773304
    },
    {
        "content": "<p>you would have a <code>var_uses_region(x, 'a)</code> fact</p>",
        "id": 165557460,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557773328
    },
    {
        "content": "<p>but you would <strong>not</strong> have a <code>var_drops_region(x, 'a)</code> fact</p>",
        "id": 165557476,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557773338
    },
    {
        "content": "<p>thus, if <code>x</code> is use-live at some point, the region <code>'a</code> must be live</p>",
        "id": 165557505,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557773353
    },
    {
        "content": "<p>but if <code>x</code> is only drop-live at some point, region <code>'a</code> may not be live</p>",
        "id": 165557524,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557773368
    },
    {
        "content": "<p>but it won't drop the <code>u32</code> when it's deallocated</p>",
        "id": 165557532,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557773375
    },
    {
        "content": "<p>Hm, but isn't that the case for all references? I thought the owning data structure was responsible for the deallocation?</p>",
        "id": 165557687,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557773426
    },
    {
        "content": "<p>err, ok but of course not the liveness, ok I get it</p>",
        "id": 165557775,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557773485
    },
    {
        "content": "<p>(I think)</p>",
        "id": 165557778,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557773488
    },
    {
        "content": "<p>it's not really about the <em>u32</em></p>",
        "id": 165557795,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557773499
    },
    {
        "content": "<p>it's about the reference <code>&amp;'a u32</code> -- is somebody going to potentially dereference it in the future?</p>",
        "id": 165557806,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557773512
    },
    {
        "content": "<p>if the vector is \"use-live\", then we are accessing it in some ordinary way</p>",
        "id": 165557875,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557773532
    },
    {
        "content": "<p>e.g., invoking a methed like <code>pop</code> or whatever</p>",
        "id": 165557886,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557773543
    },
    {
        "content": "<p>so we have to assume that whatever references are in it may get used</p>",
        "id": 165557892,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557773549
    },
    {
        "content": "<p>but if we know the vector is just going to get dropped, we know they won't (because of this pre-existing drop analysis)</p>",
        "id": 165557907,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557773566
    },
    {
        "content": "<p>oh, ok, so the point is that the deallocator for the vec might need what the reference is referencing?</p>",
        "id": 165557914,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557773573
    },
    {
        "content": "<p>or in this case, that it won't</p>",
        "id": 165557933,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557773585
    },
    {
        "content": "<p>right. it doesn't, but other drop code could</p>",
        "id": 165557935,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557773585
    },
    {
        "content": "<p>ok, I see, and if something implements <code>Drop</code> then it could do anything and all bets are off</p>",
        "id": 165557973,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557773612
    },
    {
        "content": "<p>e.g., maybe you have </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">data</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">Drop</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">fn</span> <span class=\"nf\">drop</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cm\">/* we assume this could do something like `*self.data;` */</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 165557976,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557773614
    },
    {
        "content": "<p>in that case, if you have <code>y: Foo&lt;'a&gt;</code> you would have <code>var_drops_region(y, 'a)</code></p>",
        "id": 165558001,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557773633
    },
    {
        "content": "<p>(though really we're more conservative than that -- i.e., as you say, we don't examine the body of the drop closely)</p>",
        "id": 165558080,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557773659
    },
    {
        "content": "<p>(where is your branch again, <span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> ?)</p>",
        "id": 165558201,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557773749
    },
    {
        "content": "<p>Anyway, the relevant bit of the older code is <a href=\"https://github.com/rust-lang/rust/blob/a9ec99f4201ec33026a468ef1289f98a95b4d71a/src/librustc_mir/borrow_check/nll/type_check/liveness/trace.rs#L492-L502\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/a9ec99f4201ec33026a468ef1289f98a95b4d71a/src/librustc_mir/borrow_check/nll/type_check/liveness/trace.rs#L492-L502\">this for loop here</a></p>",
        "id": 165558265,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557773768
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\"> </span><span class=\"c1\">// All things in the `outlives` array may be touched by</span>\n<span class=\"w\">        </span><span class=\"c1\">// the destructor and must be live at this point.</span>\n<span class=\"w\">        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">kind</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">drop_data</span><span class=\"p\">.</span><span class=\"n\">dropck_result</span><span class=\"p\">.</span><span class=\"n\">kinds</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">Self</span>::<span class=\"n\">make_all_regions_live</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">elements</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">typeck</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">kind</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">live_at</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">location_table</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 165558278,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557773778
    },
    {
        "content": "<p>this \"drop data\" is cached from <a href=\"https://github.com/rust-lang/rust/blob/a9ec99f4201ec33026a468ef1289f98a95b4d71a/src/librustc_mir/borrow_check/nll/type_check/liveness/trace.rs#L538-L541\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/a9ec99f4201ec33026a468ef1289f98a95b4d71a/src/librustc_mir/borrow_check/nll/type_check/liveness/trace.rs#L538-L541\">the function <code>compute_drop_data</code> here</a></p>",
        "id": 165558322,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557773814
    },
    {
        "content": "<p>For rustc, <a href=\"https://github.com/albins/rust/tree/polonius-liveness\" target=\"_blank\" title=\"https://github.com/albins/rust/tree/polonius-liveness\">it's here</a></p>",
        "id": 165558323,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557773814
    },
    {
        "content": "<p>basically the <code>drop_data.dropck_result.kinds</code> is a list of types/regions things that the <code>Drop</code> code \"may\" access</p>",
        "id": 165558373,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557773846
    },
    {
        "content": "<p>so what we do is we iterate over each of those and make sure they are live</p>",
        "id": 165558396,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557773866
    },
    {
        "content": "<p>I imagine your code would want to do something similar, but emitted <code>var_drops_region</code> facts for each thing contained within</p>",
        "id": 165558408,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557773879
    },
    {
        "content": "<p>ok, but doesn't that mean we will emot more <code>var_drops_region</code>and not fewer?</p>",
        "id": 165558504,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557773920
    },
    {
        "content": "<p>( now, before that for loop, <a href=\"https://github.com/rust-lang/rust/blob/a9ec99f4201ec33026a468ef1289f98a95b4d71a/src/librustc_mir/borrow_check/nll/type_check/liveness/trace.rs#L475-L490\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/a9ec99f4201ec33026a468ef1289f98a95b4d71a/src/librustc_mir/borrow_check/nll/type_check/liveness/trace.rs#L475-L490\">we do some other stuff</a> -- this actually isn't, I don't think, relevant to what we are trying to do right now. It's a separate consideration. )</p>",
        "id": 165558515,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557773929
    },
    {
        "content": "<p>Or do you mean we do this in stead of the previous logic?</p>",
        "id": 165558516,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557773929
    },
    {
        "content": "<blockquote>\n<p>Or do you mean we do this in stead of the previous logic?</p>\n</blockquote>\n<p>that</p>",
        "id": 165558523,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557773933
    },
    {
        "content": "<p>Ok!</p>",
        "id": 165558539,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557773941
    },
    {
        "content": "<p>I'm not sure how difficult it will be to re-use that existing stuff</p>",
        "id": 165558643,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557774000
    },
    {
        "content": "<p>So far my strategy of trying something and then fixing the compiler errors has worked out quite well</p>",
        "id": 165558738,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557774031
    },
    {
        "content": "<p>from a quick glance I <em>suspect</em> you can just kind of \"copy-paste\" what you need ..</p>",
        "id": 165558821,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557774091
    },
    {
        "content": "<p>ok, so, I <em>think</em> that's it for the var-drop-region business</p>",
        "id": 165558831,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557774102
    },
    {
        "content": "<p>I thought there was more to it, but I realize now I was misremembering</p>",
        "id": 165558848,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557774112
    },
    {
        "content": "<p>Well, let's start there tomorrow and see what breaks</p>",
        "id": 165558856,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557774116
    },
    {
        "content": "<p>sounds good</p>",
        "id": 165558917,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557774136
    },
    {
        "content": "<p>I mean, spending a day looking at the graphviz outputs and tracing liveness etc was an excellent exercise</p>",
        "id": 165558953,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557774168
    },
    {
        "content": "<p>By the way, these inputs, are they from NLL's borrowcheck?</p>",
        "id": 165558993,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557774207
    },
    {
        "content": "<p>I'm trying to get a feel for which parts would need to be re-engineered when it's possible to run Polonius without NLL (and also just how things fit together in general), and so far my hunch is \"virtually everything\"</p>",
        "id": 165559065,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557774245
    },
    {
        "content": "<blockquote>\n<p>By the way, these inputs, are they from NLL's borrowcheck?</p>\n</blockquote>\n<p>the NLL \"borrow check\" includes a \"type check\"</p>",
        "id": 165569203,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557781596
    },
    {
        "content": "<p>the liveness constraint code you are editing is part of that</p>",
        "id": 165569210,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557781603
    },
    {
        "content": "<p>this type check generates the base constraints (the <code>subset</code> relations, in polonius speak)</p>",
        "id": 165569219,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557781617
    },
    {
        "content": "<p>actually most of the NLL code is still needed</p>",
        "id": 165569241,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557781631
    },
    {
        "content": "<p>it's only a relatively small part -- the \"region inference\" -- that goes away <em>completely</em></p>",
        "id": 165569258,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557781645
    },
    {
        "content": "<p>Ah, ok I see</p>",
        "id": 165619806,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557838999
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I have modified rustc to output <code>var_drops_region</code> according to your instructions; it compiles and the resulting liveness analysis is the same for all the inputs except clap-rs, which I haven't tested. But none of those actually produce any tuples for <code>var_drops_region</code>, so I have no positive examples</p>",
        "id": 165633897,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557849078
    },
    {
        "content": "<p>(I'm going away for a while now, but I'll be back for the meeting)</p>",
        "id": 165633933,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557849105
    },
    {
        "content": "<p>...nope, clap-rs doesn't either. Apparently, drop-liveness isn't that common</p>",
        "id": 165637655,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557851613
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> I have modified rustc to output <code>var_drops_region</code> according to your instructions; it compiles and the resulting liveness analysis is the same for all the inputs except clap-rs, which I haven't tested. But none of those actually produce any tuples for <code>var_drops_region</code>, so I have no positive examples</p>\n</blockquote>\n<p>lol</p>",
        "id": 165643582,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557855477
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> I can point you at some test cases</p>",
        "id": 165643656,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557855494
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"204115\">Albin Stjerna</span> I can point you at some test cases</p>\n</blockquote>\n<p>That would be great! Thanks :)</p>",
        "id": 165647064,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557857643
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ok it seems to work for the example you gave above too, which <em>does</em> generate one <code>var_drops_region</code> fact</p>",
        "id": 165647799,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557858133
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> try e.g. <a href=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/nll/drop-may-dangle.rs\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/nll/drop-may-dangle.rs\">drop-may-dangle</a></p>",
        "id": 165647841,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557858182
    },
    {
        "content": "<p>and <a href=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/nll/drop-no-may-dangle.rs\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/nll/drop-no-may-dangle.rs\">drop-no-may-dangle</a></p>",
        "id": 165647872,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557858201
    },
    {
        "content": "<p>basically any test in src/test/ui/nll/ with drop in the name :)</p>",
        "id": 165647911,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557858228
    },
    {
        "content": "<p>e.g. <a href=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/nll/enum-drop-access.rs\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/nll/enum-drop-access.rs\">enum-drop-access</a></p>",
        "id": 165647944,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557858242
    },
    {
        "content": "<p>I have added a set of tests that compares the region_live_at output to the input from rustc, and it seems that there is a slight discrepancy in some tests. I'll look into it later, but it seems that a region is live in Polonius input when it isn't in Rustc</p>",
        "id": 165728908,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557937249
    },
    {
        "content": "<p>OK, I have looked into it, and it looks sort of reasonable to me. What seems to happen is that variable <code>_2</code> is drop-used at <code>Mid(bb16[1])</code>, which makes it drop-live, and more importantly its region <code>_#r13</code>. However, that region isn't reported as live by rustc. It's all running this code:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"nc\">Wrap</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;p</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">p</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;p</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;p</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">Drop</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Wrap</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;p</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">drop</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">*</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;p</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">a</span>: <span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"nc\">Wrap</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;p</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wrap</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Wrap</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">p</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">String</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"s\">&quot;str&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">a</span>: <span class=\"nc\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"nc\">wrap</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">drop</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">a</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">drop</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">b</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">//~ ERROR cannot assign to `x` because it is borrowed [E0506]</span>\n<span class=\"w\">    </span><span class=\"c1\">// FIXME ^ This currently errors and it should not.</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>The MIR of <code>bb16</code>and <code>bb17</code> looks like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">bb16</span>: <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"n\">StorageDead</span><span class=\"p\">(</span><span class=\"n\">_5</span><span class=\"p\">);</span><span class=\"w\">                 </span><span class=\"c1\">// bb16[0]: scope 4 at maybe-initialized-drop-with-uninitialized-fragments.rs:24:1: 24:2</span>\n<span class=\"w\">     </span><span class=\"n\">drop</span><span class=\"p\">(</span><span class=\"n\">_2</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"p\">[</span><span class=\"k\">return</span>: <span class=\"nc\">bb17</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">unwind</span>: <span class=\"nc\">bb1</span><span class=\"p\">];</span><span class=\"w\"> </span><span class=\"c1\">// bb16[1]: scope 2 at maybe-initialized-drop-with-uninitialized-fragments.rs:24:1: 24:2</span>\n<span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\"> </span><span class=\"n\">bb17</span>: <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"n\">StorageDead</span><span class=\"p\">(</span><span class=\"n\">_2</span><span class=\"p\">);</span><span class=\"w\">                 </span><span class=\"c1\">// bb17[0]: scope 2 at maybe-initialized-drop-with-uninitialized-fragments.rs:24:1: 24:2</span>\n<span class=\"w\">     </span><span class=\"n\">StorageDead</span><span class=\"p\">(</span><span class=\"n\">_1</span><span class=\"p\">);</span><span class=\"w\">                 </span><span class=\"c1\">// bb17[1]: scope 0 at maybe-initialized-drop-with-uninitialized-fragments.rs:24:1: 24:2</span>\n<span class=\"w\">     </span><span class=\"k\">return</span><span class=\"p\">;</span><span class=\"w\">                          </span><span class=\"c1\">// bb17[2]: scope 0 at maybe-initialized-drop-with-uninitialized-fragments.rs:24:2: 24:2</span>\n<span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p><a href=\"/user_uploads/4715/EZOl3oKh4JM5T2hftz456CxH/bug.pdf\" target=\"_blank\" title=\"bug.pdf\">PDF of the graph with all facts and outputs from Polonius</a></p>",
        "id": 165789465,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557994856
    },
    {
        "content": "<p>Is there any further optimisation in rustc that I'm not thinking of, or is this a bug?</p>",
        "id": 165789585,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557994982
    },
    {
        "content": "<p>Ah, <span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span>, <em>right</em> -- I knew there was a wrinkle</p>",
        "id": 165833667,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1558029955
    },
    {
        "content": "<p>I somehow overlooked it though</p>",
        "id": 165833672,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1558029960
    },
    {
        "content": "<p>So rustc is correct, but our analysis is a bit too simplistic as we've done it so far</p>",
        "id": 165833726,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1558029975
    },
    {
        "content": "<p>This actually touches on the next step -- computing moves and initialization</p>",
        "id": 165833742,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1558029989
    },
    {
        "content": "<p>I have to look at how this works in rustc, but the idea is that we know that <code>foo.b</code> has been <em>moved</em></p>",
        "id": 165833779,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1558030019
    },
    {
        "content": "<p>To be clear though, rustc is <em>not</em> giving an error here? But polonius is?</p>",
        "id": 165833798,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1558030026
    },
    {
        "content": "<p>Because the FIXME etc above suggests rustc does</p>",
        "id": 165833806,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1558030030
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> </p>\n<blockquote>\n<p>To be clear though, rustc is <em>not</em> giving an error here? But polonius is?</p>\n</blockquote>\n<p>No they both give errors, but the difference is that Polonius gives a different <code>region_live_at</code> than rustc, with a region being live in more places than in the rustc output</p>",
        "id": 165844127,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1558036904
    },
    {
        "content": "<p>This happens for all the similar examples, so I think it's the same problem</p>",
        "id": 165844353,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1558037095
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> So, I think the crucial part of the code in rustc is <a href=\"https://github.com/rust-lang/rust/blob/7d5aa43325ad7629766b1183011f5bf5b2a1ea26/src/librustc_mir/borrow_check/nll/type_check/liveness/trace.rs#L225\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/7d5aa43325ad7629766b1183011f5bf5b2a1ea26/src/librustc_mir/borrow_check/nll/type_check/liveness/trace.rs#L225\">this line here</a>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">cx</span><span class=\"p\">.</span><span class=\"n\">initialized_at_terminator</span><span class=\"p\">(</span><span class=\"n\">location</span><span class=\"p\">.</span><span class=\"n\">block</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">mpi</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">...</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 165855610,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1558046597
    },
    {
        "content": "<p>the idea is that we only consider a <code>Drop(x)</code> instruction in the MIR to be \"live\" if <code>x</code> is <em>initialized</em> (i.e., has a value that has not been moved out in the interim)</p>",
        "id": 165855625,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1558046623
    },
    {
        "content": "<p>this is because, in Rust, we have stuff like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// moves `x` away</span>\n<span class=\"p\">}</span><span class=\"w\"> </span><span class=\"c1\">// `x` is not dropped here</span>\n</pre></div>",
        "id": 165855688,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1558046657
    },
    {
        "content": "<p>in the MIR, we generate a <code>Drop(x)</code> either way to start, but then we later (in a phase called \"drop elaboration\") remove it</p>",
        "id": 165855701,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1558046672
    },
    {
        "content": "<p>at the time when borrowck runs, the drop is still there, but it is considered to only be \"active\" if <code>x</code> is (maybe) initialized</p>",
        "id": 165855715,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1558046684
    },
    {
        "content": "<p>note that in some cases this is not known until runtime, e.g.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[];</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">something</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"> </span><span class=\"c1\">// might or might not drop `x`, depending whether `something` was true</span>\n</pre></div>",
        "id": 165855740,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1558046714
    },
    {
        "content": "<p>Anyway, as a temporary fix, we could add a similar call to the fact generation, basically only generating a <code>DropUse(X, P)</code> fact if <code>X</code> is initialized at <code>P</code> (using that same function to test)</p>",
        "id": 165855753,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1558046745
    },
    {
        "content": "<p>But longer term I want polonius to be computing the initialization facts as well</p>",
        "id": 165855758,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1558046753
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Hm, I'll have to chew on that one for a while, because it's not entirely trivial to add that logic to the current drop-live generation logic. Maybe it would be simpler to just piggy-back off of <code>trace()</code> in stead of trying to walk the MIR with a Visitor?</p>",
        "id": 165877396,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1558075867
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> quite likely yes. it would presumably only be temporary until we move that other logic into polonius (whihc I imagine we'll do next)</p>",
        "id": 165902701,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1558101833
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> </p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"204115\">Albin Stjerna</span> quite likely yes. it would presumably only be temporary until we move that other logic into polonius (whihc I imagine we'll do next)</p>\n</blockquote>\n<p>I did as you suggested, but the output is still not the same. It still has region 13 live when it shouldn't be, but several other <code>var_drop_used</code> disappears. It seems that <a href=\"https://github.com/rust-lang/rust/issues/13\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/13\">#13</a> is made live from the presence of <code>\"_2\" \"Mid(bb3[0])\"</code> in <code>var_drop_used</code>. However, when I simply remove that from the facts file, I get a mismatch saying that <a href=\"https://github.com/rust-lang/rust/issues/13\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/13\">#13</a> should be live at <code>\"Start(bb3[0])</code> and Mid, but isn't. Honestly, I'm not sure what's going on. At bb3, _8, which is where _2 is moved, is already <code>drop()</code>ped? I don't see how rustc should output a fact then.</p>\n<p>Just to be sure, I am recompiling rustc, but I'm sending this now in case you see something I don't.</p>",
        "id": 166095369,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1558366934
    },
    {
        "content": "<p>I did it like this though, and it seems to produce equivalent but less output:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">cx</span><span class=\"p\">.</span><span class=\"n\">initialized_at_terminator</span><span class=\"p\">(</span><span class=\"n\">location</span><span class=\"p\">.</span><span class=\"n\">block</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">mpi</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">facts</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">cx</span><span class=\"p\">.</span><span class=\"n\">typeck</span><span class=\"p\">.</span><span class=\"n\">borrowck_context</span><span class=\"p\">.</span><span class=\"n\">as_mut</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">().</span><span class=\"n\">all_facts</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">facts</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"p\">.</span><span class=\"n\">var_drop_used</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">((</span><span class=\"n\">local</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">cx</span><span class=\"p\">.</span><span class=\"n\">location_table</span><span class=\"p\">.</span><span class=\"n\">mid_index</span><span class=\"p\">(</span><span class=\"n\">location</span><span class=\"p\">)));</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 166149041,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1558424109
    },
    {
        "content": "<p>Gotta love those five levels of wrapping data structures</p>",
        "id": 166149148,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1558424259
    },
    {
        "content": "<p>I have another question while I'm at it: I need to extend polonius-parser's grammar with var_uses_region and var_drops_region, but I'm not sure how to do that in the lalrpop syntax</p>",
        "id": 166172220,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1558445536
    },
    {
        "content": "<p>I guess it should work kind of like universal_regions, in that it's one global declaration?</p>",
        "id": 166172294,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1558445602
    },
    {
        "content": "<p>I figure I should do something like this to begin with:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">VarRegionMappings</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Comma</span><span class=\"o\">&lt;</span><span class=\"n\">VarRegionMapping</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"n\">VarRegionMapping</span>: <span class=\"p\">(</span><span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                 </span><span class=\"s\">&quot;(&quot;</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">Variable</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"s\">&quot;,&quot;</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">Region</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"s\">&quot;)&quot;</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">&lt;&gt;</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"n\">VarUsesRegion</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">&quot;var_uses_region&quot;</span><span class=\"w\"> </span><span class=\"s\">&quot;{&quot;</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">VarRegionMappings</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"s\">&quot;}&quot;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"n\">VarDropsRegion</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">&quot;var_drops_region&quot;</span><span class=\"w\"> </span><span class=\"s\">&quot;{&quot;</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">VarRegionMappings</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"s\">&quot;}&quot;</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>But how do I add this in an order-independent way to <code>Input</code>?</p>",
        "id": 166173071,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1558446136
    },
    {
        "content": "<p>don't add it in an order-independent way then :) just putting these after the <code>universal_regions {}</code> will probably be simpler ?</p>",
        "id": 166183579,
        "sender_full_name": "lqd",
        "timestamp": 1558452918
    },
    {
        "content": "<blockquote>\n<p>don't add it in an order-independent way then :) just putting these after the <code>universal_regions {}</code> will probably be simpler ?</p>\n</blockquote>\n<p>Could you expand on that? I mean, I can do something like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">Input</span>: <span class=\"nc\">Input</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Comment</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">universal_regions</span>:<span class=\"nc\">UniversalRegions</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Comment</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">var_uses_region</span>:<span class=\"nc\">VarUsesRegion</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Comment</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">var_drops_region</span>:<span class=\"nc\">VarDropsRegion</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Comment</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">blocks</span>:<span class=\"nc\">BlockDefn</span><span class=\"o\">*&gt;</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Input</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">&lt;&gt;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>but that would both require them to be present and in that order.</p>",
        "id": 166186371,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1558454746
    },
    {
        "content": "<p>Ok, so I made them optional by adding <code>?</code>:s, and then creating a constructor for <code>Input</code> like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Input</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">new</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">universal_regions</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">var_uses_region</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">)</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">var_drops_region</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">)</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">blocks</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">Block</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Input</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Input</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">universal_regions</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">var_uses_region</span>: <span class=\"nc\">var_uses_region</span><span class=\"p\">.</span><span class=\"n\">unwrap_or</span><span class=\"p\">(</span><span class=\"nb\">Vec</span>::<span class=\"n\">default</span><span class=\"p\">()),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">var_drops_region</span>: <span class=\"nc\">var_drops_region</span><span class=\"p\">.</span><span class=\"n\">unwrap_or</span><span class=\"p\">(</span><span class=\"nb\">Vec</span>::<span class=\"n\">default</span><span class=\"p\">()),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">blocks</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>and using</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">Input</span>: <span class=\"nc\">Input</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Comment</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">universal_regions</span>:<span class=\"nc\">UniversalRegions</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Comment</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">var_uses_region</span>:<span class=\"nc\">VarUsesRegion</span><span class=\"o\">?&gt;</span><span class=\"w\"> </span><span class=\"n\">Comment</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">var_drops_region</span>:<span class=\"nc\">VarDropsRegion</span><span class=\"o\">?&gt;</span><span class=\"w\"> </span><span class=\"n\">Comment</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">blocks</span>:<span class=\"nc\">BlockDefn</span><span class=\"o\">*&gt;</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Input</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&lt;&gt;</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>in the grammar.</p>\n<p>It feels very clunky,  is there a better way?</p>",
        "id": 166187313,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1558455469
    },
    {
        "content": "<p>there probably is a better way, using lalrpop better, but even if the order is fixed like so, it's at least acceptable for now ? (and at least unblocks you until then, and at least these test programs have an always consistent syntax albeit inflexible)</p>",
        "id": 166188554,
        "sender_full_name": "lqd",
        "timestamp": 1558456341
    },
    {
        "content": "<p>there can probably exist a larlpop macro/combinator where we could pass these parts and it would combine them, with optional comments in-between (possibly in an order-independent way) as the program header before the cfg blocks</p>",
        "id": 166188712,
        "sender_full_name": "lqd",
        "timestamp": 1558456479
    },
    {
        "content": "<p>(similarly to the <code>Comma</code> combinator, at least if one ignores the order-independence part -- update: hmm maybe not)</p>",
        "id": 166188784,
        "sender_full_name": "lqd",
        "timestamp": 1558456557
    },
    {
        "content": "<p>a lot of the more flexible uses of lalrpop seem to involve a custom lexer eg <a href=\"https://github.com/lalrpop/lalrpop/issues/14\" target=\"_blank\" title=\"https://github.com/lalrpop/lalrpop/issues/14\">https://github.com/lalrpop/lalrpop/issues/14</a> -- then again, I'm not super familiar with it</p>",
        "id": 166189375,
        "sender_full_name": "lqd",
        "timestamp": 1558457041
    },
    {
        "content": "<p>for an example of order-independence and optional relations, something like this could be done: 1) introduce an enum to unify the relations <code>universal_regions { ... }</code>, <code>var_uses_region { ... }</code>, and <code>var_drops_region { ... }</code> 2) make <code>Input</code> take a list of these \"directives\" instead of the <code>universal_regions</code> Vec (and either only have a list of directives in <code>Input</code>, or distribute them into your 3 inner Vecs in a new <code>Input::new</code> fn)</p>",
        "id": 166193533,
        "sender_full_name": "lqd",
        "timestamp": 1558459920
    },
    {
        "content": "<p>like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">Input</span>: <span class=\"nc\">Input</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">&lt;</span><span class=\"n\">directives</span>:<span class=\"nc\">ProgramDirective</span><span class=\"o\">*&gt;</span><span class=\"w\"> </span><span class=\"n\">Comment</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">blocks</span>:<span class=\"nc\">BlockDefn</span><span class=\"o\">*&gt;</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Input</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">&lt;&gt;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"n\">ProgramDirective</span><span class=\"w\"> </span>: <span class=\"nc\">ProgramDirective</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Comment</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">UniversalRegions</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">ProgramDirective</span>::<span class=\"n\">UniversalRegions</span><span class=\"p\">(</span><span class=\"o\">&lt;&gt;</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Comment</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">VarUsesRegion</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">ProgramDirective</span>::<span class=\"n\">VarUsesRegion</span><span class=\"p\">(</span><span class=\"o\">&lt;&gt;</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Comment</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">VarDropsRegion</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">ProgramDirective</span>::<span class=\"n\">VarDropsRegion</span><span class=\"p\">(</span><span class=\"o\">&lt;&gt;</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 166193647,
        "sender_full_name": "lqd",
        "timestamp": 1558459970
    },
    {
        "content": "<p>3) if needed, add some validation to the root parsing fn to ensure these program directives are valid, for example, say, \"there must be a universal_regions directive even if it's empty\" and the likes which could apply to the other 2 relations</p>",
        "id": 166193907,
        "sender_full_name": "lqd",
        "timestamp": 1558460127
    },
    {
        "content": "<p>Hm, that sounds like a perfectly OK approach too, but I'm not sure it's sufficiently better than what I have to warrant the even more complicated implementation, so I think I'll let it be. At least now all the tests are passing, which is mostly what I was aiming for. :)</p>",
        "id": 166242987,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1558509230
    },
    {
        "content": "<p>Ugh, I <em>swear</em> this worked yesterday, but today I'm getting shift-reduce conflicts???</p>",
        "id": 166243044,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1558509274
    },
    {
        "content": "<p>Ah, Ok it's the interspersed <code>Comment*</code> between the statements</p>",
        "id": 166243358,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1558509678
    },
    {
        "content": "<p>I can...live without that</p>",
        "id": 166243364,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1558509694
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  Ok I have done a more thorough investigation of what's different between the output of rustc and polonius for liveness (after tweaking the output of which variables get drop-use-emitted when. First, what's going on in the test is that a moved value is explicitly dropped:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wrap</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Wrap</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">p</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"> </span><span class=\"c1\">// Wrap impls Drop</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">String</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"s\">&quot;str&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">a</span>: <span class=\"nc\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"nc\">wrap</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"> </span><span class=\"c1\">// Foo does not</span>\n<span class=\"w\">    </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">drop</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">a</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">drop</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">b</span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>The interesting MIR blocks are, I think, these:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">bb2</span>: <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">FakeRead</span><span class=\"p\">(</span><span class=\"n\">ForLet</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_5</span><span class=\"p\">);</span><span class=\"w\">            </span><span class=\"c1\">// bb2[0]: scope 4 at maybe-initialized-drop-with-uninitialized-fragments.rs:18:9: 18:10</span>\n<span class=\"w\">        </span><span class=\"n\">StorageLive</span><span class=\"p\">(</span><span class=\"n\">_6</span><span class=\"p\">);</span><span class=\"w\">                 </span><span class=\"c1\">// bb2[1]: scope 6 at maybe-initialized-drop-with-uninitialized-fragments.rs:19:9: 19:12</span>\n<span class=\"w\">        </span><span class=\"n\">StorageLive</span><span class=\"p\">(</span><span class=\"n\">_7</span><span class=\"p\">);</span><span class=\"w\">                 </span><span class=\"c1\">// bb2[2]: scope 6 at maybe-initialized-drop-with-uninitialized-fragments.rs:19:24: 19:25</span>\n<span class=\"w\">        </span><span class=\"n\">_7</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"n\">_5</span><span class=\"p\">;</span><span class=\"w\">                    </span><span class=\"c1\">// bb2[3]: scope 6 at maybe-initialized-drop-with-uninitialized-fragments.rs:19:24: 19:25</span>\n<span class=\"w\">        </span><span class=\"n\">StorageLive</span><span class=\"p\">(</span><span class=\"n\">_8</span><span class=\"p\">);</span><span class=\"w\">                 </span><span class=\"c1\">// bb2[4]: scope 6 at maybe-initialized-drop-with-uninitialized-fragments.rs:19:30: 19:34</span>\n<span class=\"w\">        </span><span class=\"n\">_8</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"n\">_2</span><span class=\"p\">;</span><span class=\"w\">                    </span><span class=\"c1\">// bb2[5]: scope 6 at maybe-initialized-drop-with-uninitialized-fragments.rs:19:30: 19:34</span>\n<span class=\"w\">        </span><span class=\"n\">_6</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Foo</span>::<span class=\"o\">&lt;</span><span class=\"na\">&#39;_</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">a</span>: <span class=\"nc\">move</span><span class=\"w\"> </span><span class=\"n\">_7</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"nc\">move</span><span class=\"w\"> </span><span class=\"n\">_8</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"> </span><span class=\"c1\">// bb2[6]: scope 6 at maybe-initialized-drop-with-uninitialized-fragments.rs:19:15: 19:36</span>\n<span class=\"w\">        </span><span class=\"n\">drop</span><span class=\"p\">(</span><span class=\"n\">_8</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"p\">[</span><span class=\"k\">return</span>: <span class=\"nc\">bb6</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">unwind</span>: <span class=\"nc\">bb5</span><span class=\"p\">];</span><span class=\"w\"> </span><span class=\"c1\">// bb2[7]: scope 6 at maybe-initialized-drop-with-uninitialized-fragments.rs:19:35: 19:36</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n\n<span class=\"w\">    </span><span class=\"n\">bb3</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">cleanup</span><span class=\"p\">)</span>: <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">drop</span><span class=\"p\">(</span><span class=\"n\">_2</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">bb1</span><span class=\"p\">;</span><span class=\"w\">                 </span><span class=\"c1\">// bb3[0]: scope 2 at maybe-initialized-drop-with-uninitialized-fragments.rs:24:1: 24:2</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>What rustc emits in terms of region liveness for <code>_2</code>/<code>_8</code>'s region is that it gets drop-used at the move, <code>Mid(bb2[5])</code>. It's also live in the single line of the <code>bb3</code> block, but this doesn't propagate to the other blocks that precede it as it should according to the rules.</p>\n<p>In other words, I think there is something more advanced related to initialisation tracking going on here, and it's perhaps best to just let it be and fix initialisation tracking in stead? It's worth noting that leaving it as it is doesn't break any compile-tests.</p>",
        "id": 166572461,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1558872644
    },
    {
        "content": "<p>I should perhaps also mention that <code>_8</code>, which is the moved copy of <code>_2</code>gets a new region. This is then solved by a mutual outlives relationship that of course means is equal, but we don't know that when generating <code>region_live_at</code>.</p>",
        "id": 166572577,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1558872850
    },
    {
        "content": "<p>I'm not sure if there's a case to be made for inital de-duplication of these equivalent regions or if you're already doing that</p>",
        "id": 166572636,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1558872965
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I also have a theoretical question. In the literature, there is a lot of talk about \"context-sensitive analysis\", but a \"context\" seems very broad. Given that Polonius takes literal lines of intermediate representation into account, does that make the analysis context-sensitive?</p>",
        "id": 166577252,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1558880606
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Also, I am a bit unclear about what precisely happens when we generate <code>var_uses_region</code>and <code>var_drops_region</code>. What precisely does it mean that a given region occurs in a referece's type? How does this interact with, say, indirect/nested references?</p>",
        "id": 166580094,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1558884963
    },
    {
        "content": "<p>A region occurs in a type if it</p>\n<ul>\n<li>Is one of the type's region parameters (this include the region for references)</li>\n<li>It occurs in one of the type's type parameters<br>\n<code>tcx.for_each_free_region(&amp;value, |region| { r })</code> will call the closure for each region that occurs in the type, although it won't deduplicate regions.</li>\n</ul>",
        "id": 166580954,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1558886346
    },
    {
        "content": "<blockquote>\n<p>In other words, I think there is something more advanced related to initialisation tracking going on here, and it's perhaps best to just let it be and fix initialisation tracking in stead? It's worth noting that leaving it as it is doesn't break any compile-tests</p>\n</blockquote>\n<p>Liveness in NLL does use initialization results to reduce the amount of time that variable are live. I think that this can just be left for now.<br>\nWe should have a test for this in the rustc test suite, but it's possible that polonius circumvents the test.</p>",
        "id": 166581178,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1558886710
    },
    {
        "content": "<p>Are you generating <code>var_uses_region</code> and <code>var_drops_region</code> facts at the moment?</p>",
        "id": 166581234,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1558886776
    },
    {
        "content": "<blockquote>\n<p>Liveness in NLL does use initialization results to reduce the amount of time that variable are live. I think that this can just be left for now.<br>\nWe should have a test for this in the rustc test suite, but it's possible that polonius circumvents the test</p>\n</blockquote>\n<p>I'm talking about the Polonius-internal tests that only verify that Polonius <code>region_live_at</code>is the same as the one given by Rustc (which it currently isn't always). I wrote those. :)</p>",
        "id": 166626712,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1558954238
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span>  </p>\n<blockquote>\n<p>Are you generating <code>var_uses_region</code> and <code>var_drops_region</code> facts at the moment?</p>\n</blockquote>\n<p>Yes! In <code>trace::add_drop_live_facts_for</code>,  I have:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">       </span><span class=\"c1\">// All things in the `outlives` array may be touched by</span>\n<span class=\"w\">        </span><span class=\"c1\">// the destructor and must be live at this point.</span>\n<span class=\"w\">        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">kind</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">drop_data</span><span class=\"p\">.</span><span class=\"n\">dropck_result</span><span class=\"p\">.</span><span class=\"n\">kinds</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">Self</span>::<span class=\"n\">make_all_regions_live</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">elements</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">typeck</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">kind</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">live_at</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"n\">polonius</span>::<span class=\"n\">add_var_drops_regions</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">typeck</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">dropped_local</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">kind</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>and then:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">// For every potentially drop()-touched region `region` in `local`&#39;s type</span>\n<span class=\"c1\">// (`kind`), emit a Polonius `var_drops_region(local, region)` fact.</span>\n<span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">super</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">add_var_drops_regions</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">typeck</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">TypeChecker</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">local</span>: <span class=\"nc\">Local</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">kind</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Kind</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">typeck</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">for_each_free_region</span><span class=\"p\">(</span><span class=\"n\">kind</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">drop_live_region</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">region_vid</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">typeck</span><span class=\"p\">.</span><span class=\"n\">borrowck_context</span><span class=\"p\">.</span><span class=\"n\">universal_regions</span><span class=\"p\">.</span><span class=\"n\">to_region_vid</span><span class=\"p\">(</span><span class=\"n\">drop_live_region</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">facts</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">typeck</span><span class=\"p\">.</span><span class=\"n\">borrowck_context</span><span class=\"p\">.</span><span class=\"n\">all_facts</span><span class=\"p\">.</span><span class=\"n\">as_mut</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">facts</span><span class=\"p\">.</span><span class=\"n\">var_drops_region</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">((</span><span class=\"n\">local</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">region_vid</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">});</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 166626844,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1558954434
    },
    {
        "content": "<blockquote>\n<p>A region occurs in a type if it</p>\n<ul>\n<li>Is one of the type's region parameters (this include the region for references)</li>\n<li>It occurs in one of the type's type parameters</li>\n</ul>\n</blockquote>\n<p>OK, so the latter one takes care of the reference to reference situation, where we might have a reference to a reference to a reference with region <code>'x</code>. Got it!</p>",
        "id": 166627207,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1558954776
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> I'm not entirely clear on which questions remain unresolved here --</p>",
        "id": 166718356,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559051163
    },
    {
        "content": "<p>as <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> said, we do take initialization into account, I think you and I discussed this earlier. When it comes to polonius, I would probably prefer to wait on that part because computing \"initialization\" is in fact the next thing we should be doing (perhaps starting this week?) and so it would make sense to incorporate that afterwards.</p>",
        "id": 166718442,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559051210
    },
    {
        "content": "<p>Probably you and me should schedule some kind of (recorded) zoom session to talk over the next steps</p>",
        "id": 166718466,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559051229
    },
    {
        "content": "<p>(re: parsing, the way to do this would be to accept the directives in any order, and then enforce any \"occurs at most once\" restrictions in the action code, I suppose)</p>",
        "id": 166718624,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559051316
    },
    {
        "content": "<blockquote>\n<p>(re: parsing, the way to do this would be to accept the directives in any order, and then enforce any \"occurs at most once\" restrictions in the action code, I suppose)</p>\n</blockquote>\n<p>I pushed a stupid version that enforces ordering for now, but that's probably a better long-term solution.</p>",
        "id": 166725546,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1559055957
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"204115\">Albin Stjerna</span> I'm not entirely clear on which questions remain unresolved here --</p>\n</blockquote>\n<p>Errm, hardly surprising. I think you can treat most of this as resolved for now. What seems to have happened is that I figured that for some edge cases we will probably need proper initialisation analysis in Polonius to get the same <code>region_live_at</code> output as rustc.</p>\n<p>I think we should be starting with initialisation this week, and I guess we should start merging the liveness logic as-is?</p>",
        "id": 166726001,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1559056214
    },
    {
        "content": "<p>sounds correct to me</p>",
        "id": 166726399,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559056485
    },
    {
        "content": "<p>I guess we need to merge the polonius code first?</p>",
        "id": 166726405,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559056492
    },
    {
        "content": "<p>well, we can sync up later today I guess and figure this out, I'm kind of busy until then</p>",
        "id": 166726425,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559056504
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Sounds good; I was busy too</p>",
        "id": 166738905,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1559064303
    },
    {
        "content": "<p>Also, <a href=\"/user_uploads/4715/8c9NtpnaseENB85NR_mJM-Dh/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">this is what the liveness graph output I'm working on looks like now</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/8c9NtpnaseENB85NR_mJM-Dh/pasted_image.png\" target=\"_blank\" title=\"this is what the liveness graph output I'm working on looks like now\"><img src=\"/user_uploads/4715/8c9NtpnaseENB85NR_mJM-Dh/pasted_image.png\"></a></div>",
        "id": 166739052,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1559064398
    },
    {
        "content": "<p>I'm planning on giving the liveness edges different colours for each variable, but err this is a work-in-progress</p>",
        "id": 166739111,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1559064452
    },
    {
        "content": "<p>Also, reduction of non-interesting nodes is sorely needed as you can see</p>",
        "id": 166739124,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1559064463
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/wOYZKPGD69o4cPNZSA_ggFQe/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">now I have the facts as well</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/wOYZKPGD69o4cPNZSA_ggFQe/pasted_image.png\" target=\"_blank\" title=\"now I have the facts as well\"><img src=\"/user_uploads/4715/wOYZKPGD69o4cPNZSA_ggFQe/pasted_image.png\"></a></div>",
        "id": 166896966,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1559213101
    },
    {
        "content": "<p>Ok; now the full graph reduction thing works, which means that it joins nodes in the graph where liveness doesn't change and control flow just moves forward: <a href=\"/user_uploads/4715/TSrsje0RF3GB_-Q31P9js8_A/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">example</a>  and <a href=\"/user_uploads/4715/nh53YIELSwzzow0kFsa1ARpf/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">other example</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/TSrsje0RF3GB_-Q31P9js8_A/pasted_image.png\" target=\"_blank\" title=\"example\"><img src=\"/user_uploads/4715/TSrsje0RF3GB_-Q31P9js8_A/pasted_image.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/4715/nh53YIELSwzzow0kFsa1ARpf/pasted_image.png\" target=\"_blank\" title=\"other example\"><img src=\"/user_uploads/4715/nh53YIELSwzzow0kFsa1ARpf/pasted_image.png\"></a></div>",
        "id": 166980508,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1559293584
    },
    {
        "content": "<p>I had to pull in the petgraph library for DFS though, and do a few...less than beautiful things</p>",
        "id": 166980541,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1559293623
    },
    {
        "content": "<p>Update: <a href=\"/user_uploads/4715/BRtOJ3kKLvpQi7tIN7BRhPBh/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">now with rainbows</a>.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/BRtOJ3kKLvpQi7tIN7BRhPBh/pasted_image.png\" target=\"_blank\" title=\"now with rainbows\"><img src=\"/user_uploads/4715/BRtOJ3kKLvpQi7tIN7BRhPBh/pasted_image.png\"></a></div>",
        "id": 167002587,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1559313665
    },
    {
        "content": "<p>Also, emoji to save space. <span aria-label=\"drop\" class=\"emoji emoji-1f4a7\" role=\"img\" title=\"drop\">:drop:</span> = var_drop_used, <span aria-label=\"fixing\" class=\"emoji emoji-1f527\" role=\"img\" title=\"fixing\">:fixing:</span> = var_used, <span aria-label=\"skull and crossbones\" class=\"emoji emoji-2620\" role=\"img\" title=\"skull and crossbones\">:skull_and_crossbones:</span>️ = var_defined</p>",
        "id": 167002774,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1559313816
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1184\">@WG-polonius</span> Would it be OK to pull in <a href=\"https://crates.io/crates/petgraph\" target=\"_blank\" title=\"https://crates.io/crates/petgraph\">petgraph</a> as a dependency in polonius-the-binary (not polonius-engine)?</p>",
        "id": 167061911,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1559376957
    },
    {
        "content": "<p>for the binary I myself think it’d be ok</p>",
        "id": 167062113,
        "sender_full_name": "lqd",
        "timestamp": 1559377241
    },
    {
        "content": "<blockquote>\n<p>for the binary I myself think it’d be ok</p>\n</blockquote>\n<p>yes, for polonius it's ok, not polonius-engine</p>",
        "id": 167068620,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559388698
    },
    {
        "content": "<p>Good, that's what I thought</p>",
        "id": 167069271,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1559389878
    },
    {
        "content": "<p>Then I'll make a separate PR of those after the liveness PR is merged</p>",
        "id": 167069277,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1559389903
    },
    {
        "content": "<p>Because I genuinely think it might be useful for debugging</p>",
        "id": 167069320,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1559389931
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> is <a href=\"https://github.com/rust-lang/polonius/pull/105/\" target=\"_blank\" title=\"https://github.com/rust-lang/polonius/pull/105/\">https://github.com/rust-lang/polonius/pull/105/</a> ready for review / ready to land?</p>",
        "id": 167232990,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559596587
    },
    {
        "content": "<p>hmm that's a painful one to review :)</p>",
        "id": 167233055,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559596643
    },
    {
        "content": "<p>is the +1,347,366 −1,345,277 expected btw ?</p>",
        "id": 167233181,
        "sender_full_name": "lqd",
        "timestamp": 1559596762
    },
    {
        "content": "<p>(seems a bit high, even if modifying many input facts)</p>",
        "id": 167233266,
        "sender_full_name": "lqd",
        "timestamp": 1559596825
    },
    {
        "content": "<p>not sure :)</p>",
        "id": 167233539,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559597048
    },
    {
        "content": "<p>yeah, seems like all the facts were regenerated, I'm surprised they are so different to cause such a big diff — but I guess it makes sense since the ones in the repo are fairly old (and the \"NLL MIR\" has changed since they were initially generated) but I hope they're not regressing. For example, as clap is not unit tested, it would be nice to be sure the new facts produce the same errors as the old ones. It's a bit of a chicken and egg situation, as rustc and polonius bootstrap each other here, creating big diffs for the facts especially over a longer period of time. I also wonder how much of rustc's tests should we integrate in Polonius in general (vs rustc's polonius compare mode), and under the form of facts in particular (vs, say, generating them just in time in the tests, in memory or .gitignored).</p>",
        "id": 167272918,
        "sender_full_name": "lqd",
        "timestamp": 1559639365
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> It should be ready to merge, except for an entry in the Changelog, but I plan on writing that from the circulation desk later today. I'll let you know when it's done!</p>",
        "id": 167275693,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1559641562
    },
    {
        "content": "<blockquote>\n<p>is the +1,347,366 −1,345,277 expected btw ?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> I'm also adding new input facts, but yes, in hindsight this maybe wasn't a great idea.</p>",
        "id": 167275771,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1559641611
    },
    {
        "content": "<blockquote>\n<p>yeah, seems like all the facts were regenerated, I'm surprised they are so different to cause such a big diff — but I guess it makes sense since the ones in the repo are fairly old (and the \"NLL MIR\" has changed since they were initially generated) but I hope they're not regressing.</p>\n</blockquote>\n<p>Almost all of them, some of the facts caused hard-coded point IDs to change in the MIR and I kept the old facts. This also means that the <code>var_used_at</code>and all the other new facts are actually inconsistent with the other facts in the same folder, but it's fine as they are ignored and the liveness analysis bypassed when there is an existing <code>region_live_at</code>fact set.</p>",
        "id": 167276004,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1559641789
    },
    {
        "content": "<p>But yes, in the future I think I should keep the PRs smaller and the merge windows shorter than this, in particular for rustc</p>",
        "id": 167276110,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1559641828
    },
    {
        "content": "<p>chicken and egg, sometimes you need new facts for tests, or to update an existing one such as clap (which is likely be the vast majority of the change here) it’s a bit unfortunate but I’m not sure it would have been easy/possible to avoid for you in any case</p>",
        "id": 167276185,
        "sender_full_name": "lqd",
        "timestamp": 1559641893
    },
    {
        "content": "<p>could be an interesting topic for tonight ?</p>",
        "id": 167276346,
        "sender_full_name": "lqd",
        "timestamp": 1559641991
    },
    {
        "content": "<p>Yes!</p>",
        "id": 167276561,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1559642159
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Ok DONE, I think. I just updated RELEASES on my branch</p>",
        "id": 167283324,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1559648450
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> thanks</p>",
        "id": 167307794,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559663495
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Should I do something similar to my commits to Rust?</p>",
        "id": 167332489,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1559679715
    },
    {
        "content": "<p>It's less messy than Polonius, but I didn't go out of my way to curate the history as the commits seem to get squashed on merge anyways?</p>",
        "id": 167332561,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1559679753
    },
    {
        "content": "<p>yes please</p>",
        "id": 167336021,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559682498
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> I haven't actually looked but a messy history can be a real pain</p>",
        "id": 167336048,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559682525
    },
    {
        "content": "<p>of course if I just view \"all diffs\" it's fine</p>",
        "id": 167336050,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559682531
    },
    {
        "content": "<p>it mostly matters if the full set of diffs is large</p>",
        "id": 167336053,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559682536
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I take that back, I think the commit log looks all right except that I still regret that rustfmt a bit</p>",
        "id": 167363210,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1559718296
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang-nursery/polonius/issues/105\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/issues/105\">polonius#105</a> seems to be missing the <code>liveness.rs</code> file</p>",
        "id": 167365945,
        "sender_full_name": "lqd",
        "timestamp": 1559721492
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>",
        "id": 167389297,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559742110
    },
    {
        "content": "<p>Err wooops</p>",
        "id": 167393145,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1559744480
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Fixed!</p>",
        "id": 167393393,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1559744629
    },
    {
        "content": "<p>I <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span> the \"boring\" and \"fun\" commit btw :)</p>",
        "id": 167393512,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559744683
    },
    {
        "content": "<p>The naming or the general concept?</p>",
        "id": 167393661,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1559744764
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> merged, published</p>",
        "id": 167608072,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559937001
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Yay! I'll finalise rustc now :)</p>",
        "id": 167608178,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1559937056
    },
    {
        "content": "<p>about that, I was thinking, since we don't quite match rustc's <code>region_live_at</code> generation yet, maybe we should only remove this relation facts' generation from rustc after move/overwrite has been integrated, so we can <em>then</em> ensure we do match it ? I mean, maybe we don't do <a href=\"https://github.com/rust-lang/rust/pull/60266/commits/f275292d3e34fb83a98c2bef0aae383e22880fac\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/60266/commits/f275292d3e34fb83a98c2bef0aae383e22880fac\">this commit</a> yet, what do you think ? (or maybe it's not that easy/worthwhile ?)</p>",
        "id": 167609446,
        "sender_full_name": "lqd",
        "timestamp": 1559937984
    },
    {
        "content": "<p>Hmm. It does make sense I guess, but we also have the recorded facts to compare with, but those could of course go stale</p>",
        "id": 167610055,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1559938410
    },
    {
        "content": "<p>Other than that, <a href=\"https://github.com/rust-lang/rust/issues/60266\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/60266\">rust#60266</a> should be ready to merge</p>",
        "id": 167610134,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1559938445
    },
    {
        "content": "<p>true; just a thought as it's hard to check correctness as you've no doubt seen :)</p>",
        "id": 167610182,
        "sender_full_name": "lqd",
        "timestamp": 1559938499
    },
    {
        "content": "<p>Err, yes</p>",
        "id": 167610204,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1559938507
    },
    {
        "content": "<p>Ideally I'd like to have an option to turn it on, but I don't know the policy on that</p>",
        "id": 167610224,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1559938524
    },
    {
        "content": "<p>initialization/move/overwrite shouldn't take close as long, so maybe the new recorded facts would be enough indeed</p>",
        "id": 167610535,
        "sender_full_name": "lqd",
        "timestamp": 1559938745
    },
    {
        "content": "<p>I <em>think</em> (but unsure about the procedure about triage) that the PR can also be marked <code>S-waiting-on-review</code> instead of <code>S-waiting-on-author</code></p>",
        "id": 167610714,
        "sender_full_name": "lqd",
        "timestamp": 1559938865
    },
    {
        "content": "<p>Feel free to remark as waiting-on-review if the author feels that way</p>",
        "id": 167610799,
        "sender_full_name": "simulacrum",
        "timestamp": 1559938926
    },
    {
        "content": "<p>basically if the author is, in fact, waiting on review then that's the right status :)</p>",
        "id": 167610815,
        "sender_full_name": "simulacrum",
        "timestamp": 1559938940
    },
    {
        "content": "<p>:)</p>",
        "id": 167610825,
        "sender_full_name": "lqd",
        "timestamp": 1559938948
    },
    {
        "content": "<p>done <span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> — thanks <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> :)</p>",
        "id": 167610910,
        "sender_full_name": "lqd",
        "timestamp": 1559939039
    },
    {
        "content": "<p>Can we emit both sets of facts and have polonius configurable as to whether or not to use them?</p>",
        "id": 167784333,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560191856
    },
    {
        "content": "<p>e.g. by selecting which algorithm perhaps?</p>",
        "id": 167784348,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560191866
    },
    {
        "content": "<p>naive, naive-liveness, something like that</p>",
        "id": 167784360,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560191872
    },
    {
        "content": "<p>sounds feasible</p>",
        "id": 167788328,
        "sender_full_name": "lqd",
        "timestamp": 1560194722
    },
    {
        "content": "<p>Hmm, <span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span>, I just skimmed <a href=\"https://github.com/rust-lang/rust/pull/60266/\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/60266/\">https://github.com/rust-lang/rust/pull/60266/</a> -- I'm trying to remember -- that code <em>is</em> (at least sort of) taking initialization into account when generating <code>var_drop_used</code> facts, though it's leveraging rustc to do that generation ... but we are still seeing discrepancies in the results? I can't remember if we tracked that down or not.</p>",
        "id": 167795746,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560200188
    },
    {
        "content": "<blockquote>\n<p>e.g. by selecting which algorithm perhaps?</p>\n</blockquote>\n<p>The easiest way is just to either not populate the <code>region_live_at</code> input or delete it to begin with I think, but yes, that's not difficult.</p>",
        "id": 167798193,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1560202093
    },
    {
        "content": "<blockquote>\n<p>Hmm, <span class=\"user-mention silent\" data-user-id=\"204115\">Albin Stjerna</span>, I just skimmed <a href=\"https://github.com/rust-lang/rust/pull/60266/\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/60266/\">https://github.com/rust-lang/rust/pull/60266/</a> -- I'm trying to remember -- that code <em>is</em> (at least sort of) taking initialization into account when generating <code>var_drop_used</code> facts, though it's leveraging rustc to do that generation ... but we are still seeing discrepancies in the results? I can't remember if we tracked that down or not.</p>\n</blockquote>\n<p>Yes, and I know. It's weird. I did a run-down of the differences, and they really were minor, but I don't understand it either.</p>",
        "id": 167798244,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1560202137
    },
    {
        "content": "<p>Hmm, ok. I wonder if we should try to dig into this a bit deeper.</p>",
        "id": 167798272,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560202158
    },
    {
        "content": "<p>(Have you taken a look at the other initialization-tracking code at all?)</p>",
        "id": 167798284,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560202173
    },
    {
        "content": "<p>Not yet, I have been working on my presentation. And also just been very inefficient lately, I honestly don't know why</p>",
        "id": 167798357,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1560202223
    },
    {
        "content": "<p>everything takes longer than you think...</p>",
        "id": 167798435,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560202306
    },
    {
        "content": "<p>Anyway, my notes say that in the example I looked at, it seems that there was just one variable being needlessly live</p>",
        "id": 167798676,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1560202482
    },
    {
        "content": "<p>It was made live from a drop-use in an unwind block. If you in stead change the logic to consider it drop-used when it's moved, and then drop-live again only in the point where it was dropped but with no propagation (despite no reassignments killing it), results are the same</p>",
        "id": 167798833,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1560202591
    },
    {
        "content": "<p>In other words, I think the logic for <code>region_live_at</code> in rustc is not doing the flow calculations but rather something different</p>",
        "id": 167798896,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1560202677
    },
    {
        "content": "<p>(I have not looked at the liveness PRs so the following may be wrong) this reminds me of <a href=\"https://github.com/rust-lang/rust/issues/60840\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/60840\">#60840</a> and <a href=\"https://github.com/rust-lang/rust/issues/61373\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/61373\">#61373</a> about adding (adding back?) more <code>StorageDead</code> for some locals in unwind paths: it may be related if our fact generation used to rely on those and an optimization has removed some ? (since it seems to be a big perf regression to add them everywhere and in those PRs they had to be limited to generators)</p>",
        "id": 167836831,
        "sender_full_name": "lqd",
        "timestamp": 1560248318
    },
    {
        "content": "<blockquote>\n<p>In other words, I think the logic for <code>region_live_at</code> in rustc is not doing the flow calculations but rather something different</p>\n</blockquote>\n<p>let me double-check that</p>",
        "id": 167875470,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560276937
    },
    {
        "content": "<blockquote>\n<p>Anyway, my notes say that in the example I looked at, it seems that there was just one variable being needlessly live</p>\n</blockquote>\n<p>can you say a bit more about this?</p>",
        "id": 167881883,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560280899
    },
    {
        "content": "<p>Yes, let me dig up my notes</p>",
        "id": 167882015,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1560280963
    },
    {
        "content": "<p>Ok, so I looked at maybe-initialized-drop-with-uninitialized-fragments, main I think</p>",
        "id": 167882090,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1560281034
    },
    {
        "content": "<p>OK</p>",
        "id": 167882256,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560281134
    },
    {
        "content": "<p>I'm looking at it :)</p>",
        "id": 167882363,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560281188
    },
    {
        "content": "<p>And the difference is that provenance variable 13 is live at a number of blocks when it shouldn't be</p>",
        "id": 167882372,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1560281193
    },
    {
        "content": "<p>It's made live by a drop-use of _2 in bb3[0]</p>",
        "id": 167882397,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1560281209
    },
    {
        "content": "<p>Which is an unwind, I think</p>",
        "id": 167882419,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1560281222
    },
    {
        "content": "<p>hmm</p>",
        "id": 167882441,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560281233
    },
    {
        "content": "<p>well let me dump the MIR locally</p>",
        "id": 167882457,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560281245
    },
    {
        "content": "<p>Hm, no sorry it's a cleanup block which may or may not be an unwind</p>",
        "id": 167882506,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1560281283
    },
    {
        "content": "<p>I'm not sure</p>",
        "id": 167882533,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1560281286
    },
    {
        "content": "<p>ok so <code>_2</code> is the <code>Wrap&lt;'_&gt;</code></p>",
        "id": 167882547,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560281317
    },
    {
        "content": "<p>the example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wrap</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Wrap</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">p</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">String</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"s\">&quot;str&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">a</span>: <span class=\"nc\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"nc\">wrap</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">drop</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">a</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">drop</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">b</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">//~ ERROR cannot assign to `x` because it is borrowed [E0506]</span>\n<span class=\"w\">    </span><span class=\"c1\">// FIXME ^ This currently errors and it should not.</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 167882553,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560281331
    },
    {
        "content": "<p>the interesting bit here: <code>wrap</code> is moved into <code>foo</code></p>",
        "id": 167882569,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560281337
    },
    {
        "content": "<p>we then move out all the <em>parts</em> of <code>foo</code>, but we never move from <code>foo</code> itself</p>",
        "id": 167882588,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560281346
    },
    {
        "content": "<p>the current NLL fails to understand this</p>",
        "id": 167882597,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560281356
    },
    {
        "content": "<p>so it assumes that the <code>foo</code> dtor could still run</p>",
        "id": 167882605,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560281362
    },
    {
        "content": "<p>which makes the borrow of <code>&amp;mut x</code> live</p>",
        "id": 167882610,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560281369
    },
    {
        "content": "<p>anyway yes ok so I see the unwind problem</p>",
        "id": 167882925,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560281539
    },
    {
        "content": "<p>I noted that the following changes should give the same output in Polonius:<br>\n- mark _2 as drop-used and drop-live at the point of the move (Mid(bb2[5]))<br>\n- mark _2 as drop-live in bb3[0], but don't propagate that backwards (so, I guess, also kill/assign it it)<br>\n- mark the move as a kill (assignment)</p>",
        "id": 167882926,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1560281540
    },
    {
        "content": "<p>basically <code>_2</code> is <em>potentially</em> live at <code>_3</code></p>",
        "id": 167882937,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560281552
    },
    {
        "content": "<p>Ah</p>",
        "id": 167882947,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1560281559
    },
    {
        "content": "<p>the idea is this:</p>",
        "id": 167882961,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560281572
    },
    {
        "content": "<p>if <code>String::from</code> should panic (say)</p>",
        "id": 167882969,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560281578
    },
    {
        "content": "<p>it would unwind and drop <code>wrap</code></p>",
        "id": 167882979,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560281584
    },
    {
        "content": "<p>but now, later on, if <code>std::mem::drop</code> should panic</p>",
        "id": 167882995,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560281594
    },
    {
        "content": "<p>we unwind through the same frame</p>",
        "id": 167883000,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560281596
    },
    {
        "content": "<p>of course, at that point, <code>wrap</code> will have been moved (dynamically)</p>",
        "id": 167883011,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560281604
    },
    {
        "content": "<p>so now I have to remember where in the code</p>",
        "id": 167883017,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560281614
    },
    {
        "content": "<p>...this is sort of coming back to me..</p>",
        "id": 167883020,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560281618
    },
    {
        "content": "<p>do we account for this and where</p>",
        "id": 167883021,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560281623
    },
    {
        "content": "<p>Ah</p>",
        "id": 167883086,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1560281645
    },
    {
        "content": "<p>(I'm currently staring at the liveness graph I generated by the extension I made to try to figure out what is going on)</p>",
        "id": 167883333,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1560281882
    },
    {
        "content": "<blockquote>\n<p>which makes the borrow of <code>&amp;mut x</code> live</p>\n</blockquote>\n<p>Hm, but the problem I'm having is that Polonius is reporting to <em>many</em> live variables, not too few</p>",
        "id": 167883465,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1560281968
    },
    {
        "content": "<p>it looks <span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> like we are integrating the initialization check deeply into the propagation</p>",
        "id": 167883475,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560281981
    },
    {
        "content": "<p>so I guess your original analysis was correct</p>",
        "id": 167883517,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560281989
    },
    {
        "content": "<p>notably</p>",
        "id": 167883528,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560281991
    },
    {
        "content": "<p>in <a href=\"https://github.com/rust-lang/rust/blob/8e948df707ea8a3c88c65bf2ffdcb2f1cf5491be/src/librustc_mir/borrow_check/nll/type_check/liveness/trace.rs#L324-L327\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/8e948df707ea8a3c88c65bf2ffdcb2f1cf5491be/src/librustc_mir/borrow_check/nll/type_check/liveness/trace.rs#L324-L327\">this code</a>, we decide to propagate back from a node N to its predecessors <em>only if</em> the path is initialized at the exit of the predecessor</p>",
        "id": 167883636,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560282034
    },
    {
        "content": "<p>one option, it occurs to me</p>",
        "id": 167883654,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560282045
    },
    {
        "content": "<p>if we wanted to remove <code>region_live_at</code> without loss of precision</p>",
        "id": 167883671,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560282059
    },
    {
        "content": "<p>would be to emit facts for <code>initialized_at_exit</code></p>",
        "id": 167883683,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560282066
    },
    {
        "content": "<p>i.e., we can emit <em>facts</em> for the stuff that polonius will compute later</p>",
        "id": 167883695,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560282075
    },
    {
        "content": "<p>I guess that <a href=\"https://github.com/rust-lang/polonius/blob/3f122afd019f9a4be0ce1d7e2844e52b0faf3c24/polonius-engine/src/output/liveness.rs#L86-L89\" target=\"_blank\" title=\"https://github.com/rust-lang/polonius/blob/3f122afd019f9a4be0ce1d7e2844e52b0faf3c24/polonius-engine/src/output/liveness.rs#L86-L89\">this logic</a> would change:</p>\n<div class=\"codehilite\"><pre><span></span>var_drop_live(V, P) :-\n    var_drop_live(V, Q),\n    cfg_edge(P, Q),\n    !var_defined(V, P).\n</pre></div>",
        "id": 167883797,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560282150
    },
    {
        "content": "<p>we want something like </p>\n<div class=\"codehilite\"><pre><span></span>var_drop_live(V, P) :-\n    var_drop_live(V, Q),\n    cfg_edge(P, Q),\n    !var_defined(V, P),\n    var_initialized_on_exit(V, P).\n</pre></div>",
        "id": 167883824,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560282181
    },
    {
        "content": "<p>that's an interesting step</p>",
        "id": 167883960,
        "sender_full_name": "lqd",
        "timestamp": 1560282300
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  oh ok, so we cheat by emitting initialisation facts in rust, the same ones we will compute in the next step, and use those as a crutch to make sure we will eventually get the right output?</p>",
        "id": 167884178,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1560282479
    },
    {
        "content": "<p>right</p>",
        "id": 167884236,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560282501
    },
    {
        "content": "<p>oh, that's also good in a second way</p>",
        "id": 167884245,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1560282517
    },
    {
        "content": "<p>because that gives us free validation when we roll out initialisation in Polonius</p>",
        "id": 167884266,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1560282533
    },
    {
        "content": "<p>in precisely the same way as for region_live_at</p>",
        "id": 167884289,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1560282548
    },
    {
        "content": "<p>ok, <em>sold</em>!</p>",
        "id": 167884301,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1560282564
    },
    {
        "content": "<p>yeah that's kind of nice</p>",
        "id": 167884456,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560282667
    },
    {
        "content": "<p>it would definitely be good to transition <em>fully</em> to polonius for liveness</p>",
        "id": 167884483,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560282684
    },
    {
        "content": "<p>and not have some intermediate state where we sometimes use rustc's liveness</p>",
        "id": 167884490,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560282691
    },
    {
        "content": "<p>Yes, that would be nice. But initialisation tracking is the last step for that right?</p>",
        "id": 167884750,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1560282880
    },
    {
        "content": "<p>I'm saying that if we add these facts for now</p>",
        "id": 167884770,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560282896
    },
    {
        "content": "<p>we are able to kill the old liveness completely</p>",
        "id": 167884773,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560282902
    },
    {
        "content": "<p>and then we transition from <em>those</em> to doing the init tracking ourselves</p>",
        "id": 167884791,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560282909
    },
    {
        "content": "<p>Ah, ok</p>",
        "id": 167884802,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1560282915
    },
    {
        "content": "<p>I thought I already did kill the liveness tracking in my branch?</p>",
        "id": 167884823,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1560282935
    },
    {
        "content": "<p>Or was that what you were referring to?</p>",
        "id": 167884839,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1560282943
    },
    {
        "content": "<p>yes, you did, it's just that we don't get the exact same results right now, and <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> was concerned about that (for testing purposes)</p>",
        "id": 167886253,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560283939
    },
    {
        "content": "<p>Ah ok, then I understand how everything fits. And I agree that it would feel much, much better to have the same output</p>",
        "id": 167886301,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1560283986
    },
    {
        "content": "<p>Until we have implemented this I think it's all just a hypothesis anyway</p>",
        "id": 167886328,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1560284010
    },
    {
        "content": "<p>I need to go to bed now, but I'll go through your notes on initialization and see where that gets me in terms of implementing <code>var_initialized_on_exit</code></p>",
        "id": 167886439,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1560284106
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Ok, the liveness-debug-graph-generation is now available as a mergable (hopefully) PR: <a href=\"https://github.com/rust-lang-nursery/polonius/issues/108\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/issues/108\">polonius#108</a>.</p>",
        "id": 168055995,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1560439873
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> cool!</p>",
        "id": 168060608,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560442949
    },
    {
        "content": "<p>Regarding the overall status, am I correct that you are attempting to integrate the init information into the liveness analysis as we discussed, to eliminate the remaining discrepancy?</p>",
        "id": 168060621,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560442974
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Yes! I started working on that today</p>",
        "id": 168060759,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1560443074
    },
    {
        "content": "<p>I'm not sure how to go from the maybe initialized information in rust to actually knowing if something is initialized or not, but I guess the fact should be emitted only if we absolutely know that a variable is initialized?</p>",
        "id": 168061029,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1560443270
    },
    {
        "content": "<p>(or have been deinitialized)</p>",
        "id": 168061037,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1560443277
    },
    {
        "content": "<p>btw the description from <a href=\"https://github.com/rust-lang/rust/issues/54468\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54468\">#54468</a> mentions some limitation about the invalidation/drop facts, would that impact liveness (or our complete regenerating of the recorded facts) ? -- (of course, some of these limitations, the invalidation ones or 2PBs, are likely linked to the test failures we're seeing in compare mode)</p>",
        "id": 168066600,
        "sender_full_name": "lqd",
        "timestamp": 1560447093
    },
    {
        "content": "<p>Ok, so I have an idea to inject the code to generate <code>var_initialized_on_exit</code> facts in <code>trace()</code> (where I know that information already exists), but it seems I would need to iterate over every location in the MIR and basically ask \"is V initialized here?\". Now, I can't find an easy way of iterating over all locations in the MIR, and also this feels like an unnecessarily slow way of going about this</p>",
        "id": 168122382,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1560506542
    },
    {
        "content": "<p>Oh no that seems to require a MIR visitor</p>",
        "id": 168123332,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1560507490
    },
    {
        "content": "<p>Hmm, or should we just emit the facts for the exit point of a given <code>BasicBlock</code>? Also, should this fact be emitted even on partial initialization?</p>",
        "id": 168124593,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1560508858
    },
    {
        "content": "<p>Or should var rather be a move path with a separate relation mapping variables to their move paths?</p>",
        "id": 168124737,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1560509013
    },
    {
        "content": "<p>Hm, but if we use this analysis <em>only</em> for drop-liveness (for now), then I guess we should track any initialisation at all, right?</p>",
        "id": 168124796,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1560509050
    },
    {
        "content": "<blockquote>\n<p>I'm not sure how to go from the maybe initialized information in rust to actually knowing if something is initialized or not, but I guess the fact should be emitted only if we absolutely know that a variable is initialized?</p>\n</blockquote>\n<p>well \"maybe initialized\" is actually what we want, I think? That is, we want to halt propagation if we know that something is <em>definitely</em> uninitialized, but not otherwise.</p>",
        "id": 168127315,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560511917
    },
    {
        "content": "<blockquote>\n<p>Hmm, or should we just emit the facts for the exit point of a given <code>BasicBlock</code>? Also, should this fact be emitted even on partial initialization?</p>\n</blockquote>\n<p>in practice, we only care about the exit of a block at the moment, so that suffices I guess</p>",
        "id": 168127391,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560511976
    },
    {
        "content": "<blockquote>\n<p>Or should var rather be a move path with a separate relation mapping variables to their move paths?</p>\n</blockquote>\n<p>I think we could just use variables because that is the basis of the liveness computation -- the <em>real</em> initialization logic will want to use sub-paths</p>",
        "id": 168127416,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560512011
    },
    {
        "content": "<p>(iterating over all locations in the MIR is certainly possible)</p>",
        "id": 168127495,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560512075
    },
    {
        "content": "<blockquote>\n<p>(iterating over all locations in the MIR is certainly possible)</p>\n</blockquote>\n<p>Ok, I'll keep looking for that in the documentation then, because I think this should work otherwise.</p>",
        "id": 168127834,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1560512429
    },
    {
        "content": "<p>What is the difference between something being initialised at a terminator compared to at the exit of a block? Shouldn't they be the same?</p>",
        "id": 168127889,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1560512497
    },
    {
        "content": "<p>Hmh, so it does some sort of recomputation:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">// Compute the set of initialized paths at terminator of block</span>\n<span class=\"c1\">// by resetting to the start of the block and then applying</span>\n<span class=\"c1\">// the effects of all statements. This is the only way to get</span>\n<span class=\"c1\">// &quot;just ahead&quot; of a terminator.</span>\n</pre></div>\n\n\n<p>Hm, basically both methods check <code>flow_inits</code>, to see if any part of the variable's move path is still initialised, but <code> at_terminator</code> re-performs the effects of each statement in the block, and <code>at_exit</code> just returns whatever's in <code>flow_inits</code>at the exit point.</p>",
        "id": 168128215,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1560512874
    },
    {
        "content": "<p>(feel free to throttle messages because I might be rubber-ducking you right now)</p>",
        "id": 168128385,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1560513009
    },
    {
        "content": "<p>that's also why I'm not @:ing anyone</p>",
        "id": 168128396,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1560513024
    },
    {
        "content": "<p>Ok I think I figured it out now</p>",
        "id": 168131052,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1560515745
    },
    {
        "content": "<p>Let's see if it works</p>",
        "id": 168131058,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1560515752
    },
    {
        "content": "<p>correction, let's see if it <em>runs</em></p>",
        "id": 168131103,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1560515764
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> sorry was afk-ish :)</p>",
        "id": 168175712,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560550262
    },
    {
        "content": "<p>what is <code>at_exit</code>?</p>",
        "id": 168175733,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560550305
    },
    {
        "content": "<p>:)</p>",
        "id": 168175735,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560550308
    },
    {
        "content": "<p>oh, you mean the <code>initialized_at_exit</code> function</p>",
        "id": 168175791,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560550344
    },
    {
        "content": "<p>right so</p>",
        "id": 168175797,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560550354
    },
    {
        "content": "<p>here's the thing</p>",
        "id": 168175800,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560550357
    },
    {
        "content": "<p>the <em>terminator</em> of a MIR block  can make assignments (in the case of a function call)</p>",
        "id": 168175816,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560550372
    },
    {
        "content": "<p>e.g.</p>",
        "id": 168175817,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560550373
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>BB0 {\n    X = call foo(A, B, C) goto BB1 unwind BB2\n}\n</pre></div>",
        "id": 168175836,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560550393
    },
    {
        "content": "<p>well I forget how we pretty-print it</p>",
        "id": 168175841,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560550399
    },
    {
        "content": "<p>so the <code>at_exit</code> call is checking the effect <em>after</em> the terminator executes -- meaning that <code>A</code>, <code>B</code>, and <code>C</code> would have been consumed</p>",
        "id": 168175851,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560550419
    },
    {
        "content": "<p>but <code>at_terminator</code> is checking the state <em>just before</em> the terminator executes -- so <code>A..C</code> would not yet have been consumed</p>",
        "id": 168175857,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560550434
    },
    {
        "content": "<p>the subtlety around calls that <code>at_exit</code> is referring to is the fact that the variable <code>X</code></p>",
        "id": 168175904,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560550447
    },
    {
        "content": "<p>is only going to be initialized if we enter BB1 -- i.e., on a normal return</p>",
        "id": 168175916,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560550459
    },
    {
        "content": "<p>if an unwind occurs (BB2) then it would not be initialized</p>",
        "id": 168175921,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560550465
    },
    {
        "content": "<p>I think <code>at_exit</code> will return a value where <code>X</code> is not yet initialized</p>",
        "id": 168175973,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560550561
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Ok, <a href=\"https://github.com/rust-lang-nursery/polonius/issues/109\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/issues/109\">polonius#109</a> should be ready to merge now!</p>",
        "id": 169559623,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1562155005
    },
    {
        "content": "<p>Really love these two-hour merges every time</p>",
        "id": 169562581,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1562157745
    },
    {
        "content": "<p>Should be trivial, but never are</p>",
        "id": 169562589,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1562157755
    },
    {
        "content": "<p>Apparently, the rebase...somehow reverts changes that it never shows merge conflicts for</p>",
        "id": 169563039,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1562158108
    },
    {
        "content": "<p>I don't understand how that is even possible</p>",
        "id": 169563047,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1562158116
    },
    {
        "content": "<p>Specifically, commit <code>0d2b8d5cfd8</code>seems to just change to undo upstream</p>",
        "id": 169563501,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1562158521
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 169568109,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1562162044
    },
    {
        "content": "<p>Ah, ok, I see. It's a rustfmt run that also...replaces all the rustfmt:ed lines.</p>",
        "id": 169568432,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1562162246
    },
    {
        "content": "<p>It seems to be this commit: <a href=\"https://github.com/rust-lang/rust/pull/60266/commits/494b6914c5f61df180ce652752430e5ff4367048\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/60266/commits/494b6914c5f61df180ce652752430e5ff4367048\">https://github.com/rust-lang/rust/pull/60266/commits/494b6914c5f61df180ce652752430e5ff4367048</a></p>",
        "id": 169568551,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1562162333
    },
    {
        "content": "<p>I actually have no idea how to solve this</p>",
        "id": 169568557,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1562162340
    },
    {
        "content": "<p>Yessss Ok I got it to work now</p>",
        "id": 169572768,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1562165247
    },
    {
        "content": "<p>After THREE HOURS</p>",
        "id": 169572778,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1562165253
    },
    {
        "content": "<p>Ok, waiting on the new Polonius release now!</p>",
        "id": 169573284,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1562165523
    },
    {
        "content": "<p>Haha, the newly rebased rustc will produce different basic block IDs</p>",
        "id": 169587701,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1562176245
    },
    {
        "content": "<p>In other words; almost entirely different input facts</p>",
        "id": 169587712,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1562176254
    },
    {
        "content": "<p>(still passing all tests though)</p>",
        "id": 169587717,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1562176261
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> Ok, <a href=\"https://github.com/rust-lang-nursery/polonius/issues/109\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/issues/109\">polonius#109</a> should be ready to merge now!</p>\n</blockquote>\n<p>awesome!</p>",
        "id": 169893555,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562610848
    },
    {
        "content": "<p>OK, I merged <a href=\"https://github.com/rust-lang-nursery/polonius/issues/109\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/polonius/issues/109\">polonius#109</a>, <span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> I'll publish a new version</p>",
        "id": 169893632,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562610936
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> so <a href=\"https://github.com/rust-lang/rust/pull/60266\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/60266\">https://github.com/rust-lang/rust/pull/60266</a> is failing the PR checks, but I can't get the logs, maybe spurious?</p>",
        "id": 170439933,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562667088
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"204115\">Albin Stjerna</span> so <a href=\"https://github.com/rust-lang/rust/pull/60266\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/60266\">https://github.com/rust-lang/rust/pull/60266</a> is failing the PR checks, but I can't get the logs, maybe spurious?</p>\n</blockquote>\n<p>I think it's because I haven't adapted it to the newly released Polonius yet, I'll do that...now!</p>",
        "id": 170440762,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1562667924
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Ok, now <a href=\"https://github.com/rust-lang/rust/issues/60266\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/60266\">rust#60266</a> should build, I just pushed a commit upgrading Polonius!</p>",
        "id": 170441517,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1562668602
    },
    {
        "content": "<p>the PR check is green <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 170455788,
        "sender_full_name": "lqd",
        "timestamp": 1562681128
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> needs rebase :(</p>",
        "id": 170723917,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562939823
    },
    {
        "content": "<p>also, maybe worth squashing the commits somewhat?</p>",
        "id": 170723927,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562939829
    },
    {
        "content": "<p>I found it kind of hard to re-review as is</p>",
        "id": 170723938,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562939837
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I saw, but too late unfortunately:(</p>",
        "id": 170724020,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1562939922
    },
    {
        "content": "<p>But yes it’s getting a bit messy</p>",
        "id": 170724035,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1562939932
    },
    {
        "content": "<p>I’ll try squashing it when I’m rebasing</p>",
        "id": 170724290,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1562940127
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  Ok I went whole-hog and just rewrote the entire history a lá my previous fun/boring commits to Polonius. I must say I enjoy having to learn more about git, and I have absolutely come to love magit at this point.</p>",
        "id": 170755129,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1562964980
    },
    {
        "content": "<p>magit is life changing</p>",
        "id": 170755144,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562964997
    },
    {
        "content": "<p>it is also the most emacs of all interfaces</p>",
        "id": 170755145,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562965002
    },
    {
        "content": "<p>and I don't mean that in a good way</p>",
        "id": 170755152,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562965011
    },
    {
        "content": "<p>Yeah it's slow for no reason and very obviously interacts flakily with a shell script</p>",
        "id": 170755244,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1562965088
    },
    {
        "content": "<p>I have/love emacs so much</p>",
        "id": 170755246,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1562965093
    },
    {
        "content": "<p>It's like LaTeX</p>",
        "id": 170755252,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1562965097
    },
    {
        "content": "<p>It's great at what it does and also awful at what it does and it should be replaced, but the path dependency on it is just awful so that will never happen</p>",
        "id": 170755266,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1562965126
    },
    {
        "content": "<p>if it's just rebasing and doesn't need re-review, which I assume is the case, we can tell bors r=niko when CI is green (if so, I'll do that in the morning)</p>",
        "id": 170761546,
        "sender_full_name": "lqd",
        "timestamp": 1562972246
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> It is and it shouldn't</p>",
        "id": 170777082,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1562999486
    },
    {
        "content": "<p>Can I do that?</p>",
        "id": 170777083,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1562999496
    },
    {
        "content": "<p>I'm still not sure what I can do</p>",
        "id": 170777085,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1562999503
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span>  I think you need bors rights, I did it</p>",
        "id": 170779498,
        "sender_full_name": "lqd",
        "timestamp": 1563003613
    },
    {
        "content": "<p>liveness landed <span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 170801777,
        "sender_full_name": "lqd",
        "timestamp": 1563045117
    },
    {
        "content": "<p>I saw! <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 170802983,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1563047365
    },
    {
        "content": "<blockquote>\n<p>It's like LaTeX</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> honestly, Emacs is much more tolerable than LaTeX in that the former at least mostly works.</p>",
        "id": 170917352,
        "sender_full_name": "Aaron Weiss",
        "timestamp": 1563214214
    },
    {
        "content": "<p>I haven't kept up with the liveness work as much as I should have, so maybe this is normal, but in the <code>polonius-imprecision/cycle_unification</code> test case, I feel liveness has changed from when it was computed by rustc: it seems to start one point earlier, eg at the mid point <a href=\"https://github.com/lqd/borrow-check/blob/variant_prototype2/inputs/polonius-imprecision/polonius-imprecision.rs#L28\" target=\"_blank\" title=\"https://github.com/lqd/borrow-check/blob/variant_prototype2/inputs/polonius-imprecision/polonius-imprecision.rs#L28\">of an assignment</a> and not at the start point of the successor location (which is how it used to be IIRC); is that something you'd expect ? (or maybe am I misunderstanding something ?)</p>",
        "id": 177767402,
        "sender_full_name": "lqd",
        "timestamp": 1570665816
    },
    {
        "content": "<p>ah but I think it's actually been fixed by Matthew's PR</p>",
        "id": 177769048,
        "sender_full_name": "lqd",
        "timestamp": 1570667672
    },
    {
        "content": "<p>That is a bit weird, because I did extensive comparisons to the output of rustc and definitely had the same output</p>",
        "id": 177783726,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1570690019
    },
    {
        "content": "<p>yeah I remember, that's why this was confusing; maybe it's subtle differences between nightlies which were misleading me (eg. the number of blocks changed recently making all my notes misnumbered :)</p>",
        "id": 177789904,
        "sender_full_name": "lqd",
        "timestamp": 1570696760
    },
    {
        "content": "<p>ok I now see what you mean about initialization and liveness dominating runtime in your benchmarks; eg in my latest test on clap:<br>\n- initialization: 474 ms<br>\n- liveness: 278 ms<br>\n- borrow checking: 42ms</p>",
        "id": 177913663,
        "sender_full_name": "lqd",
        "timestamp": 1570805207
    },
    {
        "content": "<p>alright <a href=\"https://github.com/rust-lang/rust/issues/134\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/134\">#134</a> should help with your real world benchmarks (but not eg our clap ones, where code always passes the locationinsensitive pre-filter) to avoid computing init/liveness twice</p>",
        "id": 177994647,
        "sender_full_name": "lqd",
        "timestamp": 1570895600
    },
    {
        "content": "<p>Yay!</p>",
        "id": 178023559,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1570947618
    },
    {
        "content": "<p>I do believe it should be fairly easy to optimize the liveness computation by doing it on less variables — and similarly for initialization by computing <code>var_maybe_initialized_on_exit</code> on less paths (but I'm still fuzzy on its possible use outside of liveness, eg maybe ... initialization errors ?) and unsure about the ongoing work on that anyways, so likely TBD later; although on clap, initialization is dominating runtime as we mentioned before</p>",
        "id": 178034836,
        "sender_full_name": "lqd",
        "timestamp": 1570966899
    },
    {
        "content": "<p>(I'll try to prototype that for liveness, and run rustc's tests, hopefully by next week's meeting)</p>",
        "id": 178034957,
        "sender_full_name": "lqd",
        "timestamp": 1570967115
    },
    {
        "content": "<p>Hm var maybe...is only needed for drop-liveness, but move path initialisation is needed for move errors</p>",
        "id": 178043433,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1570982246
    },
    {
        "content": "<p>That is, it is needed precisely when the variable holds a struct implementing a custom drop and that struct contains (transitively I guess) a reference</p>",
        "id": 178043488,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1570982298
    },
    {
        "content": "<p>Which is basically never according to my estimates</p>",
        "id": 178043491,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1570982310
    },
    {
        "content": "<p>if what I have in mind works (we'll see with rustc's tests, as ours seem to pass) it should be helpful to reduce the number of tuples produced by quite a bit; even if the relation is almost never useful, we still have to compute it in case it is actually useful heh. but yeah we can detect and limit the work to compute it when it's not used, say. and it should have the same effect as the reduction I'm trying (and which seems to have some potential <em>/me whistles until I can run the tests</em> :)</p>",
        "id": 178054085,
        "sender_full_name": "lqd",
        "timestamp": 1570999300
    },
    {
        "content": "<p>(FWIW, ie not that much, but better than nothing: it did pass rustc's ui tests. With, on clap, 30x faster initialization -- that is completely unsuitable for computing move/initialization errors if we wanted to do that -- and 25x faster liveness, which I guess is sound IIUC, but we'll check with niko. Overall 10x on clap since it's early returned by LocationInsensitive)</p>",
        "id": 178089255,
        "sender_full_name": "lqd",
        "timestamp": 1571047190
    },
    {
        "content": "<p>Cool!</p>",
        "id": 178096339,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1571054235
    }
]