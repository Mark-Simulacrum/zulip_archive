[
    {
        "content": "<p>Let's use this stream to coordinate activities during the sprint?</p>",
        "id": 205793323,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596461369
    },
    {
        "content": "<p>yes :) cc <span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span></p>",
        "id": 205793408,
        "sender_full_name": "lqd",
        "timestamp": 1596461407
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/sprint.20week/near/198209577\">said</a>:</p>\n<blockquote>\n<p>as for agenda, what I had in mind was:</p>\n<ul>\n<li>(go over some of the recent work I've done (which I have yet to open PRs for anyway))</li>\n<li>a bit of planning / design: I'd like to talk with you all about our plans, especially about some of the feature parity work we're doing, which might have an unavoidable cost. That's absolutely fine for a reference implementation, say, but maybe not for production. We're redoing some dataflow work, in a more general setting which cannot take advantage of the dataflow setting, i.e oversimplifying, there's no super easy way to take advantage of computing over a CFG rather than an arbitrary relation.</li>\n<li>talk about the \"Locations::All\" fix I had in mind and prototyped, and how it impacts our rules</li>\n<li>computing subset errors in the optimized variant (which I'd like to keep for now even if Niko probably wouldn't want to :)</li>\n<li>I walked through the valley of the shadow of death while looking at NLLs performance on the whole clap crate, so maybe talk about location-insensitivity, how I think we could do it outside of datafrog  since it's in my mind actually just a case of graph traversal here, etc (which I also have prototyped)</li>\n<li>(if, and it's a big if, I manage to actually <em>achieve</em> anything with them: maybe talk about the other ideas I had wrt polonius' model itself -- and if I don't you'll never hear about this again)</li>\n<li>maybe some design work for niko, about the equality variant :) check the couple rules I \"had\" to add to it, maybe we try to understand why one or two rustc tests failed with the variant, those kinds of things</li>\n<li>actually emit the move errors to validate our rules, I haven't been able to look at this yet so it'd be reassuring to do so</li>\n</ul>\n</blockquote>",
        "id": 205793423,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596461415
    },
    {
        "content": "<p>I'd be curious to get a bit of an update from <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> on the status of things, I saw mention of \"datapond\" which I take it is the \"datalog-to-datafrog\" compiler you were hacking on?</p>",
        "id": 205793473,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596461451
    },
    {
        "content": "<p>exactly</p>",
        "id": 205793491,
        "sender_full_name": "lqd",
        "timestamp": 1596461462
    },
    {
        "content": "<p>so here goes</p>",
        "id": 205793503,
        "sender_full_name": "lqd",
        "timestamp": 1596461468
    },
    {
        "content": "<p><a href=\"https://hackmd.io/CGMNjt1hR_qYtsR9hgdGmw\">master hackmd with polonius rules</a> -- is this still up to date?</p>",
        "id": 205793547,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596461495
    },
    {
        "content": "<p>I think so yes</p>",
        "id": 205793636,
        "sender_full_name": "lqd",
        "timestamp": 1596461525
    },
    {
        "content": "<p>although the code itself doesn't all have the new naming from the hackmd</p>",
        "id": 205793665,
        "sender_full_name": "lqd",
        "timestamp": 1596461541
    },
    {
        "content": "<p>(not to interrupt, I'm wondering if a good 1st step would be trying to create a skill-tree sort of thing for polonius)</p>",
        "id": 205793674,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596461546
    },
    {
        "content": "<p>anyway, carry on</p>",
        "id": 205793701,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596461564
    },
    {
        "content": "<p>status: all in all we're not far from a MVP of sorts, but some issues remain:</p>",
        "id": 205793712,
        "sender_full_name": "lqd",
        "timestamp": 1596461574
    },
    {
        "content": "<p>1) move errors: polonius emits them, but rustc doesn't read what polonius emits nor emits them</p>",
        "id": 205793767,
        "sender_full_name": "lqd",
        "timestamp": 1596461605
    },
    {
        "content": "<ul>\n<li>there's likely a problem of efficiency with them as well: it's very slow on clap (1-2 mins)</li>\n</ul>",
        "id": 205793826,
        "sender_full_name": "lqd",
        "timestamp": 1596461642
    },
    {
        "content": "<ul>\n<li>the fix I did switching the location of an emitted fact (from mid to start point) to avoid false positives for move errors along edges crossing blocks may have unintended consequences (even though the polonius test still kind passed but see next point)</li>\n</ul>",
        "id": 205793974,
        "sender_full_name": "lqd",
        "timestamp": 1596461720
    },
    {
        "content": "<ul>\n<li>they are not especially well tested in polonius, as we intended to use rustc's tests for that, and as mentioned earlier, rustc doesn't emit them yet</li>\n<li>a researcher using Polonius with dafny mentioned that our current rules about move errors apparently miss partial initialization</li>\n</ul>",
        "id": 205794057,
        "sender_full_name": "lqd",
        "timestamp": 1596461762
    },
    {
        "content": "<p>(- I remember while you and Albin were coming up with the rules for move errors last sprint, at some point you mentioned some possible mismatch between datalog and a regular dataflow computation for init/unit variables, so it may cause the inefficiency problem you had anticipated)</p>",
        "id": 205794260,
        "sender_full_name": "lqd",
        "timestamp": 1596461863
    },
    {
        "content": "<p>hmm ok :)</p>",
        "id": 205794348,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596461890
    },
    {
        "content": "<p>I'm sure it'll come back to me</p>",
        "id": 205794379,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596461907
    },
    {
        "content": "<p>I recall something about intersections of sets</p>",
        "id": 205794442,
        "sender_full_name": "lqd",
        "timestamp": 1596461937
    },
    {
        "content": "<p>but not important</p>",
        "id": 205794485,
        "sender_full_name": "lqd",
        "timestamp": 1596461959
    },
    {
        "content": "<p>2) subset errors: last time we did the implementation using placeholder loans</p>",
        "id": 205794516,
        "sender_full_name": "lqd",
        "timestamp": 1596461969
    },
    {
        "content": "<ul>\n<li>there are no \"potential subset errors\" computed in the location insensitive analysis yet, therefore no fast pre-pass</li>\n</ul>",
        "id": 205794631,
        "sender_full_name": "lqd",
        "timestamp": 1596462013
    },
    {
        "content": "<ul>\n<li>they are not computed in the opt variant either</li>\n</ul>",
        "id": 205794646,
        "sender_full_name": "lqd",
        "timestamp": 1596462025
    },
    {
        "content": "<p>(- I have prototypes for both of these)</p>",
        "id": 205794679,
        "sender_full_name": "lqd",
        "timestamp": 1596462044
    },
    {
        "content": "<ul>\n<li>I'm not sure we should be using placeholder loans vs rules about subsets</li>\n</ul>",
        "id": 205794741,
        "sender_full_name": "lqd",
        "timestamp": 1596462081
    },
    {
        "content": "<p>I remember that we talked about the discrepancy on partial initialisation</p>",
        "id": 205794795,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596462117
    },
    {
        "content": "<p>oops I forgot that</p>",
        "id": 205794847,
        "sender_full_name": "lqd",
        "timestamp": 1596462126
    },
    {
        "content": "<p>But Helpful Person I Forget Their Name Now submitted a patch for that, right?</p>",
        "id": 205794890,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596462151
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/sprint.20coordination.20Aug.203.20to.20Aug.205/near/205794741\">said</a>:</p>\n<blockquote>\n<ul>\n<li>I'm not sure we should be using placeholder loans vs rules about subsets</li>\n</ul>\n</blockquote>\n<p>I wonder if <span class=\"user-mention\" data-user-id=\"127262\">@Aaron Weiss</span> is around</p>",
        "id": 205794988,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596462204
    },
    {
        "content": "<p>utaal definitely opened an issue, let me find it</p>",
        "id": 205795012,
        "sender_full_name": "lqd",
        "timestamp": 1596462217
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/polonius/issues/152\">https://github.com/rust-lang/polonius/issues/152</a></p>",
        "id": 205795043,
        "sender_full_name": "lqd",
        "timestamp": 1596462234
    },
    {
        "content": "<p>with their own prototype for that indeed (which I haven't had the time to look at)</p>",
        "id": 205795125,
        "sender_full_name": "lqd",
        "timestamp": 1596462258
    },
    {
        "content": "<p><a href=\"https://hackmd.io/c6ooQFV-QJilsmEE15FsKQ\">sprint planning doc</a></p>",
        "id": 205795209,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596462314
    },
    {
        "content": "<ul>\n<li>continuing with subset errors: in the PR I did (or another fixing rustc tests expectation), there were definitely some cases, often related to closures or maybe involving higher ranks, where I wasn't sure whether there was an imprecision in polonius or if it was waiting for the chalk integration</li>\n</ul>",
        "id": 205795430,
        "sender_full_name": "lqd",
        "timestamp": 1596462411
    },
    {
        "content": "<p>3) OOMs during fact generation:</p>\n<ul>\n<li>the <code>Location::All</code> constraints are materialized as an outlives tuples duplicated at all points in the CFG, this causes OOMs in 2 rustc ui tests</li>\n</ul>",
        "id": 205795589,
        "sender_full_name": "lqd",
        "timestamp": 1596462485
    },
    {
        "content": "<ul>\n<li>I have prototyped a fix (which I was trying to publish earlier) which moves those facts into a dedicated relation, and updated polonius' rules to use this new relation while hopefully not just moving the materializing of these facts when evaluating the rules</li>\n</ul>",
        "id": 205795746,
        "sender_full_name": "lqd",
        "timestamp": 1596462572
    },
    {
        "content": "<p>yeah, that's kind of a pain I imagine since it'll require some duplication of datalog rules</p>",
        "id": 205795899,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596462634
    },
    {
        "content": "<p>(I wonder if we could extend datafrog somewhat to avoid that...)</p>",
        "id": 205795925,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596462653
    },
    {
        "content": "<ul>\n<li>however now it OOMs in polonius move errors analysis. I did test it on earlier polonius rev without move errors and it seemed to work ok, but as it's a subtle issue, and in general hard to test, it would be good to double check</li>\n</ul>",
        "id": 205795926,
        "sender_full_name": "lqd",
        "timestamp": 1596462654
    },
    {
        "content": "<p>yes it's indeed duplicating some rules</p>",
        "id": 205795957,
        "sender_full_name": "lqd",
        "timestamp": 1596462670
    },
    {
        "content": "<p>the opt variant being the harder one and with the most duplication, the Naive one is less complicated, and the location insensitive one is of course trivial as this is just an outlives relation without points, which is what location insensitivity is all about :)</p>",
        "id": 205796115,
        "sender_full_name": "lqd",
        "timestamp": 1596462731
    },
    {
        "content": "<p>ah yes so that's another question I remember now</p>",
        "id": 205796202,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596462776
    },
    {
        "content": "<p>whether the opt variant \"carries its weight\", especially now</p>",
        "id": 205796232,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596462790
    },
    {
        "content": "<p>and whether it would be better replaced with location-insensitivity-based optimizations</p>",
        "id": 205796260,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596462807
    },
    {
        "content": "<p>(and/or, as you point out, perhaps a non-datalog based impl)</p>",
        "id": 205796273,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596462817
    },
    {
        "content": "<p>it's an interesting question</p>",
        "id": 205796317,
        "sender_full_name": "lqd",
        "timestamp": 1596462837
    },
    {
        "content": "<p>I'm somewhat inclined to remove it except if that means that we just can't run tests in practice, that'd be kind of a drag</p>",
        "id": 205796322,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596462840
    },
    {
        "content": "<p>I think it's obviously better than the naive one</p>",
        "id": 205796404,
        "sender_full_name": "lqd",
        "timestamp": 1596462867
    },
    {
        "content": "<p>I'm not sure we can afford to not limit the transitive closures like it does, but there may be different ways for that indeed</p>",
        "id": 205796513,
        "sender_full_name": "lqd",
        "timestamp": 1596462922
    },
    {
        "content": "<p>ok so I tried to take down the points you mentioned in <a href=\"https://hackmd.io/c6ooQFV-QJilsmEE15FsKQ\">the sprint tracking doc</a></p>",
        "id": 205796561,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596462951
    },
    {
        "content": "<p>I threw in a few notes  at the end of my own :)</p>",
        "id": 205796618,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596462965
    },
    {
        "content": "<p>I'm sure we need location insensitivity at the very least the location insensitive analysis is important</p>",
        "id": 205796630,
        "sender_full_name": "lqd",
        "timestamp": 1596462977
    },
    {
        "content": "<p>right, I think the question is whether naive+insensitive is competitive with the opt variant</p>",
        "id": 205796679,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596463011
    },
    {
        "content": "<p>that being said, I've prototyped transforming the location insensitive analysis with a bunch of graph traversal queries and it is much faster</p>",
        "id": 205796689,
        "sender_full_name": "lqd",
        "timestamp": 1596463016
    },
    {
        "content": "<p>I'm not sure, and the problem is that there's a bit of uncertainty about benchmarks</p>",
        "id": 205796739,
        "sender_full_name": "lqd",
        "timestamp": 1596463046
    },
    {
        "content": "<p>ah, I rememeber some longer term questions as well</p>",
        "id": 205796772,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596463059
    },
    {
        "content": "<p>that is, clap is huge, and \"accepted\" by the pre-pass, that is, there are no potential errors</p>",
        "id": 205796777,
        "sender_full_name": "lqd",
        "timestamp": 1596463062
    },
    {
        "content": "<p>e.g we never settled the precise rules around invariance</p>",
        "id": 205796787,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596463067
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/sprint.20coordination.20Aug.203.20to.20Aug.205/near/205796679\">said</a>:</p>\n<blockquote>\n<p>right, I think the question is whether naive+insensitive is competitive with the opt variant</p>\n</blockquote>\n<p>I guess when I ask this what I really mean is \"can you run the rustc test suite in reasnable time\"</p>",
        "id": 205796889,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596463104
    },
    {
        "content": "<p>that is to say, I'm sure it's not production quality</p>",
        "id": 205796909,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596463115
    },
    {
        "content": "<p>the problem right now is that move errors heavily skew that timing</p>",
        "id": 205796957,
        "sender_full_name": "lqd",
        "timestamp": 1596463139
    },
    {
        "content": "<p>I'm just concerned that maintaining multiple sets of rules is slowing us down on settling what the rules <em>should be</em></p>",
        "id": 205796973,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596463146
    },
    {
        "content": "<p>right, and that's not even talking about the equality variant :)</p>",
        "id": 205796994,
        "sender_full_name": "lqd",
        "timestamp": 1596463161
    },
    {
        "content": "<p>yeah, so maybe the answer is that (a) we should get the move error reporting working and (b) see if we can do some simple optimizations (e.g., location insensitive) to optimize it</p>",
        "id": 205797010,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596463170
    },
    {
        "content": "<p>yes, it's that question thatI have in mind</p>",
        "id": 205797021,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596463179
    },
    {
        "content": "<p>I guess that before we get to optimizing I'd like to settle the equality variant, partial init, and other outstanding questions</p>",
        "id": 205797038,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596463193
    },
    {
        "content": "<p>and I think we all agree datalog is still a useful way to formulate the rules at least</p>",
        "id": 205797114,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596463209
    },
    {
        "content": "<p>(i.e., as a \"reference impl\")</p>",
        "id": 205797126,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596463215
    },
    {
        "content": "<p>at this point I'm wondering if we should even be computing move errors in datalog, rather than say using rustc dataflow framework, or even maybe computing them at all in polonius ?</p>",
        "id": 205797141,
        "sender_full_name": "lqd",
        "timestamp": 1596463229
    },
    {
        "content": "<p>I guess it's a fair question.</p>",
        "id": 205797205,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596463272
    },
    {
        "content": "<p>I wanted to have \"all of the borrow checker\" in polonius, but I'm not sure I can justify that</p>",
        "id": 205797239,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596463286
    },
    {
        "content": "<p>it's a nice idea and has many benefits</p>",
        "id": 205797278,
        "sender_full_name": "lqd",
        "timestamp": 1596463308
    },
    {
        "content": "<p>I guess I still believe that datalog can be made competitive, but that's not based on a lot of elbow grease :)</p>",
        "id": 205797341,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596463330
    },
    {
        "content": "<p>I do wonder about that as well</p>",
        "id": 205797359,
        "sender_full_name": "lqd",
        "timestamp": 1596463344
    },
    {
        "content": "<p>I remember Yannis not having a magic fix right ? :)</p>",
        "id": 205797388,
        "sender_full_name": "lqd",
        "timestamp": 1596463359
    },
    {
        "content": "<p>no, but tbh it's always been a bit hard to really \"hand off\" the question, I think in part because the rules were not written up in a way that let us easily communicate them to other researchers somehow</p>",
        "id": 205797465,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596463400
    },
    {
        "content": "<p>I do kind of feel like \"hard to read datalog\" is not obviously a win</p>",
        "id": 205797488,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596463419
    },
    {
        "content": "<p>sure</p>",
        "id": 205797517,
        "sender_full_name": "lqd",
        "timestamp": 1596463437
    },
    {
        "content": "<p><em>but</em> if we're talking about a \"reference implementation\", I do see value in having it contain the entire borrow checker</p>",
        "id": 205797570,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596463446
    },
    {
        "content": "<p>still, in the interest of focusing on the most important things, I can see an argument for saying \"ignore move errors\"</p>",
        "id": 205797627,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596463472
    },
    {
        "content": "<p>there are quite a few frameworks using datalog points-to analyses, and there doesn't seem, to my recollection, to be one that is \"fast\"</p>",
        "id": 205797635,
        "sender_full_name": "lqd",
        "timestamp": 1596463473
    },
    {
        "content": "<p>there are many that claim to scale to very large codebases, but it's always hard to evaluate those claims</p>",
        "id": 205797657,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596463494
    },
    {
        "content": "<p>right that's what I wanted to mention as well, how can we carve a path to the answers we need most</p>",
        "id": 205797674,
        "sender_full_name": "lqd",
        "timestamp": 1596463504
    },
    {
        "content": "<p>which in my mind are: </p>\n<ul>\n<li>are those rules the ones we want, with respect to precision, flow sensitivity</li>\n<li>is there a way for us to make a scalable implementation for these rules</li>\n</ul>",
        "id": 205797744,
        "sender_full_name": "lqd",
        "timestamp": 1596463561
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/sprint.20coordination.20Aug.203.20to.20Aug.205/near/205794988\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/sprint.20coordination.20Aug.203.20to.20Aug.205/near/205794741\">said</a>:</p>\n<blockquote>\n<ul>\n<li>I'm not sure we should be using placeholder loans vs rules about subsets</li>\n</ul>\n</blockquote>\n<p>I wonder if <span class=\"user-mention silent\" data-user-id=\"127262\">Aaron Weiss</span> is around</p>\n<div class=\"codehilite\"><pre><span></span><code>I am now!\n</code></pre></div>\n\n\n</blockquote>",
        "id": 205797807,
        "sender_full_name": "Aaron Weiss",
        "timestamp": 1596463579
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> \"those rules\" refers to all of the rules?</p>",
        "id": 205797846,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596463610
    },
    {
        "content": "<p>I think my impression of the \"move error\" rules is that there aren't that many \"open questions\"</p>",
        "id": 205797855,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596463619
    },
    {
        "content": "<p>there is engineering effort</p>",
        "id": 205797863,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596463624
    },
    {
        "content": "<p>I also remember talking to Yannis at SPLASH about my move error rules, and he said he'd look at them in case I could package something up, but I felt I never reached a state where I felt they wre \"done enough\" to talk to him about</p>",
        "id": 205797896,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596463645
    },
    {
        "content": "<p>it seems like there are more open questions around the lifetime phase of the analysis</p>",
        "id": 205797903,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596463649
    },
    {
        "content": "<p>yeah, sorry mostly the ones related to the polonius analysis, with the Naive variant we have, compared to the Equality variant</p>",
        "id": 205797910,
        "sender_full_name": "lqd",
        "timestamp": 1596463655
    },
    {
        "content": "<p>that is, the impact they have on rust code</p>",
        "id": 205797944,
        "sender_full_name": "lqd",
        "timestamp": 1596463681
    },
    {
        "content": "<p>right, it seems like the question of:</p>\n<ul>\n<li>do we want to do a placeholder-based analysis -- this is probably mostly a question of how we \"formulate\" the rules</li>\n<li>subset vs equality based analysis -- this impacts users</li>\n</ul>",
        "id": 205798013,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596463704
    },
    {
        "content": "<p>those are not entirely well understood</p>",
        "id": 205798029,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596463729
    },
    {
        "content": "<p>exactly</p>",
        "id": 205798031,
        "sender_full_name": "lqd",
        "timestamp": 1596463732
    },
    {
        "content": "<p>still I feel like I'm not ready to cut out the move errors yet -- we're kind of \"so close\" with them :P</p>",
        "id": 205798066,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596463757
    },
    {
        "content": "<p>and to then quantify the costs, both in our development time, but also the runtime of the analysis over whichever benchmarks</p>",
        "id": 205798074,
        "sender_full_name": "lqd",
        "timestamp": 1596463761
    },
    {
        "content": "<p>how hard would it be to have an option to not do the move computation</p>",
        "id": 205798261,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596463880
    },
    {
        "content": "<p>I'm trying to remember the interface, I remember we had some kind of hacks before that we were able to remove I guess</p>",
        "id": 205798319,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596463916
    },
    {
        "content": "<p>we did have such an implementation before the current PR</p>",
        "id": 205798323,
        "sender_full_name": "lqd",
        "timestamp": 1596463919
    },
    {
        "content": "<p>right</p>",
        "id": 205798374,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596463928
    },
    {
        "content": "<p>it was mostly temporary to prepare for the move errors computation in polonius, and I'm not sure how it performed but it's doable as Albin did do it :)</p>",
        "id": 205798408,
        "sender_full_name": "lqd",
        "timestamp": 1596463946
    },
    {
        "content": "<p>Sorry took me a bit to install Zulip mobile app since the webapp on mobile is very hard to use. re: placeholder loans vs subsets, Oxide in its latest rendition (which I’m going to push to arXiv tomorrow when I have internet again) fell on what I think would count as rules about subsets.</p>",
        "id": 205798426,
        "sender_full_name": "Aaron Weiss",
        "timestamp": 1596463957
    },
    {
        "content": "<p>interesting</p>",
        "id": 205798450,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596463975
    },
    {
        "content": "<p>maybe <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> the right approach would be to focus on those two questions, and in general the subset analysis, but defer the question of the move analysis a bit</p>",
        "id": 205798556,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596464029
    },
    {
        "content": "<p>I guess the question is whether some action on move errors is blocking other progress</p>",
        "id": 205798639,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596464059
    },
    {
        "content": "<p>we can disable parts of the computation on the polonius side, so it's not super blocking</p>",
        "id": 205798677,
        "sender_full_name": "lqd",
        "timestamp": 1596464079
    },
    {
        "content": "<p>(it computes both move errors and some init/uninit state used for liveness)</p>",
        "id": 205798696,
        "sender_full_name": "lqd",
        "timestamp": 1596464092
    },
    {
        "content": "<p>there's definitely something appealing about having the entirety (or almost...) of the borrow check fit in one hackmd...</p>",
        "id": 205798784,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596464148
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/sprint.20coordination.20Aug.203.20to.20Aug.205/near/205798696\">said</a>:</p>\n<blockquote>\n<p>(it computes both move errors and some init/uninit state used for liveness)</p>\n</blockquote>\n<p>right</p>",
        "id": 205798795,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596464154
    },
    {
        "content": "<p>I was just skimming over the rules to bring them back in mind</p>",
        "id": 205798808,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596464160
    },
    {
        "content": "<p>move errors aren't really borrow checking right ;)</p>",
        "id": 205798889,
        "sender_full_name": "lqd",
        "timestamp": 1596464187
    },
    {
        "content": "<p>debatable I guess :)</p>",
        "id": 205798900,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596464198
    },
    {
        "content": "<p>but yeah I totally understand</p>",
        "id": 205798912,
        "sender_full_name": "lqd",
        "timestamp": 1596464205
    },
    {
        "content": "<p>and as documentation/reference implementation etc it will always be valuable even if we had to not use datalog per se</p>",
        "id": 205798956,
        "sender_full_name": "lqd",
        "timestamp": 1596464232
    },
    {
        "content": "<p>I think I saw a minuscule, useless, inefficiency in rustc init/unit dataflow analyses thanks to our rules</p>",
        "id": 205799010,
        "sender_full_name": "lqd",
        "timestamp": 1596464267
    },
    {
        "content": "<p>do you have a sense for which parts of the rules are accounting for performance?</p>",
        "id": 205799019,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596464270
    },
    {
        "content": "<p>for move errors you mean ?</p>",
        "id": 205799066,
        "sender_full_name": "lqd",
        "timestamp": 1596464283
    },
    {
        "content": "<p>yeah, or is it just \"computing all those tuples\"</p>",
        "id": 205799089,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596464291
    },
    {
        "content": "<p>it does seem like they're probably ripe for a \"location insensitive optimization\"</p>",
        "id": 205799105,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596464302
    },
    {
        "content": "<p>I haven't profiled at all, but it seemed to to compute a lot of intermediary state and cloning it</p>",
        "id": 205799180,
        "sender_full_name": "lqd",
        "timestamp": 1596464344
    },
    {
        "content": "<p>though I have to thnk a bit about what that means ;)</p>",
        "id": 205799182,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596464346
    },
    {
        "content": "<p>which is expected</p>",
        "id": 205799195,
        "sender_full_name": "lqd",
        "timestamp": 1596464354
    },
    {
        "content": "<p>our CFGs are big, and such analyses are usually done per block</p>",
        "id": 205799223,
        "sender_full_name": "lqd",
        "timestamp": 1596464368
    },
    {
        "content": "<p>yeah, ok, so one thing we're not doing is doing the iteration at the block level</p>",
        "id": 205799261,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596464384
    },
    {
        "content": "<p>and optimizable when no cycles are present, etc etc</p>",
        "id": 205799265,
        "sender_full_name": "lqd",
        "timestamp": 1596464386
    },
    {
        "content": "<p>we're also computing transitive closures across paths at each node</p>",
        "id": 205799350,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596464414
    },
    {
        "content": "<p>i.e., if you access <code>a.b.c</code>, we also store tuples for accessing <code>a</code>, <code>a.b</code>, etc</p>",
        "id": 205799370,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596464429
    },
    {
        "content": "<p>right</p>",
        "id": 205799384,
        "sender_full_name": "lqd",
        "timestamp": 1596464438
    },
    {
        "content": "<p>you could imagine doing that differently</p>",
        "id": 205799391,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596464443
    },
    {
        "content": "<p>though I don't recall what rustc does</p>",
        "id": 205799403,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596464455
    },
    {
        "content": "<p>in any case we have multiple solutions for that situation</p>",
        "id": 205799440,
        "sender_full_name": "lqd",
        "timestamp": 1596464473
    },
    {
        "content": "<p>(\"move errors are slow\" situation, not the transitive paths accesses)</p>",
        "id": 205799488,
        "sender_full_name": "lqd",
        "timestamp": 1596464513
    },
    {
        "content": "<p>regarding <a href=\"https://github.com/rust-lang/polonius/issues/152\">https://github.com/rust-lang/polonius/issues/152</a> (assignments to partially initialized paths), it's true that we intentionally made the borrow checker less precise here</p>",
        "id": 205799553,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596464532
    },
    {
        "content": "<p>I forget all the details of why, but probably we should make polonius match, seems like it wouldn't be hard to do</p>",
        "id": 205799596,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596464558
    },
    {
        "content": "<p>ah I found the issue I was looking for, <a href=\"https://github.com/rust-lang/rust/issues/70797\">https://github.com/rust-lang/rust/issues/70797</a> is the thing I was remembering when I was talking about the possible unintended consequence of the \"move errors false positive fix\" switching a fact location to the start point, and also fits in the theme \"what rust code do our rules allow\"</p>",
        "id": 205799651,
        "sender_full_name": "lqd",
        "timestamp": 1596464590
    },
    {
        "content": "<p>I haven't checked whether it was valid/expected, but it was at least <em>a change</em></p>",
        "id": 205799739,
        "sender_full_name": "lqd",
        "timestamp": 1596464638
    },
    {
        "content": "<p>interesting</p>",
        "id": 205799824,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596464671
    },
    {
        "content": "<p>I don't remember how we ended up dealing with the same situation of user code expressiveness and limits during NLLs</p>",
        "id": 205799939,
        "sender_full_name": "lqd",
        "timestamp": 1596464728
    },
    {
        "content": "<p>OK, so, I'm wondering what we should try to do first? =)</p>\n<p>One thing would be to start a different topic and talk over the status of subsets and the placeholder vs region relations question</p>",
        "id": 205799946,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596464732
    },
    {
        "content": "<p>Yeah, it'd be good to dig into that example and understand just what is going on</p>",
        "id": 205799977,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596464749
    },
    {
        "content": "<p>it may also inform the question of whether to \"package\" move errors and subsets</p>",
        "id": 205800025,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596464763
    },
    {
        "content": "<p>interesting</p>",
        "id": 205800066,
        "sender_full_name": "lqd",
        "timestamp": 1596464779
    },
    {
        "content": "<p>I could try investigating too... as a way to remember what the heck is going on :)</p>",
        "id": 205800103,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596464803
    },
    {
        "content": "<p>the status of subsets vs equality ?</p>",
        "id": 205800108,
        "sender_full_name": "lqd",
        "timestamp": 1596464805
    },
    {
        "content": "<p>no, actually, that's not what I meant</p>",
        "id": 205800146,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596464823
    },
    {
        "content": "<p>I guess I meant to go about the placeholder vs <del>regions</del> origins question,</p>",
        "id": 205800217,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596464850
    },
    {
        "content": "<p>but also review a bit the status of those rules in polonius</p>",
        "id": 205800239,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596464860
    },
    {
        "content": "<p>is <a href=\"https://hackmd.io/CGMNjt1hR_qYtsR9hgdGmw#Subset-and-contains-the-heart-of-the-borrow-check\">https://hackmd.io/CGMNjt1hR_qYtsR9hgdGmw#Subset-and-contains-the-heart-of-the-borrow-check</a> reflecting the current rules as implemented?</p>",
        "id": 205800267,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596464875
    },
    {
        "content": "<p>I am remembering our new terminology :)</p>",
        "id": 205800335,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596464894
    },
    {
        "content": "<p>besides the new terminology, which I still am not accustomed to, I think so yes :)</p>",
        "id": 205800388,
        "sender_full_name": "lqd",
        "timestamp": 1596464930
    },
    {
        "content": "<p>maybe those aren't finalized either, especially about \"things that exist at all points\" which we have hacked around in the data instead of the rules</p>",
        "id": 205800621,
        "sender_full_name": "lqd",
        "timestamp": 1596465031
    },
    {
        "content": "<p>yes, ok</p>",
        "id": 205800822,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596465138
    },
    {
        "content": "<p>(I mean I think we have updated the rules in the hackmd to be closer to what they used to be with souffé, but with new terminology, and not all those are completely finalized in the code)</p>",
        "id": 205800830,
        "sender_full_name": "lqd",
        "timestamp": 1596465143
    },
    {
        "content": "<p>but that's just refactoring and duplicating rules, the spirit is the same</p>",
        "id": 205800858,
        "sender_full_name": "lqd",
        "timestamp": 1596465157
    },
    {
        "content": "<p>about the \"placeholder vs origins question\" did you mean something like \"placeholder loans vs origin subsets\" ?</p>",
        "id": 205801092,
        "sender_full_name": "lqd",
        "timestamp": 1596465284
    },
    {
        "content": "<p>I think my feeling on move errors is that, ultimately, I would like them to be computed by polonius, in part because I want there to be some library that people can use to run and access borrow check results that is extracted from rustc (as part of the library-ification efforts). But I am not sure of the time-frame. And, furthermore, it's hard to imagine that -- in the fullness of time -- it really makes sense to \"copy out\" the CFG from MIR into a bunch of tuples versus operating directly on it in some way.</p>",
        "id": 205801102,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596465287
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/sprint.20coordination.20Aug.203.20to.20Aug.205/near/205801092\">said</a>:</p>\n<blockquote>\n<p>about the \"placeholder vs origins question\" did you mean something like \"placeholder loans vs origin subsets\" ?</p>\n</blockquote>\n<p>yes.</p>",
        "id": 205801134,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596465311
    },
    {
        "content": "<p>so I think we should make the goal of this sprint being to have a definitive set of polonius rules</p>",
        "id": 205801147,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596465321
    },
    {
        "content": "<p>is that plausible?</p>",
        "id": 205801169,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596465331
    },
    {
        "content": "<p>I mean subject to a billion caveats ;)</p>",
        "id": 205801182,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596465341
    },
    {
        "content": "<p>:)</p>",
        "id": 205801190,
        "sender_full_name": "lqd",
        "timestamp": 1596465344
    },
    {
        "content": "<p>would definitive set imply knowing whether these rules as-is are to be preferred to the equality variant ones ?</p>",
        "id": 205801266,
        "sender_full_name": "lqd",
        "timestamp": 1596465377
    },
    {
        "content": "<p>but it feels like that would be really useful and would help us in future sprints to work on impl questions</p>",
        "id": 205801274,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596465383
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/sprint.20coordination.20Aug.203.20to.20Aug.205/near/205801266\">said</a>:</p>\n<blockquote>\n<p>would definitive set imply knowing whether these rules as-is are to be preferred to the equality variant ones ?</p>\n</blockquote>\n<p>I do think we should talk about the equality vs subset question</p>",
        "id": 205801302,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596465397
    },
    {
        "content": "<p>note that I have an implementation of the equality variant which passed rustc tests except one</p>",
        "id": 205801336,
        "sender_full_name": "lqd",
        "timestamp": 1596465419
    },
    {
        "content": "<p>I still feel like the equality relation ought to be an optimization, as a side note, and it's more correct, so I guess I'm biased there, but open to being persuaded :)</p>",
        "id": 205801351,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596465430
    },
    {
        "content": "<p>where \"correct\" means \"accepts more programs\", I guess, but I think in particular accepts some programs rustc accepts today</p>",
        "id": 205801381,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596465451
    },
    {
        "content": "<p>but maybe I don't remember correctly</p>",
        "id": 205801421,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596465477
    },
    {
        "content": "<p>the equality variant being an optimization ?</p>",
        "id": 205801490,
        "sender_full_name": "lqd",
        "timestamp": 1596465492
    },
    {
        "content": "<p>I think it started that way, and fixed a polonius-as-is imprecision, and then it had some imprecision that polonius didn't have, and to fix that we had to propagate some equality facts, and then some rustc tests failed and I had to add another TC and then it wasn't much of an optimization any more :)</p>",
        "id": 205801619,
        "sender_full_name": "lqd",
        "timestamp": 1596465577
    },
    {
        "content": "<p>why don't we break some of these conversations out into a distinct topic at this point?</p>",
        "id": 205801823,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596465682
    },
    {
        "content": "<p>I'm not sure if <span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> is still with us :)</p>",
        "id": 205801828,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596465686
    },
    {
        "content": "<p>right I was doing that :)</p>",
        "id": 205801839,
        "sender_full_name": "lqd",
        "timestamp": 1596465693
    },
    {
        "content": "<p>I am! I just didn't have anything useful to add :)</p>",
        "id": 205801847,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596465697
    },
    {
        "content": "<p>that said, I think the equality should be an optimization just from \"first principles\", it has fewer relations to propagate</p>",
        "id": 205801863,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596465712
    },
    {
        "content": "<p>it's also bi-directional</p>",
        "id": 205801869,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596465718
    },
    {
        "content": "<p>we may not have figured out the right way to express those things yet, particularly not in datalog..</p>",
        "id": 205801918,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596465731
    },
    {
        "content": "<p>right, I didn't yet take any advatage of bidirectionality</p>",
        "id": 205801958,
        "sender_full_name": "lqd",
        "timestamp": 1596465759
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> do you have some plans for what you want to be hacking on?</p>",
        "id": 205802142,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596465861
    },
    {
        "content": "<p>I am torn because I was going to say that I would be happy to help mentor a bit how to report move errors</p>",
        "id": 205802164,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596465873
    },
    {
        "content": "<p>but now <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> is giving me second thoughts ;)</p>",
        "id": 205802172,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596465878
    },
    {
        "content": "<p>dang :)</p>",
        "id": 205802184,
        "sender_full_name": "lqd",
        "timestamp": 1596465885
    },
    {
        "content": "<p>I started looking at reporting move errors in rustc, but I see what you mean</p>",
        "id": 205802198,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596465897
    },
    {
        "content": "<p>I need to do something for half an hour if you really want to talk about it though :)</p>",
        "id": 205802220,
        "sender_full_name": "lqd",
        "timestamp": 1596465911
    },
    {
        "content": "<p>though I think I would personally lean somewhat towards</p>\n<ul>\n<li>we should still report move errors</li>\n<li>we should have an option to disable this part of polonius, but still have it compute whatever is needed for subset relations, presuming that's actually a perf win</li>\n</ul>",
        "id": 205802223,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596465913
    },
    {
        "content": "<p>I think it just would need to compute liveness?</p>",
        "id": 205802230,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596465918
    },
    {
        "content": "<p>it will not be wasted to validate our move errors rules</p>",
        "id": 205802340,
        "sender_full_name": "lqd",
        "timestamp": 1596465964
    },
    {
        "content": "<p>as I wrote above, I still feel the goal of polonius ought to ultimately be to be the borrow check library -- but I suspect that it may wind up depending on some \"MIR library\" and encapsulating fact generation as well</p>",
        "id": 205802369,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596465982
    },
    {
        "content": "<p>and perhaps that means that the optimized variants don't even use datalog</p>",
        "id": 205802385,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596465990
    },
    {
        "content": "<p>I still see a lot of value in having \"reference implementations\" we can test and publish</p>",
        "id": 205802396,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596466001
    },
    {
        "content": "<p>and, you know, actually read</p>",
        "id": 205802415,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596466015
    },
    {
        "content": "<p>that makes sense to me, I think we're all in agreement about that ?</p>",
        "id": 205802428,
        "sender_full_name": "lqd",
        "timestamp": 1596466021
    },
    {
        "content": "<p>I had a look at how the fact generation code looks now, and it's still quite spaghetti</p>",
        "id": 205802439,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596466031
    },
    {
        "content": "<p>ok so maybe if <span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> is interested we should push a bit more on that</p>",
        "id": 205802447,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596466033
    },
    {
        "content": "<p>yeah, true, not sure if we had plans for how to clean that up</p>",
        "id": 205802473,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596466051
    },
    {
        "content": "<p>Albin had some IIRC</p>",
        "id": 205802483,
        "sender_full_name": "lqd",
        "timestamp": 1596466060
    },
    {
        "content": "<p>that reminds me that another imp't goal I think is to document some more of this stuff</p>",
        "id": 205802488,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596466062
    },
    {
        "content": "<p>I did, but I've forgotten everything</p>",
        "id": 205802493,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596466066
    },
    {
        "content": "<p>e.g., describing the input relations, and having some comments int he polonius book about what they are meant to represent</p>",
        "id": 205802503,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596466075
    },
    {
        "content": "<p>it bothers me a bit that e.g. we have this debate about \"where this fact should go, on entry or mid point\" etc</p>",
        "id": 205802558,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596466090
    },
    {
        "content": "<p>you had a nice chart at <a href=\"https://github.com/rust-lang/polonius/issues/117\">https://github.com/rust-lang/polonius/issues/117</a></p>",
        "id": 205802562,
        "sender_full_name": "lqd",
        "timestamp": 1596466096
    },
    {
        "content": "<p>I also think the spaghettiness comes from the fact that it's piggy-backing off of different parts of the code doing the same analysis in rust</p>",
        "id": 205802564,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596466097
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/sprint.20coordination.20Aug.203.20to.20Aug.205/near/205802447\">said</a>:</p>\n<blockquote>\n<p>ok so maybe if <span class=\"user-mention silent\" data-user-id=\"204115\">Albin Stjerna</span> is interested we should push a bit more on that</p>\n</blockquote>\n<p>I'm sorry, I'm not sure I followed what \"that\" is here?</p>",
        "id": 205802703,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596466175
    },
    {
        "content": "<p>(so I'll let you talk about move errors and will be back in 20-30 mins or so)</p>",
        "id": 205802724,
        "sender_full_name": "lqd",
        "timestamp": 1596466189
    },
    {
        "content": "<p>(<span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span>  not that it matters much since you don't need it right now, but Mark has indeed found the fix to our x.py check earlier issue, we might have hit a recent cargo bug, but we can work around it by using the regular <a href=\"http://crates.io\">crates.io</a> patching feature in the root Cargo.toml, so it's even easier than our previous way of doing it)</p>",
        "id": 205803309,
        "sender_full_name": "lqd",
        "timestamp": 1596466424
    },
    {
        "content": "<p>Ok, that's great!</p>",
        "id": 205803388,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596466445
    },
    {
        "content": "<p>I mean, we don't currently need the fix and I'm happy we found the bug</p>",
        "id": 205803413,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596466456
    },
    {
        "content": "<p>it does make my life easier rn :)</p>",
        "id": 205803487,
        "sender_full_name": "lqd",
        "timestamp": 1596466500
    },
    {
        "content": "<p>(bbl)</p>",
        "id": 205803525,
        "sender_full_name": "lqd",
        "timestamp": 1596466518
    },
    {
        "content": "<p>I will continue publishing the OOM-fix so y'all can take a look</p>",
        "id": 205812547,
        "sender_full_name": "lqd",
        "timestamp": 1596470563
    },
    {
        "content": "<p>Wow, this is going fast. I'm glad we're doing it regardless. I was thinking -- do you think we can schedule the next one? I'd like to start organizing my time in more \"sprint-like\" fashion, actually (e.g., chalk week, polonius week, etc).</p>",
        "id": 206003411,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596619799
    },
    {
        "content": "<p>once again my schedule is more easily manageable than both of yours for this, so I'd gladly do this again :)</p>",
        "id": 206003532,
        "sender_full_name": "lqd",
        "timestamp": 1596619873
    },
    {
        "content": "<p>what would be a reasonable period ? I'll assume we can't easily do polonius week ... every week, what did you have in mind, once every 3 months or something like that ?</p>",
        "id": 206004306,
        "sender_full_name": "lqd",
        "timestamp": 1596620616
    },
    {
        "content": "<p>I guess \"what frequency\" would have been the correct way to ask this question.</p>",
        "id": 206044980,
        "sender_full_name": "lqd",
        "timestamp": 1596645123
    },
    {
        "content": "<p>in any case I have to leave for a bit of the evening, so I wanted to thank you all for organizing and participating in the sprint, I'm enjoying it very much. Super fun and motivating as always.</p>",
        "id": 206045400,
        "sender_full_name": "lqd",
        "timestamp": 1596645307
    },
    {
        "content": "<p>Well, I don't know :)</p>",
        "id": 206046416,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596645770
    },
    {
        "content": "<p>but I was thinking maybe we can do something in september at least <em>this</em> time</p>",
        "id": 206046435,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596645777
    },
    {
        "content": "<p>every 3 months feels a bit too sparse to me</p>",
        "id": 206046447,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596645781
    },
    {
        "content": "<p>true; september could work, especially if I can prepare better so we have more, say, PRs to review, well-defined problems to discuss, etc. Using my time outside of the sprint to ensure your time inside the sprint is well spent</p>",
        "id": 206049358,
        "sender_full_name": "lqd",
        "timestamp": 1596647133
    },
    {
        "content": "<p>I'll try to keep working a bit in order to even remember what I was doing again, but sure I'd be up for another sprint!</p>",
        "id": 206114463,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596701618
    },
    {
        "content": "<p>I mean, I have to figure out where the move errors go wrong :)</p>",
        "id": 206114698,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596701811
    },
    {
        "content": "<p>nice, it went by way too fast</p>",
        "id": 206122118,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596707653
    },
    {
        "content": "<p>that said, I was checking off boxes in the hackmd and I realized we got quite a lot done</p>",
        "id": 206122133,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596707666
    },
    {
        "content": "<p>Enough that I'll have to go through the things I wasn't involved with to figure out what you actually did :)</p>",
        "id": 206122464,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596707964
    },
    {
        "content": "<p>do you two think we should temporarily disable the move errors computation in polonius until this new work is done ? if it's super close to being finished there'd be no need to do so ofc</p>",
        "id": 206122482,
        "sender_full_name": "lqd",
        "timestamp": 1596707995
    },
    {
        "content": "<p>Hmm. I think it makes sense given that we don't know what's broken and why</p>",
        "id": 206122725,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596708181
    },
    {
        "content": "<p>So in the interest of having only something working in the repository, maybe disabling it would be a good idea, and it would also help with the OOMs</p>",
        "id": 206122753,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596708215
    },
    {
        "content": "<p>Which I guess would also accelerate your work on the other parts?</p>",
        "id": 206122775,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1596708241
    },
    {
        "content": "<p>it went by too fast for sure :) but it's an interesting process, that is, a seemingly nice way to batch up your time Niko (for polonius, chalk, and other projects) rather than cut into less useful 30mins bits weekly. In the meantime we can still work on it, that can help to have more work available in your next sprint, whether we can participate at the same time or not (with our TZ differences, there can still be overlap in late afternoon and evenings). Even if we weren't able to make much progress in-between sprints, there'd still be things to do for you during the sprint. That would allow it to be more frequent, like monthly, and so we could still have steady progress overall</p>",
        "id": 206122986,
        "sender_full_name": "lqd",
        "timestamp": 1596708403
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"204115\">Albin Stjerna</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/sprint.20coordination.20Aug.203.20to.20Aug.205/near/206122775\">said</a>:</p>\n<blockquote>\n<p>Which I guess would also accelerate your work on the other parts?</p>\n</blockquote>\n<p>it could, but I can disable them locally whenever I need to do anything</p>",
        "id": 206123368,
        "sender_full_name": "lqd",
        "timestamp": 1596708739
    }
]