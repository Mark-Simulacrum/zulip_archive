[
    {
        "content": "<p>I haven't been around much lately, but I had some down time around the holidays and spent some of it reading large portions of both chalk and polonius. Polonius was a bit more approachable for me, and seems to have fewer contributors even during the sprints. I know the project currently in a fallow period, but I'm wondering if there's any point in filing PRs to optimize datafrog/polonius. Perhaps to be reviewed during the next sprint?</p>\n<p>My impression from my quick review is that the rulesets will change quite a bit before they are production ready (perhaps this is more true for the initialization/liveness analysis, which seems pretty slow, than for the borrow checker). With that in mind, It would be better to focus on code that is totally encapsulated and are very likely to be hot even if the ruleset changes significantly. <code>Relation::merge</code> is a good example, and I have a few other spots in mind.</p>\n<p>That said, I don't think it's the best use of WG-polonius time to be reviewing unsafe code and reproducing micro-benchmarks. Perhaps there's other issues I could work on asynchronously? For example, I think I could remove<code>Location::All</code>, although I suspect it would be a lot harder for me than for members of this WG. Improving the datafrog documentation and experimenting with <code>O(1)</code> relations (mainly for <code>cfg_edge</code>) also came to mind.</p>",
        "id": 221160364,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1609270452
    },
    {
        "content": "<p>hey Dylan :)</p>",
        "id": 221160428,
        "sender_full_name": "lqd",
        "timestamp": 1609270521
    },
    {
        "content": "<p>Hey Rémy</p>",
        "id": 221160515,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1609270573
    },
    {
        "content": "<p>the rulesets will likely change indeed, not all the upfront design work, nor integration with chalk has been worked out yet</p>",
        "id": 221160530,
        "sender_full_name": "lqd",
        "timestamp": 1609270591
    },
    {
        "content": "<p>my personal hunch is I feel it's unlikely we can get datalog production ready</p>",
        "id": 221160560,
        "sender_full_name": "lqd",
        "timestamp": 1609270622
    },
    {
        "content": "<p>but who knows</p>",
        "id": 221160568,
        "sender_full_name": "lqd",
        "timestamp": 1609270626
    },
    {
        "content": "<p>your experience with rustc's dataflow could say that looking at move/init it's unlikely as well</p>",
        "id": 221160643,
        "sender_full_name": "lqd",
        "timestamp": 1609270689
    },
    {
        "content": "<p>Got it. I meant to ask, was there an initial prototype that just used Souffle?</p>",
        "id": 221160649,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1609270692
    },
    {
        "content": "<p>probably not a prototype per se</p>",
        "id": 221160679,
        "sender_full_name": "lqd",
        "timestamp": 1609270718
    },
    {
        "content": "<p>however</p>",
        "id": 221160683,
        "sender_full_name": "lqd",
        "timestamp": 1609270721
    },
    {
        "content": "<p>the rules themselves were definitely tried there</p>",
        "id": 221160696,
        "sender_full_name": "lqd",
        "timestamp": 1609270738
    },
    {
        "content": "<p>and there was a timely/differential dataflow prototype</p>",
        "id": 221160713,
        "sender_full_name": "lqd",
        "timestamp": 1609270756
    },
    {
        "content": "<p>you couldn't use the soufflé rules inside rustc, only their tools were used IIRC</p>",
        "id": 221160742,
        "sender_full_name": "lqd",
        "timestamp": 1609270798
    },
    {
        "content": "<p>at least I never did rust + soufflé integration</p>",
        "id": 221160796,
        "sender_full_name": "lqd",
        "timestamp": 1609270812
    },
    {
        "content": "<p>I seem to recall (that was a couple years ago) there were some caveats where some of the things allowed in DD/datafrog were not acceptable datalog, but there probably was a workaround</p>",
        "id": 221160857,
        "sender_full_name": "lqd",
        "timestamp": 1609270876
    },
    {
        "content": "<p>I was a bit surprised that development seemed to jump right to differential dataflow and then to datafrog.</p>",
        "id": 221160858,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1609270878
    },
    {
        "content": "<p>I was wondering if I had missed a step in the process</p>",
        "id": 221160865,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1609270901
    },
    {
        "content": "<p>IIRC there were some other repos from Niko</p>",
        "id": 221160915,
        "sender_full_name": "lqd",
        "timestamp": 1609270924
    },
    {
        "content": "<p>but since that was part of NLL back then rather than polonius per se</p>",
        "id": 221160930,
        "sender_full_name": "lqd",
        "timestamp": 1609270945
    },
    {
        "content": "<p>it's hard for me to say</p>",
        "id": 221160938,
        "sender_full_name": "lqd",
        "timestamp": 1609270951
    },
    {
        "content": "<p>I didn't see a triejoin/leapjoin equivalent in Souffle, so I thought maybe that was it. Other than that, they're both semi-naive solvers AFAICT.</p>",
        "id": 221160979,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1609270997
    },
    {
        "content": "<p>right</p>",
        "id": 221160994,
        "sender_full_name": "lqd",
        "timestamp": 1609271009
    },
    {
        "content": "<p>they have richer data structures and parallelism</p>",
        "id": 221161004,
        "sender_full_name": "lqd",
        "timestamp": 1609271016
    },
    {
        "content": "<p>Okay, but maybe it's better for me to not work on datafrog so much?</p>",
        "id": 221161023,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1609271029
    },
    {
        "content": "<p>as for your other questions, whether it's worth our time to review microbenchmarks: the work you did is valuable and I'm personally very thankful</p>",
        "id": 221161074,
        "sender_full_name": "lqd",
        "timestamp": 1609271046
    },
    {
        "content": "<p>it's not wasted work at all</p>",
        "id": 221161087,
        "sender_full_name": "lqd",
        "timestamp": 1609271061
    },
    {
        "content": "<p>whether it's the best use of your time is another interesting question</p>",
        "id": 221161108,
        "sender_full_name": "lqd",
        "timestamp": 1609271083
    },
    {
        "content": "<p>there are some interesting things to do in datafrog for sure</p>",
        "id": 221161121,
        "sender_full_name": "lqd",
        "timestamp": 1609271105
    },
    {
        "content": "<p>especially wrt to data representation, possibly parallelism (the semi naive evaluation is trivially parallelisable but that won't probably work super well :) probabilistic data structures</p>",
        "id": 221161197,
        "sender_full_name": "lqd",
        "timestamp": 1609271164
    },
    {
        "content": "<p>(eg for the latter point some relations are only used in antijoins)</p>",
        "id": 221161229,
        "sender_full_name": "lqd",
        "timestamp": 1609271197
    },
    {
        "content": "<p>for the 1st, more compact data would also help, but since datafrog is super tied to binary search and sorting and all, it's not super clear how to tackle that at first</p>",
        "id": 221161290,
        "sender_full_name": "lqd",
        "timestamp": 1609271265
    },
    {
        "content": "<p>or ways to limit copying in dataflow-like situations, you know all this</p>",
        "id": 221161369,
        "sender_full_name": "lqd",
        "timestamp": 1609271322
    },
    {
        "content": "<p>Yeah, the <code>O(1)</code> relation change is going would be pretty invasive, but I think it's worth doing if we're committed to datafrog as the solver going forward, and I think I could make it happen.</p>",
        "id": 221161413,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1609271376
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Optimization.20PRs/near/221160560\">said</a>:</p>\n<blockquote>\n<p>my personal hunch is I feel it's unlikely we can get datalog production ready</p>\n</blockquote>\n<p>But this comment makes it feel like that's maybe not the case?</p>",
        "id": 221161428,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1609271397
    },
    {
        "content": "<p>that's my own feeling, I'm not sure it's shared by others</p>",
        "id": 221161488,
        "sender_full_name": "lqd",
        "timestamp": 1609271422
    },
    {
        "content": "<p>it's not going away that's for sure, whether it'll be the only way to do the analyses is another idea</p>",
        "id": 221161514,
        "sender_full_name": "lqd",
        "timestamp": 1609271444
    },
    {
        "content": "<p>like, if we need to run the rules on crater, and some of the huge functions out there, all this would still be worthwhile</p>",
        "id": 221161579,
        "sender_full_name": "lqd",
        "timestamp": 1609271509
    },
    {
        "content": "<p>whether it'd be improving polonius itself, or the rules, or datafrog</p>",
        "id": 221161721,
        "sender_full_name": "lqd",
        "timestamp": 1609271608
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Optimization.20PRs/near/221161488\">said</a>:</p>\n<blockquote>\n<p>that's my own feeling, I'm not sure it's shared by others</p>\n</blockquote>\n<p>Is the problem with datafrog the frontend? You want something that accepts actual datalog rules so you can iterate faster?</p>",
        "id": 221161849,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1609271722
    },
    {
        "content": "<p>it's also true that reviews of datafrog would probably be tougher</p>",
        "id": 221161855,
        "sender_full_name": "lqd",
        "timestamp": 1609271725
    },
    {
        "content": "<p>not especially to iterate faster, I have a datafrog generator to help with that <a href=\"https://github.com/lqd/datapond/\">https://github.com/lqd/datapond/</a>, and Vytautas has revamped it completely for \"rustql\" (I forgot the new name of the project) with a proc-macro and everything</p>",
        "id": 221161981,
        "sender_full_name": "lqd",
        "timestamp": 1609271807
    },
    {
        "content": "<p>Is it architectural (i.e. you want something that uses a different strategy or defaults to <code>BTree</code>s or works out-of-memory)? Or just general code quality?</p>",
        "id": 221162061,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1609271866
    },
    {
        "content": "<p>just to be more efficient than allocations in a hot loop, for the cases when it can be avoided; say reachability queries, or TC over dynamic graphs</p>",
        "id": 221162066,
        "sender_full_name": "lqd",
        "timestamp": 1609271868
    },
    {
        "content": "<p>a different strategy could be interesting to avoid some of the problems of bottom-up evaluation, but I've been trying for a while to transform the rules to demand data like a top-down evaluation would</p>",
        "id": 221162246,
        "sender_full_name": "lqd",
        "timestamp": 1609271960
    },
    {
        "content": "<p>I know the literature always mention scalability to huge codebases, but I don't remember off hand what the actual numbers are, it seems like they're comparing \"queries that resolve overnight\" to \"a few seconds\"</p>",
        "id": 221162356,
        "sender_full_name": "lqd",
        "timestamp": 1609272022
    },
    {
        "content": "<p>a few seconds is orders of magnitude too slow</p>",
        "id": 221162373,
        "sender_full_name": "lqd",
        "timestamp": 1609272036
    },
    {
        "content": "<p>I'm not sure what is attainable :)</p>",
        "id": 221162427,
        "sender_full_name": "lqd",
        "timestamp": 1609272084
    },
    {
        "content": "<p>but it's likely that a kind of \"graded borrow-checking\" would be required, that is, there'd need to be a strong focus on the lowest grades, like the location-insensitive pass</p>",
        "id": 221162516,
        "sender_full_name": "lqd",
        "timestamp": 1609272131
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Optimization.20PRs/near/221162246\">said</a>:</p>\n<blockquote>\n<p>a different strategy could be interesting to avoid some of the problems of bottom-up evaluation, but I've been trying for a while to transform the rules to demand data like a top-down evaluation would</p>\n</blockquote>\n<p>I'm <em>way</em> outside my area of expertise here, but bottom-up seemed like the correct paradigm to me since we want to find <em>all</em> errors in the function. It seemed like top-down (and optimizations like magic-set) are more for queries with one or more constants in the head.</p>",
        "id": 221162521,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1609272137
    },
    {
        "content": "<p>both should find the same errors I feel, but you could also say that we're checking specific loans and origins</p>",
        "id": 221162675,
        "sender_full_name": "lqd",
        "timestamp": 1609272250
    },
    {
        "content": "<p>that is only the loans which are invalidated, and the origins through which they flow need tracking</p>",
        "id": 221162702,
        "sender_full_name": "lqd",
        "timestamp": 1609272278
    },
    {
        "content": "<p>My long-term ideas were more in line with your first comment, using specialized strategies for TC and different storage for dense relations.</p>",
        "id": 221162726,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1609272302
    },
    {
        "content": "<p>location-insensitivity seems super important to me, and my prototypes on this analysis, without datafrog, were promising</p>",
        "id": 221162770,
        "sender_full_name": "lqd",
        "timestamp": 1609272343
    },
    {
        "content": "<p>right</p>",
        "id": 221162784,
        "sender_full_name": "lqd",
        "timestamp": 1609272352
    },
    {
        "content": "<p>I haven't read the location-insensitive or optimized rules at all, just the naive ones.</p>",
        "id": 221162862,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1609272392
    },
    {
        "content": "<p>the location-insensitive ones are super simple thankfully</p>",
        "id": 221162883,
        "sender_full_name": "lqd",
        "timestamp": 1609272416
    },
    {
        "content": "<p>but it's ultimately simple reachability queries</p>",
        "id": 221162897,
        "sender_full_name": "lqd",
        "timestamp": 1609272426
    },
    {
        "content": "<p>which to me doesn't map nicely to datalog for efficiency ^^</p>",
        "id": 221162913,
        "sender_full_name": "lqd",
        "timestamp": 1609272448
    },
    {
        "content": "<p>but it does work :)</p>",
        "id": 221162927,
        "sender_full_name": "lqd",
        "timestamp": 1609272462
    },
    {
        "content": "<p>I don't know if I was really helpful answering your questions, but gotta go eat dinner</p>",
        "id": 221163007,
        "sender_full_name": "lqd",
        "timestamp": 1609272516
    },
    {
        "content": "<p>Yeah, the \"ideological purity\" of Horn clauses isn't as appealing when you need to implement a custom solver for each one</p>",
        "id": 221163018,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1609272528
    },
    {
        "content": "<p>No worries, thanks for chatting</p>",
        "id": 221163116,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1609272609
    },
    {
        "content": "<p>specialized relations would be interesting for sure, as well as cleverness in the rules, or fact generation</p>",
        "id": 221163119,
        "sender_full_name": "lqd",
        "timestamp": 1609272613
    },
    {
        "content": "<p>e.g IIRC we duplicate MIR locations into 2 polonius points, I think, to easily order effects</p>",
        "id": 221163151,
        "sender_full_name": "lqd",
        "timestamp": 1609272644
    },
    {
        "content": "<p>I have a few more datafrog micro-optimizations that I'll post tonight since they're so easy and have pretty big wins, then  I'll spend some time trying to grok the other rulesets. Seems like <span class=\"user-mention silent\" data-user-id=\"116155\">Jake Goulding</span> might be able to do a preliminary review.</p>",
        "id": 221163208,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1609272699
    },
    {
        "content": "<p>it's possible that with more clever rules, that wouldn't be needed at all, and severely limit the size of the cfg which is would be helpful on the whole computation</p>",
        "id": 221163213,
        "sender_full_name": "lqd",
        "timestamp": 1609272703
    },
    {
        "content": "<p>I have elsewhere prototypes about CFG compression and the likes</p>",
        "id": 221163272,
        "sender_full_name": "lqd",
        "timestamp": 1609272735
    },
    {
        "content": "<p>I forgot to say one thing: we were more focused on completeness and correctness at first (and still are ofc)</p>",
        "id": 221163295,
        "sender_full_name": "lqd",
        "timestamp": 1609272758
    },
    {
        "content": "<p>to be sure that the final rules would be good and bug-free (and that they aren't, say, too lenient in what code they accept) before focusing on efficiency</p>",
        "id": 221163345,
        "sender_full_name": "lqd",
        "timestamp": 1609272818
    },
    {
        "content": "<p>that ties into what you were saying about whether the rules would change before optimizing</p>",
        "id": 221163420,
        "sender_full_name": "lqd",
        "timestamp": 1609272854
    },
    {
        "content": "<p>we're not there yet, in some sense we're not far, but there definitely are unknown unknowns :)</p>",
        "id": 221163467,
        "sender_full_name": "lqd",
        "timestamp": 1609272906
    },
    {
        "content": "<p>Well lemme know if you think of any good discrete tasks. Otherwise I have some ideas I want to explore. And go eat XD.</p>",
        "id": 221163724,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1609273138
    },
    {
        "content": "<p>it's also very likely that Niko would have ideas on what cool things you could do :)</p>",
        "id": 221163765,
        "sender_full_name": "lqd",
        "timestamp": 1609273193
    },
    {
        "content": "<p>alright, cheers, bbl</p>",
        "id": 221163818,
        "sender_full_name": "lqd",
        "timestamp": 1609273204
    },
    {
        "content": "<p>(also: thanks so much)</p>",
        "id": 221163848,
        "sender_full_name": "lqd",
        "timestamp": 1609273236
    },
    {
        "content": "<p>so yeah, datalog is not going away, and work on datafrog could be more stable than the rules per se (although both will be ultimately needed)</p>",
        "id": 221166923,
        "sender_full_name": "lqd",
        "timestamp": 1609275876
    },
    {
        "content": "<p>(also: many thanks to <span class=\"user-mention silent\" data-user-id=\"116155\">Jake Goulding</span>  for the early reviews on that PR :)</p>",
        "id": 221169007,
        "sender_full_name": "lqd",
        "timestamp": 1609277415
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span> Thank you for working on this. I'm excited to see more activity on polonius.</p>",
        "id": 221194902,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1609312323
    },
    {
        "content": "<p>Including performance.</p>",
        "id": 221194920,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1609312332
    },
    {
        "content": "<p>I've used it on nightly a few times, and I'm always impressed by what it can handle and how comfortable it feels.</p>",
        "id": 221194957,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1609312425
    },
    {
        "content": "<p>hopefully it wasn't one of those cases where the parts that are not done yet missed actual errors <span aria-label=\"sweat\" class=\"emoji emoji-1f613\" role=\"img\" title=\"sweat\">:sweat:</span> (we really should add the \"this is an unfinished feature\" warning like const generics had)</p>",
        "id": 221198739,
        "sender_full_name": "lqd",
        "timestamp": 1609317940
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Optimization.20PRs/near/221161981\">said</a>:</p>\n<blockquote>\n<p>not especially to iterate faster, I have a datafrog generator to help with that <a href=\"https://github.com/lqd/datapond/\">https://github.com/lqd/datapond/</a>, and Vytautas has revamped it completely for \"rustql\" (I forgot the new name of the project) with a proc-macro and everything</p>\n</blockquote>\n<p>It was reborn as <a href=\"https://github.com/rust-corpus/qrates/\">Qrates</a>. Let me know if you have any questions about what is implemented.</p>",
        "id": 221291429,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1609422896
    },
    {
        "content": "<p>I wrote up some of my thoughts across a few thread, but I'm worried that I've been focused on the wrong problem. There's no point in optimizing things if we can't express these rules in datalog, and <a href=\"https://smallcultfollowing.com/babysteps/blog/2019/01/21/hereditary-harrop-region-constraints/\">https://smallcultfollowing.com/babysteps/blog/2019/01/21/hereditary-harrop-region-constraints/</a> makes it seem like that question might not be settled. Has there been any progress on that front in the intervening years?</p>",
        "id": 221366800,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1609531959
    },
    {
        "content": "<p>there has been some</p>",
        "id": 221373953,
        "sender_full_name": "lqd",
        "timestamp": 1609542973
    },
    {
        "content": "<p>the tentative plan (which is mostly inside niko's head, and possibly parts of matthew's) is to have chalk and polonius cooperate on that problem</p>",
        "id": 221373975,
        "sender_full_name": "lqd",
        "timestamp": 1609543038
    },
    {
        "content": "<p>&lt;handwave&gt;like chalk would see the higher-order constraints and spit out first-order constraints for polonius as-is to solve&lt;/handwave&gt;</p>",
        "id": 221374024,
        "sender_full_name": "lqd",
        "timestamp": 1609543102
    },
    {
        "content": "<p>there has been some related work in chalk, I recall seeing branches from niko on that subject, but that's about all I remember</p>",
        "id": 221374107,
        "sender_full_name": "lqd",
        "timestamp": 1609543257
    },
    {
        "content": "<p>that being said, chalk is more active and with more contributors, and has had very little perf work done, that may be a better use of your time and skills</p>",
        "id": 221374267,
        "sender_full_name": "lqd",
        "timestamp": 1609543534
    },
    {
        "content": "<p>it would not be wasted at all</p>",
        "id": 221374331,
        "sender_full_name": "lqd",
        "timestamp": 1609543587
    },
    {
        "content": "<p>Understood. I'm still drawn to polonius. I guess because it seems a bit narrower in scope than chalk. I'll keep trying to gain some intuition for the borrow checking rules. Maybe I'll be useful during the next sprint.</p>",
        "id": 221374712,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1609544240
    }
]