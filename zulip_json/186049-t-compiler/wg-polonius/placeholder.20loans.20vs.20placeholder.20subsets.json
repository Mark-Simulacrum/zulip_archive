[
    {
        "content": "<p>does anyone remember if we explained somewhere why we felt placeholder loans were the way to go for subset errors, rather than say solution number 2 (tracking subsets of placeholder origins) which seems NLL-like (and solution 1 required the full subset TC which was not always applicable) ? was it because it felt like a natural representation ?</p>",
        "id": 189847207,
        "sender_full_name": "lqd",
        "timestamp": 1583449758
    },
    {
        "content": "<p>they don't work as-is in the optimized variant while I feel we expected they would (but I haven't investigated why tbh, they may be adapted to do so) while I've prototyped the other solution there and it seems to work in our limited tests (but I haven't tried in rustc's tests)</p>",
        "id": 189847246,
        "sender_full_name": "lqd",
        "timestamp": 1583449794
    },
    {
        "content": "<p>(and have also prototyped a location-insensitive variant like I mentioned yesterday, same similar ok-ish behaviour which needs full testing)</p>",
        "id": 189847348,
        "sender_full_name": "lqd",
        "timestamp": 1583449859
    },
    {
        "content": "<p>so before spending more time in that direction, I was wondering whether those 2 solutions maybe had obvious flaws/strengths which made us choose one over the other ?</p>",
        "id": 189847388,
        "sender_full_name": "lqd",
        "timestamp": 1583449899
    },
    {
        "content": "<p>that's the question I mentioned yesterday <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span> :) (nothing urgent)</p>",
        "id": 189847544,
        "sender_full_name": "lqd",
        "timestamp": 1583450019
    },
    {
        "content": "<p>(note: I went with it anyway, and have reimplemented subset errors, in the LocationInsensitive/Hybrid and DatafrogOpt variants, and prototyped for fun the same kind of filtering to avoid tracking origins which can't cause subset errors, etc -- \"for fun\" because it can't exactly be applied to the other thing I was working on which was block-based transport)</p>",
        "id": 190533799,
        "sender_full_name": "lqd",
        "timestamp": 1584121512
    },
    {
        "content": "<p>I think I leaned towards placeholder loans, <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span>, because I wanted origins to be \"equivalent\" to some set of loans. This makes the connection to a type system like oxide more apparent. But I do remember that indeed the formulation of rules that tracked relations between origins was somewhat simpler.</p>",
        "id": 190914381,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584481236
    },
    {
        "content": "<p>it also avoids the problem of things that exist everywhere in the cfg <em>and</em> are propagated through it (even though it doesn't really come up in the rules but as duplicate derived facts which are then de-duped)</p>",
        "id": 190915326,
        "sender_full_name": "lqd",
        "timestamp": 1584481853
    },
    {
        "content": "<p>that being said, I was working on the OOMs caused by the Locations::All \"hack which is not a hack\", and for that I was thinking about representing these facts in a <code>outlives_everywhere</code> relation, and modify the <code>subset</code> and <code>requires</code> (\"contains\") rules to take those new facts into account in their TC</p>",
        "id": 190915682,
        "sender_full_name": "lqd",
        "timestamp": 1584482037
    },
    {
        "content": "<p>(to avoid materializing the exact same facts as <code>outlives</code> tuples over the whole cfg; this would only materialize where origins/loans would need to flow into another origin)</p>",
        "id": 190916043,
        "sender_full_name": "lqd",
        "timestamp": 1584482191
    },
    {
        "content": "<p>that <em>should</em> work but rn it'll just move the OOMs from rustc fact gen to polonius move errors on these big tests</p>",
        "id": 190916240,
        "sender_full_name": "lqd",
        "timestamp": 1584482288
    },
    {
        "content": "<p>(which is more of a datafrog problem than a problem of move errors per se -- it's not made for gen-kill/bitvector problems rn)</p>",
        "id": 190916490,
        "sender_full_name": "lqd",
        "timestamp": 1584482417
    }
]