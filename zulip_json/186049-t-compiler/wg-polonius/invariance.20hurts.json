[
    {
        "content": "<p>Here is an example that I'd like to revisit at some point:</p>\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=c6312219d23da40a3a0114e8b900407e\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=c6312219d23da40a3a0114e8b900407e</a></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">cell</span>::<span class=\"n\">RefCell</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">RefCell</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"fm\">vec!</span><span class=\"p\">[]);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">borrow_mut</span><span class=\"p\">().</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">p</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>this works on stable, does polonius have trouble with it?</p>",
        "id": 277972776,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649217350
    },
    {
        "content": "<p>it should also compile, although the plan/hope was that we didnâ€™t have to do anything special about variance just yet, if ever.</p>\n<p>but I guess it can depend on what you mean by \"hurts\" and \"have trouble\" ? Could that be about compatibility like possible errors in code accepted today, or maybe as in \"this case is expensive or slow\", or something else ?</p>",
        "id": 277974799,
        "sender_full_name": "lqd",
        "timestamp": 1649219853
    },
    {
        "content": "<p>I meant 'does not compile'</p>",
        "id": 277977854,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649223854
    },
    {
        "content": "<p>the (potential) problem is that the type of <code>a</code> must be <code>RefCell&lt;Vec&lt;&amp;L i32&gt;&gt;</code> where <code>L</code> is considered a borrow of <code>p</code></p>",
        "id": 277977868,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649223894
    },
    {
        "content": "<p>i.e., because of the <code>RefCell</code>, you are not allowed to \"add\" borrows into the vec later as things are pushed, you have to \"backpropagate\" that constraint</p>",
        "id": 277977889,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649223920
    },
    {
        "content": "<p>I can't remember well enough how we formulated polonius around this but it's been a concern of mine in the past</p>",
        "id": 277977892,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649223933
    },
    {
        "content": "<p>though I think the idea may have been that, yes, the loan is in the vector, but because the borrow hasn't actually <em>happened</em> yet, we don't care</p>",
        "id": 277977903,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649223954
    },
    {
        "content": "<p>I think that works but it's worth noting, because it means loans have an identity that is distinct from the path they are borrowing</p>",
        "id": 277977957,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649223997
    },
    {
        "content": "<p>polonius does not see errors there (but you never know if that's because things are subtly broken or not)</p>\n<p>it's worth noting indeed, esp with my reachability experiments, and the tentative discussion of possibly removing loans altogether</p>",
        "id": 277983293,
        "sender_full_name": "lqd",
        "timestamp": 1649229182
    }
]