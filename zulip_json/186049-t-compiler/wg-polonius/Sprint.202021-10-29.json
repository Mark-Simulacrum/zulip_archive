[
    {
        "content": "<p>Hey everyone <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 259527357,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635515747
    },
    {
        "content": "<p>Are y'all alright?</p>",
        "id": 259527462,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635515777
    },
    {
        "content": "<p>I think so. Was there DST in Germany?</p>",
        "id": 259527621,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1635515850
    },
    {
        "content": "<p>For me, it's starting to get a bit busy organizing everything for the new job and moving, but I at least managed to clean up the liveness-based version of 47680-fix rules a bit before just now</p>",
        "id": 259527631,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635515853
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"118594\">Dylan MacKenzie (ecstatic-morse)</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Sprint.202021-10-29/near/259527621\">said</a>:</p>\n<blockquote>\n<p>I think so. Was there DST in Germany?</p>\n</blockquote>\n<p>We're switching this week-end</p>",
        "id": 259527819,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635515912
    },
    {
        "content": "<p>actually, I hadn't thought about that at all 'cause it's normal for me, but are our regularly scheduled not moving with that? <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 259527990,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635515983
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"337115\">Domenic Quirl</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Sprint.202021-10-29/near/259527631\">said</a>:</p>\n<blockquote>\n<p>For me, it's starting to get a bit busy organizing everything for the new job and moving, but I at least managed to clean up the liveness-based version of 47680-fix rules a bit before just now</p>\n</blockquote>\n<p>The latest ones are here, right? <a href=\"https://github.com/domenicquirl/polonius.next/blob/liveness-subsets/src/polonius.dl\">https://github.com/domenicquirl/polonius.next/blob/liveness-subsets/src/polonius.dl</a></p>",
        "id": 259528166,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1635516025
    },
    {
        "content": "<p>Looks good, yeah <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 259528226,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635516053
    },
    {
        "content": "<p>In case you looked before, there were no logical changes regarding how it works. Just removing some redundant rules</p>",
        "id": 259528345,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635516100
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"337115\">Domenic Quirl</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Sprint.202021-10-29/near/259527990\">said</a>:</p>\n<blockquote>\n<p>actually, I hadn't thought about that at all 'cause it's normal for me, but are our regularly scheduled not moving with that? <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n</blockquote>\n<p>I'm not sure. It's whatever works best for people I think.</p>",
        "id": 259528366,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1635516108
    },
    {
        "content": "<p>Anyways, things to do for today</p>",
        "id": 259528440,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635516124
    },
    {
        "content": "<ul>\n<li>PRs (not me). We've accumulated quite some of em</li>\n<li>I'd like to discuss what (amount of) liveness info, if any, could be a reasonable addition and maybe also what we would <em>not</em> want to need</li>\n<li>Then we can talk about our ideas for 47680 (I'd expect Niko to have thought about that some more as well, maybe, and have their own ideas)</li>\n<li>Fact generation? (tbh I don't have that much of an idea where this is at right now, especially with lqd missing today)</li>\n</ul>",
        "id": 259528485,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635516146
    },
    {
        "content": "<p>hey folks</p>",
        "id": 259528776,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635516270
    },
    {
        "content": "<p>So, I am not able to join a chat at this time</p>",
        "id": 259529044,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635516366
    },
    {
        "content": "<p>But</p>",
        "id": 259529048,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635516367
    },
    {
        "content": "<p>I wanted to review <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span>'s PR</p>",
        "id": 259529058,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635516374
    },
    {
        "content": "<p>I also have been thinking about the problem we were discussing lsat time</p>",
        "id": 259529073,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635516382
    },
    {
        "content": "<p>I've roughly come to the conclusion that -- at least for now -- the right thing is to add some notion of liveness into the system.</p>",
        "id": 259529115,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635516402
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Sprint.202021-10-29/near/259529044\">said</a>:</p>\n<blockquote>\n<p>So, I am not able to join a chat at this time</p>\n</blockquote>\n<p>I could a bit later prob</p>",
        "id": 259529188,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635516432
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Sprint.202021-10-29/near/259529115\">said</a>:</p>\n<blockquote>\n<p>I've roughly come to the conclusion that -- at least for now -- the right thing is to add some notion of liveness into the system.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"118594\">@Dylan MacKenzie (ecstatic-morse)</span> what is your current opinion on liveness vs. the remembering of invalidation origins you investigated? I know lqd and I were both leaning in favour of liveness, so I'm quite happy with this ^^</p>",
        "id": 259529430,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635516543
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span>'s PR isn't usable quite yet. It doesn't correctly generate invalidations. I could try to fix it up today. Most of the PRs I opened were intended to help fact-gen get completed.</p>",
        "id": 259529444,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1635516548
    },
    {
        "content": "<p>well</p>",
        "id": 259529474,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635516562
    },
    {
        "content": "<p>maybe a good start is that iI should just look at the PRs that exist?</p>",
        "id": 259529490,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635516572
    },
    {
        "content": "<p>I have no idea :)</p>",
        "id": 259529496,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635516575
    },
    {
        "content": "<p>I'm way behind on notifications and the like</p>",
        "id": 259529507,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635516579
    },
    {
        "content": "<p>probably</p>",
        "id": 259529522,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635516587
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"337115\">Domenic Quirl</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Sprint.202021-10-29/near/259529430\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Sprint.202021-10-29/near/259529115\">said</a>:</p>\n<blockquote>\n<p>I've roughly come to the conclusion that -- at least for now -- the right thing is to add some notion of liveness into the system.</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"118594\">Dylan MacKenzie (ecstatic-morse)</span> what is your current opinion on liveness vs. the remembering of invalidation origins you investigated? I know lqd and I were both leaning in favour of liveness, so I'm quite happy with this ^^</p>\n</blockquote>\n<p>I'll say a bit more about this, since I was pretty brusque.</p>",
        "id": 259529670,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1635516627
    },
    {
        "content": "<p>most of Dylan's should be ready? And my rules one is just things we discussed on call last spring</p>",
        "id": 259529686,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635516632
    },
    {
        "content": "<p>ok looking now</p>",
        "id": 259529822,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635516682
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Sprint.202021-10-29/near/259529115\">said</a>:</p>\n<blockquote>\n<p>I've roughly come to the conclusion that -- at least for now -- the right thing is to add some notion of liveness into the system.</p>\n</blockquote>\n<p>also <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I assume you also haven't seen <a href=\"https://github.com/domenicquirl/polonius.next/blob/liveness-subsets/src/polonius.dl\">https://github.com/domenicquirl/polonius.next/blob/liveness-subsets/src/polonius.dl</a> then?</p>",
        "id": 259529884,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635516714
    },
    {
        "content": "<p>no:)</p>",
        "id": 259529995,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635516746
    },
    {
        "content": "<p>what is it?</p>",
        "id": 259530085,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635516779
    },
    {
        "content": "<p>All I described was a way to make certain invalidations not interact with certain origins. When I started this, I thought there was something fundamental about the invalidation of a reborrow <code>&amp;mut *temp</code> not interacting with the access of <code>temp</code>.</p>",
        "id": 259530089,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1635516782
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Sprint.202021-10-29/near/259530085\">said</a>:</p>\n<blockquote>\n<p>what is it?</p>\n</blockquote>\n<p>it's my attempt to solve our issue-47860 problem with some liveness instead of tracking derivation paths for subsets. It re-introduces the notion of killing variables and their associated origins when they stop being live</p>",
        "id": 259530267,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635516856
    },
    {
        "content": "<p>But that seems pretty suspect to me. I think it's unsound, although I don't have a counterexample yet.</p>",
        "id": 259530402,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1635516917
    },
    {
        "content": "<p>I love how we all seem to have this uncanny feeling about it, all while not actually being able to pinpoint an issue <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 259530530,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635516968
    },
    {
        "content": "<p>to be clear, the feeling is about liveness, or about whatever Dylan was proposing?</p>",
        "id": 259530581,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635516993
    },
    {
        "content": "<p>well, with the exception of reliance on rustc, maybe, which was a very valid point by <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span></p>",
        "id": 259530582,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635516993
    },
    {
        "content": "<p>Or something else :)</p>",
        "id": 259530584,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635516995
    },
    {
        "content": "<p>About my thing.</p>",
        "id": 259530651,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1635517025
    },
    {
        "content": "<p>ok</p>",
        "id": 259530719,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635517054
    },
    {
        "content": "<p>I've been thinking about the liveness a bit</p>",
        "id": 259530731,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635517060
    },
    {
        "content": "<p>one way that I thought about it was:</p>",
        "id": 259530742,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635517064
    },
    {
        "content": "<p>(idk if it's fair to call that a proposal, my intention was not to imply that anyone wants to do something stupid here. or indeed that this even was stupid)</p>",
        "id": 259530743,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635517064
    },
    {
        "content": "<p>We should talk about Domenic's though. I think with fact-gen we'll be able to prove my idea unsound pretty easily.</p>",
        "id": 259530820,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1635517085
    },
    {
        "content": "<p>let me talk a look at Domenic's branch</p>",
        "id": 259530937,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635517149
    },
    {
        "content": "<p>I just merged a few PRs that seemed good</p>",
        "id": 259530947,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635517154
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"337115\">Domenic Quirl</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Sprint.202021-10-29/near/259529884\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Sprint.202021-10-29/near/259529115\">said</a>:</p>\n<blockquote>\n<p>I've roughly come to the conclusion that -- at least for now -- the right thing is to add some notion of liveness into the system.</p>\n</blockquote>\n<p>also <span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> I assume you also haven't seen <a href=\"https://github.com/domenicquirl/polonius.next/blob/liveness-subsets/src/polonius.dl\">https://github.com/domenicquirl/polonius.next/blob/liveness-subsets/src/polonius.dl</a> then?</p>\n</blockquote>\n<p>is this the right link? I don't see liveness in ehre?</p>",
        "id": 259531029,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635517192
    },
    {
        "content": "<p>it is. The liveness is in the <code>kill_origin</code> input facts</p>",
        "id": 259531170,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635517238
    },
    {
        "content": "<p>I see</p>",
        "id": 259531215,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635517265
    },
    {
        "content": "<p>That is, I assumed that we were given it for this experiment, there are no liveness logic rules like main Polonius has</p>",
        "id": 259531263,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635517287
    },
    {
        "content": "<p>but I don't think there's a limitation in there that we <em>couldn't</em> do that if we wanted to</p>",
        "id": 259531417,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635517353
    },
    {
        "content": "<p>in the tests, <code>kill_origin</code> is issued when a variable is moved or goes out of scope</p>",
        "id": 259531480,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635517385
    },
    {
        "content": "<p>I see.</p>",
        "id": 259531551,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635517417
    },
    {
        "content": "<p>is it distinct from <code>clear_origin</code></p>",
        "id": 259531568,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635517424
    },
    {
        "content": "<p>yes</p>",
        "id": 259531576,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635517431
    },
    {
        "content": "<p>in particular, <a href=\"https://github.com/domenicquirl/polonius.next/blob/0d3c7a099fcf222d6ae942b4fd88e3525b433061/src/polonius.dl#L110-L111\">https://github.com/domenicquirl/polonius.next/blob/0d3c7a099fcf222d6ae942b4fd88e3525b433061/src/polonius.dl#L110-L111</a></p>",
        "id": 259531629,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635517442
    },
    {
        "content": "<p>it occurs at a different point in time?</p>",
        "id": 259531707,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635517474
    },
    {
        "content": "<p>so clears don't affect new subsets (because the clear happens first), but killing does</p>",
        "id": 259531710,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635517475
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// ## Assumptions about ordering</span>\n<span class=\"c1\">//</span>\n<span class=\"c1\">// For a given node `N`...</span>\n<span class=\"c1\">//</span>\n<span class=\"c1\">// * First we perform any accesses `access_origin(O, N)`</span>\n<span class=\"c1\">// * Then we invalidate any origins `invalidate_origin(L, N)`</span>\n<span class=\"c1\">// * Then we clear any origins `clear_origin`</span>\n<span class=\"c1\">// * Then we introduce any subsets `introduce_subset`</span>\n</code></pre></div>",
        "id": 259531767,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635517504
    },
    {
        "content": "<p>should become</p>",
        "id": 259531787,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635517514
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// ## Assumptions about ordering</span>\n<span class=\"c1\">//</span>\n<span class=\"c1\">// For a given node `N`...</span>\n<span class=\"c1\">//</span>\n<span class=\"c1\">// * First we perform any accesses `access_origin(O, N)`</span>\n<span class=\"c1\">// * Then we invalidate any origins `invalidate_origin(L, N)`</span>\n<span class=\"c1\">// * Then we clear any origins `clear_origin`</span>\n<span class=\"c1\">// * Then we introduce any subsets `introduce_subset`</span>\n<span class=\"c1\">// * Then we kill any origins `kill_origin`</span>\n</code></pre></div>\n<p>?</p>",
        "id": 259531817,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635517528
    },
    {
        "content": "<p>I guess, yeah</p>",
        "id": 259531848,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635517545
    },
    {
        "content": "<p>the thing is that subset relations for killed variables are still considered insofar as that they can influence the transitive closure of subsets</p>",
        "id": 259531957,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635517580
    },
    {
        "content": "<p>I was debating about this approach. I don't think I would call it liveness, though.</p>",
        "id": 259531982,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635517594
    },
    {
        "content": "<p>(Which isn't a problem)</p>",
        "id": 259532001,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635517608
    },
    {
        "content": "<p>But in particular the facts are not generated based on the value being <em>live</em>, right? But more like a response to actions -- moves, storage-dead</p>",
        "id": 259532058,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635517632
    },
    {
        "content": "<p>so the order is <code>introduce_subset</code>, then use these for transitive closure, then <code>kill</code> if they die</p>",
        "id": 259532082,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635517639
    },
    {
        "content": "<p>side note: I haven't thought at all about this, but I could imagine us wanting to \"collapse\" the effects of statements within basic blocks. Have we thought about how possible that is? :)</p>",
        "id": 259532226,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635517696
    },
    {
        "content": "<p>I imagine it <em>probably</em> is</p>",
        "id": 259532236,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635517702
    },
    {
        "content": "<p>seems related</p>",
        "id": 259532244,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635517704
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Sprint.202021-10-29/near/259532058\">said</a>:</p>\n<blockquote>\n<p>But in particular the facts are not generated based on the value being <em>live</em>, right? But more like a response to actions -- moves, storage-dead</p>\n</blockquote>\n<p>idk about storage-dead (the thing itself, not whether I agree). But for the rest I'd say that<br>\n a) yes, but<br>\n b) this still essentially corresponds to the end of the variables lifetime?</p>",
        "id": 259532285,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635517727
    },
    {
        "content": "<p>It corresponds to the end of the variable's lifetime, but not the point where it \"goes dead\"</p>",
        "id": 259532331,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635517755
    },
    {
        "content": "<p>I want to try and construct an example of where this might matter</p>",
        "id": 259532344,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635517765
    },
    {
        "content": "<p>ok, yeah please do</p>",
        "id": 259532358,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635517774
    },
    {
        "content": "<p>going dead meaning --&gt; won't be used again without being overwritten</p>",
        "id": 259532363,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635517775
    },
    {
        "content": "<p>i.e., \"current value won't be used\"</p>",
        "id": 259532380,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635517787
    },
    {
        "content": "<p>I'm not sure I understand what you're saying rn</p>",
        "id": 259532381,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635517788
    },
    {
        "content": "<p>yeah</p>",
        "id": 259532389,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635517793
    },
    {
        "content": "<p>understandable :)</p>",
        "id": 259532392,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635517796
    },
    {
        "content": "<p>I will try to make an example</p>",
        "id": 259532443,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635517805
    },
    {
        "content": "<p>but I will also say that I find this approach appealing in that</p>",
        "id": 259532452,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635517810
    },
    {
        "content": "<p>it preserves that property of \"input facts that can be easily deduced from the mir\"</p>",
        "id": 259532480,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635517822
    },
    {
        "content": "<p>(although bringing the liveness into the rules does too)</p>",
        "id": 259532500,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635517831
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// #![feature(nll)]</span>\n<span class=\"c1\">//</span>\n<span class=\"c1\">// struct Thing;</span>\n<span class=\"c1\">//</span>\n<span class=\"c1\">// impl Thing {</span>\n<span class=\"c1\">//     fn maybe_next(&amp;mut self) -&gt; Option&lt;&amp;mut Self&gt; { None }</span>\n<span class=\"c1\">// }</span>\n<span class=\"c1\">//</span>\n<span class=\"c1\">// fn main() {</span>\n<span class=\"c1\">//     let mut temp = &amp;mut Thing;</span>\n<span class=\"c1\">//</span>\n<span class=\"c1\">//    loop {</span>\n<span class=\"c1\">//        match temp.maybe_next() {</span>\n<span class=\"c1\">//            Some(v) =&gt; { temp = v; }</span>\n<span class=\"c1\">//            None =&gt; { }</span>\n<span class=\"c1\">//        }</span>\n<span class=\"c1\">//    }</span>\n<span class=\"c1\">// }</span>\n</code></pre></div>",
        "id": 259532604,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635517874
    },
    {
        "content": "<p>that's our example, right?</p>",
        "id": 259532610,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635517878
    },
    {
        "content": "<p>oh I think I'm starting to see what you mean</p>",
        "id": 259532818,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635517975
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(nll)]</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Thing</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Thing</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">maybe_next</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">temp</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">Thing</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">loop</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">temp</span><span class=\"p\">.</span><span class=\"n\">maybe_next</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">           </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">temp</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">           </span><span class=\"nb\">None</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 259532831,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635517981
    },
    {
        "content": "<p>I was confused for a bit because NLL doesn't accept this</p>",
        "id": 259532850,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635517991
    },
    {
        "content": "<p>but of course it doesn't :)</p>",
        "id": 259532855,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635517994
    },
    {
        "content": "<p>anyway, I think this is the kind of case that might behave differently?</p>",
        "id": 259532875,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635518008
    },
    {
        "content": "<p>it seems \"clearly equivalent\"</p>",
        "id": 259532885,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635518015
    },
    {
        "content": "<p>is it that a variable can remain unused until the end of a scope, and you distinguish the \"point of last use\" and the scoping/drop?</p>",
        "id": 259532888,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635518016
    },
    {
        "content": "<p>but <code>v1</code> doesn't go out of scope until we return from the fn</p>",
        "id": 259532914,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635518032
    },
    {
        "content": "<p>even though it is dead at the end of each loop iteration</p>",
        "id": 259532979,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635518044
    },
    {
        "content": "<p><em>actually</em></p>",
        "id": 259533026,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635518065
    },
    {
        "content": "<p>we have the <code>access_origin</code> facts already</p>",
        "id": 259533037,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635518070
    },
    {
        "content": "<p>we have all the facts we need to compute liveness, don't we?</p>",
        "id": 259533057,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635518080
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"337115\">Domenic Quirl</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Sprint.202021-10-29/near/259532888\">said</a>:</p>\n<blockquote>\n<p>is it that a variable can remain unused until the end of a scope, and you distinguish the \"point of last use\" and the scoping/drop?</p>\n</blockquote>\n<p>I <em>think</em> this is what I was trying to show?</p>",
        "id": 259533188,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635518151
    },
    {
        "content": "<p>except that liveness would be backwards again (<code>is_live_at</code> == exists reachable <code>N</code> where <code>access_origin</code>)</p>",
        "id": 259533192,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635518153
    },
    {
        "content": "<p>yes. but having some backwards things doesn't seem like a problem per <em>se</em></p>",
        "id": 259533265,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635518171
    },
    {
        "content": "<p>no, just worth a mention</p>",
        "id": 259533320,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635518189
    },
    {
        "content": "<p>it is a bit disappointing, no doubt</p>",
        "id": 259533406,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635518228
    },
    {
        "content": "<p>though maybe it's not actually quite this easy?</p>",
        "id": 259533410,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635518230
    },
    {
        "content": "<p>if there is a loop, then there will be reachability of \"the same\" origin by name, even if the variable is moved/re-created in between, no?</p>",
        "id": 259533487,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635518267
    },
    {
        "content": "<p>Are we literally doing the same liveness (like live variable analysis) as the old version?</p>",
        "id": 259533488,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1635518267
    },
    {
        "content": "<p>well</p>",
        "id": 259533504,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635518279
    },
    {
        "content": "<p>if we did liveness on the \"Accessed regions\", then no</p>",
        "id": 259533552,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635518286
    },
    {
        "content": "<p>it's actually smarter I think</p>",
        "id": 259533587,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635518301
    },
    {
        "content": "<p>Yes, it might be more precise.</p>",
        "id": 259533607,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1635518313
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">22</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">44</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"nb\">drop</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">t</span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 259533643,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635518330
    },
    {
        "content": "<p>something like that, I believe, is not accepted by rustc today</p>",
        "id": 259533655,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635518336
    },
    {
        "content": "<p>but probably would be by the analysis I'm talking about</p>",
        "id": 259533666,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635518342
    },
    {
        "content": "<p>I was a bit surprised that we did a traditional live variable analysis and then just made all regions live that were in the type of a live variable.</p>",
        "id": 259533690,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1635518357
    },
    {
        "content": "<p>I'm...trying to remember why we do that</p>",
        "id": 259533726,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635518373
    },
    {
        "content": "<p>But we could also use \"live origins\" as an input to the old framework, no?</p>",
        "id": 259533752,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1635518385
    },
    {
        "content": "<p>it may be that I just didn't realize how easily we could not do it</p>",
        "id": 259533756,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635518386
    },
    {
        "content": "<p>I do remember stressing some about how \"predictable\" it would be if we just looked at the liveness of things that were accessed</p>",
        "id": 259533833,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635518407
    },
    {
        "content": "<p>but .. I feel like that seems wrong now</p>",
        "id": 259533841,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635518412
    },
    {
        "content": "<p>I don't think there's any funny cases; e.g. if a struct has a dtor, we'll see the reads from the dtor</p>",
        "id": 259533865,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635518424
    },
    {
        "content": "<p>/me thinks</p>",
        "id": 259533881,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635518433
    },
    {
        "content": "<p>(maybe it has to do with knowing when a dtor is a no-op?)</p>",
        "id": 259533907,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635518443
    },
    {
        "content": "<p>that is just a straightforward initialization analysis though</p>",
        "id": 259533916,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635518450
    },
    {
        "content": "<p>I can't see any good reason right now</p>",
        "id": 259533964,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635518484
    },
    {
        "content": "<p>anyway, another way to think of liveness -- but it's kind of silly -- is that we are inferring the \"kills\"</p>",
        "id": 259534019,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635518509
    },
    {
        "content": "<p>on behalf of the user</p>",
        "id": 259534027,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635518516
    },
    {
        "content": "<p>it still makes me feel a bit grumpy</p>",
        "id": 259534085,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635518528
    },
    {
        "content": "<p>I'm still wary that this at least isn't <em>the same</em> as what <code>kill</code> is in the example (i.e., moves and such)</p>",
        "id": 259534086,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635518528
    },
    {
        "content": "<p>\"wary\"?</p>",
        "id": 259534108,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635518539
    },
    {
        "content": "<p>can you explain a bit more?</p>",
        "id": 259534129,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635518546
    },
    {
        "content": "<p>yes</p>",
        "id": 259534142,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635518551
    },
    {
        "content": "<p>to both <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 259534151,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635518556
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"337115\">Domenic Quirl</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Sprint.202021-10-29/near/259533487\">said</a>:</p>\n<blockquote>\n<p>if there is a loop, then there will be reachability of \"the same\" origin by name, even if the variable is moved/re-created in between, no?</p>\n</blockquote>\n<p>because of this, I think there are situations where \"kill by move\" would trigger, but \"kill if not accessed again\" won't</p>",
        "id": 259534239,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635518610
    },
    {
        "content": "<p>Live variables propagates backwards, what you have propagates forwards, so I don't think it's the same.</p>",
        "id": 259534240,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1635518611
    },
    {
        "content": "<p>I don't think so</p>",
        "id": 259534294,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635518641
    },
    {
        "content": "<p>well</p>",
        "id": 259534340,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635518648
    },
    {
        "content": "<p>there might be cases if we have .. what's that term people use .. not enough edges in the graph :)</p>",
        "id": 259534358,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635518661
    },
    {
        "content": "<p>there's a term for that</p>",
        "id": 259534360,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635518663
    },
    {
        "content": "<p>i.e. a graph like</p>",
        "id": 259534366,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635518667
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>A -&gt; B\nA -&gt; C\nB -&gt; C\n</code></pre></div>",
        "id": 259534390,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635518683
    },
    {
        "content": "<p>instead of</p>",
        "id": 259534395,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635518687
    },
    {
        "content": "<p>(Ah, right, <em>critical edges</em>)</p>",
        "id": 259534410,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635518695
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>A -&gt; B\nA -&gt; B1\nB -&gt; C\nB1 -&gt; C\n</code></pre></div>",
        "id": 259534453,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635518712
    },
    {
        "content": "<p>i.e., maybe if there is not a \"node\" to recognize that something is dead</p>",
        "id": 259534468,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635518721
    },
    {
        "content": "<p>this is usually resolved by \"splitting\" critical edges</p>",
        "id": 259534486,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635518733
    },
    {
        "content": "<p>(transforming the first graph to the second)</p>",
        "id": 259534499,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635518741
    },
    {
        "content": "<p>maybe I'm misunderstanding how you intend to obtain <code>kill</code> from <code>access</code></p>",
        "id": 259534587,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635518772
    },
    {
        "content": "<p>otherwise, I think that the concern you're describing shouldn't happen because:</p>\n<div class=\"codehilite\"><pre><span></span><code>drop(foo);\n// foo MUST be dead here or you&#39;ll get a &quot;use when not initialized&quot; error\n</code></pre></div>",
        "id": 259534601,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635518778
    },
    {
        "content": "<p>are we talking about more than propagating accesses backwards?</p>",
        "id": 259534680,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635518812
    },
    {
        "content": "<p>what I'm imagining is that we are computing \"will this origin be accessed without having been cleared\"</p>",
        "id": 259534784,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635518855
    },
    {
        "content": "<p>if so, the origin is <em>live</em></p>",
        "id": 259534895,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635518892
    },
    {
        "content": "<p>ah</p>",
        "id": 259534904,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635518897
    },
    {
        "content": "<p>the origin is \"killed\" at the point where it transitions from live to dead, roughly</p>",
        "id": 259534937,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635518907
    },
    {
        "content": "<p>So in Domenic's framework, we use moves (and maybe <code>StorageDead</code>) to indicate that an origin will not first be accessed without being cleared first</p>",
        "id": 259535375,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1635519096
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Sprint.202021-10-29/near/259534937\">said</a>:</p>\n<blockquote>\n<p>the origin is \"killed\" at the point where it transitions from live to dead, roughly</p>\n</blockquote>\n<p>that sounds like it could work</p>",
        "id": 259535507,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635519141
    },
    {
        "content": "<p>and you think that this is worth a whole other transitive closure (reachability)?</p>",
        "id": 259535615,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635519188
    },
    {
        "content": "<p>well, I'd like the analysis to be as precise as possible</p>",
        "id": 259536029,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635519369
    },
    {
        "content": "<p>To clarify: I've been very much with Dylan that it is generally a good idea with regard to using Polonius as a spec to have as much as possible of what happens be happening as part of the logical rules. <em>But</em> in this case, it feels like the \"from MIR\" kill facts are not really something to worry about regarding understandability/complexity and spec (if they stay as simple as now).</p>",
        "id": 259536032,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635519372
    },
    {
        "content": "<p>of cousre it may come at some cost</p>",
        "id": 259536043,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635519375
    },
    {
        "content": "<p>but I'm not convinced yet :)</p>",
        "id": 259536049,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635519378
    },
    {
        "content": "<p>and I'd rather address that by doing a successive series of approximations</p>",
        "id": 259536059,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635519385
    },
    {
        "content": "<p>in any case I would definitely move the liveness analysis into polonius</p>",
        "id": 259536112,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635519412
    },
    {
        "content": "<p>if we can</p>",
        "id": 259536132,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635519420
    },
    {
        "content": "<p>Continuing this thought:</p>\n<p>In Domenic's framework, we use moves (and maybe StorageDead) to indicate that an origin will not be accessed without first being cleared. This information propagates forward. In some sense, this is an approximation of a traditional live variables analysis, which <em>actually</em> computes which variables will be accessed in the future without first being redefined. The downside is that it has to remember this information at all points.</p>",
        "id": 259536844,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1635519711
    },
    {
        "content": "<p>Does this reflect the current thinking?</p>",
        "id": 259536924,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1635519730
    },
    {
        "content": "<p>That sounds about right to me</p>",
        "id": 259536975,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635519754
    },
    {
        "content": "<p>I'm inclined to try implementing the liveness analysis</p>",
        "id": 259536984,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635519760
    },
    {
        "content": "<p>if folks wanted, I could join a video chat now</p>",
        "id": 259536999,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635519769
    },
    {
        "content": "<p>we could \"pair\" it</p>",
        "id": 259537007,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635519772
    },
    {
        "content": "<p>I <em>may</em> already be kinda on it :D</p>",
        "id": 259537059,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635519795
    },
    {
        "content": "<p>alternatively I am skimming <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span>'s PR now</p>",
        "id": 259537070,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635519798
    },
    {
        "content": "<p>so I'm happy to just wait <span class=\"user-mention\" data-user-id=\"337115\">@Domenic Quirl</span> and let you poke at it and we can discuss after</p>",
        "id": 259537097,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635519810
    },
    {
        "content": "<p>wanted to see if I can replace <code>kill</code></p>",
        "id": 259537099,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635519811
    },
    {
        "content": "<p>however you prefer</p>",
        "id": 259537123,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635519822
    },
    {
        "content": "<p>I'm happy to get in a call. Lemme get some coffee first though</p>",
        "id": 259537127,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1635519825
    },
    {
        "content": "<p>we've got some time left ^^</p>",
        "id": 259537156,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635519838
    },
    {
        "content": "<p>I'll want more coffee too</p>",
        "id": 259537264,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635519870
    },
    {
        "content": "<p>I'm going to skim lqd's pr for 15 minutes or so</p>",
        "id": 259537273,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635519875
    },
    {
        "content": "<p><a href=\"https://meet.jit.si/462181374227594\">Click to join video call</a></p>",
        "id": 259539663,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635520862
    },
    {
        "content": "<p>should we try chatting here <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span> ?</p>",
        "id": 259539677,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635520868
    },
    {
        "content": "<p>except I never did get more coffee</p>",
        "id": 259539687,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635520872
    },
    {
        "content": "<p>let me do that!</p>",
        "id": 259539690,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635520874
    },
    {
        "content": "<p>ok so the straightforward thing doesn't work</p>",
        "id": 259540802,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635521335
    },
    {
        "content": "<p>and I think I know why that is</p>",
        "id": 259540810,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635521341
    },
    {
        "content": "<p>but not necessarily what to do about it right now <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 259540862,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635521366
    },
    {
        "content": "<p>(I'll wait for when Niko is back)</p>",
        "id": 259541010,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635521418
    },
    {
        "content": "<p>back!</p>",
        "id": 259542503,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635522059
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Sprint.202021-10-29/near/259532831\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(nll)]</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Thing</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Thing</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">maybe_next</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">temp</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">Thing</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">loop</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">temp</span><span class=\"p\">.</span><span class=\"n\">maybe_next</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">           </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">temp</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">           </span><span class=\"nb\">None</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 259543713,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635522577
    },
    {
        "content": "<p>( I got dropped from the meeting and can't seem to rejoin)</p>",
        "id": 259544666,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1635522963
    },
    {
        "content": "<p>gimme a few more minutes :)</p>",
        "id": 259552307,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635526157
    },
    {
        "content": "<p>ok, ready to chat a bit</p>",
        "id": 259553337,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635526639
    },
    {
        "content": "<p>I think :)</p>",
        "id": 259553346,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635526646
    },
    {
        "content": "<p>come over and join us again :)</p>",
        "id": 259553510,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635526711
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">22</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"cm\">/* a */</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"fm\">vec!</span><span class=\"p\">[];</span><span class=\"w\"> </span><span class=\"cm\">/* b */</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"cm\">/* c */</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">tmp</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"cm\">/* d */</span><span class=\"w\"></span>\n<span class=\"nb\">Vec</span>::<span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">tmp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"cm\">/* e */</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 259557629,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1635528670
    },
    {
        "content": "<p>Relevant conversation: <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/purely.20forward.20propagation/near/254713241\">https://rust-lang.zulipchat.com/#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/purely.20forward.20propagation/near/254713241</a></p>",
        "id": 259557672,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1635528690
    },
    {
        "content": "<p><a href=\"https://github.com/nikomatsakis/polonius.next/pull/12\">https://github.com/nikomatsakis/polonius.next/pull/12</a></p>",
        "id": 259560398,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1635529923
    },
    {
        "content": "<p><a href=\"https://github.com/nikomatsakis/polonius.next/pull/6\">https://github.com/nikomatsakis/polonius.next/pull/6</a></p>",
        "id": 259561827,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1635530437
    },
    {
        "content": "<p>(fyi, I have a version with loans mostly working)</p>",
        "id": 259569409,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635534231
    },
    {
        "content": "<p>fixing a few tests</p>",
        "id": 259569416,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635534235
    }
]