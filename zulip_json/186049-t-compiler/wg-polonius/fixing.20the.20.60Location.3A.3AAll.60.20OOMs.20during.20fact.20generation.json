[
    {
        "content": "<p>so I've pushed part of my prototype for this <a href=\"https://github.com/lqd/rust/commit/ec3712202e5204f6547fbf9a7c3bb8c8cf5215ee\">simple rustc change</a> (points to an outdated rev of the polonius branch, it's just to show the difference in fact generation), <a href=\"https://github.com/lqd/borrow-check/tree/fix_oom\">polonius branch</a></p>",
        "id": 205860937,
        "sender_full_name": "lqd",
        "timestamp": 1596499448
    },
    {
        "content": "<p>instead of materializing each such constraint at all points of the CFG <a href=\"https://github.com/lqd/rust/commit/ec3712202e5204f6547fbf9a7c3bb8c8cf5215ee#diff-53aef089a36a8e2ed07627fc8915fe63L244-L246\">here</a>, we split those into a dedicated relation, <code>outlives_everywhere</code> (naming TBD) and duplicate the rules, while taking care of hopefully not materializing the same data in polonius itself</p>",
        "id": 205860991,
        "sender_full_name": "lqd",
        "timestamp": 1596499519
    },
    {
        "content": "<p>(the rustc branch deletes the same 2 tests which used to OOM during fact gen as they currently OOM in polonius but that's not a big problem, it's mostly to show the approach)</p>",
        "id": 205861063,
        "sender_full_name": "lqd",
        "timestamp": 1596499583
    },
    {
        "content": "<p><a href=\"https://github.com/lqd/borrow-check/blob/fix_oom/polonius-engine/src/output/location_insensitive.rs#L37-L47\">here's an example</a> of the rules duplication in the location-insensitive variant <br>\nwhile there are 2 cases in the naive variant: <a href=\"https://github.com/lqd/borrow-check/commit/0d3f6b815860b6a448d287120cee95a2b33a689e\">for the <code>subsets</code> &amp; <code>requires</code> relations</a></p>",
        "id": 205861317,
        "sender_full_name": "lqd",
        "timestamp": 1596499839
    },
    {
        "content": "<p>I'll push the more complicated changes, for the Opt variant, tomorrow</p>",
        "id": 205861349,
        "sender_full_name": "lqd",
        "timestamp": 1596499901
    },
    {
        "content": "<p>rustc tests are still running so it might still be a bit wrong, and since it's also been a long time since I've updated the test expectations I'll need to verify the baseline on nightly. but that reminds me of the earlier question about the duration of the tests using the Naive variant (so, the worst case). This run had a lot more \"this test has been running for more than 60 seconds\" than usual, there were also more really high memory usage (and possibly one or two OOMs) but overall it looked like the ui tests were twice as slow</p>",
        "id": 205861564,
        "sender_full_name": "lqd",
        "timestamp": 1596500105
    },
    {
        "content": "<p>(let's be clear, a lot of those tests would be fast-tracked by the location-insensitive analysis in a realistic situation)</p>",
        "id": 205861681,
        "sender_full_name": "lqd",
        "timestamp": 1596500272
    },
    {
        "content": "<p>tests are done, the failures are the same in both cases, with and without the OOM fix</p>",
        "id": 205864571,
        "sender_full_name": "lqd",
        "timestamp": 1596503895
    },
    {
        "content": "<p>\"twice as slow\" for UI tests doesn't seem <em>that</em> bad to me</p>",
        "id": 205911976,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596550658
    },
    {
        "content": "<p>particularly if the location insensitive can do better</p>",
        "id": 205911991,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596550664
    },
    {
        "content": "<p>still, given that I think we are not going to do the equality variant for now</p>",
        "id": 205912011,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596550674
    },
    {
        "content": "<p>I'm feeling a bit less \"ardor\" for removing the optimized variant :P</p>",
        "id": 205912069,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596550685
    },
    {
        "content": "<p>I'm looking at this now</p>",
        "id": 205912315,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596550798
    },
    {
        "content": "<p>ah :)</p>",
        "id": 205912389,
        "sender_full_name": "lqd",
        "timestamp": 1596550817
    },
    {
        "content": "<p>there's a couple cases in there which are very slow but it's probably move errors in another test, I'm not worried even if it skews the duration</p>",
        "id": 205912497,
        "sender_full_name": "lqd",
        "timestamp": 1596550866
    },
    {
        "content": "<p>it'll get better once we fix move errors, and of course once we finish adding subset errors to the opt variant we should be back in business</p>",
        "id": 205912592,
        "sender_full_name": "lqd",
        "timestamp": 1596550914
    },
    {
        "content": "<p>I'd like to get that done today, just so we can have numbers knowing that move errors haven't changed compared to that 2x run</p>",
        "id": 205912719,
        "sender_full_name": "lqd",
        "timestamp": 1596550969
    },
    {
        "content": "<p>the duplication for the naive rules is not so bad</p>",
        "id": 205912720,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596550969
    },
    {
        "content": "<p>i'm not sure what it will take for the optimized rules</p>",
        "id": 205912731,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596550975
    },
    {
        "content": "<p>it's worse there</p>",
        "id": 205912747,
        "sender_full_name": "lqd",
        "timestamp": 1596550982
    },
    {
        "content": "<p>and it multiplies when you combine subset errors + <code>subset_everywhere</code> :3</p>",
        "id": 205912793,
        "sender_full_name": "lqd",
        "timestamp": 1596551002
    },
    {
        "content": "<p>I feel like one of the my \"jobs\" that I've never quite completed is to write out the optimized rules</p>",
        "id": 205912843,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596551021
    },
    {
        "content": "<p>yeah</p>",
        "id": 205912845,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596551022
    },
    {
        "content": "<p>I wonder if there would be a way to extend <em>datafrog</em> instead</p>",
        "id": 205912858,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596551028
    },
    {
        "content": "<p>it's not <em>terribly</em> worse, but that variant is already complex so yeah</p>",
        "id": 205912884,
        "sender_full_name": "lqd",
        "timestamp": 1596551040
    },
    {
        "content": "<p>i.e., to support sets of tuples that are not directly stored in vectors</p>",
        "id": 205912964,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596551065
    },
    {
        "content": "<p>yeah we probably could/should, or generate more of them</p>",
        "id": 205912969,
        "sender_full_name": "lqd",
        "timestamp": 1596551066
    },
    {
        "content": "<p>(we'd still probably need to augment some joins to ask for a leapjoin to be generated, and the likes, but the rules themselves are generally more palatable)</p>",
        "id": 205913087,
        "sender_full_name": "lqd",
        "timestamp": 1596551131
    },
    {
        "content": "<p>I'm trying to thikn exactly what I mean</p>",
        "id": 205913191,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596551182
    },
    {
        "content": "<p>but the Opt one is already complex as it is (and I'm not sure I'm aware of all its subtlety <span aria-label=\"scream\" class=\"emoji emoji-1f631\" role=\"img\" title=\"scream\">:scream:</span>)</p>",
        "id": 205913204,
        "sender_full_name": "lqd",
        "timestamp": 1596551189
    },
    {
        "content": "<p>if this were prolog, not datalog, I <em>suspect</em> we'd have a rule like</p>",
        "id": 205913213,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596551192
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>subset_base(O1, O2, N) :- subset_base_at(O1, O2, N); subset_base_everywhere(O1, O2)\n</code></pre></div>",
        "id": 205913272,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596551215
    },
    {
        "content": "<p>(but that rule doesn't fit datalog because <code>N</code> is unbound in the second half)</p>",
        "id": 205913358,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596551264
    },
    {
        "content": "<p>if this were prolog, higher-ranked sub origins would love it</p>",
        "id": 205913420,
        "sender_full_name": "lqd",
        "timestamp": 1596551285
    },
    {
        "content": "<p>I do wonder, in terms of performance</p>",
        "id": 205913462,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596551308
    },
    {
        "content": "<p>i.e., if we were working backwards --</p>",
        "id": 205913497,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596551324
    },
    {
        "content": "<p>starting with each invalidated loan that also appears in the location insensitive errors --</p>",
        "id": 205913528,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596551341
    },
    {
        "content": "<p>who knows...</p>",
        "id": 205913547,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596551353
    },
    {
        "content": "<p>that's also why I was interested in demand transformation as it kinda simulates top-down evaluation from bottom-up rules</p>",
        "id": 205913618,
        "sender_full_name": "lqd",
        "timestamp": 1596551384
    },
    {
        "content": "<p>ultimately propagated forwards is generally better if you can do it and you can narrow the targets enough (as we've talked about)</p>",
        "id": 205913623,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596551388
    },
    {
        "content": "<p>right</p>",
        "id": 205913646,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596551395
    },
    {
        "content": "<p>I could take a stab at augmenting the optimized variant</p>",
        "id": 205913762,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596551428
    },
    {
        "content": "<p>I'm kind of at a loss for what to do besides distract y'all right now :)</p>",
        "id": 205913782,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596551436
    },
    {
        "content": "<p>filtering based on this idea is also a big win (for cases which are already inefficient at least)</p>",
        "id": 205913796,
        "sender_full_name": "lqd",
        "timestamp": 1596551444
    },
    {
        "content": "<p>augmenting to handle the <code>subset_everywhere</code> relation you mean ?</p>",
        "id": 205913840,
        "sender_full_name": "lqd",
        "timestamp": 1596551469
    },
    {
        "content": "<p>right</p>",
        "id": 205913851,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596551474
    },
    {
        "content": "<p>and/or trying to write-up how it works</p>",
        "id": 205913860,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596551479
    },
    {
        "content": "<p>...I mean the key idea is to delay computing TC until we <em>remove</em> something...</p>",
        "id": 205913874,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596551487
    },
    {
        "content": "<p>...which brings back to mind another thought I've had</p>",
        "id": 205913880,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596551494
    },
    {
        "content": "<p>so do you find splitting the relation in two an acceptable way forward ?</p>",
        "id": 205913888,
        "sender_full_name": "lqd",
        "timestamp": 1596551500
    },
    {
        "content": "<p>it'd be nice if datafrog were a bit more \"independent\" from vectors and slices</p>",
        "id": 205913898,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596551504
    },
    {
        "content": "<p>I could imagine having a specialized bit of code tailored to transitive relations, in particular</p>",
        "id": 205913923,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596551516
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/fixing.20the.20.60Location.3A.3AAll.60.20OOMs.20during.20fact.20generation/near/205913888\">said</a>:</p>\n<blockquote>\n<p>so do you find splitting the relation in two an acceptable way forward ?</p>\n</blockquote>\n<p>I think it makes sense, although it definitely \"messes with\" the canonical rules</p>",
        "id": 205914004,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596551541
    },
    {
        "content": "<p>right right</p>",
        "id": 205914022,
        "sender_full_name": "lqd",
        "timestamp": 1596551549
    },
    {
        "content": "<p>i.e., even the naive rules start to get a bit messier than one might like</p>",
        "id": 205914030,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596551551
    },
    {
        "content": "<p>if we can find a cleaner alternative I'm all for it</p>",
        "id": 205914076,
        "sender_full_name": "lqd",
        "timestamp": 1596551576
    },
    {
        "content": "<p>but I still think it makes sense</p>",
        "id": 205914079,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596551577
    },
    {
        "content": "<p>right</p>",
        "id": 205914094,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596551582
    },
    {
        "content": "<p>it's not like we <em>have</em> to fix the 2 OOMs today heh</p>",
        "id": 205914112,
        "sender_full_name": "lqd",
        "timestamp": 1596551593
    },
    {
        "content": "<p>maybe we'll come up with another idea but in the meantime reproducing ALL those tuples for every CFG seems silly</p>",
        "id": 205914113,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596551593
    },
    {
        "content": "<p>one thing I do remember is that</p>",
        "id": 205914133,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596551604
    },
    {
        "content": "<p>at somep oint I was refactoring <em>NLL</em> to not have \"locations::All\"</p>",
        "id": 205914148,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596551611
    },
    {
        "content": "<p>it was historically a hack but the spirit is correct</p>",
        "id": 205914152,
        "sender_full_name": "lqd",
        "timestamp": 1596551613
    },
    {
        "content": "<p>and instead to enforce them at the start point</p>",
        "id": 205914164,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596551616
    },
    {
        "content": "<p>yeah I remember</p>",
        "id": 205914168,
        "sender_full_name": "lqd",
        "timestamp": 1596551617
    },
    {
        "content": "<p>or something like that</p>",
        "id": 205914170,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596551618
    },
    {
        "content": "<p>this would be I guess a good alternative</p>",
        "id": 205914179,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596551626
    },
    {
        "content": "<p>so to sum up:</p>",
        "id": 205914204,
        "sender_full_name": "lqd",
        "timestamp": 1596551638
    },
    {
        "content": "<p>I don't remember enough about that work but just <em>not having the problem</em> seems good too :)</p>",
        "id": 205914205,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596551638
    },
    {
        "content": "<ul>\n<li>you could if you wanted to try to adapt the opt variant to the split subset relations, and we can compare notes after, as I already prototyped it (it's just slightly time-consumin to untangle from my other tests as I needed to make sure it worked with subset errors, the \"interestingness filtering\" we mentioned just above taking into account potential erroneous loans etc etc)</li>\n</ul>",
        "id": 205914387,
        "sender_full_name": "lqd",
        "timestamp": 1596551728
    },
    {
        "content": "<p>Now I'm thinking it'd be better to look at the NLL code and see if I think there's a way to just remove the need for <code>Locations::All</code> to begin with...</p>",
        "id": 205914463,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596551763
    },
    {
        "content": "<ul>\n<li>you could look for an alternative to this, be it implementation wise, or resurrecting the old NLL branch</li>\n</ul>",
        "id": 205914484,
        "sender_full_name": "lqd",
        "timestamp": 1596551765
    },
    {
        "content": "<p>(I don't have any other idea for an alternative beyond removing the \"concept\")</p>",
        "id": 205914526,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596551791
    },
    {
        "content": "<ul>\n<li>you could take a look at datafrog to remove the vec/slices bias, though to be fair Leapers are completely abstracted, and I had added some Relations specialized to cases like <code>!killed</code> using probabilistic data structures for quick filtering</li>\n</ul>",
        "id": 205914595,
        "sender_full_name": "lqd",
        "timestamp": 1596551824
    },
    {
        "content": "<ul>\n<li>there's the move errors issue with the temporary + Drop</li>\n</ul>",
        "id": 205914633,
        "sender_full_name": "lqd",
        "timestamp": 1596551849
    },
    {
        "content": "<p>there was an issue for the Location::All topic btw <a href=\"https://github.com/rust-lang/polonius/issues/24\">https://github.com/rust-lang/polonius/issues/24</a> with a link to the rustc PR and a bit more</p>",
        "id": 205914768,
        "sender_full_name": "lqd",
        "timestamp": 1596551909
    },
    {
        "content": "<p>ah nice</p>",
        "id": 205915167,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596552109
    },
    {
        "content": "<p>(Yes, those notes help a lot)</p>",
        "id": 205915646,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596552292
    },
    {
        "content": "<ul>\n<li>some thoughts on ways to improve things that hold at all points could be worthwhile (but I presume we can just not be lazy and duplicate the rules where we need to, or again look towards generation to have soufflé like <code>;</code> support)</li>\n</ul>",
        "id": 205915755,
        "sender_full_name": "lqd",
        "timestamp": 1596552344
    },
    {
        "content": "<ul>\n<li>the questions of richer integration with rustc's data structures (MIR, the dataflow framework, maybe just the <code>rustc_data_structures</code> crate, dominators et al), getting the SCCs, limiting fact generation, having a block granularity where we can, reformulating the location-insensitive analysis as simple reachability queries over the condensation graph could also be good to discuss :)</li>\n</ul>",
        "id": 205916361,
        "sender_full_name": "lqd",
        "timestamp": 1596552604
    },
    {
        "content": "<p>Yeah, for sure.</p>",
        "id": 205918063,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596553346
    },
    {
        "content": "<p>so I looked a bit into this</p>",
        "id": 205918738,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596553672
    },
    {
        "content": "<p>I feel like all of the <code>Location::All</code> cases come from user type annotations</p>",
        "id": 205918773,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596553683
    },
    {
        "content": "<p>it seems like from my write-up that the problem comes from the liveness rules</p>",
        "id": 205918926,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596553795
    },
    {
        "content": "<p>which makes me wonder if the idea should be to enforce those user-type annotations <em>at each assignment</em> to the variable in question</p>",
        "id": 205918998,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596553813
    },
    {
        "content": "<p>the \"return place\" can be considered a special case of this</p>",
        "id": 205919012,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596553819
    },
    {
        "content": "<p>i.e., we desugar <code>return foo</code> to <code>_0 = foo</code>, and so it's an assignment to the local variable <code>_0</code>, and that might mean that this is a point to enforce the user-type annotation on <code>_0</code> (i.e., the declared return type)</p>",
        "id": 205919060,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596553850
    },
    {
        "content": "<p>this also handles the case I cited here:</p>",
        "id": 205919080,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596553864
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"nb\">&#39;static</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">22</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">y</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// OK</span>\n<span class=\"w\">  </span><span class=\"c1\">// ... here, `x` is not considered `&#39;static` ..</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 205919085,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596553866
    },
    {
        "content": "<p>i.e., <code>x = &amp;y</code> would trigger us to enforce the user-type annotation again</p>",
        "id": 205919096,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596553876
    },
    {
        "content": "<p>and hence <code>x</code> <em>would</em> be considered <code>'static</code></p>",
        "id": 205919121,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596553888
    },
    {
        "content": "<p>I guess one example that doesn't fit this category, or maybe only \"partly fits\" it, is the \"applied member constraints\"</p>",
        "id": 205919714,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596554098
    },
    {
        "content": "<p>right there was also this topic</p>",
        "id": 205919997,
        "sender_full_name": "lqd",
        "timestamp": 1596554151
    },
    {
        "content": "<p>I guess we also create some constraints early on as part of the parameters</p>",
        "id": 205920420,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596554357
    },
    {
        "content": "<p>anyway, I think I'm semi-convinced that we could remove <code>Locations::All</code> in favor of a better handling of user-given type annotations, but it seems 'not entirely trivial' to do</p>",
        "id": 205920458,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596554377
    },
    {
        "content": "<p>it's also true that this will result in more tuples</p>",
        "id": 205920496,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596554396
    },
    {
        "content": "<p>would the only benefit be that we don't have to handle these cases specially ?</p>",
        "id": 205920578,
        "sender_full_name": "lqd",
        "timestamp": 1596554428
    },
    {
        "content": "<p>i.e., we'll be converting Location::All into regular tuples, often inserted close to the start of the graph, so they will propagate forward</p>",
        "id": 205920593,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596554439
    },
    {
        "content": "<p>I think that would be the only benefit</p>",
        "id": 205920627,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596554456
    },
    {
        "content": "<p>basically cleaner and simpler</p>",
        "id": 205920640,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596554462
    },
    {
        "content": "<p>but only on the polonius side, perhaps :)</p>",
        "id": 205920658,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596554469
    },
    {
        "content": "<p>maybe hard to justify then</p>",
        "id": 205920890,
        "sender_full_name": "lqd",
        "timestamp": 1596554526
    },
    {
        "content": "<p>probably worth keeping notes on it</p>",
        "id": 205920971,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596554565
    },
    {
        "content": "<p>as a possible future change</p>",
        "id": 205921000,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596554580
    },
    {
        "content": "<p>if it's non trivial and only helps this specific case, which is annoying sure but maybe less so than doing the NLL rework</p>",
        "id": 205921001,
        "sender_full_name": "lqd",
        "timestamp": 1596554581
    },
    {
        "content": "<p>yeah I'm trying to think if there would be a 'simple way' to do it</p>",
        "id": 205921058,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596554605
    },
    {
        "content": "<p>I could imagine for example</p>",
        "id": 205921374,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596554747
    },
    {
        "content": "<p>changing from <code>Location::All</code></p>",
        "id": 205921398,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596554758
    },
    {
        "content": "<p>to something a bit more specific, e.g., <code>Location::UserVariable(X)</code></p>",
        "id": 205921459,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596554772
    },
    {
        "content": "<p>and then, when we are generating nll-facts, we can find the right statements that correspond to writes of that variable</p>",
        "id": 205921474,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596554786
    },
    {
        "content": "<p>things like that</p>",
        "id": 205921476,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596554788
    },
    {
        "content": "<p>this might actually not be that hard to do</p>",
        "id": 205921483,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596554791
    },
    {
        "content": "<p>interesting yeah</p>",
        "id": 205921495,
        "sender_full_name": "lqd",
        "timestamp": 1596554796
    },
    {
        "content": "<p>and it wouldn't interfere with normal NLL</p>",
        "id": 205921497,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596554799
    },
    {
        "content": "<p>I guess I have to go and see if I could easily find a suitable <code>Location</code> value for each location</p>",
        "id": 205921560,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596554829
    },
    {
        "content": "<p>I thought we had some of this information more or less easily available but maybe it was for optimization purposes in later passes</p>",
        "id": 205921862,
        "sender_full_name": "lqd",
        "timestamp": 1596554987
    },
    {
        "content": "<p>at the same time I think I remember we did such similar mir walks during borrowck <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 205922135,
        "sender_full_name": "lqd",
        "timestamp": 1596555116
    },
    {
        "content": "<p>yes, so, looking into it, the main thing I don't know how to fit into this idea is the member-constraints</p>",
        "id": 205922745,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596555384
    },
    {
        "content": "<p>I suspect that actually they fit just fine <em>but</em></p>",
        "id": 205922766,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596555398
    },
    {
        "content": "<p>the code which creates them doesn't have easy access to the right info</p>",
        "id": 205922806,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596555420
    },
    {
        "content": "<p>although maybe it can be passed down</p>",
        "id": 205922814,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596555424
    },
    {
        "content": "<p><em>oh</em></p>",
        "id": 205923214,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596555605
    },
    {
        "content": "<p>the code I was staring at is actually part of error reporting I think</p>",
        "id": 205923228,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596555617
    },
    {
        "content": "<p>and we might not even need to update it ?</p>",
        "id": 205923469,
        "sender_full_name": "lqd",
        "timestamp": 1596555732
    },
    {
        "content": "<p>sorry, got distracted eating lunch and other things</p>",
        "id": 205928412,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596558332
    },
    {
        "content": "<p>but yeah I am thinking I might attempt a change to introduce a parameter that ties <code>Location::All</code> to a local and see if I can actually find a viable choice for each case</p>",
        "id": 205928489,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596558366
    },
    {
        "content": "<p>so for this I won't open PRs of the <code>subset</code>-splitting branches above until we're sure <code>Location::All</code> wouldn't be better handled by the changes described right above this message</p>",
        "id": 206003362,
        "sender_full_name": "lqd",
        "timestamp": 1596619760
    },
    {
        "content": "<p>I'm actually about to start experimenting here</p>",
        "id": 206003469,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596619813
    },
    {
        "content": "<p>awesome :)</p>",
        "id": 206003544,
        "sender_full_name": "lqd",
        "timestamp": 1596619881
    },
    {
        "content": "<p>ok, well, I'm not sure if this will really work</p>",
        "id": 206005128,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596621344
    },
    {
        "content": "<p>some challenges I encountered:</p>",
        "id": 206005145,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596621358
    },
    {
        "content": "<p>well, idk, maybe it's ok</p>",
        "id": 206005193,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596621372
    },
    {
        "content": "<p>but basically there are some user-type annotations in places I had forgotten about</p>",
        "id": 206005196,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596621382
    },
    {
        "content": "<p>although I guess all of those have pretty clear locations, now that I think about it</p>",
        "id": 206005204,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596621390
    },
    {
        "content": "<p>e.g., constants, expressions like <code>x: ty</code></p>",
        "id": 206005223,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596621414
    },
    {
        "content": "<p>indeed, in some of those cases where we are using <code>Locations::All</code> the behavior might even be <em>confusing</em></p>",
        "id": 206005245,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596621436
    },
    {
        "content": "<p>in that the constraints can apply even before the annotations appear in the code ?</p>",
        "id": 206005394,
        "sender_full_name": "lqd",
        "timestamp": 1596621544
    },
    {
        "content": "<p>right</p>",
        "id": 206005431,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596621583
    },
    {
        "content": "<p>I have to look at the MIR we get I guess but</p>",
        "id": 206005436,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596621593
    },
    {
        "content": "<p>I am imagining something like</p>",
        "id": 206005486,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596621608
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">22</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"mi\">44</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">p</span>: <span class=\"kp\">&amp;</span><span class=\"nb\">&#39;static</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"nb\">drop</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 206005535,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596621657
    },
    {
        "content": "<p>ok it's a really weird example</p>",
        "id": 206005545,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596621664
    },
    {
        "content": "<p>but then all of these are :)</p>",
        "id": 206005555,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596621667
    },
    {
        "content": "<p>I do indeed get a compilation error from that</p>",
        "id": 206005607,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596621716
    },
    {
        "content": "<p>I guess that's not surprising</p>",
        "id": 206005651,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596621725
    },
    {
        "content": "<p>NLL isn't this flow sensitive</p>",
        "id": 206005656,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596621729
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=9e5e82015a1f0f3000fc028fabe78eaf\">playground</a></p>",
        "id": 206005678,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596621757
    },
    {
        "content": "<p>let me look at what MIR we generate etc though</p>",
        "id": 206005762,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596621831
    },
    {
        "content": "<p>(gotta go for a bit I'll be back after lunch)</p>",
        "id": 206005845,
        "sender_full_name": "lqd",
        "timestamp": 1596621885
    },
    {
        "content": "<p>Yeah, I have to stop and go for my morning run :)</p>",
        "id": 206006433,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596622450
    },
    {
        "content": "<p>I'm still pursuing this a bit</p>",
        "id": 206006437,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596622454
    },
    {
        "content": "<p>I haven't quite given up yet ;)</p>",
        "id": 206006441,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596622459
    },
    {
        "content": "<p>I feel like there may be a PR here even if we <em>kept</em> <code>Locations::All</code></p>",
        "id": 206006489,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596622501
    },
    {
        "content": "<p>nice :)</p>",
        "id": 206006928,
        "sender_full_name": "lqd",
        "timestamp": 1596622927
    },
    {
        "content": "<p>ok, I looked a bit more into it. There are a few annoying cases I've not yet fully understood.</p>",
        "id": 206022676,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596634716
    },
    {
        "content": "<p>One of the easier ones if the yield type</p>",
        "id": 206022693,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596634725
    },
    {
        "content": "<p>The way we handle user-type annotations is a bit complicated, especially stuff like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"nc\">T1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"nc\">T2</span><span class=\"p\">)</span>: <span class=\"nc\">T3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 206022744,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596634757
    },
    {
        "content": "<p>but really I think all of the locations <em>have</em> a kind of location that can be ascribed</p>",
        "id": 206022766,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596634775
    }
]