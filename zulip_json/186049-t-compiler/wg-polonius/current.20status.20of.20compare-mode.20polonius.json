[
    {
        "content": "<p>Also, <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span>, what is the status of the work you were doing on compare-mode polonius ?</p>",
        "id": 175658645,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568404491
    },
    {
        "content": "<p>before going on vacation, the status was this: there was only one failing test in the UI suite, it was a stack overflow during fact generation, let me get my notes. (and there was one OOM in run-pass)</p>",
        "id": 175659169,
        "sender_full_name": "lqd",
        "timestamp": 1568404854
    },
    {
        "content": "<p>said <a href=\"https://hackmd.io/CjYB0fs4Q9CweyeTdKWyEg?view\" target=\"_blank\" title=\"https://hackmd.io/CjYB0fs4Q9CweyeTdKWyEg?view\">notes</a></p>",
        "id": 175659266,
        "sender_full_name": "lqd",
        "timestamp": 1568404934
    },
    {
        "content": "<p>however since then, run-pass was merged into the ui suite</p>",
        "id": 175659278,
        "sender_full_name": "lqd",
        "timestamp": 1568404949
    },
    {
        "content": "<p>(and more tests could have been added and not work I haven't checked recently and will do so soon)</p>",
        "id": 175659303,
        "sender_full_name": "lqd",
        "timestamp": 1568404975
    },
    {
        "content": "<p>that made the 2-3 problematic case from the run-pass into the ui suite</p>",
        "id": 175659327,
        "sender_full_name": "lqd",
        "timestamp": 1568404995
    },
    {
        "content": "<p>one of which is the OOM (and a bit hard to investigate)</p>",
        "id": 175659351,
        "sender_full_name": "lqd",
        "timestamp": 1568405020
    },
    {
        "content": "<p>the other two were more \"annoyances\" than blockers per se, fact generation made them slower (which would surely be blockers if the compare-mode was actually ran on CI, once it works)</p>",
        "id": 175659444,
        "sender_full_name": "lqd",
        "timestamp": 1568405063
    },
    {
        "content": "<p>so a lot slower I guess</p>",
        "id": 175659526,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568405132
    },
    {
        "content": "<p>ok, thanks, that helps, I remember the OOM but forgot it was connected to that work</p>",
        "id": 175659535,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568405140
    },
    {
        "content": "<p>I have been investigating the OOM but didn't yet locate the source of so many universal regions and outlives relations</p>",
        "id": 175659537,
        "sender_full_name": "lqd",
        "timestamp": 1568405140
    },
    {
        "content": "<p>the MIR is huge, the graphviz files make dot crash, etc</p>",
        "id": 175659558,
        "sender_full_name": "lqd",
        "timestamp": 1568405159
    },
    {
        "content": "<p>it may indeed be related to consts/statics</p>",
        "id": 175659623,
        "sender_full_name": "lqd",
        "timestamp": 1568405187
    },
    {
        "content": "<p>the test is very macro heavy to do many float computations IIRC (but I still haven't looked at it unpretty expanded)</p>",
        "id": 175659650,
        "sender_full_name": "lqd",
        "timestamp": 1568405219
    },
    {
        "content": "<p>but I had located the point where we materialize the 15GB in rustc</p>",
        "id": 175659701,
        "sender_full_name": "lqd",
        "timestamp": 1568405264
    },
    {
        "content": "<p>and that point was <a href=\"https://github.com/rust-lang/rust/blob/8301de16dafc81a3b5d94aa0707ad83bdb56a599/src/librustc_mir/borrow_check/nll/type_check/mod.rs#L229-L233\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/8301de16dafc81a3b5d94aa0707ad83bdb56a599/src/librustc_mir/borrow_check/nll/type_check/mod.rs#L229-L233\">here</a> and materialized 10948 x 136664 outlives constraints</p>",
        "id": 175659934,
        "sender_full_name": "lqd",
        "timestamp": 1568405413
    },
    {
        "content": "<blockquote>\n<p>so a lot slower I guess</p>\n</blockquote>\n<p>maybe not <em>a lot</em> per se, but slower, I'll get numbers; and generally refresh those results, as new failures must have crept through</p>",
        "id": 175660013,
        "sender_full_name": "lqd",
        "timestamp": 1568405515
    },
    {
        "content": "<p>ah also, there was the other check I added, which found some polonius errors which were not necessarily reported as rustc errors; I have noted some cases I managed to catch in the other list we talked about in the \"reboot\" meeting describing most of Polonius's status to my knowledge, quick link: <a href=\"https://hackmd.io/wGwGGRCKStiWBq9voP4e2A\" target=\"_blank\" title=\"https://hackmd.io/wGwGGRCKStiWBq9voP4e2A\">here</a> and some were related to statics (maybe all) so there may be some other fact generation issues around that I'll have to investigate more on this front as well</p>",
        "id": 175660271,
        "sender_full_name": "lqd",
        "timestamp": 1568405730
    },
    {
        "content": "<p>33GB <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span> </p>\n<div class=\"codehilite\"><pre><span></span>---- [ui (polonius)] ui/wrapping-int-combinations.rs stderr ----\nmemory allocation of 33550368768 bytes failed\n</pre></div>",
        "id": 175807422,
        "sender_full_name": "lqd",
        "timestamp": 1568637278
    },
    {
        "content": "<p>alright, I updated the <a href=\"https://hackmd.io/CjYB0fs4Q9CweyeTdKWyEg?view\" target=\"_blank\" title=\"https://hackmd.io/CjYB0fs4Q9CweyeTdKWyEg?view\">write-up</a> to include the newest test failures (since the run-pass ui migration), TLDR: one new (worse) OOM (similar to the previous one it seems), the other failures are tests we can bless</p>",
        "id": 175831515,
        "sender_full_name": "lqd",
        "timestamp": 1568653488
    },
    {
        "content": "<p>I've opened the PR \"fixing\" the other cases <a href=\"https://github.com/rust-lang/rust/pull/64554\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/64554\">here</a></p>",
        "id": 175933700,
        "sender_full_name": "lqd",
        "timestamp": 1568744212
    },
    {
        "content": "<p>(there's a new failure, a trivial one again, I'll fix it next week)</p>",
        "id": 176223604,
        "sender_full_name": "lqd",
        "timestamp": 1569007779
    },
    {
        "content": "<p>(\"trivial\", if we ignore the whole discussion about <code>'empty</code> cough)</p>",
        "id": 176406871,
        "sender_full_name": "lqd",
        "timestamp": 1569270838
    },
    {
        "content": "<p>I'll try to get a PR up that removes most of the Polonius compare mode differences up this week. After that there's just the <code>Locations::All</code> OOM  issues.</p>",
        "id": 176407168,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1569271036
    },
    {
        "content": "<p>the stack overflow generating facts on drop ?</p>",
        "id": 176407532,
        "sender_full_name": "lqd",
        "timestamp": 1569271280
    },
    {
        "content": "<p>That's fixed by the PR</p>",
        "id": 176407550,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1569271302
    },
    {
        "content": "<p>great!</p>",
        "id": 176407611,
        "sender_full_name": "lqd",
        "timestamp": 1569271329
    },
    {
        "content": "<p>did you ignore-compare-mode-polonius the new hrtb from where clause error ?</p>",
        "id": 176407637,
        "sender_full_name": "lqd",
        "timestamp": 1569271350
    },
    {
        "content": "<p>Currently, but I'll probably change to fixing the actual problem.</p>",
        "id": 176407669,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1569271385
    },
    {
        "content": "<p>wow, thanks Mattew that's likely going to be a bit more complicated :)</p>",
        "id": 176407769,
        "sender_full_name": "lqd",
        "timestamp": 1569271458
    },
    {
        "content": "<p>for the OOMs I think we've gone back and forth about this, IIRC at one point Location::All could be seen as a temporary hack, but still, correct in spirit</p>",
        "id": 176407925,
        "sender_full_name": "lqd",
        "timestamp": 1569271580
    },
    {
        "content": "<p>it generates a whole lot of <code>outlives</code> constraint even when not OOM-ing, like 3000+ for this \"simple looking\" <a href=\"https://github.com/lqd/borrow-check/blob/variant_prototype2/inputs/polonius-imprecision/polonius-imprecision.rs#L24-L36\" target=\"_blank\" title=\"https://github.com/lqd/borrow-check/blob/variant_prototype2/inputs/polonius-imprecision/polonius-imprecision.rs#L24-L36\">function</a></p>",
        "id": 176408106,
        "sender_full_name": "lqd",
        "timestamp": 1569271716
    },
    {
        "content": "<p>just changing representation could just move the problem in the datalog when materializing the subset TC (depending on the variant)</p>",
        "id": 176408277,
        "sender_full_name": "lqd",
        "timestamp": 1569271820
    },
    {
        "content": "<p>I attempted to remove the uses of <code>Location::All</code> that were causing the problem, but it resulted in a diagnostic regression (for normal NLL as well). I have a couple of ideas that would avoid this problem, but they're complicated enough that I don't really want to implement them until Polonius is more stable.</p>",
        "id": 176408297,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1569271833
    },
    {
        "content": "<p>but we could sidestep the issue with the equality-tracking work tho</p>",
        "id": 176408309,
        "sender_full_name": "lqd",
        "timestamp": 1569271842
    },
    {
        "content": "<p>yeah</p>",
        "id": 176408348,
        "sender_full_name": "lqd",
        "timestamp": 1569271869
    },
    {
        "content": "<p>a tad unfortunate, but we can probably fix it correctly</p>",
        "id": 176408414,
        "sender_full_name": "lqd",
        "timestamp": 1569271911
    },
    {
        "content": "<blockquote>\n<p>just changing representation could just move the problem in the datalog when materializing the subset TC (depending on the variant)</p>\n</blockquote>\n<p>In the future when we only do position dependent outlives on lifetimes where it matters this shouldn't be a problem.</p>",
        "id": 176408417,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1569271914
    },
    {
        "content": "<p>is  \"position-dependent outlives\" the more expected term for the equality-tracking variant we can't seem to name ?</p>",
        "id": 176408663,
        "sender_full_name": "lqd",
        "timestamp": 1569272058
    },
    {
        "content": "<p>No, I mean the normal location-sensitive version or whatever it's called.</p>",
        "id": 176408737,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1569272115
    },
    {
        "content": "<p>ah :)</p>",
        "id": 176408748,
        "sender_full_name": "lqd",
        "timestamp": 1569272125
    },
    {
        "content": "<p><code>Naive</code> or <code>DatafrogOpt</code></p>",
        "id": 176408829,
        "sender_full_name": "lqd",
        "timestamp": 1569272174
    },
    {
        "content": "<p><code>DatafrogOpt</code></p>",
        "id": 176408963,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1569272271
    },
    {
        "content": "<p>ATM it feels all variants kinda depend on Location::All but I don't know to what extent</p>",
        "id": 176408967,
        "sender_full_name": "lqd",
        "timestamp": 1569272273
    },
    {
        "content": "<p>equality-tracking only partially</p>",
        "id": 176409046,
        "sender_full_name": "lqd",
        "timestamp": 1569272305
    },
    {
        "content": "<p>Location-insensitive doesn't</p>",
        "id": 176409123,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1569272387
    },
    {
        "content": "<p>true - but you know what I mean, it's not meant to compute the complete results</p>",
        "id": 176409199,
        "sender_full_name": "lqd",
        "timestamp": 1569272411
    },
    {
        "content": "<p>we could be unifying them earlier, and only produce \"these lifetimes/regions/origins are equal\" tuples, no need to materialize the outlives constraints at every point</p>",
        "id": 176409203,
        "sender_full_name": "lqd",
        "timestamp": 1569272414
    },
    {
        "content": "<p>I <em>think</em></p>",
        "id": 176409263,
        "sender_full_name": "lqd",
        "timestamp": 1569272467
    }
]