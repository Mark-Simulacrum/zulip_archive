[
    {
        "content": "<p>I've mentioned in the list from a while ago, that there was possible work to be done in datafrog: I've looked at a couple of easy ones recently and will explain this here</p>",
        "id": 176497493,
        "sender_full_name": "lqd",
        "timestamp": 1569353442
    },
    {
        "content": "<p>the 1st thing was the idea of more specialized Relations, that is, right now they're all Vec of tuples</p>",
        "id": 176497657,
        "sender_full_name": "lqd",
        "timestamp": 1569353541
    },
    {
        "content": "<p>very general, always works, <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 176497672,
        "sender_full_name": "lqd",
        "timestamp": 1569353553
    },
    {
        "content": "<p>in some cases, they might consume too much memory, or we're not using the flexibility</p>",
        "id": 176497726,
        "sender_full_name": "lqd",
        "timestamp": 1569353599
    },
    {
        "content": "<p>example: <code>killed</code> we're propagating loans in origins along the CFG <em>if</em> the loan is not <code>killed</code> at a specific point</p>",
        "id": 176497849,
        "sender_full_name": "lqd",
        "timestamp": 1569353661
    },
    {
        "content": "<p>we're never using this relation to produce tuples</p>",
        "id": 176497902,
        "sender_full_name": "lqd",
        "timestamp": 1569353689
    },
    {
        "content": "<p>thus, we don't really need the data, we only need to know if a specific tuple is absent from this relation</p>",
        "id": 176497941,
        "sender_full_name": "lqd",
        "timestamp": 1569353716
    },
    {
        "content": "<p>for this use-case there could be a specific type of Relation, only interested in the absence of data, for example using a probabilistic data structure like a Bloom filter (or just a Set, that also works faster than the Vec, but uses more memory than a filter/bitmap)</p>",
        "id": 176498042,
        "sender_full_name": "lqd",
        "timestamp": 1569353770
    },
    {
        "content": "<p>the <code>killed</code> relation is usually pretty small I think, esp compared to the others, but <code>clap</code> had the biggest one at 1000 in our dataset (and I haven't looked at dumping p.rl.o facts yet, but <span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span>  has some of those benchmarks and then some, so maybe they'll have confirmation or infirmation on this) so the memory saving would be \"small\" in the absolute (but big in the relative reduction) for relatively the same query performance, at this size</p>",
        "id": 176498243,
        "sender_full_name": "lqd",
        "timestamp": 1569353938
    },
    {
        "content": "<p>after this <code>filter_anti</code> Leaper specialized case, there's also the \"filtering\" case</p>",
        "id": 176498294,
        "sender_full_name": "lqd",
        "timestamp": 1569353986
    },
    {
        "content": "<p><code>extend_with</code> is also somehow used for filtering, because <code>filter_with</code> is for semijoins with the source Relation</p>",
        "id": 176498421,
        "sender_full_name": "lqd",
        "timestamp": 1569354066
    },
    {
        "content": "<p>but it's made for <code>proposing</code> as well, so there's some work done in <code>count</code> to prepare for that (<a href=\"https://github.com/rust-lang/datafrog/blob/master/src/treefrog.rs#L364-L371\" target=\"_blank\" title=\"https://github.com/rust-lang/datafrog/blob/master/src/treefrog.rs#L364-L371\">here</a>) again it's not much but there are more counts than intersections in the filtering case so this could be done in <code>intersect</code> instead when filtering</p>",
        "id": 176498608,
        "sender_full_name": "lqd",
        "timestamp": 1569354194
    },
    {
        "content": "<p>in the same idea, we're not using <code>region_live_at</code> to produce tuples either</p>",
        "id": 176498717,
        "sender_full_name": "lqd",
        "timestamp": 1569354261
    },
    {
        "content": "<p>therefore another Relation dedicated to filtering could be tried</p>",
        "id": 176498741,
        "sender_full_name": "lqd",
        "timestamp": 1569354293
    },
    {
        "content": "<p>and there's a single index</p>",
        "id": 176498895,
        "sender_full_name": "lqd",
        "timestamp": 1569354400
    },
    {
        "content": "<p>just to have an example, what I've tried here was just an fx map of fx sets — the construction is slower, and the Relation is quite big, but it does make a relative difference on <code>clap</code> (which is the only benchmark I had tried in all these tests)</p>",
        "id": 176499022,
        "sender_full_name": "lqd",
        "timestamp": 1569354505
    },
    {
        "content": "<p>setting up the data shouldn't be much of a concern, esp compared to what we do right now, where rustc builds Vecs, which are cloned a bit, sorted and deduplicated, we materialize the free regions everywhere on the CFG, compute liveness and some things about initialization (which I assume is related to liveness as well), sometimes multiples times etc :) but we'll get there</p>",
        "id": 176499288,
        "sender_full_name": "lqd",
        "timestamp": 1569354707
    },
    {
        "content": "<p>ideally we should be getting the Relations, all ready to go, in the variants — but ofc there's slight caveat that Variables take ownership of them so this can probably only partially be done now; at least to fix the easy issue of the Hybrid variant</p>",
        "id": 176499532,
        "sender_full_name": "lqd",
        "timestamp": 1569354859
    },
    {
        "content": "<p>on another theme, all the Relations, Variables, Leapers etc are very generic in datafrog, and generics + a crate dependency = no inlining opportunities; so that's an easy PR right there :)</p>",
        "id": 176499640,
        "sender_full_name": "lqd",
        "timestamp": 1569354947
    },
    {
        "content": "<p>and lastly for now, is the WF-ness of leapjoins: <a href=\"https://github.com/rust-lang/datafrog/blob/master/src/treefrog.rs#L26\" target=\"_blank\" title=\"https://github.com/rust-lang/datafrog/blob/master/src/treefrog.rs#L26\">this assert</a> bakes the fact that a leapjoin should produce some tuples</p>",
        "id": 176499824,
        "sender_full_name": "lqd",
        "timestamp": 1569355056
    },
    {
        "content": "<p>however</p>\n<div class=\"codehilite\"><pre><span></span>errors(B, P) :-\n   requires(R, B, P),\n   invalidates(B, P),\n   region_live_at(R, P).\n</pre></div>\n\n\n<p>is only filtering <code>requires</code></p>",
        "id": 176499922,
        "sender_full_name": "lqd",
        "timestamp": 1569355107
    },
    {
        "content": "<p>relaxing this constraint wouldn't by itself make a lot of things faster, it's just the regular joins, however, it could allow removing some indexes</p>",
        "id": 176500016,
        "sender_full_name": "lqd",
        "timestamp": 1569355188
    },
    {
        "content": "<p>and maintaining those, especially with bigger relations like 2 out of the 3 here, can matter</p>",
        "id": 176500131,
        "sender_full_name": "lqd",
        "timestamp": 1569355224
    },
    {
        "content": "<p>there might be a small Leaper (like the ValueFilter/PrefixFilter) we could add to just pass through the source tuples, so that the leapjoin feels like tuples are produced even though they are just going down the chain to be filtered by the next 2 leapers</p>",
        "id": 176500228,
        "sender_full_name": "lqd",
        "timestamp": 1569355304
    },
    {
        "content": "<p>I haven't done anything for this last point, while for the others I have experiments here and there (which I accidentally depended on in the previous equality-tracking prototype) so if anyone is interested, this could be a thing to look at</p>",
        "id": 176500470,
        "sender_full_name": "lqd",
        "timestamp": 1569355449
    },
    {
        "content": "<p>(also another easy one, in moving from the original leapjoin API of an array of Leapers, to the tuple of Leapers datafrog uses now, we have \"lost\" the ability to have a leapjoin with a single <code>extend_with</code> leaper — again, not really efficiency-critical except maybe removing indexes, and that should be a one-line PR)</p>",
        "id": 176500699,
        "sender_full_name": "lqd",
        "timestamp": 1569355584
    },
    {
        "content": "<blockquote>\n<p>the <code>killed</code> relation is usually pretty small I think, esp compared to the others, but <code>clap</code> had the biggest one at 1000 in our dataset (and I haven't looked at dumping p.rl.o facts yet, but <span class=\"user-mention silent\" data-user-id=\"204115\">Albin Stjerna</span>  has some of those benchmarks and then some, so maybe they'll have confirmation or infirmation on this) so the memory saving would be \"small\" in the absolute (but big in the relative reduction) for relatively the same query performance, at this size</p>\n</blockquote>\n<p>I'll read and reply tomorrow, but yes, <code>killed</code> is relatively small. Still, I suspect it could do with compression. <a href=\"/user_uploads/4715/oqJOAre15ij4zHXuzGaEfSPW/input_sizes_boxplot.png\" target=\"_blank\" title=\"input_sizes_boxplot.png\">Here is a box plot of the number of tuples in my dataset!</a>!</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/oqJOAre15ij4zHXuzGaEfSPW/input_sizes_boxplot.png\" target=\"_blank\" title=\"Here is a box plot of the number of tuples in my dataset!\"><img src=\"/user_uploads/4715/oqJOAre15ij4zHXuzGaEfSPW/input_sizes_boxplot.png\"></a></div>",
        "id": 176502947,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1569357012
    },
    {
        "content": "<p>Speaking of this, we don't really need to compute liveness for <em>every</em> variable, right? We only need them if they \"connect\" to an origin either in the variable's type, or in a reference inside of a struct that implements its own drop? I think there is definitely some filtering that can be done here too.</p>",
        "id": 176503237,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1569357194
    },
    {
        "content": "<p>a lot of filtering can be done indeed, for example when a value ultimately flows into 'static</p>",
        "id": 176503475,
        "sender_full_name": "lqd",
        "timestamp": 1569357339
    },
    {
        "content": "<p>and thank you for the tuple numbers :)</p>",
        "id": 176503561,
        "sender_full_name": "lqd",
        "timestamp": 1569357385
    },
    {
        "content": "<p>Actually, I think all the inputs relating to variables are just used for filtering as well, but that may be positive filtering, but I suspect this is best solved at the fact generation phase (i.e. only emitting liveness inputs for variables we actually may care about the liveness of)</p>",
        "id": 176565784,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1569419174
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> In your benchmarks, how are you measuring time? Do you use the complete solve-time or just the \"borrow check\" part of it, ignoring liveness? I'm worried that liveness now occupies a very large portion of the runtime, given how the correlations between total runtime and input variable sizes look (number of variables and other very liveness-related inputs completely dominate.</p>",
        "id": 176565944,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1569419287
    },
    {
        "content": "<p>I really want to fix that benchmark mode</p>",
        "id": 176565953,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1569419296
    },
    {
        "content": "<p>I'm benchmarking the analysis itself so I'm only using the computation_start.elapsed() value, the rest is either counting reading files and interning, cloning data, or computing other things</p>",
        "id": 176566024,
        "sender_full_name": "lqd",
        "timestamp": 1569419366
    },
    {
        "content": "<p>(this should all probably go in a dedicated topic but yes liveness filtering should be probably done in rustc like it's done in NLL)</p>",
        "id": 176566210,
        "sender_full_name": "lqd",
        "timestamp": 1569419511
    },
    {
        "content": "<blockquote>\n<p>I'm benchmarking the analysis itself so I'm only using the computation_start.elapsed() value, the rest is either counting reading files and interning, cloning data, or computing other things</p>\n</blockquote>\n<p>Ok, so you measure liveness computations and everything?</p>",
        "id": 176567146,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1569420039
    },
    {
        "content": "<p>no liveness and initialization is done before creating the analysis timer, <a href=\"https://github.com/rust-lang/polonius/blob/master/polonius-engine/src/output/naive.rs#L51-L223\" target=\"_blank\" title=\"https://github.com/rust-lang/polonius/blob/master/polonius-engine/src/output/naive.rs#L51-L223\">this</a> is what I'm measuring</p>",
        "id": 176568663,
        "sender_full_name": "lqd",
        "timestamp": 1569420964
    },
    {
        "content": "<p>Ah, ok. Fair enough!</p>",
        "id": 176568768,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1569421039
    },
    {
        "content": "<p>So then we don't know if those explode completely</p>",
        "id": 176568778,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1569421047
    },
    {
        "content": "<p>Which, I guess, makes sense</p>",
        "id": 176568785,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1569421052
    },
    {
        "content": "<p>they do not explode completely on what I've tried, eg clap, where Naive + filtering is like &lt;300ms, including liveness/initialization/analysis and a couple clones here and there ^^</p>",
        "id": 176570270,
        "sender_full_name": "lqd",
        "timestamp": 1569422038
    },
    {
        "content": "<p>I'm really looking forward to some systematic benchmarking at some point though :)</p>",
        "id": 176573092,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1569423657
    },
    {
        "content": "<p>In particular if we could get continuous benchmarking</p>",
        "id": 176573127,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1569423674
    },
    {
        "content": "<p>I was trying to write benchmarks about the specialized-relations for datafrog antijoins idea, and stumbled upon the fact that <code>Relation::from_antijoin</code> does not work at all</p>",
        "id": 183959661,
        "sender_full_name": "lqd",
        "timestamp": 1576866069
    },
    {
        "content": "<p>(but I'll fix it, probably next week)</p>",
        "id": 183959703,
        "sender_full_name": "lqd",
        "timestamp": 1576866110
    }
]