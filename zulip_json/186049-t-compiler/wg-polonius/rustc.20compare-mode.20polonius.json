[
    {
        "content": "<p>btw <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I had <a href=\"https://github.com/rust-lang/rust/compare/master...lqd:polonius_tests\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/compare/master...lqd:polonius_tests\">this</a> to update the current polonius test expectations, was that what you wanted ? (if so I'll send a PR)</p>",
        "id": 165087675,
        "sender_full_name": "lqd",
        "timestamp": 1557246742
    },
    {
        "content": "<p>probably the most \"interesting\" thing is the comment on the 2 issue-40510 tests, as I'm not sure I understand how they would pass in the regular full-nll compare-mode: they don't have .nll.stderr files, are not ignored and yet the .stderr is expecting a warning <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 165088014,
        "sender_full_name": "lqd",
        "timestamp": 1557247010
    },
    {
        "content": "<p>so it's likely possible to make those 2 tests pass correctly, but I'm not familiar enough with the compare-mode tests to know how</p>",
        "id": 165088148,
        "sender_full_name": "lqd",
        "timestamp": 1557247116
    },
    {
        "content": "<blockquote>\n<p>btw <span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> I had <a href=\"https://github.com/rust-lang/rust/compare/master...lqd:polonius_tests\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/compare/master...lqd:polonius_tests\">this</a> to update the current polonius test expectations, was that what you wanted ? (if so I'll send a PR)</p>\n</blockquote>\n<p>Seems good, I guess the main bit of work is to investigate whether the errors are indeed expected.</p>",
        "id": 165090051,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557248493
    },
    {
        "content": "<blockquote>\n<p>I'm not sure I understand how they would pass in the regular full-nll compare-mode</p>\n</blockquote>\n<p>The full nll compare mode pr hadn't been merged yet.</p>",
        "id": 165091811,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1557249783
    },
    {
        "content": "<p>ah yes, thanks Matthew</p>",
        "id": 165092609,
        "sender_full_name": "lqd",
        "timestamp": 1557250376
    },
    {
        "content": "<blockquote>\n<p>... investigate whether the errors are indeed expected.</p>\n</blockquote>\n<p>that is, whether the blessed output reflects errors we expect, versus bugs in <code>-Zpolonius</code> ?</p>",
        "id": 165092760,
        "sender_full_name": "lqd",
        "timestamp": 1557250480
    },
    {
        "content": "<p>yeah so -- I guess changes to error messages seem fine</p>",
        "id": 165093695,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557251108
    },
    {
        "content": "<p>I just remember I had some short list of failures before that I had reviewed</p>",
        "id": 165093717,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557251132
    },
    {
        "content": "<p>the sheer number of them also makes me think they should be looked at anyway before opening a PR</p>",
        "id": 165093784,
        "sender_full_name": "lqd",
        "timestamp": 1557251165
    },
    {
        "content": "<p>this list of failures looks much larger</p>",
        "id": 165093814,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557251170
    },
    {
        "content": "<p>like, the list I had before was ~22 tests</p>",
        "id": 165093823,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557251182
    },
    {
        "content": "<p>not sure what changed</p>",
        "id": 165093827,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557251186
    },
    {
        "content": "<p>yeah same</p>",
        "id": 165093829,
        "sender_full_name": "lqd",
        "timestamp": 1557251187
    },
    {
        "content": "<p>I feel something changed indeed :) I'll keep working on that</p>",
        "id": 165093848,
        "sender_full_name": "lqd",
        "timestamp": 1557251209
    },
    {
        "content": "<p>the smoke tests ensure the basic things still work so there's at least that, the rest might have regressed discreetly</p>",
        "id": 165094021,
        "sender_full_name": "lqd",
        "timestamp": 1557251339
    },
    {
        "content": "<p>hi</p>",
        "id": 165100470,
        "sender_full_name": "lokalmatador",
        "timestamp": 1557255720
    },
    {
        "content": "<p>Polonius compare mode compares against NLL compare mode, so the diff will be smaller with <a href=\"https://github.com/rust-lang/rust/issues/60171\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/60171\">#60171</a> merged</p>",
        "id": 165100934,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1557256015
    },
    {
        "content": "<p>yeah I'll rebase on top of <a href=\"https://github.com/rust-lang/rust/issues/60171\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/60171\">#60171</a> soon to see how it changes things, a smaller diff will be indeed much easier to analyze/bisect</p>",
        "id": 165103690,
        "sender_full_name": "lqd",
        "timestamp": 1557257932
    },
    {
        "content": "<p><code>test result: FAILED. 5443 passed; 19 failed</code> now that's more like it <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 165244077,
        "sender_full_name": "lqd",
        "timestamp": 1557401708
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> what changed? just a rebase?</p>",
        "id": 165245847,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557403524
    },
    {
        "content": "<p>retesting over matthew's <a href=\"https://github.com/rust-lang/rust/issues/60171\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/60171\">#60171</a> indeed</p>",
        "id": 165246209,
        "sender_full_name": "lqd",
        "timestamp": 1557403893
    },
    {
        "content": "<p>(which hasn't landed yet)</p>",
        "id": 165246215,
        "sender_full_name": "lqd",
        "timestamp": 1557403904
    },
    {
        "content": "<p>the other 200 differences were because that compare-mode polonius runs with NLLs while the NLL compare-mode runs in migrate-mode</p>",
        "id": 165246278,
        "sender_full_name": "lqd",
        "timestamp": 1557403945
    },
    {
        "content": "<p>with <a href=\"https://github.com/rust-lang/rust/issues/60171\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/60171\">#60171</a> the NLL compare-mode will run with the regular NLLs</p>",
        "id": 165246402,
        "sender_full_name": "lqd",
        "timestamp": 1557404052
    },
    {
        "content": "<p>OK so <a href=\"https://github.com/lqd/rust/commit/c40be9633d1eef5cd89e8fc934b1c62de3493a59\" target=\"_blank\" title=\"https://github.com/lqd/rust/commit/c40be9633d1eef5cd89e8fc934b1c62de3493a59\">here</a> are these 19 tests behaving differently under polonius (in a future where <a href=\"https://github.com/rust-lang/rust/issues/60171\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/60171\">#60171</a> has switched the NLL compare-mode to full NLLs), and I've done a quick WIP first pass at analyzing the results <a href=\"https://hackmd.io/CjYB0fs4Q9CweyeTdKWyEg\" target=\"_blank\" title=\"https://hackmd.io/CjYB0fs4Q9CweyeTdKWyEg\">here</a>.</p>",
        "id": 165272454,
        "sender_full_name": "lqd",
        "timestamp": 1557422996
    },
    {
        "content": "<p>I'll keep working on it this week, to make it actually presentable/understandable, add links and diffs etc, in addition to filling in more content ofc -- so that it can be validated/invalidated.</p>",
        "id": 165272513,
        "sender_full_name": "lqd",
        "timestamp": 1557423006
    },
    {
        "content": "<p>That being said, it seems to me at least 5 tests should be ignored or a dedicated polonius output identical to the NLL one should be added. Then, a couple are duplicates or similar to other failures. Then, some slight expected differences in diagnostics handling. And a handful \"looking interesting\", that is, requiring a more in-depth investigation.</p>",
        "id": 165272533,
        "sender_full_name": "lqd",
        "timestamp": 1557423016
    },
    {
        "content": "<p>(I also wanted to check a thing with Matthew later about the NLL and Polonius compare modes, in that, in cases where the polonius output was expected to be the same as the NLL one, but the latter was manually tested via revisions instead of the compare-mode, whether we should add polonius revisions there as well)</p>",
        "id": 165273464,
        "sender_full_name": "lqd",
        "timestamp": 1557423854
    },
    {
        "content": "<p>(I also added \"correctness and testsuite analysis\" to the roadmap like we mentioned yesterday -- and will do the meeting minutes PR soon, including the one from 2 weeks ago I apparently havenâ€™t done either...)</p>",
        "id": 165273797,
        "sender_full_name": "lqd",
        "timestamp": 1557424087
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> How do you run these tests by the way?</p>",
        "id": 165520355,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557748148
    },
    {
        "content": "<p>using x.py test, it has a set of flags to trigger the compare mode (and there's one for NLLs, and one for Polonius) like so <code>./x.py test -i --stage 1 src/test/ui --compare-mode polonius</code>, here for the ui test suite</p>",
        "id": 165522453,
        "sender_full_name": "lqd",
        "timestamp": 1557749955
    },
    {
        "content": "<p>also, the specific results are ran over <a href=\"https://github.com/rust-lang/rust/issues/60171\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/60171\">#60171</a> (which Felix is reviewing), so running them on master will produce 200 more failures or so</p>",
        "id": 165522588,
        "sender_full_name": "lqd",
        "timestamp": 1557750092
    },
    {
        "content": "<p>Ah, ok, and I haven't merged in a while either</p>",
        "id": 165540821,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557762509
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 165540832,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1557762513
    },
    {
        "content": "<p>update: <a href=\"https://hackmd.io/CjYB0fs4Q9CweyeTdKWyEg?view\" target=\"_blank\" title=\"https://hackmd.io/CjYB0fs4Q9CweyeTdKWyEg?view\">the first pass</a> feels somewhat presentable (now a pause to do the meeting minutes PR I've been forgetting) and then hopefully fill more content in this document if I can</p>",
        "id": 165573531,
        "sender_full_name": "lqd",
        "timestamp": 1557785186
    },
    {
        "content": "<p>hey <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> I was wondering about cases like <a href=\"https://github.com/rust-lang/rust/blob/8fa44c061b7d2db63eed229810f34f1e13633eea/src/test/ui/borrowck/issue-45983.rs\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/8fa44c061b7d2db63eed229810f34f1e13633eea/src/test/ui/borrowck/issue-45983.rs\">this</a> in compare mode. The Polonius output is the same as the NLL output, and the test is ignored in NLL compare mode and manually checked via revisions. Would you say that we should ignore them in polonius compare-mode, add the expected Polonius output, by having dedicated revisions, each time tests are constructed in this manner ?</p>",
        "id": 165613999,
        "sender_full_name": "lqd",
        "timestamp": 1557833382
    },
    {
        "content": "<p>(or maybe there was a compare-mode feature one could use for these cases where one test should be similar to another existing one, for the cases like these where most existing things should continue working as-is in the new feature superset)</p>",
        "id": 165614288,
        "sender_full_name": "lqd",
        "timestamp": 1557833707
    },
    {
        "content": "<p>Ignoring or adding a revision sounds good.</p>",
        "id": 165617053,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1557836616
    },
    {
        "content": "<p>thanks! For these most obvious ones I was thinking to both ignore them and open an issue similar to what we have for NLLs coverage about revisions: \"before long, review the uses of '// ignore' in polonius mode to ensure good coverage\" as these 4-5 tests are right now literally testing only the NLL part, and failing in compare-mode only. just until things are more \"proven\" (and CI gated), not have too many revisions testing the same things, nll/migrate/polonius * 2015/2018 to maintain, etc</p>",
        "id": 165626174,
        "sender_full_name": "lqd",
        "timestamp": 1557843617
    },
    {
        "content": "<p>in the current failures analysis <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I ended up with this <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=9c346b9552cb79f1153554628826e0d8\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=9c346b9552cb79f1153554628826e0d8\">interesting error</a>. I talked about it with Matthew <a href=\"https://hackmd.io/ZNVf2aqJTPC4mOQP0rZenQ?view#31-%E2%80%94-The-one-I-looked-at-most-a-loop-from-rand\" target=\"_blank\" title=\"https://hackmd.io/ZNVf2aqJTPC4mOQP0rZenQ?view#31-%E2%80%94-The-one-I-looked-at-most-a-loop-from-rand\">here</a> and they seem to think it's a problem in fact generation. Since it looks like a simplified version of the dreaded 47680 I wondered if you thought it should be fixed in rustc or in the polonius analysis <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 169557297,
        "sender_full_name": "lqd",
        "timestamp": 1562152375
    },
    {
        "content": "<p>in that the loan from the previous iteration of the loop should be <code>killed</code> or not considered live</p>",
        "id": 169557469,
        "sender_full_name": "lqd",
        "timestamp": 1562152674
    },
    {
        "content": "<p>(this is one of the cases where I'd have found useful to have datalog provenance, so I might look into hacking a simple helper into datafrog)</p>",
        "id": 169558133,
        "sender_full_name": "lqd",
        "timestamp": 1562153446
    },
    {
        "content": "<p>and the MIR annotated with some facts: <a href=\"https://gist.github.com/lqd/44fb87e709d36e0b2ddc5949dde4243e\" target=\"_blank\" title=\"https://gist.github.com/lqd/44fb87e709d36e0b2ddc5949dde4243e\">here</a> (some of the annotations I added are artifacts of Polonius interning so I could better follow the datalog provenance)</p>",
        "id": 169641397,
        "sender_full_name": "lqd",
        "timestamp": 1562240772
    },
    {
        "content": "<p>I <em>think</em> I got it</p>",
        "id": 169659066,
        "sender_full_name": "lqd",
        "timestamp": 1562257439
    },
    {
        "content": "<p>the loans are not killed because we only generate those facts for <em>assignments</em> (and assignments to locals only, not projections, as Matthew mentioned). This case here is not an assignment, it's a call where the destination place has loans. This specific case seems to pass when I kill <em>those</em> loans</p>",
        "id": 169659296,
        "sender_full_name": "lqd",
        "timestamp": 1562257740
    },
    {
        "content": "<p>it also makes <code>borrowck/borrowck-lend-flow-loop.rs</code> pass, so there's that.<br>\n(but barely none of the <code>rand</code> reductions, even though I initially started with those, before mixing in a little bit of <a href=\"https://github.com/rust-lang/rust/issues/47680\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/47680\">#47680</a>)</p>",
        "id": 169660251,
        "sender_full_name": "lqd",
        "timestamp": 1562258829
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> rn I'm doing <a href=\"https://github.com/rust-lang/rust/blob/8301de16dafc81a3b5d94aa0707ad83bdb56a599/src/librustc_mir/borrow_check/nll/constraint_generation.rs#L130-L140\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/8301de16dafc81a3b5d94aa0707ad83bdb56a599/src/librustc_mir/borrow_check/nll/constraint_generation.rs#L130-L140\">this</a> when visiting a terminator call, do I also need to take special care of possible edge cases with calls, or can I just kill the loans like so on the call's destination ?</p>",
        "id": 169662274,
        "sender_full_name": "lqd",
        "timestamp": 1562261402
    },
    {
        "content": "<p>That should be fine, although you should probably try to only do it on the return edge from the call (not the unwind edge).</p>",
        "id": 169668551,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1562270647
    },
    {
        "content": "<p>It may also be more effective to kill loans on <code>StorageDead</code> statements instead, that may need investigation though.</p>",
        "id": 169668565,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1562270708
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> ok I see, thanks a lot for all the help :)</p>",
        "id": 169669083,
        "sender_full_name": "lqd",
        "timestamp": 1562271576
    },
    {
        "content": "<p>plot twist, the test passes for  rustc <code>-Zpolonius</code>, but polonius itself actually still reports an error (it used to report 2 before the change), so that's strange. As for the analysis, the remaining error might be because in a single mir statement, the loan is invalidated at the start point but killed at the mid point <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> I'll keep tracing</p>",
        "id": 169700424,
        "sender_full_name": "lqd",
        "timestamp": 1562324303
    },
    {
        "content": "<p>I may have a theory, related to invalidating and killing loans in the same mir statement: that happens at 2 different points. The computation of the region/provenance seems to include the statement's start point (because the loans are killed on mid points) and the mid point (because we stop propagating the TC from kill points), and if the region is live and contains the loan (eg in a loop) there will be an error at the start point. I'm not sure I know the reasons why <code>invalidates</code>/<code>killed</code> are at the locations they are, but maybe they should be at the same point (at least if the loan is the same) ? (This is, I believe, causing the 2nd error reported by Polonius I mentioned in the previous message â€” but I'd still like to understand why rustc didn't mind this error though)</p>",
        "id": 169743917,
        "sender_full_name": "lqd",
        "timestamp": 1562373272
    },
    {
        "content": "<p>If you're not killing loans for <code>StorageDead</code> statements, then you'll need to change this <a href=\"https://github.com/rust-lang/rust/blob/b820c761744db080ff7a4ba3ac88d259065cb836/src/librustc_mir/borrow_check/nll/invalidation.rs#L197\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/b820c761744db080ff7a4ba3ac88d259065cb836/src/librustc_mir/borrow_check/nll/invalidation.rs#L197\">https://github.com/rust-lang/rust/blob/b820c761744db080ff7a4ba3ac88d259065cb836/src/librustc_mir/borrow_check/nll/invalidation.rs#L197</a> to <code>Shallow(None)</code>.</p>",
        "id": 169757202,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1562399826
    },
    {
        "content": "<p>The kill and the invalidates facts are at the same point because we want this to be an error:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// L</span>\n<span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// This both kills and invalidates the loan at L</span>\n<span class=\"n\">drop</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>",
        "id": 169757259,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1562399994
    },
    {
        "content": "<p>ah interesting thank you, I think some loans are indeed killed on StorageDead, it didnâ€™t seem to be all the time (or maybe not and I'm just thinking about invalidations)</p>",
        "id": 169757363,
        "sender_full_name": "lqd",
        "timestamp": 1562400090
    },
    {
        "content": "<p>yes indeed; theyâ€™re lowered as 2 \"polonius points\" today, for the same \"MIR point\", I wonder if this was linked to 2PB or something else</p>",
        "id": 169757517,
        "sender_full_name": "lqd",
        "timestamp": 1562400333
    },
    {
        "content": "<p>the rules are setup to handle this, invalidating L on the start point and killing L on the mid point, the loan being live on start makes your example  an error</p>",
        "id": 169757926,
        "sender_full_name": "lqd",
        "timestamp": 1562401089
    },
    {
        "content": "<p>(regardless of the kill)</p>",
        "id": 169757942,
        "sender_full_name": "lqd",
        "timestamp": 1562401149
    },
    {
        "content": "<p>so this lowering works for sure in most cases, but not where in MIR a loan is both invalidated and killed at the same point <em>and</em> the same loan is added to a \"borrow region\" (which also happens in mid points IIRC)</p>",
        "id": 169758167,
        "sender_full_name": "lqd",
        "timestamp": 1562401584
    },
    {
        "content": "<p>making eg this an error</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">buf</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">loop</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">buf</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">index_mut</span><span class=\"p\">(</span><span class=\"n\">buf</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// accepted by NLL, rejected by Polonius</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 169758285,
        "sender_full_name": "lqd",
        "timestamp": 1562401806
    },
    {
        "content": "<p>(because the loan from the previous iteration will be live on these 2 points)</p>",
        "id": 169758619,
        "sender_full_name": "lqd",
        "timestamp": 1562402464
    },
    {
        "content": "<p>and if my understanding is correct, it's also the cause of this additional error</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Vec</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"k\">loop</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// Polonius rejects this as an assignment to borrowed value</span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// here we also have the expected error: y doesn&#39;t live long enough</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>(so it's like an off-by-one error where in these specific cases the regions contain the loans a couple points too long)</p>",
        "id": 169759349,
        "sender_full_name": "lqd",
        "timestamp": 1562404075
    },
    {
        "content": "<p>The fix might be obvious but it's not yet the case to me. Things I've tried which didn't work:</p>\n<ul>\n<li>emitting the kill at the start point: only shortens the region by one point (the loan dies between the start point and the mid point, because the rules propagate <code>requires</code> between points P&amp;Q if P is !killed) so doesn't change much in our case</li>\n<li>considering the loan dead a bit earlier: propagating if Q is !killed (and emitting the kill at the start point), even more rustc tests fail</li>\n<li>filtering the error if the loan is killed in the successor point: other polonius tests fail so it doesn't seem the way to go either</li>\n</ul>",
        "id": 169868175,
        "sender_full_name": "lqd",
        "timestamp": 1562592220
    },
    {
        "content": "<blockquote>\n<p>It may also be more effective to kill loans on <code>StorageDead</code> statements instead, that may need investigation though.</p>\n</blockquote>\n<p>this should definitely be ok</p>",
        "id": 170440042,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562667241
    },
    {
        "content": "<p>So, <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span>, reading back over the log, a few questions:</p>\n<ul>\n<li>Did you wind up resolving the original problem?</li>\n<li>If so, how precisely?</li>\n</ul>",
        "id": 170440215,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562667473
    },
    {
        "content": "<p>unfortunately not</p>",
        "id": 170440259,
        "sender_full_name": "lqd",
        "timestamp": 1562667487
    },
    {
        "content": "<p>It seems like the \"points\" we use for polonius may be insufficiently precise</p>",
        "id": 170440268,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562667504
    },
    {
        "content": "<p>/me thinks</p>",
        "id": 170440280,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562667518
    },
    {
        "content": "<p>I only narrowed it down to this pattern of loops causing problems</p>",
        "id": 170440283,
        "sender_full_name": "lqd",
        "timestamp": 1562667524
    },
    {
        "content": "<blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">buf</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">loop</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">buf</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">index_mut</span><span class=\"p\">(</span><span class=\"n\">buf</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// accepted by NLL, rejected by Polonius</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n</blockquote>\n<p>this pattern?</p>",
        "id": 170440296,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562667541
    },
    {
        "content": "<p>in general yes</p>",
        "id": 170440314,
        "sender_full_name": "lqd",
        "timestamp": 1562667560
    },
    {
        "content": "<p>where presumably <code>index_mut</code> is <code>fn(&amp;mut u32) -&gt; &amp;mut 32</code></p>",
        "id": 170440317,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562667562
    },
    {
        "content": "<p>but in mir it's a bit more precise</p>",
        "id": 170440320,
        "sender_full_name": "lqd",
        "timestamp": 1562667566
    },
    {
        "content": "<p><a href=\"https://gist.github.com/lqd/44fb87e709d36e0b2ddc5949dde4243e#file-loopdydoo-mir-L75-L78\" target=\"_blank\" title=\"https://gist.github.com/lqd/44fb87e709d36e0b2ddc5949dde4243e#file-loopdydoo-mir-L75-L78\">here</a></p>",
        "id": 170440349,
        "sender_full_name": "lqd",
        "timestamp": 1562667596
    },
    {
        "content": "<p>my \"fix\" only fixes one of the errors (the bottom one) but not the first where we have the invalidation preceding the kill, but the \"previous iteration\" loan is live on start</p>",
        "id": 170440451,
        "sender_full_name": "lqd",
        "timestamp": 1562667659
    },
    {
        "content": "<p>note that this passes in rustc though, which is another strange thing</p>",
        "id": 170440499,
        "sender_full_name": "lqd",
        "timestamp": 1562667718
    },
    {
        "content": "<p>Did you try to kill loans on StorageDead?</p>",
        "id": 170440579,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562667750
    },
    {
        "content": "<p>in that polonius -engine returns an error but rustc seems to ignore it (maybe a remnant of switching from computing all the live loans to errors)</p>",
        "id": 170440592,
        "sender_full_name": "lqd",
        "timestamp": 1562667760
    },
    {
        "content": "<p>Huh</p>",
        "id": 170440606,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562667774
    },
    {
        "content": "<p>That <em>is</em> strange</p>",
        "id": 170440609,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562667778
    },
    {
        "content": "<p>no I have not but I can try this quick I think</p>",
        "id": 170440622,
        "sender_full_name": "lqd",
        "timestamp": 1562667791
    },
    {
        "content": "<p>And a bit disturbing :)</p>",
        "id": 170440624,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562667793
    },
    {
        "content": "<p>exactly :)</p>",
        "id": 170440630,
        "sender_full_name": "lqd",
        "timestamp": 1562667801
    },
    {
        "content": "<p>It seems like  </p>\n<div class=\"codehilite\"><pre><span></span>StorageDead(_5);                 // bb4[4]: p32-33\n</pre></div>\n\n\n<p>ought to kill L2</p>",
        "id": 170440639,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562667811
    },
    {
        "content": "<p>(er, wait, is that right?)</p>",
        "id": 170440653,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562667831
    },
    {
        "content": "<p>I'm killing it at the call rn</p>",
        "id": 170440659,
        "sender_full_name": "lqd",
        "timestamp": 1562667840
    },
    {
        "content": "<p>Yes, that's right.</p>",
        "id": 170440701,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562667845
    },
    {
        "content": "<p>Well, both of them basically destroy the value of <code>_5</code></p>",
        "id": 170440708,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562667862
    },
    {
        "content": "<p>although the semantics of <code>StorageDead</code> <em>are</em> pretty unclear</p>",
        "id": 170440716,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562667874
    },
    {
        "content": "<p>yeah, I also feel we've seen with the generators optimizations that we might not always have StorageDead's everywhere</p>",
        "id": 170440728,
        "sender_full_name": "lqd",
        "timestamp": 1562667890
    },
    {
        "content": "<p>so it seemed safer at the call, but it wasn't enough anyway :)</p>",
        "id": 170440754,
        "sender_full_name": "lqd",
        "timestamp": 1562667913
    },
    {
        "content": "<p>for unwind paths we don't generate them all the time</p>",
        "id": 170440756,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562667914
    },
    {
        "content": "<p>killing it at the StorageDead fixes the error darn it</p>",
        "id": 170440852,
        "sender_full_name": "lqd",
        "timestamp": 1562668008
    },
    {
        "content": "<p>well so I think both spots are correct to do the kill</p>",
        "id": 170440942,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562668085
    },
    {
        "content": "<p>I think you could make a test where the call is required</p>",
        "id": 170440953,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562668101
    },
    {
        "content": "<p>although i'm wondering what it is :P</p>",
        "id": 170440976,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562668141
    },
    {
        "content": "<p>it might be that it's hard to do because rustc introduces temporaries</p>",
        "id": 170440985,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562668150
    },
    {
        "content": "<blockquote>\n<p>killing it at the StorageDead fixes the error darn it</p>\n</blockquote>\n<p>were you saying <em>just</em> killing it at <code>StorageDead</code> is sufficient?</p>",
        "id": 170440993,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562668166
    },
    {
        "content": "<p>yes</p>",
        "id": 170441267,
        "sender_full_name": "lqd",
        "timestamp": 1562668392
    },
    {
        "content": "<p>just killing it at the storagedead was sufficient</p>",
        "id": 170441283,
        "sender_full_name": "lqd",
        "timestamp": 1562668404
    },
    {
        "content": "<p>to stop both errors, I think (I have to juggle branches ;)</p>",
        "id": 170441297,
        "sender_full_name": "lqd",
        "timestamp": 1562668424
    },
    {
        "content": "<p>are there complications on killing loans on StorageDead ? like, I was wondering whether it wouldn't \"lengthen\" the regions</p>",
        "id": 170441404,
        "sender_full_name": "lqd",
        "timestamp": 1562668516
    },
    {
        "content": "<p>so I think that if you have <code>foo = bar(..)</code> where <code>foo</code> was already initialized, we will always generate a temporary intermediate</p>",
        "id": 170441422,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562668534
    },
    {
        "content": "<p>this is just generally true for <code>foo = ...</code></p>",
        "id": 170441426,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562668540
    },
    {
        "content": "<blockquote>\n<p>are there complications on killing loans on StorageDead ? like, I was wondering whether it wouldn't \"lengthen\" the regions</p>\n</blockquote>\n<p>say more? I've always assumed we would kill loans there, I think it's actually kinda <em>necessary</em></p>",
        "id": 170441483,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562668564
    },
    {
        "content": "<p>maybe my thinking is too focused on this example</p>",
        "id": 170441518,
        "sender_full_name": "lqd",
        "timestamp": 1562668602
    },
    {
        "content": "<p>where the StorageDead is a bit later than the call</p>",
        "id": 170441543,
        "sender_full_name": "lqd",
        "timestamp": 1562668628
    },
    {
        "content": "<p>so I didn't want to unexpectedly kills loan \"too late\" but it doesn't look like it'd matter, esp if it's necessary to do so :)</p>",
        "id": 170441631,
        "sender_full_name": "lqd",
        "timestamp": 1562668692
    },
    {
        "content": "<p>I'll try this out this afternoon, it'd be super nice to have this taken care of</p>",
        "id": 170441668,
        "sender_full_name": "lqd",
        "timestamp": 1562668744
    },
    {
        "content": "<p>ah, I see what you mean</p>",
        "id": 170441761,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562668808
    },
    {
        "content": "<p>I mean I agree that we should kill loans at the call return point, too</p>",
        "id": 170441779,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562668832
    },
    {
        "content": "<p>though I'm trying to come up with an example that would show why :)</p>",
        "id": 170441785,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562668839
    },
    {
        "content": "<p>:)</p>",
        "id": 170441794,
        "sender_full_name": "lqd",
        "timestamp": 1562668848
    },
    {
        "content": "<p>(it may be that you have to write MIR by hand to show why)</p>",
        "id": 170441814,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562668872
    },
    {
        "content": "<p>can we simply kill loans at both mir statements or do we have to somehow kill at only one of the two depending on the situation ?</p>",
        "id": 170441846,
        "sender_full_name": "lqd",
        "timestamp": 1562668921
    },
    {
        "content": "<p>seems alright to me but I don't know</p>",
        "id": 170441903,
        "sender_full_name": "lqd",
        "timestamp": 1562668957
    },
    {
        "content": "<p>both is fine</p>",
        "id": 170442807,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562669793
    },
    {
        "content": "<p>sweet I'll try it soon :)</p>",
        "id": 170442839,
        "sender_full_name": "lqd",
        "timestamp": 1562669843
    },
    {
        "content": "<p>basically any time that the previous value of <code>x</code> is destroyed, we should be able to kill loans of <code>x</code></p>",
        "id": 170443094,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562670118
    },
    {
        "content": "<p>(or, as in this case, projections from <code>x</code>)</p>",
        "id": 170443150,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562670141
    },
    {
        "content": "<p>(note though that if <code>x</code> itself is borrowed (and not <code>*x</code>), then assigning to <code>x</code> may be an error itself)</p>",
        "id": 170443179,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562670171
    },
    {
        "content": "<p>it's true that we also don't handle projections now</p>",
        "id": 170443440,
        "sender_full_name": "lqd",
        "timestamp": 1562670454
    },
    {
        "content": "<p>yesssssssss (thanks Matthew and Niko, that's 2 less rustc regressions, and 7-10 of the different other minimizations I had)</p>",
        "id": 170452920,
        "sender_full_name": "lqd",
        "timestamp": 1562679055
    },
    {
        "content": "<p>only 2 failures left to go (everytime I rebase there's usually another new failure <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span>)</p>",
        "id": 170923734,
        "sender_full_name": "lqd",
        "timestamp": 1563218962
    },
    {
        "content": "<p>(hopefully I have fixed the cases related to assignments to projections, and only the drop data overflow remains, when asking for nll-facts)</p>",
        "id": 171016440,
        "sender_full_name": "lqd",
        "timestamp": 1563303462
    },
    {
        "content": "<p>I think I'll investigate the overflow in a follow-up PR</p>",
        "id": 171035070,
        "sender_full_name": "lqd",
        "timestamp": 1563318449
    },
    {
        "content": "<p>ok so the result of these last couple months of work on this: mostly complete <a href=\"https://hackmd.io/CjYB0fs4Q9CweyeTdKWyEg?view\" target=\"_blank\" title=\"https://hackmd.io/CjYB0fs4Q9CweyeTdKWyEg?view\">write-up</a>, and the PR <a href=\"https://github.com/rust-lang/rust/issues/62736\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/62736\">#62736</a> for the fixes and tests</p>",
        "id": 171035148,
        "sender_full_name": "lqd",
        "timestamp": 1563318553
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> thanks for the super quick review</p>",
        "id": 171118922,
        "sender_full_name": "lqd",
        "timestamp": 1563398724
    },
    {
        "content": "<p>also, agreed about your CI + tests comment</p>",
        "id": 171118945,
        "sender_full_name": "lqd",
        "timestamp": 1563398753
    },
    {
        "content": "<p>maybe we can enable them on CI after the correctness and perf investigations have advanced a bit more, at the very least so that we don't slow down CI too much either (the nll compare mode seemed to slow down enough that it's not run on all builders IIRC)</p>",
        "id": 171119202,
        "sender_full_name": "lqd",
        "timestamp": 1563398933
    },
    {
        "content": "<p>if we manage to enable full NLLs this year, maybe we can switch the compare mode to polonius without impacting things :) (not that it takes particularly long to run or anything; I'll think I'll time the 2 tomorrow to make sure, but I haven't noticed a big difference)</p>",
        "id": 171119248,
        "sender_full_name": "lqd",
        "timestamp": 1563399002
    },
    {
        "content": "<p>(I wonder which test suites do we run the nll compare mode on, only <code>ui</code> or some of the others)</p>",
        "id": 171119455,
        "sender_full_name": "lqd",
        "timestamp": 1563399181
    },
    {
        "content": "<p>ui and run-pass</p>",
        "id": 171120732,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1563400288
    },
    {
        "content": "<p>I've had some \"interesting\" behaviour on one of the run-pass tests earlier today, the float saturating cast one didn't want to terminate</p>",
        "id": 171120827,
        "sender_full_name": "lqd",
        "timestamp": 1563400391
    },
    {
        "content": "<p>in any case I'll keep working on the last error, try to quantify how long it takes to run, check the run-pass as well, and we can revisit this important question hopefully soon</p>",
        "id": 171121096,
        "sender_full_name": "lqd",
        "timestamp": 1563400658
    },
    {
        "content": "<p>(and likely rebase the PR even sooner than that, as another PR in the queue is going to update a lot of the blessed outputs :)</p>",
        "id": 171121210,
        "sender_full_name": "lqd",
        "timestamp": 1563400756
    },
    {
        "content": "<p>ah yes it's fact generation taking forever/OOM-ing on <code>run-pass/numbers-arithmetic/saturating-float-casts.rs</code></p>",
        "id": 171155532,
        "sender_full_name": "lqd",
        "timestamp": 1563444652
    },
    {
        "content": "<p>I guess we got ourselves a fact-generation benchmark</p>",
        "id": 171155578,
        "sender_full_name": "lqd",
        "timestamp": 1563444717
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/8301de16dafc81a3b5d94aa0707ad83bdb56a599/src/librustc_mir/borrow_check/nll/type_check/mod.rs#L229-L233\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/8301de16dafc81a3b5d94aa0707ad83bdb56a599/src/librustc_mir/borrow_check/nll/type_check/mod.rs#L229-L233\">this</a> is materializing 10948 x 136664 outlives constraints in this test (15GB+)</p>",
        "id": 171175296,
        "sender_full_name": "lqd",
        "timestamp": 1563460035
    },
    {
        "content": "<p>yay <a href=\"https://github.com/rust-lang/rust/issues/62736\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/62736\">#62736</a> landed</p>",
        "id": 171678413,
        "sender_full_name": "lqd",
        "timestamp": 1564049398
    },
    {
        "content": "<p>So, I've finally had a look at  issues/issue-38591.rs. The reason that this is failing only for Polonius is that we don't calculate liveness for variables with no free regions with normal NLL, but we generate facts for all variables with Polonius. This shouldn't be too hard to fix, but it's probably easier to wait until we have the final fact generation code for liveness.</p>",
        "id": 172399450,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1564824552
    },
    {
        "content": "<p>oh thanks for looking into it ! makes sense</p>",
        "id": 172402709,
        "sender_full_name": "lqd",
        "timestamp": 1564831058
    },
    {
        "content": "<p>Iâ€™m looking into \"interesting\" cases about statics, which Polonius dislikes for some unknown reason as of yet</p>",
        "id": 172402822,
        "sender_full_name": "lqd",
        "timestamp": 1564831290
    },
    {
        "content": "<p>but doesnâ€™t trigger errors when called by rustc so, yeah</p>",
        "id": 172402874,
        "sender_full_name": "lqd",
        "timestamp": 1564831378
    },
    {
        "content": "<blockquote>\n<p>So, I've finally had a look at  issues/issue-38591.rs. The reason that this is failing only for Polonius is that we don't calculate liveness for variables with no free regions with normal NLL, but we generate facts for all variables with Polonius. This shouldn't be too hard to fix, but it's probably easier to wait until we have the final fact generation code for liveness.</p>\n</blockquote>\n<p>This sounds a lot like it might interact with the liveness code I'm working on, right?</p>",
        "id": 172444744,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1564916011
    },
    {
        "content": "<p>yes</p>",
        "id": 172444989,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1564916500
    },
    {
        "content": "<p>Matthews's PR <a href=\"https://github.com/rust-lang/rust/issues/64749\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/64749\">#64749</a> has now landed <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> a lot of inconsequential diagnostics differences have been eliminated, and the last (known) bug in fact generation has been fixed!</p>",
        "id": 177330785,
        "sender_full_name": "lqd",
        "timestamp": 1570189208
    }
]