[
    {
        "content": "<p>Here's a proposal for solving some of the duplication problems, by adding a context shared by the components of the pipeline <a href=\"https://github.com/rust-lang/polonius/pull/134\" target=\"_blank\" title=\"https://github.com/rust-lang/polonius/pull/134\">https://github.com/rust-lang/polonius/pull/134</a></p>",
        "id": 177991977,
        "sender_full_name": "lqd",
        "timestamp": 1570891778
    },
    {
        "content": "<p>While it also allowed me to remove some cloning here and there, it mostly avoids computing initialization and liveness twice in the worst case of using the <code>Hybrid</code> variant with potential errors found during the pre-pass.</p>",
        "id": 177991984,
        "sender_full_name": "lqd",
        "timestamp": 1570891796
    },
    {
        "content": "<p>It also helps pave the way to using these potential errors to heavily prune the data the following variant uses (and which we have prototyped and know is a big optimization boost, but can't open a PR right now as it could hinder the illegal subset relations errors work)</p>",
        "id": 177992034,
        "sender_full_name": "lqd",
        "timestamp": 1570891812
    },
    {
        "content": "<p>let me know what you think :)</p>",
        "id": 177992039,
        "sender_full_name": "lqd",
        "timestamp": 1570891822
    },
    {
        "content": "<p>I’ll look more into it when I have time but COOL</p>",
        "id": 178023501,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1570947524
    },
    {
        "content": "<p>Also, about the leapjoins to joins: I thought leapjoins were an optimised form?!</p>",
        "id": 178023512,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1570947575
    },
    {
        "content": "<p>(when joining more than one predicate yeah. if you have only two, it's good to try both but regular joins should just do less work in that case — and if the relations happen to have the same key, you wouldn't even save an index, which is the other factor to take into account: sometimes a regular join + the index maintenance it'd require is more costly on bigger relations than a leapjoin on two relations)</p>",
        "id": 178031755,
        "sender_full_name": "lqd",
        "timestamp": 1570961440
    },
    {
        "content": "<p>Ok so my intuition wasn’t entirely off</p>",
        "id": 178043351,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1570982102
    },
    {
        "content": "<p>yes, and in this case it doesn't matter much, a difference of 1% (while I remember once trying a leapjoin in LocationInsensitive where it was a 7% pessimization)</p>",
        "id": 178047638,
        "sender_full_name": "lqd",
        "timestamp": 1570988924
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> I've pushed the latest changes: stop using allfacts altogether, and divide it in different contexts for each step (which also allowed cleaning up the signatures of initialization/liveness). No step can use another step's data, or overwrite it, etc.</p>",
        "id": 178095877,
        "sender_full_name": "lqd",
        "timestamp": 1571053738
    },
    {
        "content": "<p>Nice! I'll have a look. :)</p>",
        "id": 178096345,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1571054249
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> we can't remove the clones without rustc giving us ownership of all_facts</p>",
        "id": 178097071,
        "sender_full_name": "lqd",
        "timestamp": 1571054940
    },
    {
        "content": "<p>Aah ok</p>",
        "id": 178097088,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1571054961
    },
    {
        "content": "<p>some maybe, but not all</p>",
        "id": 178097098,
        "sender_full_name": "lqd",
        "timestamp": 1571054977
    },
    {
        "content": "<p>Is this recent? I remember moving out some stuff and that worked fine</p>",
        "id": 178097182,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1571055028
    },
    {
        "content": "<p>But ok I see</p>",
        "id": 178097188,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1571055037
    },
    {
        "content": "<p>nope, since always</p>",
        "id": 178097189,
        "sender_full_name": "lqd",
        "timestamp": 1571055038
    },
    {
        "content": "<p>you moved them out of the initial allfacts clone</p>",
        "id": 178097193,
        "sender_full_name": "lqd",
        "timestamp": 1571055046
    },
    {
        "content": "<p>Aaaaah ok I see</p>",
        "id": 178097195,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1571055053
    },
    {
        "content": "<p>That explains it</p>",
        "id": 178097214,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1571055073
    },
    {
        "content": "<p>compute cloned it before passing it to the variants</p>",
        "id": 178097215,
        "sender_full_name": "lqd",
        "timestamp": 1571055077
    },
    {
        "content": "<p>this is still done, but piecewise for each step context</p>",
        "id": 178097233,
        "sender_full_name": "lqd",
        "timestamp": 1571055109
    },
    {
        "content": "<p>we may take care of that at the same time as updating rustc to the T: FactTypes API, if we indeed plan to go on with that</p>",
        "id": 178097408,
        "sender_full_name": "lqd",
        "timestamp": 1571055257
    },
    {
        "content": "<p>(btw all the data is Copy/Clone so we could technically \"remove the clones\" but that wouldn't change much here: we'll want to remove the allocations)</p>",
        "id": 178097644,
        "sender_full_name": "lqd",
        "timestamp": 1571055495
    }
]