[
    {
        "content": "<p>I’ve been reimplementing illegal subset errors using placeholder loans, and it seems to work in tiny tests. Only in the Naive variant for now but this will work equally with DatafrogOpt (since it’s not using the full subset TC like the previous PR used to). I assumed we wanted to materialize those loans at the root of the cfg, but that’s not an information we currently have, so in the couple tests I was using the lowest point in the sorted cfg edges relation, is that sensible ? (with interning and the existing fact files it might not always work though)</p>",
        "id": 178405750,
        "sender_full_name": "lqd",
        "timestamp": 1571335386
    },
    {
        "content": "<p>(and it kinda throws a wrench into the <code>LocationInsensitive</code> variant as a quick filter pre-pass idea)</p>",
        "id": 178428068,
        "sender_full_name": "lqd",
        "timestamp": 1571351662
    },
    {
        "content": "<p>(to clarify: I mean <em>illegal subset errors</em> in general — not placeholder loans per se — \"throw a wrench\", as they aren't taken into account in the <code>LocationInsensitive</code> and thus <code>Hybrid</code> variants, and may always require running the full analysis if we can't approximate their absence quickly ?)</p>",
        "id": 178498025,
        "sender_full_name": "lqd",
        "timestamp": 1571422280
    },
    {
        "content": "<p>I've been wanting to revisit that blog post for a while now</p>",
        "id": 178786039,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571771355
    },
    {
        "content": "<p>I'm definitely convinced we want to take the \"placeholder loan\" approach--</p>",
        "id": 178786056,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571771366
    },
    {
        "content": "<p>if for no other reason than that I think you should be able to stop at any point and replace all the \"origins\" with sets of loans</p>",
        "id": 178786068,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571771377
    },
    {
        "content": "<p>without losing any information</p>",
        "id": 178786070,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571771380
    },
    {
        "content": "<p>but without placeholder loans, you can't do that</p>",
        "id": 178786091,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571771388
    },
    {
        "content": "<p>yeah it seems like the way to go indeed; wondering about how to pass the cfg root (if I've understood correctly) to \"seed\" them, and then eventually how to create those placeholder loans in rustc</p>",
        "id": 178786540,
        "sender_full_name": "lqd",
        "timestamp": 1571771497
    },
    {
        "content": "<p>besides the common thought of \"all the origins\" vs \"the ones interacting with potential errors\", I wonder if this \"stop at any point\" thought is related to incr. or the query system, eg if we could avoid borrowck-ing a MIR which hasn't incrementally changed (eg in an IDE context; but even outside of that, as iirc just changing some comments today would mark everything as needing to be recompiled) or reconsidering our roots in Frank's work and looking at different rustc sessions as the source of differential datalog updates</p>",
        "id": 178796387,
        "sender_full_name": "lqd",
        "timestamp": 1571776341
    },
    {
        "content": "<p>as I may still be on the road back from rustfest at the time of the meeting tomorrow, and Niko <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/planning.20meeting.202019.2E11.2E05/near/179972931\" title=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/planning.20meeting.202019.2E11.2E05/near/179972931\">preferred a WIP PR for placeholder loans</a> here it is so we can discuss more easily <a href=\"https://github.com/rust-lang/polonius/pull/137\" target=\"_blank\" title=\"https://github.com/rust-lang/polonius/pull/137\">https://github.com/rust-lang/polonius/pull/137</a></p>",
        "id": 180474185,
        "sender_full_name": "lqd",
        "timestamp": 1573522206
    },
    {
        "content": "<p>I guess we can just continue from here <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span></p>",
        "id": 181023543,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574089823
    },
    {
        "content": "<p>Meh, Zulip is ok</p>",
        "id": 181023556,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574089834
    },
    {
        "content": "<p>yeah the topic should be better :)</p>",
        "id": 181023578,
        "sender_full_name": "lqd",
        "timestamp": 1574089843
    },
    {
        "content": "<p>alright</p>",
        "id": 181023580,
        "sender_full_name": "lqd",
        "timestamp": 1574089845
    },
    {
        "content": "<p>I'm skimming the PR, but I guess we can establish our... \"goals\" for today</p>",
        "id": 181023606,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574089864
    },
    {
        "content": "<p>oh and -- we should figure out exactly which other dates we will meet :)</p>",
        "id": 181023614,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574089868
    },
    {
        "content": "<p>agreed</p>",
        "id": 181023632,
        "sender_full_name": "lqd",
        "timestamp": 1574089879
    },
    {
        "content": "<p>I created one calendar invite, I think I could make another for Wed, not sure if I can do more than that</p>",
        "id": 181023637,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574089881
    },
    {
        "content": "<p>\"one invite\", for tomorrow that is ?</p>",
        "id": 181023683,
        "sender_full_name": "lqd",
        "timestamp": 1574089919
    },
    {
        "content": "<p>(in addition to today's)</p>",
        "id": 181023727,
        "sender_full_name": "lqd",
        "timestamp": 1574089927
    },
    {
        "content": "<p>er, yes</p>",
        "id": 181023743,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574089944
    },
    {
        "content": "<p>wrt goals I was thinking:</p>\n<ul>\n<li>quickly go over the PR</li>\n<li>checking with you the approach and \"open questions\" (nbd really)<br>\n(cont)</li>\n</ul>",
        "id": 181023791,
        "sender_full_name": "lqd",
        "timestamp": 1574089977
    },
    {
        "content": "<p>Yeah</p>",
        "id": 181023810,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574089989
    },
    {
        "content": "<p>I think ideally we would try to end with the PR merged :)</p>",
        "id": 181023814,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574089995
    },
    {
        "content": "<p>possibly after tweaks</p>",
        "id": 181023821,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574090001
    },
    {
        "content": "<ul>\n<li>talking about implementing fact generation in rustc</li>\n<li>checking errors in rustc</li>\n<li>opening a rustc PR if time permits</li>\n</ul>",
        "id": 181023829,
        "sender_full_name": "lqd",
        "timestamp": 1574090010
    },
    {
        "content": "<p>right</p>",
        "id": 181023835,
        "sender_full_name": "lqd",
        "timestamp": 1574090012
    },
    {
        "content": "<p>that reminds me that</p>",
        "id": 181023845,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574090029
    },
    {
        "content": "<p>since my normal desktop server died</p>",
        "id": 181023851,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574090033
    },
    {
        "content": "<p>I acutally have to get my laptop to build rustc, I've never tried I don't think</p>",
        "id": 181023902,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574090047
    },
    {
        "content": "<p>oh :)</p>",
        "id": 181023910,
        "sender_full_name": "lqd",
        "timestamp": 1574090059
    },
    {
        "content": "<p>mostly this means running <code>apt-get</code> I .. hope</p>",
        "id": 181023925,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574090074
    },
    {
        "content": "<p>but anyway</p>",
        "id": 181023935,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574090085
    },
    {
        "content": "<p>let's look at the PR</p>",
        "id": 181023943,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574090091
    },
    {
        "content": "<p>let's do it</p>",
        "id": 181023949,
        "sender_full_name": "lqd",
        "timestamp": 1574090097
    },
    {
        "content": "<p>so a lot of the early commits are to the parser itself, for unit tests</p>",
        "id": 181023977,
        "sender_full_name": "lqd",
        "timestamp": 1574090113
    },
    {
        "content": "<p>and other basic to add facts to the inputs and output</p>",
        "id": 181024012,
        "sender_full_name": "lqd",
        "timestamp": 1574090136
    },
    {
        "content": "<p>and the most interesting one is <a href=\"https://github.com/rust-lang/polonius/pull/137/commits/31b79b5efe3e888f247c407171941e61280fc841\" target=\"_blank\" title=\"https://github.com/rust-lang/polonius/pull/137/commits/31b79b5efe3e888f247c407171941e61280fc841\">https://github.com/rust-lang/polonius/pull/137/commits/31b79b5efe3e888f247c407171941e61280fc841</a></p>",
        "id": 181024031,
        "sender_full_name": "lqd",
        "timestamp": 1574090156
    },
    {
        "content": "<blockquote>\n<p>only the Naive variant has these errors for now, until we're a bit more sure this is a valid direction, and then I'll apply the technique to the DatafrogOpt variant</p>\n</blockquote>",
        "id": 181024108,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574090191
    },
    {
        "content": "<p>we should discuss again whether we can remove <code>DatafrogOpt</code> for now (but not yet)</p>",
        "id": 181024133,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574090203
    },
    {
        "content": "<p>yeah I remember you don't like having many variants for now :)</p>",
        "id": 181024170,
        "sender_full_name": "lqd",
        "timestamp": 1574090228
    },
    {
        "content": "<blockquote>\n<p>I assumed the placeholder loans should be seeded into requires (AKA contains) at the root of the CFG, but getting this root uses an heuristic (the first edge in the cfg_edge relation) which probably holds for rustc and unit-tests, but not always for interned .facts files like we have in our input datasets, so maybe the root should be passed to the input with the other relations.</p>\n</blockquote>",
        "id": 181024182,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574090236
    },
    {
        "content": "<p>this seems not entirely clear</p>",
        "id": 181024191,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574090247
    },
    {
        "content": "<p>I sort of remember this now from when I was thinking about it</p>",
        "id": 181024196,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574090253
    },
    {
        "content": "<p>(and datafrogopt is mostly related to performance, which we're trying to put aside for now)</p>",
        "id": 181024198,
        "sender_full_name": "lqd",
        "timestamp": 1574090254
    },
    {
        "content": "<p>(right, I mostly just don't want to expend mental energy there yet)</p>",
        "id": 181024214,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574090266
    },
    {
        "content": "<p>what is not entirely clear, that the heuristic holds or that the loans need to be seeded at the root ?</p>",
        "id": 181024286,
        "sender_full_name": "lqd",
        "timestamp": 1574090290
    },
    {
        "content": "<p>well, both</p>",
        "id": 181024313,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574090304
    },
    {
        "content": "<p>but I meant more the latter</p>",
        "id": 181024316,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574090307
    },
    {
        "content": "<p>:)</p>",
        "id": 181024318,
        "sender_full_name": "lqd",
        "timestamp": 1574090308
    },
    {
        "content": "<p>in particular,</p>",
        "id": 181024334,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574090318
    },
    {
        "content": "<p>yeah I'm not sure about this either</p>",
        "id": 181024341,
        "sender_full_name": "lqd",
        "timestamp": 1574090324
    },
    {
        "content": "<p>I'm wondering if it suffices to seed at the root, it seems like you just want this to be true \"everywhere\"</p>",
        "id": 181024351,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574090334
    },
    {
        "content": "<p>I guess</p>",
        "id": 181024393,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574090362
    },
    {
        "content": "<p>so long as the placeholder region is never \"dead\" (which I think we already require)</p>",
        "id": 181024405,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574090375
    },
    {
        "content": "<p>then if you inject it at the root, it will flow to all <em>live</em> code at least</p>",
        "id": 181024413,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574090381
    },
    {
        "content": "<p>yeah</p>",
        "id": 181024429,
        "sender_full_name": "lqd",
        "timestamp": 1574090394
    },
    {
        "content": "<p>also I was, maybe wrongly, trying to avoid cases where we materialize something \"everywhere\" (to try to repeat the OOM-cases)</p>",
        "id": 181024498,
        "sender_full_name": "lqd",
        "timestamp": 1574090424
    },
    {
        "content": "<p>I'm not sure if it's a problem for it not to reach dead code</p>",
        "id": 181024505,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574090429
    },
    {
        "content": "<p>this is what I was pondering</p>",
        "id": 181024507,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574090431
    },
    {
        "content": "<p>but regardless it seems like it'd be \"simpler\" to just inject everywhere</p>",
        "id": 181024520,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574090437
    },
    {
        "content": "<blockquote>\n<p>also I was, maybe wrongly, trying to avoid cases where we materialize something \"everywhere\"</p>\n</blockquote>\n<p>no, I mean this is not wrong</p>",
        "id": 181024531,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574090443
    },
    {
        "content": "<p>it surely has a runtime cost,</p>",
        "id": 181024538,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574090450
    },
    {
        "content": "<p>or else results in multiplied rules</p>",
        "id": 181024546,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574090457
    },
    {
        "content": "<p>otoh, we're going to have the same <em>effect</em> by injecting it at the root</p>",
        "id": 181024567,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574090471
    },
    {
        "content": "<p>and letting it propagate</p>",
        "id": 181024568,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574090474
    },
    {
        "content": "<p>and if we acknowledge it explicitly</p>",
        "id": 181024574,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574090482
    },
    {
        "content": "<p>we are more able to optimize</p>",
        "id": 181024576,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574090484
    },
    {
        "content": "<p>would you rather be conservative and materialize them at all points first ?</p>",
        "id": 181024578,
        "sender_full_name": "lqd",
        "timestamp": 1574090489
    },
    {
        "content": "<p>I tend to think we should</p>",
        "id": 181024601,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574090517
    },
    {
        "content": "<p>it seems simpler</p>",
        "id": 181024605,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574090519
    },
    {
        "content": "<p>I am also thinking of examples like this</p>",
        "id": 181024652,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574090527
    },
    {
        "content": "<p>which are \"sort of related\"</p>",
        "id": 181024657,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574090531
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;&amp;</span><span class=\"na\">&#39;b</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;c</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">loop</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 181024675,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574090549
    },
    {
        "content": "<p>in some variations of NLL, this was accepted, because the function never returned</p>",
        "id": 181024682,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574090558
    },
    {
        "content": "<p>oh interesting</p>",
        "id": 181024700,
        "sender_full_name": "lqd",
        "timestamp": 1574090576
    },
    {
        "content": "<p>there's a case to be made that this is \"ok\"</p>",
        "id": 181024714,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574090587
    },
    {
        "content": "<p>e.g., nobody can ever read the vec again</p>",
        "id": 181024725,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574090596
    },
    {
        "content": "<p>(I'm ignoring panics here, in any case)</p>",
        "id": 181024732,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574090604
    },
    {
        "content": "<p>but we decided that it felt wrong, and I think arielb1 had a convincing example why that was which I've forgotten now</p>",
        "id": 181024764,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574090619
    },
    {
        "content": "<p>in any case this has more to do with the error case</p>",
        "id": 181024787,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574090643
    },
    {
        "content": "<p>ok yeah let's do this then</p>",
        "id": 181024795,
        "sender_full_name": "lqd",
        "timestamp": 1574090643
    },
    {
        "content": "<p>i.e., it's an error wherever it occurs</p>",
        "id": 181024832,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574090653
    },
    {
        "content": "<p>we don't <em>just</em> check for errors at \"exit nodes\"</p>",
        "id": 181024840,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574090660
    },
    {
        "content": "<p>so here's another question</p>",
        "id": 181024859,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574090681
    },
    {
        "content": "<p>do we have a canonical write-up of the naive rules in datalog form ?</p>",
        "id": 181024862,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574090690
    },
    {
        "content": "<p>also, are we actually publishing the book successfully?</p>",
        "id": 181024871,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574090695
    },
    {
        "content": "<p>I think the answer to both is no :)</p>",
        "id": 181024878,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574090700
    },
    {
        "content": "<p>but I'd like the answer to both to be yes, and to have that write-up be in the book</p>",
        "id": 181024897,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574090708
    },
    {
        "content": "<p>we are publishing the book</p>",
        "id": 181024906,
        "sender_full_name": "lqd",
        "timestamp": 1574090713
    },
    {
        "content": "<p>ok, that's good</p>",
        "id": 181024912,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574090717
    },
    {
        "content": "<p>but don't have a canonical version of the rules I don't think, yet</p>",
        "id": 181024922,
        "sender_full_name": "lqd",
        "timestamp": 1574090725
    },
    {
        "content": "<p>oh I think it was <em>salsa</em> where I screwed that up months ago and have not gotten around to fixing it yet</p>",
        "id": 181024928,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574090728
    },
    {
        "content": "<p>ok, that should be easy enough to extract from the naive secction I guess</p>",
        "id": 181024947,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574090741
    },
    {
        "content": "<p>chalk also had problems</p>",
        "id": 181024949,
        "sender_full_name": "lqd",
        "timestamp": 1574090742
    },
    {
        "content": "<p>yes, chalk also has problems</p>",
        "id": 181024959,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574090749
    },
    {
        "content": "<p>sigh</p>",
        "id": 181024960,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574090750
    },
    {
        "content": "<p>I do have the old ones I think</p>",
        "id": 181024963,
        "sender_full_name": "lqd",
        "timestamp": 1574090752
    },
    {
        "content": "<p>Pietro fixed them btw</p>",
        "id": 181024975,
        "sender_full_name": "lqd",
        "timestamp": 1574090760
    },
    {
        "content": "<p><span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 181025021,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574090765
    },
    {
        "content": "<p>but ok <a href=\"https://rust-lang.github.io/polonius/\" target=\"_blank\" title=\"https://rust-lang.github.io/polonius/\">https://rust-lang.github.io/polonius/</a> works, yes</p>",
        "id": 181025030,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574090769
    },
    {
        "content": "<p>maybe we can make a hackmd now</p>",
        "id": 181025044,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574090778
    },
    {
        "content": "<p>that has the canonical rules</p>",
        "id": 181025049,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574090781
    },
    {
        "content": "<p>I do have the ones I used to test on Soufflé with IIRC, where we had the rules \"duplicated\" with universal_regions</p>",
        "id": 181025050,
        "sender_full_name": "lqd",
        "timestamp": 1574090781
    },
    {
        "content": "<p>I can do that</p>",
        "id": 181025054,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574090786
    },
    {
        "content": "<p>I might be able to find a more recent version but otherwise: <a href=\"https://gist.github.com/lqd/355588dd6ab9b852469110edc8f6192f\" target=\"_blank\" title=\"https://gist.github.com/lqd/355588dd6ab9b852469110edc8f6192f\">https://gist.github.com/lqd/355588dd6ab9b852469110edc8f6192f</a></p>",
        "id": 181025142,
        "sender_full_name": "lqd",
        "timestamp": 1574090838
    },
    {
        "content": "<p>(it also lacks liveness/initialization)</p>",
        "id": 181025163,
        "sender_full_name": "lqd",
        "timestamp": 1574090860
    },
    {
        "content": "<p>(and errors ...)</p>",
        "id": 181025172,
        "sender_full_name": "lqd",
        "timestamp": 1574090868
    },
    {
        "content": "<p>yes so</p>",
        "id": 181025254,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574090905
    },
    {
        "content": "<p>one of the reasons I'm talking about this</p>",
        "id": 181025258,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574090908
    },
    {
        "content": "<p>is that I'd like to have this so we can talk about liveness/init in those terms too</p>",
        "id": 181025262,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574090921
    },
    {
        "content": "<p><a href=\"https://hackmd.io/CGMNjt1hR_qYtsR9hgdGmw\" target=\"_blank\" title=\"https://hackmd.io/CGMNjt1hR_qYtsR9hgdGmw\">hackmd document</a></p>",
        "id": 181025269,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574090923
    },
    {
        "content": "<p>I guess it will also let us tweak names ;)</p>",
        "id": 181025304,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574090946
    },
    {
        "content": "<p>I'm reconciling this against <a href=\"http://naive.rs\" target=\"_blank\" title=\"http://naive.rs\">naive.rs</a> right now</p>",
        "id": 181025470,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574091047
    },
    {
        "content": "<p>Ok, this looks roughly complete?</p>",
        "id": 181025697,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574091200
    },
    {
        "content": "<p>I don't think we should go overboard with the <code>.output</code> and so forth</p>",
        "id": 181025707,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574091205
    },
    {
        "content": "<p>yeah</p>",
        "id": 181025708,
        "sender_full_name": "lqd",
        "timestamp": 1574091206
    },
    {
        "content": "<p>but it doesn't matter really</p>",
        "id": 181025712,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574091208
    },
    {
        "content": "<p>ok, so, to add placeholder loans is fairly minimal...</p>",
        "id": 181025719,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574091216
    },
    {
        "content": "<p>(I'm really restraining myself from doing a mass rename here. This is hard.)</p>",
        "id": 181025728,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574091226
    },
    {
        "content": "<p>maybe just note at the point your thoughts about renaming</p>",
        "id": 181025740,
        "sender_full_name": "lqd",
        "timestamp": 1574091239
    },
    {
        "content": "<p>and I'll take care of it soon</p>",
        "id": 181025794,
        "sender_full_name": "lqd",
        "timestamp": 1574091256
    },
    {
        "content": "<p>what should we call <code>requires</code>... idk. something else though =)</p>",
        "id": 181025854,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574091307
    },
    {
        "content": "<p>anyway for placeholder loans, I think you added an input, right, that identifies the placeholder regions + loans?</p>",
        "id": 181025889,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574091337
    },
    {
        "content": "<p>e.g., extend <code>universal_region</code> perhaps to <code>placeholder_region(R, L)</code>?</p>",
        "id": 181025909,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574091351
    },
    {
        "content": "<p>I should look what you actually did in your PR...</p>",
        "id": 181025916,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574091357
    },
    {
        "content": "<p>ah, right, and we need <code>known_subset</code></p>",
        "id": 181025974,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574091382
    },
    {
        "content": "<p>yeah</p>",
        "id": 181025976,
        "sender_full_name": "lqd",
        "timestamp": 1574091383
    },
    {
        "content": "<p>I was thinking of needing to fuse <code>universal_regions</code> with their loans</p>",
        "id": 181025994,
        "sender_full_name": "lqd",
        "timestamp": 1574091401
    },
    {
        "content": "<p>so that it's more \"a unit of information\" but couljd be done later</p>",
        "id": 181026004,
        "sender_full_name": "lqd",
        "timestamp": 1574091417
    },
    {
        "content": "<p>and I seeded <code>requires</code> with <code>placeholder_loans</code> at the cfg root</p>",
        "id": 181026037,
        "sender_full_name": "lqd",
        "timestamp": 1574091454
    },
    {
        "content": "<p>I'll add that as a WIP</p>",
        "id": 181026047,
        "sender_full_name": "lqd",
        "timestamp": 1574091468
    },
    {
        "content": "<p>(or just <code>requires</code> everywhere)</p>",
        "id": 181026103,
        "sender_full_name": "lqd",
        "timestamp": 1574091491
    },
    {
        "content": "<p>I think I would just make the input be <code>placeholder_data(region, loan)</code> or something like that</p>",
        "id": 181026136,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574091532
    },
    {
        "content": "<p>then we can derive <code>placeholder_origins</code> (nee <code>universal_regions</code>) from that</p>",
        "id": 181026160,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574091550
    },
    {
        "content": "<p>I'm mostly looking here to express the <em>rules</em> in the most elegant form</p>",
        "id": 181026170,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574091560
    },
    {
        "content": "<p>ah interesting yes</p>",
        "id": 181026174,
        "sender_full_name": "lqd",
        "timestamp": 1574091567
    },
    {
        "content": "<p>to aid in explanation / comprehension</p>",
        "id": 181026175,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574091568
    },
    {
        "content": "<p>oh I think <code>requires</code> should just be <code>contains</code></p>",
        "id": 181026360,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574091672
    },
    {
        "content": "<p>true!</p>",
        "id": 181026380,
        "sender_full_name": "lqd",
        "timestamp": 1574091685
    },
    {
        "content": "<p>(\"origins\" contain \"loans\")</p>",
        "id": 181026383,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574091691
    },
    {
        "content": "<p>this is one we talked about but didn't get to yet</p>",
        "id": 181026386,
        "sender_full_name": "lqd",
        "timestamp": 1574091692
    },
    {
        "content": "<p>seeding the placeholder loans like this </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nf\">requires</span><span class=\"p\">(</span><span class=\"nv\">R</span><span class=\"p\">,</span> <span class=\"nv\">B</span><span class=\"p\">,</span> <span class=\"nv\">P</span><span class=\"p\">)</span> <span class=\"p\">:-</span>\n  <span class=\"nf\">cfg_edge</span><span class=\"p\">(</span><span class=\"nv\">P</span><span class=\"p\">,</span> <span class=\"k\">_</span><span class=\"p\">),</span>\n  <span class=\"nf\">placeholder_data</span><span class=\"p\">(</span><span class=\"nv\">R</span><span class=\"p\">,</span> <span class=\"nv\">B</span><span class=\"p\">).</span>\n</pre></div>\n\n\n<p>seems a bit weird</p>",
        "id": 181026552,
        "sender_full_name": "lqd",
        "timestamp": 1574091803
    },
    {
        "content": "<p>heh</p>",
        "id": 181026563,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574091821
    },
    {
        "content": "<p>(maybe also both points should be in there)</p>",
        "id": 181026564,
        "sender_full_name": "lqd",
        "timestamp": 1574091822
    },
    {
        "content": "<p>we have no <code>node</code> relation</p>",
        "id": 181026569,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574091826
    },
    {
        "content": "<p>but we should probably make one?</p>",
        "id": 181026577,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574091831
    },
    {
        "content": "<p>also, the  names in this doc (e.g., of atoms)</p>",
        "id": 181026582,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574091839
    },
    {
        "content": "<p>are pretty out of date</p>",
        "id": 181026584,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574091841
    },
    {
        "content": "<p>(and hence I think out of sync with repo?)</p>",
        "id": 181026637,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574091857
    },
    {
        "content": "<blockquote>\n<p>but we should probably make one?</p>\n</blockquote>\n<p>I am debating if it should be an input, or derived from the others</p>",
        "id": 181026661,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574091878
    },
    {
        "content": "<p>but it seems like an input</p>",
        "id": 181026665,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574091882
    },
    {
        "content": "<p>i.e., you can have a node with no adjacent edges...</p>",
        "id": 181026675,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574091888
    },
    {
        "content": "<p>we could make a <code>node</code> / <code>point</code> relation, I'm not sure we need to materialize it for real</p>",
        "id": 181026680,
        "sender_full_name": "lqd",
        "timestamp": 1574091891
    },
    {
        "content": "<p>yeah I'm debating about it</p>",
        "id": 181026715,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574091904
    },
    {
        "content": "<p>it's not really a very interesting case</p>",
        "id": 181026724,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574091911
    },
    {
        "content": "<blockquote>\n<p>i.e., you can have a node with no adjacent edges...</p>\n</blockquote>\n<p>this one</p>",
        "id": 181026737,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574091920
    },
    {
        "content": "<p>yeah very out of date, I think they must date back to our initial explorations last year</p>",
        "id": 181026745,
        "sender_full_name": "lqd",
        "timestamp": 1574091929
    },
    {
        "content": "<p>(the names are out of sync for sure, but the rules seems likely in sync)</p>",
        "id": 181026804,
        "sender_full_name": "lqd",
        "timestamp": 1574091962
    },
    {
        "content": "<p>(but I will check later)</p>",
        "id": 181026821,
        "sender_full_name": "lqd",
        "timestamp": 1574091970
    },
    {
        "content": "<p>anyway this looks correct to me</p>",
        "id": 181026894,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574092053
    },
    {
        "content": "<p>seems simple enough</p>",
        "id": 181026899,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574092055
    },
    {
        "content": "<p>right</p>",
        "id": 181026903,
        "sender_full_name": "lqd",
        "timestamp": 1574092059
    },
    {
        "content": "<p>modulo the <code>node</code> relation bit</p>",
        "id": 181026909,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574092066
    },
    {
        "content": "<p>albin mentioned they had once this question about the cfg root</p>",
        "id": 181026986,
        "sender_full_name": "lqd",
        "timestamp": 1574092099
    },
    {
        "content": "<p>and moved away from requiring it so at least we shouldn't need for now</p>",
        "id": 181027007,
        "sender_full_name": "lqd",
        "timestamp": 1574092117
    },
    {
        "content": "<p>hmm so</p>",
        "id": 181027026,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574092132
    },
    {
        "content": "<p>never mind</p>",
        "id": 181027052,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574092149
    },
    {
        "content": "<blockquote>\n<p>and moved away from requiring it so at least we shouldn't need for now</p>\n</blockquote>\n<p>interesting</p>",
        "id": 181027062,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574092156
    },
    {
        "content": "<p>ok</p>",
        "id": 181027063,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574092157
    },
    {
        "content": "<p>you really do want to move to <code>node</code>s instead of <code>point</code>s</p>",
        "id": 181027160,
        "sender_full_name": "lqd",
        "timestamp": 1574092231
    },
    {
        "content": "<p>I don't know :)</p>",
        "id": 181027165,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574092236
    },
    {
        "content": "<p>I realized I am using single letters, too</p>",
        "id": 181027172,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574092245
    },
    {
        "content": "<p>when we said we'd use <code>Node1</code> etc</p>",
        "id": 181027175,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574092249
    },
    {
        "content": "<p>I forget what we said about capitalization, but I found the all-lower-case a bit harder to read...</p>",
        "id": 181027196,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574092260
    },
    {
        "content": "<p>and the full words a bit long (line wrap)</p>",
        "id": 181027211,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574092275
    },
    {
        "content": "<p>but I still think it's probably correct to use the full words</p>",
        "id": 181027216,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574092279
    },
    {
        "content": "<p>anyway, so we've got our version of the rules</p>",
        "id": 181027231,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574092297
    },
    {
        "content": "<p>we need to clean it up</p>",
        "id": 181027235,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574092299
    },
    {
        "content": "<p>but about the <em>PR</em></p>",
        "id": 181027246,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574092305
    },
    {
        "content": "<p>we can capitalize for sure</p>",
        "id": 181027319,
        "sender_full_name": "lqd",
        "timestamp": 1574092340
    },
    {
        "content": "<p>should also help testing with regular datalog engines</p>",
        "id": 181027345,
        "sender_full_name": "lqd",
        "timestamp": 1574092359
    },
    {
        "content": "<p>right</p>",
        "id": 181027352,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574092366
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>.decl subset_errors(Origin1, Origin2, Point)\nsubset_errors(Origin1, Origin2, Point) :-\n  placeholder_data(Origin1, Loan1),\n  placeholder_origin(Origin2),\n  requires(Origin2, Loan1, Point),\n  !known_subset(Origin1, Origin2).\n</pre></div>",
        "id": 181027356,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574092368
    },
    {
        "content": "<p>hmm so is <code>known_subset</code> transitive?</p>",
        "id": 181027437,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574092440
    },
    {
        "content": "<p>I think we should do the transitive stuff on the polonius side, probably</p>",
        "id": 181027490,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574092449
    },
    {
        "content": "<p>so the input is probably <code>known_subset_base</code>?</p>",
        "id": 181027500,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574092460
    },
    {
        "content": "<p>I assumed it was a flat list</p>",
        "id": 181027506,
        "sender_full_name": "lqd",
        "timestamp": 1574092463
    },
    {
        "content": "<p>I am wondering if it should instead be <code>known_contains_base</code></p>",
        "id": 181027510,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574092465
    },
    {
        "content": "<p>so yes, we'd need to do the transitivity inside polonius</p>",
        "id": 181027515,
        "sender_full_name": "lqd",
        "timestamp": 1574092476
    },
    {
        "content": "<p>i.e., <code>known_contains_base(O:origin, L:loan)</code></p>",
        "id": 181027518,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574092478
    },
    {
        "content": "<p>well regardless we can compute <code>known_contains</code></p>",
        "id": 181027538,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574092498
    },
    {
        "content": "<p>I guess it's not very different</p>",
        "id": 181027606,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574092554
    },
    {
        "content": "<p>but</p>",
        "id": 181027608,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574092555
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>.decl subset_errors(Origin1, Origin2, Point)\nsubset_errors(Origin1, Origin2, Point) :-\n  contains(Origin2, Loan1, Point),\n  placeholder_origin(Origin2),\n  placeholder_data(Origin1, Loan2)\n  !known_contains(Origin2, Loan1).\n</pre></div>",
        "id": 181027610,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574092557
    },
    {
        "content": "<p>wait, that's wrong</p>",
        "id": 181027674,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574092588
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>.decl subset_errors(Origin1, Origin2, Point)\nsubset_errors(Origin1, Origin2, Point) :-\n  placeholder_data(Origin1, Loan1)\n  placeholder_data(Origin2, _)\n  contains(Origin2, Loan1, Point),\n  !known_contains(Origin2, Loan1).\n</pre></div>",
        "id": 181027679,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574092591
    },
    {
        "content": "<p>anyway, I find that mildly easier to read</p>",
        "id": 181027689,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574092599
    },
    {
        "content": "<p>(interestingly, I sort of prefer the <code>placeholder_data</code> both times just because it makes those two lines easier for me to parse)</p>",
        "id": 181027707,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574092615
    },
    {
        "content": "<p>same for me :)</p>",
        "id": 181027741,
        "sender_full_name": "lqd",
        "timestamp": 1574092638
    },
    {
        "content": "<p>(not sure about the name <code>placeholder_data</code>, maybe even just <code>placeholder</code> ?)</p>",
        "id": 181027758,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574092660
    },
    {
        "content": "<p>sounds nice</p>",
        "id": 181027771,
        "sender_full_name": "lqd",
        "timestamp": 1574092673
    },
    {
        "content": "<p>we can just do <code>placeholder(O, _)</code> instead of <code>placeholder_origin</code>, as well</p>",
        "id": 181027856,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574092713
    },
    {
        "content": "<p>(and also solves the terminology questions I had in the other doc PR)</p>",
        "id": 181027858,
        "sender_full_name": "lqd",
        "timestamp": 1574092717
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>.decl known_contains(O:origin, L:loan)\nknown_contains(Origin1, Loan1) :-\n  placeholder(Origin1, Loan1)\nknown_contains(Origin2, Loan1) :-\n  known_contains(Origin1, Loan1),\n  known_subset(Origin1, Origin2).\n</pre></div>",
        "id": 181028026,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574092820
    },
    {
        "content": "<p>?</p>",
        "id": 181028028,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574092821
    },
    {
        "content": "<p>I think that is correct</p>",
        "id": 181028033,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574092826
    },
    {
        "content": "<p>/me was typing that hehe</p>",
        "id": 181028044,
        "sender_full_name": "lqd",
        "timestamp": 1574092836
    },
    {
        "content": "<p>it looks sensible</p>",
        "id": 181028100,
        "sender_full_name": "lqd",
        "timestamp": 1574092876
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>contains(Origin, Loan, P) :-\n  cfg_edge(P, _),\n  placeholder(Origin, Loan).\n</pre></div>",
        "id": 181028204,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574092966
    },
    {
        "content": "<p>so I agree that we probably need the <em>targets</em> too, no?</p>",
        "id": 181028209,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574092972
    },
    {
        "content": "<p>yeah, or <code>node</code></p>",
        "id": 181028225,
        "sender_full_name": "lqd",
        "timestamp": 1574092986
    },
    {
        "content": "<p>I kind of think we should just make <code>node</code></p>",
        "id": 181028233,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574092991
    },
    {
        "content": "<p>yeah and in any case all these static rules should be \"rust\" code, eg Relation::extend and the likes, rather than using iterations and joins</p>",
        "id": 181028430,
        "sender_full_name": "lqd",
        "timestamp": 1574093126
    },
    {
        "content": "<p>correct</p>",
        "id": 181028443,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574093139
    },
    {
        "content": "<p>ok, so, what does it take to land the PR now...</p>",
        "id": 181028457,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574093147
    },
    {
        "content": "<p>it's slightly different than the hackmd</p>",
        "id": 181028461,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574093152
    },
    {
        "content": "<p>oh btw</p>",
        "id": 181028526,
        "sender_full_name": "lqd",
        "timestamp": 1574093175
    },
    {
        "content": "<p>in the PR text I was mentioning a use-case extracted from rust, a dataset in the inputs folder</p>",
        "id": 181028549,
        "sender_full_name": "lqd",
        "timestamp": 1574093193
    },
    {
        "content": "<p>subset-relations, which had 3 fns, and a case was confusing me, but looking more at the mir seems correct</p>",
        "id": 181028584,
        "sender_full_name": "lqd",
        "timestamp": 1574093218
    },
    {
        "content": "<p>(the desugaring, wrt lifetimes here, is still a bit confusing to me)</p>",
        "id": 181028618,
        "sender_full_name": "lqd",
        "timestamp": 1574093249
    },
    {
        "content": "<p>where is this in the PR text?</p>",
        "id": 181028740,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574093313
    },
    {
        "content": "<p>I wanted to ask, we always have two tuples in universal_regions, '0 and '1, what is this '1 ? I thought it was related to 'static, eg a local version, at some point, but I'm not so sure anymore</p>",
        "id": 181028755,
        "sender_full_name": "lqd",
        "timestamp": 1574093322
    },
    {
        "content": "<p>ah</p>",
        "id": 181028761,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574093330
    },
    {
        "content": "<p><code>'0</code> is <code>'static</code></p>",
        "id": 181028766,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574093334
    },
    {
        "content": "<blockquote>\n<p>I added simple dataset with 3 examples but it was partially manually constructed as I haven't added support for those facts to rustc yet, and while there is a function where an expected subset error occurs, I'm not sure it's about the correct origins (the .facts being a bit distant from the original rust code, and rustfest-induced lack of sleep, make it hard to be sure right now)</p>\n</blockquote>\n<p>this</p>",
        "id": 181028800,
        "sender_full_name": "lqd",
        "timestamp": 1574093354
    },
    {
        "content": "<p>I think <code>'1</code> is representing the \"entire fn body\" -- I'm not sure this is a concept that makes sense in polonius actually</p>",
        "id": 181028806,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574093359
    },
    {
        "content": "<p>let me go back and check the source</p>",
        "id": 181028824,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574093371
    },
    {
        "content": "<p>this test is the first I've seen where something flowed into '1</p>",
        "id": 181028847,
        "sender_full_name": "lqd",
        "timestamp": 1574093384
    },
    {
        "content": "<p>which example did it come from?</p>",
        "id": 181028985,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574093453
    },
    {
        "content": "<p>./inputs/subset-relations/subset-relations.rs</p>",
        "id": 181029016,
        "sender_full_name": "lqd",
        "timestamp": 1574093474
    },
    {
        "content": "<p>missing_subset</p>",
        "id": 181029030,
        "sender_full_name": "lqd",
        "timestamp": 1574093485
    },
    {
        "content": "<p>(the 3 are basically the same wrt subset errors)</p>",
        "id": 181029077,
        "sender_full_name": "lqd",
        "timestamp": 1574093521
    },
    {
        "content": "<p>and I manually added the placeholder loans (and a known subset to make <code>valid_subset</code> work)</p>",
        "id": 181029161,
        "sender_full_name": "lqd",
        "timestamp": 1574093558
    },
    {
        "content": "<p>to land the PR: we'd want to be close to the parts of the hackmd related to <code>subset_errors</code>, <code>placeholder</code>, <code>known_subset</code> and its transitive version, right ? (that is, not to the complete hackmd where we already started renaming relations)</p>",
        "id": 181029411,
        "sender_full_name": "lqd",
        "timestamp": 1574093718
    },
    {
        "content": "<p>yes</p>",
        "id": 181029589,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574093830
    },
    {
        "content": "<p>I'm looking at that input now</p>",
        "id": 181029600,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574093837
    },
    {
        "content": "<p>I'll work on that then !</p>",
        "id": 181029650,
        "sender_full_name": "lqd",
        "timestamp": 1574093872
    },
    {
        "content": "<p>btw if you need a rustc version working with polonius master I have branch ready for you (we haven't published nor updated rustc since the <code>FactTypes</code> PR)</p>",
        "id": 181029727,
        "sender_full_name": "lqd",
        "timestamp": 1574093897
    },
    {
        "content": "<p>OK</p>",
        "id": 181029793,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574093945
    },
    {
        "content": "<p>(<a href=\"https://github.com/lqd/rust/tree/placeholder_loans\" target=\"_blank\" title=\"https://github.com/lqd/rust/tree/placeholder_loans\">https://github.com/lqd/rust/tree/placeholder_loans</a>)</p>",
        "id": 181029822,
        "sender_full_name": "lqd",
        "timestamp": 1574093965
    },
    {
        "content": "<p>it doesn't generate the placeholder/known_subset facts though</p>",
        "id": 181029849,
        "sender_full_name": "lqd",
        "timestamp": 1574093984
    },
    {
        "content": "<p>so <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> I think that the fn body region</p>",
        "id": 181029925,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574094015
    },
    {
        "content": "<p>comes <em>after</em> the others</p>",
        "id": 181029944,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574094025
    },
    {
        "content": "<p>(it doesn't look at <code>subset_errors</code> either <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span>)</p>",
        "id": 181029951,
        "sender_full_name": "lqd",
        "timestamp": 1574094029
    },
    {
        "content": "<p>i.e., <code>'0</code> is always static</p>",
        "id": 181029954,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574094031
    },
    {
        "content": "<p>aaaaaaaaaaaah</p>",
        "id": 181030015,
        "sender_full_name": "lqd",
        "timestamp": 1574094069
    },
    {
        "content": "<p>but '1 and '2 would be <code>'a</code> and <code>'b</code> respectively</p>",
        "id": 181030019,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574094071
    },
    {
        "content": "<p>and <code>'3</code> is the fn body</p>",
        "id": 181030023,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574094074
    },
    {
        "content": "<p>that makes the result very clear now</p>",
        "id": 181030045,
        "sender_full_name": "lqd",
        "timestamp": 1574094093
    },
    {
        "content": "<p>thank you :)</p>",
        "id": 181030065,
        "sender_full_name": "lqd",
        "timestamp": 1574094104
    },
    {
        "content": "<p>for the <code>missing_subset</code> example, looking at the output from <code>-Zmir-dump=nll</code>, I get</p>\n<div class=\"codehilite\"><pre><span></span>| Free Region Mapping\n| &#39;_#0r | Global | [&#39;_#0r, &#39;_#3r, &#39;_#1r, &#39;_#2r]\n| &#39;_#1r | Local | [&#39;_#3r, &#39;_#1r]\n| &#39;_#2r | Local | [&#39;_#3r, &#39;_#2r]\n| &#39;_#3r | Local | [&#39;_#3r]\n</pre></div>",
        "id": 181030068,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574094111
    },
    {
        "content": "<p>which I think makes sense -- everything \"outlives\" the fn body</p>",
        "id": 181030135,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574094132
    },
    {
        "content": "<p>yeah</p>",
        "id": 181030146,
        "sender_full_name": "lqd",
        "timestamp": 1574094141
    },
    {
        "content": "<p>I guess that the fn body concept makes no sense in polonius but is also not actively harmful</p>",
        "id": 181030147,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574094142
    },
    {
        "content": "<p>it's basically the union of all placeholder origins</p>",
        "id": 181030157,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574094148
    },
    {
        "content": "<p>I checked afterwards that the renumbered 'a and 'b matched what I was expecting</p>",
        "id": 181030177,
        "sender_full_name": "lqd",
        "timestamp": 1574094159
    },
    {
        "content": "<p>which it does, so only the numbering was confusing</p>",
        "id": 181030203,
        "sender_full_name": "lqd",
        "timestamp": 1574094179
    },
    {
        "content": "<p>but yeah it's clear now :)</p>",
        "id": 181030225,
        "sender_full_name": "lqd",
        "timestamp": 1574094197
    },
    {
        "content": "<blockquote>\n<p>to land the PR: we'd want to be close to the parts of the hackmd related to <code>subset_errors</code>, <code>placeholder</code>, <code>known_subset</code> and its transitive version, right ? (that is, not to the complete hackmd where we already started renaming relations)</p>\n</blockquote>\n<p>I guess I will quickly skim the other commits --</p>",
        "id": 181030238,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574094208
    },
    {
        "content": "<p>I could also try to make some edits to the polonius book</p>",
        "id": 181030247,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574094217
    },
    {
        "content": "<p>I was wondering how we'd generate the placeholder loans in rustc ?</p>",
        "id": 181030319,
        "sender_full_name": "lqd",
        "timestamp": 1574094243
    },
    {
        "content": "<p>and I assumed we'd need to change <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir/borrow_check/nll/region_infer/struct.RegionInferenceContext.html#method.check_universal_regions\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir/borrow_check/nll/region_infer/struct.RegionInferenceContext.html#method.check_universal_regions\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir/borrow_check/nll/region_infer/struct.RegionInferenceContext.html#method.check_universal_regions</a> to check for subset errors</p>",
        "id": 181030355,
        "sender_full_name": "lqd",
        "timestamp": 1574094274
    },
    {
        "content": "<p>I think we would iterate over the \"universal regions\" and make one <code>placeholder</code> tuple for each</p>",
        "id": 181030356,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574094275
    },
    {
        "content": "<p>that said, I realize I'm a bit confused -- did you implement the rustc side of this on that branch?</p>",
        "id": 181030377,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574094290
    },
    {
        "content": "<p>I did not implement the rustc side no</p>",
        "id": 181030409,
        "sender_full_name": "lqd",
        "timestamp": 1574094317
    },
    {
        "content": "<p>I only have a branch where master compiles using the polonius wip branch, so that I could then implement the rustc side</p>",
        "id": 181030441,
        "sender_full_name": "lqd",
        "timestamp": 1574094338
    },
    {
        "content": "<p>ah ok</p>",
        "id": 181030528,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574094375
    },
    {
        "content": "<p>here I didn't know how to create a <code>BorrowIndex</code> for the placeholder loans tuples</p>",
        "id": 181030537,
        "sender_full_name": "lqd",
        "timestamp": 1574094378
    },
    {
        "content": "<p>I could also help with that perhaps</p>",
        "id": 181030539,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574094378
    },
    {
        "content": "<p>I can start just by jotting down a few notes</p>",
        "id": 181030589,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574094414
    },
    {
        "content": "<p>(and was just expecting to check the polonius output in <code>check_universal_regions</code> but not yet where to thread the polonius output)</p>",
        "id": 181030610,
        "sender_full_name": "lqd",
        "timestamp": 1574094428
    },
    {
        "content": "<p>that would be very helpful :)</p>",
        "id": 181030631,
        "sender_full_name": "lqd",
        "timestamp": 1574094441
    },
    {
        "content": "<p>I'd like to have some tests to land the PR, there are not enough like this. I was thinking I'd implement the rustc side of fact gen and then integrate some of the ui tests into the inputs and check those in the unit tests, just to be on the safe side, in addition to having the ui tests work once the feature is complete and rustc can check the polonius-computed <code>subset_errors</code></p>",
        "id": 181030994,
        "sender_full_name": "lqd",
        "timestamp": 1574094644
    },
    {
        "content": "<p>it seems like trying to do some renaming <em>in the code</em> would be dumb, we should wait until end of the week for that, agreed?</p>",
        "id": 181031154,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574094730
    },
    {
        "content": "<p>agreed</p>",
        "id": 181031203,
        "sender_full_name": "lqd",
        "timestamp": 1574094770
    },
    {
        "content": "<p>it'll probably be easier to do so once the different WIP work lands</p>",
        "id": 181031244,
        "sender_full_name": "lqd",
        "timestamp": 1574094799
    },
    {
        "content": "<p>even if it's a bit uglier as it lands ?</p>",
        "id": 181031251,
        "sender_full_name": "lqd",
        "timestamp": 1574094810
    },
    {
        "content": "<p>that was my thought</p>",
        "id": 181031344,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574094847
    },
    {
        "content": "<p>but I would like to try to mvoe the docs to the new names</p>",
        "id": 181031359,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574094861
    },
    {
        "content": "<p>maybe that's confuisng :/ but I think it helps me :)</p>",
        "id": 181031374,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574094870
    },
    {
        "content": "<p>e.g. it took me some time to figure out <code>requires</code>, but <code>contains</code> reads nicely</p>",
        "id": 181031384,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574094881
    },
    {
        "content": "<p>also, I'm inclined to just land your book changes</p>",
        "id": 181031431,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574094923
    },
    {
        "content": "<p>and then try to read over them in place and make edits myself</p>",
        "id": 181031443,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574094928
    },
    {
        "content": "<p>any objection? I'm talking about <a href=\"https://github.com/rust-lang/polonius/issues/126\" target=\"_blank\" title=\"https://github.com/rust-lang/polonius/issues/126\">rust-lang/polonius#126</a></p>",
        "id": 181031452,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574094937
    },
    {
        "content": "<p>we could do both also</p>",
        "id": 181031460,
        "sender_full_name": "lqd",
        "timestamp": 1574094939
    },
    {
        "content": "<p>you editing docs doesn't seem like the greatest use of your time, but it can be seen as notes of what to reach in the code :)</p>",
        "id": 181031552,
        "sender_full_name": "lqd",
        "timestamp": 1574094977
    },
    {
        "content": "<p>yes, that was how I thought of it</p>",
        "id": 181031582,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574095002
    },
    {
        "content": "<p>I think I'd like to rename <code>placeholder_loan</code> to <code>placeholder</code>, and then ultimately remove <code>universal_region</code> since it is used everywhere (including .facts in the repo)</p>",
        "id": 181032059,
        "sender_full_name": "lqd",
        "timestamp": 1574095309
    },
    {
        "content": "<p>and/or compute <code>universal_regions</code> in terms of <code>placeholder</code> instead of doing both at once, since we effectively never use <code>universal_region</code></p>",
        "id": 181032152,
        "sender_full_name": "lqd",
        "timestamp": 1574095373
    },
    {
        "content": "<p>I guess that is a difference between the hackmd and the real code</p>",
        "id": 181032172,
        "sender_full_name": "lqd",
        "timestamp": 1574095386
    },
    {
        "content": "<p>yes, I did that in the hackmd</p>",
        "id": 181032182,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574095396
    },
    {
        "content": "<p>and I approve</p>",
        "id": 181032185,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574095399
    },
    {
        "content": "<p>also, I reviewed the rest of the PR, which seems fine, I left a few stray comments</p>",
        "id": 181032197,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574095410
    },
    {
        "content": "<p>(as instead of duplicating the rules we materialized all the free regions in the liveness)</p>",
        "id": 181032208,
        "sender_full_name": "lqd",
        "timestamp": 1574095420
    },
    {
        "content": "<p>ok awesome thanks a lot</p>",
        "id": 181032250,
        "sender_full_name": "lqd",
        "timestamp": 1574095437
    },
    {
        "content": "<p>yeah, we were lazy</p>",
        "id": 181032254,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574095439
    },
    {
        "content": "<p>your datalog compiler might make a difference here?</p>",
        "id": 181032320,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574095458
    },
    {
        "content": "<p>i.e., if we could write <code>;</code> rules...</p>",
        "id": 181032326,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574095462
    },
    {
        "content": "<p>(or, even better, macros...)</p>",
        "id": 181032351,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574095473
    },
    {
        "content": "<p>interesting thought :)</p>",
        "id": 181032358,
        "sender_full_name": "lqd",
        "timestamp": 1574095476
    },
    {
        "content": "<p>it could yeah</p>",
        "id": 181032383,
        "sender_full_name": "lqd",
        "timestamp": 1574095489
    },
    {
        "content": "<p>(when it supports <code>;</code> ofc)</p>",
        "id": 181032406,
        "sender_full_name": "lqd",
        "timestamp": 1574095501
    },
    {
        "content": "<p>(Vytautas added a bunch of syntax for rustql when we were at rustfest)</p>",
        "id": 181032465,
        "sender_full_name": "lqd",
        "timestamp": 1574095534
    },
    {
        "content": "<p>Given OOM concerns I definitely think duplicating the rules is better</p>",
        "id": 181032471,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574095539
    },
    {
        "content": "<p>Personally i'm ready to port polonius :)</p>",
        "id": 181032487,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574095549
    },
    {
        "content": "<p>yeah, even if they are ultimately about <code>equal</code> regions</p>",
        "id": 181032499,
        "sender_full_name": "lqd",
        "timestamp": 1574095554
    },
    {
        "content": "<p>but that's a topic for another day I guess</p>",
        "id": 181032503,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574095558
    },
    {
        "content": "<p>anyway I'm going to leave some notes re: rustc</p>",
        "id": 181032565,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574095577
    },
    {
        "content": "<p>it still not generating a complete computation at the moment :) but we'll get there</p>",
        "id": 181032567,
        "sender_full_name": "lqd",
        "timestamp": 1574095578
    },
    {
        "content": "<p>thanks a lot for the notes, it'll save me a bunch of time</p>",
        "id": 181032625,
        "sender_full_name": "lqd",
        "timestamp": 1574095618
    },
    {
        "content": "<p>ps, I think I found I like \"node\"</p>",
        "id": 181032629,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574095621
    },
    {
        "content": "<p>curious about your opinion :) you seem to disagree</p>",
        "id": 181032650,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574095631
    },
    {
        "content": "<p>but <code>cfg_node</code> relation pushed me over the edge</p>",
        "id": 181032656,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574095638
    },
    {
        "content": "<p>I'm more used to nodes as being basic blocks which is not our case here but I don't have that strong of an opinion</p>",
        "id": 181032687,
        "sender_full_name": "lqd",
        "timestamp": 1574095674
    },
    {
        "content": "<p>node is fine :)</p>",
        "id": 181032696,
        "sender_full_name": "lqd",
        "timestamp": 1574095678
    },
    {
        "content": "<p>ugh, building rustc is like killing my computer =)</p>",
        "id": 181032766,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574095703
    },
    {
        "content": "<p>/me remembers why he prefers to build on server</p>",
        "id": 181032775,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574095712
    },
    {
        "content": "<p>:)</p>",
        "id": 181032783,
        "sender_full_name": "lqd",
        "timestamp": 1574095717
    },
    {
        "content": "<p>I have built rustc on a 7y old macbook air, that was fun, and slow</p>",
        "id": 181032808,
        "sender_full_name": "lqd",
        "timestamp": 1574095738
    },
    {
        "content": "<p>(but it's very helpful for polonius performance work) (to see when it's too slow)</p>",
        "id": 181032875,
        "sender_full_name": "lqd",
        "timestamp": 1574095784
    },
    {
        "content": "<p>about <code>known_subset</code>, you mentioned:</p>\n<blockquote>\n<p>this doesn't seem useful in the new formulation, but maybe known_contains?</p>\n</blockquote>\n<p>ah this is about the debugging output, agreed</p>",
        "id": 181033620,
        "sender_full_name": "lqd",
        "timestamp": 1574096236
    },
    {
        "content": "<p>do we eventually also want to move to uppercasing the datalog variables in code comments ?<br>\neg  from</p>\n<div class=\"codehilite\"><pre><span></span>/// `known_subset(origin1, origin2)` when the &quot;placeholder&quot; `origin1` is a known subset\n/// of placeholder `origin2`.\npub known_subset: Vec&lt;(T::Origin, T::Origin)&gt;,\n</pre></div>\n\n\n<p>to</p>\n<div class=\"codehilite\"><pre><span></span>/// `known_subset(Origin1, Origin2)` when the &quot;placeholder&quot; `Origin1` is a known subset\n/// of placeholder `Origin2`.\npub known_subset: Vec&lt;(T::Origin, T::Origin)&gt;,\n</pre></div>\n\n\n<p>?</p>",
        "id": 181034431,
        "sender_full_name": "lqd",
        "timestamp": 1574096711
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> tough call :)</p>",
        "id": 181034805,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574096942
    },
    {
        "content": "<p>I think I would prefer to do so though</p>",
        "id": 181034819,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574096949
    },
    {
        "content": "<p>the mapping shouldn't be that hard</p>",
        "id": 181034826,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574096954
    },
    {
        "content": "<p>yeah, and it's valuable to have a close relation to the rules themselves</p>",
        "id": 181034862,
        "sender_full_name": "lqd",
        "timestamp": 1574096986
    },
    {
        "content": "<p>right</p>",
        "id": 181034950,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574097016
    },
    {
        "content": "<p>btw <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> check you check the <a href=\"https://hackmd.io/CGMNjt1hR_qYtsR9hgdGmw?view#Compiler-notes\" target=\"_blank\" title=\"https://hackmd.io/CGMNjt1hR_qYtsR9hgdGmw?view#Compiler-notes\">\"compiler notes\" section in the hackmd</a>?</p>",
        "id": 181035133,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574097130
    },
    {
        "content": "<p>it turned out to be a bit thornier than I expected</p>",
        "id": 181035154,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574097142
    },
    {
        "content": "<p>reading it now</p>",
        "id": 181035174,
        "sender_full_name": "lqd",
        "timestamp": 1574097158
    },
    {
        "content": "<p>thornier for checking the errors or generating the input facts ?</p>",
        "id": 181035186,
        "sender_full_name": "lqd",
        "timestamp": 1574097172
    },
    {
        "content": "<p>well both maybe ?</p>",
        "id": 181035235,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574097200
    },
    {
        "content": "<p>it's not that bad really</p>",
        "id": 181035253,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574097207
    },
    {
        "content": "<p>there's a few subtle bits</p>",
        "id": 181035263,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574097218
    },
    {
        "content": "<p>I'm not sure if you're familiar with the <code>ClosureOutlivesRequirement</code> code?</p>",
        "id": 181035277,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574097228
    },
    {
        "content": "<p>that is, the way we handle closures</p>",
        "id": 181035286,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574097239
    },
    {
        "content": "<p>no especially familiar unfortunately</p>",
        "id": 181035346,
        "sender_full_name": "lqd",
        "timestamp": 1574097264
    },
    {
        "content": "<p>it's actually not a big deal</p>",
        "id": 181035365,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574097279
    },
    {
        "content": "<p>the main thing is</p>",
        "id": 181035372,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574097282
    },
    {
        "content": "<p>when we type-check closures</p>",
        "id": 181035383,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574097285
    },
    {
        "content": "<p>(I was thinking whether we'd end up having to tangle with closures heh)</p>",
        "id": 181035385,
        "sender_full_name": "lqd",
        "timestamp": 1574097288
    },
    {
        "content": "<p>we only report <em>some</em> errors immediately</p>",
        "id": 181035394,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574097293
    },
    {
        "content": "<p>the rest we propagated back to the closure's creator</p>",
        "id": 181035414,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574097303
    },
    {
        "content": "<p>there are some comments on this somewhere I can find, but the details of how it works don't matter</p>",
        "id": 181035428,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574097313
    },
    {
        "content": "<p>the main thing is that the \"handle error\" code <em>sometimes</em> reports the error</p>",
        "id": 181035440,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574097325
    },
    {
        "content": "<p>ah yes the Option in check_universal_regions</p>",
        "id": 181035459,
        "sender_full_name": "lqd",
        "timestamp": 1574097335
    },
    {
        "content": "<p>and other types pushes it into the <code>ClosureOutlivesRequirement</code> struct</p>",
        "id": 181035461,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574097336
    },
    {
        "content": "<p>that doesn't affect thsi code path but I thought it might be important context when reading the code and trying to figure out wtf is going on</p>",
        "id": 181035480,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574097356
    },
    {
        "content": "<p>ah, here is the comment</p>",
        "id": 181035578,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574097407
    },
    {
        "content": "<p>ah yeah thanks for this context, I remembered we push some of these obligations but didn't remember in which cases</p>",
        "id": 181035579,
        "sender_full_name": "lqd",
        "timestamp": 1574097408
    },
    {
        "content": "<p>doc comment of <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/mir/struct.ClosureRegionRequirements.html\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/mir/struct.ClosureRegionRequirements.html\">ClosureRegionRequirements</a></p>",
        "id": 181035596,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574097421
    },
    {
        "content": "<p>oh nice</p>",
        "id": 181035613,
        "sender_full_name": "lqd",
        "timestamp": 1574097433
    },
    {
        "content": "<p>hmm, that comment doesn't give as much context as I would hope</p>",
        "id": 181035619,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574097437
    },
    {
        "content": "<p>though maybe it helps ;)</p>",
        "id": 181035625,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574097443
    },
    {
        "content": "<p>it's more about the details of how things are encoded, not <em>why</em></p>",
        "id": 181035631,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574097450
    },
    {
        "content": "<p>Anyway, so, the fact generation did seem a <em>touch</em> trickier than I thought</p>",
        "id": 181035726,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574097499
    },
    {
        "content": "<p>at the very least it's a good todo item for someone to add to the rustc-guide eventually :)</p>",
        "id": 181035730,
        "sender_full_name": "lqd",
        "timestamp": 1574097503
    },
    {
        "content": "<p>in that we have to make \"placeholder loans\" which isn't a concept tha NLL has</p>",
        "id": 181035740,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574097511
    },
    {
        "content": "<p>but I <em>think</em> we can just hack?</p>",
        "id": 181035750,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574097517
    },
    {
        "content": "<p>the way I suggested</p>",
        "id": 181035752,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574097519
    },
    {
        "content": "<p>yeah I should go check what's in rustc guid</p>",
        "id": 181035771,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574097534
    },
    {
        "content": "<p>for all that I talk about the guide, I feel like the NLL coverage leaves much to be desired :(</p>",
        "id": 181035782,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574097542
    },
    {
        "content": "<p>the hack seems liek it should work</p>",
        "id": 181035788,
        "sender_full_name": "lqd",
        "timestamp": 1574097544
    },
    {
        "content": "<p>your recent work about member constraints and general documentation made it a lot better tho</p>",
        "id": 181035841,
        "sender_full_name": "lqd",
        "timestamp": 1574097580
    },
    {
        "content": "<p>yeah, I was just skimming</p>",
        "id": 181035880,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574097602
    },
    {
        "content": "<p>it could be worse</p>",
        "id": 181035915,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574097605
    },
    {
        "content": "<p>anyway</p>",
        "id": 181035920,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574097608
    },
    {
        "content": "<p>I know there are some comments somewhere wiht more details but maybe not one individual comment saying all the things</p>",
        "id": 181035937,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574097619
    },
    {
        "content": "<blockquote>\n<p>the hack seems liek it should work</p>\n</blockquote>\n<p>I think so too</p>",
        "id": 181036000,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574097670
    },
    {
        "content": "<p>and it's super easy</p>",
        "id": 181036009,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574097675
    },
    {
        "content": "<p>anyway the main question mark that I wasn't sure about</p>",
        "id": 181036022,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574097683
    },
    {
        "content": "<p>was how to handle the placeholder errors</p>",
        "id": 181036028,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574097687
    },
    {
        "content": "<p>let me go sprinkle some links into the code</p>",
        "id": 181036040,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574097697
    },
    {
        "content": "<p>I'll need to thread the polonius output somehow as well but that should be easier than the rest</p>",
        "id": 181036055,
        "sender_full_name": "lqd",
        "timestamp": 1574097707
    },
    {
        "content": "<p>then I have to run and get lunch + have family meeting with the partner :)</p>",
        "id": 181036065,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574097712
    },
    {
        "content": "<blockquote>\n<p>I'll need to thread the polonius output somehow as well but that should be easier than the rest</p>\n</blockquote>\n<p>yeah, that seems pretty easy, just add parameters to a few fns</p>",
        "id": 181036114,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574097724
    },
    {
        "content": "<p>right</p>",
        "id": 181036129,
        "sender_full_name": "lqd",
        "timestamp": 1574097736
    },
    {
        "content": "<p>those fns already have like 2 dozen parametrs, what's one more <span aria-label=\"angel\" class=\"emoji emoji-1f47c\" role=\"img\" title=\"angel\">:angel:</span></p>",
        "id": 181036131,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574097737
    },
    {
        "content": "<blockquote>\n<p>then I have to run and get lunch + have family meeting with the partner :)</p>\n</blockquote>\n<p>of course :) we're nearing the end of the scheduled time, don't hesitate to go early as well</p>",
        "id": 181036181,
        "sender_full_name": "lqd",
        "timestamp": 1574097786
    },
    {
        "content": "<p>thank you for your time already, it was super super helpful</p>",
        "id": 181036207,
        "sender_full_name": "lqd",
        "timestamp": 1574097806
    },
    {
        "content": "<p>and I have an idea on how to complete the different next steps</p>",
        "id": 181036228,
        "sender_full_name": "lqd",
        "timestamp": 1574097831
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> ok I added a few links and things</p>",
        "id": 181036413,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574097948
    },
    {
        "content": "<p>that hopefully makes it a bit clearer what i'm talking about</p>",
        "id": 181036418,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574097952
    },
    {
        "content": "<p>yeah looking at it as you type :)</p>",
        "id": 181036711,
        "sender_full_name": "lqd",
        "timestamp": 1574098118
    },
    {
        "content": "<p>ok, g2g, bbl! :)</p>",
        "id": 181036718,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574098127
    },
    {
        "content": "<p>thanks a lot niko :) ttyl</p>",
        "id": 181036738,
        "sender_full_name": "lqd",
        "timestamp": 1574098149
    },
    {
        "content": "<p>I do wonder whether <code>DatafrogOpt</code> is compatible with placeholder loans, or if its TC-avoidance could scare the placeholder loans away ^^ (most likely that I'm missing something trying to make it compute subset errors at 4AM). In any case most of the polonius-side of the work we mentioned earlier seems done</p>",
        "id": 181078484,
        "sender_full_name": "lqd",
        "timestamp": 1574133399
    },
    {
        "content": "<p>hey <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> :) I was wondering if you could point me to some borrowck code about universal regions: I'm trying to emit the universal regions relations as facts for polonius, but I'm not sure where to look for. I thought I should output <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir/borrow_check/nll/type_check/free_region_relations/struct.UniversalRegionRelations.html\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir/borrow_check/nll/type_check/free_region_relations/struct.UniversalRegionRelations.html\"><code>UniversalRegionRelations.outlives</code></a> but I don't see an easy way to do so (and it looks more like a builder even though you can query it)</p>",
        "id": 181109949,
        "sender_full_name": "lqd",
        "timestamp": 1574169719
    },
    {
        "content": "<p>I do not have that info in my mental cache</p>",
        "id": 181110041,
        "sender_full_name": "pnkfelix",
        "timestamp": 1574169775
    },
    {
        "content": "<p>so I'm guessing it's probably not this</p>",
        "id": 181110050,
        "sender_full_name": "lqd",
        "timestamp": 1574169780
    },
    {
        "content": "<p>ah ok, no worries :)</p>",
        "id": 181110082,
        "sender_full_name": "lqd",
        "timestamp": 1574169809
    },
    {
        "content": "<p>(and thanks)</p>",
        "id": 181110177,
        "sender_full_name": "lqd",
        "timestamp": 1574169858
    },
    {
        "content": "<p>I'll check with Niko later, the hackathon should start again real soon</p>",
        "id": 181110202,
        "sender_full_name": "lqd",
        "timestamp": 1574169892
    },
    {
        "content": "<p>ah but maybe it's closer to the ConstraintGraph than this</p>",
        "id": 181111426,
        "sender_full_name": "lqd",
        "timestamp": 1574170813
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span></p>",
        "id": 181113465,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574172445
    },
    {
        "content": "<p>hello :)</p>",
        "id": 181113473,
        "sender_full_name": "lqd",
        "timestamp": 1574172464
    },
    {
        "content": "<p>Do you mean that you are trying to generate the <code>known_subset</code> facts?</p>",
        "id": 181113475,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574172465
    },
    {
        "content": "<p>yes</p>",
        "id": 181113483,
        "sender_full_name": "lqd",
        "timestamp": 1574172471
    },
    {
        "content": "<p>I think I got the placeholder loans done correctly, and was trying to do the known_subsets</p>",
        "id": 181113540,
        "sender_full_name": "lqd",
        "timestamp": 1574172502
    },
    {
        "content": "<p>OK, one sec, let me point you at the right place</p>",
        "id": 181113556,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574172520
    },
    {
        "content": "<p>yay :) thanks</p>",
        "id": 181113584,
        "sender_full_name": "lqd",
        "timestamp": 1574172543
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> so the thing we want is the <code>universal_region_relations</code></p>",
        "id": 181113816,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574172697
    },
    {
        "content": "<p>and in particular the <code>outlives</code> field</p>",
        "id": 181113841,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574172713
    },
    {
        "content": "<p>yeah that was I was looking at earlier</p>",
        "id": 181113876,
        "sender_full_name": "lqd",
        "timestamp": 1574172723
    },
    {
        "content": "<p>it seems like the <code>TransitiveRelation</code> type doesn't have a way to \"iterate\" over the core relations</p>",
        "id": 181113952,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574172758
    },
    {
        "content": "<p>but it seemed like there was only a way to check if a regionvid pair was a known subset but not iterate over all known ones</p>",
        "id": 181113956,
        "sender_full_name": "lqd",
        "timestamp": 1574172769
    },
    {
        "content": "<p>yes, that's correct, but we could add one</p>",
        "id": 181113989,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574172791
    },
    {
        "content": "<p>we basically want to expose the <code>edges</code> field</p>",
        "id": 181113999,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574172798
    },
    {
        "content": "<p>maybe add a method like this</p>",
        "id": 181114014,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574172816
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">edges</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">edges</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">edge</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">elements</span><span class=\"p\">[</span><span class=\"n\">edge</span><span class=\"p\">.</span><span class=\"n\">source</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">elements</span><span class=\"p\">[</span><span class=\"n\">edge</span><span class=\"p\">.</span><span class=\"n\">target</span><span class=\"p\">]))</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 181114101,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574172861
    },
    {
        "content": "<p>ah yes seems straightforward</p>",
        "id": 181114102,
        "sender_full_name": "lqd",
        "timestamp": 1574172862
    },
    {
        "content": "<p>(with a suitable comment)</p>",
        "id": 181114118,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574172876
    },
    {
        "content": "<p>in particular to clarify that this does not give the <em>transitive</em> relation</p>",
        "id": 181114125,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574172883
    },
    {
        "content": "<p>maybe a name like <code>kernel_edges</code> or something</p>",
        "id": 181114133,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574172888
    },
    {
        "content": "<p>I guess \"edge\" is a funny name</p>",
        "id": 181114149,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574172904
    },
    {
        "content": "<p>takes a very graph-like view</p>",
        "id": 181114152,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574172907
    },
    {
        "content": "<p>but anyway you get the idea</p>",
        "id": 181114168,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574172916
    },
    {
        "content": "<p>yeah :) thanks !</p>",
        "id": 181114178,
        "sender_full_name": "lqd",
        "timestamp": 1574172925
    },
    {
        "content": "<p>it could be confusing that this method of <code>TransitiveRelation</code> does not give transitive results if the naming/doc is not very clear</p>",
        "id": 181114259,
        "sender_full_name": "lqd",
        "timestamp": 1574172985
    },
    {
        "content": "<p>exactly, but I think with suitable naming it seems fine</p>",
        "id": 181114286,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574173011
    },
    {
        "content": "<p>yeah :)</p>",
        "id": 181114469,
        "sender_full_name": "lqd",
        "timestamp": 1574173120
    },
    {
        "content": "<p>progress, it seems to generate both <code>placeholder</code>s and <code>known_subset</code>s facts</p>",
        "id": 181123424,
        "sender_full_name": "lqd",
        "timestamp": 1574178194
    },
    {
        "content": "<p>ofc it didn't magically fix <code>DatafrogOpt</code> apparently not computing the subset errors (leaning more and more towards your idea of forgetting it for a while Niko ;)</p>",
        "id": 181123991,
        "sender_full_name": "lqd",
        "timestamp": 1574178484
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> I'm going crazy renaming things</p>",
        "id": 181131163,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574182417
    },
    {
        "content": "<p>some of these names I don't like</p>",
        "id": 181131173,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574182427
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>known_placeholder_subset\n</pre></div>",
        "id": 181131177,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574182431
    },
    {
        "content": "<p>e.g. I don't think that's right, but I think it should have the term placeholder in it somehow</p>",
        "id": 181131186,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574182441
    },
    {
        "content": "<p>it's true that it's missing</p>",
        "id": 181131249,
        "sender_full_name": "lqd",
        "timestamp": 1574182468
    },
    {
        "content": "<p>otherwise it's too close to the regular subset relation</p>",
        "id": 181131261,
        "sender_full_name": "lqd",
        "timestamp": 1574182478
    },
    {
        "content": "<p>if it were me it'd be</p>",
        "id": 181131266,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574182485
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>placeholder_known_to_contain\n</pre></div>",
        "id": 181131277,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574182493
    },
    {
        "content": "<p>but I sometimes get pushback for my wordy names :)</p>",
        "id": 181131306,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574182514
    },
    {
        "content": "<p>it's not that bad !</p>",
        "id": 181131327,
        "sender_full_name": "lqd",
        "timestamp": 1574182529
    },
    {
        "content": "<p><code>placeholder_origin_known_to_contain</code></p>",
        "id": 181131339,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574182539
    },
    {
        "content": "<p>:)</p>",
        "id": 181131354,
        "sender_full_name": "lqd",
        "timestamp": 1574182550
    },
    {
        "content": "<p>it doesn't quite work for subset</p>",
        "id": 181131365,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574182560
    },
    {
        "content": "<p><code>placeholder_known_to_be_subset</code> is awkward even for me</p>",
        "id": 181131418,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574182573
    },
    {
        "content": "<p>I guess <code>known_placeholder_subset</code> is ok</p>",
        "id": 181131430,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574182584
    },
    {
        "content": "<p>yeah it's still short but conveys the same info</p>",
        "id": 181131461,
        "sender_full_name": "lqd",
        "timestamp": 1574182607
    },
    {
        "content": "<p>I was once toying around with <code>declared</code> as a replacement for <code>known</code></p>",
        "id": 181131568,
        "sender_full_name": "lqd",
        "timestamp": 1574182682
    },
    {
        "content": "<p>mm I like that</p>",
        "id": 181131608,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574182704
    },
    {
        "content": "<p>to really fit our new conventions</p>",
        "id": 181131642,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574182729
    },
    {
        "content": "<p><code>subset</code> should probably be <code>subset_on_entry</code> or something</p>",
        "id": 181131651,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574182736
    },
    {
        "content": "<p>argh, I have to run, I'll try to finish up the ones I'm doing now</p>",
        "id": 181131667,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574182746
    },
    {
        "content": "<p>the hackmd is basically done modulo naming tweaks I think</p>",
        "id": 181131678,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574182754
    },
    {
        "content": "<p>it includes the liveness/init rules from <span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span>'s branch</p>",
        "id": 181131690,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574182765
    },
    {
        "content": "<p>nice ! sorry I wasn't able to follow much (if any) of what was going on :/</p>",
        "id": 181131697,
        "sender_full_name": "lqd",
        "timestamp": 1574182769
    },
    {
        "content": "<p>which I effectively reviewed, I guess</p>",
        "id": 181131702,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574182772
    },
    {
        "content": "<p>I've seen you two have made a lot of concrete progress and that's awesome</p>",
        "id": 181131739,
        "sender_full_name": "lqd",
        "timestamp": 1574182797
    },
    {
        "content": "<p>I'm myself trying to emit subset_errors in <code>check_universal_regions</code> rn</p>",
        "id": 181131994,
        "sender_full_name": "lqd",
        "timestamp": 1574182947
    },
    {
        "content": "<p>nice</p>",
        "id": 181132011,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574182959
    },
    {
        "content": "<p>I was bit by the variants again (in that the default, <code>Hybrid</code> doesn't compute subset errors) ;)</p>",
        "id": 181132075,
        "sender_full_name": "lqd",
        "timestamp": 1574183014
    },
    {
        "content": "<p>heh</p>",
        "id": 181132166,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574183055
    },
    {
        "content": "<p>yeah this is why I wanted to try and pull back to fewer variants</p>",
        "id": 181132172,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574183064
    },
    {
        "content": "<p>and we haven't even landed the equality one yet</p>",
        "id": 181132366,
        "sender_full_name": "lqd",
        "timestamp": 1574183208
    },
    {
        "content": "<p>(or a reworking of the Naive rules towards that model, ofc)</p>",
        "id": 181132403,
        "sender_full_name": "lqd",
        "timestamp": 1574183239
    },
    {
        "content": "<p>ok, I gotta run for today I think</p>",
        "id": 181132577,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574183358
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 181132719,
        "sender_full_name": "lqd",
        "timestamp": 1574183418
    },
    {
        "content": "<p>cheers Niko, thanks for today</p>",
        "id": 181132728,
        "sender_full_name": "lqd",
        "timestamp": 1574183425
    },
    {
        "content": "<p>haha my lone example emits subset errors, we'll see how it fares over the ui tests</p>",
        "id": 181138677,
        "sender_full_name": "lqd",
        "timestamp": 1574187187
    },
    {
        "content": "<p>nice!</p>",
        "id": 181142063,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574189364
    },
    {
        "content": "<p>tbf it’s all thanks to you, your notes were spot on</p>",
        "id": 181144592,
        "sender_full_name": "lqd",
        "timestamp": 1574190930
    },
    {
        "content": "<p>assuming the ui tests work out, and if we say let’s focus on the naive rules first, we could merge the polonius side tomorrow and publish a new version, to quickly update the rustc branch and open the rustc-side PR for review</p>",
        "id": 181144998,
        "sender_full_name": "lqd",
        "timestamp": 1574191173
    },
    {
        "content": "<p>awesome!</p>",
        "id": 181145195,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574191279
    },
    {
        "content": "<p>glad the notes were helpful :)</p>",
        "id": 181145200,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574191282
    },
    {
        "content": "<p>I don't have access to the machine running the ui tests now, but I think the work we mentioned for the polonius side has been done. So I've pushed everything and marked <a href=\"https://github.com/rust-lang/polonius/pull/137\" target=\"_blank\" title=\"https://github.com/rust-lang/polonius/pull/137\">https://github.com/rust-lang/polonius/pull/137</a> as ready for review: all the new work following the previous review starts at commit 8ecd7ff  (so around 12 new commits), and with a slight summary in <a href=\"https://github.com/rust-lang/polonius/pull/137#issuecomment-555751084\" target=\"_blank\" title=\"https://github.com/rust-lang/polonius/pull/137#issuecomment-555751084\">this comment</a></p>",
        "id": 181163023,
        "sender_full_name": "lqd",
        "timestamp": 1574203964
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 181163793,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574204681
    },
    {
        "content": "<p>well, we still need to see the results of the ui tests :)</p>",
        "id": 181163844,
        "sender_full_name": "lqd",
        "timestamp": 1574204738
    },
    {
        "content": "<p>but progress yay</p>",
        "id": 181163865,
        "sender_full_name": "lqd",
        "timestamp": 1574204760
    },
    {
        "content": "<p>(bringing at least some of the ui tests as datasets + unit tests in the polonius repo maybe also be a good idea)</p>",
        "id": 181164103,
        "sender_full_name": "lqd",
        "timestamp": 1574204916
    },
    {
        "content": "<blockquote>\n<p>(bringing at least some of the ui tests as datasets + unit tests in the polonius repo maybe also be a good idea)</p>\n</blockquote>\n<p>I think I have some of them already, but I've found it a bit hard to make unit tests out of code examples. I think that's <em>also</em> an important focus for the future; fixing test ergonomics</p>",
        "id": 181186648,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574236968
    },
    {
        "content": "<p>I'd like testing to be where I can type <code>cargo test</code> and be pretty sure I didn't break anything if they pass</p>",
        "id": 181186663,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574236998
    },
    {
        "content": "<p>I mean specifically bringing ones testing subset errors</p>",
        "id": 181187169,
        "sender_full_name": "lqd",
        "timestamp": 1574237628
    },
    {
        "content": "<p>I've made a couple tries in this PR at some of the ergonomics issues I had writing tests (and no tries at reorg but we'll need to do it as well), some of <a href=\"https://github.com/rust-lang/polonius/pull/137/files?file-filters%5B%5D=.rs#diff-c5fc4beef0f03493c2e9a9c876073f0fR589-R615\" target=\"_blank\" title=\"https://github.com/rust-lang/polonius/pull/137/files?file-filters%5B%5D=.rs#diff-c5fc4beef0f03493c2e9a9c876073f0fR589-R615\">https://github.com/rust-lang/polonius/pull/137/files?file-filters%5B%5D=.rs#diff-c5fc4beef0f03493c2e9a9c876073f0fR589-R615</a> seems easily extensible to more of our use cases, what do you think ?</p>",
        "id": 181187322,
        "sender_full_name": "lqd",
        "timestamp": 1574237809
    },
    {
        "content": "<p>NB the things I have been working on doesn't even have support in polonius-parser yet err</p>",
        "id": 181187343,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574237859
    },
    {
        "content": "<p>(we also need to remove some of the existing inputs, I'm not sure they're all super useful)</p>",
        "id": 181187352,
        "sender_full_name": "lqd",
        "timestamp": 1574237877
    },
    {
        "content": "<p>Haha honestly I didn't look at the test changes :)</p>",
        "id": 181187411,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574237933
    },
    {
        "content": "<p>But it looks good!</p>",
        "id": 181187492,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574238025
    },
    {
        "content": "<p>the ones testing an <code>./inputs</code> dataset are a bit tedious to write for sure <a href=\"https://github.com/rust-lang/polonius/pull/137/files?file-filters%5B%5D=.rs#diff-c5fc4beef0f03493c2e9a9c876073f0fR638-R666\" target=\"_blank\" title=\"https://github.com/rust-lang/polonius/pull/137/files?file-filters%5B%5D=.rs#diff-c5fc4beef0f03493c2e9a9c876073f0fR638-R666\">https://github.com/rust-lang/polonius/pull/137/files?file-filters%5B%5D=.rs#diff-c5fc4beef0f03493c2e9a9c876073f0fR638-R666</a> so I'm not sure about those, but matches your experience, we'll have to work out a way of making them a bit easier to test I totally agree</p>",
        "id": 181187504,
        "sender_full_name": "lqd",
        "timestamp": 1574238061
    },
    {
        "content": "<p>It's even worse with liveness and still worse with move paths</p>",
        "id": 181187514,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574238085
    },
    {
        "content": "<p>I'm not even sure how to represent those</p>",
        "id": 181187518,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574238090
    },
    {
        "content": "<p>there's a lot of desugaring and interning layers between what we're expressing in the initial rust test code and the data available to us</p>",
        "id": 181187583,
        "sender_full_name": "lqd",
        "timestamp": 1574238134
    },
    {
        "content": "<p>maybe some mix of using the parser to lower fragments of what we mean / need to assert, and looking for that somehow in the existing data I dunno, but yeah you've mentioned before it's a bit tough, and not just ergonomically</p>",
        "id": 181187640,
        "sender_full_name": "lqd",
        "timestamp": 1574238201
    },
    {
        "content": "<p>it seems like an important topic to tackle as part of the correctness push in any case</p>",
        "id": 181187713,
        "sender_full_name": "lqd",
        "timestamp": 1574238276
    },
    {
        "content": "<p>Yes!</p>",
        "id": 181187786,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574238362
    },
    {
        "content": "<p>(maybe we could also use a combination of the nll facts <em>and</em> a <code>-Zdump-mir=polonius</code> which can contain some of the data in the richer form usable in tests, e.g. user-facing origin names; or in some cases, also having some of rustc's machinery for comparing the user-facing compiler output, messages and errors, rather than only polonius output; additionally CI could also try to always run rustc tests as well)</p>",
        "id": 181188138,
        "sender_full_name": "lqd",
        "timestamp": 1574238723
    },
    {
        "content": "<p>The rustc CI tests will definitely be easier to run automatically once we have a somewhat stable API against rustc</p>",
        "id": 181188468,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574239147
    },
    {
        "content": "<p>ui tests results: 14 failures, some seem easy, I'll push the blessed tests in a bit</p>",
        "id": 181193690,
        "sender_full_name": "lqd",
        "timestamp": 1574244313
    },
    {
        "content": "<p>there are a 6 cases of \"test x has been running for over 60 seconds\" (but that's probably just the Naive variant, rather than subset errors per se; and some of cases could also be related to fact generation especially the OOM-happy materializing of subsets at all points in the cfg -- edit: there's definitely 2-3 times where it shortly froze my computer on these alloc-heavy fact gen cases)</p>",
        "id": 181194063,
        "sender_full_name": "lqd",
        "timestamp": 1574244641
    },
    {
        "content": "<p>to put that in perspective until I upload the blessed output, using the Hybrid variant which doesn't compute subset errors:</p>\n<ul>\n<li>250 test failures</li>\n<li>anecdata: here, only 1 case of \"test has been running over 60 seconds\"</li>\n<li>approximately the same runtime (as I was mentioning yesterday). This machine is not particularly quiet but apart from the weirdness above, the full, clean, compare-mode (so that includes the regular ui mode) ran around &lt; 2mins faster than using the Naive variant: around 21 to around 22 mins.</li>\n</ul>",
        "id": 181198022,
        "sender_full_name": "lqd",
        "timestamp": 1574248446
    },
    {
        "content": "<p>pushed <a href=\"https://github.com/lqd/rust/tree/placeholder_loans\" target=\"_blank\" title=\"https://github.com/lqd/rust/tree/placeholder_loans\">https://github.com/lqd/rust/tree/placeholder_loans</a>, blessed output for the 14 failures <a href=\"https://github.com/lqd/rust/commit/2fce903fa86d1ca37f155d08367116fd150eb3a8\" target=\"_blank\" title=\"https://github.com/lqd/rust/commit/2fce903fa86d1ca37f155d08367116fd150eb3a8\">here</a> but better seen as this .stderr to .polonius.stderr diff <a href=\"https://gist.github.com/lqd/7b43ac553f4a27041ca3960e6c5aea70\" target=\"_blank\" title=\"https://gist.github.com/lqd/7b43ac553f4a27041ca3960e6c5aea70\">https://gist.github.com/lqd/7b43ac553f4a27041ca3960e6c5aea70</a>. </p>\n<p>Some of the lifetime notes are duplicated (10 of the 14 failures), there's of course a special casing for 'static that current polonius errors ignore (2 failures; but in general I have a vague feeling something's off in Polonius wrt 'static), etc. Not so bad imo. (The one looking the most worthy of immediate investigation seems to be the hrtb perfect forwarding one ?)</p>",
        "id": 181199420,
        "sender_full_name": "lqd",
        "timestamp": 1574250178
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> let me take a look</p>",
        "id": 181209938,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574259022
    },
    {
        "content": "<p>it sounded like it was plausible to remove the datafrog-opt and friends</p>",
        "id": 181209944,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574259028
    },
    {
        "content": "<p>from what you said</p>",
        "id": 181209948,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574259032
    },
    {
        "content": "<p>we could for the time being add <code>skip-polonius</code> annotations to the tests that are timing out and try to address them separately</p>",
        "id": 181209962,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574259049
    },
    {
        "content": "<p>yeah, or redirect them all to <code>Naive</code></p>",
        "id": 181209967,
        "sender_full_name": "lqd",
        "timestamp": 1574259053
    },
    {
        "content": "<p>I don't understand 'redirect them all..' oh, you mean in polonius</p>",
        "id": 181209987,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574259075
    },
    {
        "content": "<p>yeah</p>",
        "id": 181209998,
        "sender_full_name": "lqd",
        "timestamp": 1574259080
    },
    {
        "content": "<p>yeah, that would be ok too</p>",
        "id": 181210011,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574259087
    },
    {
        "content": "<p>the big materializing of subset relations is going to be the more annoying part of this all endeavour</p>",
        "id": 181210035,
        "sender_full_name": "lqd",
        "timestamp": 1574259111
    },
    {
        "content": "<p>(which we/I might have referred to as the Location::All hack)</p>",
        "id": 181210087,
        "sender_full_name": "lqd",
        "timestamp": 1574259125
    },
    {
        "content": "<p>hmm</p>",
        "id": 181210526,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574259457
    },
    {
        "content": "<p>yes, I want to get rid of <code>Location::All</code></p>",
        "id": 181210533,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574259462
    },
    {
        "content": "<p>I totally forget what made that hard</p>",
        "id": 181210537,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574259465
    },
    {
        "content": "<p>I remember I had a branch that did so but it had a few problems</p>",
        "id": 181210593,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574259489
    },
    {
        "content": "<p>remind me, <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span>, are we doing that in rustc now?</p>",
        "id": 181210598,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574259499
    },
    {
        "content": "<p>it's <a href=\"https://github.com/rust-lang/rust/blob/8301de16dafc81a3b5d94aa0707ad83bdb56a599/src/librustc_mir/borrow_check/nll/type_check/mod.rs#L229-L233\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/8301de16dafc81a3b5d94aa0707ad83bdb56a599/src/librustc_mir/borrow_check/nll/type_check/mod.rs#L229-L233\">this</a> right ?</p>",
        "id": 181210605,
        "sender_full_name": "lqd",
        "timestamp": 1574259507
    },
    {
        "content": "<p>looks right</p>",
        "id": 181210987,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574259786
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> I'm reading your branch now, it looks quite good</p>",
        "id": 181211005,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574259803
    },
    {
        "content": "<p>(and one of the reasons why anything \"everywhere in the CFG\" scares me a bit ;) even rustc tests, which could generally be seen as small-ish, have hundreds of thousands of outlives constraints, over dozens of thousands of cfg nodes; -- and I'm not even talking about macro heavy code we see in the wild but have some stats on)</p>",
        "id": 181211029,
        "sender_full_name": "lqd",
        "timestamp": 1574259822
    },
    {
        "content": "<p>are you reading the rustc branch or the polonius PR ?</p>",
        "id": 181211116,
        "sender_full_name": "lqd",
        "timestamp": 1574259855
    },
    {
        "content": "<p>rustc branch</p>",
        "id": 181211685,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574260181
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> yeah we should maybe take some time to review a beter way to handle \"outlives-all\"</p>",
        "id": 181211694,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574260192
    },
    {
        "content": "<p>I mean for one thing</p>",
        "id": 181211698,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574260194
    },
    {
        "content": "<p>we could incorporate it into the rules readily enough</p>",
        "id": 181211705,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574260198
    },
    {
        "content": "<p>though with a bit of .. duplication</p>",
        "id": 181211754,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574260205
    },
    {
        "content": "<p>e.g., it's basically a <code>a; b</code> sort of thing</p>",
        "id": 181211774,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574260212
    },
    {
        "content": "<p>the same thing we did with <code>placeholder</code></p>",
        "id": 181211781,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574260217
    },
    {
        "content": "<p>but I don't love this sol'n</p>",
        "id": 181211789,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574260227
    },
    {
        "content": "<p>I thought about that but was hoping it wouldn't just move the OOM from fact generation in rustc, to polonius</p>",
        "id": 181211790,
        "sender_full_name": "lqd",
        "timestamp": 1574260227
    },
    {
        "content": "<p>yes, exactly</p>",
        "id": 181211808,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574260236
    },
    {
        "content": "<p>including via <code>equal</code> origins (which most of these are)</p>",
        "id": 181211830,
        "sender_full_name": "lqd",
        "timestamp": 1574260253
    },
    {
        "content": "<p>the rustc changes look good</p>",
        "id": 181211888,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574260297
    },
    {
        "content": "<p>I didn't review the \"--bless\" output</p>",
        "id": 181211892,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574260304
    },
    {
        "content": "<p>I guess I should look at the specific test you mentioned?</p>",
        "id": 181211909,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574260309
    },
    {
        "content": "<blockquote>\n<p>including via <code>equal</code> origins (which most of these are)</p>\n</blockquote>\n<p>yes</p>",
        "id": 181211918,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574260313
    },
    {
        "content": "<p>I think we sohuld put off discussing this until we talk about <code>equal</code></p>",
        "id": 181211934,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574260319
    },
    {
        "content": "<p>which I suspect we won't quite get to today but that's ok</p>",
        "id": 181211985,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574260328
    },
    {
        "content": "<p>a couple tests are interesting yeah</p>",
        "id": 181212003,
        "sender_full_name": "lqd",
        "timestamp": 1574260336
    },
    {
        "content": "<p>you mentioned some of the higher ranked tests?</p>",
        "id": 181212020,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574260350
    },
    {
        "content": "<p>yeah the hrtb perfect forwarding case</p>",
        "id": 181212041,
        "sender_full_name": "lqd",
        "timestamp": 1574260369
    },
    {
        "content": "<p>which \"loses\" an error</p>",
        "id": 181212052,
        "sender_full_name": "lqd",
        "timestamp": 1574260376
    },
    {
        "content": "<p>(the others <em>seem</em> either due to the fact that we might push many duplicate subset errors, because they're propagated along the cfg so we have one at all points where the placeholder loan flowed into an unexpected placeholder; or some behaviour tailored to 'static)</p>",
        "id": 181212191,
        "sender_full_name": "lqd",
        "timestamp": 1574260461
    },
    {
        "content": "<p>looking</p>",
        "id": 181212210,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574260477
    },
    {
        "content": "<p>eg <a href=\"https://gist.github.com/lqd/7b43ac553f4a27041ca3960e6c5aea70#file-hrtb-perfect-forwarding-polonius-diff\" target=\"_blank\" title=\"https://gist.github.com/lqd/7b43ac553f4a27041ca3960e6c5aea70#file-hrtb-perfect-forwarding-polonius-diff\">https://gist.github.com/lqd/7b43ac553f4a27041ca3960e6c5aea70#file-hrtb-perfect-forwarding-polonius-diff</a></p>",
        "id": 181212215,
        "sender_full_name": "lqd",
        "timestamp": 1574260482
    },
    {
        "content": "<p>(if you scroll quickly through the gist you'll see the 10 out of 14 failures being duplicate notes)</p>",
        "id": 181212292,
        "sender_full_name": "lqd",
        "timestamp": 1574260517
    },
    {
        "content": "<p>hmm</p>",
        "id": 181212355,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574260559
    },
    {
        "content": "<p>I'm a bit confused</p>",
        "id": 181212358,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574260561
    },
    {
        "content": "<p>looking at <a href=\"http://hrtb-perfect-forwarding.rs\" target=\"_blank\" title=\"http://hrtb-perfect-forwarding.rs\">hrtb-perfect-forwarding.rs</a></p>",
        "id": 181212418,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574260573
    },
    {
        "content": "<p>I see only one ERROR annotation</p>",
        "id": 181212422,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574260576
    },
    {
        "content": "<p>and I see one ERROR in the output in your branch</p>",
        "id": 181212433,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574260588
    },
    {
        "content": "<p>basically the <code>.polonius</code> output looks the same as what I see as <code>.nll</code> output</p>",
        "id": 181212489,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574260627
    },
    {
        "content": "<p>(link is <a href=\"https://github.com/lqd/rust/blob/2fce903fa86d1ca37f155d08367116fd150eb3a8/src/test/ui/hrtb/hrtb-perfect-forwarding.rs\" target=\"_blank\" title=\"https://github.com/lqd/rust/blob/2fce903fa86d1ca37f155d08367116fd150eb3a8/src/test/ui/hrtb/hrtb-perfect-forwarding.rs\">https://github.com/lqd/rust/blob/2fce903fa86d1ca37f155d08367116fd150eb3a8/src/test/ui/hrtb/hrtb-perfect-forwarding.rs</a> if anyone needs it)</p>",
        "id": 181212491,
        "sender_full_name": "lqd",
        "timestamp": 1574260628
    },
    {
        "content": "<p>oh</p>",
        "id": 181212517,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574260650
    },
    {
        "content": "<p>ok ok</p>",
        "id": 181212524,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574260651
    },
    {
        "content": "<p>now I see :)</p>",
        "id": 181212527,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574260652
    },
    {
        "content": "<p>I should've clicked your link</p>",
        "id": 181212533,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574260656
    },
    {
        "content": "<p>hmm that <em>is</em> a bit curious</p>",
        "id": 181212626,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574260708
    },
    {
        "content": "<p>do you know <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> what the \"error tuples\" we get out are?</p>",
        "id": 181212635,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574260720
    },
    {
        "content": "<p>(or the input tuples)</p>",
        "id": 181212652,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574260730
    },
    {
        "content": "<p>/me thinks</p>",
        "id": 181212665,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574260742
    },
    {
        "content": "<p>no but I can find out</p>",
        "id": 181212666,
        "sender_full_name": "lqd",
        "timestamp": 1574260742
    },
    {
        "content": "<p>ok so</p>",
        "id": 181212681,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574260750
    },
    {
        "content": "<p>I think I know why this is</p>",
        "id": 181212686,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574260752
    },
    {
        "content": "<p>in short, I think it's because we have to fix the \"other side\"</p>",
        "id": 181212703,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574260764
    },
    {
        "content": "<p>in other words, I want this setup where chalk ahndles the higher-ranked stuff</p>",
        "id": 181212718,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574260776
    },
    {
        "content": "<p>but right now, some of that work is being pushed to region solving</p>",
        "id": 181212726,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574260783
    },
    {
        "content": "<p>and polonius is not able to handle it</p>",
        "id": 181212730,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574260787
    },
    {
        "content": "<p>I was expecting something like this with this case</p>",
        "id": 181212737,
        "sender_full_name": "lqd",
        "timestamp": 1574260791
    },
    {
        "content": "<p>(and rightly so)</p>",
        "id": 181212741,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574260794
    },
    {
        "content": "<p>maybe it means the time to experiment with this in chalk is sooner than expected :/</p>",
        "id": 181212946,
        "sender_full_name": "lqd",
        "timestamp": 1574260944
    },
    {
        "content": "<p>yeah, I think the behavior here is expected, and the main question is how to \"record it\" so we dn't forget about it</p>",
        "id": 181212954,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574260951
    },
    {
        "content": "<p>I actually started some of that experimentation</p>",
        "id": 181212959,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574260958
    },
    {
        "content": "<p>but I've not gotten very far</p>",
        "id": 181212965,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574260961
    },
    {
        "content": "<p>the interesting question is whether I can do some of that in rustc, too</p>",
        "id": 181212983,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574260978
    },
    {
        "content": "<p>in lambda prolog you mean, or chalk ?</p>",
        "id": 181212987,
        "sender_full_name": "lqd",
        "timestamp": 1574260980
    },
    {
        "content": "<p>no, in chalk, just a bit over the last few mornings</p>",
        "id": 181213006,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574260992
    },
    {
        "content": "<p>nice :)</p>",
        "id": 181213009,
        "sender_full_name": "lqd",
        "timestamp": 1574261001
    },
    {
        "content": "<p>we could ignore this test in the polonius compare mode, maybe get the .facts i the polonius repo</p>",
        "id": 181213044,
        "sender_full_name": "lqd",
        "timestamp": 1574261039
    },
    {
        "content": "<p>yes, that seems good</p>",
        "id": 181213093,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574261049
    },
    {
        "content": "<p>or just bless the output and have some issues in the polonius repo</p>",
        "id": 181213102,
        "sender_full_name": "lqd",
        "timestamp": 1574261053
    },
    {
        "content": "<p>well, hmm</p>",
        "id": 181213103,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574261054
    },
    {
        "content": "<p>in general I do not like \"ignoring\" tests</p>",
        "id": 181213107,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574261057
    },
    {
        "content": "<p>I might rather open an issue on the polonius repo or something</p>",
        "id": 181213116,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574261064
    },
    {
        "content": "<blockquote>\n<p>or just bless the output and have some issues in the polonius repo</p>\n</blockquote>\n<p>er, yes, that</p>",
        "id": 181213118,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574261071
    },
    {
        "content": "<p>because other blessed output will need to be reviewed by the time we are finished, like we had to do with nlls</p>",
        "id": 181213125,
        "sender_full_name": "lqd",
        "timestamp": 1574261078
    },
    {
        "content": "<p>\"les great rendesvous\"  or whatever french people say :P</p>",
        "id": 181213139,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574261091
    },
    {
        "content": "<p>(rn it's mostly diagnostics ofc)</p>",
        "id": 181213143,
        "sender_full_name": "lqd",
        "timestamp": 1574261093
    },
    {
        "content": "<p>lol</p>",
        "id": 181213151,
        "sender_full_name": "lqd",
        "timestamp": 1574261099
    },
    {
        "content": "<p>I forget the phrase, though I've heard it...</p>",
        "id": 181213153,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574261101
    },
    {
        "content": "<p>les grands esprits se rencontrent ?</p>",
        "id": 181213164,
        "sender_full_name": "lqd",
        "timestamp": 1574261109
    },
    {
        "content": "<p>(great minds think alike)</p>",
        "id": 181213170,
        "sender_full_name": "lqd",
        "timestamp": 1574261118
    },
    {
        "content": "<p>that's the one</p>",
        "id": 181213209,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574261150
    },
    {
        "content": "<p>:)</p>",
        "id": 181213262,
        "sender_full_name": "lqd",
        "timestamp": 1574261170
    },
    {
        "content": "<p>anyway I like opening issues</p>",
        "id": 181213266,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574261174
    },
    {
        "content": "<p>let's do this for this test</p>",
        "id": 181213268,
        "sender_full_name": "lqd",
        "timestamp": 1574261175
    },
    {
        "content": "<p>ignoring tests are \"... too quiet\"</p>",
        "id": 181213271,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574261178
    },
    {
        "content": "<p>easily forgotten</p>",
        "id": 181213275,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574261180
    },
    {
        "content": "<p>plus it's good to know if the output changes more</p>",
        "id": 181213290,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574261189
    },
    {
        "content": "<p>and we'll need some for higher ranked subtyping I assume, at the very least to test it....</p>",
        "id": 181213291,
        "sender_full_name": "lqd",
        "timestamp": 1574261192
    },
    {
        "content": "<p>a couple of the other failures are related to 'static, eg the first 2: <a href=\"https://gist.github.com/lqd/7b43ac553f4a27041ca3960e6c5aea70#file-closure-substs-polonius-diff\" target=\"_blank\" title=\"https://gist.github.com/lqd/7b43ac553f4a27041ca3960e6c5aea70#file-closure-substs-polonius-diff\">https://gist.github.com/lqd/7b43ac553f4a27041ca3960e6c5aea70#file-closure-substs-polonius-diff</a> and <a href=\"https://gist.github.com/lqd/7b43ac553f4a27041ca3960e6c5aea70#file-error-handling-polonius-diff\" target=\"_blank\" title=\"https://gist.github.com/lqd/7b43ac553f4a27041ca3960e6c5aea70#file-error-handling-polonius-diff\">https://gist.github.com/lqd/7b43ac553f4a27041ca3960e6c5aea70#file-error-handling-polonius-diff</a></p>",
        "id": 181213365,
        "sender_full_name": "lqd",
        "timestamp": 1574261251
    },
    {
        "content": "<p>yeah I saw you said you suspected something about <code>'static</code></p>",
        "id": 181213377,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574261264
    },
    {
        "content": "<p>yeah, in another context, I added some assertions to rustc checking errors in the polonius output (illegal acess errors, not subset ones)</p>",
        "id": 181213459,
        "sender_full_name": "lqd",
        "timestamp": 1574261304
    },
    {
        "content": "<p>and it seemed like polonius was finding errors, maybe it was about statics/consts</p>",
        "id": 181213478,
        "sender_full_name": "lqd",
        "timestamp": 1574261321
    },
    {
        "content": "<p>but rustc wasn't asking for those in the output so that was weird: no rustc errors, and still polonius computed error tuples</p>",
        "id": 181213502,
        "sender_full_name": "lqd",
        "timestamp": 1574261343
    },
    {
        "content": "<p>so I'll definitely want to revisit this later</p>",
        "id": 181213519,
        "sender_full_name": "lqd",
        "timestamp": 1574261352
    },
    {
        "content": "<p>in today's cases however it seem mostly related to origins which outlive 'static ?</p>",
        "id": 181213542,
        "sender_full_name": "lqd",
        "timestamp": 1574261370
    },
    {
        "content": "<p>(or _are_ 'static)</p>",
        "id": 181213628,
        "sender_full_name": "lqd",
        "timestamp": 1574261411
    },
    {
        "content": "<p>I'm not sure if those should emit a subset error with ReStatic or something ?</p>",
        "id": 181213792,
        "sender_full_name": "lqd",
        "timestamp": 1574261527
    },
    {
        "content": "<p>those diffs</p>",
        "id": 181214016,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574261674
    },
    {
        "content": "<p>I'm not 100% sure what to make of them</p>",
        "id": 181214021,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574261678
    },
    {
        "content": "<p>in the first case, there is an extra error, right?</p>",
        "id": 181214076,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574261718
    },
    {
        "content": "<p>two extra errors</p>",
        "id": 181214096,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574261727
    },
    {
        "content": "<p>the first error does not look wrong to me</p>",
        "id": 181214111,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574261744
    },
    {
        "content": "<p>in other words</p>",
        "id": 181214124,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574261755
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"gd\">--- ./src/test/ui/nll/user-annotations/closure-substs.stderr    2019-04-23 15:38:28.770932800 +0200</span>\n<span class=\"gi\">+++ ./src/test/ui/nll/user-annotations/closure-substs.polonius.stderr   2019-11-20 12:16:21.782801300 +0100</span>\n<span class=\"gu\">@@ -16,6 +16,16 @@</span>\n    |                ^ returning this value requires that `&#39;1` must outlive `&#39;static`\n\n error: lifetime may not live long enough\n<span class=\"gi\">+  --&gt; $DIR/closure-substs.rs:15:16</span>\n<span class=\"gi\">+   |</span>\n<span class=\"gi\">+LL |     |x: &amp;i32| -&gt; &amp;&#39;static i32 {</span>\n<span class=\"gi\">+   |         -        ------------ return type of closure is &amp;&#39;2 i32</span>\n<span class=\"gi\">+   |         |</span>\n<span class=\"gi\">+   |         let&#39;s call the lifetime of this reference `&#39;1`</span>\n<span class=\"gi\">+LL |         return x;</span>\n<span class=\"gi\">+   |                ^ returning this value requires that `&#39;1` must outlive `&#39;2`</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+error: lifetime may not live long enough</span>\n   --&gt; $DIR/closure-substs.rs:22:9\n    |\n</pre></div>",
        "id": 181214129,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574261758
    },
    {
        "content": "<p>this hunk seems \"reasonable\"</p>",
        "id": 181214177,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574261764
    },
    {
        "content": "<p>i.e., the problem is probably more in error reporting or duplicate detection</p>",
        "id": 181214184,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574261775
    },
    {
        "content": "<p>I guess the same with this one</p>",
        "id": 181214205,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574261797
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"gi\">+error[E0521]: borrowed data escapes outside of closure</span>\n<span class=\"gi\">+  --&gt; $DIR/closure-substs.rs:29:9</span>\n<span class=\"gi\">+   |</span>\n<span class=\"gi\">+LL |     |x: &amp;i32, b: fn(&amp;&#39;static i32)| {</span>\n<span class=\"gi\">+   |      -        - `b` is declared here, outside of the closure body</span>\n<span class=\"gi\">+   |      |</span>\n<span class=\"gi\">+   |      `x` is a reference that is only valid in the closure body</span>\n<span class=\"gi\">+LL |         b(x);</span>\n<span class=\"gi\">+   |         ^^^^ `x` escapes the closure body here</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+error: aborting due to 6 previous errors</span>\n</pre></div>",
        "id": 181214212,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574261800
    },
    {
        "content": "<p>like, the error as described is ... wrong, but it's \"kind of right\"</p>",
        "id": 181214216,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574261811
    },
    {
        "content": "<p>here are the first test original stderrs <a href=\"https://github.com/lqd/rust/blob/2fce903fa86d1ca37f155d08367116fd150eb3a8/src/test/ui/nll/user-annotations/closure-substs.stderr\" target=\"_blank\" title=\"https://github.com/lqd/rust/blob/2fce903fa86d1ca37f155d08367116fd150eb3a8/src/test/ui/nll/user-annotations/closure-substs.stderr\">https://github.com/lqd/rust/blob/2fce903fa86d1ca37f155d08367116fd150eb3a8/src/test/ui/nll/user-annotations/closure-substs.stderr</a> vs <a href=\"https://github.com/lqd/rust/blob/2fce903fa86d1ca37f155d08367116fd150eb3a8/src/test/ui/nll/user-annotations/closure-substs.polonius.stderr\" target=\"_blank\" title=\"https://github.com/lqd/rust/blob/2fce903fa86d1ca37f155d08367116fd150eb3a8/src/test/ui/nll/user-annotations/closure-substs.polonius.stderr\">https://github.com/lqd/rust/blob/2fce903fa86d1ca37f155d08367116fd150eb3a8/src/test/ui/nll/user-annotations/closure-substs.polonius.stderr</a></p>",
        "id": 181214229,
        "sender_full_name": "lqd",
        "timestamp": 1574261821
    },
    {
        "content": "<p>i.e., at that spot, the lifetime of <code>x</code> is being related to <code>'static</code>, and I suspect polonius is reporting the right thing, but we're reporting it in a bogus way</p>",
        "id": 181214247,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574261836
    },
    {
        "content": "<p>I'm not totally sure what's up with the error-handling test, that .. hmm. That is going through a complex path for sure.</p>",
        "id": 181214333,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574261883
    },
    {
        "content": "<p>yeah I was thinking that polonius was reporting an error related to the renumbered/freshened region</p>",
        "id": 181214340,
        "sender_full_name": "lqd",
        "timestamp": 1574261886
    },
    {
        "content": "<blockquote>\n<p>yeah I was thinking that polonius was reporting an error related to the renumbered/freshened region</p>\n</blockquote>\n<p>in the closure-substs test?</p>",
        "id": 181214360,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574261903
    },
    {
        "content": "<p>but rustc usually wouldn't maybe do that in diagnostics or something</p>",
        "id": 181214369,
        "sender_full_name": "lqd",
        "timestamp": 1574261906
    },
    {
        "content": "<p>yes</p>",
        "id": 181214380,
        "sender_full_name": "lqd",
        "timestamp": 1574261912
    },
    {
        "content": "<blockquote>\n<p>but rustc usually wouldn't maybe do that in diagnostics or something</p>\n</blockquote>\n<p>yeah Ithink it's a case of doing a slightly different thing than rustc does</p>",
        "id": 181214441,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574261948
    },
    {
        "content": "<p>and our diagnostic handling not being tuned for that</p>",
        "id": 181214453,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574261954
    },
    {
        "content": "<p>but not a <em>wrong</em> thing</p>",
        "id": 181214459,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574261957
    },
    {
        "content": "<p>eg rustc would emit restatic in this case but polonius emits the '2 for the same error</p>",
        "id": 181214462,
        "sender_full_name": "lqd",
        "timestamp": 1574261958
    },
    {
        "content": "<p>yeah agreed</p>",
        "id": 181214469,
        "sender_full_name": "lqd",
        "timestamp": 1574261961
    },
    {
        "content": "<p>the other test--</p>",
        "id": 181214480,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574261967
    },
    {
        "content": "<p>let me go look at it</p>",
        "id": 181214487,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574261971
    },
    {
        "content": "<p>we definitely added some custom logic around impl trait with mutiple, unrelated lifetimes</p>",
        "id": 181214501,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574261981
    },
    {
        "content": "<p>probably more about diagnostics and expectations than bugs in polonius</p>",
        "id": 181214504,
        "sender_full_name": "lqd",
        "timestamp": 1574261982
    },
    {
        "content": "<p>egads that test :)</p>",
        "id": 181214670,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574262040
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;c</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"nb\">&#39;static</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">y</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">E</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;c</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">//~^ ERROR lifetime may not live long enough</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">CopyIfEq</span>::<span class=\"o\">&lt;*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">x</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;b</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">u</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">u</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 181214683,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574262053
    },
    {
        "content": "<blockquote>\n<p>the other test</p>\n</blockquote>\n<p>diff <a href=\"https://gist.github.com/lqd/7b43ac553f4a27041ca3960e6c5aea70#file-error-handling-polonius-diff\" target=\"_blank\" title=\"https://gist.github.com/lqd/7b43ac553f4a27041ca3960e6c5aea70#file-error-handling-polonius-diff\">https://gist.github.com/lqd/7b43ac553f4a27041ca3960e6c5aea70#file-error-handling-polonius-diff</a><br>\nnll <a href=\"https://github.com/lqd/rust/blob/2fce903fa86d1ca37f155d08367116fd150eb3a8/src/test/ui/impl-trait/multiple-lifetimes/error-handling.stderr\" target=\"_blank\" title=\"https://github.com/lqd/rust/blob/2fce903fa86d1ca37f155d08367116fd150eb3a8/src/test/ui/impl-trait/multiple-lifetimes/error-handling.stderr\">https://github.com/lqd/rust/blob/2fce903fa86d1ca37f155d08367116fd150eb3a8/src/test/ui/impl-trait/multiple-lifetimes/error-handling.stderr</a><br>\npolonius <a href=\"https://github.com/lqd/rust/blob/2fce903fa86d1ca37f155d08367116fd150eb3a8/src/test/ui/impl-trait/multiple-lifetimes/error-handling.polonius.stderr\" target=\"_blank\" title=\"https://github.com/lqd/rust/blob/2fce903fa86d1ca37f155d08367116fd150eb3a8/src/test/ui/impl-trait/multiple-lifetimes/error-handling.polonius.stderr\">https://github.com/lqd/rust/blob/2fce903fa86d1ca37f155d08367116fd150eb3a8/src/test/ui/impl-trait/multiple-lifetimes/error-handling.polonius.stderr</a></p>",
        "id": 181214712,
        "sender_full_name": "lqd",
        "timestamp": 1574262074
    },
    {
        "content": "<p>I remember this being a very carefully crafted bit of code now :)</p>",
        "id": 181214748,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574262098
    },
    {
        "content": "<p>probably by <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span></p>",
        "id": 181214759,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574262104
    },
    {
        "content": "<p>probably you :)</p>",
        "id": 181214870,
        "sender_full_name": "lqd",
        "timestamp": 1574262155
    },
    {
        "content": "<p>ah and it's about <code>existential type</code></p>",
        "id": 181214960,
        "sender_full_name": "lqd",
        "timestamp": 1574262238
    },
    {
        "content": "<p>yeah so this has tod o with those <code>MemberConstraint</code> things we added</p>",
        "id": 181215067,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574262279
    },
    {
        "content": "<p>obviously polonius knows nothing about them</p>",
        "id": 181215073,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574262285
    },
    {
        "content": "<p>I thnk that's prob ok but I'm trying to bring it a bit back in cache ;)</p>",
        "id": 181215088,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574262297
    },
    {
        "content": "<p>well I suspect this may be something where we want to file an issue and do follow-up</p>",
        "id": 181215133,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574262327
    },
    {
        "content": "<p>alright, that I can do</p>",
        "id": 181215169,
        "sender_full_name": "lqd",
        "timestamp": 1574262349
    },
    {
        "content": "<p>for the other duplicated diagnostics notes, I wonder if we should just emit one subset error, since we're not using the cfg node where it happens rn</p>",
        "id": 181215299,
        "sender_full_name": "lqd",
        "timestamp": 1574262404
    },
    {
        "content": "<p>ok, I sort of remember now</p>",
        "id": 181215367,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574262454
    },
    {
        "content": "<p>I'll need to look whether check_universal_regions does emit only one such error per unique, not known, free region pair</p>",
        "id": 181215376,
        "sender_full_name": "lqd",
        "timestamp": 1574262467
    },
    {
        "content": "<p>I definitely think we should leave this for follow-up work</p>",
        "id": 181215435,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574262494
    },
    {
        "content": "<p>but I do think we may have to do <em>something</em></p>",
        "id": 181215440,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574262498
    },
    {
        "content": "<p>wrt the member constraints you mean ?</p>",
        "id": 181215462,
        "sender_full_name": "lqd",
        "timestamp": 1574262514
    },
    {
        "content": "<p>correct</p>",
        "id": 181215470,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574262519
    },
    {
        "content": "<p>But I also remember thinking that some of the problems here</p>",
        "id": 181215516,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574262550
    },
    {
        "content": "<p>Got easier in Polonius's model</p>",
        "id": 181215519,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574262554
    },
    {
        "content": "<p>I was sorta hoping we wouldn't have to do anything heh</p>",
        "id": 181215522,
        "sender_full_name": "lqd",
        "timestamp": 1574262555
    },
    {
        "content": "<p>Though damned if I remember why :)</p>",
        "id": 181215525,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574262558
    },
    {
        "content": "<p>:)</p>",
        "id": 181215537,
        "sender_full_name": "lqd",
        "timestamp": 1574262567
    },
    {
        "content": "<p>Well it had to do with the way that polonius origins are sets of loans</p>",
        "id": 181215547,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574262573
    },
    {
        "content": "<p>and the fact that union was a relatively easy concept for us to express</p>",
        "id": 181215562,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574262582
    },
    {
        "content": "<p>that's very true</p>",
        "id": 181215575,
        "sender_full_name": "lqd",
        "timestamp": 1574262592
    },
    {
        "content": "<p>so maybe we have to do something, but it wouldn't be that big</p>",
        "id": 181215620,
        "sender_full_name": "lqd",
        "timestamp": 1574262604
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> I had to run but will be back in a bit</p>",
        "id": 181215725,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574262700
    },
    {
        "content": "<p>so far I think gthis all looks great and we should move forward to landing :)</p>",
        "id": 181215734,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574262709
    },
    {
        "content": "<p>alright :)</p>",
        "id": 181215737,
        "sender_full_name": "lqd",
        "timestamp": 1574262715
    },
    {
        "content": "<p>awesome</p>",
        "id": 181215791,
        "sender_full_name": "lqd",
        "timestamp": 1574262734
    },
    {
        "content": "<p>I'll take care of what's missing in the rustc branch</p>",
        "id": 181215820,
        "sender_full_name": "lqd",
        "timestamp": 1574262754
    },
    {
        "content": "<p>(that'll require checking/landing the polonius PR as well ofc)</p>",
        "id": 181215861,
        "sender_full_name": "lqd",
        "timestamp": 1574262779
    },
    {
        "content": "<p>rn I'm looking at the filtering we mentioned yesterday, and adapting to support placeholder loans, I think I'm close-ish (edit: then again maybe not)</p>",
        "id": 181215927,
        "sender_full_name": "lqd",
        "timestamp": 1574262839
    },
    {
        "content": "<p>(for subset errors whitelisting all placeholders does the trick, even though I'm sure we could tighten this a bit more to only check some placeholders which are not in <code>known_subset</code>, and their loans, etc. the ui tests pass equally well, and on this 8-core machine, clock in at 20mins even with the 6 slow/alloc-heavy tests (this filtering doesn't change those, since it's likely in fact gen, and the filtering is done in polonius instead of rustc) and that was overall similar to the optimized variant)</p>",
        "id": 181229574,
        "sender_full_name": "lqd",
        "timestamp": 1574270883
    },
    {
        "content": "<p>(in the same vein, and as I said before, I also applied this to liveness (to limit to \"interesting vars\", the ones whose uses/drops can derefs these interesting origins) and rustc tests also pass, in around 19mins once again)</p>",
        "id": 181229888,
        "sender_full_name": "lqd",
        "timestamp": 1574271087
    },
    {
        "content": "<p>(<del>and if the 2 <code>finished in XXX</code> at the end of the compare mode tests are indeed the run-times of both modes, on this machine the polonius one is around 1.8x</del> -- that doesn't really look like it's that easy, maybe because of parallelization, as the total -- if those are seconds ... -- is like 30 mins but it took 19)</p>",
        "id": 181230203,
        "sender_full_name": "lqd",
        "timestamp": 1574271284
    },
    {
        "content": "<p>the subtlety of this (much like the propagation of placeholder loans along the CFG wrt dead code) may also not be particularly covered by all our tests, but if that's interesting to you <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> well: <a href=\"https://github.com/lqd/borrow-check/commits/thats_interesting\" target=\"_blank\" title=\"https://github.com/lqd/borrow-check/commits/thats_interesting\">https://github.com/lqd/borrow-check/commits/thats_interesting</a></p>",
        "id": 181231775,
        "sender_full_name": "lqd",
        "timestamp": 1574272307
    },
    {
        "content": "<p>and last time I checked this (and now I'd need to regen the placeholder facts) this takes clap from 9-10s to 600ms (which is in the <code>LocationInsensitive</code> territory)</p>",
        "id": 181232182,
        "sender_full_name": "lqd",
        "timestamp": 1574272574
    },
    {
        "content": "<p>ah I see the duplicate regions relations in the rustc branch are only when using<code>#[rustc_regions]</code>, so while I can deduplicate the subset errors in the polonius equivalent of <code>check_universal_regions</code> (and indeed I have locally), should I <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  ? (or just bless as-is, and create an issue to look at this rustc-internal debug output later)</p>",
        "id": 181234798,
        "sender_full_name": "lqd",
        "timestamp": 1574274319
    },
    {
        "content": "<p>(sorry for pinging you btw -- I'll get dinner and finalize this later then)</p>",
        "id": 181234983,
        "sender_full_name": "lqd",
        "timestamp": 1574274463
    },
    {
        "content": "<p>(I vote \"no\": bless the stderrs as-is, and will file an issue and fix <code>#[rustc_regions]</code> later)</p>",
        "id": 181289422,
        "sender_full_name": "lqd",
        "timestamp": 1574330009
    },
    {
        "content": "<blockquote>\n<p>I'll take care of what's missing in the rustc branch</p>\n</blockquote>\n<p>I'm not looking forward to how much this will likely clash with my changes to rustc, but I'm ready for a rebase-party</p>",
        "id": 181303952,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574343006
    },
    {
        "content": "<p>these rustc changes are all in all pretty minimal so it shouldn't clash a lot (or at all, hopefully)</p>",
        "id": 181304570,
        "sender_full_name": "lqd",
        "timestamp": 1574343495
    },
    {
        "content": "<p>:)</p>",
        "id": 181305745,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574344378
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> I don't quite understand what you are asking me I think I'm happy with \"just bless and figure it out\"</p>",
        "id": 181605205,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574389742
    },
    {
        "content": "<p>it was about the 10 failures which all look like <a href=\"https://gist.github.com/lqd/7b43ac553f4a27041ca3960e6c5aea70#file-escape-upvar-nested-polonius-diff\" target=\"_blank\" title=\"https://gist.github.com/lqd/7b43ac553f4a27041ca3960e6c5aea70#file-escape-upvar-nested-polonius-diff\">https://gist.github.com/lqd/7b43ac553f4a27041ca3960e6c5aea70#file-escape-upvar-nested-polonius-diff</a> a lot of duplicate notes in the debug output when using <code>#[rustc_regions]</code>, but OK :)</p>",
        "id": 181615117,
        "sender_full_name": "lqd",
        "timestamp": 1574406844
    },
    {
        "content": "<p>I'll bless this all with explanations in the commits, and open tracking issues in the polonius repo. We'll just need to land the polonius side, then I can rebase the rustc branch to open a PR</p>",
        "id": 181615217,
        "sender_full_name": "lqd",
        "timestamp": 1574407016
    },
    {
        "content": "<p>(btw, thanks for the review Niko!)</p>",
        "id": 181695485,
        "sender_full_name": "lqd",
        "timestamp": 1574476028
    },
    {
        "content": "<p>I'll update the comments and all, merge+release to open the rustc PR, and then help out Albin where I can</p>",
        "id": 181696113,
        "sender_full_name": "lqd",
        "timestamp": 1574477272
    },
    {
        "content": "<p>(on that note <span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> your latest thesis draft is super cool! I've just started reading this one and the improvements you've been doing are great — also thanks for the classy shoutout to the WG — I'll try to have feedback for you)</p>",
        "id": 181696585,
        "sender_full_name": "lqd",
        "timestamp": 1574478162
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> Thank you! Also let me know if you prefer other names than lqd :) I feel a lot better about this version of the thesis than the first one.</p>",
        "id": 181706123,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574497294
    },
    {
        "content": "<p>(up to you re: name, I don't mind — the non-asciiness can be annoying to type hehe, but it's <a href=\"https://twitter.com/lqd\" target=\"_blank\" title=\"https://twitter.com/lqd\">eg here</a> if you want/need it)</p>",
        "id": 181708047,
        "sender_full_name": "lqd",
        "timestamp": 1574501088
    },
    {
        "content": "<p>My keyboard handles far worse than that every day :)</p>",
        "id": 181958214,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1574798653
    }
]