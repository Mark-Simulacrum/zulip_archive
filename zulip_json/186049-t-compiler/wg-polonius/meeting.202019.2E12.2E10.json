[
    {
        "content": "<p>good evening :)</p>",
        "id": 183096240,
        "sender_full_name": "lqd",
        "timestamp": 1576008030
    },
    {
        "content": "<p>in case you haven't seen it, the great Mattew reviewed <a href=\"https://github.com/rust-lang/rust/pull/67016\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/67016\">https://github.com/rust-lang/rust/pull/67016</a></p>",
        "id": 183096342,
        "sender_full_name": "lqd",
        "timestamp": 1576008114
    },
    {
        "content": "<p>and it landed, so we now have subset errors in rustc using <code>-Zpolonius</code></p>",
        "id": 183096410,
        "sender_full_name": "lqd",
        "timestamp": 1576008132
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 183096457,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576008178
    },
    {
        "content": "<p>that's awesome!</p>",
        "id": 183096460,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576008180
    },
    {
        "content": "<p>I had not noticed, no</p>",
        "id": 183096468,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576008184
    },
    {
        "content": "<p>and (this one Albin has seen) I have been able to \"replace\" the work lokalmatador did on profiling, by adding a couple of new activities in <code>-Z self-profile</code> in <a href=\"https://github.com/rust-lang/rust/pull/67193\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/67193\">https://github.com/rust-lang/rust/pull/67193</a></p>",
        "id": 183096478,
        "sender_full_name": "lqd",
        "timestamp": 1576008199
    },
    {
        "content": "<p>which the great Wesley has <em>already reviewed</em></p>",
        "id": 183096487,
        "sender_full_name": "lqd",
        "timestamp": 1576008209
    },
    {
        "content": "<p>I was wondering if y'all thought we needed to differentiate profiling data (by def_id or something) right now ? or if this aggregation was already useful</p>",
        "id": 183096569,
        "sender_full_name": "lqd",
        "timestamp": 1576008250
    },
    {
        "content": "<p>hmm</p>",
        "id": 183096630,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576008289
    },
    {
        "content": "<p>IIRC</p>",
        "id": 183096633,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576008291
    },
    {
        "content": "<p>when I found hotspots</p>",
        "id": 183096640,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576008295
    },
    {
        "content": "<p>it was usually one function that dominated the time</p>",
        "id": 183096646,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576008300
    },
    {
        "content": "<p>which might argue for being able to differentiate</p>",
        "id": 183096662,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576008310
    },
    {
        "content": "<p>however, I feel like this is something that the timer would want to support more generically</p>",
        "id": 183096713,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576008335
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> so yeah I remember you've been wanting to refactor more of fact generation, as mentioned in the PR, and this was mostly a cleanup of the existing one (in case you had conflicts in your existing PRs, or opinions about this one)</p>",
        "id": 183096716,
        "sender_full_name": "lqd",
        "timestamp": 1576008336
    },
    {
        "content": "<p>in fact it's going to yes</p>",
        "id": 183096719,
        "sender_full_name": "lqd",
        "timestamp": 1576008342
    },
    {
        "content": "<p>mw has been working on it apparently</p>",
        "id": 183096724,
        "sender_full_name": "lqd",
        "timestamp": 1576008348
    },
    {
        "content": "<p>also, what is the status of <span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span>'s initialization work..? I see I have like 21 unread messages over in that topic</p>",
        "id": 183096736,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576008355
    },
    {
        "content": "<p>Err</p>",
        "id": 183096740,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1576008361
    },
    {
        "content": "<p>I want to land PRs!!</p>",
        "id": 183096784,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576008367
    },
    {
        "content": "<p>/me has completely forgotten about those messages</p>",
        "id": 183096795,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1576008375
    },
    {
        "content": "<p>Oh those were off topic!</p>",
        "id": 183096802,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1576008383
    },
    {
        "content": "<p>there's a WIP PR you can review niko, right Albin ? or did that need more work (beside testing, that is)</p>",
        "id": 183096813,
        "sender_full_name": "lqd",
        "timestamp": 1576008404
    },
    {
        "content": "<p>OK.</p>",
        "id": 183096819,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576008411
    },
    {
        "content": "<p>Basically, we're waiting for me to get my behind in gear and rebase on @lqd's changes :)</p>",
        "id": 183096823,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1576008415
    },
    {
        "content": "<p>I think</p>",
        "id": 183096827,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1576008416
    },
    {
        "content": "<p>I'm already getting back that feeling of \"aaah can't remember where things were\"</p>",
        "id": 183096833,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576008422
    },
    {
        "content": "<p>I <em>think</em> as well</p>",
        "id": 183096839,
        "sender_full_name": "lqd",
        "timestamp": 1576008423
    },
    {
        "content": "<p>it was nice when we did the sprint and I felt I had all the context at hand :)</p>",
        "id": 183096850,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576008431
    },
    {
        "content": "<p>Yes, same</p>",
        "id": 183096858,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1576008439
    },
    {
        "content": "<p>I'm hearing \"polonius sprint 100% of the time\"</p>",
        "id": 183096874,
        "sender_full_name": "lqd",
        "timestamp": 1576008453
    },
    {
        "content": "<p>lol YES</p>",
        "id": 183096884,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576008464
    },
    {
        "content": "<p>from now on <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 183096885,
        "sender_full_name": "lqd",
        "timestamp": 1576008464
    },
    {
        "content": "<p>It's even worse now because I write Scala now and it's similar enough to Rust to completely mess up my sense of both languages</p>",
        "id": 183096886,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1576008464
    },
    {
        "content": "<p>there's a <a href=\"https://github.com/rust-lang/polonius/pull/135#issuecomment-558809090\" target=\"_blank\" title=\"https://github.com/rust-lang/polonius/pull/135#issuecomment-558809090\">comment here</a> that seems to summarize some state</p>",
        "id": 183096897,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576008470
    },
    {
        "content": "<p>I guess what I remember is</p>",
        "id": 183096959,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576008487
    },
    {
        "content": "<p>yes those were mostly for the parsing and testing</p>",
        "id": 183096962,
        "sender_full_name": "lqd",
        "timestamp": 1576008489
    },
    {
        "content": "<p>that over the sprint we kind of worked out what the rules \"should be\" in the hackmd</p>",
        "id": 183096969,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576008495
    },
    {
        "content": "<p>which can be seen as independent I feel</p>",
        "id": 183096973,
        "sender_full_name": "lqd",
        "timestamp": 1576008499
    },
    {
        "content": "<p>I think so too</p>",
        "id": 183096981,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1576008508
    },
    {
        "content": "<p>not sure how much that compared with what's in the PR</p>",
        "id": 183096986,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576008512
    },
    {
        "content": "<p>those new rules are in the PR right ?</p>",
        "id": 183096997,
        "sender_full_name": "lqd",
        "timestamp": 1576008524
    },
    {
        "content": "<p>It should be the same now</p>",
        "id": 183096998,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1576008525
    },
    {
        "content": "<p>there was that one sticking point about whether we had to track \"any initialized subpath\" or \"just the variable\" for the drop code</p>",
        "id": 183097004,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576008530
    },
    {
        "content": "<p>right, awesome</p>",
        "id": 183097006,
        "sender_full_name": "lqd",
        "timestamp": 1576008531
    },
    {
        "content": "<p>and I sort of remember that it probably didn't matter anyway</p>",
        "id": 183097010,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576008536
    },
    {
        "content": "<p>ok, great</p>",
        "id": 183097015,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576008540
    },
    {
        "content": "<p>Yes, they should be the same, with the exception of the parent/child reverse relation</p>",
        "id": 183097017,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1576008541
    },
    {
        "content": "<p>That I insisted on :)</p>",
        "id": 183097025,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1576008545
    },
    {
        "content": "<p>so I guess that in terms of review, I could try to compare the hackmd vs the PR and read that</p>",
        "id": 183097026,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576008548
    },
    {
        "content": "<p>ok :)</p>",
        "id": 183097046,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576008562
    },
    {
        "content": "<p>besides unit testing in polonius itself, as opposed to in rustc, this should be ready to review then ?</p>",
        "id": 183097054,
        "sender_full_name": "lqd",
        "timestamp": 1576008570
    },
    {
        "content": "<blockquote>\n<p>and I sort of remember that it probably didn't matter anyway</p>\n</blockquote>\n<p>You sort of convinced me to do the \"less precise\" one, but I'm still not fully convinced</p>",
        "id": 183097079,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1576008589
    },
    {
        "content": "<p>Anyway, that version is in the code now</p>",
        "id": 183097093,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1576008598
    },
    {
        "content": "<p>I'm really looking forward to the Christmas Holiday Sprint</p>",
        "id": 183097194,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1576008648
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span>  when you mention rebasing over my changes, you mean your init work on the rustc side, which goes with your open polonius PR ?</p>",
        "id": 183097198,
        "sender_full_name": "lqd",
        "timestamp": 1576008652
    },
    {
        "content": "<p>I feel the less precise one is \"more correct\", but I think I also convinced myself that it didn't matter in practice, because we of the limitations around how we allow initialization of subpaths etc</p>",
        "id": 183097215,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576008668
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> Both really, also your work on polonius?</p>",
        "id": 183097219,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1576008670
    },
    {
        "content": "<p>that is, there's no open PR for the rustc side yet, right ?</p>",
        "id": 183097222,
        "sender_full_name": "lqd",
        "timestamp": 1576008673
    },
    {
        "content": "<p>Or maybe that isn't merged yet?</p>",
        "id": 183097228,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1576008678
    },
    {
        "content": "<p>ah yes, right right</p>",
        "id": 183097233,
        "sender_full_name": "lqd",
        "timestamp": 1576008683
    },
    {
        "content": "<p>everything's merged now</p>",
        "id": 183097238,
        "sender_full_name": "lqd",
        "timestamp": 1576008693
    },
    {
        "content": "<p>I don't even have an open PR for my rust changes yet I think</p>",
        "id": 183097266,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1576008712
    },
    {
        "content": "<p>probably just in a branch yeah</p>",
        "id": 183097312,
        "sender_full_name": "lqd",
        "timestamp": 1576008724
    },
    {
        "content": "<p>at least you're not blocked on me so that's good</p>",
        "id": 183097348,
        "sender_full_name": "lqd",
        "timestamp": 1576008745
    },
    {
        "content": "<p>Yes, and it's mostly a matter of emitting moves for variables at the start of each function</p>",
        "id": 183097350,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1576008747
    },
    {
        "content": "<p>No!</p>",
        "id": 183097357,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1576008750
    },
    {
        "content": "<p>I'm just blocked on time</p>",
        "id": 183097362,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1576008754
    },
    {
        "content": "<p>a tough enemy</p>",
        "id": 183097377,
        "sender_full_name": "lqd",
        "timestamp": 1576008771
    },
    {
        "content": "<p>OK.</p>",
        "id": 183097442,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576008830
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> wrt to the WIP error, do you have thoughts on testing: would you rather we add all the missing facts in the parser and so on (possibly looking more like the old borrowck test syntax etc, to have paths etc etc) now ?</p>",
        "id": 183097497,
        "sender_full_name": "lqd",
        "timestamp": 1576008846
    },
    {
        "content": "<p>can we land the polonius PR?</p>",
        "id": 183097498,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576008847
    },
    {
        "content": "<p>what is the \"WIP error\"</p>",
        "id": 183097523,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576008863
    },
    {
        "content": "<p>dang</p>",
        "id": 183097534,
        "sender_full_name": "lqd",
        "timestamp": 1576008872
    },
    {
        "content": "<p>the WIP move errors PR I meant sorry</p>",
        "id": 183097548,
        "sender_full_name": "lqd",
        "timestamp": 1576008888
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/polonius/pull/135\" target=\"_blank\" title=\"https://github.com/rust-lang/polonius/pull/135\">https://github.com/rust-lang/polonius/pull/135</a></p>",
        "id": 183097573,
        "sender_full_name": "lqd",
        "timestamp": 1576008908
    },
    {
        "content": "<p>yeah ok that's kind of what I was asking too</p>",
        "id": 183097581,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576008919
    },
    {
        "content": "<p>/me thinks</p>",
        "id": 183097593,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576008931
    },
    {
        "content": "<p>ok so there are sort of two things</p>",
        "id": 183097609,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576008945
    },
    {
        "content": "<p>first, creating tests that use facts generated by rustc</p>",
        "id": 183097622,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576008959
    },
    {
        "content": "<p>which I guess we can do with a WIP branch</p>",
        "id": 183097667,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576008964
    },
    {
        "content": "<p>second, being able to write tests that are standalone</p>",
        "id": 183097689,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576008977
    },
    {
        "content": "<p>which would involve adding things to the parser?</p>",
        "id": 183097694,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576008982
    },
    {
        "content": "<p>right</p>",
        "id": 183097698,
        "sender_full_name": "lqd",
        "timestamp": 1576008985
    },
    {
        "content": "<p>I do think we should create a better \"unit test\" language, more like the old thing</p>",
        "id": 183097711,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576009000
    },
    {
        "content": "<p>I'm not sure if you've put any thought into what it might look like, that could be a useful exercise</p>",
        "id": 183097719,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576009013
    },
    {
        "content": "<p>just adding those relations is relatively easy, the better unit test language is a bit more involved than just adding raw facts support to the parser</p>",
        "id": 183097740,
        "sender_full_name": "lqd",
        "timestamp": 1576009023
    },
    {
        "content": "<p>but it seems like we're going to want to be able to distill tests and patterns into something readable</p>",
        "id": 183097754,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576009029
    },
    {
        "content": "<p>right</p>",
        "id": 183097760,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576009036
    },
    {
        "content": "<p>But I guess the more advanced language would still be syntactic sugar for the same thing?</p>",
        "id": 183097765,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1576009043
    },
    {
        "content": "<p>yeah</p>",
        "id": 183097773,
        "sender_full_name": "lqd",
        "timestamp": 1576009049
    },
    {
        "content": "<p>we <em>probably</em> want both</p>",
        "id": 183097786,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576009058
    },
    {
        "content": "<p>So it might not me completely wasted work to spend some time writing base facts</p>",
        "id": 183097788,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1576009059
    },
    {
        "content": "<p>absolutely, to the both of you</p>",
        "id": 183097806,
        "sender_full_name": "lqd",
        "timestamp": 1576009073
    },
    {
        "content": "<p>that is, I'm sort of imagining it'd be nice to be able to \"hand specify\" the input facts in a precise way</p>",
        "id": 183097817,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576009081
    },
    {
        "content": "<p>but also have some short-hand</p>",
        "id": 183097856,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576009084
    },
    {
        "content": "<p>I'll try adding the quicker ones soon</p>",
        "id": 183097888,
        "sender_full_name": "lqd",
        "timestamp": 1576009114
    },
    {
        "content": "<p>as I haven't seen the others, say, the paths but maybe it's straightforward</p>",
        "id": 183097919,
        "sender_full_name": "lqd",
        "timestamp": 1576009140
    },
    {
        "content": "<p>we could take 10 minutes to sketch what it might look like</p>",
        "id": 183097953,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576009162
    },
    {
        "content": "<p>the nicer version, I mean</p>",
        "id": 183097968,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576009176
    },
    {
        "content": "<p>the better unit test language you mean</p>",
        "id": 183097974,
        "sender_full_name": "lqd",
        "timestamp": 1576009179
    },
    {
        "content": "<p>or maybe it's not a good use of this time</p>",
        "id": 183097977,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576009181
    },
    {
        "content": "<p>:)</p>",
        "id": 183097980,
        "sender_full_name": "lqd",
        "timestamp": 1576009181
    },
    {
        "content": "<p>so for reference your ~old~ prior syntax was <a href=\"https://github.com/nikomatsakis/borrowck/tree/master/test\" target=\"_blank\" title=\"https://github.com/nikomatsakis/borrowck/tree/master/test\">https://github.com/nikomatsakis/borrowck/tree/master/test</a></p>",
        "id": 183098055,
        "sender_full_name": "lqd",
        "timestamp": 1576009219
    },
    {
        "content": "<p>yeah</p>",
        "id": 183098126,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576009279
    },
    {
        "content": "<p>one question mark would be how much of a \"type system\" we want</p>",
        "id": 183098137,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576009287
    },
    {
        "content": "<p>I remember wrestling with this</p>",
        "id": 183098139,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576009289
    },
    {
        "content": "<p><a href=\"https://github.com/nikomatsakis/borrowck/blob/master/test/borrowck-write-struct-containing-mutable-ref-whose-referent-is-mutably-borrowed.nll\" target=\"_blank\" title=\"https://github.com/nikomatsakis/borrowck/blob/master/test/borrowck-write-struct-containing-mutable-ref-whose-referent-is-mutably-borrowed.nll\">https://github.com/nikomatsakis/borrowck/blob/master/test/borrowck-write-struct-containing-mutable-ref-whose-referent-is-mutably-borrowed.nll</a> seems representative</p>",
        "id": 183098270,
        "sender_full_name": "lqd",
        "timestamp": 1576009356
    },
    {
        "content": "<p>I think we probably do want the ability to declare \"structs\"</p>",
        "id": 183098317,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576009395
    },
    {
        "content": "<p>so that you can write things like <code>a.b.c = foo</code> and it can figure out the type relationships from that</p>",
        "id": 183098345,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576009414
    },
    {
        "content": "<p>albeit without assertions here but that reminds me, were those good ? would we want them in the \"program\" like this language has ?</p>",
        "id": 183098429,
        "sender_full_name": "lqd",
        "timestamp": 1576009443
    },
    {
        "content": "<p><a href=\"https://hackmd.io/UdIO2PR6QJqYxEBcmsm31Q\" target=\"_blank\" title=\"https://hackmd.io/UdIO2PR6QJqYxEBcmsm31Q\">hackmd for polonius mini input language</a></p>",
        "id": 183098431,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576009446
    },
    {
        "content": "<p>I don't think I liked the assertions that much in the end</p>",
        "id": 183098451,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576009458
    },
    {
        "content": "<p>well it may be useful to be able to add some of them</p>",
        "id": 183098467,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576009469
    },
    {
        "content": "<p>yeah</p>",
        "id": 183098492,
        "sender_full_name": "lqd",
        "timestamp": 1576009485
    },
    {
        "content": "<p>as long as we can do arbitrary assertions in the rust unit tests, the more common ones can be available in the language as well</p>",
        "id": 183098550,
        "sender_full_name": "lqd",
        "timestamp": 1576009521
    },
    {
        "content": "<p>maybe the 'one big function' setup was good</p>",
        "id": 183098643,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576009571
    },
    {
        "content": "<p>(especially here as sometimes we're testing \"temporary\" relations when we're checking a computation, and sometimes a blackbox-y \"check only the output\")</p>",
        "id": 183098700,
        "sender_full_name": "lqd",
        "timestamp": 1576009616
    },
    {
        "content": "<p>Yeah, I think in general \"black-box\" is better</p>",
        "id": 183098728,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576009642
    },
    {
        "content": "<blockquote>\n<p>maybe the 'one big function' setup was good</p>\n</blockquote>\n<p>I guess that depends on whether we want to test things that involve multiple functions?</p>",
        "id": 183098730,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1576009643
    },
    {
        "content": "<p>Well, I think you want to be able to provide \"prototypes\" probably</p>",
        "id": 183098749,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576009660
    },
    {
        "content": "<p>for fns that could get called</p>",
        "id": 183098753,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576009664
    },
    {
        "content": "<p>but only one fn body</p>",
        "id": 183098760,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576009669
    },
    {
        "content": "<p>we mostly test one function body today</p>",
        "id": 183098820,
        "sender_full_name": "lqd",
        "timestamp": 1576009688
    },
    {
        "content": "<p>yeah I mean polonius is always testing one function at a time thus far</p>",
        "id": 183098889,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576009748
    },
    {
        "content": "<p>yeah</p>",
        "id": 183098905,
        "sender_full_name": "lqd",
        "timestamp": 1576009760
    },
    {
        "content": "<p>did y'all think about closures when talking about multiple functions or multiple prototypes ?</p>",
        "id": 183099044,
        "sender_full_name": "lqd",
        "timestamp": 1576009846
    },
    {
        "content": "<p>not really, closures are (at least right now...) mostly handled 'outside'</p>",
        "id": 183099091,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576009873
    },
    {
        "content": "<p>i.e., polonius doesn't have to know about them</p>",
        "id": 183099101,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576009882
    },
    {
        "content": "<p>right?</p>",
        "id": 183099103,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576009883
    },
    {
        "content": "<p>it's my understanding :)</p>",
        "id": 183099119,
        "sender_full_name": "lqd",
        "timestamp": 1576009897
    },
    {
        "content": "<p>I think the older syntax modeled variance ?</p>",
        "id": 183099223,
        "sender_full_name": "lqd",
        "timestamp": 1576009959
    },
    {
        "content": "<p><a href=\"https://github.com/nikomatsakis/borrowck/blob/master/test/borrowck-walk-linked-list.nll\" target=\"_blank\" title=\"https://github.com/nikomatsakis/borrowck/blob/master/test/borrowck-walk-linked-list.nll\">https://github.com/nikomatsakis/borrowck/blob/master/test/borrowck-walk-linked-list.nll</a> is cute</p>",
        "id": 183099265,
        "sender_full_name": "lqd",
        "timestamp": 1576009991
    },
    {
        "content": "<blockquote>\n<p>I think the older syntax modeled variance ?</p>\n</blockquote>\n<p>yes it did</p>",
        "id": 183099376,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576010066
    },
    {
        "content": "<p>it needed to in order to get <code>T1 &lt;: T2</code> correct</p>",
        "id": 183099382,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576010072
    },
    {
        "content": "<p>probably we need that too</p>",
        "id": 183099406,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576010092
    },
    {
        "content": "<p>well from this sketch it's pretty clear this is a \"non-trivial\" effort</p>",
        "id": 183099503,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576010146
    },
    {
        "content": "<p>not super hard</p>",
        "id": 183099507,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576010148
    },
    {
        "content": "<p>but it'll take some time</p>",
        "id": 183099511,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576010150
    },
    {
        "content": "<p>might be nice to try and write-up some tests for interesting scenarios</p>",
        "id": 183099523,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576010159
    },
    {
        "content": "<p>and see what's missing</p>",
        "id": 183099570,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576010163
    },
    {
        "content": "<p>do you happen to remember what you didn't like with it ? it seems likely we can reuse some/a lot from it</p>",
        "id": 183099573,
        "sender_full_name": "lqd",
        "timestamp": 1576010164
    },
    {
        "content": "<p>I'm trying to remember</p>",
        "id": 183099580,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576010176
    },
    {
        "content": "<p>yeah, agreed, seems like a bit of work :)</p>",
        "id": 183099591,
        "sender_full_name": "lqd",
        "timestamp": 1576010182
    },
    {
        "content": "<p>I remember having this feeling that it needed a bit more high-level stuff</p>",
        "id": 183099594,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576010184
    },
    {
        "content": "<p>e.g., it'd be nice to be able to write <code>foo(a, b)</code> and have it figure out the proper relations from that</p>",
        "id": 183099610,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576010199
    },
    {
        "content": "<p>also that I kind of started with something super minimal and glued a few things onto it and it was starting to feel hodge-podgy</p>",
        "id": 183099629,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576010215
    },
    {
        "content": "<p>question is how deep we need to go now</p>",
        "id": 183099631,
        "sender_full_name": "lqd",
        "timestamp": 1576010218
    },
    {
        "content": "<p>but I can't remember exactly why</p>",
        "id": 183099632,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576010219
    },
    {
        "content": "<p>as at the time you didn't have the NLL test corpus in rustc</p>",
        "id": 183099649,
        "sender_full_name": "lqd",
        "timestamp": 1576010228
    },
    {
        "content": "<p>yeah</p>",
        "id": 183099653,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576010231
    },
    {
        "content": "<p>I can probably start this with the basis of the older language and the hackmd (wow you've written a lot &lt;3)</p>",
        "id": 183099697,
        "sender_full_name": "lqd",
        "timestamp": 1576010263
    },
    {
        "content": "<p>and then we can iterate as needed</p>",
        "id": 183099712,
        "sender_full_name": "lqd",
        "timestamp": 1576010273
    },
    {
        "content": "<p>I'm not sure how much to prioritize <em>but</em></p>",
        "id": 183099729,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576010282
    },
    {
        "content": "<p>we don't need to block the PR on that tho</p>",
        "id": 183099766,
        "sender_full_name": "lqd",
        "timestamp": 1576010284
    },
    {
        "content": "<p>it does seem like if we want to write unit tests</p>",
        "id": 183099769,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576010287
    },
    {
        "content": "<p>we're going to want this</p>",
        "id": 183099776,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576010289
    },
    {
        "content": "<p>yeah</p>",
        "id": 183099785,
        "sender_full_name": "lqd",
        "timestamp": 1576010295
    },
    {
        "content": "<p>I wonder <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> if you could start with some of the scenarios you wanted to write</p>",
        "id": 183099795,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576010305
    },
    {
        "content": "<p>and try to \"model them\" the way you'd want to write it so to speak</p>",
        "id": 183099802,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576010312
    },
    {
        "content": "<p>sure</p>",
        "id": 183099805,
        "sender_full_name": "lqd",
        "timestamp": 1576010314
    },
    {
        "content": "<p>one thing that's missing (e.g.) is that this doesn't have type parametesr on the function declaration</p>",
        "id": 183099814,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576010324
    },
    {
        "content": "<p>e.g. to model <code>fn foo&lt;'a, 'b: 'a&gt;</code> etc</p>",
        "id": 183099818,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576010329
    },
    {
        "content": "<p>(I think Albin had more use cases since we talked about it for the WIP PR)</p>",
        "id": 183099843,
        "sender_full_name": "lqd",
        "timestamp": 1576010347
    },
    {
        "content": "<p>we need <code>rustc -Znll-facts</code> !</p>",
        "id": 183099873,
        "sender_full_name": "lqd",
        "timestamp": 1576010376
    },
    {
        "content": "<p>don't we have that?</p>",
        "id": 183099926,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576010402
    },
    {
        "content": "<p>/me confused</p>",
        "id": 183099949,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576010404
    },
    {
        "content": "<p>not in a polonius unit test :)</p>",
        "id": 183099960,
        "sender_full_name": "lqd",
        "timestamp": 1576010414
    },
    {
        "content": "<p>I mean it <em>is</em> another option, as an aside</p>",
        "id": 183099975,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576010428
    },
    {
        "content": "<p>that we could invoke rustc to generate facts</p>",
        "id": 183099980,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576010432
    },
    {
        "content": "<p>and write the \"unit tests\" in pure rust</p>",
        "id": 183099985,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576010437
    },
    {
        "content": "<p>but I feel like there is some value in having this simplified model</p>",
        "id": 183099994,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576010445
    },
    {
        "content": "<p>maybe not that much though :)</p>",
        "id": 183099998,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576010452
    },
    {
        "content": "<p>it'd help with validation, but not really with new facts ofc</p>",
        "id": 183100005,
        "sender_full_name": "lqd",
        "timestamp": 1576010458
    },
    {
        "content": "<p>yeah, that's part of the problem</p>",
        "id": 183100023,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576010464
    },
    {
        "content": "<p>ok, I gotta go finish up a few other things</p>",
        "id": 183100048,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576010484
    },
    {
        "content": "<p>I don't expect us to add a million more, that being said</p>",
        "id": 183100053,
        "sender_full_name": "lqd",
        "timestamp": 1576010487
    },
    {
        "content": "<p>indeed, one hopes that this will slow down</p>",
        "id": 183100063,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576010495
    },
    {
        "content": "<p>oh right, it's 40mins in</p>",
        "id": 183100067,
        "sender_full_name": "lqd",
        "timestamp": 1576010499
    },
    {
        "content": "<p>thanks a lot <span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> and <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> :)</p>",
        "id": 183100082,
        "sender_full_name": "lqd",
        "timestamp": 1576010514
    },
    {
        "content": "<p>I'll try to work on this this week</p>",
        "id": 183100133,
        "sender_full_name": "lqd",
        "timestamp": 1576010529
    },
    {
        "content": "<p>(having \"pure rust\" unit tests would also help ensure the rustc driver has access to the facts, like Vytautas needed)</p>",
        "id": 183100175,
        "sender_full_name": "lqd",
        "timestamp": 1576010571
    },
    {
        "content": "<p>(for one of Niko's great ideas)</p>",
        "id": 183100258,
        "sender_full_name": "lqd",
        "timestamp": 1576010630
    }
]