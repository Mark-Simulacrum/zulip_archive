[
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> I see why you don't love the \"copy-and-paste\" approach in <a href=\"https://github.com/rust-lang-nursery/polonius/issues/157\">polonius#157</a></p>",
        "id": 247728997,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627661650
    },
    {
        "content": "<p>One thing I'm wondering about</p>",
        "id": 247729006,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627661656
    },
    {
        "content": "<p>right :)</p>",
        "id": 247729012,
        "sender_full_name": "lqd",
        "timestamp": 1627661658
    },
    {
        "content": "<p>I know at some point we had a datalog-to-datafrog compiler</p>",
        "id": 247729024,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627661664
    },
    {
        "content": "<p>somewhat</p>",
        "id": 247729048,
        "sender_full_name": "lqd",
        "timestamp": 1627661673
    },
    {
        "content": "<p>which I guess never got quite good enough etc etc to really use here?</p>",
        "id": 247729049,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627661675
    },
    {
        "content": "<p>but I was wondering-- maybe we can leverage macro-rules?</p>",
        "id": 247729065,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627661684
    },
    {
        "content": "<p>not to let you write <em>datalog</em> really</p>",
        "id": 247729085,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627661694
    },
    {
        "content": "<p>but these are all leapjoins</p>",
        "id": 247729102,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627661702
    },
    {
        "content": "<p>(<a href=\"https://github.com/lqd/datapond/\">https://github.com/lqd/datapond/</a>) it specifically doesn't handle leapjoins yet</p>",
        "id": 247729105,
        "sender_full_name": "lqd",
        "timestamp": 1627661703
    },
    {
        "content": "<p>I could imagine a macro like</p>",
        "id": 247729140,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627661720
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">leapjoin</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">subset</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">cfg_edge</span><span class=\"p\">.</span><span class=\"n\">extend_with</span><span class=\"p\">(</span><span class=\"o\">|&amp;</span><span class=\"p\">(</span><span class=\"n\">_origin1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_origin2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">point1</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">point1</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">origin_live_on_entry_rel</span><span class=\"p\">.</span><span class=\"n\">extend_with</span><span class=\"p\">(</span><span class=\"o\">|&amp;</span><span class=\"p\">(</span><span class=\"n\">origin1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_origin2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_point1</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">origin1</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"c1\">// -&gt; A</span>\n<span class=\"w\">            </span><span class=\"n\">placeholder_origin</span><span class=\"p\">.</span><span class=\"n\">filter_with</span><span class=\"p\">(</span><span class=\"o\">|&amp;</span><span class=\"p\">(</span><span class=\"n\">_origin1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">origin2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_point1</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">origin2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">())),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">&amp;</span><span class=\"p\">(</span><span class=\"n\">origin1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">origin2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_point1</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">point2</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">origin1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">origin2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">point2</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 247729300,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627661807
    },
    {
        "content": "<p>egads not that but maybe you get the idea :)</p>",
        "id": 247729322,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627661820
    },
    {
        "content": "<p>I do :)</p>",
        "id": 247729335,
        "sender_full_name": "lqd",
        "timestamp": 1627661829
    },
    {
        "content": "<p>something to handle the basic structure of \"common things then some options\"</p>",
        "id": 247729347,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627661835
    },
    {
        "content": "<p>I suspect there were more common things than I identified</p>",
        "id": 247729364,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627661850
    },
    {
        "content": "<p>I wouldn't want to land the PR as-is with these copy-pastes, a macro, some changes in datafrog -- (rather than using the datalog-to-datafrog compiler, since it would generate the same thing if we didn't use it as a proc macro) -- would be good of course. So the PR was to show how verbose this was. And to discuss the more theoretical question about the implicit antijoin that now would need to be explicit (if I didn't make any silly mistakes in my analysis at the time)</p>",
        "id": 247729406,
        "sender_full_name": "lqd",
        "timestamp": 1627661877
    },
    {
        "content": "<p>and whether you all agreed about the approach to fix how we model the placeholders' liveness</p>",
        "id": 247729773,
        "sender_full_name": "lqd",
        "timestamp": 1627662069
    },
    {
        "content": "<p>it's not that big of a deal of course, but it also allowed to be closer to the rules document that we have (albeit at a potential nontrivial cost in readability and verboseness, depending on the way we'd do it)</p>",
        "id": 247729794,
        "sender_full_name": "lqd",
        "timestamp": 1627662081
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Polonius.20Hackathon.202021-07-30/near/247728276\">said</a>:</p>\n<blockquote>\n<p>maybe rebase it after landing <a href=\"https://github.com/rust-lang-nursery/polonius/issues/156\">polonius#156</a>?</p>\n</blockquote>\n<p>done, the diff is now more palatable</p>",
        "id": 247731416,
        "sender_full_name": "lqd",
        "timestamp": 1627662858
    }
]