[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> maybe let's talk about what we can do prior to the next sprint here?</p>",
        "id": 256785719,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1633718284
    },
    {
        "content": "<p>sure</p>",
        "id": 256785761,
        "sender_full_name": "lqd",
        "timestamp": 1633718301
    },
    {
        "content": "<p>emitting some useful facts would be worthwhile to have by then so I'll try my best &amp; focus on that</p>",
        "id": 256785891,
        "sender_full_name": "lqd",
        "timestamp": 1633718366
    },
    {
        "content": "<p>Also <span class=\"user-mention\" data-user-id=\"337115\">@Domenic Quirl</span>, what do you want to do for the next sprint (besides figuring out .next)</p>",
        "id": 256786153,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1633718465
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Sprint.202021-10-15.20prep/near/256785891\">said</a>:</p>\n<blockquote>\n<p>emitting some useful facts would be worthwhile to have by then so I'll try my best &amp; focus on that</p>\n</blockquote>\n<p>Okay, so fact-gen for .next. That's using Niko's frontend right?</p>",
        "id": 256786223,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1633718509
    },
    {
        "content": "<p>yeah</p>",
        "id": 256786244,
        "sender_full_name": "lqd",
        "timestamp": 1633718521
    },
    {
        "content": "<p>while testing I think I saw some cases that didn't parse yet, maybe was it function call arguments</p>",
        "id": 256786384,
        "sender_full_name": "lqd",
        "timestamp": 1633718582
    },
    {
        "content": "<p>Okay, yeah that would be good. I'm kind of bummed out that we're not just using MIR for this, but there's things like two-phase borrows that make prototyping a lot harder.</p>",
        "id": 256786601,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1633718674
    },
    {
        "content": "<p>In the existing <code>rustc</code> fact-generation framework I mean.</p>",
        "id": 256786647,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1633718689
    },
    {
        "content": "<p>yeah</p>",
        "id": 256786664,
        "sender_full_name": "lqd",
        "timestamp": 1633718697
    },
    {
        "content": "<p>But yeah, I think that will help a lot to iterate on <code>.next</code>.</p>",
        "id": 256786752,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1633718737
    },
    {
        "content": "<p>it would have been good to have fact gen in rustc, so that we're able to validate more easily, and likely find the cases you found</p>",
        "id": 256786913,
        "sender_full_name": "lqd",
        "timestamp": 1633718783
    },
    {
        "content": "<p>Souffle integration is done. I'm trying to find a package for <code>Souffle</code> that I can throw up on the web somewhere for CI.</p>",
        "id": 256786969,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1633718808
    },
    {
        "content": "<p>at the same time it'd be more \"annoying\" to do, and you obviously didn't need the existing breadth of rustc tests to find annoying cases</p>",
        "id": 256787045,
        "sender_full_name": "lqd",
        "timestamp": 1633718843
    },
    {
        "content": "<p>do you think we want to wait for souffl√©'s next release so that fix their bandwidth issue ?</p>",
        "id": 256787122,
        "sender_full_name": "lqd",
        "timestamp": 1633718878
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"118594\">Dylan MacKenzie (ecstatic-morse)</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Sprint.202021-10-15.20prep/near/256786153\">said</a>:</p>\n<blockquote>\n<p>Also <span class=\"user-mention silent\" data-user-id=\"337115\">Domenic Quirl</span>, what do you want to do for the next sprint (besides figuring out .next)</p>\n</blockquote>\n<p>Hm, I'm not sure <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> <br>\nThere isn't that much more actionable <code>.next</code> stuff that I think makes sense at the moment. But it's probably also not useful to go back to normal Polonius already (which I also don't know if I could).</p>",
        "id": 256787200,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1633718897
    },
    {
        "content": "<p>(I have no idea if that's expected to be soon or not, but I'd expect so, since no one can download it atm ...)</p>",
        "id": 256787242,
        "sender_full_name": "lqd",
        "timestamp": 1633718919
    },
    {
        "content": "<p>Primarily, I wanted to talk about mutability and invalidation in <code>.next</code> (before we started discussing part of that today already ^^)</p>",
        "id": 256787313,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1633718948
    },
    {
        "content": "<p>Yeah, but it's nice to have a big corpus. Like, I had to think very carefully to construct that example and the diamond CFG one. It would have been much easier to just run it and see what broke, but that just shifts the work onto the person doing the prototyping (since they have to do fact generation in <code>rustc</code>), when really we should be optimizing for their efficiency.</p>",
        "id": 256787381,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1633718987
    },
    {
        "content": "<p>You had a particular idea in mind?</p>",
        "id": 256787444,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1633719003
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"337115\">@Domenic Quirl</span> re: fact gen? No. I think we're doing the right thing.</p>",
        "id": 256787530,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1633719040
    },
    {
        "content": "<p>Re: items for the upcoming sprint</p>",
        "id": 256787574,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1633719069
    },
    {
        "content": "<p>what could be interesting domenic, since you've also worked out some manual fact generation (and I didn't have the time to review it sorry, but niko merged it already, I think I saw something I wnated to talk about, it was in some subset IIRC, no big deal) was if you wanted to write up your understanding, it could be interesting to compare our understanding</p>",
        "id": 256787618,
        "sender_full_name": "lqd",
        "timestamp": 1633719089
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"337115\">@Domenic Quirl</span> lemme know if you wanna talk more about that stuff pre-sprint. I'm sure we'll have time during it as well.</p>",
        "id": 256787636,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1633719097
    },
    {
        "content": "<p>(hopefully I'm being clear enough, I'm a bit tired :)</p>",
        "id": 256787847,
        "sender_full_name": "lqd",
        "timestamp": 1633719181
    },
    {
        "content": "<p>/me cannot be trusted to manage Zulip topics</p>",
        "id": 256788066,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1633719268
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Sprint.202021-10-15.20prep/near/256787618\">said</a>:</p>\n<blockquote>\n<p>what could be interesting domenic, since you've also worked out some manual fact generation (and I didn't have the time to review it sorry, but niko merged it already, I think I saw something I wnated to talk about, it was in some subset IIRC, no big deal) was if you wanted to write up your understanding, it could be interesting to compare our understanding</p>\n</blockquote>\n<p>I can try to collect something like an extended version of the explainer comment from the rules file, with my thoughts about the issues we've had so far</p>",
        "id": 256788424,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1633719400
    },
    {
        "content": "<p>Was your thing, per chance, related to variance <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span>? Cause I had to briefly stop to consider that when working on the tests</p>",
        "id": 256788550,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1633719453
    },
    {
        "content": "<p>somewhat</p>",
        "id": 256788707,
        "sender_full_name": "lqd",
        "timestamp": 1633719517
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"118594\">Dylan MacKenzie (ecstatic-morse)</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Sprint.202021-10-15.20prep/near/256787636\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"337115\">Domenic Quirl</span> lemme know if you wanna talk more about that stuff pre-sprint. I'm sure we'll have time during it as well.</p>\n</blockquote>\n<p>and I should have some more time over the next week. I just need to also think about this some more myself first <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 256788817,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1633719572
    },
    {
        "content": "<p>but it was more of a \"this fact is interesting and I'm not sure I have the same understanding about it\" rather than a fully formed argument about something being wrong</p>",
        "id": 256788823,
        "sender_full_name": "lqd",
        "timestamp": 1633719576
    },
    {
        "content": "<p>There is also some amount of inconsistency in how consequently facts are applied in the manual ones at the moment, particularly for \"simple\" assignments. Maybe also which version of fact generation we're thinking about while writing them (i.e., how smart it is)</p>",
        "id": 256789232,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1633719714
    },
    {
        "content": "<p>very true</p>",
        "id": 256789316,
        "sender_full_name": "lqd",
        "timestamp": 1633719741
    },
    {
        "content": "<p>that makes reverse engineering that (including adapting them over the AST shape) into rules slightly more confusing to me ^^</p>",
        "id": 256789477,
        "sender_full_name": "lqd",
        "timestamp": 1633719812
    },
    {
        "content": "<p>Following our discussions, I've added a section about fact generation to the PFP HackMD <a href=\"https://hackmd.io/KpK0ICQOQLSPxIcNIlhkJQ?view#Fact-Generation\">here</a>. It turned out as less of a definitive declaration of my personal version of the fact generator from hand-writing the tests, and more of an extended summary of the status quo with additional examples, to which I then added sections for open questions and the as-of-yet problematic examples we (Dylan) has discovered plus what we've found out and discussed about them. I think this fits better, since while I made some assumptions while writing the manual facts, I'm not confident they are <em>correct</em>. Or, maybe, rather that there even is something objectively correct right now for all of them, since which facts we need will depend on how we solve the open problems and where we land with fact generation vs. derivation directly in the rules.</p>",
        "id": 257044338,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1633948626
    },
    {
        "content": "<p>One thing I had some trouble with was understanding what exactly is the thought process behind <a href=\"https://github.com/nikomatsakis/polonius.next/blob/d91f1608b4f0b5c63183c9aa5c34a0d89bf4d2b1/src/polonius.dl#L37-L40\">these additional clears</a> in Niko's comment. I've made up some annotated code samples which hopefully explain my confusion under \"Clearing Origins\"</p>",
        "id": 257044677,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1633948803
    },
    {
        "content": "<p>(in the meantime I also made quite a bit of progress on it)</p>",
        "id": 257053663,
        "sender_full_name": "lqd",
        "timestamp": 1633953707
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> we can also discuss the unrolling rules here if you want. Maybe you can explain some more <em>why</em> the resulting facts look off to you?</p>",
        "id": 257212439,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1634049072
    },
    {
        "content": "<p>On my phone rn but the gist was: if you‚Äôre borrowing from x then x must outlive the reference, and these facts say the opposite IIRC ?</p>",
        "id": 257214495,
        "sender_full_name": "lqd",
        "timestamp": 1634049824
    },
    {
        "content": "<p>Hm, maybe we should think about this less from a liveness angle and more from that of invalidation. If I modify <code>*x</code> through <code>y</code>, then that invalidates <code>x</code>. Admittedly, this seems related to when/how we clear origins, which as you can tell from my notes has caused some confusion on my side</p>",
        "id": 257223908,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1634053300
    },
    {
        "content": "<p>I have not read those yet unfortunately but clearing and invalidations are indeed confusing :) (but my point wasn't related to liveness per se)</p>",
        "id": 257228009,
        "sender_full_name": "lqd",
        "timestamp": 1634054776
    },
    {
        "content": "<p>I think the thought process behind these clears is that some writes differ in how they impact each loan</p>",
        "id": 257230123,
        "sender_full_name": "lqd",
        "timestamp": 1634055575
    },
    {
        "content": "<p>in particular changing what something points is equivalent to borrowing the new memory, and not invalidating the old memory</p>",
        "id": 257230362,
        "sender_full_name": "lqd",
        "timestamp": 1634055648
    },
    {
        "content": "<p>recreating the loan via the clear, rather than invalidating the loan as that would cause errors if accessed</p>",
        "id": 257230472,
        "sender_full_name": "lqd",
        "timestamp": 1634055689
    },
    {
        "content": "<p>I understand the underlying motivation. What confuses me is how this is currently reflected in the fact generation \"instructions\"</p>",
        "id": 257230951,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1634055880
    },
    {
        "content": "<p>btw, I don't know about you, but I think the subjects are complex enough, and confusions easy to happen here -- with multiple people and topics in flight at the same time, that I'd offer we do some call (voice,  no need for camera, unrecorded) during the sprint so that we have a higher bandwidth communication channel for at least a little while</p>",
        "id": 257231000,
        "sender_full_name": "lqd",
        "timestamp": 1634055901
    },
    {
        "content": "<p>something like \"if there's a loan on *temp and a write to temp, then we clear the origin of the first loan\" ?</p>",
        "id": 257231274,
        "sender_full_name": "lqd",
        "timestamp": 1634056008
    },
    {
        "content": "<p>In particular, if a different write invalidates a loan (e.g., a write to the original variable, as in the first \"Question\" example), then this is still an error, even if a potentially overlapping borrow is re-assigned in-between</p>",
        "id": 257231342,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1634056033
    },
    {
        "content": "<p>That should not be an invalidation, but a clear could mask other potential errors that do not arise from the re-assigned borrow</p>",
        "id": 257231426,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1634056064
    },
    {
        "content": "<p>I think it'll be good to read through your examples on friday, all of us together, walk through them and explain how we'd generate the facts for them</p>",
        "id": 257231696,
        "sender_full_name": "lqd",
        "timestamp": 1634056165
    },
    {
        "content": "<p>Also, using a re-assigned overlapping borrow does not reference the original origin, so should not invalidate it</p>",
        "id": 257231721,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1634056173
    },
    {
        "content": "<p>and any invalidation that happens <em>later</em> is not impacted by the clear</p>",
        "id": 257231770,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1634056194
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Sprint.202021-10-15.20prep/near/257231000\">said</a>:</p>\n<blockquote>\n<p>btw, I don't know about you, but I think the subjects are complex enough, and confusions easy to happen here -- with multiple people and topics in flight at the same time, that I'd offer we do some call (voice,  no need for camera, unrecorded) during the sprint so that we have a higher bandwidth communication channel for at least a little while</p>\n</blockquote>\n<p>I agree that this would be beneficial, and I'd be happy to attend such a call</p>",
        "id": 257231925,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1634056239
    },
    {
        "content": "<p>which example are you referring to when you mention overlapping borrows ?</p>",
        "id": 257232227,
        "sender_full_name": "lqd",
        "timestamp": 1634056337
    },
    {
        "content": "<p>the \"Is it correct?\" one ?</p>",
        "id": 257232305,
        "sender_full_name": "lqd",
        "timestamp": 1634056372
    },
    {
        "content": "<p>from <a href=\"https://hackmd.io/KpK0ICQOQLSPxIcNIlhkJQ?view#Questions1\">https://hackmd.io/KpK0ICQOQLSPxIcNIlhkJQ?view#Questions1</a> ?</p>",
        "id": 257232334,
        "sender_full_name": "lqd",
        "timestamp": 1634056381
    },
    {
        "content": "<p>Either (of the \"clearing origins\" ones). They all have a <code>temp</code> borrow which is later re-assigned, and a second borrow which goes through <code>*temp</code></p>",
        "id": 257232396,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1634056409
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Sprint.202021-10-15.20prep/near/257232334\">said</a>:</p>\n<blockquote>\n<p>from <a href=\"https://hackmd.io/KpK0ICQOQLSPxIcNIlhkJQ?view#Questions1\">https://hackmd.io/KpK0ICQOQLSPxIcNIlhkJQ?view#Questions1</a> ?</p>\n</blockquote>\n<p>it is this section, yes</p>",
        "id": 257232459,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1634056440
    },
    {
        "content": "<p>I did wonder if there were parts of fact gen (or prior) that would emit errors (in addition to the ones computed by the datalog rules) in some of these cases heh</p>",
        "id": 257232753,
        "sender_full_name": "lqd",
        "timestamp": 1634056540
    },
    {
        "content": "<p>seems like in addition to rules vs. fact gen vs. lowerings we now also have analyses in rustc <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 257233241,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1634056724
    },
    {
        "content": "<p>Though my point is that the case that should error would probably error without the extra clear</p>",
        "id": 257233394,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1634056787
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"337115\">@Domenic Quirl</span> I had time to look at some of your examples. I think you're right that the rules are currently incomplete. I'm wondering if the correct place to handle derefs is not in <code>loan_invalidated</code>, but in <code>origin_accessed</code>? Specifically, a deref of a reference is not only an access of the origin associated  with that reference but also of all origins reachable from it in the <code>subset</code> graph?</p>",
        "id": 257252919,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1634064575
    },
    {
        "content": "<p>That doesn't fix one of your latter examples, though, the one about clearing origins, since when <code>L_*temp</code> is cleared, it breaks the connection in the <code>subset</code> graph. Hm.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">22</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">temp</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// &amp;'L_x mut x</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">temp</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// &amp;'L_*temp mut *temp == &amp;mut x: double mut borrow of `x`</span>\n<span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">11</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// Invalidates both borrows</span>\n<span class=\"n\">temp</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// No use of `*temp` while referencing `x` (good).</span>\n<span class=\"w\">               </span><span class=\"c1\">// But clears 'L_*temp???</span>\n<span class=\"o\">*</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">33</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// Should be ERROR, but invalidation of 'L_*temp is not propagated</span>\n<span class=\"w\">         </span><span class=\"c1\">// to here because it is cleared above.</span>\n</code></pre></div>",
        "id": 257254088,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1634065061
    },
    {
        "content": "<p>One of my primary problems with how things are at the moment is that I think it actually <em>is</em> important to have some of the invalidations, but in a way that requires a lot of info of both</p>\n<ul>\n<li>what the original path of a borrow is (i.e., the <code>*(*x).0</code> in a <code>&amp;'L *(*x).0</code>), and</li>\n<li>what the underlying memory/original data is (i.e., whatever is borrowed in <code>*x.0</code>.<br>\npossibly across time.</li>\n</ul>\n<p>The former is because if something in that path changes, then future operations on it don't affect the borrow that went through it. The latter is because modifications to the underlying memory <em>will</em> do that, even if e.g. a source variable that currently owns the memory is not lexically mentioned in the path.</p>",
        "id": 257254340,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1634065158
    },
    {
        "content": "<p>(I'm explicitly not talking about whether this info comes from fact generation or rules for now)</p>",
        "id": 257254418,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1634065193
    },
    {
        "content": "<p>This is problematic:</p>\n<blockquote>\n<p>what the underlying memory/original data is (i.e., whatever is borrowed in *x.0.<br>\npossibly across time.</p>\n</blockquote>",
        "id": 257254704,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1634065285
    },
    {
        "content": "<p>at least if it comes from fact generation</p>",
        "id": 257254747,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1634065306
    },
    {
        "content": "<p>The point of Polonius is basically to compute that, so if we need it as an input, we've already lost.</p>",
        "id": 257255009,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1634065394
    },
    {
        "content": "<p>The thing is the situation that the (currently confusing) clear rules are for does exist, so you can't simply emit invalidation facts for all origins <code>'L_path</code> wherever <code>path</code> is used, as it may have been re-assigned in between.</p>",
        "id": 257255099,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1634065429
    },
    {
        "content": "<p>Let me look at your example variation</p>",
        "id": 257255326,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1634065527
    },
    {
        "content": "<p>By \"emit invalidation facts\", you mean you have to stop propagating them at some point? Or you literally cannot emit the initial <code>loan_invalidated_at</code> input fact? (Sorry, I'm a bit confused)</p>",
        "id": 257255459,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1634065566
    },
    {
        "content": "<p>Sorry <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 257255499,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1634065581
    },
    {
        "content": "<p>I understood it as \"we can't emit invalidate_origin for each loan present somewhere in the program\"</p>",
        "id": 257255613,
        "sender_full_name": "lqd",
        "timestamp": 1634065631
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"118594\">Dylan MacKenzie (ecstatic-morse)</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Sprint.202021-10-15.20prep/near/257255459\">said</a>:</p>\n<blockquote>\n<p>By \"emit invalidation facts\", you mean you have to stop propagating them at some point? Or you literally cannot emit the initial <code>loan_invalidated_at</code> input fact? (Sorry, I'm a bit confused)</p>\n</blockquote>\n<p>I meant emitting them, with the caveat that this is under the assumption that the fact generation is responsible here. That is to say you could theoretically also try to emit them and then filter them in the logical rules. Let's just say it would be incorrect for it to result in an observable invalidation effect</p>",
        "id": 257255761,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1634065692
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"118594\">Dylan MacKenzie (ecstatic-morse)</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Sprint.202021-10-15.20prep/near/257252919\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"337115\">Domenic Quirl</span> I had time to look at some of your examples. I think you're right that the rules are currently incomplete. I'm wondering if the correct place to handle derefs is not in <code>loan_invalidated</code>, but in <code>origin_accessed</code>? Specifically, a deref of a reference is not only an access of the origin associated  with that reference but also of all origins reachable from it in the <code>subset</code> graph?</p>\n</blockquote>\n<p>So here, removing the connection is <em>correct</em> in the sense that, after the re-assignment, the two borrows are unrelated.</p>\n<p>In theory, the propagation through the subset graph should be the same as currently I think - either you propagate invalidation and then it doesn't matter which of the related origins you access, or you propagate accesses, and then it doesn't matter which origin you invalidate :D</p>",
        "id": 257256374,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1634065930
    },
    {
        "content": "<p>Hmm, I guess part of my idea is that it would become easier to separate one kind of \"clear\", the one that happen when a variable with that origin is overwritten, with the other kind, one that happens when the target of a deref in a reborrow is overwritten. Thinking about it more, I don't see how that division actually solves the problems we're having.</p>",
        "id": 257258860,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1634066990
    },
    {
        "content": "<p>Maybe Niko can provide some clarity this Friday. This is becoming a lot more complex than the liveness-based formulation.</p>",
        "id": 257259096,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1634067094
    },
    {
        "content": "<p>I was literally thinking \"all this to avoid liveness\" as you wrote it</p>",
        "id": 257259253,
        "sender_full_name": "lqd",
        "timestamp": 1634067148
    },
    {
        "content": "<p>at least we have all the interesting examples in the document, to talk about then</p>",
        "id": 257259494,
        "sender_full_name": "lqd",
        "timestamp": 1634067271
    },
    {
        "content": "<p>Yeah. I mean I would be quite happy to figure out whether the general pattern of <code>backward analysis /\\ forward analysis</code> is fundamentally necessary get sound and reasonably precise results on pointer analysis problems.</p>",
        "id": 257259714,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1634067383
    },
    {
        "content": "<p>Since that would, I think, help me get a deeper understanding of those problems.</p>",
        "id": 257259780,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1634067419
    },
    {
        "content": "<p>At this point, I can't tell if our problems are fundamental or if we're just not being clever enough. <span class=\"user-mention silent\" data-user-id=\"337115\">Domenic Quirl</span>'s examples are more problematic than my self-invalidation one I think, which seemed like more of an edge-case</p>",
        "id": 257260066,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1634067542
    },
    {
        "content": "<p>it's more like a trivial pattern than I can't help to be confused about whether it's some simple misunderstanding of fact generation</p>",
        "id": 257260303,
        "sender_full_name": "lqd",
        "timestamp": 1634067641
    },
    {
        "content": "<p>Anyways, I think we need to talk about some \"big picture\" stuff on Friday, and I prefer a call for that as well.</p>",
        "id": 257260387,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1634067690
    },
    {
        "content": "<p>and needing the results of the pointer analysis to know how to emit the facts needed for the pointer analysis is an interesting conundrum as you said earlier</p>",
        "id": 257260491,
        "sender_full_name": "lqd",
        "timestamp": 1634067733
    },
    {
        "content": "<p>in any case there's no need for me to continue on fact generation until our friday talk</p>",
        "id": 257260932,
        "sender_full_name": "lqd",
        "timestamp": 1634067943
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"337115\">Domenic Quirl</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Sprint.202021-10-15.20prep/near/257212439\">said</a>:</p>\n<blockquote>\n<p>Maybe you can explain some more <em>why</em> the resulting facts look off to you?</p>\n</blockquote>\n<p>ah I <em>think</em> I understand the source of the confusion about the <code>introduce_subset</code> facts we talked about earlier, and it may just be about notation. </p>\n<p>You wrote:</p>\n<blockquote>\n<p><strong>Immutably</strong> borrowing <code>P = *Q</code> as <code>&amp;'L_*Q *Q</code> where <code>Q</code> is a <strong>shared</strong> reference <code>Q: &amp;'Q T</code> introduces <code>'L_*Q &lt;= 'Q</code>, because the outer reference <code>'L_*Q</code> cannot outlive the inner reference <code>'Q</code>.</p>\n</blockquote>\n<p>here <code>'L_*Q &lt;= 'Q</code> means <code>'Q: 'L_*Q</code> but <a href=\"https://github.com/nikomatsakis/polonius.next/blob/d91f1608b4f0b5c63183c9aa5c34a0d89bf4d2b1/tests/killing-and-murder/program.txt#L55\"><code>introduce_subset('L_*x, 'x) here</code></a> is the inverse and means <code>'L_*x: 'x</code>. (a smaller set of loans (an origin) is a larger set of points in the cfg (a lifetime))</p>\n<p>edit: I've noticed you can see an example of that in the existing tests, <a href=\"https://github.com/nikomatsakis/polonius.next/blob/d91f1608b4f0b5c63183c9aa5c34a0d89bf4d2b1/tests/issue-47680/program.txt#L42-L43\">here</a></p>",
        "id": 257263557,
        "sender_full_name": "lqd",
        "timestamp": 1634068995
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Sprint.202021-10-15.20prep/near/257263557\">said</a>:</p>\n<blockquote>\n<p>here <code>'L_*Q &lt;= 'Q</code> means <code>'Q: 'L_*Q</code> but <a href=\"https://github.com/nikomatsakis/polonius.next/blob/d91f1608b4f0b5c63183c9aa5c34a0d89bf4d2b1/tests/killing-and-murder/program.txt#L55\"><code>introduce_subset('L_*x, 'x) here</code></a> is the inverse and means <code>'L_*x: 'x</code>. (a smaller set of loans (an origin) is a larger set of points in the cfg (a lifetime))<br>\n</p>\n</blockquote>\n<p>This may also just be me misunderstanding Niko's comments, as the notation is from there.</p>",
        "id": 257271641,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1634072526
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Sprint.202021-10-15.20prep/near/257263557\">said</a>:</p>\n<blockquote>\n<p>edit: I've noticed you can see an example of that in the existing tests, <a href=\"https://github.com/nikomatsakis/polonius.next/blob/d91f1608b4f0b5c63183c9aa5c34a0d89bf4d2b1/tests/issue-47680/program.txt#L42-L43\">here</a></p>\n</blockquote>\n<p>Because this fact is indeed the other way round. But in the <code>killing-and-murder-err</code>, the error is derived from invalidating <code>'L_*x</code>, that propagating to <code>'x</code>, and that being accessed. So I don't think it would work if it were the other way around</p>",
        "id": 257271882,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1634072643
    },
    {
        "content": "<p>(this is related to how we handle invalidation - see the questions on it in the HackMD. If the write invalidated <code>'L_p</code> (because <code>p</code> is the actual memory target), then <em>that</em>  would invalidate <code>'x</code>)</p>",
        "id": 257272060,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1634072730
    },
    {
        "content": "<p>But thinking about it again now it makes sense to me to say \"invalidating <code>'Q</code> will invalidate <code>'L_*Q</code>\", which is the original translation and your understanding as well if I see this correctly</p>",
        "id": 257272302,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1634072827
    },
    {
        "content": "<p>Just then we are currently missing something to actually infer the error in that example I think</p>",
        "id": 257272347,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1634072847
    },
    {
        "content": "<p>yeah</p>",
        "id": 257272588,
        "sender_full_name": "lqd",
        "timestamp": 1634072959
    },
    {
        "content": "<p>I'll go read this example more carefully now</p>",
        "id": 257272771,
        "sender_full_name": "lqd",
        "timestamp": 1634073033
    },
    {
        "content": "<p><del>(hmm I'll just note that as-is, and I'm not sure what this example is trying to convey, I don't think it would emit an error today)</del> (clarification: this was about the killing-and-murder example that I linked and which does not emit an error, that's the point of the other killing-and-murder-err example)</p>",
        "id": 257277016,
        "sender_full_name": "lqd",
        "timestamp": 1634075247
    },
    {
        "content": "<p>we really need to clarify these rules about invalidations and unrolling</p>",
        "id": 257287448,
        "sender_full_name": "lqd",
        "timestamp": 1634081339
    },
    {
        "content": "<p>looking forward to friday</p>",
        "id": 257287470,
        "sender_full_name": "lqd",
        "timestamp": 1634081357
    },
    {
        "content": "<p>Btw, what program do you usually use for such calls? Just so that I can set that up before we meet</p>",
        "id": 257331286,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1634114793
    },
    {
        "content": "<p>often Zoom, or <a href=\"https://meet.jit.si/\">https://meet.jit.si/</a> (this one doesn't require installing software IIRC)</p>",
        "id": 257346905,
        "sender_full_name": "lqd",
        "timestamp": 1634123306
    }
]