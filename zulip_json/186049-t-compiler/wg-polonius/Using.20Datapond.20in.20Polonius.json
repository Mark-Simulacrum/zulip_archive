[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> Does it make sense to work on improving Datapond so that eventually Polonius could be rewritten in actual Datalog? Or are there any fundamental problems that would prevent this such as procedural macros not being supported in the Rust compiler?</p>",
        "id": 205728152,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1596375926
    },
    {
        "content": "<p>proc macros are used in the compiler (<code>rustc_macros</code>)</p>",
        "id": 205729974,
        "sender_full_name": "bjorn3",
        "timestamp": 1596379117
    },
    {
        "content": "<p>it's an interesting question, but at the same time I'm not sure what you envision when saying \"rewritten in actual datalog\" ? like changing the engine to Souffl√© or having the implementation looking like regular rules rather than the datafrog DSL ?</p>",
        "id": 205738687,
        "sender_full_name": "lqd",
        "timestamp": 1596393528
    },
    {
        "content": "<p>assuming you mean the 2nd: on the one hand, yes. For example, I've wanted to evaluate Demand Transformation over our different rules and that would be evidently easier with datapond generating the rules. On the other hand, and this is why I've also avoided doing that, I'm not 100% sure about what to do to make the current rules/implementation scale to what we need it to.</p>",
        "id": 205738816,
        "sender_full_name": "lqd",
        "timestamp": 1596393747
    },
    {
        "content": "<p>specifically, and this is my personal opinion only, I feel we cannot easily take advantage of the fact that we are doing dataflow over a CFG. The \"specialized solution\" vs \"generic solution\".</p>",
        "id": 205738952,
        "sender_full_name": "lqd",
        "timestamp": 1596393969
    },
    {
        "content": "<p>there are things it does super well, and I think it's perfect for documentation, explanation, specification/validation, that is more like a reference implementation</p>",
        "id": 205738979,
        "sender_full_name": "lqd",
        "timestamp": 1596394066
    },
    {
        "content": "<p>on the other hand, no engine is going to look at some of our rules and rewrite them as reachability queries over the condensation graph</p>",
        "id": 205739077,
        "sender_full_name": "lqd",
        "timestamp": 1596394207
    },
    {
        "content": "<p>or optimize passing around some state because the graph is acyclic</p>",
        "id": 205739141,
        "sender_full_name": "lqd",
        "timestamp": 1596394323
    },
    {
        "content": "<p>or prune the computation of a subgraph because it's dominated by a kill node</p>",
        "id": 205739169,
        "sender_full_name": "lqd",
        "timestamp": 1596394390
    },
    {
        "content": "<p>so I have to do those by hand, and at this point I wonder if I should actually be doing the computation in a dataflow framework :)</p>",
        "id": 205739282,
        "sender_full_name": "lqd",
        "timestamp": 1596394563
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Using.20Datapond.20in.20Polonius/near/205729974\">said</a>:</p>\n<blockquote>\n<p>proc macros are used in the compiler (<code>rustc_macros</code>)</p>\n</blockquote>\n<p>Thanks! I knew that there was some work on that, but I did not know whether it was merged or not.</p>",
        "id": 205741372,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1596397712
    },
    {
        "content": "<blockquote>\n<p>at the same time I'm not sure what you envision when saying \"rewritten in actual datalog\" ? </p>\n</blockquote>\n<p>The oversimplified, but hopefully more clear idea would be using a procedural macro <code>datapond!</code> that generates the necessary code from the datalog facts.</p>",
        "id": 205741454,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1596397831
    },
    {
        "content": "<p>right right like we talked about in Barcelona then</p>",
        "id": 205741542,
        "sender_full_name": "lqd",
        "timestamp": 1596398020
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Using.20Datapond.20in.20Polonius/near/205739282\">said</a>:</p>\n<blockquote>\n<p>so I have to do those by hand, and at this point I wonder if I should actually be doing the computation in a dataflow framework :)</p>\n</blockquote>\n<p>If you did that in the dataflow framework, would it still use the same data representation (tuples of numbers)? I am asking because, at least in theory, one could mix Datalog with Rust code.</p>",
        "id": 205741545,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1596398033
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Using.20Datapond.20in.20Polonius/near/205741542\">said</a>:</p>\n<blockquote>\n<p>right right like we talked about in Barcelona then</p>\n</blockquote>\n<p>Exactly.</p>",
        "id": 205741588,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1596398044
    },
    {
        "content": "<p>(again this is just my opinion :) for dataflow-like computations I'd assume it could be similar, but rustc already has such a dataflow framework. What I also meant to say was that a lot of things already exist there, so some of what I'm saying could be less \"redo some polonius things in a dataflow framework\" than \"use what rustc already does instead of redoing them in datalog\"</p>",
        "id": 205741816,
        "sender_full_name": "lqd",
        "timestamp": 1596398412
    },
    {
        "content": "<p>or using, say, dominators and postdominators features already present in MIR</p>",
        "id": 205741830,
        "sender_full_name": "lqd",
        "timestamp": 1596398465
    },
    {
        "content": "<p>rustc doesn't have a Nuutila implementation so I've done one but it could easily be integrated into the existing SCC features in rustc_data_structures</p>",
        "id": 205741883,
        "sender_full_name": "lqd",
        "timestamp": 1596398554
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Using.20Datapond.20in.20Polonius/near/205741816\">said</a>:</p>\n<blockquote>\n<p>(again this is just my opinion :) for dataflow-like computations I'd assume it could be similar, but rustc already has such a dataflow framework. What I also meant to say was that a lot of things already exist there, so some of what I'm saying could be less \"redo some polonius things in a dataflow framework\" than \"use what rustc already does instead of redoing them in datalog\"</p>\n</blockquote>\n<p>Makes sense. <span aria-label=\"smiling face\" class=\"emoji emoji-263a\" role=\"img\" title=\"smiling face\">:smiling_face:</span></p>",
        "id": 205742109,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1596398936
    },
    {
        "content": "<p>Thanks for explaining!</p>",
        "id": 205742113,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1596398953
    },
    {
        "content": "<p>we might talk about this for the next sprint (tomorrow until wednesday)</p>",
        "id": 205742174,
        "sender_full_name": "lqd",
        "timestamp": 1596399070
    },
    {
        "content": "<p>and that question seems like it'd fit right in the discussion/planning/etc parts of it</p>",
        "id": 205742243,
        "sender_full_name": "lqd",
        "timestamp": 1596399181
    },
    {
        "content": "<p>Yeah, I'm of two minds about this.</p>",
        "id": 205792404,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596460848
    },
    {
        "content": "<p>I can imagine that <em>literally using</em> datalog is not going to be a win, but I'm not entirely convinced yet.</p>",
        "id": 205792446,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596460863
    }
]