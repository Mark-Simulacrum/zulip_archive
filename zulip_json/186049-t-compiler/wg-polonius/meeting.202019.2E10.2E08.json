[
    {
        "content": "<p>early <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 177647332,
        "sender_full_name": "lqd",
        "timestamp": 1570561084
    },
    {
        "content": "<p>hello friends from <span class=\"user-group-mention\" data-user-group-id=\"1184\">@WG-polonius</span> :)</p>",
        "id": 177647595,
        "sender_full_name": "lqd",
        "timestamp": 1570561232
    },
    {
        "content": "<p>I've been catching up on this stream in last few minutes</p>",
        "id": 177647618,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570561254
    },
    {
        "content": "<p>I know y'all have been busy with life and things and presentations :)</p>",
        "id": 177647633,
        "sender_full_name": "lqd",
        "timestamp": 1570561266
    },
    {
        "content": "<p>nice announcement: Matthew's PR <a href=\"https://github.com/rust-lang/rust/issues/64749\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/64749\">#64749</a> has landed :)</p>",
        "id": 177647690,
        "sender_full_name": "lqd",
        "timestamp": 1570561311
    },
    {
        "content": "<p>Also I merged <a href=\"https://github.com/rust-lang/polonius/pull/127\" target=\"_blank\" title=\"https://github.com/rust-lang/polonius/pull/127\">https://github.com/rust-lang/polonius/pull/127</a></p>",
        "id": 177647717,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570561321
    },
    {
        "content": "<p>uh..just now</p>",
        "id": 177647759,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570561324
    },
    {
        "content": "<p>nice, thanks niko</p>",
        "id": 177647783,
        "sender_full_name": "lqd",
        "timestamp": 1570561343
    },
    {
        "content": "<p>I have been reading your RBR presentation and my biased opinion is: I love it</p>",
        "id": 177647813,
        "sender_full_name": "lqd",
        "timestamp": 1570561369
    },
    {
        "content": "<p>great :)</p>",
        "id": 177647832,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570561377
    },
    {
        "content": "<p>that reminds me</p>",
        "id": 177647838,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570561382
    },
    {
        "content": "<p>I want to do a dry run soon-ish</p>",
        "id": 177647846,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570561385
    },
    {
        "content": "<p>I've probably got a bit more material I want to cover, not sure quite where to draw the line</p>",
        "id": 177647861,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570561397
    },
    {
        "content": "<p>I am very unsure how long it will take</p>",
        "id": 177647867,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570561401
    },
    {
        "content": "<p>and if I am going into too much detail on some things (the answer to that, I find, is usually <em>no</em> but...)</p>",
        "id": 177647895,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570561419
    },
    {
        "content": "<p>I would like to at least cover named lifetimes a bit and show why polonius helps with \"Problem Case <a href=\"https://github.com/rust-lang/rust/issues/3\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/3\">#3</a>\"</p>",
        "id": 177647914,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570561435
    },
    {
        "content": "<p>I probably won't get to killed loans</p>",
        "id": 177647923,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570561438
    },
    {
        "content": "<p>makes sense</p>",
        "id": 177647975,
        "sender_full_name": "lqd",
        "timestamp": 1570561448
    },
    {
        "content": "<p>how long is the presentation btw ?</p>",
        "id": 177647996,
        "sender_full_name": "lqd",
        "timestamp": 1570561462
    },
    {
        "content": "<p>I think 30 minutes</p>",
        "id": 177647999,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570561466
    },
    {
        "content": "<p>oh</p>",
        "id": 177648008,
        "sender_full_name": "lqd",
        "timestamp": 1570561476
    },
    {
        "content": "<p>so yeah it can't be too long :)</p>",
        "id": 177648031,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570561503
    },
    {
        "content": "<p>just holla if you need someone to listen to a dry run</p>",
        "id": 177648032,
        "sender_full_name": "lqd",
        "timestamp": 1570561503
    },
    {
        "content": "<p>(unsure if that's how it's spelled ?)</p>",
        "id": 177648057,
        "sender_full_name": "lqd",
        "timestamp": 1570561519
    },
    {
        "content": "<p>\"holla\"?</p>",
        "id": 177648061,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570561525
    },
    {
        "content": "<p>lol</p>",
        "id": 177648070,
        "sender_full_name": "lqd",
        "timestamp": 1570561533
    },
    {
        "content": "<p>just ask/ping</p>",
        "id": 177648086,
        "sender_full_name": "lqd",
        "timestamp": 1570561542
    },
    {
        "content": "<p>I knew what you meant ;)</p>",
        "id": 177648096,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570561551
    },
    {
        "content": "<p>:)</p>",
        "id": 177648105,
        "sender_full_name": "lqd",
        "timestamp": 1570561558
    },
    {
        "content": "<p>I should try to schedule one -- having a date would probably be good</p>",
        "id": 177648150,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570561570
    },
    {
        "content": "<p>it's cool to see this make progress as well</p>",
        "id": 177648154,
        "sender_full_name": "lqd",
        "timestamp": 1570561578
    },
    {
        "content": "<p>(maybe Friday?)</p>",
        "id": 177648155,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570561579
    },
    {
        "content": "<p>sure</p>",
        "id": 177648159,
        "sender_full_name": "lqd",
        "timestamp": 1570561586
    },
    {
        "content": "<p>as for myself this week, as I had been working on demand transformation before and found it hard to test changes</p>",
        "id": 177648175,
        "sender_full_name": "lqd",
        "timestamp": 1570561612
    },
    {
        "content": "<p>as it requires spending a bit of time coding the new rules in datafrog</p>",
        "id": 177648192,
        "sender_full_name": "lqd",
        "timestamp": 1570561625
    },
    {
        "content": "<p>I have this week finished my first rev of the \"skeleton compiler/generator\"</p>",
        "id": 177648210,
        "sender_full_name": "lqd",
        "timestamp": 1570561643
    },
    {
        "content": "<p>I saw the comments on zulip, very neat</p>",
        "id": 177648227,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570561654
    },
    {
        "content": "<p>I initially opened a PR on polonius (as it was for dogfooding there) but indeed it was not the right place</p>",
        "id": 177648229,
        "sender_full_name": "lqd",
        "timestamp": 1570561660
    },
    {
        "content": "<p>so it's at <a href=\"https://github.com/lqd/datapond\" target=\"_blank\" title=\"https://github.com/lqd/datapond\">https://github.com/lqd/datapond</a> until stable enough to be upstreamed in datafrog say</p>",
        "id": 177648250,
        "sender_full_name": "lqd",
        "timestamp": 1570561676
    },
    {
        "content": "<p>but it can handle the naive rules, flow sensitive equality, and the DTs I've done</p>",
        "id": 177648308,
        "sender_full_name": "lqd",
        "timestamp": 1570561694
    },
    {
        "content": "<p>so very helpful to me</p>",
        "id": 177648316,
        "sender_full_name": "lqd",
        "timestamp": 1570561699
    },
    {
        "content": "<p>very cool</p>",
        "id": 177648341,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570561717
    },
    {
        "content": "<p>I've also been working on said flow sensitive equality, and if you have a few minutes I hoped we could talk a bit about that</p>",
        "id": 177648353,
        "sender_full_name": "lqd",
        "timestamp": 1570561725
    },
    {
        "content": "<p>yeah</p>",
        "id": 177648376,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570561743
    },
    {
        "content": "<p>as I have more data to give you an intuition about what I meant</p>",
        "id": 177648377,
        "sender_full_name": "lqd",
        "timestamp": 1570561743
    },
    {
        "content": "<p>so basically my issue is about propagating equality</p>",
        "id": 177648390,
        "sender_full_name": "lqd",
        "timestamp": 1570561759
    },
    {
        "content": "<p>and esp wrt liveness</p>",
        "id": 177648399,
        "sender_full_name": "lqd",
        "timestamp": 1570561771
    },
    {
        "content": "<p>in the other variants we only propagate subsets and containment in the cfg when origins are live</p>",
        "id": 177648422,
        "sender_full_name": "lqd",
        "timestamp": 1570561797
    },
    {
        "content": "<p>for the flow sensitive equality, I've done both with and without limiting with liveness</p>",
        "id": 177648497,
        "sender_full_name": "lqd",
        "timestamp": 1570561832
    },
    {
        "content": "<p>for most simple cases and benchmarks this works similarly</p>",
        "id": 177648529,
        "sender_full_name": "lqd",
        "timestamp": 1570561860
    },
    {
        "content": "<p>however</p>",
        "id": 177648537,
        "sender_full_name": "lqd",
        "timestamp": 1570561864
    },
    {
        "content": "<p>if I propagate equality throughout it works on all rustc tests, etc but clap doesn't work</p>",
        "id": 177648578,
        "sender_full_name": "lqd",
        "timestamp": 1570561903
    },
    {
        "content": "<p>where doesn't work means it'll take a loooong time</p>",
        "id": 177648601,
        "sender_full_name": "lqd",
        "timestamp": 1570561919
    },
    {
        "content": "<p>why: there are 600K equal tuples, needing to be propagated through a 50k CFG</p>",
        "id": 177648656,
        "sender_full_name": "lqd",
        "timestamp": 1570561940
    },
    {
        "content": "<p>worst case (all equal tuples being at the start of the cfg, which is not the case in clap, but say) that's 200GB+</p>",
        "id": 177648674,
        "sender_full_name": "lqd",
        "timestamp": 1570561963
    },
    {
        "content": "<p>so why are there 600K equal tuples</p>",
        "id": 177648688,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570561971
    },
    {
        "content": "<p>let me back up one sec</p>",
        "id": 177648704,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570561978
    },
    {
        "content": "<p>because Ihave a question</p>",
        "id": 177648709,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570561980
    },
    {
        "content": "<p>you mentioned \"liveness\"</p>",
        "id": 177648712,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570561983
    },
    {
        "content": "<p>right</p>",
        "id": 177648733,
        "sender_full_name": "lqd",
        "timestamp": 1570561993
    },
    {
        "content": "<p>I think that equality tuples -- like our subset tuples -- could be constrained by liveness</p>",
        "id": 177648741,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570561998
    },
    {
        "content": "<p>is that 600K taking that into account?</p>",
        "id": 177648760,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570562010
    },
    {
        "content": "<p>yeah that's my other half of the writeup, if liveness is taken into account this is all acceptable</p>",
        "id": 177648802,
        "sender_full_name": "lqd",
        "timestamp": 1570562036
    },
    {
        "content": "<p>assuming we heavily filter like we mentioned before</p>",
        "id": 177648855,
        "sender_full_name": "lqd",
        "timestamp": 1570562046
    },
    {
        "content": "<p>only track the invalidated loans, and the origins they flow into, etc</p>",
        "id": 177648870,
        "sender_full_name": "lqd",
        "timestamp": 1570562058
    },
    {
        "content": "<p>however</p>",
        "id": 177648880,
        "sender_full_name": "lqd",
        "timestamp": 1570562063
    },
    {
        "content": "<p>ok, but I want to now understand why there are more \"equality\" tuples than \"subset\" tuples</p>",
        "id": 177648888,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570562069
    },
    {
        "content": "<p>there aren't more tuples</p>",
        "id": 177648899,
        "sender_full_name": "lqd",
        "timestamp": 1570562077
    },
    {
        "content": "<p>I <em>do</em> think we want to filter but I don't think we should <em>have</em> to filter</p>",
        "id": 177648910,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570562084
    },
    {
        "content": "<p>it's just 90% of the subsets</p>",
        "id": 177648911,
        "sender_full_name": "lqd",
        "timestamp": 1570562085
    },
    {
        "content": "<p>ok; clap was also very slow with naive rules before</p>",
        "id": 177648921,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570562095
    },
    {
        "content": "<p>yeah</p>",
        "id": 177648929,
        "sender_full_name": "lqd",
        "timestamp": 1570562100
    },
    {
        "content": "<p>so is it just that you're comparing naive rules against datafrog-opt?</p>",
        "id": 177648940,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570562106
    },
    {
        "content": "<p>with the filtering I mentioned it's super fast on naive now</p>",
        "id": 177648949,
        "sender_full_name": "lqd",
        "timestamp": 1570562111
    },
    {
        "content": "<blockquote>\n<p>it's just 90% of the subsets</p>\n</blockquote>\n<p>it also feels like we should be able to leverage union-find here</p>",
        "id": 177649017,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570562160
    },
    {
        "content": "<p>as an aside</p>",
        "id": 177649079,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570562172
    },
    {
        "content": "<p>(yeah probably)</p>",
        "id": 177649090,
        "sender_full_name": "lqd",
        "timestamp": 1570562180
    },
    {
        "content": "<p>the interesting I found out was: if we constraint equality propagation to respect liveness</p>",
        "id": 177649106,
        "sender_full_name": "lqd",
        "timestamp": 1570562188
    },
    {
        "content": "<p>another simple case (which I'll link in a sec) stops working</p>",
        "id": 177649120,
        "sender_full_name": "lqd",
        "timestamp": 1570562199
    },
    {
        "content": "<p>and 16 out of the 9K rustc tests</p>",
        "id": 177649132,
        "sender_full_name": "lqd",
        "timestamp": 1570562206
    },
    {
        "content": "<p>here <a href=\"https://github.com/lqd/borrow-check/blob/variant_prototype2/inputs/polonius-imprecision/polonius-imprecision.rs#L24-L36\" target=\"_blank\" title=\"https://github.com/lqd/borrow-check/blob/variant_prototype2/inputs/polonius-imprecision/polonius-imprecision.rs#L24-L36\">https://github.com/lqd/borrow-check/blob/variant_prototype2/inputs/polonius-imprecision/polonius-imprecision.rs#L24-L36</a></p>",
        "id": 177649177,
        "sender_full_name": "lqd",
        "timestamp": 1570562238
    },
    {
        "content": "<p>the loan which should be live until the += will stop at the p.push(q); line if we limit it to liveness</p>",
        "id": 177649209,
        "sender_full_name": "lqd",
        "timestamp": 1570562270
    },
    {
        "content": "<p>it works with full propagation, all existing variants, and even static equality, but not flow sensitive equality + liveness</p>",
        "id": 177649274,
        "sender_full_name": "lqd",
        "timestamp": 1570562300
    },
    {
        "content": "<blockquote>\n<p>the loan which should be live until the += will stop at the p.push(q); line if we limit it to liveness</p>\n</blockquote>\n<p>so we get no error?</p>",
        "id": 177649282,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570562310
    },
    {
        "content": "<p>indeed</p>",
        "id": 177649287,
        "sender_full_name": "lqd",
        "timestamp": 1570562313
    },
    {
        "content": "<p>curious. this sounds like the bug has to do with the \"transitive\" part of the rules</p>",
        "id": 177649327,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570562343
    },
    {
        "content": "<p>the transitive rules are only transitive at a specific point</p>",
        "id": 177649351,
        "sender_full_name": "lqd",
        "timestamp": 1570562358
    },
    {
        "content": "<p>so specifically, the naive rules</p>",
        "id": 177649370,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570562370
    },
    {
        "content": "<p>so maybe some subsets should still be propagated</p>",
        "id": 177649371,
        "sender_full_name": "lqd",
        "timestamp": 1570562372
    },
    {
        "content": "<p>in addition to equality</p>",
        "id": 177649382,
        "sender_full_name": "lqd",
        "timestamp": 1570562378
    },
    {
        "content": "<p>compute the transition subset/contains relations (or whatever names we use for those...)</p>",
        "id": 177649400,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570562391
    },
    {
        "content": "<p>such that when you kill an origin in the middle (because it's no longer live), its effects are propagated</p>",
        "id": 177649467,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570562413
    },
    {
        "content": "<p>there's also a similar mechanism in the opt rules IIRC</p>",
        "id": 177649485,
        "sender_full_name": "lqd",
        "timestamp": 1570562435
    },
    {
        "content": "<p>my expectation would be that the <code>p.push(q)</code> call -- on entry to the mid-point, <code>p</code> is live</p>",
        "id": 177649509,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570562461
    },
    {
        "content": "<p>as is <code>v</code></p>",
        "id": 177649521,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570562468
    },
    {
        "content": "<p>and hence we add L0 to <code>'p</code>, which is equated with <code>'v</code></p>",
        "id": 177649541,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570562480
    },
    {
        "content": "<p>and so <code>'v</code> winds up including <code>L0</code></p>",
        "id": 177649549,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570562490
    },
    {
        "content": "<p>later, <code>'p</code> goes dead, but <code>'v</code> still includes L0</p>",
        "id": 177649563,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570562510
    },
    {
        "content": "<p>does that make sense?</p>",
        "id": 177649576,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570562518
    },
    {
        "content": "<p>oh it does</p>",
        "id": 177649624,
        "sender_full_name": "lqd",
        "timestamp": 1570562526
    },
    {
        "content": "<p>I don't have my complete notes with me but</p>",
        "id": 177649669,
        "sender_full_name": "lqd",
        "timestamp": 1570562559
    },
    {
        "content": "<p>I'll gather some more data to show exactly the facts we get</p>",
        "id": 177649679,
        "sender_full_name": "lqd",
        "timestamp": 1570562567
    },
    {
        "content": "<p>interning is messing my notes since it's different between machines</p>",
        "id": 177649694,
        "sender_full_name": "lqd",
        "timestamp": 1570562581
    },
    {
        "content": "<p>but in the other rules here I think a regular subset maintains the \"containment\" through this terminator to the next block, and in the prototype I don't have such a mechanism</p>",
        "id": 177649761,
        "sender_full_name": "lqd",
        "timestamp": 1570562630
    },
    {
        "content": "<p>(because we wanted to avoid tracking subsets along the cfg, only equality)</p>",
        "id": 177649823,
        "sender_full_name": "lqd",
        "timestamp": 1570562654
    },
    {
        "content": "<p>do you have a ptr to the rules I can review?</p>",
        "id": 177649838,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570562671
    },
    {
        "content": "<p>yeah I think <a href=\"https://github.com/lqd/datapond/blob/master/examples/generate_skeleton.rs\" target=\"_blank\" title=\"https://github.com/lqd/datapond/blob/master/examples/generate_skeleton.rs\">https://github.com/lqd/datapond/blob/master/examples/generate_skeleton.rs</a></p>",
        "id": 177649876,
        "sender_full_name": "lqd",
        "timestamp": 1570562705
    },
    {
        "content": "<p>R4 is the one where liveness coming into play has the effect I'm talking about</p>",
        "id": 177649987,
        "sender_full_name": "lqd",
        "timestamp": 1570562778
    },
    {
        "content": "<p>in the link there is no liveness filtering, so it's the case where clap blows up but everything \"works\" otherwise</p>",
        "id": 177650022,
        "sender_full_name": "lqd",
        "timestamp": 1570562805
    },
    {
        "content": "<p>(no mentioning the inefficiency of \"containment\" with both subsets and equality, which are almost the same data in clap; that is R1 and R5 being the same thing locally at a given point when not talking about propagation through the cfg)</p>",
        "id": 177650100,
        "sender_full_name": "lqd",
        "timestamp": 1570562849
    },
    {
        "content": "<p>/me reading</p>",
        "id": 177650213,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570562926
    },
    {
        "content": "<p>if you were to incorporate liveness, would it look like</p>\n<div class=\"codehilite\"><pre><span></span>      // R4\n        equals(O1, O2, Q) :-\n          equals(O1, O2, P),\n          cfg_edge(P, Q),\n          region_live_at(O1, Q),\n          region_live_at(O2, Q).\n</pre></div>\n\n\n<p>but be otherwise identical, <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> ?</p>",
        "id": 177650359,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570563016
    },
    {
        "content": "<p>exactly</p>",
        "id": 177650376,
        "sender_full_name": "lqd",
        "timestamp": 1570563032
    },
    {
        "content": "<p>(and just filtering on O1 or O2's liveness will result in the same behaviour)</p>",
        "id": 177650478,
        "sender_full_name": "lqd",
        "timestamp": 1570563101
    },
    {
        "content": "<p>curious</p>",
        "id": 177650546,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570563142
    },
    {
        "content": "<p>well, I guess it'd be good if you had some idea of the tuples</p>",
        "id": 177650555,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570563148
    },
    {
        "content": "<p>do you have the input fact set from the example?</p>",
        "id": 177650558,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570563157
    },
    {
        "content": "<p>I do but will gather it completely for you</p>",
        "id": 177650564,
        "sender_full_name": "lqd",
        "timestamp": 1570563161
    },
    {
        "content": "<p>the summarized data I mean (annotated mir)</p>",
        "id": 177650569,
        "sender_full_name": "lqd",
        "timestamp": 1570563170
    },
    {
        "content": "<p>the data is in the repo just a sec</p>",
        "id": 177650575,
        "sender_full_name": "lqd",
        "timestamp": 1570563178
    },
    {
        "content": "<p><a href=\"https://github.com/lqd/borrow-check/tree/variant_prototype2/inputs/polonius-imprecision/nll-facts/cycle_unification\" target=\"_blank\" title=\"https://github.com/lqd/borrow-check/tree/variant_prototype2/inputs/polonius-imprecision/nll-facts/cycle_unification\">https://github.com/lqd/borrow-check/tree/variant_prototype2/inputs/polonius-imprecision/nll-facts/cycle_unification</a></p>",
        "id": 177650589,
        "sender_full_name": "lqd",
        "timestamp": 1570563191
    },
    {
        "content": "<p>I'd love a -Zdump-mir=polonius annotated with facts tbh :)</p>",
        "id": 177650628,
        "sender_full_name": "lqd",
        "timestamp": 1570563230
    },
    {
        "content": "<p>That thought has crossed my mind too</p>",
        "id": 177650681,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1570563248
    },
    {
        "content": "<p>yeah :)</p>",
        "id": 177650690,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570563261
    },
    {
        "content": "<p>The NLL annotation mechanisms are kinda nice</p>",
        "id": 177650698,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570563269
    },
    {
        "content": "<p>wouldn't be too hard to add</p>",
        "id": 177650703,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570563272
    },
    {
        "content": "<p>I feel like... I even made one at some point</p>",
        "id": 177650716,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570563283
    },
    {
        "content": "<p>reallllllyyyy ??? ;)</p>",
        "id": 177650734,
        "sender_full_name": "lqd",
        "timestamp": 1570563297
    },
    {
        "content": "<p>maybe not for polonius</p>",
        "id": 177650737,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570563299
    },
    {
        "content": "<p>I remember looking at MIR annotated with e.g. the subset relations created at each point</p>",
        "id": 177650752,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570563310
    },
    {
        "content": "<p>nice</p>",
        "id": 177650770,
        "sender_full_name": "lqd",
        "timestamp": 1570563325
    },
    {
        "content": "<p>we'll get it done</p>",
        "id": 177650788,
        "sender_full_name": "lqd",
        "timestamp": 1570563338
    },
    {
        "content": "<p>well I can't really debug from that base output:)</p>",
        "id": 177650798,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570563349
    },
    {
        "content": "<p>exactly</p>",
        "id": 177650813,
        "sender_full_name": "lqd",
        "timestamp": 1570563357
    },
    {
        "content": "<p>I guess I'd have to try running it</p>",
        "id": 177650817,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570563358
    },
    {
        "content": "<p>I'll finish annotating the MIR I have already begun in any case</p>",
        "id": 177650894,
        "sender_full_name": "lqd",
        "timestamp": 1570563381
    },
    {
        "content": "<p>didn't we have some kind of graphviz output from polonius too?</p>",
        "id": 177650900,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570563385
    },
    {
        "content": "<p>we do yeah</p>",
        "id": 177650914,
        "sender_full_name": "lqd",
        "timestamp": 1570563392
    },
    {
        "content": "<p>I dont' quite recall what it looked like :)</p>",
        "id": 177650918,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570563396
    },
    {
        "content": "<p><code>--graphviz-file</code></p>",
        "id": 177650942,
        "sender_full_name": "lqd",
        "timestamp": 1570563419
    },
    {
        "content": "<p>it's helpful but I think there's some output facts in there</p>",
        "id": 177650963,
        "sender_full_name": "lqd",
        "timestamp": 1570563436
    },
    {
        "content": "<p>I've added some provenance info in dafrog and it's been invaluable for these cases</p>",
        "id": 177650986,
        "sender_full_name": "lqd",
        "timestamp": 1570563457
    },
    {
        "content": "<p>this would probably be more of a \"lack of provenance\"</p>",
        "id": 177651005,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570563474
    },
    {
        "content": "<p>but I can imagine</p>",
        "id": 177651015,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570563478
    },
    {
        "content": "<p>i.e., we're <em>missing</em> elements</p>",
        "id": 177651044,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570563482
    },
    {
        "content": "<p>now of course as I needed to understand why tuples weren't being propagated, I really need why-not-provenance</p>",
        "id": 177651054,
        "sender_full_name": "lqd",
        "timestamp": 1570563482
    },
    {
        "content": "<p>right</p>",
        "id": 177651065,
        "sender_full_name": "lqd",
        "timestamp": 1570563489
    },
    {
        "content": "<p>which is less easy than a println for provenance <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 177651083,
        "sender_full_name": "lqd",
        "timestamp": 1570563509
    },
    {
        "content": "<p>in any case I think the main thing we would want to know (to start) is the <code>requires</code> relation at the point of call</p>",
        "id": 177651103,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570563528
    },
    {
        "content": "<p>I have to go, but I'll just say my one thing: yay, great renaming has landed, I'll try to start from there on the initialisation. Also, Tobias finally subject reviewed my thesis and he had...some comments, decreasing P(time to work on initialisation). Sorry for interrupting!</p>",
        "id": 177651115,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1570563536
    },
    {
        "content": "<p>awesome <span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> :)</p>",
        "id": 177651136,
        "sender_full_name": "lqd",
        "timestamp": 1570563554
    },
    {
        "content": "<p>oh btw</p>",
        "id": 177651151,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570563574
    },
    {
        "content": "<p>there is something else</p>",
        "id": 177651153,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570563576
    },
    {
        "content": "<p>i'm co-organizing a workshop at ETAPS 2020</p>",
        "id": 177651164,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570563586
    },
    {
        "content": "<p><a href=\"https://sites.google.com/view/rustverify2020\" target=\"_blank\" title=\"https://sites.google.com/view/rustverify2020\">https://sites.google.com/view/rustverify2020</a></p>",
        "id": 177651182,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570563598
    },
    {
        "content": "<p>we were thinking of having an invited talk on polonius</p>",
        "id": 177651202,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570563603
    },
    {
        "content": "<blockquote>\n<p>in any case I think the main thing we would want to know (to start) is the <code>requires</code> relation at the point of call</p>\n</blockquote>\n<p>I'll get all this data, I mostly wanted to mention this in case y'all had ideas about liveness and equality propagation. at least I hope I was able to give some intuition in what I've been seeing</p>",
        "id": 177651242,
        "sender_full_name": "lqd",
        "timestamp": 1570563618
    },
    {
        "content": "<p>and I wanted to see whether <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> and <span class=\"user-mention\" data-user-id=\"204115\">@Albin Stjerna</span> how much you'd want to be involved :)</p>",
        "id": 177651244,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570563619
    },
    {
        "content": "<p>(and/or if you want to give it)</p>",
        "id": 177651250,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570563626
    },
    {
        "content": "<p>it's not until April</p>",
        "id": 177651266,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570563639
    },
    {
        "content": "<p>something to mull over :)</p>",
        "id": 177651275,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570563650
    },
    {
        "content": "<p>I can help for sure (maybe not give it :p)</p>",
        "id": 177651298,
        "sender_full_name": "lqd",
        "timestamp": 1570563668
    },
    {
        "content": "<p>I have no idea what I can do for now, but I'll try to figure something out in the mean time!</p>",
        "id": 177651312,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1570563690
    },
    {
        "content": "<p>we got some time to think it over</p>",
        "id": 177651329,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570563696
    },
    {
        "content": "<p>where \"for sure\" == I'm not sure how, but will lend a hand for whatever is needed</p>",
        "id": 177651348,
        "sender_full_name": "lqd",
        "timestamp": 1570563708
    },
    {
        "content": "<p>ps <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> great work</p>",
        "id": 177651360,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570563717
    },
    {
        "content": "<p>also to matthew :)</p>",
        "id": 177651410,
        "sender_full_name": "lqd",
        "timestamp": 1570563733
    },
    {
        "content": "<p>very true! that PR was epic</p>",
        "id": 177651416,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570563741
    },
    {
        "content": "<p>thank you :)</p>",
        "id": 177651417,
        "sender_full_name": "lqd",
        "timestamp": 1570563741
    },
    {
        "content": "<p>Honestly, I'm happy to have any excuse go give my supervisor for keeping working on Polonius :)</p>",
        "id": 177651423,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1570563747
    },
    {
        "content": "<p>still a lot more work to do but we're making progress</p>",
        "id": 177651441,
        "sender_full_name": "lqd",
        "timestamp": 1570563763
    },
    {
        "content": "<blockquote>\n<p>and I wanted to see whether <span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> and <span class=\"user-mention silent\" data-user-id=\"204115\">Albin Stjerna</span> how much you'd want to be involved :)</p>\n</blockquote>\n<p>and yes I actually did mean to ask <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> the same :)</p>",
        "id": 177651443,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570563764
    },
    {
        "content": "<p>which reminds me, did we add them to the team repo yet?</p>",
        "id": 177651472,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570563779
    },
    {
        "content": "<p>if not, let me do that...</p>",
        "id": 177651476,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570563781
    },
    {
        "content": "<p>I think only admins can know this</p>",
        "id": 177651502,
        "sender_full_name": "lqd",
        "timestamp": 1570563808
    },
    {
        "content": "<p>right ?</p>",
        "id": 177651511,
        "sender_full_name": "lqd",
        "timestamp": 1570563817
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/team/pull/139\" target=\"_blank\" title=\"https://github.com/rust-lang/team/pull/139\">https://github.com/rust-lang/team/pull/139</a></p>",
        "id": 177651577,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570563854
    },
    {
        "content": "<p>but in any case sorry for running long it's been really fun</p>",
        "id": 177651600,
        "sender_full_name": "lqd",
        "timestamp": 1570563883
    },
    {
        "content": "<p>I'll gather more data this week to make sure everything's clear</p>",
        "id": 177651613,
        "sender_full_name": "lqd",
        "timestamp": 1570563895
    },
    {
        "content": "<p>I wonder if I can arrange to take a week and just do polonius :)</p>",
        "id": 177651673,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570563933
    },
    {
        "content": "<p>/me daydreams</p>",
        "id": 177651679,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570563937
    },
    {
        "content": "<p>sounds unlikely :)</p>",
        "id": 177651699,
        "sender_full_name": "lqd",
        "timestamp": 1570563946
    },
    {
        "content": "<p>maybe after RBR an hour here and there could be doable</p>",
        "id": 177651789,
        "sender_full_name": "lqd",
        "timestamp": 1570563980
    },
    {
        "content": "<p>btw if any of you are going to rustfest barcelona in november, I will be seeing you there</p>",
        "id": 177651828,
        "sender_full_name": "lqd",
        "timestamp": 1570564019
    },
    {
        "content": "<p>Nope, but I am going to SPLASH in a few weeks</p>",
        "id": 177651916,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1570564075
    },
    {
        "content": "<p>(and if that's all we have, thanks a lot everyone <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span>)</p>",
        "id": 177651919,
        "sender_full_name": "lqd",
        "timestamp": 1570564077
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 177651937,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1570564082
    },
    {
        "content": "<blockquote>\n<p>Nope, but I am going to SPLASH in a few weeks</p>\n</blockquote>\n<p>oh, really? man, I was <em>almost</em> going to go, but I think i'm not now</p>",
        "id": 177652216,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570564264
    },
    {
        "content": "<p>I just couldn't make the travel work</p>",
        "id": 177652220,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570564269
    },
    {
        "content": "<p>but you're the second person i've heard who's going that I'd love to catch up with</p>",
        "id": 177652226,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570564277
    },
    {
        "content": "<p>/me contemplates last minute trips</p>",
        "id": 177652230,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570564282
    },
    {
        "content": "<p>and it's in Athens ?!</p>",
        "id": 177652261,
        "sender_full_name": "lqd",
        "timestamp": 1570564313
    },
    {
        "content": "<p>Yes, it is</p>",
        "id": 177653241,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1570564902
    },
    {
        "content": "<p>I'll be a student volunteer</p>",
        "id": 177653374,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1570564991
    },
    {
        "content": "<blockquote>\n<p>it also feels like we should be able to leverage union-find here</p>\n</blockquote>\n<p>to bounce back on this, receiving the SCCs would indeed help in some cases, and equality tuples in general (as now they are sometimes materialized all over the CFG, and are the source of the OOMs)</p>",
        "id": 177692436,
        "sender_full_name": "lqd",
        "timestamp": 1570609766
    },
    {
        "content": "<p>I've also noticed type ascriptions generating a lot of facts: these 10 lines (of course it's sugar-y) generate 3200 outlives facts; so just looking at the size of the facts for this simple example, there could be some opportunities there as well</p>",
        "id": 177692632,
        "sender_full_name": "lqd",
        "timestamp": 1570609928
    }
]