[
    {
        "content": "<p>This code doesn't compile, but arguably it should (at least in my opinion). I wonder if this is the case where Polonius relaxes the analysis, because this specific case is annoying me a lot pretty often. </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Point</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">x</span>:<span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span>:<span class=\"kt\">i32</span> <span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">accept</span><span class=\"p\">(</span><span class=\"n\">point</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Point</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Point</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">x</span>:<span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span>:<span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// *x = 3; // it should be ok even if you uncomment this line</span>\n<span class=\"w\">    </span><span class=\"n\">accept</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// let mut x = &amp;mut p.x;  //rebinding here fixes the problem</span>\n<span class=\"w\">    </span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Interestingly, there's a lot of very similar cases that shouldn't compile, which probably makes this challenging. <del>Even just adding one level of nesting breaks this.</del> Maybe not, actually, I'll have to think about it more</p>",
        "id": 223807782,
        "sender_full_name": "panstromek",
        "timestamp": 1611485197
    },
    {
        "content": "<p>If you make <code>accept</code> actually mutate the <code>point</code>, your code has UB under Stacked Borrows (and most aliasing models I can imagine). Which is to say, the code is wrong and should not be accepted by the compiler.</p>",
        "id": 223811067,
        "sender_full_name": "RalfJ",
        "timestamp": 1611490342
    },
    {
        "content": "<p>One key promise for mutable references like <code>x</code> is that if you use them twice, and there was no other use or reborrow of <code>x</code> in between, then the pointee is unchanged. So in code like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"n\">accept</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"o\">*</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>it is very important that <code>accept</code> cannot mutate what <code>x</code> points to.</p>",
        "id": 223811082,
        "sender_full_name": "RalfJ",
        "timestamp": 1611490390
    },
    {
        "content": "<p>If your code was accepted, it could violate this property, which would be bad.</p>",
        "id": 223811084,
        "sender_full_name": "RalfJ",
        "timestamp": 1611490400
    },
    {
        "content": "<p>(in fact, it is easy to change this example such that if very similar code was accepted we'd have use-after-free... just make <code>p</code> a <code>Vec</code> and <code>x = &amp;mut p[0]</code>)</p>",
        "id": 223811143,
        "sender_full_name": "RalfJ",
        "timestamp": 1611490488
    },
    {
        "content": "<p>The key here is that when <code>accept</code> mutates the point, the reference in <code>x</code> is not \"active\" and accept cannot possibly change its value - because it is just a static offset. Rebinding it afterwards is just a no-op, which seems to me like the compiler should be able to reason about automatically -  and it already does to some extent, because it \"deactivates\" the reference before calling accept. It could \"just\" (with a lot of caveats) reactivate it afterwards.</p>\n<p>The example with a Vec is what is exactly what I had in mind with similar cases that shouldn't compile, but my example only cares about structs, ie. things that are known at compile time.</p>\n<p>It's sort of a multi-phase borrow or something like that.</p>",
        "id": 223812527,
        "sender_full_name": "panstromek",
        "timestamp": 1611492772
    },
    {
        "content": "<p>I'd summarize this as - if some borrow checker error can be fixed by <code>let</code> rebinding that is provably no-op, it shouldn't be a borrow checker error in the first place.</p>",
        "id": 223812594,
        "sender_full_name": "panstromek",
        "timestamp": 1611492881
    },
    {
        "content": "<p>Every time you make a new borrow you are asserting that you can read/write (depending on if the borrow is mutable) the pointed to memory, so borrowing isn't a no-op.</p>",
        "id": 223814537,
        "sender_full_name": "bjorn3",
        "timestamp": 1611495677
    },
    {
        "content": "<p>I still don't understand why would that be a problem. This is code can easily be fixed by just re-binding <code>x</code> without any change in behaviour. Why couldn't this transformation be done automatically, when possible?</p>",
        "id": 223815780,
        "sender_full_name": "panstromek",
        "timestamp": 1611497493
    },
    {
        "content": "<p>Because it changes behavior. It invalidates other borrows. Drops are also not moved earlier when doing so would be necessary to fix a borrowck error. This no surprises behavior is essential when writing unsafe code.</p>",
        "id": 223816411,
        "sender_full_name": "bjorn3",
        "timestamp": 1611498428
    },
    {
        "content": "<p>Drop is still observable behaviour, though. Borrow is just a semantic construct. I can't imagine a case where this could break something, if implemented. Can you give an example where this would cause a problem?</p>",
        "id": 223817047,
        "sender_full_name": "panstromek",
        "timestamp": 1611499412
    },
    {
        "content": "<blockquote>\n<p>The key here is that when accept mutates the point, the reference in x is not \"active\" and accept cannot possibly change its value</p>\n</blockquote>\n<p>It <em>is</em> active though. Any reference that will be used again is \"active\".<br>\nNot sure what notion of \"active\" you are talking about, but it does not seem to be the one used in Rust.</p>",
        "id": 223826817,
        "sender_full_name": "RalfJ",
        "timestamp": 1611511821
    },
    {
        "content": "<p>Also note that borrow checking is deliberately designed to work the same for all kinds of types -- your example is clearly wrong with <code>Vec</code>, so not accepting it for <code>Pair</code> is by-design. This has several advantages:</p>\n<ul>\n<li>It means the rules are simpler, and as such easier to design, implement, explain, and understand.</li>\n<li>It means the rules are more universal, which can be exploited for some really nifty optimizations.</li>\n</ul>\n<p>It has the disadvantage that there is some code that does not trigger use-after-free that is rejected by the compiler, such as your example. This price IMO is worth paying for the above benefits.</p>",
        "id": 223826909,
        "sender_full_name": "RalfJ",
        "timestamp": 1611511966
    }
]