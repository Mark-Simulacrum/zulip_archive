[
    {
        "content": "<p>I think I remember one of the subtleties of doing it this way:  if you have </p>\n<div class=\"codehilite\" data-code-language=\"Prolog\"><pre><span></span><code><span class=\"nf\">subset</span><span class=\"p\">(</span><span class=\"nv\">Origin1</span><span class=\"p\">,</span> <span class=\"nv\">Origin3</span><span class=\"p\">,</span> <span class=\"nv\">Point</span><span class=\"p\">)</span> <span class=\"p\">:-</span>\n  <span class=\"nf\">subset</span><span class=\"p\">(</span><span class=\"nv\">Origin1</span><span class=\"p\">,</span> <span class=\"nv\">Origin2</span><span class=\"p\">,</span> <span class=\"nv\">Point</span><span class=\"p\">),</span>\n  <span class=\"nf\">subset_base_cfg</span><span class=\"p\">(</span><span class=\"nv\">Origin2</span><span class=\"p\">,</span> <span class=\"nv\">Origin3</span><span class=\"p\">,</span> <span class=\"nv\">Point</span><span class=\"p\">).</span>\n</code></pre></div>\n<p>you may also need</p>\n<div class=\"codehilite\" data-code-language=\"Prolog\"><pre><span></span><code> <span class=\"nf\">subset</span><span class=\"p\">(</span><span class=\"nv\">Origin1</span><span class=\"p\">,</span> <span class=\"nv\">Origin3</span><span class=\"p\">,</span> <span class=\"nv\">Point</span><span class=\"p\">)</span> <span class=\"p\">:-</span>\n    <span class=\"nf\">subset_base_cfg</span><span class=\"p\">(</span><span class=\"nv\">Origin1</span><span class=\"p\">,</span> <span class=\"nv\">Origin2</span><span class=\"p\">,</span> <span class=\"nv\">Point</span><span class=\"p\">),</span>\n    <span class=\"nf\">subset</span><span class=\"p\">(</span><span class=\"nv\">Origin2</span><span class=\"p\">,</span> <span class=\"nv\">Origin3</span><span class=\"p\">,</span> <span class=\"nv\">Point</span><span class=\"p\">).</span>\n</code></pre></div>",
        "id": 248923588,
        "sender_full_name": "lqd",
        "timestamp": 1628552840
    },
    {
        "content": "<p>and IIRC even with that, there was another missing subtlety (or another mistake) to produce the exact same subsets</p>",
        "id": 248923781,
        "sender_full_name": "lqd",
        "timestamp": 1628553002
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/TC.20.3A-.20TC.2C.20TC/near/248923588\">said</a>:</p>\n<blockquote>\n<p>I think I remember one of the subtleties of doing it this way:  if you have </p>\n<div class=\"codehilite\" data-code-language=\"Prolog\"><pre><span></span><code><span class=\"nf\">subset</span><span class=\"p\">(</span><span class=\"nv\">Origin1</span><span class=\"p\">,</span> <span class=\"nv\">Origin3</span><span class=\"p\">,</span> <span class=\"nv\">Point</span><span class=\"p\">)</span> <span class=\"p\">:-</span>\n  <span class=\"nf\">subset</span><span class=\"p\">(</span><span class=\"nv\">Origin1</span><span class=\"p\">,</span> <span class=\"nv\">Origin2</span><span class=\"p\">,</span> <span class=\"nv\">Point</span><span class=\"p\">),</span>\n  <span class=\"nf\">subset_base_cfg</span><span class=\"p\">(</span><span class=\"nv\">Origin2</span><span class=\"p\">,</span> <span class=\"nv\">Origin3</span><span class=\"p\">,</span> <span class=\"nv\">Point</span><span class=\"p\">).</span>\n</code></pre></div>\n<p>you may also need</p>\n<p><div class=\"codehilite\" data-code-language=\"Prolog\"><pre><span></span><code> <span class=\"nf\">subset</span><span class=\"p\">(</span><span class=\"nv\">Origin1</span><span class=\"p\">,</span> <span class=\"nv\">Origin3</span><span class=\"p\">,</span> <span class=\"nv\">Point</span><span class=\"p\">)</span> <span class=\"p\">:-</span>\n    <span class=\"nf\">subset_base_cfg</span><span class=\"p\">(</span><span class=\"nv\">Origin1</span><span class=\"p\">,</span> <span class=\"nv\">Origin2</span><span class=\"p\">,</span> <span class=\"nv\">Point</span><span class=\"p\">),</span>\n    <span class=\"nf\">subset</span><span class=\"p\">(</span><span class=\"nv\">Origin2</span><span class=\"p\">,</span> <span class=\"nv\">Origin3</span><span class=\"p\">,</span> <span class=\"nv\">Point</span><span class=\"p\">).</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I don't think that's right. One or the other will suffice. Not sure how to prove this without an appeal to authority, but if <code>subset(A, B)</code> means that you have a chain of <code>subset_base_cfg</code> relations that starts with <code>A</code> and ends with <code>B</code> (with any number of intermediaries), rule 1 can produce any facts that rule 2 can and vice versa.</p>",
        "id": 248925671,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1628554534
    },
    {
        "content": "<p>Rule 1 just starts from <code>A</code> and works forward, while rule 2 starts from <code>B</code> and works backward</p>",
        "id": 248925791,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1628554647
    },
    {
        "content": "<p>Then Iâ€™d like to make sure I understand the context of the rules in the issue: they are intended to replace the Naive rule 2, right ?</p>",
        "id": 248927567,
        "sender_full_name": "lqd",
        "timestamp": 1628556346
    },
    {
        "content": "<p>Correct.</p>",
        "id": 248927648,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1628556419
    },
    {
        "content": "<p>(You'd also have to modify Rule 3 to work on <code>subset_base_cfg</code>)</p>",
        "id": 248927832,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1628556577
    },
    {
        "content": "<p>ok now I can't sleep and have to try it</p>",
        "id": 248928829,
        "sender_full_name": "lqd",
        "timestamp": 1628557363
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"118594\">@Dylan MacKenzie (ecstatic-morse)</span> something like this ? <a href=\"https://gist.github.com/lqd/5d7e3960714197790b22b9c294e65b29\">https://gist.github.com/lqd/5d7e3960714197790b22b9c294e65b29</a></p>",
        "id": 248931035,
        "sender_full_name": "lqd",
        "timestamp": 1628559564
    },
    {
        "content": "<p>I think some of the rules you have there are unnecessary. I believe you need exactly two rules (besides the initializers).</p>\n<div class=\"codehilite\" data-code-language=\"Prolog\"><pre><span></span><code><span class=\"nf\">subset_base_cfg</span><span class=\"p\">(</span><span class=\"nv\">O1</span><span class=\"p\">,</span> <span class=\"nv\">O2</span><span class=\"p\">,</span> <span class=\"nv\">P</span><span class=\"p\">)</span> <span class=\"p\">:-</span> <span class=\"nf\">subset_base</span><span class=\"p\">(</span><span class=\"nv\">O1</span><span class=\"p\">,</span> <span class=\"nv\">O2</span><span class=\"p\">,</span> <span class=\"nv\">P</span><span class=\"p\">).</span>\n\n<span class=\"o\">//</span> <span class=\"nv\">Propagate</span> <span class=\"err\">`</span><span class=\"s s-Atom\">subset_base</span><span class=\"err\">`</span> <span class=\"s s-Atom\">across</span> <span class=\"s s-Atom\">the</span> <span class=\"nv\">CFG</span><span class=\"p\">.</span>\n<span class=\"nf\">subset_base_cfg</span><span class=\"p\">(</span><span class=\"nv\">O1</span><span class=\"p\">,</span> <span class=\"nv\">O2</span><span class=\"p\">,</span> <span class=\"nv\">P2</span><span class=\"p\">)</span> <span class=\"p\">:-</span>\n   <span class=\"nf\">subset_base_cfg</span><span class=\"p\">(</span><span class=\"nv\">O1</span><span class=\"p\">,</span> <span class=\"nv\">O2</span><span class=\"p\">,</span> <span class=\"nv\">P1</span><span class=\"p\">),</span>\n   <span class=\"nf\">cfg_edge</span><span class=\"p\">(</span><span class=\"nv\">P1</span><span class=\"p\">,</span> <span class=\"nv\">P2</span><span class=\"p\">),</span>\n   <span class=\"nf\">origin_live_at</span><span class=\"p\">(</span><span class=\"nv\">O1</span><span class=\"p\">,</span> <span class=\"nv\">P2</span><span class=\"p\">),</span>\n   <span class=\"nf\">origin_live_at</span><span class=\"p\">(</span><span class=\"nv\">O2</span><span class=\"p\">,</span> <span class=\"nv\">P2</span><span class=\"p\">).</span>\n\n<span class=\"nf\">subset</span><span class=\"p\">(</span><span class=\"nv\">O1</span><span class=\"p\">,</span> <span class=\"nv\">O2</span><span class=\"p\">,</span> <span class=\"nv\">P</span><span class=\"p\">)</span> <span class=\"p\">:-</span> <span class=\"nf\">subset_base_cfg</span><span class=\"p\">(</span><span class=\"nv\">O1</span><span class=\"p\">,</span> <span class=\"nv\">O2</span><span class=\"p\">,</span> <span class=\"nv\">P</span><span class=\"p\">).</span>\n\n<span class=\"o\">//</span> <span class=\"nv\">Compute</span> <span class=\"s s-Atom\">the</span> <span class=\"s s-Atom\">transitive</span> <span class=\"s s-Atom\">closure</span> <span class=\"s s-Atom\">of</span> <span class=\"err\">`</span><span class=\"s s-Atom\">subset_base_cfg</span><span class=\"err\">`</span> <span class=\"s s-Atom\">at</span> <span class=\"s s-Atom\">each</span> <span class=\"s s-Atom\">point</span>\n<span class=\"nf\">subset</span><span class=\"p\">(</span><span class=\"nv\">Origin1</span><span class=\"p\">,</span> <span class=\"nv\">Origin3</span><span class=\"p\">,</span> <span class=\"nv\">Point</span><span class=\"p\">)</span> <span class=\"p\">:-</span>\n  <span class=\"nf\">subset</span><span class=\"p\">(</span><span class=\"nv\">Origin1</span><span class=\"p\">,</span> <span class=\"nv\">Origin2</span><span class=\"p\">,</span> <span class=\"nv\">Point</span><span class=\"p\">),</span>\n  <span class=\"nf\">subset_base_cfg</span><span class=\"p\">(</span><span class=\"nv\">Origin2</span><span class=\"p\">,</span> <span class=\"nv\">Origin3</span><span class=\"p\">,</span> <span class=\"nv\">Point</span><span class=\"p\">).</span>\n</code></pre></div>",
        "id": 248931759,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1628560361
    },
    {
        "content": "<p>You're doing an extra propagation of <code>subset</code> across the CFG right?</p>",
        "id": 248931843,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1628560456
    },
    {
        "content": "<p>that's why I asked whether you intended to replace rule 2</p>",
        "id": 248931852,
        "sender_full_name": "lqd",
        "timestamp": 1628560471
    },
    {
        "content": "<p>but I don't think only these 2 rules above will work</p>",
        "id": 248931896,
        "sender_full_name": "lqd",
        "timestamp": 1628560561
    },
    {
        "content": "<p>e.g. it seems to me they will only propagate subsets connecting 2 live origins, and not if there's a dead origin in between</p>",
        "id": 248932030,
        "sender_full_name": "lqd",
        "timestamp": 1628560684
    },
    {
        "content": "<p>Ah, of course, if we have <code>O1 -&gt; O2 -&gt; O3</code> and <code>O2</code> goes dead, we would remove the <code>subset_base_cfg</code> for <code>O2</code> and thus fail to compute its subsets.</p>",
        "id": 248932203,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1628560834
    },
    {
        "content": "<p>(and yeah you can surely avoid checking liveness a million times like I did in the linked example) but with my 4AM brain, I wasn't getting the correct number of subsets without the extra propagations of subsets so I may be missing something</p>",
        "id": 248932224,
        "sender_full_name": "lqd",
        "timestamp": 1628560851
    },
    {
        "content": "<p>And that may not matter for <code>loan_live_at</code> because we do a separate propagation across the CFG for loans, but it does for placeholder subsets.</p>",
        "id": 248932281,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1628560913
    },
    {
        "content": "<p>right exactly</p>",
        "id": 248932286,
        "sender_full_name": "lqd",
        "timestamp": 1628560920
    },
    {
        "content": "<p>but if we computed them like Opt does, it may Just Work TM</p>",
        "id": 248932391,
        "sender_full_name": "lqd",
        "timestamp": 1628561014
    },
    {
        "content": "<p>Well, wait does it matter for placeholder subsets? Since a placeholder subset error occurs if an invalid relationship happens at any point in the CFG, so I don't think we need the full <code>subset</code> for it either.</p>",
        "id": 248932485,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1628561070
    },
    {
        "content": "<p>we only need the subsets downstream from placeholders</p>",
        "id": 248932499,
        "sender_full_name": "lqd",
        "timestamp": 1628561099
    },
    {
        "content": "<p>Yeah, it feels like we've reinvented <code>datafrog-opt</code></p>",
        "id": 248932504,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1628561104
    },
    {
        "content": "<p>but simpler !</p>",
        "id": 248932525,
        "sender_full_name": "lqd",
        "timestamp": 1628561113
    },
    {
        "content": "<p>(this is what I was alluding to in my initial memories of this: \"That difference likely doesn't matter to produce the facts about live loans we're interested in, e.g. the subset relation is also different between naive and opt and it doesn't matter there either\")</p>",
        "id": 248932611,
        "sender_full_name": "lqd",
        "timestamp": 1628561189
    },
    {
        "content": "<p>I'll try to write this down this evening, probably in the context of documenting <code>datafrog-opt</code>.</p>",
        "id": 248932631,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1628561220
    },
    {
        "content": "<p>But yeah, I do think this is equally as simple as the naive variant, and probably a bit faster to compute.</p>",
        "id": 248932660,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1628561270
    },
    {
        "content": "<p>the quadratic number of tuples this join produces must make it pretty slower than not doing it that way</p>",
        "id": 248932716,
        "sender_full_name": "lqd",
        "timestamp": 1628561312
    },
    {
        "content": "<p>as-is opt must limit the number of subsets much more and so it could still be more efficient</p>",
        "id": 248932745,
        "sender_full_name": "lqd",
        "timestamp": 1628561388
    },
    {
        "content": "<p>s/could/should/</p>",
        "id": 248932760,
        "sender_full_name": "lqd",
        "timestamp": 1628561403
    },
    {
        "content": "<p>but after we filter everything not involved in the location insensitive pre-pass, it should be pretty close :)</p>",
        "id": 248932822,
        "sender_full_name": "lqd",
        "timestamp": 1628561455
    },
    {
        "content": "<p>Yeah, since it waits to propagate loans until the origin becomes dead, whereas naive propagates loans between live origins.</p>",
        "id": 248932848,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1628561497
    },
    {
        "content": "<p>probably would be nice to try out the old cfg compression just to have an idea</p>",
        "id": 248932924,
        "sender_full_name": "lqd",
        "timestamp": 1628561606
    },
    {
        "content": "<p>(and w/ your leapers PR :)</p>",
        "id": 248933002,
        "sender_full_name": "lqd",
        "timestamp": 1628561706
    },
    {
        "content": "<p>in any case, there are a lot of opportunities to improve things</p>",
        "id": 248933019,
        "sender_full_name": "lqd",
        "timestamp": 1628561741
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/TC.20.3A-.20TC.2C.20TC/near/248933019\">said</a>:</p>\n<blockquote>\n<p>in any case, there are a lot of opportunities to improve things</p>\n</blockquote>\n<p>And I've been using that as an excuse not to do a higher-ranked  lifetimes deep-dive XD</p>",
        "id": 248933079,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1628561801
    },
    {
        "content": "<p>same <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span> (I've had the tabs of the couple HRTB test cases I need to try -- to see their universes -- open since we last spoke about it) (but also: vacation + moving house)</p>",
        "id": 248933177,
        "sender_full_name": "lqd",
        "timestamp": 1628561916
    },
    {
        "content": "<p>And 4AM datafrogging</p>",
        "id": 248933212,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1628561963
    },
    {
        "content": "<p>it's always a good time to do some datafrogging</p>",
        "id": 248933227,
        "sender_full_name": "lqd",
        "timestamp": 1628561991
    },
    {
        "content": "<p>Thanks for chatting <span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span>, it's quite nice to have someone to bounce ideas off of</p>",
        "id": 248933307,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1628562065
    },
    {
        "content": "<p>but yeah I need to go to bed. I'll try to check if it's actually that easy to fix the non-quadratic TC impact on subset errors as soon as I can and keep you posted</p>",
        "id": 248933310,
        "sender_full_name": "lqd",
        "timestamp": 1628562067
    },
    {
        "content": "<p>absolutely ! I love it.</p>",
        "id": 248933324,
        "sender_full_name": "lqd",
        "timestamp": 1628562096
    },
    {
        "content": "<p>thank you too for chatting, always a pleasure !</p>",
        "id": 248933331,
        "sender_full_name": "lqd",
        "timestamp": 1628562114
    }
]