[
    {
        "content": "<p>So in <a class=\"stream-topic\" data-stream-id=\"213817\" href=\"/#narrow/stream/213817-t-lang/topic/type.20ascription\">#t-lang &gt; type ascription</a> we talked about disallowing type ascription in certain contexts...</p>",
        "id": 220681798,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1608638016
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/type.20ascription/near/219352073\">said</a>:</p>\n<blockquote>\n<p>There seem to be 3 proposals on the table:</p>\n<ul>\n<li>Change semantics of ascription to disallow coercion in lvalue contexts</li>\n<li>Forbid ascription of \"place expressions\" altogether</li>\n<li>Forbid ascription of \"place expressions\" altogether in lvalue contexts</li>\n</ul>\n<p>(I am going to adopt the term <em>lvalue context</em> to refer to the expression <code>E</code> in assignments <code>E = ...</code>, borrows (<code>&amp;E</code>, <code>&amp;mut E</code>), and auto-ref'd method calls <code>E.foo()</code>. <em>Place expression</em> refers to an expression that references an existing place, which is also one that could appear on the left-hand side of an assignment. Note that the other lvalue contexts (besides assignment) accept arbitrary expressions, but they introduce temporaries if the expression is not a place expression.)</p>\n</blockquote>",
        "id": 220681874,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1608638065
    },
    {
        "content": "<p>I think we want that last bullet</p>",
        "id": 220681878,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1608638073
    },
    {
        "content": "<p>One way to do this would be to use the <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_typeck/expr_use_visitor/struct.ExprUseVisitor.html\"><code>ExprUseVisitor</code></a></p>",
        "id": 220681888,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1608638085
    },
    {
        "content": "<p>this is some code that gives \"callbacks\" for various events</p>",
        "id": 220681933,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1608638148
    },
    {
        "content": "<p>in particular there is a delegate that gets callbacks. The <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_typeck/expr_use_visitor/trait.Delegate.html#tymethod.borrow\"><code>borrow</code></a> callback is invoked when a given expression will be borrowed</p>",
        "id": 220682019,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1608638212
    },
    {
        "content": "<p>so e.g. if there is <code>&amp;x</code> or <code>x.foo()</code> (where <code>foo</code> is an <code>&amp;self</code> method) then it would be called on the expression <code>x</code></p>",
        "id": 220682040,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1608638249
    },
    {
        "content": "<p>I am imagining we could use this to look for cases where the expression <code>x</code> contains a type ascription, but it will take a bit of coding to do</p>",
        "id": 220682101,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1608638301
    },
    {
        "content": "<p>And then if an expression contains any type ascription, at any level, it can't be used as an lvalue? Which would include being passed as a mutable reference?</p>",
        "id": 220708494,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1608654883
    },
    {
        "content": "<p>What's the archetypal \"how to cause problems with ascription in an lvalue context\" example again?</p>",
        "id": 220708745,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1608655001
    },
    {
        "content": "<p>Its in second paragraph of description of <a href=\"https://github.com/rust-lang/rust/issues/78248#issue-727700204\">rust#78248</a>, I think.</p>",
        "id": 220714082,
        "sender_full_name": "pnkfelix",
        "timestamp": 1608658224
    },
    {
        "content": "<blockquote>\n<p>it would cause problems in contexts where references are being created, such as &amp;mut (x: T). This is because the reference that results would actually reference x, since x: T is defined to be a \"place expression\" just like x is. The problem then is that if the type of x and the type T are not the same, this permits unsoundness [...]</p>\n</blockquote>",
        "id": 220714116,
        "sender_full_name": "pnkfelix",
        "timestamp": 1608658251
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I'm not sure how to tell whether a method is an <code>&amp;self</code> method using <code>ExprUseVisitor</code>.  Is it guaranteed that every such method will have an adjustment for the receiver or can the adjustments for the receiver expression be empty on <code>&amp;self</code> methods?</p>",
        "id": 221797657,
        "sender_full_name": "BN",
        "timestamp": 1609954852
    },
    {
        "content": "<p>The compiler always re-borrows when the receiver is a reference, correct? So <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_typeck/expr_use_visitor/struct.ExprUseVisitor.html#method.walk_autoref\"><code>walk_autoref</code></a> is always called on <code>&amp;self</code> methods right?</p>",
        "id": 221927985,
        "sender_full_name": "BN",
        "timestamp": 1610016863
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"328097\">@BN</span> -- sorry for the delay</p>",
        "id": 221953587,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1610032574
    },
    {
        "content": "<p>Mmm it's not so much that we want to check for <code>&amp;self</code> methods <em>explicitly</em></p>",
        "id": 221953621,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1610032595
    },
    {
        "content": "<p>It's just that <code>ExprUseVisitor</code> will tell you where the borrows are</p>",
        "id": 221953632,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1610032602
    },
    {
        "content": "<p>Regardless of whether those are due to an <code>&amp;self</code> method or something else</p>",
        "id": 221953650,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1610032610
    },
    {
        "content": "<p>That's what I tried ininitially, i.e. I only tried to use the <code>borrow</code> method of delegate, but this also caused type ascriptions in contexts such as :</p>\n<div class=\"codehilite\"><pre><span></span><code>  let arr = [4,5,6];\n  let p = &amp;arr;\n  let fooer = Foo {a : p } ;\n\n  fooer.foo(p : &amp;[u32])\n</code></pre></div>\n<p>to not be accepted, but this should compile, shouldn't it?</p>",
        "id": 221964344,
        "sender_full_name": "BN",
        "timestamp": 1610037063
    },
    {
        "content": "<p>I opened a WIP, can you take a look? <a href=\"https://github.com/rust-lang/rust/pull/80788\">https://github.com/rust-lang/rust/pull/80788</a></p>",
        "id": 221964376,
        "sender_full_name": "BN",
        "timestamp": 1610037083
    },
    {
        "content": "<p>One more problem I encountered is that we can't use type ascriptions in <code>assert_eq</code> macros, which insert references to the arguments.</p>",
        "id": 221964573,
        "sender_full_name": "BN",
        "timestamp": 1610037165
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"328097\">@BN</span> I'm going to take a look, apologies for disappearing :)</p>",
        "id": 222972111,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1610790309
    },
    {
        "content": "<p>No worries.</p>",
        "id": 222973010,
        "sender_full_name": "BN",
        "timestamp": 1610791633
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"328097\">@BN</span>  OK I <a href=\"https://github.com/rust-lang/rust/pull/80788#pullrequestreview-569842790\">left a review</a></p>",
        "id": 222974434,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1610793885
    },
    {
        "content": "<p>the main idea is in <a href=\"https://github.com/rust-lang/rust/pull/80788#discussion_r558835971\">this set of comments</a>, I was thinking about the way to implement and I <em>think</em> the best thing would be to modify \"place construction\"</p>",
        "id": 222974441,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1610793916
    },
    {
        "content": "<p>I'm not sure how familiar you are with the code so let me know if that makes no sense to you</p>",
        "id": 222974446,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1610793929
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"328097\">@BN</span>  btw <span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> is pretty familiar with this code and may be able to help</p>",
        "id": 223002516,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1610827000
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> I can give more context</p>",
        "id": 223002523,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1610827015
    },
    {
        "content": "<p>that'd be nice <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> I'll also try read through the thread</p>",
        "id": 223002530,
        "sender_full_name": "Aman Arora",
        "timestamp": 1610827036
    },
    {
        "content": "<p>Okay, so one of the issues that I see in the PR is that in <code>x: T</code> we are missing the <code>: T</code> in the span. This is because we <a href=\"https://github.com/rust-lang/rust/blob/a56bffb4f9d6f7791b2fa40412bd3e0549d76cc3/compiler/rustc_typeck/src/mem_categorization.rs#L353\">only categorize</a> the expression to the left of <code>:</code>. </p>\n<p>The reason we had introduced the <code>diag_expr_id</code> in ExprUseVisitor was to not modify the expression that is stored  <code>PlaceWithHirId</code>  (this expression that points to the actual place that was categorized) and rather pass back an expression that is better for reporting back to the user as part of the compiler diagnostics.  That said not sure if storing the complete expression is incorrect. </p>\n<p>I'm not sure what HirId we want to be in <code>PlaceBase::Rvalue</code> and I know this suggestion came up before as well when we starting revamping hir::Place to be more precise. I can look it up again. But maybe utilizing <code>diag_expr_id</code> and then <code>tcx.hir().expect_expr(hir_id)</code> to get the expression in your part of the code is a better way than adding an <code>Option&lt;&amp;Expr&gt;</code>.</p>",
        "id": 223019650,
        "sender_full_name": "Aman Arora",
        "timestamp": 1610850943
    },
    {
        "content": "<p>Okay re-read the PR comment, Rvalue contains the expr id of the original expr that mem categorization was called on</p>",
        "id": 223019815,
        "sender_full_name": "Aman Arora",
        "timestamp": 1610851308
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281950\">Aman Arora</span> <a href=\"#narrow/stream/269230-t-lang.2Ftype-ascription/topic/how.20to.20disallow.20ascription/near/223019815\">said</a>:</p>\n<blockquote>\n<p>Okay re-read the PR comment, Rvalue contains the expr id of the original expr that mem categorization was called on</p>\n</blockquote>\n<p>and I looked up and this wsa basically what we had previously discussed as well to do. We didn't end up needing it, so this wasn't added.</p>",
        "id": 223019937,
        "sender_full_name": "Aman Arora",
        "timestamp": 1610851539
    },
    {
        "content": "<p>One thing that I forgot to say is that we want to make sure we don't break Clippy tests since it also uses ExprUseVisitor. </p>\n<p>If you want to locally test changes you can do <code>./x.py test --stage 1 src/tools/clippy</code>.</p>",
        "id": 223024923,
        "sender_full_name": "Aman Arora",
        "timestamp": 1610859924
    },
    {
        "content": "<p>I should probably test this out but I think, I think this is how it will be</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"nc\">U</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"n\">f</span><span class=\"p\">(</span><span class=\"w\">  </span><span class=\"n\">x</span>: <span class=\"nc\">T</span><span class=\"w\">  </span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"c1\">//   ^^^ Place `p` for the expression will have `p.ty() = U`</span>\n</code></pre></div>\n<p>And that is because it will categorize just the place for <code>x</code> and ignore the type ascription. This feels wrong <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 223026113,
        "sender_full_name": "Aman Arora",
        "timestamp": 1610862157
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> Thanks for looking into this. If we treat type ascriptions as Rvalues  (presumable by calling <code>cat_rvalue</code> <a href=\"https://github.com/rust-lang/rust/blob/66eb9821666e0672a69a998d2331733c7a8996a5/compiler/rustc_typeck/src/mem_categorization.rs#L353\">here</a>), wouldn't that lead to problems if the expression <code>e</code> of the type ascription <code>(e : T)</code> were an UpVar (and we wouldn't call <code>cat_expr</code> on <code>e</code>)?</p>",
        "id": 223129901,
        "sender_full_name": "BN",
        "timestamp": 1610982005
    },
    {
        "content": "<p>That's true. I think we probably want to process the expression itself like it's done today and then somehow wrap it and return it as if it were an rvalue</p>",
        "id": 223175552,
        "sender_full_name": "Aman Arora",
        "timestamp": 1611015620
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> Ok thanks, but I'm not sure that we have to wrap the subexpression of type ascriptions. I've looked at the <code>memcategorization</code>code again and I think I have an idea about how we should handle this, if you see there anything wrong with my reasoning, please tell me. </p>\n<p>Currently the way rvalues are handled in <code>memcategorization</code> is by just calling <code>cat_rvalue</code> (done <a href=\"https://github.com/rust-lang/rust/blob/7d7b22d78fa71cf18109dc9d186611f2ddf60d8e/compiler/rustc_typeck/src/mem_categorization.rs#L355-L382\">here</a>), so even for cases such as tuples, in which the subexpressions could also contain UpVars we just ignore them here and classify the tuple as a whole as an rvalue. But <code>ExprUseVisitor</code> later walks the subexpressions of the expressions. So e.g. for  an expression consisting of a tuple we would <a href=\"https://github.com/rust-lang/rust/blob/7d7b22d78fa71cf18109dc9d186611f2ddf60d8e/compiler/rustc_typeck/src/expr_use_visitor.rs#L150-L156\"><code>consume_expr</code></a>, then classify this tuple expression as an rvalue, delegate this using <code>delegate_consume</code> and then later walk the subexpressions, which may contain UpVars, using <code>walk_exprs</code>. If any of the subexpressions of the Tuple contain UpVars these will be classified correctly here.</p>\n<p>For type ascriptions we will do the same. The reason why we treat type ascriptions differently was given in some comment pointing to <a href=\"https://rust-lang.github.io/rfcs/0803-type-ascription.html#type-ascription-and-temporaries\">this part of the rfc</a>. Basically we currently classify a type ascription <code>(e : T)</code> as  an lvalue iff e is an lvalue.</p>",
        "id": 223211995,
        "sender_full_name": "BN",
        "timestamp": 1611054230
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I'm still not sure whether I understand in which situations we want to forbid type ascriptions. Do we only want to forbid autorefs if they occur in callee positions? Or do we also want to forbid say autorefs that occur because of re-borrows for function arguments? Basically do we always want to forbid type ascriptions whenever delegate.borrow is called and some subexpression is a type ascription?</p>",
        "id": 223265455,
        "sender_full_name": "BN",
        "timestamp": 1611078941
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"328097\">@BN</span> autoref only ever occurs in callee positio</p>",
        "id": 223560105,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611257973
    },
    {
        "content": "<p>it refers to method calls like <code>a.foo()</code> where <code>foo</code> is an <code>&amp;self</code> method</p>",
        "id": 223560148,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611257992
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"328097\">BN</span> <a href=\"#narrow/stream/269230-t-lang.2Ftype-ascription/topic/how.20to.20disallow.20ascription/near/223265455\">said</a>:</p>\n<blockquote>\n<p>Basically do we always want to forbid type ascriptions whenever delegate.borrow is called and some subexpression is a type ascription?</p>\n</blockquote>\n<p>yes</p>",
        "id": 223560227,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611258016
    },
    {
        "content": "<p>I think that's correct</p>",
        "id": 223560240,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611258021
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Ok this is ready for another review. The test cases you suggested are in <code>src/test/ui/type-ascription/{as_ref,  borrow,  ref-def}</code>. I've also added some tests where automatic reborrows result in errors (for which I'm not sure whether these should yield errors) in <code>src/test/ui/type-ascription/automatic-reborrow</code> </p>\n<p><a href=\"https://github.com/rust-lang/rust/pull/80788\">https://github.com/rust-lang/rust/pull/80788</a></p>",
        "id": 223700352,
        "sender_full_name": "BN",
        "timestamp": 1611349662
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"328097\">@BN</span> great!</p>",
        "id": 223883347,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611573834
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"328097\">@BN</span> sorry it took me a bit, I left a review, this is actually looking really close I think!</p>",
        "id": 225407236,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612612957
    },
    {
        "content": "<p>I'm hoping to become more responsive now :) I've been working out various hold-ups in my schedule.</p>",
        "id": 225407240,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612612971
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  Updated the PR, can you take another look, please?</p>",
        "id": 226005584,
        "sender_full_name": "BN",
        "timestamp": 1613056687
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"328097\">@BN</span> yep!</p>",
        "id": 226052196,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613074990
    }
]