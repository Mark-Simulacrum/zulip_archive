[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> I see PR <a href=\"https://github.com/rust-lang/rust/issues/82556\">#82556</a> (\"add dynamically-linked musl targets\") is labeled as <code>S-waiting-on-team</code> but the discussion is quite ongoing. Would you like to bring the topic to tomorrow's compiler meeting (as we usually do with <code>S-waiting-on-team</code> labels) or can wait until the discussion settles down?</p>",
        "id": 228590466,
        "sender_full_name": "apiraino",
        "timestamp": 1614778189
    },
    {
        "content": "<p>I won't be able to attend the meeting, but I'll try to add this to the meeting agenda.</p>",
        "id": 228592253,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1614778886
    },
    {
        "content": "<p>no worries. I've tried <a href=\"https://hackmd.io/b3srlh3CR5aSTQPDi5I3tA?view#PRs-S-waiting-on-team\">summarizing a bit</a>, feel free to improve! thanks</p>",
        "id": 228601195,
        "sender_full_name": "apiraino",
        "timestamp": 1614782020
    },
    {
        "content": "<p>Also FYI <span class=\"user-mention\" data-user-id=\"250987\">@apiraino</span> I took the liberty of accepting <a href=\"https://github.com/rust-lang/compiler-team/issues/408\">compiler-team#408</a> and adding it as accepted in the agenda</p>",
        "id": 228601649,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614782172
    },
    {
        "content": "<p>thanks <span class=\"user-mention\" data-user-id=\"255061\">@Léo Lanteri Thauvin</span> :)</p>",
        "id": 228601917,
        "sender_full_name": "apiraino",
        "timestamp": 1614782274
    },
    {
        "content": "<p>Summary for <a href=\"https://github.com/rust-lang/rust/pull/82556\">https://github.com/rust-lang/rust/pull/82556</a> from me:</p>\n<p>Currently musl-based targets (which have tiers 2 and 3) exhibit some \"non-standard\" behavior (if we take glibc-based targets as the standard) - they statically link libc by default, and also use self-contained linking by default (<a href=\"https://doc.rust-lang.org/rustc/codegen-options/index.html#link-self-contained\">https://doc.rust-lang.org/rustc/codegen-options/index.html#link-self-contained</a>).<br>\nThis behavior is considered unsatisfactory by various people, especially on musl-based platforms, and there are multiple ways to address the problems.</p>\n<ul>\n<li>\n<p>Change existing musl targets to behave in standard glibc-like way.<br>\n    - Pros: This is what people working on musl and with musl-based Linux distributions want.<br>\n    - Cons: Uncertain number of build/CI scripts break. The old behavior can be restored by adding <code>-C target-feature=+crt-static -C link-self-contained=yes</code> to the target's rustc flags. Good advertisement will be needed.<br>\n    - Pros: Uncertain number of build/CI scrips that are currently implicitly broken due to not treating musl specially gets fixed (<a href=\"https://github.com/rust-lang/rust/pull/82556#issuecomment-788305227\">https://github.com/rust-lang/rust/pull/82556#issuecomment-788305227</a>).<br>\n    - Pros: The target's behavior is straightforward and predictable.</p>\n</li>\n<li>\n<p>Add a new \"musl done right\" target behaving in standard glibc-like way.<br>\n    - Cons: CI is stressed by adding a large number of new tier 2 targets.<br>\n    - Cons: need to come up with a name for the target.<br>\n    - Pros: nothing is broken.<br>\n    - Cons: nothing is fixed either.<br>\n    - Pros: The target's behavior is straightforward and predictable.</p>\n</li>\n<li>\n<p>Change existing musl targets to use more heuristics and behave in host-dependent way.<br>\n    - Pros: nothing or almost nothing is broken.<br>\n    - Cons: some cases like musl targets on musl hosts are fixed using heuristics.<br>\n    - Pros: The targets' behavior becomes pretty unpredictable.</p>\n</li>\n</ul>",
        "id": 228681359,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1614811000
    },
    {
        "content": "<blockquote>\n<ul>\n<li>Pros: The targets' behavior becomes pretty unpredictable.</li>\n</ul>\n</blockquote>\n<p>I think you meant to say \"Cons\" here</p>",
        "id": 228682053,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614811353
    },
    {
        "content": "<p>fantastic summary, thank you <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span></p>",
        "id": 228688719,
        "sender_full_name": "apiraino",
        "timestamp": 1614814553
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/227806-t-compiler.2Fwg-prioritization/topic/2021-03-03.20meeting.20agenda/near/228682053\">said</a>:</p>\n<blockquote>\n<blockquote>\n<ul>\n<li>Pros: The targets' behavior becomes pretty unpredictable.</li>\n</ul>\n</blockquote>\n<p>I think you meant to say \"Cons\" here</p>\n</blockquote>\n<p>Yes, \"Pros\" and \"Cons\" are swapped for the last two entries in the list.</p>",
        "id": 228736510,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1614847847
    },
    {
        "content": "<p>(The message is too old to edit it in place.)</p>",
        "id": 228736598,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1614847892
    }
]