[
    {
        "content": "<p>according to <a href=\"http://lists.llvm.org/pipermail/llvm-dev/2020-July/143015.html\">http://lists.llvm.org/pipermail/llvm-dev/2020-July/143015.html</a> someone found that mimalloc was a massive (19x) speedup for their workload. I was curious, has anyone tested mimalloc on rustc for Windows? (I forget if there were attempts when it first came out or not). If not this may be an easy win for performance on Windows. IIRC we use jemalloc on Linux/macOS (and only on x86-64!) and we don't use it on Windows</p>",
        "id": 203142770,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1594147511
    },
    {
        "content": "<p>That thread indicates that multithreaded allocations behave poorly with the default system allocator, which is ThinLTO for us, so we possibly stand to gain a nontrivial amount for release builds by switching allocators.</p>",
        "id": 203142845,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1594147554
    },
    {
        "content": "<p>I think we tried it for linux, but since we don't have perf.r-l.o on windows no one checked there</p>",
        "id": 203145407,
        "sender_full_name": "simulacrum",
        "timestamp": 1594148575
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pulls?q=is%3Apr+mimalloc+is%3Aclosed\">https://github.com/rust-lang/rust/pulls?q=is%3Apr+mimalloc+is%3Aclosed</a></p>",
        "id": 203145602,
        "sender_full_name": "simulacrum",
        "timestamp": 1594148645
    },
    {
        "content": "<p>yeah I suspect jemalloc vs mimalloc is a relatively close perf difference, but mimalloc vs system windows allocator is likely to be a lot bigger</p>",
        "id": 203147377,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1594149390
    },
    {
        "content": "<p>this would have to be locally tested as well vs done through perf</p>",
        "id": 203147390,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1594149398
    },
    {
        "content": "<p>We never actually got around to running perf tests with mimalloc though.</p>",
        "id": 203269290,
        "sender_full_name": "Amanieu",
        "timestamp": 1594216249
    },
    {
        "content": "<p>There were some initial tests that showed wall-time regressions, but it looks like that may have been incomplete replacement of jemalloc with mimalloc. It looks like the complete replacement ran into <a href=\"https://github.com/microsoft/mimalloc/issues/77\">https://github.com/microsoft/mimalloc/issues/77</a>, though apparently that's been resolved somewhat since then. I imagine we could test again now.</p>",
        "id": 203269908,
        "sender_full_name": "simulacrum",
        "timestamp": 1594216559
    },
    {
        "content": "<p>IIRC initial tests with the regression were using mimalloc with additional checks enabled (meant for debugging) aside of the other issues.</p>",
        "id": 203316290,
        "sender_full_name": "mati865",
        "timestamp": 1594238890
    },
    {
        "content": "<p>Windows 10.0.19041 also has a new segment heap that we can opt into by setting a flag in the manifest (you know, that thing that Rust <em>still</em> refuses to provide first class support for). It's much faster than the default NT heap and avoids the code size penalty of statically linking a custom allocator.</p>",
        "id": 203350648,
        "sender_full_name": "Peter Rabbit",
        "timestamp": 1594270168
    },
    {
        "content": "<blockquote>\n<p>you know, that thing that Rust still refuses to provide first class support for</p>\n</blockquote>\n<p>In windows-gnu world it's as simple as calling <code>ar</code> and <code>windres</code> with few arguments. Does msvc have something similar?</p>",
        "id": 203362436,
        "sender_full_name": "mati865",
        "timestamp": 1594284080
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119581\">mati865</span> <a href=\"#narrow/stream/242869-t-compiler.2Fwindows/topic/anyone.20tested.20mimalloc.3F/near/203362436\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>you know, that thing that Rust still refuses to provide first class support for</p>\n</blockquote>\n<p>In windows-gnu world it's as simple as calling <code>ar</code> and <code>windres</code> with few arguments. Does msvc have something similar?</p>\n</blockquote>\n<p>Actually <code>pc-windows-msvc</code> has something even better which is the <code>/MANIFESTINPUT</code> linker argument that allows multiple dependencies to all specify input manifests which get merged together into a final manifest that is embedded in the binary. Granted we still don't have a stable way to programmatically specify linker arguments (except for <code>cdylib</code>s)...</p>\n<p>Without <code>/MANIFESTINPUT</code> things get kinda gross as you can only embed a single manifest into a binary, however multiple dependencies may want to add things into your manifest and without <strong><em>first class</em></strong> support for that from Rust that just won't work. To support <code>pc-windows-gnu</code> properly Rust would have to handle the merging of manifests itself which means Rust/Cargo would have to expose a dedicated option to specify manifest input files.</p>\n<p>The current method of compiling a resource file to embed a manifest, and then tricking rust into thinking that resource file is an import library so it passes it through to the linker untouched, only works when you have a single manifest and is not a robust solution.</p>",
        "id": 203365790,
        "sender_full_name": "Peter Rabbit",
        "timestamp": 1594286615
    },
    {
        "content": "<p>In the past LD was corrupting executables if multiple manifests were linked but at least some of those issues are fixed: <a href=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=69880\">https://gcc.gnu.org/bugzilla/show_bug.cgi?id=69880</a><br>\nLLD's MinGW driver is a wrapper that calls <code>lld-link</code> with proper arguments so exposing <code>/MANIFESTINPUT</code> as <code>--manifestinput</code> or something similar should be trivial.</p>",
        "id": 203371226,
        "sender_full_name": "mati865",
        "timestamp": 1594290817
    },
    {
        "content": "<p>I'd be glad to start writing an RFC for this but unsure how that'll go considering there are crates windres and embed-resource that you can use in <a href=\"http://build.rs\">build.rs</a> today. The only downside is no direct support for multiple manifests but that's not exactly a normal usecase.</p>",
        "id": 207368313,
        "sender_full_name": "Luqman Aden",
        "timestamp": 1597810118
    },
    {
        "content": "<p>Either way, here's a start: <a href=\"https://github.com/luqmana/rfcs/blob/windows-manifests/text/0000-windows-manifests.md\">https://github.com/luqmana/rfcs/blob/windows-manifests/text/0000-windows-manifests.md</a> :)</p>",
        "id": 207373737,
        "sender_full_name": "Luqman Aden",
        "timestamp": 1597817787
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125267\">@Peter Rabbit</span> It seems like the new segment heap is slower, but uses less memory. Apparently that's what Chrome found too.</p>",
        "id": 215194482,
        "sender_full_name": "Zoxc",
        "timestamp": 1604155060
    }
]