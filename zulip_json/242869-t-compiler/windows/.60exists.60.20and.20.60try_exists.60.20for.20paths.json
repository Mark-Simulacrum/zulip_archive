[
    {
        "content": "<p>Hi, I have a draft PR which I was hoping someone with Windows knowledge could take a quick look at. It creates a Windows specific implementation of the unstable <a href=\"https://doc.rust-lang.org/std/path/struct.Path.html#method.try_exists\"><code>Path::try_exists</code></a> method. This method will also be used as the basis for current <a href=\"https://doc.rust-lang.org/std/path/struct.Path.html#method.exists\"><code>Path::exists</code></a> method.</p>\n<p><a href=\"https://github.com/rust-lang/rust/blob/1ddbb93e0fe2bc1758d6dde07b49966adccdf9f9/library/std/src/sys/windows/fs.rs#L948\">Here's the relevant part of my code</a>. I'd be grateful if someone could check my reasoning. Currently it uses <code>GetFileAttributes</code> to check if a file exists but then falls back to opening the file if it's a reparse point (so as to follow symlinks). But I'm not sure if it's actually worth it or if I should go straight to opening the file.</p>\n<p>I'm also thinking that <code>ERROR_SHARE_VIOLATION</code> should return <code>Ok(true)</code> (aka the file exists). Because a file lock is often a temporary situation. And lastly I'm not sure that windows ever actually emits <code>ERROR_DELETE_PENDING</code> even when it would make sense to do so. At least I've not been able to get it to.</p>",
        "id": 238562105,
        "sender_full_name": "Chris Denton",
        "timestamp": 1620864196
    },
    {
        "content": "<p>Hi, Chris.  Windows dev, here.  I'm reluctant to endorse the approach I see in this code, because it encodes a lot of knowledge about Windows as an implementation, not just the Windows storage APIs. The exact semantics around directory traversal, reparse point interpretation, etc. have changed in the past, and are liable to change in the future. These semantics also have subtle variations on different versions of Windows, so it is difficult to write one single function that behaves the way you want it to behave, on all of the Windows versions that Rust supports (currently Vista and up).</p>\n<p>The more robust and conservative approach would be to always use CreateFileW, with GENERIC_READ or possibly only FILE_READ_ATTRIBUTES.</p>",
        "id": 239181032,
        "sender_full_name": "Arlie Davis",
        "timestamp": 1621298605
    },
    {
        "content": "<p>Thanks! I'll rewrite to use that approach.</p>",
        "id": 239181295,
        "sender_full_name": "Chris Denton",
        "timestamp": 1621298824
    },
    {
        "content": "<p>There might be a good reason to do something else (like performance), but I'm really hesitant to use more-fragile-but-faster approaches in <code>libstd</code>.  Maybe in some crate like <code>super_fast_windows_io</code>.</p>",
        "id": 239181479,
        "sender_full_name": "Arlie Davis",
        "timestamp": 1621298960
    }
]