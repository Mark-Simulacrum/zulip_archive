[
    {
        "content": "<p>Has anyone gotten cross language LTO to work on windows using the msvc toolchain and clang-cl for the C/C++ code? And lld-link as the linker. Almost all the docs or examples I've found where either linux or using the gnu target. <br>\nclang docs here <a href=\"https://clang.llvm.org/docs/ThinLTO.html\">https://clang.llvm.org/docs/ThinLTO.html</a> say lld-link supports LTO<br>\nI'm trying and I got it to compile, but it's not inlining the dummy C function I'm testing with. I also have an unused C function in my test and it <em>is</em> removing that, which is good.<br>\nMy clang-cl version matches the rust llvm version, both are llvm13<br>\nThe only thing I can think of right now is maybe I need to compile clang-cl myself from the rust LLVM fork but I'd really rather not have to do that</p>\n<p>I uploaded my test project here if anyone wants to look at it: <a href=\"https://github.com/nico-abram/lto-test\">https://github.com/nico-abram/lto-test</a></p>",
        "id": 265390644,
        "sender_full_name": "Nick12",
        "timestamp": 1639800490
    },
    {
        "content": "<p>this is more or less exactly what I'm testing: <a href=\"/user_uploads/4715/gWPsZXLZI1MP3wzmqaGhuS0t/imagen.png\">imagen.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/gWPsZXLZI1MP3wzmqaGhuS0t/imagen.png\" title=\"imagen.png\"><img src=\"/user_uploads/4715/gWPsZXLZI1MP3wzmqaGhuS0t/imagen.png\"></a></div>",
        "id": 265390652,
        "sender_full_name": "Nick12",
        "timestamp": 1639800507
    },
    {
        "content": "<p>and these are my versions: <a href=\"/user_uploads/4715/9Bvitlu2yoLZl203ikSRMCwZ/imagen.png\">imagen.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/9Bvitlu2yoLZl203ikSRMCwZ/imagen.png\" title=\"imagen.png\"><img src=\"/user_uploads/4715/9Bvitlu2yoLZl203ikSRMCwZ/imagen.png\"></a></div>",
        "id": 265390656,
        "sender_full_name": "Nick12",
        "timestamp": 1639800518
    },
    {
        "content": "<p>Using __attribute__((always_inline)) in C got the function to inline so I think it was just LLVM inline thresholds. Sorry to bother you!</p>",
        "id": 265391311,
        "sender_full_name": "Nick12",
        "timestamp": 1639801503
    }
]