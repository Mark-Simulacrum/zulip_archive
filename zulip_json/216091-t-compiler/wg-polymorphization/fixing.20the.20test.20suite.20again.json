[
    {
        "content": "<p>cc <a href=\"https://github.com/rust-lang/rust/issues/75185\">#75185</a> <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> </p>\n<p>So after fixing the cycle error I tried to run all tests with polymorphization on and we have some interesting ICE</p>",
        "id": 206360679,
        "sender_full_name": "lcnr",
        "timestamp": 1596914825
    },
    {
        "content": "<p>we should probably run the whole test suite with polymorphization on when changing something non trivial <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 206360688,
        "sender_full_name": "lcnr",
        "timestamp": 1596914868
    },
    {
        "content": "<p>Interesting - might have been introduced by either of the last two PRs, I think I forgot to run the full suite.</p>",
        "id": 206360724,
        "sender_full_name": "davidtwco",
        "timestamp": 1596914885
    },
    {
        "content": "<p>yeah, I think <a href=\"https://github.com/rust-lang/rust/issues/75255\">#75255</a> is at fault here, currently formatting the type which causes the failure <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 206360739,
        "sender_full_name": "lcnr",
        "timestamp": 1596914953
    },
    {
        "content": "<p>Do you get the impression that the ICEs show the changes weâ€™ve made recently to be entirely incorrect?</p>",
        "id": 206360740,
        "sender_full_name": "davidtwco",
        "timestamp": 1596914954
    },
    {
        "content": "<p>hmm, not yet sure. <code>codegen_fulfill_obligation</code> now fails, not sure how to deal with that yet</p>",
        "id": 206360815,
        "sender_full_name": "lcnr",
        "timestamp": 1596915095
    },
    {
        "content": "<p>why did I look at the one test with 830 lines of code here</p>",
        "id": 206360864,
        "sender_full_name": "lcnr",
        "timestamp": 1596915174
    },
    {
        "content": "<p>there are less than 10 failures, and I hope one of them is shorter <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 206360875,
        "sender_full_name": "lcnr",
        "timestamp": 1596915207
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;foo&quot;</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Baz</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Baz</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Baz</span>::<span class=\"n\">bar</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>Is one of the failures</p>",
        "id": 206361087,
        "sender_full_name": "lcnr",
        "timestamp": 1596915503
    },
    {
        "content": "<p>So it was the way we deal with promoteds <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 206361104,
        "sender_full_name": "lcnr",
        "timestamp": 1596915517
    },
    {
        "content": "<p>Huh</p>",
        "id": 206361142,
        "sender_full_name": "davidtwco",
        "timestamp": 1596915527
    },
    {
        "content": "<p>At least that's what I expect</p>",
        "id": 206361147,
        "sender_full_name": "lcnr",
        "timestamp": 1596915535
    },
    {
        "content": "<p>println is at fault <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> \"foo\" alone does not ICE</p>",
        "id": 206361155,
        "sender_full_name": "lcnr",
        "timestamp": 1596915570
    },
    {
        "content": "<p>let me try to unfold <code>println!</code></p>",
        "id": 206361173,
        "sender_full_name": "lcnr",
        "timestamp": 1596915579
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">error</span>: <span class=\"nc\">internal</span><span class=\"w\"> </span><span class=\"n\">compiler</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">lcnr</span><span class=\"o\">/</span><span class=\"n\">rust4</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">librustc_middle</span><span class=\"o\">/</span><span class=\"n\">macros</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">16</span>:<span class=\"mi\">9</span>: <span class=\"nc\">encountered</span><span class=\"w\"> </span><span class=\"n\">bad</span><span class=\"w\"> </span><span class=\"n\">ConstKind</span><span class=\"w\"> </span><span class=\"n\">after</span><span class=\"w\"> </span><span class=\"n\">monomorphizing</span>:\n  <span class=\"nc\">Error</span><span class=\"p\">(</span><span class=\"n\">DelaySpanBugEmitted</span><span class=\"p\">(())),</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">ct</span>: <span class=\"nc\">Const</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">ty</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"o\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">val</span>: <span class=\"nc\">Unevaluated</span><span class=\"p\">(</span><span class=\"n\">WithOptConstParam</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">did</span>: <span class=\"nc\">DefId</span><span class=\"p\">(</span><span class=\"mi\">0</span>:<span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"o\">~</span><span class=\"w\"> </span><span class=\"n\">ok</span><span class=\"p\">[</span><span class=\"mi\">317</span><span class=\"n\">d</span><span class=\"p\">]</span>::<span class=\"n\">Foo</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>::<span class=\"n\">bar</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]),</span><span class=\"w\"> </span><span class=\"n\">const_param_did</span>: <span class=\"nc\">None</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"bp\">Self</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">promoted</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]))</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">-</span>-&gt; <span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">lcnr</span><span class=\"o\">/</span><span class=\"n\">rust4</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">test</span><span class=\"o\">/</span><span class=\"n\">ui</span><span class=\"o\">/</span><span class=\"n\">__check</span><span class=\"o\">/</span><span class=\"n\">ok</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">5</span>:<span class=\"mi\">41</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"n\">LL</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">         </span><span class=\"n\">std</span>::<span class=\"n\">io</span>::<span class=\"n\">_print</span><span class=\"p\">(</span><span class=\"n\">format_args_nl</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;foo&quot;</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">                                         </span><span class=\"o\">^^^^^</span><span class=\"w\"></span>\n\n<span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"na\">&#39;rustc</span><span class=\"err\">&#39;</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"na\">&#39;Box</span><span class=\"o\">&lt;</span><span class=\"n\">Any</span><span class=\"o\">&gt;</span><span class=\"err\">&#39;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">lcnr</span><span class=\"o\">/</span><span class=\"n\">rust4</span><span class=\"o\">/</span><span class=\"n\">library</span><span class=\"o\">/</span><span class=\"n\">std</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">macros</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">13</span>:<span class=\"mi\">23</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 206361228,
        "sender_full_name": "lcnr",
        "timestamp": 1596915670
    },
    {
        "content": "<p>uff</p>",
        "id": 206361344,
        "sender_full_name": "lcnr",
        "timestamp": 1596915798
    },
    {
        "content": "<p>I think I know what went wrong</p>",
        "id": 206361346,
        "sender_full_name": "lcnr",
        "timestamp": 1596915810
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"w\">            </span><span class=\"n\">ty</span>::<span class=\"n\">ConstKind</span>::<span class=\"n\">Unevaluated</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"c1\">// If there is a promoted, don&#39;t look at the substs - since it will always contain</span>\n<span class=\"w\">                </span><span class=\"c1\">// the generic parameters, instead, traverse the promoted MIR.</span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">promoted</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">promoted_mir</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">def_id</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">visit_body</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">promoted</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">]);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kc\">false</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 206361387,
        "sender_full_name": "lcnr",
        "timestamp": 1596915844
    },
    {
        "content": "<p>we need the promoted_mir of the <code>ConstKind::Unevaluated(def, ..)</code> instead of <code>self.def_id</code> I think</p>",
        "id": 206361397,
        "sender_full_name": "lcnr",
        "timestamp": 1596915879
    },
    {
        "content": "<p>nm</p>",
        "id": 206361406,
        "sender_full_name": "lcnr",
        "timestamp": 1596915903
    },
    {
        "content": "<p>still broken <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 206361417,
        "sender_full_name": "lcnr",
        "timestamp": 1596915924
    },
    {
        "content": "<p>another idea...</p>",
        "id": 206361419,
        "sender_full_name": "lcnr",
        "timestamp": 1596915960
    },
    {
        "content": "<p>Is it the promoted case or the non-promoted case?</p>",
        "id": 206361614,
        "sender_full_name": "davidtwco",
        "timestamp": 1596916265
    },
    {
        "content": "<p>promoted</p>",
        "id": 206361622,
        "sender_full_name": "lcnr",
        "timestamp": 1596916300
    },
    {
        "content": "<p>Is that the only ICE or are there others?</p>",
        "id": 206361669,
        "sender_full_name": "davidtwco",
        "timestamp": 1596916360
    },
    {
        "content": "<p>not sure if all ICE have the same cause</p>",
        "id": 206361671,
        "sender_full_name": "lcnr",
        "timestamp": 1596916381
    },
    {
        "content": "<p>will just go one by one for now</p>",
        "id": 206361674,
        "sender_full_name": "lcnr",
        "timestamp": 1596916386
    },
    {
        "content": "<p>I assume some cases have the cycle error we saw on CI.</p>",
        "id": 206361676,
        "sender_full_name": "davidtwco",
        "timestamp": 1596916387
    },
    {
        "content": "<p>the cycle error is already fixed</p>",
        "id": 206361679,
        "sender_full_name": "lcnr",
        "timestamp": 1596916401
    },
    {
        "content": "<p>that one was easy <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 206361680,
        "sender_full_name": "lcnr",
        "timestamp": 1596916408
    },
    {
        "content": "<p>Oh, fantastic, what was it?</p>",
        "id": 206361844,
        "sender_full_name": "davidtwco",
        "timestamp": 1596916698
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">ty</span>::<span class=\"n\">ConstKind</span>::<span class=\"n\">Unevaluated</span><span class=\"p\">(</span><span class=\"n\">def</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">unevaluated_substs</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">def_kind</span><span class=\"p\">(</span><span class=\"n\">def</span><span class=\"p\">.</span><span class=\"n\">did</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">DefKind</span>::<span class=\"n\">AnonConst</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">{</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 206361866,
        "sender_full_name": "lcnr",
        "timestamp": 1596916802
    },
    {
        "content": "<p>just ignoring associated consts for now <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 206361908,
        "sender_full_name": "lcnr",
        "timestamp": 1596916810
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 206361922,
        "sender_full_name": "davidtwco",
        "timestamp": 1596916845
    },
    {
        "content": "<p>so I think there are 2 issues here...</p>\n<p>For promoteds we try to solve the instance of their body which somehow fails when used with traits (not sure why yet)</p>",
        "id": 206363222,
        "sender_full_name": "lcnr",
        "timestamp": 1596919085
    },
    {
        "content": "<p>resolving <code>FnDef</code> seems to require the <code>FnDef</code> to be fully monomorphic or something <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> haven't looked too much into this</p>",
        "id": 206363232,
        "sender_full_name": "lcnr",
        "timestamp": 1596919114
    },
    {
        "content": "<p>Polymorphization also makes this example compile, which is slightly worrying:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"cp\">#[derive(Clone)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">D</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"o\">&gt;</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">D</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">matches</span><span class=\"o\">&lt;</span><span class=\"n\">F</span>: <span class=\"nb\">Fn</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">F</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">//~^ ERROR reached the type-length limit while instantiating `D::matches::&lt;[closure</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">D</span><span class=\"p\">(</span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">matches</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">matches</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">A</span><span class=\"p\">(</span><span class=\"n\">B</span>::<span class=\"n\">Variant1</span><span class=\"p\">).</span><span class=\"n\">matches</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">(</span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">()))</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 206363299,
        "sender_full_name": "lcnr",
        "timestamp": 1596919256
    },
    {
        "content": "<p>As we now have (luckily rare) edge cases where the compilation result depends on optimizations</p>",
        "id": 206363305,
        "sender_full_name": "lcnr",
        "timestamp": 1596919282
    },
    {
        "content": "<p>Ah, this is already the case without polymorphization</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">L</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">test</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">test</span>::<span class=\"o\">&lt;</span><span class=\"n\">L</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">public</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">test</span>::<span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 206363360,
        "sender_full_name": "lcnr",
        "timestamp": 1596919407
    },
    {
        "content": "<p>I donâ€™t know that anyone realised just how many edge cases polymorphisation would have.</p>",
        "id": 206363604,
        "sender_full_name": "davidtwco",
        "timestamp": 1596919909
    },
    {
        "content": "<blockquote>\n<p>resolving FnDef seems to require the FnDef to be fully monomorphic or something <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> haven't looked too much into this</p>\n</blockquote>\n<p><a href=\"https://github.com/rust-lang/rust/blob/1facd4a77b181ad44b9c9a64f0fd21b6d5180458/src/librustc_ty/instance.rs#L164-L166\">https://github.com/rust-lang/rust/blob/1facd4a77b181ad44b9c9a64f0fd21b6d5180458/src/librustc_ty/instance.rs#L164-L166</a></p>",
        "id": 206363702,
        "sender_full_name": "lcnr",
        "timestamp": 1596920058
    },
    {
        "content": "<p>Fun, a line we introduced in the initial polymorphisation implementation.</p>",
        "id": 206363715,
        "sender_full_name": "davidtwco",
        "timestamp": 1596920114
    },
    {
        "content": "<p><span aria-label=\"laughter tears\" class=\"emoji emoji-1f602\" role=\"img\" title=\"laughter tears\">:laughter_tears:</span></p>",
        "id": 206363739,
        "sender_full_name": "lcnr",
        "timestamp": 1596920162
    },
    {
        "content": "<p>I canâ€™t recall the specifics, but would probably be able to refresh my memory if I reread old conversations with eddy.</p>",
        "id": 206363754,
        "sender_full_name": "davidtwco",
        "timestamp": 1596920171
    },
    {
        "content": "<p>afaik this check expects all <code>FnDef</code> to be fully concrete</p>",
        "id": 206363757,
        "sender_full_name": "lcnr",
        "timestamp": 1596920217
    },
    {
        "content": "<p>couldn't we solve this by checking the same thing we check in mir/eval?</p>",
        "id": 206363762,
        "sender_full_name": "lcnr",
        "timestamp": 1596920237
    },
    {
        "content": "<p>i.e. all used generic params are concrete and all unused are <code>ty::Param</code>?</p>",
        "id": 206363765,
        "sender_full_name": "lcnr",
        "timestamp": 1596920260
    },
    {
        "content": "<p>I remember perf being a concern here.</p>",
        "id": 206363805,
        "sender_full_name": "davidtwco",
        "timestamp": 1596920302
    },
    {
        "content": "<p><span aria-label=\"cry\" class=\"emoji emoji-1f622\" role=\"img\" title=\"cry\">:cry:</span> put it into a query and hope it is worth it</p>",
        "id": 206363810,
        "sender_full_name": "lcnr",
        "timestamp": 1596920320
    },
    {
        "content": "<p>This check motivated the introduction of the <code>STILL_FURTHER_SPECIALIZABLE</code> flag.</p>",
        "id": 206363820,
        "sender_full_name": "davidtwco",
        "timestamp": 1596920361
    },
    {
        "content": "<p>maybe we can use <code>MAY_POLYMORPHIZE</code> here</p>",
        "id": 206363873,
        "sender_full_name": "lcnr",
        "timestamp": 1596920431
    },
    {
        "content": "<p>which should keep the happy path simple</p>",
        "id": 206363877,
        "sender_full_name": "lcnr",
        "timestamp": 1596920447
    },
    {
        "content": "<p>let me just check if usnig <code>ensure_monomorphic_enough</code> actually fixes the problem here <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 206363893,
        "sender_full_name": "lcnr",
        "timestamp": 1596920493
    },
    {
        "content": "<p>This particular issue results from the non-promoteds PR, right?</p>",
        "id": 206363957,
        "sender_full_name": "davidtwco",
        "timestamp": 1596920632
    },
    {
        "content": "<p>probably even both</p>",
        "id": 206363959,
        "sender_full_name": "lcnr",
        "timestamp": 1596920642
    },
    {
        "content": "<p>promoteds had pretty much the same issue from what I can tell</p>",
        "id": 206363999,
        "sender_full_name": "lcnr",
        "timestamp": 1596920663
    },
    {
        "content": "<p>On my computer now so I can dig into something</p>",
        "id": 206364009,
        "sender_full_name": "davidtwco",
        "timestamp": 1596920721
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> what patches do you have to get to where you are now? Skipping associated consts gets me further but I hit a out of range substitution later when bootstrapping stage2.</p>",
        "id": 206364447,
        "sender_full_name": "davidtwco",
        "timestamp": 1596921600
    },
    {
        "content": "<p>Or maybe you just started looking at stage1 tests after that.</p>",
        "id": 206364489,
        "sender_full_name": "davidtwco",
        "timestamp": 1596921610
    },
    {
        "content": "<p>stage1 tests only</p>",
        "id": 206364493,
        "sender_full_name": "lcnr",
        "timestamp": 1596921619
    },
    {
        "content": "<p>the oor substitution probably comes from promoteds</p>",
        "id": 206364570,
        "sender_full_name": "lcnr",
        "timestamp": 1596921817
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/216091-t-compiler.2Fwg-polymorphization/topic/fixing.20the.20test.20suite.20again/near/206361397\">said</a>:</p>\n<blockquote>\n<p>we need the promoted_mir of the <code>ConstKind::Unevaluated(def, ..)</code> instead of <code>self.def_id</code> I think</p>\n</blockquote>\n<p>this</p>",
        "id": 206364573,
        "sender_full_name": "lcnr",
        "timestamp": 1596921829
    },
    {
        "content": "<p>It didn't seem that way:</p>\n<div class=\"codehilite\"><pre><span></span><code>error: internal compiler error: src/librustc_middle/ty/subst.rs:530:17: type parameter `M/#4` (M/4) out of range when substituting, substs=[for&lt;&#39;r&gt; fn(&amp;&#39;r std::iter::Map&lt;std::iter::Map&lt;std::ops::Range&lt;usize&gt;, [closure@src/librustc_metadata/rmeta/decoder.rs:247:28: 247:65 dcx:rmeta::decoder::DecodeContext]&gt;, [closure@src/librustc_metadata/rmeta/decoder.rs:1321:26: 1321:98 self:&amp;&amp;creader::CrateMetadataRef]&gt;) -&gt; (usize, std::option::Option&lt;usize&gt;) {&lt;std::iter::Map&lt;std::iter::Map&lt;std::ops::Range&lt;usize&gt;, [closure@src/librustc_metadata/rmeta/decoder.rs:247:28: 247:65 dcx:rmeta::decoder::DecodeContext]&gt;, [closure@src/librustc_metadata/rmeta/decoder.rs:1321:26: 1321:98 self:&amp;&amp;creader::CrateMetadataRef]&gt; as std::iter::Iterator&gt;::size_hint}, (&amp;std::iter::Map&lt;std::iter::Map&lt;std::ops::Range&lt;usize&gt;, [closure@src/librustc_metadata/rmeta/decoder.rs:247:28: 247:65 dcx:rmeta::decoder::DecodeContext]&gt;, [closure@src/librustc_metadata/rmeta/decoder.rs:1321:26: 1321:98 self:&amp;&amp;creader::CrateMetadataRef]&gt;,)]\n</code></pre></div>\n\n\n<p>I didn't dig into it too much before experimenting with what I think the fix might be.</p>",
        "id": 206364626,
        "sender_full_name": "davidtwco",
        "timestamp": 1596921873
    },
    {
        "content": "<p>both looking in promoteds and looking into substs  don't work</p>",
        "id": 206365200,
        "sender_full_name": "lcnr",
        "timestamp": 1596922895
    },
    {
        "content": "<p>removing both fixes all issues (meaning that the only remaining change is to look into <code>AnonConst</code>, which might just work because it relies on lazy norm to actually affect anything)</p>",
        "id": 206365250,
        "sender_full_name": "lcnr",
        "timestamp": 1596922939
    },
    {
        "content": "<p>oh boi</p>",
        "id": 206365251,
        "sender_full_name": "lcnr",
        "timestamp": 1596922941
    },
    {
        "content": "<p>I was just checking this - are all the issues related to promoteds and none related to the other PR?</p>",
        "id": 206365265,
        "sender_full_name": "davidtwco",
        "timestamp": 1596923005
    },
    {
        "content": "<p>Or do you mean something else?</p>",
        "id": 206365270,
        "sender_full_name": "davidtwco",
        "timestamp": 1596923026
    },
    {
        "content": "<p>no, promoteds break on their own</p>",
        "id": 206365271,
        "sender_full_name": "lcnr",
        "timestamp": 1596923029
    },
    {
        "content": "<p>and from the other PR</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">substs</span><span class=\"p\">.</span><span class=\"n\">may_polymorphize</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">substs</span><span class=\"p\">[</span><span class=\"n\">param</span><span class=\"p\">.</span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">],</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"c1\">// Otherwise, use the substitution after polymorphizing.</span>\n<span class=\"w\">            </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">arg</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">substs</span><span class=\"p\">[</span><span class=\"n\">param</span><span class=\"p\">.</span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">polymorphized_arg</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">arg</span><span class=\"p\">.</span><span class=\"n\">fold_with</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">PolymorphizationFolder</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"w\"> </span><span class=\"p\">});</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">debug</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;polymorphize: arg={:?} polymorphized_arg={:?}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">arg</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">polymorphized_arg</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">ty</span>::<span class=\"n\">GenericArg</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"n\">polymorphized_arg</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 206365275,
        "sender_full_name": "lcnr",
        "timestamp": 1596923040
    },
    {
        "content": "<p>also causes ICE</p>",
        "id": 206365320,
        "sender_full_name": "lcnr",
        "timestamp": 1596923062
    },
    {
        "content": "<p>right, so both patches were actually broken</p>",
        "id": 206365324,
        "sender_full_name": "davidtwco",
        "timestamp": 1596923070
    },
    {
        "content": "<p>yay</p>",
        "id": 206365325,
        "sender_full_name": "lcnr",
        "timestamp": 1596923075
    },
    {
        "content": "<p>polymorphised substs PR introduced the stage2 oob substitution failure too</p>",
        "id": 206365467,
        "sender_full_name": "davidtwco",
        "timestamp": 1596923353
    },
    {
        "content": "<p>I'm sufficiently tired this evening that I don't expect I'm going to make much progress on these failures - at least I know what I'm doing tomorrow now though.</p>",
        "id": 206365802,
        "sender_full_name": "davidtwco",
        "timestamp": 1596924044
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/216091-t-compiler.2Fwg-polymorphization/topic/fixing.20the.20test.20suite.20again/near/206361397\">said</a>:</p>\n<blockquote>\n<p>we need the promoted_mir of the <code>ConstKind::Unevaluated(def, ..)</code> instead of <code>self.def_id</code> I think</p>\n</blockquote>\n<p>This is correct. When not doing mir inlining both are identical though.</p>",
        "id": 206366670,
        "sender_full_name": "bjorn3",
        "timestamp": 1596925479
    },
    {
        "content": "<p>I believe I've got fixes for the failures introduced by the promoteds PR, running the full suite locally and then moving on to the other PR.</p>",
        "id": 206388918,
        "sender_full_name": "davidtwco",
        "timestamp": 1596968760
    },
    {
        "content": "<p>Full suite passes on stage two, so that PR's issues are fixed.</p>",
        "id": 206389773,
        "sender_full_name": "davidtwco",
        "timestamp": 1596970165
    },
    {
        "content": "<p>I think we stumbled onto <a href=\"https://github.com/rust-lang/rust/issues/69925\">#69925</a> with the changes in the first PR, so the solution might be to back it out and maybe try a more limited version - e.g. what I had originally w/ just the upvar subst?</p>",
        "id": 206394177,
        "sender_full_name": "davidtwco",
        "timestamp": 1596978081
    },
    {
        "content": "<p>Opened <a href=\"https://github.com/rust-lang/rust/issues/75333\">#75333</a> with the fixes for the changes in <a href=\"https://github.com/rust-lang/rust/issues/75260\">#75260</a>.</p>",
        "id": 206394772,
        "sender_full_name": "davidtwco",
        "timestamp": 1596979156
    },
    {
        "content": "<p>If we can get that landed, at least things will be less broken locally with polymorphization enabled.</p>",
        "id": 206394774,
        "sender_full_name": "davidtwco",
        "timestamp": 1596979176
    },
    {
        "content": "<p>Filed <a href=\"https://github.com/rust-lang/rust/issues/75337\">#75337</a> to restrict <a href=\"https://github.com/rust-lang/rust/issues/75255\">#75255</a>'s changes to only the upvar case that it had originally - that way polymorphization won't be broken on master; and filed <a href=\"https://github.com/rust-lang/rust/issues/75336\">#75336</a> to track making this change again once we can do so without breaking stuff.</p>",
        "id": 206396906,
        "sender_full_name": "davidtwco",
        "timestamp": 1596982697
    },
    {
        "content": "<p>I'm prioritizing keeping polymorphization working on master rather than spending a lot of time digging into this today.</p>",
        "id": 206396921,
        "sender_full_name": "davidtwco",
        "timestamp": 1596982728
    },
    {
        "content": "<p>Submitted <a href=\"https://github.com/rust-lang/rust/issues/75346\">#75346</a> with the help of <span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> that fixes the out-of-bounds substitution in stage2 that <a href=\"https://github.com/rust-lang/rust/issues/75255\">#75255</a> caused - the UI test failures still exist and it still dies with a linker error in compiling <code>rustc_driver</code>; so will continue to land <a href=\"https://github.com/rust-lang/rust/issues/75337\">#75337</a>.</p>",
        "id": 206408420,
        "sender_full_name": "davidtwco",
        "timestamp": 1597001175
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> regarding <a href=\"https://github.com/rust-lang/rust/issues/75333\">#75333</a>, is your recommendation to add a <code>self.def_id == def.did</code> condition or to switch back to using <code>self.def_id</code>?</p>",
        "id": 206452811,
        "sender_full_name": "davidtwco",
        "timestamp": 1597060865
    },
    {
        "content": "<p>I think <code>self.def_id == def.did</code> is the better approach in the long run</p>",
        "id": 206453241,
        "sender_full_name": "lcnr",
        "timestamp": 1597061323
    },
    {
        "content": "<p>using <code>self.def_id</code> would also be broken, wouldn't it?</p>",
        "id": 206453254,
        "sender_full_name": "lcnr",
        "timestamp": 1597061344
    },
    {
        "content": "<p>I'm not sure</p>",
        "id": 206453276,
        "sender_full_name": "davidtwco",
        "timestamp": 1597061373
    },
    {
        "content": "<p>Alright, pushed a change - hopefully the PR is good now.</p>",
        "id": 206453497,
        "sender_full_name": "davidtwco",
        "timestamp": 1597061553
    },
    {
        "content": "<p>With <a href=\"https://github.com/rust-lang/rust/issues/75333\">#75333</a> and <a href=\"https://github.com/rust-lang/rust/issues/75337\">#75337</a> now merged, polymorphization should be passing all the tests again on master.</p>",
        "id": 206583658,
        "sender_full_name": "davidtwco",
        "timestamp": 1597157003
    },
    {
        "content": "<p><span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span> wanna rebase <a href=\"https://github.com/rust-lang/rust/issues/75185\">#75185</a> and try another perf run?</p>",
        "id": 206583851,
        "sender_full_name": "lcnr",
        "timestamp": 1597157083
    },
    {
        "content": "<p>Will do shortly</p>",
        "id": 206583914,
        "sender_full_name": "davidtwco",
        "timestamp": 1597157114
    }
]