[
    {
        "content": "<p>A thought that I don’t want to forget (will write an issue at some point) - polymorphization could be smarter without introducing too much complexity if we treated <code>T</code> as unused if it were behind a reference/pointer that never got dereferenced, right? (and wasn’t used in any other circumstance that would necessitate it marked as used)</p>",
        "id": 206492516,
        "sender_full_name": "davidtwco",
        "timestamp": 1597082600
    },
    {
        "content": "<p>even reborrows would be fine, but <code>T</code> must be marked as used if <code>?Sized</code>, as we don't know the size of the pointer in that case</p>",
        "id": 206492701,
        "sender_full_name": "oli",
        "timestamp": 1597082682
    },
    {
        "content": "<p>If a pointer gets dereferenced, there are several cases: the value gets stored in a local (<code>T</code> used because of the local), the value of a local gets assigned to the pointee (<code>T</code> used because of the local), the value of a computation gets assigned to the pointee (<code>T</code> is either not a param, or one of the parts of the computation mentions <code>T</code> in such a way that it is used), a projection is reborrowed (<code>T</code> is unused if <code>Sized</code>) or the pointee is used by a terminator (<code>T</code> is either not a param, or is mentioned some other way that counts as a use) In any case the dereference itself can safely be marked as not using <code>T</code> I think. At most it would use the alignment of <code>T</code> for optimizations.</p>",
        "id": 206494001,
        "sender_full_name": "bjorn3",
        "timestamp": 1597083469
    }
]