[
    {
        "content": "<p>(this thread continues from some private messages where I was keeping people up-to-date, it might also be useful for <a class=\"stream\" data-stream-id=\"131828\" href=\"/#narrow/stream/131828-t-compiler\">#t-compiler</a> meeting wg check-ins)</p>\n<hr>\n<p><strong>Another update:</strong> continued from where I was before - got the test I added (still behind a flag) passing and showing that less mono-items are being produced.</p>\n<p>I've since been trying to remove the flag and run the analysis for everything and get that working. I've been making progress and I've got everything up to <code>libproc_macro</code> compiling again, it is failing with <a href=\"http://sprunge.us/6VOPjs\" target=\"_blank\" title=\"http://sprunge.us/6VOPjs\">this error</a> that I've hit a bit of a wall fixing.</p>\n<p><a href=\"https://github.com/rust-lang/rust/compare/master...davidtwco:issue-46477-polymorphization\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/compare/master...davidtwco:issue-46477-polymorphization\">This branch</a> still contains everything so if you have any ideas on what might be up, I'd appreciate it. I'm going to shift gears from focusing on the implementation to focusing on the interim report I need to write on this, which is due in a couple weeks (though, if I do unblock myself, I'd like to get a PR up with this working soon).</p>\n<p>(the last commit is the one that enables the analysis w/out the flag - by changing the default value to <code>true</code>, I'll eventually remove it entirely)</p>\n<p>There are also plenty of places where I just made a decision on how to do something so I could proceed, there's no doubt lots of it that needs work.</p>",
        "id": 182470358,
        "sender_full_name": "davidtwco",
        "timestamp": 1575392311
    },
    {
        "content": "<p>Hey, how goes it <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> ? Sorry I've not been following too closely -- curious to hear how it goes!</p>",
        "id": 184547502,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577803816
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I’ve not made a lot of progress since the last update, been working on the patch here and there during the holidays. Before the holidays, I was mostly focused on reports I had to write for the university. </p>\n<p>I’ve made a change that I think fixed the ICE that I was getting, but I’m not completely confident. The fix made sense based on what <span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> had suggested was the issue, but I’ve now got an ICE in an earlier crate (<code>libcore</code> instead of <code>libproc_macro</code>) which I wasn’t expecting. Not made a whole lot of progress solving that. Lost some time last week when backtraces went missing (<a href=\"https://github.com/rust-lang/rust/issues/67615\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/67615\">#67615</a>).</p>",
        "id": 184547714,
        "sender_full_name": "davidtwco",
        "timestamp": 1577804109
    },
    {
        "content": "<p>OK -- I'm wondering how much this can be landed in slices</p>",
        "id": 184547814,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577804226
    },
    {
        "content": "<p>Everything except the last commit I have passes all tests - I’d want to tidy it a little bit, but everything is behind flags and only my tests use it. It isn’t enough to compile the compiler (which is what the last commit tries to enable).</p>",
        "id": 184547876,
        "sender_full_name": "davidtwco",
        "timestamp": 1577804304
    },
    {
        "content": "<p>One place that I’ve struggled is coming up with sufficient test cases such that I’m not debugging huge crates that ICE instead of smaller test cases. I think if I were able to do that better, I’d be able to better understand and fix issues quicker and get something that can bootstrap quicker.</p>",
        "id": 184547994,
        "sender_full_name": "davidtwco",
        "timestamp": 1577804451
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> do you think there would be room for others to get involved and help out here? I'm also wondering if we have any estimates beyond \"intuition\" of the payoff here yet?</p>",
        "id": 187386781,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1580842041
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> and I are trying to think carefully about where to spend our energies</p>",
        "id": 187386797,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1580842050
    },
    {
        "content": "<p>This work still <em>feels</em> very promising to me in terms of making big wins for compilation time, at least some of the time</p>",
        "id": 187386833,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1580842075
    },
    {
        "content": "<p>I’ve not got much of a sense of how impactful it would be. I’m still trying to hammer away at the ICE that I hit a few weeks ago (I rebased at one point which introduced new ICEs from some new code that was added which took a bit to work through to get back to where I was). I’ve just struggled to find the time between work and other university courses. I intend to start sinking more time into it soon.</p>",
        "id": 187398492,
        "sender_full_name": "davidtwco",
        "timestamp": 1580849280
    },
    {
        "content": "<p>Given that it’s just trying to get the core to build with the changes at the moment, I’m not sure there’s much room to parallelise.</p>",
        "id": 187398594,
        "sender_full_name": "davidtwco",
        "timestamp": 1580849359
    },
    {
        "content": "<p>I have a feeling there aren’t many ICEs left to deal with until it’s working, I just need to figure those out.</p>",
        "id": 187398700,
        "sender_full_name": "davidtwco",
        "timestamp": 1580849416
    },
    {
        "content": "<p>To elaborate on what error I’m seeing before, it’s the error where <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> suggested that trait substs for vtable entries were being used where impl substs were expected. I’ve been digging into it for a while now but struggling to make headway. I’ve got notes written down that I can fetch with what my theories and understanding was last I was working on this.</p>",
        "id": 187398927,
        "sender_full_name": "davidtwco",
        "timestamp": 1580849566
    },
    {
        "content": "<p>Though, I don’t know how much rework there will need to be if the compiler team don’t like some of the decisions I’ve made in integrating the unused type parameter analysis</p>",
        "id": 187399002,
        "sender_full_name": "davidtwco",
        "timestamp": 1580849633
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ^</p>",
        "id": 187399047,
        "sender_full_name": "davidtwco",
        "timestamp": 1580849643
    },
    {
        "content": "<blockquote>\n<p>Though, I don’t know how much rework there will need to be if the compiler team don’t like some of the decisions I’ve made in integrating the unused type parameter analysis</p>\n</blockquote>\n<p>Maybe we could schedule a design meeting to discuss this?</p>",
        "id": 187460425,
        "sender_full_name": "pnkfelix",
        "timestamp": 1580914778
    },
    {
        "content": "<p>Potentially, I don't think it's large enough to warrant that, discussion on the eventual PR would probably be sufficient.</p>",
        "id": 187460988,
        "sender_full_name": "davidtwco",
        "timestamp": 1580915114
    },
    {
        "content": "<p>Well if you're worried about the design decisions, I figure it makes some amount of sense to advertise them ahead of time. Do the commit messages point out the cases you think might be contentious, or is there some other way that they are flagged up front?</p>",
        "id": 187461367,
        "sender_full_name": "pnkfelix",
        "timestamp": 1580915354
    },
    {
        "content": "<p>even if all we do is point it out during the triage meeting, that might be enough to at least give the people with an opinion a chance to voice that opinion.</p>",
        "id": 187461427,
        "sender_full_name": "pnkfelix",
        "timestamp": 1580915398
    },
    {
        "content": "<p>That's a good point. People could definitely look at the branch and leave some comments here or on GitHub if we highlighted it at a triage meeting.</p>",
        "id": 187461928,
        "sender_full_name": "davidtwco",
        "timestamp": 1580915697
    },
    {
        "content": "<p>Primarily it is the way that I've chosen to integrate the analysis into <code>Instance::resolve</code> (and then that trickles down into fewer <code>MonoItem</code>s and less codegen) rather than modify the <code>Instance</code> in <code>MonoItem::Fn</code> during monomorphisation with the analysis results and then update where we generate call instructions to match.</p>",
        "id": 187462113,
        "sender_full_name": "davidtwco",
        "timestamp": 1580915799
    },
    {
        "content": "<p>Modifying all <code>Instance</code>s has more side-effects, as that type is used in more places (which has almost certainly resulted in some of the ICEs I've been dealing with),  but results in a much less invasive change.</p>",
        "id": 187462401,
        "sender_full_name": "davidtwco",
        "timestamp": 1580915976
    },
    {
        "content": "<p>One of the descriptions of the <code>Instance</code> type that I read somewhere in the compiler made me think it was a good fit conceptually too.</p>",
        "id": 187462598,
        "sender_full_name": "davidtwco",
        "timestamp": 1580916092
    },
    {
        "content": "<p>Actually, another thought: Even if this doesn't need a design meeting, per se, I think it <em>does</em> qualify as a major change</p>",
        "id": 187467274,
        "sender_full_name": "pnkfelix",
        "timestamp": 1580918969
    },
    {
        "content": "<p>which means you could/should write this up following the major change protocol</p>",
        "id": 187467301,
        "sender_full_name": "pnkfelix",
        "timestamp": 1580918987
    },
    {
        "content": "<p>in the same way that mw did on <a href=\"https://github.com/rust-lang/compiler-team/issues/245\" target=\"_blank\" title=\"https://github.com/rust-lang/compiler-team/issues/245\">compiler-team#245</a></p>",
        "id": 187467372,
        "sender_full_name": "pnkfelix",
        "timestamp": 1580919006
    },
    {
        "content": "<p>and then any debate could be captured on the issue thread there</p>",
        "id": 187467396,
        "sender_full_name": "pnkfelix",
        "timestamp": 1580919027
    },
    {
        "content": "<p>I mainly want to ensure we have a good place to capture your exploration of the design space, and the justifications you used to guide your decisions</p>",
        "id": 187467462,
        "sender_full_name": "pnkfelix",
        "timestamp": 1580919069
    },
    {
        "content": "<p>I wasn't actually aware of this WG and it's not on the compiler-team website. Could someone give a brief summary of what <code>polymorphization</code> is and what the WG aims to solve?</p>",
        "id": 187845424,
        "sender_full_name": "mark-i-m",
        "timestamp": 1581360476
    },
    {
        "content": "<p><a href=\"https://rust-lang.github.io/compiler-team/working-groups/polymorphization/\" target=\"_blank\" title=\"https://rust-lang.github.io/compiler-team/working-groups/polymorphization/\">https://rust-lang.github.io/compiler-team/working-groups/polymorphization/</a></p>",
        "id": 187854526,
        "sender_full_name": "lqd",
        "timestamp": 1581366356
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> I assume the details of the crate names in the test output is a wart that we should get rid of somehow, right?</p>",
        "id": 187932452,
        "sender_full_name": "pnkfelix",
        "timestamp": 1581441599
    },
    {
        "content": "<p>I'm speaking of differences in test output like this: <a href=\"https://gist.github.com/pnkfelix/8dc3cf3da80f57842f6ce7762a23ade3\" target=\"_blank\" title=\"https://gist.github.com/pnkfelix/8dc3cf3da80f57842f6ce7762a23ade3\">diff gist</a></p>",
        "id": 187932589,
        "sender_full_name": "pnkfelix",
        "timestamp": 1581441664
    },
    {
        "content": "<p>where the only difference is the <code>...</code> stuff in <code>core[...]::foo[0]::bar[0]</code> or <code>alloc[...]::foo[0]::bar[0]</code></p>",
        "id": 187932715,
        "sender_full_name": "pnkfelix",
        "timestamp": 1581441725
    },
    {
        "content": "<p>(Probably easiest/best to just normalize the test.stderr to get rid of it via a regexp substitution)</p>",
        "id": 187932777,
        "sender_full_name": "pnkfelix",
        "timestamp": 1581441772
    },
    {
        "content": "<p>Are you looking at this branch - <a href=\"https://github.com/davidtwco/rust/tree/issue-46477-polymorphization\" target=\"_blank\" title=\"https://github.com/davidtwco/rust/tree/issue-46477-polymorphization\">https://github.com/davidtwco/rust/tree/issue-46477-polymorphization</a> ?</p>",
        "id": 187932782,
        "sender_full_name": "davidtwco",
        "timestamp": 1581441778
    },
    {
        "content": "<p>or this one - <a href=\"https://github.com/davidtwco/rust/tree/polymorphize-analysis\" target=\"_blank\" title=\"https://github.com/davidtwco/rust/tree/polymorphize-analysis\">https://github.com/davidtwco/rust/tree/polymorphize-analysis</a> ?</p>",
        "id": 187932794,
        "sender_full_name": "davidtwco",
        "timestamp": 1581441788
    },
    {
        "content": "<p>the latter</p>",
        "id": 187932799,
        "sender_full_name": "pnkfelix",
        "timestamp": 1581441792
    },
    {
        "content": "<p>though mine might be out of date</p>",
        "id": 187932812,
        "sender_full_name": "pnkfelix",
        "timestamp": 1581441803
    },
    {
        "content": "<p>Should be the former, I think.</p>",
        "id": 187932830,
        "sender_full_name": "davidtwco",
        "timestamp": 1581441813
    },
    {
        "content": "<p>The latter branch is when Niko and I first worked on this, not my most recent work.</p>",
        "id": 187932852,
        "sender_full_name": "davidtwco",
        "timestamp": 1581441830
    },
    {
        "content": "<p>These changes are the primary work - <a href=\"https://github.com/rust-lang/rust/compare/master...davidtwco:issue-46477-polymorphization\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/compare/master...davidtwco:issue-46477-polymorphization\">https://github.com/rust-lang/rust/compare/master...davidtwco:issue-46477-polymorphization</a></p>",
        "id": 187932860,
        "sender_full_name": "davidtwco",
        "timestamp": 1581441835
    },
    {
        "content": "<p>oh oh you're right, I missed the <em>year</em> when I looked at the date of the last commit on polymorphize-analysis</p>",
        "id": 187932924,
        "sender_full_name": "pnkfelix",
        "timestamp": 1581441857
    },
    {
        "content": "<p>and I said \"ah, January is more recent that December; done!\"</p>",
        "id": 187932941,
        "sender_full_name": "pnkfelix",
        "timestamp": 1581441870
    },
    {
        "content": "<p>This one only considers unused type parameters.</p>",
        "id": 187932973,
        "sender_full_name": "davidtwco",
        "timestamp": 1581441895
    },
    {
        "content": "<p>The testing is a little bit cleaner, I think.</p>",
        "id": 187933002,
        "sender_full_name": "davidtwco",
        "timestamp": 1581441910
    },
    {
        "content": "<p>The primary issue with it is that it cannot bootstrap (which the last commit enables by swapping a feature flag).</p>",
        "id": 187933028,
        "sender_full_name": "davidtwco",
        "timestamp": 1581441932
    },
    {
        "content": "<p>AFAIK (a rebase might have changed this), it passed all tests, including my own tests of the polymorphization's integration, without the last commit.</p>",
        "id": 187933059,
        "sender_full_name": "davidtwco",
        "timestamp": 1581441955
    },
    {
        "content": "<p>(seems like the most recent commit does quite a bit more, at least superficially, than just swapping a feature flag...)</p>",
        "id": 187933183,
        "sender_full_name": "pnkfelix",
        "timestamp": 1581442034
    },
    {
        "content": "<p>but its WIP (and explicitly marked as such) so I'm not complaining</p>",
        "id": 187933233,
        "sender_full_name": "pnkfelix",
        "timestamp": 1581442063
    },
    {
        "content": "<p>It does, I've been putting any WIP changes that I've been experimenting with (to fix the ICEs) in that commit so it's pushed somewhere when I'm between machines.</p>",
        "id": 187933355,
        "sender_full_name": "davidtwco",
        "timestamp": 1581442116
    },
    {
        "content": "<p>and then breaking bunches of those out into separate commits at later stages</p>",
        "id": 187933376,
        "sender_full_name": "davidtwco",
        "timestamp": 1581442135
    },
    {
        "content": "<p>I've not rebased since the start of the year so I don't know what impact that will have, I lost a week or so debugging a new ICE that was introduced at that rebase.</p>",
        "id": 187933441,
        "sender_full_name": "davidtwco",
        "timestamp": 1581442186
    },
    {
        "content": "<p>How is it going? Is there something a Rubber duck can do to help?</p>",
        "id": 188058603,
        "sender_full_name": "Eh2406",
        "timestamp": 1581545695
    },
    {
        "content": "<p>I think maybe pulling down the branch and trying to build it, <span class=\"user-mention\" data-user-id=\"120179\">@Eh2406</span>, and just see if you can figure out whatever is stopping it, would be the best thing</p>",
        "id": 188222964,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581698447
    },
    {
        "content": "<p>I have the feeling <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> is pretty busy just now but if, when he comes back to it, there were a few fewer bugs to fix, I'm sure he wouldn't complain :)</p>",
        "id": 188222989,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581698464
    },
    {
        "content": "<p>actually maybe just rebasing the branch would be helpful?</p>",
        "id": 188222996,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581698473
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120179\">@Eh2406</span> and I spoke briefly on Discord in #wg-compiler-performance there about it. It's blocked on me clearing some coursework off my plate before I can get back to it. I'm not sure how it works with this being part of my master's thesis if anyone else works on it, but if anyone wants to pull it and see if they can't work out what's going on, I'd be fine with that - it's still work that the project wants done, irrespective of it being part of my thesis.</p>",
        "id": 188223193,
        "sender_full_name": "davidtwco",
        "timestamp": 1581698607
    },
    {
        "content": "<p>I've always wondered a bit about that when it comes to theses; but I suspect it's not a problem if other people are helping out a little. Though you may want to talk to your advisor about it, yeah.</p>",
        "id": 188223321,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581698664
    },
    {
        "content": "<p>Normally it's probably not as required, but because of my degree program having an industrial placement last year, I need to take eight courses alongside the master's project (and I work three days a week) so my time is quite stretched.</p>",
        "id": 188223507,
        "sender_full_name": "davidtwco",
        "timestamp": 1581698815
    },
    {
        "content": "<p>I did some work today, I got rust repo set up and building and tests passing. So I am set up to start trying to understand, next time I have time.</p>",
        "id": 188302454,
        "sender_full_name": "Eh2406",
        "timestamp": 1581807855
    },
    {
        "content": "<p>An automatic understanding free rebase got hung up on the interactions with <a href=\"https://github.com/rust-lang/rust/pull/69100\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/69100\">https://github.com/rust-lang/rust/pull/69100</a><br>\nThe PR rebased pretty cleanly on to the conflicts parent. <a href=\"https://github.com/Eh2406/rust/tree/issue-46477-polymorphization\" target=\"_blank\" title=\"https://github.com/Eh2406/rust/tree/issue-46477-polymorphization\">https://github.com/Eh2406/rust/tree/issue-46477-polymorphization</a></p>",
        "id": 188339000,
        "sender_full_name": "Eh2406",
        "timestamp": 1581886484
    },
    {
        "content": "<p>I think the next step is a slower, one commit at a time cherry pick rebase. (Unless you have a alternative suggestion.)<br>\n<span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span>  does each commit <code>check</code> on its own?</p>",
        "id": 188339097,
        "sender_full_name": "Eh2406",
        "timestamp": 1581886663
    },
    {
        "content": "<p>It should do, I think I tried to ensure that was the case.</p>",
        "id": 188339386,
        "sender_full_name": "davidtwco",
        "timestamp": 1581887153
    },
    {
        "content": "<p>I've managed to get some time together today and I've rebased the PR.</p>",
        "id": 188499704,
        "sender_full_name": "davidtwco",
        "timestamp": 1582066365
    },
    {
        "content": "<p>Everything I have locally has been pushed.</p>",
        "id": 188499716,
        "sender_full_name": "davidtwco",
        "timestamp": 1582066374
    },
    {
        "content": "<p>It fails earlier than it did before, but after speaking to <span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span>, I've got some ideas for a path forward, which I'll hopefully have time for during the remainder of the week.</p>",
        "id": 188499737,
        "sender_full_name": "davidtwco",
        "timestamp": 1582066405
    },
    {
        "content": "<p>I was just going to ask for help getting my version of the reabase to work... glad to here I dont need to!</p>",
        "id": 188832153,
        "sender_full_name": "Eh2406",
        "timestamp": 1582403534
    },
    {
        "content": "<p>Let me know how I (or my cpu) can (try) to help!</p>",
        "id": 188838450,
        "sender_full_name": "Eh2406",
        "timestamp": 1582415523
    },
    {
        "content": "<p><strong>An update:</strong> thanks to help from <span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span>, I've gotten <a href=\"https://github.com/rust-lang/rust/compare/master...davidtwco:issue-46477-polymorphization\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/compare/master...davidtwco:issue-46477-polymorphization\">the branch</a> to the point where it can now bootstrap itself and is failing one UI test (not checked the other suites yet). There's still some tidying up to do and making sure it's working so I'll do that over the next few days and get a PR up.</p>",
        "id": 189549311,
        "sender_full_name": "davidtwco",
        "timestamp": 1583192290
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> that's awesome &lt;3</p>",
        "id": 189629556,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583266285
    },
    {
        "content": "<p>So is it working well enough to get some sense of perf?</p>",
        "id": 189802933,
        "sender_full_name": "Eh2406",
        "timestamp": 1583422317
    },
    {
        "content": "<p>Looked into the test failure a bunch, no luck on fixing. Opened a PR here: <a href=\"https://github.com/rust-lang/rust/pull/69749\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/69749\">https://github.com/rust-lang/rust/pull/69749</a> - please leave all the comments!</p>",
        "id": 189844639,
        "sender_full_name": "davidtwco",
        "timestamp": 1583447634
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120179\">@Eh2406</span> probably, I've not checked though</p>",
        "id": 189844692,
        "sender_full_name": "davidtwco",
        "timestamp": 1583447644
    },
    {
        "content": "<p>Tried to build locally (so I can do a perf run) but I am getting an ICE. I think it looks like the ICE that CI hit.</p>",
        "id": 189986132,
        "sender_full_name": "Eh2406",
        "timestamp": 1583615037
    },
    {
        "content": "<p>Missed that ICE locally because I only did a stage one build, looking into it (and review comments) now.</p>",
        "id": 189986819,
        "sender_full_name": "davidtwco",
        "timestamp": 1583616277
    },
    {
        "content": "<p>Made progress on review comments, not so much on ICEs, will continue tomorrow.</p>",
        "id": 189994009,
        "sender_full_name": "davidtwco",
        "timestamp": 1583630558
    },
    {
        "content": "<p>(...or today, but later, I suppose)</p>",
        "id": 189994011,
        "sender_full_name": "davidtwco",
        "timestamp": 1583630571
    },
    {
        "content": "<p><strong>Another update:</strong> I've pushed to the PR, hopefully resolving all compilation and test failures, see <a href=\"https://github.com/rust-lang/rust/issues/69749\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/69749\">#69749</a>.</p>",
        "id": 190605413,
        "sender_full_name": "davidtwco",
        "timestamp": 1584206314
    },
    {
        "content": "<p>I tried to do a perf run. It did build successfully! I still haven't managed to set up perf correctly yet. but I did see some ICEs in the logs. I think syn is not working yet, but did not have time to investigate.</p>",
        "id": 190628274,
        "sender_full_name": "Eh2406",
        "timestamp": 1584244619
    },
    {
        "content": "<p>Turns out there were test failures in one of the smaller suites, will look into that during the week. Hopefully it’s not too buggy and we’ll be able to get a sense of whether there’s a perf difference.</p>",
        "id": 190642155,
        "sender_full_name": "davidtwco",
        "timestamp": 1584270518
    },
    {
        "content": "<p>I’m not going to rebase yet either, the PR that this depends on, <a href=\"https://github.com/rust-lang/rust/issues/69935\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/69935\">#69935</a>, is still in the queue and without conflicts so I’ll wait till that lands.</p>",
        "id": 190642268,
        "sender_full_name": "davidtwco",
        "timestamp": 1584270763
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <strong>Small update:</strong> I'm going to switch gears for a few days and work on my report for this - I'll be able to get most of it done, just leaving out the evaluation - I'll feel much more comfortable sinking time into the implementation afterwards when I know that work is out of the way. </p>\n<p>My main concerns at the moment is that the implementation might not be at a place where I can compile some popular crates and get a idea of the perf difference, there are two reasons:</p>\n<ul>\n<li>Bugs that we've not seen/solved (e.g. ICEs referenced by <span class=\"user-mention silent\" data-user-id=\"120179\">Eh2406</span>, the failing <code>run-make-fulldeps</code> test).</li>\n<li>Workaround for the \"still further specializable\" issue (see <a href=\"https://github.com/rust-lang/rust/pull/69749/commits/01f58673a680abfcb0d5a8ad28ca870433a86ff5\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/69749/commits/01f58673a680abfcb0d5a8ad28ca870433a86ff5\">01f5867</a>) might have a perf impact that cancels out any positive impact.<br>\n    - There's <span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span>'s patch that could allow for a faster fix here, <a href=\"https://github.com/rust-lang/rust/issues/69968\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/69968\">#69968</a>, but we'll need to make a decision on whether the perf impact of that PR is acceptable.</li>\n</ul>",
        "id": 190645014,
        "sender_full_name": "davidtwco",
        "timestamp": 1584275290
    },
    {
        "content": "<p>(if anyone's willing to help fix/investigate the test failure that's there, or look into the perf then I'm totally open to that - I've done enough of the changes that I'm sure someone else fixing a bug or two won't be a problem for the purposes of this being my master's project)</p>",
        "id": 190645108,
        "sender_full_name": "davidtwco",
        "timestamp": 1584275460
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120179\">Eh2406</span> <a href=\"#narrow/stream/216091-t-compiler.2Fwg-polymorphization/topic/progress.20updates/near/190628274\" title=\"#narrow/stream/216091-t-compiler.2Fwg-polymorphization/topic/progress.20updates/near/190628274\">said</a>:</p>\n<blockquote>\n<p>I tried to do a perf run. It did build successfully! I still haven't managed to set up perf correctly yet. but I did see some ICEs in the logs. I think syn is not working yet, but did not have time to investigate.</p>\n</blockquote>\n<p>shouldn't we just be able to use @bors try and @rust-timer? or do you mean that?</p>",
        "id": 190647956,
        "sender_full_name": "eddyb",
        "timestamp": 1584280333
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116107\">davidtwco</span> <a href=\"#narrow/stream/216091-t-compiler.2Fwg-polymorphization/topic/progress.20updates/near/190645014\" title=\"#narrow/stream/216091-t-compiler.2Fwg-polymorphization/topic/progress.20updates/near/190645014\">said</a>:</p>\n<blockquote>\n<p>- There's <span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span>'s patch that could allow for a faster fix here, <a href=\"https://github.com/rust-lang/rust/issues/69968\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/69968\">#69968</a>, but we'll need to make a decision on whether the perf impact of that PR is acceptable.</p>\n</blockquote>\n<p>that's not exactly the decision to make :P</p>\n<p>I have guessed that the problem is adding a generic when there weren't any (i.e. there are enough captureless closures that now have an argument that's always <code>()</code>)</p>\n<p>and my proposed potential solution is to tuple all of the synthetics together instead of just the upvars, but I haven't tried it yet</p>",
        "id": 190648101,
        "sender_full_name": "eddyb",
        "timestamp": 1584280666
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/216091-t-compiler.2Fwg-polymorphization/topic/progress.20updates/near/190648101\" title=\"#narrow/stream/216091-t-compiler.2Fwg-polymorphization/topic/progress.20updates/near/190648101\">said</a>:</p>\n<blockquote>\n<p>and my proposed potential solution is to tuple all of the synthetics together instead of just the upvars, but I haven't tried it yet</p>\n</blockquote>\n<p>started working on that, just adjusted the existing commit to make it easier to tuple more things without breaking <code>rustc::ty::print::pretty</code> and <code>rustc_typeck::check::closure</code></p>",
        "id": 190650264,
        "sender_full_name": "eddyb",
        "timestamp": 1584283812
    },
    {
        "content": "<blockquote>\n<p>shouldn't we just be able to use @bors try and @rust-timer? or do you mean that?</p>\n</blockquote>\n<p>I was trying to be helpful by running locally. rust-timer will work when we have time for it.</p>",
        "id": 190650873,
        "sender_full_name": "Eh2406",
        "timestamp": 1584284536
    },
    {
        "content": "<blockquote>\n<p>that's not exactly the decision to make :P</p>\n</blockquote>\n<p>Ah, I misunderstood.</p>",
        "id": 190652835,
        "sender_full_name": "davidtwco",
        "timestamp": 1584287284
    },
    {
        "content": "<blockquote>\n<p>rust-timer will work when we have time for it.<br>\nare we running out of slots for that? I was about to start another run for my PR that tuples up upvars</p>\n</blockquote>",
        "id": 190655630,
        "sender_full_name": "eddyb",
        "timestamp": 1584291176
    },
    {
        "content": "<p>no queue is empty</p>",
        "id": 190656127,
        "sender_full_name": "simulacrum",
        "timestamp": 1584291755
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> <a href=\"https://github.com/rust-lang/rust/pull/69968#issuecomment-599237539\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/69968#issuecomment-599237539\">https://github.com/rust-lang/rust/pull/69968#issuecomment-599237539</a></p>",
        "id": 190656390,
        "sender_full_name": "eddyb",
        "timestamp": 1584292073
    },
    {
        "content": "<p>see the HACK commit</p>",
        "id": 190656397,
        "sender_full_name": "eddyb",
        "timestamp": 1584292079
    },
    {
        "content": "<p>Awesome</p>",
        "id": 190656450,
        "sender_full_name": "davidtwco",
        "timestamp": 1584292116
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> screwed up whoops</p>",
        "id": 190672968,
        "sender_full_name": "eddyb",
        "timestamp": 1584315304
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/69968#issuecomment-599281756\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/69968#issuecomment-599281756\">https://github.com/rust-lang/rust/pull/69968#issuecomment-599281756</a></p>",
        "id": 190673172,
        "sender_full_name": "eddyb",
        "timestamp": 1584315646
    },
    {
        "content": "<p>I'll look into the actual speedups tomorrow</p>",
        "id": 190673308,
        "sender_full_name": "eddyb",
        "timestamp": 1584315925
    },
    {
        "content": "<p>they basically involve deferring calling <code>.expect_ty()</code> or w/e until the very last moment :P</p>",
        "id": 190673344,
        "sender_full_name": "eddyb",
        "timestamp": 1584315947
    },
    {
        "content": "<p>since that's the only thing that looks significantly different to me (if it's actually the tuple itself that'd be annoying)</p>",
        "id": 190673406,
        "sender_full_name": "eddyb",
        "timestamp": 1584315977
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> decided to do this as a side thing but I don't think it will impact anything <a href=\"https://github.com/rust-lang/rust/pull/70089\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/70089\">https://github.com/rust-lang/rust/pull/70089</a></p>",
        "id": 190927889,
        "sender_full_name": "eddyb",
        "timestamp": 1584491108
    },
    {
        "content": "<p>now to get back to the original PR and try to uhh make it fast</p>",
        "id": 190927895,
        "sender_full_name": "eddyb",
        "timestamp": 1584491123
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> <a href=\"https://github.com/rust-lang/rust/pull/69968#issuecomment-600370100\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/69968#issuecomment-600370100\">https://github.com/rust-lang/rust/pull/69968#issuecomment-600370100</a></p>",
        "id": 190929836,
        "sender_full_name": "eddyb",
        "timestamp": 1584493504
    },
    {
        "content": "<p>phew those are better</p>",
        "id": 190962133,
        "sender_full_name": "eddyb",
        "timestamp": 1584527600
    },
    {
        "content": "<p>there's 18 less <code>generic_of</code> calls for the biggest win (<code>-2.2%</code>)</p>",
        "id": 190962291,
        "sender_full_name": "eddyb",
        "timestamp": 1584527663
    },
    {
        "content": "<p>so it might be related</p>",
        "id": 190962309,
        "sender_full_name": "eddyb",
        "timestamp": 1584527669
    },
    {
        "content": "<p>That's awesome.</p>",
        "id": 190972730,
        "sender_full_name": "davidtwco",
        "timestamp": 1584534639
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> <a href=\"https://github.com/rust-lang/rust/pull/69968#issuecomment-601230356\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/69968#issuecomment-601230356\">https://github.com/rust-lang/rust/pull/69968#issuecomment-601230356</a></p>",
        "id": 191148256,
        "sender_full_name": "eddyb",
        "timestamp": 1584639184
    },
    {
        "content": "<p>I saw, I'll need to wait for <a href=\"https://github.com/rust-lang/rust/issues/69935\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/69935\">#69935</a> too before rebasing though.</p>",
        "id": 191150003,
        "sender_full_name": "davidtwco",
        "timestamp": 1584639931
    },
    {
        "content": "<p>I don't need to, but to save effort will.</p>",
        "id": 191150023,
        "sender_full_name": "davidtwco",
        "timestamp": 1584639948
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> what is the status here btw?</p>",
        "id": 191662670,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585079106
    },
    {
        "content": "<p>I just pushed earlier today, resolves any comments that were left and should have passing tests (CI still running).</p>",
        "id": 191662741,
        "sender_full_name": "davidtwco",
        "timestamp": 1585079156
    },
    {
        "content": "<p>I've said that before though, but <span aria-label=\"fingers crossed\" class=\"emoji emoji-1f91e\" role=\"img\" title=\"fingers crossed\">:fingers_crossed:</span></p>",
        "id": 191662790,
        "sender_full_name": "davidtwco",
        "timestamp": 1585079166
    },
    {
        "content": "<p>I've written like 65% of my paper. I'll shift back to that tomorrow with the aim of only having the evaluation left - where I'll try collect some numbers on the perf of this.</p>",
        "id": 191663025,
        "sender_full_name": "davidtwco",
        "timestamp": 1585079304
    },
    {
        "content": "<p>(the only sections I've got left to write are an abstract, introduction (what is rust, what is llvm, why do we want this, etc), talking about how it works, challenges faced, the evaluation, and a conclusion - easy parts hopefully)</p>",
        "id": 191663100,
        "sender_full_name": "davidtwco",
        "timestamp": 1585079358
    },
    {
        "content": "<p>CI is passing!</p>",
        "id": 191671858,
        "sender_full_name": "davidtwco",
        "timestamp": 1585083720
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116107\">davidtwco</span> <a href=\"#narrow/stream/216091-t-compiler.2Fwg-polymorphization/topic/progress.20updates/near/191663100\" title=\"#narrow/stream/216091-t-compiler.2Fwg-polymorphization/topic/progress.20updates/near/191663100\">said</a>:</p>\n<blockquote>\n<p>(the only sections I've got left to write are an abstract, introduction (what is rust, what is llvm, why do we want this, etc), talking about how it works, challenges faced, the evaluation, and a conclusion - easy parts hopefully)</p>\n</blockquote>\n<p>I am trying to do a local perf run.</p>",
        "id": 191674749,
        "sender_full_name": "Eh2406",
        "timestamp": 1585085178
    },
    {
        "content": "<p>I did it a number of times, to check in case I set it up wrong. But I am seeing large regressions across the board. Even the helloworld benchmark is dramatically slower. I don't know the best way to share the results.</p>",
        "id": 191692845,
        "sender_full_name": "Eh2406",
        "timestamp": 1585099269
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/uDqcJcsL8QttKp5jB82qtSiR/commit-m-PR-x86_64-unknown-linux-gnu.json.sz\" target=\"_blank\" title=\"commit-m-PR-x86_64-unknown-linux-gnu.json.sz\">commit-m-PR-x86_64-unknown-linux-gnu.json.sz</a> <a href=\"/user_uploads/4715/t1LGjc046z3e7nKDg34brrx5/commit-PR-x86_64-unknown-linux-gnu.json.sz\" target=\"_blank\" title=\"commit-PR-x86_64-unknown-linux-gnu.json.sz\">commit-PR-x86_64-unknown-linux-gnu.json.sz</a></p>",
        "id": 191693152,
        "sender_full_name": "Eh2406",
        "timestamp": 1585099643
    },
    {
        "content": "<p>m-PR is the master you rebased onto. PR is the PR.</p>",
        "id": 191693170,
        "sender_full_name": "Eh2406",
        "timestamp": 1585099679
    },
    {
        "content": "<p>It’s possible that this is just really bad, but there’s also a chance that one we look into why it’s bad, that I’ve just made a mistake somewhere.</p>",
        "id": 191727561,
        "sender_full_name": "davidtwco",
        "timestamp": 1585133423
    },
    {
        "content": "<p>I've <a href=\"https://github.com/rust-lang/rust/pull/69749#issuecomment-603775712\" title=\"https://github.com/rust-lang/rust/pull/69749#issuecomment-603775712\">queued a timer run</a> so we'll see if that shows the same regression - I can think of one or two places where things could probably be made a little faster, but not many.</p>",
        "id": 191732676,
        "sender_full_name": "davidtwco",
        "timestamp": 1585136557
    },
    {
        "content": "<p>Looks like that try build is failing though <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 191733045,
        "sender_full_name": "davidtwco",
        "timestamp": 1585136820
    },
    {
        "content": "<p>I mean certainly the analysis could be costing compilation time, and we might not be recouping it with reduced LLVM</p>",
        "id": 191806425,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585167947
    },
    {
        "content": "<p>It definitely bears investigation</p>",
        "id": 191806430,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585167953
    },
    {
        "content": "<p>It's certainly possible, I intend to look into it tomorrow (since the try build changed, there's more bugs to fix) - finishing as much of the report as I can today.</p>",
        "id": 191806532,
        "sender_full_name": "davidtwco",
        "timestamp": 1585167996
    },
    {
        "content": "<p><strong>Another update</strong>: perf results are on the PR, they’re a mixed bag. I’ve finished writing my paper (only got a video presentation to do now, but that won’t take long) so I’m mostly done with the university requirements part of this work (I’ll have exams in a month but after that I can sink more time into this and other work). </p>\n<p>cc <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span></p>",
        "id": 192193797,
        "sender_full_name": "davidtwco",
        "timestamp": 1585515363
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> so I was looking at <a href=\"https://perf.rust-lang.org/detailed-query.html?commit=2f2ccd26f9e4af93df8495c3d7a2fec418590f97&amp;base_commit=150322f86d441752874a8bed603d71119f190b8b&amp;benchmark=regex-opt&amp;run_name=clean%20incremental\" title=\"https://perf.rust-lang.org/detailed-query.html?commit=2f2ccd26f9e4af93df8495c3d7a2fec418590f97&amp;base_commit=150322f86d441752874a8bed603d71119f190b8b&amp;benchmark=regex-opt&amp;run_name=clean%20incremental\">the self-profile results</a> from your PR for the 11% loss</p>",
        "id": 192435445,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585681731
    },
    {
        "content": "<p>it looks like it's in <code>metadata_decode_entry</code> and <code>encode_query_results_for</code></p>",
        "id": 192435478,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585681747
    },
    {
        "content": "<p>any idea why that should be? that surprised me somewhat..?</p>",
        "id": 192435496,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585681753
    },
    {
        "content": "<p>er, wait</p>",
        "id": 192435531,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585681778
    },
    {
        "content": "<p>The 11% loss was due to LTO taking longer, other benchmarks didn’t have that big a loss, and those were typically due to metadata decode or something like that.</p>",
        "id": 192435578,
        "sender_full_name": "davidtwco",
        "timestamp": 1585681802
    },
    {
        "content": "<p>ok, so, <a href=\"https://perf.rust-lang.org/detailed-query.html?commit=2f2ccd26f9e4af93df8495c3d7a2fec418590f97&amp;base_commit=150322f86d441752874a8bed603d71119f190b8b&amp;benchmark=script-servo-opt&amp;run_name=patched%20incremental:%20println\" title=\"https://perf.rust-lang.org/detailed-query.html?commit=2f2ccd26f9e4af93df8495c3d7a2fec418590f97&amp;base_commit=150322f86d441752874a8bed603d71119f190b8b&amp;benchmark=script-servo-opt&amp;run_name=patched%20incremental:%20println\">these are the results</a> that compare the \"script-servo-opt\" with \"patched incremental: println\" (11% perf regression)</p>",
        "id": 192435612,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585681803
    },
    {
        "content": "<p>that fits with what I've seeing</p>",
        "id": 192435649,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585681817
    },
    {
        "content": "<p>It only happened on one benchmark and I have no idea why.</p>",
        "id": 192435659,
        "sender_full_name": "davidtwco",
        "timestamp": 1585681822
    },
    {
        "content": "<p>Neither did eddy</p>",
        "id": 192435669,
        "sender_full_name": "davidtwco",
        "timestamp": 1585681830
    },
    {
        "content": "<p>IIRC</p>",
        "id": 192435679,
        "sender_full_name": "davidtwco",
        "timestamp": 1585681834
    },
    {
        "content": "<p>I was wondering about something else</p>",
        "id": 192435680,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585681834
    },
    {
        "content": "<p>we landed various PRs to libstd that did this optimization \"by hand\" for iterators</p>",
        "id": 192435701,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585681845
    },
    {
        "content": "<p>in principle, we ought to be able to revert those PRs now, right?</p>",
        "id": 192435716,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585681853
    },
    {
        "content": "<p>If this were to land; yeah.</p>",
        "id": 192435736,
        "sender_full_name": "davidtwco",
        "timestamp": 1585681868
    },
    {
        "content": "<p>I'm not sure we should roll that into this PR but it'd be interesting to see if doing so was \"perf-neutral\"</p>",
        "id": 192435748,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585681877
    },
    {
        "content": "<p>I’m not convinced that the perf gain from this is necessarily worth it landing, unless I’ve made a mistake somewhere and we’re losing out on what it could be, the gain is relatively small and it doesn’t play with incremental well as it’s currently written. Memory usage was also all over the place.</p>",
        "id": 192435947,
        "sender_full_name": "davidtwco",
        "timestamp": 1585681977
    },
    {
        "content": "<p>(basing the above just on the perf results)</p>",
        "id": 192435986,
        "sender_full_name": "davidtwco",
        "timestamp": 1585681997
    },
    {
        "content": "<p>Hmm. So, my hope was that this would be the first step towards more extensive work on polymorphization</p>",
        "id": 192436602,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585682282
    },
    {
        "content": "<p>But I admit I was hoing for better initial perf results</p>",
        "id": 192436655,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585682288
    },
    {
        "content": "<p>I think this might make a really nice topic for a design meeting</p>",
        "id": 192436694,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585682302
    },
    {
        "content": "<p>( I was also thinking that this ought to be a \"major change proposal\" probably, though that's not really in use .. )</p>",
        "id": 192436761,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585682331
    },
    {
        "content": "<p>but I guess I shoudlf just read your thesis? :)</p>",
        "id": 192436841,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585682361
    },
    {
        "content": "<p>I'm curious as to why it's not incremental friendly, though I guess I can imagine some of the reasons</p>",
        "id": 192436858,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585682370
    },
    {
        "content": "<p>Yeah, I’m slightly disappointed by how little perf impact there’s been, it’s very mixed.</p>",
        "id": 192436915,
        "sender_full_name": "davidtwco",
        "timestamp": 1585682394
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/216091-t-compiler.2Fwg-polymorphization/topic/progress.20updates/near/192436602\" title=\"#narrow/stream/216091-t-compiler.2Fwg-polymorphization/topic/progress.20updates/near/192436602\">said</a>:</p>\n<blockquote>\n<p>Hmm. So, my hope was that this would be the first step towards more extensive work on polymorphization</p>\n</blockquote>\n<p>I guess the real question is what the next steps look like -- this maybe raises again the question of the work we were doing earlier in trying to estimate how much opportunity is <em>really</em> out there</p>",
        "id": 192436976,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585682409
    },
    {
        "content": "<p>I just think the analysis walks the line of being not beneficial enough for caching the results to be valuable, but just expensive enough that it is, depending on the workload.</p>",
        "id": 192437051,
        "sender_full_name": "davidtwco",
        "timestamp": 1585682448
    },
    {
        "content": "<p>That said, I’m basing that on reading a handful of percentages, I don’t really know.</p>",
        "id": 192437078,
        "sender_full_name": "davidtwco",
        "timestamp": 1585682464
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> who might have some thoughts</p>",
        "id": 192437297,
        "sender_full_name": "davidtwco",
        "timestamp": 1585682564
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> did you measure mono items vs instantiations of them?</p>",
        "id": 192437800,
        "sender_full_name": "eddyb",
        "timestamp": 1585682791
    },
    {
        "content": "<p>something might be really weird with the CGU partitioning</p>",
        "id": 192437810,
        "sender_full_name": "eddyb",
        "timestamp": 1585682797
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> actually, more important is the patched incremental</p>",
        "id": 192437837,
        "sender_full_name": "eddyb",
        "timestamp": 1585682811
    },
    {
        "content": "<p>was that what you mentioned with the multiple cgus on one line of the mono item output?</p>",
        "id": 192437871,
        "sender_full_name": "davidtwco",
        "timestamp": 1585682831
    },
    {
        "content": "<p>(compile once with <code>CARGO_INCREMENTAL=1</code> to force incremental even in release mode, make a change, then run the same command again)</p>",
        "id": 192437893,
        "sender_full_name": "eddyb",
        "timestamp": 1585682842
    },
    {
        "content": "<p>yeah</p>",
        "id": 192437897,
        "sender_full_name": "eddyb",
        "timestamp": 1585682846
    },
    {
        "content": "<p>but I just realized it's not the important thing I meant to point at here</p>",
        "id": 192437920,
        "sender_full_name": "eddyb",
        "timestamp": 1585682858
    },
    {
        "content": "<p>it's possible there are more mono items in the patched incremental build than there were before</p>",
        "id": 192437959,
        "sender_full_name": "eddyb",
        "timestamp": 1585682877
    },
    {
        "content": "<p>or something about the partitioning causes far more things to codegen</p>",
        "id": 192438029,
        "sender_full_name": "eddyb",
        "timestamp": 1585682894
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> <code>RUSTC_LOG=info</code> (the <code>codegen_instance</code> thing) might be more useful than mono items, I'm just realizing</p>",
        "id": 192438065,
        "sender_full_name": "eddyb",
        "timestamp": 1585682917
    },
    {
        "content": "<p>mono items might include stuff that doesn't need re-codegen-ing</p>",
        "id": 192438085,
        "sender_full_name": "eddyb",
        "timestamp": 1585682926
    },
    {
        "content": "<p>(I haven't done this sort of analysis, ever)</p>",
        "id": 192438120,
        "sender_full_name": "eddyb",
        "timestamp": 1585682945
    },
    {
        "content": "<p><a href=\"https://www.dropbox.com/sh/v0ffr9li5l0i75z/AABctvsXbAxMCUDZ1W98pDdPa?dl=0\" title=\"https://www.dropbox.com/sh/v0ffr9li5l0i75z/AABctvsXbAxMCUDZ1W98pDdPa?dl=0\">https://www.dropbox.com/sh/v0ffr9li5l0i75z/AABctvsXbAxMCUDZ1W98pDdPa?dl=0</a> - here's the mono item output from the script crate when I tested locally.</p>\n<div class=\"message_inline_ref\"><a href=\"https://www.dropbox.com/sh/v0ffr9li5l0i75z/AABctvsXbAxMCUDZ1W98pDdPa?dl=0\" title=\"Polymorphisation\"><img src=\"https://www.dropbox.com/static/images/spectrum-icons/generated/content/content-folder_dropbox-large.png\"></a><div><div class=\"message_inline_image_title\">Polymorphisation</div><desc class=\"message_inline_image_desc\"></desc></div></div>",
        "id": 192438884,
        "sender_full_name": "davidtwco",
        "timestamp": 1585683320
    },
    {
        "content": "<p>Just running <code>cargo +$OLD clean &amp;&amp; cargo +$OLD rustc -- -Z print-mono-items=lazy</code> with the versions from perf, downloaded from the dev-static S3</p>",
        "id": 192438923,
        "sender_full_name": "davidtwco",
        "timestamp": 1585683346
    },
    {
        "content": "<p>and piping that into a file</p>",
        "id": 192438936,
        "sender_full_name": "davidtwco",
        "timestamp": 1585683352
    },
    {
        "content": "<p>I didn't try reproduce the clean, baseline, clean incr, patched stuff from perf when I counted mono items.</p>",
        "id": 192439090,
        "sender_full_name": "davidtwco",
        "timestamp": 1585683413
    },
    {
        "content": "<p>Possibly a bad question, but how many items were we expecting could be polymorphic? i.e. what was the expected savings on the number of generated items? And are there any cases that we expected to be polymorphic that aren't?</p>",
        "id": 192480117,
        "sender_full_name": "mark-i-m",
        "timestamp": 1585712070
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"198054\">@mark-i-m</span> it's almost entirely based on closures not using their parent <code>fn</code>'s generics right now</p>",
        "id": 192536250,
        "sender_full_name": "eddyb",
        "timestamp": 1585751328
    },
    {
        "content": "<p>it's not transitive between <code>fn</code>s nor taking layout into account</p>",
        "id": 192536308,
        "sender_full_name": "eddyb",
        "timestamp": 1585751355
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> I see. Then would it make sense to do some sort of closure stress-test. i.e. create the best-case possible microbenchmark, something we expect to get gigantic improvements from polymorphization. Then we can see what the headroom is and where overhead is</p>",
        "id": 192562825,
        "sender_full_name": "mark-i-m",
        "timestamp": 1585761751
    },
    {
        "content": "<p>Exams/university-in-general is all done now; I've just rebased <a href=\"https://github.com/rust-lang/rust/issues/69749\">#69749</a> on master and I'll start looking into understanding the performance of it better over the weekend.</p>",
        "id": 198465398,
        "sender_full_name": "davidtwco",
        "timestamp": 1590166185
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I put this off a little longer than I thought I would, but here goes:</p>\n<ul>\n<li>I've rebased the PR to reduce the number of commits - basically ditching the back-and-forth changes from when the PR was being initially worked on. There's currently 11 commits (down from 49 commits) which makes it a bit easier to rebase and hopefully reduces the number of rebases I'll have to do.</li>\n<li>I've re-added a <code>-Z polymorphize</code> flag - it defaults to <code>on</code> but it means I can compare the performance without having two builds.</li>\n</ul>\n<p>I've started trying to get insight into what is impacting the performance of the PR. So far, I've just been collecting some basic information to steer any deeper dives based on some hypotheses (e.g. codegen unit partitioning is hampering the impact).</p>\n<p>In a release build of <code>script-servo</code> with <code>--runs Full</code> only, using rustc-perf:</p>\n<table>\n<thead>\n<tr>\n<th><code>-Ztime-passes</code> (total)</th>\n<th><code>-Zpolymorphize=on</code></th>\n<th><code>-Z polymorphize=off</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>-Z codegen-units=1</code></td>\n<td>633.040 (<a href=\"/user_uploads/4715/385eNQkUHCHaNFfovTGqdJZC/Ztp-polymorphization-20200624-cgu1-script-servo-Opt-Full\">data</a>)</td>\n<td>729.907 ( <a href=\"/user_uploads/4715/QNTjRhyDfqnqFgUp0G-EBiDM/Ztp-polymorphization-20200624-cgu1-off-script-servo-Opt-Full\">data</a> )</td>\n</tr>\n<tr>\n<td>(no other flags)</td>\n<td>232.379 (<a href=\"/user_uploads/4715/TZdx596d-kyf811qengwoEUC/Ztp-polymorphization-20200624-script-servo-Opt-Full\">data</a>)</td>\n<td>232.557 (<a href=\"/user_uploads/4715/VQ7EtDl6Y8gx7-KHqrKTNu-L/Ztp-polymorphization-20200624-off-script-servo-Opt-Full\">data</a>)</td>\n</tr>\n</tbody>\n</table>\n<p>Based on these initial findings, it definitely seems like codegen partitioning has an impact (cc <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span>).</p>\n<p>There's only one other issue that I'm aware of:</p>\n<ul>\n<li>An ICE with the PR when running one of the rustc-perf benchmarks (<code>packed-simd</code> and/or <code>piston-image</code>, from my notes), I've yet to look into it.</li>\n</ul>\n<p>I'd be interested in what people think the correct approach going forward is. What things should I look into (remaining ICE aside), are we leaning towards landing this, etc.</p>\n<p>cc <span class=\"user-group-mention\" data-user-group-id=\"1162\">@WG-mir-opt</span> <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> (folks who might be interested)</p>",
        "id": 201883919,
        "sender_full_name": "davidtwco",
        "timestamp": 1593022556
    },
    {
        "content": "<p>(benchmarks were done on my desktop while it was idle - but there was still a full desktop environment and browser active; so those numbers probably have a fair bit of noise - in particular, I think the non-one-codegen-unit benchmarks should have been more impacted by polymorphisation, that’s what we saw on perf.r-l.o, IIRC)</p>",
        "id": 201884993,
        "sender_full_name": "davidtwco",
        "timestamp": 1593023121
    },
    {
        "content": "<p>This is really awesome work <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span>!! Thanks for your diligence rebasing the PR and fixing merge conflicts.</p>",
        "id": 201885685,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1593023487
    },
    {
        "content": "<p>I haven't taken a close look at the changes yet but I think I would be in favor of landing this if the <code>-zpolymorphize</code> flag defaulted to <code>off</code> for now.</p>",
        "id": 201885795,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1593023539
    },
    {
        "content": "<p>I think before we turn this on by default, we'd want to fix the ICE you mentioned. I'd also like to see some <code>mir-opt</code> tests in addition to the <code>ui</code> tests I see in the PR.</p>",
        "id": 201885882,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1593023591
    },
    {
        "content": "<p>I don’t think there would be any difference in mir-opt tests - this doesn’t affect the built MIR, it only intervenes afterwards during monomorphisation and code generation. There might be some mode of mir-opt tests that I’m unaware of though.</p>",
        "id": 201886122,
        "sender_full_name": "davidtwco",
        "timestamp": 1593023692
    },
    {
        "content": "<p>Based on this, it seems like it makes sense to (eventually) turn on polymorphization for opt builds, where one might have fewer cgus, right?</p>",
        "id": 201886216,
        "sender_full_name": "mark-i-m",
        "timestamp": 1593023744
    },
    {
        "content": "<p>Oh, I see. There won't be fewer MIR bodies or bodies with changed substs?</p>",
        "id": 201886310,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1593023784
    },
    {
        "content": "<p>No - it just generates less copies of the functions that are already there.</p>",
        "id": 201886336,
        "sender_full_name": "davidtwco",
        "timestamp": 1593023806
    },
    {
        "content": "<p>Ah, I see. That makes sense.</p>",
        "id": 201886598,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1593023915
    },
    {
        "content": "<p>I don’t think fewer codegen units are the reason that there’s an impact - but rather that the now potentially-non-generic (technically it is generic, but there’s only one of it) mono item is no longer being immediately put into a different codegen unit to the parent function which remains generic.</p>",
        "id": 201886624,
        "sender_full_name": "davidtwco",
        "timestamp": 1593023927
    },
    {
        "content": "<p>Not sure if that makes sense - I can clarify if not. I’m also not entirely sure that it’s correct - depends how partitioning determines something is generic - since my understanding is that it splits source level modules into two codegen units from the get go based on what is generic.</p>",
        "id": 201886643,
        "sender_full_name": "davidtwco",
        "timestamp": 1593023937
    },
    {
        "content": "<p>I think it would make sense to land this with the flag default flipped - only concern would be new ICEs being introduced when it isn’t tested.</p>",
        "id": 201886729,
        "sender_full_name": "davidtwco",
        "timestamp": 1593023986
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116107\">davidtwco</span> <a href=\"#narrow/stream/216091-t-compiler.2Fwg-polymorphization/topic/progress.20updates/near/201886624\">said</a>:</p>\n<blockquote>\n<p>I don’t think fewer codegen units are the reason that there’s an impact - but rather that the now potentially-non-generic (technically it is generic, but there’s only one of it) mono item is no longer being immediately put into a different codegen unit to the parent function which remains generic.</p>\n</blockquote>\n<p>It makes sense, but I don't understand why that would have a perf impact?</p>",
        "id": 201887142,
        "sender_full_name": "mark-i-m",
        "timestamp": 1593024134
    },
    {
        "content": "<p>That is, I thought the benefit from polymorphization was due to not having to codegen multiple copies of something... so why does it matter which CGU it goes into?</p>",
        "id": 201887425,
        "sender_full_name": "mark-i-m",
        "timestamp": 1593024268
    },
    {
        "content": "<p>It's kind of difficult to explain but, for compilation time performance, it only matters in the incremental case. The non-obvious insight is that our CGUs are not evenly partitioned. It's very common to have 10-100x difference in terms of the amount of code in the CGUs.</p>\n<p>So for incremental compilation performance, if the item was previously going into a very small CGU and you modified it, that would be very fast. But now, if that item happens to be partitioned into a large CGU and you modify it, then it will take much longer to recompile.</p>",
        "id": 201887923,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1593024473
    },
    {
        "content": "<p>This shows up in <code>perf.rlo</code> as a massive regression in incremental performance but it's really luck of the draw more than anything.</p>",
        "id": 201888035,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1593024512
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> It looks like the <code>codegen-unit</code> tests you added were basically what I wanted from the <code>mir-opt</code> tests. <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 201889272,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1593025130
    },
    {
        "content": "<p>Good news! </p>\n<p>I re-visited the two benchmarks from rustc-perf that I had noted as ICE'ing when run locally (this was before the most recent rebases). I recall one of them having a incremental-related error, and the other having a substitution failure.</p>\n<p>However, when running today, there was no substitution error in <code>packed-simd</code> anymore and <code>piston-image</code> did have an ICE (but it was unrelated, and I've got a fix in <a href=\"https://github.com/rust-lang/rust/issues/73719\">#73719</a>, which when applied to polymorphisation makes it compile).</p>\n<p>With that, I'm not aware of any ICEs with polymorphisation!</p>",
        "id": 201955780,
        "sender_full_name": "davidtwco",
        "timestamp": 1593083592
    },
    {
        "content": "<p>I assume the substitution failure was some unrelated upstream failure that was since fixed, and that the incremental failure was just some left over files somewhere that were since cleaned.</p>",
        "id": 201955821,
        "sender_full_name": "davidtwco",
        "timestamp": 1593083638
    },
    {
        "content": "<p><span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 201955902,
        "sender_full_name": "bjorn3",
        "timestamp": 1593083693
    },
    {
        "content": "<p>Just an FYI for everyone - this is only waiting on a review and someone deciding to r+.</p>",
        "id": 203849611,
        "sender_full_name": "davidtwco",
        "timestamp": 1594741522
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> just @ me specifically :P</p>",
        "id": 203877144,
        "sender_full_name": "eddyb",
        "timestamp": 1594755323
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> but also I just opened <a href=\"https://github.com/rust-lang/rust/pull/74341\">https://github.com/rust-lang/rust/pull/74341</a>, I wonder if it could simplify some of the stuff you had to do. probably not because your problems were with <code>ty::Closure</code></p>",
        "id": 203877244,
        "sender_full_name": "eddyb",
        "timestamp": 1594755363
    },
    {
        "content": "<p>starting to wonder if we should just move the information out of the <code>ty::Closure</code> substs, I have no idea what we got out of putting it there</p>",
        "id": 203877276,
        "sender_full_name": "eddyb",
        "timestamp": 1594755386
    },
    {
        "content": "<p>I’ll take a look at that PR shortly.</p>",
        "id": 203877277,
        "sender_full_name": "davidtwco",
        "timestamp": 1594755386
    },
    {
        "content": "<p>Thanks for nominating this <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span>, I didn't even think to do that but it makes a lot of sense!</p>",
        "id": 203980667,
        "sender_full_name": "davidtwco",
        "timestamp": 1594831315
    },
    {
        "content": "<p>You're welcome. I'm really excited to see this land!</p>",
        "id": 203980771,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1594831349
    },
    {
        "content": "<p>A small update from tonight's polymorphization work: <a href=\"https://github.com/rust-lang/rust/pull/75414#pullrequestreview-567715550\">https://github.com/rust-lang/rust/pull/75414#pullrequestreview-567715550</a></p>",
        "id": 222657993,
        "sender_full_name": "davidtwco",
        "timestamp": 1610578001
    },
    {
        "content": "<p>(I'll try to help minimizing <code>ui/impl-trait/example-calendar.rs</code> to see how it disturbs polymorphization)</p>",
        "id": 222708539,
        "sender_full_name": "lqd",
        "timestamp": 1610626000
    },
    {
        "content": "<p>Thanks, that's helpful</p>",
        "id": 222708921,
        "sender_full_name": "davidtwco",
        "timestamp": 1610626342
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">format_month</span><span class=\"p\">(</span><span class=\"n\">it</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">it</span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">_</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"fm\">vec!</span><span class=\"p\">[()].</span><span class=\"n\">into_iter</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"fm\">vec!</span><span class=\"p\">[</span><span class=\"n\">it</span><span class=\"p\">.</span><span class=\"n\">into_iter</span><span class=\"p\">()].</span><span class=\"n\">into_iter</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"fm\">vec!</span><span class=\"p\">[</span><span class=\"n\">it</span><span class=\"p\">.</span><span class=\"n\">into_iter</span><span class=\"p\">()].</span><span class=\"n\">into_iter</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">format_month</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">collect</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">});</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">it</span><span class=\"p\">.</span><span class=\"n\">count</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 222771808,
        "sender_full_name": "lqd",
        "timestamp": 1610653238
    },
    {
        "content": "<p>You’re the best!</p>",
        "id": 222771870,
        "sender_full_name": "davidtwco",
        "timestamp": 1610653265
    },
    {
        "content": "<p>not even close, but happy to help :)</p>",
        "id": 222771935,
        "sender_full_name": "lqd",
        "timestamp": 1610653286
    },
    {
        "content": "<p>were the other failing tests acceptably short ?</p>",
        "id": 222772385,
        "sender_full_name": "lqd",
        "timestamp": 1610653441
    },
    {
        "content": "<p>I didn't look at them but I think we figured one of them out already so it's probably fine.</p>",
        "id": 222772510,
        "sender_full_name": "davidtwco",
        "timestamp": 1610653469
    },
    {
        "content": "<p>nice !</p>",
        "id": 222772621,
        "sender_full_name": "lqd",
        "timestamp": 1610653514
    },
    {
        "content": "<p>I say that, but <span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> figured it out.</p>",
        "id": 222772649,
        "sender_full_name": "davidtwco",
        "timestamp": 1610653529
    },
    {
        "content": "<p>the cross crate one reminded of the recent changes to MIR encoding (or lack thereof without codegen)</p>",
        "id": 222772955,
        "sender_full_name": "lqd",
        "timestamp": 1610653660
    },
    {
        "content": "<p>(hopefully it should be easy to verify that hypothesis)</p>",
        "id": 222773172,
        "sender_full_name": "lqd",
        "timestamp": 1610653730
    },
    {
        "content": "<p>I believe that's what oli worked out in <a class=\"stream-topic\" data-stream-id=\"216091\" href=\"/#narrow/stream/216091-t-compiler.2Fwg-polymorphization/topic/fallout.20from.20mir_for_ctfe.20PR\">#t-compiler/wg-polymorphization &gt; fallout from mir_for_ctfe PR</a></p>",
        "id": 222773223,
        "sender_full_name": "davidtwco",
        "timestamp": 1610653747
    },
    {
        "content": "<p>oh ok</p>",
        "id": 222773261,
        "sender_full_name": "lqd",
        "timestamp": 1610653764
    },
    {
        "content": "<p>so the 2 failing ones in this comment <a href=\"https://github.com/rust-lang/rust/pull/75414#discussion_r556918589\">https://github.com/rust-lang/rust/pull/75414#discussion_r556918589</a> would be the same issue ?</p>",
        "id": 222773300,
        "sender_full_name": "lqd",
        "timestamp": 1610653780
    },
    {
        "content": "<p>I don't think so, the second failure was the one I understood to be a result of recent metadata encoding changes, I don't think we understand the first failure yet (unless I've missed something).</p>",
        "id": 222773458,
        "sender_full_name": "davidtwco",
        "timestamp": 1610653844
    },
    {
        "content": "<p>ah sorry I had misread your previous comment to mean the opposite of what you said ...</p>",
        "id": 222773897,
        "sender_full_name": "lqd",
        "timestamp": 1610654024
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/bba8710616e5e4722215c0d6b27abaedca03ebad/library/core/src/iter/traits/iterator.rs#L2291-L2298\">https://github.com/rust-lang/rust/blob/bba8710616e5e4722215c0d6b27abaedca03ebad/library/core/src/iter/traits/iterator.rs#L2291-L2298</a></p>\n<p>This kind of pattern - building closures in helper functions with fewer generic parameters -  is still necessary to reduce the amount of produced IR, right?</p>",
        "id": 238049280,
        "sender_full_name": "The 8472",
        "timestamp": 1620581543
    },
    {
        "content": "<p>Polymorphization is disabled currently, so it's still necessary. I believe that case wouldn't be with polymorphization enabled, but I didn't take an exceptionally close look at it.</p>",
        "id": 238107957,
        "sender_full_name": "davidtwco",
        "timestamp": 1620637221
    }
]