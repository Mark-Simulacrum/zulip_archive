[
    {
        "content": "<p>Hello all,</p>\n<p>Great to know this channel from <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> ! I am Shuofei Zhu from Penn State and working on the project exploring dictionary-passing style for generics. My understanding for \"dictionary-passing\" is similar to using a vtable for dynamic dispatch. I think what we are going to do is kind of like making some of the functions with type parameters to be dynamically dispatched.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">add_test</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"nc\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">T</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nc\">Add</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"o\">=</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"n\">c</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">myprint</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">std</span>::<span class=\"n\">fmt</span>::<span class=\"n\">Display</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;{}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n\n<span class=\"w\">   </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">add_test</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">);</span><span class=\"c1\">//i32</span>\n<span class=\"w\">   </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">add_test</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">2.0</span><span class=\"p\">);</span><span class=\"c1\">//f64</span>\n\n<span class=\"w\">   </span><span class=\"n\">myprint</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"n\">myprint</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>For the above code, hopefully it would be compiled to some LLVM code similar to the following ones:</p>\n<div class=\"codehilite\"><pre><span></span><code>@vtable.i32 = {null, size:32, null, add_func_i32}\n@vtable.f64 = {null, size:32, null, add_func_f64}\n\nadd_func_int(a: *i32, b: *i32) -&gt; *i32 {\n   ai=  Load a;\n   bi = load b;\n   return Box::new(add());\n}\n\nfn add_test(a: *Add, b: *Add, vtable: VtableOfAdd) -&gt; *Add {\n   Add_func = vtable[3]\n   c = add_func(a, b)\n   c\n}\n\nfn myprint&lt;T: std::fmt::Display&gt;(x: T) {\n   println!(&quot;{}&quot;, x);\n}\n\nfn main() {\n\n   let a = add_test(1, 2, @vtable.i32);//i32\n   let b = add_test(1.0, 2.0, @vtable.i64);//f64\n\n   myprint(a);\n   myprint(b);\n}\n</code></pre></div>\n\n\n<p>As <code>std::ops::Add</code> has been implemented for i32 and f64, we only change how <code>add_test</code> is compiled. (I guess the criterion is universal types vs existential types). <br>\nI would like to ask about the implementation. I found Rust already has <code>dyn trait</code>s to implement dynamic dispatch with a vtable. One way to implement dictionary passing is to change the codegen part by reusing some code from <code>dyn trait</code>s to generate similar LLVM code. </p>\n<p>But I am not sure if thereâ€™s another way: change the MIR or HIR at some stage, and turn the type parameters into <code>dyn trait</code>s, so that they are compiled as <code>dyn trait</code>s naturally? Since using type parameters makes more constraints than using traits only, I think at some stage (e.g. after type checking), the type parameters could be substituted to <code>dyn trait</code>s while keeping the semantics.</p>\n<p>To me, the second way sounds promising, but I am not sure if my understanding is correct. If so, should I change HIR or MIR, and after which analyses (e.g., type checking)?</p>\n<p>Thanks,<br>\nShuofei</p>",
        "id": 210490670,
        "sender_full_name": "sfzhu",
        "timestamp": 1600417262
    },
    {
        "content": "<p>I have no idea how this can be made to work in most cases, <code>rustc</code> relies heavily on knowing what generics expand to</p>",
        "id": 210819169,
        "sender_full_name": "eddyb",
        "timestamp": 1600736859
    },
    {
        "content": "<p>your <code>add_test</code> example is impossible to write with <code>dyn Trait</code> because you can write <code>dyn Add&lt;Output = i32&gt;</code> but you can't avoid specifying the associated type, as the typesystem still reasons about it statically</p>",
        "id": 210819228,
        "sender_full_name": "eddyb",
        "timestamp": 1600736911
    },
    {
        "content": "<p><code>dyn Trait</code> only injects one existential variable into the \"ambient\" indirection (I really wish I got around to writing the spec for this, it's a really fascinating topic)</p>",
        "id": 210819259,
        "sender_full_name": "eddyb",
        "timestamp": 1600736963
    },
    {
        "content": "<p>even if you pick traits without associated types, you still could only handle a single value of that type with <code>dyn Trait</code></p>",
        "id": 210819329,
        "sender_full_name": "eddyb",
        "timestamp": 1600737013
    },
    {
        "content": "<p>because of lifetimes, it's <em>fundamentally impossible</em> to check/ensure that two arbitrary values of some <code>dyn Trait</code> are the same type</p>",
        "id": 210819350,
        "sender_full_name": "eddyb",
        "timestamp": 1600737049
    },
    {
        "content": "<p>so overall what this means is you would have to carry the existential/universal logic pretty far down, and couldn't reuse <code>dyn Trait</code> except for cases when the user can write <code>dyn Trait</code> today (I suggest trying, it's hard to come up with non-trivial examples)</p>",
        "id": 210819392,
        "sender_full_name": "eddyb",
        "timestamp": 1600737109
    },
    {
        "content": "<p>also, the HIR is immutable, so at most you could transform MIR, but the mutable part of MIR is just the \"body\" of a function (or compile-time initializer but that's not relevant here)</p>",
        "id": 210819463,
        "sender_full_name": "eddyb",
        "timestamp": 1600737182
    },
    {
        "content": "<p>once they have been lowered from AST to HIR and then from the HIR to the typesystem, you can't transform the signature or generics of a definition</p>",
        "id": 210819494,
        "sender_full_name": "eddyb",
        "timestamp": 1600737242
    },
    {
        "content": "<p>(this is by design, <code>rustc</code> largely doesn't operate in \"passes\", but rather a more fluid dependency graph - so if you were able to modify something, you could invalidate a previous observation)</p>",
        "id": 210819561,
        "sender_full_name": "eddyb",
        "timestamp": 1600737291
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343499\">@Shuofei Zhu</span> my suggestion would be to do something similar to <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span>'s \"polymorphization\":</p>\n<ol>\n<li>\n<p>you'd have an analysis on the MIR which checks that type parameters are only used in restricted ways</p>\n<ul>\n<li>it can call methods of traits that are in your own bounds, but <em>not</em> other functions with the same bounds, as there is no guarantee they will also succeed this analysis (unless you want to make it transitive which is harder)</li>\n<li>you also can't allow creating derived types like <code>Option&lt;T&gt;</code>, because computing the layout of that at runtime is untractable</li>\n<li><del>your <code>add_test</code> example would still not be allowed because it returns a value of an unknown size, which is not something physically possible without auto-boxing or LLVM changes to allow a fancy stack juggling ABI (I can go into more details if you're curious)</del></li>\n<li>actually, I think we can make <code>add_test</code> work because unlike <code>dyn Trait</code>, the caller <em>knows</em> the size (since it corresponds to what would've been a generic param) and can create an appropriately-sized stack slot for it</li>\n</ul>\n</li>\n<li>\n<p>you'd tweak codegen to handle \"dynamicized\" generics:</p>\n<ul>\n<li>to not break everything working with values and expecting to be able to do e.g. <code>size_of_val</code>, you'd have to replace every type parameter <code>T</code> with <code>dyn DynGeneric&lt;T&gt;</code> (new empty trait, special for this), and combine some vtables with stack slot pointers to create pseudo-trait objects</li>\n<li>when handling calls involving generics, I think the easiest way is letting the trait system resolve <code>&lt;dyn DynGeneric&lt;T&gt; as Trait&gt;::method</code> as a special kind of \"virtual call\" (or I guess you could try to intercept <code>dyn DynGeneric&lt;T&gt;</code> before it ever gets there), that you then implement by getting the method from the right vtable (as opposed to from one of the arguments)</li>\n</ul>\n</li>\n</ol>",
        "id": 210820430,
        "sender_full_name": "eddyb",
        "timestamp": 1600738434
    },
    {
        "content": "<p>this is where virtual calls are handled today <a href=\"https://github.com/rust-lang/rust/blob/f47df31ae5d7d9795399dca3a0003c1856900361/compiler/rustc_codegen_ssa/src/mir/block.rs#L724-L770\">https://github.com/rust-lang/rust/blob/f47df31ae5d7d9795399dca3a0003c1856900361/compiler/rustc_codegen_ssa/src/mir/block.rs#L724-L770</a></p>",
        "id": 210820505,
        "sender_full_name": "eddyb",
        "timestamp": 1600738523
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343499\">@Shuofei Zhu</span> while it might seem plausible to do some of these transformations on the MIR itself, I don't think you can encode enough easily in MIR today</p>",
        "id": 210820585,
        "sender_full_name": "eddyb",
        "timestamp": 1600738616
    },
    {
        "content": "<p>I guess there's that and also the fact that MIR semantics shouldn't be affected by the choice of codegen strategy: if something is compatible with the dynamic approach then it's \"just\" another low-level representation (below MIR)</p>",
        "id": 210820742,
        "sender_full_name": "eddyb",
        "timestamp": 1600738840
    },
    {
        "content": "<p>at most you end up with a precomputed list of vtables to pass to the function and a bitset of \"dynamicized\" generic parameters</p>",
        "id": 210820756,
        "sender_full_name": "eddyb",
        "timestamp": 1600738872
    },
    {
        "content": "<p>the other thing I wanted to mention is that this is similar to <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>' ideas about an explicit <code>fn foo&lt;dyn T: ...&gt;</code> syntax, which is statically type-checked (and all of the conditions I mentioned above are enforced) but compiled to the dictionary-passing style</p>",
        "id": 210820821,
        "sender_full_name": "eddyb",
        "timestamp": 1600738972
    },
    {
        "content": "<p>the best-effort vs explicit cases could share most of the code, I think - all of the codegen logic would probably be the same, it's just the checks that would result in user-facing errors only for the <code>dyn T</code> feature</p>",
        "id": 210820872,
        "sender_full_name": "eddyb",
        "timestamp": 1600739044
    },
    {
        "content": "<p>but anyway yeah this would be more limited than e.g. Swift generics, which can be made dynamic to pretty much any extent</p>",
        "id": 210820901,
        "sender_full_name": "eddyb",
        "timestamp": 1600739082
    },
    {
        "content": "<p>Thank you so much about your advice! <br>\nI am sorry I didn't make it clear, but briefly, I think what we would like to do <em>is</em> <code>fn foo&lt;dyn T: ...&gt;</code>. My understanding was like this: rust has a strict typing constraint system, but once a piece of code passes those checkings (traits, associated types, etc), the compiler still has a choice to make it statically or dynamically dispatched (the latter could also be called dictionary-passing style). </p>\n<p>We can have a table like this:<br>\n|         | use constraints           | no constraints  |<br>\n| ------------- |-------------| -----|<br>\n| static dispatch      | <code>fn foo&lt;T: Trait&gt;</code> | (not sure) |<br>\n| dynamic dispatch      |   <code>fn foo&lt;dyn T: Trait&gt;</code>    |  <code>fn foo(t: &amp;dyn Trait)</code> |</p>",
        "id": 211093768,
        "sender_full_name": "sfzhu",
        "timestamp": 1600928762
    },
    {
        "content": "<p>don't know why cannot edit the table anymore, but remake the table as below:</p>\n<table>\n<thead>\n<tr>\n<th>dispatch</th>\n<th>use constraints</th>\n<th>no constraints</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>static dispatch</td>\n<td><code>fn foo&lt;T: Trait&gt;</code></td>\n<td>(not sure)</td>\n</tr>\n<tr>\n<td>dynamic dispatch</td>\n<td><code>fn foo&lt;dyn T: Trait&gt;</code></td>\n<td><code>fn foo(t: &amp;dyn Trait)</code></td>\n</tr>\n</tbody>\n</table>",
        "id": 211097310,
        "sender_full_name": "sfzhu",
        "timestamp": 1600932552
    },
    {
        "content": "<p>So right now, as a research project, we are trying to implement a prototype in a short time and do some performance test (e.g., how much code debloated, how much <del>compliation time saved</del>runtime overhead introduced...). We would like to compile as much generic code (<code>fn foo&lt;T: ...&gt;</code>s) as we can, into a dictionary-passing style.  After getting some conclusions from the experiment, we may furthermore implement a <code>fn foo&lt;dyn T: ...&gt;</code> feature with dictionary-passing in a decent way. <br>\nSo my question should be: what would be an easier way to implement it: after the type checkings, compile the generics into vtables, by a) changing the types into <code>&amp;dyn trait</code>s to make it generate vtables, or b) change the codegen part and do some extra things during codegen?</p>",
        "id": 211098131,
        "sender_full_name": "sfzhu",
        "timestamp": 1600933258
    },
    {
        "content": "<p>From what you introduced to me, I feel like method a) may be hard to implement. It requires some large changes on existing HIR/MIR structures. Even though we can do the type checks first then change them to dynamic, changing the structures would also be complex. Currently, we are working on method b). We may not be able to elegantly reuse existing trait &amp; vtable implementations, but will try to generate LLVM code that is close to existing implementations.</p>",
        "id": 211099497,
        "sender_full_name": "sfzhu",
        "timestamp": 1600934285
    },
    {
        "content": "<p>Some more details of method b) we are considering:</p>\n<ol>\n<li>You mentioned \"we can make <code>add_test</code> work\" because \"the caller knows the size\". But that was still a bit hard to generate a proper llvm code. We decide to make a wrapper of the <code>impl</code>s of <code>Add</code> on different types, i.e. </li>\n</ol>\n<div class=\"codehilite\"><pre><span></span><code>add_func_int(a: *i32, b: *i32) -&gt; *i32 {\n   ai=  Load a;\n   bi = load b;\n   return Box::new(std::op::Add(ai, bi));\n}\n</code></pre></div>\n\n\n<ol start=\"2\">\n<li>We'd like to convert one of the instances of <code>add_test</code> into one with dynamic trait parameters, and remove the redundant instances. We noticed that a <code>dyn trait</code> would be compiled into actually two parameters in LLVM: one is like a <code>void *</code> pointer in C (<code>{}*</code>) to pass the data, the other is a vtable. At the callsite of <code>add_test</code>, the vtable was passed in as a parameter, which is basically what my example shows. </li>\n<li>At the stage of codegen, I think the trait information of <code>T:Add</code> has lost, so we may do some analyses again on MIR to make the vtables. This could be some redundant work, as trait information of them was computed earlier. But for a quick prototype, it may not be that bad.</li>\n</ol>",
        "id": 211100186,
        "sender_full_name": "sfzhu",
        "timestamp": 1600934772
    },
    {
        "content": "<p>Right now, I am finding out how I can make step 2. I may have to build a trait (<code>ty::Dynamic</code>), as it seems to be the only <code>TyKind</code> to make a <code>{}*</code>.</p>",
        "id": 211100368,
        "sender_full_name": "sfzhu",
        "timestamp": 1600934896
    },
    {
        "content": "<p>One more detail: I think most data would be passed through a void pointer, as what we would do in <code>&amp;dyn Trait</code>.</p>",
        "id": 211101815,
        "sender_full_name": "sfzhu",
        "timestamp": 1600935894
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span></p>",
        "id": 211114430,
        "sender_full_name": "davidtwco",
        "timestamp": 1600944451
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343499\">@Shuofei Zhu</span> I don't think this would be a short-term project. sadly I am quite busy lately so I'm not sure how much I could help</p>",
        "id": 211924630,
        "sender_full_name": "eddyb",
        "timestamp": 1601564852
    },
    {
        "content": "<p>returning <code>Box</code> isn't necessary because you can have the function take a \"return pointer\"</p>",
        "id": 211924663,
        "sender_full_name": "eddyb",
        "timestamp": 1601564871
    },
    {
        "content": "<p>things like large structs are \"returned\" by passing in a pointer to write the return value to</p>",
        "id": 211924736,
        "sender_full_name": "eddyb",
        "timestamp": 1601564885
    },
    {
        "content": "<p>if you make all functions with an unknown-size-return use that feature, it should \"just work\", as the caller can correctly allocate the right stack slot size</p>",
        "id": 211924829,
        "sender_full_name": "eddyb",
        "timestamp": 1601564927
    },
    {
        "content": "<p>with <code>-&gt; dyn Trait</code> this is impossible because the caller doesn't know ahead of time <em>which type</em> you may have chosen</p>",
        "id": 211924896,
        "sender_full_name": "eddyb",
        "timestamp": 1601564956
    },
    {
        "content": "<p>but with <code>-&gt; T</code>, it knows it's whatever <code>T</code> is (whether static or can dynamically get the size from the vtable)</p>",
        "id": 211924944,
        "sender_full_name": "eddyb",
        "timestamp": 1601564978
    },
    {
        "content": "<p>Already many thanks! I will ask some detailed technical questions in t-compiler/help or other streams in the future.</p>",
        "id": 212003580,
        "sender_full_name": "sfzhu",
        "timestamp": 1601612533
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span>  One quick question I have been looking for and asking: how can I make a wrapper function for add? I am not sure which part of rustc I can refer to, so that I can write some llvm code directly, as well as insert a function into the existing function list.</p>",
        "id": 213355961,
        "sender_full_name": "sfzhu",
        "timestamp": 1602713004
    },
    {
        "content": "<p>never mind, I have figured it out.</p>",
        "id": 213677319,
        "sender_full_name": "sfzhu",
        "timestamp": 1602979101
    }
]