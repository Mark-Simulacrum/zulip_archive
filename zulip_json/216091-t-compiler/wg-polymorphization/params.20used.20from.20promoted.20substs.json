[
    {
        "content": "<p>Why does <code>test</code> consider <code>T</code> used here?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"cp\">#![feature(rustc_attrs)]</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[rustc_polymorphize_error]</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">test</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">].</span><span class=\"n\">iter</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 206260096,
        "sender_full_name": "lcnr",
        "timestamp": 1596808965
    },
    {
        "content": "<p>Of the top of my head, Iâ€™m surprised that it does.</p>",
        "id": 206260469,
        "sender_full_name": "davidtwco",
        "timestamp": 1596809147
    },
    {
        "content": "<p>me too <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 206260490,
        "sender_full_name": "lcnr",
        "timestamp": 1596809154
    },
    {
        "content": "<p>It looks like we are overly careful with lifetimes?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"cp\">#![feature(rustc_attrs)]</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">hey</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[rustc_polymorphize_error]</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">test</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">hey</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 206260748,
        "sender_full_name": "lcnr",
        "timestamp": 1596809281
    },
    {
        "content": "<p><code>&amp;()</code> is promoted and so we get something like <code>_5 = const test::&lt;T&gt;::promoted[0]</code> and it looks at the substs of that.</p>",
        "id": 206261420,
        "sender_full_name": "davidtwco",
        "timestamp": 1596809617
    },
    {
        "content": "<p>So we might need some handling of promoteds like we do closures?</p>",
        "id": 206261459,
        "sender_full_name": "davidtwco",
        "timestamp": 1596809641
    },
    {
        "content": "<p>wait</p>",
        "id": 206261537,
        "sender_full_name": "lcnr",
        "timestamp": 1596809668
    },
    {
        "content": "<p>so we promote <code>[1, 2, 3]</code> here <span aria-label=\"shock\" class=\"emoji emoji-1f628\" role=\"img\" title=\"shock\">:shock:</span></p>",
        "id": 206261555,
        "sender_full_name": "lcnr",
        "timestamp": 1596809679
    },
    {
        "content": "<p>hmm, we probably do, considering that <code>iter</code> takes <code>&amp;[T]</code></p>",
        "id": 206261601,
        "sender_full_name": "lcnr",
        "timestamp": 1596809708
    },
    {
        "content": "<p>damn, promoteds are just too strong</p>",
        "id": 206261621,
        "sender_full_name": "lcnr",
        "timestamp": 1596809719
    },
    {
        "content": "<p>Unless you want to, I can put a quick patch up for this?</p>",
        "id": 206261668,
        "sender_full_name": "davidtwco",
        "timestamp": 1596809737
    },
    {
        "content": "<p>go ahead. Will gladly review though</p>",
        "id": 206261818,
        "sender_full_name": "lcnr",
        "timestamp": 1596809796
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> as far as I can tell, fixing this resolves <a href=\"https://github.com/rust-lang/rust/pull/75255#discussion_r467051386\">this comment</a>, right?</p>",
        "id": 206267210,
        "sender_full_name": "davidtwco",
        "timestamp": 1596812340
    },
    {
        "content": "<p>(I've checked and there's only one copy in the assembly after my fix)</p>",
        "id": 206267238,
        "sender_full_name": "davidtwco",
        "timestamp": 1596812355
    },
    {
        "content": "<p>(and two when I turn off polymorphisation)</p>",
        "id": 206267254,
        "sender_full_name": "davidtwco",
        "timestamp": 1596812364
    },
    {
        "content": "<p>did you also see <a href=\"https://github.com/rust-lang/rust/pull/75255#discussion_r467072757\">https://github.com/rust-lang/rust/pull/75255#discussion_r467072757</a>?</p>",
        "id": 206267270,
        "sender_full_name": "lcnr",
        "timestamp": 1596812375
    },
    {
        "content": "<p>Because I would be surprised if that's caused by promoteds</p>",
        "id": 206267398,
        "sender_full_name": "lcnr",
        "timestamp": 1596812418
    },
    {
        "content": "<p>when you say <code>slice::Iter::map</code>, do you mean the <code>core::iter::traits::iterator::Iterator::map</code> function in the assembly that's highlighted when I click the link?</p>",
        "id": 206267485,
        "sender_full_name": "davidtwco",
        "timestamp": 1596812457
    },
    {
        "content": "<p>yeah</p>",
        "id": 206267533,
        "sender_full_name": "lcnr",
        "timestamp": 1596812476
    },
    {
        "content": "<p>yeah, only one copy of that</p>",
        "id": 206267543,
        "sender_full_name": "davidtwco",
        "timestamp": 1596812482
    },
    {
        "content": "<p>that's what I meant initially</p>",
        "id": 206267558,
        "sender_full_name": "davidtwco",
        "timestamp": 1596812487
    },
    {
        "content": "<p>It was just that the function wasn't actually being polymorphised because of the promoteds, so there were two invocations still.</p>",
        "id": 206267618,
        "sender_full_name": "davidtwco",
        "timestamp": 1596812510
    },
    {
        "content": "<p>this is really surprising to me</p>",
        "id": 206267805,
        "sender_full_name": "lcnr",
        "timestamp": 1596812591
    },
    {
        "content": "<p><code>|_| ()</code> already considers <code>T</code> unused on nightly, so I don't understand why considering promoteds changed something here</p>",
        "id": 206267991,
        "sender_full_name": "lcnr",
        "timestamp": 1596812665
    },
    {
        "content": "<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 206268038,
        "sender_full_name": "davidtwco",
        "timestamp": 1596812688
    },
    {
        "content": "<p>You did test that example, did you?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">test</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">().</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">_</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">caller</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">test</span>::<span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">test</span>::<span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 206268054,
        "sender_full_name": "lcnr",
        "timestamp": 1596812695
    },
    {
        "content": "<p>The godbolt link is a slight adaptation of the example on github</p>",
        "id": 206268089,
        "sender_full_name": "lcnr",
        "timestamp": 1596812713
    },
    {
        "content": "<p>in case you copied that one</p>",
        "id": 206268127,
        "sender_full_name": "lcnr",
        "timestamp": 1596812727
    },
    {
        "content": "<p>I hadn't noticed that, will check it.</p>",
        "id": 206268135,
        "sender_full_name": "davidtwco",
        "timestamp": 1596812729
    },
    {
        "content": "<p>There are still two copies.</p>",
        "id": 206268326,
        "sender_full_name": "davidtwco",
        "timestamp": 1596812799
    },
    {
        "content": "<p><span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 206268332,
        "sender_full_name": "davidtwco",
        "timestamp": 1596812802
    },
    {
        "content": "<p>I've still not figured out how your suggested change would change that either though.</p>",
        "id": 206268426,
        "sender_full_name": "davidtwco",
        "timestamp": 1596812875
    },
    {
        "content": "<p>There's something silly that I'm missing no doubt.</p>",
        "id": 206268488,
        "sender_full_name": "davidtwco",
        "timestamp": 1596812886
    },
    {
        "content": "<p>we can't polymorphize test but can polymorphize <code>|_| ()</code> here</p>",
        "id": 206268519,
        "sender_full_name": "lcnr",
        "timestamp": 1596812901
    },
    {
        "content": "<p>while monomorphizing test, we polymorphize the instance of <code>map(|_| ())</code></p>",
        "id": 206268565,
        "sender_full_name": "lcnr",
        "timestamp": 1596812930
    },
    {
        "content": "<p>rn <code>map</code> has no unused generic params itself, so we just early exit</p>",
        "id": 206268594,
        "sender_full_name": "lcnr",
        "timestamp": 1596812945
    },
    {
        "content": "<p>if we try to polymorphize the substs of <code>map</code> we end up polymorphizing <code>|_| ()</code></p>",
        "id": 206268657,
        "sender_full_name": "lcnr",
        "timestamp": 1596812982
    },
    {
        "content": "<p>ah, I get it</p>",
        "id": 206268787,
        "sender_full_name": "davidtwco",
        "timestamp": 1596813040
    },
    {
        "content": "<p>will make that change shortly, but the PR is still flawed because it doesn't fix every case of the problem it tries to (as per <a href=\"https://github.com/rust-lang/rust/pull/75255#discussion_r467061100\">this comment</a>).</p>",
        "id": 206269047,
        "sender_full_name": "davidtwco",
        "timestamp": 1596813180
    },
    {
        "content": "<p>Did you already test that flaw?</p>",
        "id": 206269504,
        "sender_full_name": "lcnr",
        "timestamp": 1596813333
    },
    {
        "content": "<p>I don't have a test for when <code>x</code> does use <code>f</code> (I was more focused on when it didn't, since that was the case that was making bootstrapping fail) - I've not tried it though.</p>",
        "id": 206269618,
        "sender_full_name": "davidtwco",
        "timestamp": 1596813370
    },
    {
        "content": "<p>Because the situation you described shouldn't happen afaik</p>",
        "id": 206269672,
        "sender_full_name": "lcnr",
        "timestamp": 1596813398
    },
    {
        "content": "<p>As <code>x</code> considering <code>f</code> used would mean that <code>y</code> also considers <code>f</code> used, doesn't it?</p>",
        "id": 206269728,
        "sender_full_name": "lcnr",
        "timestamp": 1596813422
    },
    {
        "content": "<p>Because <code>y</code> uses <code>x</code></p>",
        "id": 206269742,
        "sender_full_name": "lcnr",
        "timestamp": 1596813432
    },
    {
        "content": "<p>actually, maybe you're right</p>",
        "id": 206269773,
        "sender_full_name": "davidtwco",
        "timestamp": 1596813455
    },
    {
        "content": "<p>it's a good thing you're here to find my mistakes</p>",
        "id": 206269865,
        "sender_full_name": "davidtwco",
        "timestamp": 1596813490
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> <a href=\"https://github.com/rust-lang/rust/issues/75260\">#75260</a> for promoteds</p>",
        "id": 206270934,
        "sender_full_name": "davidtwco",
        "timestamp": 1596813984
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> I'm not that familiar with how rustc's constant infrastructure works, should I just be ignoring all <code>ConstKind::Unevaluated</code> here (while still visiting in the <code>Some(promoted)</code> case)?</p>",
        "id": 206274897,
        "sender_full_name": "davidtwco",
        "timestamp": 1596815962
    },
    {
        "content": "<p>Will there be some circumstance where I do care about the <code>substs</code> in it?</p>",
        "id": 206274926,
        "sender_full_name": "davidtwco",
        "timestamp": 1596815980
    },
    {
        "content": "<p>Actually, re-reading your message, I assume I invoke <code>unused_generic_params</code> on the <code>DefId</code>?</p>",
        "id": 206275035,
        "sender_full_name": "davidtwco",
        "timestamp": 1596816008
    },
    {
        "content": "<p>afaik you still have to deal with promoteds separately</p>",
        "id": 206275129,
        "sender_full_name": "lcnr",
        "timestamp": 1596816052
    },
    {
        "content": "<p>not sure, cc <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> what's the <code>DefId</code> for promoted constants?</p>",
        "id": 206275155,
        "sender_full_name": "lcnr",
        "timestamp": 1596816067
    },
    {
        "content": "<p>is it just the <code>DefId</code> of the surrounding body?</p>",
        "id": 206275203,
        "sender_full_name": "lcnr",
        "timestamp": 1596816091
    },
    {
        "content": "<p>once both of these PRs land I would like to see another perf run <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> this should hopefully allow a lot more functions than before</p>",
        "id": 206279901,
        "sender_full_name": "lcnr",
        "timestamp": 1596818377
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/216091-t-compiler.2Fwg-polymorphization/topic/params.20used.20from.20promoted.20substs/near/206275203\">said</a>:</p>\n<blockquote>\n<p>is it just the <code>DefId</code> of the surrounding body?</p>\n</blockquote>\n<p>yes</p>",
        "id": 206339729,
        "sender_full_name": "oli",
        "timestamp": 1596877826
    }
]