[
    {
        "content": "<p>Well, let me fork out a topic to make sure I understand what the problem is</p>",
        "id": 190289382,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583938159
    },
    {
        "content": "<p>but not conflate that discussion with what <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> and <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> are saying right now</p>",
        "id": 190289397,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583938171
    },
    {
        "content": "<p>So e.g. imagine we are generating drop-glue for <code>Foo&lt;Bar&lt;T&gt;&gt;</code> or something</p>",
        "id": 190289425,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583938184
    },
    {
        "content": "<p>is the problem that we our \"substs\" would have <code>Bar&lt;T&gt;</code> in it</p>",
        "id": 190289443,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583938197
    },
    {
        "content": "<p>but when we generate the MIR body, we encode some facts of <code>Bar</code> in there?</p>",
        "id": 190289488,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583938205
    },
    {
        "content": "<p>i.e., should we be generating drop-glue for <code>Foo&lt;T&gt;</code> for \"any T\" (And presumably recursively invoking other drop glue for the T, in a way that would be resolved later on)</p>",
        "id": 190289544,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583938244
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/216091-t-compiler.2Fwg-polymorphization/topic/cycles/near/190284538\" title=\"#narrow/stream/216091-t-compiler.2Fwg-polymorphization/topic/cycles/near/190284538\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> the problem is that <code>InstanceDef::DropGlue</code> contains a type with parameters in it, <em>and that ends up in the MIR body for the shim</em>, but those parameters shouldn't be substituted by <code>Instance</code>'s <code>substs</code> (which are for the <code>DefId</code> that we resolved to a shim, not for the shim itself)</p>\n</blockquote>\n<p>I feel like <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> that <code>InstanceDef</code> shouldn't really have a type in it</p>",
        "id": 190289870,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583938422
    },
    {
        "content": "<p>which might also be your point</p>",
        "id": 190289903,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583938440
    },
    {
        "content": "<p>that's generally impossible</p>",
        "id": 190289959,
        "sender_full_name": "eddyb",
        "timestamp": 1583938451
    },
    {
        "content": "<p>or, like, hard</p>",
        "id": 190289962,
        "sender_full_name": "eddyb",
        "timestamp": 1583938453
    },
    {
        "content": "<p>and it doesn't solve the fact that you now need <em>two</em> substs</p>",
        "id": 190289978,
        "sender_full_name": "eddyb",
        "timestamp": 1583938461
    },
    {
        "content": "<p>one for the <code>InstanceDef</code> and one for the <code>DefId</code></p>",
        "id": 190290007,
        "sender_full_name": "eddyb",
        "timestamp": 1583938470
    },
    {
        "content": "<p>why do you need two substs?</p>",
        "id": 190290059,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583938494
    },
    {
        "content": "<p>like I said before, the signature comes from <code>(instance.def_id(), instance.substs)</code> but the MIR body is the one that's unsubstitutable for shims</p>",
        "id": 190290093,
        "sender_full_name": "eddyb",
        "timestamp": 1583938509
    },
    {
        "content": "<p>and why is it impossible?</p>",
        "id": 190290096,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583938510
    },
    {
        "content": "<p>because many of these shims have arbitrary types</p>",
        "id": 190290160,
        "sender_full_name": "eddyb",
        "timestamp": 1583938549
    },
    {
        "content": "<p>the <code>fn</code> pointers ones support higher-ranked lifetimes IIRC</p>",
        "id": 190290252,
        "sender_full_name": "eddyb",
        "timestamp": 1583938573
    },
    {
        "content": "<p>it's hard to make a \"skeleton\" of the type, and potentially impossible</p>",
        "id": 190290266,
        "sender_full_name": "eddyb",
        "timestamp": 1583938584
    },
    {
        "content": "<p>(this is what I should've said in the first place)</p>",
        "id": 190290292,
        "sender_full_name": "eddyb",
        "timestamp": 1583938599
    },
    {
        "content": "<p>it's not like other cases where the skeleton is just a <code>DefId</code> that points to a generic definition</p>",
        "id": 190290317,
        "sender_full_name": "eddyb",
        "timestamp": 1583938618
    },
    {
        "content": "<p>I don't buy it yet :)</p>",
        "id": 190290371,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583938652
    },
    {
        "content": "<p>For one thing, we could move those types to the substs</p>",
        "id": 190290385,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583938662
    },
    {
        "content": "<p>the substs are for the <code>DefId</code></p>",
        "id": 190290397,
        "sender_full_name": "eddyb",
        "timestamp": 1583938670
    },
    {
        "content": "<p>If necessary</p>",
        "id": 190290399,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583938671
    },
    {
        "content": "<p>okay so keep in mind that the whole reason for this weird setup is the MIR shim body is keyed by <code>instance.def</code></p>",
        "id": 190290466,
        "sender_full_name": "eddyb",
        "timestamp": 1583938690
    },
    {
        "content": "<p>as in <code>InstanceDef</code> is what you get a MIR body from</p>",
        "id": 190290486,
        "sender_full_name": "eddyb",
        "timestamp": 1583938700
    },
    {
        "content": "<p>and then the substs only really make sense for <code>InstanceDef::Item</code> but we currently apply to everything which is fine because most shim <code>InstanceDef</code>s are fully monomorphic</p>",
        "id": 190290559,
        "sender_full_name": "eddyb",
        "timestamp": 1583938732
    },
    {
        "content": "<p>there are two competing interests: signature (obtained from <code>DefId</code> always) and body (obtained from <code>InstanceDef</code>)</p>",
        "id": 190290626,
        "sender_full_name": "eddyb",
        "timestamp": 1583938766
    },
    {
        "content": "<p>they can't possibly have the same <code>Substs</code></p>",
        "id": 190290642,
        "sender_full_name": "eddyb",
        "timestamp": 1583938777
    },
    {
        "content": "<p>well, they could, but I don't know if it matters</p>",
        "id": 190290690,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583938796
    },
    {
        "content": "<p>i.e., you could extend the substs of the body w/ add'l parameters</p>",
        "id": 190290725,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583938802
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/216091-t-compiler.2Fwg-polymorphization/topic/the.20problem.20with.20drop.20glue.20and.20substs/near/190290486\" title=\"#narrow/stream/216091-t-compiler.2Fwg-polymorphization/topic/the.20problem.20with.20drop.20glue.20and.20substs/near/190290486\">said</a>:</p>\n<blockquote>\n<p>as in <code>InstanceDef</code> is what you get a MIR body from</p>\n</blockquote>\n<p>but this helps, I was missing this bit of context</p>",
        "id": 190290779,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583938819
    },
    {
        "content": "<p>(also, side note that I still can't find where we <em>actually create</em> <code>InstanceDef::DropGlue</code>, I guess it must be in the instance resolve code though..?)</p>",
        "id": 190290817,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583938836
    },
    {
        "content": "<p>okay I should've just said <code>fn mir_shim_body(InstanceDef) -&gt; mir::Body</code> :P</p>",
        "id": 190290834,
        "sender_full_name": "eddyb",
        "timestamp": 1583938847
    },
    {
        "content": "<p>yeah that code used to be in <code>ty::instance</code> but was moved to <code>rustc_ty::instance</code></p>",
        "id": 190290868,
        "sender_full_name": "eddyb",
        "timestamp": 1583938864
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/216091-t-compiler.2Fwg-polymorphization/topic/the.20problem.20with.20drop.20glue.20and.20substs/near/190290817\" title=\"#narrow/stream/216091-t-compiler.2Fwg-polymorphization/topic/the.20problem.20with.20drop.20glue.20and.20substs/near/190290817\">said</a>:</p>\n<blockquote>\n<p>(also, side note that I still can't find where we <em>actually create</em> <code>InstanceDef::DropGlue</code>, I guess it must be in the instance resolve code though..?)</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116107\">davidtwco</span> <a href=\"#narrow/stream/216091-t-compiler.2Fwg-polymorphization/topic/cycles/near/190284235\" title=\"#narrow/stream/216091-t-compiler.2Fwg-polymorphization/topic/cycles/near/190284235\">said</a>:</p>\n<blockquote>\n<ol>\n<li><a href=\"https://github.com/rust-lang/rust/blob/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src/librustc_mir/monomorphize/collector.rs#L615-L624\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src/librustc_mir/monomorphize/collector.rs#L615-L624\">https://github.com/rust-lang/rust/blob/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src/librustc_mir/monomorphize/collector.rs#L615-L624</a></li>\n<li><a href=\"https://github.com/rust-lang/rust/blob/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src/librustc_mir/monomorphize/collector.rs#L650-L658\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src/librustc_mir/monomorphize/collector.rs#L650-L658\">https://github.com/rust-lang/rust/blob/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src/librustc_mir/monomorphize/collector.rs#L650-L658</a></li>\n<li><a href=\"https://github.com/rust-lang/rust/blob/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src/librustc/ty/instance.rs#L340-L344\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src/librustc/ty/instance.rs#L340-L344\">https://github.com/rust-lang/rust/blob/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src/librustc/ty/instance.rs#L340-L344</a></li>\n<li><a href=\"https://github.com/rust-lang/rust/blob/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src/librustc_ty/instance.rs#L35-L44\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src/librustc_ty/instance.rs#L35-L44\">https://github.com/rust-lang/rust/blob/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src/librustc_ty/instance.rs#L35-L44</a></li>\n</ol>\n</blockquote>",
        "id": 190290871,
        "sender_full_name": "davidtwco",
        "timestamp": 1583938866
    },
    {
        "content": "<p>oh, that's what those links were :)</p>",
        "id": 190290908,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583938882
    },
    {
        "content": "<p>oh, <em>I</em> see, I overlooked the first because .. well, I was confused :)</p>",
        "id": 190290936,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583938902
    },
    {
        "content": "<p>well, no, because only the last actually creates a <code>DropGlue</code></p>",
        "id": 190291076,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583938953
    },
    {
        "content": "<p>you can also look at <a href=\"https://github.com/rust-lang/rust/pull/69036/files\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/69036/files\">https://github.com/rust-lang/rust/pull/69036/files</a> :P</p>",
        "id": 190291122,
        "sender_full_name": "eddyb",
        "timestamp": 1583938977
    },
    {
        "content": "<p>Yeah, only the last, that's just how we get there.</p>",
        "id": 190291125,
        "sender_full_name": "davidtwco",
        "timestamp": 1583938978
    },
    {
        "content": "<p>so maybe I'll go back and re-read what y'all said elsewhere. definitely something is still \"bothering me\" here</p>",
        "id": 190291183,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583939023
    },
    {
        "content": "<p>the situation is definitely suboptimal</p>",
        "id": 190291276,
        "sender_full_name": "eddyb",
        "timestamp": 1583939048
    },
    {
        "content": "<p>but there's only ~one easy fix</p>",
        "id": 190291302,
        "sender_full_name": "eddyb",
        "timestamp": 1583939056
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/216091-t-compiler.2Fwg-polymorphization/topic/cycles/near/190284624\" title=\"#narrow/stream/216091-t-compiler.2Fwg-polymorphization/topic/cycles/near/190284624\">said</a>:</p>\n<blockquote>\n<p>you still need <code>Instance</code> to have <code>substs</code> because we still rely on <code>(instance.def_id(), instance.substs)</code> for e.g. getting the signature</p>\n</blockquote>\n<p>though I understand this comment now a bit better. I guess this partly just seems wrong to me</p>",
        "id": 190291328,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583939076
    },
    {
        "content": "<p>but I probably just need to adjust my thinking</p>",
        "id": 190291365,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583939102
    },
    {
        "content": "<p>there are two sources of truth and it would be a big refactor (if at all possible) to improve that</p>",
        "id": 190291395,
        "sender_full_name": "eddyb",
        "timestamp": 1583939115
    },
    {
        "content": "<p>we would need to get rid of the <code>Instance::def_id</code> method probably</p>",
        "id": 190291425,
        "sender_full_name": "eddyb",
        "timestamp": 1583939133
    },
    {
        "content": "<p>which today can never fail</p>",
        "id": 190291427,
        "sender_full_name": "eddyb",
        "timestamp": 1583939136
    },
    {
        "content": "<p>ok, so, <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>, you're proposed fix is to <em>not substitute</em> MIR bodies for things that are not <code>InstanceDef::Item</code>...? <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> can you spell out what the ICE is exactly? oh, maybe I see -- you're basically saying that types that appear in MIR bodies that are not the \"item\" case are not referencing the <code>substs</code></p>",
        "id": 190291637,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583939250
    },
    {
        "content": "<p>right</p>",
        "id": 190291657,
        "sender_full_name": "eddyb",
        "timestamp": 1583939263
    },
    {
        "content": "<p>(and I see how this fits into your other PR)</p>",
        "id": 190291666,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583939269
    },
    {
        "content": "<p>and thus why they must be monomorphic for that to make any sense</p>",
        "id": 190291731,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583939285
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>error: internal compiler error: src/librustc/ty/subst.rs:565: type parameter `S/#1` (S/1) out of range when substituting (root type=Some(for&lt;&#39;r&gt; fn(&amp;&#39;r mut OnDrop&lt;[closure@/home/david/projects/rust/rust0/src/test/ui/polymorphization/foo.rs:14:24: 14:29]&gt;) {&lt;OnDrop&lt;[closure@/home/david/projects/rust/rust0/src/test/ui/polymorphization/foo.rs:14:24: 14:29]&gt; as std::ops::Drop&gt;::drop})) substs=[OnDrop&lt;[closure@/home/david/projects/rust/rust0/src/test/ui/polymorphization/foo.rs:14:24: 14:29]&gt;]\n</pre></div>\n\n\n<p>(this is the ICE that we get for the simple test case w/ my PR)</p>",
        "id": 190291737,
        "sender_full_name": "davidtwco",
        "timestamp": 1583939293
    },
    {
        "content": "<p>I guess I'm on board with a surgical fix, presuming it works, but the setup does seem to be itching for a refactoring.</p>",
        "id": 190291808,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583939336
    },
    {
        "content": "<p>(from <a href=\"https://github.com/rust-lang/rust/blob/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src/librustc_mir/monomorphize/collector.rs#L608-L612\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src/librustc_mir/monomorphize/collector.rs#L608-L612\">this line</a>, when calling the <code>drop_in_place</code> shim)</p>",
        "id": 190291812,
        "sender_full_name": "davidtwco",
        "timestamp": 1583939338
    },
    {
        "content": "<p>However, i'm a bit confused about something else</p>",
        "id": 190291827,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583939348
    },
    {
        "content": "<p>In the example, when we compile it generally, we'll wind up with something like <code>Drop&lt;$ClosureType&lt;R, S&gt;&gt;</code>, right?</p>",
        "id": 190291891,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583939393
    },
    {
        "content": "<p>and we'll (presumably) see a call to <code>drop_in_place</code> on that type</p>",
        "id": 190291961,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583939410
    },
    {
        "content": "<p>opened <a href=\"https://github.com/rust-lang/rust/issues/69925\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/69925\">https://github.com/rust-lang/rust/issues/69925</a></p>",
        "id": 190292104,
        "sender_full_name": "eddyb",
        "timestamp": 1583939481
    },
    {
        "content": "<p>so <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> your PR which refuses to \"resolve\" drop-glue for non-monomorphic types, I guess that this would conflict</p>",
        "id": 190292113,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583939484
    },
    {
        "content": "<p>first line of the issue explains that the PR only \"papers over\" the problem :P</p>",
        "id": 190292164,
        "sender_full_name": "eddyb",
        "timestamp": 1583939506
    },
    {
        "content": "<p>what is the def-id for drop-glue?</p>",
        "id": 190292244,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583939537
    },
    {
        "content": "<p>is it the def-id of \"drop in place\"?</p>",
        "id": 190292248,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583939540
    },
    {
        "content": "<p>I think so</p>",
        "id": 190292265,
        "sender_full_name": "davidtwco",
        "timestamp": 1583939550
    },
    {
        "content": "<p><code>core::mem::drop_in_place</code></p>",
        "id": 190292268,
        "sender_full_name": "eddyb",
        "timestamp": 1583939552
    },
    {
        "content": "<p>ok, so, one \"more proper\" refactoring would be to extend <code>InstanceDef</code> with variants for all the major categories -- e.g., <code>DropAdt(DefId), DropTrivial, DropClosure</code> -- that's... probably it, actually.  Separately, if types were somewhat better factored (actually, more the way that chalk factors them), then we might just have <code>DropType(ApplicationTy)</code></p>",
        "id": 190292806,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583939789
    },
    {
        "content": "<p>which would capture the \"essential bits\" that we need to generate the code, with everything else coming from the substs</p>",
        "id": 190292864,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583939822
    },
    {
        "content": "<p>(not proposing we do that now, just trying to think what I would <em>expect</em> from the system)</p>",
        "id": 190292932,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583939853
    },
    {
        "content": "<p>yeah but you forgot tuples and arrays :P</p>",
        "id": 190293482,
        "sender_full_name": "eddyb",
        "timestamp": 1583940091
    },
    {
        "content": "<p>there's a reason I'm saying this isn't that easy</p>",
        "id": 190293496,
        "sender_full_name": "eddyb",
        "timestamp": 1583940099
    },
    {
        "content": "<p>and all of this requires <code>Instance::def_id</code> to die too, which is a potentially large amount of work</p>",
        "id": 190293622,
        "sender_full_name": "eddyb",
        "timestamp": 1583940148
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/216091-t-compiler.2Fwg-polymorphization/topic/the.20problem.20with.20drop.20glue.20and.20substs/near/190293482\" title=\"#narrow/stream/216091-t-compiler.2Fwg-polymorphization/topic/the.20problem.20with.20drop.20glue.20and.20substs/near/190293482\">said</a>:</p>\n<blockquote>\n<p>yeah but you forgot tuples and arrays :P</p>\n</blockquote>\n<p>sure, but application ty in chalk covers those :)</p>",
        "id": 190293824,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583940247
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/216091-t-compiler.2Fwg-polymorphization/topic/the.20problem.20with.20drop.20glue.20and.20substs/near/190293622\" title=\"#narrow/stream/216091-t-compiler.2Fwg-polymorphization/topic/the.20problem.20with.20drop.20glue.20and.20substs/near/190293622\">said</a>:</p>\n<blockquote>\n<p>and all of this requires <code>Instance::def_id</code> to die too, which is a potentially large amount of work</p>\n</blockquote>\n<p>why?</p>",
        "id": 190293845,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583940256
    },
    {
        "content": "<p>well, ok, I guess I see why</p>",
        "id": 190293872,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583940269
    },
    {
        "content": "<p>i.e., code that assumes a def-id covers the signature really wants to be using <code>InstanceDef</code>, since there are cases (like the above) that don't have a def-id right now</p>",
        "id": 190293899,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583940286
    },
    {
        "content": "<p>because everything relies on <code>(instance.def_id(), instance.substs)</code> for everything other than the body</p>",
        "id": 190293909,
        "sender_full_name": "eddyb",
        "timestamp": 1583940290
    },
    {
        "content": "<p>another approach that I was considering woul be to extsend the concept of def-id with those things</p>",
        "id": 190293932,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583940296
    },
    {
        "content": "<p>which might be better</p>",
        "id": 190293945,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583940300
    },
    {
        "content": "<p>something something new style intrinsics</p>",
        "id": 190293983,
        "sender_full_name": "eddyb",
        "timestamp": 1583940317
    },
    {
        "content": "<p>which <code>drop_in_place</code> <em>technically</em> is</p>",
        "id": 190294004,
        "sender_full_name": "eddyb",
        "timestamp": 1583940327
    },
    {
        "content": "<p>but you need variadic generics for tuples</p>",
        "id": 190294035,
        "sender_full_name": "eddyb",
        "timestamp": 1583940340
    },
    {
        "content": "<p>at least arrays are doable now yay</p>",
        "id": 190294044,
        "sender_full_name": "eddyb",
        "timestamp": 1583940347
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> btw does this solve your concerns? <a href=\"https://github.com/rust-lang/rust/pull/69036/commits/7727bd9d3053743d0dbb885a0c5e2cc19efa095d\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/69036/commits/7727bd9d3053743d0dbb885a0c5e2cc19efa095d\">https://github.com/rust-lang/rust/pull/69036/commits/7727bd9d3053743d0dbb885a0c5e2cc19efa095d</a></p>",
        "id": 190294118,
        "sender_full_name": "eddyb",
        "timestamp": 1583940376
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/216091-t-compiler.2Fwg-polymorphization/topic/the.20problem.20with.20drop.20glue.20and.20substs/near/190294035\" title=\"#narrow/stream/216091-t-compiler.2Fwg-polymorphization/topic/the.20problem.20with.20drop.20glue.20and.20substs/near/190294035\">said</a>:</p>\n<blockquote>\n<p>but you need variadic generics for tuples</p>\n</blockquote>\n<p>no, you just need <code>Tuple(usize)</code> as the \"instance-def\", so to speak</p>",
        "id": 190294606,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583940607
    },
    {
        "content": "<p>though variadic generics would work too :)</p>",
        "id": 190294676,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583940635
    },
    {
        "content": "<p>if not clear I want a definition in libcore that's both a lang item and an intrinsic at the same time :P</p>",
        "id": 190294721,
        "sender_full_name": "eddyb",
        "timestamp": 1583940658
    },
    {
        "content": "<p>what does libcore have to do with anything?</p>",
        "id": 190294756,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583940674
    },
    {
        "content": "<p>if it even needs to be an intrinsic</p>",
        "id": 190294762,
        "sender_full_name": "eddyb",
        "timestamp": 1583940677
    },
    {
        "content": "<p>I also continue to not understand the difference</p>",
        "id": 190294781,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583940686
    },
    {
        "content": "<p>between a lang-item and an intrinsic</p>",
        "id": 190294787,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583940690
    },
    {
        "content": "<p>and I feel they should be unified :)</p>",
        "id": 190294797,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583940694
    },
    {
        "content": "<p>it's very much a 1 vs many thing</p>",
        "id": 190294822,
        "sender_full_name": "eddyb",
        "timestamp": 1583940701
    },
    {
        "content": "<p>it seems like both are \"things well known to the compiler\"</p>",
        "id": 190294826,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583940704
    },
    {
        "content": "<p>or export vs import</p>",
        "id": 190294835,
        "sender_full_name": "eddyb",
        "timestamp": 1583940708
    },
    {
        "content": "<p>and the reason I want it in libcore is because crateless <code>DefId</code>s are a pandora's box I don't want to open</p>",
        "id": 190294904,
        "sender_full_name": "eddyb",
        "timestamp": 1583940725
    },
    {
        "content": "<p>what is \"it\" even here?</p>",
        "id": 190294935,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583940739
    },
    {
        "content": "<p>ok, I guses I see</p>",
        "id": 190294941,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583940742
    },
    {
        "content": "<p>I guess the question is whether every <code>DefId</code> has to \"originate\" with some source</p>",
        "id": 190295000,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583940768
    },
    {
        "content": "<p>which I was not assuming</p>",
        "id": 190295002,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583940770
    },
    {
        "content": "<p>but even if it is technically associated with libcore</p>",
        "id": 190295027,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583940783
    },
    {
        "content": "<p>just like removing <code>Instance::def_id</code>, it has a large amounts of potential ramifications</p>",
        "id": 190295043,
        "sender_full_name": "eddyb",
        "timestamp": 1583940792
    },
    {
        "content": "<p>it doesn't necessarily have to tie to some declared item</p>",
        "id": 190295045,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583940793
    },
    {
        "content": "<p>anyway it's fine, I don't care to debate it right now</p>",
        "id": 190295108,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583940818
    },
    {
        "content": "<p>though this does seem like a fruitful area to talk over at some point</p>",
        "id": 190295157,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583940836
    },
    {
        "content": "<p>me neither, I'm wasting my time on this, I just want to point out how nontrivial some of this stuff is</p>",
        "id": 190295165,
        "sender_full_name": "eddyb",
        "timestamp": 1583940841
    },
    {
        "content": "<p>as much as I want reforms for every single thing you brought up</p>",
        "id": 190295219,
        "sender_full_name": "eddyb",
        "timestamp": 1583940851
    },
    {
        "content": "<p>I feel like library-ification can help as a forcing function in some sense, though it's orthogonal</p>",
        "id": 190295254,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583940867
    },
    {
        "content": "<p>because I'd like us to be establishing \"core concepts\" that are as clean-and-simple and uniform as we can make them</p>",
        "id": 190295315,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583940903
    },
    {
        "content": "<p>anyway definitely non-trivial</p>",
        "id": 190295328,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583940915
    }
]