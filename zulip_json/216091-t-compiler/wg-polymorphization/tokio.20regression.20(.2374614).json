[
    {
        "content": "<p>First bug with polymorphisation - <a href=\"https://github.com/rust-lang/rust/issues/74614\">#74614</a></p>",
        "id": 204640191,
        "sender_full_name": "davidtwco",
        "timestamp": 1595405856
    },
    {
        "content": "<p>As far as I can tell from looking at the backtrace is that weâ€™re incorrectly considering a constant unused somewhere.</p>",
        "id": 204640286,
        "sender_full_name": "davidtwco",
        "timestamp": 1595405908
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> oh, promoteds!</p>",
        "id": 204640851,
        "sender_full_name": "eddyb",
        "timestamp": 1595406381
    },
    {
        "content": "<p>I don't think you're visiting promoteds at all /facepalm</p>",
        "id": 204640855,
        "sender_full_name": "eddyb",
        "timestamp": 1595406393
    },
    {
        "content": "<p>although it's kind of weird that it doesn't just look like the use of the promoted uses all generic parameters, regardless of the contents</p>",
        "id": 204640907,
        "sender_full_name": "eddyb",
        "timestamp": 1595406440
    },
    {
        "content": "<p>like I would expect <code>fn foo&lt;X, Y&gt;() -&gt; &amp;'static i32 { &amp;0 }</code> to turn into <code>_0 = foo::&lt;X, Y&gt;::promoted0; return;</code></p>",
        "id": 204640996,
        "sender_full_name": "eddyb",
        "timestamp": 1595406486
    },
    {
        "content": "<p>related? <a href=\"https://github.com/rust-lang/rust/issues/67176\">https://github.com/rust-lang/rust/issues/67176</a></p>",
        "id": 204641006,
        "sender_full_name": "oli",
        "timestamp": 1595406492
    },
    {
        "content": "<p>yeah I would expect us to be overly conservative, not the other way around</p>",
        "id": 204641035,
        "sender_full_name": "eddyb",
        "timestamp": 1595406524
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> do we use <code>ty::Const</code> for an use of a promoted in the parent fn?</p>",
        "id": 204641051,
        "sender_full_name": "eddyb",
        "timestamp": 1595406541
    },
    {
        "content": "<p>yes</p>",
        "id": 204641066,
        "sender_full_name": "oli",
        "timestamp": 1595406551
    },
    {
        "content": "<p>I guess I can check</p>",
        "id": 204641082,
        "sender_full_name": "eddyb",
        "timestamp": 1595406572
    },
    {
        "content": "<p>I should be able to even repro the bug</p>",
        "id": 204641099,
        "sender_full_name": "eddyb",
        "timestamp": 1595406590
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/transform/promote_consts.rs#L951\">https://github.com/rust-lang/rust/blob/master/src/librustc_mir/transform/promote_consts.rs#L951</a></p>",
        "id": 204641154,
        "sender_full_name": "oli",
        "timestamp": 1595406607
    },
    {
        "content": "<p>I think your promtoed needs to depend on the generic parameter</p>",
        "id": 204641206,
        "sender_full_name": "oli",
        "timestamp": 1595406661
    },
    {
        "content": "<p>otherwise it's gonna eval successfully polymorphically</p>",
        "id": 204641215,
        "sender_full_name": "oli",
        "timestamp": 1595406669
    },
    {
        "content": "<p>hmm I see</p>",
        "id": 204641244,
        "sender_full_name": "eddyb",
        "timestamp": 1595406691
    },
    {
        "content": "<p>though <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=64b7aeea9d75674707591c9a8cc1ba75\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=64b7aeea9d75674707591c9a8cc1ba75</a> works, ... so idk</p>",
        "id": 204641377,
        "sender_full_name": "oli",
        "timestamp": 1595406804
    },
    {
        "content": "<p>playground is too old :(((</p>",
        "id": 204641402,
        "sender_full_name": "eddyb",
        "timestamp": 1595406841
    },
    {
        "content": "<p>I hate when this happens</p>",
        "id": 204641442,
        "sender_full_name": "eddyb",
        "timestamp": 1595406845
    },
    {
        "content": "<p>ah</p>",
        "id": 204641446,
        "sender_full_name": "oli",
        "timestamp": 1595406849
    },
    {
        "content": "<p>well, in that case it may be my program causes the same failure</p>",
        "id": 204641456,
        "sender_full_name": "oli",
        "timestamp": 1595406858
    },
    {
        "content": "<p>but I thought we had tests like this in our test suite</p>",
        "id": 204641467,
        "sender_full_name": "oli",
        "timestamp": 1595406868
    },
    {
        "content": "<p>I have a smaller repro, arguably, if it does repro</p>",
        "id": 204641475,
        "sender_full_name": "eddyb",
        "timestamp": 1595406876
    },
    {
        "content": "<p>I guess I can update nightly locally and try</p>",
        "id": 204641487,
        "sender_full_name": "eddyb",
        "timestamp": 1595406888
    },
    {
        "content": "<blockquote>\n<p>info: skipping nightly which is missing installed component 'rustfmt-preview'</p>\n</blockquote>",
        "id": 204641519,
        "sender_full_name": "eddyb",
        "timestamp": 1595406906
    },
    {
        "content": "<p>ah that's why <em>sigh</em></p>",
        "id": 204641522,
        "sender_full_name": "eddyb",
        "timestamp": 1595406909
    },
    {
        "content": "<p>how can we install nightlies with broken components</p>",
        "id": 204641529,
        "sender_full_name": "lcnr",
        "timestamp": 1595406917
    },
    {
        "content": "<p>the last viable for me is 2020-07-11 rn</p>",
        "id": 204641538,
        "sender_full_name": "lcnr",
        "timestamp": 1595406926
    },
    {
        "content": "<p>I just removed the component :P</p>",
        "id": 204641554,
        "sender_full_name": "eddyb",
        "timestamp": 1595406939
    },
    {
        "content": "<p>although somehow playground has a nightly with a broken rustfmt huh. it's just an older one</p>",
        "id": 204641625,
        "sender_full_name": "eddyb",
        "timestamp": 1595406967
    },
    {
        "content": "<p><code>rustc 1.47.0-nightly (8ad7bc3f4 2020-07-21)</code> should have it but I can't repro</p>",
        "id": 204641737,
        "sender_full_name": "eddyb",
        "timestamp": 1595407072
    },
    {
        "content": "<p>should it? we landed that pr on the 21st</p>",
        "id": 204641793,
        "sender_full_name": "lcnr",
        "timestamp": 1595407097
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/commits/8ad7bc3f428300aee6764f6e23527e19eb235e81\">https://github.com/rust-lang/rust/commits/8ad7bc3f428300aee6764f6e23527e19eb235e81</a></p>",
        "id": 204641811,
        "sender_full_name": "eddyb",
        "timestamp": 1595407107
    },
    {
        "content": "<p>it's not the 21 nightly, it's the 22 nightly. but the last commit is from 21 (which is what the date indicates, it's the date of the commit hash)</p>",
        "id": 204641837,
        "sender_full_name": "eddyb",
        "timestamp": 1595407129
    },
    {
        "content": "<p>ah, til</p>",
        "id": 204641860,
        "sender_full_name": "lcnr",
        "timestamp": 1595407152
    },
    {
        "content": "<p>in my own testcase, <code>bar</code> has <code>_1 = const bar::&lt;X, Y&gt;::promoted[0];</code> so yeah I would expect polymorphization to see that</p>",
        "id": 204641870,
        "sender_full_name": "eddyb",
        "timestamp": 1595407161
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> yours doesn't repro either</p>",
        "id": 204641890,
        "sender_full_name": "eddyb",
        "timestamp": 1595407183
    },
    {
        "content": "<p>why does <code>#[rustc_polymorphize_error]</code> not trigger?</p>",
        "id": 204642175,
        "sender_full_name": "eddyb",
        "timestamp": 1595407414
    },
    {
        "content": "<p>shouldn't it tell me the result of the analysis?</p>",
        "id": 204642252,
        "sender_full_name": "eddyb",
        "timestamp": 1595407460
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/216091-t-compiler.2Fwg-polymorphization/topic/progress.20updates/near/204642175\">said</a>:</p>\n<blockquote>\n<p>why does <code>#[rustc_polymorphize_error]</code> not trigger?</p>\n</blockquote>\n<p>doesn't that only emit errors for unused params</p>",
        "id": 204642282,
        "sender_full_name": "lcnr",
        "timestamp": 1595407483
    },
    {
        "content": "<p>so if all params are used this does nothing</p>",
        "id": 204642296,
        "sender_full_name": "lcnr",
        "timestamp": 1595407491
    },
    {
        "content": "<p>ah okay</p>",
        "id": 204642312,
        "sender_full_name": "eddyb",
        "timestamp": 1595407500
    },
    {
        "content": "<p>alright yeah I can see that in action</p>",
        "id": 204642375,
        "sender_full_name": "eddyb",
        "timestamp": 1595407561
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> oh this might be a red herring, it could just be whatever's calling that <code>vtable</code> function</p>",
        "id": 204642657,
        "sender_full_name": "eddyb",
        "timestamp": 1595407702
    },
    {
        "content": "<p>maybe it's a cross-crate thing</p>",
        "id": 204643048,
        "sender_full_name": "eddyb",
        "timestamp": 1595407944
    },
    {
        "content": "<p>Will be at my computer to catch up in a moment</p>",
        "id": 204643056,
        "sender_full_name": "davidtwco",
        "timestamp": 1595407948
    },
    {
        "content": "<p>so we get an ice in async task, but all tests seem to pass, interesting <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 204643090,
        "sender_full_name": "lcnr",
        "timestamp": 1595407979
    },
    {
        "content": "<p>presumably you can just compile tokio with <code>#[rustc_polymorphize_error]</code> on that function</p>",
        "id": 204643100,
        "sender_full_name": "eddyb",
        "timestamp": 1595407988
    },
    {
        "content": "<p>maybe our cross-crate encoding is subtly broken?</p>",
        "id": 204643129,
        "sender_full_name": "eddyb",
        "timestamp": 1595408019
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> oh dear that ICE is terrible</p>",
        "id": 204643276,
        "sender_full_name": "eddyb",
        "timestamp": 1595408107
    },
    {
        "content": "<p>it's using the span of the constant <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/monomorphize/collector.rs#L625-L630\">https://github.com/rust-lang/rust/blob/master/src/librustc_mir/monomorphize/collector.rs#L625-L630</a></p>",
        "id": 204643300,
        "sender_full_name": "eddyb",
        "timestamp": 1595408128
    },
    {
        "content": "<p>so this is an use of <code>vtable</code> in another crate</p>",
        "id": 204643303,
        "sender_full_name": "eddyb",
        "timestamp": 1595408135
    },
    {
        "content": "<p>although it might still be the promoted. hmm. we just don't know</p>",
        "id": 204643423,
        "sender_full_name": "eddyb",
        "timestamp": 1595408205
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> so first thing I'd suggest doing is fixing this <a href=\"https://github.com/rust-lang/rust/issues/74614#issuecomment-662333759\">https://github.com/rust-lang/rust/issues/74614#issuecomment-662333759</a></p>",
        "id": 204643628,
        "sender_full_name": "eddyb",
        "timestamp": 1595408362
    },
    {
        "content": "<p>alright, will do that</p>",
        "id": 204644214,
        "sender_full_name": "davidtwco",
        "timestamp": 1595408825
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> sorry for the delay, turns out I broke my entire system last night and didn't realise, fixed now:</p>\n<div class=\"codehilite\"><pre><span></span><code>error: internal compiler error: src/librustc_mir/monomorphize/collector.rs:629:54: collection encountered polymorphic constant: Const { ty: &amp;tokio::runtime::task::raw::Vtable, val: Unevaluated(WithOptConstParam { did: DefId(34:3328 ~ tokio[1cd5]::runtime[0]::task[0]::raw[0]::vtable[0]), const_param_did: None }, [T, S], Some(promoted[0])) }\n  --&gt; /home/david/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.2.22/src/runtime/task/raw.rs:31:5\n   |\n31 | /     &amp;Vtable {\n32 | |         poll: poll::&lt;T, S&gt;,\n33 | |         dealloc: dealloc::&lt;T, S&gt;,\n34 | |         try_read_output: try_read_output::&lt;T, S&gt;,\n35 | |         drop_join_handle_slow: drop_join_handle_slow::&lt;T, S&gt;,\n36 | |         shutdown: shutdown::&lt;T, S&gt;,\n37 | |     }\n   | |_____^\n</code></pre></div>",
        "id": 204645662,
        "sender_full_name": "davidtwco",
        "timestamp": 1595409981
    },
    {
        "content": "<p>uhhhh how did you get that?</p>",
        "id": 204645682,
        "sender_full_name": "eddyb",
        "timestamp": 1595410013
    },
    {
        "content": "<p>that debug output</p>",
        "id": 204645699,
        "sender_full_name": "eddyb",
        "timestamp": 1595410029
    },
    {
        "content": "<p>that's the <code>self.body.source_info(location).span</code></p>",
        "id": 204645706,
        "sender_full_name": "davidtwco",
        "timestamp": 1595410034
    },
    {
        "content": "<p>and <code>*constant</code> in the message</p>",
        "id": 204645713,
        "sender_full_name": "davidtwco",
        "timestamp": 1595410039
    },
    {
        "content": "<p>remove the star :P</p>",
        "id": 204645723,
        "sender_full_name": "eddyb",
        "timestamp": 1595410045
    },
    {
        "content": "<p>or print both forms, but the \"pretty\" one is more immediately useful</p>",
        "id": 204645764,
        "sender_full_name": "eddyb",
        "timestamp": 1595410070
    },
    {
        "content": "<p>SO <code>[T, S]</code> is obviously wrong here <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 204645879,
        "sender_full_name": "lcnr",
        "timestamp": 1595410147
    },
    {
        "content": "<p>so anyway I suspect that if you put <code>#[rustc_polymorphize_error]</code> on the function it won't trigger</p>",
        "id": 204645908,
        "sender_full_name": "eddyb",
        "timestamp": 1595410180
    },
    {
        "content": "<p><a href=\"https://github.com/tokio-rs/tokio/blob/21f726041cf9a4ca408d97394af220caf90312ed/tokio/src/runtime/task/raw.rs#L30-L38\">https://github.com/tokio-rs/tokio/blob/21f726041cf9a4ca408d97394af220caf90312ed/tokio/src/runtime/task/raw.rs#L30-L38</a></p>",
        "id": 204645912,
        "sender_full_name": "davidtwco",
        "timestamp": 1595410184
    },
    {
        "content": "<p>mostly because I can't get it to reproduce</p>",
        "id": 204645918,
        "sender_full_name": "eddyb",
        "timestamp": 1595410188
    },
    {
        "content": "<p>it doesn't trigger, tried myself <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 204645970,
        "sender_full_name": "lcnr",
        "timestamp": 1595410205
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error: internal compiler error: src/librustc_mir/monomorphize/collector.rs:629:54: collection encountered polymorphic constant: tokio::runtime::task::raw::vtable::&lt;T, S&gt;::promoted[0]\n  --&gt; /home/david/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.2.22/src/runtime/task/raw.rs:31:5\n   |\n31 | /     &amp;Vtable {\n32 | |         poll: poll::&lt;T, S&gt;,\n33 | |         dealloc: dealloc::&lt;T, S&gt;,\n34 | |         try_read_output: try_read_output::&lt;T, S&gt;,\n35 | |         drop_join_handle_slow: drop_join_handle_slow::&lt;T, S&gt;,\n36 | |         shutdown: shutdown::&lt;T, S&gt;,\n37 | |     }\n   | |_____^\n</code></pre></div>",
        "id": 204645990,
        "sender_full_name": "davidtwco",
        "timestamp": 1595410231
    },
    {
        "content": "<p>this is what I was using to look at the source btw <a href=\"https://github.com/tokio-rs/tokio/blob/tokio-0.2.22/tokio/src/runtime/task/raw.rs#L30-L38\">https://github.com/tokio-rs/tokio/blob/tokio-0.2.22/tokio/src/runtime/task/raw.rs#L30-L38</a></p>",
        "id": 204646133,
        "sender_full_name": "eddyb",
        "timestamp": 1595410342
    },
    {
        "content": "<p>(specifically the version tag)</p>",
        "id": 204646165,
        "sender_full_name": "eddyb",
        "timestamp": 1595410377
    },
    {
        "content": "<p>I also don't get an error when annotating that function - <a href=\"http://sprunge.us/SYA96e\">http://sprunge.us/SYA96e</a> has its promoted MIR</p>",
        "id": 204646574,
        "sender_full_name": "davidtwco",
        "timestamp": 1595410767
    },
    {
        "content": "<p>yeah that makes sense. your analysis never sees this MIR AFAIK anwyay</p>",
        "id": 204646597,
        "sender_full_name": "eddyb",
        "timestamp": 1595410801
    },
    {
        "content": "<p>but the original MIR mentions <code>T</code> and <code>S</code></p>",
        "id": 204646639,
        "sender_full_name": "eddyb",
        "timestamp": 1595410809
    },
    {
        "content": "<p>so the problem is the cross-crate instantiation. maybe the <code>unused_generic_params</code> gets misinterpreted cross-crate?</p>",
        "id": 204646650,
        "sender_full_name": "eddyb",
        "timestamp": 1595410831
    },
    {
        "content": "<p>not sure if this is a repro for the same issue, but very related: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=27ddd7a5172f11db6e40f3e6a82ff50b\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=27ddd7a5172f11db6e40f3e6a82ff50b</a></p>",
        "id": 204647101,
        "sender_full_name": "oli",
        "timestamp": 1595411239
    },
    {
        "content": "<p>this has a linker error in today's nightly, but not on playground nightly</p>",
        "id": 204647120,
        "sender_full_name": "oli",
        "timestamp": 1595411260
    },
    {
        "content": "<p>you can <del>probably</del> (yea you can, tested) replace the <code>f</code> field's type with <code>PhantomData</code> and get the same result</p>",
        "id": 204647201,
        "sender_full_name": "oli",
        "timestamp": 1595411316
    },
    {
        "content": "<p>I have a call in 10 minutes so I'll have to stop digging into this then for ~1hr.</p>",
        "id": 204647355,
        "sender_full_name": "davidtwco",
        "timestamp": 1595411445
    },
    {
        "content": "<p>further simplification:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">fop</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nb\">&#39;static</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">&amp;</span><span class=\"p\">(</span><span class=\"n\">fop</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">bar</span>::<span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">bar</span>::<span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 204647512,
        "sender_full_name": "oli",
        "timestamp": 1595411598
    },
    {
        "content": "<p>.... that's my repro lmao</p>",
        "id": 204647527,
        "sender_full_name": "eddyb",
        "timestamp": 1595411613
    },
    {
        "content": "<p>why did I not think to try more than one instantiation /facepalm</p>",
        "id": 204647547,
        "sender_full_name": "eddyb",
        "timestamp": 1595411629
    },
    {
        "content": "<p>(well, I know why, I was too focused on the bug here, not some other linker thing from multiple instantiations)</p>",
        "id": 204647637,
        "sender_full_name": "eddyb",
        "timestamp": 1595411672
    },
    {
        "content": "<p>the multi-instantiation doesn't change anything?</p>",
        "id": 204647657,
        "sender_full_name": "oli",
        "timestamp": 1595411692
    },
    {
        "content": "<p>if you remove one of the <code>bar</code> instances you get something I tried</p>",
        "id": 204647676,
        "sender_full_name": "eddyb",
        "timestamp": 1595411710
    },
    {
        "content": "<p>I thought it would, but I'm getting undefined reference, not duplicate symbol</p>",
        "id": 204647680,
        "sender_full_name": "oli",
        "timestamp": 1595411711
    },
    {
        "content": "<p>which, for me, didn't do anything weird</p>",
        "id": 204647705,
        "sender_full_name": "eddyb",
        "timestamp": 1595411726
    },
    {
        "content": "<p>nope</p>",
        "id": 204647711,
        "sender_full_name": "oli",
        "timestamp": 1595411731
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>  = note: /usr/bin/ld: /home/oliver/foo/target/debug/deps/foo-131d2e4b307e33df.1ocxrrfk7nbb4m82.rcgu.o:(.data.rel.ro..L__unnamed_2+0x0): undefined reference to `foo::fop&#39;\n          /usr/bin/ld: /home/oliver/foo/target/debug/deps/foo-131d2e4b307e33df: hidden symbol `_ZN3foo3fop17hade81fe2ae460f25E&#39; isn&#39;t defined\n</code></pre></div>",
        "id": 204647716,
        "sender_full_name": "oli",
        "timestamp": 1595411736
    },
    {
        "content": "<p>with one <code>bar</code> instantiation?</p>",
        "id": 204647737,
        "sender_full_name": "eddyb",
        "timestamp": 1595411749
    },
    {
        "content": "<p>same thing as I got, just one less undefined reference</p>",
        "id": 204647738,
        "sender_full_name": "oli",
        "timestamp": 1595411751
    },
    {
        "content": "<p>yes</p>",
        "id": 204647740,
        "sender_full_name": "oli",
        "timestamp": 1595411752
    },
    {
        "content": "<p>but that's.... just... something I tried. what</p>",
        "id": 204647788,
        "sender_full_name": "eddyb",
        "timestamp": 1595411764
    },
    {
        "content": "<p>with both:</p>\n<div class=\"codehilite\"><pre><span></span><code>  = note: /usr/bin/ld: /home/oliver/foo/target/debug/deps/foo-131d2e4b307e33df.1ocxrrfk7nbb4m82.rcgu.o:(.data.rel.ro..L__unnamed_3+0x0): undefined reference to `foo::fop&#39;\n          /usr/bin/ld: /home/oliver/foo/target/debug/deps/foo-131d2e4b307e33df.1ocxrrfk7nbb4m82.rcgu.o:(.data.rel.ro..L__unnamed_4+0x0): undefined reference to `foo::fop&#39;\n          /usr/bin/ld: /home/oliver/foo/target/debug/deps/foo-131d2e4b307e33df: hidden symbol `_ZN3foo3fop17hade81fe2ae460f25E&#39; isn&#39;t defined\n</code></pre></div>",
        "id": 204647794,
        "sender_full_name": "oli",
        "timestamp": 1595411770
    },
    {
        "content": "<p>I get the same as <span class=\"user-mention silent\" data-user-id=\"124288\">oli</span></p>",
        "id": 204647807,
        "sender_full_name": "davidtwco",
        "timestamp": 1595411784
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>~/foo (master|â€¦) [101] $ rustc --version\nrustc 1.47.0-nightly (8ad7bc3f4 2020-07-21)\n</code></pre></div>",
        "id": 204647808,
        "sender_full_name": "oli",
        "timestamp": 1595411784
    },
    {
        "content": "<p>oh ugh you're using cargo</p>",
        "id": 204647812,
        "sender_full_name": "eddyb",
        "timestamp": 1595411788
    },
    {
        "content": "<p>hahaha</p>",
        "id": 204647821,
        "sender_full_name": "oli",
        "timestamp": 1595411796
    },
    {
        "content": "<p>with a local build and invoking rustc directly</p>",
        "id": 204647829,
        "sender_full_name": "davidtwco",
        "timestamp": 1595411802
    },
    {
        "content": "<p>let me try to find where exactly the difference is, this is frustrating</p>",
        "id": 204647845,
        "sender_full_name": "eddyb",
        "timestamp": 1595411822
    },
    {
        "content": "<p>invoking rustc directly:</p>\n<div class=\"codehilite\"><pre><span></span><code>  = note: /usr/bin/ld: main.main.7rcbfp3g-cgu.0.rcgu.o:(.data.rel.ro..L__unnamed_3+0x0): undefined reference to `main::fop&#39;\n          /usr/bin/ld: main.main.7rcbfp3g-cgu.0.rcgu.o:(.data.rel.ro..L__unnamed_4+0x0): undefined reference to `main::fop&#39;\n          /usr/bin/ld: main: hidden symbol `_ZN4main3fop17hd551d777c2e8d68aE&#39; isn&#39;t defined\n</code></pre></div>",
        "id": 204647860,
        "sender_full_name": "oli",
        "timestamp": 1595411832
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> fun thing to try: add <code>-Z symbol-mangling-version=v0</code></p>",
        "id": 204647876,
        "sender_full_name": "eddyb",
        "timestamp": 1595411850
    },
    {
        "content": "<p>(same with one invocation</p>",
        "id": 204647878,
        "sender_full_name": "oli",
        "timestamp": 1595411851
    },
    {
        "content": "<p>anyway, I need to run briefly - I don't understand enough about how we do constants/promoteds to be very useful at the moment anyway.</p>",
        "id": 204647884,
        "sender_full_name": "davidtwco",
        "timestamp": 1595411857
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> I doubt that's the problem, since the parameters are treated as used correctly</p>",
        "id": 204647900,
        "sender_full_name": "eddyb",
        "timestamp": 1595411876
    },
    {
        "content": "<p>because they show up in the use of the promoted in the parent function</p>",
        "id": 204647948,
        "sender_full_name": "eddyb",
        "timestamp": 1595411885
    },
    {
        "content": "<p>that flag just makes the output worse</p>",
        "id": 204647949,
        "sender_full_name": "oli",
        "timestamp": 1595411885
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>  = note: /usr/bin/ld: main.main.7rcbfp3g-cgu.0.rcgu.o:(.data.rel.ro..L__unnamed_2+0x0): undefined reference to `_RINvCs4fqI2P2rA04_4main3fopmEB2_&#39;\n          /usr/bin/ld: main: hidden symbol `_RINvCs4fqI2P2rA04_4main3fopmEB2_&#39; isn&#39;t defined\n</code></pre></div>",
        "id": 204647952,
        "sender_full_name": "oli",
        "timestamp": 1595411889
    },
    {
        "content": "<p>so we're just being conservative</p>",
        "id": 204647953,
        "sender_full_name": "eddyb",
        "timestamp": 1595411890
    },
    {
        "content": "<p>what are you calling \"worse\"? :P</p>",
        "id": 204647974,
        "sender_full_name": "eddyb",
        "timestamp": 1595411906
    },
    {
        "content": "<p>not demangled by the linker <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61d\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 204647994,
        "sender_full_name": "oli",
        "timestamp": 1595411917
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> oh actually this helps lmao</p>",
        "id": 204648012,
        "sender_full_name": "eddyb",
        "timestamp": 1595411935
    },
    {
        "content": "<p>see the <code>E</code> at the end? that ends a list of generic parameters. run that through <code>rustfilt</code></p>",
        "id": 204648030,
        "sender_full_name": "eddyb",
        "timestamp": 1595411954
    },
    {
        "content": "<p>(<code>cargo install rustfilt</code> if you haven't already)</p>",
        "id": 204648039,
        "sender_full_name": "eddyb",
        "timestamp": 1595411963
    },
    {
        "content": "<p>I bet you <code>m</code> is the mangling of <code>u32</code></p>",
        "id": 204648059,
        "sender_full_name": "eddyb",
        "timestamp": 1595411982
    },
    {
        "content": "<p><code>main::fop::&lt;u32&gt;</code></p>",
        "id": 204648072,
        "sender_full_name": "lcnr",
        "timestamp": 1595412001
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>~/foo (master|â€¦) $ rustfilt _RINvCs4fqI2P2rA04_4main3foplEB2_\nmain::fop::&lt;i32&gt;\n~/foo (master|â€¦) $ rustfilt _RINvCs4fqI2P2rA04_4main3fopmEB2_\nmain::fop::&lt;u32&gt;\n</code></pre></div>",
        "id": 204648153,
        "sender_full_name": "oli",
        "timestamp": 1595412037
    },
    {
        "content": "<p>neat</p>",
        "id": 204648156,
        "sender_full_name": "oli",
        "timestamp": 1595412039
    },
    {
        "content": "<p>yeah so something is using the non-generic <code>Instance</code></p>",
        "id": 204648185,
        "sender_full_name": "eddyb",
        "timestamp": 1595412057
    },
    {
        "content": "<p>so we currently don't polymorphize in const eval?</p>",
        "id": 204648189,
        "sender_full_name": "lcnr",
        "timestamp": 1595412060
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> wow I can't believe I didn't try one of the things I had tried on playground</p>",
        "id": 204648203,
        "sender_full_name": "eddyb",
        "timestamp": 1595412073
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> it's not that, I think perhaps we don't polymorphize the <em>output</em> of const eval</p>",
        "id": 204648214,
        "sender_full_name": "eddyb",
        "timestamp": 1595412093
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> I had added a use of <code>T</code> to my <code>foo</code> in the hopes of triggering something</p>",
        "id": 204648226,
        "sender_full_name": "eddyb",
        "timestamp": 1595412119
    },
    {
        "content": "<p>/me shakes fist at playground not instantly updating to latest nightly</p>",
        "id": 204648285,
        "sender_full_name": "eddyb",
        "timestamp": 1595412139
    },
    {
        "content": "<p>presumably here? <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_codegen_llvm/common.rs#L259\">https://github.com/rust-lang/rust/blob/master/src/librustc_codegen_llvm/common.rs#L259</a></p>",
        "id": 204648484,
        "sender_full_name": "eddyb",
        "timestamp": 1595412314
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> you can try adding a <code>.polymorphize()</code> on the RHS of that arm</p>",
        "id": 204648555,
        "sender_full_name": "eddyb",
        "timestamp": 1595412363
    },
    {
        "content": "<p>am trying it out</p>",
        "id": 204648570,
        "sender_full_name": "lcnr",
        "timestamp": 1595412375
    },
    {
        "content": "<p>thanks <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> !</p>",
        "id": 204648580,
        "sender_full_name": "oli",
        "timestamp": 1595412390
    },
    {
        "content": "<p>I doubt this will actually fix the problem in <code>tokio</code> though, which occurs in the collector</p>",
        "id": 204648590,
        "sender_full_name": "eddyb",
        "timestamp": 1595412406
    },
    {
        "content": "<p>we don't know what instantiates <code>fn vtable</code>, the bug might be entirely there</p>",
        "id": 204648611,
        "sender_full_name": "eddyb",
        "timestamp": 1595412431
    },
    {
        "content": "<p>works with this change</p>",
        "id": 204648749,
        "sender_full_name": "lcnr",
        "timestamp": 1595412540
    },
    {
        "content": "<p>there are some other uses of <code>GlobalAlloc::Function</code> which somewhat worry me</p>",
        "id": 204648806,
        "sender_full_name": "lcnr",
        "timestamp": 1595412600
    },
    {
        "content": "<p>will try to build reqwest with this change for now</p>",
        "id": 204648862,
        "sender_full_name": "lcnr",
        "timestamp": 1595412613
    },
    {
        "content": "<p>only relevant outside miri</p>",
        "id": 204648867,
        "sender_full_name": "eddyb",
        "timestamp": 1595412616
    },
    {
        "content": "<p>The collector has an invocation, too, maybe you can trigger it by making the repro example a library instead of a binary</p>",
        "id": 204648891,
        "sender_full_name": "oli",
        "timestamp": 1595412650
    },
    {
        "content": "<p>(and making the <code>bar</code> function public)</p>",
        "id": 204648906,
        "sender_full_name": "oli",
        "timestamp": 1595412668
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">GlobalAlloc</span>::<span class=\"n\">Function</span><span class=\"p\">(</span><span class=\"n\">fn_instance</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">should_codegen_locally</span><span class=\"p\">(</span><span class=\"n\">tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">fn_instance</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">trace</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;collecting {:?} with {:#?}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">alloc_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fn_instance</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">output</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">create_fn_mono_item</span><span class=\"p\">(</span><span class=\"n\">tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fn_instance</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">DUMMY_SP</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 204649002,
        "sender_full_name": "lcnr",
        "timestamp": 1595412739
    },
    {
        "content": "<p>does <code>create_fn_mono_item</code> not call <code>polymorphize</code>?</p>",
        "id": 204649018,
        "sender_full_name": "eddyb",
        "timestamp": 1595412755
    },
    {
        "content": "<p>afk for a few minutes</p>",
        "id": 204649019,
        "sender_full_name": "lcnr",
        "timestamp": 1595412756
    },
    {
        "content": "<p>hmm... no</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">fop</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"sd\">/// ```rust</span>\n<span class=\"sd\">/// (foo::FN)()</span>\n<span class=\"sd\">/// ```</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">FN</span>: <span class=\"kp\">&amp;</span><span class=\"nb\">&#39;static</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">(</span><span class=\"n\">fop</span>::<span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">FN2</span>: <span class=\"kp\">&amp;</span><span class=\"nb\">&#39;static</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">(</span><span class=\"n\">fop</span>::<span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">());</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>just has the same linker error</p>",
        "id": 204649109,
        "sender_full_name": "oli",
        "timestamp": 1595412851
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/216091-t-compiler.2Fwg-polymorphization/topic/progress.20updates/near/204649018\">said</a>:</p>\n<blockquote>\n<p>does <code>create_fn_mono_item</code> not call <code>polymorphize</code>?</p>\n</blockquote>\n<p>yea, I didn't think about that</p>",
        "id": 204649117,
        "sender_full_name": "oli",
        "timestamp": 1595412861
    },
    {
        "content": "<p>just renamed the topic, I was getting really  tired of \"progress updates\". hopefully nobody minds ^_^</p>",
        "id": 204650422,
        "sender_full_name": "eddyb",
        "timestamp": 1595413966
    },
    {
        "content": "<p>reqwest ice is still there though</p>",
        "id": 204650959,
        "sender_full_name": "lcnr",
        "timestamp": 1595414503
    },
    {
        "content": "<p>opened <a href=\"https://github.com/rust-lang/rust/issues/74623\">#74623</a> with the current state</p>",
        "id": 204651567,
        "sender_full_name": "lcnr",
        "timestamp": 1595414996
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error: internal compiler error: src/librustc_mir/monomorphize/collector.rs:629:54: collection encountered polymorphic constant:\nConst {\nty: &amp;tokio::runtime::task::raw::Vtable,\nval: Unevaluated(WithOptConstParam {\n    did: DefId(34:3328 ~ tokio[1cd5]::runtime[0]::task[0]::raw[0]::vtable[0]), const_param_did: None },\n    [T, S],\n    Some(promoted[0])) },\nsubstituted_constant:\nConst {\nty: &amp;tokio::runtime::task::raw::Vtable,\nval: Unevaluated(WithOptConstParam {\n    did: DefId(34:3328 ~ tokio[1cd5]::runtime[0]::task[0]::raw[0]::vtable[0]), const_param_did: None },\n    [\n        futures_util::future::Map&lt;futures_util::future::PollFn&lt;[closure@hyper::Client::&lt;C, B&gt;::send_request::{{closure}}#0::{{closure}}#2::{{closure}}#0 0:hyper::client::pool::Pooled&lt;hyper::client::PoolClient&lt;async_impl::body::ImplStream&gt;&gt;]&gt;\n, [closure@hyper::Client::&lt;C, B&gt;::send_request::{{closure}}#0::{{closure}}#2::{{closure}}#1 0:futures_channel::oneshot::Sender&lt;hyper::common::never::Never&gt;]&gt;, std::sync::Arc&lt;tokio::runtime::basic_scheduler::Shared&gt;\n], Some(promoted[0]))\n}\n</code></pre></div>",
        "id": 204652976,
        "sender_full_name": "lcnr",
        "timestamp": 1595416382
    },
    {
        "content": "<p><span aria-label=\"laughter tears\" class=\"emoji emoji-1f602\" role=\"img\" title=\"laughter tears\">:laughter_tears:</span> nice, I always knew we needed std::<span aria-label=\"cow\" class=\"emoji emoji-1f404\" role=\"img\" title=\"cow\">:cow:</span>::Cow</p>",
        "id": 204653028,
        "sender_full_name": "lcnr",
        "timestamp": 1595416434
    },
    {
        "content": "<p>The playground canâ€™t update for a reason that will probably shock you:</p>\n<div class=\"codehilite\"><pre><span></span><code>error: internal compiler error: src/librustc_mir/monomorphize/collector.rs:629:54: collection encountered polymorphic constant\n  --&gt; /playground/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.2.21/src/runtime/task/raw.rs:30:1\n   |\n30 | / pub(super) fn vtable&lt;T: Future, S: Schedule&gt;() -&gt; &amp;&#39;static Vtable {\n31 | |     &amp;Vtable {\n32 | |         poll: poll::&lt;T, S&gt;,\n33 | |         dealloc: dealloc::&lt;T, S&gt;,\n...  |\n37 | |     }\n38 | | }\n   | |_^\nthread &#39;rustc&#39; panicked at &#39;Box&lt;Any&gt;&#39;, /rustc/8ad7bc3f428300aee6764f6e23527e19eb235e81/src/libstd/macros.rs:13:23\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\nnote: the compiler unexpectedly panicked. this is a bug.\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&amp;template=ice.md\nnote: rustc 1.47.0-nightly (8ad7bc3f4 2020-07-21) running on x86_64-unknown-linux-gnu\nnote: compiler flags: -C embed-bitcode=no -C codegen-units=1 -C debuginfo=2 --crate-type lib\nnote: some of the compiler flags provided by cargo are hidden\n</code></pre></div>",
        "id": 204653033,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595416441
    },
    {
        "content": "<p><span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 204653248,
        "sender_full_name": "davidtwco",
        "timestamp": 1595416672
    },
    {
        "content": "<p>so from what I see Client is still polymorphic here <code>closure@hyper::Client::&lt;C, B&gt;::send_request::{{closure}}#0::{{closure}}#2::{{closure}}#0</code></p>",
        "id": 204653302,
        "sender_full_name": "lcnr",
        "timestamp": 1595416692
    },
    {
        "content": "<p>the method <a href=\"https://gist.github.com/lcnr/918396773ed18651fb2a0624b08068f6\">https://gist.github.com/lcnr/918396773ed18651fb2a0624b08068f6</a></p>",
        "id": 204653512,
        "sender_full_name": "lcnr",
        "timestamp": 1595416915
    },
    {
        "content": "<p>back now (will have to pop away shortly if I want to eat today but can respond to messages again)</p>",
        "id": 204653727,
        "sender_full_name": "davidtwco",
        "timestamp": 1595417085
    },
    {
        "content": "<p>Care for yourself first and foremost. Tired/hungry brains aren't useful ;-)</p>",
        "id": 204653884,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595417231
    },
    {
        "content": "<p>all def ids used in <code>substituted_constant</code>: <a href=\"https://gist.github.com/lcnr/c81ce3953ecf1d05f867e0c18e1ccc86\">https://gist.github.com/lcnr/c81ce3953ecf1d05f867e0c18e1ccc86</a></p>\n<p>there are a lot of them</p>",
        "id": 204654715,
        "sender_full_name": "lcnr",
        "timestamp": 1595417920
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> just incredible</p>",
        "id": 204655407,
        "sender_full_name": "eddyb",
        "timestamp": 1595418670
    },
    {
        "content": "<p>I guess it's non-trivial to ignore one of those failures, because Cargo expects you'll need all dependencies</p>",
        "id": 204655530,
        "sender_full_name": "eddyb",
        "timestamp": 1595418786
    },
    {
        "content": "<p>We have</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"p\">[</span><span class=\"n\">INFO</span><span class=\"w\">  </span><span class=\"n\">rustc_mir</span>::<span class=\"n\">interpret</span>::<span class=\"n\">step</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">_2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">tokio</span>::<span class=\"n\">runtime</span>::<span class=\"n\">task</span>::<span class=\"n\">raw</span>::<span class=\"n\">poll</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"n\">std</span>::<span class=\"n\">ptr</span>::<span class=\"n\">NonNull</span><span class=\"o\">&lt;</span><span class=\"n\">tokio</span>::<span class=\"n\">runtime</span>::<span class=\"n\">task</span>::<span class=\"n\">core</span>::<span class=\"n\">Header</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">Pointer</span><span class=\"p\">(</span><span class=\"n\">ReifyFnPointer</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"p\">[</span><span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">rustc_mir</span>::<span class=\"n\">interpret</span>::<span class=\"n\">eval_context</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">_2</span>: <span class=\"nc\">is</span><span class=\"w\"> </span><span class=\"n\">uninitialized</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 204656230,
        "sender_full_name": "lcnr",
        "timestamp": 1595419238
    },
    {
        "content": "<p>that's fine, isn't it? the problem much earlier, when <code>fn vtable</code> is instantiated <em>from somewhere</em></p>",
        "id": 204656587,
        "sender_full_name": "eddyb",
        "timestamp": 1595419504
    },
    {
        "content": "<p>miri can probably handle generic function pointers until they're used</p>",
        "id": 204656617,
        "sender_full_name": "eddyb",
        "timestamp": 1595419531
    },
    {
        "content": "<p>Why is <code>U</code> used here?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"cp\">#![feature(rustc_attrs)]</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">test</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v</span>: <span class=\"nc\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[rustc_polymorphize_error]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nb\">&#39;static</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">&amp;</span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">v</span>: <span class=\"nc\">test</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">foo</span>::<span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">foo</span>::<span class=\"o\">&lt;</span><span class=\"kt\">u16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"n\">foo</span>::<span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">().</span><span class=\"n\">v</span><span class=\"p\">)();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 204657624,
        "sender_full_name": "lcnr",
        "timestamp": 1595420202
    },
    {
        "content": "<p>THAT'S NOT FINE</p>",
        "id": 204657852,
        "sender_full_name": "lcnr",
        "timestamp": 1595420364
    },
    {
        "content": "<p>I CAN WALK ON WATER</p>",
        "id": 204657859,
        "sender_full_name": "lcnr",
        "timestamp": 1595420371
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"cp\">#![feature(rustc_attrs)]</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">test</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v</span>: <span class=\"nc\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[rustc_polymorphize_error]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nb\">&#39;static</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">&amp;</span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">v</span>: <span class=\"nc\">test</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">outer</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nb\">&#39;static</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">outer</span>::<span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 204657866,
        "sender_full_name": "lcnr",
        "timestamp": 1595420376
    },
    {
        "content": "<p>nice!</p>",
        "id": 204657948,
        "sender_full_name": "davidtwco",
        "timestamp": 1595420417
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">test</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nb\">&#39;static</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">&amp;</span><span class=\"p\">(</span><span class=\"n\">test</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">outer</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">outer</span>::<span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>minimized</p>",
        "id": 204657975,
        "sender_full_name": "lcnr",
        "timestamp": 1595420438
    },
    {
        "content": "<p>The problem is here <a href=\"https://github.com/rust-lang/rust/blob/4825e12fc9c79954aa0fe18f5521efa6c19c7539/src/librustc_mir/interpret/cast.rs#L49-L52\">https://github.com/rust-lang/rust/blob/4825e12fc9c79954aa0fe18f5521efa6c19c7539/src/librustc_mir/interpret/cast.rs#L49-L52</a></p>",
        "id": 204658072,
        "sender_full_name": "lcnr",
        "timestamp": 1595420510
    },
    {
        "content": "<p>test doesn't have be polymorphized, only <code>|| ()</code></p>",
        "id": 204658537,
        "sender_full_name": "lcnr",
        "timestamp": 1595420857
    },
    {
        "content": "<p>which results in <code>test::&lt;closure@src/main.rs:10:9: 10:14&gt;</code>, with a polymorphized closure</p>",
        "id": 204658637,
        "sender_full_name": "lcnr",
        "timestamp": 1595420917
    },
    {
        "content": "<p>which contains a type parameter, causing the <code>ReifyFnPointer</code> cast to fail</p>",
        "id": 204658660,
        "sender_full_name": "lcnr",
        "timestamp": 1595420932
    },
    {
        "content": "<p>closures are the worst</p>",
        "id": 204658855,
        "sender_full_name": "davidtwco",
        "timestamp": 1595421068
    },
    {
        "content": "<p>eddy helped me fix so many ICEs with polymorphisation and closures</p>",
        "id": 204658873,
        "sender_full_name": "davidtwco",
        "timestamp": 1595421080
    },
    {
        "content": "<p>Why doesn't ice then? Doesn't <code>unused</code> also get polymorphized here?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">unused</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">test</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;type name: {}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">any</span>::<span class=\"n\">type_name</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nb\">&#39;static</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">&amp;</span><span class=\"p\">(</span><span class=\"n\">test</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">outer</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"n\">unused</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">)();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">outer</span>::<span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 204659092,
        "sender_full_name": "lcnr",
        "timestamp": 1595421210
    },
    {
        "content": "<p>foo isn't called?</p>",
        "id": 204659201,
        "sender_full_name": "davidtwco",
        "timestamp": 1595421272
    },
    {
        "content": "<p>so it won't get visited during monomorphisation collection?</p>",
        "id": 204659210,
        "sender_full_name": "davidtwco",
        "timestamp": 1595421281
    },
    {
        "content": "<p>unless this is a library, in which case it would because it's public</p>",
        "id": 204659226,
        "sender_full_name": "davidtwco",
        "timestamp": 1595421295
    },
    {
        "content": "<p>I am now calling foo</p>",
        "id": 204659237,
        "sender_full_name": "lcnr",
        "timestamp": 1595421303
    },
    {
        "content": "<p><span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 204659261,
        "sender_full_name": "davidtwco",
        "timestamp": 1595421325
    },
    {
        "content": "<p>seems like any use of <code>T</code> in <code>outer</code> will stop the ICE</p>",
        "id": 204659438,
        "sender_full_name": "davidtwco",
        "timestamp": 1595421432
    },
    {
        "content": "<p>and <code>unused::&lt;T&gt;</code> qualifies, but adding a <code>std::mem::size_of::&lt;T&gt;()</code> statement before also works</p>",
        "id": 204659491,
        "sender_full_name": "davidtwco",
        "timestamp": 1595421470
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">test</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nb\">&#39;static</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">&amp;</span><span class=\"p\">(</span><span class=\"n\">test</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">outer</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">outer</span>::<span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>causes a linker error - does your PR fix that?</p>",
        "id": 204659586,
        "sender_full_name": "davidtwco",
        "timestamp": 1595421518
    },
    {
        "content": "<p>I've convinced myself that your hypothesis that <code>outer</code>'s polymorphized type parameter being inherited by it's closure, which ends up as <code>T</code> in <code>foo</code>, which participates in the <code>ReifyFnPointer</code> cast causes the ICE is definitely correct. </p>\n<p>My assumption would be that the fix needs to be in the const eval because polymorphisation cannot consider outer's parameter used without being transitive - which isn't possible.</p>",
        "id": 204660565,
        "sender_full_name": "davidtwco",
        "timestamp": 1595422187
    },
    {
        "content": "<p>your example does not ice</p>",
        "id": 204660579,
        "sender_full_name": "lcnr",
        "timestamp": 1595422192
    },
    {
        "content": "<p>yeah, I didn't expect it to ICE with this issue, but it had a linker error for me.</p>",
        "id": 204660645,
        "sender_full_name": "davidtwco",
        "timestamp": 1595422215
    },
    {
        "content": "<p>that one is fixed</p>",
        "id": 204660657,
        "sender_full_name": "lcnr",
        "timestamp": 1595422224
    },
    {
        "content": "<p>wasn't sure if it was the same issue is all</p>",
        "id": 204660668,
        "sender_full_name": "davidtwco",
        "timestamp": 1595422236
    },
    {
        "content": "<blockquote>\n<p>My assumption would be that the fix needs to be in the const eval because polymorphisation cannot consider outer's parameter used without being transitive - which isn't possible.</p>\n</blockquote>\n<p>hmm, can we just disable this check though <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 204660734,
        "sender_full_name": "lcnr",
        "timestamp": 1595422296
    },
    {
        "content": "<p>I think we it should be fine, but not completely sure</p>",
        "id": 204660748,
        "sender_full_name": "lcnr",
        "timestamp": 1595422309
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> would know, I assume</p>",
        "id": 204660815,
        "sender_full_name": "davidtwco",
        "timestamp": 1595422345
    },
    {
        "content": "<p>the same exists for <code>Pointer(PointerCast::ClosureFnPointer(_))</code></p>",
        "id": 204660871,
        "sender_full_name": "lcnr",
        "timestamp": 1595422387
    },
    {
        "content": "<p>maybe it needs something like the \"still further specializable\" flag which ignores parent substs in closures?</p>",
        "id": 204660925,
        "sender_full_name": "davidtwco",
        "timestamp": 1595422429
    },
    {
        "content": "<p>uhhhh I'd be surprised if miri had to change</p>",
        "id": 204660986,
        "sender_full_name": "eddyb",
        "timestamp": 1595422445
    },
    {
        "content": "<p>the same exists for <code>type_name</code> and <code>type_id</code></p>",
        "id": 204660995,
        "sender_full_name": "lcnr",
        "timestamp": 1595422450
    },
    {
        "content": "<p>but also this seems more intricate than I had given it credit?</p>",
        "id": 204661002,
        "sender_full_name": "eddyb",
        "timestamp": 1595422457
    },
    {
        "content": "<p>imo using <code>ty::Param</code> here seems error prone</p>",
        "id": 204661032,
        "sender_full_name": "lcnr",
        "timestamp": 1595422476
    },
    {
        "content": "<p>in interpret</p>",
        "id": 204661038,
        "sender_full_name": "lcnr",
        "timestamp": 1595422481
    },
    {
        "content": "<p>wait a second.... are we talking about changing miri or about changing the collector to remove that assert?</p>",
        "id": 204661053,
        "sender_full_name": "oli",
        "timestamp": 1595422498
    },
    {
        "content": "<p>because I can totally see that assert simply being wrong now</p>",
        "id": 204661068,
        "sender_full_name": "oli",
        "timestamp": 1595422506
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> wait wasn't there a thing about miri function pointers being to generic instances?</p>",
        "id": 204661077,
        "sender_full_name": "eddyb",
        "timestamp": 1595422515
    },
    {
        "content": "<p>no idea</p>",
        "id": 204661086,
        "sender_full_name": "davidtwco",
        "timestamp": 1595422523
    },
    {
        "content": "<p>cause you can't substitute allocations</p>",
        "id": 204661114,
        "sender_full_name": "eddyb",
        "timestamp": 1595422549
    },
    {
        "content": "<p>my brain hurts</p>",
        "id": 204661134,
        "sender_full_name": "eddyb",
        "timestamp": 1595422561
    },
    {
        "content": "<p>aah, ok, so I see why we may want to modify miri</p>",
        "id": 204661211,
        "sender_full_name": "oli",
        "timestamp": 1595422594
    },
    {
        "content": "<p>we want to be allowed to create function pointers that are still polymorphic</p>",
        "id": 204661262,
        "sender_full_name": "oli",
        "timestamp": 1595422625
    },
    {
        "content": "<p>do we though? we don't track the parameters</p>",
        "id": 204661312,
        "sender_full_name": "eddyb",
        "timestamp": 1595422653
    },
    {
        "content": "<p>like there's no way to tell that an allocation is \"generic\" over some parameters</p>",
        "id": 204661332,
        "sender_full_name": "eddyb",
        "timestamp": 1595422669
    },
    {
        "content": "<p>without deeply looking into it</p>",
        "id": 204661348,
        "sender_full_name": "eddyb",
        "timestamp": 1595422680
    },
    {
        "content": "<p>from the outside it looks concrete</p>",
        "id": 204661404,
        "sender_full_name": "eddyb",
        "timestamp": 1595422690
    },
    {
        "content": "<p>I think they'd only be polymorphic in that the closure inherits an unused generic parameter from a parent.</p>",
        "id": 204661412,
        "sender_full_name": "davidtwco",
        "timestamp": 1595422697
    },
    {
        "content": "<p>do we want to prevent miri from failing to evaluate in that case?</p>",
        "id": 204661460,
        "sender_full_name": "eddyb",
        "timestamp": 1595422729
    },
    {
        "content": "<p>should miri use <code>Instance::polymorphize</code>?</p>",
        "id": 204661476,
        "sender_full_name": "eddyb",
        "timestamp": 1595422738
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"gh\">diff --git a/src/librustc_mir/interpret/cast.rs b/src/librustc_mir/interpret/cast.rs</span>\n<span class=\"gh\">index 60cf21552e9..ee9d1d156ab 100644</span>\n<span class=\"gd\">--- a/src/librustc_mir/interpret/cast.rs</span>\n<span class=\"gi\">+++ b/src/librustc_mir/interpret/cast.rs</span>\n<span class=\"gu\">@@ -47,7 +47,7 @@ impl&lt;&#39;mir, &#39;tcx: &#39;mir, M: Machine&lt;&#39;mir, &#39;tcx&gt;&gt; InterpCx&lt;&#39;mir, &#39;tcx, M&gt; {</span>\n                 match src.layout.ty.kind {\n                     ty::FnDef(def_id, substs) =&gt; {\n                         // All reifications must be monomorphic, bail out otherwise.\n<span class=\"gd\">-                        if src.layout.ty.needs_subst() {</span>\n<span class=\"gi\">+                        if src.layout.ty.still_further_specializable() {</span>\n                             throw_inval!(TooGeneric);\n                         }\n</code></pre></div>\n\n\n<p>This obviously wouldn't be <em>the</em> fix, but it stops the ICE.</p>",
        "id": 204661849,
        "sender_full_name": "davidtwco",
        "timestamp": 1595422925
    },
    {
        "content": "<p>(at least in <span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span>'s repro, not checked reqwest)</p>",
        "id": 204661882,
        "sender_full_name": "davidtwco",
        "timestamp": 1595422946
    },
    {
        "content": "<p>ooooh I'm starting to see what's happening</p>",
        "id": 204661939,
        "sender_full_name": "eddyb",
        "timestamp": 1595422976
    },
    {
        "content": "<p>miri isn't allowing too much, it's allowing too little</p>",
        "id": 204661960,
        "sender_full_name": "eddyb",
        "timestamp": 1595422987
    },
    {
        "content": "<p>btw, this should also fail on <code>type_id</code> and I don't know how we can fix it there</p>",
        "id": 204662012,
        "sender_full_name": "lcnr",
        "timestamp": 1595423026
    },
    {
        "content": "<p>so it gives back <code>TooGeneric</code> in a situation that could've theoretically worked (it still doesn't feel right that it could be polymorphized but maybe it could)</p>",
        "id": 204662016,
        "sender_full_name": "eddyb",
        "timestamp": 1595423030
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> I mean the fact that <code>type_id</code> <em>could</em> be called means the parameters should be treated as used</p>",
        "id": 204662115,
        "sender_full_name": "eddyb",
        "timestamp": 1595423067
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> I don't think it's a problem for <code>type_id</code> or <code>type_name</code> unless polymorphization figures out all calls return the same value</p>",
        "id": 204662136,
        "sender_full_name": "oli",
        "timestamp": 1595423082
    },
    {
        "content": "<p>so this sounds like there's a different bug</p>",
        "id": 204662137,
        "sender_full_name": "eddyb",
        "timestamp": 1595423083
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/216091-t-compiler.2Fwg-polymorphization/topic/tokio.20regression.20(.2374614)/near/204662115\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> I mean the fact that <code>type_id</code> <em>could</em> be called means the parameters should be treated as used</p>\n</blockquote>\n<p>this requires global analysis. x for doubt</p>",
        "id": 204662181,
        "sender_full_name": "lcnr",
        "timestamp": 1595423112
    },
    {
        "content": "<p>we recently had a nightly const eval bug on <code>type_id</code> or <code>type_name</code>, but I thought it was fixed on nightly already</p>",
        "id": 204662185,
        "sender_full_name": "oli",
        "timestamp": 1595423116
    },
    {
        "content": "<p>let me get an example</p>",
        "id": 204662191,
        "sender_full_name": "lcnr",
        "timestamp": 1595423120
    },
    {
        "content": "<p>how? polymorphization conservatively assumes parameters are used</p>",
        "id": 204662216,
        "sender_full_name": "eddyb",
        "timestamp": 1595423136
    },
    {
        "content": "<p>This is a different instance of the same issue we saw in implementing polymorphisation where how a closure is used in a later function could influence if an inherited parameter should be considered used in the current function.</p>",
        "id": 204662221,
        "sender_full_name": "davidtwco",
        "timestamp": 1595423140
    },
    {
        "content": "<p>how could the constant call <code>type_id::&lt;T&gt;()</code> without polymorphization assuming <code>T</code> is used</p>",
        "id": 204662241,
        "sender_full_name": "eddyb",
        "timestamp": 1595423157
    },
    {
        "content": "<p>could <code>T</code> be a closure containing an unused inherited type parameter?</p>",
        "id": 204662335,
        "sender_full_name": "davidtwco",
        "timestamp": 1595423189
    },
    {
        "content": "<p>oh it requires closures. okay. I got confused about that</p>",
        "id": 204662406,
        "sender_full_name": "eddyb",
        "timestamp": 1595423228
    },
    {
        "content": "<p>has anyone found the closure in <code>tokio</code>/<code>reqwest</code> or did <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> experiment until closures showed up?</p>",
        "id": 204662451,
        "sender_full_name": "eddyb",
        "timestamp": 1595423249
    },
    {
        "content": "<p>I don't know if <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> found it, by the time I got back there was a small repro.</p>",
        "id": 204662489,
        "sender_full_name": "davidtwco",
        "timestamp": 1595423279
    },
    {
        "content": "<p>These:</p>\n<blockquote>\n<p>all def ids used in <code>substituted_constant</code>: <a href=\"https://gist.github.com/lcnr/c81ce3953ecf1d05f867e0c18e1ccc86\">https://gist.github.com/lcnr/c81ce3953ecf1d05f867e0c18e1ccc86</a></p>\n</blockquote>",
        "id": 204662521,
        "sender_full_name": "lcnr",
        "timestamp": 1595423282
    },
    {
        "content": "<p><code>move |cx| pooled.poll_ready(cx)</code></p>",
        "id": 204662552,
        "sender_full_name": "lcnr",
        "timestamp": 1595423295
    },
    {
        "content": "<p>okay huh</p>",
        "id": 204662578,
        "sender_full_name": "eddyb",
        "timestamp": 1595423312
    },
    {
        "content": "<p>so in short, the problem is passing a polymorphized closure type to some generic and not knowing whether reflection will be used on it</p>",
        "id": 204662628,
        "sender_full_name": "eddyb",
        "timestamp": 1595423351
    },
    {
        "content": "<p>so either reflection or polymorphization must admit defeat, and this is where \"it needs a global analysis\" comes in</p>",
        "id": 204662689,
        "sender_full_name": "eddyb",
        "timestamp": 1595423398
    },
    {
        "content": "<p>The problem is that codegened closures now can contain ty::Param</p>",
        "id": 204662691,
        "sender_full_name": "lcnr",
        "timestamp": 1595423398
    },
    {
        "content": "<p>which fails the checks added in <a href=\"https://github.com/rust-lang/rust/pull/74538\">https://github.com/rust-lang/rust/pull/74538</a></p>",
        "id": 204662752,
        "sender_full_name": "lcnr",
        "timestamp": 1595423414
    },
    {
        "content": "<p>the missing thing for me was that we're talking about the <code>ty::Closure</code>, not the closure <code>Instance</code></p>",
        "id": 204662761,
        "sender_full_name": "eddyb",
        "timestamp": 1595423418
    },
    {
        "content": "<p>closure and generator substs, mabe even <code>FnDef</code> subst</p>",
        "id": 204662782,
        "sender_full_name": "lcnr",
        "timestamp": 1595423436
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/216091-t-compiler.2Fwg-polymorphization/topic/tokio.20regression.20(.2374614)/near/204662628\">said</a>:</p>\n<blockquote>\n<p>so in short, the problem is passing a polymorphized closure type to some generic and not knowing whether reflection will be used on it</p>\n</blockquote>\n<p>or something which can end up in a <code>ReifyFnPointer</code> cast, I think?</p>",
        "id": 204662785,
        "sender_full_name": "davidtwco",
        "timestamp": 1595423437
    },
    {
        "content": "<p>like it's specifically the closure <em>type</em> that's broken</p>",
        "id": 204662789,
        "sender_full_name": "eddyb",
        "timestamp": 1595423439
    },
    {
        "content": "<p>(unless we consider that reflection)</p>",
        "id": 204662824,
        "sender_full_name": "davidtwco",
        "timestamp": 1595423458
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> okay but that's solvable I think? oh wait it's solvable in all cases lol</p>",
        "id": 204662826,
        "sender_full_name": "eddyb",
        "timestamp": 1595423458
    },
    {
        "content": "<p>just call <code>polymorphize</code> on it and somehow erase those parameters from reflection</p>",
        "id": 204662858,
        "sender_full_name": "eddyb",
        "timestamp": 1595423478
    },
    {
        "content": "<p>might be harder than it sounds but unless it cycle-errors it should work</p>",
        "id": 204662876,
        "sender_full_name": "eddyb",
        "timestamp": 1595423488
    },
    {
        "content": "<p>this does mean that polymorphization is observable as a canonicalization that overlaps types (reflection-wise)</p>",
        "id": 204662905,
        "sender_full_name": "eddyb",
        "timestamp": 1595423505
    },
    {
        "content": "<p>which may be scary</p>",
        "id": 204662916,
        "sender_full_name": "eddyb",
        "timestamp": 1595423512
    },
    {
        "content": "<p>I've not been able to construct a case that uses reflection and ICEs - do we have one?</p>",
        "id": 204663038,
        "sender_full_name": "davidtwco",
        "timestamp": 1595423575
    },
    {
        "content": "<p>what do you mean with reflection here?</p>",
        "id": 204663062,
        "sender_full_name": "lcnr",
        "timestamp": 1595423591
    },
    {
        "content": "<p><code>type_id</code> / <code>type_name</code></p>",
        "id": 204663071,
        "sender_full_name": "eddyb",
        "timestamp": 1595423597
    },
    {
        "content": "<p>for them to actually cause problems we first have to land <a href=\"https://github.com/rust-lang/rust/issues/74538\">#74538</a></p>",
        "id": 204663097,
        "sender_full_name": "lcnr",
        "timestamp": 1595423615
    },
    {
        "content": "<p>Being pragmatic, when do y'all start thinking of a revert? I know it's \"only nightly\" and all, but.</p>",
        "id": 204663117,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595423627
    },
    {
        "content": "<p>like I'm thinking the user can observe polymorphization</p>",
        "id": 204663121,
        "sender_full_name": "eddyb",
        "timestamp": 1595423629
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> we can literally just turn it off tbh</p>",
        "id": 204663134,
        "sender_full_name": "eddyb",
        "timestamp": 1595423637
    },
    {
        "content": "<p>oh btw I should've mentioned: if you want to make nightly work again on <a href=\"http://play.rust-lang.org\">play.rust-lang.org</a> you can do <code>RUSTFLAGS=-Zpolymorphize=off</code> for now I think?</p>",
        "id": 204663211,
        "sender_full_name": "eddyb",
        "timestamp": 1595423666
    },
    {
        "content": "<p>After <a href=\"https://github.com/rust-lang/rust/issues/74538\">#74538</a> I would expect this to ice:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">any</span>::<span class=\"n\">TypeId</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">&#39;static</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">TypeId</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">TypeId</span>::<span class=\"n\">of</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">outer</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">&#39;static</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">outer</span>::<span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 204663225,
        "sender_full_name": "lcnr",
        "timestamp": 1595423693
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> wait did we never crater polymorphization?</p>",
        "id": 204663240,
        "sender_full_name": "eddyb",
        "timestamp": 1595423704
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/216091-t-compiler.2Fwg-polymorphization/topic/tokio.20regression.20(.2374614)/near/204663240\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116107\">davidtwco</span> wait did we never crater polymorphization?</p>\n</blockquote>\n<p>nope</p>",
        "id": 204663256,
        "sender_full_name": "davidtwco",
        "timestamp": 1595423712
    },
    {
        "content": "<p>did I forget to suggest that? or did I never think about it</p>",
        "id": 204663274,
        "sender_full_name": "eddyb",
        "timestamp": 1595423724
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/216091-t-compiler.2Fwg-polymorphization/topic/tokio.20regression.20(.2374614)/near/204663225\">said</a>:</p>\n<blockquote>\n<p>After <a href=\"https://github.com/rust-lang/rust/issues/74538\">#74538</a> I would expect this to ice:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">any</span>::<span class=\"n\">TypeId</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">&#39;static</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">TypeId</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">TypeId</span>::<span class=\"n\">of</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">outer</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">&#39;static</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">outer</span>::<span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n</blockquote>\n<p>That's pretty much what I had locally, didn't know there wasn't a bail out already.</p>",
        "id": 204663278,
        "sender_full_name": "davidtwco",
        "timestamp": 1595423728
    },
    {
        "content": "<p>given the bugs we found it would've made sense :|</p>",
        "id": 204663283,
        "sender_full_name": "eddyb",
        "timestamp": 1595423732
    },
    {
        "content": "<p>I'm not worried about the playground at all. It's deliberately designed to weather this kind of issue.</p>",
        "id": 204663307,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595423742
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> btw I'm more worried about what happens when it works, without ICE-ing</p>",
        "id": 204663389,
        "sender_full_name": "eddyb",
        "timestamp": 1595423777
    },
    {
        "content": "<p>sure <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 204663406,
        "sender_full_name": "davidtwco",
        "timestamp": 1595423789
    },
    {
        "content": "<p><code>type_name</code> might be able to show the difference better</p>",
        "id": 204663411,
        "sender_full_name": "eddyb",
        "timestamp": 1595423791
    },
    {
        "content": "<p>we kind of have to decide what to do here I think</p>",
        "id": 204663423,
        "sender_full_name": "eddyb",
        "timestamp": 1595423801
    },
    {
        "content": "<p>so I believe this only effects closures, generators and functions rn</p>",
        "id": 204663446,
        "sender_full_name": "lcnr",
        "timestamp": 1595423822
    },
    {
        "content": "<p>so I am personally fine with printing dummy parameters here</p>",
        "id": 204663464,
        "sender_full_name": "lcnr",
        "timestamp": 1595423843
    },
    {
        "content": "<p>we also don't guarantee that <code>a_fn != b_fn</code> for two different functions (or at least if we do, that guarantee is already broken rn)</p>",
        "id": 204663507,
        "sender_full_name": "lcnr",
        "timestamp": 1595423874
    },
    {
        "content": "<p>so I think it's ok if they have the same <code>TypeId</code> (that's on fairly thin ice though)</p>",
        "id": 204663548,
        "sender_full_name": "lcnr",
        "timestamp": 1595423884
    },
    {
        "content": "<p>I don't think it can affect functions because we don't hide a subset of <code>ty::FnDef</code>'s substs from \"generic param is used\" logic</p>",
        "id": 204663872,
        "sender_full_name": "eddyb",
        "timestamp": 1595424103
    },
    {
        "content": "<p>just <code>ty::Closure</code>/<code>ty::Generator</code></p>",
        "id": 204663897,
        "sender_full_name": "eddyb",
        "timestamp": 1595424120
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">unused</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">outer</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">drop</span><span class=\"p\">(</span><span class=\"n\">unused</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">outer</span>::<span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 204664002,
        "sender_full_name": "lcnr",
        "timestamp": 1595424173
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/216091-t-compiler.2Fwg-polymorphization/topic/tokio.20regression.20(.2374614)/near/204663872\">said</a>:</p>\n<blockquote>\n<p>I don't think it can affect functions because we don't hide a subset of <code>ty::FnDef</code>'s substs from \"generic param is used\" logic</p>\n</blockquote>\n<p>can we polymorphize <code>unused</code> here?</p>",
        "id": 204664019,
        "sender_full_name": "lcnr",
        "timestamp": 1595424188
    },
    {
        "content": "<p>well we never codegen <code>unused</code></p>",
        "id": 204664094,
        "sender_full_name": "eddyb",
        "timestamp": 1595424234
    },
    {
        "content": "<p>but I think <code>outer</code> will be fully monomorphized</p>",
        "id": 204664147,
        "sender_full_name": "eddyb",
        "timestamp": 1595424247
    },
    {
        "content": "<p>so it will call <code>drop::&lt;typeof unused::&lt;u8&gt;&gt;</code></p>",
        "id": 204664165,
        "sender_full_name": "eddyb",
        "timestamp": 1595424258
    },
    {
        "content": "<p>keep in mind the the type can be less generic than the destination of a call on a value of that type</p>",
        "id": 204664207,
        "sender_full_name": "eddyb",
        "timestamp": 1595424282
    },
    {
        "content": "<p>which sounds like I'm losing my mind but is technically true</p>",
        "id": 204664233,
        "sender_full_name": "eddyb",
        "timestamp": 1595424293
    },
    {
        "content": "<p>like if you try to call <code>unused::&lt;u8&gt;()</code> it will call the polymorphized version, despite the value <code>unused::&lt;u8&gt;</code> not being polymorphic</p>",
        "id": 204664299,
        "sender_full_name": "eddyb",
        "timestamp": 1595424331
    },
    {
        "content": "<p>So if instead of <code>drop</code> we have an actual function which uses its input</p>",
        "id": 204664416,
        "sender_full_name": "lcnr",
        "timestamp": 1595424383
    },
    {
        "content": "<p>that function would be monomorphized, even if <code>unused</code> is polymorphized</p>",
        "id": 204664464,
        "sender_full_name": "eddyb",
        "timestamp": 1595424415
    },
    {
        "content": "<p>closure polymorphization tries to avoid this</p>",
        "id": 204664490,
        "sender_full_name": "eddyb",
        "timestamp": 1595424432
    },
    {
        "content": "<blockquote>\n<p>that function would be monomorphized, even if unused is polymorphized</p>\n</blockquote>\n<p>which means we codegen that inner function exactly once for all different instances of <code>unused</code>?</p>",
        "id": 204664735,
        "sender_full_name": "lcnr",
        "timestamp": 1595424576
    },
    {
        "content": "<p>so we have to \"partially polymorphize\" the inner function over <code>unused&lt;T&gt;</code> instead of over <code>T</code></p>",
        "id": 204664891,
        "sender_full_name": "lcnr",
        "timestamp": 1595424627
    },
    {
        "content": "<p>Am I correct that there are two issues here? </p>\n<ul>\n<li>Casts (<a href=\"https://github.com/rust-lang/rust/blob/e22b61bff0bdd08be7665607cb7be3748c8a35d2/src/librustc_mir/interpret/cast.rs#L49-L52\">here</a> and <a href=\"https://github.com/rust-lang/rust/blob/e22b61bff0bdd08be7665607cb7be3748c8a35d2/src/librustc_mir/interpret/cast.rs#L91-L94\">here</a>) which would fix reqwest and fix the regression we've got right now - <a href=\"https://github.com/rust-lang/rust/issues/74614\">#74614</a>.</li>\n<li>Reflection (<code>type_name</code> and <code>type_id</code>) is more complicated because it's potentially observable but won't ICE until <a href=\"https://github.com/rust-lang/rust/issues/74538\">#74538</a>.</li>\n</ul>",
        "id": 204664972,
        "sender_full_name": "davidtwco",
        "timestamp": 1595424669
    },
    {
        "content": "<p>Both hit by having a closure with inherited unused type parameter but it just depends what you do with it.</p>",
        "id": 204665108,
        "sender_full_name": "davidtwco",
        "timestamp": 1595424732
    },
    {
        "content": "<p>and pretty sure this also hits <code>get_vtable</code></p>",
        "id": 204665279,
        "sender_full_name": "lcnr",
        "timestamp": 1595424831
    },
    {
        "content": "<p>let me quickly check</p>",
        "id": 204665354,
        "sender_full_name": "lcnr",
        "timestamp": 1595424846
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/216091-t-compiler.2Fwg-polymorphization/topic/tokio.20regression.20(.2374614)/near/204664735\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>that function would be monomorphized, even if unused is polymorphized</p>\n</blockquote>\n<p>which means we codegen that inner function exactly once for all different instances of <code>unused</code>?</p>\n</blockquote>\n<p>the other way around</p>",
        "id": 204665990,
        "sender_full_name": "eddyb",
        "timestamp": 1595425126
    },
    {
        "content": "<p><code>unused</code> is codegen'd once, but the function calling it might think it's calling <code>unused::&lt;u8&gt;</code>, <code>unused::&lt;u32&gt;</code> etc. as different functions</p>",
        "id": 204666058,
        "sender_full_name": "eddyb",
        "timestamp": 1595425161
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">marker</span>::<span class=\"n\">PhantomData</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">A</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">PhantomData</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">&#39;static</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">v</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nb\">&#39;static</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"nb\">&#39;static</span><span class=\"w\"> </span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">&amp;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">A</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">PhantomData</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">outer</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">&#39;static</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">outer</span>::<span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 204666229,
        "sender_full_name": "lcnr",
        "timestamp": 1595425237
    },
    {
        "content": "<p>I remember us having issues with vtables</p>",
        "id": 204666252,
        "sender_full_name": "eddyb",
        "timestamp": 1595425252
    },
    {
        "content": "<p>so this totally tracks</p>",
        "id": 204666259,
        "sender_full_name": "eddyb",
        "timestamp": 1595425257
    },
    {
        "content": "<p>I wish I could help out more but I'm trying to not get too distracted by this (from more pressing stuff) and also my brain is melting in the balkan dayheat</p>",
        "id": 204666414,
        "sender_full_name": "eddyb",
        "timestamp": 1595425321
    },
    {
        "content": "<p>all of the heat with none of the ocean clouds or w/e coastal western europe gets</p>",
        "id": 204666563,
        "sender_full_name": "eddyb",
        "timestamp": 1595425384
    },
    {
        "content": "<p>I can put a PR up which fixes <a href=\"https://github.com/rust-lang/rust/issues/74614\">#74614</a> by using <code>still_further_specializable</code> (which is what we want semantically but wasn't intended for this) and then we can figure out a better fix with the time that gives us; alternatively, I can put a PR up which disables polymorphisation.</p>",
        "id": 204666738,
        "sender_full_name": "davidtwco",
        "timestamp": 1595425450
    },
    {
        "content": "<p>I don't think <code>still_further_specializable</code> is the right choice here, we will get the same breakage without a clean solution in <a href=\"https://github.com/rust-lang/rust/issues/74538\">#74538</a></p>",
        "id": 204666843,
        "sender_full_name": "lcnr",
        "timestamp": 1595425501
    },
    {
        "content": "<p>i.e. we can't use <code>still_further_specializable</code> there</p>",
        "id": 204666897,
        "sender_full_name": "lcnr",
        "timestamp": 1595425526
    },
    {
        "content": "<p>couldn't we use <code>still_further_specializable</code> to avoid the ICE in that case but we'd still need to decide if polymorphisation should be observable through <code>still_further_specializable</code>, right?</p>",
        "id": 204667212,
        "sender_full_name": "davidtwco",
        "timestamp": 1595425658
    },
    {
        "content": "<p>even if it just fixed the cast case using <code>still_further_specializable</code>, the reflection case is much less common, I expect</p>",
        "id": 204667269,
        "sender_full_name": "davidtwco",
        "timestamp": 1595425682
    },
    {
        "content": "<p>We need to check for <code>needs_subst</code> there to fix <a href=\"https://github.com/rust-lang/rust/issues/73976\">#73976</a></p>",
        "id": 204667346,
        "sender_full_name": "lcnr",
        "timestamp": 1595425700
    },
    {
        "content": "<p>which has soundness concerns afaict</p>",
        "id": 204667371,
        "sender_full_name": "lcnr",
        "timestamp": 1595425714
    },
    {
        "content": "<p>regardless of what we end up doing for the reflection case, I don't understand that as well, I think we should fix the cast case for today's regression using <code>still_further_specializable</code> for now</p>",
        "id": 204667659,
        "sender_full_name": "davidtwco",
        "timestamp": 1595425822
    },
    {
        "content": "<p>should we consider disabling polymorphization by default until we get a crater run in?</p>",
        "id": 204667756,
        "sender_full_name": "simulacrum",
        "timestamp": 1595425868
    },
    {
        "content": "<p>I think we have to add something like <code>TyKind::Polymorphized</code> here if we are not able to somehow get the <code>ty::Param</code> out of closure substs</p>",
        "id": 204667760,
        "sender_full_name": "lcnr",
        "timestamp": 1595425873
    },
    {
        "content": "<p>until then I would like to disable polymorphization :/</p>",
        "id": 204667796,
        "sender_full_name": "lcnr",
        "timestamp": 1595425892
    },
    {
        "content": "<p>alright, I'll put a PR up which disables polymorphization</p>",
        "id": 204667840,
        "sender_full_name": "davidtwco",
        "timestamp": 1595425913
    },
    {
        "content": "<p>(to be clear that's solely based on my impression that we're not quite thinking this is \"last touch up\" so to speak)</p>",
        "id": 204668303,
        "sender_full_name": "simulacrum",
        "timestamp": 1595426092
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/74633\">#74633</a></p>",
        "id": 204671065,
        "sender_full_name": "davidtwco",
        "timestamp": 1595427345
    },
    {
        "content": "<p>Filed <a href=\"https://github.com/rust-lang/rust/issues/74636\">#74636</a> for fixing the underlying regression</p>",
        "id": 204674210,
        "sender_full_name": "davidtwco",
        "timestamp": 1595428662
    },
    {
        "content": "<p>Putting aside the question about if/how polymorphisation should be observable with reflection, if we changed the relevant <code>needs_subst</code> checks in const_eval to something with <code>still_further_specializable</code>'s semantics - would everything else <em>just work</em>?</p>",
        "id": 204678813,
        "sender_full_name": "davidtwco",
        "timestamp": 1595430657
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span>  CI is green on <a href=\"https://github.com/rust-lang/rust/issues/74633\">#74633</a>, any reason I shouldn't r+ it?</p>",
        "id": 204679025,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1595430740
    },
    {
        "content": "<p>If that's the direction we want to go, no, r+ away.</p>",
        "id": 204679080,
        "sender_full_name": "davidtwco",
        "timestamp": 1595430773
    },
    {
        "content": "<p>Vs trying to land a fix?</p>",
        "id": 204679117,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1595430788
    },
    {
        "content": "<p>Yeah</p>",
        "id": 204679131,
        "sender_full_name": "davidtwco",
        "timestamp": 1595430793
    },
    {
        "content": "<p>gotcha</p>",
        "id": 204679141,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1595430796
    },
    {
        "content": "<p>It's possible there are other regressions we've not found though, given there's not been a crater run.</p>",
        "id": 204679167,
        "sender_full_name": "davidtwco",
        "timestamp": 1595430807
    },
    {
        "content": "<p>I think it makes sense to land this now since we know it breaks stuff</p>",
        "id": 204679182,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1595430813
    },
    {
        "content": "<p>Yeah</p>",
        "id": 204679186,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1595430815
    },
    {
        "content": "<p>It's easy enough to flip the default back and do a crater run in another PR.</p>",
        "id": 204679388,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1595430894
    },
    {
        "content": "<blockquote>\n<p>would everything else just work?</p>\n</blockquote>\n<p>we have to differentiate between polymorphized closures and not fully concrete closures if we don't want <code>TypeId::of&lt;Self&gt; != TypeId::of&lt;Self&gt;</code></p>",
        "id": 204685466,
        "sender_full_name": "lcnr",
        "timestamp": 1595433487
    },
    {
        "content": "<p>And I don't think using <code>still_further_specializable</code> is enough for this</p>",
        "id": 204685530,
        "sender_full_name": "lcnr",
        "timestamp": 1595433519
    },
    {
        "content": "<blockquote>\n<p>And I don't think using <code>still_further_specializable</code> is enough for this</p>\n</blockquote>\n<p>Thatâ€™s what Iâ€™d like to understand - why not? </p>\n<p>I suppose weâ€™d be better off invoking polymorphisation to check that parameters which are present are unused, rather than assuming that any params present in parent substs are a result of polymorphisation.</p>",
        "id": 204687744,
        "sender_full_name": "davidtwco",
        "timestamp": 1595434518
    },
    {
        "content": "<p>(just noting that chalk also hit a polymorphization issue which is very likely the same as tokio)</p>",
        "id": 204721004,
        "sender_full_name": "lqd",
        "timestamp": 1595450918
    },
    {
        "content": "<p>I can make sure it actually is the same if we need to be sure ?</p>",
        "id": 204721123,
        "sender_full_name": "lqd",
        "timestamp": 1595450999
    },
    {
        "content": "<p>doesn't hurt if you have the time <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 204721915,
        "sender_full_name": "davidtwco",
        "timestamp": 1595451366
    },
    {
        "content": "<p>alright I'll try to find the time :)</p>",
        "id": 204722757,
        "sender_full_name": "lqd",
        "timestamp": 1595451797
    },
    {
        "content": "<p>but that reminds me that since triggering the issues requires codegen, the crater run is going to take a while</p>",
        "id": 204722776,
        "sender_full_name": "lqd",
        "timestamp": 1595451811
    },
    {
        "content": "<blockquote>\n<p>I suppose weâ€™d be better off invoking polymorphisation to check that parameters which are present are unused, rather than assuming that any params present in parent substs are a result of polymorphisation.</p>\n</blockquote>\n<p>I think that might work, if we always use <code>polymorphize</code> and check if all used parameters are concrete it should be fine afaict</p>",
        "id": 204723390,
        "sender_full_name": "lcnr",
        "timestamp": 1595452175
    },
    {
        "content": "<p>I might have been too pessimistic here <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 204723465,
        "sender_full_name": "lcnr",
        "timestamp": 1595452214
    },
    {
        "content": "<p>goodbye polymorphisation, you lasted one day</p>",
        "id": 204726216,
        "sender_full_name": "davidtwco",
        "timestamp": 1595454169
    },
    {
        "content": "<p>(that's the disable PR merged)</p>",
        "id": 204726224,
        "sender_full_name": "davidtwco",
        "timestamp": 1595454178
    },
    {
        "content": "<p>it will come back !</p>",
        "id": 204726431,
        "sender_full_name": "lqd",
        "timestamp": 1595454307
    },
    {
        "content": "<p>So, we'll need to discuss what we want to do in the reflection case (of <a href=\"https://github.com/rust-lang/rust/issues/74636\">#74636</a>) but I've implemented what I think is going to be the starting point <a href=\"https://github.com/rust-lang/rust/commit/4d1d9885e92c75e260593b068cc059a5af340ffc\">here</a>; cc <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> - interested in what you think and I can work on implementing it.</p>",
        "id": 204909761,
        "sender_full_name": "davidtwco",
        "timestamp": 1595594224
    },
    {
        "content": "<p>(opened <a href=\"https://github.com/rust-lang/rust/issues/74717\">#74717</a> to discuss those changes)</p>",
        "id": 204921384,
        "sender_full_name": "davidtwco",
        "timestamp": 1595600566
    },
    {
        "content": "<p><span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span> looked over it and think this seems fine and fairly robust</p>",
        "id": 204925534,
        "sender_full_name": "lcnr",
        "timestamp": 1595602418
    },
    {
        "content": "<p>One thing which concerns me here is what happens if the reflection methods are called once with a polymorphized type and once with a non polymorphized one</p>",
        "id": 204925706,
        "sender_full_name": "lcnr",
        "timestamp": 1595602491
    },
    {
        "content": "<p>can this happen?</p>",
        "id": 204925715,
        "sender_full_name": "lcnr",
        "timestamp": 1595602495
    },
    {
        "content": "<p>or more accurately, should we guard from this by calling <code>polymorphize</code> in the <code>type_id</code> intrinsic?</p>",
        "id": 204927632,
        "sender_full_name": "lcnr",
        "timestamp": 1595603364
    },
    {
        "content": "<p>that makes sense but I don't have an opinion on whether or not we should</p>",
        "id": 204931782,
        "sender_full_name": "davidtwco",
        "timestamp": 1595605343
    },
    {
        "content": "<p>We could probably add a debug assert which checks that we always use the polymorphized version here</p>",
        "id": 204932007,
        "sender_full_name": "lcnr",
        "timestamp": 1595605476
    },
    {
        "content": "<p>in case calling <code>polymorphize</code> causes perf issues here</p>",
        "id": 204932031,
        "sender_full_name": "lcnr",
        "timestamp": 1595605492
    },
    {
        "content": "<p>One thing I meant to mention was that this PR is almost certainly worse for perf</p>",
        "id": 204932642,
        "sender_full_name": "davidtwco",
        "timestamp": 1595605877
    },
    {
        "content": "<p>we could a type flag here which might help</p>",
        "id": 204932823,
        "sender_full_name": "lcnr",
        "timestamp": 1595605975
    },
    {
        "content": "<p>but I also don't know how often <code>used_generic_parameters_needs_subst</code> will be called, so it might not actually matter (or it ends up extremely bad... idk)</p>",
        "id": 204932962,
        "sender_full_name": "lcnr",
        "timestamp": 1595606049
    },
    {
        "content": "<p>can't call polymorphisation from type flag infrastructure like we'd need to</p>",
        "id": 204933701,
        "sender_full_name": "davidtwco",
        "timestamp": 1595606466
    },
    {
        "content": "<p>but flags do make sense - that's why we added <code>still_further_specializable</code> when working on polymorphisation</p>",
        "id": 204933748,
        "sender_full_name": "davidtwco",
        "timestamp": 1595606493
    },
    {
        "content": "<p>because we don't have a tcx?</p>",
        "id": 204933761,
        "sender_full_name": "lcnr",
        "timestamp": 1595606502
    },
    {
        "content": "<p>yeah</p>",
        "id": 204933869,
        "sender_full_name": "davidtwco",
        "timestamp": 1595606540
    },
    {
        "content": "<p>we had to change how closure substs were represented for that reason</p>",
        "id": 204933900,
        "sender_full_name": "davidtwco",
        "timestamp": 1595606556
    },
    {
        "content": "<p>hmm, want to do a perf run to see how bad it is?</p>",
        "id": 205000931,
        "sender_full_name": "lcnr",
        "timestamp": 1595678011
    },
    {
        "content": "<p>Not sure if it would be representative with polymorphisation disabled.</p>",
        "id": 205001589,
        "sender_full_name": "davidtwco",
        "timestamp": 1595679135
    },
    {
        "content": "<p>And if we enable it with a new commit then you wonâ€™t be able to tell which part is this PR and which is polymorphisation.</p>",
        "id": 205001601,
        "sender_full_name": "davidtwco",
        "timestamp": 1595679161
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> can you take a look at <a href=\"https://github.com/rust-lang/rust/issues/74717\">#74717</a>?</p>",
        "id": 205592381,
        "sender_full_name": "davidtwco",
        "timestamp": 1596203743
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> none of the tests do any const eval, so I'm guessing that you're seeing these being hit by the const propagator, which should just not propagate in case it hits <code>TooGeneric</code>. So I don't understand what the problem actually is, can you give some more details on how the interpreter being overcautious is a problem?</p>",
        "id": 205594913,
        "sender_full_name": "oli",
        "timestamp": 1596204888
    },
    {
        "content": "<p>In that case, the fix in <a href=\"https://github.com/rust-lang/rust/issues/74717\">#74717</a> is probably just wrong and I should just change what happens in the propagator in the <code>TooGeneric</code> case.</p>",
        "id": 205595331,
        "sender_full_name": "davidtwco",
        "timestamp": 1596205095
    },
    {
        "content": "<p>Actually, the bug happens <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/monomorphize/collector.rs#L629-L633\">here</a> - that isn't the propagator, right?</p>",
        "id": 205595548,
        "sender_full_name": "davidtwco",
        "timestamp": 1596205216
    },
    {
        "content": "<p>no it's not the propagator, do you have some logs as to which constant is being evaluated here?</p>",
        "id": 205596285,
        "sender_full_name": "oli",
        "timestamp": 1596205586
    },
    {
        "content": "<p>oh <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span> <code>&amp;(test::&lt;T&gt; as fn())</code> creates a promoted</p>",
        "id": 205596373,
        "sender_full_name": "oli",
        "timestamp": 1596205625
    },
    {
        "content": "<p>but what happens in the new <code>TypeId</code> test you added?</p>",
        "id": 205596425,
        "sender_full_name": "oli",
        "timestamp": 1596205656
    },
    {
        "content": "<p>I don't see any promotion there</p>",
        "id": 205596436,
        "sender_full_name": "oli",
        "timestamp": 1596205662
    },
    {
        "content": "<p>Iâ€™d need to double check, one sec.</p>",
        "id": 205596493,
        "sender_full_name": "davidtwco",
        "timestamp": 1596205683
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> here's the backtrace from that test when I run it with <code>-Zpolymorphize=on</code> and without those changes: <a href=\"http://sprunge.us/T5pPOR\">http://sprunge.us/T5pPOR</a></p>",
        "id": 205598420,
        "sender_full_name": "davidtwco",
        "timestamp": 1596206572
    },
    {
        "content": "<p>hmm... that points to <a href=\"https://github.com/rust-lang/rust/blob/ac91673d895a0c578ed773e1280bdde8adb87b8c/src/librustc_codegen_llvm/intrinsic.rs#L294\">https://github.com/rust-lang/rust/blob/ac91673d895a0c578ed773e1280bdde8adb87b8c/src/librustc_codegen_llvm/intrinsic.rs#L294</a></p>",
        "id": 205598991,
        "sender_full_name": "oli",
        "timestamp": 1596206851
    },
    {
        "content": "<p>if that returns <code>TooGeneric</code>, I would expect that to panic and that panic to be correct</p>",
        "id": 205599033,
        "sender_full_name": "oli",
        "timestamp": 1596206869
    },
    {
        "content": "<p>basically the compiler tried to compile <code>size_of::&lt;T&gt;()</code> where <code>T</code> is still generic</p>",
        "id": 205599109,
        "sender_full_name": "oli",
        "timestamp": 1596206893
    },
    {
        "content": "<p>But now a function can still be generic at this point due to polymorphisation.</p>",
        "id": 205599178,
        "sender_full_name": "davidtwco",
        "timestamp": 1596206931
    },
    {
        "content": "<p>(<a href=\"https://github.com/rust-lang/rust/issues/74717\">#74717</a> fixes that, but I don't claim that it is the correct solution)</p>",
        "id": 205599234,
        "sender_full_name": "davidtwco",
        "timestamp": 1596206958
    },
    {
        "content": "<p>but that's wrong if <code>size_of::&lt;T&gt;()</code> is called, right?</p>",
        "id": 205599241,
        "sender_full_name": "oli",
        "timestamp": 1596206963
    },
    {
        "content": "<p>or is <code>test&lt;T&gt;</code> polymorphic because the result of <code>size_of::&lt;T&gt;()</code> is unused?</p>",
        "id": 205599372,
        "sender_full_name": "oli",
        "timestamp": 1596207012
    },
    {
        "content": "<p>yeah, but what works is <code>size_of_val(&amp;(|| ()))</code></p>",
        "id": 205599396,
        "sender_full_name": "lcnr",
        "timestamp": 1596207027
    },
    {
        "content": "<p>where <code>|| ()</code> is a polymorphized closure which therefore constains a <code>ty::Param</code></p>",
        "id": 205599443,
        "sender_full_name": "lcnr",
        "timestamp": 1596207045
    },
    {
        "content": "<p>I thought it was just <code>outer</code> which is polymorphic, not <code>foo</code> and <code>test</code></p>",
        "id": 205599458,
        "sender_full_name": "oli",
        "timestamp": 1596207050
    },
    {
        "content": "<p>oooooh</p>",
        "id": 205599476,
        "sender_full_name": "oli",
        "timestamp": 1596207059
    },
    {
        "content": "<p>Yeah - if you had this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">foo</span>::<span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>Then <code>T</code> is used, but if you have:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"o\">&lt;</span><span class=\"n\">B</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">bar</span>::<span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>Then <code>foo</code> considers <code>A</code> used, <code>bar</code> considers its <code>B</code> unused, and its closure inherits that, and that ends up getting to <code>size_of</code>.</p>",
        "id": 205599580,
        "sender_full_name": "davidtwco",
        "timestamp": 1596207118
    },
    {
        "content": "<p>Polymorphisation cannot be transitive (checking what <code>foo</code> does with <code>T</code> to consider whether <code>bar</code> should consider <code>T</code> used in the example above) without hitting cycle errors - we hit similar issues like this when initially implementing polymorphisation, this is just a case that we didn't consider.</p>",
        "id": 205599768,
        "sender_full_name": "davidtwco",
        "timestamp": 1596207198
    },
    {
        "content": "<p>so the <code>T</code> in <code>bar</code> is completely independent of <code>T</code> in <code>foo</code>?</p>",
        "id": 205599794,
        "sender_full_name": "oli",
        "timestamp": 1596207214
    },
    {
        "content": "<p>yeah, each function is considered independently.</p>",
        "id": 205599814,
        "sender_full_name": "davidtwco",
        "timestamp": 1596207223
    },
    {
        "content": "<p>the <code>T</code> of bar ends up in <code>T</code> of <code>foo</code> as <code>foo::&lt;closure&lt;T_bar&gt;&gt;</code></p>",
        "id": 205599943,
        "sender_full_name": "lcnr",
        "timestamp": 1596207267
    },
    {
        "content": "<p>(the only case where polymorphisation of another body will influence polymorphisation of the current body is when fns or closures contain closures)</p>",
        "id": 205599995,
        "sender_full_name": "davidtwco",
        "timestamp": 1596207287
    },
    {
        "content": "<p>ok, we need to use less confusing generics <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 205600016,
        "sender_full_name": "oli",
        "timestamp": 1596207298
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"o\">&lt;</span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">bar</span>::<span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 205600044,
        "sender_full_name": "oli",
        "timestamp": 1596207311
    },
    {
        "content": "<p>we have <code>foo::closure&lt;U&gt;</code></p>",
        "id": 205600093,
        "sender_full_name": "oli",
        "timestamp": 1596207330
    },
    {
        "content": "<p>exactly</p>",
        "id": 205600144,
        "sender_full_name": "davidtwco",
        "timestamp": 1596207353
    },
    {
        "content": "<p>so we end up invoking <code>size_of::&lt;foo::closure&lt;U&gt;&gt;()</code></p>",
        "id": 205600213,
        "sender_full_name": "oli",
        "timestamp": 1596207371
    },
    {
        "content": "<p><code>foo::&lt;bar::{{closure#0}}&gt;</code></p>",
        "id": 205600223,
        "sender_full_name": "davidtwco",
        "timestamp": 1596207375
    },
    {
        "content": "<p>yeah</p>",
        "id": 205600274,
        "sender_full_name": "davidtwco",
        "timestamp": 1596207396
    },
    {
        "content": "<p>and through the power of compiler magic, <code>tcx.size_of</code> actually works on that even though <code>U</code> is unknown, becuase the layout computation never looks at <code>U</code></p>",
        "id": 205600290,
        "sender_full_name": "oli",
        "timestamp": 1596207406
    },
    {
        "content": "<p>yeah</p>",
        "id": 205600309,
        "sender_full_name": "davidtwco",
        "timestamp": 1596207413
    },
    {
        "content": "<p>this was the missing part <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 205600316,
        "sender_full_name": "oli",
        "timestamp": 1596207416
    },
    {
        "content": "<p>thanks</p>",
        "id": 205600322,
        "sender_full_name": "oli",
        "timestamp": 1596207417
    },
    {
        "content": "<p><code>type_id</code> and <code>type_name</code> are interesting cases of this because it can make the result of polymorphisation observable</p>",
        "id": 205600327,
        "sender_full_name": "davidtwco",
        "timestamp": 1596207419
    },
    {
        "content": "<p>the PR makes sense now</p>",
        "id": 205600335,
        "sender_full_name": "oli",
        "timestamp": 1596207421
    },
    {
        "content": "<p>which is why it needs bigger discussion</p>",
        "id": 205600358,
        "sender_full_name": "davidtwco",
        "timestamp": 1596207428
    },
    {
        "content": "<p><code>type_name</code> is <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 205600380,
        "sender_full_name": "oli",
        "timestamp": 1596207440
    },
    {
        "content": "<p><code>type_id</code> is more interesting</p>",
        "id": 205600394,
        "sender_full_name": "oli",
        "timestamp": 1596207447
    },
    {
        "content": "<p>but I think also <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> . For all I care <code>foo::&lt;bar::&lt;i32&gt;::{{closure#0}}&gt;``and </code>foo::&lt;bar::&lt;String&gt;::{{closure#0}}&gt;` are the same type</p>",
        "id": 205600538,
        "sender_full_name": "oli",
        "timestamp": 1596207493
    },
    {
        "content": "<p>but yes, let's punt that discussion</p>",
        "id": 205600546,
        "sender_full_name": "oli",
        "timestamp": 1596207498
    },
    {
        "content": "<p>In that case, the PR is probably fine then.</p>",
        "id": 205600914,
        "sender_full_name": "davidtwco",
        "timestamp": 1596207663
    },
    {
        "content": "<p>Modulo any performance impact</p>",
        "id": 205600942,
        "sender_full_name": "davidtwco",
        "timestamp": 1596207673
    },
    {
        "content": "<p>yes, the PR is fine, perf is likely irrelevant, as it only hits when we're polymorphiccing, which makese things faster anyway. Also these things are hit rarely I think. We should run perfbot though</p>",
        "id": 205601165,
        "sender_full_name": "oli",
        "timestamp": 1596207776
    },
    {
        "content": "<p>anyway, the PR looks fine to me. I worry about the fragility of these checks though</p>",
        "id": 205601238,
        "sender_full_name": "oli",
        "timestamp": 1596207817
    },
    {
        "content": "<p>Two things that come to mind: Rename the function to <code>ensure_monomorphic_enough</code> or something similar and make it return the <code>TooGeneric</code> error itself, so any calling code needs to <code>?</code> the error away. The second thing is that we should not be using <code>needs_subst</code> at all in the <code>mir::interpret</code> module (except for the implementation of <code>ensure_monomorphic_enough</code>. I'm fine with you just checking whether you covered all of them right now, but maybe we should add a rustc internal lint for it</p>",
        "id": 205601499,
        "sender_full_name": "oli",
        "timestamp": 1596207952
    },
    {
        "content": "<p>updated the PR with those changes <span class=\"user-mention\" data-user-id=\"124288\">@oli</span></p>",
        "id": 205605841,
        "sender_full_name": "davidtwco",
        "timestamp": 1596209847
    },
    {
        "content": "<p>thanks! lgtm</p>",
        "id": 205606267,
        "sender_full_name": "oli",
        "timestamp": 1596210096
    },
    {
        "content": "<p>had a small nit, don't know if you want to do this as part of this PR or if I should try this in a followup</p>",
        "id": 205607255,
        "sender_full_name": "lcnr",
        "timestamp": 1596210637
    },
    {
        "content": "<p>replied to that</p>",
        "id": 205607585,
        "sender_full_name": "davidtwco",
        "timestamp": 1596210801
    },
    {
        "content": "<p>replied to that</p>",
        "id": 205608241,
        "sender_full_name": "lcnr",
        "timestamp": 1596211184
    },
    {
        "content": "<p><span aria-label=\"laughter tears\" class=\"emoji emoji-1f602\" role=\"img\" title=\"laughter tears\">:laughter_tears:</span> not sure how useful these zulip messages are <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 205608260,
        "sender_full_name": "lcnr",
        "timestamp": 1596211199
    },
    {
        "content": "<p>replied again, I think I'll leave it for a follow-up though</p>",
        "id": 205610663,
        "sender_full_name": "davidtwco",
        "timestamp": 1596212423
    }
]