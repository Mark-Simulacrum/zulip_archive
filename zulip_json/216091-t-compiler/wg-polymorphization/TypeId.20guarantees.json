[
    {
        "content": "<p>std docs:</p>\n<blockquote>\n<p>A <code>TypeId</code> represents a globally unique identifier for a type.</p>\n</blockquote>\n<p>This is somewhat dubious with polymorphization</p>",
        "id": 206287053,
        "sender_full_name": "lcnr",
        "timestamp": 1596822005
    },
    {
        "content": "<p>esp now that we start to polymorphize functions which are used in types (in <a href=\"https://github.com/rust-lang/rust/issues/75255\">#75255</a>)</p>",
        "id": 206287166,
        "sender_full_name": "lcnr",
        "timestamp": 1596822061
    },
    {
        "content": "<p>A good example of what probably breaks is</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">any</span>::<span class=\"p\">{</span><span class=\"n\">Any</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">TypeId</span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">collections</span>::<span class=\"n\">HashMap</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">id</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">insert_fn</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">&#39;static</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">map</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">HashMap</span><span class=\"o\">&lt;</span><span class=\"n\">TypeId</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"nb\">FnMut</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">())</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">f</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">FnMut</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">&#39;static</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nb\">Box</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">v</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"o\">&amp;*</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">)))</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">map</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">Any</span>::<span class=\"n\">type_id</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">id</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">call_fn</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">&#39;static</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">map</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">HashMap</span><span class=\"o\">&lt;</span><span class=\"n\">TypeId</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"nb\">FnMut</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">())</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">map</span><span class=\"p\">.</span><span class=\"n\">get_mut</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">Any</span>::<span class=\"n\">type_id</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">id</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">func</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;erased_functions: empty&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">erased_functions</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">HashMap</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">insert_fn</span><span class=\"p\">(</span><span class=\"n\">erased_functions</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">v</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">u32</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;u32: {}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">insert_fn</span><span class=\"p\">(</span><span class=\"n\">erased_functions</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">v</span>: <span class=\"kp\">&amp;</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"o\">&gt;|</span><span class=\"w\"> </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;Box&lt;u32&gt;: {}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">call_fn</span><span class=\"p\">(</span><span class=\"n\">erased_functions</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"k\">u32</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">call_fn</span><span class=\"p\">(</span><span class=\"n\">erased_functions</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Box</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"k\">u32</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">call_fn</span><span class=\"p\">(</span><span class=\"n\">erased_functions</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">&quot;&amp;str&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 206290008,
        "sender_full_name": "lcnr",
        "timestamp": 1596823279
    },
    {
        "content": "<p>We can probably let today’s PRs land given that polymorphisation is still disabled.</p>",
        "id": 206290099,
        "sender_full_name": "davidtwco",
        "timestamp": 1596823310
    },
    {
        "content": "<p>yeah <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> wouldn't have approved them otherwise</p>",
        "id": 206290183,
        "sender_full_name": "lcnr",
        "timestamp": 1596823335
    },
    {
        "content": "<p>I mostly think this is an issue of what we want to guarantee here</p>",
        "id": 206290209,
        "sender_full_name": "lcnr",
        "timestamp": 1596823350
    },
    {
        "content": "<p>But it might be worth discussing this in a compiler team meeting.</p>",
        "id": 206290244,
        "sender_full_name": "davidtwco",
        "timestamp": 1596823360
    },
    {
        "content": "<p>llvm is already deduplicating functions</p>",
        "id": 206290248,
        "sender_full_name": "lcnr",
        "timestamp": 1596823362
    },
    {
        "content": "<p>hmm, yeah, I mostly think this is <code>T-lang</code> territory though</p>",
        "id": 206290327,
        "sender_full_name": "lcnr",
        "timestamp": 1596823406
    },
    {
        "content": "<p>That’s true, either way, I’ll make a note to raise this somewhere when I’m next doing rustc stuff.</p>",
        "id": 206290502,
        "sender_full_name": "davidtwco",
        "timestamp": 1596823475
    },
    {
        "content": "<p>I thought a bit more about this and I think it would be good enough to have a warn by default lint when using types which are <code>MAY_POLYMORPHIZE</code> in <code>TypeId::of</code> and even potentially a deny by default lint when using <code>TypeId::of</code> of a type containing a polymorphized type.</p>",
        "id": 206343667,
        "sender_full_name": "lcnr",
        "timestamp": 1596885353
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> if you also think this is a good idea I can go ahead and implement this in the following weeks</p>",
        "id": 206343712,
        "sender_full_name": "lcnr",
        "timestamp": 1596885395
    },
    {
        "content": "<p>and then annoy <code>t-lang</code> and <code>wg-unsafe-code-guidelines</code></p>",
        "id": 206343721,
        "sender_full_name": "lcnr",
        "timestamp": 1596885417
    },
    {
        "content": "<p>That sounds reasonable to me but I think we’d want to raise it with the relevant teams first.</p>",
        "id": 206343782,
        "sender_full_name": "davidtwco",
        "timestamp": 1596885507
    },
    {
        "content": "<p>yeah, I think a PR here is easy and would be good to show to potential fallout</p>",
        "id": 206343793,
        "sender_full_name": "lcnr",
        "timestamp": 1596885529
    },
    {
        "content": "<p>which is why I want to first open a PR and then ping lang</p>",
        "id": 206343803,
        "sender_full_name": "lcnr",
        "timestamp": 1596885571
    },
    {
        "content": "<p>That makes sense</p>",
        "id": 206343913,
        "sender_full_name": "davidtwco",
        "timestamp": 1596885834
    },
    {
        "content": "<p>I’m fine with it.</p>",
        "id": 206343952,
        "sender_full_name": "davidtwco",
        "timestamp": 1596885851
    },
    {
        "content": "<p>TypeId must remain globally unique for anything that has a different type, as any implementation of downcasting relies on that. While not many will be \"downcast\"ing function types, its still something that is currently supported and would be a breaking change.</p>",
        "id": 206364501,
        "sender_full_name": "nagisa",
        "timestamp": 1596921670
    },
    {
        "content": "<p>(downcasting is in turn typically implemented unsafely and is dependent on different <code>T</code>s in typesystem having different <code>TypeId</code>s)</p>",
        "id": 206364553,
        "sender_full_name": "nagisa",
        "timestamp": 1596921740
    },
    {
        "content": "<p>Furthermore, I don’t think a lint is feasible, unless we want to have SFINAE in Rust. Otherwise lint would likely have too many false positives due to not having sufficient information in typical use-cases of the construct (much like transmute currently fails <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=6cd9baa400ad4809114459496c3d405a\">here</a>)</p>",
        "id": 206364686,
        "sender_full_name": "nagisa",
        "timestamp": 1596921967
    },
    {
        "content": "<p>Unless… I’m missing something?</p>",
        "id": 206364918,
        "sender_full_name": "nagisa",
        "timestamp": 1596922435
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=0fc2372645557cbbdc60f2d8d0e5be80\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=0fc2372645557cbbdc60f2d8d0e5be80</a> is probably the simpler reproducer.</p>",
        "id": 206364972,
        "sender_full_name": "nagisa",
        "timestamp": 1596922526
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/216091-t-compiler.2Fwg-polymorphization/topic/TypeId.20guarantees/near/206364972\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=0fc2372645557cbbdc60f2d8d0e5be80\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=0fc2372645557cbbdc60f2d8d0e5be80</a> is probably the simpler reproducer.</p>\n</blockquote>\n<p>The asserts fail when built with polymorphisation-enabled rustc today. I definitely get the sense that the issues we're seeing with polymorphisation are starting to get a bit too problematic.</p>",
        "id": 206365056,
        "sender_full_name": "davidtwco",
        "timestamp": 1596922661
    },
    {
        "content": "<p>I’m not super familiar with the implementation of polymorphization, at what level does this occur?</p>",
        "id": 206365329,
        "sender_full_name": "nagisa",
        "timestamp": 1596923094
    },
    {
        "content": "<p>Conceptually I don’t feel like this specific problem is insurmountable, but its going to be extremely difficult to resolve if polymorphization loses type information somewhere early on during compilation.</p>",
        "id": 206365348,
        "sender_full_name": "nagisa",
        "timestamp": 1596923161
    },
    {
        "content": "<p>During monomorphisation collection, we run <code>unused_generic_params</code> which determines which parameters are unused, then replace those unused indices in the substitution with the corresponding identity parameter, that results in more overlap in the mono item set and fewer copies of functions.</p>",
        "id": 206365388,
        "sender_full_name": "davidtwco",
        "timestamp": 1596923179
    },
    {
        "content": "<p>Oh I see, and we probably generate<code> TypeId</code>s during codegen too, after mono-collection...</p>",
        "id": 206365405,
        "sender_full_name": "nagisa",
        "timestamp": 1596923234
    },
    {
        "content": "<p>Exactly</p>",
        "id": 206365407,
        "sender_full_name": "davidtwco",
        "timestamp": 1596923242
    },
    {
        "content": "<p>yeah</p>",
        "id": 206365408,
        "sender_full_name": "lcnr",
        "timestamp": 1596923242
    },
    {
        "content": "<p>We could probably do that somewhere in MIR just fine.</p>",
        "id": 206365410,
        "sender_full_name": "nagisa",
        "timestamp": 1596923248
    },
    {
        "content": "<p>It has been a long standing desire to handle some intrinsics in MIR.</p>",
        "id": 206365412,
        "sender_full_name": "nagisa",
        "timestamp": 1596923262
    },
    {
        "content": "<p>we have to do it after mono-collection though</p>",
        "id": 206365414,
        "sender_full_name": "lcnr",
        "timestamp": 1596923269
    },
    {
        "content": "<p>don't we</p>",
        "id": 206365415,
        "sender_full_name": "lcnr",
        "timestamp": 1596923272
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/74717\">#74717</a> made the relevant change so that using <code>TypeId</code> with polymorphised functions wouldn't ICE</p>",
        "id": 206365455,
        "sender_full_name": "davidtwco",
        "timestamp": 1596923294
    },
    {
        "content": "<p>hm.</p>",
        "id": 206365458,
        "sender_full_name": "nagisa",
        "timestamp": 1596923304
    },
    {
        "content": "<p>yeah this seems difficult, I was going to suggest that we could initially not polymorphize when there's an eventual call to <code>TypeId</code> or any body where dynamic objects are created, but that sounds difficult to achieve as well.</p>",
        "id": 206365871,
        "sender_full_name": "nagisa",
        "timestamp": 1596924170
    },
    {
        "content": "<p>I've filed <a href=\"https://github.com/rust-lang/rust/issues/75325\">#75325</a> about this so we can keep track of this issue somewhere more permanent than Zulip.</p>",
        "id": 206389819,
        "sender_full_name": "davidtwco",
        "timestamp": 1596970217
    },
    {
        "content": "<p>(feel free to assign yourself to this <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> if you want to take point on working out what we should do about it)</p>",
        "id": 206389827,
        "sender_full_name": "davidtwco",
        "timestamp": 1596970247
    }
]