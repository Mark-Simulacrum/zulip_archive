[
    {
        "content": "<p>How much effort would it be to polymorphize <code>outer</code> here?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">inner</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">outer</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">inner</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">A0</span>: <span class=\"nc\">fn</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">outer</span>::<span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">A1</span>: <span class=\"nc\">fn</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">outer</span>::<span class=\"o\">&lt;</span><span class=\"kt\">i16</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 206006214,
        "sender_full_name": "lcnr",
        "timestamp": 1596622249
    },
    {
        "content": "<p>That would require cycle handling similarly to MIR inlining. This is still an unsolved problem.</p>",
        "id": 206006309,
        "sender_full_name": "bjorn3",
        "timestamp": 1596622331
    },
    {
        "content": "<p>very difficult, while polymorphising <code>outer</code>, if we invoke polymorphisation on <code>inner</code> then we don't know that it won't look like this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">inner</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">outer</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">outer</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">inner</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">A0</span>: <span class=\"nc\">fn</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">outer</span>::<span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">A1</span>: <span class=\"nc\">fn</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">outer</span>::<span class=\"o\">&lt;</span><span class=\"kt\">i16</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 206006316,
        "sender_full_name": "davidtwco",
        "timestamp": 1596622336
    },
    {
        "content": "<p>My idea here is to do something similar to coherence checking <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 206006330,
        "sender_full_name": "lcnr",
        "timestamp": 1596622360
    },
    {
        "content": "<p>query which returns constraints</p>",
        "id": 206006335,
        "sender_full_name": "lcnr",
        "timestamp": 1596622370
    },
    {
        "content": "<p>global analysis which solves them</p>",
        "id": 206006348,
        "sender_full_name": "lcnr",
        "timestamp": 1596622384
    },
    {
        "content": "<p>which will probably kill perf</p>",
        "id": 206006359,
        "sender_full_name": "lcnr",
        "timestamp": 1596622398
    },
    {
        "content": "<p>but whatever</p>",
        "id": 206006362,
        "sender_full_name": "lcnr",
        "timestamp": 1596622401
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 206007328,
        "sender_full_name": "lcnr",
        "timestamp": 1596623413
    }
]