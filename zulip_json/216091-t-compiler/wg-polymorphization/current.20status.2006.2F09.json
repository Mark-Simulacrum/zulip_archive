[
    {
        "content": "<p>Wanted to drop a message here to update everyone on the current status of polymorphization are and what I think the next steps are.</p>\n<p>I think the initial goal ought to be getting polymorphization enabled by default:</p>\n<ul>\n<li><a href=\"https://github.com/rust-lang/rust/issues/75185\">#75185</a> was opened to perform a crater run on polymorphization enabled-by-default. This was rebased after some other PRs broke polymorphization and we didn't notice, and we've yet to rebase and re-queue it.</li>\n</ul>\n<p>We've currently got the following open PRs:</p>\n<ul>\n<li>\n<p><a href=\"https://github.com/rust-lang/rust/issues/75675\">#75675</a> (assigned to <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>) was opened to adjust the new symbol mangling scheme to encode impl parameters - this is an alternative fix for <a href=\"https://github.com/rust-lang/rust/issues/75326\">#75326</a> (which was originally resolved by <a href=\"https://github.com/rust-lang/rust/issues/75518\">#75518</a> and then <a href=\"https://github.com/rust-lang/rust/issues/75595\">#75595</a> - which changed polymorphization's analysis to mark more parameters are used). It's works but one of the tests required normalization that didn't differ based on bitness, which was unexpected and we've yet to decide how to proceed.</p>\n</li>\n<li>\n<p><a href=\"https://github.com/rust-lang/rust/issues/75737\">#75737</a> (blocked, but approved by <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>)  was opened to remove the predicate logic in polymorphization's analysis. This logic was added during the original polymorphization PR (and then extended in <a href=\"https://github.com/rust-lang/rust/issues/75518\">#75518</a> and <a href=\"https://github.com/rust-lang/rust/issues/75595\">#75595</a>) and isn't necessary after <a href=\"https://github.com/rust-lang/rust/issues/75675\">#75675</a> (which is why it is blocked). Other changes to polymorphization must have affected the necessity of this logic, since I'm confident that the new symbol mangling scheme wasn't the original impetus for it, but I'm not sure which changes those would have been.</p>\n</li>\n<li>\n<p><a href=\"https://github.com/rust-lang/rust/issues/75414\">#75414</a> (assigned to <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>) changes polymorphization's analysis to take an <code>InstanceDef</code>, which enables the MIR of shims to be polymorphized. I'm not sure if it is exactly what we want.</p>\n</li>\n<li>\n<p><a href=\"https://github.com/rust-lang/rust/issues/75346\">#75346</a> (assigned to <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>) changes how <code>FnPtrShim</code>s are constructed so that they don't require substitution during codegen - this will help avoid double substitution from polymorphization changes.</p>\n</li>\n</ul>\n<p>We've also got the following issues open:</p>\n<ul>\n<li>\n<p><a href=\"https://github.com/rust-lang/rust/issues/75327\">#75327</a> would remove <code>ParamEnv::reveal_all()</code> from codegen, a necessary next step so that we can construct <code>ParamEnv</code>s that constrain generic parameters by their size (eventually) - this is the first step towards polymorphization by size/alignment.</p>\n</li>\n<li>\n<p><a href=\"https://github.com/rust-lang/rust/issues/75336\">#75336</a> suggests re-applying some changes from <a href=\"https://github.com/rust-lang/rust/issues/75255\">#75255</a> that we reverted (in <a href=\"https://github.com/rust-lang/rust/issues/75337\">#75337</a>) because it caused regressions (the crux of this issue is fixing those regressions). <a href=\"https://github.com/rust-lang/rust/issues/75255\">#75255</a> modified the closure upvar tuple so that if it contained closures, those would be polymorphized - this was necessary to avoid issues that were revealed when the new symbol mangling scheme was used (<a class=\"stream-topic\" data-stream-id=\"216091\" href=\"/#narrow/stream/216091-t-compiler.2Fwg-polymorphization/topic/symbol.20mangling.20v0.20.E2.9C.95.20polymorphisation\">#t-compiler/wg-polymorphization &gt; symbol mangling v0 âœ• polymorphisation</a> discussed this issue initially). After chatting with eddy, I'm not sure that approach <a href=\"https://github.com/rust-lang/rust/issues/75255\">#75255</a> implemented is desirable - we've experimented with changing how the polymorphization analysis treats closures, and with attempts to reveal other issues that this could be a symptom of - we haven't had any luck with that though. Anyway, the changes that <a href=\"https://github.com/rust-lang/rust/issues/75336\">#75336</a> suggests polymorphizing closures anywhere in a <code>Instance</code>'s substs, not just in the upvar tuple because that would reduce duplication of more functions (see the example in the issue).</p>\n</li>\n<li>\n<p><a href=\"https://github.com/rust-lang/rust/issues/69925\">#69925</a> is fixed by <a href=\"https://github.com/rust-lang/rust/issues/75346\">#75346</a> above.</p>\n</li>\n<li>\n<p><a href=\"https://github.com/rust-lang/rust/issues/75325\">#75325</a> is probably the biggest unknown facing polymorphization right now and relates to how we handle the <code>type_id</code> and <code>type_name</code> intrinsics - which would make polymorphization observable. The issue contains some examples which were failing at one point with polymorphization enabled (I'm not sure if that's still the case). This issue requires a lot of investigation.</p>\n</li>\n</ul>\n<p>I think that's everything. I think that landing the current PRs and addressing <a href=\"https://github.com/rust-lang/rust/issues/75325\">#75325</a> are the most important tasks right now, we can crater after that and hopefully try enabling polymorphization by default.</p>",
        "id": 209226960,
        "sender_full_name": "davidtwco",
        "timestamp": 1599401369
    },
    {
        "content": "<p>I'd also be interested in what <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> thinks the working group's next steps should be.</p>",
        "id": 209227086,
        "sender_full_name": "davidtwco",
        "timestamp": 1599401533
    }
]