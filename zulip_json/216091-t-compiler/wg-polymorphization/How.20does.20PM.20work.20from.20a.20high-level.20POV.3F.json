[
    {
        "content": "<p>From the incr-comp WG chat:</p>\n<blockquote>\n<p>We do not virtualize function calls with polymorphization</p>\n</blockquote>\n<p>How does it work, then? <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> I have no idea what you did. </p>\n<p>Should I go read your paper? I'm a CS almost-graduate and  sort of a jack of all trades, do you think I might have the knowledge? :3</p>",
        "id": 206493521,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1597083175
    },
    {
        "content": "<p>It isn’t that complicated, you’d understand it without a problem. Monomorphisation collection adds functions (and statics and other things) to a set of mono items. As a result, that means there will only be one entry for a function (invoked with the same generic parameters) from multiple callers. Polymorphization utilises this by detecting where the substitutions (the concrete types and constants corresponding to the generic params) could vary less (e.g. if a parameter is unused). In these cases, the substitutions are modified so that the mono item set does the deduplication for us and we give fewer copies of functions to LLVM.</p>",
        "id": 206494009,
        "sender_full_name": "davidtwco",
        "timestamp": 1597083478
    },
    {
        "content": "<p>Other changes are necessary to ensure the compiler won’t bail out when it sees generic parameters where there previously hadn’t been any but that’s it in a nutshell.</p>",
        "id": 206494165,
        "sender_full_name": "davidtwco",
        "timestamp": 1597083564
    },
    {
        "content": "<p>Ohhhh, I think I get it!</p>",
        "id": 206494386,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1597083700
    },
    {
        "content": "<p>Lemme see... so if I have f&lt;T&gt; which is a generic fn with a type parameter T</p>",
        "id": 206494454,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1597083726
    },
    {
        "content": "<p>And I use it twice in my code, inside two different functions - or even modules</p>",
        "id": 206494510,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1597083756
    },
    {
        "content": "<p>But in both of those instances I use the same exact instantiation of the function, let's say <code>f&lt;i32&gt;</code></p>",
        "id": 206494559,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1597083785
    },
    {
        "content": "<p><strong>then</strong> is when PM comes into play</p>",
        "id": 206494593,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1597083806
    },
    {
        "content": "<p>no</p>",
        "id": 206494631,
        "sender_full_name": "lcnr",
        "timestamp": 1597083830
    },
    {
        "content": "<p>Because rustc doesn't notice that they are the same, and actually instantiates the same function twice</p>",
        "id": 206494635,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1597083832
    },
    {
        "content": "<p>No?</p>",
        "id": 206494639,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1597083834
    },
    {
        "content": "<p>so two versions of<code>f&lt;i32&gt;</code> already work rn</p>",
        "id": 206494685,
        "sender_full_name": "lcnr",
        "timestamp": 1597083844
    },
    {
        "content": "<p>Kay</p>",
        "id": 206494706,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1597083853
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">f</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"c1\">// notice that T is unused</span>\n\n<span class=\"c1\">// both will give the same function with polymorphization</span>\n<span class=\"n\">f</span>::<span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"n\">f</span>::<span class=\"o\">&lt;</span><span class=\"kt\">u16</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 206494709,
        "sender_full_name": "bjorn3",
        "timestamp": 1597083856
    },
    {
        "content": "<p>Polymorphization is when a param <code>T</code> is unused, or in the future only for example the size is used (grouping equal sizes), but not any methods.</p>",
        "id": 206494761,
        "sender_full_name": "bjorn3",
        "timestamp": 1597083887
    },
    {
        "content": "<p>Ohh.</p>",
        "id": 206494785,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1597083900
    },
    {
        "content": "<p>Oh I see</p>",
        "id": 206494801,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1597083905
    },
    {
        "content": "<p>If you only instantiated the function once, with or without polymorphization then there’d be a single copy. If you instantiated it worth two different types and the function used the generic parameter, there would be two copies with or without polymorphization. If it is unused, then with polymorphization there would be a single copy.</p>",
        "id": 206494806,
        "sender_full_name": "davidtwco",
        "timestamp": 1597083907
    },
    {
        "content": "<p>I see</p>",
        "id": 206494841,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1597083924
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 206494865,
        "sender_full_name": "lcnr",
        "timestamp": 1597083934
    },
    {
        "content": "<p>Params are for example frequently unused when using closures, as a closure inherits all params from the parent, but may only depend on some of them.</p>",
        "id": 206494920,
        "sender_full_name": "bjorn3",
        "timestamp": 1597083958
    },
    {
        "content": "<p>I understand now. This is sort of a subset of the idea of polimorphization I thought this was: basically using dynamic dispatch to run the specific case of the function for each T at runtime</p>",
        "id": 206495003,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1597083988
    },
    {
        "content": "<p>in this example <code>&lt;u32 as Foo&lt;()&gt;&gt;::foo()</code> and <code>&lt;u32 as Foo&lt;bool&gt;&gt;::foo()</code> are currently two distinct monomorphic instances</p>",
        "id": 206495005,
        "sender_full_name": "lcnr",
        "timestamp": 1597083988
    },
    {
        "content": "<p>will polymorphization, we can merge these two</p>",
        "id": 206495019,
        "sender_full_name": "lcnr",
        "timestamp": 1597083996
    },
    {
        "content": "<p>Ohhh!</p>",
        "id": 206495090,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1597084030
    },
    {
        "content": "<p>I see now</p>",
        "id": 206495098,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1597084034
    },
    {
        "content": "<p>With traits, this pattern pops up everywhere!</p>",
        "id": 206495119,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1597084045
    },
    {
        "content": "<p>traits and closures, yeah <span aria-label=\"sparkles\" class=\"emoji emoji-2728\" role=\"img\" title=\"sparkles\">:sparkles:</span></p>",
        "id": 206495174,
        "sender_full_name": "lcnr",
        "timestamp": 1597084081
    },
    {
        "content": "<p><span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span> fuck yeah this is awesome</p>",
        "id": 206495227,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1597084094
    },
    {
        "content": "<p>iirc we want to also polymorphize stuff like <code>Vec&lt;T&gt;::len()</code> in the future</p>",
        "id": 206495258,
        "sender_full_name": "lcnr",
        "timestamp": 1597084112
    },
    {
        "content": "<p>Is <code>len()</code> dependent on <code>T</code> there?</p>",
        "id": 206495346,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1597084153
    },
    {
        "content": "<p>When the analysis becomes more advanced (as others mentioned, e.g. only the size of <code>T</code> is required) then it’ll work in more common situations.</p>",
        "id": 206495347,
        "sender_full_name": "davidtwco",
        "timestamp": 1597084153
    },
    {
        "content": "<p>e.g. <code>&lt;u32 as Foo&lt;()&gt;&gt;::foo()</code> and <code>&lt;(u16, u16) as Foo&lt;()&gt;&gt;::foo()</code> in the above example</p>",
        "id": 206495375,
        "sender_full_name": "lcnr",
        "timestamp": 1597084166
    },
    {
        "content": "<p>Ahh, okay, I thought that case was implemented already :3</p>",
        "id": 206495420,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1597084194
    },
    {
        "content": "<p><code>len</code> uses <code>Vec&lt;T&gt;</code>, which makes it dependent on <code>T</code> rn, we don't detect that <code>len</code> never actually interacts with <code>T</code> atm</p>",
        "id": 206495452,
        "sender_full_name": "lcnr",
        "timestamp": 1597084202
    },
    {
        "content": "<p>I see</p>",
        "id": 206495505,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1597084219
    },
    {
        "content": "<p>Yo this is cool AF</p>",
        "id": 206495550,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1597084240
    },
    {
        "content": "<p>And I learned something new today <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 206495592,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1597084262
    }
]