[
    {
        "content": "<p>So... I think you said that constant items don't work anymore, and I think that is <a href=\"https://github.com/rust-lang/rust/blob/f6d54aa0c165da52560e5c032b4c65bb11833e0e/compiler/rustc_mir/src/monomorphize/polymorphize.rs#L83\">https://github.com/rust-lang/rust/blob/f6d54aa0c165da52560e5c032b4c65bb11833e0e/compiler/rustc_mir/src/monomorphize/polymorphize.rs#L83</a></p>",
        "id": 222711886,
        "sender_full_name": "oli",
        "timestamp": 1610628571
    },
    {
        "content": "<p>we polymorphize const functions with their optimized MIR instead of the mir for CTFE, since I thought polymorphization was only used for runtime code</p>",
        "id": 222711974,
        "sender_full_name": "oli",
        "timestamp": 1610628612
    },
    {
        "content": "<p>but for associated constants which can call generic const fn, that's not true</p>",
        "id": 222711991,
        "sender_full_name": "oli",
        "timestamp": 1610628626
    },
    {
        "content": "<p>I'm not sure what to do about this...</p>",
        "id": 222712046,
        "sender_full_name": "oli",
        "timestamp": 1610628664
    },
    {
        "content": "<p>Could you describe the difference between the MIR for CTFE and the optimized MIR? I've not been following that work closely.</p>",
        "id": 222712069,
        "sender_full_name": "davidtwco",
        "timestamp": 1610628684
    },
    {
        "content": "<p>MIR for CTFE is just some MIR that hasn't had any optimizations run that could affect UB</p>",
        "id": 222712353,
        "sender_full_name": "oli",
        "timestamp": 1610628815
    },
    {
        "content": "<p>so it's MIR from an earlier stage in the MIR opt pipeline</p>",
        "id": 222712375,
        "sender_full_name": "oli",
        "timestamp": 1610628825
    },
    {
        "content": "<p>Ah, alright</p>",
        "id": 222712447,
        "sender_full_name": "davidtwco",
        "timestamp": 1610628847
    },
    {
        "content": "<p>So... right now what we could do is always use <code>mir_for_ctfe</code> for <code>const fn</code>, this will be slightly pessimistic for polymorphization, but I don't think it should be too bad in practice. Basically all that should change is that uses of generic parameters in dead code are considered as uses</p>",
        "id": 222712941,
        "sender_full_name": "oli",
        "timestamp": 1610629149
    },
    {
        "content": "<p>I don't quite follow why using a less optimized MIR would result in ICEs that an optimized MIR wouldn't (in fact, intuitively, I would expect the opposite, giving that an optimized MIR could have optimized away something which caused an ICE).</p>",
        "id": 222713213,
        "sender_full_name": "davidtwco",
        "timestamp": 1610629306
    },
    {
        "content": "<p>well... the problem is that <em>right now</em> the code uses the optimized MIR for polymorphize analysis, but uses the unoptimized MIR for running const eval</p>",
        "id": 222713820,
        "sender_full_name": "oli",
        "timestamp": 1610629652
    },
    {
        "content": "<p>I made a mistake in my question, it should have been why using a less optimized MIR <em>wouldn't</em> result in ICEs. I understand that you are saying that using <code>mir_for_ctfe</code> would solve the problem (and give polymorphization more MIR to work through, as it is less optimized), but I don't understand what property of <code>mir_for_ctfe</code> means that there would no longer be a cycle error?</p>\n<p>Also, the second ICE, \"associated type missing default\" originates from polymorphization's <code>mark_used_by_default_parameters</code>, which happens before we ask for either <code>optimized_mir</code> or <code>mir_for_ctfe</code>, that's a different issue then?</p>",
        "id": 222714875,
        "sender_full_name": "davidtwco",
        "timestamp": 1610630257
    },
    {
        "content": "<p>I just tried using <code>mir_for_ctfe</code>, and it didn't work for either the ICE or the cycle</p>",
        "id": 222715272,
        "sender_full_name": "oli",
        "timestamp": 1610630460
    },
    {
        "content": "<p><span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 222715316,
        "sender_full_name": "davidtwco",
        "timestamp": 1610630487
    },
    {
        "content": "<p>I wonder if my PR is actually at fault for the cycle thing, it may be some other <code>const_evaluatable_unchecked</code> change</p>",
        "id": 222715329,
        "sender_full_name": "oli",
        "timestamp": 1610630501
    },
    {
        "content": "<p>I believe that the second ICE could be fixed by changing <a href=\"https://github.com/rust-lang/rust/blob/a4f022e1099c712fdcc8555fd10caccb1a631877/compiler/rustc_mir/src/monomorphize/polymorphize.rs#L110\">this line</a> - <code>is_closure</code>, as it turns out, actually checks for both <code>DefKind::Closure</code> and <code>DefKind::Generator</code>, so the <code>type_of(..).is_generator()</code> call which results in the ICE can just be removed.</p>",
        "id": 222715563,
        "sender_full_name": "davidtwco",
        "timestamp": 1610630611
    },
    {
        "content": "<p>I wonder if that was always true and I added that condition mistakenly or if something changed.</p>",
        "id": 222715726,
        "sender_full_name": "davidtwco",
        "timestamp": 1610630686
    },
    {
        "content": "<p>(regardless, I might rename <code>is_closure</code> to <code>is_closure_or_generator</code>)</p>",
        "id": 222715847,
        "sender_full_name": "davidtwco",
        "timestamp": 1610630743
    },
    {
        "content": "<p>Maybe it's because I removed <code>self.tcx.mir_keys(LOCAL_CRATE).contains(&amp;def_id)</code> during encoding without considering all the cases</p>",
        "id": 222716044,
        "sender_full_name": "oli",
        "timestamp": 1610630822
    },
    {
        "content": "<p>yea, the ICE happens on the <code>N</code> in the trait bound on the assoc const in</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Assoc</span>: <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 222716425,
        "sender_full_name": "oli",
        "timestamp": 1610630983
    },
    {
        "content": "<p>jup that's it</p>",
        "id": 222717070,
        "sender_full_name": "oli",
        "timestamp": 1610631270
    },
    {
        "content": "<p>we used to skip encoding mir for anon consts that have no mir body</p>",
        "id": 222717089,
        "sender_full_name": "oli",
        "timestamp": 1610631280
    },
    {
        "content": "<p><span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 222717114,
        "sender_full_name": "oli",
        "timestamp": 1610631289
    },
    {
        "content": "<p>that makes sense</p>",
        "id": 222717136,
        "sender_full_name": "davidtwco",
        "timestamp": 1610631303
    },
    {
        "content": "<p>I have so high hopes for that PR that stops using HIR to do metadata encoding</p>",
        "id": 222717188,
        "sender_full_name": "oli",
        "timestamp": 1610631334
    },
    {
        "content": "<p>I have a busy week, not sure I'll get to this this week, but I haven't forgotten about it</p>",
        "id": 223390526,
        "sender_full_name": "oli",
        "timestamp": 1611157320
    }
]