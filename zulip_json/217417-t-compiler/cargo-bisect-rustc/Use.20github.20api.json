[
    {
        "content": "<p>I have a prototype branch of cargo-bisect-rustc that uses Github API directly. It is pretty cool.</p>",
        "id": 189139632,
        "sender_full_name": "pnkfelix",
        "timestamp": 1582740013
    },
    {
        "content": "<p>I originally tried to build it atop the <code>hubcaps</code> crate, but I eventually gave up on that (due to the current release of hubcaps not having support for requesting lists of commits) and made an ad-hoc solution atop <code>reqwest</code>. Luckily we really don't need to use a very large API surface at all.</p>",
        "id": 189139975,
        "sender_full_name": "pnkfelix",
        "timestamp": 1582740195
    },
    {
        "content": "<p>Excellent!  I was just taking a look at the GitHub API last night to do the same thing.  It looks like much of the git module can go away, including the clone of the rust repository.  This will be a big improvement.</p>",
        "id": 189144311,
        "sender_full_name": "Chris Simpkins",
        "timestamp": 1582742401
    },
    {
        "content": "<p>I submitted a PR last night that updates <code>reqwest</code> to the current release.  The GET request API changed in recent releases.  Async is default now so imports will change to the <code>blocking</code> library.</p>",
        "id": 189144460,
        "sender_full_name": "Chris Simpkins",
        "timestamp": 1582742493
    },
    {
        "content": "<p>This part of the API: <a href=\"https://developer.github.com/v3/repos/commits/#list-pull-requests-associated-with-commit\" target=\"_blank\" title=\"https://developer.github.com/v3/repos/commits/#list-pull-requests-associated-with-commit\">https://developer.github.com/v3/repos/commits/#list-pull-requests-associated-with-commit</a></p>\n<p>looks like it might also support automation of the regression commit SHA -&gt; PR in the final report</p>",
        "id": 189146187,
        "sender_full_name": "Chris Simpkins",
        "timestamp": 1582743407
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> If you don't mind pushing a branch, I'd be interested to see how you are approaching it</p>",
        "id": 189146672,
        "sender_full_name": "Chris Simpkins",
        "timestamp": 1582743701
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"262810\">@Chris Simpkins</span> :  <a href=\"https://github.com/pnkfelix/cargo-bisect-rustc/tree/use-github-api\" target=\"_blank\" title=\"https://github.com/pnkfelix/cargo-bisect-rustc/tree/use-github-api\">https://github.com/pnkfelix/cargo-bisect-rustc/tree/use-github-api</a></p>",
        "id": 189155365,
        "sender_full_name": "pnkfelix",
        "timestamp": 1582748870
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/217417-t-compiler.2Fcargo-bisect-rustc/topic/Use.20github.20api/near/189155365\" title=\"#narrow/stream/217417-t-compiler.2Fcargo-bisect-rustc/topic/Use.20github.20api/near/189155365\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"262810\">Chris Simpkins</span> :  <a href=\"https://github.com/pnkfelix/cargo-bisect-rustc/tree/use-github-api\" target=\"_blank\" title=\"https://github.com/pnkfelix/cargo-bisect-rustc/tree/use-github-api\">https://github.com/pnkfelix/cargo-bisect-rustc/tree/use-github-api</a></p>\n</blockquote>\n<p>Tyvm!  I will take a look tonight.</p>",
        "id": 189155441,
        "sender_full_name": "Chris Simpkins",
        "timestamp": 1582748907
    },
    {
        "content": "<p>I'm going to do a bunch of cleanup of that commit series before I make any PR for it</p>",
        "id": 189155443,
        "sender_full_name": "pnkfelix",
        "timestamp": 1582748909
    },
    {
        "content": "<p>but you can at least see what I settled on in my final approach</p>",
        "id": 189155458,
        "sender_full_name": "pnkfelix",
        "timestamp": 1582748920
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"262810\">Chris Simpkins</span> <a href=\"#narrow/stream/217417-t-compiler.2Fcargo-bisect-rustc/topic/Use.20github.20api/near/189146187\" title=\"#narrow/stream/217417-t-compiler.2Fcargo-bisect-rustc/topic/Use.20github.20api/near/189146187\">said</a>:</p>\n<blockquote>\n<p>This part of the API: <a href=\"https://developer.github.com/v3/repos/commits/#list-pull-requests-associated-with-commit\" target=\"_blank\" title=\"https://developer.github.com/v3/repos/commits/#list-pull-requests-associated-with-commit\">https://developer.github.com/v3/repos/commits/#list-pull-requests-associated-with-commit</a></p>\n<p>looks like it might also support automation of the regression commit SHA -&gt; PR in the final report</p>\n</blockquote>\n<p>interesting. In practice I don't think we need this, because we only bisect down to the bors commits, which have the PR's in their commit message. (I.e. that mapping isn't happening, I think, in cargo-bisect-rustc; its just an artifact of how bors formats its merge commit messages.)</p>",
        "id": 189207608,
        "sender_full_name": "pnkfelix",
        "timestamp": 1582805197
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> one thing about using github API -- it might make sense for us to stand up a proxy or something to it that authenticates the specific requests we need. the rate limits without a token are pretty painful...</p>",
        "id": 189208776,
        "sender_full_name": "simulacrum",
        "timestamp": 1582806390
    },
    {
        "content": "<p>e.g. we can add an endpoint to triagebot that'll return exactly what bisect needs, but without requiring auth on the bisect end</p>",
        "id": 189208802,
        "sender_full_name": "simulacrum",
        "timestamp": 1582806421
    },
    {
        "content": "<p>couldn't that be used to dos triagebot?</p>",
        "id": 189208830,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1582806442
    },
    {
        "content": "<p>eh, I figured if one hits the rate limit the code in bisect could just fall back on the old strategy?</p>",
        "id": 189208838,
        "sender_full_name": "pnkfelix",
        "timestamp": 1582806452
    },
    {
        "content": "<p>hm, how many requests do we make?</p>",
        "id": 189208849,
        "sender_full_name": "simulacrum",
        "timestamp": 1582806463
    },
    {
        "content": "<p>the unauthenticated rate limit is basically unusable, 60 req/hour from an ip</p>",
        "id": 189208854,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1582806473
    },
    {
        "content": "<p>(I haven't <em>implemented</em> that strategy yet, but it was my plan)</p>",
        "id": 189208857,
        "sender_full_name": "pnkfelix",
        "timestamp": 1582806474
    },
    {
        "content": "<p>((by \"old strategy\", I mean making a local checkout of the repo.))</p>",
        "id": 189208919,
        "sender_full_name": "pnkfelix",
        "timestamp": 1582806497
    },
    {
        "content": "<p>so if you're under a corp nat or on ci it's practically 0 req/forever</p>",
        "id": 189208924,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1582806502
    },
    {
        "content": "<p>triagebot will likely soon have access to 12,500 requests/hour, roughly, and presumably we can even go further than that (i.e., cache the results -- we don't have that many PRs)</p>",
        "id": 189208949,
        "sender_full_name": "simulacrum",
        "timestamp": 1582806516
    },
    {
        "content": "<p>I would be very hesitant on relying on the non-authenticated API though to be clear, even if we have fallback</p>",
        "id": 189209112,
        "sender_full_name": "simulacrum",
        "timestamp": 1582806627
    },
    {
        "content": "<p>I'd guess we'd hit that fallback a ton and it's pretty expensive fallback</p>",
        "id": 189209119,
        "sender_full_name": "simulacrum",
        "timestamp": 1582806639
    },
    {
        "content": "<p>hmm, what we could do is store a plaintext mapping of commit =&gt; pr somewhere</p>",
        "id": 189209160,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1582806700
    },
    {
        "content": "<p>well sure that's basically the same as triagebot caching it in the db, imo</p>",
        "id": 189209217,
        "sender_full_name": "simulacrum",
        "timestamp": 1582806733
    },
    {
        "content": "<p>(well, worse, to be honest)</p>",
        "id": 189209231,
        "sender_full_name": "simulacrum",
        "timestamp": 1582806748
    },
    {
        "content": "<p>isn't that out of scope for triagebot though?</p>",
        "id": 189209265,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1582806781
    },
    {
        "content": "<p>it seems to be like it's drifting to be more of the \"everything the team needs bot\"</p>",
        "id": 189209307,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1582806825
    },
    {
        "content": "<p>I consider triagebot our single solution to triage (including things like this). But of course we can stand up a separate service too...</p>",
        "id": 189209309,
        "sender_full_name": "simulacrum",
        "timestamp": 1582806828
    },
    {
        "content": "<p>which is not... bad, and I sort of like that, but we would need to at least rename it :)</p>",
        "id": 189209360,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1582806848
    },
    {
        "content": "<p>well, I mean, at github it's \"rustbot\" already :)</p>",
        "id": 189209377,
        "sender_full_name": "simulacrum",
        "timestamp": 1582806860
    },
    {
        "content": "<p>it'll probably be a github app soon which'll also mean it's in the bot namespace of usernames</p>",
        "id": 189209397,
        "sender_full_name": "simulacrum",
        "timestamp": 1582806878
    },
    {
        "content": "<p>Thoughts about implementing <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> approach until the triagebot support is implemented?  Even with the GH API rate limit issue, this will be a significant improvement for those of us who are using the tool for one off bisect diagnostics on ICE reports.  These are low volume API hits and would stay well within the 60/hr range in my case/IP.  And the only \"downside\" for users who hit the rate limit is that they fall back to the current approach to bare clone the Rust git repository that is the current default in the tool</p>",
        "id": 189237978,
        "sender_full_name": "Chris Simpkins",
        "timestamp": 1582826294
    },
    {
        "content": "<p>I think it's fine to merge it in, but I'd want to contemplate it in a release at least a bit</p>",
        "id": 189252166,
        "sender_full_name": "simulacrum",
        "timestamp": 1582834484
    },
    {
        "content": "<p>(maybe gather some feedback from internal dogfooding)</p>",
        "id": 189252189,
        "sender_full_name": "simulacrum",
        "timestamp": 1582834501
    },
    {
        "content": "<p>My current implementation puts github support up under a command line flag that you use to choose which strategy you want to use. (And there's no fallback from github to local git yet). Would people prefer the local git checkout strategy to remain the default?</p>",
        "id": 189253325,
        "sender_full_name": "pnkfelix",
        "timestamp": 1582835280
    },
    {
        "content": "<p>I think we should have the github be the default and no auto fallback, personally</p>",
        "id": 189253481,
        "sender_full_name": "simulacrum",
        "timestamp": 1582835375
    },
    {
        "content": "<p>(we should tell people: \"you ran up against rate limits, please pass <code>--clone-repo</code> or wait until $DATE\"</p>",
        "id": 189253571,
        "sender_full_name": "simulacrum",
        "timestamp": 1582835403
    },
    {
        "content": "<blockquote>\n<p>I think we should have the github be the default and no auto fallback, personally</p>\n</blockquote>\n<p>Is it worth considering GH API authentication support in that case?</p>",
        "id": 189253876,
        "sender_full_name": "Chris Simpkins",
        "timestamp": 1582835586
    },
    {
        "content": "<p>I wouldn't, I think</p>",
        "id": 189253987,
        "sender_full_name": "simulacrum",
        "timestamp": 1582835663
    },
    {
        "content": "<p>I guess we <em>could</em> in theory</p>",
        "id": 189253997,
        "sender_full_name": "simulacrum",
        "timestamp": 1582835671
    },
    {
        "content": "<p>but it's a bit not great to have that in e.g. an environment variable (for security reasons)</p>",
        "id": 189254018,
        "sender_full_name": "simulacrum",
        "timestamp": 1582835693
    },
    {
        "content": "<p>oh, is it not standard practice to access the GITHUB_TOKEN via an env var?</p>",
        "id": 189256626,
        "sender_full_name": "pnkfelix",
        "timestamp": 1582837389
    },
    {
        "content": "<p>I have a command that pulls it out of my password manager when needed</p>",
        "id": 189256686,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1582837426
    },
    {
        "content": "<p>to avoid every single thing you run on your computer to have access to it</p>",
        "id": 189256707,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1582837439
    },
    {
        "content": "<p>I see. I guess I'm too trusting.</p>",
        "id": 189256755,
        "sender_full_name": "pnkfelix",
        "timestamp": 1582837450
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121055\">@Pietro Albini</span> what is the interface for your thing like, from the viewpoint of an app that wants access to the github token?</p>",
        "id": 189256781,
        "sender_full_name": "pnkfelix",
        "timestamp": 1582837477
    },
    {
        "content": "<p>does it take it on the command line, or via stdin, or ... ?</p>",
        "id": 189256798,
        "sender_full_name": "pnkfelix",
        "timestamp": 1582837488
    },
    {
        "content": "<p>still the env var</p>",
        "id": 189256803,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1582837492
    },
    {
        "content": "<p>I basically do <code>eval $(pass vars/github-token)</code></p>",
        "id": 189256819,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1582837502
    },
    {
        "content": "<p>oh. So you just decide whether or not to <em>set</em> the env var on the case by case basis</p>",
        "id": 189256833,
        "sender_full_name": "pnkfelix",
        "timestamp": 1582837512
    },
    {
        "content": "<p>(with a nicer alias on top of that)</p>",
        "id": 189256837,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1582837515
    },
    {
        "content": "<p>So it probably <em>is</em> okay for me to set this up so that it queries the GITHUB_TOKEN env var?</p>",
        "id": 189256870,
        "sender_full_name": "pnkfelix",
        "timestamp": 1582837537
    },
    {
        "content": "<p>yep, on most of the shells it's not set, and when I need it I have to explicitly want that and press the physical button on the yubikey</p>",
        "id": 189256897,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1582837557
    },
    {
        "content": "<p>(the other option I was considering was to make that env var access condtional on the user passing in some command line flag.)</p>",
        "id": 189256902,
        "sender_full_name": "pnkfelix",
        "timestamp": 1582837562
    },
    {
        "content": "<p>well if the env var is there I don't see why not use it</p>",
        "id": 189256969,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1582837582
    },
    {
        "content": "<p>my interpretation of mark's comment is that people shouldn't just stick it in their bashrc</p>",
        "id": 189257035,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1582837630
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/217417-t-compiler.2Fcargo-bisect-rustc/topic/Use.20github.20api/near/189253481\" title=\"#narrow/stream/217417-t-compiler.2Fcargo-bisect-rustc/topic/Use.20github.20api/near/189253481\">said</a>:</p>\n<blockquote>\n<p>I think we should have the github be the default and no auto fallback, personally</p>\n</blockquote>\n<p>Well maybe for the initial landing I'd make github be opt-in, with the intention of switching the default after everyone's had a chance to stress it a little...</p>",
        "id": 189257050,
        "sender_full_name": "pnkfelix",
        "timestamp": 1582837648
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"121055\">Pietro Albini</span> <a href=\"#narrow/stream/217417-t-compiler.2Fcargo-bisect-rustc/topic/Use.20github.20api/near/189257035\" title=\"#narrow/stream/217417-t-compiler.2Fcargo-bisect-rustc/topic/Use.20github.20api/near/189257035\">said</a>:</p>\n<blockquote>\n<p>my interpretation of mark's comment is that people shouldn't just stick it in their bashrc</p>\n</blockquote>\n<p>okay now I see. I think.</p>",
        "id": 189257064,
        "sender_full_name": "pnkfelix",
        "timestamp": 1582837665
    },
    {
        "content": "<p>boy and here I was thinking I was a good citizen for making sure it (my setting of the env var) wasn't part of the dotfiles that I have under version control in a public server.</p>",
        "id": 189257174,
        "sender_full_name": "pnkfelix",
        "timestamp": 1582837727
    },
    {
        "content": "<p>heh :)</p>",
        "id": 189258022,
        "sender_full_name": "simulacrum",
        "timestamp": 1582838193
    },
    {
        "content": "<p>yeah I basically don't want to encourage a bashrc type configuration of it</p>",
        "id": 189258051,
        "sender_full_name": "simulacrum",
        "timestamp": 1582838204
    },
    {
        "content": "<p>but reading it opportunistically seems good</p>",
        "id": 189258102,
        "sender_full_name": "simulacrum",
        "timestamp": 1582838215
    },
    {
        "content": "<p>maybe warning if it's not set and in github api mode?</p>",
        "id": 189258135,
        "sender_full_name": "simulacrum",
        "timestamp": 1582838229
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> </p>\n<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/217417-t-compiler.2Fcargo-bisect-rustc/topic/Use.20github.20api/near/189207608\" title=\"#narrow/stream/217417-t-compiler.2Fcargo-bisect-rustc/topic/Use.20github.20api/near/189207608\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"262810\">Chris Simpkins</span> <a href=\"#narrow/stream/217417-t-compiler.2Fcargo-bisect-rustc/topic/Use.20github.20api/near/189146187\" title=\"#narrow/stream/217417-t-compiler.2Fcargo-bisect-rustc/topic/Use.20github.20api/near/189146187\">said</a>:</p>\n<blockquote>\n<p>This part of the API: <a href=\"https://developer.github.com/v3/repos/commits/#list-pull-requests-associated-with-commit\" target=\"_blank\" title=\"https://developer.github.com/v3/repos/commits/#list-pull-requests-associated-with-commit\">https://developer.github.com/v3/repos/commits/#list-pull-requests-associated-with-commit</a></p>\n<p>looks like it might also support automation of the regression commit SHA -&gt; PR in the final report</p>\n</blockquote>\n<p>interesting. In practice I don't think we need this, because we only bisect down to the bors commits, which have the PR's in their commit message. (I.e. that mapping isn't happening, I think, in cargo-bisect-rustc; its just an artifact of how bors formats its merge commit messages.)</p>\n</blockquote>\n<p>This may be dated information, but it looks like <a href=\"https://github.com/rust-lang/rustc-guide/pull/556#issuecomment-574353605\" target=\"_blank\" title=\"https://github.com/rust-lang/rustc-guide/pull/556#issuecomment-574353605\">Niko suggested this format</a> in the final Markdown report that is generated for IR threads by bisect-rustc:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">*</span> &quot;blah blah blah&quot;, PR <span class=\"ni\">#123</span> by <span class=\"ni\">@so</span>-and-so\n</pre></div>\n\n\n<p>I don't believe that we have support to dive into the commits in a rollup PR yet so we may not be ready to automate the individual PR link and PR author notification anyways.  Could we improve the final bisect-rustc report by adding the regressed commit message?  This would get us to a report that includes the SHA range tested, regression commit SHA, and the commit message.  A human still needs to be involved to review the PR's identified in the rollups but the information is all in the final bisect-rustc report pushed to the tracker.  With your recent changes to support <code>--regress</code> we should be able to automate the stderr stacktrace message reporting for the regressed commit build too?   This is much closer to a direct copy/paste report</p>",
        "id": 189389980,
        "sender_full_name": "Chris Simpkins",
        "timestamp": 1582981750
    },
    {
        "content": "<p>okay I posted the rebased PR: <a href=\"https://github.com/rust-lang/cargo-bisect-rustc/issues/63\" target=\"_blank\" title=\"https://github.com/rust-lang/cargo-bisect-rustc/issues/63\">cargo-bisect-rustc#63</a></p>",
        "id": 189536668,
        "sender_full_name": "pnkfelix",
        "timestamp": 1583183235
    },
    {
        "content": "<p>unfortunately I have not been able to test this rebased one as thoroughly as my original version. I'm pretty sure it all works, but I kind of had to make some semi-guesses at how to handle the switch from reqwest 0.9 to reqwest 0.10</p>",
        "id": 189536804,
        "sender_full_name": "pnkfelix",
        "timestamp": 1583183302
    },
    {
        "content": "<p>(I <em>have</em> tested it, and I even have come up with a more general testing strategy. I'll post in that topic about that.)</p>",
        "id": 189536832,
        "sender_full_name": "pnkfelix",
        "timestamp": 1583183322
    },
    {
        "content": "<p>I came across this issue when I used the new Github API query in bisect-rustc for an ICE that fell outside of the 167 day CI commit window: <a href=\"https://github.com/rust-lang/cargo-bisect-rustc/issues/69\" target=\"_blank\" title=\"https://github.com/rust-lang/cargo-bisect-rustc/issues/69\">https://github.com/rust-lang/cargo-bisect-rustc/issues/69</a></p>",
        "id": 190281345,
        "sender_full_name": "Chris Simpkins",
        "timestamp": 1583933859
    },
    {
        "content": "<p>IIRC, when the Rust repository is cloned the tool reports the git commit SHA's that are included in the nightly?   Thoughts about the more informative/useful approach?</p>",
        "id": 190281783,
        "sender_full_name": "Chris Simpkins",
        "timestamp": 1583934109
    },
    {
        "content": "<p>seems reasonable enough.</p>",
        "id": 190290658,
        "sender_full_name": "pnkfelix",
        "timestamp": 1583938783
    },
    {
        "content": "<p>the main issue I can imagine (and this may be what stopped me from doing this myself) is how to handle presentation: if you emit the SHA before the description, then that is yet more text that appears before the description, causing it to flow into the next line (or off the window if one is not line wrapping the output)</p>",
        "id": 190290848,
        "sender_full_name": "pnkfelix",
        "timestamp": 1583938853
    },
    {
        "content": "<p>but if you emit the SHA after the description, then the SHA's don't line up in the output. <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 190290894,
        "sender_full_name": "pnkfelix",
        "timestamp": 1583938877
    },
    {
        "content": "<p>We may be able to shorten the SHA?  I think that Github still recognizes it in issue threads when the SHA is the first ~6-7 chars?</p>",
        "id": 190291327,
        "sender_full_name": "Chris Simpkins",
        "timestamp": 1583939075
    },
    {
        "content": "<p>and auto links / generates hover popup of the commit IIRC</p>",
        "id": 190291374,
        "sender_full_name": "Chris Simpkins",
        "timestamp": 1583939105
    },
    {
        "content": "<p>okay. and we could also get rid of the current <code>commit[{}]</code> part of the output, replace that with the SHA</p>",
        "id": 190293134,
        "sender_full_name": "pnkfelix",
        "timestamp": 1583939943
    },
    {
        "content": "<p>or maybe write it as <code>{SHA}[{I}]</code> instead of <code>commit[{I}]</code></p>",
        "id": 190293198,
        "sender_full_name": "pnkfelix",
        "timestamp": 1583939972
    },
    {
        "content": "<p>checking the length of sha comment now to confirm that this actually works</p>",
        "id": 190295941,
        "sender_full_name": "Chris Simpkins",
        "timestamp": 1583941217
    },
    {
        "content": "<p>It looks like GH formats down to 7 characters.  When I drop to 6, it does not auto link.  When I increase to 8 it shows 7 of them. </p>\n<p><a href=\"/user_uploads/4715/9udr4wT76VYTyK2a-GKCS51V/2020-03-11_11-46-00.png\" target=\"_blank\" title=\"2020-03-11_11-46-00.png\">2020-03-11_11-46-00.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/9udr4wT76VYTyK2a-GKCS51V/2020-03-11_11-46-00.png\" target=\"_blank\" title=\"2020-03-11_11-46-00.png\"><img src=\"/user_uploads/4715/9udr4wT76VYTyK2a-GKCS51V/2020-03-11_11-46-00.png\"></a></div>",
        "id": 190296794,
        "sender_full_name": "Chris Simpkins",
        "timestamp": 1583941627
    },
    {
        "content": "<p>this is without the full URL string, only the initial SHA hex characters in the Markdown</p>\n<p>Edit: I can also confirm that I am seeing the auto hover popup with commit message here.</p>",
        "id": 190297106,
        "sender_full_name": "Chris Simpkins",
        "timestamp": 1583941761
    },
    {
        "content": "<p>GitHub will autocondense long SHAs in markdown, please use at least 8 characters or so to avoid ambiguity :)</p>",
        "id": 190297902,
        "sender_full_name": "simulacrum",
        "timestamp": 1583942127
    },
    {
        "content": "<p>Excellent point! <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 190298484,
        "sender_full_name": "Chris Simpkins",
        "timestamp": 1583942388
    }
]