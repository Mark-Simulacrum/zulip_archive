[
    {
        "content": "<p>In the current <code>asm!</code> proposal, you can name operands the same way you can with format strings:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">asm</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;mov {foo}, {bar}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lateout</span><span class=\"p\">(</span><span class=\"n\">reg</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"p\">(</span><span class=\"n\">reg</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>",
        "id": 183367131,
        "sender_full_name": "Amanieu",
        "timestamp": 1576249650
    },
    {
        "content": "<p>Note the repetition here: <code>foo</code> and <code>bar</code> each occur 3 times in the code.</p>",
        "id": 183367224,
        "sender_full_name": "Amanieu",
        "timestamp": 1576249690
    },
    {
        "content": "<p>There is an RFC to improve this for format strings (<a href=\"https://github.com/rust-lang/rfcs/pull/2795\" target=\"_blank\" title=\"https://github.com/rust-lang/rfcs/pull/2795\">https://github.com/rust-lang/rfcs/pull/2795</a>):</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">person</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">&quot;Charlie&quot;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"n\">print</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;Hello, {person}!&quot;</span><span class=\"p\">);</span><span class=\"w\">    </span><span class=\"c1\">// implicit named argument `person`</span>\n</pre></div>",
        "id": 183367352,
        "sender_full_name": "Amanieu",
        "timestamp": 1576249779
    },
    {
        "content": "<p>But this won't work for us since we need additional information apart from just the variable name (<code>in</code>/<code>out</code> &amp; register class).</p>",
        "id": 183367434,
        "sender_full_name": "Amanieu",
        "timestamp": 1576249814
    },
    {
        "content": "<p>Just a thought: why not abandon positional arguments altogether? That is, the following would not only be legal, but _required_:</p>",
        "id": 183370292,
        "sender_full_name": "mark-i-m",
        "timestamp": 1576251469
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>asm!(&quot;mov {foo}, {bar}&quot;, lateout(reg) foo, in(reg) bar);\n</pre></div>",
        "id": 183370352,
        "sender_full_name": "mark-i-m",
        "timestamp": 1576251488
    },
    {
        "content": "<p>I guess one could still use <code>{0}</code> specifiers if they really wanted positional args... but it's my experience that positional arguments are a bit of a pain in longer asm fragments because anytime you insert or remove an argument from the string, you have to count to the right place in the argument list and add or remove the right one...</p>",
        "id": 183370583,
        "sender_full_name": "mark-i-m",
        "timestamp": 1576251609
    },
    {
        "content": "<p>Note that in my example, <code>foo</code> and <code>bar</code> are also variable, which is why the same name is used for the operand name and the value.</p>",
        "id": 183373129,
        "sender_full_name": "Amanieu",
        "timestamp": 1576253126
    },
    {
        "content": "<p>However asm operands can be arbitrary expressions:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">asm</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;mov {foo}, {bar}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lateout</span><span class=\"p\">(</span><span class=\"n\">reg</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">some_func</span><span class=\"p\">().</span><span class=\"n\">val</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"p\">(</span><span class=\"n\">reg</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"k\">i32</span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>",
        "id": 183373227,
        "sender_full_name": "Amanieu",
        "timestamp": 1576253180
    },
    {
        "content": "<p>Hmm... forgot about that... I don't tend to write asm fragments like that</p>",
        "id": 183374582,
        "sender_full_name": "mark-i-m",
        "timestamp": 1576254030
    },
    {
        "content": "<p>I'm curious how often others do?</p>",
        "id": 183374592,
        "sender_full_name": "mark-i-m",
        "timestamp": 1576254041
    },
    {
        "content": "<p>Here's an example from my code:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"n\">asm</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">asm_interruptible_syscall</span><span class=\"o\">!</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">        </span>: <span class=\"s\">&quot;=&amp;r&quot;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">interrupted</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">          </span><span class=\"s\">&quot;={x0}&quot;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span>: <span class=\"s\">&quot;*m&quot;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">interrupt_flag</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">          </span><span class=\"s\">&quot;{x7}&quot;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">nr</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">          </span><span class=\"s\">&quot;{x8}&quot;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">NR_TANGO_COMPAT</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">          </span><span class=\"s\">&quot;{x13}&quot;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">sp</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">          </span><span class=\"s\">&quot;{x15}&quot;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">pc</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span>: <span class=\"s\">&quot;x7&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">&quot;memory&quot;</span><span class=\"w\"></span>\n<span class=\"w\">        </span>: <span class=\"s\">&quot;volatile&quot;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>",
        "id": 183375700,
        "sender_full_name": "Amanieu",
        "timestamp": 1576254732
    },
    {
        "content": "<p>Another issue that makes this harder for us: you can <em>repeat</em> a name, if you need it to appear in more than one register. For instance, consider something like <code>in(reg) foo, inout(reg) foo</code>, which needs to supply a register containing <code>foo</code> and another register containing <code>foo</code> that you can write to to set the outgoing value of <code>foo</code>. That would make <code>{foo}</code> ambiguous.</p>",
        "id": 183495659,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1576429311
    },
    {
        "content": "<p>I'm considering not adding any shorthand notation for now. We can leave this as a future extension.</p>",
        "id": 183497241,
        "sender_full_name": "Amanieu",
        "timestamp": 1576432073
    },
    {
        "content": "<p>That sounds reasonable. We can develop a shorthand in the future, after we've had some more experience with the syntax.</p>",
        "id": 183497542,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1576432584
    }
]