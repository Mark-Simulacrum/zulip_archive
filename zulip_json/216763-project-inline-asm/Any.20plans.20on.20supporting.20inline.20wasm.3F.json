[
    {
        "content": "<p>I just tried using asm! in a wasm project and got this error: <code>error[E0472]: asm! is unsupported on this target</code> I'm wondering if there are plans on supporting asm! for wasm?</p>",
        "id": 208798819,
        "sender_full_name": "osa1",
        "timestamp": 1599038703
    },
    {
        "content": "<p>It's theoretically possible. There aren't concrete plans. LLVM's support for inline wasm is rather quirky.</p>",
        "id": 208830654,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599056425
    },
    {
        "content": "<p>Is there anything that you need asm for that you can't achieve with the intrinsics in <code>std::arch</code>?</p>",
        "id": 208830725,
        "sender_full_name": "Amanieu",
        "timestamp": 1599056462
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"143274\">Amanieu</span> <a href=\"#narrow/stream/216763-project-inline-asm/topic/Any.20plans.20on.20supporting.20inline.20wasm.3F/near/208830725\">said</a>:</p>\n<blockquote>\n<p>Is there anything that you need asm for that you can't achieve with the intrinsics in <code>std::arch</code>?</p>\n</blockquote>\n<p>Yes, reading a global defined in another module, for example.</p>",
        "id": 208837028,
        "sender_full_name": "osa1",
        "timestamp": 1599058779
    },
    {
        "content": "<p>I'm not familiar with wasm, how would that look like in asm? Can't you do it with <code>extern</code>?</p>",
        "id": 208837208,
        "sender_full_name": "Amanieu",
        "timestamp": 1599058826
    },
    {
        "content": "<p>The story is a bit complicated, but basically the other module that defines the global is not generated by LLVM and is not statically or dynamically linkable. It just has a global and exports it, directly, without following linking conventions.</p>",
        "id": 208837393,
        "sender_full_name": "osa1",
        "timestamp": 1599058888
    },
    {
        "content": "<p>wasm global != rust global. A wasm global is a single value that you can't get a reference to, but only access using <code>global.get</code> and <code>global.set</code>. It doesn't have a memory location, unlike rust globals.</p>",
        "id": 208837463,
        "sender_full_name": "bjorn3",
        "timestamp": 1599058912
    },
    {
        "content": "<p>If I could generate inline Wasm I'd just generate <code>global.read $blah</code>. I'd also need an import though.</p>",
        "id": 208837480,
        "sender_full_name": "osa1",
        "timestamp": 1599058918
    },
    {
        "content": "<p>I know <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> , that's why I need inline assembly to read it.</p>",
        "id": 208837567,
        "sender_full_name": "osa1",
        "timestamp": 1599058938
    },
    {
        "content": "<p>I was responding to <span class=\"user-mention silent\" data-user-id=\"143274\">Amanieu</span>.</p>",
        "id": 208837616,
        "sender_full_name": "bjorn3",
        "timestamp": 1599058957
    },
    {
        "content": "<p>I would prefer if this was possible to express with intrinsics, but if it's not possible then sure, we can have inline asm for wasm.</p>",
        "id": 208839398,
        "sender_full_name": "Amanieu",
        "timestamp": 1599059580
    },
    {
        "content": "<p>If you want to have a go at it, I suggest looking at the PR which adds NVPTX inline asm.</p>",
        "id": 208839464,
        "sender_full_name": "Amanieu",
        "timestamp": 1599059599
    },
    {
        "content": "<p>There are some really weird quirks about how LLVM's inline asm handles wasm, and in particular how it treats \"registers\".</p>",
        "id": 208865399,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599070632
    },
    {
        "content": "<p>And unlike other architectures, we couldn't just say \"well, LLVM matches the conventions of the platform assembler so you can always use the platform assembler externally instead\".</p>",
        "id": 208865466,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599070667
    },
    {
        "content": "<p>If we're going to enable it, I think we'd need to very carefully insulate ourselves from LLVM's quirks.</p>",
        "id": 208865487,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599070676
    }
]