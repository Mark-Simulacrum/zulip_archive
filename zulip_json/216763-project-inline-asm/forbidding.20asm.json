[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"420380\">@Bot+</span> That's the point you're getting substantial disagreement on. <code>asm!</code> is not worse than any other unsafe code.</p>",
        "id": 264655666,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1639360022
    },
    {
        "content": "<p>(I've moved this to a separate topic.)</p>",
        "id": 264655725,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1639360087
    },
    {
        "content": "<p>Perhaps Clippy would accept a restriction lint, but there's no reason to add such a lint to the compiler. To add such a lint to the compiler implies too strongly that it is in fact a special defense that <code>#![forbid(unsafe_code)]</code> is not.</p>",
        "id": 264660023,
        "sender_full_name": "Jubilee",
        "timestamp": 1639365724
    },
    {
        "content": "<p>It is essentially moot whether it is C's <code>__asm__</code> or Rust's <code>asm!</code>.  It is still a wad of instructions from an external language, in actuality, in spite of its in-language embedding. So I could only entertain such a categorical forbiddance if it applied against \"language external\" code in general.</p>\n<p>That you can still probably use... <strong>cute</strong> approaches like loading in a JIT and running some spontaneously generated code is hilarious and just Very Turing Machine. Also something that OS can shut down with some success.</p>",
        "id": 264660206,
        "sender_full_name": "Jubilee",
        "timestamp": 1639365994
    },
    {
        "content": "<blockquote>\n<p>asm! is not worse than any other unsafe code.</p>\n</blockquote>\n<p>\"Can UB do anything asm can?\" Yes.</p>\n<p>asm just needs less extra steps to get to the same result, so \"worse\" is subjective. </p>\n<blockquote>\n<p>So I could only entertain such a categorical forbiddance if it applied against \"language external\" code in general.</p>\n</blockquote>\n<p>My current thought is every embedded language should have its own optional off switch on Rust side. While Rust should not be blamed for what other languages do, Rust/cargo should have a permission before launching external tool(s).</p>",
        "id": 264723969,
        "sender_full_name": "Bot+",
        "timestamp": 1639409958
    },
    {
        "content": "<blockquote>\n<p>Rust/cargo should have a permission before launching external tool(s).</p>\n</blockquote>\n<p>Cargo doesn't launch any external tools other than rustc. The build scripts are reponsible for calling into for example a C compiler. There is no way to prevent a build script from invoking a C compiler other than sandboxing, which is non-portable and will directly or through a dependency break a large portion of the ecosystem.</p>",
        "id": 264749183,
        "sender_full_name": "bjorn3",
        "timestamp": 1639419751
    },
    {
        "content": "<p>Yes, I was only thinking about binding against language-external symbols as something that is legible (ish) to the compiler, I think?</p>",
        "id": 264790186,
        "sender_full_name": "Jubilee",
        "timestamp": 1639441231
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"143274\">Amanieu</span> <a href=\"#narrow/stream/216763-project-inline-asm/topic/forbidding.20asm/near/264635133\">said</a>:</p>\n<blockquote>\n<p>I really don't think asm should be treated any differently from other unsafe code</p>\n</blockquote>\n<p>A lot of unsafe code can be very portable across many architecture. This is very different for inline assembly, which needs some porting effort as soon real machine instructions are used. That might be a reason to flag inline assembly differently: as a very likely (not just potential) portability hazard.</p>",
        "id": 266131995,
        "sender_full_name": "Florian Weimer",
        "timestamp": 1640559529
    },
    {
        "content": "<p>You could use clippy to restrict all uses of <code>core::arch</code>. This will catch inline asm and all vendor intrinsics.</p>",
        "id": 266132271,
        "sender_full_name": "bjorn3",
        "timestamp": 1640559903
    },
    {
        "content": "<p>Relevant: <a href=\"https://rust-lang.github.io/rfcs/1868-portability-lint.html\">https://rust-lang.github.io/rfcs/1868-portability-lint.html</a></p>",
        "id": 266193605,
        "sender_full_name": "nagisa",
        "timestamp": 1640629170
    }
]