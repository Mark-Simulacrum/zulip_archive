[
    {
        "content": "<p>(deleted)</p>",
        "id": 247892138,
        "sender_full_name": "Timothy Maloney",
        "timestamp": 1627878332
    },
    {
        "content": "<p>Can anyone explain to me what a data register is and how to use it in LLVM? The only place it is mentioned is in the SystemZ constraint codes list. I'm adding register definitions for the s390x, and I can't find anything about how to reference an LLVM data register. Total newbie so forgive me in advance if this is a dumb or obvious question.</p>\n<p><a href=\"https://llvm.org/docs/LangRef.html#supported-constraint-code-list\">LLVM Constraint Code</a></p>",
        "id": 248370618,
        "sender_full_name": "Timothy Maloney",
        "timestamp": 1628093114
    },
    {
        "content": "<p>It is listed as LLVM specific, so I think it should not be supported by rustc as there is a <a href=\"https://github.com/antoyo/rustc_codegen_gcc\">GCC backend</a> being worked on. In any case the <code>asm!()</code> RFC mentions that only the common subset between LLVM and GCC is allowed for the actual assembly.</p>",
        "id": 248371086,
        "sender_full_name": "bjorn3",
        "timestamp": 1628093350
    },
    {
        "content": "<p>Awesome, thanks for the quick response!</p>",
        "id": 248371238,
        "sender_full_name": "Timothy Maloney",
        "timestamp": 1628093415
    },
    {
        "content": "<p>I also noticed that in:</p>\n<p>rustc_target/asm/x86.rs </p>\n<p>there is no “%” prefix for the register definitions, yet in:</p>\n<p>rustc_target/asm/mips.rs </p>\n<p>there is the “$” prefix for the register definitions. Should I assume this to mean that if the register prefix for an assembly language is “%” it’s not needed when defining the registers?</p>",
        "id": 248374632,
        "sender_full_name": "Timothy Maloney",
        "timestamp": 1628095021
    },
    {
        "content": "<p>On x86, <code>%</code> is part of the instruction syntax, not the register name. On MIPS, <code>$</code> is part of the register name.</p>",
        "id": 248374848,
        "sender_full_name": "Amanieu",
        "timestamp": 1628095122
    },
    {
        "content": "<p>Additionally, the <code>%</code> is only for AT&amp;T syntax, not Intel syntax (which is the default).</p>",
        "id": 248374899,
        "sender_full_name": "Amanieu",
        "timestamp": 1628095145
    },
    {
        "content": "<p>For clarification: so prefixes like “%” are only necessary if they are part of the actual  register name? As opposed to when the prefix is used to refer to an arbitrary register: e.g. %eax, or %ebx in x86.</p>",
        "id": 248376125,
        "sender_full_name": "Timothy Maloney",
        "timestamp": 1628095730
    },
    {
        "content": "<p>It's a bit of a fuzzy rule to be fair. As a general rule I'd follow what Clang does here.</p>",
        "id": 248376390,
        "sender_full_name": "Amanieu",
        "timestamp": 1628095854
    },
    {
        "content": "<p>In clang/lib/Basic/Targets/SystemZ.cpp you can see that Clang uses <code>r0</code> to <code>r15</code> for integer registers, <code>f0</code> to <code>f15</code> for float registers and <code>v0</code> to <code>v31</code> for vector registers (where <code>v0-15</code> alias with <code>f0-15</code>).</p>",
        "id": 248376828,
        "sender_full_name": "Amanieu",
        "timestamp": 1628096056
    },
    {
        "content": "<p>Also <a href=\"https://sourceware.org/binutils/docs-2.32/as/s390-Register.html\">https://sourceware.org/binutils/docs-2.32/as/s390-Register.html</a></p>",
        "id": 248377132,
        "sender_full_name": "Amanieu",
        "timestamp": 1628096213
    },
    {
        "content": "<p>Right but the current codegen for llvm on s390 assumes no vector registers</p>",
        "id": 248377170,
        "sender_full_name": "Timothy Maloney",
        "timestamp": 1628096233
    },
    {
        "content": "<p>Then only support <code>f0</code> to <code>f15</code> for now, vector register support can always be added later.</p>",
        "id": 248377240,
        "sender_full_name": "Amanieu",
        "timestamp": 1628096270
    },
    {
        "content": "<p>Right? lol<br>\nThat helps a ton though thank you</p>",
        "id": 248377246,
        "sender_full_name": "Timothy Maloney",
        "timestamp": 1628096274
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 248662630,
        "sender_full_name": "Timothy Maloney",
        "timestamp": 1628280796
    }
]