[
    {
        "content": "<p>I don't think we should do this in the current RFC (because I don't want to introduce a topic that leads to bikeshedding), but I think we should post a PR to <a href=\"https://github.com/rust-dev-tools/fmt-rfcs/\" target=\"_blank\" title=\"https://github.com/rust-dev-tools/fmt-rfcs/\">https://github.com/rust-dev-tools/fmt-rfcs/</a> that proposes how to format <code>asm!</code> blocks.</p>",
        "id": 186314584,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1579717399
    },
    {
        "content": "<p>Proposal:<br>\nFormat on one line if it fits the line length. If it's long enough to break across lines, then format it as you would format a function with arguments, except that options should appear on the same line, and multiple operand specifications should appear on the same line unless they don't fit within the line length, in which case one operand should appear per line.</p>",
        "id": 186314761,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1579717491
    },
    {
        "content": "<p>We should also specify how to format a multi-line asm string.</p>",
        "id": 186314881,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1579717549
    },
    {
        "content": "<p>I expect multi-line asm to  be very common.</p>",
        "id": 186315074,
        "sender_full_name": "Amanieu",
        "timestamp": 1579717627
    },
    {
        "content": "<p>Also use of <code>concat!()</code> in the asm string.</p>",
        "id": 186315099,
        "sender_full_name": "Amanieu",
        "timestamp": 1579717639
    },
    {
        "content": "<p>So:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">asm</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;short asm {}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"p\">(</span><span class=\"n\">reg</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">input_value</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"n\">asm</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"s\">&quot;longer asm {x} {y} {z}&quot;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"p\">(</span><span class=\"n\">reg</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">expr1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"p\">(</span><span class=\"n\">reg</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">expr2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"p\">(</span><span class=\"n\">reg</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">expr3</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"n\">asm</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"s\">&quot;longer asm {x} {y} {z}&quot;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"p\">(</span><span class=\"n\">reg</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">long_expression_1</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"p\">(</span><span class=\"n\">reg</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">long_expression_2</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"p\">(</span><span class=\"n\">reg</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">long_destination_3</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>",
        "id": 186315352,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1579717758
    },
    {
        "content": "<p>(Note the trailing commas, just like a multi-line function call.)</p>",
        "id": 186315539,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1579717855
    },
    {
        "content": "<p>LGTM</p>",
        "id": 186316087,
        "sender_full_name": "Amanieu",
        "timestamp": 1579718160
    },
    {
        "content": "<p>For multi-line assembly text, the quotes surrounding the asm string may be treated like delimiters, and shouldn't be put on the same lines as assembly text:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">asm</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;</span>\n<span class=\"s\">    multi-line assembly</span>\n<span class=\"s\">    with multiple instructions</span>\n<span class=\"s\">    but no operands</span>\n<span class=\"s\">&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"n\">asm</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;</span>\n<span class=\"s\">    multi-line {x}</span>\n<span class=\"s\">    with operands {y}</span>\n<span class=\"s\">    &quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"p\">(</span><span class=\"n\">reg</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">expr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"p\">(</span><span class=\"n\">reg</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">dest</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>",
        "id": 186316176,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1579718184
    },
    {
        "content": "<p>One thing I'm not too happy about is how to make the actual asm string look good when it is split over multiple lines</p>",
        "id": 186316178,
        "sender_full_name": "Amanieu",
        "timestamp": 1579718185
    },
    {
        "content": "<p>(I'm not certain about the multi-line with operands case; perhaps the closing quote in that case shouldn't be on the same line as the operands.)</p>",
        "id": 186316270,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1579718233
    },
    {
        "content": "<p>(But it seems the least bad of several possibilities there.)</p>",
        "id": 186316287,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1579718248
    },
    {
        "content": "<p>It helps that we don't especially care about the indentation of the emitted assembly, so we don't need things like <code>\\n\\</code> or <code>\\n\\t\\</code> on every line.</p>",
        "id": 186316418,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1579718322
    },
    {
        "content": "<p>It bugs me that the indentation of the closing <code>\"</code> differs between the operand case and the no-operand case, though.</p>",
        "id": 186316483,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1579718360
    }
]