[
    {
        "content": "<p>I know I'm late to the party here, and sorry for the bikeshed, but have you thought about a syntax that puts the inputs/outputs before the code, instead of after? The old syntax always seemed backwards to me (ever since I first saw it in gcc). Most other places in Rust, you need to declare a binding before you use it.</p>\n<p>To maybe explain myself visually, imagine if normal functions were defined that way:</p>\n<div class=\"codehilite\"><pre><span></span><code>fn add_numbers {\n    x + y\n} (x: i32, y: i32) -&gt; i32\n</code></pre></div>",
        "id": 219160440,
        "sender_full_name": "whatisaphone",
        "timestamp": 1607389994
    },
    {
        "content": "<p>While I agree with you, the current syntax is consistent with format args, which have the format literal first (including named captures like <code>{name}</code> that are referred to with <code>name = val</code> later)</p>",
        "id": 219160994,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607390597
    },
    {
        "content": "<p>You could consider the inline asm code as kind of a function name. When you do, putting the inputs after the inline asm code makes sense in my opinion.</p>",
        "id": 219193302,
        "sender_full_name": "bjorn3",
        "timestamp": 1607424827
    },
    {
        "content": "<p>Ah yeah that makes sense. If you think about it as a string instead of code, it fits right in. And I guess asm kind of _is_ just a string in some ways</p>",
        "id": 219233810,
        "sender_full_name": "whatisaphone",
        "timestamp": 1607447558
    }
]