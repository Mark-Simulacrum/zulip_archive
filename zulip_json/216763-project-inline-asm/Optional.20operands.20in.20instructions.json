[
    {
        "content": "<p>Hello, I can't seem to find any documentation on how to use optional operands, is this possible in the current syntax? Is it as simple as using <code>Option</code> as the type for the  argument? E.g. If I had something like <code>\"foo {0} {1}\"</code> I'd like this to be <code>\"foo {0}\"</code> if <code>{1}</code> is <code>None</code>.</p>",
        "id": 221501218,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1609750664
    },
    {
        "content": "<p>This is not possible. You should use an <code>if let</code> and two separate <code>asm!</code> blocks.</p>",
        "id": 221501314,
        "sender_full_name": "Amanieu",
        "timestamp": 1609750719
    },
    {
        "content": "<p>Hmm that is unfortunate. SPIR-V has a lot of optional operands, for example anything with <a href=\"https://www.khronos.org/registry/spir-v/specs/1.0/SPIRV.html#_a_id_image_a_image_instructions\">sampling images</a> comes with its own set of <a href=\"https://www.khronos.org/registry/spir-v/specs/1.0/SPIRV.html#Image_Operands\">optional operands</a> and the amount of additional operands itself depends on the value of the optional operand. So having to have an <code>if let</code> would lead to a bit of a combinational explosion trying to have every <code>asm!</code> block cover seven different possibilities and all of the potential combinations of those seven.</p>",
        "id": 221503253,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1609752264
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219696\">@XAMPPRocky</span> Can you clarify and give an example of an optional operand in SPIR-V?</p>",
        "id": 221568911,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1609788554
    },
    {
        "content": "<p>Are you saying that there are instructions that can be called with different numbers of operands?</p>",
        "id": 221569155,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1609788678
    },
    {
        "content": "<p>Or do they always get called with the same number of operands, but some of those operands can be something akin to None in the encoding?</p>",
        "id": 221569198,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1609788700
    },
    {
        "content": "<p>How do the  instructions get encoded?</p>",
        "id": 221569220,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1609788710
    },
    {
        "content": "<p>Do other SPIR-V assemblers have a concept of this?</p>",
        "id": 221569473,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1609788830
    },
    {
        "content": "<p>If this is a common idiom in SPIR-V assembly, and is commonly used in other assemblers, I think it'd make sense to support it. I don't think we should accept <code>Option&lt;uN&gt;</code> and just substitute an empty string, but I <em>do</em> think it'd be reasonable to have a substitution modifier (like the size modifiers), along the lines of <code>foo {0} {1:opt}</code>.</p>",
        "id": 221569810,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1609789012
    },
    {
        "content": "<p>Is there an unambiguous syntax for those instructions that sets the appropriate operand type, in case you have multiple optional operands? It looks like there needs to be a flag indicating the types of operands.</p>",
        "id": 221570032,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1609789123
    },
    {
        "content": "<blockquote>\n<p>Are you saying that there are instructions that can be called with different numbers of operands?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> To my knowledge yes. For example if you look at of the <code>OpImageSampleImplicitLod</code> instruction, they have an optional operand at the end of the instruction, which itself is a bitmask that indicates what <em>additional</em> operands if any are part of the instruction. This bitmask can be combined so you could have a variable amount of operands after an instruction, depending on what the bitmask is. I've pasted some examples from the SPIRV-Tools repo (which contains the official spirv assembler).</p>\n<div class=\"codehilite\" data-code-language=\"spirv\"><pre><span></span><code>%res1 = OpImageSampleImplicitLod %f32vec4 %simg %f32vec2_hh\n%res2 = OpImageSampleImplicitLod %f32vec4 %simg %f32vec2_hh Bias %f32_0_25\n%res4 = OpImageSampleImplicitLod %f32vec4 %simg %f32vec2_hh ConstOffset %s32vec2_01\n%res5 = OpImageSampleExplicitLod %f32vec4 %simg %f32vec2_hh Grad|ConstOffset %22 %24 %29\n</code></pre></div>\n<p>These image instructions are the most extreme, apart from them there are a few instructions that have one or in some cases two optional parameters which are known ahead of time.</p>",
        "id": 221623414,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1609836012
    },
    {
        "content": "<p>Would you expect the assembler to put the bitmask together for you, or would you expect to do that yourself?</p>",
        "id": 221623480,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1609836110
    },
    {
        "content": "<p>I would expect to provide to it.</p>",
        "id": 221623563,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1609836174
    },
    {
        "content": "<p>e.g. Grad=xyz, ConstOffset=abc, which would let you pass the args in any order and the assembler would know what order to provide them to the instruction in.</p>",
        "id": 221623607,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1609836220
    },
    {
        "content": "<p>Oh, there's a set order. From the spec \"If there are multiple following operands indicated, they are ordered: Those indicated by smaller-numbered bits appear first. At least one bit must be set\". Grad is <code>0x4</code> for example and <code>ConstOffset</code> is <code>0x8</code>.</p>",
        "id": 221623745,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1609836349
    },
    {
        "content": "<p>That's what I figured; that's why I was asking if it would help if the assembler did it for you.</p>",
        "id": 221623810,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1609836381
    },
    {
        "content": "<p>In any case, thinking about it, I don't see how Option helps given the semantic here, unless the instructions are encoded identically.</p>",
        "id": 221623890,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1609836448
    },
    {
        "content": "<p>The assembly string is processed at compile time.</p>",
        "id": 221623897,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1609836462
    },
    {
        "content": "<p>So either you need to know the operands at compile time, or you need an instruction encoding that works whether you have the operands or not.</p>",
        "id": 221623973,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1609836518
    },
    {
        "content": "<p>Does that make sense?</p>",
        "id": 221623993,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1609836550
    },
    {
        "content": "<p>(I don't know SPIR-V, so I'm trying to work out semantics from what you've said and linked to.)</p>",
        "id": 221624023,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1609836582
    },
    {
        "content": "<p>Well I feel like I might be out of my depth to say whether or not it would be helpful if it did it for me. I'd have to defer to someone who knows SPIR-V better than I.</p>\n<blockquote>\n<p>In any case, thinking about it, I don't see how Option helps given the semantic here, unless the instructions are encoded identically.</p>\n</blockquote>\n<p>Yeah, I didn't mean to imply it should be <code>Option</code>, that was just what I intuited it might work without seeing mention of optional operands in the documentation.</p>",
        "id": 221624104,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1609836627
    }
]