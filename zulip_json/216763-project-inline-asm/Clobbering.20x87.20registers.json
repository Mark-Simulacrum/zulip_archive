[
    {
        "content": "<p>On x86_32 we currently have no way to indicate that x87 registers are clobbered, which effectively makes it unsound for <code>asm!</code> to call any other function. The x86 calling convention requires the x87 stack to be empty on function entry and exit, but currently LLVM may keep values in the x87 stack across <code>asm</code> blocks.</p>",
        "id": 233068910,
        "sender_full_name": "Amanieu",
        "timestamp": 1617528571
    },
    {
        "content": "<p>There's 3 general approaches towards handling this:</p>\n<ol>\n<li>Expose x87 registers as <code>asm!</code> operands. I'd rather avoid doing this since these don't really act like normal registers (it's a stack of registers). There are complex <a href=\"https://github.com/llvm/llvm-project/blob/6e96de8abf272ee6c9b32b221149c2c04892b72a/llvm/lib/Target/X86/X86FloatingPoint.cpp#L1500\">rules</a> for x87 constraints for LLVM's <code>inlineasm</code>.</li>\n<li>Add an x86-specific <code>clobber_x87</code> option which acts as a blanket clobber for the entire x87 register stack.</li>\n<li>Always mark x87 registers as clobbered.</li>\n</ol>",
        "id": 233069111,
        "sender_full_name": "Amanieu",
        "timestamp": 1617528830
    },
    {
        "content": "<p>I'm currently tending towards option 3 because honestly, nobody really cares about pre-SSE x86 any more.</p>",
        "id": 233069182,
        "sender_full_name": "Amanieu",
        "timestamp": 1617528859
    },
    {
        "content": "<p>I agree that 1 is not a good option for the reason you mentioned. Option 2 makes it easy to forget the clobber. Even more so than regular register clobbers, as those are more visible and are more likely to cause a crash if you get them wrong. I too think option 3 is the best one.</p>",
        "id": 233069295,
        "sender_full_name": "bjorn3",
        "timestamp": 1617529027
    },
    {
        "content": "<p>I'd like to argue against the nobody cares. While people won't wrote production software for these targets that often there is at least one situation where x86 or earlier comes up often - architecture/os university classes.</p>",
        "id": 233070236,
        "sender_full_name": "nagisa",
        "timestamp": 1617530322
    },
    {
        "content": "<p>Well sure, but at most the effect is slightly reduced performance since LLVM needs to spill FP registers to the stack.</p>",
        "id": 233070259,
        "sender_full_name": "Amanieu",
        "timestamp": 1617530367
    },
    {
        "content": "<p>yeah, I didn't mean to suggest that the solution is not appropriate, its just that people still care about those targets at least a little bit ^^</p>",
        "id": 233078598,
        "sender_full_name": "nagisa",
        "timestamp": 1617539751
    },
    {
        "content": "<p>Seems like we could always do number 3 and then add a <code>noclobber_x87</code> option if you're willing to handle things more carefully.</p>",
        "id": 233084140,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1617546175
    },
    {
        "content": "<p>This isn't a long-term strategy though: consider the recently added <code>tmm[0-7]</code> registers on x86 with the AMX extension. There's currently no way to mark those as clobbered.</p>",
        "id": 233098611,
        "sender_full_name": "Amanieu",
        "timestamp": 1617556152
    },
    {
        "content": "<p>I'm now considering going for option 4 which is to add support for wildcard clobbers (clobber all, clobber for a call to \"C\" abi function, etc).</p>",
        "id": 233098629,
        "sender_full_name": "Amanieu",
        "timestamp": 1617556191
    },
    {
        "content": "<p>Hugely in favor of that solution.</p>",
        "id": 233100532,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617558241
    }
]