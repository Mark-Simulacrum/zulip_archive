[
    {
        "content": "<p>So, heh, I was playing arround on compiler explorer, and I discovered this problem with GNU AS:<br>\n<a href=\"https://godbolt.org/z/3js4Pfds7\">https://godbolt.org/z/3js4Pfds7</a></p>\n<p>Currently, the reference (after <a href=\"https://github.com/rust-lang/rust/issues/1168\">#1168</a>) says that <code>.intel_syntax</code> on its own is fine and defaults to <code>.intel_syntax noprefix</code>.<br>\nThis is true of llvm-mc (<a href=\"https://godbolt.org/z/rKhqPxKvr\">https://godbolt.org/z/rKhqPxKvr</a>), but apparently not of GNU AS as demonstrated above without the option, it seems to default to <code>.intel_syntax prefix</code>.</p>",
        "id": 273827914,
        "sender_full_name": "Connor Horman",
        "timestamp": 1646236477
    },
    {
        "content": "<p>So <code>rustc</code> could probably fix this by converting it from <code>.intel_syntax\\n</code> to <code>.intel_syntax noprefix\\n</code></p>",
        "id": 273828619,
        "sender_full_name": "Ray Redondo",
        "timestamp": 1646236707
    },
    {
        "content": "<p>The issue is that rustc doesn't want to fix this, as it requires parsing the assembly string, which is <em>fun</em>.</p>",
        "id": 273829284,
        "sender_full_name": "Connor Horman",
        "timestamp": 1646236880
    },
    {
        "content": "<p>TBH that's really an issue on the LLVM side.</p>",
        "id": 273829539,
        "sender_full_name": "Amanieu",
        "timestamp": 1646236948
    },
    {
        "content": "<p>Well, it's a docs issue as well. The current definition is that <code>.intel_syntax</code> on it's own is supported and equivalent to the default w/o the <code>att_syntax</code> option (<code>.intel_syntax noprefix</code>), which is false on GNU AS.<br>\nI'm filling a reference PR to get this fixed ASAP.</p>",
        "id": 273829754,
        "sender_full_name": "Connor Horman",
        "timestamp": 1646237023
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/reference/pull/1174\">https://github.com/rust-lang/reference/pull/1174</a></p>",
        "id": 273830285,
        "sender_full_name": "Connor Horman",
        "timestamp": 1646237172
    },
    {
        "content": "<p>So at this point I don't think documenting those directives is worth it anymore.</p>",
        "id": 273841526,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1646241095
    },
    {
        "content": "<p>Perhaps we should just drop them.</p>",
        "id": 273841542,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1646241100
    },
    {
        "content": "<p>Not documenting things does not fix the situation though. And given that a non-zero amount of people might use gnu-as it's worth making consistent or documenting the inconsistency if we for some reason can't make it consistent.</p>",
        "id": 273850635,
        "sender_full_name": "Lokathor",
        "timestamp": 1646244197
    },
    {
        "content": "<p>I'm suggesting perhaps we shouldn't actually make them supported directives in the first place, if they're inconsistently supported.</p>",
        "id": 273850794,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1646244250
    },
    {
        "content": "<p>But yes, if we do support them we need to document the inconsistency.</p>",
        "id": 273850838,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1646244269
    },
    {
        "content": "<p>Though also, I agree that this is an LLVM bug.</p>",
        "id": 273850857,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1646244278
    },
    {
        "content": "<p>We already have a lint that discourages the use of <code>.att_syntax/.intel_syntax</code> in favor of <code>option(att_syntax)</code>.</p>",
        "id": 273851115,
        "sender_full_name": "Amanieu",
        "timestamp": 1646244368
    },
    {
        "content": "<p>Yeah given the option existing, we probably don't need to support it in the assembly itself</p>",
        "id": 273851175,
        "sender_full_name": "Lokathor",
        "timestamp": 1646244395
    },
    {
        "content": "<p>I did use it at one point to work around some limitations of LLVM's intel syntax support for a single instruction. But I later found a better workaround for that particular bug that doesn't require switching to AT&amp;T syntax.</p>",
        "id": 273851293,
        "sender_full_name": "Amanieu",
        "timestamp": 1646244445
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/216763-project-inline-asm/topic/.2Eintel_syntax.20noprefix/near/273850794\">said</a>:</p>\n<blockquote>\n<p>I'm suggesting perhaps we shouldn't actually make them supported directives in the first place, if they're inconsistently supported.</p>\n</blockquote>\n<p>As far as I can tell, if you use an option, it's consistent, so if it's still desirable to support the directive, just removing the no-option form from support (which is what the PR does) should be sufficient.</p>",
        "id": 273860174,
        "sender_full_name": "Connor Horman",
        "timestamp": 1646247915
    },
    {
        "content": "<p>Trying to make sure I understand: you actually have to pass the option to att_syntax, writing <code>.att_syntax prefix</code>?</p>",
        "id": 273861705,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1646248551
    },
    {
        "content": "<p>Under the proposed limitations? Yes.</p>",
        "id": 273861997,
        "sender_full_name": "Connor Horman",
        "timestamp": 1646248694
    },
    {
        "content": "<p>I would note that there does not appear to be such an inconsistency for <code>.att_syntax</code> (the issue is with <code>.intel_syntax</code>), but I removed the no-arg form of <code>.att_syntax</code> in the PR for consistency with <code>.intel_syntax</code>).</p>\n<p>See: <a href=\"https://godbolt.org/z/ba3z6PqYT\">https://godbolt.org/z/ba3z6PqYT</a> (Demonstrates the equivalence on clang between <code>.att_syntax</code> and <code>.att_syntax prefix</code>)</p>",
        "id": 273862363,
        "sender_full_name": "Connor Horman",
        "timestamp": 1646248864
    },
    {
        "content": "<p>OK, that's good to know. That's consistent with how I previously thought this worked, where people typically write <code>.att_syntax</code> and <code>.intel_syntax noprefix</code>.</p>",
        "id": 273870194,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1646252178
    }
]