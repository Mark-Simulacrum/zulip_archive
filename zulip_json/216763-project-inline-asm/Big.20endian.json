[
    {
        "content": "<p>I think the current approach of accepting any type as long as it fits in the target register won't work on big endian.</p>",
        "id": 189126460,
        "sender_full_name": "Amanieu",
        "timestamp": 1582732166
    },
    {
        "content": "<p>For example if you want to put an <code>i8</code> into a 128-bit SIMD register, you can either zero-extend to <code>i128</code> and transmute, or convert to <code>i8x1</code> and then zero-extend the vector to <code>i8x16</code>.</p>",
        "id": 189126690,
        "sender_full_name": "Amanieu",
        "timestamp": 1582732301
    },
    {
        "content": "<p>On big-endian those two operations will yield different results.</p>",
        "id": 189126723,
        "sender_full_name": "Amanieu",
        "timestamp": 1582732322
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> since you were arguing for allowing <code>i128</code> operands for vector registers.</p>",
        "id": 189126795,
        "sender_full_name": "Amanieu",
        "timestamp": 1582732351
    },
    {
        "content": "<p>IMO we have to go back to the old system where only certain types are allowed as asm operands, depending on the register class. (Rather than just checking the size)</p>",
        "id": 189126892,
        "sender_full_name": "Amanieu",
        "timestamp": 1582732416
    },
    {
        "content": "<p>Registers don't normally have endianness, but vector registers are an interesting case...</p>",
        "id": 189127051,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1582732512
    },
    {
        "content": "<p>But I can't imagine treating an i8 as i8x1 and extending to i8x16.</p>",
        "id": 189127141,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1582732567
    },
    {
        "content": "<p>Trying to use an i8 where a larger register size is expected only makes sense as the equivalent of an \"as\" cast to me.</p>",
        "id": 189127239,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1582732641
    },
    {
        "content": "<p>(also, that would be a sign extend)</p>",
        "id": 189127274,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1582732666
    },
    {
        "content": "<p>All that said, I don't know that I would expect to be able to use an i8 as a 128-bit register directly. I expect that to work on a general purpose register because it may be already stored in one.</p>",
        "id": 189127363,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1582732701
    },
    {
        "content": "<p>Another example on AArch64. There are separate instructions for loading an <code>i64</code> and <code>i8x8</code> from memory, and they return different register contents on big endian from the same bytes in memory.</p>",
        "id": 189128408,
        "sender_full_name": "Amanieu",
        "timestamp": 1582733246
    },
    {
        "content": "<p>Well then, time to redesign this shit again...</p>",
        "id": 189129946,
        "sender_full_name": "Amanieu",
        "timestamp": 1582734172
    },
    {
        "content": "<p>I think we'd never want to convert to a vector \"implicitly\"</p>",
        "id": 189143475,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1582742053
    },
    {
        "content": "<p>But converting from i8 to an i64 register makes sense.</p>",
        "id": 189143516,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1582742069
    },
    {
        "content": "<p>It makes even more sense on x86 where it may already be in <code>al</code>.</p>",
        "id": 189143538,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1582742080
    },
    {
        "content": "<p>My current plan is to specify the contents of registers as if they loaded the input value using X instruction.</p>",
        "id": 189145667,
        "sender_full_name": "Amanieu",
        "timestamp": 1582743086
    },
    {
        "content": "<p>So for example, on ARM vector would be as if loaded by the <code>LD1</code> instruction, which handles big-endian correctly.</p>",
        "id": 189145757,
        "sender_full_name": "Amanieu",
        "timestamp": 1582743125
    },
    {
        "content": "<p>Or on x86 for <code>k[1-7]</code> registers, it is specified as if the value was loaded by <code>KMOVB</code>, <code>KMOVW</code>, <code>KMOVD</code>, <code>KMOVQ</code>.</p>",
        "id": 189145847,
        "sender_full_name": "Amanieu",
        "timestamp": 1582743190
    },
    {
        "content": "<p>That sounds reasonable to me.</p>",
        "id": 189147724,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1582744312
    },
    {
        "content": "<p>But this means that loading <code>i8</code> into an SSE register is not allowed</p>",
        "id": 189147799,
        "sender_full_name": "Amanieu",
        "timestamp": 1582744338
    },
    {
        "content": "<p>I can live with that.</p>",
        "id": 189147822,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1582744354
    },
    {
        "content": "<p>Because there is no instruction for that. There is only <code>movss</code> and <code>movsd</code> for <code>i32</code> and <code>i64</code></p>",
        "id": 189147831,
        "sender_full_name": "Amanieu",
        "timestamp": 1582744363
    },
    {
        "content": "<p>I expect to be able to load an i8, i16, i32, or i64 into a general-purpose register.</p>",
        "id": 189147840,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1582744370
    },
    {
        "content": "<p>But I don't necessarily expect to be able to load an i8 <em>directly</em> into an SSE register.</p>",
        "id": 189147892,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1582744408
    },
    {
        "content": "<p>Sure, there are byte load, i16 load, etc instructions</p>",
        "id": 189147905,
        "sender_full_name": "Amanieu",
        "timestamp": 1582744419
    },
    {
        "content": "<p>for general regs only</p>",
        "id": 189147914,
        "sender_full_name": "Amanieu",
        "timestamp": 1582744424
    },
    {
        "content": "<p>Well, there's also <code>al</code>. ;)</p>",
        "id": 189147921,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1582744429
    },
    {
        "content": "<p>I'm using loading from memory for the spec, anything else is a compiler optimization</p>",
        "id": 189147990,
        "sender_full_name": "Amanieu",
        "timestamp": 1582744447
    },
    {
        "content": "<p>Sure.</p>",
        "id": 189148001,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1582744451
    },
    {
        "content": "<p>Though...</p>",
        "id": 189148006,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1582744454
    },
    {
        "content": "<p>That still leaves the question of whether we can avoid doing a <code>movzx</code>.</p>",
        "id": 189148034,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1582744468
    },
    {
        "content": "<p>I would like to be able to say \"that's already in <code>al</code>, and you asked for <code>in(reg)</code>, so here's <code>al</code>\".</p>",
        "id": 189148405,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1582744672
    },
    {
        "content": "<p>Hmm good point. My specification does leave it somewhat ambiguous as to what value the upper bits will have.</p>",
        "id": 189149683,
        "sender_full_name": "Amanieu",
        "timestamp": 1582745325
    },
    {
        "content": "<p>Strictly speaking a load instruction (on ARM) will zero out the upper bits. But we don't want that since that's a useless zero-extension</p>",
        "id": 189149748,
        "sender_full_name": "Amanieu",
        "timestamp": 1582745371
    },
    {
        "content": "<p>/me goes back to poking at LLVM internals to figure out how this stuff works</p>",
        "id": 189149798,
        "sender_full_name": "Amanieu",
        "timestamp": 1582745398
    },
    {
        "content": "<p>What I'd <em>like</em> to do is to detect the type you hand the <code>asm!</code> directive, provide the corresponding register size, and then rely on the asm string to do with that (potentially smaller) register what it wants. Someone can always <code>movzx</code> from a short register into a long one, if they need a full-width value.</p>",
        "id": 189150506,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1582745829
    },
    {
        "content": "<p>Does the \"load with zero extension\" take more time than \"load without zero extension\"? All the bits effectively gets determined in parallel right? Since at that level it's electrical signals per wire and such.</p>",
        "id": 189150533,
        "sender_full_name": "Lokathor",
        "timestamp": 1582745855
    },
    {
        "content": "<p>Note that that <em>isn't</em> giving people access to undefined bits, because being handed <code>al</code> does not entitle you to presume anything about the value of the upper 56 bits.</p>",
        "id": 189150535,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1582745858
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> <code>movzx</code> costs more than \"do nothing, it's already in a register\". ;)</p>",
        "id": 189150557,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1582745880
    },
    {
        "content": "<p>I think it's architecture-dependent whether <code>movzx</code> is more expensive than <code>mov</code>.</p>",
        "id": 189150642,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1582745900
    },
    {
        "content": "<p>On a modern processor, <code>movzx</code> shouldn't be any more expensive than <code>mov</code>, but it's still more expensive than doing nothing. ;)</p>",
        "id": 189150703,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1582745943
    },
    {
        "content": "<p>If you need zero-extension then you can always just <code>as u64</code>.</p>",
        "id": 189151037,
        "sender_full_name": "Amanieu",
        "timestamp": 1582746127
    },
    {
        "content": "<p>Ah, so we're comparing with doing nothing at all. Right</p>",
        "id": 189151150,
        "sender_full_name": "Lokathor",
        "timestamp": 1582746225
    },
    {
        "content": "<p>Basically it comes from the calling convention: on most platforms if you pass an <code>i8</code> (or anything smaller than the register size), the upper bits are undefined.</p>",
        "id": 189151231,
        "sender_full_name": "Amanieu",
        "timestamp": 1582746268
    },
    {
        "content": "<p>For ASM stuff I've exclusively seen docs given in terms of old C code where (naturally) arguments are always just \"int\"</p>",
        "id": 189152043,
        "sender_full_name": "Lokathor",
        "timestamp": 1582746756
    },
    {
        "content": "<p>Yea inline asm is not really specified properly at all.</p>",
        "id": 189152251,
        "sender_full_name": "Amanieu",
        "timestamp": 1582746922
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"143274\">Amanieu</span> <a href=\"#narrow/stream/216763-project-inline-asm/topic/Big.20endian/near/189151037\" title=\"#narrow/stream/216763-project-inline-asm/topic/Big.20endian/near/189151037\">said</a>:</p>\n<blockquote>\n<p>If you need zero-extension then you can always just <code>as u64</code>.</p>\n</blockquote>\n<p>Agreed completely. I think <code>in(reg) some_u8_value</code> should pass it in the low 8-bits of a general-purpose register, and <code>in(reg) some_u8_value as u64</code> can zero-extend, and those are all the options we need.</p>",
        "id": 189155876,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1582749186
    },
    {
        "content": "<p>The only architecture which does not specify the upper bits as undefined is RISCV.</p>",
        "id": 189156237,
        "sender_full_name": "Amanieu",
        "timestamp": 1582749403
    },
    {
        "content": "<p>It's a bit weird in that if you pass a <code>f32</code> into inline asm, it gets NaN-boxed into an <code>f64</code>.</p>",
        "id": 189156258,
        "sender_full_name": "Amanieu",
        "timestamp": 1582749431
    },
    {
        "content": "<p>... and since inline asm doesn't have a spec, I don't know whether this is intentional or if this is an accident of the upper bits being undefined.</p>",
        "id": 189156418,
        "sender_full_name": "Amanieu",
        "timestamp": 1582749554
    },
    {
        "content": "<p>(RISC-V single-precision instructions require that the upper 32 bits of the 64-bit FP register are 0xffffffff, otherwise the result is NaN)</p>",
        "id": 189156496,
        "sender_full_name": "Amanieu",
        "timestamp": 1582749605
    }
]