[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> Thanks for the updates to the RFC. Do you have thoughts on the proposal to take the parameters of <code>options()</code> and make them top-level parameters of <code>asm!</code> instead? That seems like a useful simplification for anyone actually using options.</p>",
        "id": 186205668,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1579627356
    },
    {
        "content": "<p>That would prevent us from using options that could get mistaken for <code>in</code>/<code>out</code> and similar, but that doesn't seem like a problem.</p>",
        "id": 186205752,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1579627415
    },
    {
        "content": "<p>Eh, I'm somewhat torn on this issue. There's a lot of freedom in how we can deal with options.</p>",
        "id": 186226136,
        "sender_full_name": "Amanieu",
        "timestamp": 1579640072
    },
    {
        "content": "<p>For example, we could remove the requirement that they appear at the end of the argument list.</p>",
        "id": 186226146,
        "sender_full_name": "Amanieu",
        "timestamp": 1579640085
    },
    {
        "content": "<p>But I think this is getting into bikeshed territory: it doesn't <em>really</em> matter what option we pick, people will just go with it.</p>",
        "id": 186226194,
        "sender_full_name": "Amanieu",
        "timestamp": 1579640120
    },
    {
        "content": "<p>I don't think they'd need to appear at the end of the argument list either way. We would just need to ensure that they have unique names.</p>",
        "id": 186313632,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1579716791
    },
    {
        "content": "<p>One reason for putting them at the end is that they make positional arguments more confusing</p>",
        "id": 186313958,
        "sender_full_name": "Amanieu",
        "timestamp": 1579716994
    },
    {
        "content": "<p>That's <em>completely</em> fair, but it's also true whether they're wrapped in <code>options()</code> or not.</p>",
        "id": 186313983,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1579717013
    },
    {
        "content": "<p>I do actually prefer requiring that they appear at the end.</p>",
        "id": 186314003,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1579717026
    },
    {
        "content": "<p>I'm just suggesting that the following seems reasonable to me:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"n\">asm</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"s\">&quot;add {0}, {1}&quot;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">inlateout</span><span class=\"p\">(</span><span class=\"n\">reg</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"p\">(</span><span class=\"n\">reg</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kr\">pure</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">nomem</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">nostack</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>",
        "id": 186314054,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1579717071
    },
    {
        "content": "<p>I'm worried that the options might get confused with operands as we add more operand types.</p>",
        "id": 186314179,
        "sender_full_name": "Amanieu",
        "timestamp": 1579717137
    },
    {
        "content": "<p>one alternative is to move the options to e.g. an attribute atop the macro? not sure how that would fare though</p>",
        "id": 186314213,
        "sender_full_name": "simulacrum",
        "timestamp": 1579717161
    },
    {
        "content": "<p>but that is pretty clearly \"separate\"</p>",
        "id": 186314223,
        "sender_full_name": "simulacrum",
        "timestamp": 1579717169
    },
    {
        "content": "<p>Such as those listed in the future work section of the RFC: <code>fallthrough</code> and <code>label</code> for asm goto, <code>flag_out</code>, etc.</p>",
        "id": 186314235,
        "sender_full_name": "Amanieu",
        "timestamp": 1579717181
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> Attributes on expressions seem a little more confusing to read, to me.</p>",
        "id": 186314242,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1579717185
    },
    {
        "content": "<p>hm, I think of <code>asm!</code> as more of an item</p>",
        "id": 186314261,
        "sender_full_name": "simulacrum",
        "timestamp": 1579717201
    },
    {
        "content": "<p>but yes, that's true</p>",
        "id": 186314317,
        "sender_full_name": "simulacrum",
        "timestamp": 1579717213
    },
    {
        "content": "<p>My personal feeling is to leave it as <code>options()</code>. But this is very easy to change if we decide otherwise in the future.</p>",
        "id": 186314332,
        "sender_full_name": "Amanieu",
        "timestamp": 1579717227
    },
    {
        "content": "<p>I'm suggesting that we should decide this in the RFC.</p>",
        "id": 186314344,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1579717240
    },
    {
        "content": "<p>I certainly agree that it will make <em>slightly</em> more work for us in the parser.</p>",
        "id": 186314356,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1579717254
    },
    {
        "content": "<p>The tradeoff is that every single user of <code>asm!</code> will get simpler syntax.</p>",
        "id": 186314374,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1579717267
    },
    {
        "content": "<p>We just have to make sure we don't create option names that conflict with the other types of arguments you can pass to <code>asm!</code>. That doesn't seem especially problematic.</p>",
        "id": 186314421,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1579717305
    },
    {
        "content": "<p>it is true that we can stop <em>requiring</em> options later, right?</p>",
        "id": 186314428,
        "sender_full_name": "simulacrum",
        "timestamp": 1579717311
    },
    {
        "content": "<p>(For instance, we can't name an option <code>lateout</code>. ;) )</p>",
        "id": 186314430,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1579717314
    },
    {
        "content": "<p>I absolutely understand that <code>options()</code> makes the parser a little simpler. But do you see any fundamental limitations we'd have without it that justify making everyone write it for every asm that has options?</p>",
        "id": 186316621,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1579718427
    },
    {
        "content": "<p>could the options list at the end be \"transitioned to\" with a separation other than <code>,</code>? Such as using <code>;</code> to show the larger distinction.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"n\">asm</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"s\">&quot;add {0}, {1}&quot;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">inlateout</span><span class=\"p\">(</span><span class=\"n\">reg</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"p\">(</span><span class=\"n\">reg</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kr\">pure</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">nomem</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">nostack</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>",
        "id": 186333226,
        "sender_full_name": "Lokathor",
        "timestamp": 1579728755
    },
    {
        "content": "<p>It <em>could</em> be, but that seems like a syntax annoyance to have to remember, and one that people will regularly forget.</p>",
        "id": 186334693,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1579729828
    },
    {
        "content": "<p>(To the point that I think we'd end up making the parser handle <code>,</code> <em>anyway</em> just to give good error messages, at which point we could just make that the syntax.)</p>",
        "id": 186334733,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1579729864
    },
    {
        "content": "<p>Yeah I think all <code>,</code> is best, but I'm also not personally worried about template param order getting confused even with top level options (which I'm in favor of), so it's hard to understand a good fix.</p>\n<p>We could make <em>all</em> the separations be flexible? Like how macros accept any outer grouping as a legal way to use them?</p>",
        "id": 186335904,
        "sender_full_name": "Lokathor",
        "timestamp": 1579730699
    },
    {
        "content": "<p>Don't worry about the parser complexity, that is absolutely trivial compared to the rest of the work.</p>",
        "id": 186336781,
        "sender_full_name": "Amanieu",
        "timestamp": 1579731296
    },
    {
        "content": "<p>I don't have any strong objections on either <code>options()</code> or top-level options: both would likely work fine in practice.</p>",
        "id": 186336828,
        "sender_full_name": "Amanieu",
        "timestamp": 1579731346
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> If you don't have any objections to either, then I do have a preference for top-level options, to reduce the verbosity of <code>asm!</code> statements.</p>",
        "id": 186339130,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1579732782
    },
    {
        "content": "<p>Ok then, let's do that.</p>",
        "id": 186339155,
        "sender_full_name": "Amanieu",
        "timestamp": 1579732800
    },
    {
        "content": "<p>Thank you.</p>",
        "id": 186340997,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1579734262
    },
    {
        "content": "<p>Actually I just thought of a possible argument for keeping <code>options()</code>: it looks better when operands are formatted on a separate line each, since the options are all on one line.</p>",
        "id": 186341456,
        "sender_full_name": "Amanieu",
        "timestamp": 1579734637
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">asm</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"s\">&quot;longer asm {x} {y} {z}&quot;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"p\">(</span><span class=\"n\">reg</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">long_expression_1</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"p\">(</span><span class=\"n\">reg</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">long_expression_2</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"p\">(</span><span class=\"n\">reg</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">long_destination_3</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">options</span><span class=\"p\">(</span><span class=\"n\">nomem</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kr\">pure</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">nostack</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">preserves_flags</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>",
        "id": 186341461,
        "sender_full_name": "Amanieu",
        "timestamp": 1579734648
    },
    {
        "content": "<p>We can absolutely propose a formatting of <code>asm!</code> that puts options on the same line even if they're not inside <code>options()</code>.</p>",
        "id": 186342034,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1579735155
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">asm</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"s\">&quot;longer asm {x} {y} {z}&quot;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"p\">(</span><span class=\"n\">reg</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">long_expression_1</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"p\">(</span><span class=\"n\">reg</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">long_expression_2</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"p\">(</span><span class=\"n\">reg</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">long_destination_3</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">nomem</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kr\">pure</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">nostack</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">preserves_flags</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>",
        "id": 186342040,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1579735167
    },
    {
        "content": "<p>That's how I would want to format that, personally.</p>",
        "id": 186342064,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1579735189
    }
]