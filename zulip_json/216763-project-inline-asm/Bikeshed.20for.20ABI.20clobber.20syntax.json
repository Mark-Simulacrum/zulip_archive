[
    {
        "content": "<p>How should the ABI clobber syntax look like?</p>\n<ul>\n<li><code>clobber(\"C\")</code>, <code>clobber(\"stdcall\")</code>, <code>clobber(\"sysv64\")</code></li>\n<li><code>clobber_abi(\"C\")</code></li>\n<li><code>clobber_for_abi(\"C\")</code></li>\n<li>Propose your own color for the bikeshed!</li>\n</ul>",
        "id": 233439867,
        "sender_full_name": "Amanieu",
        "timestamp": 1617778455
    },
    {
        "content": "<p>is a clobber a separate entry from the options in the list of asm inputs?</p>",
        "id": 233517110,
        "sender_full_name": "Lokathor",
        "timestamp": 1617811556
    },
    {
        "content": "<p>I'm imagining it as an extra argument just before <code>options</code>. But I'm open to all ideas.</p>",
        "id": 233517241,
        "sender_full_name": "Amanieu",
        "timestamp": 1617811598
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> I don't think ABI clobbers need a separate name. I think they can use the same argument as register clobbers: <code>clobber(\"eax\")</code>, <code>clobber(\"C\")</code>.</p>",
        "id": 233517507,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617811713
    },
    {
        "content": "<p>The syntax for register clobbers is <code>out(\"eax\") _</code>.</p>",
        "id": 233517588,
        "sender_full_name": "Amanieu",
        "timestamp": 1617811745
    },
    {
        "content": "<p>I mean, if we're going to have a \"clobber\" directive it should work for both.</p>",
        "id": 233517665,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617811774
    },
    {
        "content": "<p>Seems confusing otherwise.</p>",
        "id": 233517701,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617811790
    },
    {
        "content": "<p>That's why I was thinking of being more explicit and using <code>clobber_abi</code>.</p>",
        "id": 233517735,
        "sender_full_name": "Amanieu",
        "timestamp": 1617811803
    },
    {
        "content": "<p>my proposal is that clobbers are outside the options list as a separate entity so that the \"ideal\" formatting has it on its own line, and then you use the verbose <code>clobber_for_abi</code> name</p>",
        "id": 233518001,
        "sender_full_name": "Lokathor",
        "timestamp": 1617811898
    },
    {
        "content": "<p>Regarding what goes inside the quotes, if you're planning to support multiple ABIs, using the name of the ABI seems like a good idea.</p>",
        "id": 233518238,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617812006
    },
    {
        "content": "<p>What's the rationale for not letting clobber support both registers and ABIs?</p>",
        "id": 233518391,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617812064
    },
    {
        "content": "<p>We already have a syntax for clobbering registers.</p>",
        "id": 233518435,
        "sender_full_name": "Amanieu",
        "timestamp": 1617812082
    },
    {
        "content": "<p>It doesn't make sense to have 2 ways of doing the same thing.</p>",
        "id": 233518466,
        "sender_full_name": "Amanieu",
        "timestamp": 1617812097
    },
    {
        "content": "<p>We also have both <code>if</code> and <code>match</code>; why have both when the latter works for everything?</p>",
        "id": 233518582,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617812144
    },
    {
        "content": "<p>having written a module full of inline asm earlier this week, the current <code>out(..) _</code> system seems very good and clear.</p>",
        "id": 233518685,
        "sender_full_name": "Lokathor",
        "timestamp": 1617812173
    },
    {
        "content": "<p>and the current system does work for everything if you combine all the in, out, inout, inlateout possibilities. clobbers would be the very limited version</p>",
        "id": 233518812,
        "sender_full_name": "Lokathor",
        "timestamp": 1617812224
    },
    {
        "content": "<p>So, what's the reason to not use something like <code>out(C) _</code> as the call-clobber syntax?</p>",
        "id": 233519271,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617812401
    },
    {
        "content": "<p>C isn't a register or even a register class.</p>",
        "id": 233519416,
        "sender_full_name": "Amanieu",
        "timestamp": 1617812433
    },
    {
        "content": "<p>I guess I'm not seeing the distinction you're making. To me it makes sense to support both registers and groups of registers via the same clobber syntax. \"This clobbers xyz plus whatever C calls clobber\".</p>",
        "id": 233519833,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617812584
    },
    {
        "content": "<p>What would <code>in(C)</code> even mean in this context?</p>",
        "id": 233519882,
        "sender_full_name": "Amanieu",
        "timestamp": 1617812605
    },
    {
        "content": "<p>It wouldn't be valid. I agree with the notion of having <code>clobber</code> to make that clearer, I just think it should work for any clobber.</p>",
        "id": 233520052,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617812664
    },
    {
        "content": "<p>Using <code>out(abi(\"C\")) _</code> should be fine</p>",
        "id": 233520060,
        "sender_full_name": "Lokathor",
        "timestamp": 1617812668
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> Ah, are you concerned about name conflicts between an architecture register and an ABI name?</p>",
        "id": 233520169,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617812723
    },
    {
        "content": "<p>yes</p>",
        "id": 233520191,
        "sender_full_name": "Lokathor",
        "timestamp": 1617812731
    },
    {
        "content": "<p>the GB has a register named <code>C</code> and gcc can (badly) compile C code for the GB, so it's not unreasonable to imagine that some day rust could be awkwardly be put there, or on some other platform with a register just named <code>C</code></p>",
        "id": 233520402,
        "sender_full_name": "Lokathor",
        "timestamp": 1617812809
    },
    {
        "content": "<p>It's named C, not c?</p>",
        "id": 233520466,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617812832
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> FWIW, I think I objected to this before, but I don't think I do now: if you wanted to introduce clobber and <em>remove</em> the _ syntax for out, I'd have no objection. Then there would only be one way to write a clobber.</p>",
        "id": 233520743,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617812941
    },
    {
        "content": "<p>(I do think inout with =&gt; still needs to be able to use _, but out doesn't.)</p>",
        "id": 233520964,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617813008
    },
    {
        "content": "<p>What about the distinction between <code>out(\"eax\") _</code> and <code>lateout(\"eax\") _</code>?</p>",
        "id": 233521059,
        "sender_full_name": "Amanieu",
        "timestamp": 1617813045
    },
    {
        "content": "<p>The reason I want separate syntax is that ABI clobbers work very differently from register clobbers:</p>\n<ul>\n<li>ABI clobbers don't conflict with existing register outputs: instead the ABI clobber acts as a fallback default for any registers you haven't explicitly specified.</li>\n<li>ABI clobbers will clobber some registers that can't be explicitly used as operands otherwise (e.g.  x87<code>st(0)</code>).</li>\n<li>You can only have 1 ABI clobber and it is always an output clobber.</li>\n</ul>",
        "id": 233521355,
        "sender_full_name": "Amanieu",
        "timestamp": 1617813169
    },
    {
        "content": "<p>Why can you only have one ABI clobber? What if one block of assembly calls two functions with different ABIs?</p>",
        "id": 233521792,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617813335
    },
    {
        "content": "<p>Also, does clobber act like out or lateout? And might we need both?</p>",
        "id": 233522021,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617813411
    },
    {
        "content": "<p>It acts as lateout.</p>",
        "id": 233522072,
        "sender_full_name": "Amanieu",
        "timestamp": 1617813436
    },
    {
        "content": "<p>So you might get inputs in one of the ABI registers? Seems fine, but potentially error-prone. I remember and agree with your rationale for inverting the GCC/LLVM default and making out mean earlyclobber.</p>",
        "id": 233522251,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617813519
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> for that particular system, it's from the bad ancient days of all caps all the time. A reasonable assembler probably ignores case though. The mostly general u16 registers are AF, BC, DE, HL, and each of those can be addressed as u8 instead with just one letter. It's slightly weird, but we should be trying to expect the slightly weird</p>",
        "id": 233540825,
        "sender_full_name": "Lokathor",
        "timestamp": 1617820886
    },
    {
        "content": "<p>For ABI clobbers, why couldn't you use <code>|</code> to \"union\" all clobbers from two call ABI definitions?</p>",
        "id": 233541033,
        "sender_full_name": "Lokathor",
        "timestamp": 1617820983
    },
    {
        "content": "<p>I'm not going to bikeshed <code>|</code> vs <code>,</code> to list more than one.</p>",
        "id": 233543622,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617822106
    },
    {
        "content": "<p>oh, well exact syntax isn't important, but i didn't see anything about being able to combine them</p>",
        "id": 233547580,
        "sender_full_name": "Lokathor",
        "timestamp": 1617823774
    }
]