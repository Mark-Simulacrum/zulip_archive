[
    {
        "content": "<p>I have a few question about adding tests for asm! of new target.<br>\nWhy all rust files in <code>src/test/assembly/asm/</code> has to be no_core ?</p>",
        "id": 210279196,
        "sender_full_name": "lzutao",
        "timestamp": 1600270272
    },
    {
        "content": "<p>Because otherwise they wouldn't be tested by CI.</p>",
        "id": 210279857,
        "sender_full_name": "Amanieu",
        "timestamp": 1600270531
    },
    {
        "content": "<p>Since we don't run tests for all platforms.</p>",
        "id": 210279875,
        "sender_full_name": "Amanieu",
        "timestamp": 1600270542
    },
    {
        "content": "<p>cool. What about <code>def_regs!</code> ? Is it only used to validate register names passed to <code>in($reg)</code>, <code>lateout($reg)</code> ?</p>",
        "id": 210350104,
        "sender_full_name": "lzutao",
        "timestamp": 1600321206
    },
    {
        "content": "<p>Yes. Also to associate register names with the register class they belong to.</p>",
        "id": 210350227,
        "sender_full_name": "Amanieu",
        "timestamp": 1600321410
    },
    {
        "content": "<p>looks like llvm_asm! supports both <code>reg</code> and <code>$reg</code> for mips, for example: <code>v0</code> and <code>$v0</code>.<br>\nDo we want to keep this behaviour ? Also what about escaping the <code>$</code> in template string ?</p>",
        "id": 210350981,
        "sender_full_name": "lzutao",
        "timestamp": 1600322460
    },
    {
        "content": "<p>I guess LLVM handle the escaping.</p>",
        "id": 210351000,
        "sender_full_name": "lzutao",
        "timestamp": 1600322490
    },
    {
        "content": "<p>do we need to forbid <code>$at</code>, <code>$gp</code> ?</p>",
        "id": 210351151,
        "sender_full_name": "lzutao",
        "timestamp": 1600322691
    },
    {
        "content": "<p>Is the state of llvm_asm for mips alright ? I got a compiler crash when digging: <a href=\"https://github.com/rust-lang/rust/issues/76834\">https://github.com/rust-lang/rust/issues/76834</a></p>",
        "id": 210374498,
        "sender_full_name": "lzutao",
        "timestamp": 1600340799
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"209117\">@lzutao</span> You need to escape <code>$</code> as <code>$$</code>.</p>",
        "id": 210379894,
        "sender_full_name": "Amanieu",
        "timestamp": 1600344820
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"209117\">@lzutao</span> Oh that's because <code>extern_func</code> is a ZST.</p>",
        "id": 210380483,
        "sender_full_name": "Amanieu",
        "timestamp": 1600345192
    },
    {
        "content": "<p>As a general rule stay away from memory constraints, they are super buggy.</p>",
        "id": 210380635,
        "sender_full_name": "Amanieu",
        "timestamp": 1600345281
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">llvm_asm</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;la $$v0, ($0)&quot;</span><span class=\"w\"> </span>: <span class=\"s\">&quot;={$0}&quot;</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span><span class=\"w\"> </span>: <span class=\"s\">&quot;*m&quot;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"mi\">0</span><span class=\"k\">usize</span><span class=\"p\">));</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 210380652,
        "sender_full_name": "Amanieu",
        "timestamp": 1600345291
    },
    {
        "content": "<p>This seems to work.</p>",
        "id": 210380684,
        "sender_full_name": "Amanieu",
        "timestamp": 1600345318
    },
    {
        "content": "<p>thanks, I'll take a look.<br>\nThe reason I opened <a href=\"https://github.com/rust-lang/rust/issues/76834\">#76834</a> is that I got the same segfault when adding similar asm! tests for mips</p>",
        "id": 210382267,
        "sender_full_name": "lzutao",
        "timestamp": 1600346193
    },
    {
        "content": "<p>Are you basing it off the existing tests in src/test/assembly/asm?</p>",
        "id": 210382330,
        "sender_full_name": "Amanieu",
        "timestamp": 1600346224
    },
    {
        "content": "<p>yes, i am</p>",
        "id": 210382388,
        "sender_full_name": "lzutao",
        "timestamp": 1600346263
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"209117\">lzutao</span> <a href=\"#narrow/stream/216763-project-inline-asm/topic/Adding.20mips.20target/near/210351151\">said</a>:</p>\n<blockquote>\n<p>do we need to forbid <code>$at</code>, <code>$gp</code> ?</p>\n</blockquote>\n<p>Check in MIPSISelLowering.cpp for the list of reserved registers in the LLVM source code.</p>",
        "id": 210382549,
        "sender_full_name": "Amanieu",
        "timestamp": 1600346325
    },
    {
        "content": "<p>if we don't handle reserved registers, will it be errored out by llvm ?</p>",
        "id": 210384106,
        "sender_full_name": "lzutao",
        "timestamp": 1600347142
    },
    {
        "content": "<p>No, it will just generated invalid code.</p>",
        "id": 210384147,
        "sender_full_name": "Amanieu",
        "timestamp": 1600347161
    },
    {
        "content": "<p>at least llvm issues a warning when using $at: <a href=\"https://rust.godbolt.org/z/sEYjfe\">https://rust.godbolt.org/z/sEYjfe</a></p>",
        "id": 210388168,
        "sender_full_name": "lzutao",
        "timestamp": 1600348909
    },
    {
        "content": "<p>how is $zero reserved in llvm ? <a href=\"https://github.com/llvm/llvm-project/blob/63d3aeb529a7b0fb95c2092ca38ad21c1f5cfd74/llvm/lib/Target/Mips/MipsRegisterInfo.cpp#L151-L152\">https://github.com/llvm/llvm-project/blob/63d3aeb529a7b0fb95c2092ca38ad21c1f5cfd74/llvm/lib/Target/Mips/MipsRegisterInfo.cpp#L151-L152</a></p>",
        "id": 210388563,
        "sender_full_name": "lzutao",
        "timestamp": 1600349074
    },
    {
        "content": "<p>I thought we could use it.</p>",
        "id": 210388599,
        "sender_full_name": "lzutao",
        "timestamp": 1600349094
    },
    {
        "content": "<p><code>$zero</code> isn't a real register. You can't write a value to it, it always contains 0.</p>",
        "id": 210388700,
        "sender_full_name": "Amanieu",
        "timestamp": 1600349139
    },
    {
        "content": "<p>the documentation I downloaded from <a href=\"http://mips.com\">mips.com</a> said this:</p>\n<blockquote>\n<p>Zero is a constant zero which can be read or written but will always be read as a<br>\nzero. This is not really a convention because you really cannot use it for any thing<br>\nelse.</p>\n</blockquote>",
        "id": 210389041,
        "sender_full_name": "lzutao",
        "timestamp": 1600349277
    },
    {
        "content": "<p>so we could write to it but the written value is discard.</p>",
        "id": 210389129,
        "sender_full_name": "lzutao",
        "timestamp": 1600349306
    },
    {
        "content": "<p>Yes. This means that it is useless for passing arguments in/out of <code>asm!</code></p>",
        "id": 210389163,
        "sender_full_name": "Amanieu",
        "timestamp": 1600349328
    },
    {
        "content": "<p>It's the same as XZR on AArch64</p>",
        "id": 210389214,
        "sender_full_name": "Amanieu",
        "timestamp": 1600349347
    },
    {
        "content": "<p>Ah, I got it. Was thinking about $zero in template string.</p>",
        "id": 210389256,
        "sender_full_name": "lzutao",
        "timestamp": 1600349365
    },
    {
        "content": "<p>about $k0, $k1 which are os temps regs, we can only use they in naked asm ? Not in asm!.</p>",
        "id": 210390257,
        "sender_full_name": "lzutao",
        "timestamp": 1600349762
    },
    {
        "content": "<p>You can use them inside the asm, just not for in/out arguments</p>",
        "id": 210390362,
        "sender_full_name": "Amanieu",
        "timestamp": 1600349793
    },
    {
        "content": "<p>do we need to care about Google Native Client (NaCl) sandbox target ? LLVM has special case for it.</p>",
        "id": 210391153,
        "sender_full_name": "lzutao",
        "timestamp": 1600350128
    },
    {
        "content": "<p>You can ignore it until we have such a target in rustc.</p>",
        "id": 210391207,
        "sender_full_name": "Amanieu",
        "timestamp": 1600350154
    },
    {
        "content": "<p>how can I check for ABICalls: <a href=\"https://github.com/llvm/llvm-project/blob/deb8f8bcf31540c657716ea5242183b0792702a1/llvm/lib/Target/Mips/MipsRegisterInfo.cpp#L176\">https://github.com/llvm/llvm-project/blob/deb8f8bcf31540c657716ea5242183b0792702a1/llvm/lib/Target/Mips/MipsRegisterInfo.cpp#L176</a> ?</p>",
        "id": 210392608,
        "sender_full_name": "lzutao",
        "timestamp": 1600350790
    },
    {
        "content": "<p>Check for the relevant LLVM target feature.</p>",
        "id": 210392683,
        "sender_full_name": "Amanieu",
        "timestamp": 1600350831
    },
    {
        "content": "<p>I don't know where to check that, but I found this: <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_target/spec/struct.TargetOptions.html#structfield.position_independent_executables\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_target/spec/struct.TargetOptions.html#structfield.position_independent_executables</a> <br>\nShould it be replaceable because there is a comment for abicalls ?</p>\n<div class=\"codehilite\"><pre><span></span><code>   <span class=\"c1\">// NoABICalls - Disable SVR4-style position-independent code.</span>\n   <span class=\"kt\">bool</span> <span class=\"n\">NoABICalls</span><span class=\"p\">;</span>\n</code></pre></div>",
        "id": 210393343,
        "sender_full_name": "lzutao",
        "timestamp": 1600351121
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>lib/Target/Mips/Mips.td\n60:def FeatureNoABICalls  : SubtargetFeature&lt;&quot;noabicalls&quot;, &quot;NoABICalls&quot;, &quot;true&quot;,\n</code></pre></div>",
        "id": 210406362,
        "sender_full_name": "Amanieu",
        "timestamp": 1600356469
    },
    {
        "content": "<p>So you can check for the <code>noabicalls</code> feature</p>",
        "id": 210406440,
        "sender_full_name": "Amanieu",
        "timestamp": 1600356495
    },
    {
        "content": "<p>so I'm defining the registers in <code>rustc_target::asm::mips</code>, do I need to use llvm there ?</p>",
        "id": 210406645,
        "sender_full_name": "lzutao",
        "timestamp": 1600356600
    },
    {
        "content": "<p>anyway, it seems that rustc doesn't support abicalls, I skipped the check.</p>",
        "id": 210406773,
        "sender_full_name": "lzutao",
        "timestamp": 1600356651
    },
    {
        "content": "<p>really a draft PR, but it would be nice if you could have a look: <a href=\"https://github.com/rust-lang/rust/pull/76839\">https://github.com/rust-lang/rust/pull/76839</a></p>",
        "id": 210407060,
        "sender_full_name": "lzutao",
        "timestamp": 1600356809
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"143274\">Amanieu</span> <a href=\"#narrow/stream/216763-project-inline-asm/topic/Adding.20mips.20target/near/210391207\">said</a>:</p>\n<blockquote>\n<p>You can ignore it until we have such a target in rustc.</p>\n</blockquote>\n<p>Also, Google has been deprioritizing it heavily, and I think we should hesitate before putting any effort there.</p>",
        "id": 210434516,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600369139
    },
    {
        "content": "<p>does the assembler reorder functions in .s output file ?</p>",
        "id": 210530236,
        "sender_full_name": "lzutao",
        "timestamp": 1600440864
    },
    {
        "content": "<p>I had to manually reorder function definitions to pass FileCheck.</p>",
        "id": 210530346,
        "sender_full_name": "lzutao",
        "timestamp": 1600440909
    },
    {
        "content": "<p>I've noticed that it sometimes does that. I have no idea why.</p>",
        "id": 210530361,
        "sender_full_name": "Amanieu",
        "timestamp": 1600440914
    },
    {
        "content": "<p>Just reorder them then and don't worry about it.</p>",
        "id": 210530406,
        "sender_full_name": "Amanieu",
        "timestamp": 1600440933
    },
    {
        "content": "<p>Is it a good idea to include a subchapter under asm feature of unstable book for mips and supported archs ?<br>\nIt could include some information like the valid form of registers in operands<code>$ra</code> vs <code>ra</code>,<br>\nlinks to recommended docs of architectures.</p>",
        "id": 210535183,
        "sender_full_name": "lzutao",
        "timestamp": 1600442736
    },
    {
        "content": "<p>I don't think a subchapter is necessary. Just add the MIPS register names to the existing tables.</p>",
        "id": 210535317,
        "sender_full_name": "Amanieu",
        "timestamp": 1600442783
    },
    {
        "content": "<p>Though a section providing various links to ASM resources could be useful.</p>",
        "id": 210535358,
        "sender_full_name": "Amanieu",
        "timestamp": 1600442803
    },
    {
        "content": "<p>(not MIPS-specific, but for all architectures)</p>",
        "id": 210535387,
        "sender_full_name": "Amanieu",
        "timestamp": 1600442822
    },
    {
        "content": "<p>the page will be long. Those docs are arch-dependant. People doesn't always read about arch they don't program for.<br>\nSo I think include a subchapter will be good. Through subchapters will be very short.</p>",
        "id": 210536117,
        "sender_full_name": "lzutao",
        "timestamp": 1600443109
    },
    {
        "content": "<p>I was thinking something like:</p>\n<div class=\"codehilite\"><pre><span></span><code>Further reading\n===\n\nX86:\n- https://foo\n- https://bad\nARM:\n- ...\nMIPS:\n- ...\n</code></pre></div>",
        "id": 210536337,
        "sender_full_name": "Amanieu",
        "timestamp": 1600443196
    },
    {
        "content": "<p>Or do you want more than just links?</p>",
        "id": 210536396,
        "sender_full_name": "Amanieu",
        "timestamp": 1600443226
    },
    {
        "content": "<p>btw, <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> do you know which CI builder to use for developing with rustc LLVM ?<br>\ndist-x86_64-linux didn't run asm tests , neither do x86_64-gnu-llvm-8 .</p>",
        "id": 210536530,
        "sender_full_name": "lzutao",
        "timestamp": 1600443265
    },
    {
        "content": "<p>dist only generates packages, it doesn't run tests.</p>",
        "id": 210536577,
        "sender_full_name": "Amanieu",
        "timestamp": 1600443285
    },
    {
        "content": "<p>You want x86_64-gnu</p>",
        "id": 210536645,
        "sender_full_name": "Amanieu",
        "timestamp": 1600443317
    },
    {
        "content": "<p>will try it<br>\n<span class=\"user-mention silent\" data-user-id=\"143274\">Amanieu</span> <a href=\"#narrow/stream/216763-project-inline-asm/topic/Adding.20mips.20target/near/210536396\">said</a>:</p>\n<blockquote>\n<p>Or do you want more than just links?</p>\n</blockquote>\n<p>Yeah, maybe some explanations about accepted operands, minimum LLVM for distro ?</p>",
        "id": 210536845,
        "sender_full_name": "lzutao",
        "timestamp": 1600443409
    },
    {
        "content": "<p>oh wait, distro doesn't build nightly, so ignore it.</p>",
        "id": 210536915,
        "sender_full_name": "lzutao",
        "timestamp": 1600443445
    },
    {
        "content": "<p>I'm hesitant to make any guarantees for LLVM versions other than the one officially shipped with rust.</p>",
        "id": 210536938,
        "sender_full_name": "Amanieu",
        "timestamp": 1600443460
    },
    {
        "content": "<p>Of course we'll have to commit to something if we ever stabilize it.</p>",
        "id": 210537027,
        "sender_full_name": "Amanieu",
        "timestamp": 1600443487
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"143274\">Amanieu</span> <a href=\"#narrow/stream/216763-project-inline-asm/topic/Adding.20mips.20target/near/210391207\">said</a>:</p>\n<blockquote>\n<p>You can ignore it until we have such a target in rustc.</p>\n</blockquote>\n<p>It's been removed since a long time ago: <a href=\"https://github.com/rust-lang/rust/issues/42420\">https://github.com/rust-lang/rust/issues/42420</a></p>",
        "id": 210616739,
        "sender_full_name": "est31",
        "timestamp": 1600524240
    },
    {
        "content": "<p>Hi, I managed to build LLVM with release-debuginfo and assertions on.<br>\nStill I don't know how to track down the crash in LLVM, would love to have a guide.<br>\n<a href=\"https://github.com/rust-lang/rust/pull/76839#issuecomment-696055912\">https://github.com/rust-lang/rust/pull/76839#issuecomment-696055912</a></p>",
        "id": 210733397,
        "sender_full_name": "lzutao",
        "timestamp": 1600691251
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"209117\">@lzutao</span> Can you isolate it down to a single test case and then dump the LLVM IR?</p>",
        "id": 210737004,
        "sender_full_name": "Amanieu",
        "timestamp": 1600693226
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"209117\">@lzutao</span> I ran a few quick tests in godbolt, it seems that LLVM only supports <code>i32</code>, not <code>i16</code>/<code>i8</code> for inline asm.</p>",
        "id": 210738780,
        "sender_full_name": "Amanieu",
        "timestamp": 1600694113
    },
    {
        "content": "<p>If you want to support them then you'll need to add a fixup in <code>compiler/rustc_codegen_llvm/src/asm.rs</code></p>",
        "id": 210739224,
        "sender_full_name": "Amanieu",
        "timestamp": 1600694313
    },
    {
        "content": "<p>to basically convert to/from <code>i32</code> before passing the value to LLVM.</p>",
        "id": 210739277,
        "sender_full_name": "Amanieu",
        "timestamp": 1600694339
    },
    {
        "content": "<p>do we ever test llvm-ir for asm! or just test the generated code ?</p>",
        "id": 210859987,
        "sender_full_name": "lzutao",
        "timestamp": 1600776338
    },
    {
        "content": "<p>Just the generated code</p>",
        "id": 210866825,
        "sender_full_name": "Amanieu",
        "timestamp": 1600779999
    },
    {
        "content": "<p>Do you know some recommended documentation for mips64 ?<br>\nI'm having trouble find reliable ones.<br>\nFor example,  although I though registers just changing size and theirs number is not.<br>\nVia godbolt,<code>$t0</code> in misp32 is <code>$8</code>, it is <code>$12</code> in mips64.</p>",
        "id": 211623408,
        "sender_full_name": "lzutao",
        "timestamp": 1601387534
    },
    {
        "content": "<p>Maybe that's llvm replace $t0 with $t4, kinda surprised.</p>",
        "id": 211627109,
        "sender_full_name": "lzutao",
        "timestamp": 1601389091
    },
    {
        "content": "<p>I know nothing about mips other than what I can Google in the spot.</p>",
        "id": 211629166,
        "sender_full_name": "Amanieu",
        "timestamp": 1601389977
    },
    {
        "content": "<p>You could try reaching the LLVM backend.</p>",
        "id": 211629204,
        "sender_full_name": "Amanieu",
        "timestamp": 1601389998
    },
    {
        "content": "<p>I think there are many unreached spots in asm! for tier3 targets.<br>\nI expect even asm! is stabilized, support for mips or risc-v will remain on nightly.</p>",
        "id": 211753859,
        "sender_full_name": "lzutao",
        "timestamp": 1601470163
    }
]