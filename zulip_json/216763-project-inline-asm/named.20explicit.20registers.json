[
    {
        "content": "<p>Attempting to name an explicit register fails with: <code>error: explicit register arguments cannot have names</code></p>\n<p>From a legibility point of view, it is massively helpful to refer to a parameter by a semantically relevant name, rather than be forced to use positional notation.  Also, the result is far less fragile when one new parameter is added in the middle of the parameter list.</p>\n<p>i.e. I think <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=release&amp;edition=2018&amp;gist=ee34edb56e06d922e1352984b50a813c\">https://play.rust-lang.org/?version=nightly&amp;mode=release&amp;edition=2018&amp;gist=ee34edb56e06d922e1352984b50a813c</a> out to compile and work just fine</p>",
        "id": 200304825,
        "sender_full_name": "Andrew Cooper",
        "timestamp": 1591745989
    },
    {
        "content": "<p>Nit: you need a comma between <code>{x}</code> and <code>4</code>.</p>",
        "id": 200304892,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1591746044
    },
    {
        "content": "<p>:) fair enough, but the point still stands</p>",
        "id": 200304929,
        "sender_full_name": "Andrew Cooper",
        "timestamp": 1591746106
    },
    {
        "content": "<p>But otherwise, yes, I understand. I personally would like to see this work as well.</p>",
        "id": 200305490,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1591746579
    },
    {
        "content": "<p>You said, though, \"rather than be forced to use positional notation\". Positional notation for explicit register arguments was actually intentionally disallowed, on the theory that it would be potentially error-prone. I do, however, think that <em>named</em> notation for explicit register arguments seems perfectly fine.</p>",
        "id": 200305625,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1591746690
    },
    {
        "content": "<p>ah - that would explain the other error I was seeing.</p>",
        "id": 200305744,
        "sender_full_name": "Andrew Cooper",
        "timestamp": 1591746814
    },
    {
        "content": "<p>Also, one other note on that example: if you're trying to add to <code>i</code>, you shouldn't have the <code> =&gt; _</code> . You just want <code>inout(\"rax\") i</code>.</p>",
        "id": 200305753,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1591746830
    },
    {
        "content": "<p><code>inout(\"rax\") i =&gt; _</code> says that i goes in and nothing comes out, so the value of <code>i</code> doesn't change.</p>",
        "id": 200305802,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1591746850
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=release&amp;edition=2018&amp;gist=267caf25b2a6010a36c4848acee1b485\">https://play.rust-lang.org/?version=nightly&amp;mode=release&amp;edition=2018&amp;gist=267caf25b2a6010a36c4848acee1b485</a></p>",
        "id": 200305824,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1591746876
    },
    {
        "content": "<p>that was actually what I intended at the time, but I shouldn't have confused my examples</p>",
        "id": 200305832,
        "sender_full_name": "Andrew Cooper",
        "timestamp": 1591746892
    },
    {
        "content": "<p>Ah, OK.</p>",
        "id": 200305847,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1591746911
    },
    {
        "content": "<p>I'm experimenting with translating <a href=\"https://xenbits.xen.org/gitweb/?p=xen.git;a=commitdiff;h=e952f1d67b5641bb560fbff6b80555808faf7935\">https://xenbits.xen.org/gitweb/?p=xen.git;a=commitdiff;h=e952f1d67b5641bb560fbff6b80555808faf7935</a> into this new assembly, because someone's going to have to do it at some point</p>",
        "id": 200305853,
        "sender_full_name": "Andrew Cooper",
        "timestamp": 1591746915
    },
    {
        "content": "<p>Awesome!</p>",
        "id": 200305868,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1591746938
    },
    {
        "content": "<p>the local .Ldone label doesn't have an obvious translation at all</p>",
        "id": 200305873,
        "sender_full_name": "Andrew Cooper",
        "timestamp": 1591746945
    },
    {
        "content": "<p>its specifically not 1f because that collides with the middle of the .rept block</p>",
        "id": 200305924,
        "sender_full_name": "Andrew Cooper",
        "timestamp": 1591746967
    },
    {
        "content": "<p>You could make it <code>5f</code> and label it <code>5:</code>, but yeah, it's annoying that you can't name it.</p>",
        "id": 200305938,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1591746992
    },
    {
        "content": "<p>numbered labels are concerning fragile</p>",
        "id": 200305977,
        "sender_full_name": "Andrew Cooper",
        "timestamp": 1591747051
    },
    {
        "content": "<p>No argument there whatsoever.</p>",
        "id": 200305984,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1591747060
    },
    {
        "content": "<p>There <em>should</em> be a way to define local named labels.</p>",
        "id": 200305991,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1591747071
    },
    {
        "content": "<p>(I'm also suffering from having a massive AT&amp;T preference, but I guess that's a can of worms not worth opening at this point)</p>",
        "id": 200306059,
        "sender_full_name": "Andrew Cooper",
        "timestamp": 1591747104
    },
    {
        "content": "<p>Please feel free, especially in an initial translation, to do <code>options(att_syntax)</code>.</p>",
        "id": 200306077,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1591747126
    },
    {
        "content": "<p>That way you're only translating one thing at a time. :)</p>",
        "id": 200306081,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1591747133
    },
    {
        "content": "<p>I also fully expect some projects to define a macro <code>asm_att!</code> to do exactly that. Which reminds me, I need to test something...</p>",
        "id": 200306093,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1591747154
    },
    {
        "content": "<p>aah.  Ok - there is a very confusing error</p>",
        "id": 200306327,
        "sender_full_name": "Andrew Cooper",
        "timestamp": 1591747366
    },
    {
        "content": "<p>Compiling playground v0.0.1 (/playground)<br>\nerror: expected token: <code>,</code><br>\n --&gt; src/main.rs:8:14<br>\n  |<br>\n8 |              \"mov    $1, {ssp}           \\n\\t\"<br>\n  |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected <code>,</code></p>\n<p>actually means \"you don't have a parameter named {ssp} yet\"</p>",
        "id": 200306343,
        "sender_full_name": "Andrew Cooper",
        "timestamp": 1591747403
    },
    {
        "content": "<p>Oh, that's fun.</p>",
        "id": 200306474,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1591747533
    },
    {
        "content": "<p>Regarding writing an <code>asm_att!</code> macro: <a href=\"https://github.com/rust-lang/rust/issues/73193\">https://github.com/rust-lang/rust/issues/73193</a></p>",
        "id": 200306484,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1591747541
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310469\">@Andrew Cooper</span> I just tested, and I can't reproduce that. I got:</p>\n<div class=\"codehilite\"><pre><span></span><code>error: there is no argument named `foo`\n</code></pre></div>",
        "id": 200306582,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1591747647
    },
    {
        "content": "<p>Can you provide a full example reproducing that?</p>",
        "id": 200306598,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1591747666
    },
    {
        "content": "<p>yeah - I'm confused.  It doesn't seem to like it even with {ssp} explicitly named</p>",
        "id": 200306643,
        "sender_full_name": "Andrew Cooper",
        "timestamp": 1591747687
    },
    {
        "content": "<p>Ohhhhhhh.</p>",
        "id": 200306654,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1591747704
    },
    {
        "content": "<p>Rust doesn't do automatic string concatenation.</p>",
        "id": 200306659,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1591747714
    },
    {
        "content": "<p>If you wrote <code>\"foo\\n\\t\" \"bar\\n\\t\"</code> , Rust will not concatenate those, it'll complain at the second one saying it expected a comma.</p>",
        "id": 200306673,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1591747740
    },
    {
        "content": "<p>Rust has multi-line strings.</p>",
        "id": 200306684,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1591747752
    },
    {
        "content": "<p>(Or if you <em>really</em> want to, you should be able to use <code>concat!</code>, but personally I'd suggest multi-line strings.)</p>",
        "id": 200306711,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1591747780
    },
    {
        "content": "<p>aah</p>",
        "id": 200306778,
        "sender_full_name": "Andrew Cooper",
        "timestamp": 1591747814
    },
    {
        "content": "<p>that's one part of GCC inline assembly I'm not going to miss</p>",
        "id": 200306909,
        "sender_full_name": "Andrew Cooper",
        "timestamp": 1591747973
    },
    {
        "content": "<p>although actually, it does mean you can't comment your large asm blocks.  hmm :S</p>",
        "id": 200306951,
        "sender_full_name": "Andrew Cooper",
        "timestamp": 1591748033
    },
    {
        "content": "<p>oh that's neat - it does translate comment markers in the inline asm.</p>",
        "id": 200307237,
        "sender_full_name": "Andrew Cooper",
        "timestamp": 1591748286
    },
    {
        "content": "<p>but it also attempts to translate them before knowing that they are comments<br>\n//lea    .Ldone(%rip), {rip}<br>\nerror: there is no argument named <code>rip</code></p>",
        "id": 200307459,
        "sender_full_name": "Andrew Cooper",
        "timestamp": 1591748518
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> local named labels do work when I'm not suffering from the multiline string issue</p>",
        "id": 200307533,
        "sender_full_name": "Andrew Cooper",
        "timestamp": 1591748593
    },
    {
        "content": "<p>ok - end result is <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=release&amp;edition=2018&amp;gist=a77ba2476a56c9bc2d4da0d651414637\">https://play.rust-lang.org/?version=nightly&amp;mode=release&amp;edition=2018&amp;gist=a77ba2476a56c9bc2d4da0d651414637</a> which isn't too bad</p>",
        "id": 200308040,
        "sender_full_name": "Andrew Cooper",
        "timestamp": 1591749117
    },
    {
        "content": "<p>one note.  the RFC says that the widest register option is always picked, but that isn't true for <code>cs = in(reg) 0xe008</code>, which LLVM tries to shrink to its 32bit form, subsequently hitting issues with both <code>wrsspq</code> and <code>push</code>.</p>",
        "id": 200308126,
        "sender_full_name": "Andrew Cooper",
        "timestamp": 1591749201
    },
    {
        "content": "<p>I don't expect this to be a problem in practice, because the diagnostic is clear as to what the ambiguity is, and how to resolve it</p>",
        "id": 200308143,
        "sender_full_name": "Andrew Cooper",
        "timestamp": 1591749235
    },
    {
        "content": "<p>Still, report it if unclear.</p>",
        "id": 200308890,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1591750053
    },
    {
        "content": "<p>what about memory operands?</p>",
        "id": 200309076,
        "sender_full_name": "Andrew Cooper",
        "timestamp": 1591750268
    },
    {
        "content": "<p>instructions such as <code>ldmxcsr</code> strictly only take a memory operand, and I cant find a way of expressing that</p>",
        "id": 200309092,
        "sender_full_name": "Andrew Cooper",
        "timestamp": 1591750298
    },
    {
        "content": "<p>best I can see is to take the value by register, push it onto the stack, and use an %rsp reference,  but this is the kind of thing the compiler ought to be arranging, rather than the programmer</p>",
        "id": 200309171,
        "sender_full_name": "Andrew Cooper",
        "timestamp": 1591750381
    },
    {
        "content": "<p>Put the address in a register and write <code>[{reg}]</code>.</p>",
        "id": 200311318,
        "sender_full_name": "Amanieu",
        "timestamp": 1591752766
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310469\">@Andrew Cooper</span> The rationale for not supporting substitution for explicit registers is that it can be a bit counter-intuitive. Even though you specify the register name in the operand (<code>in(\"eax\")</code>) the compiler will actually ignore that and use the size of the value you passed in (<code>i64</code> for example) to determine the register name to use in the asm (<code>rax</code> in this case, instead of the <code>eax</code> you specified).</p>",
        "id": 200312610,
        "sender_full_name": "Amanieu",
        "timestamp": 1591754302
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> I'm also assuming we may support memory operands one day, just not right away.</p>",
        "id": 200381539,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1591769523
    },
    {
        "content": "<p>Sure, the main issue with memory operands is that there are tons of arch-specific variants.</p>",
        "id": 200381556,
        "sender_full_name": "Amanieu",
        "timestamp": 1591769554
    },
    {
        "content": "<p>Right.</p>",
        "id": 200381632,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1591769657
    },
    {
        "content": "<p>It's probably easier to support \"this can be in memory\", and much harder to support \"this must use this particular form of addressing\".</p>",
        "id": 200381635,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1591769690
    }
]