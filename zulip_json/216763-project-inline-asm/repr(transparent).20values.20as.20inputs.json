[
    {
        "content": "<p>If a type is <code>repr(transparent)</code> over a type that's allowed as an input/output type to an inline assembly block, can we be allowed to specify it directly as an input or output?</p>",
        "id": 251159363,
        "sender_full_name": "Lokathor",
        "timestamp": 1630272717
    },
    {
        "content": "<p>That is: i'm aware that it does not currently work, and I'm suggesting that it be allowed.</p>",
        "id": 251159412,
        "sender_full_name": "Lokathor",
        "timestamp": 1630272741
    },
    {
        "content": "<p>If we allow transparent types then how about <code>Option&lt;NonZeroI32&gt;</code>? Maybe define the rule as \"any type that is FFI safe and have an ABI of scalar or vector\"?</p>\n<p>While I do see it being potentially useful but I am worried about complicating the rules.</p>",
        "id": 251160933,
        "sender_full_name": "Gary Guo",
        "timestamp": 1630274462
    },
    {
        "content": "<p>\"any type with the same ABI as &lt;insert what we allow&gt;\" would be nice, I can imagine a world where being able to use newtyped scalars directly is a lot nicer</p>",
        "id": 251163637,
        "sender_full_name": "asquared31415",
        "timestamp": 1630277270
    },
    {
        "content": "<p>Some restrictions would be needed. Otherwise abi layout of a type in a library could be unintentionally exposed to its user, and user might depend on that.</p>",
        "id": 251165364,
        "sender_full_name": "Gary Guo",
        "timestamp": 1630279198
    },
    {
        "content": "<p>We could probably support this, but I don't feel that the added complexity is justified. We currently have error messages that clearly give the list of supported types for a register class already.</p>",
        "id": 251168615,
        "sender_full_name": "Amanieu",
        "timestamp": 1630282317
    },
    {
        "content": "<p>And in any case <code>asm!</code> is always unsafe so you can always transmute if needed.</p>",
        "id": 251168668,
        "sender_full_name": "Amanieu",
        "timestamp": 1630282340
    },
    {
        "content": "<p>Not that you'd need to since most <code>#[repr(transparent)]</code> types have a way of getting at the inner value (usually it's just <code>pub</code>).</p>",
        "id": 251168693,
        "sender_full_name": "Amanieu",
        "timestamp": 1630282382
    }
]