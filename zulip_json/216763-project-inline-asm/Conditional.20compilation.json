[
    {
        "content": "<p>I would like to use cfg attributes with assembly, such as:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">asm!</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// cut</span>\n<span class=\"w\">        </span><span class=\"cp\">#[cfg(target_endian = </span><span class=\"s\">\"big\"</span><span class=\"cp\">)]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"s\">\"bswap {0}\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// cut</span>\n<span class=\"w\">    </span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>If this is already possible somehow, please add it to The Rust Unstable Book.</p>",
        "id": 248958628,
        "sender_full_name": "Bot+",
        "timestamp": 1628588713
    },
    {
        "content": "<p>I don't think this is possible.</p>",
        "id": 248958763,
        "sender_full_name": "Amanieu",
        "timestamp": 1628588797
    },
    {
        "content": "<p>There is a workaround: you can define a <code>macro_rules!</code> which expands to different things depending on <code>cfg</code> flags.</p>",
        "id": 248958811,
        "sender_full_name": "Amanieu",
        "timestamp": 1628588844
    },
    {
        "content": "<p>Thanks, macros work</p>\n<p>Following the earlier example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[cfg(not(target_endian = </span><span class=\"s\">\"big\"</span><span class=\"cp\">))]</span><span class=\"w\"></span>\n<span class=\"fm\">macro_rules!</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"cp\">$arg</span>:<span class=\"nc\">expr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"s\">\"\"</span><span class=\"w\"> </span><span class=\"c1\">// nop</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[cfg(target_endian = </span><span class=\"s\">\"big\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"fm\">macro_rules!</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"cp\">$arg</span>:<span class=\"nc\">expr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"cp\">$arg</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[cfg(target_endian = </span><span class=\"s\">\"little\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"fm\">macro_rules!</span><span class=\"w\"> </span><span class=\"n\">le</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"cp\">$arg</span>:<span class=\"nc\">expr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"cp\">$arg</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"cp\">#[cfg(not(target_endian = </span><span class=\"s\">\"little\"</span><span class=\"cp\">))]</span><span class=\"w\"></span>\n<span class=\"fm\">macro_rules!</span><span class=\"w\"> </span><span class=\"n\">le</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"cp\">$arg</span>:<span class=\"nc\">expr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"s\">\"\"</span><span class=\"w\"> </span><span class=\"c1\">// nop</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 248961756,
        "sender_full_name": "Bot+",
        "timestamp": 1628590815
    },
    {
        "content": "<p>Yep, that looks right.</p>",
        "id": 248961783,
        "sender_full_name": "Amanieu",
        "timestamp": 1628590842
    },
    {
        "content": "<p>Maybe officially supported solution could be something like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">cfg_asm</span><span class=\"p\">(</span><span class=\"n\">not</span><span class=\"p\">(</span><span class=\"n\">target_endian</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"big\"</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"s\">\"bswap {0}\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">})</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Or expand scope of cfg! macro with edition upgrade?</p>",
        "id": 248961789,
        "sender_full_name": "Bot+",
        "timestamp": 1628590846
    },
    {
        "content": "<p>You can do this though:</p>\n<div class=\"codehilite\"><pre><span></span><code>#[cfg(target_endian=&quot;big&quot;)]\nasm!(&quot;...&quot;);\n</code></pre></div>\n<p>or just </p>\n<div class=\"codehilite\"><pre><span></span><code>if cfg!(...) { ... }\n</code></pre></div>",
        "id": 248967404,
        "sender_full_name": "nagisa",
        "timestamp": 1628595519
    },
    {
        "content": "<p>yes, it doesn't allow you to have a single asm statement with something in the middle inserted conditionally, but you could split the asm blocks too...</p>",
        "id": 248967458,
        "sender_full_name": "nagisa",
        "timestamp": 1628595570
    },
    {
        "content": "<p>Duplication works too but it moves the burden of synchronizing identical bits to humans.</p>\n<p>I would consider duplication reasonable only for procedurally generated stuff stored out-of-band.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[cfg(target_endian = </span><span class=\"s\">\"little\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">asm!</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"fm\">include_str!</span><span class=\"p\">(</span><span class=\"s\">\"my_l33t_code-le.asm\"</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">inout</span><span class=\"p\">(</span><span class=\"n\">reg</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// cut</span>\n<span class=\"w\">    </span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[cfg(target_endian = </span><span class=\"s\">\"big\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">asm!</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"fm\">include_str!</span><span class=\"p\">(</span><span class=\"s\">\"my_l33t_code-be.asm\"</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">inout</span><span class=\"p\">(</span><span class=\"n\">reg</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// cut</span>\n<span class=\"w\">    </span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 248979182,
        "sender_full_name": "Bot+",
        "timestamp": 1628602459
    },
    {
        "content": "<p>Another option would be for asm to support compile-time const strings, which in turn could be controlled by cfg.</p>",
        "id": 249009261,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1628616246
    },
    {
        "content": "<p>That's much harder: currently we parse the template string during macro expansion.</p>",
        "id": 249015974,
        "sender_full_name": "Amanieu",
        "timestamp": 1628619510
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"143274\">Amanieu</span> <a href=\"#narrow/stream/216763-project-inline-asm/topic/Conditional.20compilation/near/248958763\">said</a>:</p>\n<blockquote>\n<p>I don't think this is possible.</p>\n</blockquote>\n<p>Hmm, just to check, does <code>asm!</code> have any limitations here that aren't shared by the <code>format_args!</code>-likes?</p>",
        "id": 249053388,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1628639754
    },
    {
        "content": "<p>It reuses the same parsing logic as <code>format_args!</code> in the compiler.</p>",
        "id": 249053460,
        "sender_full_name": "Amanieu",
        "timestamp": 1628639797
    },
    {
        "content": "<p>hm, okay. that seems fine then. although i'm surprised it can expand macros but not stuff like <code>#[cfg()]</code>. (but maybe eventually builtin macros will learn how to expand those)</p>",
        "id": 249053615,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1628639907
    },
    {
        "content": "<p>The #[cfg] in that example is a bit tricky: there's no precedent for using it to make an item in a comma-separated list disappear.</p>",
        "id": 249053671,
        "sender_full_name": "Amanieu",
        "timestamp": 1628639981
    },
    {
        "content": "<p>sure, but i'd hope eventually </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"fm\">asm!</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[cfg(foo)]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"s\">\"...\"</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[cfg(not(foo))]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"s\">\"\"</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>would work, but i guess at that point, you might just use a macro approach to avoid duplicating the body of the cfg...</p>",
        "id": 249055634,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1628641476
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"143274\">Amanieu</span> <a href=\"#narrow/stream/216763-project-inline-asm/topic/Conditional.20compilation/near/249053671\">said</a>:</p>\n<blockquote>\n<p>there's no precedent for using it to make an item in a comma-separated list disappear.</p>\n</blockquote>\n<p>also, this isn't <em>entirely</em> true. or, rather, it depends if you consider the list of fields of a struct / list of variants of an enum a comma-separated list (but yeah, these are not part of the expression grammar)</p>",
        "id": 249055758,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1628641585
    }
]