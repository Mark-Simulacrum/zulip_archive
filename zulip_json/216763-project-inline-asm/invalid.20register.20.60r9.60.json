[
    {
        "content": "<blockquote>\n<p>invalid register <code>r9</code>: r9 is used internally by LLVM and cannot be used as an operand for inline asm</p>\n</blockquote>\n<p>Lately I started getting this error in CI on some code that used to pass just fine.</p>\n<p>Is <code>r9</code> <em>supposed</em> to have been invalid to use this whole time? or is this a temporary bug and i should file an issue?</p>",
        "id": 239101801,
        "sender_full_name": "Lokathor",
        "timestamp": 1621262667
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/85247\">https://github.com/rust-lang/rust/issues/85247</a></p>",
        "id": 239125057,
        "sender_full_name": "nagisa",
        "timestamp": 1621270922
    },
    {
        "content": "<p>Ah, \"good\"</p>",
        "id": 239130759,
        "sender_full_name": "Lokathor",
        "timestamp": 1621273337
    },
    {
        "content": "<p>This is something that really, <em>really</em> needs fixing in LLVM somehow, to make it possible to use registers that LLVM needs to architecturally reserve. That would make it safe to allow use of all registers, and let LLVM sort out whether it needs to shuffle things around to allow that.</p>",
        "id": 239145600,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1621279351
    },
    {
        "content": "<p>can we fix this on the rustc side until then?</p>",
        "id": 239183966,
        "sender_full_name": "Lokathor",
        "timestamp": 1621300731
    },
    {
        "content": "<p>Theoretically. We would need a reliable code sequence that sets r9 from some input that isn't reserved while not using any more registers.</p>",
        "id": 239210937,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1621323652
    },
    {
        "content": "<p>So, for instance, by creating a small structure and passing the address of it. But that doesn't work for output.</p>",
        "id": 239211129,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1621323752
    },
    {
        "content": "<p>If this is something you care about, looking into the LLVM side would help.</p>",
        "id": 239211173,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1621323777
    },
    {
        "content": "<p>unfortunately this is way out of my depth, and I don't have much time for programming lately. I would like this solved, but I really have no idea where to even begin investigating anything about LLVM.</p>",
        "id": 239250527,
        "sender_full_name": "Lokathor",
        "timestamp": 1621343470
    },
    {
        "content": "<p>Is an LLVM bug filed for this?</p>",
        "id": 239322960,
        "sender_full_name": "Jubilee",
        "timestamp": 1621370726
    },
    {
        "content": "<p>You should probably just fix your asm code to use a different register, or move some other register into <code>r9</code>.</p>",
        "id": 239323128,
        "sender_full_name": "Amanieu",
        "timestamp": 1621370788
    },
    {
        "content": "<p>ARM specifies <code>r9</code> as a platform-reserved register, which portable assembly code should avoid using.</p>",
        "id": 239323163,
        "sender_full_name": "Amanieu",
        "timestamp": 1621370806
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"143274\">Amanieu</span> <a href=\"#narrow/stream/216763-project-inline-asm/topic/invalid.20register.20.60r9.60/near/239323163\">said</a>:</p>\n<blockquote>\n<p>ARM specifies <code>r9</code> as a platform-reserved register, which portable assembly code should avoid using.</p>\n</blockquote>\n<p>Not everyone is using <code>asm!</code> to make \"portable assembly\", whatever <em>that</em> means.</p>",
        "id": 239323646,
        "sender_full_name": "Jubilee",
        "timestamp": 1621370996
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"143274\">Amanieu</span> <a href=\"#narrow/stream/216763-project-inline-asm/topic/invalid.20register.20.60r9.60/near/239323128\">said</a>:</p>\n<blockquote>\n<p>You should probably just fix your asm code to use a different register, or move some other register into <code>r9</code>.</p>\n</blockquote>\n<p>That isn't necessarily always an option. I can't speak to ARM r9, but x86 ebx <em>is</em> absolutely used in existing code.</p>",
        "id": 239328211,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1621372950
    },
    {
        "content": "<p>Sometimes you don't get a choice on which register you use.</p>",
        "id": 239328224,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1621372957
    },
    {
        "content": "<p>My understanding is that the impact on Arm is mostly that the reservation in LLVM and for Arm is based on whether or not certain kinds of applications are being compiled, with certain kinds of functions, which is likely to be the least true for comparatively resource-constrained early-Arm embedded chips, which don't have the abundance of registers + vector registers that more recent examples may enjoy.</p>",
        "id": 239328510,
        "sender_full_name": "Jubilee",
        "timestamp": 1621373121
    },
    {
        "content": "<p>and if you're using load multi / store multi to copy data around then you run low on registers if you arbitrarily can't use r9 in addition to the others you already can't use</p>",
        "id": 239328528,
        "sender_full_name": "Lokathor",
        "timestamp": 1621373140
    },
    {
        "content": "<p>I mean, if you're writing asm for aarch64 and find out a register is reserved, of course you just shrug and go \"hey whatever man, I got, what, 60 of these lying around if you count the vector registers?\"</p>",
        "id": 239328688,
        "sender_full_name": "Jubilee",
        "timestamp": 1621373214
    },
    {
        "content": "<p>well, as far as frame pointers are concerned, they are usually expected to remain reserved for unwinding and/or debuggers to work.</p>",
        "id": 239329140,
        "sender_full_name": "nagisa",
        "timestamp": 1621373446
    },
    {
        "content": "<p>so they are not reserved for the compiler reasons, but rather for platform reasons (i.e. OS and tooling used within that OS can rely on it)</p>",
        "id": 239329223,
        "sender_full_name": "nagisa",
        "timestamp": 1621373495
    },
    {
        "content": "<p>That is true but an OS is not always involved.</p>",
        "id": 239329721,
        "sender_full_name": "Jubilee",
        "timestamp": 1621373704
    },
    {
        "content": "<p>Holds true for debuggers still. But yeah, you won't be using rwpi nor framepointers most likely in embedded.</p>",
        "id": 239329902,
        "sender_full_name": "nagisa",
        "timestamp": 1621373790
    },
    {
        "content": "<p>i forget if the thumbv4t-none-eabi target omits the frame pointer</p>",
        "id": 239330234,
        "sender_full_name": "Lokathor",
        "timestamp": 1621373985
    },
    {
        "content": "<p>i suppose it should, or another target should be added if it can't</p>",
        "id": 239330335,
        "sender_full_name": "Lokathor",
        "timestamp": 1621374025
    },
    {
        "content": "<p>LLVM may still use a frame pointer even if you have disabled it. This typically happens if stack realignment is needed (e.g. you have a 64-byte aligned local).</p>",
        "id": 239330717,
        "sender_full_name": "Amanieu",
        "timestamp": 1621374247
    },
    {
        "content": "<p>The thing is, due to inlining and other optimizations, we can't know in advance whether the frame pointer will be reserved or not. So we conservatively always mark it as reserved.</p>",
        "id": 239330769,
        "sender_full_name": "Amanieu",
        "timestamp": 1621374280
    },
    {
        "content": "<p>Anyways, regarding <code>r9</code> all you need to do is push/pop it around your asm code.</p>",
        "id": 239330823,
        "sender_full_name": "Amanieu",
        "timestamp": 1621374317
    },
    {
        "content": "<p>so why doesn't the inline asm machinery do that automatically if r9 is used?</p>",
        "id": 239331213,
        "sender_full_name": "Lokathor",
        "timestamp": 1621374522
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> That's part of what I was getting at when I suggested \"a reliable code sequence that sets r9 from some input that isn't reserved while not using any more registers\".</p>",
        "id": 239338479,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1621378752
    },
    {
        "content": "<p>You'd have to have something we could automatically add to the start and end of assembly blocks for inputs/outputs in that register (respectively) that would read/write it from memory somehow.</p>",
        "id": 239338504,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1621378788
    },
    {
        "content": "<p>We discussed this in a topic some time ago, but the conclusion was that if we did so, we might rule out the possibility of memory operands in the future.</p>",
        "id": 239338604,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1621378821
    },
    {
        "content": "<p>All that said, patch and test cases welcome. :)</p>",
        "id": 239338637,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1621378840
    },
    {
        "content": "<p>in this case, it's that r9 is trashed by the asm, but not an input or output value: <a href=\"https://github.com/rust-console/gba/blob/main/src/sync/statics.rs#L88\">https://github.com/rust-console/gba/blob/main/src/sync/statics.rs#L88</a></p>",
        "id": 239339014,
        "sender_full_name": "Lokathor",
        "timestamp": 1621379006
    },
    {
        "content": "<p>If it's <em>just</em> a clobber, we could probably handle that by just inserting a push/pop ourselves.</p>",
        "id": 239339164,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1621379096
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> Does it seem potentially reasonable to allow clobbers of reserved registers and handle them by pushing/popping ourselves?</p>",
        "id": 239339190,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1621379111
    },
    {
        "content": "<p>That's separate from handling those registers as inputs or outputs.</p>",
        "id": 239339226,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1621379133
    },
    {
        "content": "<p>That doesn't solve the issue of ruling out the possibility of supporting memory operands in the future.</p>",
        "id": 239343605,
        "sender_full_name": "Amanieu",
        "timestamp": 1621382041
    },
    {
        "content": "<p>...are memory operands a thing on Arm? or am I misunderstanding \"memory operands\" when it is a term of art?</p>",
        "id": 239347993,
        "sender_full_name": "Jubilee",
        "timestamp": 1621385368
    },
    {
        "content": "<p>Yeah, memory operands refers to <code>\"m\"</code> input/output constraint in llvm/gcc-style inline asm.</p>",
        "id": 239352181,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1621388896
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"143274\">Amanieu</span> <a href=\"#narrow/stream/216763-project-inline-asm/topic/invalid.20register.20.60r9.60/near/239343605\">said</a>:</p>\n<blockquote>\n<p>That doesn't solve the issue of ruling out the possibility of supporting memory operands in the future.</p>\n</blockquote>\n<p>You're concerned about stack-relative memory operands being invalidated by a push/pop?</p>",
        "id": 239352671,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1621389298
    },
    {
        "content": "<p>also register-relative memory operands using <code>r9</code> (or any other register llvm doesn't know we're modifying) as the base address.</p>",
        "id": 239355662,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621391414
    },
    {
        "content": "<p>So I guess the basic requirement or user story or whatever is (approximately) \"i want scratch registers and i know that the compiler can do this somehow, let me assert something or other so i can grab up as many scratch registers as possible\".</p>\n<p>so maybe this can be some sort of option entry you can pass in to get the compiler to play along?</p>",
        "id": 239358173,
        "sender_full_name": "Lokathor",
        "timestamp": 1621393418
    },
    {
        "content": "<p>I think there are multiple concerns here. Wanting a reserved register as a scratch register is one issue. Wanting a reserved register because you need <em>that specific register</em> to match some particular interface is another.</p>",
        "id": 239463309,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1621444774
    },
    {
        "content": "<p>Both are completely valid; they may have different solutions.</p>",
        "id": 239463327,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1621444782
    },
    {
        "content": "<p>But in any case, an opt-in along the lines of \"I need reserved registers and I understand that means I might not be allowed memory operands in the future\" would be appealing.</p>",
        "id": 239463442,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1621444811
    },
    {
        "content": "<p>Why not just do the push/pop yourself in that case? Since you'd have to opt-in anyways.</p>",
        "id": 239466097,
        "sender_full_name": "Amanieu",
        "timestamp": 1621445835
    },
    {
        "content": "<p>It'd be more complex to handle things like input and output shuffling (which we could also do if we don't worry about memory operands).</p>",
        "id": 239468070,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1621446662
    },
    {
        "content": "<p>I'd like to be able to do things like an <code>asm!</code> with every single register as an <code>inout</code>, for instance.</p>",
        "id": 239468468,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1621446816
    },
    {
        "content": "<p>That's just going make LLVM error due to a lack of registers.</p>",
        "id": 239468592,
        "sender_full_name": "Amanieu",
        "timestamp": 1621446856
    },
    {
        "content": "<p>Because of the reserved register handling, or something else?</p>",
        "id": 239468659,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1621446891
    },
    {
        "content": "<p>If you try to allocate every single register with <code>inout</code>.</p>",
        "id": 239468721,
        "sender_full_name": "Amanieu",
        "timestamp": 1621446912
    },
    {
        "content": "<p>What if we internally translated the reserved registers to stuff them in a struct and move it into and out of the reserved registers in added assembly?</p>",
        "id": 239469146,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1621447078
    },
    {
        "content": "<p>My main motivation here is that I'd like <code>asm!</code> with registers like x86 rbx or arm r9 to work as automatically as it does in GCC <code>__asm__</code> (which just doesn't stop you from using those at all, and as far as I can tell just saves/restores them around your assembly if it's using them itself).</p>",
        "id": 239469589,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1621447242
    },
    {
        "content": "<p>And, of course, if you don't use whatever compilation options enable the use of those registers then you can use them freely.</p>",
        "id": 239469631,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1621447261
    },
    {
        "content": "<p>yeah i wanted <code>out(\"r9\") _</code>, which seems <em>pretty flexible</em>, and rustc/llvm should be able to compensate if necessary</p>",
        "id": 239492687,
        "sender_full_name": "Lokathor",
        "timestamp": 1621456953
    },
    {
        "content": "<p>I'm being deliberately conservative with the reserved registers for the initial stabilization. We can always relax the constraints later.</p>",
        "id": 239492798,
        "sender_full_name": "Amanieu",
        "timestamp": 1621457018
    }
]