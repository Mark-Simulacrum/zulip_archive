[
    {
        "content": "<p>Hi, I recently read a thread in rustlang forum about \"Should we ever stabilize inline assembly?\" and some of the related threads. One motivation for stabilizing it that didn't appear in the discussion is that it can greatly help in successfully implementing constant-time code, which can be really important for cryptography: for example, see these links: <a href=\"https://software.intel.com/security-software-guidance/insights/guidelines-mitigating-timing-side-channels-against-cryptographic-implementations\" title=\"https://software.intel.com/security-software-guidance/insights/guidelines-mitigating-timing-side-channels-against-cryptographic-implementations\">https://software.intel.com/security-software-guidance/insights/guidelines-mitigating-timing-side-channels-against-cryptographic-implementations</a> , <a href=\"https://www.chosenplaintext.ca/open-source/rust-timing-shield/security\" title=\"https://www.chosenplaintext.ca/open-source/rust-timing-shield/security\">https://www.chosenplaintext.ca/open-source/rust-timing-shield/security</a> , <a href=\"https://github.com/dalek-cryptography/subtle/blob/master/src/lib.rs#L144\" title=\"https://github.com/dalek-cryptography/subtle/blob/master/src/lib.rs#L144\">https://github.com/dalek-cryptography/subtle/blob/master/src/lib.rs#L144</a> . One question I would have for cranelift folks is, if I don't have inline asm, is there any way that I can be sure I will get \"CMOV\" as opposed to a branch at some critical place in my program? Or would they want me to simply use out-of-line assembly .S files? Thanks for all your hard work on this feature and I hope your proposal is successful</p>",
        "id": 197095728,
        "sender_full_name": "Chris Beck",
        "timestamp": 1589167528
    },
    {
        "content": "<p>I don't think cranelift will ever support inline assembly, but in the future rustc may be able to automatically translate inline assembly into calls to external assembler files. This was taken into account for the design of the <code>asm!</code> RFC.</p>",
        "id": 197109496,
        "sender_full_name": "Amanieu",
        "timestamp": 1589182432
    },
    {
        "content": "<p>Currently the only places where Cranelift turns a non-branching instruction into a branching one are some float instructions and <code>select</code> I think. Cranelift has support for <code>cmov</code>, but it only emits it for <code>ifselect</code> with 32bit or 64bit ints. At the moment it is missing an optimization to go from <code>icmp</code> + <code>select</code> to <code>ifcmp</code> + <code>ifselect</code>, which means that <code>cmov</code> isn't actually used by cg_clif (a Cranelift backend for rustc of mine).</p>",
        "id": 197119044,
        "sender_full_name": "bjorn3",
        "timestamp": 1589188583
    },
    {
        "content": "<p>thank you!</p>",
        "id": 197230020,
        "sender_full_name": "Chris Beck",
        "timestamp": 1589252879
    },
    {
        "content": "<p>I'm excited to use the new <code>asm!</code> macro on Cortex-M4/M33 targets. It seems like the instruction <code>UMAAL</code> is exposed on <code>thumbv7em</code> but not <code>thumb8.main</code>. Should I learn about targets?</p>",
        "id": 200228881,
        "sender_full_name": "nickray",
        "timestamp": 1591710257
    },
    {
        "content": "<p>I believe you need to enable the <code>dsp</code> target feature for that. You can do this from within the assembler with the <code>.arch_extension</code> directive: <a href=\"https://sourceware.org/binutils/docs/as/ARM-Directives.html#ARM-Directives\">https://sourceware.org/binutils/docs/as/ARM-Directives.html#ARM-Directives</a></p>",
        "id": 200233323,
        "sender_full_name": "Amanieu",
        "timestamp": 1591711899
    },
    {
        "content": "<p>Thanks for the hint with the directives! It seems like <code>dsp</code>/<code>+dsp</code> are unknown for arch <code>armv8-m.main</code>, but using <code>armv7e-m</code> is a pragmatic solution that works for my purposes (no playing with rustflags/target-features in .cargo/config).</p>",
        "id": 200491409,
        "sender_full_name": "nickray",
        "timestamp": 1591831968
    },
    {
        "content": "<p><code>dsp</code> should be the correct feature name...</p>",
        "id": 200494464,
        "sender_full_name": "Amanieu",
        "timestamp": 1591834668
    },
    {
        "content": "<p>Ah nevermind, the LLVM asm parser doesn't support that feature.</p>",
        "id": 200494544,
        "sender_full_name": "Amanieu",
        "timestamp": 1591834740
    },
    {
        "content": "<p>You can also try <code>.cpu cortex-mXXX</code></p>",
        "id": 200494554,
        "sender_full_name": "Amanieu",
        "timestamp": 1591834763
    }
]