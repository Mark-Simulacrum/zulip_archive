[
    {
        "content": "<blockquote>\n<p>Some registers are explicitly not supported for use with inline assembly:<br>\nx86   k0  This is a constant zero register which can't be modified.</p>\n</blockquote>\n<p>Why can't the zero registers be <em>read</em> from?</p>",
        "id": 185416601,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1578799813
    },
    {
        "content": "<p>It doesn't make sense to use a zero register as an input or output.</p>",
        "id": 185425326,
        "sender_full_name": "Amanieu",
        "timestamp": 1578818303
    },
    {
        "content": "<p>You are of course free to use the zero register inside your asm code.</p>",
        "id": 185425329,
        "sender_full_name": "Amanieu",
        "timestamp": 1578818321
    },
    {
        "content": "<p>So should that RFC text be clarified to state something more precise than \"Some registers are explicitly not supported <strong>for use with inline assembly</strong>\"?</p>",
        "id": 185445254,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1578854961
    },
    {
        "content": "<p>As you say that we are \"free to use the zero register\".</p>",
        "id": 185445266,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1578854986
    },
    {
        "content": "<p>OK I will clarify the text.</p>",
        "id": 185446583,
        "sender_full_name": "Amanieu",
        "timestamp": 1578857098
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> they can be used in inline assembly</p>",
        "id": 185447120,
        "sender_full_name": "gnzlbg",
        "timestamp": 1578857993
    },
    {
        "content": "<p>but the content of those registers is always zero</p>",
        "id": 185447121,
        "sender_full_name": "gnzlbg",
        "timestamp": 1578857999
    },
    {
        "content": "<p>so setting such registers as inputs in an <code>asm!(\"...\", in k0(foo))</code> expression is pointless, since <code>foo</code> won't be written to the <code>k0</code> register</p>",
        "id": 185447164,
        "sender_full_name": "gnzlbg",
        "timestamp": 1578858024
    },
    {
        "content": "<p>the same applies to using them as outputs, such the content of the register after an inline assembly expression gets written to a Rust variable, since that just means that the variable will always be zeroed</p>",
        "id": 185447252,
        "sender_full_name": "gnzlbg",
        "timestamp": 1578858119
    },
    {
        "content": "<p>Yes, that’s why I’m pointing this out. The text of the RFC says that those registers <strong>may not be used</strong> and now multiple people are trying to correct me and say they can be used. I think <span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> understands the issue and is already going to clarify the mistake in the RFC.</p>",
        "id": 185447390,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1578858314
    },
    {
        "content": "<p>The text does not say that they may not be used as input or output arguments, just that they may not be used at all.</p>",
        "id": 185447437,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1578858380
    },
    {
        "content": "<p>Ah gotcha, yes, the text should be specific about using them in input and output arguments</p>",
        "id": 185447726,
        "sender_full_name": "gnzlbg",
        "timestamp": 1578858955
    },
    {
        "content": "<p>This is why I started this topic with the direct quote.</p>",
        "id": 185447793,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1578859023
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> I was confused by your proposed wording:</p>\n<blockquote>\n<p>\"Some registers are explicitly not supported for use with inline assembly\"?</p>\n</blockquote>",
        "id": 185447849,
        "sender_full_name": "gnzlbg",
        "timestamp": 1578859087
    },
    {
        "content": "<p>But your last suggestion makes sense (e.g. \"Some registers are explicitly not supported for use as input or output arguments\" or something like that)</p>",
        "id": 185447865,
        "sender_full_name": "gnzlbg",
        "timestamp": 1578859130
    },
    {
        "content": "<p>Like, in RISC-V, if you want to implement a register to register copy (like an <code>x86</code> <code>mov</code>) the simplest way would be something like and <code>add</code> of the source register with <code>r0</code> (which is always zero) to the destination. So it is critically important that these \"always zero\" registers can be used within inline assembly.</p>",
        "id": 185447965,
        "sender_full_name": "gnzlbg",
        "timestamp": 1578859256
    },
    {
        "content": "<p>I have not proposed any alternate wording. The part you cite as confusing is <strong>from the RFC</strong></p>",
        "id": 185448067,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1578859413
    },
    {
        "content": "<p>Again, quoted at the beginning of the topic and then later with more bolding.</p>",
        "id": 185448115,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1578859474
    },
    {
        "content": "<p>I misread your second quote</p>",
        "id": 185448131,
        "sender_full_name": "gnzlbg",
        "timestamp": 1578859510
    },
    {
        "content": "<p>I thought the bolding was a proposed change</p>",
        "id": 185448135,
        "sender_full_name": "gnzlbg",
        "timestamp": 1578859521
    },
    {
        "content": "<p>The good thing here is that it seems we all agree the original phrasing was suboptimal.</p>",
        "id": 185448315,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1578859872
    },
    {
        "content": "<blockquote>\n<p>so setting such registers as inputs in an <code>asm!(\"...\", in k0(foo))</code> expression is pointless, since <code>foo</code> won't be written to the <code>k0</code> register</p>\n</blockquote>\n<p>I feel like I remember a few idioms in riscv that write to the 0 register and that make sense. Or maybe it was some other arch</p>",
        "id": 185451679,
        "sender_full_name": "nagisa",
        "timestamp": 1578866013
    },
    {
        "content": "<p>IIRC it was instructions that may write to multiple outputs and when you specify one of the outputs to be 0, you get some simplified instruction (same encoding)</p>",
        "id": 185451729,
        "sender_full_name": "nagisa",
        "timestamp": 1578866056
    },
    {
        "content": "<p>It seems like in that case, you still wouldn't use it as an <em>input</em> register. As best I can tell from your description, that would mean that you've already done the operation with multiple outputs outside the <code>asm!</code> block, then are trying to move one of the outputs into the zero register and call some more assembly.</p>\n<p>As mentioned above, you should be able to use the zero registers <em>inside</em> the <code>asm!</code> block, so you could write <code>multioutput_op input1, input2, output1, $zero_reg;</code></p>",
        "id": 185524209,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1578941723
    },
    {
        "content": "<p>yeah, just using <code>x0</code> directly in assembly makes more sense.</p>",
        "id": 185604212,
        "sender_full_name": "nagisa",
        "timestamp": 1579014353
    },
    {
        "content": "<p>I remember also that <code>ld IMM</code> is really encoded as <code>add x0, IMM</code> IIRC. But again, just use <code>x0</code> directly</p>",
        "id": 185604322,
        "sender_full_name": "nagisa",
        "timestamp": 1579014419
    },
    {
        "content": "<p>LLVM could pass in <code>x0</code> regardless for your \"reg\" constraint for <code>in</code> variable if it knows variable is <code>0</code> too, but that’s transparent… or could it… nah, because you can modify the registers…</p>",
        "id": 185604385,
        "sender_full_name": "nagisa",
        "timestamp": 1579014474
    },
    {
        "content": "<p>GCC uses a separate constraint code for the zero register, which allows you to specify \"zr\" as the constraint code. This means: select the zero register if you can (the input value is 0) otherwise use a normal register.</p>",
        "id": 185605762,
        "sender_full_name": "Amanieu",
        "timestamp": 1579015357
    },
    {
        "content": "<p>However LLVM doesn't support multiple constraints (it will always pick the most generic) so it will always select a normal register even if the input value is 0.</p>",
        "id": 185605810,
        "sender_full_name": "Amanieu",
        "timestamp": 1579015391
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> I think you might be referring to RISC-V's <code>jal</code> instruction with <code>x0</code> as the output register to discard the return address ?<br>\ncc <span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span> - they might now</p>",
        "id": 185697264,
        "sender_full_name": "gnzlbg",
        "timestamp": 1579095217
    },
    {
        "content": "<p>Disallowing zero registers in inputs/outputs seems to me to at least be the conservative choice. We can always allow that later if someone finds a good use for it, but  I can't think of any reason why using input/outputs with them would be better than just writing them in the text literal for the assembly</p>",
        "id": 185697464,
        "sender_full_name": "gnzlbg",
        "timestamp": 1579095376
    },
    {
        "content": "<p>For RISC-V it would be interesting to maybe specify whether the assembly literal supports pseudo-instructions like <code>j</code> or not - I don't see any reasons why not, all backends should support them anyways.</p>",
        "id": 185697566,
        "sender_full_name": "gnzlbg",
        "timestamp": 1579095476
    }
]