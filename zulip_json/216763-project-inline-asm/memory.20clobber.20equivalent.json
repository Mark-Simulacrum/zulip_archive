[
    {
        "content": "<p>i have some code using <code>llvm_asm!(\"\" : : : \"memory\" : \"volatile\")</code> as a sort of optimization barrier in some code (the case cannot feasibly be made to use black_box or similar), is there an equivalent with new inline asm?</p>\n<p>That is to say, I don't see a \"memory\" clobber-alike. What's my best alternative? someone suggested <code>compiler_fence(SeqCst)</code>, and it works for a few cases, but in general it seems not to be sufficient (unlike \"memory\" clobber, the compiler won't treat it as a read of unrelated writes, which is required for it to behave as e.g. a strong enouhg optimization barrier to prevent those writes from being removed)</p>\n<p>i guess it's fair to argue that this is deliberate/good because this functionality has nothing to do with assembly at all, but ... yeah.</p>",
        "id": 212665924,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602149472
    },
    {
        "content": "<p>did you try asm! options ? Like nomem or nostack ?</p>",
        "id": 212666190,
        "sender_full_name": "lzutao",
        "timestamp": 1602149617
    },
    {
        "content": "<blockquote>\n<p>That is to say, I don't see a \"memory\" clobber-alike.</p>\n</blockquote>\n<p>It is the default with the new asm syntax:</p>\n<p><a href=\"https://rust-lang.github.io/rfcs/2873-inline-asm.html?highlight=inline,assembly#options\">https://rust-lang.github.io/rfcs/2873-inline-asm.html?highlight=inline,assembly#options</a></p>\n<blockquote>\n<p><code>nomem</code> means that the asm code does not read or write to memory. By default the compiler will assume that inline assembly can read or write any memory address that is accessible to it (e.g. through a pointer passed as an operand, or a global).</p>\n</blockquote>",
        "id": 212666600,
        "sender_full_name": "bjorn3",
        "timestamp": 1602149835
    },
    {
        "content": "<blockquote>\n<p>By default the compiler will assume that inline assembly can read or write any memory address that is accessible to it</p>\n</blockquote>\n<p>yeah, that's different. </p>\n<p>LLVM's docs say:</p>\n<blockquote>\n<p>The one exception is that a clobber string of “~{memory}” indicates that the assembly writes to arbitrary undeclared memory locations – not only the memory pointed to by a declared indirect output.</p>\n</blockquote>\n<p>(in general \"memory\" clobber roughly means that it could potentially read and write to anything in ways inscrutable to the compiler)</p>",
        "id": 212666944,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602150054
    },
    {
        "content": "<p>The key point is \"arbitrary undeclared memory locations\" vs \"any memory address that is accessible to it\"</p>",
        "id": 212666994,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602150092
    },
    {
        "content": "<p>hm, actually maybe your right. my simple test case seems ot work for <code>unsafe { asm!(\"\") }</code>. that <em>seems</em> pretty surprising given that documentation (but maybe \"accessible to it\" is doing a lot of work there...)</p>",
        "id": 212667356,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602150314
    },
    {
        "content": "<p>the line elsewhere about:</p>\n<blockquote>\n<p>The set of memory locations that assembly code is allowed the read and write are the same as those allowed for an FFI function. </p>\n</blockquote>\n<p>also made me think it was intentional that it might be an intentional omission</p>",
        "id": 212667576,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602150480
    },
    {
        "content": "<p>i guess my worry is that i can't actually rely on this much, and given the way those things are worded it's compliant (for e.g. cranelift or whoever) to assume <code>asm!(\"\")</code> does not read or write to anything</p>",
        "id": 212667894,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602150700
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"209168\">Thom Chiovoloni</span> <a href=\"#narrow/stream/216763-project-inline-asm/topic/memory.20clobber.20equivalent/near/212666994\">said</a>:</p>\n<blockquote>\n<p>The key point is \"arbitrary undeclared memory locations\" vs \"any memory address that is accessible to it\"</p>\n</blockquote>\n<p>It is always UB to write arbitrary memory locations. The compiler may have stored things like the a return address there.</p>",
        "id": 212667977,
        "sender_full_name": "bjorn3",
        "timestamp": 1602150748
    },
    {
        "content": "<p>well, right — i'm not actually writing to them. but i am hoping to tell LLVM that it should treat all memory as clobbered.</p>",
        "id": 212668308,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602151007
    },
    {
        "content": "<p>ah, okay, i hadn't realized that <code>llvm_asm!</code>'s \"memory\" clobber wouldn't clobber a local variable on the stack in the current function which can't have escaped. hmm. that doesn't really matter for me, but i guess that might be what \"accessible to it\" means...</p>",
        "id": 212668477,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602151187
    },
    {
        "content": "<p>Well.. I mean if y'all are certain it's intended to be equivalent. It's surprising that the old one would define the set of clobbered values as </p>\n<blockquote>\n<p>arbitrary undeclared memory locations</p>\n</blockquote>\n<p>where as this asm explicitly says it's just</p>\n<blockquote>\n<p>through a pointer passed as an operand, or a global</p>\n</blockquote>",
        "id": 212669115,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602151616
    }
]