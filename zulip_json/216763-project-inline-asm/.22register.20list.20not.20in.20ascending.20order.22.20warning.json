[
    {
        "content": "<p>When using the following assembly:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">asm!</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"s\">\"ldr {dma3_base}, =0x040000D4\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"s\">\"stmia {dma3_base}!, {{ {s_addr}, {d_addr}, {count_config} }}\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"n\">dma3_base</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"p\">(</span><span class=\"n\">reg</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"n\">s_addr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"p\">(</span><span class=\"n\">reg</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">src</span><span class=\"p\">.</span><span class=\"n\">as_ptr</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"n\">d_addr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"p\">(</span><span class=\"n\">reg</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">dest</span><span class=\"p\">.</span><span class=\"n\">as_ptr</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"n\">count_config</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"p\">(</span><span class=\"n\">reg</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">count_config</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"n\">options</span><span class=\"p\">(</span><span class=\"n\">nostack</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">preserves_flags</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I get an error from... someone? I guess LLVM is feeding an error back to cargo?</p>\n<div class=\"codehilite\"><pre><span></span><code>D:\\dev\\gba-from-scratch&gt;cargo build\nwarning: register list not in ascending order\n   --&gt; d:\\dev\\gba-from-scratch\\src\\dma.rs:163:8\n    |\n163 |       &quot;stmia {dma3_base}!, {{ {s_addr}, {d_addr}, {count_config} }}&quot;,\n    |        ^\n    |\nnote: instantiated into assembly here\n   --&gt; &lt;inline asm&gt;:2:22\n    |\n2   | stmia r2!, { r0, r4, r1 }\n    |                      ^\n\nwarning: `gba-from-scratch` (bin &quot;main&quot;) generated 1 warning\n    Finished dev [optimized + debuginfo] target(s) in 0.07s\n</code></pre></div>\n<p>and basically, since I don't have any control at all over the register ordering, this should not be my problem.</p>\n<p>Either the warning should be suppressed automatically (since I didn't pick the ordering) or perhaps better the registers should be sorted automatically somewhere along the line.</p>",
        "id": 255970287,
        "sender_full_name": "Lokathor",
        "timestamp": 1633286243
    },
    {
        "content": "<p>The warning shouldn't be suppressed. It warns you that when storing it store the registers in ascending order, even if you didn't write it that way. <a href=\"https://stackoverflow.com/questions/47109767/push-and-pop-order-in-arm#47109995\">https://stackoverflow.com/questions/47109767/push-and-pop-order-in-arm#47109995</a></p>",
        "id": 255970830,
        "sender_full_name": "bjorn3",
        "timestamp": 1633286740
    },
    {
        "content": "<p>This is probably not what you intended.</p>",
        "id": 255970840,
        "sender_full_name": "bjorn3",
        "timestamp": 1633286754
    },
    {
        "content": "<p>As for LLVM picking registers such that they are in ascending order, there is no register constraint that does that I would expect. And LLVM will never look at the actual inline asm during register allocation.</p>",
        "id": 255970927,
        "sender_full_name": "bjorn3",
        "timestamp": 1633286829
    },
    {
        "content": "<p>I think you should explicitly pick some registers.</p>",
        "id": 255970936,
        "sender_full_name": "bjorn3",
        "timestamp": 1633286842
    },
    {
        "content": "<p>well if i must, but i still think that this should be handled automatically somehow by the system</p>",
        "id": 255978559,
        "sender_full_name": "Lokathor",
        "timestamp": 1633293986
    },
    {
        "content": "<p>call it a future extension</p>",
        "id": 255978563,
        "sender_full_name": "Lokathor",
        "timestamp": 1633293991
    },
    {
        "content": "<p>Though this bring up the fact that an explicit register selection can't have a substitution name, which seems poor</p>",
        "id": 255978712,
        "sender_full_name": "Lokathor",
        "timestamp": 1633294149
    },
    {
        "content": "<p>FWIW using specific registers here is not necessarily too terrible as long as you avoid the ones that are caller saved/not used for ABI purposes/etc.</p>",
        "id": 255979535,
        "sender_full_name": "nagisa",
        "timestamp": 1633294923
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>8000584:    0011        movs    r1, r2\n 8000586:   0002        movs    r2, r0\n 8000588:   0023        movs    r3, r4\n 800058a:   4806        ldr r0, [pc, #24]   ; (80005a4 &lt;gba_from_scratch::dma::dma3_copy_from_u32_slice+0x34&gt;)\n 800058c:   c00e        stmia   r0!, {r1, r2, r3}\n</code></pre></div>\n<p>LLVM is sure giving me a rough time here.</p>",
        "id": 255979767,
        "sender_full_name": "Lokathor",
        "timestamp": 1633295146
    },
    {
        "content": "<p>(or in case you're using arguments, specifying register names that are used for the arguments...)</p>",
        "id": 255980439,
        "sender_full_name": "nagisa",
        "timestamp": 1633295774
    },
    {
        "content": "<p>So the unchecked version of the function is basically this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[inline(never)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">dma3_u32_copy_from_to_unchecked</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">src</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">dest</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">count</span>: <span class=\"kt\">u16</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">CONFIG</span>: <span class=\"nc\">DmaConfig</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">DmaConfig</span>::<span class=\"n\">new</span><span class=\"p\">().</span><span class=\"n\">with_transfer_32bit</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">).</span><span class=\"n\">with_enabled</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">CONFIG_U32</span>: <span class=\"kt\">u32</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">CONFIG</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"c1\">//</span>\n<span class=\"w\">  </span><span class=\"fm\">asm!</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"s\">\"ldr {dma3_base}, =0x040000D4\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"s\">\"stmia {dma3_base}!, {{ r1, r2, r3 }}\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">dma3_base</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"p\">(</span><span class=\"n\">reg</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">in</span><span class=\"p\">(</span><span class=\"s\">\"r1\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">src</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">in</span><span class=\"p\">(</span><span class=\"s\">\"r2\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">dest</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">in</span><span class=\"p\">(</span><span class=\"s\">\"r3\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">count</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">CONFIG_U32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">options</span><span class=\"p\">(</span><span class=\"n\">nostack</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">preserves_flags</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>which generates assembly that looks like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>0800059c &lt;gba_from_scratch::dma::dma3_u32_copy_from_to_unchecked&gt;:\n 800059c:   b5d0        push    {r4, r6, r7, lr}\n 800059e:   af02        add r7, sp, #8\n 80005a0:   000c        movs    r4, r1\n 80005a2:   4906        ldr r1, [pc, #24]   ; (80005bc &lt;gba_from_scratch::dma::dma3_u32_copy_from_to_unchecked+0x20&gt;)\n 80005a4:   4011        ands    r1, r2\n 80005a6:   2221        movs    r2, #33 ; 0x21\n 80005a8:   0692        lsls    r2, r2, #26\n 80005aa:   188b        adds    r3, r1, r2\n 80005ac:   0001        movs    r1, r0\n 80005ae:   0022        movs    r2, r4\n 80005b0:   4803        ldr r0, [pc, #12]   ; (80005c0 &lt;gba_from_scratch::dma::dma3_u32_copy_from_to_unchecked+0x24&gt;)\n 80005b2:   c00e        stmia   r0!, {r1, r2, r3}\n 80005b4:   bcd0        pop {r4, r6, r7}\n 80005b6:   bc01        pop {r0}\n 80005b8:   4700        bx  r0\n 80005ba:   46c0        nop         ; (mov r8, r8)\n 80005bc:   0000ffff    .word   0x0000ffff\n 80005c0:   040000d4    .word   0x040000d4\n</code></pre></div>\n<p>and like... what... the heck... is happening here.</p>",
        "id": 255980833,
        "sender_full_name": "Lokathor",
        "timestamp": 1633296156
    },
    {
        "content": "<p>So the calling convention AFAICT is <code>r0</code> contains <code>src</code> and <code>r1</code> contains <code>dest</code> and <code>r2</code> contains <code>count</code>.</p>",
        "id": 255981051,
        "sender_full_name": "nagisa",
        "timestamp": 1633296369
    },
    {
        "content": "<p>and the assembly shifts everything by 1 register, does it look any better if you ask the registers to be r0-r2?</p>",
        "id": 255981097,
        "sender_full_name": "nagisa",
        "timestamp": 1633296459
    },
    {
        "content": "<p>okay fair enough, that helps significantly:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"fm\">asm!</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"s\">\"ldr {dma3_base}, =0x040000D4\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"s\">\"stmia {dma3_base}!, {{ r0, r1, r2 }}\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">dma3_base</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"p\">(</span><span class=\"n\">reg</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">in</span><span class=\"p\">(</span><span class=\"s\">\"r0\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">src</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">in</span><span class=\"p\">(</span><span class=\"s\">\"r1\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">dest</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">in</span><span class=\"p\">(</span><span class=\"s\">\"r2\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">count</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">CONFIG_U32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">options</span><span class=\"p\">(</span><span class=\"n\">nostack</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">preserves_flags</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>gives</p>\n<div class=\"codehilite\"><pre><span></span><code>0800059c &lt;gba_from_scratch::dma::dma3_u32_copy_from_to_unchecked&gt;:\n 800059c:   4b03        ldr r3, [pc, #12]   ; (80005ac &lt;gba_from_scratch::dma::dma3_u32_copy_from_to_unchecked+0x10&gt;)\n 800059e:   4013        ands    r3, r2\n 80005a0:   2221        movs    r2, #33 ; 0x21\n 80005a2:   0692        lsls    r2, r2, #26\n 80005a4:   189a        adds    r2, r3, r2\n 80005a6:   4b02        ldr r3, [pc, #8]    ; (80005b0 &lt;gba_from_scratch::dma::dma3_u32_copy_from_to_unchecked+0x14&gt;)\n 80005a8:   c307        stmia   r3!, {r0, r1, r2}\n 80005aa:   4770        bx  lr\n 80005ac:   0000ffff    .word   0x0000ffff\n 80005b0:   040000d4    .word   0x040000d4\n</code></pre></div>\n<p>so at least we're not doing a whole push-pop dance</p>",
        "id": 255981145,
        "sender_full_name": "Lokathor",
        "timestamp": 1633296491
    },
    {
        "content": "<p>Right, now everything that's here is doing the <code>| CONFIG_U32</code> thing, executing your asm and returning.</p>",
        "id": 255981192,
        "sender_full_name": "nagisa",
        "timestamp": 1633296568
    },
    {
        "content": "<p>i think i can fix that too probably... one moment</p>",
        "id": 255981283,
        "sender_full_name": "Lokathor",
        "timestamp": 1633296634
    },
    {
        "content": "<p>you could replace <code>const</code> with <code>static</code> perhaps for the <code>CONFIG_U32</code></p>",
        "id": 255981296,
        "sender_full_name": "nagisa",
        "timestamp": 1633296654
    },
    {
        "content": "<p>so one way is to give up on <code>preserves_flags</code></p>",
        "id": 255981731,
        "sender_full_name": "Lokathor",
        "timestamp": 1633297116
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"fm\">asm!</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"s\">\"ldr {scratch}, ={config_pattern}\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"s\">\"orrs r2, {scratch}\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"s\">\"ldr {scratch}, =0x040000D4\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"s\">\"stmia {scratch}!, {{ r0, r1, r2 }}\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">config_pattern</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">CONFIG_U32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">scratch</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"p\">(</span><span class=\"n\">reg</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">in</span><span class=\"p\">(</span><span class=\"s\">\"r0\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">src</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">in</span><span class=\"p\">(</span><span class=\"s\">\"r1\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">dest</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">inout</span><span class=\"p\">(</span><span class=\"s\">\"r2\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">count</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">options</span><span class=\"p\">(</span><span class=\"n\">nostack</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>gives</p>\n<div class=\"codehilite\"><pre><span></span><code>0800059c &lt;gba_from_scratch::dma::dma3_u32_copy_from_to_unchecked&gt;:\n 800059c:   4b02        ldr r3, [pc, #8]    ; (80005a8 &lt;gba_from_scratch::dma::dma3_u32_copy_from_to_unchecked+0xc&gt;)\n 800059e:   431a        orrs    r2, r3\n 80005a0:   4b02        ldr r3, [pc, #8]    ; (80005ac &lt;gba_from_scratch::dma::dma3_u32_copy_from_to_unchecked+0x10&gt;)\n 80005a2:   c307        stmia   r3!, {r0, r1, r2}\n 80005a4:   4770        bx  lr\n 80005a6:   46c0        nop         ; (mov r8, r8)\n 80005a8:   84000000    .word   0x84000000\n 80005ac:   040000d4    .word   0x040000d4\n</code></pre></div>",
        "id": 255981765,
        "sender_full_name": "Lokathor",
        "timestamp": 1633297156
    }
]