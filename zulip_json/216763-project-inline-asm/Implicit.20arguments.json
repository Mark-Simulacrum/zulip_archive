[
    {
        "content": "<p>Format strings have a rule that positional arguments (<code>{3}</code>) must appear before named arguments (<code>{foo}</code>) in the argument list of the macro.</p>",
        "id": 187941214,
        "sender_full_name": "Amanieu",
        "timestamp": 1581446865
    },
    {
        "content": "<p>However in asm it is quite common to have operands that are in a fixed register (e.g. eax) and don't actually appear in the asm string itself. This can happen when performing a syscall or a function call.</p>",
        "id": 187941346,
        "sender_full_name": "Amanieu",
        "timestamp": 1581446954
    },
    {
        "content": "<p>How should we represent these arguments?</p>",
        "id": 187941358,
        "sender_full_name": "Amanieu",
        "timestamp": 1581446963
    },
    {
        "content": "<p>Option 1: require implicit argument to be named <code>_</code>: <code>asm!(\"foo\", _ = in(\"eax\") bar)</code></p>",
        "id": 187941463,
        "sender_full_name": "Amanieu",
        "timestamp": 1581447023
    },
    {
        "content": "<p>Option 2: allow positional arguments to not appear in the template string. We still issue a warning if this is done with a register class rather than a fixed register.</p>",
        "id": 187941687,
        "sender_full_name": "Amanieu",
        "timestamp": 1581447171
    },
    {
        "content": "<p>I think implicit inputs should simply disallow positional arguments.</p>",
        "id": 187942610,
        "sender_full_name": "Lokathor",
        "timestamp": 1581447808
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> I don't understand, can you explain what you mean by that?</p>",
        "id": 187943490,
        "sender_full_name": "Amanieu",
        "timestamp": 1581448430
    },
    {
        "content": "<p>If there are any implicit arguments, all other arguments must be named arguments only.</p>",
        "id": 187943765,
        "sender_full_name": "Lokathor",
        "timestamp": 1581448623
    },
    {
        "content": "<p>But there's nothing explicitly identifying an implicit argument, they look just like a positional argument.</p>",
        "id": 187944360,
        "sender_full_name": "Amanieu",
        "timestamp": 1581448930
    },
    {
        "content": "<p>(i.e. there's no <code>name = </code> in front of it)</p>",
        "id": 187944383,
        "sender_full_name": "Amanieu",
        "timestamp": 1581448948
    },
    {
        "content": "<p>I see what you mean now.</p>",
        "id": 187949001,
        "sender_full_name": "Lokathor",
        "timestamp": 1581451485
    },
    {
        "content": "<p>Option 1 seems best then</p>",
        "id": 187949142,
        "sender_full_name": "Lokathor",
        "timestamp": 1581451562
    },
    {
        "content": "<p>I think it'd be acceptable to allow positional arguments that are explicit registers to not appear in the format string, as long as they're the only positional arguments. Mixing implicit arguments with explicit arguments where both are positional seems problematic and error-prone.</p>",
        "id": 188124820,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1581612290
    },
    {
        "content": "<p>In the end I just decided to require all implicit arguments to start with <code>_ = </code></p>",
        "id": 188126449,
        "sender_full_name": "Amanieu",
        "timestamp": 1581613251
    },
    {
        "content": "<p>It makes the implementation simpler too.</p>",
        "id": 188126475,
        "sender_full_name": "Amanieu",
        "timestamp": 1581613266
    },
    {
        "content": "<p>That's certainly simpler in implementation, and we can always relax that restriction later.</p>",
        "id": 188143958,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1581623725
    },
    {
        "content": "<p>I do suspect it might prove slightly onerous, or perhaps just hard to explain.</p>",
        "id": 188144001,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1581623741
    },
    {
        "content": "<p>Actually I've just had an even better idea: we could simply ban any operands with explicit registers from appearing in the template string. So you would have to explicitly write <code>eax</code> in your asm code instead of using placeholders.</p>",
        "id": 188300428,
        "sender_full_name": "Amanieu",
        "timestamp": 1581804026
    },
    {
        "content": "<p>This leaves only register class operands, which are pretty useless if not used in the template string so we can enforce that.</p>",
        "id": 188300450,
        "sender_full_name": "Amanieu",
        "timestamp": 1581804084
    },
    {
        "content": "<p>For niche cases like <code>black_box</code>, you can just put the <code>{}</code> in a comment:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">black_box</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">val</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">asm</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;# {}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"p\">(</span><span class=\"n\">reg</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">val</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">val</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 188300836,
        "sender_full_name": "Amanieu",
        "timestamp": 1581804668
    },
    {
        "content": "<p>That feels unfortunate. I would rather not repeat a register name.</p>",
        "id": 188309654,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1581821887
    },
    {
        "content": "<p>99% of the time if you use an explicit register you're not going to use it in the template string anyways.</p>",
        "id": 188317273,
        "sender_full_name": "Amanieu",
        "timestamp": 1581840132
    },
    {
        "content": "<p>And even if you do, it's 3 (<code>eax</code>) characters instead of 2 (<code>{}</code>)</p>",
        "id": 188317289,
        "sender_full_name": "Amanieu",
        "timestamp": 1581840158
    },
    {
        "content": "<p>It's not that it's longer.</p>",
        "id": 188334314,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1581877712
    },
    {
        "content": "<p>It's that you have to repeat yourself, rather than naming the register only once.</p>",
        "id": 188334325,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1581877730
    },
    {
        "content": "<p>I wouldn't have a problem with prohibiting positional references to explicit registers.</p>",
        "id": 188334870,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1581878728
    },
    {
        "content": "<p>But I'd like named references.</p>",
        "id": 188334874,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1581878739
    }
]