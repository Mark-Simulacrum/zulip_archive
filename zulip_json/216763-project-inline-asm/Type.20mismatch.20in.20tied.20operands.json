[
    {
        "content": "<p>It seems that LLVM's register allocator can't handle tied operands where the input and output types differ.</p>",
        "id": 189228368,
        "sender_full_name": "Amanieu",
        "timestamp": 1582820259
    },
    {
        "content": "<p>Clang hides this a bit by adding zero-extensions when both types are integers or pointers.</p>",
        "id": 189228477,
        "sender_full_name": "Amanieu",
        "timestamp": 1582820326
    },
    {
        "content": "<p>But for all other type combinations, it produces an error.</p>",
        "id": 189228496,
        "sender_full_name": "Amanieu",
        "timestamp": 1582820339
    },
    {
        "content": "<p>This is purely an LLVM limitation, GCC handles different types just fine.</p>",
        "id": 189228639,
        "sender_full_name": "Amanieu",
        "timestamp": 1582820427
    },
    {
        "content": "<p>And so would our theoretical external assembler fallback.</p>",
        "id": 189228657,
        "sender_full_name": "Amanieu",
        "timestamp": 1582820446
    },
    {
        "content": "<p>The question is: do we want to provide the same implicit conversion for integers that Clang does?</p>",
        "id": 189228687,
        "sender_full_name": "Amanieu",
        "timestamp": 1582820477
    },
    {
        "content": "<p>I'm tending towards no, since unlike Clang we don't have to emulate GCC's behavior. We can just force users to provide the casts where needed.</p>",
        "id": 189228842,
        "sender_full_name": "Amanieu",
        "timestamp": 1582820581
    },
    {
        "content": "<p>Yeah, that seems acceptable. It would be confusing even if it worked.</p>",
        "id": 189272971,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1582850151
    }
]