[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> Are you aware of any outstanding unaddressed issues in the RFC? Either things that need adding to the text, or alternatives/concerns/etc that haven't been documented in the appropriate alternatives/etc sections?</p>",
        "id": 197808722,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589654294
    },
    {
        "content": "<p>Or have all open discussions on the RFC been addressed to the best of your knowledge?</p>",
        "id": 197808730,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589654310
    },
    {
        "content": "<p>I'm asking because I'm thinking of proposing FCP soon.</p>",
        "id": 197808744,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589654321
    },
    {
        "content": "<p>Not that I know of. I've tried to add every objection to the RFC text.</p>",
        "id": 197808747,
        "sender_full_name": "Amanieu",
        "timestamp": 1589654324
    },
    {
        "content": "<p>I've seen, and I really appreciate your thoroughness.</p>",
        "id": 197808749,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589654337
    },
    {
        "content": "<p>The only one that's still unresolved is whether we want to namespace the asm! macro</p>",
        "id": 197808756,
        "sender_full_name": "Amanieu",
        "timestamp": 1589654347
    },
    {
        "content": "<p>I'm fine leaving that one an unresolved question for now. I personally would find it quite inconvenient if we did, to the point that I suspect there will quickly arise a standard crate re-exporting it as a common name.</p>",
        "id": 197808765,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589654395
    },
    {
        "content": "<p>We could even do that ourselves in the standard library: provide <code>std::arch::x86_64::asm!</code> and <code>std::arch::x86::asm!</code> and similar, but re-export the one for the current target architecture under a common name.</p>",
        "id": 197808822,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589654484
    },
    {
        "content": "<p>That would defeat the point</p>",
        "id": 197808833,
        "sender_full_name": "Amanieu",
        "timestamp": 1589654514
    },
    {
        "content": "<p>Not necessarily. I could see value in being able to unambiguously reference one of the architecture-specific macros, perhaps.</p>",
        "id": 197808883,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589654566
    },
    {
        "content": "<p>But in any case, if the standard library doesn't provide it under a common name, a crate will. Nobody wants to write a giant tower of <code>#[cfg(...)] use std::arch::...::asm;</code> at the top of their code.</p>",
        "id": 197808895,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589654620
    },
    {
        "content": "<p>Nonetheless, this isn't a question that needs resolving in the RFC. For now, your implementation provides it under a single name, and we can experiment with that in nightly, and if someone has a compelling argument for namespacing it they can make that argument based on real-world experience with nightly.</p>",
        "id": 197808972,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589654717
    },
    {
        "content": "<p>Fair enough</p>",
        "id": 197809028,
        "sender_full_name": "Amanieu",
        "timestamp": 1589654775
    },
    {
        "content": "<p>Also, same question for the PR: as far as you know, is the implementation of the new <code>asm!</code> completely done in terms of the specified behavior from the RFC, or are there any outstanding issues you still want to address?</p>",
        "id": 197809133,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589654928
    },
    {
        "content": "<p>(speaking of which, I'll start a new topic for the LLVM version/feature detection issue.)</p>",
        "id": 197809138,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589654945
    },
    {
        "content": "<p>All of the RFC is implemented, except the fallback to an external assembler for cranelift.</p>",
        "id": 197809204,
        "sender_full_name": "Amanieu",
        "timestamp": 1589655038
    },
    {
        "content": "<p>It seems reasonable to do that in a separate PR.</p>",
        "id": 197809277,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589655168
    },
    {
        "content": "<p>(Is the cranelift backend fully buildable from rust-lang/rust at this point, or does it still require an external tree?)</p>",
        "id": 197809284,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589655184
    },
    {
        "content": "<p>It's still external at this point.</p>",
        "id": 197809351,
        "sender_full_name": "Amanieu",
        "timestamp": 1589655291
    },
    {
        "content": "<p>Then in that case, that change <em>definitely</em> belongs in a follow-up PR.</p>",
        "id": 197809368,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589655330
    },
    {
        "content": "<p>I got a WIP branch that integrates it into the rust build system. I am mostly waiting for how <code>git subtree</code> will work out before submitting a PR.</p>",
        "id": 197809409,
        "sender_full_name": "bjorn3",
        "timestamp": 1589655363
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> On that note you might want follow up about that, I remember the Clippy team recently ran into issues with using <code>git subtree</code> but I donâ€™t remember the outcome</p>",
        "id": 197830890,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1589691700
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219696\">@XAMPPRocky</span> I have seen the discussion. I can't remember the outcome either though.</p>",
        "id": 197839732,
        "sender_full_name": "bjorn3",
        "timestamp": 1589707735
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"124288\">@oli</span></p>",
        "id": 197839743,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1589707773
    },
    {
        "content": "<p>we're waiting on upstream git to merge the subtree patch. It has been finished according to the author and submitted: <a href=\"https://github.com/gitgitgadget/git/pull/493#issuecomment-626484834\">https://github.com/gitgitgadget/git/pull/493#issuecomment-626484834</a></p>",
        "id": 197964072,
        "sender_full_name": "oli",
        "timestamp": 1589821024
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> Thank you for getting the dialect preservation patch into upstream LLVM!</p>",
        "id": 197968065,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589822822
    }
]