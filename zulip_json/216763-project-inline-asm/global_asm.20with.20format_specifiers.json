[
    {
        "content": "<p>Wouldn't it be cool if global_asm!() had the option to pass symbols/consts into it, like we can with inline_asm!?</p>",
        "id": 224494126,
        "sender_full_name": "joey",
        "timestamp": 1611936677
    },
    {
        "content": "<p>I'd love to do that but I just haven't had the time to implement it.</p>",
        "id": 224494213,
        "sender_full_name": "Amanieu",
        "timestamp": 1611936713
    },
    {
        "content": "<p>Do you want to have a go at it?</p>",
        "id": 224494229,
        "sender_full_name": "Amanieu",
        "timestamp": 1611936719
    },
    {
        "content": "<p>There's a few issues with implementing it myself. I could at least start by making an issues, if there isn't one.</p>",
        "id": 224494634,
        "sender_full_name": "joey",
        "timestamp": 1611936856
    },
    {
        "content": "<p>Sure, go ahead.</p>",
        "id": 224494669,
        "sender_full_name": "Amanieu",
        "timestamp": 1611936874
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> how big of an task do you think it would be? I assume a lot of the code could be shared by inline_asm handling</p>",
        "id": 224494869,
        "sender_full_name": "joey",
        "timestamp": 1611936959
    },
    {
        "content": "<p>I can maybe offer a small (tiny) bounty. it is for my personal/hobby code, but it would be really nice to have</p>",
        "id": 224497391,
        "sender_full_name": "joey",
        "timestamp": 1611937876
    },
    {
        "content": "<p>It shouldn't be too difficult. The hard part is figuring out how to flow the global_asm along with the constants and symbols through the various stages of rustc (AST, HIR, MIR, etc).</p>",
        "id": 224497759,
        "sender_full_name": "Amanieu",
        "timestamp": 1611937997
    },
    {
        "content": "<p>I'd say maybe a few days to a week if you work on it full time.</p>",
        "id": 224497851,
        "sender_full_name": "Amanieu",
        "timestamp": 1611938036
    },
    {
        "content": "<p>But then again I am bad at estimating these things.</p>",
        "id": 224497944,
        "sender_full_name": "Amanieu",
        "timestamp": 1611938057
    },
    {
        "content": "<p>Well, I hope someone can look at it eventually!</p>",
        "id": 224498998,
        "sender_full_name": "joey",
        "timestamp": 1611938421
    },
    {
        "content": "<p>I'm not sure how much a bounty would help, there's been a bounty up for a while for PowerPC support for <code>asm!</code> but nobody's taken it up.</p>",
        "id": 224499134,
        "sender_full_name": "Amanieu",
        "timestamp": 1611938493
    },
    {
        "content": "<p>Probably not, but worth trying :-)</p>",
        "id": 224499351,
        "sender_full_name": "joey",
        "timestamp": 1611938583
    },
    {
        "content": "<p>It seems like this isn't implementable with current LLVM. the module asm feature doesn't seem to support substitutions like inline asm does :/</p>",
        "id": 224650848,
        "sender_full_name": "joey",
        "timestamp": 1612108289
    },
    {
        "content": "<p>You need to substitute the symbol name in rustc, before passing the assembly string to LLVM.</p>",
        "id": 224650903,
        "sender_full_name": "Amanieu",
        "timestamp": 1612108348
    },
    {
        "content": "<p>yeah, so it would need extra work there compared to inline asm</p>",
        "id": 224650917,
        "sender_full_name": "joey",
        "timestamp": 1612108394
    },
    {
        "content": "<p>inline asm already does this to some extent.</p>",
        "id": 224650921,
        "sender_full_name": "Amanieu",
        "timestamp": 1612108407
    },
    {
        "content": "<p>oh, I just looked at a random line of inline asm I had, and noticed it wasnt doing it</p>",
        "id": 224650929,
        "sender_full_name": "joey",
        "timestamp": 1612108433
    },
    {
        "content": "<p><code>const</code> operands are substituted into the asm string before being passed to LLVM.</p>",
        "id": 224650930,
        "sender_full_name": "Amanieu",
        "timestamp": 1612108435
    },
    {
        "content": "<p>ah, im not using const currently</p>",
        "id": 224650985,
        "sender_full_name": "joey",
        "timestamp": 1612108490
    },
    {
        "content": "<p>Have a look at compiler/rustc_codegen_llvm/src/asm.rs.</p>",
        "id": 224651001,
        "sender_full_name": "Amanieu",
        "timestamp": 1612108537
    },
    {
        "content": "<p>Ah <a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_llvm/src/asm.rs#L234\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_llvm/src/asm.rs#L234</a></p>",
        "id": 224651090,
        "sender_full_name": "joey",
        "timestamp": 1612108676
    },
    {
        "content": "<p>global_asm looks so bare in contrast <a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_llvm/src/asm.rs#L332\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_llvm/src/asm.rs#L332</a></p>",
        "id": 224651177,
        "sender_full_name": "joey",
        "timestamp": 1612108775
    },
    {
        "content": "<p>So it would need to generate a template, like inlineasm does. hard to say how much code can be shared, since I guess only <code>sym</code> and <code>const</code> make sense for global_asm</p>",
        "id": 224652051,
        "sender_full_name": "joey",
        "timestamp": 1612109400
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> do you think this just \"works\" accidentally? <a href=\"https://godbolt.org/z/r8nvxb\">https://godbolt.org/z/r8nvxb</a></p>",
        "id": 225426992,
        "sender_full_name": "joey",
        "timestamp": 1612640469
    },
    {
        "content": "<p>I know some code in the Linux kernel relies on this, so clang had to support it.</p>",
        "id": 225427741,
        "sender_full_name": "Amanieu",
        "timestamp": 1612641657
    },
    {
        "content": "<p>However this shouldn't be something that we guarantee since we want to be able to assemble each global_asm individually using an external assembler.</p>",
        "id": 225427817,
        "sender_full_name": "Amanieu",
        "timestamp": 1612641746
    },
    {
        "content": "<p>I see, since I probably won't use cranelift, maybe I will just use it, especially if Linux with clang uses it</p>",
        "id": 225427928,
        "sender_full_name": "joey",
        "timestamp": 1612641850
    },
    {
        "content": "<p>i can only find MIPs doing that in the kernel, didn't know that built with clang, thought it was just x86/arm</p>",
        "id": 225428078,
        "sender_full_name": "joey",
        "timestamp": 1612642117
    },
    {
        "content": "<p>does that actually work even within the single file? I suspect rust is free to split that file up into multiple codegen units and make the global assembly item appear in a different unit than the function that uses the macro from it.</p>",
        "id": 225428148,
        "sender_full_name": "nagisa",
        "timestamp": 1612642211
    },
    {
        "content": "<p>^ that is exactly what I wanted to say :)</p>",
        "id": 225428150,
        "sender_full_name": "bjorn3",
        "timestamp": 1612642231
    },
    {
        "content": "<p>regardless, a great thing to note in the global_asm tracking issue.</p>",
        "id": 225428156,
        "sender_full_name": "nagisa",
        "timestamp": 1612642252
    },
    {
        "content": "<p>cg_clif probably supports it if it ends up in the same cgu. At least for as long as the mono item of <code>global_asm!</code> comes before that of the function in the same cgu.</p>",
        "id": 225428171,
        "sender_full_name": "bjorn3",
        "timestamp": 1612642288
    },
    {
        "content": "<p>cg_clif turns all <code>asm!</code> into a call to a generated assembly function. this is combined with all <code>global_asm!</code> in the same cgu and passed to an external assembler.</p>",
        "id": 225428233,
        "sender_full_name": "bjorn3",
        "timestamp": 1612642393
    },
    {
        "content": "<p>yeah, I was thinking about trying a high codegen-units to see if I could break it</p>",
        "id": 225428237,
        "sender_full_name": "joey",
        "timestamp": 1612642425
    },
    {
        "content": "<p>the alternative is duplicating the BAR constant into asm, and having runtime checks that they're the same :(</p>",
        "id": 225428357,
        "sender_full_name": "joey",
        "timestamp": 1612642595
    },
    {
        "content": "<p>Currently modules are never split into multiple cgus. This is not guaranteed. For example for cg_clif I would like an option to put every function in it's own cgu for better incrementality.</p>",
        "id": 225428358,
        "sender_full_name": "bjorn3",
        "timestamp": 1612642599
    },
    {
        "content": "<p>Why duplicating BAR? I thought we were talking about the macro.</p>",
        "id": 225428390,
        "sender_full_name": "bjorn3",
        "timestamp": 1612642670
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/81838\">https://github.com/rust-lang/rust/issues/81838</a></p>",
        "id": 225428443,
        "sender_full_name": "nagisa",
        "timestamp": 1612642738
    },
    {
        "content": "<p>well I mean, I need to use the macro, I dont want to duplicate that code, so I'd have to do everything inside global_asm, so BAR would be in rust and asm</p>",
        "id": 225428448,
        "sender_full_name": "joey",
        "timestamp": 1612642749
    },
    {
        "content": "<p>Ah, ok</p>",
        "id": 225428510,
        "sender_full_name": "bjorn3",
        "timestamp": 1612642830
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> I replied</p>",
        "id": 225428790,
        "sender_full_name": "joey",
        "timestamp": 1612643282
    },
    {
        "content": "<p>I think even <code>asm!</code> can leak macro definitions into other <code>asm!</code> blocks. But you have no control over how these are ordered in the final output, so it's not reliable.</p>",
        "id": 225429892,
        "sender_full_name": "Amanieu",
        "timestamp": 1612645103
    },
    {
        "content": "<p>I don't think this is something that we can really control.</p>",
        "id": 225429911,
        "sender_full_name": "Amanieu",
        "timestamp": 1612645149
    },
    {
        "content": "<p>Functions containing <code>asm!</code> could get a new cgu each in debug mode. That should at least make it clear that it isn't really supported.</p>",
        "id": 225429974,
        "sender_full_name": "bjorn3",
        "timestamp": 1612645247
    },
    {
        "content": "<p>My primary concern here is that this could block future improvements to the collector after asm!/global_asm! stabilizes.</p>",
        "id": 225430976,
        "sender_full_name": "nagisa",
        "timestamp": 1612646777
    },
    {
        "content": "<p>collector?</p>",
        "id": 225431306,
        "sender_full_name": "joey",
        "timestamp": 1612647363
    },
    {
        "content": "<p>Its the component of the compiler that divides a crate into smaller units of work to enable parallel codegen etc.</p>",
        "id": 225431367,
        "sender_full_name": "nagisa",
        "timestamp": 1612647478
    },
    {
        "content": "<p>Simplified, you could think of it as an automated version of the thing where developers split their C/C++ codebase into <code>.c</code> or <code>cpp</code> files and build a <code>.o</code> out of them in parallel before linking the <code>.o</code>s  together</p>",
        "id": 225431424,
        "sender_full_name": "nagisa",
        "timestamp": 1612647540
    },
    {
        "content": "<p>Ah!</p>",
        "id": 225431667,
        "sender_full_name": "joey",
        "timestamp": 1612647931
    }
]