[
    {
        "content": "<p>I am trying to add an exclusion for named labels in <code>#[naked]</code> functions and I can't think of a good way to do it.  The potential options that I can see are 1. somehow add an implicit <code>#[allow]</code> for the lint with every <code>#[naked]</code> 2. somehow access the containing function from the macro expansion and analyze its attributes, or 3. move to a lint implemented with <code>check_item</code> and walk through the AST to implement the lint.</p>\n<p>For 1. it feels ugly and I am not sure where to do it<br>\nFor 2. I am not sure if that information is available or how to get it<br>\nFor 3. The data will be the asm template <strong>after</strong> it's expanded, and the spans and template are wrong and I don't think I can work with the span for the source correctly</p>\n<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span></p>",
        "id": 249781725,
        "sender_full_name": "asquared31415",
        "timestamp": 1629235896
    },
    {
        "content": "<p>Well I'd say 2 is right out, I'm not even sure it's possible.</p>",
        "id": 249791148,
        "sender_full_name": "Amanieu",
        "timestamp": 1629242331
    },
    {
        "content": "<p>Or maybe keep the strings in the AST and move the template expansion to ast lowering? That doesn't sound ideal either tho</p>",
        "id": 249792986,
        "sender_full_name": "Gary Guo",
        "timestamp": 1629244129
    },
    {
        "content": "<p>Yea I was afraid of that, 2 seemed like the nicest and cleanest :(</p>",
        "id": 249793032,
        "sender_full_name": "asquared31415",
        "timestamp": 1629244200
    },
    {
        "content": "<p>Or maybe even delay the template expansion until MIR build. The template doesn't seem to affect type check?</p>",
        "id": 249802107,
        "sender_full_name": "Gary Guo",
        "timestamp": 1629255111
    },
    {
        "content": "<p>Perhaps you could implement the lint as an AST pass and just add an element to the <code>InlineAsm</code> AST node which includes the spans that you need?</p>",
        "id": 249886886,
        "sender_full_name": "Amanieu",
        "timestamp": 1629309119
    },
    {
        "content": "<p>I need the spans of the template <em>pieces</em> but the parser only gives spans for lines as a whole or for arguments</p>",
        "id": 249913062,
        "sender_full_name": "asquared31415",
        "timestamp": 1629321441
    },
    {
        "content": "<p>Wait what am I talking about, no I don't, I just need the span as a whole and the original template string</p>",
        "id": 249913202,
        "sender_full_name": "asquared31415",
        "timestamp": 1629321494
    },
    {
        "content": "<p>I have it working using a <code>EarlyLintPass</code> lint that more or less was just a few changes to the <code>ast::InlineAsm</code> to pass the needed data to it</p>",
        "id": 250045440,
        "sender_full_name": "asquared31415",
        "timestamp": 1629405274
    },
    {
        "content": "<p>I think an ideal world would have the entire asm template expansion done later to avoid needing to pass around a sort of half-parsed state, and some of the other lints like the one for syntax directives could be made similar.  But for now I have the immediate issue fixed.</p>",
        "id": 250045567,
        "sender_full_name": "asquared31415",
        "timestamp": 1629405361
    },
    {
        "content": "<p>I think the lint doesn't account for nested items. A stack should fix this issue, but I am uncertain how it's done in other lints.</p>",
        "id": 250049399,
        "sender_full_name": "Gary Guo",
        "timestamp": 1629407285
    }
]