[
    {
        "content": "<p>I've been trying to port code I have to <code>asm</code> that uses <code>xer</code> and <code>cr</code> clobbers with <code>llvm_asm</code>: I created a pull request to add them as clobber-only registers (along with <code>cr[0-7]</code>), but it occurred to me that maybe we should have some of them under preserve_flags instead...</p>",
        "id": 251290639,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1630355639
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/88350\">https://github.com/rust-lang/rust/pull/88350</a></p>",
        "id": 251290739,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1630355678
    },
    {
        "content": "<p>Can you point to any documentation about what those registers contain?</p>",
        "id": 251291042,
        "sender_full_name": "Amanieu",
        "timestamp": 1630355792
    },
    {
        "content": "<p>Nevermind, found it.</p>",
        "id": 251291271,
        "sender_full_name": "Amanieu",
        "timestamp": 1630355901
    },
    {
        "content": "<p>I'm thinking <code>cr</code>/<code>cr[0-7]</code> shouldn't be part of <code>preserve_flags</code> because they are independently allocatable registers (in fact, <a href=\"https://libre-soc.org/openpower/sv/\">Libre-SOC's WIP extension SimpleV</a> extends them to <code>cr[0-127]</code> and allows operating on vectors of <code>cr</code> registers). <code>xer</code> being part of <code>preserves_flags</code> is more plausible...</p>",
        "id": 251291375,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1630355955
    },
    {
        "content": "<p>I think it's fine to have these as separate clobber-only registers.</p>",
        "id": 251291449,
        "sender_full_name": "Amanieu",
        "timestamp": 1630355989
    },
    {
        "content": "<p>llvm only handles the carry bit in xer as a register, but marks it non-allocatable</p>",
        "id": 251291528,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1630356006
    },
    {
        "content": "<p>all of them, or just <code>cr*</code>?</p>",
        "id": 251291606,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1630356043
    },
    {
        "content": "<p>All of them. I'm currently looking at Clang and they also seem to have <code>mq</code>, <code>ap</code>, <code>ctr</code> and <code>lr</code> as available registers.</p>",
        "id": 251292056,
        "sender_full_name": "Amanieu",
        "timestamp": 1630356233
    },
    {
        "content": "<p>hmm, I don't think we should support mq since that was removed from the spec...</p>",
        "id": 251292990,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1630356632
    },
    {
        "content": "<p><a href=\"https://www.ibm.com/docs/en/aix/7.2?topic=faa-special-purpose-register-changes-special-purpose-register-field-handling\">https://www.ibm.com/docs/en/aix/7.2?topic=faa-special-purpose-register-changes-special-purpose-register-field-handling</a></p>",
        "id": 251293071,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1630356672
    },
    {
        "content": "<p>LLVM 13 fixed <code>lr</code> clobbering but I think <code>ctr</code> clobbering still isn't handled correctly.</p>",
        "id": 251294428,
        "sender_full_name": "Amanieu",
        "timestamp": 1630357283
    },
    {
        "content": "<p>I wasn't able to find docs on ap</p>",
        "id": 251294643,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1630357374
    },
    {
        "content": "<p>Let's just ignore it then.</p>",
        "id": 251294682,
        "sender_full_name": "Amanieu",
        "timestamp": 1630357392
    },
    {
        "content": "<p>it isn't in <a href=\"https://github.com/llvm/llvm-project/blob/main/llvm/lib/Target/PowerPC/PPCRegisterInfo.td\">https://github.com/llvm/llvm-project/blob/main/llvm/lib/Target/PowerPC/PPCRegisterInfo.td</a></p>",
        "id": 251294698,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1630357403
    },
    {
        "content": "<p>Can you do some quick tests on godbolt to check that CR/XER clobbering works correctly?</p>",
        "id": 251294716,
        "sender_full_name": "Amanieu",
        "timestamp": 1630357416
    },
    {
        "content": "<p>Just test it in clang.</p>",
        "id": 251294724,
        "sender_full_name": "Amanieu",
        "timestamp": 1630357423
    },
    {
        "content": "<p>for xer, it's really hard to test since it's hard to get something that needs xer...</p>",
        "id": 251294898,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1630357486
    },
    {
        "content": "<p>or, do you just mean checking that xer shows up in llvm ir?</p>",
        "id": 251294987,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1630357528
    },
    {
        "content": "<p>Just check CR clobbering then. Check that the LLVM properly spills the CR value across an asm when it is used later.</p>",
        "id": 251295304,
        "sender_full_name": "Amanieu",
        "timestamp": 1630357683
    },
    {
        "content": "<p><a href=\"https://gcc.godbolt.org/z/15PvG6G61\">https://gcc.godbolt.org/z/15PvG6G61</a></p>",
        "id": 251295878,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1630357943
    },
    {
        "content": "<p>it properly spills cr4</p>",
        "id": 251295902,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1630357955
    },
    {
        "content": "<p>some other cr*  registers are callee-saved so no save/restore code should be generated</p>",
        "id": 251296005,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1630358016
    },
    {
        "content": "<p>LGTM</p>",
        "id": 251296007,
        "sender_full_name": "Amanieu",
        "timestamp": 1630358017
    },
    {
        "content": "<p>One potential concern is whether we should have <code>cr</code>. Just exposing the individual <code>cr*</code> should be enough.</p>",
        "id": 251296120,
        "sender_full_name": "Amanieu",
        "timestamp": 1630358054
    },
    {
        "content": "<p>well, often you need to clobber the whole register (such as when using  the <code>mtcr</code> instruction)...listing all 8 cr fields gets repetitive</p>",
        "id": 251296806,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1630358374
    },
    {
        "content": "<p>the PR i made has <code>cr</code> conflict with <code>cr[0-7]</code>, so we shouldn't have confusing clobbers like <code>out(\"cr\") _, out(\"cr3\") _</code></p>",
        "id": 251297073,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1630358504
    },
    {
        "content": "<p>though, if we were to add clobbering register ranges, I'd be fine removing <code>cr</code> in favor of <code>\"cr0\"..=\"cr7\"</code>:<br>\n<a href=\"#narrow/stream/216763-project-inline-asm/topic/clobbering.20register.20ranges\">https://rust-lang.zulipchat.com/#narrow/stream/216763-project-inline-asm/topic/clobbering.20register.20ranges</a></p>",
        "id": 251299512,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1630359681
    }
]