[
    {
        "content": "<p>Is the following code valid?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">read_from_port</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">port</span>: <span class=\"kt\">u16</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u8</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">value</span>: <span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">port</span><span class=\"w\"> </span><span class=\"o\">&lt;=</span><span class=\"w\"> </span><span class=\"mi\">255</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">asm</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;in al, {}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">port</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"p\">(</span><span class=\"s\">&quot;al&quot;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">asm</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;in al, dx&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"p\">(</span><span class=\"s\">&quot;dx&quot;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">port</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"p\">(</span><span class=\"s\">&quot;al&quot;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">value</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 190651637,
        "sender_full_name": "Amanieu",
        "timestamp": 1584285588
    },
    {
        "content": "<p>The issue here is that the <code>in</code> instruction only accepts immediates in the range 0 - 255. However because of the way we currently perform codegen, the invalid asm (first branch of the <code>if</code>) will never reach LLVM.</p>",
        "id": 190651697,
        "sender_full_name": "Amanieu",
        "timestamp": 1584285675
    },
    {
        "content": "<p>(Assuming that port &gt; 255)</p>",
        "id": 190651701,
        "sender_full_name": "Amanieu",
        "timestamp": 1584285694
    },
    {
        "content": "<p>I don't believe dead code elimination is guaranteed. At least with <code>-Zmir-opt-level=0</code> it shouldn't be performed.</p>",
        "id": 190651753,
        "sender_full_name": "bjorn3",
        "timestamp": 1584285741
    },
    {
        "content": "<p>Even then, LLVM may still eliminate it before it reaches the assembler.</p>",
        "id": 190651811,
        "sender_full_name": "Amanieu",
        "timestamp": 1584285802
    },
    {
        "content": "<p>Hmm, actually I know a way of fixing this particular example: just use <code>port &amp; 255</code>.</p>",
        "id": 190651830,
        "sender_full_name": "Amanieu",
        "timestamp": 1584285839
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> Or <code>port as u8</code>.</p>",
        "id": 190806841,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1584418340
    },
    {
        "content": "<p>In 1.43.0, you'll be able to write <code>port &amp; u8::MAX</code> with no imports, which helps avoid magic numbers and <code>as</code>. <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 190816891,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1584432624
    }
]