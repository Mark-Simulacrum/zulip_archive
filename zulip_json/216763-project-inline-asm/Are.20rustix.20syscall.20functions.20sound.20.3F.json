[
    {
        "content": "<p>Hi, after seen other threads here I am now wondering if rustix <code>syscall</code> <a href=\"https://github.com/bytecodealliance/rustix/blob/4f6c2c398065bb44e2588aab6ec352a5ad80f11f/src/imp/linux_raw/arch/inline/x86_64.rs\">functions</a> are sound ?<br>\nBelow is an example of the syscall6 function (<a href=\"https://godbolt.org/z/d3fcc8fah\">godbolt without rustix safety</a>):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[inline]</span><span class=\"w\"></span>\n<span class=\"cp\">#[must_use]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"k\">crate</span>::<span class=\"n\">imp</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">syscall6</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">nr</span>: <span class=\"nc\">SyscallNumber</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">a0</span>: <span class=\"nc\">ArgReg</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A0</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">a1</span>: <span class=\"nc\">ArgReg</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A1</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">a2</span>: <span class=\"nc\">ArgReg</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A2</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">a3</span>: <span class=\"nc\">ArgReg</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A3</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">a4</span>: <span class=\"nc\">ArgReg</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A4</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">a5</span>: <span class=\"nc\">ArgReg</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A5</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">RetReg</span><span class=\"o\">&lt;</span><span class=\"n\">R0</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">r0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">asm!</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"s\">\"syscall\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">inlateout</span><span class=\"p\">(</span><span class=\"s\">\"rax\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">nr</span><span class=\"p\">.</span><span class=\"n\">to_asm</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">r0</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">in</span><span class=\"p\">(</span><span class=\"s\">\"rdi\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">a0</span><span class=\"p\">.</span><span class=\"n\">to_asm</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">in</span><span class=\"p\">(</span><span class=\"s\">\"rsi\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">a1</span><span class=\"p\">.</span><span class=\"n\">to_asm</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">in</span><span class=\"p\">(</span><span class=\"s\">\"rdx\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">a2</span><span class=\"p\">.</span><span class=\"n\">to_asm</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">in</span><span class=\"p\">(</span><span class=\"s\">\"r10\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">a3</span><span class=\"p\">.</span><span class=\"n\">to_asm</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">in</span><span class=\"p\">(</span><span class=\"s\">\"r8\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">a4</span><span class=\"p\">.</span><span class=\"n\">to_asm</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">in</span><span class=\"p\">(</span><span class=\"s\">\"r9\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">a5</span><span class=\"p\">.</span><span class=\"n\">to_asm</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">lateout</span><span class=\"p\">(</span><span class=\"s\">\"rcx\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">lateout</span><span class=\"p\">(</span><span class=\"s\">\"r11\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">options</span><span class=\"p\">(</span><span class=\"n\">nostack</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">preserves_flags</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">FromAsm</span>::<span class=\"n\">from_asm</span><span class=\"p\">(</span><span class=\"n\">r0</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>From what I can see of the generated output if does what is supposed to be the case, but that's not guaranteed because LLVM or GCC could use some of these register internaly ?</p>",
        "id": 271883369,
        "sender_full_name": "Urgau",
        "timestamp": 1644870325
    },
    {
        "content": "<p>The compiler can't use these registers internally as they are explicitly specified as input/output/clobber.</p>",
        "id": 271884446,
        "sender_full_name": "bjorn3",
        "timestamp": 1644870796
    },
    {
        "content": "<p>I think <code>nostack</code> is wrong, though. And maybe <code>preserves_flags</code> as well.</p>",
        "id": 271884692,
        "sender_full_name": "Connor Horman",
        "timestamp": 1644870921
    },
    {
        "content": "<p>IIRC <code>nostack</code> is \"Doesn't use the stack at all\".</p>",
        "id": 271884797,
        "sender_full_name": "Connor Horman",
        "timestamp": 1644870970
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/216763-project-inline-asm/topic/Are.20rustix.20syscall.20functions.20sound.20.3F/near/271884446\">said</a>:</p>\n<blockquote>\n<p>The compiler can't use these registers internally as they are explicitly specified as input/output/clobber.</p>\n</blockquote>\n<p>So if the compiler does catch itself with anything in those registers, it has to correctly do the fixup around this code, right?</p>",
        "id": 271884865,
        "sender_full_name": "Jubilee",
        "timestamp": 1644871005
    },
    {
        "content": "<p>Yes. Though in LLVM and GCC afaik these constraints get directly feeded into the register allocator. For cg_clif it indeed saves and restores registers on the stack as necessary.</p>",
        "id": 271885089,
        "sender_full_name": "bjorn3",
        "timestamp": 1644871150
    },
    {
        "content": "<p>LLVM and GCC and their time traveling optimizations.</p>",
        "id": 271885239,
        "sender_full_name": "Jubilee",
        "timestamp": 1644871243
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"257758\">Connor Horman</span> <a href=\"#narrow/stream/216763-project-inline-asm/topic/Are.20rustix.20syscall.20functions.20sound.20.3F/near/271884692\">said</a>:</p>\n<blockquote>\n<p>I think <code>nostack</code> is wrong, though. And maybe <code>preserves_flags</code> as well.</p>\n</blockquote>\n<p>May I ask you why ?</p>",
        "id": 271885424,
        "sender_full_name": "Urgau",
        "timestamp": 1644871350
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/216763-project-inline-asm/topic/Are.20rustix.20syscall.20functions.20sound.20.3F/near/271884446\">said</a>:</p>\n<blockquote>\n<p>The compiler can't use these registers internally as they are explicitly specified as input/output/clobber.</p>\n</blockquote>\n<p>In that case, why are other peoples doing these <a href=\"#narrow/stream/216763-project-inline-asm/topic/esi.20register.20on.20x86/near/266568673\">hacks</a> ?</p>",
        "id": 271885579,
        "sender_full_name": "Urgau",
        "timestamp": 1644871449
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"327095\">Urgau</span> <a href=\"#narrow/stream/216763-project-inline-asm/topic/Are.20rustix.20syscall.20functions.20sound.20.3F/near/271885424\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"257758\">Connor Horman</span> <a href=\"#narrow/stream/216763-project-inline-asm/topic/Are.20rustix.20syscall.20functions.20sound.20.3F/near/271884692\">said</a>:</p>\n<blockquote>\n<p>I think <code>nostack</code> is wrong, though. And maybe <code>preserves_flags</code> as well.</p>\n</blockquote>\n<p>May I ask you why ?</p>\n</blockquote>\n<p>I guess it would depend on how the syscall registers are setup, but if it's just using the user stack, that violates the <code>nostack</code> constraint.</p>",
        "id": 271886338,
        "sender_full_name": "Connor Horman",
        "timestamp": 1644871821
    },
    {
        "content": "<p>syscall certainly won't use user stack.</p>",
        "id": 271886551,
        "sender_full_name": "Gary Guo",
        "timestamp": 1644871930
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"303710\">Gary Guo</span> <a href=\"#narrow/stream/216763-project-inline-asm/topic/Are.20rustix.20syscall.20functions.20sound.20.3F/near/271886551\">said</a>:</p>\n<blockquote>\n<p>syscall certainly won't use user stack.</p>\n</blockquote>\n<p>It sometimes does actually, see <code>compat_alloc_user_space</code>. (This has been removed in the latest kernels though)</p>",
        "id": 271886824,
        "sender_full_name": "Amanieu",
        "timestamp": 1644872061
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"327095\">Urgau</span> <a href=\"#narrow/stream/216763-project-inline-asm/topic/Are.20rustix.20syscall.20functions.20sound.20.3F/near/271885579\">said</a>:</p>\n<blockquote>\n<p>In that case, why are other peoples doing these <a href=\"#narrow/stream/216763-project-inline-asm/topic/esi.20register.20on.20x86/near/266568673\">hacks</a> ?</p>\n</blockquote>\n<p>Because esi is reserved in x86 so it couldn't be specified as input.</p>",
        "id": 271886859,
        "sender_full_name": "Gary Guo",
        "timestamp": 1644872087
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"143274\">Amanieu</span> <a href=\"#narrow/stream/216763-project-inline-asm/topic/Are.20rustix.20syscall.20functions.20sound.20.3F/near/271886824\">said</a>:</p>\n<blockquote>\n<p>It sometimes does actually, see <code>compat_alloc_user_space</code>. (This has been removed in the latest kernels though)</p>\n</blockquote>\n<p>I think these are still not considered \"use of stack\" though, because redzones are respected. They are not very different from signal handlers' use of stack.</p>",
        "id": 271887270,
        "sender_full_name": "Gary Guo",
        "timestamp": 1644872307
    },
    {
        "content": "<p>Fair enough.</p>",
        "id": 271887646,
        "sender_full_name": "Amanieu",
        "timestamp": 1644872458
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"303710\">Gary Guo</span> <a href=\"#narrow/stream/216763-project-inline-asm/topic/Are.20rustix.20syscall.20functions.20sound.20.3F/near/271886859\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"327095\">Urgau</span> <a href=\"#narrow/stream/216763-project-inline-asm/topic/Are.20rustix.20syscall.20functions.20sound.20.3F/near/271885579\">said</a>:</p>\n<blockquote>\n<p>In that case, why are other peoples doing these <a href=\"#narrow/stream/216763-project-inline-asm/topic/esi.20register.20on.20x86/near/266568673\">hacks</a> ?</p>\n</blockquote>\n<p>Because esi is reserved in x86 so it couldn't be specified as input.</p>\n</blockquote>\n<p>But the example use <code>rsi</code>, isn't this also a usage of <code>esi</code> ?</p>",
        "id": 271889867,
        "sender_full_name": "Urgau",
        "timestamp": 1644873499
    },
    {
        "content": "<p>esi is only reserved on 32-bit x86.</p>",
        "id": 271889911,
        "sender_full_name": "Amanieu",
        "timestamp": 1644873528
    },
    {
        "content": "<p>oh! I missed that part. thks</p>",
        "id": 271890248,
        "sender_full_name": "Urgau",
        "timestamp": 1644873687
    },
    {
        "content": "<p>So they may need to write a different implementation for x86-32, if they don't already have one?</p>",
        "id": 271890258,
        "sender_full_name": "Jubilee",
        "timestamp": 1644873692
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> <a href=\"#narrow/stream/216763-project-inline-asm/topic/Are.20rustix.20syscall.20functions.20sound.20.3F/near/271890258\">said</a>:</p>\n<blockquote>\n<p>So they may need to write a different implementation for x86-32, if they don't already have one?</p>\n</blockquote>\n<p>They'd have to anyways, <code>syscall</code> isn't available in Legacy/Compat mode (except on amd64)</p>",
        "id": 271890353,
        "sender_full_name": "Connor Horman",
        "timestamp": 1644873725
    },
    {
        "content": "<p>The x86 <a href=\"https://github.com/bytecodealliance/rustix/blob/4f6c2c398065bb44e2588aab6ec352a5ad80f11f/src/imp/linux_raw/arch/inline/x86.rs#L448-L485\">implementation</a> already different:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[inline]</span><span class=\"w\"></span>\n<span class=\"cp\">#[must_use]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"k\">crate</span>::<span class=\"n\">imp</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">syscall6</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">nr</span>: <span class=\"nc\">SyscallNumber</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">a0</span>: <span class=\"nc\">ArgReg</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A0</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">a1</span>: <span class=\"nc\">ArgReg</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A1</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">a2</span>: <span class=\"nc\">ArgReg</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A2</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">a3</span>: <span class=\"nc\">ArgReg</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A3</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">a4</span>: <span class=\"nc\">ArgReg</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A4</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">a5</span>: <span class=\"nc\">ArgReg</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A5</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">RetReg</span><span class=\"o\">&lt;</span><span class=\"n\">R0</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">r0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// Oof. a3 should go in esi, and a5 should go in ebp, and asm! won't</span>\n<span class=\"w\">    </span><span class=\"c1\">// let us use either of those registers as operands. And we can't request</span>\n<span class=\"w\">    </span><span class=\"c1\">// stack slots. And there are no other registers free. Use eax as a</span>\n<span class=\"w\">    </span><span class=\"c1\">// temporary pointer to a slice, since it gets clobbered as the return</span>\n<span class=\"w\">    </span><span class=\"c1\">// value anyway.</span>\n<span class=\"w\">    </span><span class=\"c1\">//</span>\n<span class=\"w\">    </span><span class=\"c1\">// This is another reason that syscalls should be compiler intrinsics</span>\n<span class=\"w\">    </span><span class=\"c1\">// rather than inline asm.</span>\n<span class=\"w\">    </span><span class=\"fm\">asm!</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"s\">\"push ebp\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"s\">\"push esi\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"s\">\"mov esi, DWORD PTR [eax + 0]\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"s\">\"mov ebp, DWORD PTR [eax + 4]\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"s\">\"mov eax, DWORD PTR [eax + 8]\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"s\">\"int $$0x80\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"s\">\"pop esi\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"s\">\"pop ebp\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">inout</span><span class=\"p\">(</span><span class=\"s\">\"eax\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">a3</span><span class=\"p\">.</span><span class=\"n\">to_asm</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">a5</span><span class=\"p\">.</span><span class=\"n\">to_asm</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">nr</span><span class=\"p\">.</span><span class=\"n\">to_asm</span><span class=\"p\">()]</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">r0</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">in</span><span class=\"p\">(</span><span class=\"s\">\"ebx\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">a0</span><span class=\"p\">.</span><span class=\"n\">to_asm</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">in</span><span class=\"p\">(</span><span class=\"s\">\"ecx\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">a1</span><span class=\"p\">.</span><span class=\"n\">to_asm</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">in</span><span class=\"p\">(</span><span class=\"s\">\"edx\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">a2</span><span class=\"p\">.</span><span class=\"n\">to_asm</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">in</span><span class=\"p\">(</span><span class=\"s\">\"edi\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">a4</span><span class=\"p\">.</span><span class=\"n\">to_asm</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">options</span><span class=\"p\">(</span><span class=\"n\">preserves_flags</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">FromAsm</span>::<span class=\"n\">from_asm</span><span class=\"p\">(</span><span class=\"n\">r0</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 271890435,
        "sender_full_name": "Urgau",
        "timestamp": 1644873770
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"257758\">Connor Horman</span> <a href=\"#narrow/stream/216763-project-inline-asm/topic/Are.20rustix.20syscall.20functions.20sound.20.3F/near/271890353\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> <a href=\"#narrow/stream/216763-project-inline-asm/topic/Are.20rustix.20syscall.20functions.20sound.20.3F/near/271890258\">said</a>:</p>\n<blockquote>\n<p>So they may need to write a different implementation for x86-32, if they don't already have one?</p>\n</blockquote>\n<p>They'd have to anyways, <code>syscall</code> isn't available in Legacy/Compat mode (except on amd64)</p>\n</blockquote>\n<p>true dat.</p>",
        "id": 271890510,
        "sender_full_name": "Jubilee",
        "timestamp": 1644873809
    },
    {
        "content": "<p>I keep forgetting that syscall is an x64 thing.</p>",
        "id": 271890561,
        "sender_full_name": "Jubilee",
        "timestamp": 1644873840
    },
    {
        "content": "<p>syscall works in 32-bit code, it's just that for historical reasons Linux standardized on syscall for 64-bit and sysenter or int 80 for 32-bit.</p>",
        "id": 271897080,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1644876795
    },
    {
        "content": "<p>Do you mean the syscall C function?  syscall the assembly instruction seems to get you UD outside of long mode: <a href=\"https://www.felixcloutier.com/x86/syscall\">https://www.felixcloutier.com/x86/syscall</a></p>",
        "id": 271897637,
        "sender_full_name": "Jubilee",
        "timestamp": 1644877076
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/216763-project-inline-asm/topic/Are.20rustix.20syscall.20functions.20sound.20.3F/near/271897080\">said</a>:</p>\n<blockquote>\n<p>syscall works in 32-bit code, it's just that for historical reasons Linux standardized on syscall for 64-bit and sysenter or int 80 for 32-bit.</p>\n</blockquote>\n<p>Only on 64-bit AMD processors (and some legacy amd x86 processors).<br>\nFrom the Intel Developers Manual 2021, Volume 2b, syscall</p>\n<blockquote>\n<p>Compat/Leg Mode<br>\nInvalid</p>\n</blockquote>",
        "id": 271897924,
        "sender_full_name": "Connor Horman",
        "timestamp": 1644877209
    },
    {
        "content": "<p>On 32-bit x86, sysenter isn't available on AMD processors, and int 80 is really slow. So  what we actually use is a vDSO call for most syscalls on 32-bit x86. That lets the kernel give us code which is available on the hardware and fast.</p>",
        "id": 271991332,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1644939379
    },
    {
        "content": "<p>Sorry, I said that poorly. I should have said \"could have worked\".</p>",
        "id": 272032885,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1644956713
    },
    {
        "content": "<p>Not \"works\".</p>",
        "id": 272032888,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1644956716
    },
    {
        "content": "<p>The whole history around syscall and sysenter is a mess of confusion. :)</p>",
        "id": 272032935,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1644956737
    },
    {
        "content": "<p>Sorry for adding to that confusion. :)</p>",
        "id": 272032946,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1644956741
    }
]