[
    {
        "content": "<p>Hello, I'd like to make sure that I'm providing the maximally flexible register declarations for the ARM <code>swp</code> instruction.<br>\nIn this case, the general use is like this: <code>swp  dest, src, [address]</code>.</p>\n<ul>\n<li>address is read to dest</li>\n<li>src is written to address</li>\n<li>if src and address are equal then it's a perfect swap, neither value is lost.</li>\n<li>the output register must <em>not</em> be the address register</li>\n</ul>\n<p>currently I have the following:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">a32_swp</span><span class=\"p\">(</span><span class=\"n\">val</span>: <span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ptr</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">out</span>: <span class=\"kt\">u32</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"fm\">asm!</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"s\">\"swp {x}, {x}, [{address}]\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">address</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"p\">(</span><span class=\"n\">reg</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">inout</span><span class=\"p\">(</span><span class=\"n\">reg</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">options</span><span class=\"p\">(</span><span class=\"n\">nostack</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">preserves_flags</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">out</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>However, I'm not clear how I would use register specifiers to write it so that the src and destination registers are allowed to possibly be the same without allowing the compiler to assign the address register as the destination (which is illegal).</p>",
        "id": 255967248,
        "sender_full_name": "Lokathor",
        "timestamp": 1633283239
    },
    {
        "content": "<p>I don't think it's possible.</p>",
        "id": 255967356,
        "sender_full_name": "Amanieu",
        "timestamp": 1633283353
    },
    {
        "content": "<p>Let me double check to be sure.</p>",
        "id": 255967359,
        "sender_full_name": "Amanieu",
        "timestamp": 1633283358
    },
    {
        "content": "<p>Yea I don't think it's possible to express what you want.</p>",
        "id": 255967437,
        "sender_full_name": "Amanieu",
        "timestamp": 1633283407
    },
    {
        "content": "<p>If it's not possible that's fine, I just wanted to make sure that I wasn't missing something somehow.</p>",
        "id": 255967469,
        "sender_full_name": "Lokathor",
        "timestamp": 1633283440
    },
    {
        "content": "<p>Related: excellent work that inline asm interacts properly with the <code>instruction_set</code> attribute</p>",
        "id": 255967487,
        "sender_full_name": "Lokathor",
        "timestamp": 1633283461
    },
    {
        "content": "<p>I'm not fully sure it does with inlining.</p>",
        "id": 255967504,
        "sender_full_name": "Amanieu",
        "timestamp": 1633283481
    },
    {
        "content": "<p>it does not, but also that's correct anyway</p>",
        "id": 255967516,
        "sender_full_name": "Lokathor",
        "timestamp": 1633283506
    },
    {
        "content": "<p>Also I'd like to resolve the <code>reg_thumb</code> situation before stabilizing.</p>",
        "id": 255967565,
        "sender_full_name": "Amanieu",
        "timestamp": 1633283525
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> could you remind me of what's the problem with reg_thumb? My memory is that it all worked out basically like how i expected it to work.</p>",
        "id": 255967988,
        "sender_full_name": "Lokathor",
        "timestamp": 1633283944
    },
    {
        "content": "<p>When compiling for any target \"reg\" should be a general purpose register (assuming the target has those), and so when compiling for thumb1 then \"reg\" should be naturally limited to r0-r7.</p>",
        "id": 255968091,
        "sender_full_name": "Lokathor",
        "timestamp": 1633284010
    },
    {
        "content": "<p>Would <code>address = inlateout(reg) ptr =&gt; _</code> work?</p>",
        "id": 255968307,
        "sender_full_name": "Gary Guo",
        "timestamp": 1633284233
    },
    {
        "content": "<p>That would work, but it would also unfortunately mark the address register as being clobbered. This might cause LLVM to insert an extra move instruction to preserve the value in another register that isn't clobbered.</p>",
        "id": 255971744,
        "sender_full_name": "Amanieu",
        "timestamp": 1633287575
    }
]