[
    {
        "content": "<p>The stabilization PR is up! <a href=\"https://github.com/rust-lang/rust/pull/91728\">https://github.com/rust-lang/rust/pull/91728</a></p>",
        "id": 264389487,
        "sender_full_name": "Amanieu",
        "timestamp": 1639097631
    },
    {
        "content": "<p>As majority of crates should not contain any asm!() at all, should there be some way to restrict usage of asm to harden against smuggling attacks? (RCE is possible already but asm has potential to give direct access to cpu internals)<br>\nMaybe:</p>\n<ol>\n<li>Require a flag in cargo.toml to enable asm</li>\n<li>Introduce forbid(asm) similar to forbid(unsafe_code)</li>\n<li>Include a [Contains asm] warning to crates with asm.</li>\n<li>Do nothing</li>\n</ol>",
        "id": 264631562,
        "sender_full_name": "Bot+",
        "timestamp": 1639327266
    },
    {
        "content": "<p><code>asm!</code> is always unsafe, so it should be covered by <code>forbid(unsafe_code)</code>. I don't think a separate mechanism is needed just for inline assembly since it doesn't give any more power than any other unsafe code.</p>",
        "id": 264631632,
        "sender_full_name": "Amanieu",
        "timestamp": 1639327363
    },
    {
        "content": "<blockquote>\n<p>it doesn't give any more power than any other unsafe code.</p>\n</blockquote>\n<p>yeah, asm just makes it easier to do bad stuff</p>",
        "id": 264633565,
        "sender_full_name": "Bot+",
        "timestamp": 1639329866
    },
    {
        "content": "<p>I expect legitimate usage of asm will be a small fraction of crates with unsafe, so having a standardized way for CI/cargo to deny asm but allow unsafe should prove to be useful.</p>",
        "id": 264633580,
        "sender_full_name": "Bot+",
        "timestamp": 1639329895
    },
    {
        "content": "<p>I disagree, it's a lot easier to do \"bad stuff\" by messing around with raw pointers. Most inline assembly tends to be small and self-contained, especially since you need to be very explicit about the operands and options.</p>",
        "id": 264633609,
        "sender_full_name": "Amanieu",
        "timestamp": 1639329956
    },
    {
        "content": "<p>besides, on most computers, you can write to a block of memory, flush the instruction-cache/set as executable, and execute the instructions you wrote, giving you even more power than inline asm without needing inline asm at all.</p>",
        "id": 264634276,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1639330824
    },
    {
        "content": "<blockquote>\n<p>small and self-contained</p>\n</blockquote>\n<p>This is about idiot-proofing like when devs don't properly review their dependencies.</p>\n<blockquote>\n<p>write to a block of memory, flush the instruction-cache/set as executable, and execute</p>\n</blockquote>\n<p>or on some older machines you can exploit a known hardware vulnerability to brick it.</p>",
        "id": 264634879,
        "sender_full_name": "Bot+",
        "timestamp": 1639331639
    },
    {
        "content": "<p>All of which you can already do today by calling C code.</p>",
        "id": 264635115,
        "sender_full_name": "Amanieu",
        "timestamp": 1639331890
    },
    {
        "content": "<p>I really don't think asm should be treated any differently from other unsafe code</p>",
        "id": 264635133,
        "sender_full_name": "Amanieu",
        "timestamp": 1639331934
    },
    {
        "content": "<blockquote>\n<p>All of which you can already do today by calling C code.</p>\n</blockquote>\n<p>Yes</p>\n<blockquote>\n<p>I really don't think asm should be treated any differently from other unsafe code</p>\n</blockquote>\n<p>I think asm has potential (=hardware vulnerabilities) to be worse than unsafe, so the decision should be left to user.</p>",
        "id": 264635667,
        "sender_full_name": "Bot+",
        "timestamp": 1639332660
    },
    {
        "content": "<p>But the C code can also call inline assembly, or the C code can just <em>be</em> an object file made directly from assembly.</p>",
        "id": 264641842,
        "sender_full_name": "Lokathor",
        "timestamp": 1639340638
    },
    {
        "content": "<p>If C source is buggy/compromised/garbage that is not Rust's fault. \"No asm found in .rs will be compiled\" on other hand is a promise the compiler could make. I agree it's not much given current state of Rust but it's something.</p>",
        "id": 264642821,
        "sender_full_name": "Bot+",
        "timestamp": 1639342151
    },
    {
        "content": "<p>I don't think that would add any value compared to just <code>forbid(unsafe_code)</code>.</p>",
        "id": 264647278,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1639348057
    },
    {
        "content": "<p>If you don't trust the crate, it has plenty of ways of doing malicious things, with unsafe code or even without. If you do trust the crate and just want a cross-check, unsafe code seems like the right boundary, and even then linking to C still bypasses that.</p>",
        "id": 264647328,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1639348123
    },
    {
        "content": "<blockquote>\n<p>it has plenty of ways of doing malicious things</p>\n</blockquote>\n<p>And general availability of asm will lower the bar even further, crates with forbid(unsafe_code) excluded.</p>\n<p>forbid(asm) won't save the world but I think it would be handy as codestyle enforcement or defense in depth.</p>",
        "id": 264648552,
        "sender_full_name": "Bot+",
        "timestamp": 1639349999
    }
]