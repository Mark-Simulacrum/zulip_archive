[
    {
        "content": "<p>Hello, I've been reading through the inline-assembly tests and noticed <a href=\"https://github.com/rust-lang/rust/blob/3a24abd22fd25c836d8b4d75ff46c833f9c3934c/src/test/ui/asm/type-check-2.rs#L72\">this</a> line. Other experiments narrowed the failure case down to a function pointer having been used for an output. </p>\n<p>The <a href=\"https://doc.rust-lang.org/beta/unstable-book/library-features/asm.html#register-operands\">book</a> doesn't seem to define this, and the error <a href=\"https://github.com/rust-lang/rust/blob/3a24abd22fd25c836d8b4d75ff46c833f9c3934c/compiler/rustc_passes/src/intrinsicck.rs#L152\">source</a> doesn't make it clear either. Could someone clarify please?</p>",
        "id": 245723743,
        "sender_full_name": "Adam Gemmell",
        "timestamp": 1626112976
    },
    {
        "content": "<p>The type of the value that you get when you refer to a function by name isn't quite a normal fn ptr.  The error you get actually does say that fn ptrs work, and code that does something like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">foo</span>: <span class=\"nc\">fn</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>can use <code>foo</code> in that position (assuming <code>bar</code> exists and has the right signature to coerce to the fn ptr you specify)</p>\n<p>Example (this code is very wrong logically, it needs clobbers and such, but this is just to get it to compile): <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=f9e4a176715d769338fdc488e7f21d71\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=f9e4a176715d769338fdc488e7f21d71</a></p>",
        "id": 245770761,
        "sender_full_name": "asquared31415",
        "timestamp": 1626140693
    },
    {
        "content": "<p>(related: can we make this work by doing the coercion automatically?  That would be really nice for users)</p>",
        "id": 245770942,
        "sender_full_name": "asquared31415",
        "timestamp": 1626140916
    },
    {
        "content": "<p>The coercion already exists, but only for <code>in</code>. It doesn't make sense for <code>out</code>/<code>inout</code>.</p>",
        "id": 245791102,
        "sender_full_name": "Amanieu",
        "timestamp": 1626163891
    },
    {
        "content": "<p>That explains the difference between in/out I was seeing, thank you</p>",
        "id": 245794512,
        "sender_full_name": "Adam Gemmell",
        "timestamp": 1626166023
    },
    {
        "content": "<p>Hm that's interesting, why does the coercion not make sense for inout?  I would expect it to have the same type as if it were passed as <code>in</code> at first thought.</p>",
        "id": 246043469,
        "sender_full_name": "asquared31415",
        "timestamp": 1626314346
    },
    {
        "content": "<p>Because the type of the variable is a ZST which refers to a specific function. How can you output to that?</p>",
        "id": 246048048,
        "sender_full_name": "Amanieu",
        "timestamp": 1626319366
    },
    {
        "content": "<p>It wasn't clear to me at first (and I wasn't aware of the function item type until this thread) but this is consistent with simpler (non-<code>asm!</code>) writes:</p>\n<div class=\"codehilite\"><pre><span></span><code>fn a() { }\nfn b() { }\n...\n    let mut f = a;  // Gets &quot;function item&quot; type.\n    if &lt;cond&gt; { f = b };  // Error: type mismatch (like asm! &quot;inout&quot; and &quot;out&quot; parameters).\n</code></pre></div>\n<p>I think <code>asm!</code> is actually slightly more flexible than plain Rust here, since it can coerce to a function pointer for <code>in(reg)</code> without explicitly naming the type.</p>",
        "id": 246070938,
        "sender_full_name": "Jacob Bramley",
        "timestamp": 1626341239
    }
]