[
    {
        "content": "<p>If an inline assembly block uses the stack, but without requiring the full ABI alignment (eg: to temporarily push one value), can it specify <code>nostack</code> in this case if the target is known to not use the red zone?</p>",
        "id": 254769932,
        "sender_full_name": "Lokathor",
        "timestamp": 1632516381
    },
    {
        "content": "<p>idk, but the red zone might just apply to calls, not inline asm</p>",
        "id": 254770146,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1632516483
    },
    {
        "content": "<p>I could be wrong though</p>",
        "id": 254770187,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1632516501
    },
    {
        "content": "<p>My answer would be it's okay, not specifying nostack wouldn't hurt.</p>",
        "id": 254770246,
        "sender_full_name": "Gary Guo",
        "timestamp": 1632516533
    },
    {
        "content": "<p>No, you can't use <code>nostack</code> if you push to the stack.</p>",
        "id": 254770284,
        "sender_full_name": "Amanieu",
        "timestamp": 1632516555
    },
    {
        "content": "<p>I don't think it'll break anything though.</p>",
        "id": 254770408,
        "sender_full_name": "Gary Guo",
        "timestamp": 1632516604
    },
    {
        "content": "<p>The compiler couldn't use the memory below the stack pointer anyway.</p>",
        "id": 254770447,
        "sender_full_name": "Gary Guo",
        "timestamp": 1632516629
    },
    {
        "content": "<p>With nostack the stack pointer may not even point to the stack at all I would guess.</p>",
        "id": 254771214,
        "sender_full_name": "bjorn3",
        "timestamp": 1632516977
    },
    {
        "content": "<p>Is there a way to add an option for the case where the stack is used but <em>doesn't</em> need to be aligned to the full ABI alignment?</p>",
        "id": 254771567,
        "sender_full_name": "Lokathor",
        "timestamp": 1632517184
    },
    {
        "content": "<p>The stack pointer is usually always kept aligned on ARM, so it costs nothing.</p>",
        "id": 254780808,
        "sender_full_name": "Amanieu",
        "timestamp": 1632521697
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/216763-project-inline-asm/topic/Can.20nostack.20be.20specified.20if.20the.20stack.20just.20doesn't.20need.20t.2E.2E.2E/near/254771214\">said</a>:</p>\n<blockquote>\n<p>With nostack the stack pointer may not even point to the stack at all I would guess.</p>\n</blockquote>\n<p>I don't think it's usually allowed, otherwise signal handler wouldn't work.</p>",
        "id": 254786508,
        "sender_full_name": "Gary Guo",
        "timestamp": 1632525541
    },
    {
        "content": "<p>Requiring the stack to be aligned should be of no cost for most (if not all) platforms.</p>",
        "id": 254786601,
        "sender_full_name": "Gary Guo",
        "timestamp": 1632525608
    },
    {
        "content": "<p>With ARM, the stack is aligned to 4 at all times, and aligned to 8 at a public interface.</p>\n<p>So what I don't want is for the <code>asm!</code> block to end up asking LLVM for an alignment of 8 and having LLVM possibly pushing/popping extra registers around the block to meet that requirement, when the <code>asm!</code> itself doesn't need the alignment of 8 at all.</p>",
        "id": 254837413,
        "sender_full_name": "Lokathor",
        "timestamp": 1632574502
    },
    {
        "content": "<p>I'm somewhat hesitant to add yet another option for such a niche use case.</p>",
        "id": 254844984,
        "sender_full_name": "Amanieu",
        "timestamp": 1632581006
    },
    {
        "content": "<p>Fair enough, it is pretty niche</p>",
        "id": 254861685,
        "sender_full_name": "Lokathor",
        "timestamp": 1632596104
    },
    {
        "content": "<p><code>clobber_abi(\"stack\")</code></p>",
        "id": 254882073,
        "sender_full_name": "Jubilee",
        "timestamp": 1632615527
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/216763-project-inline-asm/topic/Can.20nostack.20be.20specified.20if.20the.20stack.20just.20doesn't.20need.20t.2E.2E.2E/near/254837413\">said</a>:</p>\n<blockquote>\n<p>So what I don't want is for the <code>asm!</code> block to end up asking LLVM for an alignment of 8 and having LLVM possibly pushing/popping extra registers around the block to meet that requirement, when the <code>asm!</code> itself doesn't need the alignment of 8 at all.</p>\n</blockquote>\n<p>I doubt if any stack adjustment will actually be generated. It's likely that the stack will just be aligned at the prologue. Do you have a snippet that demonstrates the extra stack adjustment?</p>",
        "id": 254882319,
        "sender_full_name": "Gary Guo",
        "timestamp": 1632615806
    },
    {
        "content": "<p>not on hand i don't. my thought was that the stack would would otherwise contain some odd number of elements before the <code>asm!</code>, and because of the asm an extra element is required to be pushedpopped.</p>\n<p>but it's only a 2 cycle total difference. Even if the device in question is only ~16MHz, 2 cycles on a few calls here and there is a pretty small overhead.</p>",
        "id": 254886612,
        "sender_full_name": "Lokathor",
        "timestamp": 1632620264
    },
    {
        "content": "<p>Also, particularly if most functions are the Rust ABI, then there's really no reason for that to enforce align8 on the stack at every function call. I sure hope that it doesn't</p>",
        "id": 254886697,
        "sender_full_name": "Lokathor",
        "timestamp": 1632620324
    }
]