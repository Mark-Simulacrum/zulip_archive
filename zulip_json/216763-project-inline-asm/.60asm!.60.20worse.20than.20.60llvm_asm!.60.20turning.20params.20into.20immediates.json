[
    {
        "content": "<p>In <a href=\"https://rust.godbolt.org/z/Ed6GjP\">https://rust.godbolt.org/z/Ed6GjP</a> I have a asm string that when passed constant arguments <code>llvm_asm!</code> is able to inline a constant into the instruction where it's used as an immediate, and <code>asm!</code> is not and instead passes it as a register.</p>\n<p>Is there a way to fix this? Will there be? It's not the absolute end of the world, but is disappointing (it's still much better than the manual atomic usage produces...)</p>",
        "id": 225739967,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1612897314
    },
    {
        "content": "<p>There is no plan to fix this.</p>",
        "id": 225740991,
        "sender_full_name": "Amanieu",
        "timestamp": 1612897721
    },
    {
        "content": "<p>I'm trying to find the comment where I talked about this, but this is actually much more complicated than it seems.</p>",
        "id": 225741301,
        "sender_full_name": "Amanieu",
        "timestamp": 1612897840
    },
    {
        "content": "<p>Instructions have different constraints on what values can be accepted as immediates (e.g. 0-255). This is particularly true for architectures like ARM that have a wide variety of instruction formats (7-bit immediate, 12-bit immediate, etc).</p>",
        "id": 225741526,
        "sender_full_name": "Amanieu",
        "timestamp": 1612897923
    },
    {
        "content": "<p>We would have to define special operand types for each variant and the complexity quickly gets out of hand.</p>",
        "id": 225741641,
        "sender_full_name": "Amanieu",
        "timestamp": 1612897982
    },
    {
        "content": "<p>hrm, I see. that sucks... but I guess I mostly care because LLVM doesn't exactly do what I want with the fetch_or, and this is still a win. For places where it matters I can find a way to make it a const â€” that would work right?</p>",
        "id": 225742020,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1612898158
    },
    {
        "content": "<p>Fundamentally <code>asm!</code> is more about enabling users to do things that cannot be done in Rust rather than for maximizing performance.</p>",
        "id": 225742066,
        "sender_full_name": "Amanieu",
        "timestamp": 1612898164
    },
    {
        "content": "<p>E.g. special instructions, constant-time cryptography</p>",
        "id": 225742098,
        "sender_full_name": "Amanieu",
        "timestamp": 1612898178
    },
    {
        "content": "<p>Yes, const would work but only with compile-time constants (e.g. const generics).</p>",
        "id": 225742164,
        "sender_full_name": "Amanieu",
        "timestamp": 1612898214
    },
    {
        "content": "<p>Yeah, that's fine then. I'm a little unconvinced by \"asm!\" isn't for performance (core::arch exists for the use cases you describe, although in a limited fashion still), but at the end of the day it's not like the output here is atrocious by any stretch.</p>",
        "id": 225742499,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1612898365
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> Is there a fundamental reason we <em>shouldn't</em> support some common subset cases, even if we don't have complete support for every possible variation?</p>",
        "id": 225748579,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612900915
    },
    {
        "content": "<p>I can understand not supporting \"N-bit immediate that must be passed in this specific subset of registers\" for every possible variation.</p>",
        "id": 225748677,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612900943
    },
    {
        "content": "<p>The full set of GCC/LLVM constraints is <em>extensive</em>.</p>",
        "id": 225748727,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612900968
    },
    {
        "content": "<p>But supporting a few common cases of immediates doesn't seem out of the question.</p>",
        "id": 225748774,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612900985
    },
    {
        "content": "<p>supporting immediate values seems extremely easy on ARM</p>",
        "id": 225748849,
        "sender_full_name": "Lokathor",
        "timestamp": 1612901018
    },
    {
        "content": "<p>there is literally like, a list of what instructions allow what immediate ranges. i don't expect a particular person to do it, but it's certainly less work than implementing all of avx-512 for example</p>",
        "id": 225749014,
        "sender_full_name": "Lokathor",
        "timestamp": 1612901084
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> Well, it wouldn't be \"what instructions\", since that's the assembler's job (which means LLVM's job).</p>",
        "id": 225749118,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612901119
    },
    {
        "content": "<p>well if it has to be an llvm change i guess</p>",
        "id": 225749278,
        "sender_full_name": "Lokathor",
        "timestamp": 1612901178
    },
    {
        "content": "<p>The support that would be needed in rustc would be to encode immediates in the textual format that LLVM's assembler needs for a given architecture.</p>",
        "id": 225750059,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612901490
    },
    {
        "content": "<p>What you are asking for is fundamentally different from the existing <code>const</code> operand type.</p>",
        "id": 225750500,
        "sender_full_name": "Amanieu",
        "timestamp": 1612901663
    },
    {
        "content": "<p><code>const</code> only accepts compile-time constants and substitutes the number directly into the asm with no operand modifier (<code>$</code>, <code>#</code>, etc).</p>",
        "id": 225750571,
        "sender_full_name": "Amanieu",
        "timestamp": 1612901686
    },
    {
        "content": "<p>What you want is a variant of <code>in</code> that can emit a constant with a target-specific modifier in place of a register if that value is a compile-time constant.</p>",
        "id": 225750688,
        "sender_full_name": "Amanieu",
        "timestamp": 1612901750
    },
    {
        "content": "<p>This would have to be supported through LLVM constraint codes.</p>",
        "id": 225750702,
        "sender_full_name": "Amanieu",
        "timestamp": 1612901761
    },
    {
        "content": "<p>For many cases, I'd expect that <code>const</code> together with <code>$</code> would suffice.</p>",
        "id": 225759159,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612905564
    },
    {
        "content": "<p>Adding some further support for immediates could potentially catch errors earlier than the assembler, while still allowing people to fall back to <code>const</code> and <code>${}</code> if they want to just pass it through and let LLVM handle it or choke on it.</p>",
        "id": 225759333,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612905637
    },
    {
        "content": "<p>I'm wondering if the cases other than \"better error handling\" would be handled if we have a mechanism for \"potentially const\" function definitions.</p>",
        "id": 225759447,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612905704
    },
    {
        "content": "<p>I'm lost, could you give an example for what you are proposing?</p>",
        "id": 225759707,
        "sender_full_name": "Amanieu",
        "timestamp": 1612905786
    },
    {
        "content": "<p>So, one case I've commonly seen for \"immediate if possible, register if not\" in C is static inline functions, where if the compiler <em>can</em> compute the argument at compile time it can then emit an immediate, and if it can't it references the register containing the value.</p>",
        "id": 225760041,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612905907
    },
    {
        "content": "<p>In Rust, there has been various discussion about being able to define traits and methods and similar that work in both const and non-const contexts.</p>",
        "id": 225760116,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612905940
    },
    {
        "content": "<p>Which leaves me wondering if it <em>might</em> make sense to handle this in a less automatic, more explicit way.</p>",
        "id": 225760220,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612905968
    },
    {
        "content": "<p>I don't think that applies here. <code>asm!</code> can only run in a non-const context.</p>",
        "id": 225760250,
        "sender_full_name": "Amanieu",
        "timestamp": 1612905981
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"143274\">Amanieu</span> <a href=\"#narrow/stream/216763-project-inline-asm/topic/.60asm!.60.20worse.20than.20.60llvm_asm!.60.20turning.20params.20into.20immediates/near/225760250\">said</a>:</p>\n<blockquote>\n<p>I don't think that applies here. <code>asm!</code> can only run in a non-const context.</p>\n</blockquote>\n<p>I wasn't suggesting it was directly applicable, just analogous.</p>",
        "id": 225760282,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612906000
    },
    {
        "content": "<p>In this case, the distinction is \"is my argument a compile-time constant\".</p>",
        "id": 225760307,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612906011
    },
    {
        "content": "<p>Some kind of compile-time \"if this is a compile-time constant, emit X, else emit Y\" mechanism could potentially solve this without being <code>asm!</code>-specific.</p>",
        "id": 225760367,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612906028
    },
    {
        "content": "<p>On the other hand, if that doesn't translate well to LLVM, and it's <em>easier</em> to just map something to a small subset of LLVM constraints that handle this during code generation, perhaps that would make more sense.</p>",
        "id": 225760446,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612906052
    },
    {
        "content": "<p>I'm trying to brainstorm alternatives.</p>",
        "id": 225760462,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612906061
    },
    {
        "content": "<p>\"if this is a compile-time constant\" is only known to LLVM after it has applied optimization including inlining. We're basically limited to what we can express with LLVM's asm constraint codes.</p>",
        "id": 225760588,
        "sender_full_name": "Amanieu",
        "timestamp": 1612906110
    },
    {
        "content": "<p>We have no way to control that in rustc.</p>",
        "id": 225760665,
        "sender_full_name": "Amanieu",
        "timestamp": 1612906147
    },
    {
        "content": "<p>Got it. Thanks for clarifying that.</p>",
        "id": 225760737,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612906185
    },
    {
        "content": "<p>So, <code>const</code> for cases where Rust can guarantee compile-time computation, LLVM asm constraints for cases where something doesn't look like a guaranteed constant to Rust but it <em>might</em> end up folding down to a constant after LLVM is through with it?</p>",
        "id": 225760842,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612906236
    },
    {
        "content": "<p>Yes. If ever do support that I would like to keep <code>const </code> as it is right now and use a different syntax for immediates.</p>",
        "id": 225760952,
        "sender_full_name": "Amanieu",
        "timestamp": 1612906289
    },
    {
        "content": "<p>Maybe <code>in(imm12, reg)</code> for \"try to fit it in a 12-bit immediate, otherwise use a register\".</p>",
        "id": 225761009,
        "sender_full_name": "Amanieu",
        "timestamp": 1612906319
    },
    {
        "content": "<p>In that case, it seems like we don't really <em>need</em> the various LLVM constraints for \"<em>must</em> be an immediate\" except perhaps as better error-checking constraints than <code>const</code> (e.g. \"must be expressible as an ARM immediate\"), and the most useful LLVM constraints would be \"register or immediate\" (or eventually \"memory or register or immediate\").</p>",
        "id": 225761104,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612906348
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"143274\">Amanieu</span> <a href=\"#narrow/stream/216763-project-inline-asm/topic/.60asm!.60.20worse.20than.20.60llvm_asm!.60.20turning.20params.20into.20immediates/near/225761009\">said</a>:</p>\n<blockquote>\n<p>Maybe <code>in(imm12, reg)</code> for \"try to fit it in a 12-bit immediate, otherwise use a register\".</p>\n</blockquote>\n<p>That seems reasonable, but we'd have to make sure all combinations we support actually map to LLVM constraints.</p>",
        "id": 225761155,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612906369
    },
    {
        "content": "<p>No, we do need those constraints because we LLVM to fall back to a register if the value is constant but doesn't fit in the instruction's immediate field.</p>",
        "id": 225761295,
        "sender_full_name": "Amanieu",
        "timestamp": 1612906419
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"143274\">Amanieu</span> <a href=\"#narrow/stream/216763-project-inline-asm/topic/.60asm!.60.20worse.20than.20.60llvm_asm!.60.20turning.20params.20into.20immediates/near/225761295\">said</a>:</p>\n<blockquote>\n<p>No, we do need those constraints because we LLVM to fall back to a register if the value is constant but doesn't fit in the instruction's immediate field.</p>\n</blockquote>\n<p>That'd be an \"immediate or register\" constraint, though, not an \"immediate\" constraint, right?</p>",
        "id": 225761331,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612906441
    },
    {
        "content": "<p>Well LLVM expresses that as a pair of constaints, which it tries one after the other until it finds something that matches.</p>",
        "id": 225761481,
        "sender_full_name": "Amanieu",
        "timestamp": 1612906490
    },
    {
        "content": "<p>Ah, I didn't know that. GCC tends to combine the constraints and give names to each combination, AFAICT.</p>",
        "id": 225761516,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612906509
    },
    {
        "content": "<p>For example <code>\"irm\"</code> means try an immediate (any size), otherwise a register, otherwise a memory address.</p>",
        "id": 225761546,
        "sender_full_name": "Amanieu",
        "timestamp": 1612906528
    },
    {
        "content": "<p>GCC does this too.</p>",
        "id": 225761556,
        "sender_full_name": "Amanieu",
        "timestamp": 1612906534
    },
    {
        "content": "<blockquote>\n<p>After the prefix, there must be one or more additional constraints (see Constraints) that describe where the value resides. Common constraints include â€˜râ€™ for register and â€˜mâ€™ for memory. When you list more than one possible location (for example, \"=rm\"), the compiler chooses the most efficient one based on the current context. If you list as many alternates as the asm statement allows, you permit the optimizers to produce the best possible code.</p>\n</blockquote>",
        "id": 225761717,
        "sender_full_name": "Amanieu",
        "timestamp": 1612906602
    },
    {
        "content": "<p><a href=\"https://gcc.gnu.org/onlinedocs/gcc/Extended-Asm.html\">https://gcc.gnu.org/onlinedocs/gcc/Extended-Asm.html</a></p>",
        "id": 225761969,
        "sender_full_name": "Amanieu",
        "timestamp": 1612906735
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> Ah. I don't tend to see that used very often in practice; usually, I see people using <code>g</code> for instance.</p>",
        "id": 225791379,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612929047
    },
    {
        "content": "<p>I think clang actually expands <code>g</code> to <code>irm</code>.</p>",
        "id": 225791408,
        "sender_full_name": "Amanieu",
        "timestamp": 1612929114
    },
    {
        "content": "<p>That makes sense.</p>",
        "id": 225791458,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612929147
    }
]