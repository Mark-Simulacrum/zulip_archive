[
    {
        "content": "<p>I was playing with the new syntax, and wasn't sure what's the right way to read a carry flag, so I used <code>setc</code> explictly, is this the \"right\" way?</p>\n<p>What I was playing with: <a href=\"https://godbolt.org/z/ffEvE4q46\">https://godbolt.org/z/ffEvE4q46</a></p>\n<p>I think more complex examples with multiple asm lines, clobbers, etc might be very useful (maybe I'll try to write them myself by converting some BigInt code from C to Rust, but I'll probably find myself asking here more and more questions haha)</p>",
        "id": 244269055,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1624968186
    },
    {
        "content": "<p>I think so, though for <code>rdrand</code> you can also use <a href=\"https://doc.rust-lang.org/stable/core/arch/x86_64/fn._rdrand64_step.html\"><code>core::arch::x86_64::_rdrand64_step</code></a>.</p>",
        "id": 244276064,
        "sender_full_name": "bjorn3",
        "timestamp": 1624971645
    },
    {
        "content": "<p><code>pure</code> is incorrect here: <code>rdrand</code> reads external state, it does not depend only on its inputs.</p>",
        "id": 244284062,
        "sender_full_name": "Amanieu",
        "timestamp": 1624974801
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/216763-project-inline-asm/topic/Playing.20with.20the.20new.20inline.20assembly.20syntax/near/244276064\">said</a>:</p>\n<blockquote>\n<p>I think so, though for <code>rdrand</code> you can also use <a href=\"https://doc.rust-lang.org/stable/core/arch/x86_64/fn._rdrand64_step.html\"><code>core::arch::x86_64::_rdrand64_step</code></a>.</p>\n</blockquote>\n<p>I know, I just thought it's a cool thing to write in asm as a start.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"143274\">Amanieu</span> <a href=\"#narrow/stream/216763-project-inline-asm/topic/Playing.20with.20the.20new.20inline.20assembly.20syntax/near/244284062\">said</a>:</p>\n<blockquote>\n<p><code>pure</code> is incorrect here: <code>rdrand</code> reads external state, it does not depend only on its inputs.</p>\n</blockquote>\n<p>Hmm, I assumed pure here will mean that if I don't use <code>rand_value</code> or <code>ok</code> then it can remove that instruction (which is true, it doesn't modify the stack or any other input).<br>\nI see that it's somewhat incorrect because in practice it changes the internal RNG of the cpu, but should I care about that?</p>",
        "id": 244294159,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1624978426
    },
    {
        "content": "<p>Because <code>pure</code> allows the compiler to assume that the <code>asm!</code> always returns the same output given the same inputs (of which there are none).</p>",
        "id": 244294378,
        "sender_full_name": "Amanieu",
        "timestamp": 1624978487
    },
    {
        "content": "<p>Oh, I haven't realized that, I thought it just allows it to remove the instruction if the inputs/outputs aren't used.</p>",
        "id": 244295290,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1624978794
    },
    {
        "content": "<p>Damn, I see the compiler actually does exactly what you said, if I call it twice it generates only a single rdrand instruction</p>",
        "id": 244295680,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1624978893
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> what would be the correct way to make an asm block without fixed output bit which can be skipped if the output value ends up not used?</p>",
        "id": 244300489,
        "sender_full_name": "Lokathor",
        "timestamp": 1624980567
    },
    {
        "content": "<p>There isn't one.</p>",
        "id": 244310528,
        "sender_full_name": "Amanieu",
        "timestamp": 1624984800
    },
    {
        "content": "<p>er</p>",
        "id": 244310604,
        "sender_full_name": "Amanieu",
        "timestamp": 1624984817
    },
    {
        "content": "<p>Nope, there isn't one.</p>",
        "id": 244310614,
        "sender_full_name": "Amanieu",
        "timestamp": 1624984823
    }
]