[
    {
        "content": "<p>I've just come across a pretty significant issue with Intel syntax: some symbol names can't be represented.</p>",
        "id": 189399159,
        "sender_full_name": "Amanieu",
        "timestamp": 1582999542
    },
    {
        "content": "<p>For example <code>eax</code>, <code>byte</code>, etc.</p>",
        "id": 189399166,
        "sender_full_name": "Amanieu",
        "timestamp": 1582999561
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"nf\">mov</span> <span class=\"no\">eax</span><span class=\"p\">,</span> <span class=\"no\">eax</span> <span class=\"c\"># is this a symbol or a register</span>\n</pre></div>",
        "id": 189399216,
        "sender_full_name": "Amanieu",
        "timestamp": 1582999588
    },
    {
        "content": "<p>There doesn't appear to be a solution <a href=\"https://sourceware.org/bugzilla/show_bug.cgi?id=37\" target=\"_blank\" title=\"https://sourceware.org/bugzilla/show_bug.cgi?id=37\">https://sourceware.org/bugzilla/show_bug.cgi?id=37</a></p>",
        "id": 189399231,
        "sender_full_name": "Amanieu",
        "timestamp": 1582999619
    },
    {
        "content": "<p>LLVM's internal assembler seems to be able to parse quoted strings as symbols: <code>\"eax\"</code></p>",
        "id": 189399391,
        "sender_full_name": "Amanieu",
        "timestamp": 1582999868
    },
    {
        "content": "<p>But that doesn't work in GAS: <code>\"eax\"</code> is still parsed as a register name</p>",
        "id": 189399406,
        "sender_full_name": "Amanieu",
        "timestamp": 1582999894
    },
    {
        "content": "<p>I don't really see how that's significant for Rust inline asm, can you elaborate? One would have to deliberately give a symbol one of these names with <code>#[no_mangle]</code> (and use it with intel-style asm) to run into this, and platform-/toolchain-dependent breakage when giving symbols certain \"reserved\" names is nothing new or specific to inline asm. It also isn't novel that assemblers have all sorts of weird corner cases that vary between implementations or versions.</p>",
        "id": 189399827,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1583000569
    },
    {
        "content": "<p>It is significant because we provide a <code>sym</code> operand type which will insert the symbol of a given <code>static</code> or <code>fn</code> into the asm code.</p>",
        "id": 189399839,
        "sender_full_name": "Amanieu",
        "timestamp": 1583000604
    },
    {
        "content": "<p>You would expect this to work correctly for all symbol names.</p>",
        "id": 189399849,
        "sender_full_name": "Amanieu",
        "timestamp": 1583000640
    },
    {
        "content": "<p>I realize that, but as I said you'd have to deliberately pick such a name with <code>#[no_mangle]</code> and when you do that, there's a million things other than inline asm that can break depending on the name.</p>",
        "id": 189399906,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1583000722
    },
    {
        "content": "<p>Eh, fair enough.</p>",
        "id": 189399956,
        "sender_full_name": "Amanieu",
        "timestamp": 1583000795
    }
]