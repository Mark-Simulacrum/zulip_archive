[
    {
        "content": "<p>Consider a case like this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"cp\">#![feature(asm)]</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">asm</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;push %rax ; pop %rax&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 198721852,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1590470918
    },
    {
        "content": "<p>There aren't any outputs, inputs, clobbers, or options, so we can't tell at the syntax level that it's old-style <code>asm!</code> syntax.</p>",
        "id": 198721860,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1590470945
    },
    {
        "content": "<p>So, this gives an error from the assembler, like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>error: &lt;inline asm&gt;:2:7: error: unknown token in expression\n        push %rax ; pop %rax\n             ^\n\n\nerror: &lt;inline asm&gt;:2:18: error: unknown token in expression\n        push %rax ; pop %rax\n                        ^\n</code></pre></div>",
        "id": 198721870,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1590470974
    },
    {
        "content": "<p>Do we, at that point, have enough information in rustc that we could <em>theoretically</em> notice that we're in application-provided assembly, notice that the unknown token error points to a <code>%</code> symbol (likewise for other notable symbol differences between AT&amp;T and Intel), and iff all of those things are true, add a \"help:\" note that steers people towards the <code>asm!</code> syntax change and suggests <code>option(att_syntax)</code>?</p>",
        "id": 198721996,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1590471177
    },
    {
        "content": "<p>I think that would be extremely difficult to do reliably. Additionally I don't think it is such a big issue since operand-less <code>asm!</code> is very rarely used. Most of the time they at least have volatile or a memory clobber.</p>",
        "id": 198728670,
        "sender_full_name": "Amanieu",
        "timestamp": 1590478700
    },
    {
        "content": "<p>By the way we already emit rustfix suggestions to use <code>llvm_asm!</code> if we detect use of the old style syntax with <code>:</code>.</p>",
        "id": 198728735,
        "sender_full_name": "Amanieu",
        "timestamp": 1590478731
    },
    {
        "content": "<p>(Is there an open bug for the errors not giving a source file? That seems pretty annoying.)</p>",
        "id": 198749813,
        "sender_full_name": "simulacrum",
        "timestamp": 1590493500
    },
    {
        "content": "<p>I'm working on it right now.</p>",
        "id": 198771009,
        "sender_full_name": "Amanieu",
        "timestamp": 1590503861
    },
    {
        "content": "<p>See <a href=\"https://github.com/rust-lang/rust/issues/72625\">#72625</a> for improved asm diagnostics.</p>",
        "id": 198812439,
        "sender_full_name": "Amanieu",
        "timestamp": 1590522539
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"143274\">Amanieu</span> <a href=\"#narrow/stream/216763-project-inline-asm/topic/Extra.20hint.20for.20old-style.20.60asm!.60.20with.20AT.26T.20syntax.3F/near/198728735\">said</a>:</p>\n<blockquote>\n<p>By the way we already emit rustfix suggestions to use <code>llvm_asm!</code> if we detect use of the old style syntax with <code>:</code>.</p>\n</blockquote>\n<p>I realized this; that's why I was asking about the case of no outputs, inputs, clobbers, or options, since then there'd be no <code>:</code>.</p>",
        "id": 198829908,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1590532474
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"143274\">Amanieu</span> <a href=\"#narrow/stream/216763-project-inline-asm/topic/Extra.20hint.20for.20old-style.20.60asm!.60.20with.20AT.26T.20syntax.3F/near/198728670\">said</a>:</p>\n<blockquote>\n<p>I think that would be extremely difficult to do reliably. Additionally I don't think it is such a big issue since operand-less <code>asm!</code> is very rarely used. Most of the time they at least have volatile or a memory clobber.</p>\n</blockquote>\n<p>I don't think it needs to be ultra-reliable. I'm talking about a heuristic like \"if the character is <code>$</code>, <code>%</code>, <code>(</code>, or a few other things, emit a hint that the asm syntax has changed\".</p>",
        "id": 198830055,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1590532587
    },
    {
        "content": "<p>I'd even be open to \"if the asm syntax has no arguments, so it's ambiguous whether it may be old-style or new style, and there's <em>any</em> syntax error in it, emit the hint\".</p>",
        "id": 198830099,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1590532638
    },
    {
        "content": "<p>That's actually quite tricky because of how we process syntax errors from the assembler.</p>",
        "id": 198830118,
        "sender_full_name": "Amanieu",
        "timestamp": 1590532671
    },
    {
        "content": "<p>By the time we get those we have lost almost all the syntax-level context associated with it.</p>",
        "id": 198830168,
        "sender_full_name": "Amanieu",
        "timestamp": 1590532693
    },
    {
        "content": "<p>So we can't even know if that asm was originally from asm!, llvm_asm! or even global_asm!.</p>",
        "id": 198830186,
        "sender_full_name": "Amanieu",
        "timestamp": 1590532713
    },
    {
        "content": "<p>That's unfortunate. It'd be really nice to be able to map them back up to the source file.</p>",
        "id": 198830570,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1590533020
    },
    {
        "content": "<p>Do we not have any way to tag them?</p>",
        "id": 198830582,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1590533034
    },
    {
        "content": "<p>Ah, I just read <a href=\"https://github.com/rust-lang/rust/pull/72625\">https://github.com/rust-lang/rust/pull/72625</a> about that.</p>",
        "id": 198830666,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1590533077
    }
]