[
    {
        "content": "<p>Does a block that reads from a special register count as <code>nomem</code>? What about <code>readonly</code>? Some examples of what I mean from aarch64 (at least on darwin):</p>\n<ol>\n<li>\n<p><code>\"mov {}, cntvct_el0\"</code>? Read the virtual timestamp counter (basically like <code>rdtsc</code> but with an even more abstract freq).</p>\n<p>This can return a different value each time, so it's definitely not <code>pure</code>, but it doesn't actually touch \"memory\", and certainly doesn't <em>write</em> anything...</p>\n<p>My gut says that <code>readonly</code> applies, but not <code>nomem</code>, but I am... not sure at all.</p>\n</li>\n<li>\n<p>A bit different (and much harder): <code>\"mov {}, tpidrro_el0\"</code>? Reads a thread id.</p>\n<p>This shouldn't change on this thread, but isn't globally fixed... I guess am unsure about all three of <code>readonly</code>, <code>nomem</code>, and <code>pure</code>, and don't even really have a very good guess.</p>\n</li>\n</ol>",
        "id": 264443060,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1639141238
    },
    {
        "content": "<p>Yes it is <code>nomem</code>, but it is not <code>pure</code>.</p>",
        "id": 264443315,
        "sender_full_name": "Amanieu",
        "timestamp": 1639141387
    },
    {
        "content": "<p>interesting</p>",
        "id": 264443333,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1639141401
    },
    {
        "content": "<p>So, that's the case for both of them? Easy enough</p>",
        "id": 264443561,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1639141527
    },
    {
        "content": "<p>It's definitely the case for the first one.</p>",
        "id": 264443579,
        "sender_full_name": "Amanieu",
        "timestamp": 1639141538
    },
    {
        "content": "<p>The second one is harder</p>",
        "id": 264443594,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1639141546
    },
    {
        "content": "<p>For the second one, it <em>might</em> be <code>pure</code> but I'm not sure.</p>",
        "id": 264443602,
        "sender_full_name": "Amanieu",
        "timestamp": 1639141553
    },
    {
        "content": "<p>I guess the concern is if the compiler could transform something like <code>thread::spawn(|| { let my_id = &lt;read id with asm&gt;; ...})</code> into something where the ID is computed outside the closure and passed in.</p>",
        "id": 264443751,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1639141628
    },
    {
        "content": "<p>I think it's not pure. Pure means that the output depends only on the inputs, but that's not the case here.</p>",
        "id": 264443810,
        "sender_full_name": "Amanieu",
        "timestamp": 1639141660
    },
    {
        "content": "<p>in practice that transform would require some, uh, serious compiler heroics, but seems legal</p>",
        "id": 264443839,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1639141671
    },
    {
        "content": "<p>yeah</p>",
        "id": 264443842,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1639141672
    },
    {
        "content": "<p>Okay.</p>",
        "id": 264443944,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1639141706
    },
    {
        "content": "<p>FWIW, it doesn't matter for the question, but just in case anybody tries to use the code above: It seems as though <code>tpidrro_el0</code> actually includes a few bits for the CPU number (at least 3 bits, but this machine has 8 cores, so perhaps a system-dependent number of bits) in addition to the thread pointer.</p>\n<p>I thought this might be the case, but didn't mention it because I wasn't sure (and was leaning the other way), and it doesn't make <em>that</em> much of a difference (as the asm can just mask these bits away before returning, which would lead to a value thats the same the whole time on the thread). Given the answer to the question, this doesn't matter, just thought I'd note it rather than leave the bug just sitting there.</p>",
        "id": 264450282,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1639144672
    },
    {
        "content": "<p>The value of <code>tpidrro_el0</code> is set by the OS, it's RO at EL0 and RW at EL1+.</p>",
        "id": 264450457,
        "sender_full_name": "Amanieu",
        "timestamp": 1639144746
    },
    {
        "content": "<p>right, i meant read then mask</p>",
        "id": 264453812,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1639146203
    },
    {
        "content": "<p>as in <code>asm!(\"mrs {0}, tpidrro_el0\", \"bic {0}, {0}, 7\", out(reg)result, options(...))</code> (my masking is actually done in rust, but to make sense for the quesiton it would have to be done in before exiting the asm)</p>",
        "id": 264454396,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1639146445
    }
]