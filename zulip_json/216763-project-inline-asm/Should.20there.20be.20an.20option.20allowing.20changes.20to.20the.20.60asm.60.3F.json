[
    {
        "content": "<p>Another question, this is more hypothetical. The rules are very explicit that the compiler is forbidden from even peeking inside <code>asm!</code>:</p>\n<blockquote>\n<p>The compiler cannot assume that the instructions in the asm are the ones that will actually end up executed.</p>\n<ul>\n<li>This effectively means that the compiler must treat the <code>asm!</code> as a black box and only take the interface specification into account, not the instructions themselves.</li>\n<li>Runtime code patching is allowed, via target-specific mechanisms (outside the scope of this RFC).</li>\n</ul>\n</blockquote>\n<p>So FWIW, I'm extremely glad this is present, on by default, and defined in a very robust way — it is hard to imagine even the bravest compiler touching it when runtime patching is allowed.</p>\n<p>That said... I don't always need to do something tricky. I might just need to use an instruction with no intrinsic, or to futz with some register that has no high level equivalent. So, I'm wondering if there's intention to add a flag that allows a compiler to parse/optimize the asm (specifcally, to apply some form of \"as-if\" rule).</p>\n<p>I believe GCC (perhaps Clang? IDR) will do some minor optimizations to non-volatile inline asm, such as constant propagation, using a better addressing mode (for example combining pointer arithmetic from outside the asm with a load/store from inside the asm), and that sort of thing.</p>\n<p>There doesn't seem to be a flag that corresponds to telling the compiler this kind of thing is okay (unless I'm mistaken?)</p>",
        "id": 264445588,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1639142498
    },
    {
        "content": "<p>Admittedly, most of the time the current behavior is nice, and it's never actually <em>wrong</em>.</p>",
        "id": 264445833,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1639142593
    },
    {
        "content": "<p>For example: I notice that there's no support for a <code>mem</code> operand types (like <code>m</code> in classic C-style inline asm) — maybe we'll eventually get something like that... but in some cases it might not be needed if there were a way for less tricky asm blocks to untie the compiler's hands a little bit more... perhaps, anyway.</p>",
        "id": 264446393,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1639142820
    },
    {
        "content": "<p>Neither GCC nor Clang will optimize anything in inline asm. The addressing mode thing is done with special operand constraints which allow memory operands.</p>",
        "id": 264446485,
        "sender_full_name": "Amanieu",
        "timestamp": 1639142860
    },
    {
        "content": "<p>Hmm, I see</p>",
        "id": 264446498,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1639142867
    },
    {
        "content": "<p>All that does is change what the compiler is allowed to substitute in for an operand. It doesn't look at the actual assembly text.</p>",
        "id": 264446611,
        "sender_full_name": "Amanieu",
        "timestamp": 1639142911
    },
    {
        "content": "<p>I'm almost certain i've seen stuff like constant numbers passed functions with inline asm in the body turned into instructions that use those constants as immediates — that's what I meant by constant propagation</p>",
        "id": 264446664,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1639142941
    },
    {
        "content": "<p>I guess I did imagine it went further than that, though.</p>",
        "id": 264446730,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1639142970
    },
    {
        "content": "<p>That's done with multi-operand constraints in C: <code>\"irm\"</code> means try to encode this operand as an immediate, otherwise as a register, otherwise as a memory addressing mode. We don't support that.</p>",
        "id": 264446822,
        "sender_full_name": "Amanieu",
        "timestamp": 1639143006
    },
    {
        "content": "<p>Hmmm</p>",
        "id": 264446840,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1639143013
    },
    {
        "content": "<p>That'd be a bit surprising, since I've never used <code>i</code> (I believe I just learned about it right now), but it was a while ago and I could be wrong about something or another.</p>",
        "id": 264447034,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1639143113
    }
]