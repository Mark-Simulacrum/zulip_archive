[
    {
        "content": "<p>I'm considering adding <code>asm_snippet!</code> which can be used to define bits of asm code that can be used within a larger <code>asm!</code> block</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"fm\">macro_rules!</span><span class=\"w\"> </span><span class=\"n\">snippet</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"cp\">$arg</span>:<span class=\"nc\">expr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">asm_snippet</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"c1\">// Template code</span>\n<span class=\"w\">            </span><span class=\"s\">\"mul {arg}, {arg}\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"c1\">// Snippet can define arguments (named only)</span>\n<span class=\"w\">            </span><span class=\"n\">arg</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">inout</span><span class=\"p\">(</span><span class=\"n\">reg</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"cp\">$arg</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"fm\">asm!</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">snippet</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// You can use arguments defined in the snippet outside of it</span>\n<span class=\"w\">    </span><span class=\"s\">\"add {arg}, {arg}\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 232865507,
        "sender_full_name": "Amanieu",
        "timestamp": 1617344598
    },
    {
        "content": "<p>For a more complex example, consider the new/old code <a href=\"https://gist.github.com/Amanieu/d97c420c00cd51fad556b633e0d87af1\">here</a>.</p>",
        "id": 232865619,
        "sender_full_name": "Amanieu",
        "timestamp": 1617344659
    },
    {
        "content": "<p>This is also partially motivated by a desire to better handle labels in asm using special syntax as proposed <a href=\"https://github.com/rust-lang/rust/issues/81088#issuecomment-773556634\">here</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"fm\">asm!</span><span class=\"p\">(</span><span class=\"n\">foo</span>: <span class=\"s\">\"jmp {foo}\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 232865789,
        "sender_full_name": "Amanieu",
        "timestamp": 1617344844
    },
    {
        "content": "<p>This doesn't work with the old method for asm snippets where we can only import a string literal from a macro (see the first linked example).</p>",
        "id": 232865808,
        "sender_full_name": "Amanieu",
        "timestamp": 1617344871
    },
    {
        "content": "<p>So, an asm snippet is a self-contained bundle of assembly, with parameters and labels encapsulated?</p>",
        "id": 232883023,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617358543
    },
    {
        "content": "<p>Also, what is the motivation for allowing use of snippet arguments from outside the snippet? Shouldn't they have to be namespaced relative to the snippet?</p>",
        "id": 232883189,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617358676
    },
    {
        "content": "<p>(As in, snippet_name.arg or similar.)</p>",
        "id": 232883260,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617358708
    },
    {
        "content": "<p>Snippets don't have a name.</p>",
        "id": 232883293,
        "sender_full_name": "Amanieu",
        "timestamp": 1617358740
    },
    {
        "content": "<p>I'm wondering if it would make sense to have snippets be a named argument and then substituted into the assembly.</p>",
        "id": 232883299,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617358746
    },
    {
        "content": "<p>(Was in the process of writing that.)</p>",
        "id": 232883317,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617358759
    },
    {
        "content": "<p>And the intent is that you could share a single operand between the snippet and the main assembly.</p>",
        "id": 232883329,
        "sender_full_name": "Amanieu",
        "timestamp": 1617358766
    }
]