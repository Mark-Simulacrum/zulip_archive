[
    {
        "content": "<p>Is there a way to mark an assembly block as not clobbering the dirflag or the floating-point status, but still clobbering the flags? That would be a common combination, since it's relatively easy to not accidentally clobber the dirflag and floating-point status, and difficult to not touch the flags unless you save/restore them.</p>",
        "id": 197627125,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589495787
    },
    {
        "content": "<p>Honestly it's really not a big deal</p>",
        "id": 197627804,
        "sender_full_name": "Amanieu",
        "timestamp": 1589496308
    },
    {
        "content": "<p>The compiler will generally use the flags immediately after it has generated them (in fact it prefers that since Intel CPUs do instruction fusion in such cases).</p>",
        "id": 197627828,
        "sender_full_name": "Amanieu",
        "timestamp": 1589496335
    },
    {
        "content": "<p>So IMO it's not worth the trouble of adding these.</p>",
        "id": 197627894,
        "sender_full_name": "Amanieu",
        "timestamp": 1589496369
    },
    {
        "content": "<p>I could change the rule for the direction flag to say that it must always be reset to 0 after executing asm code.</p>",
        "id": 197627953,
        "sender_full_name": "Amanieu",
        "timestamp": 1589496429
    },
    {
        "content": "<p>(i.e. effectively remove <code>~dirflag</code> from the LLVM clobbers)</p>",
        "id": 197627977,
        "sender_full_name": "Amanieu",
        "timestamp": 1589496461
    },
    {
        "content": "<p>dirflag was what I was thinking of, yes. It'd be nice for the compiler to not need to re-set it after every asm block.</p>",
        "id": 197628040,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589496492
    },
    {
        "content": "<p>And most code will never touch it.</p>",
        "id": 197628043,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589496495
    },
    {
        "content": "<p>I think it's reasonable to drop that from the default clobbers, and offer a way to clobber it explicitly.</p>",
        "id": 197628057,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589496507
    },
    {
        "content": "<p>OK I'll modify the RFC accordingly. I don't think it's necessary to provide a way to clobber it. Just require that it be reset to 0 should be enough, this is what the x86 function call ABI requires anyways.</p>",
        "id": 197628137,
        "sender_full_name": "Amanieu",
        "timestamp": 1589496581
    },
    {
        "content": "<p>Clobbering it has the advantage of letting the compiler consolidate setting it.</p>",
        "id": 197628252,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589496655
    },
    {
        "content": "<p>(Or not bother, if it already has to push and pop flags, for instance.)</p>",
        "id": 197628284,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589496681
    },
    {
        "content": "<p>LLVM has a clobber for this; is it just that you don't want to offer a way to name it?</p>",
        "id": 197628313,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589496707
    },
    {
        "content": "<p>(I do appreciate saying \"set to 0\" rather than \"preserve\", though; that way the assembly code doesn't have to save its current value.)</p>",
        "id": 197628413,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589496768
    },
    {
        "content": "<p>Also, the floating-point <em>exception</em> status (as opposed to floating-point flags) seems like something the compiler shouldn't need to restore by default. Most assembly will never touch that either.</p>",
        "id": 197628486,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589496811
    },
    {
        "content": "<p>Then <code>preserves_flags</code> will just refer to flags, and there could be a combined clobber for the rest (making the compiler restore dirflag and floating-point exception status if it needs them).</p>",
        "id": 197628685,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589496927
    },
    {
        "content": "<p>Floating point mode flags (rounding mode, flush to zero, etc) are treated as \"global state\". Therefore they are not covered by input/output/clobbers.</p>",
        "id": 197631793,
        "sender_full_name": "Amanieu",
        "timestamp": 1589499241
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> My rule of thumb for <code>preserves_flags</code> is that it covers any flag that is not preserved by function calls (i.e \"volatile\" flags)</p>",
        "id": 197632155,
        "sender_full_name": "Amanieu",
        "timestamp": 1589499549
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 197632440,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589499800
    },
    {
        "content": "<p>Then let's focus on dirflag.</p>",
        "id": 197632523,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589499843
    },
    {
        "content": "<p>Actually I'm not sure it's that simple:</p>\n<ul>\n<li>Is the dirflag guaranteed to be clear on entry to asm?</li>\n<li>If I don't clobber dirflag, am I allowed to clear it?</li>\n</ul>",
        "id": 197634045,
        "sender_full_name": "Amanieu",
        "timestamp": 1589501090
    },
    {
        "content": "<p>I think the answer is no to both.</p>",
        "id": 197634056,
        "sender_full_name": "Amanieu",
        "timestamp": 1589501101
    },
    {
        "content": "<p>I would rather just keep <code>preserves_flags</code> as it is right now.</p>",
        "id": 197634069,
        "sender_full_name": "Amanieu",
        "timestamp": 1589501111
    },
    {
        "content": "<p>It's not worth the added complexity just to allow the compiler to elide a CLD instruction.</p>",
        "id": 197634088,
        "sender_full_name": "Amanieu",
        "timestamp": 1589501127
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"143274\">Amanieu</span> <a href=\"#narrow/stream/216763-project-inline-asm/topic/.60preserves_flags.60.20for.20everything.20*but*.20the.20flags.20register.3F/near/197634056\">said</a>:</p>\n<blockquote>\n<p>I think the answer is no to both.</p>\n</blockquote>\n<p>I very much hope the answer to \"is the dirflag guaranteed to be clear on entry to asm\" is <em>yes</em>. I'd like to avoid having to put <code>cld</code> instructions inside the asm every time they use a string instruction.</p>",
        "id": 197777895,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589606399
    },
    {
        "content": "<p>Doesn't the ABI guarantee that?</p>",
        "id": 197777935,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589606418
    },
    {
        "content": "<p>Because inline assembly in C normally assumes that.</p>",
        "id": 197777944,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589606474
    },
    {
        "content": "<p>And it'd be a really subtle trap for inline assembly authors if they couldn't assume that in Rust. I don't think that buys us anything, either.</p>",
        "id": 197777958,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589606522
    },
    {
        "content": "<p>The function call ABI guarantees that. I am not sure what GCC/LLVM guarantee for inline asm.</p>",
        "id": 197790620,
        "sender_full_name": "Amanieu",
        "timestamp": 1589627439
    },
    {
        "content": "<p>I think that GCC and LLVM never set the direction flag, or if they do they immediately clear it when done.</p>",
        "id": 197801626,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589644054
    },
    {
        "content": "<p>So unless some function or assembly violates the ABI, I don't see how it could ever be set.</p>",
        "id": 197801685,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589644104
    },
    {
        "content": "<p>So apparently LLVM always assumes the direction flag is clear and never sets it.</p>",
        "id": 197806760,
        "sender_full_name": "Amanieu",
        "timestamp": 1589651373
    },
    {
        "content": "<p>That sounds about right.</p>",
        "id": 197806847,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589651488
    },
    {
        "content": "<p>Certainly every bit of inline assembly I've ever seen that uses string instructions makes exactly the same assumption.</p>",
        "id": 197806859,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589651504
    },
    {
        "content": "<p>LLVM also apparently doesn't reset the direction flag after asm has clobbered it :P</p>",
        "id": 197807479,
        "sender_full_name": "Amanieu",
        "timestamp": 1589652334
    },
    {
        "content": "<p>Even if asm declares it as clobbered?</p>",
        "id": 197807534,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589652371
    },
    {
        "content": "<p>That sounds like a bug.</p>",
        "id": 197807541,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589652383
    },
    {
        "content": "<p>Same with GCC.</p>",
        "id": 197807853,
        "sender_full_name": "Amanieu",
        "timestamp": 1589652896
    },
    {
        "content": "<p>Huh. That sounds like a good argument for saying that, at least for now, you <em>must</em> clear the direction flag if you set it.</p>",
        "id": 197807870,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589652951
    },
    {
        "content": "<p>We might be able to lift that restriction if that bug is fixed, but given how <em>rarely</em> the direction flag is set, I don't think it'll be an issue in practice.</p>",
        "id": 197807911,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589652971
    },
    {
        "content": "<p>Yes. However with GCC the direction flag is not guaranteed to be cleared on entry to asm.</p>",
        "id": 197807920,
        "sender_full_name": "Amanieu",
        "timestamp": 1589652986
    },
    {
        "content": "<p>This can only happen in one specific scenario: you are using the x86 interrupt calling convention and the code you interrupted has set the direction flag.</p>",
        "id": 197807930,
        "sender_full_name": "Amanieu",
        "timestamp": 1589653014
    },
    {
        "content": "<p>GCC lazily clears the direction flag only if it is needed in the function.</p>",
        "id": 197807941,
        "sender_full_name": "Amanieu",
        "timestamp": 1589653041
    },
    {
        "content": "<p>So I'm going to go with: direction flag is undefined on entry, and must be preserved or reset on exit.</p>",
        "id": 197808100,
        "sender_full_name": "Amanieu",
        "timestamp": 1589653278
    },
    {
        "content": "<p>It sounds like LLVM guarantees that it's cleared on entry, though.</p>",
        "id": 197808240,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589653491
    },
    {
        "content": "<p>And since we actually use LLVM, it seems reasonable to define <code>asm!</code> blocks as such. Otherwise <em>everyone</em> using any string instruction would have to <code>cld</code> first. That'd be a major surprise to anyone writing inline assembly, and a divergence from expectations based on C/C++ inline assembly.</p>",
        "id": 197808253,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589653546
    },
    {
        "content": "<p>And in practice, most people will assume it's clear anyway, even if we declared that to be undefined.</p>",
        "id": 197808297,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589653565
    },
    {
        "content": "<p>Could we define it as \"clear on entry, must be clear on exit\", and then if we need to port to a compiler that doesn't guarantee that, and we can't fix the compiler, we can always put the <code>cld</code> at the beginning of the ASM ourselves?</p>",
        "id": 197808307,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589653603
    },
    {
        "content": "<p>If you look at inline asm in the Linux kernel, they always call <code>cld</code> before using string ops.</p>",
        "id": 197808309,
        "sender_full_name": "Amanieu",
        "timestamp": 1589653614
    },
    {
        "content": "<p>I did, and they don't.</p>",
        "id": 197808311,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589653620
    },
    {
        "content": "<p><code>arch/x86/lib/string_32.c</code></p>",
        "id": 197808323,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589653648
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"nf\">strcpy</span><span class=\"p\">(</span><span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">dest</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">src</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">d0</span><span class=\"p\">,</span> <span class=\"n\">d1</span><span class=\"p\">,</span> <span class=\"n\">d2</span><span class=\"p\">;</span>\n        <span class=\"k\">asm</span> <span class=\"k\">volatile</span><span class=\"p\">(</span><span class=\"s\">&quot;1:</span><span class=\"se\">\\t</span><span class=\"s\">lodsb</span><span class=\"se\">\\n\\t</span><span class=\"s\">&quot;</span>\n                <span class=\"s\">&quot;stosb</span><span class=\"se\">\\n\\t</span><span class=\"s\">&quot;</span>\n                <span class=\"s\">&quot;testb %%al,%%al</span><span class=\"se\">\\n\\t</span><span class=\"s\">&quot;</span>\n                <span class=\"s\">&quot;jne 1b&quot;</span>\n                <span class=\"o\">:</span> <span class=\"s\">&quot;=&amp;S&quot;</span> <span class=\"p\">(</span><span class=\"n\">d0</span><span class=\"p\">),</span> <span class=\"s\">&quot;=&amp;D&quot;</span> <span class=\"p\">(</span><span class=\"n\">d1</span><span class=\"p\">),</span> <span class=\"s\">&quot;=&amp;a&quot;</span> <span class=\"p\">(</span><span class=\"n\">d2</span><span class=\"p\">)</span>\n                <span class=\"o\">:</span> <span class=\"s\">&quot;0&quot;</span> <span class=\"p\">(</span><span class=\"n\">src</span><span class=\"p\">),</span> <span class=\"s\">&quot;1&quot;</span> <span class=\"p\">(</span><span class=\"n\">dest</span><span class=\"p\">)</span> <span class=\"o\">:</span> <span class=\"s\">&quot;memory&quot;</span><span class=\"p\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">dest</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 197808340,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589653673
    },
    {
        "content": "<p>huh</p>",
        "id": 197808394,
        "sender_full_name": "Amanieu",
        "timestamp": 1589653703
    },
    {
        "content": "<p>They do have <code>cld</code> instructions after calling or otherwise receiving control flow from code they don't trust, like BIOS.</p>",
        "id": 197808408,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589653734
    },
    {
        "content": "<p>But not in general.</p>",
        "id": 197808414,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589653746
    },
    {
        "content": "<p>The only other place I see <code>cld</code> instructions is after they've done an <code>std</code>.</p>",
        "id": 197808426,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589653792
    },
    {
        "content": "<p>I guess they can get away with it since they don't use <code>__attribute__((interrupt))</code>.</p>",
        "id": 197808427,
        "sender_full_name": "Amanieu",
        "timestamp": 1589653793
    },
    {
        "content": "<p><a href=\"https://godbolt.org/z/hL2GFJ\">https://godbolt.org/z/hL2GFJ</a></p>",
        "id": 197808480,
        "sender_full_name": "Amanieu",
        "timestamp": 1589653829
    },
    {
        "content": "<p>Notice how LLVM executes <code>cld</code> before any user code, while GCC does it lazily only when it is needed (calling another function).</p>",
        "id": 197808489,
        "sender_full_name": "Amanieu",
        "timestamp": 1589653864
    },
    {
        "content": "<p>Interesting!</p>",
        "id": 197808496,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589653901
    },
    {
        "content": "<p>Seems like there's at least one bug here.</p>",
        "id": 197808499,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589653917
    },
    {
        "content": "<p>I'm happy to require the direction flag to be 0 for inline asm, but we'll have to change it in GCC when we get a GCC backend.</p>",
        "id": 197808540,
        "sender_full_name": "Amanieu",
        "timestamp": 1589653953
    },
    {
        "content": "<p>That seems fine to me.</p>",
        "id": 197808541,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589653960
    },
    {
        "content": "<p>I'm hoping we do so by fixing GCC.</p>",
        "id": 197808548,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589653987
    },
    {
        "content": "<p>But in any case, even if we have to <code>cld</code> explicitly at the beginning of any function containing inline assembly (on GCC, as a workaround), that'd be fine with me.</p>",
        "id": 197808554,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589654012
    },
    {
        "content": "<p>That's better than telling people to do something we know most of them won't do.</p>",
        "id": 197808557,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589654039
    },
    {
        "content": "<p>(And in theory, we might only need to <code>cld</code> at the beginning of a function declared with the interrupt calling convention.)</p>",
        "id": 197808600,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589654083
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rfcs/pull/2873/commits/3633849ed0d0bf3fe29e729d513d4e812aa1de53\">https://github.com/rust-lang/rfcs/pull/2873/commits/3633849ed0d0bf3fe29e729d513d4e812aa1de53</a> looks good, thank you.</p>",
        "id": 197808674,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589654242
    }
]