[
    {
        "content": "<p>At this point the draft RFC is almost ready. The last issue that needs to be resolved is <a href=\"https://github.com/rust-lang/project-inline-asm/issues/5\" target=\"_blank\" title=\"https://github.com/rust-lang/project-inline-asm/issues/5\">rust-lang/project-inline-asm#5</a>.</p>",
        "id": 185297532,
        "sender_full_name": "Amanieu",
        "timestamp": 1578651638
    },
    {
        "content": "<p>Basically we need a specification for what implicit state inline asm is/isn't allowed to modify.</p>",
        "id": 185297567,
        "sender_full_name": "Amanieu",
        "timestamp": 1578651667
    },
    {
        "content": "<p>And define the exact semantics of <code>preserves_flags</code>.</p>",
        "id": 185297577,
        "sender_full_name": "Amanieu",
        "timestamp": 1578651676
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> i'm not sure what to think about that</p>",
        "id": 185304977,
        "sender_full_name": "gnzlbg",
        "timestamp": 1578658734
    },
    {
        "content": "<p>on one hand, we want to tell the compiler to assume the worst about <code>asm!</code> blocks, to prevent mistakes, like the user forgetting to write <code>invalidates_flags</code></p>",
        "id": 185305009,
        "sender_full_name": "gnzlbg",
        "timestamp": 1578658765
    },
    {
        "content": "<p>(which is why <code>preserves_flags</code> is an extra guarantee)</p>",
        "id": 185305025,
        "sender_full_name": "gnzlbg",
        "timestamp": 1578658782
    },
    {
        "content": "<p>on the other, it would be simpler to just say that an <code>asm!</code> can do the same things as an unknown function call, but I guess that defeats the point</p>",
        "id": 185305083,
        "sender_full_name": "gnzlbg",
        "timestamp": 1578658809
    },
    {
        "content": "<p>its unclear to me how not writing <code>preserves_flags</code> would work</p>",
        "id": 185305130,
        "sender_full_name": "gnzlbg",
        "timestamp": 1578658856
    },
    {
        "content": "<p>does it mean that <code>asm!(\"...modifies flags...\"); asm!(\"...assert modification or panic...\")</code> is guaranteed to \"never panic\" ?</p>",
        "id": 185305158,
        "sender_full_name": "gnzlbg",
        "timestamp": 1578658898
    },
    {
        "content": "<p>afaict llvm could modify the flags between both <code>asm!</code> statements</p>",
        "id": 185305179,
        "sender_full_name": "gnzlbg",
        "timestamp": 1578658921
    },
    {
        "content": "<p>or maybe worse, insert some code in-between that assumes that these flags have not been modified</p>",
        "id": 185305256,
        "sender_full_name": "gnzlbg",
        "timestamp": 1578658966
    },
    {
        "content": "<p>Basically <code>preserves_flags</code> is intended as the inverse of the <code>\"cc\"</code> clobber.</p>",
        "id": 185306638,
        "sender_full_name": "Amanieu",
        "timestamp": 1578660253
    },
    {
        "content": "<p>If I wanted to leave some questions/feedback on the pre-RFC in the repo there, is opening an issue in the repo the best place to do that?</p>",
        "id": 185341190,
        "sender_full_name": "bstrie",
        "timestamp": 1578683545
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256342\">@bstrie</span> Yes, please do.</p>",
        "id": 185349362,
        "sender_full_name": "Amanieu",
        "timestamp": 1578688980
    },
    {
        "content": "<p>OK I just posted <a href=\"https://github.com/rust-lang/project-inline-asm/issues/10\" target=\"_blank\" title=\"https://github.com/rust-lang/project-inline-asm/issues/10\">rust-lang/project-inline-asm#10</a>, which fixes our last unresolved issue.</p>",
        "id": 185406802,
        "sender_full_name": "Amanieu",
        "timestamp": 1578779805
    },
    {
        "content": "<p>I'll publish the RFC once it is merged, so if you have any feedback in mind please say so now.</p>",
        "id": 185406820,
        "sender_full_name": "Amanieu",
        "timestamp": 1578779842
    },
    {
        "content": "<p>Don't worry if you miss it, there is still the possibility of providing feedback during the official RFC process.</p>",
        "id": 185406826,
        "sender_full_name": "Amanieu",
        "timestamp": 1578779866
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> Since you're the lang team liason, do you have any objections to publishing the RFC once <a href=\"https://github.com/rust-lang/project-inline-asm/issues/10\" target=\"_blank\" title=\"https://github.com/rust-lang/project-inline-asm/issues/10\">rust-lang/project-inline-asm#10</a> is merged?</p>",
        "id": 185442028,
        "sender_full_name": "Amanieu",
        "timestamp": 1578849589
    },
    {
        "content": "<p>The RFC is now up at <a href=\"https://github.com/rust-lang/rfcs/issues/2850\" target=\"_blank\" title=\"https://github.com/rust-lang/rfcs/issues/2850\">rust-lang/rfcs#2850</a>!</p>",
        "id": 185502846,
        "sender_full_name": "Amanieu",
        "timestamp": 1578929063
    },
    {
        "content": "<p>Ah, I didn't realize the rfc was about to be published so I didn't rush :P I've just left some comments on the rfc</p>",
        "id": 185527903,
        "sender_full_name": "bstrie",
        "timestamp": 1578943674
    },
    {
        "content": "<p>Sorry that I didn't see this message, but the answer at the time was \"no, no objections, go ahead\". :)</p>",
        "id": 185740661,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1579120200
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> what happens with backends that do not support inline assembly for a particular target ?</p>",
        "id": 186115587,
        "sender_full_name": "gnzlbg",
        "timestamp": 1579537477
    },
    {
        "content": "<p>The RFC mentions that we can always implement inline assembly without backend support</p>",
        "id": 186115602,
        "sender_full_name": "gnzlbg",
        "timestamp": 1579537493
    },
    {
        "content": "<p>but my question is more: what happens until somebody implements that?</p>",
        "id": 186115613,
        "sender_full_name": "gnzlbg",
        "timestamp": 1579537505
    },
    {
        "content": "<p>Trying to use the backend for that target should fail, but the RFC does not say</p>",
        "id": 186115640,
        "sender_full_name": "gnzlbg",
        "timestamp": 1579537541
    },
    {
        "content": "<p>I expect it to be possible to use such Rust backends to compile Rust programs, as long as these programs do not try to use anything that uses <code>asm!</code></p>",
        "id": 186115709,
        "sender_full_name": "gnzlbg",
        "timestamp": 1579537571
    },
    {
        "content": "<p>but if they try to use <code>asm!</code>, then I expect a nice error</p>",
        "id": 186115724,
        "sender_full_name": "gnzlbg",
        "timestamp": 1579537586
    },
    {
        "content": "<p>I expect that adding fallback asm support would be a requirement to adding new backends if they don't support inline asm</p>",
        "id": 186120093,
        "sender_full_name": "Amanieu",
        "timestamp": 1579540940
    },
    {
        "content": "<p>Basically, I don't want asm! to depend on the particular backend in use.</p>",
        "id": 186120107,
        "sender_full_name": "Amanieu",
        "timestamp": 1579540967
    },
    {
        "content": "<p>It should just work.</p>",
        "id": 186120114,
        "sender_full_name": "Amanieu",
        "timestamp": 1579540976
    },
    {
        "content": "<p>That sounds like the opposite of a good time</p>",
        "id": 186120123,
        "sender_full_name": "Lokathor",
        "timestamp": 1579540983
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> that means that we need to break powerpc, sparc64, wasm, and all other targets on stable Rust the moment <code>asm!</code> gets stabilized</p>",
        "id": 186123412,
        "sender_full_name": "gnzlbg",
        "timestamp": 1579544247
    },
    {
        "content": "<p>or</p>",
        "id": 186123414,
        "sender_full_name": "gnzlbg",
        "timestamp": 1579544249
    },
    {
        "content": "<p>that we can't stabilize <code>asm!</code> until all currently supported targets on stable using the LLVM wrapper work</p>",
        "id": 186123426,
        "sender_full_name": "gnzlbg",
        "timestamp": 1579544266
    },
    {
        "content": "<p>(that requires submitting RFCs implementing <code>asm!</code> for all targets currently supported on stable, which are many)</p>",
        "id": 186123506,
        "sender_full_name": "gnzlbg",
        "timestamp": 1579544317
    },
    {
        "content": "<p>notice that I'm not talking about backends</p>",
        "id": 186123543,
        "sender_full_name": "gnzlbg",
        "timestamp": 1579544354
    },
    {
        "content": "<p>I'm talking about targets within a backend</p>",
        "id": 186123549,
        "sender_full_name": "gnzlbg",
        "timestamp": 1579544360
    },
    {
        "content": "<p>e.g., if LLVM adds support for a new target, then a rust LLVM upgrade must be blocked on either implementing <code>asm!</code> for that target, or implementing a check that rejects that target</p>",
        "id": 186123632,
        "sender_full_name": "gnzlbg",
        "timestamp": 1579544410
    },
    {
        "content": "<p>for LLVM this might be minor, but the amount of work required to support a new target for cranelift isn't minor</p>",
        "id": 186123680,
        "sender_full_name": "gnzlbg",
        "timestamp": 1579544466
    },
    {
        "content": "<p>this means that as backends add support for new targets, we'll be blocking being able to use them from Rust until somebody implements <code>asm!</code> support for them</p>",
        "id": 186123700,
        "sender_full_name": "gnzlbg",
        "timestamp": 1579544495
    },
    {
        "content": "<p>that seems unreasonable</p>",
        "id": 186123703,
        "sender_full_name": "gnzlbg",
        "timestamp": 1579544500
    },
    {
        "content": "<p>We can stabilize asm! for different architectures separately.</p>",
        "id": 186123937,
        "sender_full_name": "Amanieu",
        "timestamp": 1579544708
    },
    {
        "content": "<p>Keep in mind the new asm! need specific rustc support for each architecture, so an LLVM upgrade won't break existing targets.</p>",
        "id": 186123967,
        "sender_full_name": "Amanieu",
        "timestamp": 1579544747
    },
    {
        "content": "<p>The way I see it working is that initially cranelift will use the external assembler for all targets, and as support is added then some of these will switch to the builtin cranelift support/</p>",
        "id": 186124042,
        "sender_full_name": "Amanieu",
        "timestamp": 1579544799
    },
    {
        "content": "<p>So... suppose we stabilize asm! for RISC-V</p>",
        "id": 186124389,
        "sender_full_name": "gnzlbg",
        "timestamp": 1579545126
    },
    {
        "content": "<p>and that works, because we can only use the LLVM backed for RISC-V</p>",
        "id": 186124398,
        "sender_full_name": "gnzlbg",
        "timestamp": 1579545136
    },
    {
        "content": "<p>then Cranelift adds support for RISC-V, and cranelift does not support inline assembly</p>",
        "id": 186124403,
        "sender_full_name": "gnzlbg",
        "timestamp": 1579545143
    },
    {
        "content": "<p>we upgrade Cranelift in rustc, shall we block the Cranelift upgrade on adding either support for <code>asm!</code> on cranelift for RISC-V or on forbidding users of the Cranelift backed to target RISC-V after the upgrade?</p>",
        "id": 186124427,
        "sender_full_name": "gnzlbg",
        "timestamp": 1579545181
    },
    {
        "content": "<p>even if we were to use the external assembly for cranelift, we would need to add support to rustc for using an external assembler for riscv</p>",
        "id": 186124532,
        "sender_full_name": "gnzlbg",
        "timestamp": 1579545285
    },
    {
        "content": "<p>since we did not need that for the LLVM backend, and I doubt one can \"reuse\" the code for other assemblers, since each assembly language for each target is sufficiently different</p>",
        "id": 186124566,
        "sender_full_name": "gnzlbg",
        "timestamp": 1579545323
    },
    {
        "content": "<p>I don't expect the external assembler part to be too difficult. It is indeed arch-specific, but it shouldn't be too difficult to port once the initial support has been implemented.</p>",
        "id": 186126530,
        "sender_full_name": "Amanieu",
        "timestamp": 1579547434
    },
    {
        "content": "<p>It seems far better to make <code>asm!</code> a \"bonus\" ability for a target to have, and not block adding a target based on <code>asm!</code> being supported or not. The same as we would not block a new target based on complete <code>core::arch</code> support or not.</p>",
        "id": 186131209,
        "sender_full_name": "Lokathor",
        "timestamp": 1579552348
    },
    {
        "content": "<p>er, target yes, I think (maybe fits into \"tiers\" in some sense), but I believe <span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> is more so talking about codegen backends</p>",
        "id": 186132539,
        "sender_full_name": "simulacrum",
        "timestamp": 1579553831
    },
    {
        "content": "<p>i.e., we would expect all codegen backends to support asm (in some fashion), but maybe some non-tier 1 targets don't</p>",
        "id": 186132566,
        "sender_full_name": "simulacrum",
        "timestamp": 1579553857
    },
    {
        "content": "<p>and I think that fits into assembly well overall anyway, right? Since for e.g. ARM you'd need different assembly presumably?</p>",
        "id": 186132576,
        "sender_full_name": "simulacrum",
        "timestamp": 1579553877
    },
    {
        "content": "<p>(Also we should maybe try to be extra clear going forward in this thread what is a requirement for rust the language, in terms of being a compliant compiler of that language, and what's a requirement for rustc itself, being a specific compiler of that language.</p>\n<p>And then with that distinction we can also question what non-rustc compilers, such as Cranelift and any other future compilers, would have to do to be considered a working rust compiler.)</p>",
        "id": 186133957,
        "sender_full_name": "Lokathor",
        "timestamp": 1579555184
    },
    {
        "content": "<p>I don't think that distinction is meaningful at this point; there is really only one Rust compiler.</p>",
        "id": 186135012,
        "sender_full_name": "simulacrum",
        "timestamp": 1579556239
    },
    {
        "content": "<p>or at least I don't see how anything I've seen so far is affected by it</p>",
        "id": 186135017,
        "sender_full_name": "simulacrum",
        "timestamp": 1579556251
    },
    {
        "content": "<p>people have definitely been concerned this whole time how any of this affects Cranelift.</p>",
        "id": 186142814,
        "sender_full_name": "Lokathor",
        "timestamp": 1579565906
    },
    {
        "content": "<p>Sure - but that's not an issue of language spec or not, I think? i.e. we're only ever discussing basically language spec</p>",
        "id": 186147976,
        "sender_full_name": "simulacrum",
        "timestamp": 1579574287
    },
    {
        "content": "<p>Amanieu said \"we can stabilize <code>asm!</code> for different targets separately\", and that is pretty obviously a statement of proposed Mozilla Rustc policy. That clearly can't be language spec policy. The language itself either contains <code>asm!</code> or not. Those are the only two possible states. Beyond that the support level per compilation target is a compiler specific concern.</p>\n<p>You mentioned non-tier 1 targets, but the entire tier target policy is also a Mozilla Rustc concern, I don't think that Cranelift or any other compiler needs to subscribe to the same tiering or tier qualifications as Mozilla Rustc uses.</p>\n<p>So it's a totally fair question to ask for clarification to the question of \"what happens when a compiler doesn't support inline <code>asm!</code> on a given target?\" And the answer is going to be a little bit language spec and a lot bit Mozilla Rustc, and then other compiler projects are going to have to decide what they want to do as well based on the little bit that's language spec.</p>",
        "id": 186153021,
        "sender_full_name": "Lokathor",
        "timestamp": 1579581877
    },
    {
        "content": "<p>A bit tangential, but that question goes beyond <code>asm!</code>. For example, mrustc doesn't currently support borrow checking — is it \"a Rust compiler\"?</p>",
        "id": 186194442,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1579620984
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> Please don't use the phrase \"Mozilla rustc\". There's only the one rustc, and it's not a Mozilla project, it's the compiler built by the Rust community.</p>",
        "id": 186205120,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1579627070
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> If you really want to distinguish between \"the Rust compiler\" and \"the Rust language\" (as theoretically implementable by another compiler), by all means, but the Rust compiler is not owned by Mozilla or any other company.</p>",
        "id": 186205245,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1579627142
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> IIn a literal sense, mrustc is a simplistic Rust compiler for an old version of Rust, but it's missing a critical piece of error-checking for incorrect code. (That doesn't make it an uninteresting project; on the contrary, it's interesting for bootstrapping without needing ocaml, and for doing diverse double-compilation.)  In a more practical sense, mrustc is never going to define the Rust language, and will almost certainly always lag the Rust compiler. Its limitations are not Rust language limitations.</p>",
        "id": 186205518,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1579627273
    },
    {
        "content": "<p>\"mozilla rustc\" is just the term that some folks used in the Rust Foundation Proposal topic on internals. Specifically the point was made that any alternative rust compiler wishing to work with standard tooling would likely have to take on the name <code>rustc</code> the same as various java compilers all use <code>javac</code> as their installed name.</p>",
        "id": 186207259,
        "sender_full_name": "Lokathor",
        "timestamp": 1579628388
    },
    {
        "content": "<p>A compiler that wanted to install itself as <code>rustc</code> would need to support not only Rust as implemented by the Rust compiler, but also the <code>rustc</code> command-line interface. That's theoretically possible, but seems vanishingly unlikely.</p>",
        "id": 186207532,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1579628576
    },
    {
        "content": "<p>Ever since Java became Open Source, alternative Java compilers have become far far less common. Alternative implementations of a compiler are far more critical when the primary implementation isn't open.</p>",
        "id": 186207570,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1579628609
    },
    {
        "content": "<p>I'm not saying someone <em>can't</em> implement another Rust compiler, just that doing so and calling it <code>rustc</code> doesn't seem especially useful (and seems more likely to generate confusion than compatibility).</p>",
        "id": 186207727,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1579628715
    },
    {
        "content": "<p>In any case, we're trying very hard to <em>avoid</em> the incorrect perception that Rust is a Mozilla project, and I'm asking to please avoid terminology that contributes to that perception.</p>",
        "id": 186207821,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1579628777
    },
    {
        "content": "<p>rust project rustc it is</p>",
        "id": 186208214,
        "sender_full_name": "Lokathor",
        "timestamp": 1579628990
    },
    {
        "content": "<p>Thank you, that's an improvement. :)</p>",
        "id": 186208344,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1579629042
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> that makes sense, but I fear you went too deeply into my concrete example, so let's use a hypothetical: I clone <code>rust-lang/rust</code> and find the secret \"run the borrow checker\" flag, set it to false, and publish that compiler. Is it \"a Rust compiler\"? Replace \"run the borrow checker\" with any given aspect of what we generally consider \"Rust\".</p>\n<p>Ultimately, it's the line between language spec and implementation, which we know is not as well defined as we'd like right now.</p>",
        "id": 186210113,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1579630110
    },
    {
        "content": "<p>It would be a Rust compiler, specifically a Rust compiler that nobody should use, it would be a misleading thing to do to continue calling it \"rustc\", and most importantly, the capabilities of that compiler should not affect what we describe as \"Rust\" when we talk about the Rust language.</p>",
        "id": 186210414,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1579630315
    },
    {
        "content": "<p>To more directly answer the distinction you're making:</p>",
        "id": 186210638,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1579630473
    },
    {
        "content": "<p>I think there's value in having a Rust language specification, to help people understand and reason about the language.</p>",
        "id": 186210903,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1579630678
    },
    {
        "content": "<p>I don't think that the language specification, by itself, is what people should anchor to in an alternate implementation. And in particular, I think in practice someone would want to say \"Rust as implemented by rustc 1.x\", not \"Rust as defined in the 1.x language specification\". If those turned out to differ, it would be just as likely to be a bug in the language specification as a bug in rustc.</p>",
        "id": 186211030,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1579630763
    },
    {
        "content": "<p>Well I don't think we'd update a language spec every 6 weeks</p>",
        "id": 186213343,
        "sender_full_name": "Lokathor",
        "timestamp": 1579632154
    },
    {
        "content": "<p>so, like with C++ or Haskell or pick your favorite, i expect the language specification would get some definition, then anything going into a rust compiler after that would be not in the spec until some update point when we edit the spec after X years of experimentation</p>",
        "id": 186213503,
        "sender_full_name": "Lokathor",
        "timestamp": 1579632242
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> I really hope that once we have a language specification we update the language specification every time we change the language.</p>",
        "id": 186214050,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1579632576
    },
    {
        "content": "<p>I'm hoping it lives <em>in</em> the rust repository.</p>",
        "id": 186214064,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1579632590
    },
    {
        "content": "<p>oof</p>",
        "id": 186214124,
        "sender_full_name": "Lokathor",
        "timestamp": 1579632608
    },
    {
        "content": "<p>(I sincerely hope that anyone talking about a \"language specification\" here is referring to a document, not something from ANSI or ISO or similar.)</p>",
        "id": 186214135,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1579632616
    },
    {
        "content": "<p>Why would we <em>want</em> a language specification to lag the actual language?</p>",
        "id": 186214239,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1579632711
    },
    {
        "content": "<p>that's a whole other thing that feels way off topic to the inline assembly RFC :3</p>",
        "id": 186214693,
        "sender_full_name": "Lokathor",
        "timestamp": 1579632985
    },
    {
        "content": "<p>That's certainly true. :)</p>",
        "id": 186214998,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1579633180
    },
    {
        "content": "<blockquote>\n<p>that makes sense, but I fear you went too deeply into my concrete example, so let's use a hypothetical: I clone rust-lang/rust and find the secret \"run the borrow checker\" flag, set it to false, and publish that compiler. Is it \"a Rust compiler\"? Replace \"run the borrow checker\" with any given aspect of what we generally consider \"Rust\".</p>\n</blockquote>\n<p>I don't think it is a Rust compiler if it allows more or less programs than the spec allows</p>",
        "id": 186304526,
        "sender_full_name": "centril",
        "timestamp": 1579711108
    },
    {
        "content": "<p>at least it's not a Rust compiler for that version of the spec</p>",
        "id": 186304552,
        "sender_full_name": "centril",
        "timestamp": 1579711126
    },
    {
        "content": "<p>So I don't think mrustc is a Rust compiler, though a useful tool nonetheless</p>",
        "id": 186304577,
        "sender_full_name": "centril",
        "timestamp": 1579711143
    },
    {
        "content": "<blockquote>\n<p>I'm hoping it lives in the rust repository.</p>\n</blockquote>\n<p>Well, <code>rust-lang/{reference, spec}</code>, but close enough? ;)</p>",
        "id": 186304642,
        "sender_full_name": "centril",
        "timestamp": 1579711181
    },
    {
        "content": "<p>Most C compilers allow more than the spec allows, and we still call them C compilers.</p>",
        "id": 186332884,
        "sender_full_name": "Lokathor",
        "timestamp": 1579728546
    },
    {
        "content": "<p>Here (as in most cases), C is a motivating example of what not to replicate, in my view</p>",
        "id": 186338373,
        "sender_full_name": "centril",
        "timestamp": 1579732237
    },
    {
        "content": "<p>Well I guess GHC isn't a Haskell compiler either then ;3c</p>",
        "id": 186345946,
        "sender_full_name": "Lokathor",
        "timestamp": 1579738580
    },
    {
        "content": "<p>GHC is basically the only Haskell compiler used in production, and Haskell is more of a research language than Rust, so I think the situation is not comparable</p>",
        "id": 186347592,
        "sender_full_name": "centril",
        "timestamp": 1579740462
    },
    {
        "content": "<p>I think it might be a bit far to say that mrustc isn't a Rust compiler. That doesn't seem like an especially helpful definition, semantically. I would more say that rust-lang/rust defines Rust, and mrustc implements only a subset of Rust. mrustc or any other Rust implementation doesn't define what Rust is, or the limitations or capabilities of Rust.</p>",
        "id": 186357593,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1579755453
    }
]