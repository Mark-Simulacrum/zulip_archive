[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> Are you aware of any blocking issues that should prevent us from stabilizing inline assembly on architectures that have gotten sufficient testing?</p>",
        "id": 225083036,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612386857
    },
    {
        "content": "<p>We discussed it in the lang design meeting today, and felt that we'd seen enough positive reports from users that we'd be prepared to stabilize it given a PR and stabilization report.</p>",
        "id": 225083110,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612386888
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/72016#issuecomment-761616910\">https://github.com/rust-lang/rust/issues/72016#issuecomment-761616910</a></p>",
        "id": 225083171,
        "sender_full_name": "Amanieu",
        "timestamp": 1612386909
    },
    {
        "content": "<p>I made a list of potential blockers. There are some significant design issues around the handling of clobbers.</p>",
        "id": 225083251,
        "sender_full_name": "Amanieu",
        "timestamp": 1612386945
    },
    {
        "content": "<p>Reading...</p>",
        "id": 225083985,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612387225
    },
    {
        "content": "<p>(Also, sorry for missing your comment on the tracking issue.)</p>",
        "id": 225084091,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612387273
    },
    {
        "content": "<p>I added another blocker, we need to resolve the question of namespacing the <code>asm!</code> macro under <code>core::arch</code>.</p>",
        "id": 225086470,
        "sender_full_name": "Amanieu",
        "timestamp": 1612388310
    },
    {
        "content": "<p>At the moment, I'd be happy to just propose resolving that question as \"no\" and use an FCP to confirm lang team consensus on that.</p>",
        "id": 225086531,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612388338
    },
    {
        "content": "<p>In any case, the only problem that needs real design work is <a href=\"https://github.com/rust-lang/rust/issues/81092\">#81092</a>.</p>",
        "id": 225086635,
        "sender_full_name": "Amanieu",
        "timestamp": 1612388386
    },
    {
        "content": "<p>The named labels has a WIP PR to resolve it, version check should be easy to implement and inline consts vs explicit promotion in theory shouldn't affect semantics.</p>",
        "id": 225086757,
        "sender_full_name": "Amanieu",
        "timestamp": 1612388422
    },
    {
        "content": "<p>I just posted a note to the named labels issue.</p>",
        "id": 225086834,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612388457
    },
    {
        "content": "<p>(Summary: I'd like to either catch and reject named labels, or catch and reject <code>.global</code>/<code>.globl</code>, so that we don't silently miscompile code that expects <code>\".globl foo\\nfoo: ...\"</code> to work.)</p>",
        "id": 225086906,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612388494
    },
    {
        "content": "<p>Can you point me to the code in Linux that does this?</p>",
        "id": 225087010,
        "sender_full_name": "Amanieu",
        "timestamp": 1612388526
    },
    {
        "content": "<p>I'm pretty sure it's incorrect</p>",
        "id": 225087023,
        "sender_full_name": "Amanieu",
        "timestamp": 1612388531
    },
    {
        "content": "<p><code>git grep globl -- '*.[ch]' | grep -v 'printf'</code> will turn up several cases.</p>",
        "id": 225087091,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612388567
    },
    {
        "content": "<p>Also, in C it's easier to ensure that only one copy of an asm block gets emitted.</p>",
        "id": 225087113,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612388577
    },
    {
        "content": "<p>There are no generics, and it's possible to ensure a function isn't inlined.</p>",
        "id": 225087126,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612388585
    },
    {
        "content": "<p>OK I see. We should definitely lint against <code>.global</code> and <code>.globl</code> and recommend using <code>global_asm!</code> instead.</p>",
        "id": 225087355,
        "sender_full_name": "Amanieu",
        "timestamp": 1612388703
    },
    {
        "content": "<p>However this should be a separate issue.</p>",
        "id": 225087410,
        "sender_full_name": "Amanieu",
        "timestamp": 1612388726
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"143274\">Amanieu</span> <a href=\"#narrow/stream/216763-project-inline-asm/topic/Path.20to.20stabilization/near/225087410\">said</a>:</p>\n<blockquote>\n<p>However this should be a separate issue.</p>\n</blockquote>\n<p>It isn't an issue until local label rewriting, though.</p>",
        "id": 225087549,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612388778
    },
    {
        "content": "<p>Which is part of why I think it makes sense to do as part of local label rewriting.</p>",
        "id": 225087569,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612388787
    },
    {
        "content": "<p>In any case, that conversation can happen on the github issues.</p>",
        "id": 225087587,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612388795
    },
    {
        "content": "<p>/me reads <a href=\"https://github.com/rust-lang/rust/issues/81092\">https://github.com/rust-lang/rust/issues/81092</a> .</p>",
        "id": 225087635,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612388818
    },
    {
        "content": "<p>I think this conversation should happpen on the tracking issue rather than the PR. Any linting would be in a separate PR anyways.</p>",
        "id": 225087636,
        "sender_full_name": "Amanieu",
        "timestamp": 1612388818
    },
    {
        "content": "<p>I brought it up on the PR because one option would be to reject non-local labels rather than rewriting them.</p>",
        "id": 225087823,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612388892
    },
    {
        "content": "<p>(That'd be my preferred alternative.)</p>",
        "id": 225087831,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612388897
    },
    {
        "content": "<p>If that's not the path we go with, then yeah, further discussion on things like rejecting global directives could happen on the tracking issue.</p>",
        "id": 225087862,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612388913
    },
    {
        "content": "<p>I'd prefer rejecting for initial stabilization as well.</p>",
        "id": 225088108,
        "sender_full_name": "nagisa",
        "timestamp": 1612389018
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> Can you copy your comment to <a href=\"https://github.com/rust-lang/rust/issues/81088\">#81088</a>? Let's continue the discussion there.</p>",
        "id": 225088298,
        "sender_full_name": "Amanieu",
        "timestamp": 1612389109
    },
    {
        "content": "<p>Nevermind I'll just quote it</p>",
        "id": 225088472,
        "sender_full_name": "Amanieu",
        "timestamp": 1612389178
    },
    {
        "content": "<p>Already done.</p>",
        "id": 225088556,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612389224
    },
    {
        "content": "<p>I agree that the version check should be simple and straightforward.</p>",
        "id": 225088679,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612389272
    },
    {
        "content": "<p>And I agree that const handling shouldn't be a blocker.</p>",
        "id": 225088711,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612389290
    },
    {
        "content": "<p><code>clobber</code> seems like a perfectly reasonable syntax, including the <code>clobber(\"C\")</code> and <code>clobber(\"all\")</code> cases. Albeit, we'd have to define \"all\" a little carefully, as there may be registers on some architectures that never make sense to \"clobber\".</p>",
        "id": 225088984,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612389403
    },
    {
        "content": "<p>Is there a fundamental reason that <code>clobber(\"all\")</code> needs to be incompatible with automatic register handling? Would it be possible to say \"assign registers to these arguments as normal, then clobber all the rest\"?</p>",
        "id": 225089097,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612389460
    },
    {
        "content": "<p>Clobbers conflict with outputs. So the same register can't be used as both an output and a clobber. If we clobber all registers then there are no registers left for LLVM to allocate for outputs.</p>",
        "id": 225089268,
        "sender_full_name": "Amanieu",
        "timestamp": 1612389539
    },
    {
        "content": "<p>Ah. That seems like something LLVM could theoretically improve, but until then we can't really work around it, yeah.</p>",
        "id": 225089538,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612389667
    },
    {
        "content": "<p><a href=\"https://gcc.gnu.org/onlinedocs/gcc/Extended-Asm.html#Clobbers-and-Scratch-Registers\">https://gcc.gnu.org/onlinedocs/gcc/Extended-Asm.html#Clobbers-and-Scratch-Registers</a></p>",
        "id": 225089644,
        "sender_full_name": "Amanieu",
        "timestamp": 1612389711
    },
    {
        "content": "<blockquote>\n<p>Clobber descriptions may not in any way overlap with an input or output operand.</p>\n</blockquote>",
        "id": 225089662,
        "sender_full_name": "Amanieu",
        "timestamp": 1612389719
    },
    {
        "content": "<p>LLVM is just following GCC semantics here.</p>",
        "id": 225089814,
        "sender_full_name": "Amanieu",
        "timestamp": 1612389786
    },
    {
        "content": "<blockquote>\n<p>When the compiler selects which registers to use to represent input and output operands, it does not use any of the clobbered registers.</p>\n</blockquote>",
        "id": 225089870,
        "sender_full_name": "Amanieu",
        "timestamp": 1612389815
    },
    {
        "content": "<p>Right. And that's the right thing to do in general, I think.</p>",
        "id": 225090086,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612389937
    },
    {
        "content": "<p>It might make sense for LLVM to have a directive that does a \"clobber if not already clobbered\".</p>",
        "id": 225090111,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612389954
    },
    {
        "content": "<p>That would allow for <code>clobber(\"C\")</code> while still allowing register inputs to get put in registers that C calls also use.</p>",
        "id": 225090237,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612390011
    },
    {
        "content": "<p>This is why you can only used fixed registers if you have a wildcard clobber. Because then we know which registers to exclude from the clobber list.</p>",
        "id": 225090239,
        "sender_full_name": "Amanieu",
        "timestamp": 1612390012
    },
    {
        "content": "<p>/me nods.</p>",
        "id": 225090249,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612390020
    },
    {
        "content": "<p>That particular detail is something that could be enhanced in the future, but doesn't need to block stabilization.</p>",
        "id": 225090299,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612390047
    },
    {
        "content": "<p>And if we just add <code>clobber(\"C\")</code> but not <code>clobber(\"all\")</code>, you could still use that together with register inputs or outputs, as long as there are enough registers left.</p>",
        "id": 225090399,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612390090
    },
    {
        "content": "<p>I'm wondering if we could handle two things orthogonally...</p>",
        "id": 225090700,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612390233
    },
    {
        "content": "<p>The issue of target-feature-specific register clobbers being themselves target-feature-specific seems like something we could address without <em>necessarily</em> changing the clobber syntax.</p>",
        "id": 225090742,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612390261
    },
    {
        "content": "<p>We could recognize an output to <code>_</code> as a clobber, and allow clobbers of registers you couldn't otherwise use.</p>",
        "id": 225090799,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612390287
    },
    {
        "content": "<p>I do absolutely think that <code>clobber(\"reg\")</code> is a more intuitive syntax, and that <code>clobber(\"C\")</code> is a good idea.</p>",
        "id": 225090851,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612390321
    },
    {
        "content": "<p>But allowing clobbers of target-feature-specific registers or registers you can't use as inputs/outputs could technically be done orthogonally to syntax.</p>",
        "id": 225090931,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612390357
    },
    {
        "content": "<p>Which of these aspects seems like a stabilization blocker, and which is just an additional nice-to-have that we could add later?</p>",
        "id": 225091090,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612390458
    },
    {
        "content": "<p>I'm not completely sure. That's why I would like to explore the design of clobbers first to make sure anything we do is still backwards-compatible.</p>",
        "id": 225091445,
        "sender_full_name": "Amanieu",
        "timestamp": 1612390632
    },
    {
        "content": "<p>Fair.</p>",
        "id": 225092197,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612390942
    },
    {
        "content": "<p>Small correction, it seems that clobbers conflict with both inputs and outputs, not just outputs.</p>",
        "id": 225094125,
        "sender_full_name": "Amanieu",
        "timestamp": 1612392011
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> If we add <code>clobber(\"reg\")</code> should we continue supporting <code>out(\"reg\") _</code>?</p>",
        "id": 225094381,
        "sender_full_name": "Amanieu",
        "timestamp": 1612392198
    },
    {
        "content": "<p>That's a potential breaking change.</p>",
        "id": 225094394,
        "sender_full_name": "Amanieu",
        "timestamp": 1612392211
    },
    {
        "content": "<p>I think we should, because we need to support <code>inout(\"reg\") expr =&gt; _</code>, so I think we also want to support that syntax for <code>out</code>.</p>",
        "id": 225094473,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612392247
    },
    {
        "content": "<p>I feel a bit uneasy about have 2 ways of doing the same thing. It's poor design.</p>",
        "id": 225094532,
        "sender_full_name": "Amanieu",
        "timestamp": 1612392293
    },
    {
        "content": "<p>It does make sense to keep the <code>=&gt; _</code> syntax, at a minimum, for the in/out cases.</p>",
        "id": 225097877,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612394332
    },
    {
        "content": "<p>Oh we're definitely keeping that.</p>",
        "id": 225098066,
        "sender_full_name": "Amanieu",
        "timestamp": 1612394439
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"143274\">Amanieu</span> <a href=\"#narrow/stream/216763-project-inline-asm/topic/Path.20to.20stabilization/near/225083171\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/rust-lang/rust/issues/72016#issuecomment-761616910\">https://github.com/rust-lang/rust/issues/72016#issuecomment-761616910</a></p>\n</blockquote>\n<p>Could we move that blocker or reference that issue comment in the top comment ?<br>\nIt's easier for other people to notice the state of that issue.</p>",
        "id": 225411156,
        "sender_full_name": "lzutao",
        "timestamp": 1612616988
    },
    {
        "content": "<p>Done</p>",
        "id": 225418556,
        "sender_full_name": "Amanieu",
        "timestamp": 1612627874
    }
]