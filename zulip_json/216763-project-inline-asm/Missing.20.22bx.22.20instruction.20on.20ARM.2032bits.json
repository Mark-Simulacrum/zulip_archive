[
    {
        "content": "<p>Hi, I'm trying to implement syscalls function for ARM 32bits in Rust with inline asm. I have to took example on a aarch64 version that works, but my arm 32bits doesn't works due to a missing instructions \"bx lr\" (\"ret\" equivalent). You can see on this <a href=\"https://godbolt.org/z/M6cTs8rf4\">godbolt</a> the rust, musl and glibc implementation of <code>syscall5</code> and you can clearly see the missing \"bx lr\" at the end (witch is not missing with the c++). The <a href=\"https://godbolt.org/z/8ccfKojzh\">aarch64</a> version doesn't have this problem. Is this a problem with my inline asm ? If so what doesn't I need to change ?</p>",
        "id": 252976015,
        "sender_full_name": "Urgau",
        "timestamp": 1631442034
    },
    {
        "content": "<p>ARM uses <code>pop {pc}</code> to return.</p>",
        "id": 252976603,
        "sender_full_name": "Amanieu",
        "timestamp": 1631442665
    },
    {
        "content": "<p>It's available from ARMv5 onwards, clang doesn't use it because it defaults to ARMv4.</p>",
        "id": 252976714,
        "sender_full_name": "Amanieu",
        "timestamp": 1631442802
    }
]