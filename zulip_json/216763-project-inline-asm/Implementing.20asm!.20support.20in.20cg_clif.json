[
    {
        "content": "<p>Does anybody know of a crate that has already switched to the new <code>asm!</code> syntax? I want to try if I can use an external assembler for inline asm in cg_clif, but I need something to test it with.</p>",
        "id": 203417752,
        "sender_full_name": "bjorn3",
        "timestamp": 1594317018
    },
    {
        "content": "<p><a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/pull/1062\">https://github.com/bjorn3/rustc_codegen_cranelift/pull/1062</a> already implemented <code>global_asm!</code> on Linux.</p>",
        "id": 203417809,
        "sender_full_name": "bjorn3",
        "timestamp": 1594317049
    },
    {
        "content": "<p><a href=\"https://github.com/rust-console/gba\">https://github.com/rust-console/gba</a><br>\nit's only in the repo i haven't pushed a release to <a href=\"http://crates.io\">crates.io</a>, but someone did the asm rework for me.</p>",
        "id": 203418594,
        "sender_full_name": "Lokathor",
        "timestamp": 1594317476
    },
    {
        "content": "<p>some of the embedded wg crates have also switched</p>",
        "id": 203418767,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594317569
    },
    {
        "content": "<p>hm, arm32 is not supported by Cranelift and AArch64 is not complete enough for cg_clif. I need an x86_64 crate to test it.</p>",
        "id": 203421283,
        "sender_full_name": "bjorn3",
        "timestamp": 1594318938
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> You can try the <code>asm!</code> test cases in <code>src/test/assembly/asm</code> for a start.</p>",
        "id": 203426248,
        "sender_full_name": "Amanieu",
        "timestamp": 1594321572
    },
    {
        "content": "<p>Good idea!</p>",
        "id": 203426283,
        "sender_full_name": "bjorn3",
        "timestamp": 1594321601
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> How do I get from a <code>dx</code>  or <code>edx</code> to an <code>rdx</code> <code>InlineAsmReg</code>? <code>push</code> and <code>pop</code> require the full register width as operand.</p>",
        "id": 203430413,
        "sender_full_name": "bjorn3",
        "timestamp": 1594323773
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> Hmm? It should always use the largest register size by default. You need to use modifiers to get the sub-register names.</p>",
        "id": 203447841,
        "sender_full_name": "Amanieu",
        "timestamp": 1594332595
    },
    {
        "content": "<p>You can use the <code>emit</code> function on <code>InlineAsmReg</code> to generate the correct register name for inserting into the placeholder after you've allocated registers.</p>",
        "id": 203448012,
        "sender_full_name": "Amanieu",
        "timestamp": 1594332683
    },
    {
        "content": "<p>Use the <code>allocatable_registers</code> function to get a map of all registers in each register class, for register allocation where you turn register classes into physical registers.</p>",
        "id": 203448189,
        "sender_full_name": "Amanieu",
        "timestamp": 1594332774
    },
    {
        "content": "<p>I was using <code>reg.name()</code>. Can I leave the <code>modifier</code> of <code>emit</code> as <code>None</code>?</p>",
        "id": 203448248,
        "sender_full_name": "bjorn3",
        "timestamp": 1594332818
    },
    {
        "content": "<p>Sure, that should always produce the full register width</p>",
        "id": 203469450,
        "sender_full_name": "Amanieu",
        "timestamp": 1594356974
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 203474380,
        "sender_full_name": "bjorn3",
        "timestamp": 1594363775
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> For <code>al</code> it still gives <code>al</code> as output. For <code>dx</code> it gives <code>rdx</code> as necessary.</p>",
        "id": 203483348,
        "sender_full_name": "bjorn3",
        "timestamp": 1594370945
    },
    {
        "content": "<p>That's because <code>al</code> is a <code>reg_byte</code> while <code>ax</code> is a <code>reg</code></p>",
        "id": 203483378,
        "sender_full_name": "Amanieu",
        "timestamp": 1594370976
    },
    {
        "content": "<p>They are treated as separate registers</p>",
        "id": 203483391,
        "sender_full_name": "Amanieu",
        "timestamp": 1594370990
    },
    {
        "content": "<p>Refer to <code>src/librustc_target/asm/x86.rs</code> for the exact list of all supported registers and register classes.</p>",
        "id": 203483491,
        "sender_full_name": "Amanieu",
        "timestamp": 1594371048
    },
    {
        "content": "<p>Is there a way to get the register size instead? Or Do I need to match on the reg class for that? Then I could use <code>mov</code> to and from a designated spill area instead.</p>",
        "id": 203483528,
        "sender_full_name": "bjorn3",
        "timestamp": 1594371086
    },
    {
        "content": "<p>No we don't have the register size. Maybe you could infer it from <code>supported_types</code>, but even that's a bit tricky.</p>",
        "id": 203483618,
        "sender_full_name": "Amanieu",
        "timestamp": 1594371148
    },
    {
        "content": "<p>I will match on the reg class then.</p>",
        "id": 203483634,
        "sender_full_name": "bjorn3",
        "timestamp": 1594371165
    },
    {
        "content": "<p>If you want some early feedback I'm happy to have a look at your code as it is right now to see if you're going in the right direction.</p>",
        "id": 203483667,
        "sender_full_name": "Amanieu",
        "timestamp": 1594371206
    },
    {
        "content": "<p>I am first working on saving and restoring clobbered register.</p>",
        "id": 203483817,
        "sender_full_name": "bjorn3",
        "timestamp": 1594371354
    },
    {
        "content": "<p>This is what I currently have: <a href=\"https://gist.github.com/bjorn3/d5fade6bff8400c0948fd7d8c2bbc213\">https://gist.github.com/bjorn3/d5fade6bff8400c0948fd7d8c2bbc213</a></p>",
        "id": 203485915,
        "sender_full_name": "bjorn3",
        "timestamp": 1594372849
    },
    {
        "content": "<p>codegen_ssa does some additional lowering to InlineAsmOperandRef which you probably want. In particular it will lower Const to a string so it can be easily inserted into the asm.</p>",
        "id": 203487596,
        "sender_full_name": "Amanieu",
        "timestamp": 1594374105
    },
    {
        "content": "<p>Ok, will do that later</p>",
        "id": 203487958,
        "sender_full_name": "bjorn3",
        "timestamp": 1594374288
    },
    {
        "content": "<p>Also make sure you properly handle the case where rax is clobbered.</p>",
        "id": 203488175,
        "sender_full_name": "Amanieu",
        "timestamp": 1594374451
    },
    {
        "content": "<p>My suggestion would be to mov rbp, rax at the start of the function and then just use rbp everywhere. This is safe since rbp can't be used as an operand for inline asm.</p>",
        "id": 203489072,
        "sender_full_name": "Amanieu",
        "timestamp": 1594375088
    },
    {
        "content": "<p>I got something: <a href=\"https://gist.github.com/bjorn3/f88891324a14e9941544e822a71d8552\">https://gist.github.com/bjorn3/f88891324a14e9941544e822a71d8552</a> It crashes though as <code>rdi</code> ends up with a value of 1 instead of <code>edx</code>.</p>",
        "id": 203494441,
        "sender_full_name": "bjorn3",
        "timestamp": 1594379428
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span>  mov %rdi,%rbp uses AT&amp;T syntax, so it has the operands in the wrong order.</p>",
        "id": 203495289,
        "sender_full_name": "Amanieu",
        "timestamp": 1594380242
    },
    {
        "content": "<p>Oops, fixed.</p>",
        "id": 203495767,
        "sender_full_name": "bjorn3",
        "timestamp": 1594380678
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> Also you might be missing a <code>ret</code> instruction.</p>",
        "id": 203495953,
        "sender_full_name": "Amanieu",
        "timestamp": 1594380824
    },
    {
        "content": "<p>Why are you using a slot to save clobbered registers? Just use <code>push</code>/<code>pop</code>.</p>",
        "id": 203496061,
        "sender_full_name": "Amanieu",
        "timestamp": 1594380906
    },
    {
        "content": "<p>Yes, that fixed all benches for <a href=\"https://github.com/rust-lang/compiler-builtins/issues/365\">rust-lang/compiler-builtins#365</a> when using an explicit register instead of a reg class.</p>",
        "id": 203496163,
        "sender_full_name": "bjorn3",
        "timestamp": 1594380993
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"143274\">Amanieu</span> <a href=\"#narrow/stream/216763-project-inline-asm/topic/Implementing.20asm!.20support.20in.20cg_clif/near/203496061\">said</a>:</p>\n<blockquote>\n<p>Why are you using a slot to save clobbered registers? Just use <code>push</code>/<code>pop</code>.</p>\n</blockquote>\n<p>Because <code>push</code> and <code>pop</code> only work for pointer sized registers. For <code>reg_byte</code> registers I can't get the register name for the full pointer sized register.</p>",
        "id": 203496224,
        "sender_full_name": "bjorn3",
        "timestamp": 1594381065
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> Do you mind doing a quick review of <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/issues/1064\">bjorn3/rustc_codegen_cranelift#1064</a>?</p>",
        "id": 203502175,
        "sender_full_name": "bjorn3",
        "timestamp": 1594385299
    },
    {
        "content": "<p>Hmm I'm thinking we probably want to change <code>emit</code> to just return a <code>String</code>.</p>",
        "id": 203503421,
        "sender_full_name": "Amanieu",
        "timestamp": 1594386147
    },
    {
        "content": "<p>Yeah, that would be nicer. Any potential slowdown would be very small, as inline asm is (relatively) rare in comparison to other statements and terminators.</p>",
        "id": 203503617,
        "sender_full_name": "bjorn3",
        "timestamp": 1594386260
    },
    {
        "content": "<p>Do you want to review some more, or can I merge it?</p>",
        "id": 203504220,
        "sender_full_name": "bjorn3",
        "timestamp": 1594386610
    },
    {
        "content": "<p>I'm writing up some comments in the PR.</p>",
        "id": 203504233,
        "sender_full_name": "Amanieu",
        "timestamp": 1594386620
    },
    {
        "content": "<p>Thanks for the review <span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span>!</p>",
        "id": 203555882,
        "sender_full_name": "bjorn3",
        "timestamp": 1594413863
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/216763-project-inline-asm/topic/Implementing.20asm!.20support.20in.20cg_clif/near/203496224\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"143274\">Amanieu</span> <a href=\"#narrow/stream/216763-project-inline-asm/topic/Implementing.20asm!.20support.20in.20cg_clif/near/203496061\">said</a>:</p>\n<blockquote>\n<p>Why are you using a slot to save clobbered registers? Just use <code>push</code>/<code>pop</code>.</p>\n</blockquote>\n<p>Because <code>push</code> and <code>pop</code> only work for pointer sized registers. For <code>reg_byte</code> registers I can't get the register name for the full pointer sized register.</p>\n</blockquote>\n<p>I think it'd make sense to have some internal mapping that lets you get from the <code>reg_byte</code> register to the full-sized containing register to be saved/loaded.</p>",
        "id": 203580989,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1594443499
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> I'm curious about something: is the goal that cranelift will <em>never</em> have support for generating fixed blocks of assembly with defined inputs/outputs/clobbers, or just that it won't happen <em>soon</em> so doing external assembly will be a faster solution?</p>",
        "id": 203581013,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1594443580
    },
    {
        "content": "<p>(Because quite orthogonally to <code>asm!</code>, I'd like to be able to provide raw target assembly when using cranelift as a code generator for other purposes.)</p>",
        "id": 203581059,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1594443616
    },
    {
        "content": "<p>Cranelift will likely never have inline assembly support compatible with gcc/LLVM. Implementing it including every single detail/bug is a massive task: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1041#issuecomment-531574394\">https://github.com/bytecodealliance/wasmtime/issues/1041#issuecomment-531574394</a></p>",
        "id": 203583308,
        "sender_full_name": "bjorn3",
        "timestamp": 1594448572
    }
]