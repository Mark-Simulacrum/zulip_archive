[
    {
        "content": "<p>Support for unwinding from inline assembly has landed in upstream llvm. I am currently looking into integrating this support into rustc. I was wondering if this fits into the scope of the<code>inline-asm</code>project?</p>",
        "id": 238802239,
        "sender_full_name": "cynecx",
        "timestamp": 1621013713
    },
    {
        "content": "<p>Nice! Do you have a link for more information upstream?</p>",
        "id": 238804300,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1621014587
    },
    {
        "content": "<p>I think we might need to wait for LLVM 13 for this.</p>",
        "id": 238804309,
        "sender_full_name": "Amanieu",
        "timestamp": 1621014594
    },
    {
        "content": "<p>The problem is that the upstream change involves changes to LLVM bitcode, which would break cross-language LTO with Clang 12.</p>",
        "id": 238804422,
        "sender_full_name": "Amanieu",
        "timestamp": 1621014631
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> <a href=\"https://reviews.llvm.org/D95745\">https://reviews.llvm.org/D95745</a></p>",
        "id": 238804553,
        "sender_full_name": "Amanieu",
        "timestamp": 1621014678
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"143274\">Amanieu</span> <a href=\"#narrow/stream/216763-project-inline-asm/topic/unwind.20option/near/238804422\">said</a>:</p>\n<blockquote>\n<p>The problem is that the upstream change involves changes to LLVM bitcode, which would break cross-language LTO with Clang 12.</p>\n</blockquote>\n<p>Ah, good to know. Would that affect code <em>not</em> using unwinding from asm? Or would that only break if someone actually used an asm that they added an unwind option to?</p>",
        "id": 238804573,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1621014689
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> <a href=\"https://reviews.llvm.org/rG8ec9fd483949ca3b23053effcac226dcc56e7a95\">https://reviews.llvm.org/rG8ec9fd483949ca3b23053effcac226dcc56e7a95</a> :)</p>\n<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> Oh, that's unfortunate. I was asking over wg-llvm the same thing.</p>",
        "id": 238804616,
        "sender_full_name": "cynecx",
        "timestamp": 1621014711
    },
    {
        "content": "<p>All <code>inlineasm</code> are changed to use a new opcode: <a href=\"https://reviews.llvm.org/D95745#change-ktOU8md1VSZi\">https://reviews.llvm.org/D95745#change-ktOU8md1VSZi</a></p>",
        "id": 238804795,
        "sender_full_name": "Amanieu",
        "timestamp": 1621014802
    },
    {
        "content": "<p>Ah. :(</p>",
        "id": 238805561,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1621015195
    },
    {
        "content": "<p>I don't know enough about how LLVM bitcode works; is it possible to still use the old opcode with new LLVM, for compatibility?</p>",
        "id": 238805687,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1621015229
    },
    {
        "content": "<p>Possibly, but I would still feel uncomfortable with backporting this feature.</p>",
        "id": 238806241,
        "sender_full_name": "Amanieu",
        "timestamp": 1621015397
    },
    {
        "content": "<p>Sure. I'm not necessarily suggesting backporting this. I'm more trying to find out if it's going to break backwards compatibility with older LLVM if we start supporting it in the future.</p>",
        "id": 238808535,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1621016342
    },
    {
        "content": "<p>No, it shouldn't break backward compatibility. You won't be able to mark your <code>asm!</code> as <code>unwind</code> with older LLVM, but that's it.</p>",
        "id": 238808639,
        "sender_full_name": "Amanieu",
        "timestamp": 1621016394
    },
    {
        "content": "<p>And we only support cross-lang LTO with a Clang of the same LLVM version as us.</p>",
        "id": 238808738,
        "sender_full_name": "Amanieu",
        "timestamp": 1621016421
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"143274\">Amanieu</span> <a href=\"#narrow/stream/216763-project-inline-asm/topic/unwind.20option/near/238808639\">said</a>:</p>\n<blockquote>\n<p>No, it shouldn't break backward compatibility. You won't be able to mark your <code>asm!</code> as <code>unwind</code> with older LLVM, but that's it.</p>\n</blockquote>\n<p>That's what I was wondering. Perfect.</p>",
        "id": 238808793,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1621016446
    },
    {
        "content": "<p>I am going to pick this up very soon when <a href=\"https://github.com/rust-lang/rust/pull/87570\">https://github.com/rust-lang/rust/pull/87570</a> lands :)</p>",
        "id": 247813735,
        "sender_full_name": "cynecx",
        "timestamp": 1627749950
    },
    {
        "content": "<p>Sounds great!</p>",
        "id": 247814710,
        "sender_full_name": "Amanieu",
        "timestamp": 1627751385
    }
]