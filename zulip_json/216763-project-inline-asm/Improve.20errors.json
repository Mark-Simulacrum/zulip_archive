[
    {
        "content": "<p>Today I forgot \"and\" instruction does not support 64-bit immediate values on x64.</p>\n<p>The error message could be more helpful</p>\n<div class=\"codehilite\"><pre><span></span><code>error: invalid operand for instruction\n*snip*\nnote: instantiated into assembly here\n    --&gt; &lt;inline asm&gt;:4:1\n     |\n4    | and rax, 9259542123273814144\n</code></pre></div>\n<p>Instead of saying \"invalid operand\", could it specify whether the instruction expects register, memory or immediate value?</p>\n<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=cfdfd99b59954681b47c35e1fb30b0ee\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=cfdfd99b59954681b47c35e1fb30b0ee</a></p>",
        "id": 249970548,
        "sender_full_name": "Bot+",
        "timestamp": 1629371714
    },
    {
        "content": "<p>Assembly parsing is in LLVM, not rustc.</p>",
        "id": 249970639,
        "sender_full_name": "Amanieu",
        "timestamp": 1629371773
    },
    {
        "content": "<p>So it's possible to improve the error messages, but it will have to be done upstream in LLVM.</p>",
        "id": 249970808,
        "sender_full_name": "Amanieu",
        "timestamp": 1629371839
    },
    {
        "content": "<p>Ah, I hoped LLVM would pass something useful to rustc that could passed to user.</p>",
        "id": 249970960,
        "sender_full_name": "Bot+",
        "timestamp": 1629371925
    },
    {
        "content": "<p>I think llvm doesn't even always do the assembly itself, so you're at the mercy of the assembler for your target (which might or might not be an llvm-project assembler).</p>",
        "id": 250001166,
        "sender_full_name": "Lokathor",
        "timestamp": 1629386098
    },
    {
        "content": "<p>LLVM claims that inline asm uses its built-in assembler, but that might not actually be a thing all the time</p>",
        "id": 250021785,
        "sender_full_name": "asquared31415",
        "timestamp": 1629395538
    },
    {
        "content": "<blockquote>\n<p>the resulting assembly string is parsed by LLVM’s integrated assembler unless it is disabled – even when emitting a .s file – and thus must contain assembly syntax known to LLVM.</p>\n</blockquote>\n<p>hmmm do we ever disable it?</p>",
        "id": 250022151,
        "sender_full_name": "asquared31415",
        "timestamp": 1629395697
    },
    {
        "content": "<p>We have removed no-integrated-as codegen option, so we won't disable it.</p>",
        "id": 250037286,
        "sender_full_name": "Gary Guo",
        "timestamp": 1629401524
    }
]