[
    {
        "content": "<p>However clobber(\"all\") is tricker: we can't actually clobber all registers because LLVM reserved registers must not be clobbered. If the user specifies <code>clobber(\"all\")</code> then they may be under the impression that they are allowed to clobber those registers.</p>",
        "id": 233433837,
        "sender_full_name": "Amanieu",
        "timestamp": 1617773525
    },
    {
        "content": "<p>I liked the <code>clobber(...)</code> proposal, plus some aliases like \"call\" or perhaps \"C\".</p>",
        "id": 233433939,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617773606
    },
    {
        "content": "<p>Do you mean things like the stack pointer? I think most people understand that they cannot leave that different than they received it without breaking things.</p>",
        "id": 233433940,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617773606
    },
    {
        "content": "<p>I was thinking of the frame pointer and base pointer <code>ebp</code> and <code>ebx</code>.</p>",
        "id": 233433975,
        "sender_full_name": "Amanieu",
        "timestamp": 1617773640
    },
    {
        "content": "<p>Wait, what? You can't clobber <em>ebx</em>?</p>",
        "id": 233434028,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617773672
    },
    {
        "content": "<p>Why would that be reserved?</p>",
        "id": 233434045,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617773685
    },
    {
        "content": "<p>Also, for labels, we can always make syntax better/simpler in the future, but the only things that need to happen before stabilization are changes that make things <em>stop</em> working. And I still remain skeptical that we want to prevent people from using labels directly in asm.</p>",
        "id": 233434200,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617773793
    },
    {
        "content": "<p>It is reserved if you have stack alignment and variable-sized locals.</p>",
        "id": 233434201,
        "sender_full_name": "Amanieu",
        "timestamp": 1617773793
    },
    {
        "content": "<p><a href=\"https://github.com/llvm/llvm-project/blob/main/llvm/lib/Target/X86/X86RegisterInfo.cpp#L636\">https://github.com/llvm/llvm-project/blob/main/llvm/lib/Target/X86/X86RegisterInfo.cpp#L636</a></p>",
        "id": 233434230,
        "sender_full_name": "Amanieu",
        "timestamp": 1617773826
    },
    {
        "content": "<p>That seems like an unfortunate limitation in LLVM. It doesn't seem like there's a fundamental reason it couldn't use a different register.</p>",
        "id": 233434245,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617773852
    },
    {
        "content": "<p>In that case, it seems like we should skip adding \"all\" while that limitation exists. At least if people write ebx explicitly we can give them an explanatory error message.</p>",
        "id": 233434412,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617774006
    },
    {
        "content": "<p>At the moment ebx is still allowed as a register, I'm considering switching it to be disallowed.</p>",
        "id": 233434462,
        "sender_full_name": "Amanieu",
        "timestamp": 1617774048
    },
    {
        "content": "<p>Because I agree, if people use \"all\" they will expect \"all\", and I think they'd be as shocked as I was if that doesn't include ebx.</p>",
        "id": 233434463,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617774048
    },
    {
        "content": "<p>Could it be disallowed <em>only</em> when it's actually an issue (because alloca)?</p>",
        "id": 233434489,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617774083
    },
    {
        "content": "<p>The thing is, LLVM will only reserve ebx in very rare cases (stack realignment &amp; DST local)</p>",
        "id": 233434502,
        "sender_full_name": "Amanieu",
        "timestamp": 1617774098
    },
    {
        "content": "<p>No, because we don't have enough information in the frontend to determine this.</p>",
        "id": 233434555,
        "sender_full_name": "Amanieu",
        "timestamp": 1617774129
    },
    {
        "content": "<p>It's only knowable in the backend after all the inlining has been done.</p>",
        "id": 233434569,
        "sender_full_name": "Amanieu",
        "timestamp": 1617774141
    },
    {
        "content": "<p>Could we manually generate code to save and restore ebx if someone specifies a clobber of it?</p>",
        "id": 233434572,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617774148
    },
    {
        "content": "<p>Not easily. How would you pass the value in/out?</p>",
        "id": 233434703,
        "sender_full_name": "Amanieu",
        "timestamp": 1617774255
    },
    {
        "content": "<p>Via an extra register? x86-32 is already <em>very</em> register-pressured, it may not be possible to find another register.</p>",
        "id": 233434729,
        "sender_full_name": "Amanieu",
        "timestamp": 1617774279
    },
    {
        "content": "<p>push/pop? Assembly can assume the stack is valid.</p>",
        "id": 233434764,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617774302
    },
    {
        "content": "<p>That doesn't help, where you do get the value to push in at the start? It still needs to come from the asm.</p>",
        "id": 233434796,
        "sender_full_name": "Amanieu",
        "timestamp": 1617774331
    },
    {
        "content": "<p>Hmm, perhaps we can cheat here and use LLVM memory constraints.</p>",
        "id": 233434868,
        "sender_full_name": "Amanieu",
        "timestamp": 1617774374
    },
    {
        "content": "<p>I think I'm missing something. Are you talking about a clobber or an input? Also, good point.</p>",
        "id": 233434883,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617774388
    },
    {
        "content": "<p>Let's see, consider <code>asm!(\"foo\", inout(\"ebx\") bar)</code>.</p>",
        "id": 233434950,
        "sender_full_name": "Amanieu",
        "timestamp": 1617774437
    },
    {
        "content": "<p>Yeah, memory or reg/mem constraint seems like the right answer there.</p>",
        "id": 233435060,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617774539
    },
    {
        "content": "<p>We could do this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"fm\">asm!</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"s\">\"mov {tmp}, ebx\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"s\">\"mov ebx, {bar}\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"s\">\"foo\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"s\">\"mov {bar}, ebx\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"s\">\"mov ebx, {tmp}\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">tmp</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">mem</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"k\">usize</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">bar</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">mem</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 233435077,
        "sender_full_name": "Amanieu",
        "timestamp": 1617774550
    },
    {
        "content": "<p>That will be slow but it should work.</p>",
        "id": 233435103,
        "sender_full_name": "Amanieu",
        "timestamp": 1617774597
    },
    {
        "content": "<p>That works. Or push/pop ebx rather than using a declared temporary.</p>",
        "id": 233435155,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617774610
    },
    {
        "content": "<p>That doesn't work because we guarantee stack alignment in <code>asm!</code> unless the <code>nostack</code> option is set.</p>",
        "id": 233435180,
        "sender_full_name": "Amanieu",
        "timestamp": 1617774632
    },
    {
        "content": "<p>We can keep it aligned.</p>",
        "id": 233435199,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617774654
    },
    {
        "content": "<p><code>tmp</code> is already a stack location, just use that.</p>",
        "id": 233435205,
        "sender_full_name": "Amanieu",
        "timestamp": 1617774667
    },
    {
        "content": "<p>Sure, that works.</p>",
        "id": 233435230,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617774690
    },
    {
        "content": "<p>And all of this is in lieu of LLVM understanding enough to do it itself only when it wants ebx.</p>",
        "id": 233435293,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617774728
    },
    {
        "content": "<p>We could do the same for ebp too, right?</p>",
        "id": 233435311,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617774747
    },
    {
        "content": "<p>Yes. And the same for the frame/base pointer on other targets.</p>",
        "id": 233435325,
        "sender_full_name": "Amanieu",
        "timestamp": 1617774762
    },
    {
        "content": "<p>The downside is that this may be a silent performance gotcha in some cases.</p>",
        "id": 233435341,
        "sender_full_name": "Amanieu",
        "timestamp": 1617774786
    },
    {
        "content": "<p>But we don't really make any guarantees about performance anyways.</p>",
        "id": 233435352,
        "sender_full_name": "Amanieu",
        "timestamp": 1617774799
    },
    {
        "content": "<p>I like this plan. We don't promise efficiency for reserved registers, but we avoid breaking people who have a specific need for those registers. And we tell people who want performance to take it up with LLVM.</p>",
        "id": 233435365,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617774822
    },
    {
        "content": "<p>Also, we can document it so that it's less silent.</p>",
        "id": 233435414,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617774844
    },
    {
        "content": "<p>I assume your example above was pseudocode, and we'll internally generate a new anonymous parameter?</p>",
        "id": 233435510,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617774925
    },
    {
        "content": "<p>(or two, rather)</p>",
        "id": 233435522,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617774939
    },
    {
        "content": "<p>This will be handled in <code>rustc_codegen_llvm</code> in the last stages of asm codegen.</p>",
        "id": 233435530,
        "sender_full_name": "Amanieu",
        "timestamp": 1617774953
    },
    {
        "content": "<p>/me reviews the list of all reserved registers...</p>",
        "id": 233435597,
        "sender_full_name": "Amanieu",
        "timestamp": 1617774994
    },
    {
        "content": "<p>With this done, is there any other reason not to add both clobber(C) and clobber(all)?</p>",
        "id": 233435610,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617775009
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html\">https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html</a></p>",
        "id": 233435626,
        "sender_full_name": "Amanieu",
        "timestamp": 1617775033
    },
    {
        "content": "<p>(Search for \"Some registers cannot be used for input or output operands:\")</p>",
        "id": 233435632,
        "sender_full_name": "Amanieu",
        "timestamp": 1617775043
    },
    {
        "content": "<p>Actually I think that my approach with <code>mem</code> won't work: In <code>mov {bar}, ebx</code>, LLVM may expand <code>{bar}</code> to an <code>ebx</code>-relative address.</p>",
        "id": 233435740,
        "sender_full_name": "Amanieu",
        "timestamp": 1617775140
    },
    {
        "content": "<p>It will definitely do that with <code>ebp</code></p>",
        "id": 233435757,
        "sender_full_name": "Amanieu",
        "timestamp": 1617775155
    },
    {
        "content": "<p>(Now I remember why I didn't just implement that...)</p>",
        "id": 233435990,
        "sender_full_name": "Amanieu",
        "timestamp": 1617775320
    },
    {
        "content": "<p>I don't actually see ebx there.</p>",
        "id": 233436031,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617775329
    },
    {
        "content": "<p>I don't actually see ebx there.</p>",
        "id": 233436046,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617775347
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"fm\">asm!</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"s\">\"mov {tmp}, ebp\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"s\">\"mov ebp, {bar}\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"s\">\"foo\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"s\">\"mov {bar}, ebp\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c1\">// &lt;-- {bar} is expanded to [ebp + 0x10]</span>\n<span class=\"w\">    </span><span class=\"s\">\"mov ebp, {tmp}\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">tmp</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">mem</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"k\">usize</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">bar</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">mem</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 233436134,
        "sender_full_name": "Amanieu",
        "timestamp": 1617775405
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/216763-project-inline-asm/topic/Handling.20clobbers/near/233435311\">said</a>:</p>\n<blockquote>\n<p>We could do the same for ebp too, right?</p>\n</blockquote>\n<p>no, you can't use memory operands to stack locations if you change ebp, since ebp could be used as the base register for those memory operands:</p>\n<div class=\"codehilite\" data-code-language=\"GAS\"><pre><span></span><code><span class=\"nf\">mov</span> <span class=\"nv\">%rbp</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">(</span><span class=\"nv\">%rbp</span><span class=\"p\">)</span> <span class=\"c1\">// save</span>\n<span class=\"nf\">mov</span> <span class=\"nv\">%ebp</span><span class=\"p\">,</span> <span class=\"no\">$42</span> <span class=\"c1\">// clobber</span>\n<span class=\"nf\">mov</span> <span class=\"mi\">12</span><span class=\"p\">(</span><span class=\"nv\">%rbp</span><span class=\"p\">),</span> <span class=\"nv\">%rbp</span> <span class=\"c1\">// restore</span>\n</code></pre></div>",
        "id": 233436172,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1617775413
    },
    {
        "content": "<p>oh, well you already said what I wanted to while I was typing :)</p>",
        "id": 233436238,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1617775457
    },
    {
        "content": "<p>Sigh. It's unfortunate we can't just require no-frame-pointer.</p>",
        "id": 233436261,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617775479
    },
    {
        "content": "<p>That doesn't help, LLVM will still use a frame pointer if it needs to, for example to handle stack realignment (over-aligned locals) or variable-length alloca.</p>",
        "id": 233436324,
        "sender_full_name": "Amanieu",
        "timestamp": 1617775531
    },
    {
        "content": "<p>also, <code>xlatb</code> <em>only</em> works with <code>%rbx</code>, so if you really want it, you need <code>%rbx</code></p>",
        "id": 233436334,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1617775552
    },
    {
        "content": "<p>X86 frame layout: <a href=\"https://github.com/llvm/llvm-project/blob/main/llvm/lib/Target/X86/X86FrameLowering.cpp#L2253\">https://github.com/llvm/llvm-project/blob/main/llvm/lib/Target/X86/X86FrameLowering.cpp#L2253</a></p>",
        "id": 233436396,
        "sender_full_name": "Amanieu",
        "timestamp": 1617775593
    },
    {
        "content": "<p>So, clobbers we can definitely support, because we can just push and pop (and maintain alignment of we need to). Inputs and outputs are the hard part.</p>",
        "id": 233436426,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617775630
    },
    {
        "content": "<p>I suppose.</p>",
        "id": 233436499,
        "sender_full_name": "Amanieu",
        "timestamp": 1617775685
    },
    {
        "content": "<p>Memory operands should be safe as long as we save and restore the register before we change its value.</p>",
        "id": 233436502,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617775692
    },
    {
        "content": "<p>Though keep in mind that if we do this, we are forfeiting any chance of supporting <code>mem</code> operands in the future since the stack offset will be wrong.</p>",
        "id": 233436556,
        "sender_full_name": "Amanieu",
        "timestamp": 1617775721
    },
    {
        "content": "<p>will LLVM always error if you clobber %ebx or %ebp and it can't allocate it? if so, we could just rely on propagating LLVM's error.</p>",
        "id": 233436599,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1617775781
    },
    {
        "content": "<p>I think it just silently generates incorrect code.</p>",
        "id": 233436607,
        "sender_full_name": "Amanieu",
        "timestamp": 1617775801
    },
    {
        "content": "<p>Sadness...</p>",
        "id": 233436659,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1617775820
    },
    {
        "content": "<p>For input only:</p>\n<div class=\"codehilite\"><pre><span></span><code>push ebp\n// optionally align stack here\nmov ebp, {val}\n...\npop ebp\n</code></pre></div>",
        "id": 233436684,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617775844
    },
    {
        "content": "<p>Except now you can't use <code>mem</code> for <code>{val}</code> since the <code>esp</code> offset will be off.</p>",
        "id": 233436727,
        "sender_full_name": "Amanieu",
        "timestamp": 1617775898
    },
    {
        "content": "<p>Ah, I was thinking of ebp-relative, not esp-relative.</p>",
        "id": 233436790,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617775931
    },
    {
        "content": "<p>Hrm...</p>",
        "id": 233436812,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617775958
    },
    {
        "content": "<p>well...if we're going to get the out-of-line asm implementation anyway, why not rely on that for %ebp and/or %ebx clobbers?</p>",
        "id": 233436865,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1617776039
    },
    {
        "content": "<p>or maybe for %ebx clobbers, just pass it through to LLVM and say we tried our best, IIRC clang doesn't do any better</p>",
        "id": 233437007,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1617776152
    },
    {
        "content": "<p>It would be really nice if we could guarantee that a memory operand is not relative to a specific register.</p>",
        "id": 233437081,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617776210
    },
    {
        "content": "<p>hmm, how about allocating an array on stack, then passing the address of that array as a single register input operand, allowing us to guaranteed use only one reg to save/restore other regs</p>",
        "id": 233437189,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1617776341
    },
    {
        "content": "<p>bypassing LLVM's memory operands completely</p>",
        "id": 233437216,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1617776375
    },
    {
        "content": "<p>We could use a register input and just let LLVM error if we're out of registers. Doesn't work for all, works for calls or simple clobbers of ebp/end.</p>",
        "id": 233437491,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617776595
    },
    {
        "content": "<p>Consider Linux syscalls which take 6 arguments + the syscall number in registers. That's a fun one :P</p>",
        "id": 233437534,
        "sender_full_name": "Amanieu",
        "timestamp": 1617776638
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"229517\">@Jacob Lifshay</span> 1) ow, 2) that could work.</p>",
        "id": 233437708,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617776738
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"cm\">/* Six-argument syscalls use an out-of-line helper, because an inline</span>\n<span class=\"cm\">   asm using all registers apart from %esp cannot work reliably and</span>\n<span class=\"cm\">   the assembler does not support describing an asm that saves and</span>\n<span class=\"cm\">   restores %ebp itself as a separate stack frame.  This structure</span>\n<span class=\"cm\">   stores the arguments not passed in registers; %edi is passed with a</span>\n<span class=\"cm\">   pointer to this structure.  */</span>\n<span class=\"k\">struct</span> <span class=\"nc\">libc_do_syscall_args</span>\n<span class=\"p\">{</span>\n  <span class=\"kt\">int</span> <span class=\"n\">ebx</span><span class=\"p\">,</span> <span class=\"n\">edi</span><span class=\"p\">,</span> <span class=\"n\">ebp</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n</code></pre></div>",
        "id": 233437854,
        "sender_full_name": "Amanieu",
        "timestamp": 1617776864
    },
    {
        "content": "<p>Precedent.</p>",
        "id": 233437922,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617776906
    },
    {
        "content": "<p>That was glibc.</p>",
        "id": 233437962,
        "sender_full_name": "Amanieu",
        "timestamp": 1617776947
    },
    {
        "content": "<p>This is what musl does:</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"k\">static</span> <span class=\"kr\">inline</span> <span class=\"kt\">long</span> <span class=\"n\">__syscall6</span><span class=\"p\">(</span><span class=\"kt\">long</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"kt\">long</span> <span class=\"n\">a1</span><span class=\"p\">,</span> <span class=\"kt\">long</span> <span class=\"n\">a2</span><span class=\"p\">,</span> <span class=\"kt\">long</span> <span class=\"n\">a3</span><span class=\"p\">,</span> <span class=\"kt\">long</span> <span class=\"n\">a4</span><span class=\"p\">,</span> <span class=\"kt\">long</span> <span class=\"n\">a5</span><span class=\"p\">,</span> <span class=\"kt\">long</span> <span class=\"n\">a6</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">unsigned</span> <span class=\"kt\">long</span> <span class=\"n\">__ret</span><span class=\"p\">;</span>\n<span class=\"cp\">#if !defined(__PIC__) || !defined(BROKEN_EBX_ASM)</span>\n    <span class=\"n\">__asm__</span> <span class=\"n\">__volatile__</span> <span class=\"p\">(</span><span class=\"s\">\"pushl %7 ; push %%ebp ; mov 4(%%esp),%%ebp ; \"</span> <span class=\"n\">SYSCALL_INSNS</span> <span class=\"s\">\" ; pop %%ebp ; add $4,%%esp\"</span>\n        <span class=\"o\">:</span> <span class=\"s\">\"=a\"</span><span class=\"p\">(</span><span class=\"n\">__ret</span><span class=\"p\">)</span> <span class=\"o\">:</span> <span class=\"s\">\"a\"</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">),</span> <span class=\"s\">\"b\"</span><span class=\"p\">(</span><span class=\"n\">a1</span><span class=\"p\">),</span> <span class=\"s\">\"c\"</span><span class=\"p\">(</span><span class=\"n\">a2</span><span class=\"p\">),</span> <span class=\"s\">\"d\"</span><span class=\"p\">(</span><span class=\"n\">a3</span><span class=\"p\">),</span> <span class=\"s\">\"S\"</span><span class=\"p\">(</span><span class=\"n\">a4</span><span class=\"p\">),</span> <span class=\"s\">\"D\"</span><span class=\"p\">(</span><span class=\"n\">a5</span><span class=\"p\">),</span> <span class=\"s\">\"g\"</span><span class=\"p\">(</span><span class=\"n\">a6</span><span class=\"p\">)</span> <span class=\"o\">:</span> <span class=\"s\">\"memory\"</span><span class=\"p\">);</span>\n<span class=\"cp\">#else</span>\n    <span class=\"kt\">unsigned</span> <span class=\"kt\">long</span> <span class=\"n\">a1a6</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"n\">a1</span><span class=\"p\">,</span> <span class=\"n\">a6</span> <span class=\"p\">};</span>\n    <span class=\"n\">__asm__</span> <span class=\"n\">__volatile__</span> <span class=\"p\">(</span><span class=\"s\">\"pushl %1 ; push %%ebx ; push %%ebp ; mov 8(%%esp),%%ebx ; mov 4(%%ebx),%%ebp ; mov (%%ebx),%%ebx ; \"</span> <span class=\"n\">SYSCALL_INSNS</span> <span class=\"s\">\" ; pop %%ebp ; pop %%ebx ; add $4,%%esp\"</span>\n        <span class=\"o\">:</span> <span class=\"s\">\"=a\"</span><span class=\"p\">(</span><span class=\"n\">__ret</span><span class=\"p\">)</span> <span class=\"o\">:</span> <span class=\"s\">\"g\"</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">a1a6</span><span class=\"p\">),</span> <span class=\"s\">\"a\"</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">),</span> <span class=\"s\">\"c\"</span><span class=\"p\">(</span><span class=\"n\">a2</span><span class=\"p\">),</span> <span class=\"s\">\"d\"</span><span class=\"p\">(</span><span class=\"n\">a3</span><span class=\"p\">),</span> <span class=\"s\">\"S\"</span><span class=\"p\">(</span><span class=\"n\">a4</span><span class=\"p\">),</span> <span class=\"s\">\"D\"</span><span class=\"p\">(</span><span class=\"n\">a5</span><span class=\"p\">)</span> <span class=\"o\">:</span> <span class=\"s\">\"memory\"</span><span class=\"p\">);</span>\n<span class=\"cp\">#endif</span>\n    <span class=\"k\">return</span> <span class=\"n\">__ret</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 233437968,
        "sender_full_name": "Amanieu",
        "timestamp": 1617776957
    },
    {
        "content": "<p>Doing that automatically seems, I hesitate to say \"reasonable\", but, balanced in favor of correctness and user-friendliness.</p>",
        "id": 233437969,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617776957
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> The musl approach seems doable as well, yeah.</p>",
        "id": 233438201,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617777132
    },
    {
        "content": "<p>Also this doesn't rule out memory operands forever, just until LLVM gets smarter.</p>",
        "id": 233438255,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617777185
    },
    {
        "content": "<p>On the other hand there is a certain beauty in just saying \"you can't use <code>ebp</code>/<code>ebx</code> as operands, deal with it\".</p>",
        "id": 233438477,
        "sender_full_name": "Amanieu",
        "timestamp": 1617777326
    },
    {
        "content": "<p>Right up until you need to call a thing that needs those registers.</p>",
        "id": 233438510,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617777354
    },
    {
        "content": "<p>Then you implement the same hack as musl/glibc yourself. And it's not our problem as compiler devs.</p>",
        "id": 233438566,
        "sender_full_name": "Amanieu",
        "timestamp": 1617777375
    },
    {
        "content": "<p>Other than performance, what downsides does this have?</p>",
        "id": 233438580,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617777386
    },
    {
        "content": "<p>I do acknowledge that we could make this users' problem.</p>",
        "id": 233438593,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617777402
    },
    {
        "content": "<p>I am somewhat uncomfortable with the amount of complexity this adds to the compiler.</p>",
        "id": 233438600,
        "sender_full_name": "Amanieu",
        "timestamp": 1617777409
    },
    {
        "content": "<p>It would be a fixed set of instructions added to the start and end of the asm block.</p>",
        "id": 233438636,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617777440
    },
    {
        "content": "<p>Also we have to generate the most generic workaround code, which is always going to be less efficient than customized code specific to their use case.</p>",
        "id": 233438658,
        "sender_full_name": "Amanieu",
        "timestamp": 1617777468
    },
    {
        "content": "<p>For example musl just uses <code>xchg</code> instructions to swap ebx with a different registers for the 1-4 arguments cases.</p>",
        "id": 233438725,
        "sender_full_name": "Amanieu",
        "timestamp": 1617777507
    },
    {
        "content": "<p>Sure. We could in theory do that as an optimization if you have few enough register arguments, but rather than put in more cases there, I would sooner encourage people to improve LLVM. Let's minimize complexity but be correct, so that people can write the code they expect to work and have it work.</p>",
        "id": 233438891,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617777652
    },
    {
        "content": "<p>In practice, at least on x86, code that pushes and pops a few registers is not going to be the likely bottleneck in a tight loop; the processor can see that pattern.</p>",
        "id": 233439011,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617777749
    },
    {
        "content": "<p>Let's worry less about the performance, and just make it work the way people expect it to work.</p>",
        "id": 233439066,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617777825
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> Do you want to have a go at implementing this?</p>",
        "id": 233439455,
        "sender_full_name": "Amanieu",
        "timestamp": 1617778135
    },
    {
        "content": "<p>I don't have the bandwidth at the moment. Working on several other things right now. But if we file this as the plan of record, we could invite someone to implement it.</p>",
        "id": 233439918,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617778508
    },
    {
        "content": "<p>I'm still not convinced this is the best way forward...</p>",
        "id": 233439968,
        "sender_full_name": "Amanieu",
        "timestamp": 1617778542
    },
    {
        "content": "<p>But anyways, at least this doesn't affect ABI-based clobber since LLVM's base/frame registers are always callee-saved.</p>",
        "id": 233440072,
        "sender_full_name": "Amanieu",
        "timestamp": 1617778604
    },
    {
        "content": "<p>So clobber(\"ABI\") will never clobber them.</p>",
        "id": 233440087,
        "sender_full_name": "Amanieu",
        "timestamp": 1617778620
    },
    {
        "content": "<p>Tbh I don't see why llvm not knowing how to clobber ebx isn't an arbitrary limitation to fix on llvm</p>",
        "id": 233465466,
        "sender_full_name": "nagisa",
        "timestamp": 1617791896
    },
    {
        "content": "<p>By accepting backend limitations on arbitrary registers, <code>asm!</code> would only be able to support the intersection of all the inline assembly backends. LLVM uses RBX, next gcc (or whatever) uses R10, and before you know it, no registers are available generally.</p>",
        "id": 237895619,
        "sender_full_name": "Jethro",
        "timestamp": 1620424454
    },
    {
        "content": "<p>Given that “The intent is that support for asm! should be independent of the rustc back-end used” (from the RFC), I think this should be transparent to the user. Ideally LLVM would just deal with it, but if not, we need to deal with it in the compiler.</p>",
        "id": 237895690,
        "sender_full_name": "Jethro",
        "timestamp": 1620424493
    },
    {
        "content": "<p>If no one has cycles to work on this now, let's at least file an issue documenting what we want the behavior (if we can come to a consensus) to be and track this before stabilization</p>",
        "id": 237895963,
        "sender_full_name": "Jethro",
        "timestamp": 1620424643
    },
    {
        "content": "<p>I don't mind filing an issue for it. But I don't know if it is even possible to solve this problem properly.</p>",
        "id": 237896984,
        "sender_full_name": "Amanieu",
        "timestamp": 1620425120
    },
    {
        "content": "<p>It sounded like Josh proposed an approach that may work? I think it's: use another scratch register if available, or use the stack?</p>",
        "id": 237897382,
        "sender_full_name": "Jethro",
        "timestamp": 1620425292
    },
    {
        "content": "<p>Using the stack ends up with very inefficient code and prevents us from ever supporting asm memory operands in the future.</p>",
        "id": 237897515,
        "sender_full_name": "Amanieu",
        "timestamp": 1620425350
    },
    {
        "content": "<p>well, only if LLVM isn't fixed by then</p>",
        "id": 237897685,
        "sender_full_name": "Jethro",
        "timestamp": 1620425417
    },
    {
        "content": "<p>I'm drafting the issue. Should this be about x86(-64) or more general about LLVM-reserved registers for all architectures?</p>",
        "id": 237897760,
        "sender_full_name": "Jethro",
        "timestamp": 1620425459
    },
    {
        "content": "<p>I think it's also an issue on ARM: <code>r7</code> holds the syscall number on Linux but is reserved as the frame pointer.</p>",
        "id": 237898238,
        "sender_full_name": "Amanieu",
        "timestamp": 1620425703
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/85056\">https://github.com/rust-lang/rust/issues/85056</a></p>",
        "id": 237898841,
        "sender_full_name": "Jethro",
        "timestamp": 1620426105
    }
]