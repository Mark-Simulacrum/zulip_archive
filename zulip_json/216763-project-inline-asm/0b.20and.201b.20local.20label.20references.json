[
    {
        "content": "<p>See issue <a href=\"https://github.com/rust-lang/rust/issues/74558\">#74558</a>. It seems that in intel-syntax mode LLVM's integrated assembler will interpret <code>0b</code> and <code>1b</code> as x86 binary literals rather than as local label references.</p>",
        "id": 207182998,
        "sender_full_name": "Amanieu",
        "timestamp": 1597690550
    },
    {
        "content": "<p>In contrast GAS always interprets these as local labels since it doesn't support the x86 hex/binary literal syntax.</p>",
        "id": 207183263,
        "sender_full_name": "Amanieu",
        "timestamp": 1597690657
    },
    {
        "content": "<p>It's actually quite easy to fix this for us in LLVM, but then we lose x86 hex/binary literal support.</p>",
        "id": 207183304,
        "sender_full_name": "Amanieu",
        "timestamp": 1597690680
    },
    {
        "content": "<p>Thoughts?</p>",
        "id": 207183346,
        "sender_full_name": "Amanieu",
        "timestamp": 1597690684
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span></p>",
        "id": 207186016,
        "sender_full_name": "Amanieu",
        "timestamp": 1597692047
    },
    {
        "content": "<p>ow ow ow</p>",
        "id": 207186506,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597692333
    },
    {
        "content": "<p>That's not OK; <code>0b</code> <em>does</em> need to be a backwards local label.</p>",
        "id": 207186527,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597692353
    },
    {
        "content": "<p>This is a case where it's really annoying that we <em>can't</em> use prefixes in intel syntax mode.</p>",
        "id": 207186595,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597692373
    },
    {
        "content": "<p>That doesn't help, <code>$label</code> is valid syntax.</p>",
        "id": 207186938,
        "sender_full_name": "Amanieu",
        "timestamp": 1597692563
    },
    {
        "content": "<p>Hang on a moment...</p>",
        "id": 207186966,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597692584
    },
    {
        "content": "<p>Can you still use the C binary number syntax, <code>0b010101</code>?</p>",
        "id": 207186991,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597692600
    },
    {
        "content": "<p>Are you talking about a separate Intel x86 binary number syntax with a <code>b</code> <em>suffix</em>, by analogy with the <code>h</code> suffix for hex?</p>",
        "id": 207187079,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597692635
    },
    {
        "content": "<p>If that's the case, then yeah, that's not as important as local labels.</p>",
        "id": 207187112,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597692662
    },
    {
        "content": "<p>Yes I'm talking about stuff like <code>04h</code> for hex values.</p>",
        "id": 207187173,
        "sender_full_name": "Amanieu",
        "timestamp": 1597692697
    },
    {
        "content": "<p>Is it possible to disable binary literal support without disabling hex literal support?</p>",
        "id": 207187261,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597692736
    },
    {
        "content": "<p>It'd be nice to have the hex literals because those are more common, and they don't conflict with anything.</p>",
        "id": 207187310,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597692776
    },
    {
        "content": "<p>In any case we'll have to modify LLVM.</p>",
        "id": 207187324,
        "sender_full_name": "Amanieu",
        "timestamp": 1597692789
    },
    {
        "content": "<p>Oh, there isn't a configuration fix here even if we don't mind disabling both?</p>",
        "id": 207187362,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597692819
    },
    {
        "content": "<p>However I would like to point out that hex literals are not supported by GAS. So any code that uses them will fail to compile with a fallback to the system assembler.</p>",
        "id": 207187378,
        "sender_full_name": "Amanieu",
        "timestamp": 1597692830
    },
    {
        "content": "<p>Wait, are they not supported even in <code>.intel_syntax noprefix</code> mode?</p>",
        "id": 207187445,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597692848
    },
    {
        "content": "<p>Nope</p>",
        "id": 207187515,
        "sender_full_name": "Amanieu",
        "timestamp": 1597692897
    },
    {
        "content": "<p>Ah. In that case, yeah, let's disable them for portability's sake.</p>",
        "id": 207187528,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597692906
    },
    {
        "content": "<p>Can we do <em>that</em> without modifying LLVM?</p>",
        "id": 207187540,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597692912
    },
    {
        "content": "<p>Nope</p>",
        "id": 207187559,
        "sender_full_name": "Amanieu",
        "timestamp": 1597692923
    },
    {
        "content": "<p>Sigh.</p>",
        "id": 207187563,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597692926
    },
    {
        "content": "<p>What's that going to mean for the current system-LLVM support?</p>",
        "id": 207187577,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597692939
    },
    {
        "content": "<p>Can we have some kind of feature-detection mechanism added for this, so that we can tell if we have it and can use it?</p>",
        "id": 207187652,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597692966
    },
    {
        "content": "<p>(Meaning that rustc can tell if system LLVM has it?)</p>",
        "id": 207187660,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597692974
    },
    {
        "content": "<p><a href=\"https://github.com/llvm/llvm-project/blob/master/llvm/lib/CodeGen/AsmPrinter/AsmPrinterInlineAsm.cpp#L156\">https://github.com/llvm/llvm-project/blob/master/llvm/lib/CodeGen/AsmPrinter/AsmPrinterInlineAsm.cpp#L156</a></p>",
        "id": 207187694,
        "sender_full_name": "Amanieu",
        "timestamp": 1597693000
    },
    {
        "content": "<p>Sigh.</p>",
        "id": 207187888,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597693151
    },
    {
        "content": "<p>Unfortunately I don't know how to fix this without breaking Clang or making IR changes. Clang uses <code>intelsyntax</code> for its MS-style <code>__asm</code> but they want hex literals to work.</p>",
        "id": 207188683,
        "sender_full_name": "Amanieu",
        "timestamp": 1597693577
    },
    {
        "content": "<p><a href=\"https://reviews.llvm.org/D53535\">https://reviews.llvm.org/D53535</a></p>",
        "id": 207188795,
        "sender_full_name": "Amanieu",
        "timestamp": 1597693661
    },
    {
        "content": "<p>Could you add a third dialect option, for <code>IntelRust</code>? ;)</p>",
        "id": 207189344,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597693959
    },
    {
        "content": "<p>And have our intel syntax use that?</p>",
        "id": 207189360,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597693971
    },
    {
        "content": "<p>Sure, but that's what I meant about IR changes.</p>",
        "id": 207189371,
        "sender_full_name": "Amanieu",
        "timestamp": 1597693977
    },
    {
        "content": "<p>Ah.</p>",
        "id": 207189403,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597693991
    },
    {
        "content": "<p>It can get messy and breaks cross-lang LTO</p>",
        "id": 207189432,
        "sender_full_name": "Amanieu",
        "timestamp": 1597694007
    },
    {
        "content": "<p>Sigh. Then in that case, we might as well keep the existing intel syntax, and just add a parameter for \"support masm literals\" that defaults to true for intel syntax.</p>",
        "id": 207189451,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597694023
    },
    {
        "content": "<p>Again, that parameter needs to pass through the LLVM IR all the way to the back-end</p>",
        "id": 207189530,
        "sender_full_name": "Amanieu",
        "timestamp": 1597694056
    },
    {
        "content": "<p>It's the same issue.</p>",
        "id": 207189533,
        "sender_full_name": "Amanieu",
        "timestamp": 1597694059
    },
    {
        "content": "<p>I understand that; I meant, if you <em>have</em> to change the IR anyway, there's no need to make it a new dialect.</p>",
        "id": 207189561,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597694085
    },
    {
        "content": "<p>Though I'm tempted to add an <code>intelgnu</code> option that's compatible with the GAS <code>intel_syntax</code>.</p>",
        "id": 207189772,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597694211
    },
    {
        "content": "<p>That way we can improve it in the future, such as by adding support for optional prefixes. :)</p>",
        "id": 207189806,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597694225
    },
    {
        "content": "<p>Intel syntax is such a mess ;_;</p>",
        "id": 207189844,
        "sender_full_name": "Amanieu",
        "timestamp": 1597694249
    },
    {
        "content": "<p>But in any case, this is <em>definitely</em> a problem. People expect local labels to work, and use them extensively in GCC inline asm.</p>",
        "id": 207189864,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597694264
    },
    {
        "content": "<p>Here's a wild thought...</p>",
        "id": 207190219,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597694467
    },
    {
        "content": "<p>Inline assembly is treated as a string in LLVM IR, right?</p>",
        "id": 207190416,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597694554
    },
    {
        "content": "<p>\"here's a string, handle it as inline assembly with these options\"?</p>",
        "id": 207190440,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597694565
    },
    {
        "content": "<p>Yes, essentially</p>",
        "id": 207190453,
        "sender_full_name": "Amanieu",
        "timestamp": 1597694574
    },
    {
        "content": "<p>Then in that case...</p>",
        "id": 207190461,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597694581
    },
    {
        "content": "<p>Since LLVM knows how to fully lex and parse the assembly already, what would happen if we teach LLVM's lexer/parser to do a minor translation here?</p>",
        "id": 207190556,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597694625
    },
    {
        "content": "<p>Emit a string that will work with existing IR.</p>",
        "id": 207190631,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597694650
    },
    {
        "content": "<p>It'd be a pain, but it'd be compatible and wouldn't involve a break-the-world IR change.</p>",
        "id": 207190739,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597694716
    },
    {
        "content": "<p>(That said, doesn't cross-language LTO require exactly the same version of LLVM anyway?)</p>",
        "id": 207190781,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597694736
    },
    {
        "content": "<p>(So is an IR change <em>that</em> bad?)</p>",
        "id": 207190801,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597694746
    },
    {
        "content": "<p>Except inline assembler is only parseable after register substitutions have been performed.</p>",
        "id": 207190816,
        "sender_full_name": "Amanieu",
        "timestamp": 1597694757
    },
    {
        "content": "<p>Oh. :(</p>",
        "id": 207190863,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597694763
    },
    {
        "content": "<p>Right.</p>",
        "id": 207190882,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597694769
    },
    {
        "content": "<p>OK. Then how terrible would it be to make a new assembly dialect here? That would also be the first step towards things like \"limit the available macro syntax\", if we want to do that.</p>",
        "id": 207190964,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597694819
    },
    {
        "content": "<p>I had that in mind actually</p>",
        "id": 207191003,
        "sender_full_name": "Amanieu",
        "timestamp": 1597694837
    },
    {
        "content": "<p>If the asm string starts with <code>/* no-masm-literals */</code> then disable masm literals.</p>",
        "id": 207191029,
        "sender_full_name": "Amanieu",
        "timestamp": 1597694853
    },
    {
        "content": "<p>It's a bit of  a hack though.</p>",
        "id": 207191057,
        "sender_full_name": "Amanieu",
        "timestamp": 1597694878
    },
    {
        "content": "<p>Oh hey. There are worse plans, yeah.</p>",
        "id": 207191224,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597694954
    },
    {
        "content": "<p>Maybe something non-comment, though, so that if LLVM doesn't understand it it actually breaks?</p>",
        "id": 207191249,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597694967
    },
    {
        "content": "<p><code>.masm_literals off</code>?</p>",
        "id": 207191261,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597694978
    },
    {
        "content": "<p>Actually...</p>",
        "id": 207191272,
        "sender_full_name": "Amanieu",
        "timestamp": 1597694988
    },
    {
        "content": "<p>Maybe we can fix this on the clang side</p>",
        "id": 207191283,
        "sender_full_name": "Amanieu",
        "timestamp": 1597694995
    },
    {
        "content": "<p><code>.masm_literals on</code>? ;)</p>",
        "id": 207191333,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597695006
    },
    {
        "content": "<p>Either approach sounds promising, compared to an IR change.</p>",
        "id": 207191375,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597695033
    },
    {
        "content": "<p>Clang runs the asm parser twice: once in the front-end to do variable substitution and infer constraints, once in the backend for codegen (like us).</p>",
        "id": 207191388,
        "sender_full_name": "Amanieu",
        "timestamp": 1597695039
    },
    {
        "content": "<p>We could have Clang translate MASM literals to standard literals in its front-end pass.</p>",
        "id": 207191410,
        "sender_full_name": "Amanieu",
        "timestamp": 1597695057
    },
    {
        "content": "<p>And we don't use that front-end pass?</p>",
        "id": 207191433,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597695068
    },
    {
        "content": "<p>And remove MASM literal support from the back-end.</p>",
        "id": 207191443,
        "sender_full_name": "Amanieu",
        "timestamp": 1597695071
    },
    {
        "content": "<p>That front-end pass is only used for MS-style asm and clang needs to figure out the constraints by parsing the asm.</p>",
        "id": 207191492,
        "sender_full_name": "Amanieu",
        "timestamp": 1597695101
    },
    {
        "content": "<p>That sounds promising to me, as long as nothing else using LLVM as a backend counts on MASM literal support.</p>",
        "id": 207191510,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597695116
    },
    {
        "content": "<p>Hmm LLVM 11 is getting released in a week...</p>",
        "id": 207191883,
        "sender_full_name": "Amanieu",
        "timestamp": 1597695353
    },
    {
        "content": "<p>Too late for breaking changes I think :/</p>",
        "id": 207191899,
        "sender_full_name": "Amanieu",
        "timestamp": 1597695361
    },
    {
        "content": "<p>Guess it'll have to be in LLVM 12, but that's really unfortunate.</p>",
        "id": 207202307,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597701948
    },
    {
        "content": "<p>Because it means inline asm probably won't be stable until LLVM 12 is at the earliest, which is probably March of next year.</p>",
        "id": 207202413,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597702016
    },
    {
        "content": "<p>we could filter for invalid syntax and gate on that</p>",
        "id": 207203051,
        "sender_full_name": "nagisa",
        "timestamp": 1597702503
    },
    {
        "content": "<p>and we probably should anyway, accidentally stabilizing some assembly features as part of upgrading llvm would be fairly nasty.</p>",
        "id": 207203128,
        "sender_full_name": "nagisa",
        "timestamp": 1597702562
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> <code>jmp 0b</code> is going to be really common.</p>",
        "id": 207203138,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597702563
    },
    {
        "content": "<p>I know, but you can also let people use rest of the assembly while this is being readied.</p>",
        "id": 207203192,
        "sender_full_name": "nagisa",
        "timestamp": 1597702590
    },
    {
        "content": "<p>Sure, but I don't think we can call it stable until then.</p>",
        "id": 207203200,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597702599
    },
    {
        "content": "<p>eh, not feature complete maybe.</p>",
        "id": 207203238,
        "sender_full_name": "nagisa",
        "timestamp": 1597702635
    },
    {
        "content": "<p>we have many different features that first stabilized or are looking to stabilize a fairly useful subset (const eval, stabilization)</p>",
        "id": 207203271,
        "sender_full_name": "nagisa",
        "timestamp": 1597702672
    },
    {
        "content": "<p>Oh I just had an idea: we could make LLVM's asm parser \"smart\". If a local label has previously been defined then it should parse <code>0b</code> as a local label, otherwise as a literal.</p>",
        "id": 207204226,
        "sender_full_name": "Amanieu",
        "timestamp": 1597703294
    },
    {
        "content": "<p>...whoa.</p>",
        "id": 207204567,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597703550
    },
    {
        "content": "<p>We're rather lucky in that <code>b</code> is \"back\", so that <em>would</em> work...</p>",
        "id": 207204576,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597703565
    },
    {
        "content": "<p>Yep</p>",
        "id": 207204599,
        "sender_full_name": "Amanieu",
        "timestamp": 1597703590
    },
    {
        "content": "<p>If you can make that work, I'm going to be <em>deeply</em> impressed.</p>",
        "id": 207204610,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597703601
    },
    {
        "content": "<p><span aria-label=\"popcorn\" class=\"emoji emoji-1f37f\" role=\"img\" title=\"popcorn\">:popcorn:</span></p>",
        "id": 207204613,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597703605
    },
    {
        "content": "<p>I'm pretty sure I can make it work.</p>",
        "id": 207204622,
        "sender_full_name": "Amanieu",
        "timestamp": 1597703611
    },
    {
        "content": "<p>Looking at the code right now.</p>",
        "id": 207204636,
        "sender_full_name": "Amanieu",
        "timestamp": 1597703622
    },
    {
        "content": "<p>Does LLVM's parser currently check things like \"the local label you referenced actually exists\"?</p>",
        "id": 207204652,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597703637
    },
    {
        "content": "<p>Hmm, actually it's a bit trickier since the lexer would need to call back to the parser</p>",
        "id": 207204888,
        "sender_full_name": "Amanieu",
        "timestamp": 1597703769
    },
    {
        "content": "<p>Could try something more general like \"if a local label is defined, disable masm literal parsing\"</p>",
        "id": 207204936,
        "sender_full_name": "Amanieu",
        "timestamp": 1597703806
    },
    {
        "content": "<p>Another option would be to do what Rust does sometimes, and let the lexer do what it's going to do but fix it up in the parser. :)</p>",
        "id": 207204961,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597703824
    }
]