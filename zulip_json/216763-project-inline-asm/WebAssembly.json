[
    {
        "content": "<p>LLVM, and Rust's current <code>asm!</code>, both support inline assembly for WebAssembly. Take a look at <a href=\"https://godbolt.org/z/h9C4KE\" target=\"_blank\" title=\"https://godbolt.org/z/h9C4KE\">https://godbolt.org/z/h9C4KE</a> (previously linked from an internals thread). I think it seems worthwhile to document such support in the initial RFC.</p>",
        "id": 183496709,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1576431085
    },
    {
        "content": "<p>I'm currently looking through LLVM's source trying to find more information on the constraints LLVM supports for inline assembly on a WebAssembly target, since the documentation doesn't talk about that.</p>",
        "id": 183496713,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1576431121
    },
    {
        "content": "<p>...interesting. Apparently that backend <em>only</em> supports the <code>\"r\"</code> constraint, treating it as an index for a local; you can't access things directly from the stack in any way. That makes a certain amount of sense, and hopefully the optimizer can eliminate inefficiencies like loading the same local multiple times.</p>",
        "id": 183497481,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1576432503
    },
    {
        "content": "<p>So, it seems worth documenting how <code>asm!</code> will work with WebAssembly, as a somewhat unique backend that doesn't have named registers at all.</p>",
        "id": 183497494,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1576432549
    },
    {
        "content": "<p>Is there any actual use case for inline asm for wasm though? The only one I can think of is <code>hint::black_box</code>.</p>",
        "id": 183497837,
        "sender_full_name": "Amanieu",
        "timestamp": 1576433058
    },
    {
        "content": "<p>Sure. Directly writing algorithms in assembly, experimenting with new instructions...</p>",
        "id": 183498431,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1576434070
    },
    {
        "content": "<p>A direct line to WASM sqrt on stable would be nice. Currently you have to call the unstable core intrinsic (Nightly) or go through std (and the rest of the crate might generally otherwise be no_std otherwise)</p>",
        "id": 183566185,
        "sender_full_name": "Lokathor",
        "timestamp": 1576514224
    },
    {
        "content": "<p>This shouldn't stop us from stabilizing intrinsics like that, but yes.</p>",
        "id": 183569434,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1576516072
    },
    {
        "content": "<p>Oh there's a whole mess of issues on that particular intrinsic :P</p>",
        "id": 183570776,
        "sender_full_name": "Lokathor",
        "timestamp": 1576516937
    },
    {
        "content": "<p>Oh? Do tell.</p>",
        "id": 183581617,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1576524370
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 183598313,
        "sender_full_name": "Lokathor",
        "timestamp": 1576535619
    },
    {
        "content": "<p>The optimizer can't eliminate loading the same local multiple times if you do it within an asm block.</p>",
        "id": 183623244,
        "sender_full_name": "comex",
        "timestamp": 1576565939
    },
    {
        "content": "<p>Unless you want to deviate from the general behavior that the optimizer doesn't inspect asm blocks.</p>",
        "id": 183623256,
        "sender_full_name": "comex",
        "timestamp": 1576565979
    },
    {
        "content": "<p>I think that ideally we'd have a more efficient way to pass inputs to WebAssembly asm blocks, which would put things directly on the stack for you.  Of course, that would require backend support, and it's far from urgent.</p>",
        "id": 183623338,
        "sender_full_name": "comex",
        "timestamp": 1576566107
    },
    {
        "content": "<p>I don't mean the rustc optimizer in that case.</p>",
        "id": 183639357,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1576582056
    },
    {
        "content": "<p>I mean the wasm optimizer. It should trivially be able to eliminate \"store to 1 then load to 1\".</p>",
        "id": 183639410,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1576582094
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> which wasm optimizer do you use ?</p>",
        "id": 183830731,
        "sender_full_name": "gnzlbg",
        "timestamp": 1576749318
    },
    {
        "content": "<p>AFAIK the way to optimize wasm is to generate it from, e.g., C code, using an optimizing compiler toolchain to WASM (this won't optimize that because the toolchain won't look at the inline assembly string)</p>",
        "id": 183830809,
        "sender_full_name": "gnzlbg",
        "timestamp": 1576749364
    },
    {
        "content": "<p>but once that is generated, most (all?) of the WASM -&gt; machine code generators will just generate machine code without performing any significant optimizations</p>",
        "id": 183830888,
        "sender_full_name": "gnzlbg",
        "timestamp": 1576749424
    },
    {
        "content": "<p>and AFAIK none of them optimizes across two consecutive wasm instructions</p>",
        "id": 183830918,
        "sender_full_name": "gnzlbg",
        "timestamp": 1576749453
    },
    {
        "content": "<p>Is there a tool that takes WASM and optimizes it into better WASM ?</p>",
        "id": 183831089,
        "sender_full_name": "gnzlbg",
        "timestamp": 1576749576
    },
    {
        "content": "<p>There's wasm-opt.</p>",
        "id": 183855764,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1576769546
    },
    {
        "content": "<p>Cool! Does it run as part of the LLVM pipeline ?</p>",
        "id": 184101411,
        "sender_full_name": "gnzlbg",
        "timestamp": 1577104660
    },
    {
        "content": "<p>I believe that one is generally expected to run it themselves as part of their <code>make</code> script</p>",
        "id": 184108979,
        "sender_full_name": "Lokathor",
        "timestamp": 1577112405
    },
    {
        "content": "<p>We would kind of need LLVM to guarantee never to run those as part of its pipeline.</p>",
        "id": 184375404,
        "sender_full_name": "gnzlbg",
        "timestamp": 1577540050
    },
    {
        "content": "<p>(If the semantics of <code>asm!(\"...\")</code> are that we never inspect the assembly string, since otherwise running those would \"modify\" the assembly string)</p>",
        "id": 184375405,
        "sender_full_name": "gnzlbg",
        "timestamp": 1577540084
    },
    {
        "content": "<p>That is, an argument in favor of not specifying that the assembly string is preserved \"verbatim\" (modulo interpolation), is that it prevents optimizations on the resulting machine code, e.g., via <code>wasm-opt</code> for WASM.</p>",
        "id": 184375423,
        "sender_full_name": "gnzlbg",
        "timestamp": 1577540152
    },
    {
        "content": "<p>I personally think that we should simply not expose inline asm for wasm.</p>",
        "id": 184383460,
        "sender_full_name": "Amanieu",
        "timestamp": 1577554096
    },
    {
        "content": "<p>On most architectures, people really do rely on the fact that the exact instructions specified in the asm block are the ones that are executed. This is observable in various ways such as signal handlers, debugging through ptrace, and even just reading the instruction bytes from memory. None of these are available in WASM, which is why the compiler is allowed to mess around with instructions at the machine code level.</p>",
        "id": 184383461,
        "sender_full_name": "Amanieu",
        "timestamp": 1577554099
    },
    {
        "content": "<p>We should expose it</p>",
        "id": 184386260,
        "sender_full_name": "Lokathor",
        "timestamp": 1577558595
    },
    {
        "content": "<p>We should simply say that on wasm it's not assured to include those final instructions, if we have to do that</p>",
        "id": 184386264,
        "sender_full_name": "Lokathor",
        "timestamp": 1577558631
    },
    {
        "content": "<p>What if we initially allowed inline wasm <em>but not</em> with the <code>volatile</code> effect?</p>",
        "id": 184390024,
        "sender_full_name": "Lokathor",
        "timestamp": 1577565336
    },
    {
        "content": "<p>I'd rather just allow it with that caveat than mess with the <code>asm!</code> flags.</p>",
        "id": 184390674,
        "sender_full_name": "Amanieu",
        "timestamp": 1577566425
    },
    {
        "content": "<p>Also works</p>",
        "id": 184398879,
        "sender_full_name": "Lokathor",
        "timestamp": 1577582177
    },
    {
        "content": "<p>The only thing that worries me is that this is true for WASM today</p>",
        "id": 184652611,
        "sender_full_name": "gnzlbg",
        "timestamp": 1577973502
    },
    {
        "content": "<p>its unclear to me whether this will continue to be true for WASM in the future</p>",
        "id": 184652617,
        "sender_full_name": "gnzlbg",
        "timestamp": 1577973512
    },
    {
        "content": "<p>For example, consider <a href=\"https://github.com/WebAssembly/simd/issues/118\" target=\"_blank\" title=\"https://github.com/WebAssembly/simd/issues/118\">https://github.com/WebAssembly/simd/issues/118</a></p>",
        "id": 184652653,
        "sender_full_name": "gnzlbg",
        "timestamp": 1577973565
    },
    {
        "content": "<p>For some final \"targets\" some WASM code generators can lower some vector shuffle sequences more efficiently than others</p>",
        "id": 184652730,
        "sender_full_name": "gnzlbg",
        "timestamp": 1577973610
    },
    {
        "content": "<p>that is, people actually want to specify different vector shuffles for WASM depending on which engine and which final target is that WASM going to end up running</p>",
        "id": 184652761,
        "sender_full_name": "gnzlbg",
        "timestamp": 1577973648
    },
    {
        "content": "<p>One can currently use inline assembly to tell LLVM to emit a particular sequence of instructions, e.g., that is known to be faster than the \"optimized WASM\" on say V8 targetting x86</p>",
        "id": 184652811,
        "sender_full_name": "gnzlbg",
        "timestamp": 1577973695
    },
    {
        "content": "<p>Arguably, this is a very hacky thing to do in the first place, but these hacks all break down if LLVM is able to optimize the WASM inline assembly, or if a generic WASM optimizer is used after the fact</p>",
        "id": 184652955,
        "sender_full_name": "gnzlbg",
        "timestamp": 1577973812
    },
    {
        "content": "<p>well nothing can <em>ever</em> assure that no one anywhere will use <code>wasm-opt</code> after the fact</p>",
        "id": 184683404,
        "sender_full_name": "Lokathor",
        "timestamp": 1577998876
    },
    {
        "content": "<p>the same as you can't assure the programmer that no one will call <code>strip</code> or <code>objcopy</code> on their program after the fact</p>",
        "id": 184683439,
        "sender_full_name": "Lokathor",
        "timestamp": 1577998909
    },
    {
        "content": "<p>so it comes down to how much info LLVM and other backend options will allow us to specify regarding \"please don't do anything to alter this text\",</p>",
        "id": 184683545,
        "sender_full_name": "Lokathor",
        "timestamp": 1577998976
    },
    {
        "content": "<p>and if the final wasm is then further post-processed after rustc puts it on disk, that's user error</p>",
        "id": 184683575,
        "sender_full_name": "Lokathor",
        "timestamp": 1577999009
    },
    {
        "content": "<p>Not necessarily user error. It's perfectly acceptable to run wasm-opt or similar tools.</p>",
        "id": 184684336,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1577999488
    },
    {
        "content": "<p>We should guarantee that <em>rustc</em> won't unexpectedly modify the assembly.</p>",
        "id": 184684364,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1577999519
    },
    {
        "content": "<p>I don't see that as incompatible with providing options that allow the user to invoke wasm-opt or similar, or with letting LLVM's backend run wasm-opt or equivalent, as long as there's a way to avoid that if you don't want it.</p>",
        "id": 184684433,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1577999557
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> FWIW I was responding to <span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> :</p>\n<blockquote>\n<p>I personally think that we should simply not expose inline asm for wasm.</p>\n<p>On most architectures, people really do rely on the fact that the exact instructions specified in the asm block are the ones that are executed. This is observable in various ways such as signal handlers, debugging through ptrace, and even just reading the instruction bytes from memory. None of these are available in WASM, which is why the compiler is allowed to mess around with instructions at the machine code level.</p>\n</blockquote>\n<p>by providing an example where WASM users are already relying today on inline assembly not modifying their assembly strings, to workaround certain WASM \"features\", e.g., to implement certain WASM-engine and target specific optimizations in the WASM they generate against the goals of the \"generic\" WASM optimizer (LLVM) in our toolchain.</p>",
        "id": 184735335,
        "sender_full_name": "gnzlbg",
        "timestamp": 1578059974
    }
]