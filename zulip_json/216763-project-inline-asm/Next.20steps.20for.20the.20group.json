[
    {
        "content": "<p>The inline assembly RFC has a <a href=\"https://github.com/Amanieu/rfcs/blob/inline-asm/text/0000-inline-asm.md#future-possibilities\">list</a> of future possibilities for features to add to inline assembly.</p>",
        "id": 197562092,
        "sender_full_name": "Amanieu",
        "timestamp": 1589466019
    },
    {
        "content": "<p>I personally feel that these two are the most promising:</p>\n<ul>\n<li>const and sym for global_asm!</li>\n<li>Clobbers for function calls</li>\n</ul>",
        "id": 197562137,
        "sender_full_name": "Amanieu",
        "timestamp": 1589466044
    },
    {
        "content": "<p>I'm particularly interested in bringing <code>global_asm!</code> up to speed with the new features of <code>asm!</code>. As a bonus, this would allow us to deprecate the existing naked function support and replace it with a proc macro.</p>",
        "id": 197562883,
        "sender_full_name": "Amanieu",
        "timestamp": 1589466444
    },
    {
        "content": "<p>The clobber support feels important since it fills in a usability hole with <code>asm!</code>: you can't reliably mark all registers as clobbered if the ISA can add new registers in the future.</p>",
        "id": 197563027,
        "sender_full_name": "Amanieu",
        "timestamp": 1589466531
    },
    {
        "content": "<p>So, a \"clobber all registers that a function call is considered to clobber on the native ABI\" clobber?</p>",
        "id": 197592007,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589478377
    },
    {
        "content": "<p>That seems like a great idea to me.</p>",
        "id": 197592031,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589478391
    },
    {
        "content": "<p>I personally am excited about having a structured, <code>if</code>-like or <code>match</code>-like construct that can effectively replace <code>asm goto</code>.</p>",
        "id": 197592139,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589478441
    },
    {
        "content": "<p>I'm less excited about asm goto since it is likely to be very difficult to implement and it doesn't really enable any new use cases like the two features I mentioned above: you can always emulate asm goto by returning an int and matching on that.</p>",
        "id": 197592640,
        "sender_full_name": "Amanieu",
        "timestamp": 1589478669
    },
    {
        "content": "<p>It does enable a specific new use case: static branches that use unconditional jumps and are binary-patchable.</p>",
        "id": 197594090,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589479256
    },
    {
        "content": "<p>The Linux kernel uses many of those, for performance-sensitive code.</p>",
        "id": 197594130,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589479273
    },
    {
        "content": "<p>The goal is to completely eliminate the conditional.</p>",
        "id": 197594216,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589479316
    },
    {
        "content": "<p>When global_asm gets worked on, I hope that we can give it the <code>link_section</code> attribute (I don't know if that's already possible). This would allow me to pull my project's equivalent for the \"crt0.s\" entirely inside of rust and then I'd only need to do a little linker script magic, wouldn't need to directly call the assembler (from <code>build.rs</code>) at all.</p>",
        "id": 197620030,
        "sender_full_name": "Lokathor",
        "timestamp": 1589491397
    },
    {
        "content": "<p>There won't be any attributes on <code>global_asm!</code> itself but you can use assembler directives inside it.</p>",
        "id": 197624671,
        "sender_full_name": "Amanieu",
        "timestamp": 1589494194
    },
    {
        "content": "<p>Essentially you would do <code>global_asm!(include_str!(\"crt0.s\"))</code></p>",
        "id": 197624732,
        "sender_full_name": "Amanieu",
        "timestamp": 1589494218
    },
    {
        "content": "<p>In fact, you can already do that today.</p>",
        "id": 197624777,
        "sender_full_name": "Amanieu",
        "timestamp": 1589494253
    },
    {
        "content": "<p>The only changes I want to make to <code>global_asm</code> are:</p>\n<ul>\n<li>Using intel syntax by default to match <code>asm!</code>.</li>\n<li>Allowing <code>const</code> and <code>sym</code> operands like <code>asm!</code>.</li>\n</ul>",
        "id": 197624915,
        "sender_full_name": "Amanieu",
        "timestamp": 1589494322
    },
    {
        "content": "<p>I'm assuming it'll support the <code>att_syntax</code> option?</p>",
        "id": 197626620,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589495484
    },
    {
        "content": "<p>Looking over the entire <code>asm!</code> RFC again, I don't see anything else that would need changing in <code>global_asm!</code>, yeah.</p>",
        "id": 197626849,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589495627
    }
]