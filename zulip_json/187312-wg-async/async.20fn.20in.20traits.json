[
    {
        "content": "<p>I was looking more closely at the story of async fn in traits and I realized it had some limitations.</p>",
        "id": 235321357,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618914898
    },
    {
        "content": "<p>The trait doesn't include an <code>&amp;self</code> or <code>&amp;mut self</code> in the method signature.</p>",
        "id": 235321386,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618914913
    },
    {
        "content": "<p>It also doesn't describe where the trait is used in the library at all.</p>",
        "id": 235321425,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618914938
    },
    {
        "content": "<p>I noticed because I'm working on a shiny future variant and I realize that it matters :)</p>",
        "id": 235321443,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618914950
    },
    {
        "content": "<p>I'll poke around</p>",
        "id": 235321448,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618914953
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"400241\">@Zeeshan Ali</span></p>",
        "id": 235321455,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618914956
    },
    {
        "content": "<p>and <span class=\"user-mention\" data-user-id=\"224872\">@rylev</span> I suppose</p>",
        "id": 235321501,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618914965
    },
    {
        "content": "<p>I'm wondering if folks know of a <code>HttpService</code> trait from existing crates</p>",
        "id": 235321524,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618914978
    },
    {
        "content": "<p>I saw though that <span class=\"user-mention\" data-user-id=\"400241\">@Zeeshan Ali</span> wanted an async version of the <a href=\"https://docs.rs/zbus/1.9.1/zbus/trait.Interface.html\">zbus trait</a></p>",
        "id": 235321547,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618914991
    },
    {
        "content": "<p>(that helps)</p>",
        "id": 235321578,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618915010
    },
    {
        "content": "<p>the lack of &amp;self in the signature was purely an oversight.</p>",
        "id": 235321996,
        "sender_full_name": "rylev",
        "timestamp": 1618915270
    },
    {
        "content": "<p>The story is very loosely based on my experience with: <a href=\"https://github.com/Azure/azure-sdk-for-rust/blob/8530b14828869e93f200894c7f79b6be3a3ed5e3/sdk/core/src/http_client.rs#L11\">https://github.com/Azure/azure-sdk-for-rust/blob/8530b14828869e93f200894c7f79b6be3a3ed5e3/sdk/core/src/http_client.rs#L11</a></p>",
        "id": 235322115,
        "sender_full_name": "rylev",
        "timestamp": 1618915332
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224872\">@rylev</span> that helps; I'm trying to write a \"shiny future\" variant and i'm hitting some interesting questions</p>",
        "id": 235322620,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618915683
    },
    {
        "content": "<p>One of them was that I wanted to incorporate the point about being able to bound the futures that get returned</p>",
        "id": 235322748,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618915754
    },
    {
        "content": "<p>e.g., maybe you want to require that the futures returned by <code>execute_request</code> are <code>Send</code> too</p>",
        "id": 235322763,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618915769
    },
    {
        "content": "<p>but in order to make that make sense, I kind of had to start assuming other things, like some form of rayon integration :)</p>",
        "id": 235322843,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618915805
    },
    {
        "content": "<p>because otherwise, the futures would capture the <code>&amp;self</code> and you couldn't really spawn tasks that process them</p>",
        "id": 235322861,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618915823
    },
    {
        "content": "<p>I see though that you have <a href=\"https://github.com/Azure/azure-sdk-for-rust/blob/8530b14828869e93f200894c7f79b6be3a3ed5e3/sdk/core/src/http_client.rs#L10\">Send</a> here</p>",
        "id": 235323057,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618915961
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224872\">@rylev</span> it looks like you use the <code>HttpClient</code> exclusively as a <code>Arc&lt;dyn HttpClient&gt;</code>, yes?</p>",
        "id": 235324109,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618916547
    },
    {
        "content": "<p>Yes we're basically always using it in an Arc though it wasn't always like this. We're in the middle of a pretty large refactor so things are a bit messy</p>",
        "id": 235330103,
        "sender_full_name": "rylev",
        "timestamp": 1618919718
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224872\">@rylev</span> as far as I can tell, at no point does the future returned -- ah, I see</p>",
        "id": 235365131,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618932980
    },
    {
        "content": "<p>I was going to say that the future from <code>http_client.execute_request</code> is never sent to another thread</p>",
        "id": 235365158,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618932991
    },
    {
        "content": "<p>but that's not the point</p>",
        "id": 235365162,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618932993
    },
    {
        "content": "<p>it is potentially live during the await (of course!)</p>",
        "id": 235365186,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618933002
    },
    {
        "content": "<p>and hence if we want the future that is awaiting it to be <code>Send</code></p>",
        "id": 235365241,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618933025
    },
    {
        "content": "<p>it must itself be <code>Send</code></p>",
        "id": 235365258,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618933032
    },
    {
        "content": "<p>Exactly</p>",
        "id": 235367818,
        "sender_full_name": "rylev",
        "timestamp": 1618933997
    },
    {
        "content": "<p>We have one in tower that we've spent a lot of time on. Its currently a trait alias and tower's service layer is our attempt at getting a fully featured trait that does async stuff (kinda). I assume you already know about this though.</p>",
        "id": 235371163,
        "sender_full_name": "Lucio Franco",
        "timestamp": 1618935156
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"207781\">@Lucio Franco</span> one what exactly?</p>",
        "id": 235372533,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618935679
    },
    {
        "content": "<p>do you mean the <code>Service</code> trait?</p>",
        "id": 235372543,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618935684
    },
    {
        "content": "<p>actix-web has <a href=\"https://docs.rs/actix-web/3.3.2/actix_web/dev/trait.Transform.html\"><code>Transform</code></a>, <a href=\"https://docs.rs/actix-web/3.3.2/actix_web/trait.FromRequest.html\"><code>FromRequest</code></a>, <a href=\"https://docs.rs/actix-service/2.0.0/actix_service/trait.ServiceFactory.html\"><code>ServiceFactory</code></a>, and <a href=\"https://docs.rs/actix-web/3.3.2/actix_web/dev/trait.Service.html\"><code>Service</code></a>, all of which have an associated <code>type Future</code> and <code>poll_ready</code> function.</p>",
        "id": 235380134,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1618938653
    },
    {
        "content": "<p>and it is quite common for users to come with confusing error messages asking for help when they try to implement it themselves</p>",
        "id": 235380192,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1618938686
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"363998\">@Ibraheem Ahmed</span> thanks!</p>",
        "id": 235388280,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618941956
    },
    {
        "content": "<p>yes, and also Actix stuff is inspired by tower :)</p>",
        "id": 235766761,
        "sender_full_name": "Lucio Franco",
        "timestamp": 1619135973
    },
    {
        "content": "<p>I am basically waiting for GAT/async traits to work on the next gen so happy to spend sometime explaining requirements of what we need etc</p>",
        "id": 235766780,
        "sender_full_name": "Lucio Franco",
        "timestamp": 1619135990
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"207781\">@Lucio Franco</span> notes or conversations would be great</p>",
        "id": 235831595,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619180935
    },
    {
        "content": "<p>I don't think we have any notes yet but I can write some up. Maybe it makes sense to setup sometime to do that.</p>",
        "id": 235874754,
        "sender_full_name": "Lucio Franco",
        "timestamp": 1619197353
    }
]