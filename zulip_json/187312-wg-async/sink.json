[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> hey! not sure if this is the right place or not, but I was curious in your mind what the status of the <code>futures-sink</code> stuff is and what I might be able to do to take it over the finish line aka not in its own crate but into <code>futures-core</code>. I didn't see any issues around this so just wanted to clear some stuff up. Thanks!</p>",
        "id": 183278220,
        "sender_full_name": "Lucio Franco",
        "timestamp": 1576169495
    },
    {
        "content": "<p>I'd like to learn more about what role the sink trait plays</p>",
        "id": 183285782,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576174770
    },
    {
        "content": "<p>Sure! So a couple of things, high level its used generally in combination with streams to create a chain of async processing. Things like <code>tokio-tower</code> uses both of these interfaces to abstract low level protocols/framing. Currently, lets say we have a stream of items coming in, sink could be used as an interface to forward those items into a buffer for example. Where sink fits in regards to generators and actual language things I am not totally sure. But with futures 0.1 where combinators were heavily used it was really helpful. </p>\n<p>For practical use, at least at my work we have used it as a core foundational component <a href=\"https://github.com/timberio/vector/blob/master/src/sinks/mod.rs#L27\" target=\"_blank\" title=\"https://github.com/timberio/vector/blob/master/src/sinks/mod.rs#L27\">https://github.com/timberio/vector/blob/master/src/sinks/mod.rs#L27</a> for how we create logs. So streams are a lower level piece compared to say the tower Service trait.</p>\n<p>Happy to explain more if there is something you're more interested in.</p>",
        "id": 183286695,
        "sender_full_name": "Lucio Franco",
        "timestamp": 1576175290
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 183318493,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1576198063
    },
    {
        "content": "<p>What is the motivation for having the <code>Sink</code> trait in <code>futures-core</code>?</p>",
        "id": 183318547,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1576198085
    },
    {
        "content": "<p>Is there something about having it be independently versioned / in a separate crate that is making it difficult to use?</p>",
        "id": 183318581,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1576198116
    },
    {
        "content": "<p>I don't know of any open issues that I feel need to be resolved, but I also don't see a reason to take an extra step to tie its version inextricably to that of Stream.</p>",
        "id": 183318609,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1576198161
    },
    {
        "content": "<blockquote>\n<p>What is the motivation for having the Sink trait in futures-core?</p>\n</blockquote>\n<p>Why do you think the motivation is different from including <code>Stream</code>? Just because <code>Stream</code> might get special language support? Even though it's not sure whether it's needed? Imho they are just both counterparts of each other. And if the goal of future-rs is to standardize common traits, then it should contain both.</p>",
        "id": 183330936,
        "sender_full_name": "Matthias247",
        "timestamp": 1576216143
    },
    {
        "content": "<blockquote>\n<p>I'd like to learn more about what role the sink trait plays</p>\n</blockquote>\n<p>As I had written above, to me it is just the <code>write</code> counterpart of the <code>Stream</code>. One reads a value, the other writes a value. E.g. in order to model zero-copy async IO, you would have an object (socket/file/etc) which acts as a <code>Stream&lt;Bytes&gt;</code> for reading from it and a <code>Sink&lt;Bytes&gt;</code> in order to write to it.</p>",
        "id": 183331080,
        "sender_full_name": "Matthias247",
        "timestamp": 1576216358
    },
    {
        "content": "<p>I agree they are \"tied together\", but I'm not convinced that we need a <code>Sink</code> abstraction. We have <code>Iterator</code> (a producer) but we have no \"consumer\" counterpart, for example.</p>",
        "id": 183357519,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576242792
    },
    {
        "content": "<p>I'm not saying it's a problem to have one, but I think at minimum there's no reason they have to go into <em>std</em> together or be versioned together.</p>",
        "id": 183357526,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576242814
    },
    {
        "content": "<p>(I'll try to look at the links <span class=\"user-mention\" data-user-id=\"207781\">@Lucio Franco</span> sent)</p>",
        "id": 183357537,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576242826
    },
    {
        "content": "<p>I guess one could say that the sync consumer is <code>FnMut</code></p>",
        "id": 183357602,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576242858
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> mostly, the question is around confusion for users, if I were new I would expect that sink wasn't ready/I shouldn't use it. So having it in a different crate makes it not as visible as say stream is.</p>",
        "id": 183382967,
        "sender_full_name": "Lucio Franco",
        "timestamp": 1576259873
    },
    {
        "content": "<p>Yeah, maybe it doesn't fit and people need specialized ones but I think we have seen good success with sink in futures 0.1 that it probably doesn't make sense to not include it. Mostly, I just wanted to start a discussion around this.</p>",
        "id": 183383041,
        "sender_full_name": "Lucio Franco",
        "timestamp": 1576259924
    },
    {
        "content": "<blockquote>\n<p>I agree they are \"tied together\", but I'm not convinced that we need a Sink abstraction. We have Iterator (a producer) but we have no \"consumer\" counterpart, for example.</p>\n</blockquote>\n<p>It might be helpful to decouple the <code>Stream/Sink</code> view  from the <code>Iterator</code> one. Of course a <code>Stream</code> is some kind of iterator, but it is also the primitive interface to read an owned object, which needs a write equivalent. </p>\n<p>If we look at byte IO, we have <code>AsyncRead</code> and <code>AsyncWrite</code> for reading and writing values by <strong>copy</strong>. All seem interesting enough for people that they want them to be standardized. For reading data  by <strong>move</strong>, we have <code>Stream</code>. And  <code>Sink</code> would be required for writing data by <strong>move</strong>.</p>\n<p>Same goes e.g. for channels. You can abstract the reading side behind a <code>Stream</code>. But there exists no interface for the writing side without <code>Sink</code>.</p>",
        "id": 183427474,
        "sender_full_name": "Matthias247",
        "timestamp": 1576305567
    },
    {
        "content": "<p><code>FnMut</code> is indeed a suitable interface in the synchronous world. In the async world we however also have to wait until the consumer can accept the data, so the interface needs to be somewhat poll-based. It could theoretically be a single method <code>poll_send(item) -&gt; Poll&lt;Result&lt;(), Err&lt;T&gt;&gt;</code> method. But the current implementation decided to split the process into an synchronous reservation/readiness part and a synchronous submission part.</p>",
        "id": 183427572,
        "sender_full_name": "Matthias247",
        "timestamp": 1576305787
    },
    {
        "content": "<p>I would like to note, that the ability to poll_ready has been very useful for us in vector and is the basis for how tower works which is basically a non driven submit trait.</p>",
        "id": 183663510,
        "sender_full_name": "Lucio Franco",
        "timestamp": 1576599325
    }
]