[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> by the way I am super interested in trying to champion the yield safe lint but not sure what you see as being the next steps. I'd be happy to write an RFC etc.</p>",
        "id": 196353786,
        "sender_full_name": "Lucio Franco",
        "timestamp": 1588706447
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"207781\">@Lucio Franco</span> I think an RFC is indeed probably the next step.</p>",
        "id": 196353853,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588706475
    },
    {
        "content": "<p>It seems like \"pretty popular\" idea, I think the main question would be figuring out the niggly details</p>",
        "id": 196353916,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588706515
    },
    {
        "content": "<p>in particular, the question I raised about <code>#[must_use]</code></p>",
        "id": 196353994,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588706536
    },
    {
        "content": "<p>I think the combination though of being able to lint for \"types that should not be live across an await\" and \"things that should not be used in an async context\" seems pretty darn useful</p>",
        "id": 196354045,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588706559
    },
    {
        "content": "<p>not sure if those are two distinct lints or attributes or not</p>",
        "id": 196354074,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588706569
    },
    {
        "content": "<p>Yup, agreed, I will start collecting some info around this, I am pretty busy for the next week or so but should have time later in may to get something hammered out.</p>",
        "id": 196354272,
        "sender_full_name": "Lucio Franco",
        "timestamp": 1588706685
    },
    {
        "content": "<p>I am a bit cautious about the second lint since I think that one is much more questionable and not clear on exactly what attributes it should live on. But I think the yield safe one is a good start.</p>",
        "id": 196354318,
        "sender_full_name": "Lucio Franco",
        "timestamp": 1588706713
    },
    {
        "content": "<p>Yeah, one problem I see with the second one is that it might not be as effective</p>",
        "id": 196355376,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588707178
    },
    {
        "content": "<p>Its one of those things that is good to lean on if everything uses it but if only some have it and some don't then it may not work as well. Another interesting case is <code>sleep</code> can technically be totally fine if say its less than a few ms while any delays that are longer would be problematic.  This then also depends per executor and use case. Since, blocking varies so much it may not be worth it to invest right now.</p>",
        "id": 196356324,
        "sender_full_name": "Lucio Franco",
        "timestamp": 1588707547
    },
    {
        "content": "<p>Another example would be <code>&lt;TcpStream as Read&gt;::read</code> with <code>set_nonblocking(true)</code> is also totally fine in an async context while in blocking mode would be an issue. So somehow that invariant would need to be encoded into the lint and that sounds hard.</p>",
        "id": 196356418,
        "sender_full_name": "Lucio Franco",
        "timestamp": 1588707602
    },
    {
        "content": "<p>sounds good to leave off then, agreed</p>",
        "id": 196356516,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588707634
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> sorry for the delay, <span class=\"user-mention\" data-user-id=\"248777\">@Bhargav Voleti</span> and I want to pick this up. Do you still think its something viable? If so will start drafting some sort of RFC next week. Would love to know what you think the proper next steps are.</p>",
        "id": 202117238,
        "sender_full_name": "Lucio Franco",
        "timestamp": 1593191607
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"207781\">@Lucio Franco</span> yeah!</p>",
        "id": 202123375,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593195012
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"207781\">@Lucio Franco</span> feel free to post a draft of the RFC to the repo if you want to iterate there</p>",
        "id": 202123437,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593195056
    },
    {
        "content": "<p>I can also add you as a member to the WG, so you have write access</p>",
        "id": 202123461,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593195080
    },
    {
        "content": "<p>Yeah, that works, hopefully can get a draft going next week :)</p>",
        "id": 202137709,
        "sender_full_name": "Lucio Franco",
        "timestamp": 1593202716
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> hey, do you have any reference docs on how locals get captured with generators? I think that could be useful for the RFC</p>",
        "id": 203303962,
        "sender_full_name": "Lucio Franco",
        "timestamp": 1594232731
    },
    {
        "content": "<p>also just opened a draft PR around the lint, would love any feedback, we will continue working on this next week. <a href=\"https://github.com/rust-lang/wg-async-foundations/pull/16\">https://github.com/rust-lang/wg-async-foundations/pull/16</a></p>",
        "id": 203305106,
        "sender_full_name": "Lucio Franco",
        "timestamp": 1594233289
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"207781\">@Lucio Franco</span> I may be biased but I think my blog post might be the best resource right now, at least I don’t know of any others :) <a href=\"https://tmandry.gitlab.io/blog/posts/optimizing-await-2/\">https://tmandry.gitlab.io/blog/posts/optimizing-await-2/</a></p>",
        "id": 203305259,
        "sender_full_name": "tmandry",
        "timestamp": 1594233362
    },
    {
        "content": "<p>Figured :) my fav blog post</p>",
        "id": 203861810,
        "sender_full_name": "Lucio Franco",
        "timestamp": 1594747524
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"207781\">@Lucio Franco</span> looks like I cannot change the name of a stream, but I'll leave that to you. <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I would love to hear your thoughts on this:</p>\n<p>I’m not entirely sure about why the <code>must_not_await</code> can’t be a marker trait. It’s very much similar to <code>UnwindSafe</code> in that both are markers to signify the presence of logic invariants being broken if the thing they are warning about occurs. The only difference I see is how a <code>UnwindSafe</code> type composes with other types, namely:</p>\n<blockquote>\n<p>and it is also structurally composed (e.g., a struct is unwind safe if all of its components are unwind safe)</p>\n</blockquote>\n<p>While a <code>#[must_not_await]</code> would have the behavior “a struct is MustNotAwait if any one of its components is MustNotAwait”, though this might change with polonious.</p>\n<p>Overall the arguments for an attribute are: 1) Best effort, might not always get everything, 2) Similar to the <code>#[must_use]</code> lint. I’m not entirely convinced that they are strong enough arguments.</p>",
        "id": 204244188,
        "sender_full_name": "Bhargav Voleti",
        "timestamp": 1595011838
    },
    {
        "content": "<p>Separately, do you know the rationale behind why <code>UnwindSafe</code> is a trait and not an attribute? I couldn't find any RFCs for that.</p>",
        "id": 204244278,
        "sender_full_name": "Bhargav Voleti",
        "timestamp": 1595011883
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 204244760,
        "sender_full_name": "tmandry",
        "timestamp": 1595012112
    },
    {
        "content": "<p>oops, wrong thread</p>",
        "id": 204244786,
        "sender_full_name": "tmandry",
        "timestamp": 1595012124
    },
    {
        "content": "<p><code>UnwindSafe</code> is a trait because it gets used as a bound in an API, e.g. <a href=\"https://doc.rust-lang.org/stable/std/panic/fn.catch_unwind.html\">https://doc.rust-lang.org/stable/std/panic/fn.catch_unwind.html</a></p>",
        "id": 204244866,
        "sender_full_name": "tmandry",
        "timestamp": 1595012160
    },
    {
        "content": "<p>there is nowhere to write a bound for \"can be used across an await\", even if we had done this before stabilization</p>",
        "id": 204245010,
        "sender_full_name": "tmandry",
        "timestamp": 1595012216
    },
    {
        "content": "<p>(did we discuss making the lint \"transitive\" btw? e.g. if you have a <code>MutexGuard</code> in some other struct? doesn't seem like it would come up often, might be useful, but I'm really not sure)</p>",
        "id": 204245442,
        "sender_full_name": "tmandry",
        "timestamp": 1595012403
    },
    {
        "content": "<p>Yeah me and <span class=\"user-mention\" data-user-id=\"207781\">@Lucio Franco</span> have discussed it a bit, <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> also brought it up, and I think the idea is that it is probably a good idea to make it transitive and that <code>#[must_use]</code> must also have the same behavior.</p>",
        "id": 204246041,
        "sender_full_name": "Bhargav Voleti",
        "timestamp": 1595012737
    },
    {
        "content": "<p>And yeah, I think that's a fair reason why this needs to be an attribute.</p>",
        "id": 204246081,
        "sender_full_name": "Bhargav Voleti",
        "timestamp": 1595012754
    },
    {
        "content": "<p>My take here is that traits are the wrong tool for the job, but still maybe better than making a new tool</p>",
        "id": 204490147,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595283119
    },
    {
        "content": "<p>I'm open to revisiting the \"propagate by default\" behavior for must-safe though</p>",
        "id": 204490207,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595283142
    },
    {
        "content": "<p>Should we make a stream dedicated to this lint? if so, what should I call it? e.g., #wg-async-foundations/yield-safe ? it seems like maybe we have a new name tho</p>",
        "id": 204490250,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595283176
    },
    {
        "content": "<p>(I think a dedicated stream would be nice, though, the conversation seems complex enough to merit it)</p>",
        "id": 204490266,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595283189
    },
    {
        "content": "<p>I tried changing the name of the stream to must_not_await lint, but I don't have the permissions to be able to do so.</p>",
        "id": 204572207,
        "sender_full_name": "Bhargav Voleti",
        "timestamp": 1595350028
    },
    {
        "content": "<p>just changed it</p>",
        "id": 204573449,
        "sender_full_name": "tmandry",
        "timestamp": 1595350638
    },
    {
        "content": "<p>actually nevermind.. that only changed the topic of the last message, so I put it back</p>",
        "id": 204580473,
        "sender_full_name": "tmandry",
        "timestamp": 1595354112
    },
    {
        "content": "<p>not sure how to edit the topic of all messages like that</p>",
        "id": 204580501,
        "sender_full_name": "tmandry",
        "timestamp": 1595354131
    },
    {
        "content": "<p>but yeah I do think a stream would make sense personally. \"must_not_await lint\" seems like a reasonable name</p>",
        "id": 204580648,
        "sender_full_name": "tmandry",
        "timestamp": 1595354187
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137147\">@Didrik Nordstrom</span> you mentioned you were interested in those benchmarks? I'd actually like to create new benchmarks around different types of shared state in async programs. Something to provide numbers on when to use one over the other. Let me know if you're interested in collaborating on that.</p>",
        "id": 204678572,
        "sender_full_name": "Lucio Franco",
        "timestamp": 1595430548
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"207781\">@Lucio Franco</span> Sounds great. I'm invested in a very similar project in Fuchsia, in particular because we are paying for atomics and syscalls that are not necessary for single-threaded executors, which we use a lot of. So I'll be focusing more on the single-vs-multithreaded case.</p>",
        "id": 204720240,
        "sender_full_name": "Didrik Nordstrom",
        "timestamp": 1595450568
    },
    {
        "content": "<p>Yeah, I am interested in probably the opposite use case but I want to measure the impact of using different sync primitives for guarding different types of workloads on say a hashmap. So 90%read/10% write, etc</p>",
        "id": 204721235,
        "sender_full_name": "Lucio Franco",
        "timestamp": 1595451049
    },
    {
        "content": "<p>Can anyone point me towards the implementation of<code>#[must_use]</code>? A cursory search of the rust repo and the rustc dev guide did not yield anything.</p>",
        "id": 205829360,
        "sender_full_name": "Bhargav Voleti",
        "timestamp": 1596479074
    },
    {
        "content": "<p>So going over the <a href=\"https://github.com/rust-lang/rust/blob/60c2e8d438f75aed5192dfa76e4b42a6739f6291/src/librustc_lint/unused.rs#L217\"><code>#[must_use]</code> attribute impl</a>, it looks like we check if an expression evaluates to an item which has been marked as <code>#[must_use]</code>, this could be a <code>Result</code> or anything to which the attribute as been attached. Right now the question I have is:</p>\n<ol>\n<li>How do we determine if the item hasn't been used? I'm still new to the code, so I might be missing something here</li>\n<li>When it comes to holding items across await points, a lint wouldn't be enough, we need to know about the generator state when it is constructed. <span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> I've read your (excellent) blog post on how the generators are constructed from the <code>async/await</code> keywords, but is it possible for you to walk through what's <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/transform/generator.rs\">happening here</a>? If I understand this correctly, this is the code responsible for constructing the generator, so my working theory is that we need to extract information from here and provide it to the lint to use/warn on.</li>\n</ol>",
        "id": 206416121,
        "sender_full_name": "Bhargav Voleti",
        "timestamp": 1597015148
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"248777\">@Bhargav Voleti</span> we could use the MIR info (the end result of which is the <code>GeneratorLayout</code> which is all you need)</p>",
        "id": 206603569,
        "sender_full_name": "tmandry",
        "timestamp": 1597166498
    },
    {
        "content": "<p>but, we don't use that for any kind of type checking today</p>",
        "id": 206603598,
        "sender_full_name": "tmandry",
        "timestamp": 1597166517
    },
    {
        "content": "<p>instead we use the HIR analysis</p>",
        "id": 206603694,
        "sender_full_name": "tmandry",
        "timestamp": 1597166557
    },
    {
        "content": "<p>Are you talking about how <code>#[must_use]</code> works?</p>",
        "id": 206603719,
        "sender_full_name": "Bhargav Voleti",
        "timestamp": 1597166573
    },
    {
        "content": "<p>no, I mean how type checking of generators works today</p>",
        "id": 206603771,
        "sender_full_name": "tmandry",
        "timestamp": 1597166600
    },
    {
        "content": "<p>we calculate all the types which live across a yield point <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_typeck/check/generator_interior.rs\">here</a></p>",
        "id": 206603848,
        "sender_full_name": "tmandry",
        "timestamp": 1597166642
    },
    {
        "content": "<p>(this is what the talk niko had scheduled is about)</p>",
        "id": 206603890,
        "sender_full_name": "tmandry",
        "timestamp": 1597166651
    },
    {
        "content": "<p>Ah okay. But this isn't necessarily type checking is it? This is more like metadata checking (which is probably a part of the type). Sorry, still wrapping my head around all of this.</p>",
        "id": 206603910,
        "sender_full_name": "Bhargav Voleti",
        "timestamp": 1597166662
    },
    {
        "content": "<p>Ohhh yeah this file helps a ton. And awesome, I'm looking forward to that talk tomorrow/day after.</p>",
        "id": 206604017,
        "sender_full_name": "Bhargav Voleti",
        "timestamp": 1597166714
    },
    {
        "content": "<p>well, it's \"what HIR thinks is going in the generator\" and this analysis will most likely be at the HIR level</p>",
        "id": 206604020,
        "sender_full_name": "tmandry",
        "timestamp": 1597166716
    },
    {
        "content": "<p>the end result of that analysis is you get a <code>GeneratorWitness</code> which you can query for, which has the set of types</p>",
        "id": 206604228,
        "sender_full_name": "tmandry",
        "timestamp": 1597166815
    },
    {
        "content": "<p>Correct me if I understood this wrong: We are using the HIR analysis to figure out which types live across yield points. The end result is a type which can be queried for checking which values live across yield points.</p>",
        "id": 206604306,
        "sender_full_name": "Bhargav Voleti",
        "timestamp": 1597166863
    },
    {
        "content": "<p>So where is the HIR analysis happening?</p>",
        "id": 206604559,
        "sender_full_name": "Bhargav Voleti",
        "timestamp": 1597166986
    },
    {
        "content": "<p>Something like that, yeah. I don't remember the details right now and am having trouble finding the query</p>",
        "id": 206604764,
        "sender_full_name": "tmandry",
        "timestamp": 1597167064
    },
    {
        "content": "<p>so pretty much all the analysis is happening in that file that I linked</p>",
        "id": 206604830,
        "sender_full_name": "tmandry",
        "timestamp": 1597167094
    },
    {
        "content": "<p>awesome, I'll dig through the code to see how the analysis reaches here. Thanks!</p>",
        "id": 206605012,
        "sender_full_name": "Bhargav Voleti",
        "timestamp": 1597167159
    },
    {
        "content": "<p>we walk the HIR, decide which values we think are being saved across a yield point, and register obligations that typeck knows how to handle</p>",
        "id": 206605038,
        "sender_full_name": "tmandry",
        "timestamp": 1597167174
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_typeck/check/generator_interior.rs#L186\">here</a> is where we make the GeneratorWItness object which holds the list of types</p>",
        "id": 206605112,
        "sender_full_name": "tmandry",
        "timestamp": 1597167202
    },
    {
        "content": "<p>Ah so those visitors are for walking the HIR. I was curious about that</p>",
        "id": 206605139,
        "sender_full_name": "Bhargav Voleti",
        "timestamp": 1597167215
    },
    {
        "content": "<p>yep</p>",
        "id": 206605176,
        "sender_full_name": "tmandry",
        "timestamp": 1597167234
    },
    {
        "content": "<p>And the actual types are actually being found <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_typeck/check/generator_interior.rs#L162\">here</a> right?</p>",
        "id": 206605268,
        "sender_full_name": "Bhargav Voleti",
        "timestamp": 1597167271
    },
    {
        "content": "<p>yes (after being gathered by the visitor)</p>",
        "id": 206605369,
        "sender_full_name": "tmandry",
        "timestamp": 1597167325
    },
    {
        "content": "<p>Oh okay, so all of this is happening during the type check phase</p>",
        "id": 206605543,
        "sender_full_name": "Bhargav Voleti",
        "timestamp": 1597167395
    },
    {
        "content": "<p>So what we currently have is a way to query which types live across yield points. If we can provide data on the types held about weather or not they are <code>must_not_await</code> we can query that at type check time. So my next question is, how can this data be passed on to the lint passing stage.</p>",
        "id": 206605787,
        "sender_full_name": "Bhargav Voleti",
        "timestamp": 1597167493
    },
    {
        "content": "<p>So, I was thinking there was a query that would give you the <code>GeneratorWitness</code> for a given generator, and we could get them from that query, but I may have been mistaken. If not then we'll have to make it so</p>",
        "id": 206618941,
        "sender_full_name": "tmandry",
        "timestamp": 1597173612
    },
    {
        "content": "<p>That makes sense.</p>",
        "id": 206623840,
        "sender_full_name": "Bhargav Voleti",
        "timestamp": 1597176043
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> is it possible to annotate the type internally via <code>Ty</code> stating that this type is yield unsafe (what ever we call it) and then in that witness list iterate through and just print a warning if we encounter a type that has this flag set?</p>",
        "id": 206836452,
        "sender_full_name": "Lucio Franco",
        "timestamp": 1597335417
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"207781\">@Lucio Franco</span> you probably want to get the type definition (i.e. the DefId) and hang annotations on <em>that</em></p>",
        "id": 206962818,
        "sender_full_name": "tmandry",
        "timestamp": 1597430413
    },
    {
        "content": "<p>though it's possible we may end up adding a type flag for this for performance reasons, it isn't what I'd reach for first</p>",
        "id": 206962941,
        "sender_full_name": "tmandry",
        "timestamp": 1597430471
    },
    {
        "content": "<p>Oh neat, I didn't know that arenas were used in rustc <a href=\"https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src/librustc_middle/ty/list.rs#L42\">https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src/librustc_middle/ty/list.rs#L42</a></p>",
        "id": 207759135,
        "sender_full_name": "Bhargav Voleti",
        "timestamp": 1598164345
    },
    {
        "content": "<p>Please correct me if I'm wrong, but right now, annotations are analyzed as a part of lint passes correct? Is there information on the type in the HIR, I don't see it in the <code>DefId</code> struct, but I'm still going through the code. That's basically the last question to answer for the high level reference level design part of the RFC. Once we answer that question, I'm fairly certain we know the path forward.</p>",
        "id": 207797668,
        "sender_full_name": "Bhargav Voleti",
        "timestamp": 1598227404
    },
    {
        "content": "<p>I would think annotations are available on the HIR definition but don't know how to get it off the top of my head :/</p>",
        "id": 207914236,
        "sender_full_name": "tmandry",
        "timestamp": 1598316391
    },
    {
        "content": "<p>Still, I think there is enough information here that I can wrap up the reference level design part and the RFC should be up for review.</p>",
        "id": 207987026,
        "sender_full_name": "Bhargav Voleti",
        "timestamp": 1598373650
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"248777\">@Bhargav Voleti</span> where is the text available now?</p>",
        "id": 208260363,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1598554473
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"248777\">@Bhargav Voleti</span> you likely need to push your changes</p>",
        "id": 208261179,
        "sender_full_name": "Lucio Franco",
        "timestamp": 1598554837
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> he's dealing with something at work rn, but he will push the rest of the changes to the draft RFC, then we are going to circle back tomorrow/next week to finish it off and get it in a state ready to submit.</p>",
        "id": 208261314,
        "sender_full_name": "Lucio Franco",
        "timestamp": 1598554911
    },
    {
        "content": "<p>I've been oncall this week, so I've not been able to spend a lot of time on it unfortunately, but I spent some time digging through the codebase and have a path forward. I have a couple of questions which me and <span class=\"user-mention\" data-user-id=\"207781\">@Lucio Franco</span> plan on working through today.</p>",
        "id": 208363991,
        "sender_full_name": "Bhargav Voleti",
        "timestamp": 1598631568
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 208364001,
        "sender_full_name": "Bhargav Voleti",
        "timestamp": 1598631574
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> looks like there are no new comments on the <code>#[must_not_await]</code> RFC since yesterday. So I'm going to merge it now.</p>",
        "id": 212598217,
        "sender_full_name": "Bhargav Voleti",
        "timestamp": 1602094663
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"248777\">@Bhargav Voleti</span> sounds good, doing a final pass now</p>",
        "id": 212600967,
        "sender_full_name": "tmandry",
        "timestamp": 1602095916
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"248777\">@Bhargav Voleti</span> okay, done. I had some feedback on the wording in the reference section, but otherwise I think it looks good!</p>",
        "id": 212605214,
        "sender_full_name": "tmandry",
        "timestamp": 1602097789
    },
    {
        "content": "<p>Awesome, I'll make the changes and merge it by tonight! Thanks again for all the help <span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span></p>",
        "id": 212605294,
        "sender_full_name": "Bhargav Voleti",
        "timestamp": 1602097811
    },
    {
        "content": "<p>No problem. Thank you for working on this</p>",
        "id": 212605370,
        "sender_full_name": "tmandry",
        "timestamp": 1602097846
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"248777\">@Bhargav Voleti</span> I reviewed the RFC and I think it reads well</p>",
        "id": 213844470,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603140944
    },
    {
        "content": "<p>the biggest question for the me is indeed the \"unresolved question\"</p>",
        "id": 213844487,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603140950
    },
    {
        "content": "<p>but I agree with the conclusion that this should be solved \"together\" with <code>#[must_use]</code> and, honestly, it seems orthogonal to me</p>",
        "id": 213844550,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603140968
    },
    {
        "content": "<p>I'm not sure what the best way is to make lang team folks \"aware\" of this, i've mentioned it a few times</p>",
        "id": 213844594,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603140991
    },
    {
        "content": "<p>I'm not sure if it's worth a <em>design meeting</em></p>",
        "id": 213844600,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603140995
    },
    {
        "content": "<p>maybe I'll just ping a bunch of them :)</p>",
        "id": 213844619,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603141006
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> thanks for taking a look. Work has kept me extremely busy so I haven't been able to spend time on the RFC again, but I agree with your conclusions about how the link would work with the <code>#[must_use]</code> lint. </p>\n<p>Another data point to consider is that if changing the behavior or <code>#[must_use]</code> would cause breaking changes, we could include it as a part of the next edition release.</p>",
        "id": 213949127,
        "sender_full_name": "Bhargav Voleti",
        "timestamp": 1603213556
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> sorry for being MIA for a while there. I took some time off for a couple of weeks, but I'm back now. I opened the RFC today: <a href=\"https://github.com/rust-lang/rfcs/pull/3014\">https://github.com/rust-lang/rfcs/pull/3014</a> . Looking forward to receiving feedback from the larger community.</p>",
        "id": 216116504,
        "sender_full_name": "Bhargav Voleti",
        "timestamp": 1604942771
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1172\">@WG-async-foundations</span> the <code>#[must_not_await]</code> lint RFC (<a href=\"https://github.com/rust-lang/rfcs/pull/3014\">https://github.com/rust-lang/rfcs/pull/3014</a>) has been open for about a week now. I'd love to get more eyes on it.</p>",
        "id": 217038621,
        "sender_full_name": "Bhargav Voleti",
        "timestamp": 1605635870
    },
    {
        "content": "<p>Having already reviewed it, I don't have much else to say, but I would like it to get more attention :)</p>",
        "id": 217222881,
        "sender_full_name": "tmandry",
        "timestamp": 1605752976
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"248777\">@Bhargav Voleti</span> Actually I think it would be good to link to <a href=\"https://github.com/rust-lang/wg-async-foundations/issues/19\">https://github.com/rust-lang/wg-async-foundations/issues/19</a>, since they are related (although complementary) problems. I see it as a future possibility that will look similar to end users, so it'd be good to mention.</p>",
        "id": 217223248,
        "sender_full_name": "tmandry",
        "timestamp": 1605753354
    },
    {
        "content": "<p>Same, I hope it gets more traction. Do I need to tag any specific team to get a review? Given that the async-wg already has a done a review of it, I'm not sure what the process should be like.</p>",
        "id": 217301992,
        "sender_full_name": "Bhargav Voleti",
        "timestamp": 1605806460
    },
    {
        "content": "<p>I added some labels. Maybe <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> can help get it on the lang team agenda.</p>",
        "id": 217315465,
        "sender_full_name": "tmandry",
        "timestamp": 1605812755
    },
    {
        "content": "<p>Nominated</p>",
        "id": 217335662,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605822791
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> this is a good question <a href=\"https://github.com/rust-lang/rfcs/pull/3014#discussion_r579733355\">https://github.com/rust-lang/rfcs/pull/3014#discussion_r579733355</a> which I'm not entirely sure how to answer. Looking at existing examples of RAII guards, they don't implement with <code>Copy</code> or <code>Clone</code>, and in general, I think they shouldn't implement those types, but I'm not a 100% confident of that statement. </p>\n<p>Any thoughts?</p>",
        "id": 227310599,
        "sender_full_name": "Bhargav Voleti",
        "timestamp": 1614017021
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"248777\">@Bhargav Voleti</span> I think the problem goes away if we only support the lint on types directly instead of on functions, and I don't see any use case for supporting it on functions.</p>",
        "id": 227880799,
        "sender_full_name": "tmandry",
        "timestamp": 1614313515
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> I agree limiting the lint only to types solves that problem. If I am understanding this correctly, if a <code>Copy</code> type has the <code>#[must_not_suspend]</code> attribute, that means that the behavior would apply to any copies that are made of it, correct?</p>",
        "id": 227964990,
        "sender_full_name": "Bhargav Voleti",
        "timestamp": 1614361946
    },
    {
        "content": "<p>yes, because it applies to any values of that type</p>",
        "id": 227966114,
        "sender_full_name": "tmandry",
        "timestamp": 1614362347
    },
    {
        "content": "<p>Perfect, I just wanted it clarified for my own understanding. I'll update the RFC doc to reflect this.</p>",
        "id": 227966645,
        "sender_full_name": "Bhargav Voleti",
        "timestamp": 1614362516
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> the RFC has been in the FCP period for over two weeks now without any activity. Do I need to do something from my end to move it forwards?</p>",
        "id": 230719133,
        "sender_full_name": "Bhargav Voleti",
        "timestamp": 1615997571
    },
    {
        "content": "<p>I've started working on implementing the <code>#[must_not_suspend]</code> lint and wanted to discuss the possible approaches. When researching the implementation, I saw two possible ways to go about it:</p>\n<ol>\n<li>Check for the presence of the <code>#[must_not_suspend]</code> attribute on the type during the <a href=\"https://github.com/rust-lang/rust/blob/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/compiler/rustc_typeck/src/check/mod.rs#L634\">typechecking of the variables captured by the generator</a>. This would involve querying the <code>Session</code>.</li>\n<li>Add a new <a href=\"https://github.com/rust-lang/rust/blob/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83/compiler/rustc_type_ir/src/lib.rs#L16\"><code>TypeFlag</code></a> so that the information can be pre-computed during parsing. I personally think this will be faster than the querying the <code>Session</code>.</li>\n</ol>\n<p>Thoughts? <span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 236084984,
        "sender_full_name": "Bhargav Voleti",
        "timestamp": 1619376175
    },
    {
        "content": "<p>Did we decide that <code>#[must_not_suspend]</code> on <code>T</code> should propagate up to types which include <code>T</code>? If so then a <code>TypeFlag</code> would make sense</p>",
        "id": 236099273,
        "sender_full_name": "tmandry",
        "timestamp": 1619390409
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span>  I think it was left as an open question with most people leaning towards propagation. Okay, I'll go down the <code>TypeFlag</code> route then.</p>",
        "id": 236201743,
        "sender_full_name": "Bhargav Voleti",
        "timestamp": 1619453489
    }
]