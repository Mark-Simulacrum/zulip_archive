[
    {
        "content": "<p>So I wanted to start collecting notes and \"horror stories\" (but also good stories) about async</p>",
        "id": 227983099,
        "sender_full_name": "tmandry",
        "timestamp": 1614369286
    },
    {
        "content": "<p>but I think it would be too noisy in the main \"async vision\" topic, so doing that here</p>",
        "id": 227983127,
        "sender_full_name": "tmandry",
        "timestamp": 1614369305
    },
    {
        "content": "<p>First there are all the <a href=\"https://nikomatsakis.github.io/wg-async-foundations/conversations/2021-02-12-Twitter-Thread.html\">notes</a> from <a href=\"https://twitter.com/nikomatsakis/status/1359454255971770372\">Niko's tweet</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/nikomatsakis/status/1359454255971770372\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/1110539492706914304/NUeyOrLX_normal.png\"></a><p>I'm looking for blog posts or other detailed stories of people using async-await in #rustlang. I'd like to understand their experiences. Particularly curious about people learning Rust and async-await at the same time, maybe coming from other languages. Links?</p><span>- Niko Matsakis (@nikomatsakis)</span></div></div>",
        "id": 227983198,
        "sender_full_name": "tmandry",
        "timestamp": 1614369336
    },
    {
        "content": "<p>A recent one that comes to mind for me is <a href=\"https://twitter.com/stuhood/status/1360330437176954880\">this tweet</a> about async fn stack sizes and how to prevent stack overflows (it's hard)</p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/stuhood/status/1360330437176954880\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/552191334467907584/uEkMGreU_normal.jpeg\"></a><p><a href=\"https://twitter.com/rustlang\">@rustlang</a> async-using rustaceans: how are you bounding your async-fn stack sizes (see <a href=\"https://t.co/kAPIMebKQK\">https://without.boats/blog/futures-and-segmented-stacks/#segmenting-your-futures-for-fun-and-profit</a>) to avoid overflows? Our approach so far has been guess-and-check with regard to boxing: wondering if there are more rigorous strategies.</p><span>- Stu Hood (@stuhood)</span></div></div>",
        "id": 227983498,
        "sender_full_name": "tmandry",
        "timestamp": 1614369461
    },
    {
        "content": "<p>And <a href=\"https://twitter.com/ekuber/status/1347697847462871043\">this one</a> (see quoted tweet) about really long compiler error messages</p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/ekuber/status/1347697847462871043\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/1212821966467420161/Jymc4Y_T_normal.jpg\"></a><p>rustc is very user friendly <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> <a href=\"https://t.co/Q6rj9mGxbs\">https://twitter.com/mycoliza/status/1347688061035896833</a></p><span>- Esteban K ‚Äì ü¶Ä‚öôÔ∏è@home (@ekuber)</span></div></div>",
        "id": 227983669,
        "sender_full_name": "tmandry",
        "timestamp": 1614369517
    },
    {
        "content": "<p>This isn't just for tweets ‚Äì if anyone can think of other documented cases of difficulties or success stories of using async, please drop them here</p>",
        "id": 227983881,
        "sender_full_name": "tmandry",
        "timestamp": 1614369590
    },
    {
        "content": "<p>yes, this is great</p>",
        "id": 227983907,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614369597
    },
    {
        "content": "<p>thanks <span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span></p>",
        "id": 227983918,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614369601
    },
    {
        "content": "<p><a href=\"https://meltware.com/2020/10/21/rust-async-nonsense.html\">https://meltware.com/2020/10/21/rust-async-nonsense.html</a><br>\n<a href=\"https://vorner.github.io/2020/04/13/hyper-traps.html\">https://vorner.github.io/2020/04/13/hyper-traps.html</a><br>\n<a href=\"https://gendignoux.com/blog/2020/12/17/rust-async-type-system-limits.html\">https://gendignoux.com/blog/2020/12/17/rust-async-type-system-limits.html</a><br>\n<a href=\"https://www.fpcomplete.com/blog/different-levels-async-rust/\">https://www.fpcomplete.com/blog/different-levels-async-rust/</a></p>",
        "id": 228223096,
        "sender_full_name": "oliver",
        "timestamp": 1614602531
    },
    {
        "content": "<p><a href=\"https://cseweb.ucsd.edu/~yiying/RustStudy-PLDI20.pdf\">https://cseweb.ucsd.edu/~yiying/RustStudy-PLDI20.pdf</a><br>\n<a href=\"https://tweedegolf.nl/blog/41/the-promise-of-rust-async-await-for-embedded\">https://tweedegolf.nl/blog/41/the-promise-of-rust-async-await-for-embedded</a></p>",
        "id": 228223358,
        "sender_full_name": "oliver",
        "timestamp": 1614602651
    },
    {
        "content": "<p>had a great conversation with a team lead for a Fuchsia team who was new to rust and async.. <a href=\"https://docs.google.com/document/d/1mfMT7NaLMZughKc_SDr71m5Khwmzt9tMUNaYkEz5w_I/edit\">transcript is here</a></p>",
        "id": 228525425,
        "sender_full_name": "tmandry",
        "timestamp": 1614739283
    },
    {
        "content": "<p>(it's quite raw, I plan to bulletize it and add better formatting)</p>",
        "id": 228525522,
        "sender_full_name": "tmandry",
        "timestamp": 1614739331
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116883\">tmandry</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/async.20vision.20-.20status.20quo/near/228525425\">said</a>:</p>\n<blockquote>\n<p>had a great conversation with a team lead for a Fuchsia team who was new to rust and async.. <a href=\"https://docs.google.com/document/d/1mfMT7NaLMZughKc_SDr71m5Khwmzt9tMUNaYkEz5w_I/edit\">transcript is here</a></p>\n</blockquote>\n<blockquote>\n<p>apparently File: AsMut&lt;dyn Read&gt; just doesn't hold in general (same for Write)</p>\n</blockquote>\n<p>I got it to work but only by removing <code>dyn</code> altogether:  <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=4edfdddebb9b922ac02cb873944df842\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=4edfdddebb9b922ac02cb873944df842</a></p>",
        "id": 228541024,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614750725
    },
    {
        "content": "<p>you can see where I tried to add <code>trait ReadWrite</code> before giving up when the blanket impl conflicted due to orphan rule</p>",
        "id": 228541053,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614750751
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116883\">tmandry</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/async.20vision.20-.20status.20quo/near/228525425\">said</a>:</p>\n<blockquote>\n<p>had a great conversation with a team lead for a Fuchsia team who was new to rust and async.. <a href=\"https://docs.google.com/document/d/1mfMT7NaLMZughKc_SDr71m5Khwmzt9tMUNaYkEz5w_I/edit\">transcript is here</a></p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> is it possible to include anonymized examples of the code snippets you all are referring to?</p>",
        "id": 228562270,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614764292
    },
    {
        "content": "<blockquote>\n<p>yeah, this team was brand new to rust<br>\nstraight in the deep end</p>\n</blockquote>\n<p>this stuck out to me because it's something I've heard a few times</p>",
        "id": 228562814,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614764558
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/async.20vision.20-.20status.20quo/near/228562270\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116883\">tmandry</span> is it possible to include anonymized examples of the code snippets you all are referring to?</p>\n</blockquote>\n<p>yeah I can ask for actual examples</p>",
        "id": 228639085,
        "sender_full_name": "tmandry",
        "timestamp": 1614795052
    },
    {
        "content": "<p>I'm going to add some notes from a conversation with 1password into the conversations folder</p>",
        "id": 228876096,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614904260
    },
    {
        "content": "<p><a href=\"#narrow/stream/201246-wg-async-foundations.2Fbook/topic/user.20stories/near/228864844\">this comment from <span class=\"user-mention\" data-user-id=\"293524\">@jamesmcm</span> seems pretty useful</a></p>",
        "id": 229011705,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614972911
    },
    {
        "content": "<p>here's <a href=\"https://fuchsia-review.googlesource.com/c/fuchsia/+/496879\">a bug</a> not caught by the compiler where code failed to use the output of <code>write</code>. technically not async-specific, but worth thinking about as we work to drive <code>AsyncWrite</code> to stabilization.</p>",
        "id": 229758554,
        "sender_full_name": "tmandry",
        "timestamp": 1615415135
    },
    {
        "content": "<p><a href=\"https://theta.eu.org/2021/03/08/async-rust-2.html\">Why asynchronous Rust doesn't work</a> has a pretty provocative title; it basically says that first-class functions (closures) are hard to use in Rust because of having to use generics and confusing trait bounds, and that the same problems apply to Futures.</p>",
        "id": 229758848,
        "sender_full_name": "tmandry",
        "timestamp": 1615415275
    },
    {
        "content": "<p>So with the adjusted characters (Niklaus being a new programmer, Barbara is an experienced Rust programmer), I'd guess that we could change some of the \"writing a library/framework\" status quo stories to being from Barbara's POV.</p>",
        "id": 229773601,
        "sender_full_name": "Sean McArthur",
        "timestamp": 1615423241
    },
    {
        "content": "<p>Oh, just found this in the Barbara specific page:</p>\n<blockquote>\n<p>Lately she's maintaining libraries and frameworks in the async space.</p>\n</blockquote>",
        "id": 229779157,
        "sender_full_name": "Sean McArthur",
        "timestamp": 1615427208
    },
    {
        "content": "<blockquote>\n<p>it basically says that first-class functions (closures) are hard to use in Rust because of having to use generics and confusing trait bounds, and that the same problems apply to Futures.</p>\n</blockquote>\n<p>There is certainly some truth to that. When I write something along the following (more or less a copy&amp;paste out of our codebase, with adjusted type names), I'm asking myself who else in my team will understand what this really is doing::</p>\n<div class=\"codehilite\"><pre><span></span><code>async fn do_something&lt;F, Fut&gt;(func: F) -&gt; Result&lt;(), String&gt;\nwhere\n    F: FnOnce(Param1 , Param2) -&gt; Fut + Send + &#39;static,\n    Fut: Future&lt;Output = Result&lt;(), String&gt;&gt; + Send + &#39;static,\n{\n}\n</code></pre></div>\n<p>Even for me (first generation async user and contributor to standardization) that requires gradually adding trait bounds until the compiler is happy.   And sometimes it doesn't even work, due to lifetimes being extra complicated thanks to lazy evaluation of Futures. <br>\nThe question is how to improve on this? Adding something along <code>impl async Fn</code>?</p>",
        "id": 229797809,
        "sender_full_name": "Matthias247",
        "timestamp": 1615441307
    },
    {
        "content": "<p>I suppose one could try to define a trait like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>trait AsyncFnOnce&lt;Args&gt;\nwhere\n    Self::Fut: Future&lt;Output = Self::Output&gt;,\n{\n    type Fut;\n    type Output;\n\n    fn call(self, args: Args) -&gt; Self::Fut;\n}\n</code></pre></div>\n<p>Though it doesn't fully help because your <code>Fut: Send + 'static</code> bound would look pretty ugly when using a trait like the above.</p>",
        "id": 229822019,
        "sender_full_name": "Alice Ryhl",
        "timestamp": 1615456288
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243965\">Sean McArthur</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/async.20vision.20-.20status.20quo/near/229773601\">said</a>:</p>\n<blockquote>\n<p>So with the adjusted characters (Niklaus being a new programmer, Barbara is an experienced Rust programmer), I'd guess that we could change some of the \"writing a library/framework\" status quo stories to being from Barbara's POV.</p>\n</blockquote>\n<p>this was my intent, <span class=\"user-mention\" data-user-id=\"243965\">@Sean McArthur</span></p>",
        "id": 229923367,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615495788
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204219\">@Matthias247</span> I'm curious ... to start, I'd have used <code>impl FnOnce</code>...</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">do_something</span><span class=\"o\">&lt;</span><span class=\"n\">Fut</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">func</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">FnOnce</span><span class=\"p\">(</span><span class=\"n\">Param1</span><span class=\"w\"> </span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Param2</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Fut</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">static</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Fut</span>: <span class=\"nc\">Future</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">static</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>This helps a little but...admittedly not too much. =)</p>",
        "id": 229923627,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615495902
    },
    {
        "content": "<p>I guess  the question is what parts are most problematic. It's the <code>+ Send + 'static</code> that is particularly verbose, I think?</p>",
        "id": 229923701,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615495929
    },
    {
        "content": "<p>Well that is verbose. But I think for most people it's not even obvious that for passing an async function (what they want), you instead of have to pass a function which creates a <code>Future</code>. The <code>Future</code> is the implementation detail, but directly leaks to the user. In Kotlin  (which was mentioned in the parallel thread), you users would just do the more obvious</p>\n<div class=\"codehilite\"><pre><span></span><code>suspend fun do_something(func: suspend (Param1, Param2) -&gt; Result&lt;(), String&gt;) {\n}\n</code></pre></div>\n<p>Once people understand the basic transformation the lifetimes start to add an extra challenge.</p>",
        "id": 229971712,
        "sender_full_name": "Matthias247",
        "timestamp": 1615521153
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204219\">@Matthias247</span> ah! yes, of course</p>",
        "id": 230009429,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615546390
    },
    {
        "content": "<p>So <del>many things wrong here</del> much room for improvement here :)</p>",
        "id": 230009455,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615546403
    },
    {
        "content": "<p>Ok, here's a story of \"Alan hates writing a <code>Stream</code>\": <a href=\"https://github.com/rust-lang/wg-async-foundations/pull/48\">https://github.com/rust-lang/wg-async-foundations/pull/48</a></p>",
        "id": 230917102,
        "sender_full_name": "Sean McArthur",
        "timestamp": 1616092763
    },
    {
        "content": "<p>I also made a story about an async newcomer's experience. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n<p><a href=\"https://github.com/rust-lang/wg-async-foundations/pull/56\">https://github.com/rust-lang/wg-async-foundations/pull/56</a></p>",
        "id": 230948324,
        "sender_full_name": "Frederik Baetens",
        "timestamp": 1616107216
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"398861\">@Frederik Baetens</span>  If you still have any questions about the stuff you mentioned in your post, I'll be happy to answer them.</p>",
        "id": 230949591,
        "sender_full_name": "Alice Ryhl",
        "timestamp": 1616108098
    },
    {
        "content": "<p>I'll come by in the Tokio discord sometime tomorrow perhaps (its already a bit late), but i'd just like to say that  I think blog posts of yours like this one are great! <a href=\"https://ryhl.io/blog/actors-with-tokio/\">https://ryhl.io/blog/actors-with-tokio/</a></p>\n<p>It discusses how to implement a design pattern (actors) with async. I'd love to see a lot more of this floating around in the community.</p>\n<p>Previously I also loved sections of the book like this: <a href=\"https://doc.rust-lang.org/book/ch17-03-oo-design-patterns.html#trade-offs-of-the-state-pattern\">https://doc.rust-lang.org/book/ch17-03-oo-design-patterns.html#trade-offs-of-the-state-pattern</a> which went in depth about the tradeoffs of design patterns from other languages, and how to successfully adapt them to Rust, together with new, great design patterns which are also usable outside of Rust. I'd love to see similar things for async!</p>\n<p>Also thanks for your comment on my pr, i changed the wording slightly to avoid confusion <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 230951457,
        "sender_full_name": "Frederik Baetens",
        "timestamp": 1616109263
    }
]