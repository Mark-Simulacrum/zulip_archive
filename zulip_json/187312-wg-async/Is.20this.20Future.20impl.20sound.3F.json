[
    {
        "content": "<p>Hi there,</p>\n<p>I've played a bit with implementing a async database interface for diesel. There is basically one big issue that currently blocks this: <br>\nFutures returned by <code>async fn</code>(and by using <code>-&gt; impl Future</code> ) leak <code>Send</code>/<code>Sync</code> bounds. Database connections are by design <code>Send</code> but not <code>Sync</code>. Normal functions interacting with the database now take a <code>&amp;Connection</code>. As soon as you do this in a async function the returned future will contain shared references to those connection. This results in making the returned <code>Future</code> <code>!Send</code> because a shared reference of a <code>!Sync</code> type is <code>!Send</code>. One way to work around this issue is to use mutable references to the <code>Connection</code> everywhere, but that makes it hard to construct a nice API, especially something like a transaction function that takes a closure and internally manages all the transaction state (like calling \"Beging\"/\"Commit\"/\"Abort\") on the provided transaction in the right positions. (For the long version of the problem see <a href=\"https://github.com/diesel-rs/diesel/issues/399\" target=\"_blank\" title=\"https://github.com/diesel-rs/diesel/issues/399\">this diesel issue</a> which has various playground links that demonstrate different approaches which all fail due to complicated life time stuff. Additionally there is <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=59516c212ac5b9d4805eb974a023ba75\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=59516c212ac5b9d4805eb974a023ba75\">this playground</a> playground from Nemo157 which demonstrates that something like that is possible at the cost of disallowing closures (which is not so great from a API point of viewâ€¦))</p>\n<p>So I played again a bit with this and came up with the <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=23dde7994badeab9cebe44479959b882\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=23dde7994badeab9cebe44479959b882\">this solution</a>, but I'm unsure if that is even sound (Especially the <code>unsafe</code> stuff at line 85-89 erasing some lifetimes). It should be impossible (because of the <code>'static</code> bound on <code>R</code> that the resolved async closure returns something that contains a reference to the connection passed to the closure. Additionally only poll is called till this future is resolved, so in theory no leak should be possible.</p>\n<p>(Sorry if that's the wrong place to ask this kind of question, but I'm not sure where it belongs to.)</p>",
        "id": 172612517,
        "sender_full_name": "weiznich",
        "timestamp": 1565113976
    }
]