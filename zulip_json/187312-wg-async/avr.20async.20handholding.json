[
    {
        "content": "<p>Here is what I think should be a valid leaf future for sending a single byte on AVR. It doesn't seem to work. While I'm debugging further, I was hoping if someone could skim this and see if it seems to make sense.</p>\n<p><a href=\"https://gist.github.com/shepmaster/25fe1180a01e315040d11cd7412f5452\" target=\"_blank\" title=\"https://gist.github.com/shepmaster/25fe1180a01e315040d11cd7412f5452\">https://gist.github.com/shepmaster/25fe1180a01e315040d11cd7412f5452</a></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"k\">struct</span> <span class=\"nc\">SerialTx</span><span class=\"p\">(</span><span class=\"kt\">u8</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">TX_WAKER</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">Waker</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"cp\">#[inline(always)]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">tx_empty_interrupt_handler</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// Safety:</span>\n<span class=\"w\">        </span><span class=\"c1\">// We are on a single-threaded CPU, so static mutable shoudn&#39;t matter.</span>\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">waker</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">TX_WAKER</span><span class=\"p\">.</span><span class=\"n\">take</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"c1\">// Notify our waker to poll the future again</span>\n<span class=\"w\">                </span><span class=\"n\">waker</span><span class=\"p\">.</span><span class=\"n\">wake</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">                </span><span class=\"c1\">// We must either read from the buffer or disable the</span>\n<span class=\"w\">                </span><span class=\"c1\">// interrupt to prevent re-invoking the interrupt</span>\n<span class=\"w\">                </span><span class=\"c1\">// handler immediately.</span>\n<span class=\"w\">                </span><span class=\"n\">disable_serial_tx_empty_interrupt</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">enable_serial_tx_empty_interrupt</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">set_bit_in</span><span class=\"p\">(</span><span class=\"n\">UCSR0B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">UDRIE0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">disable_serial_tx_empty_interrupt</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">unset_bit_in</span><span class=\"p\">(</span><span class=\"n\">UCSR0B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">UDRIE0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Future</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">SerialTx</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">type</span> <span class=\"nc\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"k\">fn</span> <span class=\"nf\">poll</span><span class=\"p\">(</span><span class=\"bp\">self</span>: <span class=\"nc\">Pin</span><span class=\"o\">&lt;&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">Self</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ctx</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Context</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Poll</span><span class=\"o\">&lt;</span><span class=\"n\">Self</span>::<span class=\"n\">Output</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">serial</span>::<span class=\"n\">try_transmit</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">Poll</span>::<span class=\"n\">Ready</span><span class=\"p\">(())</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"nb\">Err</span><span class=\"p\">(())</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"c1\">// Safety:</span>\n<span class=\"w\">                    </span><span class=\"c1\">// We are on a single-threaded CPU, so static mutable shoudn&#39;t matter.</span>\n<span class=\"w\">                    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">TX_WAKER</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">waker</span><span class=\"p\">().</span><span class=\"n\">clone</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">enable_serial_tx_empty_interrupt</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">                    </span><span class=\"n\">Poll</span>::<span class=\"n\">Pending</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>/cc <span class=\"user-mention\" data-user-id=\"210267\">@Nemo157</span></p>",
        "id": 168205546,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560600574
    },
    {
        "content": "<p>heh. I got basic panic formatting working, only to be told that the panic is coming from <code>#[embrio_async]</code> <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61d\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 168212237,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560612947
    },
    {
        "content": "<p>No idea on the panic. But regarding the implementation itself: The basics seem right, you it might be missing some thread-safety. Even if microcontrollers are single-core, one can still run into thread-safety issues due to interrupts and nested interrupts. Typically that is worked around by disabling all interrupts in critical sections. That might be necessary here inside the interrupt handler and and maybe also inside the <code>try_transmit</code> block (depending on whether multiple components can try to use the serial port at once or not).<br>\nAlso check whether the <code>tx_empty_interrupt</code> is level triggered, not edge triggered. Otherwise there exists a race condition where the port might get readable and get signaled after <code>try_transmit</code> failed but before the interrupt handler is enabled.</p>",
        "id": 168222121,
        "sender_full_name": "Matthias247",
        "timestamp": 1560630644
    },
    {
        "content": "<blockquote>\n<p>That might be necessary here inside the interrupt handler</p>\n</blockquote>\n<p>Should be good here; there's two types of interrupts: <code>avr-interrupt</code> and <code>avr-non-blocking-interrupt</code>; the latter allows reentrant interrupts.</p>\n<blockquote>\n<p>whether multiple components can try to use the serial port at once or not</p>\n</blockquote>\n<p>An interesting problem; I'd probably try to punt on that for now and just document \"don't do that\" (to have it bite me in the future, I'm sure)</p>\n<blockquote>\n<p>level triggered, not edge triggered</p>\n</blockquote>\n<p>I'll have to dig in the docs for that. If it <em>is</em>, are there any workarounds?</p>",
        "id": 168225643,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560637969
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 168225645,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560637974
    },
    {
        "content": "<blockquote>\n<p>I'll have to dig in the docs for that. If it is, are there any workarounds?<br>\nYou could try reading again after you enabled the interrupt to cover that time. Maybe you could also disable interrupts before performing the first read attempt in order to not run into the issue.</p>\n</blockquote>\n<p>If interrupts are edge triggered you might also be able to just leave them enabled. You could then also e.g. use <code>futures_intrusive::sync::ManualResetEvent</code> and implement the interrupt handler as <code>event.set()</code> and the write function as:</p>\n<div class=\"codehilite\"><pre><span></span>async fn write(&amp;mut self, data: u8)  {\n    while true {\n        self.event.wait().await;\n        let state = self.mutex.lock();\n        if state.try_send(data) {\n            return;\n        }\n        // Send failed, loop around and retry when event got set.\n        // This needs to be inside the mutex, and setting the event must also be performed inside the mutex.\n        self.event.reset();\n    }\n}\n</pre></div>",
        "id": 168235761,
        "sender_full_name": "Matthias247",
        "timestamp": 1560660238
    },
    {
        "content": "<p>Finding out whether the interrupt is level or edge triggered should be easy. Just leave it on and check whether the interrupt handler gets repeatedly called.</p>",
        "id": 168235801,
        "sender_full_name": "Matthias247",
        "timestamp": 1560660273
    },
    {
        "content": "<blockquote>\n<p>heh. I got basic panic formatting working, only to be told that the panic is coming from <code>#[embrio_async]</code> <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61d\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>\n</blockquote>\n<p>Where exactly is it panicking? As far as I remember it shouldn’t be possible to hit any of the panics there, they should all be in dead code</p>",
        "id": 168246092,
        "sender_full_name": "Nemo157",
        "timestamp": 1560679421
    },
    {
        "content": "<p>In terms of safety, I’m pretty sure that implementation is unsound for spurious wakeups</p>",
        "id": 168246202,
        "sender_full_name": "Nemo157",
        "timestamp": 1560679568
    },
    {
        "content": "<p>You could poll the future once, set the waker and enable the interrupt, then poll the future again and have the interrupt trigger during setting the waker again</p>",
        "id": 168246220,
        "sender_full_name": "Nemo157",
        "timestamp": 1560679634
    },
    {
        "content": "<p>If the interrupt occurs mid-write to <code>TX_WAKER</code> then you will be creating an <code>&amp;mut Option&lt;Waker&gt;</code> for <code>.take()</code> during that concurrent modification</p>",
        "id": 168246266,
        "sender_full_name": "Nemo157",
        "timestamp": 1560679740
    },
    {
        "content": "<p>I haven’t really investigated how to structure stuff like this for safety and speed yet, I’ve just been beating it into working by wrapping the future implementations in large interrupt-free sections, using <code>static Mutex</code>es that are based on those interrupt-free sections</p>",
        "id": 168246385,
        "sender_full_name": "Nemo157",
        "timestamp": 1560679955
    },
    {
        "content": "<p>I'm pretty sure the panic is due to bad device initialization: AVR is Harvard architecture so I have to copy over the <code>.data</code> section from the flash into SRAM myself. I'm pretty sure that I was just copying from the wrong section of SRAM back to SRAM. (<code>ld</code> vs <code>lpm</code>)</p>",
        "id": 168255496,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560696518
    },
    {
        "content": "<p>While I have you, what's a good way to construct an \"infinite future\"?</p>\n<p>Right now, I have</p>\n<div class=\"codehilite\"><pre><span></span>    pub fn do_futures() -&gt; ! {\n        use embrio_executor::Executor;\n\n        static mut EXECUTOR: Executor = Executor::new();\n        loop {\n            crate::write_strln(&quot;loop -&gt;&quot;);\n            let executor = unsafe { &amp;mut EXECUTOR };\n            executor.block_on(example());\n            crate::write_strln(&quot;&lt;- loop&quot;);\n        }\n    }\n</pre></div>\n\n\n<p>but there's probably something cleaner.</p>",
        "id": 168255677,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560696885
    },
    {
        "content": "<blockquote>\n<p>and check whether the interrupt handler gets repeatedly called.</p>\n</blockquote>\n<p>The docs seem to indicate level-trigger without saying it explicitly:</p>\n<blockquote>\n<blockquote>\n<p>When the Data Register Empty Interrupt Enable (UDRIEn) bit in UCSRnB is written to one, the USART Data Register Empty Interrupt will be executed as long as UDREn is set (provided that global interrupts are enabled). UDREn is cleared by writing UDRn. When interrupt-driven data transmission is used, the Data Register Empty interrupt routine must either write new data to UDRn in order to clear UDREn or disable the Data Register Empty interrupt, otherwise a new interrupt will occur once the interrupt routine terminates.</p>\n</blockquote>\n</blockquote>",
        "id": 168256007,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560697468
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"210267\">@Nemo157</span> you mentioned checking to see if generators work at all in AVR land. What kind of code would you think would exercise that?</p>",
        "id": 168261142,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560706863
    },
    {
        "content": "<p>Simply, so that I can look at assembly and figure out if it's correct :-)</p>",
        "id": 168261154,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560706887
    },
    {
        "content": "<blockquote>\n<p>While I have you, what's a good way to construct an \"infinite future\"?</p>\n<p>Right now, I have</p>\n</blockquote>\n<div class=\"codehilite\"><pre><span></span>pub fn do_futures() -&amp;gt; ! {\n    use embrio_executor::Executor;\n\n    static mut EXECUTOR: Executor = Executor::new();\n    loop {\n        crate::write_strln(&quot;loop -&amp;gt;&quot;);\n        let executor = unsafe { &amp;amp;mut EXECUTOR };\n        executor.block_on(example());\n        crate::write_strln(&quot;&amp;lt;- loop&quot;);\n    }\n}\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>but there&#39;s probably something cleaner.\n</pre></div>\n\n\n<p>You can move the loop into the future/async fn?</p>",
        "id": 168261199,
        "sender_full_name": "Matthias247",
        "timestamp": 1560706946
    },
    {
        "content": "<blockquote>\n<p>The docs seem to indicate level-trigger without saying it explicitly:</p>\n</blockquote>\n<p>Yes I would interpret that the same way</p>",
        "id": 168261216,
        "sender_full_name": "Matthias247",
        "timestamp": 1560707028
    },
    {
        "content": "<blockquote>\n<p>move the loop into the future/async fn</p>\n</blockquote>\n<p>Well, that's embarrassingly simple. I gotta get used to this magic <code>async fn</code> world, instead of Ye Olde Combinators</p>",
        "id": 168264383,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560713068
    },
    {
        "content": "<p>And it works with <code>-&gt; !</code> too, nice.</p>",
        "id": 168264385,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560713087
    },
    {
        "content": "<p>Via <a href=\"/user_uploads/4715/arz2paRt1MTQ2GW-UlE5nCBS/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">debugging</a> it appears that calling <code>waker.wake()</code> causes the chip to crash and restart.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/arz2paRt1MTQ2GW-UlE5nCBS/pasted_image.png\" target=\"_blank\" title=\"debugging\"><img src=\"/user_uploads/4715/arz2paRt1MTQ2GW-UlE5nCBS/pasted_image.png\"></a></div>",
        "id": 168267393,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560718434
    },
    {
        "content": "<p>here's a pretty simple generator you should be able to do something with: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=2442b38c5290c27a20b26187d93eea33\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=2442b38c5290c27a20b26187d93eea33\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=2442b38c5290c27a20b26187d93eea33</a></p>",
        "id": 168327115,
        "sender_full_name": "Nemo157",
        "timestamp": 1560790238
    },
    {
        "content": "<blockquote>\n<p><code>println!(\"on\");</code></p>\n</blockquote>\n<p>I wish ;-)</p>",
        "id": 168345052,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560803716
    },
    {
        "content": "<p>I do have something close enough though, thanks!</p>",
        "id": 168345064,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560803728
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"210267\">@Nemo157</span> why the mutable reference to <code>on</code>? Just to exercise more?</p>",
        "id": 168348175,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560806087
    },
    {
        "content": "<p>I also don't know that I'll ever get used to <code>static move || {</code></p>",
        "id": 168348217,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560806139
    },
    {
        "content": "<p>hopefully you won't</p>",
        "id": 168349873,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1560807447
    },
    {
        "content": "<p>that syntax is nonsense :)</p>",
        "id": 168349878,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1560807452
    },
    {
        "content": "<p>I don't think anyone intends for that ever to become a real thing</p>",
        "id": 168349898,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1560807468
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> yeah, I just wanted a simple self borrow to stress that part</p>",
        "id": 168353260,
        "sender_full_name": "Nemo157",
        "timestamp": 1560810500
    },
    {
        "content": "<p>And I was thinking you could replace the printlns with something that you could see the output of</p>",
        "id": 168353275,
        "sender_full_name": "Nemo157",
        "timestamp": 1560810533
    },
    {
        "content": "<p>Well, well, well...</p>",
        "id": 168362163,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560822001
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>off\noff\noff\noff\noff\noff\noff\noff\noff\noff\n</pre></div>",
        "id": 168362210,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560822014
    },
    {
        "content": "<p>and changing it to not do the mutable reference fixes it</p>",
        "id": 168362242,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560822107
    },
    {
        "content": "<p>Now to dig into the codegen... sigh</p>",
        "id": 168362362,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560822278
    },
    {
        "content": "<p>It does start as <code>on</code>, so that's good</p>",
        "id": 168362387,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560822332
    },
    {
        "content": "<p>wait...</p>",
        "id": 168362391,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560822340
    },
    {
        "content": "<p>oh, yeah, that's good:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">blink_off</span><span class=\"p\">();</span><span class=\"w\"></span>\n</pre></div>",
        "id": 168362451,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560822396
    },
    {
        "content": "<p>when you tog, but forget to gle?</p>",
        "id": 168362940,
        "sender_full_name": "Daniel Carosone",
        "timestamp": 1560823185
    }
]