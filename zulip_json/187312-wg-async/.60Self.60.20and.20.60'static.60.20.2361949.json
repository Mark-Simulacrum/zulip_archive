[
    {
        "content": "<p>OK, I'll leave some notes here in a bit =)</p>",
        "id": 170471726,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562692435
    },
    {
        "content": "<p>I'm not understanding the forward compatibility hazard here. Could you show an example of code that compiles, and a change that doesn't (or shouldn't) change the signature but stops compiling because the lifetime has changed?</p>",
        "id": 170472698,
        "sender_full_name": "boats",
        "timestamp": 1562693149
    },
    {
        "content": "<p>it's a bit stretched, but if you have some thing like</p>\n<div class=\"codehilite\"><pre><span></span>impl Foo&lt;&#39;a&gt; {\n  async fn method(&amp;self) -&gt; Self { /* return some data that actually has type `Foo&lt;&#39;static&gt;` */ }\n}\n</pre></div>\n\n\n<p>then you can do</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">..</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">method</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>without an error, even though it outlives the receiver <code>foo</code></p>",
        "id": 170472869,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562693254
    },
    {
        "content": "<p>Got it. So its not to do with the projections in particular</p>",
        "id": 170473030,
        "sender_full_name": "boats",
        "timestamp": 1562693376
    },
    {
        "content": "<p>that example may not be quite right</p>",
        "id": 170474901,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562694594
    },
    {
        "content": "<p>you may need to await the returned future</p>",
        "id": 170474902,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562694598
    },
    {
        "content": "<p>actually it's worth trying to create a real example</p>",
        "id": 170474964,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562694613
    },
    {
        "content": "<p>with <code>-&gt; impl Trait</code> (which is already stable) I think it's pretty clearly wrong</p>",
        "id": 170474979,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562694623
    },
    {
        "content": "<p>but the cat is out of the doggy door or whatever on that :)</p>",
        "id": 170474994,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562694639
    },
    {
        "content": "<p>OK yes this compiles but I think it should not:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#![feature(async_await)]</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">bar</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">new</span><span class=\"p\">(</span><span class=\"n\">_bar</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">bar</span>: <span class=\"kp\">&amp;</span><span class=\"mi\">22</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"n\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">22</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Foo</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">bar</span><span class=\"p\">).</span><span class=\"n\">await</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">drop</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 170475121,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562694739
    },
    {
        "content": "<p>So I mean the major fix here would be to modify how lowering works</p>",
        "id": 170475855,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562695159
    },
    {
        "content": "<p>currently, we figure out which set of lifetimes are captured by a given <code>impl Trait</code> type using the <a href=\"https://github.com/rust-lang/rust/blob/b8ec4c4d11ede0fba333a0474ed473dbe82aacf1/src/librustc/hir/lowering.rs#L1814-L1819\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/b8ec4c4d11ede0fba333a0474ed473dbe82aacf1/src/librustc/hir/lowering.rs#L1814-L1819\"><code>lifetimes_from_impl_trait_bounds</code></a> function</p>",
        "id": 170476808,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562695742
    },
    {
        "content": "<p>the \"problem\" is basically in <a href=\"https://github.com/rust-lang/rust/blob/b8ec4c4d11ede0fba333a0474ed473dbe82aacf1/src/librustc/hir/lowering.rs#L1853-L1869\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/b8ec4c4d11ede0fba333a0474ed473dbe82aacf1/src/librustc/hir/lowering.rs#L1853-L1869\"><code>visit_ty</code></a>, which considers a type like <code>Self</code> to reference no lifetimes at all</p>",
        "id": 170476866,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562695777
    },
    {
        "content": "<p>I guess that <code>Self</code> is considered a <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/hir/enum.TyKind.html#variant.Path\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/hir/enum.TyKind.html#variant.Path\"><code>Path</code></a></p>",
        "id": 170477027,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562695854
    },
    {
        "content": "<p>yeah, it looks like in <a href=\"http://astconv.rs\" target=\"_blank\" title=\"http://astconv.rs\">astconv.rs</a> we <a href=\"https://github.com/rust-lang/rust/blob/b8ec4c4d11ede0fba333a0474ed473dbe82aacf1/src/librustc_typeck/astconv.rs#L2007-L2019\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/b8ec4c4d11ede0fba333a0474ed473dbe82aacf1/src/librustc_typeck/astconv.rs#L2007-L2019\">match against the name resolution result of <code>Res::SelfTy(_, Some(impl_def_id))</code></a></p>",
        "id": 170477336,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562696045
    },
    {
        "content": "<p>during lowering, we <a href=\"https://github.com/rust-lang/rust/blob/b8ec4c4d11ede0fba333a0474ed473dbe82aacf1/src/librustc/hir/lowering.rs#L3490\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/b8ec4c4d11ede0fba333a0474ed473dbe82aacf1/src/librustc/hir/lowering.rs#L3490\">start by lowering the impl header</a>, and in particular we extract the self-type there</p>",
        "id": 170477654,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562696304
    },
    {
        "content": "<p>so I guess what we want to do is to have some kind of list of in-scope self types, similar to the list of in-scope regions</p>",
        "id": 170477692,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562696357
    },
    {
        "content": "<p>when we visit the impl items, at the <a href=\"https://github.com/rust-lang/rust/blob/b8ec4c4d11ede0fba333a0474ed473dbe82aacf1/src/librustc/hir/lowering.rs#L3512\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/b8ec4c4d11ede0fba333a0474ed473dbe82aacf1/src/librustc/hir/lowering.rs#L3512\">same time as we push the impl header details</a>, we would push the lowered self type (perhaps paired with the def-id of the impl) onto the list</p>",
        "id": 170477716,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562696392
    },
    {
        "content": "<p>then, in the <code>lifetimes_from_impl_trait_bounds</code> function above, if we encounter a <code>HirTy::Path</code> and it resolves to a <code>Res::SelfTy(_, Some(def_id))</code>, we would look for that <code>def_id</code> on this list. This would give us the self type. We could then just visit that self-type with the same visitor we have.</p>",
        "id": 170477805,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562696431
    },
    {
        "content": "<p>This is..not too horrible.</p>",
        "id": 170477810,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562696437
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> does that look roughly like what you would expect <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span> ?</p>",
        "id": 170477816,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562696448
    },
    {
        "content": "<p>I'm not entirely sure where the \"async fn to something using impl trait\" lowering takes place -- but I presume it's going to work out.</p>",
        "id": 170477849,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562696495
    },
    {
        "content": "<p>Er wait!</p>",
        "id": 170478251,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562696791
    },
    {
        "content": "<p>Maybe I'm just...wrong here.</p>",
        "id": 170478256,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562696796
    },
    {
        "content": "<p>Well, I think this fix I mention above is probably necessary for <em>ordinary</em> impl Trait, but there is a <em>second</em> problem, and that second problem is the reason that this afflicts <code>async fn</code>.</p>",
        "id": 170478303,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562696851
    },
    {
        "content": "<p>And this has to do with the \"original hack\" whereby a <code>-&gt; impl Trait</code> inherits the lifetimes from its parent but substitutes <code>'static</code> for them (because they are not meant to be observed). I am guessing we expand <code>Self</code> to <code>Foo&lt;'a&gt;</code> but then we substitute <code>'static</code> somewhere.</p>",
        "id": 170478377,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562696911
    },
    {
        "content": "<blockquote>\n<p>Well, I think this fix I mention above is probably necessary for <em>ordinary</em> impl Trait, but there is a <em>second</em> problem, and that second problem is the reason that this afflicts <code>async fn</code>.</p>\n</blockquote>\n<p>(In particular, doesn't async fn already capture all lifetimes in scope?)</p>",
        "id": 170478386,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562696928
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> do you still want me to take this or leave it for new folks since it’s tagged as <code>E-mentor</code>?</p>",
        "id": 170478563,
        "sender_full_name": "davidtwco",
        "timestamp": 1562697102
    },
    {
        "content": "<p>Let's remove that tag since now I'm not sure the best fix</p>",
        "id": 170478797,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562697269
    },
    {
        "content": "<p>Sure, should I assign myself?</p>",
        "id": 170478844,
        "sender_full_name": "davidtwco",
        "timestamp": 1562697323
    },
    {
        "content": "<p>Sure</p>",
        "id": 170478848,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562697330
    },
    {
        "content": "<p>I'm debating how to fix this, I'm not quite sure</p>",
        "id": 170479452,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562697839
    },
    {
        "content": "<p>I'm also not sure where this current setup is documented, though I feel like we wrote some big comments on it somewhere</p>",
        "id": 170479602,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562697856
    },
    {
        "content": "<p>Basically if you have </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;b</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;b</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>you wind up with an \"existential type\" that <em>inherits</em> the type+lifetime parameters from its surrounding scope, but then adds some more</p>",
        "id": 170479794,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562697987
    },
    {
        "content": "<p>so it's kind of like</p>",
        "id": 170479795,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562697988
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;b</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;b</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">existential</span><span class=\"w\"> </span><span class=\"n\">Type</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;b1</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>except not like that, because in Rust syntax, existential types (and other items in fns) don't inherit the scope from the fn they are within</p>",
        "id": 170479822,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562698020
    },
    {
        "content": "<p>but it means that the set of lifetime parameters on the <code>existential type</code> is <em>actually</em> <code>'a, 'b, 'a1, 'b1</code></p>",
        "id": 170479846,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562698043
    },
    {
        "content": "<p>and then any <em>reference</em> to that existential type uses <code>'static</code> for the lifetimes taken from the parent, so e.g. you get</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;b</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">ExistentialType</span><span class=\"o\">&lt;</span><span class=\"nb\">&#39;static</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">&#39;static</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;b</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n</pre></div>",
        "id": 170479879,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562698082
    },
    {
        "content": "<p>this may seem totally bonkers, and in a way it is :)</p>",
        "id": 170479924,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562698092
    },
    {
        "content": "<p>but the reason is that we <em>also</em> inherit the types, and we want those.</p>",
        "id": 170479932,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562698108
    },
    {
        "content": "<p>anyway any place the user <em>wrote</em> <code>'a</code> (say) will wind up being resolved to the <code>'a1</code> declared on the <code>existential type</code></p>",
        "id": 170479982,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562698153
    },
    {
        "content": "<p>but, in this case, the user wrote <code>Self</code></p>",
        "id": 170480000,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562698161
    },
    {
        "content": "<p>which we are internally expanding to a type that includes the <code>'a</code></p>",
        "id": 170480012,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562698174
    },
    {
        "content": "<p>We could certainly just make this an error for now -- as I intended to do w/ projections</p>",
        "id": 170480032,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562698194
    },
    {
        "content": "<p>Maybe that's the right thing to do</p>",
        "id": 170480038,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562698199
    },
    {
        "content": "<p>Not great but at least we don't do the <em>wrong</em> thing and we give room for a proper fix</p>",
        "id": 170480095,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562698213
    },
    {
        "content": "<p>We don't have to ban <code>Self</code> all together, we can just report errors when you have an async fn that references <code>Self</code> <em>and</em> <code>Self</code> contains lifetime parameters</p>",
        "id": 170480160,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562698240
    },
    {
        "content": "<p>same with <code>T::Foo</code></p>",
        "id": 170480166,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562698244
    },
    {
        "content": "<p>OK, I'm convinced, I can write up some mentoring instructions for how to do that and we can leave a proper fix for future work :P</p>",
        "id": 170480261,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562698300
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 170482879,
        "sender_full_name": "davidtwco",
        "timestamp": 1562700179
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> <a href=\"https://github.com/rust-lang/rust/issues/61949#issuecomment-509797784\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/61949#issuecomment-509797784\">left some notes here</a> -- let me know if they make sense!</p>",
        "id": 170488443,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562704620
    },
    {
        "content": "<p>Not sure how familiar you are with how the generics etc are setup</p>",
        "id": 170488452,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562704627
    },
    {
        "content": "<p>Thanks, I’ll take a look.</p>",
        "id": 170493786,
        "sender_full_name": "davidtwco",
        "timestamp": 1562709369
    },
    {
        "content": "<blockquote>\n<p>Not sure how familiar you are with how the generics etc are setup</p>\n</blockquote>\n<p>I think this was roughly the topic of my last rustc lecture series, as an aside, don't remember exactly what I covered here though</p>",
        "id": 170543563,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562767077
    },
    {
        "content": "<p>I think those instructions make sense.</p>",
        "id": 170545057,
        "sender_full_name": "davidtwco",
        "timestamp": 1562768188
    }
]