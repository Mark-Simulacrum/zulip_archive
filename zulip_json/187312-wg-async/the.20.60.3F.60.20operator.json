[
    {
        "content": "<p>I am writing a first pass at reference material for the book. Along the way, I noticed that the async-await RFC says that the <code>?</code> operator's behavior has not yet been determined. And yet it seems to work fine in an async block (<a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=ba95c1f8dfba8f33240a56bfe243ac20\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=ba95c1f8dfba8f33240a56bfe243ac20\">playground</a>). Should we move that to a separate feature gate?</p>\n<p>cc <span class=\"user-group-mention\" data-user-group-id=\"1172\">@WG-async-foundations</span></p>",
        "id": 170577508,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562790963
    },
    {
        "content": "<p>responded on the issue</p>",
        "id": 170578201,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1562791488
    },
    {
        "content": "<p>this was initially a point of discussion</p>",
        "id": 170578223,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1562791497
    },
    {
        "content": "<p>but we discussed it in further lang team meetings and decided that we were all okay with <code>return</code>/<code>break</code>/<code>continue</code>/<code>?</code> all working as they did in closures, which is really the only possible option</p>",
        "id": 170578270,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1562791528
    },
    {
        "content": "<p>separately feature-gating <code>?</code> would essentially make <code>async</code>/<code>await</code> dead-on-arrival given that almost all futures return <code>Result</code> types.</p>",
        "id": 170578305,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1562791558
    },
    {
        "content": "<p>i don't know if that decision was ever recorded anywhere, given that discussion over this has spread across so many issues and meetings over time.</p>",
        "id": 170578399,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1562791612
    },
    {
        "content": "<blockquote>\n<p>but we discussed it in further lang team meetings and decided that we were all okay with return/break/continue/? all working as they did in closures, which is really the only possible option</p>\n</blockquote>\n<p>I don't recall this, but I also don't think there's anything strange going on here so I'm fine with shipping it.</p>\n<p>That said, looking over the \"existing tests\" list I see no mention of <code>?</code></p>",
        "id": 170578723,
        "sender_full_name": "centril",
        "timestamp": 1562791896
    },
    {
        "content": "<p>I mean, I don't think <code>?</code> is \"anything special\" here-- its behavior falls out as an obvious consequence of async blocks being a kind of closure.</p>",
        "id": 170578859,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1562792015
    },
    {
        "content": "<p>but it seems fine to me to add tests for that, break, continue, return, etc.</p>",
        "id": 170578889,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1562792043
    },
    {
        "content": "<p>Frankly, that comment should not have been allowed to be added to the RFC</p>",
        "id": 170578970,
        "sender_full_name": "boats",
        "timestamp": 1562792087
    },
    {
        "content": "<p>There has never been any serious doubt about the behavior of ?</p>",
        "id": 170578999,
        "sender_full_name": "boats",
        "timestamp": 1562792107
    },
    {
        "content": "<blockquote>\n<p>I mean, I don't think ? is \"anything special\" here-- its behavior falls out as an obvious consequence of async blocks being a kind of closure.</p>\n</blockquote>\n<p>That presumes a sane compiler and a sane implementation</p>",
        "id": 170579229,
        "sender_full_name": "centril",
        "timestamp": 1562792305
    },
    {
        "content": "<p>I assume the implementation is wrong when thinking of tests</p>",
        "id": 170579242,
        "sender_full_name": "centril",
        "timestamp": 1562792324
    },
    {
        "content": "<p>and it's also important in terms of avoiding regressions</p>",
        "id": 170579254,
        "sender_full_name": "centril",
        "timestamp": 1562792344
    },
    {
        "content": "<p>seems like tests for all control flow operatos would be fine</p>",
        "id": 170579361,
        "sender_full_name": "boats",
        "timestamp": 1562792416
    },
    {
        "content": "<p>(I tested quickly at playground... seems nothing strange is going on, but the one bit that stood out is that <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=42f1c7732a5623674481654189f517ee\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=42f1c7732a5623674481654189f517ee\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=42f1c7732a5623674481654189f517ee</a> gives subpar diagnostics that leaks the fact that it behaves like a function)</p>",
        "id": 170579561,
        "sender_full_name": "centril",
        "timestamp": 1562792608
    },
    {
        "content": "<p>(That doesn't seem blocking, but it would be good to improve diagnostics here)</p>",
        "id": 170579572,
        "sender_full_name": "centril",
        "timestamp": 1562792627
    },
    {
        "content": "<p>(Filed as: <a href=\"https://github.com/rust-lang/rust/issues/62570\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/62570\">https://github.com/rust-lang/rust/issues/62570</a>)</p>",
        "id": 170579870,
        "sender_full_name": "centril",
        "timestamp": 1562792889
    },
    {
        "content": "<p>I agree we should just stabilize existing behavior of <code>?</code></p>",
        "id": 170583254,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562796178
    },
    {
        "content": "<p>I also agree we should write some tests :)</p>",
        "id": 170583282,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562796212
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> do we permit <code>return</code> to \"return\" from the block?</p>",
        "id": 170583308,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562796241
    },
    {
        "content": "<p>it...seems we do.</p>",
        "id": 170583369,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562796265
    },
    {
        "content": "<p>Into where does it return?</p>",
        "id": 170584388,
        "sender_full_name": "nagisa",
        "timestamp": 1562797116
    },
    {
        "content": "<p>Into the result of the future, as with a closure.</p>",
        "id": 170586027,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562798665
    },
    {
        "content": "<p>And yes this connects to your other topic :)</p>",
        "id": 170586036,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562798677
    },
    {
        "content": "<p>otoh this makes async blocks into implicit try blocks, in a sense- they're intentionally <em>not</em> like closures in a lot of ways so it seems strange and unnecessary to allow <code>return</code>/<code>?</code> just because the implementation is straightforward</p>",
        "id": 170586051,
        "sender_full_name": "rpjohnst",
        "timestamp": 1562798686
    },
    {
        "content": "<p>/me not inclined to revist a basic question like this at this stage</p>",
        "id": 170586055,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562798688
    },
    {
        "content": "<p>(although I agree that <code>return</code> in particular feels surprising to me)</p>",
        "id": 170586097,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562798746
    },
    {
        "content": "<p>although convenient!</p>",
        "id": 170586109,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562798755
    },
    {
        "content": "<p>i too find it very awkward that <code>return</code> has closure semantic without the closure syntax (the <code>||</code>) :(</p>",
        "id": 170711332,
        "sender_full_name": "kennytm",
        "timestamp": 1562927510
    }
]