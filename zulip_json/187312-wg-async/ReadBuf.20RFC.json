[
    {
        "content": "<p>Speaking of uninitialized buffers, I finally started writing up that RFC. I have adjusted things a little bit since that dropbox paper/discussion with niko. The ReadBuf type now tracks both the initialization cursor and a read cursor, which avoids some weird edge cases around trusted and untrusted values from the impl: <a href=\"https://github.com/sfackler/rfcs/blob/read-buf/text/0000-read-buf.md\" title=\"https://github.com/sfackler/rfcs/blob/read-buf/text/0000-read-buf.md\">https://github.com/sfackler/rfcs/blob/read-buf/text/0000-read-buf.md</a></p>",
        "id": 195615902,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1588103057
    },
    {
        "content": "<p>definitely happy to take feedback/prs on the rfc if people feel like it, btw :)</p>",
        "id": 195618124,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1588103992
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243558\">@Steven Fackler</span> splitting this into its own topic for discussion</p>",
        "id": 195646119,
        "sender_full_name": "tmandry",
        "timestamp": 1588120173
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243558\">@Steven Fackler</span> do you think there's a way to avoid adding the second usize for <code>written</code> vs <code>initialized</code> bytes?</p>",
        "id": 195646307,
        "sender_full_name": "tmandry",
        "timestamp": 1588120362
    },
    {
        "content": "<p>So originally I didn't have the written tracked in the buf at all: <a href=\"https://paper.dropbox.com/doc/IO-Buffer-Initialization--Ay0GuctVvpVkBU1tnhs3EGe5Ag-MvytTgjIOTNpJAS6Mvw38\" title=\"https://paper.dropbox.com/doc/IO-Buffer-Initialization--Ay0GuctVvpVkBU1tnhs3EGe5Ag-MvytTgjIOTNpJAS6Mvw38\">https://paper.dropbox.com/doc/IO-Buffer-Initialization--Ay0GuctVvpVkBU1tnhs3EGe5Ag-MvytTgjIOTNpJAS6Mvw38</a></p>",
        "id": 195646327,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1588120393
    },
    {
        "content": "<p>yeah, that's part of what prompted my question</p>",
        "id": 195646346,
        "sender_full_name": "tmandry",
        "timestamp": 1588120413
    },
    {
        "content": "<p>where read_buf returns the number of bytes read just like the normal read function does</p>",
        "id": 195646348,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1588120421
    },
    {
        "content": "<p>however</p>",
        "id": 195646349,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1588120422
    },
    {
        "content": "<p>this introduces some subtle issues when dealing with unsafe code</p>",
        "id": 195646356,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1588120434
    },
    {
        "content": "<p>you can't trust that the returned number of bytes read is correct</p>",
        "id": 195646418,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1588120467
    },
    {
        "content": "<p>in particular it could be larger than the number of initialized bytes</p>",
        "id": 195646423,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1588120477
    },
    {
        "content": "<p>so when working with unsafe code around read bufs, there are some subtle asserts you need to add</p>",
        "id": 195646456,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1588120536
    },
    {
        "content": "<p>e.g. <a href=\"https://github.com/sfackler/read-buf/blob/master/src/read.rs#L36-L39\" title=\"https://github.com/sfackler/read-buf/blob/master/src/read.rs#L36-L39\">https://github.com/sfackler/read-buf/blob/master/src/read.rs#L36-L39</a> and <a href=\"https://github.com/sfackler/read-buf/blob/master/src/read.rs#L82-L85\" title=\"https://github.com/sfackler/read-buf/blob/master/src/read.rs#L82-L85\">https://github.com/sfackler/read-buf/blob/master/src/read.rs#L82-L85</a></p>",
        "id": 195646459,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1588120550
    },
    {
        "content": "<p>but if we move the \"bytes read\" tracking inside of the ReadBuf, we can lean on ReadBuf to make sure it's asserting properly for us</p>",
        "id": 195646508,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1588120578
    },
    {
        "content": "<p>I see, so we need the implementation of the ReadBuf to enforce correctness when being used from potentially incorrect code</p>",
        "id": 195646514,
        "sender_full_name": "tmandry",
        "timestamp": 1588120594
    },
    {
        "content": "<p>it also makes read_exact cleaner since you can just repeatedly pass the same buffer in without needing to reconstruct it each time</p>",
        "id": 195646519,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1588120603
    },
    {
        "content": "<p>I mean, you don't <em>need to</em> have ReadBuf deal with it</p>",
        "id": 195646533,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1588120624
    },
    {
        "content": "<p>but it just seemed like a footgun to have a mix of trusted and untrusted values</p>",
        "id": 195646548,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1588120642
    },
    {
        "content": "<p>it does make \"did I read zero bytes\" checks a bit awkward though</p>",
        "id": 195646559,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1588120659
    },
    {
        "content": "<p>ok, makes sense. that might be the right tradeoff to make</p>",
        "id": 195646825,
        "sender_full_name": "tmandry",
        "timestamp": 1588120943
    },
    {
        "content": "<p>one idea that comes to mind is returning the bytes read, but wrapping it a newtype that sort of advertises / forces you to acknowledge the fact that it's untrusted, but I can't think of one that's ergonomic for the safe case and loud for the unsafe.</p>",
        "id": 195646963,
        "sender_full_name": "tmandry",
        "timestamp": 1588121103
    },
    {
        "content": "<p>well, maybe I <em>can</em> think of one</p>",
        "id": 195646994,
        "sender_full_name": "tmandry",
        "timestamp": 1588121152
    },
    {
        "content": "<p>but I'm not sure if it'd be worth the complexity in the API</p>",
        "id": 195646996,
        "sender_full_name": "tmandry",
        "timestamp": 1588121156
    },
    {
        "content": "<p>we could have read_buf still just return io::Result&lt;usize&gt;, but then you have a trusted number of bytes read and an untrusted number which also seems like a footgun</p>",
        "id": 195647632,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1588121594
    },
    {
        "content": "<p>..the return value here is the untrusted number, correct?</p>",
        "id": 195647731,
        "sender_full_name": "tmandry",
        "timestamp": 1588121663
    },
    {
        "content": "<p>I guess what I'm saying is, you could change the return type to <code>io::Result&lt;ReadBufCursor&gt;</code> or something</p>",
        "id": 195647924,
        "sender_full_name": "tmandry",
        "timestamp": 1588121851
    },
    {
        "content": "<p>and then force the caller to bring the cursor and the readbuf together to do anything useful</p>",
        "id": 195647975,
        "sender_full_name": "tmandry",
        "timestamp": 1588121881
    },
    {
        "content": "<p>I don't actually know if that works though, I haven't written out an example yet</p>",
        "id": 195648028,
        "sender_full_name": "tmandry",
        "timestamp": 1588121907
    },
    {
        "content": "<p>and in the vectored case it's more unclear.. maybe you could update the cursor as you consume the bytes from each underlying buf, or something</p>",
        "id": 195648159,
        "sender_full_name": "tmandry",
        "timestamp": 1588122010
    },
    {
        "content": "<p>(but then that would impose a constraint that you read the vectored bufs in order)</p>",
        "id": 195648300,
        "sender_full_name": "tmandry",
        "timestamp": 1588122123
    },
    {
        "content": "<p>I think it'd be far more useful if I sat down to write some code than speak in generalities</p>",
        "id": 195648377,
        "sender_full_name": "tmandry",
        "timestamp": 1588122178
    },
    {
        "content": "<p>yeah the return value is the untrusted one</p>",
        "id": 195650177,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1588123819
    },
    {
        "content": "<p>I think you'd have a hard time making ReadBufCursor safe since you'd need to prevent a malicious Read impl from creating a large one with a different reader and returning that</p>",
        "id": 195650739,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1588124574
    },
    {
        "content": "<p>Ah, my thinking was that ReadBufCursor would remain untrusted (it's a newtype around the return value we have today), but that we'd be encoding that in the API instead of in documentation. So you'd be forced to go through an asserting path to \"unwrap\" the value, essentially.</p>",
        "id": 195996033,
        "sender_full_name": "tmandry",
        "timestamp": 1588359349
    }
]