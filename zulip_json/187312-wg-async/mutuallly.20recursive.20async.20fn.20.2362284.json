[
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> I'm looking at <a href=\"https://github.com/rust-lang/rust/issues/62284\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/62284\">https://github.com/rust-lang/rust/issues/62284</a> a bit more closely</p>",
        "id": 169725745,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562349539
    },
    {
        "content": "<p>I'm a bit surprised by the example itself -- it is returning a boxed future from an async fn?</p>",
        "id": 169726150,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562349867
    },
    {
        "content": "<p>It seems like this cycles is tied to the way we implement <code>impl Trait</code></p>",
        "id": 169726163,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562349889
    },
    {
        "content": "<p>i.e., auto trait leakage</p>",
        "id": 169726166,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562349895
    },
    {
        "content": "<p>this actually raises the issue of whether <code>async fn</code> should desugar to <code>impl Future</code> or <code>impl Future + Send</code> again, as the most obvious workaround is to desugar to something returning + Send</p>",
        "id": 169726289,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562350052
    },
    {
        "content": "<p>( cc <span class=\"user-mention\" data-user-id=\"203289\">@boats</span> )</p>",
        "id": 169727587,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562351308
    },
    {
        "content": "<p>I left <a href=\"https://github.com/rust-lang/rust/issues/62284#issuecomment-508830428\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/62284#issuecomment-508830428\">several comments on the issue itself</a>. In general, recursive async functions are a bit of a pain right now, is roughly my conclusion, and the solutions are a bit tricky.</p>",
        "id": 169732370,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562356658
    },
    {
        "content": "<p>This isn't an interesting issue with respect to cycles at all</p>",
        "id": 169903629,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1562618933
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> the issue is that it thinks there is a cycle, but it shouldn't, because the object returned by the <code>async fn</code> never gets stored into a local that is live across an <code>await</code> point</p>",
        "id": 169903668,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1562618970
    },
    {
        "content": "<p>It's just bad at determining which temporaries need to be analyzed</p>",
        "id": 169903682,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1562618991
    },
    {
        "content": "<p>Yeah, but it seems more interesting when there <em>are</em> actual cycles</p>",
        "id": 169903842,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562619115
    },
    {
        "content": "<p>that's pretty painful right now</p>",
        "id": 169903892,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562619126
    },
    {
        "content": "<p>it's just not something I had on my radar</p>",
        "id": 169903904,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562619140
    },
    {
        "content": "<p>Sure, but the issue here is that there's a specific case that is pretty common, doesn't have cycles, and should be easily resolved</p>",
        "id": 169903970,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1562619216
    },
    {
        "content": "<p>Why is this scenario common?</p>",
        "id": 169904087,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562619295
    },
    {
        "content": "<p>it happens whenever you want to make a recursive <code>async fn</code></p>",
        "id": 169904216,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1562619364
    },
    {
        "content": "<p>I've had a number of people at work try and do this and wound up repeating the steps that I showed in the issue</p>",
        "id": 169904248,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1562619392
    },
    {
        "content": "<p>(pull the call out into a separate function that does the boxing)</p>",
        "id": 169904256,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1562619404
    },
    {
        "content": "<p>which is silly boilerplate</p>",
        "id": 169904262,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1562619410
    },
    {
        "content": "<p>Is it a common thing to have an async fn return a boxed future?</p>",
        "id": 169904584,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562619690
    },
    {
        "content": "<p>I guess it's a \"stream-like\" pattern</p>",
        "id": 169904592,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562619694
    },
    {
        "content": "<p>sort of analogous to a \"one shot channel\"</p>",
        "id": 169904597,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562619700
    },
    {
        "content": "<p>I wonder if the most logical fix is to make the \"maybe lives across await\" analysis more precise.</p>",
        "id": 169904666,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562619756
    },
    {
        "content": "<p>it's certainly not uncommon, yes</p>",
        "id": 169904680,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1562619767
    },
    {
        "content": "<blockquote>\n<p>I wonder if the most logical fix is to make the \"maybe lives across await\" analysis more precise.</p>\n</blockquote>\n<p>Yes, I think that's where the problem is here.</p>",
        "id": 169904689,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1562619782
    }
]