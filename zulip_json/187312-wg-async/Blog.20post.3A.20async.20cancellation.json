[
    {
        "content": "<p>Hey all, I finally published <a href=\"https://blog.yoshuawuyts.com/async-cancellation-1/\">my blog post on async cancellation</a>! Figured it'd be interesting for some here; especially as it touches on the interaction with the Futures 2.0 designs. I've opened <a href=\"https://internals.rust-lang.org/t/blog-post-async-cancellation/15591\">a thread on internals for comments</a>. Thanks!</p>",
        "id": 261114845,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1636625907
    },
    {
        "content": "<p>Your link appears to go to 127.0.0.1</p>",
        "id": 261118655,
        "sender_full_name": "Alice Ryhl",
        "timestamp": 1636628305
    },
    {
        "content": "<p>The correct link: <a href=\"https://blog.yoshuawuyts.com/async-cancellation-1/\">https://blog.yoshuawuyts.com/async-cancellation-1/</a></p>",
        "id": 261124508,
        "sender_full_name": "Charles Lew",
        "timestamp": 1636632204
    },
    {
        "content": "<p>What a nice post; very nice to have laid out the essentials starting from the basics, up until spelling out the \"joinhandles / tasks' detach-on-drop semantics make 'cancellation propagation' opt-in\" as indeed an important footgun to keep in mind <span aria-label=\"ok\" class=\"emoji emoji-1f44c\" role=\"img\" title=\"ok\">:ok:</span> </p>\n<p>A few remarks:</p>\n<hr>\n<blockquote>\n<p>By design [a <code>Future</code>] does nothing unless <code>.await</code>ed</p>\n</blockquote>\n<p>You could add a footnote mentioning that a <code>Future</code>-yielding function call could still do some setup work before reaching the suspended state, such as <code>Arc::clone</code>-ing and whatnot so as to be <code>'static</code>. That is, to somehow hint at the points mentioned <a href=\"https://docs.rs/async_fn/0.0.2/async_fn/macro.before_async.html#eager-vs-lazy--suspended-code\">here</a>.</p>\n<hr>\n<p>Another tiny nit is that you could try to be slightly more consistent with the <code>println!</code> \"labels\", and with the <code>Drop</code> guard idea to show drop order (I was slightly confused by the location of the <code>println!(\"2\")</code> statement having changed in between two examples, for instance, although granted, I skimmed the code snippet quite quickly). The drop guard idea is awesome, and, if moreover you were to add names to it, you could use them for <em>each</em> of these <code>async fn</code>s futures:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Deathrattle</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"nb\">static</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Drop</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Deathrattle</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">drop</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Dropped `{}`\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"nc\">Deathrattle</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// …</span>\n<span class=\"w\">    </span><span class=\"n\">bar</span><span class=\"p\">(</span><span class=\"n\">Deathrattle</span><span class=\"p\">(</span><span class=\"s\">\"bar()\"</span><span class=\"p\">)).</span><span class=\"n\">timeout</span><span class=\"w\"> </span><span class=\"c1\">// …</span>\n<span class=\"w\">    </span><span class=\"c1\">// …</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// …</span>\n<span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"n\">Deathrattle</span><span class=\"p\">(</span><span class=\"s\">\"foo()\"</span><span class=\"p\">)).</span><span class=\"n\">timeout</span><span class=\"w\"> </span><span class=\"c1\">// …</span>\n<span class=\"c1\">// …</span>\n</code></pre></div>",
        "id": 261128813,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1636634811
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"218683\">Alice Ryhl</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/Blog.20post.3A.20async.20cancellation/near/261118655\">said</a>:</p>\n<blockquote>\n<p>Your link appears to go to 127.0.0.1</p>\n</blockquote>\n<p>oooops; haha</p>",
        "id": 261158503,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1636649881
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232018\">Daniel Henry-Mantilla</span> I appreciate the feedback!</p>",
        "id": 261158687,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1636649977
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211722\">@Yoshua Wuyts [he/they]</span>  I like the start of the post. I gives a good intra for readers that are not familiar yet with async cancellation about the problem.</p>\n<p>Some super high level comments about the following sections: You might want to check out <a href=\"https://gist.github.com/Matthias247/354941ebcc4d2270d07ff0c6bf066c64\">https://gist.github.com/Matthias247/354941ebcc4d2270d07ff0c6bf066c64</a><br>\nwhich is discussed (well - not really so far) in  <a href=\"#narrow/stream/187312-wg-async-foundations/topic/A.20case.20for.20CancellationTokens\">https://rust-lang.zulipchat.com/#narrow/stream/187312-wg-async-foundations/topic/A.20case.20for.20CancellationTokens</a></p>\n<p>It describes common denominators between async and sync cancellation. I've not done any more work on this so far due to lack of interest, but I'm happy to discuss.</p>\n<p>In the blog article, you might want to mention in \"Patching cancellation propagation\" that this still doesn't guarantee cancellation. Tasks that are e.g. spawned using <code>spawn_blocking</code>, or anyones which are not paused at at <code>.await</code> point will continue to run until the next one of those.</p>",
        "id": 261173395,
        "sender_full_name": "Matthias247",
        "timestamp": 1636657806
    }
]