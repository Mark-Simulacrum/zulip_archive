[
    {
        "content": "<p>Does anybody have experience using the AsyncSeek trait? Or thought about using Seek with async in any way?</p>",
        "id": 275839250,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1647625754
    },
    {
        "content": "<p>ISTM that it only makes sense with files? Is that why Tokio has a completion-like API for Seek rather than a readiness style one?</p>",
        "id": 275839602,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1647625922
    },
    {
        "content": "<p>It also makes sense with buffers.</p>",
        "id": 275841617,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1647626778
    },
    {
        "content": "<p>Right, true</p>",
        "id": 275841718,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1647626844
    },
    {
        "content": "<p>I wonder how useful that is? Like most seeks on a buffer should be sync, I'd expect reading into the buffer would want to be managed explicitly? (I have no experience using Seek, sync or async)</p>",
        "id": 275841913,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1647626937
    },
    {
        "content": "<p>\"most seeks on a buffer should be sync\" - I mean, there should be no need to be async because they'd be quick</p>",
        "id": 275841962,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1647626972
    },
    {
        "content": "<p>I came up with my own variants <code>Read</code>/<code>Write</code>/<code>Seek</code> when I first started Rust years ago; translating existing work from JavaScript to Rust: <a href=\"https://github.com/datrs/random-access-storage\">https://github.com/datrs/random-access-storage</a>. If I had to redo this work today I would've just used the standard IO interfaces for it.</p>\n<p>What's interesting about this crate imo is that it supported variable backends. So you could provide either a file or memory as the backend, and seek to random offsets in either. That made it especially useful when testing.</p>",
        "id": 275844198,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1647628078
    },
    {
        "content": "<p>Other prior art (I was involved with introducing both of these, as none existed at the time):</p>\n<ul>\n<li><a href=\"https://docs.rs/futures-io/latest/futures_io/trait.AsyncSeek.html\"><code>futures_io::AsyncSeek</code></a></li>\n<li><a href=\"https://docs.rs/async-std/latest/async_std/io/trait.Seek.html\"><code>async_std::io::Seek</code></a></li>\n</ul>",
        "id": 275844553,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1647628257
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256841\">Nick Cameron</span> <a href=\"#narrow/stream/187312-wg-async/topic/AsyncSeek.20trait/near/275841962\">said</a>:</p>\n<blockquote>\n<p>\"most seeks on a buffer should be sync\" - I mean, there should be no need to be async because they'd be quick</p>\n</blockquote>\n<p>No need, true, but handling buffers and files in a uniform way requires them both to support async.</p>",
        "id": 275861454,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1647636919
    },
    {
        "content": "<p>I mean, arguably there's no reason to have async <em>write</em> on a buffer, either.</p>",
        "id": 275861475,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1647636929
    },
    {
        "content": "<p>No experience, but to me it seems a lot more natural to express something like this using an async <code>read_at</code> instead of awaiting a <code>seek</code> operation...</p>",
        "id": 275878752,
        "sender_full_name": "tmandry",
        "timestamp": 1647650286
    },
    {
        "content": "<p>That said, if you are literally reading off a magnetic tape, I can imagine such an API being quite useful.</p>",
        "id": 275878770,
        "sender_full_name": "tmandry",
        "timestamp": 1647650307
    },
    {
        "content": "<p>not sure we want to be optimizing that use case though :)</p>",
        "id": 275878897,
        "sender_full_name": "tmandry",
        "timestamp": 1647650475
    },
    {
        "content": "<p>/me adds \"cassette tape RAID array\" to the side projects list</p>",
        "id": 275878908,
        "sender_full_name": "tmandry",
        "timestamp": 1647650484
    },
    {
        "content": "<p>Common use case: you have modular code, and the other module isn't designed to read_at or write_at.</p>",
        "id": 275881392,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1647653406
    },
    {
        "content": "<p>Seek, then call some code to parse a format.</p>",
        "id": 275881400,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1647653421
    }
]