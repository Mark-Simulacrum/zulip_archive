[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224872\">@rylev</span> we're still missing SLOW, right? (That is, some kind of library)</p>",
        "id": 230856992,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616071964
    },
    {
        "content": "<p>Yes everything we have is an executable. It would be nice to have a library</p>",
        "id": 230857089,
        "sender_full_name": "rylev",
        "timestamp": 1616072017
    },
    {
        "content": "<p>I'm adding something briefly</p>",
        "id": 230857323,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616072119
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"226095\">@Dirkjan Ochtman</span> you might be able to suggest improvements for the <a href=\"https://rust-lang.github.io/wg-async-foundations/vision/projects/SLOW.html\">SLOW project page</a> based on Quin :)</p>",
        "id": 230874266,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616078362
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> one thing that might be nice to have for SLOW is an interaction with other resources besides just sockets. I've had a project that took a dependency on a specific runtime because it needed a timer, for example.</p>",
        "id": 230875494,
        "sender_full_name": "rylev",
        "timestamp": 1616078816
    },
    {
        "content": "<p>It might be helpful to have a higher level library, for example <code>kube-rs</code> (for interacting with kubernetes) currently has to decide for the user which runtime they will use. This is very common for high-level non-data-oriented libraries today.</p>",
        "id": 230875916,
        "sender_full_name": "rylev",
        "timestamp": 1616078984
    },
    {
        "content": "<p>yes! I would like to know what sorts of things SLOW (or similar libraries) need from their runtimes</p>",
        "id": 230887052,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616082461
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"243965\">@Sean McArthur</span> was working on that kind of thing</p>",
        "id": 230887071,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616082470
    },
    {
        "content": "<p>I had been just collecting bullet points of things I've noticed of libraries and their support of runtimes, i'll paste the bullet points i have</p>",
        "id": 230888908,
        "sender_full_name": "Sean McArthur",
        "timestamp": 1616083038
    },
    {
        "content": "<h3>hyper</h3>\n<ul>\n<li>requires <code>tokio::io::{AsyncRead, AsyncWrite}</code></li>\n<li>but otherwise, provides tcp/timer built-ins via a feature flag</li>\n<li>defines traits in-crate for connecting, resolving, and spawning<br>\n    - allows to be used in fuchsia, or with async-std, etc<br>\n    - this does result in a lot of \"glue\" code in some cases</li>\n</ul>\n<h3>h3</h3>\n<ul>\n<li>defines in-crate <code>Connection</code> trait to work with any QUIC implementation<br>\n    - This shifts the choice of runtime onto the QUIC library<br>\n    - In practice, this means a user can pick a QUIC library that combines with their preferred runtime</li>\n</ul>\n<h3>reqwest</h3>\n<ul>\n<li>forces the choice of tokio</li>\n<li>allows choice of TLS via feature flags</li>\n<li>works with wasm via conditional compilation (not a feature flag)</li>\n</ul>\n<h3>quinn</h3>\n<ul>\n<li>split in two crates<br>\n    - quinn-proto is the sans-io protocol part<br>\n    - quinn is a layer on top combining quinn-proto with tokio</li>\n</ul>\n<h3>trust-dns</h3>\n<h3>sqlx</h3>\n<h3>quiche</h3>\n<ul>\n<li>implements the QUIC protocol</li>\n<li>doesn't even bother with IO at all<br>\n    - kind of like the sans-io layer in other libraries<br>\n    - but skips having some <code>quiche-tokio</code> layer or feature</li>\n</ul>",
        "id": 230888938,
        "sender_full_name": "Sean McArthur",
        "timestamp": 1616083049
    },
    {
        "content": "<p>broke this out into a fresh topic</p>",
        "id": 230889078,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616083092
    },
    {
        "content": "<p>so, this is talking about <em>how</em> the problem is solved, which is good, feels more (to me) like status quo stories</p>",
        "id": 230889132,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616083108
    },
    {
        "content": "<p>what is not in here that I'd be curious to know about is what <em>parts</em> of tokio (or other libraries) these different crates use</p>",
        "id": 230889178,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616083125
    },
    {
        "content": "<p>timers, spawning, creating sockets?</p>",
        "id": 230889207,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616083136
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243965\">@Sean McArthur</span> have you gathered any data like that?</p>",
        "id": 230889232,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616083144
    },
    {
        "content": "<p>(or <span class=\"user-mention\" data-user-id=\"119031\">@Esteban KÃ¼ber</span> ..?)</p>",
        "id": 230889355,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616083192
    },
    {
        "content": "<p>we had a thread on this before, didn't we...? :)</p>",
        "id": 230889446,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616083205
    },
    {
        "content": "<p><a class=\"stream-topic\" data-stream-id=\"187312\" href=\"/#narrow/stream/187312-wg-async-foundations/topic/portability.20and.20runtimes\">#wg-async-foundations &gt; portability and runtimes</a></p>",
        "id": 230889538,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616083216
    },
    {
        "content": "<p>Only whats in the bullet points. like hyper uses those 3 things. i think <code>quinn</code> does as well</p>",
        "id": 230889572,
        "sender_full_name": "Sean McArthur",
        "timestamp": 1616083219
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243965\">@Sean McArthur</span> can you explain this point:</p>\n<blockquote>\n<p>but otherwise, provides tcp/timer built-ins via a feature flag</p>\n</blockquote>",
        "id": 230890291,
        "sender_full_name": "rylev",
        "timestamp": 1616083329
    },
    {
        "content": "<blockquote>\n<p>defines traits in-crate for connecting, resolving, and spawning</p>\n</blockquote>\n<p>This is interesting and should be exposed in a story. Making runtime independent libraries is somewhat possible today but is far from the default, path of least resistance. It requires deliberate care from the library maintainer to make it possible.</p>",
        "id": 230890763,
        "sender_full_name": "rylev",
        "timestamp": 1616083413
    },
    {
        "content": "<p>There's a <code>tcp</code> feature flag in hyper to enable a connector that uses tokio's <code>TcpStream</code>, and <code>runtime</code> (name kinda sucks) with the purpose of defaulting the executor/spawner to tokio, and enabling a few timeout options</p>",
        "id": 230890775,
        "sender_full_name": "Sean McArthur",
        "timestamp": 1616083415
    },
    {
        "content": "<p>And if I want a <code>TcpStream</code> from another runtime, do I need to provide the plumbing?</p>",
        "id": 230891023,
        "sender_full_name": "rylev",
        "timestamp": 1616083462
    },
    {
        "content": "<p>yep</p>",
        "id": 230891064,
        "sender_full_name": "Sean McArthur",
        "timestamp": 1616083472
    },
    {
        "content": "<p>Quinn also uses timers and spawning, we create sockets with tokio but also have a custom implementation for Linux that's based on mio</p>",
        "id": 230892945,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1616083896
    },
    {
        "content": "<p>one important concern for this kind of project is zero-cost abstractions</p>",
        "id": 230893047,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1616083922
    },
    {
        "content": "<p>so ideally not much boxing (of futures), currently handwritten futures for lack of TAIT, etc</p>",
        "id": 230893172,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1616083946
    },
    {
        "content": "<p>but yeah, the sans-io + runtime layer is a really strong approach IMO</p>",
        "id": 230893301,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1616083978
    },
    {
        "content": "<p>I also have that with imap-proto + tokio-imap, where there exist several other client impls on top of my sans-io proto implementation (imap [sync] and async-imap [async-std])</p>",
        "id": 230893418,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1616084007
    },
    {
        "content": "<p>If a library is predominately data oriented this doesn't seem to be too hard of an issue to work through - though there still is the issue of <code>AsyncRead</code>/<code>AsyncWrite</code>. But the higher-level you go where the library isn't just dealing with bytes but also juggling multiple sockets, timers, etc. it doesn't seem very easy to write a runtime independent library.</p>",
        "id": 230893937,
        "sender_full_name": "rylev",
        "timestamp": 1616084162
    },
    {
        "content": "<p>so much juicy detail here :)</p>",
        "id": 230901731,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616087051
    },
    {
        "content": "<p>I'm going to open an issue for this</p>",
        "id": 230902000,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616087148
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/wg-async-foundations/issues/45\">https://github.com/rust-lang/wg-async-foundations/issues/45</a></p>",
        "id": 230902562,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616087348
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> do you feel like there's also a separate issue worth filing for \"a library that uses another library in a runtime agnostic way\"? I'm thinking of my 3-line function example I shared with you</p>",
        "id": 230905306,
        "sender_full_name": "simulacrum",
        "timestamp": 1616088340
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> probably, yes</p>",
        "id": 230910808,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616090331
    },
    {
        "content": "<p>can you repeat the example?</p>",
        "id": 230910825,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616090338
    },
    {
        "content": "<p><a href=\"https://docs.rs/rustc-artifacts/0.2.2/src/rustc_artifacts/lib.rs.html#24-27\">https://docs.rs/rustc-artifacts/0.2.2/src/rustc_artifacts/lib.rs.html#24-27</a></p>",
        "id": 230910930,
        "sender_full_name": "simulacrum",
        "timestamp": 1616090379
    }
]