[
    {
        "content": "<p>Hi all, I'm new here, so please apologies if this has already been discussed. I've been following the async vision process from the sideline - thank you so much for investing in this. I was curious to hear if you've been thinking about the future of AsyncWrite/AsyncRead (+it's siblings) and defining them in terms of \"regular\" async functions instead of what we have today which return <code>Poll</code>?</p>",
        "id": 232163260,
        "sender_full_name": "Ron Cohen",
        "timestamp": 1616933807
    },
    {
        "content": "<p>I know that async traits require a crate today so that's a complication</p>",
        "id": 232163326,
        "sender_full_name": "Ron Cohen",
        "timestamp": 1616933885
    },
    {
        "content": "<p>In my experience (maybe I missed something) any stateful wrapper around an AsyncRead/AsyncWrite must manage their state manually. An example is <a href=\"https://github.com/Nemo157/async-compression/blob/prÄ«mum/src/tokio_03/bufread/generic/decoder.rs#L61-L120\">async-compression</a>. It would be great if we were able to use all the generator magic that the compiler helps us with in regular <code>async</code> functions and simply write the wrapping read method as <code>async fn read(..) -&gt; Result&lt;..&gt;</code></p>",
        "id": 232163453,
        "sender_full_name": "Ron Cohen",
        "timestamp": 1616934061
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"386909\">@Ron Cohen</span> That's a great question! I have an unpblished post that attempts to cover this. My current thinking is that if we could implement <code>impl IntoStream for AsyncBufRead</code> (or similar), it would make it easy real easy to then create custom transforms using generator functions.</p>",
        "id": 232170227,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1616941608
    },
    {
        "content": "<p>Unfortunately I don't think it's likely we'll see easier ways to define <code>AsyncRead</code> / <code>AsyncWrite</code> <em>directly</em>. But I think we can work around that by making it easier to create pipelines that work with existing <code>AsyncRead</code> / <code>AsyncWrite</code> impls. That would make implementing your own <code>AsyncRead</code> / <code>AsyncWrite</code> a rare thing to do, and make the majority use case much simpler.</p>",
        "id": 232170248,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1616941640
    },
    {
        "content": "<p>(Somewhat analogous to how on Node.js almost all userland stream impls used to rely on <code>through2</code>, with only a minority of streams actually being implemented in terms of the prototype interfaces)</p>",
        "id": 232170429,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1616941891
    },
    {
        "content": "<p>Right. Wrapping streams is definitely easier</p>",
        "id": 232170439,
        "sender_full_name": "Ron Cohen",
        "timestamp": 1616941906
    },
    {
        "content": "<p>Not sure if there's a user story for this already though -- <em>\"Writing your own AsyncRead/AsyncWrite today is an involved process\"</em> would def be a good one to track. Maybe someone who's been more active recently can answer whether it's being tracked.</p>",
        "id": 232170649,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1616942092
    },
    {
        "content": "<p>here's an example I wrote up: <a href=\"https://gist.github.com/roncohen/a81d28b3db17766491dfd78864d549c8\">https://gist.github.com/roncohen/a81d28b3db17766491dfd78864d549c8</a><br>\nin this example the state tracked is very simple, but it can quickly become unwieldy in my experience</p>",
        "id": 232170763,
        "sender_full_name": "Ron Cohen",
        "timestamp": 1616942235
    },
    {
        "content": "<p>happy to contribute a user story like that if it doesn't already exist</p>",
        "id": 232170958,
        "sender_full_name": "Ron Cohen",
        "timestamp": 1616942431
    },
    {
        "content": "<p>If all the code is under your control and you don't to interact with tokio/futures/etc traits, just define your own IO traits on top of <code>async_trait</code>. That makes things certainly a lot easier to use and compose. The drawback is the additional memory allocation per async operation, but maybe it's not an issue for you</p>",
        "id": 232191362,
        "sender_full_name": "Matthias247",
        "timestamp": 1616963674
    },
    {
        "content": "<p>Building all the traits on top of <code>async fn</code>s instead of having more low level combinators was a very very old proposal at <a href=\"https://github.com/rust-lang/futures-rs/issues/1365\">https://github.com/rust-lang/futures-rs/issues/1365</a>, but didn't see alot of traction due to concerns with boxing, missing GATs and the potential for losing <code>dyn Trait</code> (there is no solution which currently avoids all of the issues at once).</p>",
        "id": 232191505,
        "sender_full_name": "Matthias247",
        "timestamp": 1616963807
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211722\">@Yoshua Wuyts</span> I don't think node is a good precedent here. The whole stream definition and combinator story was done before async/await arrived there. I'm pretty sure that if node had been written after async/await in JS was standarized streams would just be defined as interfaces containing an <code>async fn</code>.  I think the newer <code>ReadableStream/WriteableStream</code> specifications already go in that direction.</p>",
        "id": 232191710,
        "sender_full_name": "Matthias247",
        "timestamp": 1616964036
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"386909\">@Ron Cohen</span> the <a href=\"https://fasterthanli.me/articles/pin-and-suffering\">recent \"pin and suffering\" blog post</a> by fasterthanlime actually covered many details here. I would love to see some status quo stories on this topic, for sure -- I was thiking of trying to turn that post into one, if needed</p>",
        "id": 232196362,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616968865
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/complications.20in.20wrapping.20AsyncRead.2FAsyncWrite/near/232196362\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"386909\">Ron Cohen</span> the <a href=\"https://fasterthanli.me/articles/pin-and-suffering\">recent \"pin and suffering\" blog post</a> by fasterthanlime actually covered many details here. I would love to see some status quo stories on this topic, for sure -- I was thiking of trying to turn that post into one, if needed</p>\n</blockquote>\n<p><a href=\"#narrow/stream/187312-wg-async-foundations/topic/article.3A.20pin.20and.20suffering/near/232164903\">https://rust-lang.zulipchat.com/#narrow/stream/187312-wg-async-foundations/topic/article.3A.20pin.20and.20suffering/near/232164903</a></p>",
        "id": 232197193,
        "sender_full_name": "Doc Jones",
        "timestamp": 1616969794
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 232207123,
        "sender_full_name": "Doc Jones",
        "timestamp": 1616981237
    },
    {
        "content": "<p>thanks for the links <span class=\"user-mention\" data-user-id=\"204219\">@Matthias247</span> and <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>. Between them they illustrate the issue quite well. Let me know if I can help write up the status quo story.</p>",
        "id": 232224761,
        "sender_full_name": "Ron Cohen",
        "timestamp": 1617000216
    }
]