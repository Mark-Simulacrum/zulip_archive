[
    {
        "content": "<p>I read the vision post at <a href=\"https://blog.rust-lang.org/inside-rust/2022/02/03/async-in-2022.html\">https://blog.rust-lang.org/inside-rust/2022/02/03/async-in-2022.html</a> , and I wanted to bring up a syntax question we've discussed a few times in the lang team.</p>",
        "id": 270787645,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1644017893
    },
    {
        "content": "<p>Rather than having a special-case syntax for <code>for await?</code> that people need to interpret, I'd love to extend pattern syntax in a composable way.</p>",
        "id": 270787666,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1644017919
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">issue</span><span class=\"p\">.</span><span class=\"k\">await</span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">crabbycat</span>::<span class=\"n\">issues</span><span class=\"p\">(</span><span class=\"s\">\"https://github.com/rust-lang/rust\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 270787704,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1644017949
    },
    {
        "content": "<p>Initially, we could define <code>?</code> and <code>.await</code> patterns, and those could compose.</p>",
        "id": 270787723,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1644017972
    },
    {
        "content": "<p>So <code>for issue? in ...</code> would work in sync code, and <code>for issue?.await?</code> would work for the unusual case of something that can both fail to generate a future <em>and</em> fail in the future.</p>",
        "id": 270787801,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1644018006
    },
    {
        "content": "<p>That feels more orthogonal and compositional.</p>",
        "id": 270787869,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1644018058
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/187312-wg-async/topic/async.20vision.20and.20async.20for.20loops/near/270787704\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">issue</span><span class=\"p\">.</span><span class=\"k\">await</span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">crabbycat</span>::<span class=\"n\">issues</span><span class=\"p\">(</span><span class=\"s\">\"https://github.com/rust-lang/rust\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>is this equivalent to </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">issue</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">crabbycat</span>::<span class=\"n\">issues</span><span class=\"p\">(</span><span class=\"s\">\"https://github.com/rust-lang/rust\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">issue</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">issue</span><span class=\"p\">.</span><span class=\"k\">await</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 270787882,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1644018066
    },
    {
        "content": "<p>Yes, exactly.</p>",
        "id": 270787885,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1644018072
    },
    {
        "content": "<p>(Open question: we <em>could</em> allow that pattern syntax elsewhere, and make <code>match x { Variant(y.await?) =&gt; println!(\"{y}\"), ... </code> work, but I'm not sure if we should or not. I like the orthogonality, but I also don't want to gate doing this for for loops on allowing it <em>everywhere</em>.)</p>",
        "id": 270788011,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1644018148
    },
    {
        "content": "<p>(I think it's less <em>useful</em> in most places other than a loop.)</p>",
        "id": 270788032,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1644018167
    },
    {
        "content": "<p>Are there differences in what patterns are allowed in different contexts currently?</p>",
        "id": 270788539,
        "sender_full_name": "eholk",
        "timestamp": 1644018562
    },
    {
        "content": "<p>It seems like saying \"these are loop patterns,\" \"these are match patterns,\" and \"these are let patterns\" would undo some of the advantages of orthogonality and composability that you get by making await patterns.</p>",
        "id": 270788636,
        "sender_full_name": "eholk",
        "timestamp": 1644018620
    },
    {
        "content": "<p>I agree, and that's my motivation for just allowing them everywhere.</p>",
        "id": 270788676,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1644018647
    },
    {
        "content": "<p>I don't actually know if there are any patterns that we allow in some places and not others.</p>",
        "id": 270788707,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1644018670
    },
    {
        "content": "<p>Does this also mean that we'd be able to write both</p>\n<div class=\"codehilite\"><pre><span></span><code>let x.await? = foo();\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\"><pre><span></span><code>let x = foo().await?;\n</code></pre></div>\n<p>?</p>",
        "id": 270788742,
        "sender_full_name": "eholk",
        "timestamp": 1644018695
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> I agree with it being a more general thing other than in <code>for</code> loops, and I agree with it being composable: this is exactly what patterns are about. I strongly disagree, however, with it using expression syntax rather than the classic dual of pattern syntax:</p>\n<ul>\n<li>\n<p>we write <code>let [a, b] = arr;</code> not <code>let (a[0], b[1]) = arr</code>,</p>\n</li>\n<li>\n<p>we write <code>for &amp;x in &amp;slice_of_copy_types</code>, not <code>for *x in &amp;slice_of_copy_types</code>;</p>\n</li>\n<li>\n<p>thus, we should write <code>for await x in iterator_of_futures</code></p>\n</li>\n<li>\n<p>and <code>for ?x in iterator_of_tryables</code></p>\n</li>\n</ul>",
        "id": 270788749,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1644018702
    },
    {
        "content": "<p>(technically it should even have been <code>for async { x }</code> and <code>for try { x }</code>, but I'll grant that that doesn't read very naturally)</p>",
        "id": 270788869,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1644018770
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"421986\">@eholk</span> Yeah, it would.</p>",
        "id": 270788890,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1644018791
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232018\">@Daniel Henry-Mantilla</span> I actually think <code>for async</code> or <code>async for</code> reads <em>better</em> than await.</p>",
        "id": 270788915,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1644018829
    },
    {
        "content": "<p><code>try async for x in ...</code></p>",
        "id": 270788968,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1644018844
    },
    {
        "content": "<p>Oh, interesting</p>",
        "id": 270788977,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1644018854
    },
    {
        "content": "<p>But I expect it'd be confusing when composed.</p>",
        "id": 270788980,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1644018856
    },
    {
        "content": "<p>But it would have to go after the <code>for</code>, still, if it is to be a pattern</p>",
        "id": 270788998,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1644018870
    },
    {
        "content": "<p>I think I like <code>try async</code> better after the <code>for</code></p>",
        "id": 270789016,
        "sender_full_name": "eholk",
        "timestamp": 1644018886
    },
    {
        "content": "<p><code>for try async x in ...</code></p>",
        "id": 270789025,
        "sender_full_name": "eholk",
        "timestamp": 1644018897
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232018\">Daniel Henry-Mantilla</span> <a href=\"#narrow/stream/187312-wg-async/topic/async.20vision.20and.20async.20for.20loops/near/270788998\">said</a>:</p>\n<blockquote>\n<p>But it would have to go after the <code>for</code>, still, if it is to be a pattern</p>\n</blockquote>\n<p>I had been thinking about the proposed special cases of <code>try for</code> and <code>async for</code>, but you're right, this <em>could</em> be a pattern and use those syntaxes.</p>",
        "id": 270789039,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1644018910
    },
    {
        "content": "<p>I'm not sure if they'd be confusing or not.</p>",
        "id": 270789047,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1644018917
    },
    {
        "content": "<p>So, in LHS patterns, it would be a prefix, and in RHS a suffix? I like the symmetry</p>",
        "id": 270789075,
        "sender_full_name": "Khionu Sybiern",
        "timestamp": 1644018947
    },
    {
        "content": "<p>Patterns are known to be a bit confusing at first, since they go \"backwards\". But that ship has sailed, I suspect it would be more jarring to change direction now</p>",
        "id": 270789084,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1644018955
    },
    {
        "content": "<p>Priority 1 for me: I'd like a non-special-case syntax that composes, as part of patterns. For instance, if <code>for issue.await? in</code> works, <code>for SomeNewtype(issue.await?) in</code> should work.</p>",
        "id": 270789152,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1644018980
    },
    {
        "content": "<p>Priority 2: making the syntax as understandable as possible.</p>",
        "id": 270789164,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1644018991
    },
    {
        "content": "<p>Ok, posting it for myself mainly, to read it and see if I get used to it:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"kr\">try</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 270789171,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1644018999
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232018\">Daniel Henry-Mantilla</span> <a href=\"#narrow/stream/187312-wg-async/topic/async.20vision.20and.20async.20for.20loops/near/270789084\">said</a>:</p>\n<blockquote>\n<p>Patterns are known to be a bit confusing at first, since they go \"backwards\". But that ship has sailed, I suspect it would be more jarring to change direction now</p>\n</blockquote>\n<p>I'm not <em>actually</em> convinced that ship has fully sailed, or that we couldn't fix it.</p>",
        "id": 270789184,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1644019011
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">for</span><span class=\"w\">  </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"kr\">try</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</code></pre></div>\n<p>This reads to me as more \"handle as Future, then handle as Result\"</p>",
        "id": 270789245,
        "sender_full_name": "Khionu Sybiern",
        "timestamp": 1644019065
    },
    {
        "content": "<p>Wait, is <code>try</code> even legal there yet?</p>",
        "id": 270789317,
        "sender_full_name": "Khionu Sybiern",
        "timestamp": 1644019092
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252217\">@Khionu Sybiern</span> I'm genuinely confused about <em>which</em> way around to interpret <code>for async try</code>.</p>",
        "id": 270789322,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1644019098
    },
    {
        "content": "<p>(It isn't, neither is async.)</p>",
        "id": 270789330,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1644019102
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232018\">Daniel Henry-Mantilla</span> <a href=\"#narrow/stream/187312-wg-async/topic/async.20vision.20and.20async.20for.20loops/near/270789171\">said</a>:</p>\n<blockquote>\n<p>Ok, posting it for myself mainly, to read it and see if I get used to it:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"kr\">try</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>To me that reads as being equivalent to:</p>\n<div class=\"codehilite\"><pre><span></span><code>for x in ... {\n    let x = foo?.await;\n   ...\n}\n</code></pre></div>",
        "id": 270789334,
        "sender_full_name": "eholk",
        "timestamp": 1644019110
    },
    {
        "content": "<p>Let's ignore for the moment what precedents we have elsewhere about patterns.</p>",
        "id": 270789360,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1644019131
    },
    {
        "content": "<p>Suppose we wrote <code>for x.await? in foo { ... }</code>.</p>",
        "id": 270789371,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1644019144
    },
    {
        "content": "<p>It's <em>really obvious</em> what order that happens in.</p>",
        "id": 270789381,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1644019150
    },
    {
        "content": "<p>If we're going to use some other syntax for it, it should be <em>just as obvious</em> what order it happens in.</p>",
        "id": 270789390,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1644019163
    },
    {
        "content": "<p>I'm not arguing we can't use a different syntax, just that it should be obvious.</p>",
        "id": 270789419,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1644019188
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232018\">@Daniel Henry-Mantilla</span>'s suggestion to use braces makes the ordering clear, although I worry that the braces might be a little heavy syntactically.</p>",
        "id": 270789587,
        "sender_full_name": "eholk",
        "timestamp": 1644019245
    },
    {
        "content": "<p>But it works nicely with let bindings:</p>\n<div class=\"codehilite\"><pre><span></span><code>let try { async { x } } = try { async { foo() } };\n</code></pre></div>",
        "id": 270789639,
        "sender_full_name": "eholk",
        "timestamp": 1644019280
    },
    {
        "content": "<p>Oh yeah sorry I wrote an iterator of fallible futures <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 270789658,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1644019292
    },
    {
        "content": "<p>Yeah, this is where my concern came from</p>",
        "id": 270789670,
        "sender_full_name": "Khionu Sybiern",
        "timestamp": 1644019304
    },
    {
        "content": "<p>I tunnel-visioned on <code>for async</code></p>",
        "id": 270789676,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1644019314
    },
    {
        "content": "<p>We have braces for record patterns already though, so maybe the braces aren't too heavy?</p>",
        "id": 270789722,
        "sender_full_name": "eholk",
        "timestamp": 1644019325
    },
    {
        "content": "<p><code>try { async { ... } } </code>vs <code>async { try { ... } }</code></p>",
        "id": 270789723,
        "sender_full_name": "Khionu Sybiern",
        "timestamp": 1644019325
    }
]