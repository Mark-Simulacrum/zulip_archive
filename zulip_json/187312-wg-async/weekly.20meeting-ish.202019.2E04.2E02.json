[
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1172\">@WG-async-await</span> o/</p>",
        "id": 162353504,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1554224428
    },
    {
        "content": "<p>Status updates:<br>\n- <a href=\"https://github.com/rust-lang/rust/pull/59286\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/59286\">https://github.com/rust-lang/rust/pull/59286</a> has landed, fixes all known <code>async fn</code> lifetime bugs, but multiple lifetimes are still unsupported</p>",
        "id": 162353629,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1554224502
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> I saw you closed <a href=\"https://github.com/rust-lang/rust/pull/59135\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/59135\">https://github.com/rust-lang/rust/pull/59135</a></p>",
        "id": 162353722,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1554224553
    },
    {
        "content": "<p>I've nominated <a href=\"https://github.com/rust-lang/rust/issues/54716\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54716\">https://github.com/rust-lang/rust/issues/54716</a> for discussion in the next lang mtg so we can figure out what we want.</p>",
        "id": 162353823,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1554224637
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> is <a href=\"#narrow/stream/187312-t-compiler.2Fwg-async-await/topic/.2354716.20drop.20order/near/160792119\" title=\"#narrow/stream/187312-t-compiler.2Fwg-async-await/topic/.2354716.20drop.20order/near/160792119\">https://rust-lang.zulipchat.com/#narrow/stream/187312-t-compiler.2Fwg-async-await/topic/.2354716.20drop.20order/near/160792119</a> still the most up-to-date summary?</p>",
        "id": 162353905,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1554224671
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116107\">davidtwco</span> I saw you closed <a href=\"https://github.com/rust-lang/rust/pull/59135\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/59135\">https://github.com/rust-lang/rust/pull/59135</a></p>\n</blockquote>\n<p>I wasn't able to resolve the type inference issues that the PR had, and wasn't super happy with the approach it took - particularly the way it mangled the HIR into shape.</p>\n<blockquote>\n<p>I've nominated <a href=\"https://github.com/rust-lang/rust/issues/54716\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54716\">https://github.com/rust-lang/rust/issues/54716</a> for discussion in the next lang mtg so we can figure out what we want.</p>\n</blockquote>\n<p>Sounds good. </p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116107\">davidtwco</span> is <a href=\"#narrow/stream/187312-t-compiler.2Fwg-async-await/topic/.2354716.20drop.20order/near/160792119\" title=\"#narrow/stream/187312-t-compiler.2Fwg-async-await/topic/.2354716.20drop.20order/near/160792119\">https://rust-lang.zulipchat.com/#narrow/stream/187312-t-compiler.2Fwg-async-await/topic/.2354716.20drop.20order/near/160792119</a> still the most up-to-date summary?</p>\n</blockquote>\n<p>Yes.</p>",
        "id": 162353924,
        "sender_full_name": "davidtwco",
        "timestamp": 1554224683
    },
    {
        "content": "<p>One thing I was thinking about that sort of bothered me was how quickly we decided to accept that the current behavior wasn't the one we wanted-- namely, the current behavior actually has some advantages in terms of how unused variables aren't captured as part of the upvars of the generator, which helps with size, and dropping them early could potentially be a performance help.</p>",
        "id": 162354110,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1554224804
    },
    {
        "content": "<p>Behaviour-wise, I think the PR achieved the desired effect (<a href=\"#narrow/stream/187312-t-compiler.2Fwg-async-await/topic/.2354716.20drop.20order/near/161168300\" title=\"#narrow/stream/187312-t-compiler.2Fwg-async-await/topic/.2354716.20drop.20order/near/161168300\">not quite the exact same ordering though</a>). The only issues I had were with the implementation.</p>",
        "id": 162354120,
        "sender_full_name": "davidtwco",
        "timestamp": 1554224819
    },
    {
        "content": "<p>yeah, it's definitely closer to what we discussed. I'm just having thoughts :)</p>",
        "id": 162354187,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1554224864
    },
    {
        "content": "<p>There are certainly benefits to the way it works just now.</p>",
        "id": 162354251,
        "sender_full_name": "davidtwco",
        "timestamp": 1554224886
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> has been making more progress on <a href=\"https://github.com/rust-lang/rust/issues/52924\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/52924\">https://github.com/rust-lang/rust/issues/52924</a></p>",
        "id": 162354271,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1554224910
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/59514\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/59514\">https://github.com/rust-lang/rust/pull/59514</a> is part of that work</p>",
        "id": 162354312,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1554224945
    },
    {
        "content": "<p>Though, the arguments you've put forward there are mostly relating to performance rather than the user's expectations. We can put patches in place to improve the performance but if the behaviour isn't what the user expects, we can't patch that later.</p>",
        "id": 162354329,
        "sender_full_name": "davidtwco",
        "timestamp": 1554224963
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> looks like it's good to go w/ one final comment</p>",
        "id": 162354335,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1554224967
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> yup, but we also can't introduce optimizations that break observable behavior</p>",
        "id": 162354351,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1554224993
    },
    {
        "content": "<p>I don't have an opinion either way.</p>",
        "id": 162354416,
        "sender_full_name": "davidtwco",
        "timestamp": 1554225012
    },
    {
        "content": "<p>so the only way to get those performance improvements would be through specifying the observable behavior to be something other than the naiive expectation</p>",
        "id": 162354425,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1554225017
    },
    {
        "content": "<p>Yeah, I think it's a good topic to discuss in the t-lang mtg</p>",
        "id": 162354440,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1554225029
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> and I were supposed to figure out what to do about region inference for existential types, but I wasn't successful in sorting this out before I went on PTO last week, and he's out this week. This blocks multiple lifetimes in <code>async fn</code>.</p>",
        "id": 162354651,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1554225189
    },
    {
        "content": "<p>Aside from those (drop order, generator size, multiple lifetimes), I believe the remaining blockers are all tightly related to native syntax</p>",
        "id": 162354773,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1554225265
    },
    {
        "content": "<p>which is a t-lang bit to resolve.</p>",
        "id": 162354783,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1554225275
    },
    {
        "content": "<p>I think, unless <span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> has anything to discuss, that's all we have at the moment.</p>",
        "id": 162354872,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1554225349
    },
    {
        "content": "<p>One bit I'd like to adjust is the order btw <code>async</code> and <code>unsafe</code></p>",
        "id": 162354936,
        "sender_full_name": "centril",
        "timestamp": 1554225370
    },
    {
        "content": "<p>currently <code>unsafe</code> comes first</p>",
        "id": 162354948,
        "sender_full_name": "centril",
        "timestamp": 1554225379
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> sure-- can you open an issue and nominate it for t-lang?</p>",
        "id": 162354955,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1554225385
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 162354959,
        "sender_full_name": "centril",
        "timestamp": 1554225389
    },
    {
        "content": "<p>(my expectation would be unsafe first as well, but I don't care deeply-- honestly I think it's a bit confusing that we have so many modifiers and they all have to be in a specific order in order for the parser not to tell you garbage)</p>",
        "id": 162355013,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1554225439
    },
    {
        "content": "<p>Nothing to discuss, really. I think we're going to end up doing <a href=\"https://github.com/rust-lang/rust/issues/52924\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/52924\">#52924</a> the \"right\" way from the start in terms of layout and debuginfo, though maybe not with all enum optimizations enabled from day one</p>",
        "id": 162355032,
        "sender_full_name": "tmandry",
        "timestamp": 1554225455
    },
    {
        "content": "<p>I guess the \"parser tells you garbage\" is more of a diagnostics bug than a design issue, though</p>",
        "id": 162355037,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1554225457
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> can you say what you mena about the \"right\" way? you mean without the \"only if the places are only valid for one <code>yield</code> point\" trick?</p>",
        "id": 162355140,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1554225506
    },
    {
        "content": "<p>No, it'll still just have that optimization</p>",
        "id": 162355163,
        "sender_full_name": "tmandry",
        "timestamp": 1554225523
    },
    {
        "content": "<p>I mean more in terms of how generators integrate with the rest of the compiler backend, and what kinds of optimizations we can enable</p>",
        "id": 162355202,
        "sender_full_name": "tmandry",
        "timestamp": 1554225551
    },
    {
        "content": "<p>I think the expectation is \"it can act just like an enum\" with all the optimizations that come with that, and we're doing the refactoring work to let us meet those expectations, eventually</p>",
        "id": 162355249,
        "sender_full_name": "tmandry",
        "timestamp": 1554225595
    },
    {
        "content": "<p>The code and layout that comes out should look exactly as if you hand-rolled an enum</p>",
        "id": 162355367,
        "sender_full_name": "tmandry",
        "timestamp": 1554225663
    },
    {
        "content": "<p>But this required some refactoring, e.g. next up is changing the field number of the discriminant, and removing the assumption that multi-variant layouts only have one field (for the discriminant) on their outer layout</p>",
        "id": 162355414,
        "sender_full_name": "tmandry",
        "timestamp": 1554225693
    },
    {
        "content": "<p>So we can have an \"enum\" (multi-variant layout) with fields that are always-valid, regardless of the value of the discriminant</p>",
        "id": 162355426,
        "sender_full_name": "tmandry",
        "timestamp": 1554225713
    },
    {
        "content": "<p>This should allow us to do all the UB checking that <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> was talking about too (<a href=\"#narrow/stream/187312-t-compiler.2Fwg-async-await/topic/shrinking.20generators.20.2352924/near/160079659\" title=\"#narrow/stream/187312-t-compiler.2Fwg-async-await/topic/shrinking.20generators.20.2352924/near/160079659\">link</a>)</p>",
        "id": 162355500,
        "sender_full_name": "tmandry",
        "timestamp": 1554225745
    },
    {
        "content": "<p>Rather than just treating generators as blobs of bytes</p>",
        "id": 162355510,
        "sender_full_name": "tmandry",
        "timestamp": 1554225759
    },
    {
        "content": "<p>Does that make sense?</p>",
        "id": 162355573,
        "sender_full_name": "tmandry",
        "timestamp": 1554225817
    },
    {
        "content": "<p>Yeah! that sounds much better than what I'd been imagining :)</p>",
        "id": 162355860,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1554226080
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> does this also mean that we wouldn't have the single i32 (or whatever it was) tag field anymore, but do niche-filling for the tag as well?</p>",
        "id": 162355981,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1554226163
    },
    {
        "content": "<p>I think that should be pretty straightforward to enable</p>",
        "id": 162356007,
        "sender_full_name": "tmandry",
        "timestamp": 1554226191
    },
    {
        "content": "<p>But not making any promises ;)</p>",
        "id": 162356018,
        "sender_full_name": "tmandry",
        "timestamp": 1554226198
    },
    {
        "content": "<p>Cool, good to know.</p>",
        "id": 162356100,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1554226216
    }
]