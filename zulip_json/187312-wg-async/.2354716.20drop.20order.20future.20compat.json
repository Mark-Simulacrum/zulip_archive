[
    {
        "content": "<blockquote>\n<p>That's where we introduce the statement into the HIR, but I construct it in the parser because I need to use it in name resolution and a few other places.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  so could you leave a \"fake pattern\" in place in HIR to run type inference on that pattern later?</p>",
        "id": 163659947,
        "sender_full_name": "centril",
        "timestamp": 1555599949
    },
    {
        "content": "<p>(including when APIT, <code>arg: impl Trait</code> is involved)</p>",
        "id": 163660017,
        "sender_full_name": "centril",
        "timestamp": 1555599968
    },
    {
        "content": "<p>Otherwise it seems to me that we cannot have <code>async fn foo(Bar(x: usize)) { ... }</code> and determine the type of the first formal parameter</p>",
        "id": 163660079,
        "sender_full_name": "centril",
        "timestamp": 1555600018
    },
    {
        "content": "<p>since type inference, as far as I know, is done after lowering</p>",
        "id": 163660100,
        "sender_full_name": "centril",
        "timestamp": 1555600029
    },
    {
        "content": "<p>So you need to have something <code>async fn foo(Bar(x: usize)) { ... }</code> where <code>Bar(x: usize)</code> is marked as a \"fake pattern\" so that you can run type inference on <code>Bar(x: usize)</code> then</p>",
        "id": 163660350,
        "sender_full_name": "centril",
        "timestamp": 1555600204
    },
    {
        "content": "<p>on the other hand, since it is done later, it also makes the <code>async fn foo(Bar(x: usize)) { ... }</code> problem go away since type inference has already been done at that point</p>",
        "id": 163660851,
        "sender_full_name": "centril",
        "timestamp": 1555600543
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> yea, my question is mostly directed at <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>, who is afaik very familiar with inference, no worries <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 163660983,
        "sender_full_name": "centril",
        "timestamp": 1555600596
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> A thought... can you \"gather\" the bindings into a tuple and then \"scatter\" them inside the <code>async { ... }</code> block? e.g.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"cp\">$pat</span>: <span class=\"cp\">$type</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">async</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"cp\">$scatter_bindings_of</span><span class=\"p\">(</span><span class=\"cp\">$pat</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"cp\">$gather_bindings_of</span><span class=\"p\">(</span><span class=\"cp\">$pat</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 163661419,
        "sender_full_name": "centril",
        "timestamp": 1555600891
    },
    {
        "content": "<p>if you can do this then <code>$pat: $type</code> remains in place and so it should also work with inference for <code>async fn foo($pat)</code> without <code>$type</code>.</p>",
        "id": 163661590,
        "sender_full_name": "centril",
        "timestamp": 1555601003
    },
    {
        "content": "<blockquote>\n<p>if you can do this then <code>$pat: $type</code> remains in place and so it should also work with inference for <code>async fn foo($pat)</code> without <code>$type</code>.</p>\n</blockquote>\n<p>I might be misunderstanding what you are suggesting, but I don't think that would resolve the type inference error that the current implementation hits. It isn't a genuine \"there isn't enough information available to work it out\", I'm pretty sure it's a bug due to my desugaring changes.</p>",
        "id": 163662005,
        "sender_full_name": "davidtwco",
        "timestamp": 1555601286
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> I'm not discussing your inference problems</p>",
        "id": 163662031,
        "sender_full_name": "centril",
        "timestamp": 1555601307
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116107\">davidtwco</span> I'm not discussing your inference problems</p>\n</blockquote>\n<p>I definitely did misunderstand then.</p>",
        "id": 163662054,
        "sender_full_name": "davidtwco",
        "timestamp": 1555601328
    },
    {
        "content": "<p>I'm discussing forward compatibility with not having <code>$type</code> directly available in the function signature such that you must infer it from <code>$pat</code> (not global type inference, all info is still available from <code>$pat</code> and the type parameters -- you don't need to look at the body..)</p>",
        "id": 163662078,
        "sender_full_name": "centril",
        "timestamp": 1555601350
    },
    {
        "content": "<blockquote>\n<p>I'm discussing forward compatibility with not having <code>$type</code> directly available in the function signature such that you must infer it from <code>$pat</code></p>\n</blockquote>\n<p>I see. I'm just focusing on getting the current implementation working where types are provided in signatures for now.</p>",
        "id": 163662225,
        "sender_full_name": "davidtwco",
        "timestamp": 1555601438
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span>  right; I just want to be sure that whatever you are doing doesn't make it impossible to omit <code>$type</code> in the future <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 163662453,
        "sender_full_name": "centril",
        "timestamp": 1555601613
    },
    {
        "content": "<p>Is there an accepted RFC for that? I don't keep up with what RFCs there are to be implemented.</p>",
        "id": 163663005,
        "sender_full_name": "davidtwco",
        "timestamp": 1555602023
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> no; it was part of the type ascription rfc but was later removed</p>",
        "id": 163663147,
        "sender_full_name": "centril",
        "timestamp": 1555602126
    },
    {
        "content": "<p>I'm going to move some of these messages to another topic so I can keep the discussion in this one focused on the current implementation and put future compat discussion in another topic.</p>",
        "id": 163663212,
        "sender_full_name": "davidtwco",
        "timestamp": 1555602192
    },
    {
        "content": "<p>Conclusion from a chat with Niko is that this seems surmountable in various ways</p>",
        "id": 163686330,
        "sender_full_name": "centril",
        "timestamp": 1555618149
    }
]