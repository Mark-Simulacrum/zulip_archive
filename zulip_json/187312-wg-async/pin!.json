[
    {
        "content": "<p>Has there been any discussion of moving the <code>pin!</code> macro from pin-utils/futures/tokio to <code>std</code>? Macros are insta-stable, so can I open a PR or would an RFC be required first?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// core/src/pin.rs</span>\n\n<span class=\"cp\">#[macro_export]</span><span class=\"w\"></span>\n<span class=\"fm\">macro_rules!</span><span class=\"w\"> </span><span class=\"n\">pin</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"cp\">$($x</span>:<span class=\"nc\">ident</span><span class=\"p\">),</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"cp\">$(,</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cp\">$(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"cp\">$x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"cp\">$x</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"cp\">#[allow(unused_mut)]</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"cp\">$x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">core</span>::<span class=\"n\">pin</span>::<span class=\"n\">Pin</span>::<span class=\"n\">new_unchecked</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"cp\">$x</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 251918148,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1630691327
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"363998\">@Ibraheem Ahmed</span> There's been discussion, but there's also been a lot of discussion about making Pin less visible and less necessary to interact with, and I think we wouldn't want to introduce helpers for something that we end up de-emphasizing.</p>",
        "id": 251933732,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630698885
    },
    {
        "content": "<p>Pin is still useful outside the async world, e.g. in cxx, and that's unlikely to change. I don't see why such a basic utility _wouldn't_ be in std.</p>",
        "id": 251939694,
        "sender_full_name": "Kestrer",
        "timestamp": 1630701952
    },
    {
        "content": "<p>I think it'd be reasonable to include the macro</p>",
        "id": 253112027,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1631547892
    },
    {
        "content": "<p>though I think there's also room to bikeshed how it works</p>",
        "id": 253112066,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1631547904
    },
    {
        "content": "<p>e.g. I think I might prefer to do</p>",
        "id": 253112090,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1631547911
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[pin]</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 253112110,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1631547916
    },
    {
        "content": "<p>Heh, that almost starts looking like pin-project</p>",
        "id": 253112182,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1631547946
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/.60pin!.60/near/253112110\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[pin]</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.;</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>this is dank, it makes it look more official than <code>pin!</code>, and its easier to read the code like you'd read non-async rust code</p>",
        "id": 253114362,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1631548765
    },
    {
        "content": "<p>is \"dank\" a good thing :)</p>",
        "id": 253609866,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1631809825
    },
    {
        "content": "<p>i think it is when its a meme</p>",
        "id": 253610001,
        "sender_full_name": "pnkfelix",
        "timestamp": 1631809872
    },
    {
        "content": "<p>oh sorry, yeah i forget that I use that word A LOT because california has rooted itself deep in my brain, for me, it always means \"extremely good\"</p>",
        "id": 253610080,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1631809905
    },
    {
        "content": "<p>/me realizes he's been misinterpreting things on the internet for a while now...</p>",
        "id": 253614773,
        "sender_full_name": "eholk",
        "timestamp": 1631811722
    },
    {
        "content": "<p>what do folks think about <code>#[pin]</code>--- maybe we should prototype that on <a href=\"http://crates.io\">crates.io</a>?</p>",
        "id": 254072290,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632153138
    },
    {
        "content": "<p>I kind of like it. I think seeing a prototype would be good.</p>",
        "id": 254073604,
        "sender_full_name": "eholk",
        "timestamp": 1632153642
    },
    {
        "content": "<p>I think it would be fine to just try it one project which currently uses <code>pin!</code>. If it works then it will work too. Syntax-wise all options are fine to me, and having it in <code>core</code> makes sense</p>",
        "id": 254103074,
        "sender_full_name": "Matthias247",
        "timestamp": 1632165454
    },
    {
        "content": "<p>I can write up the macro and open a PR to pin-utils.</p>",
        "id": 254106065,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1632166846
    },
    {
        "content": "<p>I personally really like the proc-macro syntax.</p>",
        "id": 254106094,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1632166860
    },
    {
        "content": "<blockquote>\n<p>Because assigning to a variable followed by pinning is common, there is also a variant of the macro that supports doing both in one go.</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">tokio</span>::<span class=\"p\">{</span><span class=\"n\">pin</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">select</span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">my_async_fn</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// async logic here</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[tokio::main]</span><span class=\"w\"></span>\n<span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">pin</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">future1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">my_async_fn</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">future2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">my_async_fn</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">select</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">future1</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">future2</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 254106571,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1632167070
    },
    {
        "content": "<p>Tokio already provides a similar decl macro.</p>",
        "id": 254106610,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1632167090
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"363998\">@Ibraheem Ahmed</span> - that last code snippet looks weird to me. <code>pin! { }</code> looks like it's making a new scope, so in just skimming it, it's surprising that <code>future1</code> and <code>future2</code> would still be in scope by the <code>select!</code> block.</p>",
        "id": 254291730,
        "sender_full_name": "eholk",
        "timestamp": 1632265758
    },
    {
        "content": "<p>Yeah, which is why the proc macro attribute is better :)</p>",
        "id": 254293172,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1632266805
    },
    {
        "content": "<p>There is another approach on stack-pinning using proc-macro:  <a href=\"https://github.com/Nemo157/ergo-pin-rs\">https://github.com/Nemo157/ergo-pin-rs</a><br>\nRelated discussion in pin-project: <a href=\"https://github.com/taiki-e/pin-project/issues/58\">https://github.com/taiki-e/pin-project/issues/58</a></p>",
        "id": 255084179,
        "sender_full_name": "Taiki Endo",
        "timestamp": 1632762541
    },
    {
        "content": "<p>that seems nice too</p>",
        "id": 255602129,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633018713
    },
    {
        "content": "<p>(though different)</p>",
        "id": 255602136,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633018717
    },
    {
        "content": "<p>Seeing <code>ergo-pin-rs</code> I'm now wondering what would be needed in order to define something like <code>fn pin&lt;T&gt;(t: T) -&gt; Pin&lt;&amp;'local mut T&gt;;</code>.  Looking at the <code>#[pin]</code> proposal makes me wonder about this case specifically:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// are we pinning `self`, `inner` or `field`?</span>\n<span class=\"cp\">#[pin]</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">inner</span><span class=\"p\">.</span><span class=\"n\">field</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>With a function or macro the pin target is unambiguous:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// it's clear that we're pinning `self.inner` and accessing `field` on it</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">pin</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">inner</span><span class=\"p\">).</span><span class=\"n\">field</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Am I missing something?</p>",
        "id": 256082158,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1633362931
    },
    {
        "content": "<p>I think in the case of</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[pin]</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">inner</span><span class=\"p\">.</span><span class=\"n\">field</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>It looks like we are pinning <code>field</code>, since that would be similar to the 2021 edition change where closure capture is only done on the inner most reference.</p>",
        "id": 256090354,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1633365630
    },
    {
        "content": "<p>I had an idea a while ago for <code>super</code> expressions that would force lifetime extension of an expression. Thus <code>pin!</code> could be defined as:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"fm\">macro_rules!</span><span class=\"w\"> </span><span class=\"n\">pin</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"cp\">$e</span>:<span class=\"nc\">expr</span><span class=\"w\"> </span><span class=\"cp\">$(,</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"cp\">$e</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">Pin</span>::<span class=\"n\">new_unchecked</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"k\">super</span><span class=\"w\"> </span><span class=\"n\">val</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>And that would give you <code>ergo-pin</code>-style pin syntax without the attribute macro. And FWIW <code>super</code> keyword is also useful elsewhere (e.g. <code>format_args!</code>, stack-based dynamic dispatch).</p>",
        "id": 256182846,
        "sender_full_name": "Kestrer",
        "timestamp": 1633413927
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"319552\">Jeremiah Senkpiel</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/.60pin!.60/near/256090354\">said</a>:</p>\n<blockquote>\n<p>It looks like we are pinning <code>field</code>, since that would be similar to the 2021 edition change where closure capture is only done on the inner most reference.</p>\n</blockquote>\n<p>That would mean that if we want to pin <code>inner</code>, we'd need to write it as:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[pin]</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">inner</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">inner</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">inner</span><span class=\"p\">.</span><span class=\"n\">field</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 256228290,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1633433862
    },
    {
        "content": "<p>How often does needing to pin the inner, but you are only using 1 field, come up?</p>",
        "id": 256257211,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1633444806
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"257428\">Gus Wynn</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/.60pin!.60/near/256257211\">said</a>:</p>\n<blockquote>\n<p>How often does needing to pin the inner, but you are only using 1 field, come up?</p>\n</blockquote>\n<p>Here's a pattern that comes up fairly regularly:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">task</span>::<span class=\"n\">ready</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">pin</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">inner</span><span class=\"p\">).</span><span class=\"n\">poll</span><span class=\"p\">(</span><span class=\"n\">cx</span><span class=\"p\">))</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Perhaps a <code>#[pin]</code> attribute could maybe be smart enough to figure out what exactly to pin; but what I think is more likely is that we'd end up using it like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[pin]</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">inner</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">inner</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">task</span>::<span class=\"n\">ready</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">inner</span><span class=\"p\">.</span><span class=\"n\">poll</span><span class=\"p\">(</span><span class=\"n\">cx</span><span class=\"p\">))</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Which seems less nice than either a pin macro or pin function.</p>",
        "id": 256282648,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1633453679
    },
    {
        "content": "<p>hmm that does seem cleaner! I wonder if an inline non-attribute macro is implementable: <code>let value = task::ready!(pin!(self.inner).poll(cx))?;</code>?</p>",
        "id": 256294956,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1633458395
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"257428\">Gus Wynn</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/.60pin!.60/near/256294956\">said</a>:</p>\n<blockquote>\n<p>hmm that does seem cleaner! I wonder if an inline non-attribute macro is implementable: <code>let value = task::ready!(pin!(self.inner).poll(cx))?;</code>?</p>\n</blockquote>\n<p>That seems like it'd make for a fun experiment!</p>",
        "id": 256296502,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1633459019
    },
    {
        "content": "<p>Can it be made not-<code>unsafe</code>? the way that pin-project handles this is by banning all non-pinned access to a field if it is declared to be structurally pinned</p>\n<p>ill have to see what <code>ergo-pin-rs</code> does</p>",
        "id": 256299193,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1633460076
    },
    {
        "content": "<blockquote>\n<p>Can it be made not-<code>unsafe</code>?</p>\n</blockquote>\n<p>Not without (a) placing an attribute macro around the containing block like ergo-pin does, or (b) a <code>super</code> operator as I suggested</p>",
        "id": 256312839,
        "sender_full_name": "Kestrer",
        "timestamp": 1633465316
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211722\">@Yoshua Wuyts [he/they]</span> regarding the <code>ready!(pin(self.inner).poll(cx))</code> pattern, you could write:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">ready</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">inner</span><span class=\"p\">.</span><span class=\"n\">pinned</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">p</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">poll</span><span class=\"p\">(</span><span class=\"n\">cx</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>where:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">pinned</span><span class=\"o\">&lt;</span><span class=\"n\">R</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"bp\">self</span>: <span class=\"nc\">Self</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">scope</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">FnOnce</span><span class=\"p\">(</span><span class=\"n\">Pin</span><span class=\"o\">&lt;&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">R</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">R</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">pin_mut</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">this</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">scope</span><span class=\"p\">(</span><span class=\"n\">this</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Obviously this pattern can only go so far, since, alas, there is no nice callback style for async callbacks <span aria-label=\"disappointed\" class=\"emoji emoji-1f61e\" role=\"img\" title=\"disappointed\">:disappointed:</span></p>",
        "id": 256488542,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1633556103
    },
    {
        "content": "<p>Ohhh, yeah true! That's cool!</p>\n<p>cc/ <span class=\"user-mention\" data-user-id=\"421986\">@eholk</span>  this feels like it has similar vibes to what you were talking about the other day.</p>",
        "id": 256489117,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1633556387
    },
    {
        "content": "<p>Yeah! I've been thinking a little about something like pinned scopes, but I'm not super happy with what I've come up with so far.</p>",
        "id": 256489455,
        "sender_full_name": "eholk",
        "timestamp": 1633556534
    },
    {
        "content": "<p>What does the <code>ready!</code> macro do?</p>",
        "id": 256489702,
        "sender_full_name": "eholk",
        "timestamp": 1633556653
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"421986\">@eholk</span> <a href=\"https://doc.rust-lang.org/std/task/macro.ready.html\"><code>std::task::ready</code></a>, this will be stable in 1.56 (in 14 days)</p>",
        "id": 256489962,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1633556795
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232018\">Daniel Henry-Mantilla</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/.60pin!.60/near/256488542\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"211722\">Yoshua Wuyts [he/they]</span> regarding the <code>ready!(pin(self.inner).poll(cx))</code> pattern, you could write:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">ready</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">inner</span><span class=\"p\">.</span><span class=\"n\">pinned</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">p</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">poll</span><span class=\"p\">(</span><span class=\"n\">cx</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>where:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">pinned</span><span class=\"o\">&lt;</span><span class=\"n\">R</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"bp\">self</span>: <span class=\"nc\">Self</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">scope</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">FnOnce</span><span class=\"p\">(</span><span class=\"n\">Pin</span><span class=\"o\">&lt;&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">R</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">R</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">pin_mut</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">this</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">scope</span><span class=\"p\">(</span><span class=\"n\">this</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Obviously this pattern can only go so far, since, alas, there is no nice callback style for async callbacks <span aria-label=\"disappointed\" class=\"emoji emoji-1f61e\" role=\"img\" title=\"disappointed\">:disappointed:</span></p>\n</blockquote>\n<p>When do you need to pin a value manually in an async context?</p>",
        "id": 256489988,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1633556814
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211722\">@Yoshua Wuyts [he/they]</span> Ah, okay, so <code>ready!</code> seems like the async analog of <code>try!</code>?</p>",
        "id": 256490046,
        "sender_full_name": "eholk",
        "timestamp": 1633556858
    },
    {
        "content": "<p>haha, yeah pretty much! </p>\n<p>Ideally we would've been able to implement <code>Try for std::task::Poll&lt;T&gt;</code>, but <code>Poll</code> was stabilized with <code>Try</code> impls for <code>Option&lt;Poll&lt;T&gt;&gt;</code> and <code>Result&lt;Poll&lt;T&gt;, E&gt;</code>. In order to make <code>?</code> <em>just work</em> for <code>Poll</code> we could do some shenanigans through specialization, but the libs team figured that might make things too weird.</p>\n<p>So we settled for stabilizing <code>std::task::ready!</code> instead.</p>",
        "id": 256490356,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1633557022
    },
    {
        "content": "<p>That makes sense. I guess there's still the option of making <code>?</code> work in the future too.</p>",
        "id": 256490593,
        "sender_full_name": "eholk",
        "timestamp": 1633557150
    },
    {
        "content": "<p>Theoretically we still could, but when it came up earlier this year libs team members seemed against it. So it may not be in the near future, if ever.</p>",
        "id": 256490711,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1633557222
    },
    {
        "content": "<p>Yeah, it seems like kind of a lower priority.</p>",
        "id": 256490913,
        "sender_full_name": "eholk",
        "timestamp": 1633557320
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"257428\">@Gus Wynn</span> I have some distant memory of having needed that, but I can't recall exactly why was that <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> (maybe smth with <code>select!</code>ing inside a loop <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span>)<br>\nIf that's a rare need, then that's excellent news for the CPS api</p>",
        "id": 256491107,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1633557444
    },
    {
        "content": "<p>Anyways, I was mentioning the CPS style since it's an area I've been toying with for a while (<a href=\"https://docs.rs/with_locals\">https://docs.rs/with_locals</a>).<br>\nThere, I had chosen a <code>#[with] let var = ....;</code> kind of syntax, and, now that I have some distance from it, I realize it's too constraining for the callers. So I'm planning to change that to <code>with!(...)</code> syntax, applicable anywhere.</p>",
        "id": 256491604,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1633557702
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232018\">@Daniel Henry-Mantilla</span> I just tinkered a bit more with your example to see how it would look if we exposed it from <code>core::pin</code>, and it looks so good? </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">pin</span>::<span class=\"p\">{</span><span class=\"n\">pin</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Pin</span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">hello</span><span class=\"p\">(</span><span class=\"bp\">self</span>: <span class=\"nc\">Pin</span><span class=\"o\">&lt;&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Hello from inside Pin&lt;&amp;mut Self&gt;!\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cm\">/* ... */</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">pin</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">foo</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">hello</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p><em><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=f8dc4c9ad7834db190ea605403eab5b9\">playground</a></em></p>",
        "id": 256492187,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1633558001
    },
    {
        "content": "<p>Yep. The other option would be a <code>PinExt</code> or  <code>Pinned</code> extension trait, for the <code>foo.pin(|foo| ...)</code> or <code>foo.pinned(|foo| ...)</code> syntax; but the free function doesn't look bad either, and hadsthe advantage of being simpler.</p>",
        "id": 256493634,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1633558774
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"421986\">eholk</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/.60pin!.60/near/256490593\">said</a>:</p>\n<blockquote>\n<p>That makes sense. I guess there's still the option of making <code>?</code> work in the future too.</p>\n</blockquote>\n<p>I was thinking, that as an alternative to <code>ready!</code> there could be a <code>fn ready(self) -&gt; impl Try...</code> on <code>Poll</code> such that you could write <code>let val = poll.ready()?</code></p>",
        "id": 256516847,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1633576048
    },
    {
        "content": "<p>I like that a bit better than <code>let val = ready!(poll)</code></p>",
        "id": 256516873,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1633576077
    },
    {
        "content": "<p>It's arguable even nicer than <code>let val = poll?</code>, and is non-breaking.</p>",
        "id": 256516941,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1633576105
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"363998\">@Ibraheem Ahmed</span> I think <code>let val = pinned.ready()?</code> looks really nice!</p>",
        "id": 256611763,
        "sender_full_name": "eholk",
        "timestamp": 1633625678
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/pkTqzIHBHijLVb22dIX_mn3C/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/pkTqzIHBHijLVb22dIX_mn3C/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/pkTqzIHBHijLVb22dIX_mn3C/image.png\"></a></div>",
        "id": 256622013,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1633629567
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211722\">Yoshua Wuyts [he/they]</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/.60pin!.60/near/256228290\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"319552\">Jeremiah Senkpiel</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/.60pin!.60/near/256090354\">said</a>:</p>\n<blockquote>\n<p>It looks like we are pinning <code>field</code>, since that would be similar to the 2021 edition change where closure capture is only done on the inner most reference.</p>\n</blockquote>\n<p>That would mean that if we want to pin <code>inner</code>, we'd need to write it as:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[pin]</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">inner</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">inner</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">inner</span><span class=\"p\">.</span><span class=\"n\">field</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>That is how I'd expect it to work, yeah.</p>",
        "id": 256657861,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1633644595
    },
    {
        "content": "<p>This looks similar to what you were describing <span class=\"user-mention\" data-user-id=\"232018\">@Daniel Henry-Mantilla</span>: <a href=\"https://github.com/rust-lang/futures-rs/pull/1023\">https://github.com/rust-lang/futures-rs/pull/1023</a></p>",
        "id": 259146247,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1635275494
    }
]