[
    {
        "content": "<p>Hey, apologies if this makes no sense (I'm not a contributor to Rustc) or if this has been discussed to death before.</p>\n<p>Are there still any talks about async fn desugaring? We have been using async/await for about 6 months and it's great, but when discussing it I keep meeting people who struggle using it in no_std/environments lacking TLS. It feels weird that a language construct requires finding the Context/Waker from <em>somewhere</em> (i.e, a global variable, even if it's in TLS) and looks somewhat \"unrusty\".<br>\nIs there any way async fns could be stabilized <em>without</em> getting into a place where global/TLS Context must be supported forever?</p>\n<p>Random musings: currently, async fns are sugared/colored \"enough\" that no one directly calls them without a framework/mediator (e.g, the await! macro). I don't think it would be problematic to most users to desugar <code>async fn foo(bar: Bar) {}</code> to <code>fn foo(ctx: &amp;mut Context, bar: Bar) -&gt; XXX {}</code>, but<code>await</code> would have to be parameterized implictly? <em>and</em> there are no implicit parameters in Rust (or something similar, yet)... Could that implicit parameter thing be behind another feature gate, just like generators are, and we'd have async and await stabilized without committing to TLS?</p>",
        "id": 163650308,
        "sender_full_name": "magnet",
        "timestamp": 1555593497
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"200746\">@magnet</span> TLS is not a fundamental requirement of the design. It's usage in async/await will be removed when generators can take arguments.</p>",
        "id": 163658824,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1555599256
    },
    {
        "content": "<p>(or when we make a special tailored hack for it)</p>",
        "id": 163658847,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1555599278
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> but how can you stabilize async fns without stabilizing the desugaring or the exact behavior of generators?</p>",
        "id": 163661376,
        "sender_full_name": "magnet",
        "timestamp": 1555600843
    },
    {
        "content": "<p>My understanding is that if <code>async fn</code> becomes stable and people start depending on how it is implemented, it will prevent alternative approaches to pass the context</p>",
        "id": 163661520,
        "sender_full_name": "magnet",
        "timestamp": 1555600951
    },
    {
        "content": "<p>(I do understand how generators with arguments can solve this, but wouldn't changing that after async stabilization be a problem?)</p>",
        "id": 163661705,
        "sender_full_name": "magnet",
        "timestamp": 1555601066
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"200746\">@magnet</span> no, the stabilization does not include any aspect of generators nor the desugaring</p>",
        "id": 163664344,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1555603076
    },
    {
        "content": "<p>Alright, I see, thanks!</p>",
        "id": 163675829,
        "sender_full_name": "magnet",
        "timestamp": 1555611073
    }
]