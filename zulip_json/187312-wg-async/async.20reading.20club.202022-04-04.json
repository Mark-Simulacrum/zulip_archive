[
    {
        "content": "<p>it's time for the async reading club.. <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> usually leads it, but I'm not sure if he's around today</p>",
        "id": 277747109,
        "sender_full_name": "tmandry",
        "timestamp": 1649085708
    },
    {
        "content": "<p>that's fine though, the doc we have for today is one that Niko and I wrote</p>",
        "id": 277747274,
        "sender_full_name": "tmandry",
        "timestamp": 1649085763
    },
    {
        "content": "<p>I'll attempt to lead the meeting then :)</p>",
        "id": 277747397,
        "sender_full_name": "tmandry",
        "timestamp": 1649085811
    },
    {
        "content": "<p>hey <span class=\"user-group-mention\" data-user-group-id=\"1172\">@WG-async-foundations</span></p>",
        "id": 277747403,
        "sender_full_name": "tmandry",
        "timestamp": 1649085814
    },
    {
        "content": "<p>our doc for today is the <a href=\"https://rust-lang.github.io/async-fundamentals-initiative/explainer/async_fn_in_dyn_trait.html\">Async fn in dyn trait</a> explainer</p>",
        "id": 277747603,
        "sender_full_name": "tmandry",
        "timestamp": 1649085888
    },
    {
        "content": "<p>(I'm out sick and won't be able to join today unfortunately â€” I'll try and catch up on the reading once I'm recovered!)</p>",
        "id": 277747763,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1649085946
    },
    {
        "content": "<p>let's start by giving everyone 15 minutes to read, and extend if needed?</p>",
        "id": 277747811,
        "sender_full_name": "tmandry",
        "timestamp": 1649085962
    },
    {
        "content": "<p>We're supposed to read \"Async fn in dyn trait\" and all the sub pages, right?</p>",
        "id": 277748078,
        "sender_full_name": "eholk",
        "timestamp": 1649086046
    },
    {
        "content": "<p>right</p>",
        "id": 277748094,
        "sender_full_name": "tmandry",
        "timestamp": 1649086051
    },
    {
        "content": "<p>To signal you are reading, please add the <span aria-label=\"book\" class=\"emoji emoji-1f4d6\" role=\"img\" title=\"book\">:book:</span> emoji to this message. To signal you're done, add the <span aria-label=\"checkbox\" class=\"emoji emoji-2611\" role=\"img\" title=\"checkbox\">:checkbox:</span> emoji.</p>",
        "id": 277748100,
        "sender_full_name": "tmandry",
        "timestamp": 1649086054
    },
    {
        "content": "<p>I think the \"How it works\" section is too much for me to hope to digest in the time provided.</p>",
        "id": 277750218,
        "sender_full_name": "pnkfelix",
        "timestamp": 1649086898
    },
    {
        "content": "<p>(I find myself skimming parts of it and then saying \"wait, just 'skimming' defeats the purpose of the reading club.)</p>",
        "id": 277750354,
        "sender_full_name": "pnkfelix",
        "timestamp": 1649086936
    },
    {
        "content": "<p>yeah, there's a lot of stuff under there</p>",
        "id": 277750367,
        "sender_full_name": "tmandry",
        "timestamp": 1649086941
    },
    {
        "content": "<p>I just got to \"Generalizing from box with dynx structs\"</p>",
        "id": 277750411,
        "sender_full_name": "eholk",
        "timestamp": 1649086960
    },
    {
        "content": "<p>I'm thinking maybe we should focus on the core stuff, like Generalizing from box to dynx</p>",
        "id": 277750475,
        "sender_full_name": "tmandry",
        "timestamp": 1649086988
    },
    {
        "content": "<p>though maybe both of you are already somewhat familiar with dynx/dyn*, I'm not sure</p>",
        "id": 277750546,
        "sender_full_name": "tmandry",
        "timestamp": 1649087025
    },
    {
        "content": "<p>I'm a little fuzzy on how <code>dynx</code> and <code>dyn*</code> are different</p>",
        "id": 277750608,
        "sender_full_name": "eholk",
        "timestamp": 1649087042
    },
    {
        "content": "<p>One nit: The flow from \"How it feels to use\" to the beginning of \"Using dyn without allocation\" was a bit weird. Namely, the latter opens with </p>\n<blockquote>\n<p>In those examples, though, we assume that it was ok to allocate a Box for every call to an async function.</p>\n</blockquote>\n<p>but the former section never <em>says</em> \"Box\". It <em>alludes</em> to it, with the text \"Invoking the method requires an allocator by default.\" at the end, but that was pretty easy to overlook.</p>",
        "id": 277750690,
        "sender_full_name": "pnkfelix",
        "timestamp": 1649087068
    },
    {
        "content": "<p>anyway I unfortunately have a standup meeting that is a standing conflict with the reading club. <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span> ; I'll try to circle back later to this topic and provide more feedback.</p>",
        "id": 277750822,
        "sender_full_name": "pnkfelix",
        "timestamp": 1649087115
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"421986\">eholk</span> <a href=\"#narrow/stream/187312-wg-async/topic/async.20reading.20club.202022-04-04/near/277750608\">said</a>:</p>\n<blockquote>\n<p>I'm a little fuzzy on how <code>dynx</code> and <code>dyn*</code> are different</p>\n</blockquote>\n<p>They're effectively the same in my view. <code>dynx</code> was a syntax we expected no one would ever write, whereas <code>dyn*</code> is something that could plausibly be turned into syntax.</p>",
        "id": 277750868,
        "sender_full_name": "tmandry",
        "timestamp": 1649087129
    },
    {
        "content": "<p>Ah, that makes sense</p>",
        "id": 277750899,
        "sender_full_name": "eholk",
        "timestamp": 1649087141
    },
    {
        "content": "<p>(one thing that keepings going through my mind is \"is there any way we could keep using the <em>name</em> <code>Box</code>, but change its <em>meaning</em> when you have a <code>Box&lt;dyn Trait&gt;</code> to have the semantics described here. Obviously we cannot change <code>Box&lt;StaticType&gt;</code> in that manner, but I'm curious whether <code>Box&lt;dyn Trait&gt;</code> <em>could</em> be so changed...)</p>",
        "id": 277751056,
        "sender_full_name": "pnkfelix",
        "timestamp": 1649087194
    },
    {
        "content": "<p>(I don't know whether the above would actually buy us anything or just confuse people further.)</p>",
        "id": 277751100,
        "sender_full_name": "pnkfelix",
        "timestamp": 1649087222
    },
    {
        "content": "<p>So a <code>Box</code> could point to something on the stack, not just the heap?</p>",
        "id": 277751138,
        "sender_full_name": "tmandry",
        "timestamp": 1649087235
    },
    {
        "content": "<p>and effectively becomes an \"owned pointer of any sort\"</p>",
        "id": 277751189,
        "sender_full_name": "tmandry",
        "timestamp": 1649087259
    },
    {
        "content": "<p>(but the <em>idea</em>, that a <code>Box</code> is an owning pointer, and <code>Box&lt;dyn Trait&gt;</code> is just saying \"Hey, I have to carry my destructor code in a vtable\", that all lines up to me.)</p>",
        "id": 277751191,
        "sender_full_name": "pnkfelix",
        "timestamp": 1649087259
    },
    {
        "content": "<p>yeah, interesting</p>",
        "id": 277751233,
        "sender_full_name": "tmandry",
        "timestamp": 1649087274
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116883\">tmandry</span> <a href=\"#narrow/stream/187312-wg-async/topic/async.20reading.20club.202022-04-04/near/277751138\">said</a>:</p>\n<blockquote>\n<p>So a <code>Box</code> could point to something on the stack, not just the heap?</p>\n</blockquote>\n<p>a <code>Box&lt;dyn Trait&gt;</code> could. But not a <code>Box&lt;StaticType&gt;</code>.</p>",
        "id": 277751238,
        "sender_full_name": "pnkfelix",
        "timestamp": 1649087276
    },
    {
        "content": "<p>that's the weird part</p>",
        "id": 277751247,
        "sender_full_name": "pnkfelix",
        "timestamp": 1649087278
    },
    {
        "content": "<p>hmm, \"dyn dispatch\" and \"where a pointer is allocated\" seem like they should be separate concerns to me</p>",
        "id": 277751424,
        "sender_full_name": "tmandry",
        "timestamp": 1649087336
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"421986\">eholk</span> <a href=\"#narrow/stream/187312-wg-async/topic/async.20reading.20club.202022-04-04/near/277750608\">said</a>:</p>\n<blockquote>\n<p>I'm a little fuzzy on how <code>dynx</code> and <code>dyn*</code> are different</p>\n</blockquote>\n<p>The other semantic distinction Niko made in his blog post was that <code>dyn*</code> was <em>not necessarily</em> a pointer, just something pointer-sized, which I had internalized in my thinking of <code>dynx</code> already but isn't well reflected in the naming of a trait like <code>IntoRawPointer</code> :)</p>",
        "id": 277751709,
        "sender_full_name": "tmandry",
        "timestamp": 1649087459
    },
    {
        "content": "<p>One question I had was that in the <a href=\"https://rust-lang.github.io/async-fundamentals-initiative/explainer/async_fn_in_dyn_trait/avoiding_allocation.html\"><code>InlineAsyncIterator</code> example</a>, it looks like the type of the argument to <code>count_range</code> changed from <code>&amp;mut dyn AsyncIterator</code> to <code>YieldingRangeIterator</code>. Does that mean for inline allocation we can't have <code>dyn -&gt; dyn</code>?</p>",
        "id": 277751854,
        "sender_full_name": "eholk",
        "timestamp": 1649087518
    },
    {
        "content": "<blockquote>\n<p>but isn't well reflected in the naming of a trait like <code>IntoRawPointer</code></p>\n</blockquote>\n<p>Yeah... the naming here doesn't feel right, but I haven't been able to think of a name I like better.</p>",
        "id": 277751969,
        "sender_full_name": "eholk",
        "timestamp": 1649087563
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"421986\">eholk</span> <a href=\"#narrow/stream/187312-wg-async/topic/async.20reading.20club.202022-04-04/near/277751854\">said</a>:</p>\n<blockquote>\n<p>One question I had was that in the <a href=\"https://rust-lang.github.io/async-fundamentals-initiative/explainer/async_fn_in_dyn_trait/avoiding_allocation.html\"><code>InlineAsyncIterator</code> example</a>, it looks like the type of the argument to <code>count_range</code> changed from <code>&amp;mut dyn AsyncIterator</code> to <code>YieldingRangeIterator</code>. Does that mean for inline allocation we can't have <code>dyn -&gt; dyn</code>?</p>\n</blockquote>\n<p>I think that was <code>count</code>, which is a different function <code>count_range</code> (which calls <code>count</code>)</p>",
        "id": 277752063,
        "sender_full_name": "tmandry",
        "timestamp": 1649087604
    },
    {
        "content": "<p>Oh, right.</p>",
        "id": 277752101,
        "sender_full_name": "eholk",
        "timestamp": 1649087620
    },
    {
        "content": "<p>Okay, so <code>count_range</code> allocates the stack space for the <code>next</code> future, and the \"lends\" it to <code>count</code> to use as storage space?</p>",
        "id": 277752193,
        "sender_full_name": "eholk",
        "timestamp": 1649087648
    },
    {
        "content": "<p>yes</p>",
        "id": 277752222,
        "sender_full_name": "tmandry",
        "timestamp": 1649087660
    },
    {
        "content": "<p>it coerces from <code>&amp;mut InlineAsyncIterator&lt;StaticType&gt;</code> to <code>&amp;mut dyn AsyncIterator</code> for the call to <code>count</code></p>",
        "id": 277752262,
        "sender_full_name": "tmandry",
        "timestamp": 1649087676
    },
    {
        "content": "<p>okay, that makes sense</p>",
        "id": 277752299,
        "sender_full_name": "eholk",
        "timestamp": 1649087692
    },
    {
        "content": "<p>It does seem to make the inline allocation option a little less general. For example, it's harder to get a <code>Vec&lt;Box&lt;dyn AsyncIterator&gt;&gt;</code> that mixes and matches allocation strategies.</p>",
        "id": 277752545,
        "sender_full_name": "eholk",
        "timestamp": 1649087785
    },
    {
        "content": "<p>(maybe people don't want to do that often in practice)</p>",
        "id": 277752557,
        "sender_full_name": "eholk",
        "timestamp": 1649087795
    },
    {
        "content": "<p>If it comes up enough, you could probably write some kind of <code>CachedAsyncIteratorCollection</code> type that shares a slot for a future between different ones. I'm not sure if that actually works though...</p>",
        "id": 277752732,
        "sender_full_name": "eholk",
        "timestamp": 1649087877
    },
    {
        "content": "<p>(I unfortunately am going to have to drop in a few minutes too)</p>",
        "id": 277752813,
        "sender_full_name": "eholk",
        "timestamp": 1649087896
    },
    {
        "content": "<p>yeah, so you could generalize the idea by pre-allocating some number of futures on the stack</p>",
        "id": 277752936,
        "sender_full_name": "tmandry",
        "timestamp": 1649087948
    },
    {
        "content": "<p>but without a spillover to the heap it wouldn't always work</p>",
        "id": 277752960,
        "sender_full_name": "tmandry",
        "timestamp": 1649087962
    },
    {
        "content": "<p>right</p>",
        "id": 277752991,
        "sender_full_name": "eholk",
        "timestamp": 1649087976
    },
    {
        "content": "<p>that limitation seems kind of fundamental though</p>",
        "id": 277753016,
        "sender_full_name": "tmandry",
        "timestamp": 1649087998
    },
    {
        "content": "<p>Yeah, at least without alloca...</p>",
        "id": 277753209,
        "sender_full_name": "eholk",
        "timestamp": 1649088038
    },
    {
        "content": "<p>and we can't have alloca in futures</p>",
        "id": 277753251,
        "sender_full_name": "eholk",
        "timestamp": 1649088046
    },
    {
        "content": "<p>okay, I have to jump to another meeting. Thanks for running the meeting, <span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span>!</p>",
        "id": 277753367,
        "sender_full_name": "eholk",
        "timestamp": 1649088067
    },
    {
        "content": "<p>sure, sorry it was a little shorter than usual</p>",
        "id": 277753455,
        "sender_full_name": "tmandry",
        "timestamp": 1649088114
    },
    {
        "content": "<p>No worries!</p>",
        "id": 277757254,
        "sender_full_name": "eholk",
        "timestamp": 1649089615
    },
    {
        "content": "<p>Maybe it's worth doing the same document (or specific subsections) for the next reading club?</p>",
        "id": 277757321,
        "sender_full_name": "eholk",
        "timestamp": 1649089633
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"421986\">@eholk</span> do you think having just a little bit more time would have made a big difference?</p>",
        "id": 277758077,
        "sender_full_name": "tmandry",
        "timestamp": 1649089978
    },
    {
        "content": "<p>we could definitely scope to a subset of the doc</p>",
        "id": 277758089,
        "sender_full_name": "tmandry",
        "timestamp": 1649089985
    },
    {
        "content": "<p>but the doc builds on itself, so it would probably have to include the beginning</p>",
        "id": 277758232,
        "sender_full_name": "tmandry",
        "timestamp": 1649090046
    },
    {
        "content": "<p>Good question. I got all the questions I had answered, but the time did feel pretty compressed so I don't know if there were more things we missed.</p>",
        "id": 277758235,
        "sender_full_name": "eholk",
        "timestamp": 1649090048
    },
    {
        "content": "<p>I also didn't read through the whole doc during the time we had, even though I had read it already once before.</p>",
        "id": 277758271,
        "sender_full_name": "eholk",
        "timestamp": 1649090070
    },
    {
        "content": "<p>well there are a lot of docs on the backlog - <a href=\"https://hackmd.io/6kSbmyggT6eAy5uvdB6srA?both\">https://hackmd.io/6kSbmyggT6eAy5uvdB6srA?both</a></p>",
        "id": 277758489,
        "sender_full_name": "tmandry",
        "timestamp": 1649090168
    },
    {
        "content": "<p>(I forgot we were supposed to pick the next one to read!)</p>",
        "id": 277758519,
        "sender_full_name": "tmandry",
        "timestamp": 1649090182
    },
    {
        "content": "<p>True, and only meeting every other week means it will take a while to get through them.</p>",
        "id": 277758618,
        "sender_full_name": "eholk",
        "timestamp": 1649090245
    },
    {
        "content": "<p>Yeah, maybe lets do something new next time then</p>",
        "id": 277758708,
        "sender_full_name": "eholk",
        "timestamp": 1649090284
    },
    {
        "content": "<p>agreed. anything from that list stand out?</p>",
        "id": 277758858,
        "sender_full_name": "tmandry",
        "timestamp": 1649090357
    },
    {
        "content": "<p>on a related note, I was wondering if we could use half of the sprint planning slot to do another one of these</p>",
        "id": 277758949,
        "sender_full_name": "tmandry",
        "timestamp": 1649090391
    },
    {
        "content": "<p>so there would be one every week</p>",
        "id": 277758969,
        "sender_full_name": "tmandry",
        "timestamp": 1649090398
    },
    {
        "content": "<p>..but then I'm not sure that time is working for everyone as it is</p>",
        "id": 277759090,
        "sender_full_name": "tmandry",
        "timestamp": 1649090423
    },
    {
        "content": "<p>Do you mean having a reading club during the sprint planning slot on off weeks?</p>",
        "id": 277759162,
        "sender_full_name": "eholk",
        "timestamp": 1649090450
    },
    {
        "content": "<p>no, sorry, I mean</p>",
        "id": 277759457,
        "sender_full_name": "tmandry",
        "timestamp": 1649090544
    },
    {
        "content": "<p>we've been finishing the last two sprint planning meetings in 30 minutes</p>",
        "id": 277759494,
        "sender_full_name": "tmandry",
        "timestamp": 1649090558
    },
    {
        "content": "<p>That'd probably work for me. I usually have some time after that meeting so if we wanted to go longer for reading club I could do that</p>",
        "id": 277759692,
        "sender_full_name": "eholk",
        "timestamp": 1649090646
    },
    {
        "content": "<p>yeah we'd have to grow the slot by 15 minutes on either end, probably</p>",
        "id": 277759744,
        "sender_full_name": "tmandry",
        "timestamp": 1649090667
    },
    {
        "content": "<p>Oh yeah, I can go earlier too</p>",
        "id": 277759822,
        "sender_full_name": "eholk",
        "timestamp": 1649090696
    }
]