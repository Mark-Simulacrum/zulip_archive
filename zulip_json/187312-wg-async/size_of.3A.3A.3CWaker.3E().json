[
    {
        "content": "<p>I wanted to check if we'd consider the size of a <code>std::task::Waker</code> guaranteed to be the same size forever, and so could document that guarantee.</p>\n<p>For background, I'm making a C API for hyper, and need to expose a <code>Waker</code>. So far, I box them and expose <code>*mut Waker</code>, which in some ways is unfortunate, capturing a waker happens somewhat frequently, and at the moment it's to box a 2-pointer-sized value into 1 pointer. If the size will never ever change, and we put that in the docs, then I could instead expose some <code>struct hyper_waker { void *_opaque[2]; }</code>. I don't think the size of a struct is usually something someone can rely on in Rust, as implementation details can change, so I'm not strongly for this. I figured I'd check now, while still designing hyper's C API.</p>",
        "id": 212826907,
        "sender_full_name": "Sean McArthur",
        "timestamp": 1602250970
    },
    {
        "content": "<p>Another thing I notice is that there is <code>#[repr(transparent)]</code> on <code>Waker</code>, claiming it wraps a <code>RawWaker</code>. And the docs for <code>RawWaker</code> claims it \"consists of a data pointer and vtable\". However, I also note that that doesn't necessarily mean that's <em>all</em> it could ever consist of.</p>",
        "id": 212827155,
        "sender_full_name": "Sean McArthur",
        "timestamp": 1602251093
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243965\">@Sean McArthur</span> I think the way I'd go about getting this confirmed is to open a PR against rust-lang/rust std/core with the change to documentation that would require this guarantee and then we can FCP that with T-libs</p>",
        "id": 212832184,
        "sender_full_name": "simulacrum",
        "timestamp": 1602253425
    },
    {
        "content": "<p>(We could also guarantee it's \"no more than 4 pointers\" or something like that, to give us some breathing room)</p>",
        "id": 212832264,
        "sender_full_name": "simulacrum",
        "timestamp": 1602253445
    },
    {
        "content": "<p>Agreed with <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> on how to go about this. I think it has a pretty good chance of succeeding.</p>",
        "id": 212859341,
        "sender_full_name": "tmandry",
        "timestamp": 1602267535
    },
    {
        "content": "<p>On a related note, I'd like the ability to retrieve the data and vtable pointers from a Waker/RawWaker.  That way, I could 'downcast' by comparing the vtable to known pointers.</p>",
        "id": 213062793,
        "sender_full_name": "comex",
        "timestamp": 1602521909
    }
]