[
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> -- I saw <a href=\"https://github.com/rust-lang/rust/issues/62149#issuecomment-506944220\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/62149#issuecomment-506944220\">your comment on the async-await stabilization</a> issue, and I was wondering if you could say just a <em>bit</em> more? In particular, I don't quite know if the concern you are raising is something somewhat <em>inherent</em> to having \"self-referential futures\" (i.e., to the intended uses for <code>Pin</code>, as you somewhat suggest), or is something that is tied to some details of how we have implemented futures.</p>",
        "id": 169894923,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562611978
    },
    {
        "content": "<p>Also cc <span class=\"user-group-mention\" data-user-group-id=\"810\">@WG-unsafe-code-guidelines</span></p>",
        "id": 169894936,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562611983
    },
    {
        "content": "<p>What it boils down to is that <code>Pin&lt;&amp;mut F&gt;</code> holds a mutable reference to some location. If that location has an internal mutable reference (allowed by the <code>Pin</code> contract), then the simple rule of \"only one mutable reference\" dies. Importantly, the outer reference _is_ used between uses of the internal references, so all prior Stacked Borrows model would invalidate the internal reference upon manifesting the outer reference (in e.g. <code>map_unchecked</code>).</p>",
        "id": 169902439,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1562618027
    },
    {
        "content": "<p>Right, so basically it is inherent to self-referntial structs <em>if</em> the pointer to the struct is a reference.<br>\nIf we still had <code>PinMut</code> as a dedicated type, my proposal would have been to use <code>NonNull</code> internally instead. Provide the same API but not actually \"be\" a reference. That would help (except for <code>map_unchecked*</code>)</p>",
        "id": 170517089,
        "sender_full_name": "RalfJ",
        "timestamp": 1562741669
    },
    {
        "content": "<p>I can give further details if you want.... after Thursday ;)</p>",
        "id": 170517095,
        "sender_full_name": "RalfJ",
        "timestamp": 1562741681
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> did I answer your question? It is not really tied to how we have implemented futures and more tied to how we have implemented <code>Pin</code>, I would say.</p>",
        "id": 170779561,
        "sender_full_name": "RalfJ",
        "timestamp": 1563003748
    },
    {
        "content": "<p>I think you did, yes. It seems like we should not let it block stabilization to me. :)</p>",
        "id": 170787235,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1563019447
    },
    {
        "content": "<p>But it will be something to sort out.</p>",
        "id": 170787236,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1563019452
    }
]