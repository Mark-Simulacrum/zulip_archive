[
    {
        "content": "<p>This idea just crossed my mind, but the longer I think about it, the more obvious(ly flawed) it looks. So, before I forget to ever mention this anywhere, here is an idea on how  to approach spawning futures without knowing the executor/event loop:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"c1\">// core/task/wake.rs</span>\n<span class=\"w\">  </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Context</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"n\">waker</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"nc\">Waker</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">     </span><span class=\"n\">runtime</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"n\">Runtime</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"n\">_marker</span>: <span class=\"nc\">PhantomData</span><span class=\"o\">&lt;</span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"p\">())</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Context</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">from_waker</span><span class=\"p\">(</span><span class=\"n\">waker</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"nc\">Waker</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"o\">-</span><span class=\"w\">         </span><span class=\"n\">Context</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">waker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_marker</span>: <span class=\"nc\">PhantomData</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">         </span><span class=\"n\">Context</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">waker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">runtime</span>: <span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_marker</span>: <span class=\"nc\">PhantomData</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"o\">+</span><span class=\"w\">     </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">with_runtime</span><span class=\"p\">(</span><span class=\"bp\">self</span>: <span class=\"nc\">runtime</span>: <span class=\"nc\">Runtime</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">         </span><span class=\"bp\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">waker</span>: <span class=\"nc\">self</span><span class=\"p\">.</span><span class=\"n\">waker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">runtime</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_marker</span>: <span class=\"nc\">PhantomData</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">     </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">     </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">runtime</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"n\">Waker</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">         </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">runtime</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">     </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// to be implemented by the async library, such as tokio, async-std... (analogue to Waker)</span>\n<span class=\"o\">+</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Runtime</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">     </span><span class=\"k\">fn</span> <span class=\"nf\">spawn_local</span><span class=\"o\">&lt;</span><span class=\"n\">F</span>: <span class=\"nc\">Future</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span>: <span class=\"nc\">F</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">SpawnError</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"c1\">// core/task</span>\n<span class=\"o\">+</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">SpawnLocal</span><span class=\"o\">&lt;</span><span class=\"n\">F</span>: <span class=\"nc\">Future</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">F</span>: <span class=\"nc\">Future</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Future</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">SpawnLocal</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">     </span><span class=\"k\">type</span> <span class=\"nc\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">SpawnError</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">     </span><span class=\"k\">fn</span> <span class=\"nf\">poll</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"w\"> </span><span class=\"n\">Pin</span><span class=\"o\">&lt;&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cx</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Context</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Poll</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span>::<span class=\"n\">Output</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">         </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">runtime</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">cx</span><span class=\"p\">.</span><span class=\"n\">runtime</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">             </span><span class=\"n\">Poll</span>::<span class=\"n\">Ready</span><span class=\"p\">(</span><span class=\"n\">runtime</span><span class=\"p\">.</span><span class=\"n\">spawn</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">         </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">             </span><span class=\"n\">Poll</span>::<span class=\"n\">Ready</span><span class=\"p\">(</span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">SpaenError</span>::<span class=\"n\">NoRuntime</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">         </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">     </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">spawn_local</span><span class=\"o\">&lt;</span><span class=\"n\">F</span>: <span class=\"nc\">Future</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">f</span>: <span class=\"nc\">F</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">Future</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">SpawnError</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">   </span><span class=\"n\">SpawnLocal</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">).</span><span class=\"k\">await</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n\n\n<span class=\"c1\">// usage</span>\n\n<span class=\"cp\">#[tokio::main]</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">std</span>::<span class=\"n\">task</span>::<span class=\"n\">spawn_local</span><span class=\"p\">(</span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Hello from another task\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}).</span><span class=\"k\">await</span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>(Missing: the spawning should probably return a JoinHandle or something like that...)</p>\n<p>The main idea is that async functions of libraries that need to spawn tasks pretty sure want to spawn the new task into the same event loop as they are already running in. By extending <code>Context</code> - which is available in the async fn because of Future::poll - one could provide a way to access the current event-loop without global variables.</p>\n<p>In addition to <code>spawn_local</code> - which is based on the naming schema of tokio (<a href=\"https://docs.rs/tokio/1.4.0/tokio/task/index.html#functions\">https://docs.rs/tokio/1.4.0/tokio/task/index.html#functions</a>) - additional functions for the <code>Runtime</code> would be needed. Also, RawRuntimeVTable and its companions.</p>",
        "id": 231291349,
        "sender_full_name": "Michael (kellerkindt)",
        "timestamp": 1616410545
    },
    {
        "content": "<p>I mean, you can already define the trait and pass it as an ordinary parameter. The actual design of the trait is probably a more significant discussion, e.g. you use <code>spawn_local</code> here, but that's only supported in Tokio when you have set up a <code>LocalSet</code>, which is relatively rare.</p>",
        "id": 231293497,
        "sender_full_name": "Alice Ryhl",
        "timestamp": 1616411768
    },
    {
        "content": "<p>Yeah, I chose <code>spawn_local</code> to show that there could be multiple <code>spawn_*</code> functions. I don't follow your point on \"pass it as an ordinary parameter\". If I understand you correctly, that would mean that the binary author has to pass it to the library and the library to pass it along to everywhere where it might be required? I mean it would work, but it also forces the author of the libs (recursively) to consider and implement it vs just being able to spawn a future/task in the same context when needed - which requires far less implementation work and probably(?) covers most use cases? I think the nice thing about the example above is that the <code>Runtime</code> parameter is passed in through the <code>.await</code> call by the event-loop itself. But maybe I am wrong in my assumption here. Thanks for looking at it at all xD</p>",
        "id": 231299314,
        "sender_full_name": "Michael (kellerkindt)",
        "timestamp": 1616415015
    },
    {
        "content": "<p>I mean, sure, the above would be more convenient like that, although I will note that spawn methods are typically not async methods, but they would have to be in order to access the data in the context.</p>",
        "id": 231305008,
        "sender_full_name": "Alice Ryhl",
        "timestamp": 1616417872
    },
    {
        "content": "<p>So, I'm trying to avoid thinking too hard about these sorts of details yet, but I have been assuming that we might add details like this to the <code>Context</code></p>",
        "id": 231313254,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616421223
    },
    {
        "content": "<p>there would be some details to figure out though</p>",
        "id": 231313273,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616421233
    },
    {
        "content": "<p>still, I like the idea of being able to spawn onto \"the current executor\" without having to know what that is</p>",
        "id": 231313322,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616421243
    },
    {
        "content": "<p>Does the runtime need to be an Option, and stored in the context? Could we have a generic type parameter on the context that provides the runtime, and then a static method to spawn, without needing storage?</p>",
        "id": 231314998,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1616421854
    },
    {
        "content": "<p>I think the <code>Option</code> wrapping is required for it to be backwards compatible. A generic type parameter + static fn is an interesting idea to avoid that, but it would require an global / thread local variable in the implementation and hindering the possibility of having multiple instances of the same event-loop running? A default type would also be needed to be backwards compatible.</p>",
        "id": 231316453,
        "sender_full_name": "Michael (kellerkindt)",
        "timestamp": 1616422430
    },
    {
        "content": "<p>FWIW putting some kind of handle to the executor in the Context is something we've been talking about when it comes to Rust tasks running on C++ executors.</p>",
        "id": 231366884,
        "sender_full_name": "Patrick Walton",
        "timestamp": 1616440086
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"384014\">@Patrick Walton</span> did you ever open an issue or write a story about C++ interop? I think that'd be really interesting to hear more about</p>",
        "id": 231441469,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616491375
    },
    {
        "content": "<p>This <a href=\"https://github.com/rust-lang/wg-async-foundations/issues/67\">issue exists</a></p>",
        "id": 231443277,
        "sender_full_name": "Michael (kellerkindt)",
        "timestamp": 1616492441
    },
    {
        "content": "<p>It would be my first but if this seems interesting enough, I would try to write a RFC for that. What do you think? (titled something like \"Spawning a future onto the current executor without having to know what that is\")</p>",
        "id": 231464084,
        "sender_full_name": "Michael (kellerkindt)",
        "timestamp": 1616503961
    },
    {
        "content": "<p>Well, my take is that I'd prefer not to be writing RFCs yet. I want to see us working through this vision process before we decide what RFCs to write. Im particularly keen to identify clearly both (a) the stories about what it's like today and (b) a user-oriented story of what experience we want to enable before we worry about the details of how we will achieve it</p>",
        "id": 231466954,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616505046
    },
    {
        "content": "<p>Some thoughts on what that might mean here:</p>",
        "id": 231466990,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616505058
    },
    {
        "content": "<ul>\n<li>we want people to be able to write portable libraries that have need of spawning tasks</li>\n</ul>",
        "id": 231467025,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616505070
    },
    {
        "content": "<ul>\n<li>people need to spawn tasks from various sorts of places, including (it sounds like) Drop impls</li>\n</ul>",
        "id": 231467057,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616505088
    },
    {
        "content": "<ul>\n<li>people want to be able to compose executors together -- I'd like to dig into this a bit better -- does it happen that the \"current executor\" is not the one you should spawn onto? when does that occur</li>\n</ul>",
        "id": 231467307,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616505200
    },
    {
        "content": "<p>I opened the user story, were you thinking of anything more?</p>",
        "id": 231513938,
        "sender_full_name": "Patrick Walton",
        "timestamp": 1616521947
    },
    {
        "content": "<p>Unfortunately, C++ interop is looking like yet another case of \"everything is fairly straightforward, except that Rust futures can be dropped at any time and C++ futures cannot, which is causing a lot of problems\"</p>",
        "id": 231514053,
        "sender_full_name": "Patrick Walton",
        "timestamp": 1616521996
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"384014\">@Patrick Walton</span> what user story did you open?</p>",
        "id": 231526233,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616526612
    },
    {
        "content": "<p>do you mean you opened an issue?</p>",
        "id": 231526246,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616526617
    },
    {
        "content": "<p>I was thinking of a PR ..</p>",
        "id": 231526300,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616526632
    },
    {
        "content": "<p>Yeah</p>",
        "id": 231551501,
        "sender_full_name": "Patrick Walton",
        "timestamp": 1616537177
    },
    {
        "content": "<p>I could do a PR</p>",
        "id": 231551523,
        "sender_full_name": "Patrick Walton",
        "timestamp": 1616537185
    }
]