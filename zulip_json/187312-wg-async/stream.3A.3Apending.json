[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211722\">@Yoshua Wuyts [he/they]</span>  I don't think I understand your concern about async overloading <code>core::stream::pending</code>. <code>Poll::Pending</code> is a fundamentally async construct. What would the synchronous equivalent do, block forever?</p>",
        "id": 264853040,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1639486691
    },
    {
        "content": "<p><code>stream::empty</code> is something that could be overloaded, but I'm not sure about <code>stream::pending</code></p>",
        "id": 264853119,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1639486737
    },
    {
        "content": "<p>You're right that <code>stream::pending</code> has no non-async analog. But if we decide to go forward with async overloading, the <code>std::stream</code>/<code>std::async_iter</code> submodule will cease to exist. Meaning we'd likely want to expose <code>stream::pending</code> from <code>std::iter::pending </code> instead.</p>",
        "id": 264855217,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1639487810
    },
    {
        "content": "<p>which means we should hold off on stabilizing anything in the submodule until we have clarity on what we want to do about async overloading</p>",
        "id": 264855277,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1639487851
    },
    {
        "content": "<p>this is the reason why I haven't started adding any of the free functions to <code>std::stream</code> so far, contrary to the free functions I've added to <code>std::future</code>; we need to address the topic of async overloading first before we can consider stabilizing any of these.</p>",
        "id": 264855447,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1639487959
    },
    {
        "content": "<p>does that make sense?</p>",
        "id": 264855453,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1639487961
    },
    {
        "content": "<p>I see, so it's a blocking concern for the entirety of the stream module</p>",
        "id": 264863805,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1639491678
    },
    {
        "content": "<p>yes, that's right</p>",
        "id": 264870994,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1639494376
    }
]