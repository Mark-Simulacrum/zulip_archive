[
    {
        "content": "<p>Inspecting the assembly of an async function seems to... not work?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">&quot;C&quot;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">moo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i64</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">example</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"kt\">u64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">moo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Err</span><span class=\"p\">(())</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>playground::example:\n    xorl    %eax, %eax\n    retq\n</pre></div>\n\n\n<p>Am I doing something dumb?</p>",
        "id": 189049609,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1582657294
    },
    {
        "content": "<p>The actual async function body is in the <code>Generator::resume</code> method</p>",
        "id": 189049765,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1582657381
    },
    {
        "content": "<p>I may not be following your point, but that's the literal entire output of the assembly â€” those 3 lines.</p>",
        "id": 189049824,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1582657429
    },
    {
        "content": "<p>Oh, perhaps you are saying that  the <code>resume</code> body is being stripped out because it's not public?</p>",
        "id": 189049917,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1582657469
    },
    {
        "content": "<p>yeah it may be getting stripped out</p>",
        "id": 189055801,
        "sender_full_name": "tmandry",
        "timestamp": 1582661257
    },
    {
        "content": "<p>you can call <code>futures::executor::block_on(example())</code> to force it to be included</p>",
        "id": 189056119,
        "sender_full_name": "tmandry",
        "timestamp": 1582661423
    },
    {
        "content": "<p>it adds a lot of code though :/</p>",
        "id": 189056205,
        "sender_full_name": "tmandry",
        "timestamp": 1582661489
    },
    {
        "content": "<p>Yeah, and I can't put an <code>#[inline(never)]</code> on <code>Generator::resume</code> to separate it from the executor.</p>",
        "id": 189061260,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1582664866
    }
]