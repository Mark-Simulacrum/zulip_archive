[
    {
        "content": "<p>This is my first attempt at creating a topic, I thought I would break out from \"inline\" async fn in traits where concurrently reading from AsyncRead + AsyncWrite was being discussed.</p>",
        "id": 240646929,
        "sender_full_name": "Carl Lerche",
        "timestamp": 1622228352
    },
    {
        "content": "<p>Here is a trait proposal that would support concurrent reads + writes w/o lang changes (besides async fn in trait): <a href=\"https://gist.github.com/carllerche/5d7037bd55dac1cb72891529a4ff1540\">https://gist.github.com/carllerche/5d7037bd55dac1cb72891529a4ff1540</a></p>",
        "id": 240646981,
        "sender_full_name": "Carl Lerche",
        "timestamp": 1622228383
    },
    {
        "content": "<p>I'm not sure if this still belongs to the other discussion or not (but that's fair - it's a separate thread). The other thread one was about  primarily \"how to make native async traits\", and solve <code>AsyncRead/Write</code> as one concrete problem. </p>\n<p>Your gist seems to be about just having another non async native version of those. Do you think this is worthwhile a discussion at all? I think the \"workaround traits\" have been discussed in enough other places (e..g. when tokio moved to another version of them, the discussions in futures-rs, etc). Any kind of non native async trait will not allow composition via async methods (e.g build a wrapper around <code>AsyncRead</code> which delays reading for some time by calling <code>sleep(time).await</code>, which currently makes those things hard to use for non-experts.</p>",
        "id": 240648153,
        "sender_full_name": "Matthias247",
        "timestamp": 1622228979
    },
    {
        "content": "<p>\"Do you think this is worthwhile a discussion at all? \" is not a productive comment. This proposal is different than any other and it is possible to integrate any wrapper that adds delays by adding the delay in the <code>ready()</code> fn and not succeeding the read until the delay elapses.</p>",
        "id": 240649747,
        "sender_full_name": "Carl Lerche",
        "timestamp": 1622229888
    },
    {
        "content": "<p>I realize the confusion, I forgot to add <code>async</code> on <code>async fn ready</code>, sorry</p>",
        "id": 240655502,
        "sender_full_name": "Carl Lerche",
        "timestamp": 1622232931
    },
    {
        "content": "<p>Catching up</p>",
        "id": 241156084,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622643946
    },
    {
        "content": "<p>Sorry <span class=\"user-mention\" data-user-id=\"224941\">@Carl Lerche</span> for being slow</p>",
        "id": 241156093,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622643950
    },
    {
        "content": "<p>I agree that it's worth exploring-- I still feel like we're in a kind of brainstorming phase</p>",
        "id": 241156223,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622643991
    },
    {
        "content": "<p>this interface seems pretty reasonable to me, and easy enough to \"package up\" with read and write methods</p>",
        "id": 241156292,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622644025
    },
    {
        "content": "<p>that are basically convenience wrappers that iterate around \"ready\" and \"try\" calls</p>",
        "id": 241156348,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622644053
    },
    {
        "content": "<p>it seems clear that this interface doesn't work for io-uring, and that we want another one for that, one that is more \"transferring buffer oriented\"-- I'm wondering if that's just generally true</p>",
        "id": 241156462,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622644087
    },
    {
        "content": "<p>that is to say: the current async read/write traits also seem pretty tied to the \"epoll/readiness\"-style of unix read/write functions</p>",
        "id": 241156516,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622644106
    }
]