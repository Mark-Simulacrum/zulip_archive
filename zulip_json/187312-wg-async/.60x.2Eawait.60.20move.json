[
    {
        "content": "<p>So does <code>x.await</code> move <code>x</code>?</p>",
        "id": 165561927,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557776458
    },
    {
        "content": "<p>Yes.</p>",
        "id": 165563339,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1557777502
    },
    {
        "content": "<p>ok; and do we implement <code>Future</code> for <code>Box&lt;impl Future&gt;</code>?</p>",
        "id": 165563369,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557777532
    },
    {
        "content": "<p>(in other words, it's <em>probably</em> not important where <code>.await</code> autoderefs at this point...)</p>",
        "id": 165563399,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557777547
    },
    {
        "content": "<p><code>await</code> does not autoderef</p>",
        "id": 165563410,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1557777557
    },
    {
        "content": "<p>Yes, we implement <code>Future</code> for boxed future types</p>",
        "id": 165563443,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1557777587
    },
    {
        "content": "<blockquote>\n<p><code>await</code> does not autoderef</p>\n</blockquote>\n<p>I am aware</p>",
        "id": 165563528,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557777623
    },
    {
        "content": "<p>but I feel like we might want it to in the future, if we had deref-move</p>",
        "id": 165563535,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557777631
    },
    {
        "content": "<p>( just for consistency with <code>.field</code>, <code>.method()</code> )</p>",
        "id": 165563551,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557777646
    },
    {
        "content": "<p>I'm quite skeptical</p>",
        "id": 165563556,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1557777652
    },
    {
        "content": "<p>but I mostly want to not care about this right now :)</p>",
        "id": 165563559,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557777654
    },
    {
        "content": "<p>yeah</p>",
        "id": 165563568,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1557777659
    },
    {
        "content": "<p>I don't think the motivation for this is strong.</p>",
        "id": 165563587,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1557777668
    },
    {
        "content": "<p>I agree</p>",
        "id": 165563597,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557777675
    },
    {
        "content": "<p>I don't know how much it'll ever matter in practice</p>",
        "id": 165563605,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557777688
    },
    {
        "content": "<p>it's just a \"consistency thing\"</p>",
        "id": 165563613,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557777696
    },
    {
        "content": "<p>I've never heard anyone mention it, and in many cases the autoderef woudn't \"do the right thing\"</p>",
        "id": 165563620,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1557777707
    },
    {
        "content": "<p>like, <code>&amp;mut F</code> and <code>Box&lt;F&gt;</code> implement <code>Future</code> when <code>F: Unpin</code></p>",
        "id": 165563677,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1557777726
    },
    {
        "content": "<p>and <code>Pin&lt;&amp;mut F&gt;</code> and <code>Pin&lt;Box&lt;F&gt;&gt;</code> always implement <code>Future</code></p>",
        "id": 165563696,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1557777740
    },
    {
        "content": "<p>(/me mutters about how annoying it is that people said we shouldn't be able to pin-project through <code>Box</code>)</p>",
        "id": 165563731,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1557777779
    },
    {
        "content": "<p>but w/e</p>",
        "id": 165563758,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1557777793
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> my only question is: are we forward compatible with auto-deref?</p>",
        "id": 165564672,
        "sender_full_name": "centril",
        "timestamp": 1557778546
    },
    {
        "content": "<p>I think you hinted at yes, but would be good to confirm more explicitly</p>",
        "id": 165564690,
        "sender_full_name": "centril",
        "timestamp": 1557778561
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> from what I can tell the answer is yes --</p>",
        "id": 165566556,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557779775
    },
    {
        "content": "<p>basically, we would only auto-deref in cases that would be an error today anyway</p>",
        "id": 165566569,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557779797
    },
    {
        "content": "<p>(I was trying to think of edge cases but it feels like any such edge-case would be a bug in the auto-deref algorithm anyway)</p>",
        "id": 165566583,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557779819
    },
    {
        "content": "<p>i.e., the concern would be cases where we don't know enough type info to decide yet</p>",
        "id": 165566605,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557779835
    },
    {
        "content": "<p>but we're supposed to be conservative in such cases</p>",
        "id": 165566614,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557779848
    },
    {
        "content": "<p>sgtm then</p>",
        "id": 165566617,
        "sender_full_name": "centril",
        "timestamp": 1557779851
    },
    {
        "content": "<p>the problem would be</p>",
        "id": 165566630,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557779861
    },
    {
        "content": "<p>if we added DerefMove without thinking about it..</p>",
        "id": 165566640,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557779871
    },
    {
        "content": "<p>..well, that's not true either I guess</p>",
        "id": 165566645,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557779875
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I guess the one thing I thought of was if we had some impl for <code>Future</code> that would create problems later</p>",
        "id": 165567037,
        "sender_full_name": "centril",
        "timestamp": 1557780115
    },
    {
        "content": "<p>I'm not sure I follow</p>",
        "id": 165567278,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557780253
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> it's quite an unbaked thought, but could it be the case that we have a blanket-ish impl for <code>Future</code> that cannot be subsumed by auto-deref and which wouldn't be selected if we later added auto-deref?</p>",
        "id": 165567683,
        "sender_full_name": "centril",
        "timestamp": 1557780541
    },
    {
        "content": "<p>I can't think how -- usually the idea is that we only add a deref if there is no other possibility</p>",
        "id": 165567830,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557780622
    },
    {
        "content": "<p>ah; in that case, then it should be all good</p>",
        "id": 165568046,
        "sender_full_name": "centril",
        "timestamp": 1557780783
    }
]