[
    {
        "content": "<p>Hey all, I authored and published a small crate yesterday: <a href=\"https://docs.rs/async-convert/latest/async_convert/\">async-convert</a>. This provides async <code>TryInto</code> and <code>TryFrom</code> traits, inspired by something we are doing in the Azure SDK at work.</p>\n<p>I didn't expect this to be a thing, but upon examining what we were doing in the SDK \"generic async fallible conversion\" actually seems like a reasonable pattern. Not unlike <code>AsyncIterator::try_collect</code>. And it feels like it's once again one of those things where async intersects with some other well-established non-async pattern. Further solidifying the: \"hey, we should really figure out async overloading\", at least for me.</p>\n<p>There's not much actionable here for anyone, but I figured it might be interesting enough to share.  I still need to write the kick-off post for the \"async overloading initiative\", and I'm going to have to figure out how to communicate some of the more general issues this is an example of.</p>",
        "id": 274117835,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1646395037
    },
    {
        "content": "<p>Since you're redefining <code>TryInto</code> anyway you may as well make it work with turbofish at the same time:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[async_trait]</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">TryInto</span>: <span class=\"nb\">Sized</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">try_into</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">TryFrom</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">TryFrom</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span><span class=\"o\">&gt;&gt;</span>::<span class=\"n\">Error</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">T</span>::<span class=\"n\">try_from</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">).</span><span class=\"k\">await</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">TryInto</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>This forbids users from implementing <code>TryInto</code> and allows code like <code>req.try_into::&lt;Body&gt;().await</code>. Really, <code>Into</code> should've been defined this way but overly strict coherence rules meant it was necessary to use the generic version ðŸ¥²</p>",
        "id": 274186772,
        "sender_full_name": "Kestrer",
        "timestamp": 1646427193
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"360486\">@Kestrer</span> aren't there valid uses for wanting to implement <code>TryInto</code> sometimes? I feel like there have been times where I wanted to implement <code>TryFrom</code> but couldn't, so instead <code>TryInto</code> was the only option?</p>",
        "id": 274196047,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1646432277
    },
    {
        "content": "<p>I was under the impression that they were eliminated after <code>TryFrom&lt;LocalType&gt;</code> started to be treated as a local trait (and thus could be implemented for remote types) - I don't know of any case where implementing <code>Into</code> is still necessary.</p>",
        "id": 274236172,
        "sender_full_name": "Kestrer",
        "timestamp": 1646477679
    },
    {
        "content": "<p>Yeah, Iâ€™d expect the stdlib designed today to only have one or the other.</p>",
        "id": 274317434,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1646586940
    }
]