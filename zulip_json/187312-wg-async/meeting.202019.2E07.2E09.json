[
    {
        "content": "<p>Hey <span class=\"user-group-mention\" data-user-group-id=\"1172\">@WG-async-foundations</span> -- sync meeting?</p>",
        "id": 170470876,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562691722
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120134\">@Giles Cope</span> over in <a class=\"stream\" data-stream-id=\"201246\" href=\"/#narrow/stream/201246-wg-async-foundations.2Fbook\">#wg-async-foundations/book</a>, you wrote</p>\n<blockquote>\n<p>Sorry I've been busy. Things have calmed down a bit hopefully. Shall I just pick off some tests from the test list and add them? <a href=\"https://github.com/rust-lang/rust/issues/62121\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/62121\">https://github.com/rust-lang/rust/issues/62121</a></p>\n</blockquote>\n<p>but I imagine that was meant for this stream :)</p>",
        "id": 170470933,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562691758
    },
    {
        "content": "<p>I think that'd be awesome!</p>",
        "id": 170470942,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562691763
    },
    {
        "content": "<p>o/</p>",
        "id": 170470969,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1562691788
    },
    {
        "content": "<p>Reviewing briefly the <a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+is%3Aissue+label%3AA-async-await+-label%3AAsyncAwait-Blocking+-label%3AAsyncAwait-Deferred++-label%3AAsyncAwait-Unclear\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+is%3Aissue+label%3AA-async-await+-label%3AAsyncAwait-Blocking+-label%3AAsyncAwait-Deferred++-label%3AAsyncAwait-Unclear\">uncategorized issues</a> I see only one:</p>",
        "id": 170471008,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562691840
    },
    {
        "content": "<blockquote>\n<p>async fn with elided lifetime causes rustc panic <a href=\"https://github.com/rust-lang/rust/issues/62517\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/62517\">#62517</a></p>\n</blockquote>",
        "id": 170471059,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562691850
    },
    {
        "content": "<p>which..I guess I will categorize as blocking? I hope it's simple</p>",
        "id": 170471108,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562691911
    },
    {
        "content": "<p>on the topic of blocking, shall we look at the <a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+is%3Aissue+label%3AA-async-await+label%3AAsyncAwait-Blocking+\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+is%3Aissue+label%3AA-async-await+label%3AAsyncAwait-Blocking+\">blocking issues</a> and try to make sure we have a plan? I have thoughts on some of them</p>",
        "id": 170471128,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562691941
    },
    {
        "content": "<p>going from the bottom:</p>\n<blockquote>\n<p>Using associated types in async fn type break typing <a href=\"https://github.com/rust-lang/rust/issues/60414\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/60414\">#60414</a> </p>\n</blockquote>\n<p>has a <a href=\"https://github.com/rust-lang/rust/pull/62221\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/62221\">pending PR</a> that I think I will r+ :)</p>",
        "id": 170471219,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562692006
    },
    {
        "content": "<blockquote>\n<p>type inference doesn't work in async fn that return Box&lt;dyn SomeTrait&gt; <a href=\"https://github.com/rust-lang/rust/issues/60424\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/60424\">#60424</a> </p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> and I spent some time on this, it's tricky. I guess I want to ask: if we are not able to fix it, do we regard it as blocking? I feel like (on balance) it should not block stabilization, but I guess there <em>may</em> be some forward compat issues around this?</p>",
        "id": 170471274,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562692082
    },
    {
        "content": "<p>Not sure what those would be though</p>",
        "id": 170471321,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562692096
    },
    {
        "content": "<p>in general I think we accept strictly less than we otherwise would, but I can imagine it's possible to create some examples where behavior might change</p>",
        "id": 170471334,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562692113
    },
    {
        "content": "<p>Yeah I can't sort out how you'd make it compile but break if we fixed this</p>",
        "id": 170471339,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1562692119
    },
    {
        "content": "<p>(always true when we mess with inference/coercions)</p>",
        "id": 170471340,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562692120
    },
    {
        "content": "<p>because the issue here is that a necessary coercion isn't happening, triggering an error</p>",
        "id": 170471368,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1562692146
    },
    {
        "content": "<p>right</p>",
        "id": 170471379,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562692157
    },
    {
        "content": "<p>maybe I'll add the \"unclear\" tag to indicate our doubt (but keep blocking for now)</p>",
        "id": 170471403,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562692193
    },
    {
        "content": "<p>I did do a local build of the proposed change (and observe the same failures that <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> was getting), and I hope to at least look at what's going on, maybe there's a simple sol'n</p>",
        "id": 170471476,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562692212
    },
    {
        "content": "<p>Anything I can do to help/reduce the load, let me know.</p>",
        "id": 170471496,
        "sender_full_name": "davidtwco",
        "timestamp": 1562692232
    },
    {
        "content": "<p>I have other plans for you :P</p>",
        "id": 170471550,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562692296
    },
    {
        "content": "<p>yay?</p>",
        "id": 170471562,
        "sender_full_name": "davidtwco",
        "timestamp": 1562692304
    },
    {
        "content": "<p>Next issue:</p>\n<blockquote>\n<p>Inherent async fn returning <code>Self</code> treats type's lifetime parameters as <code>'static</code> <a href=\"https://github.com/rust-lang/rust/issues/61949\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/61949\">#61949</a> </p>\n</blockquote>\n<p>So as we discussed last time we can fix this either by forbidding <code>Self</code> or be trying to track what type it refers to. I lean towards the latter and was going to suggest that <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> or someone else might want to take a swing at it.</p>",
        "id": 170471645,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562692354
    },
    {
        "content": "<p>I guess I feel like i'd rather \"do the correct thing\" as long as it's not too terribly grody</p>",
        "id": 170471651,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562692364
    },
    {
        "content": "<p>I had <em>hoped</em> to leave a few notes on what that requires</p>",
        "id": 170471676,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562692378
    },
    {
        "content": "<p>I'm not sure what a solution for that would entail, but with some notes, I'd be happy to take a look.</p>",
        "id": 170471699,
        "sender_full_name": "davidtwco",
        "timestamp": 1562692402
    },
    {
        "content": "<p>Anyway, I wouldn't expect a lot of controversy on that? We can start a topic to discuss the details (I was planning on taking time after this mtg for that)</p>",
        "id": 170471701,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562692404
    },
    {
        "content": "<p>There is another aspect to this which I noted, which has to do with <code>T::Item</code> (when it expands to <code>&lt;T as Foo&lt;'a&gt;&gt;::Item</code>). This is a pre-existing issue from <code>impl Trait</code> <a href=\"https://github.com/rust-lang/rust/issues/51525\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/51525\">https://github.com/rust-lang/rust/issues/51525</a> and I don't think it necessarily needs to block here. I was however going to add some mentoring notes to basically make such scenarios an error for now so we can fix them later.</p>",
        "id": 170471831,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562692508
    },
    {
        "content": "<p>(The <code>Self</code> thing is also a pre-existing impl Trait issue, of course)</p>",
        "id": 170471854,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562692523
    },
    {
        "content": "<p>In any case, not <em>too</em> worried about those</p>",
        "id": 170471961,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562692589
    },
    {
        "content": "<p>That brings us to:</p>\n<blockquote>\n<p>increase test coverage for async-await <a href=\"https://github.com/rust-lang/rust/issues/62121\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/62121\">#62121</a> </p>\n</blockquote>\n<p>So what's the status here?</p>",
        "id": 170471979,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562692598
    },
    {
        "content": "<p>I wanted to maybe write some tests but found it a bit hard to figure out what to do, I have to admit, but I didn't look too hard</p>",
        "id": 170472000,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562692622
    },
    {
        "content": "<p>Status is I'll have another PR out pretty soon, but basically just \"add tests until all the bullets on that list have at least one dedicated test showing coverage\"</p>",
        "id": 170472038,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1562692660
    },
    {
        "content": "<p>How can we tell which ones have tests?</p>",
        "id": 170472117,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562692689
    },
    {
        "content": "<p>I guess just look in the directory and your PRs and try to match up?</p>",
        "id": 170472133,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562692711
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120134\">@Giles Cope</span> mentioned writing some tests earlier, maybe you want to delegate some to them?</p>",
        "id": 170472151,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562692729
    },
    {
        "content": "<p>Yup, although it'd be good to add comments / strikeouts on the doc for ones that are covered</p>",
        "id": 170472157,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1562692737
    },
    {
        "content": "<p>Yeah I was thinking ideal would be a checklist on the issue but strikeouts in the doc would work too</p>",
        "id": 170472170,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562692753
    },
    {
        "content": "<p>and would be less grunt work</p>",
        "id": 170472178,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562692762
    },
    {
        "content": "<p>I guess we discussed adding variants of the impl trait \"multi-lifetime\" tests for async functions</p>",
        "id": 170472200,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562692794
    },
    {
        "content": "<p>Yeah, a checklist box got added to the issue for that</p>",
        "id": 170472259,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1562692817
    },
    {
        "content": "<p>I saw</p>",
        "id": 170472267,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562692825
    },
    {
        "content": "<blockquote>\n<p>Move tests in <code>src/test/run-pass/async-await</code> -&gt; <code>src/test/ui/async-await</code> <a href=\"https://github.com/rust-lang/rust/issues/62236\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/62236\">#62236</a></p>\n</blockquote>",
        "id": 170472268,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562692827
    },
    {
        "content": "<p>has pending PR <a href=\"https://github.com/rust-lang/rust/pull/62270\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/62270\">https://github.com/rust-lang/rust/pull/62270</a></p>",
        "id": 170472281,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562692839
    },
    {
        "content": "<p>though with some strange error</p>",
        "id": 170472285,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562692842
    },
    {
        "content": "<p>(<span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span>, did you see that error?)</p>",
        "id": 170472313,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562692871
    },
    {
        "content": "<p>maybe just needs to be rebased etc</p>",
        "id": 170472315,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562692873
    },
    {
        "content": "<p>anyway doesn't seem like the most pressing concern ever :)</p>",
        "id": 170472322,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562692881
    },
    {
        "content": "<p>well, the error is weird. the moving of tests less so</p>",
        "id": 170472330,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562692889
    },
    {
        "content": "<p>Next up:</p>\n<blockquote>\n<p>Mutually recursive <code>async fn</code>s are hard to make <code>Send</code> <a href=\"https://github.com/rust-lang/rust/issues/62284\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/62284\">#62284</a> </p>\n</blockquote>\n<p>So this one worries me a bit. I'm not 100% sure though if it should be blocking. But I don't think we really have a plan to fix it?</p>",
        "id": 170472412,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562692929
    },
    {
        "content": "<p>It seems like recursive functions in general are harder than we would like -- at minimum I expect they merit a chapter in the book?</p>",
        "id": 170472437,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562692949
    },
    {
        "content": "<p>We should have a chapter like \"surprisingly hard things\" and talk about the (current) workarounds :)</p>",
        "id": 170472461,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562692966
    },
    {
        "content": "<p>^ this</p>",
        "id": 170472494,
        "sender_full_name": "Giles Cope",
        "timestamp": 1562692995
    },
    {
        "content": "<p>I personally would be satisfied with that for stabilization purposes</p>",
        "id": 170472497,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562692997
    },
    {
        "content": "<p>I'm fine of course if we can fix the issue too, though I think we will <em>still</em> need such a chapter probably since recursion in general is a bit tricky</p>",
        "id": 170472574,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562693046
    },
    {
        "content": "<p>filed  \"surprisingly hard things\" <a href=\"https://github.com/rust-lang/async-book/issues/22\" target=\"_blank\" title=\"https://github.com/rust-lang/async-book/issues/22\">async-book#22</a></p>",
        "id": 170472705,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562693153
    },
    {
        "content": "<p>Regarding recursive functions, we've always known (but I'm sure its not widely known) that you have to at least box them. Unfortunately right now you also have to erase their types because of implementation issues. Ideally you would just have to box them, for the same reason you can't have a recursive struct without indirection.</p>",
        "id": 170472873,
        "sender_full_name": "boats",
        "timestamp": 1562693257
    },
    {
        "content": "<p>Yes</p>",
        "id": 170472886,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562693270
    },
    {
        "content": "<p>So I didn't realize it</p>",
        "id": 170472887,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562693273
    },
    {
        "content": "<p>But it makes sense</p>",
        "id": 170472890,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562693275
    },
    {
        "content": "<p>In any case showing the correct \"recipe\" makes sense</p>",
        "id": 170472934,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562693285
    },
    {
        "content": "<p>Obviously TCO something something ideally there'd be some compiler transform to avoid it someday in the future in some cases, etc</p>",
        "id": 170472946,
        "sender_full_name": "boats",
        "timestamp": 1562693299
    },
    {
        "content": "<p>I was thinking about bigger refactorings we could do to make it so that <em>just</em> boxing suffices</p>",
        "id": 170472949,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562693300
    },
    {
        "content": "<p>but that's clearly out of scope</p>",
        "id": 170472973,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562693321
    },
    {
        "content": "<p>Do we generally agree then that \"solving\"  </p>\n<blockquote>\n<p>Mutually recursive <code>async fn</code>s are hard to make <code>Send</code> <a href=\"https://github.com/rust-lang/rust/issues/62284\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/62284\">#62284</a> </p>\n</blockquote>\n<p>is more of a \"nice to have\"?</p>",
        "id": 170473020,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562693369
    },
    {
        "content": "<p>(If we document)</p>",
        "id": 170473027,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562693374
    },
    {
        "content": "<p>for async recursion does the compiler give a helpful error if it's not boxed?</p>",
        "id": 170473109,
        "sender_full_name": "Giles Cope",
        "timestamp": 1562693410
    },
    {
        "content": "<p>not really</p>",
        "id": 170473146,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562693431
    },
    {
        "content": "<p>that could be another thing to shoot for</p>",
        "id": 170473154,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562693440
    },
    {
        "content": "<p>I'm not sure about that particular example, but it would be nice if there were some small changes (even just diagnostics like Giles suggests) we could make in scope to improve the experience with recursive functions</p>",
        "id": 170473210,
        "sender_full_name": "boats",
        "timestamp": 1562693494
    },
    {
        "content": "<p>some scenarios give you something like this (<a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=221c514a4af2ec73e1925eef602b8998\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=221c514a4af2ec73e1925eef602b8998\">playground</a>)</p>\n<div class=\"codehilite\"><pre><span></span>error[E0720]: opaque type expands to a recursive type\n --&gt; src/main.rs:6:24\n  |\n6 | async fn foo(n: usize) {\n  |                        ^ expands to self-referential type\n  |\n  = note: expanded type is `std::future::GenFuture&lt;[static generator@src/main.rs:6:24: 10:2 n:usize {usize, bool, std::pin::Pin&lt;std::boxed::Box&lt;impl std::future::Future&gt;&gt;, ()}]&gt;`\n</pre></div>",
        "id": 170473217,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562693501
    },
    {
        "content": "<p>clearly this could be more obvious :)</p>",
        "id": 170473233,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562693515
    },
    {
        "content": "<p>but the good news is that it suggests a clear-ish place to \"hook\"</p>",
        "id": 170473279,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562693526
    },
    {
        "content": "<p>oof the use of self-referential there is <em>not</em> helpful!</p>",
        "id": 170473283,
        "sender_full_name": "boats",
        "timestamp": 1562693530
    },
    {
        "content": "<p>i.e., an opaque type that arose from async fn</p>",
        "id": 170473285,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562693531
    },
    {
        "content": "<blockquote>\n<p>oof the use of self-referential there is <em>not</em> helpful!</p>\n</blockquote>\n<p>yeah, true, it's misleading, makes one think of <code>Pin</code></p>",
        "id": 170473306,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562693549
    },
    {
        "content": "<p>exactly</p>",
        "id": 170473321,
        "sender_full_name": "boats",
        "timestamp": 1562693557
    },
    {
        "content": "<p>if you search it you'll get really useless info that will confuse you</p>",
        "id": 170473333,
        "sender_full_name": "boats",
        "timestamp": 1562693569
    },
    {
        "content": "<p>(I withdraw the word \"realistic\" I used -- I meant more like \"naive attempts at recursion\")</p>",
        "id": 170473340,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562693574
    },
    {
        "content": "<p>should we file an issue on the diagnostic then?</p>",
        "id": 170473358,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562693584
    },
    {
        "content": "<p>sounds reasonable to me, <span class=\"user-mention\" data-user-id=\"120134\">@Giles Cope</span> are you interested in maybe tackling it?</p>",
        "id": 170473372,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562693593
    },
    {
        "content": "<p>Yea, adding a special note in that case seems really doable</p>",
        "id": 170473375,
        "sender_full_name": "boats",
        "timestamp": 1562693594
    },
    {
        "content": "<p>yeah, I like great error messages, I'll have a crack</p>",
        "id": 170473403,
        "sender_full_name": "Giles Cope",
        "timestamp": 1562693618
    },
    {
        "content": "<p>If you put in the issue what you'd like it to say that would be even better.</p>",
        "id": 170473487,
        "sender_full_name": "Giles Cope",
        "timestamp": 1562693654
    },
    {
        "content": "<p>filing an issue now</p>",
        "id": 170473494,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562693660
    },
    {
        "content": "<p>I'm really confused by the send issue because its got async fns returning futures..</p>",
        "id": 170473556,
        "sender_full_name": "boats",
        "timestamp": 1562693714
    },
    {
        "content": "<p>filed <a href=\"https://github.com/rust-lang/rust/issues/62539\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/62539\">https://github.com/rust-lang/rust/issues/62539</a></p>",
        "id": 170473608,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562693752
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120134\">@Giles Cope</span> maybe self-assign in that issue</p>",
        "id": 170473622,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562693760
    },
    {
        "content": "<blockquote>\n<p>I'm really confused by the send issue because its got async fns returning futures..</p>\n</blockquote>\n<p>yeah I discussed that some with <span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span>, I think it's kind of a \"pseduo-stream\" thing going on. I'm not clear on whether we can improve diagnostics in <em>that</em> case or not.</p>",
        "id": 170473694,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562693783
    },
    {
        "content": "<p>Okay, I see. I don't think this should block stabilization because its not \"normal recursion\"</p>",
        "id": 170473746,
        "sender_full_name": "boats",
        "timestamp": 1562693821
    },
    {
        "content": "<blockquote>\n<p>anyway doesn't seem like the most pressing concern ever <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>\n</blockquote>\n<p>Not sure why you labeled it as blocking</p>",
        "id": 170473752,
        "sender_full_name": "centril",
        "timestamp": 1562693825
    },
    {
        "content": "<p>I intended the issue as \"cleanup\"</p>",
        "id": 170473759,
        "sender_full_name": "centril",
        "timestamp": 1562693833
    },
    {
        "content": "<p>but the WASM test failure doesn't look good on the other hand</p>",
        "id": 170473769,
        "sender_full_name": "centril",
        "timestamp": 1562693843
    },
    {
        "content": "<p>Like if you couldnt write an adapter which boxes your straightforward recursive call, that would seem like a blocker to me</p>",
        "id": 170473780,
        "sender_full_name": "boats",
        "timestamp": 1562693854
    },
    {
        "content": "<p>Possibly suggesting something unsound going on?</p>",
        "id": 170473782,
        "sender_full_name": "centril",
        "timestamp": 1562693855
    },
    {
        "content": "<p>(context being <a href=\"https://github.com/rust-lang/rust/pull/62270\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/62270\">https://github.com/rust-lang/rust/pull/62270</a>)</p>",
        "id": 170473878,
        "sender_full_name": "centril",
        "timestamp": 1562693897
    },
    {
        "content": "<blockquote>\n<p>Not sure why you labeled it as blocking</p>\n</blockquote>\n<p>I guess I figured it'd get closed quick :)</p>",
        "id": 170473972,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562693970
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> that's probably true ;)</p>",
        "id": 170474002,
        "sender_full_name": "centril",
        "timestamp": 1562693985
    },
    {
        "content": "<p>One unclear issue to triage: <a href=\"https://github.com/rust-lang/rust/issues/62506\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/62506\">https://github.com/rust-lang/rust/issues/62506</a></p>",
        "id": 170474185,
        "sender_full_name": "centril",
        "timestamp": 1562694104
    },
    {
        "content": "<p>Seems blocking since it's an ICE in the surface we want to stabilize</p>",
        "id": 170474262,
        "sender_full_name": "centril",
        "timestamp": 1562694139
    },
    {
        "content": "<p>Fun</p>",
        "id": 170474277,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562694161
    },
    {
        "content": "<p>Yeah, probably. It seems to be an error related to the stuff that is captured across an await point being incorrectly predicated</p>",
        "id": 170474305,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562694179
    },
    {
        "content": "<p><em>Perhaps</em> arising from <span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span>'s PR that tweaked the visitor order</p>",
        "id": 170474339,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562694207
    },
    {
        "content": "<p>labeling as such and ccing tmandry / matthewjasper</p>",
        "id": 170474356,
        "sender_full_name": "centril",
        "timestamp": 1562694211
    },
    {
        "content": "<p>a first step would be to minimize</p>",
        "id": 170474448,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562694279
    },
    {
        "content": "<p>it's currently embedded in some bigger project</p>",
        "id": 170474451,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562694286
    },
    {
        "content": "<p>I can minimise it if you want.</p>",
        "id": 170474519,
        "sender_full_name": "Giles Cope",
        "timestamp": 1562694335
    },
    {
        "content": "<p>That'd be <span aria-label=\"100\" class=\"emoji emoji-1f4af\" role=\"img\" title=\"100\">:100:</span></p>",
        "id": 170474534,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562694343
    },
    {
        "content": "<p>OK, well, we're out of time, but <span class=\"user-mention\" data-user-id=\"120134\">@Giles Cope</span> if you want to take a crack at minimizing it, I'm sure it'd be quite helpful</p>",
        "id": 170474548,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562694355
    },
    {
        "content": "<p>will do</p>",
        "id": 170474603,
        "sender_full_name": "Giles Cope",
        "timestamp": 1562694369
    },
    {
        "content": "<p>Seems like we got through everything but the async unsafe fn question, but I think that's not really something we should discuss in this meeting anyhow</p>",
        "id": 170474609,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562694373
    },
    {
        "content": "<p>thanks all! <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 170474835,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562694535
    },
    {
        "content": "<p>\\o</p>",
        "id": 170474849,
        "sender_full_name": "centril",
        "timestamp": 1562694547
    },
    {
        "content": "<blockquote>\n<p>(<span class=\"user-mention silent\" data-user-id=\"116883\">tmandry</span>, did you see that error?)</p>\n</blockquote>\n<p>yes I did and was able to reproduce locally. I think some change exposed an existing place where we assume all variant layouts are enums</p>",
        "id": 170479942,
        "sender_full_name": "tmandry",
        "timestamp": 1562698120
    },
    {
        "content": "<p>^ actually nevermind, that was something else</p>",
        "id": 170491810,
        "sender_full_name": "tmandry",
        "timestamp": 1562707421
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 170491813,
        "sender_full_name": "tmandry",
        "timestamp": 1562707431
    }
]