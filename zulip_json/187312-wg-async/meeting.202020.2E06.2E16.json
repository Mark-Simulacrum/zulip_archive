[
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1172\">@WG-async-foundations</span> meeting!</p>",
        "id": 201045001,
        "sender_full_name": "tmandry",
        "timestamp": 1592326859
    },
    {
        "content": "<p><a href=\"https://github.com/orgs/rust-lang/projects/2\">Project board</a></p>",
        "id": 201045170,
        "sender_full_name": "tmandry",
        "timestamp": 1592326924
    },
    {
        "content": "<p>3 issues closed this week:</p>\n<ul>\n<li>ICE: src/librustc_typeck/check/generator_interior.rs:204: impossible case reached <a href=\"https://github.com/rust-lang/rust/issues/73050\">#73050</a></li>\n<li>Add a <code>MustUse</code> trait to complement <code>#[must_use]</code> <a href=\"https://github.com/rust-lang/rust/issues/71816\">#71816</a></li>\n<li>Improve error message for \"return type cannot contain a projection or <code>Self</code>...\" <a href=\"https://github.com/rust-lang/rust/issues/69276\">#69276</a></li>\n</ul>",
        "id": 201045241,
        "sender_full_name": "tmandry",
        "timestamp": 1592326955
    },
    {
        "content": "<p>Although <a href=\"https://github.com/rust-lang/rust/issues/71816\">#71816</a> was more \"withdrawn\" than closed</p>",
        "id": 201045320,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592327000
    },
    {
        "content": "<p>Oh, yes :)</p>",
        "id": 201045364,
        "sender_full_name": "tmandry",
        "timestamp": 1592327021
    },
    {
        "content": "<p>Not sure if we should leave it closed or not</p>",
        "id": 201045434,
        "sender_full_name": "tmandry",
        "timestamp": 1592327046
    },
    {
        "content": "<p>Anyone blocked or stuck on ongoing work?</p>",
        "id": 201045485,
        "sender_full_name": "tmandry",
        "timestamp": 1592327069
    },
    {
        "content": "<p>Not blocked exactly. <span class=\"user-mention\" data-user-id=\"225192\">@Nell Shamrell-Harrington</span> and I did some work towards <a href=\"https://github.com/rust-lang/rust/issues/66731\">#66731</a></p>",
        "id": 201045608,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592327139
    },
    {
        "content": "<p>Right now I'm doing something for chalk but I'd like to ask if there are any async-foundation related issues I could help with after</p>",
        "id": 201045627,
        "sender_full_name": "mental",
        "timestamp": 1592327148
    },
    {
        "content": "<p>I did a bit of investigation into <a href=\"https://github.com/rust-lang/rust/issues/71723\">#71723</a> but haven't quite figured it out yet</p>",
        "id": 201045636,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592327152
    },
    {
        "content": "<p>I think you mean a different issue than <a href=\"https://github.com/rust-lang/rust/issues/71721\">#71721</a></p>",
        "id": 201045756,
        "sender_full_name": "tmandry",
        "timestamp": 1592327204
    },
    {
        "content": "<p>I made some progress on <a href=\"https://github.com/rust-lang/rust/issues/72247\">#72247</a> but think it could use some LLVM expertise to continue</p>",
        "id": 201045823,
        "sender_full_name": "tmandry",
        "timestamp": 1592327261
    },
    {
        "content": "<p>seems unlikely that I'll be able to keep pushing that one forward right now</p>",
        "id": 201045909,
        "sender_full_name": "tmandry",
        "timestamp": 1592327299
    },
    {
        "content": "<p>Checking blocked issues</p>",
        "id": 201045963,
        "sender_full_name": "tmandry",
        "timestamp": 1592327340
    },
    {
        "content": "<h2>Async execution can get lost during refactoring <a href=\"https://github.com/rust-lang/rust/issues/71368\">#71368</a></h2>",
        "id": 201045976,
        "sender_full_name": "tmandry",
        "timestamp": 1592327347
    },
    {
        "content": "<p>I think maybe this one was marked blocked on <a href=\"https://github.com/rust-lang/rust/issues/71816\">#71816</a> which was closed?</p>",
        "id": 201046057,
        "sender_full_name": "tmandry",
        "timestamp": 1592327384
    },
    {
        "content": "<p>right</p>",
        "id": 201046064,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592327387
    },
    {
        "content": "<p>but there's also <a href=\"https://github.com/rust-lang/rust/issues/67387\">#67387</a></p>",
        "id": 201046167,
        "sender_full_name": "tmandry",
        "timestamp": 1592327424
    },
    {
        "content": "<p>yeah so</p>",
        "id": 201046186,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592327436
    },
    {
        "content": "<p>there are different ways to address the problem</p>",
        "id": 201046199,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592327441
    },
    {
        "content": "<p>certainly we could do a \"small extension\" to just a few specific types</p>",
        "id": 201046209,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592327451
    },
    {
        "content": "<p>and then there are various more expansive possibilities</p>",
        "id": 201046240,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592327467
    },
    {
        "content": "<p>I think my preference was to make a small extension to <code>Pin</code> and <code>Option</code>, personally</p>",
        "id": 201046248,
        "sender_full_name": "tmandry",
        "timestamp": 1592327475
    },
    {
        "content": "<p>it certainly seems 'harmless'</p>",
        "id": 201046308,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592327518
    },
    {
        "content": "<p>and one could view the <code>MustUsed</code> trait that was proposed as an impl detail</p>",
        "id": 201046379,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592327532
    },
    {
        "content": "<p>yeah</p>",
        "id": 201046394,
        "sender_full_name": "tmandry",
        "timestamp": 1592327543
    },
    {
        "content": "<p>anyway I would favor a limited move to extend to <code>PIn</code> and <code>Option</code> in whatever way</p>",
        "id": 201046428,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592327558
    },
    {
        "content": "<p>and <span class=\"user-mention\" data-user-id=\"310140\">@mental</span> that might be an issue you could pick up if desired:)</p>",
        "id": 201046440,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592327566
    },
    {
        "content": "<p>I'm going to move this issue back to On Deck</p>",
        "id": 201046474,
        "sender_full_name": "tmandry",
        "timestamp": 1592327586
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <a href=\"https://github.com/rust-lang/rust/issues/67387\">#67387</a>?</p>",
        "id": 201046502,
        "sender_full_name": "mental",
        "timestamp": 1592327606
    },
    {
        "content": "<p>I wonder if we want a \"meta-issue\"</p>",
        "id": 201046603,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592327643
    },
    {
        "content": "<p>yeah, <span class=\"user-mention\" data-user-id=\"310140\">@mental</span> that one and <a href=\"https://github.com/rust-lang/rust/issues/71368\">#71368</a> track very similar issues, which we might want to tackle together</p>",
        "id": 201046617,
        "sender_full_name": "tmandry",
        "timestamp": 1592327650
    },
    {
        "content": "<p>to cover both the <code>Pin</code> and <code>Option</code> cases</p>",
        "id": 201046620,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592327652
    },
    {
        "content": "<p>I can make one</p>",
        "id": 201046678,
        "sender_full_name": "tmandry",
        "timestamp": 1592327693
    },
    {
        "content": "<p>Ah right, cheers! I'll keep an eye out.<br>\nout of curiosity, would the strategy for those be merging on after another or rolling them up together in a third separate PR then?</p>",
        "id": 201046790,
        "sender_full_name": "mental",
        "timestamp": 1592327749
    },
    {
        "content": "<p>probably just making one PR to address both cases at once</p>",
        "id": 201046924,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592327819
    },
    {
        "content": "<p>it's a bit unclear what the best impl strategy is</p>",
        "id": 201046959,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592327838
    },
    {
        "content": "<p>Extend <code>#[must_use]</code> to more types <a href=\"https://github.com/rust-lang/rust/issues/73417\">#73417</a></p>",
        "id": 201046963,
        "sender_full_name": "tmandry",
        "timestamp": 1592327839
    },
    {
        "content": "<p>Okay, let's take a look at new issues</p>",
        "id": 201047077,
        "sender_full_name": "tmandry",
        "timestamp": 1592327887
    },
    {
        "content": "<p><a href=\"https://github.com/search?q=org%3Arust-lang+is%3Aissue+label%3AA-async-await+is%3Aopen+-label%3AAsyncAwait-Triaged&amp;type=Issues\">New issues</a></p>",
        "id": 201047100,
        "sender_full_name": "tmandry",
        "timestamp": 1592327908
    },
    {
        "content": "<h2>Clarify the behavior of std::task::Waker and Future::Poll <a href=\"https://github.com/rust-lang/rust/issues/73002\">#73002</a></h2>",
        "id": 201047124,
        "sender_full_name": "tmandry",
        "timestamp": 1592327925
    },
    {
        "content": "<p>maybe this is something we can do in the async book</p>",
        "id": 201047275,
        "sender_full_name": "tmandry",
        "timestamp": 1592328009
    },
    {
        "content": "<p>yeah, possibly. I'm finding that issue a bit hard to follow.</p>",
        "id": 201047349,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592328058
    },
    {
        "content": "<p>or in the API docs</p>",
        "id": 201047351,
        "sender_full_name": "tmandry",
        "timestamp": 1592328059
    },
    {
        "content": "<p>that's a good idea!</p>",
        "id": 201047354,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1592328060
    },
    {
        "content": "<p>yeah.. it's kind of hard to know if we've addressed it or not</p>",
        "id": 201047400,
        "sender_full_name": "tmandry",
        "timestamp": 1592328078
    },
    {
        "content": "<p>I'm wondering if the quote from the docs is correct?</p>",
        "id": 201047431,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1592328091
    },
    {
        "content": "<blockquote>\n<p>Note that on multiple calls to poll, only the Waker from the Context passed to the most recent call should be scheduled to receive a wakeup.</p>\n</blockquote>",
        "id": 201047433,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1592328092
    },
    {
        "content": "<p>I think so?</p>",
        "id": 201047536,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592328126
    },
    {
        "content": "<p>The idea as I understand it is that you don't have to keep around all the wakers</p>",
        "id": 201047551,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592328137
    },
    {
        "content": "<p>I think that's right. In particular, when <code>Poll::Pending</code> is returned, the contract is that whatever Waker was passed in to _that_ call was scheduled to be woken up.</p>",
        "id": 201047577,
        "sender_full_name": "tmandry",
        "timestamp": 1592328151
    },
    {
        "content": "<p>that's a better way to phrase it, I think</p>",
        "id": 201047633,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592328182
    },
    {
        "content": "<p>anyway, I'm not quite sure what to do with this issue :)</p>",
        "id": 201047673,
        "sender_full_name": "tmandry",
        "timestamp": 1592328202
    },
    {
        "content": "<p>given that the fn is <code>&amp;mut self</code>, there is really only one call at a time to any given future</p>",
        "id": 201047677,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592328204
    },
    {
        "content": "<p>I guess where I'm coming from is that the way it reads it seems to describe behavior of the executor -- and b/c Rust doesn't ship with one it's not quite a guarantee but more of a recommendation of how things ought to be.</p>",
        "id": 201047810,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1592328262
    },
    {
        "content": "<p>(I may be straying a bit with my train of thought here tho)</p>",
        "id": 201047818,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1592328267
    },
    {
        "content": "<p>I'm going to mark \"triaged\", but if anyone wants to dig in with the poster to how we can improve the documentation please feel free</p>",
        "id": 201047861,
        "sender_full_name": "tmandry",
        "timestamp": 1592328291
    },
    {
        "content": "<h2>Indexing via <code>index</code> method and <code>[idx]</code> sugar works differently in <code>async</code> blocks/functions <a href=\"https://github.com/rust-lang/rust/issues/72956\">#72956</a></h2>",
        "id": 201047891,
        "sender_full_name": "tmandry",
        "timestamp": 1592328308
    },
    {
        "content": "<p>I suspect this is a \"duplicate\" of \"imprecision in terms of what is live across an await\"</p>",
        "id": 201047963,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592328350
    },
    {
        "content": "<p>we have a kind of \"representative\" issue for that somewhere, although I feel like it has some kind of random name</p>",
        "id": 201048053,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592328381
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/69663\">#69663</a>, I think</p>",
        "id": 201048114,
        "sender_full_name": "tmandry",
        "timestamp": 1592328413
    },
    {
        "content": "<p>that said, I don't know for sure</p>",
        "id": 201048122,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592328417
    },
    {
        "content": "<p>oh, that's a good name</p>",
        "id": 201048141,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592328427
    },
    {
        "content": "<p>yeah, I think you're right that this is an instance of that issue</p>",
        "id": 201048283,
        "sender_full_name": "tmandry",
        "timestamp": 1592328489
    },
    {
        "content": "<p>added this one as an example</p>",
        "id": 201048293,
        "sender_full_name": "tmandry",
        "timestamp": 1592328495
    },
    {
        "content": "<p>I'm sure it is -- I still wonder if we could make some progress there by improving the approximation</p>",
        "id": 201048327,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592328514
    },
    {
        "content": "<p>but it might relate specifically to how we handle indexing in the HIR</p>",
        "id": 201048340,
        "sender_full_name": "tmandry",
        "timestamp": 1592328520
    },
    {
        "content": "<p>rather than the \"perfect\" fix of somehow getting precise results from MIR</p>",
        "id": 201048343,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592328522
    },
    {
        "content": "<p>right, exactly</p>",
        "id": 201048348,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592328525
    },
    {
        "content": "<p>I feel like we've not explored the \"incremental improvement\" path as much as we ought to</p>",
        "id": 201048370,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592328536
    },
    {
        "content": "<p>that's fair</p>",
        "id": 201048384,
        "sender_full_name": "tmandry",
        "timestamp": 1592328543
    },
    {
        "content": "<p>I could see this being added as On Deck since it seems like it might be fairly easy to fix</p>",
        "id": 201048452,
        "sender_full_name": "tmandry",
        "timestamp": 1592328580
    },
    {
        "content": "<p>but it's also not <em>super</em> high priority unless other people are hitting it</p>",
        "id": 201048484,
        "sender_full_name": "tmandry",
        "timestamp": 1592328601
    },
    {
        "content": "<p>I'll claim it as a possible mentor issue</p>",
        "id": 201048599,
        "sender_full_name": "tmandry",
        "timestamp": 1592328629
    },
    {
        "content": "<p>since it seems like it might lend itself to that</p>",
        "id": 201048617,
        "sender_full_name": "tmandry",
        "timestamp": 1592328637
    },
    {
        "content": "<p>\"this\" here is <em>this particular instance</em></p>",
        "id": 201048649,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592328654
    },
    {
        "content": "<p>not the more general issue I guess?</p>",
        "id": 201048656,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592328658
    },
    {
        "content": "<p>yes</p>",
        "id": 201048670,
        "sender_full_name": "tmandry",
        "timestamp": 1592328663
    },
    {
        "content": "<p>I'm in favor of starting with this one, it may also suggest to you ways to improve the more general case</p>",
        "id": 201048692,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592328671
    },
    {
        "content": "<p>right. sounds good</p>",
        "id": 201048703,
        "sender_full_name": "tmandry",
        "timestamp": 1592328679
    },
    {
        "content": "<p>I can't remember now but I feel like the last time I looked at it, I had the sense that there was a lot of room to do better</p>",
        "id": 201048712,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592328683
    },
    {
        "content": "<p>last new issue</p>",
        "id": 201048773,
        "sender_full_name": "tmandry",
        "timestamp": 1592328713
    },
    {
        "content": "<h2>lifecycle infer wrong <a href=\"https://github.com/rust-lang/rust/issues/69367\">#69367</a></h2>",
        "id": 201048781,
        "sender_full_name": "tmandry",
        "timestamp": 1592328717
    },
    {
        "content": "<p>Seems not an async issue?</p>",
        "id": 201048880,
        "sender_full_name": "csmoe",
        "timestamp": 1592328752
    },
    {
        "content": "<p>it might be possible to reproduce outside of an async fn</p>",
        "id": 201048995,
        "sender_full_name": "tmandry",
        "timestamp": 1592328825
    },
    {
        "content": "<p>not sure yet</p>",
        "id": 201049002,
        "sender_full_name": "tmandry",
        "timestamp": 1592328830
    },
    {
        "content": "<p>yeah, seems likely</p>",
        "id": 201049098,
        "sender_full_name": "tmandry",
        "timestamp": 1592328877
    },
    {
        "content": "<p>might be</p>",
        "id": 201049132,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592328904
    },
    {
        "content": "<p>yeah, confirmed</p>",
        "id": 201049185,
        "sender_full_name": "tmandry",
        "timestamp": 1592328933
    },
    {
        "content": "<p>but wait</p>",
        "id": 201049288,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592328982
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">try_set_lock1</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">guard</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"mf\">0.</span><span class=\"n\">read</span><span class=\"p\">().</span><span class=\"k\">await</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">guard</span><span class=\"p\">.</span><span class=\"n\">file_handle</span><span class=\"p\">.</span><span class=\"n\">try_lock</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">ret</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 201049306,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592328990
    },
    {
        "content": "<p>this function does not error</p>",
        "id": 201049315,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592328993
    },
    {
        "content": "<p>is the point that <code>try_set_lock0</code> errors?</p>",
        "id": 201049336,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592329006
    },
    {
        "content": "<p>yes, the same happens in this <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=efbf3a046a8d1801cc3559ba28331368\">non-async version</a></p>",
        "id": 201049349,
        "sender_full_name": "tmandry",
        "timestamp": 1592329012
    },
    {
        "content": "<p>if so, that's not wrong, just .. surprising</p>",
        "id": 201049352,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592329013
    },
    {
        "content": "<p>I wonder if I can find the issue but</p>",
        "id": 201049392,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592329032
    },
    {
        "content": "<p>it comes down to the rule that says that temporaries created in the tail expression of a block</p>",
        "id": 201049406,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592329040
    },
    {
        "content": "<p>are freed in the enclosing scope</p>",
        "id": 201049419,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592329046
    },
    {
        "content": "<p>(a rule I've debated trying to change in a Rust 2021 edition, but I don't know how easy/hard it would be to do)</p>",
        "id": 201049441,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592329064
    },
    {
        "content": "<p>ah yeah, that'll do it</p>",
        "id": 201049500,
        "sender_full_name": "tmandry",
        "timestamp": 1592329083
    },
    {
        "content": "<p>I felt like we had an issue for this</p>",
        "id": 201049567,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592329133
    },
    {
        "content": "<p>but maybe it got closed</p>",
        "id": 201049572,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592329135
    },
    {
        "content": "<p>It's a bit annoying to move things to a let statement</p>",
        "id": 201049597,
        "sender_full_name": "csmoe",
        "timestamp": 1592329153
    },
    {
        "content": "<p>oh also <span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> I came across this <a href=\"https://github.com/rust-lang/rust/issues/30127\">https://github.com/rust-lang/rust/issues/30127</a></p>",
        "id": 201049617,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592329163
    },
    {
        "content": "<p>I wonder if that's related to the other issue</p>",
        "id": 201049639,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592329172
    },
    {
        "content": "<p>oh, interesting</p>",
        "id": 201049756,
        "sender_full_name": "tmandry",
        "timestamp": 1592329234
    },
    {
        "content": "<p>Linked to it to investigate later. thanks</p>",
        "id": 201050201,
        "sender_full_name": "tmandry",
        "timestamp": 1592329480
    },
    {
        "content": "<p>I'm also commenting on <a href=\"https://github.com/rust-lang/rust/issues/69367\">#69367</a> with what you said</p>",
        "id": 201050218,
        "sender_full_name": "tmandry",
        "timestamp": 1592329496
    },
    {
        "content": "<p>I've let the meeting go way past time already, but anyway, thanks again to everyone who came <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 201050697,
        "sender_full_name": "tmandry",
        "timestamp": 1592329748
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211722\">Yoshua Wuyts</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/meeting.202020.2E06.2E16/near/201047810\">said</a>:</p>\n<blockquote>\n<p>I guess where I'm coming from is that the way it reads it seems to describe behavior of the executor -- and b/c Rust doesn't ship with one it's not quite a guarantee but more of a recommendation of how things ought to be.</p>\n</blockquote>\n<p>It's not executor related - it's just the general contract of <code>Future</code>s to store and care about the latest <code>Waker</code>. I'm not the biggest fan of it, since it requires a bunch of expensive work whenever someone polls again to update the Waker (and <code>Waker::will_wake</code> is unfortuantely kind of broken). </p>\n<p>You will need the functionality mostly if you move futures between tasks while they haven't returned ready yet. For all other use-cases I haven't seen any executor updating the <code>Waker</code> they pass to <code>Future</code>s, so reusing them would have been fine.</p>\n<p>I think in a hypothetical <code>Future</code>s 2.0 one could require Futures  to be<code>!Send</code> and require that executors always pass the same <code>Waker</code>. but for compatibility purposes we can't change the current system.</p>",
        "id": 201072645,
        "sender_full_name": "Matthias247",
        "timestamp": 1592340863
    }
]