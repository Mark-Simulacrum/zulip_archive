[
    {
        "content": "<p>Is there a meeting today?</p>",
        "id": 165640559,
        "sender_full_name": "davidtwco",
        "timestamp": 1557853505
    },
    {
        "content": "<p>cc <span class=\"user-group-mention\" data-user-group-id=\"1172\">@WG-async-await</span></p>",
        "id": 165640571,
        "sender_full_name": "davidtwco",
        "timestamp": 1557853512
    },
    {
        "content": "<p>My calendar has an event for just now.</p>",
        "id": 165640609,
        "sender_full_name": "davidtwco",
        "timestamp": 1557853538
    },
    {
        "content": "<p>I suppose not. For anyone who shows up later, here's my update for this past week:</p>\n<ul>\n<li>Fixed more fallout from the drop order PRs in <a href=\"https://github.com/rust-lang/rust/issues/60676\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/60676\">#60676</a>.</li>\n<li>Blocked on <a href=\"https://github.com/rust-lang/rust/issues/54326\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54326\">#54326</a>, need to work out how to fix the diagnostic issue, see <a href=\"#narrow/stream/187312-t-compiler.2Fwg-async-await/topic/mismatched.20types.20diag.20.2354326/near/165075226\" title=\"#narrow/stream/187312-t-compiler.2Fwg-async-await/topic/mismatched.20types.20diag.20.2354326/near/165075226\">this topic</a>.</li>\n</ul>",
        "id": 165641229,
        "sender_full_name": "davidtwco",
        "timestamp": 1557853925
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> did you have a chance to look into the lifetime issues on friday?</p>",
        "id": 165641874,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1557854363
    },
    {
        "content": "<p>On <a href=\"https://github.com/rust-lang/rust/issues/52924\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/52924\">#52924</a> I'm nearly done, pending some discussion around the semantics of <code>drop</code> and <code>StorageDead</code> (see <a href=\"#narrow/stream/187312-t-compiler.2Fwg-async-await/topic/drop.20unwind.20soundness\" title=\"#narrow/stream/187312-t-compiler.2Fwg-async-await/topic/drop.20unwind.20soundness\">this topic</a>)</p>",
        "id": 165647437,
        "sender_full_name": "tmandry",
        "timestamp": 1557857894
    },
    {
        "content": "<p>I plan to open a PR with only the MIR/analysis changes so we can discuss</p>",
        "id": 165647460,
        "sender_full_name": "tmandry",
        "timestamp": 1557857913
    },
    {
        "content": "<p>Sorry I've been ill, but better now. Shrank the problem to a smaller repro - I think the question is firstly is the span_bug! definitely a span_bug in this case as it's an existential type so maybe you wouldn't expect the type to be defined at that point?</p>",
        "id": 166191805,
        "sender_full_name": "Giles Cope",
        "timestamp": 1558458738
    },
    {
        "content": "<p>One thing I am very conscious of is that once we ship async await the very next thing people will be asking for / expecting is streams created by some form of async/generator/yield construct. At the moment what we're shipping supports Future but as far as I can see doesn't really support Stream.</p>",
        "id": 166192151,
        "sender_full_name": "Giles Cope",
        "timestamp": 1558458982
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120134\">@Giles Cope</span> It's fairly easy to add support for Stream. the issue is that a proper definition of the <code>stream</code> trait is one which requires GATs</p>",
        "id": 166192453,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1558459206
    },
    {
        "content": "<p>It's actually just a small handful of lines to make the existing system create asynchronous generators that implement the current Stream trait</p>",
        "id": 166192499,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1558459246
    },
    {
        "content": "<p>it's a lot more work to make it support a hypothetical Stream + borrowing</p>",
        "id": 166192511,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1558459258
    },
    {
        "content": "<p>Yep GAT looks non-trivial. I guess releasing non-borrowable async streams probably isn't a good idea incase the implications of the borrowed async streams might take us in a different direction and we ended up with two ways of doing things...</p>",
        "id": 166194473,
        "sender_full_name": "Giles Cope",
        "timestamp": 1558460335
    }
]