[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"126931\">@centril</span> (just in case you missed this in your GitHub notifications), any thoughts on what to do about the breakage from <a href=\"https://github.com/rust-lang/rust/issues/64292\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/64292\">#64292</a>?</p>",
        "id": 175532208,
        "sender_full_name": "davidtwco",
        "timestamp": 1568297153
    },
    {
        "content": "<p>I saw the notification but didn't read up on it yet</p>",
        "id": 175532265,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568297176
    },
    {
        "content": "<p>(haven't processed it yet sorry)</p>",
        "id": 175532267,
        "sender_full_name": "centril",
        "timestamp": 1568297177
    },
    {
        "content": "<p>(I've kind of gotten my GH notifications \"under control-ish\", at least if my name or a team is mentioned)</p>",
        "id": 175532274,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568297185
    },
    {
        "content": "<p>No worries, just wanted to make sure you saw it.</p>",
        "id": 175532343,
        "sender_full_name": "davidtwco",
        "timestamp": 1568297238
    },
    {
        "content": "<p>seems ungreat, though</p>",
        "id": 175532358,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568297249
    },
    {
        "content": "<p>argh.</p>",
        "id": 175532366,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568297258
    },
    {
        "content": "<p>I guess I can imagine why this is happening</p>",
        "id": 175532369,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568297261
    },
    {
        "content": "<p>we have a bug around NLL to kind of look into whether we can some similar cases</p>",
        "id": 175532433,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568297287
    },
    {
        "content": "<p>have to go find it</p>",
        "id": 175532435,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568297289
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> can you open an issue on the breakage?</p>",
        "id": 175532822,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568297574
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/64391\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/64391\">https://github.com/rust-lang/rust/issues/64391</a> has already been opened</p>",
        "id": 175532841,
        "sender_full_name": "davidtwco",
        "timestamp": 1568297591
    },
    {
        "content": "<p>ok</p>",
        "id": 175532848,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568297598
    },
    {
        "content": "<p>so um I realized last night that we kind of dropped the ball on this (too many balls) --</p>",
        "id": 175809275,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568638882
    },
    {
        "content": "<p>So </p>\n<p>cc <span class=\"user-group-mention\" data-user-group-id=\"1172\">@WG-async-foundations</span> but also<br>\ncc lang-team: <span class=\"user-mention\" data-user-id=\"126931\">@centril</span>, <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span>, <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span>, <span class=\"user-mention\" data-user-id=\"203289\">@boats</span>, <span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> but also<br>\nespecially cc <span class=\"user-mention\" data-user-id=\"215333\">@Florian Gilcher</span>, as I think this presents a \"schedule risk\" to stabilizing async-await, and I'm sure you'd like to know =)</p>\n<p>It seems pretty important that we decide whether this breakage is acceptable and if we're going to change anything about it. Unfortunately, this is a pretty thorny area overall (one we've long hoped to try and tweak, though I don't hold out a ton of hope).</p>\n<p>The TL;DR is that we have to decide how <code>foo.await</code> interacts with the temporary rules. Unfortunately, this is the kind of issue that is quite hard to assess in the abstract. We <em>thought</em> we'd made the right decision before in fixing <a href=\"https://github.com/rust-lang/rust/issues/63832\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/63832\">#63832</a>, but it seems clear that it's had a lot of impact, and I'm not convinced we're making the right call in a practical sense (although it still feels the most \"consistent\" to me).</p>\n<p>I was thinking I will try to spend some day today getting to the bottom of <em>exactly</em> what's happening and trying to do a write-up, then maybe we can try to reach a decision on what to do.</p>",
        "id": 175810169,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568639498
    },
    {
        "content": "<p>At the moment, async-await is stable on nightly. The next beta date is September 26th 2019, though typically I think beta branches a few days earlier than that. The good news is that we still have this week to deliberate. The bad news is that this doesn't give us a lot of time to gain experience with any potential tweaks before the beta branches (though we could backport a decision).</p>",
        "id": 175810287,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568639582
    },
    {
        "content": "<p>And yes, I lost quite a bit of sleep about this last night when I remembered it <span aria-label=\"sleepy\" class=\"emoji emoji-1f62a\" role=\"img\" title=\"sleepy\">:sleepy:</span></p>",
        "id": 175810316,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568639612
    },
    {
        "content": "<blockquote>\n<p>It seems pretty important that we decide whether this breakage is acceptable and if we're going to change anything about it.</p>\n</blockquote>\n<p>You mean in the sense that we assess what is overall most ergonomic using the breakage as \"how is code going to look like in 3 years\"? (I think it's clearly allowed within the stability policy to break this code)</p>",
        "id": 175810483,
        "sender_full_name": "centril",
        "timestamp": 1568639747
    },
    {
        "content": "<p>Yes, sorry.</p>",
        "id": 175811058,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568640145
    },
    {
        "content": "<p>I guess you mean \"we can break code using async-await <em>today</em> as it is not yet stable\" and I definitely agree</p>",
        "id": 175811072,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568640162
    },
    {
        "content": "<p>but the question is \"is it good that this code broke\" :)</p>",
        "id": 175811074,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568640163
    },
    {
        "content": "<p>Thanks for writing this up Niko; I was curious what had happened.</p>\n<p>I'm mostly curious if this the particular interaction of rules is simply<br>\nstricter than we'd like at the moment, and we can loosen them later; or if<br>\nit's something more fundamental and not quite \"forward compatible\". Though<br>\nalso understandable if that's still unclear (:</p>\n<p>The reason why I'm asking is because for our code we've found it to be a<br>\nbit annoying, but not devastating. So if it's something that can be tackled<br>\npost-MVP I'd be okay with that.<br>\nâ€” Yosh</p>",
        "id": 175811833,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1568640739
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211722\">@Yoshua Wuyts</span> I'm trying to document <em>exactly</em> what was affected and why, and then I'll better be able to answer that question. I would say however that it is not obvious that this would be something we can fix later</p>",
        "id": 175812100,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568640944
    },
    {
        "content": "<p>I'm almost done with my first survey, but I would be interested to know if you have a lot of examples of broken code, so I can be sure to understand the patterns (and document the extent of the effect)</p>",
        "id": 175812160,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568640975
    },
    {
        "content": "<p>Specifically, <span class=\"user-mention\" data-user-id=\"211722\">@Yoshua Wuyts</span> / <span class=\"user-mention\" data-user-id=\"128448\">@stjepang</span>, is there more impact than <a href=\"https://github.com/async-rs/async-std/pull/182/\" target=\"_blank\" title=\"https://github.com/async-rs/async-std/pull/182/\">the changes I see here</a>?</p>",
        "id": 175813805,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568642052
    },
    {
        "content": "<p>In any case, I <a href=\"https://gist.github.com/nikomatsakis/fee0e47e14c09c4202316d8ea51e50a0\" target=\"_blank\" title=\"https://gist.github.com/nikomatsakis/fee0e47e14c09c4202316d8ea51e50a0\">created a gist</a> describing the situation and starting to catalog the effects. I plan to keep updating it, but those who'd like to get up to date should check it out.</p>",
        "id": 175814884,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568642799
    },
    {
        "content": "<p>Yeah, that's all that we needed to change on our end. That said I didn't<br>\nhave the greatest time debugging it<br>\n&lt;<a href=\"https://twitter.com/yoshuawuyts/status/1171771795613126657\" target=\"_blank\" title=\"https://twitter.com/yoshuawuyts/status/1171771795613126657\">https://twitter.com/yoshuawuyts/status/1171771795613126657</a>&gt; (Stjepan<br>\nbailed me out here), but otherwise the changes have been fairly limited for<br>\nour work.<br>\nâ€” Yosh</p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/yoshuawuyts/status/1171771795613126657\" target=\"_blank\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/1140201002748059648/bZgi5As5_normal.jpg\"></a><p>eep <a href=\"https://t.co/selTQtecaL\" target=\"_blank\" title=\"https://t.co/selTQtecaL\">https://twitter.com/yoshuawuyts/status/1171771795613126657/photo/1</a></p><span>- yosh (@yoshuawuyts)</span><div class=\"twitter-image\"><a href=\"https://t.co/selTQtecaL\" target=\"_blank\" title=\"https://t.co/selTQtecaL\"><img src=\"https://pbs.twimg.com/media/EEL4OxeX4AEATwm.png:small\"></a></div></div></div>",
        "id": 175814924,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1568642824
    },
    {
        "content": "<p>woah</p>",
        "id": 175816497,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568643769
    },
    {
        "content": "<p>that reminds me that I have to finish improving the diagnostics</p>",
        "id": 175816507,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568643781
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> seemed to report substantially more impact on Fuschia</p>",
        "id": 175816536,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568643798
    },
    {
        "content": "<p>In any case, reviewing the cases it didn't seem as bad as I initially remembered, so it may be that there is no action needed here.</p>",
        "id": 175816549,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568643812
    },
    {
        "content": "<p>But in any case i'd like to decide that <strong>now</strong></p>",
        "id": 175816568,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568643832
    },
    {
        "content": "<p>and not the night before we are branching beta</p>",
        "id": 175816576,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568643840
    },
    {
        "content": "<p>Is the main problem here a semantic problem or an implementation problem?</p>",
        "id": 175817544,
        "sender_full_name": "Florian Gilcher",
        "timestamp": 1568644390
    },
    {
        "content": "<p>Seems like the former to me, first and foremost: figuring out the semantics we want</p>",
        "id": 175825572,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1568649358
    },
    {
        "content": "<p>Thinking about this more, I realize there may be a \"fwd-compatible\" path involving the perenially delayed (but still relevant) <a href=\"https://github.com/rust-lang/rfcs/issues/66\" target=\"_blank\" title=\"https://github.com/rust-lang/rfcs/issues/66\">rfc#66</a></p>",
        "id": 175826177,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568649729
    },
    {
        "content": "<p>Also, I'm realizing there may be 2 bugs at play here</p>",
        "id": 175827568,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568650581
    },
    {
        "content": "<p>Question : what is the easiest way to \"drive\" a future from playground .. I guess maybe there isn't one?</p>",
        "id": 175827583,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568650596
    },
    {
        "content": "<p>I guess I should look how the existing testcases for drop order that <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> added work</p>",
        "id": 175827636,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568650631
    },
    {
        "content": "<p>I think there is a subtle flaw in the drop order for our desugaring around the \"tail expression\" of an async fn</p>",
        "id": 175827671,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568650657
    },
    {
        "content": "<blockquote>\n<p>Question : what is the easiest way to \"drive\" a future from playground .. I guess maybe there isn't one?</p>\n</blockquote>\n<p>(Feels like an omission from the standard library possibly)</p>",
        "id": 175827832,
        "sender_full_name": "centril",
        "timestamp": 1568650763
    },
    {
        "content": "<p>I mean it's kind of hard to do \"independently\" of a runtime, in any non-trivial case</p>",
        "id": 175830068,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568652390
    },
    {
        "content": "<p>anyway, neither here nor there</p>",
        "id": 175830075,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568652398
    },
    {
        "content": "<blockquote>\n<p>Yeah, that's all that we needed to change on our end. </p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"211722\">@Yoshua Wuyts</span> to be clear, this error was about some type from <code>format!</code> not being <code>Send</code>, I guess? i.e., this is ultimately an instance of <a href=\"https://github.com/rust-lang/rust/issues/64477\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/64477\">#64477</a></p>",
        "id": 175833567,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568654925
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116883\">tmandry</span> seemed to report substantially more impact on Fuschia</p>\n</blockquote>\n<p>I think I counted about 60 errors in our tree, each of which had to be manually deciphered and fixed</p>",
        "id": 175837030,
        "sender_full_name": "tmandry",
        "timestamp": 1568657407
    },
    {
        "content": "<p>maybe more in targets that depend on other targets which broke</p>",
        "id": 175837069,
        "sender_full_name": "tmandry",
        "timestamp": 1568657440
    },
    {
        "content": "<p>the fix is always the same, but half the time the diagnostics are very unhelpful (the other half they pretty much point you right to the code you need to change)</p>",
        "id": 175837117,
        "sender_full_name": "tmandry",
        "timestamp": 1568657481
    },
    {
        "content": "<p>Sorry for the spam, but I've finished <a href=\"https://gist.github.com/nikomatsakis/fee0e47e14c09c4202316d8ea51e50a0\" target=\"_blank\" title=\"https://gist.github.com/nikomatsakis/fee0e47e14c09c4202316d8ea51e50a0\">my gist</a>. It's kind of ridiculously long. The TL;DR at the front tries to summarize the situation. </p>\n<p>The good news:</p>\n<ul>\n<li>Some of the problems are the result of a bug (<a href=\"https://github.com/rust-lang/rust/issues/64512\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/64512\">#64512</a>) which should be fixed regardless.</li>\n</ul>\n<p>The bad news:</p>\n<ul>\n<li>Most are not, and are just a fallout from adopting the more consistent drop order (<a href=\"https://github.com/rust-lang/rust/issues/64477\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/64477\">#64477</a>).</li>\n</ul>\n<p>One unknown:</p>\n<ul>\n<li>It seems like most codebases had <em>minimal</em> impact but <span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> suggested Fuschia was an exception.</li>\n</ul>\n<p>Overall, I think we have to choose between:</p>\n<ul>\n<li>master's semantics, which are more consistent between sync/unsync, and supported <code>foo(&amp;vec![]).await</code></li>\n<li>the older semantics, which were inconsistent, but more efficient; as they resulted in fewer temporaries live over an await, they improve ergonomics in cases where those temporaries are not <code>Send</code></li>\n<li>the ergonomic call is not entirely obvious, but I suspect that the older semantics win overall; moreover, they offer <em>some</em> pathway for future extensions to close the gap, whereas I see no way to modify master's semantics to accommodate non-Send temporaries.</li>\n</ul>\n<p>On net, I'm not really sure what I think though.</p>\n<p>cc <span class=\"user-group-mention\" data-user-group-id=\"1172\">@WG-async-foundations</span> <span class=\"user-mention\" data-user-id=\"126931\">@centril</span>, <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span>, <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span>, <span class=\"user-mention\" data-user-id=\"203289\">@boats</span>, <span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> <span class=\"user-mention\" data-user-id=\"215333\">@Florian Gilcher</span></p>",
        "id": 175837236,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568657571
    },
    {
        "content": "<p>cc <span class=\"user-group-mention\" data-user-group-id=\"1172\">@WG-async-foundations</span> <span class=\"user-mention\" data-user-id=\"126931\">@centril</span>, <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span>, <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span>, <span class=\"user-mention\" data-user-id=\"203289\">@boats</span>, <span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> <span class=\"user-mention\" data-user-id=\"215333\">@Florian Gilcher</span> <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span>  -- I edited the message which seems to trigger some Zulip bug that clears the notification, sorry</p>",
        "id": 175837329,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568657639
    },
    {
        "content": "<blockquote>\n<p>the fix is always the same, but half the time the diagnostics are very unhelpful (the other half they pretty much point you right to the code you need to change)</p>\n</blockquote>\n<p>thanks! It sounds to me like you are hitting both <a href=\"https://github.com/rust-lang/rust/issues/64512\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/64512\">#64512</a> (which has reasonably targeted diagnostics) and <a href=\"https://github.com/rust-lang/rust/issues/64477\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/64477\">#64477</a> (which doesn't)</p>",
        "id": 175837406,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568657669
    },
    {
        "content": "<p>If we had a fix for <a href=\"https://github.com/rust-lang/rust/issues/64512\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/64512\">#64512</a>, do you think you could try reverting those fixes and seeing the effect?</p>",
        "id": 175837425,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568657686
    },
    {
        "content": "<blockquote>\n<p>thanks! It sounds to me like you are hitting both <a href=\"https://github.com/rust-lang/rust/issues/64512\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/64512\">#64512</a> (which has reasonably targeted diagnostics) and <a href=\"https://github.com/rust-lang/rust/issues/64477\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/64477\">#64477</a> (which doesn't)</p>\n</blockquote>\n<p>that sounds right</p>",
        "id": 175837512,
        "sender_full_name": "tmandry",
        "timestamp": 1568657760
    },
    {
        "content": "<p>and yes I can, I only fixed a few before I decided to wait and see if this was going to stick or not ;)</p>",
        "id": 175837592,
        "sender_full_name": "tmandry",
        "timestamp": 1568657801
    },
    {
        "content": "<p>those never even made it into the tree, so we'll have a fresh slate to look at</p>",
        "id": 175837780,
        "sender_full_name": "tmandry",
        "timestamp": 1568657931
    },
    {
        "content": "<blockquote>\n<p>and yes I can, I only fixed a few before I decided to wait and see if this was going to stick or not ;)</p>\n</blockquote>\n<p>smart :)</p>",
        "id": 175837784,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568657933
    },
    {
        "content": "<blockquote>\n<p>the temporaries in $body wind up being dropped after the let-bound variables of the block. Proposed fix in a comment below.</p>\n</blockquote>\n<p>wait what? I thought in <code>let x = expr; body</code>, <code>x</code> is dropped after stuff in <code>body</code> (inverse declaration order)?</p>",
        "id": 175841753,
        "sender_full_name": "RalfJ",
        "timestamp": 1568660423
    },
    {
        "content": "<p>So, for better or worse -- I mostly think worse, these days -- the <em>temporaries</em> in a tail expression of a block are promoted to the surrounding \"temporary lifetime context\".</p>",
        "id": 175842738,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568661052
    },
    {
        "content": "<p>(The original motivation was that <code>let x = expr;</code> and <code>let x = {expr};</code> should work equivalently, which I now suspect was wrong-headed.)</p>",
        "id": 175842993,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568661189
    },
    {
        "content": "<p>That's probably going to end up being Rust's equivalent of Python's and C99's loop variable scoping, in terms of \"quirk to explain to new users\".</p>",
        "id": 175851021,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1568666788
    },
    {
        "content": "<p>I was wondering if we can change it, maybe in an edition</p>",
        "id": 175855659,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568670287
    },
    {
        "content": "<p>non-trivial to do but maybe worthwhile</p>",
        "id": 175855672,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568670293
    },
    {
        "content": "<p>I suspect we had use cases for this in mind more complex than just \"adding braces around an expression shouldn't change scoping\".</p>",
        "id": 175868233,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1568683418
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>Question : what is the easiest way to \"drive\" a future from playground .. I guess maybe there isn't one?</p>\n</blockquote>\n<p>(Feels like an omission from the standard library possibly)</p>\n</blockquote>\n<p>I think adding just <code>block_on(future)</code> to the std library would probably not too controversial.</p>",
        "id": 175876805,
        "sender_full_name": "Matthias247",
        "timestamp": 1568697391
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I am not sure whether it helps for the discussion, but sync and async functions are already consistent in other ways. E.g. that async functions are cancellable and may not resume after a <code>.await</code>  point, which users might need to design for.<br>\nBut being as consistent as possible has  still the advantage of reducing the cognitive overhead of dealing with 2 worlds, so I understand the reasoning behind the change to align the lifetime of temporaries.</p>\n<p>On the other hand the new issue is just another consistency issue: Normal functions never experience the symptom of parts of the function being called on a different thread, whereas it is normal for futures on multithreaded executors.</p>\n<p>So it seems like we need to trade of which of those 2 seems more reasonable?</p>",
        "id": 175877523,
        "sender_full_name": "Matthias247",
        "timestamp": 1568698270
    },
    {
        "content": "<p>I wonder if later on we might be able to drop the <code>+ Send</code> part of <code>impl Future + Send</code> for a same thread executor,<br>\nmaybe by have a syntax like: <code>async fn foo() -&gt; () + !Send</code> - then the local variables would not need <code>Send</code> over suspention points?</p>",
        "id": 175940623,
        "sender_full_name": "Giles Cope",
        "timestamp": 1568748674
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  some notes:</p>\n<ul>\n<li>Agree re. current master order.</li>\n<li>Would be nice to give as much time as needed for this in t-lang mtg.</li>\n<li>Pure drop sounds like <code>const fn drop</code> :P</li>\n</ul>",
        "id": 176029769,
        "sender_full_name": "centril",
        "timestamp": 1568829910
    },
    {
        "content": "<p>possibly relevant: <a href=\"https://github.com/rust-rfcs/const-eval/pull/27\" target=\"_blank\" title=\"https://github.com/rust-rfcs/const-eval/pull/27\">https://github.com/rust-rfcs/const-eval/pull/27</a></p>\n<p>also cc <span class=\"user-mention\" data-user-id=\"124288\">@oli</span>  <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>  <span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span></p>",
        "id": 176029891,
        "sender_full_name": "centril",
        "timestamp": 1568829967
    },
    {
        "content": "<p>context for those following along is that I sent this e-mail to the lang team</p>\n<blockquote>\n<p>Hey lang team,</p>\n<p>So I just want to raise this issue of temporary scopes a bit more broadly, since we're going to be stabilizing async-await soon and that won't leave us room to make changes. I've written up a gist that contains the details:</p>\n<p><a href=\"https://gist.github.com/nikomatsakis/fee0e47e14c09c4202316d8ea51e50a0\" target=\"_blank\" title=\"https://gist.github.com/nikomatsakis/fee0e47e14c09c4202316d8ea51e50a0\">https://gist.github.com/nikomatsakis/fee0e47e14c09c4202316d8ea51e50a0</a></p>\n<p>For those who've seen the gist, I made a few minor edits. In particular, I noted that (a) some of the regression reports can be fixed by making the compiler more precise about what is being captured and (b) there is a forwards compatible path to improving all cases, and it would benefit sync code to boot, but it would be a major bit of design work. (In particular, we'd need some mechanism for \"pure drops\" that lets us move drops earlier.)</p>\n<p><strong>After having thought about this for a while, I think that the current order on master is correct, but I wanted to raise it to give people time to object.</strong></p>\n</blockquote>",
        "id": 176033278,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568832189
    },
    {
        "content": "<p>Also, I just opened <a href=\"https://github.com/rust-lang/rust/pull/64584\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/64584\">https://github.com/rust-lang/rust/pull/64584</a>, which addresses some \"overzealous\" cases of <a href=\"https://github.com/rust-lang/rust/issues/64477\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/64477\">#64477</a></p>",
        "id": 176033300,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568832216
    },
    {
        "content": "<p>I've read the gist and I agree that the current rules on stable are fundamentally correct. <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 176039581,
        "sender_full_name": "boats",
        "timestamp": 1568836381
    },
    {
        "content": "<p>With the really unfortunate <code>&amp;format!()</code> example, the <code>Arguments</code> temporary created shouldn't actually need to outlive the future, because it will be moved into the <code>std::fmt::format</code> call which returns a <code>String</code>, is this an example of the overzealousness you're talking about with 64584?</p>",
        "id": 176039662,
        "sender_full_name": "boats",
        "timestamp": 1568836430
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"203289\">@boats</span> yes -- that is an example. I've heard a lot of people complain, similarly, about cases like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">...;</span><span class=\"w\"></span>\n<span class=\"n\">mem</span>::<span class=\"n\">drop</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">foo</span><span class=\"p\">().</span><span class=\"n\">await</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// error: x is considered maybe live</span>\n</pre></div>",
        "id": 176045037,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568839745
    },
    {
        "content": "<p>the fundamental problem here is that we do an \"initial approximation\" based on the HIR, which is used for trait checking; then we build the MIR, which gives us access to much more detailed information</p>",
        "id": 176045070,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568839771
    },
    {
        "content": "<p>but it's too late</p>",
        "id": 176045074,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568839772
    },
    {
        "content": "<p>I'm not sure what I think is the best fix. It may be possible to build the MIR first, but I don't entirely see how. Maybe it works because we're sufficiently restrictive of cycles or something. </p>\n<p>I've been wondering though if there isn't room for us to refactoring the relationship of HIR to MIR, basically trying to create some kind of view onto HIR that gives us the detailed information we want  and suffices for borrow checking and other stuff, and which would then be the basis for building MIR. Anyway, that's going a bit astray.</p>",
        "id": 176045225,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568839873
    },
    {
        "content": "<p>apparently <a href=\"https://github.com/rust-lang/rust/issues/64391\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/64391\">#64391</a> was reopened :/</p>",
        "id": 176054595,
        "sender_full_name": "lqd",
        "timestamp": 1568848126
    },
    {
        "content": "<p>it took a while but here's a <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=c60a599834166b2c6b6567fb95062e08\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=c60a599834166b2c6b6567fb95062e08\">minimization</a> it seems the fix might have only worked for Copy types ? (edit: posted it to the issue)</p>",
        "id": 176054868,
        "sender_full_name": "lqd",
        "timestamp": 1568848413
    },
    {
        "content": "<p>Hmm, so I was able to build tokio-postgres; regardless, those errors are correct</p>",
        "id": 176095680,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568897628
    },
    {
        "content": "<p>well, I'll have to dig a bit more</p>",
        "id": 176095902,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568897769
    },
    {
        "content": "<p>there may be a tweaked desugaring we could use...</p>",
        "id": 176095958,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568897806
    },
    {
        "content": "<p>OK, did a <a href=\"https://github.com/rust-lang/rust/issues/64391#issuecomment-533130363\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/64391#issuecomment-533130363\">detailed examination</a>. The desugaring is not the problem. It seems like our MIR lowering is created a lot more drops than we need to -- and those drops sometime make us more conservative than we should be, because they introduce the possibility of unwind edges.</p>",
        "id": 176098837,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568899742
    },
    {
        "content": "<p>hopefully I didn't reduce this so much that it isn't representative of the initial problem anymore; there were a lot more generic types in <code>tokio-postgres</code> (instead of a String argument per se) but that should be the same, moving a <code>T</code> argument between two <code>async fn</code>s, wrt the drops</p>",
        "id": 176112245,
        "sender_full_name": "lqd",
        "timestamp": 1568907788
    },
    {
        "content": "<p>Pushed a fix for both <a href=\"https://github.com/rust-lang/rust/issues/64391\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/64391\">#64391</a> and <a href=\"https://github.com/rust-lang/rust/issues/64433\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/64433\">#64433</a>, I believe.</p>",
        "id": 176113091,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568908243
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> I'll try to check the tokio-postgres exampe again.</p>",
        "id": 176113109,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568908264
    },
    {
        "content": "<p>It's weird because I thought I checked that the crate itself was fixed before</p>",
        "id": 176113144,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568908271
    },
    {
        "content": "<p>I was confused by this as well</p>",
        "id": 176113157,
        "sender_full_name": "lqd",
        "timestamp": 1568908281
    },
    {
        "content": "<p>the latest rev builds</p>",
        "id": 176113173,
        "sender_full_name": "lqd",
        "timestamp": 1568908292
    },
    {
        "content": "<p>because they added the workaround you mentioned earlier</p>",
        "id": 176113194,
        "sender_full_name": "lqd",
        "timestamp": 1568908301
    },
    {
        "content": "<p>I thought I reverted the workaround</p>",
        "id": 176113217,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568908315
    },
    {
        "content": "<p>but maybe I confused myself</p>",
        "id": 176113218,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568908316
    },
    {
        "content": "<p>maybe :)</p>",
        "id": 176113310,
        "sender_full_name": "lqd",
        "timestamp": 1568908354
    },
    {
        "content": "<p>OK, <a href=\"https://github.com/rust-lang/rust/issues/64391#issuecomment-533196561\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/64391#issuecomment-533196561\">double checked</a></p>",
        "id": 176113790,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568908605
    },
    {
        "content": "<p>it appears I <em>was</em> confused before, but it should be good now</p>",
        "id": 176113804,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568908616
    },
    {
        "content": "<p>awesome <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 176113830,
        "sender_full_name": "lqd",
        "timestamp": 1568908629
    },
    {
        "content": "<p>not mega happy with my patch though :)</p>",
        "id": 176114076,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568908770
    },
    {
        "content": "<p>I mean, it's <em>ok</em></p>",
        "id": 176114085,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568908775
    },
    {
        "content": "<p>but the scope tracking mechanism feels like it could be simplified...</p>",
        "id": 176114093,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568908782
    },
    {
        "content": "<p>I wonder if we could <em>insert</em> drops instead of removing them</p>",
        "id": 176114120,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568908800
    },
    {
        "content": "<p>(ugh, unwinds)</p>",
        "id": 176114259,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568908852
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> maybe a mir-opt test could be useful here?</p>",
        "id": 176114349,
        "sender_full_name": "centril",
        "timestamp": 1568908915
    },
    {
        "content": "<blockquote>\n<p>maybe a mir-opt test could be useful here?</p>\n</blockquote>\n<p><a href=\"https://github.com/rust-lang/rust/pull/64584/commits/77fd0a76491afb4c93359f6ceb33a9f79c4f4228\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/64584/commits/77fd0a76491afb4c93359f6ceb33a9f79c4f4228\">done</a></p>",
        "id": 176138006,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568924430
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> once <a href=\"https://github.com/rust-lang/rust/pull/64584\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/64584\">https://github.com/rust-lang/rust/pull/64584</a> hits a nightly, you may want to take another stab at fuschia</p>",
        "id": 176228521,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569011938
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> interestingly, the number of instances of that error has gone <em>up</em> from the last time I built</p>",
        "id": 176242096,
        "sender_full_name": "tmandry",
        "timestamp": 1569027553
    },
    {
        "content": "<p>but I'm guessing that's probably because some crates now compile successfully, which unblocks other crates which depend on them</p>",
        "id": 176242099,
        "sender_full_name": "tmandry",
        "timestamp": 1569027583
    },
    {
        "content": "<p>now I'm seeing 47 instances of that error (\"Foo cannot be sent between threads safely\"), up from 29</p>",
        "id": 176242153,
        "sender_full_name": "tmandry",
        "timestamp": 1569027621
    },
    {
        "content": "<p>and zero instances of \"Foo does not live long enough\", down from 25</p>",
        "id": 176242274,
        "sender_full_name": "tmandry",
        "timestamp": 1569027844
    },
    {
        "content": "<p>I am also now seeing instances of <a href=\"https://github.com/rust-lang/rust/issues/64636\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/64636\">#64636</a>, which I think should be marked blocking</p>",
        "id": 176242530,
        "sender_full_name": "tmandry",
        "timestamp": 1569028437
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span>  I think you'll have to investigate <a href=\"https://github.com/rust-lang/rust/issues/64636\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/64636\">#64636</a> if you want it fixed before master promotion since it's so close <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 176262390,
        "sender_full_name": "centril",
        "timestamp": 1569068001
    },
    {
        "content": "<p>Looks like <span class=\"user-mention\" data-user-id=\"119031\">@Esteban KÃ¼ber</span> already got to it &lt;3</p>",
        "id": 176289006,
        "sender_full_name": "tmandry",
        "timestamp": 1569116834
    },
    {
        "content": "<p>hey y'all</p>",
        "id": 176406352,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1569270477
    },
    {
        "content": "<p>sorry for being late to weigh in-- I was out last week</p>",
        "id": 176406404,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1569270489
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/64584\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/64584\">https://github.com/rust-lang/rust/pull/64584</a> is the most recent update?</p>",
        "id": 176406443,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1569270520
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> should <a href=\"https://github.com/rust-lang/rust/issues/64391\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/64391\">https://github.com/rust-lang/rust/issues/64391</a> be closed?</p>",
        "id": 176406644,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1569270663
    },
    {
        "content": "<p>Probably</p>",
        "id": 176406921,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569270854
    },
    {
        "content": "<p>I'm not aware of any new reports or bugs</p>",
        "id": 176406935,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569270870
    },
    {
        "content": "<blockquote>\n<p><a href=\"https://github.com/rust-lang/rust/pull/64584\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/64584\">https://github.com/rust-lang/rust/pull/64584</a> is the most recent update?</p>\n</blockquote>\n<p>correct</p>",
        "id": 176406980,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569270915
    },
    {
        "content": "<p>there may still be more bugs -- and of course we also know that the <code>Send</code> rules in particular are overly conservative</p>",
        "id": 176406994,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569270929
    },
    {
        "content": "<p>(we could backport further fixes if needed)</p>",
        "id": 176407006,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569270939
    }
]