[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137147\">@Didrik Nordstrom</span> and I were talking about this and he opened <a href=\"https://github.com/rust-lang/wg-async-foundations/issues/19\">wg-async-foundations#19</a> which is a great problem summary</p>",
        "id": 216420473,
        "sender_full_name": "tmandry",
        "timestamp": 1605147590
    },
    {
        "content": "<p>I think some of this might be relevant to the <code>must_not_await</code> lint RFC</p>",
        "id": 216420543,
        "sender_full_name": "tmandry",
        "timestamp": 1605147666
    },
    {
        "content": "<p>For one, because it shares some of the same sub-problems (transitivity, whether to implement with traits or not)</p>",
        "id": 216420606,
        "sender_full_name": "tmandry",
        "timestamp": 1605147727
    },
    {
        "content": "<p>And because it raises the question of what the desired end state looks like, if we end up doing this <em>and</em> <code>must_not_await</code></p>",
        "id": 216420631,
        "sender_full_name": "tmandry",
        "timestamp": 1605147812
    },
    {
        "content": "<p>My feeling is that we'll want this eventually, for the reasons laid out in the issue, but I'm curious to hear what others think</p>",
        "id": 216420707,
        "sender_full_name": "tmandry",
        "timestamp": 1605147874
    },
    {
        "content": "<p>Agreed that some variant of this would indeed be useful</p>",
        "id": 216487623,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1605196759
    },
    {
        "content": "<p>I don't think it makes sense to bake into the type system/compiler the notion of blocking code because its definition can change. For example, writev can block depending on the flag set. How do we encode this? I think the best way to detect blocking is to have the runtime report it or possibly provide hook  ins for preemption (not sure how to actually do this). All seem super invasive.</p>",
        "id": 216492750,
        "sender_full_name": "Lucio Franco",
        "timestamp": 1605198761
    },
    {
        "content": "<p>I think it's fine to have it as a lint</p>",
        "id": 216493157,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605198929
    },
    {
        "content": "<p>left a comment probably better to discuss there</p>",
        "id": 216493808,
        "sender_full_name": "Lucio Franco",
        "timestamp": 1605199195
    },
    {
        "content": "<p>Thanks for the feedback so far. Not having a concept of what might block (eventually), i.e. leaving it as an implementation detail, would allow for an implementation to change from non-blocking to blocking, which could break async applications. Not that I know of any obvious risks where this might occur in practice, but it highlights a piece of implicit or manual judgment in the maintenance process. <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 216946016,
        "sender_full_name": "Didrik Nordstrom",
        "timestamp": 1605568273
    },
    {
        "content": "<p>I believe changing a function from async -&gt; blocking can't lead to data races the way it does in other languages, but may still lead to deadlocks since entire threads can be prevented from making progress.</p>\n<p>Def agree a lint would be great here. I've seen people try to join threads inside async blocks, and would've loved to have a mechanism to warn them not to do that.</p>",
        "id": 216950997,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1605571877
    }
]