[
    {
        "content": "<p>Hey all, I learned about Swift's <code>async let</code> syntax last week and it got me thinking about how we might be able to adapt that for async Rust. I wrote a blog post on it here: <a href=\"https://blog.yoshuawuyts.com/postfix-spawn/\">https://blog.yoshuawuyts.com/postfix-spawn/</a></p>",
        "id": 278565674,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1649688910
    },
    {
        "content": "<p>Interesting. I love the idea of having postfix <code>spawn</code>; that'd be ergonomically convenient.</p>",
        "id": 278621771,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1649713788
    },
    {
        "content": "<p>\"tasks aren't started until .awaited\" feels like an inversion of the behavior I'd normally want, though. I do want things started as soon as possible, so that they can finish as soon as possible.</p>",
        "id": 278621835,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1649713806
    },
    {
        "content": "<p>I'd like to do as much as possible to counterbalance the problem where we currently serialize more than we should.</p>",
        "id": 278621889,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1649713836
    },
    {
        "content": "<p>Right now, <code>foo(x().await, y().await)</code> will wait on both in series.</p>",
        "id": 278621922,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1649713858
    },
    {
        "content": "<p>I really like the idea of designing APIs in a way that naturally pushes users away from serializing too much while still taking advantage of the simplicity of async/await, so I also have a preference for starting tasks as soon as possible vs. at the moment they are awaited even if it's not as consistent</p>",
        "id": 278628404,
        "sender_full_name": "Raphaël Thériault",
        "timestamp": 1649718181
    },
    {
        "content": "<p>I * love * the combination of postfix syntax and \"start running this in the background for me\" semantics cause it makes rewriting <code>foo(x().await, y().await)</code> as the less serialised <code>let (x, y) = (x().spawn(), y().spawn()); f(x.await, y.await)</code> pretty natural (in my eyes at least)</p>",
        "id": 278629197,
        "sender_full_name": "Raphaël Thériault",
        "timestamp": 1649718824
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/187312-wg-async/topic/Blog.20post.3A.20postfix.20spawn/near/278621835\">said</a>:</p>\n<blockquote>\n<p>\"tasks aren't started until .awaited\" feels like an inversion of the behavior I'd normally want, though. I do want things started as soon as possible, so that they can finish as soon as possible.</p>\n</blockquote>\n<p>Yeah, I get that. My reasoning for why \"spawn on <code>.await</code>\" is okay is that in most cases tasks are already immediately awaited after they've been spawned. The only reason why they aren't is usually to add instrumentation of some kind, a timeout, or pass it into a concurrency operator such as <code>join</code> or <code>race</code>. So I don't think there would be a noticeable performance penalty with this approach?</p>",
        "id": 278666958,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1649754963
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/187312-wg-async/topic/Blog.20post.3A.20postfix.20spawn/near/278621922\">said</a>:</p>\n<blockquote>\n<p>Right now, <code>foo(x().await, y().await)</code> will wait on both in series.</p>\n</blockquote>\n<p>ohh, yeah that's true. I guess in Swift they work around this by saying it should be re-expressed as:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">foo</span><span class=\"p\">([</span><span class=\"n\">x</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">()].</span><span class=\"k\">await</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>which is similar to <code>futures::join</code>/ <code>futures_concurrency::Join</code></p>",
        "id": 278667327,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1649755211
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/187312-wg-async/topic/Blog.20post.3A.20postfix.20spawn/near/278621889\">said</a>:</p>\n<blockquote>\n<p>I'd like to do as much as possible to counterbalance the problem where we currently serialize more than we should.</p>\n</blockquote>\n<p>not sure I understand what you mean by this? could you elaborate?</p>",
        "id": 278667421,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1649755277
    },
    {
        "content": "<p>Published v3 of <code>tasky</code> which won't start running futures until the <code>JoinHandle</code> is awaited: <a href=\"https://docs.rs/tasky/latest/tasky/\">https://docs.rs/tasky/latest/tasky/</a>.</p>",
        "id": 278670817,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1649757350
    },
    {
        "content": "<p>I'm a bit confused by the flow of the blog post - it starts off talking about structured concurrency and dangling by default, but unless I'm missing something that doesn't have anything to do with whether spawn is a free function or a method?</p>",
        "id": 278679344,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1649763107
    },
    {
        "content": "<p>Probably just a nit, but it seems that you don't really need the trait or enum types or whatever for distinguishing spawn from spawn_local, you can just duplicate the code?</p>",
        "id": 278679460,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1649763177
    },
    {
        "content": "<p>I'm interested why you don't want to just take the swift approach and use <code>async let</code>? I personally wouldn't want to do it since it seems like unnecessary language-ification of a library feature, but I'm keen to hear your view on it</p>",
        "id": 278679600,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1649763268
    },
    {
        "content": "<p>As to postfix spawn itself, I think it is a really interesting idea and might have implications on portability stuff as an alternative to an Executor or Spawn trait.</p>",
        "id": 278679666,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1649763322
    },
    {
        "content": "<p>On the ergonomics of it, it does make the code more uniform, but I wonder if spawning a task is something we might want to stand out when reading code? In which case more uniformity would be negative.</p>",
        "id": 278679763,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1649763379
    },
    {
        "content": "<p>I also wonder if different runtimes might want different variations on spawn other than the global and local variants? E.g., Tokio's spawn_blocking. Or runtimes might want to take parameters to spawn such as a CPU affinity? E.g., glommio's spawn_local_into?</p>",
        "id": 278680038,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1649763579
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256841\">Nick Cameron</span> <a href=\"#narrow/stream/187312-wg-async/topic/Blog.20post.3A.20postfix.20spawn/near/278680038\">said</a>:</p>\n<blockquote>\n<p>I also wonder if different runtimes might want different variations on spawn other than the global and local variants? E.g., Tokio's spawn_blocking. Or runtimes might want to take parameters to spawn such as a CPU affinity? E.g., glommio's spawn_local_into?</p>\n</blockquote>\n<p>heh, yeah as I mentioned in my post there's a different post to be written on all the different modes of spawning. I intentionally didn't cover it in this post because I'm trying to post more. Probably also why the flow is a bit off, since I didn't have anyone review it first (would've shared it with you first if I did!)</p>",
        "id": 278696055,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1649771819
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256841\">Nick Cameron</span> <a href=\"#narrow/stream/187312-wg-async/topic/Blog.20post.3A.20postfix.20spawn/near/278679460\">said</a>:</p>\n<blockquote>\n<p>Probably just a nit, but it seems that you don't really need the trait or enum types or whatever for distinguishing spawn from spawn_local, you can just duplicate the code?</p>\n</blockquote>\n<p>That's true, but I'm trying to keep a unified <code>JoinHandle</code> type, the way <code>async-std</code> has it today. I think it'd be nice if we can keep that working.</p>",
        "id": 278696425,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1649771979
    },
    {
        "content": "<blockquote>\n<p>I'm a bit confused by the flow of the blog post - it starts off talking about structured concurrency and dangling by default, but unless I'm missing something that doesn't have anything to do with whether spawn is a free function or a method?</p>\n</blockquote>\n<p>Same here. Also, it wasn't immediately obvious how your final code is different from code using \"simple\" futures. Which I guess is part of the design, but it would be helpful to explain how <code>chop_vegetables().spawn().await</code> is different from <code>chop_vegetables().await</code></p>",
        "id": 278709358,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1649777214
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256841\">Nick Cameron</span> <a href=\"#narrow/stream/187312-wg-async/topic/Blog.20post.3A.20postfix.20spawn/near/278679344\">said</a>:</p>\n<blockquote>\n<p>I'm a bit confused by the flow of the blog post - it starts off talking about structured concurrency and dangling by default, but unless I'm missing something that doesn't have anything to do with whether spawn is a free function or a method?</p>\n</blockquote>\n<p>yeah, I get that. brain is too fuzzy to properly explain it. But I was trying to go for \"hey, by returning a <code>Builder</code> which implements <code>IntoFuture</code> we can create a <code>Task</code> which starts when <code>.await</code>ed.\" - but didn't realize that we, of course, could just do that with<code>Task</code> already anyway.</p>",
        "id": 278715732,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1649780067
    }
]