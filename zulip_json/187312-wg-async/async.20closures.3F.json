[
    {
        "content": "<p>How do you make a function generic over an \"async closure\"? ie a closure returning a future.<br>\nThis is an issue I've encountered a few times in the past, and every time I've ended up giving up. </p>\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=ba243ad8871eda41fd8414c5a8d4d590\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=ba243ad8871eda41fd8414c5a8d4d590</a><br>\nthe issue is the <code>Fut</code> needs to be able to borrow the <code>&amp;mut Bus</code>, but as that's written now, it can't. It seems like I need something like <code>where F: for&lt;'a&gt; FnOnce(&amp;'a mut Bus) -&gt; Fut&lt;'a&gt;</code>, but I don't think such thing is possible.</p>\n<p>I've asked around, everyone seems to suggest it's in fact impossible.</p>",
        "id": 272327288,
        "sender_full_name": "Dario Nieuwenhuis",
        "timestamp": 1645133983
    },
    {
        "content": "<p>It is impossible currently</p>",
        "id": 272329092,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1645134521
    },
    {
        "content": "<p>The correct bounds are not generated for closures</p>",
        "id": 272329164,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1645134558
    },
    {
        "content": "<p>You can create a macro that desugars a closure into an anonymous function, and pass that in instead</p>",
        "id": 272329227,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1645134600
    },
    {
        "content": "<p>Perhaps we should add something to the vision doc about it? It seems like an incredibly basic thing. It comes up often when converting blocking code to async.</p>",
        "id": 272329335,
        "sender_full_name": "Dario Nieuwenhuis",
        "timestamp": 1645134660
    },
    {
        "content": "<p>Unless one of the planned improvements will solve this, but none does as far as I can tell</p>",
        "id": 272329376,
        "sender_full_name": "Dario Nieuwenhuis",
        "timestamp": 1645134692
    },
    {
        "content": "<p>Is this covered under the <a href=\"https://rust-lang.github.io/async-fundamentals-initiative/\">async closures initiative</a>?</p>",
        "id": 272330236,
        "sender_full_name": "eholk",
        "timestamp": 1645135189
    },
    {
        "content": "<p>oh huh, I guess yes? </p>\n<p>That'd let me write <code>where F: AsyncFnOnce(&amp;mut Bus)</code> and then just <code>f(&amp;mut self.bus).await</code> ?</p>",
        "id": 272331322,
        "sender_full_name": "Dario Nieuwenhuis",
        "timestamp": 1645135770
    },
    {
        "content": "<p>what's exactly the missing Rust feature to make the \"closure returning future\" work though?</p>\n<p>It's sort of workaroundable with a \"callback\" trait with a GAT: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2021&amp;gist=1e9f4e419344113576d274a66d923603\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2021&amp;gist=1e9f4e419344113576d274a66d923603</a></p>\n<p>it seems what we need is some kind of \"generic generic param\" to be able to do <code>where F: for&lt;'a&gt; FnOnce(&amp;'a mut Bus) -&gt; Fut&lt;'a&gt;</code> <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 272333554,
        "sender_full_name": "Dario Nieuwenhuis",
        "timestamp": 1645136835
    },
    {
        "content": "<p>You can get it working with async fns and HRTBs</p>",
        "id": 272339063,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1645140413
    },
    {
        "content": "<p>the syntax I have toyed with the the past was</p>\n<div class=\"codehilite\"><pre><span></span><code>where for&lt;&#39;a&gt; {\n    F: FnOnce(&amp;&#39;a Thing) -&gt; Fut\n    Fut: Future + &#39;a\n}\n</code></pre></div>\n<p>I think the trait solver and borrowchecker can easily handle this, there is just no way to express it currently, <code>AsyncFn*</code> traits would be nice special cases but a general solution would be awesome too</p>",
        "id": 272461157,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1645220428
    },
    {
        "content": "<p>I confirm what <span class=\"user-mention\" data-user-id=\"363998\">@Ibraheem Ahmed</span> said:</p>\n<ol>\n<li>\n<p>It can be expressed (<a href=\"https://docs.rs/async_fn_traits\">https://docs.rs/async_fn_traits</a> offers a helper trait to express this quite succintly: <code>for&lt;'a&gt; F : AsyncFnOnce1&lt;&amp;'a Thing, Output = T&gt;</code>).</p>\n</li>\n<li>\n<p>The issue is rather about <em>anonymous closures</em>, which don't get to meet these (correctly expressed) bounds.</p>\n</li>\n</ol>\n<p>Only <code>async fn</code>s do, or boxed dyn future returning closures when using <a href=\"https://docs.rs/higher-order-closure\">https://docs.rs/higher-order-closure</a>.</p>",
        "id": 272478532,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1645231121
    },
    {
        "content": "<p>I have used a macro that desugars a closure to an anonymous function before</p>",
        "id": 272478719,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1645231317
    },
    {
        "content": "<p>Yeah, similar to having closire syntax for <code>extern fn</code> pointers; but in this instance the stateful aspect can be annoying.</p>\n<p>In that regard, requiring a <code>(State, impl AsyncFnOnce(State, &amp;Thing) -&gt; T)</code> is the simplest way to circumvent all this in a zero-cost fashion, since then then macro you talk about can be used for this now-allowed-to-be-stateless closure</p>",
        "id": 272479334,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1645231807
    },
    {
        "content": "<p>I see, thanks for confirming :(</p>",
        "id": 272615841,
        "sender_full_name": "Dario Nieuwenhuis",
        "timestamp": 1645390654
    },
    {
        "content": "<p>Hmmm, why doesn't this work? It feels very close<br>\n<a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2021&amp;gist=a4b5cf6f5eab421bc45571b4d8013a5e\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2021&amp;gist=a4b5cf6f5eab421bc45571b4d8013a5e</a></p>",
        "id": 272615866,
        "sender_full_name": "Dario Nieuwenhuis",
        "timestamp": 1645390679
    },
    {
        "content": "<p>afaict it's what <span class=\"user-mention\" data-user-id=\"257428\">@Gus Wynn</span> 's syntax would desugar to (?)</p>",
        "id": 272615977,
        "sender_full_name": "Dario Nieuwenhuis",
        "timestamp": 1645390783
    },
    {
        "content": "<p>or what <code>where F: for&lt;'b&gt; FnOnce(&amp;'b mut Bus) -&gt; (impl Future&lt;Output=()&gt; + 'b)</code> would desugar to?</p>",
        "id": 272616095,
        "sender_full_name": "Dario Nieuwenhuis",
        "timestamp": 1645390823
    },
    {
        "content": "<p>fn trait bounds with the \"fancy\" syntax desugar to projections like that</p>",
        "id": 272616116,
        "sender_full_name": "Dario Nieuwenhuis",
        "timestamp": 1645390833
    },
    {
        "content": "<p>Wait <span class=\"user-mention\" data-user-id=\"232018\">@Daniel Henry-Mantilla</span>, are closures not meeting those bounds a bug?</p>",
        "id": 272616960,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1645391689
    },
    {
        "content": "<p>yep, it's this one <a href=\"https://github.com/rust-lang/rust/issues/70263\">https://github.com/rust-lang/rust/issues/70263</a></p>",
        "id": 272617095,
        "sender_full_name": "Dario Nieuwenhuis",
        "timestamp": 1645391853
    },
    {
        "content": "<p>I looked a bit into it last friday. The issue is the compiler is \"cheating\" when inferring the types of closures. If you pass it directly to a fn with a bound like <code>F: for&lt;'a&gt; FnOnce(&amp;'a u8) -&gt; &amp;'a u8</code> then it makes it higher-ranked, and it doesn't otherwise</p>",
        "id": 272617215,
        "sender_full_name": "Dario Nieuwenhuis",
        "timestamp": 1645391971
    },
    {
        "content": "<p>and it can't see \"through\" the wrapper traits like <code>AsyncFnOnce1</code></p>",
        "id": 272617280,
        "sender_full_name": "Dario Nieuwenhuis",
        "timestamp": 1645392013
    },
    {
        "content": "<p>see thread: <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/closure.20type.20inference.20questions\">https://rust-lang.zulipchat.com/#narrow/stream/182449-t-compiler.2Fhelp/topic/closure.20type.20inference.20questions</a></p>",
        "id": 272617284,
        "sender_full_name": "Dario Nieuwenhuis",
        "timestamp": 1645392017
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"348152\">Dario Nieuwenhuis</span> <a href=\"#narrow/stream/187312-wg-async/topic/async.20closures.3F/near/272615866\">said</a>:</p>\n<blockquote>\n<p>Hmmm, why doesn't this work? It feels very close<br>\n<a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2021&amp;gist=a4b5cf6f5eab421bc45571b4d8013a5e\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2021&amp;gist=a4b5cf6f5eab421bc45571b4d8013a5e</a></p>\n</blockquote>\n<p>I think this fails due to <a href=\"https://github.com/rust-lang/rust/issues/70263\">#70263</a> as well. <br>\nReduced example: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2021&amp;gist=5ccdcb93e851dcdf8d6e666a2ac61e60\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2021&amp;gist=5ccdcb93e851dcdf8d6e666a2ac61e60</a></p>",
        "id": 272619197,
        "sender_full_name": "Dario Nieuwenhuis",
        "timestamp": 1645394125
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"257428\">Gus Wynn</span> <a href=\"#narrow/stream/187312-wg-async/topic/async.20closures.3F/near/272616960\">said</a>:</p>\n<blockquote>\n<p>Wait <span class=\"user-mention silent\" data-user-id=\"232018\">Daniel Henry-Mantilla</span>, are closures not meeting those bounds a bug?</p>\n</blockquote>\n<p>Well, it's kind of an unfortunate <em>feature</em> / mis-<em>feature</em>, more than a bug, since it's basically allowing lifetime <em>inference</em> to take precendence over lifetime higher-order promotion. I somehow always thought that the point of <code>async ||</code> (<em>true</em> async closures) was precisely that: to change such behavior to favor obtaining the higher-order signature that <code>async fn</code>s already have <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 272619670,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1645394548
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"348152\">Dario Nieuwenhuis</span> <a href=\"#narrow/stream/187312-wg-async/topic/async.20closures.3F/near/272617095\">said</a>:</p>\n<blockquote>\n<p>yep, it's this one <a href=\"https://github.com/rust-lang/rust/issues/70263\">https://github.com/rust-lang/rust/issues/70263</a></p>\n</blockquote>\n<p>lmao I posted on this issue once lol</p>",
        "id": 272835647,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1645550104
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232018\">Daniel Henry-Mantilla</span> <a href=\"#narrow/stream/187312-wg-async/topic/async.20closures.3F/near/272619670\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"257428\">Gus Wynn</span> <a href=\"#narrow/stream/187312-wg-async/topic/async.20closures.3F/near/272616960\">said</a>:</p>\n<blockquote>\n<p>Wait <span class=\"user-mention silent\" data-user-id=\"232018\">Daniel Henry-Mantilla</span>, are closures not meeting those bounds a bug?</p>\n</blockquote>\n<p>Well, it's kind of an unfortunate <em>feature</em> / mis-<em>feature</em>, more than a bug, since it's basically allowing lifetime <em>inference</em> to take precendence over lifetime higher-order promotion. I somehow always thought that the point of <code>async ||</code> (<em>true</em> async closures) was precisely that: to change such behavior to favor obtaining the higher-order signature that <code>async fn</code>s already have <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>\n</blockquote>\n<p>very unfortunate <em>mis-feature</em> then, as I would prefer async closures aren't special-cased around it <span aria-label=\"frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"frown\">:frown:</span></p>",
        "id": 272835850,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1645550171
    },
    {
        "content": "<p>is it a breaking change to favor the higher-order promotion or something?</p>",
        "id": 272835900,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1645550195
    }
]