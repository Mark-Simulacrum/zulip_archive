[
    {
        "content": "<p>We talked earlier about having block_on as a minimal executor available in std. It's pretty helpful for experimenting, bridging sync and async code, and does not seem like something that has a very controversial API. The implementation is also very minimal, and probably as efficient as it gets. The Waker is just something that calls <code>thread::unpark</code>: <a href=\"https://github.com/rust-lang-nursery/futures-rs/blob/master/futures-executor/src/local_pool.rs#L41-L74\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/futures-rs/blob/master/futures-executor/src/local_pool.rs#L41-L74\">https://github.com/rust-lang-nursery/futures-rs/blob/master/futures-executor/src/local_pool.rs#L41-L74</a></p>\n<p>What needs to be done to get it into std? Does it need an RFC?</p>",
        "id": 178262402,
        "sender_full_name": "Matthias247",
        "timestamp": 1571207057
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204219\">@Matthias247</span> maybe just make a PR at first to see how the implementation would look like and how much impl complexity it adds?</p>",
        "id": 178267382,
        "sender_full_name": "centril",
        "timestamp": 1571213159
    },
    {
        "content": "<p>I support the idea that experimenting with async is pretty annoying atm since it requires so much setup</p>",
        "id": 178267436,
        "sender_full_name": "centril",
        "timestamp": 1571213196
    },
    {
        "content": "<p>I wonder if that <code>static</code> will be optimized out if unused</p>",
        "id": 178267875,
        "sender_full_name": "centril",
        "timestamp": 1571213668
    },
    {
        "content": "<p>(some people may dislike the cost otherwise)</p>",
        "id": 178267886,
        "sender_full_name": "centril",
        "timestamp": 1571213689
    },
    {
        "content": "<p>The CURRENT_THREAD_NOTIFY static? It seems to be unnecessary. The ENTERED one seems harder to avoid.</p>",
        "id": 178269889,
        "sender_full_name": "stko",
        "timestamp": 1571215845
    },
    {
        "content": "<p>I have been using tokio’s current_thread_executor a lot even in my actual code where I know I don’t want/need to deal with multiple threads.</p>",
        "id": 178277247,
        "sender_full_name": "nagisa",
        "timestamp": 1571222858
    },
    {
        "content": "<p>That one will probably be more complicated, but I would probably just use whatever alternative single_thread runtime if it existed in std.</p>",
        "id": 178277438,
        "sender_full_name": "nagisa",
        "timestamp": 1571223010
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> you'd probably know if unused statics are removed from the final binary? we have <code>#[used]</code> precisely because they are stripped if unused, right?</p>",
        "id": 178277673,
        "sender_full_name": "centril",
        "timestamp": 1571223287
    },
    {
        "content": "<p>Unused statics will get removed from the binary (removal is considered by both LLVM and linker independently), yes, but it is very easy for a lazy_static to become considered \"used\", even if it is overall not.</p>",
        "id": 178277770,
        "sender_full_name": "nagisa",
        "timestamp": 1571223387
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> right, but lazy_static is presumably not going to be used in libstd</p>",
        "id": 178277796,
        "sender_full_name": "centril",
        "timestamp": 1571223439
    },
    {
        "content": "<p>Another caveat is that we might end up accidentally using this runtime to implement certain stdlib functions which otherwise look blocking</p>",
        "id": 178277853,
        "sender_full_name": "nagisa",
        "timestamp": 1571223484
    },
    {
        "content": "<p>enter() is not necessarily needed - it just provides another error message if people would use block_on in recursive fashion. Not sure whether that is required - afaik rust also doesn't protect against other recursion issues.</p>\n<p><code>CURRENT_THREAD_NOTIFY</code> is also not necessarily required. We can either always create an <code>Arc&lt;Thread&gt;</code>, or potentially create that lazily when the <code>Waker</code> gets cloned. Both are just more overhead in case <code>block_on</code> is used more than once.</p>",
        "id": 178347086,
        "sender_full_name": "Matthias247",
        "timestamp": 1571282598
    },
    {
        "content": "<p>would this live in <code>task</code> or <code>thread</code>? I actually like <code>std::thread::block_on</code> (or <code>block_on_task</code>/<code>block_on_future</code>/etc) - since it's the thread which gets blocked.</p>",
        "id": 178347153,
        "sender_full_name": "Matthias247",
        "timestamp": 1571282741
    },
    {
        "content": "<p>I started working on this. I think I have found a way on how to make this work  pretty efficient without the thread-local variable. 2 tricks here:<br>\n- There is actually no need to get the <code>Thread</code> handle until someone clones the Waker. For many primitive async/await examples that isn't necessary, and I can just check a local boolean flag for waking up.<br>\n- Thread in the stdlib is already an <code>Arc&lt;ThreadInner&gt;</code> - which I can exploited</p>",
        "id": 179161025,
        "sender_full_name": "Matthias247",
        "timestamp": 1572164426
    },
    {
        "content": "<p>Hmm, when using async/await in unit-tests for libstd (in the source files directly) I get:</p>\n<div class=\"codehilite\"><pre><span></span>error[E0433]: failed to resolve: could not find `poll_with_tls_context` in `future`\n\nerror[E0433]: failed to resolve: could not find `from_generator` in `future`\n</pre></div>\n\n\n<p>I guess at that compilation step some part for the generators is missing? Is there any way around it, e.g. by placing the test somewhere else? <span class=\"user-mention\" data-user-id=\"126931\">@centril</span>?</p>",
        "id": 179161539,
        "sender_full_name": "Matthias247",
        "timestamp": 1572165435
    },
    {
        "content": "<p>nevermind. Got it running by moving the test into a file in the tests/ subfolder</p>",
        "id": 179163320,
        "sender_full_name": "Matthias247",
        "timestamp": 1572168679
    },
    {
        "content": "<p>PR: <a href=\"https://github.com/rust-lang/rust/pull/65875\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/65875\">https://github.com/rust-lang/rust/pull/65875</a></p>",
        "id": 179182104,
        "sender_full_name": "Matthias247",
        "timestamp": 1572202191
    }
]