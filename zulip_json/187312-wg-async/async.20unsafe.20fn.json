[
    {
        "content": "<p>Maybe we ought to discuss the async unsafe fn question? cc <span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span>, <span class=\"user-mention\" data-user-id=\"126931\">@centril</span>, <span class=\"user-mention\" data-user-id=\"203289\">@boats</span></p>",
        "id": 169901125,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562616953
    },
    {
        "content": "<p>Whether to gate or not gate?</p>",
        "id": 169901174,
        "sender_full_name": "centril",
        "timestamp": 1562616965
    },
    {
        "content": "<p>Or the design?</p>",
        "id": 169901179,
        "sender_full_name": "centril",
        "timestamp": 1562616973
    },
    {
        "content": "<p>I am referring <a href=\"https://github.com/rust-lang/rust/issues/62149#issuecomment-509374290\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/62149#issuecomment-509374290\">to <span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span>'s comment</a></p>",
        "id": 169901193,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562617000
    },
    {
        "content": "<p>We did the same for <code>const unsafe fn</code> so I don't think it's surprising and moreover it wasn't mentioned in the RFC or report at all</p>",
        "id": 169901298,
        "sender_full_name": "centril",
        "timestamp": 1562617090
    },
    {
        "content": "<p>The basic concern is that <code>async unsafe fn</code> makes it unsafe to <em>produce</em> the closure but not to <em>await</em> it, but almost certainly the unsafety arises because of something the function does and not the mere act of <em>producing</em> the closure.</p>",
        "id": 169901372,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562617176
    },
    {
        "content": "<p>I suppose you can always \"desugar\" to </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">Future</span><span class=\"o\">&lt;</span><span class=\"p\">..</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">async</span><span class=\"w\"> </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 169901392,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562617197
    },
    {
        "content": "<p>i.e., to get today's semantics</p>",
        "id": 169901487,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562617225
    },
    {
        "content": "<p>I think the part of <span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span>'s comment that caught my eye was this:</p>\n<blockquote>\n<p>Yet another feature gate will contribute to the impression of async/await as unfinished.</p>\n</blockquote>\n<p>which is perhaps a more basic disagreement. </p>\n<p>Still, I feel like <code>async unsafe fn</code> will be a relatively unusual thing..?</p>",
        "id": 169901556,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562617322
    },
    {
        "content": "<p>I think the impression is true so there's no need to pretend it is not</p>",
        "id": 169901617,
        "sender_full_name": "centril",
        "timestamp": 1562617370
    },
    {
        "content": "<p>There's an honesty to that; and I don't think gating <code>async unsafe fn</code> changes it particularly</p>",
        "id": 169901639,
        "sender_full_name": "centril",
        "timestamp": 1562617392
    },
    {
        "content": "<p><code>const fn</code> is also radically more unfinished, yet we shipped it</p>",
        "id": 169901672,
        "sender_full_name": "centril",
        "timestamp": 1562617420
    },
    {
        "content": "<blockquote>\n<p>I think the impression is true so there's no need to pretend it is not</p>\n</blockquote>\n<p>I also feel that way :)</p>",
        "id": 169901748,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562617476
    },
    {
        "content": "<p>(If nothing else, the fact that it doesn't work in traits feels incomplete, though I understand that this is an oversimplification.)</p>",
        "id": 169901773,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562617501
    },
    {
        "content": "<p>I believe that <code>const unsafe fn</code> is significantly different from <code>unsafe async fn</code> in that the interaction between <code>unsafe</code> and <code>const</code> is actually unclear</p>",
        "id": 169902819,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1562618293
    },
    {
        "content": "<p>there are actually key things about what unsafe code is allowed in <code>const fn</code> that had not yet been determined</p>",
        "id": 169902827,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1562618309
    },
    {
        "content": "<p>I don't believe the same is true for <code>async unsafe fn</code>-- I don't know of any outstanding questions around the interaction between <code>async</code> and <code>unsafe</code>, and the current behavior is, I believe, easily justified by the desugared understanding of what <code>async fn</code> means.</p>",
        "id": 169902889,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1562618383
    },
    {
        "content": "<blockquote>\n<p>I think the impression is true so there's no need to pretend it is not</p>\n</blockquote>",
        "id": 169902978,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1562618440
    },
    {
        "content": "<p>I'm not sure what the point you're making here is. We've put a lot of work into making sure that <code>async</code>/<code>await</code> provides a positive end-user experience despite some currently fundamental limitations.</p>",
        "id": 169903024,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1562618491
    },
    {
        "content": "<p>Those limitations are necessary, understandable and easily justified once users understand the desugared model of <code>async fn</code>.</p>",
        "id": 169903113,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1562618529
    },
    {
        "content": "<p>Blocking basic things like <code>unsafe</code> from working, however, isn't a fundamental or difficult problem in any way, is not interesting to consider from a user's perspective, the workarounds don't teach the user more about the system than they would have known otherwise (unlike the lessons to be learned from attempting to use <code>async fn</code> in traits), and overall I think this sort of limitation will strike users more as missing polish than interesting open design considerations.</p>",
        "id": 169903322,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1562618700
    },
    {
        "content": "<p>In that, I think it's more similar to bad error messages than it is to not being able to use <code>async fn</code> in traits.</p>",
        "id": 169903355,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1562618729
    },
    {
        "content": "<blockquote>\n<p>I believe that const unsafe fn is significantly different from unsafe async fn in that the interaction between unsafe and const is actually unclear</p>\n</blockquote>\n<p>It wasn't that unclear actually, there was just some hesitation on my end but we didn't change that much aside from not allowing some things to be <code>const</code>.</p>\n<blockquote>\n<p>[...], and the current behavior is, I believe, easily justified by the desugared understanding of what async fn means.</p>\n</blockquote>\n<p>This assumes a certain desugaring and it focuses on explanation by desugaring. One could imagine a different one which would render <code>.await</code> the point at which you have to use <code>unsafe { ... }</code> which at least from my view is saner on initial inspection.</p>",
        "id": 169903651,
        "sender_full_name": "centril",
        "timestamp": 1562618947
    },
    {
        "content": "<p>No, I don't believe that would be correct</p>",
        "id": 169903752,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1562619018
    },
    {
        "content": "<p>(using <code>unsafe</code> where the future is awaited, rather than constructed)</p>",
        "id": 169903767,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1562619034
    },
    {
        "content": "<p>For one, await isn't the only way to poll or manipulate a future. The moment at which the future is constructed is the moment at which you must ensure all invariants are satisfied</p>",
        "id": 169903805,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1562619068
    },
    {
        "content": "<p>this is true today with <code>unsafe fn foo() -&gt; impl Future</code></p>",
        "id": 169903818,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1562619086
    },
    {
        "content": "<blockquote>\n<p>For one, await isn't the only way to poll or manipulate a future. The moment at which the future is constructed is the moment at which you must ensure all invariants are satisfied</p>\n</blockquote>\n<p>an interesting observation.</p>",
        "id": 169903977,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562619221
    },
    {
        "content": "<p>I feel like it happens a plenty that the \"contract\" on an unsafe fn constraints future actions of what you can do w/ the return value</p>",
        "id": 169904000,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562619242
    },
    {
        "content": "<p>(and past actions of what you can have done leading up to this)</p>",
        "id": 169904048,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562619251
    },
    {
        "content": "<p>Yeah, I do this all the time with things that are e.g. implementations of safe <code>Visitor</code> traits that have unsafe behavior and so are unsafe to construct, yet the trait methods themselves are safe</p>",
        "id": 169904088,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1562619295
    },
    {
        "content": "<p>it was one of the reasons I pushed back against <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> 's idea way back when that literal <code>unsafe { ... }</code> blocks should have an effect on the way the code inside them was optimized</p>",
        "id": 169904143,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1562619334
    },
    {
        "content": "<p>we'll leave that part aside :P</p>",
        "id": 169904233,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562619381
    },
    {
        "content": "<p>(there is clearly still some kind of \"scope\" of unsafety that ought to be observed...)</p>",
        "id": 169904252,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562619398
    },
    {
        "content": "<p>but it's neither here nor there :) well, it is <em>relevant</em>, in that this is the concern</p>",
        "id": 169904264,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562619422
    },
    {
        "content": "<p>but you are correct that this same thing arises frequently in Rust</p>",
        "id": 169904274,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562619432
    },
    {
        "content": "<p>Right, I don't think the situation with <code>async unsafe fn</code> is unique or interesting, either of which might suggest that we should deliberate</p>",
        "id": 169904299,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1562619464
    },
    {
        "content": "<p>I could vaguely imagine some kind of system where you can do <code>-&gt; impl unsafe Future</code> to indicate that invoke the trait methods is unsafe, which I guess is more in the direction of what <span class=\"user-mention\" data-user-id=\"126931\">@centril</span> is imagining.</p>",
        "id": 169904367,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562619501
    },
    {
        "content": "<p>right, with an <code>unsafe poll</code></p>",
        "id": 169904383,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1562619520
    },
    {
        "content": "<p>But it seems... pretty far off to me to even contemplate. I guess it depends if we get some notion of a <code>const</code> trait bound that can be applied</p>",
        "id": 169904388,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562619526
    },
    {
        "content": "<p>(the alternative would be a <code>impl UnsafeFuture</code> hack, where that is a distinct trait)</p>",
        "id": 169904400,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562619540
    },
    {
        "content": "<p>which requires some kind of abstraction over whether or not a trait impl is <code>unsafe</code> and a way to be generic over <code>unsafe</code>ty of a trait implementor</p>",
        "id": 169904405,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1562619543
    },
    {
        "content": "<blockquote>\n<p>I guess it depends if we get some notion of a <code>const</code> trait bound that can be applied</p>\n</blockquote>\n<p>this is specifically the thing I had in mind when I said \"seems like it can't hurt to take some time and think about it\"</p>",
        "id": 169904412,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562619558
    },
    {
        "content": "<p>the same pattern can be applied to the visitor i mentioned above</p>",
        "id": 169904415,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1562619562
    },
    {
        "content": "<p>This is all astronomically far away from reality, though</p>",
        "id": 169904446,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1562619590
    },
    {
        "content": "<blockquote>\n<p>Yeah, I do this all the time with things that are e.g. implementations of safe Visitor traits that have unsafe behavior and so are unsafe to construct, yet the trait methods themselves are safe</p>\n</blockquote>\n<p>Things like that does surprise me; that's not my idea of how scoping of <code>unsafe</code> works but I suppose <code>unsafe</code> is very \"build your own\" in terms of how you define scoping.</p>\n<blockquote>\n<p>For one, await isn't the only way to poll or manipulate a future.</p>\n</blockquote>\n<p>A good point; ostensibly you can imagine <code>trait UnsafeFuture: Future {}</code> which is checked on calls to <code>.poll</code> through lang items to change this but costs are increasing now... (i.e. \"hack\" in <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>'s sense but the trait itself can be forever-unstable)</p>\n<blockquote>\n<p>this is true today with unsafe fn foo() -&gt; impl Future</p>\n</blockquote>\n<p>Well the unsafety could be before the future is returned in that case so it feels different.</p>\n<blockquote>\n<p>The moment at which the future is constructed is the moment at which you must ensure all invariants are satisfied</p>\n</blockquote>\n<p>Any particular examples of when it would be problematic for <code>async unsafe fn</code> otherwise?</p>\n<blockquote>\n<p>This is all astronomically far away from reality, though</p>\n</blockquote>\n<p>That's not my impression from talking with Oliver's re. <code>const fn</code> and trait bounds.</p>",
        "id": 169904812,
        "sender_full_name": "centril",
        "timestamp": 1562619870
    },
    {
        "content": "<p>I can go either way I guess. I feel like the current semantics are pretty reasonable given the state of Rust (and, indeed, the desugaring). But I also don't mind waiting a bit to talk over the possible ways we might handle this, it seems like a bit of a corner case. </p>\n<p>I also like the strategy of using a \"reference desugaring\" (whether or not that is how it is implemented) to help handle corner cases in the semantics.</p>",
        "id": 169904820,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562619872
    },
    {
        "content": "<blockquote>\n<p>I also like the strategy of using a \"reference desugaring\" (whether or not that is how it is implemented) to help handle corner cases in the semantics.</p>\n</blockquote>\n<p>I like this as well when you can actually do it but this can also be a trap... one that I think I laid for myself with <code>if a &amp;&amp; let b = c {</code></p>",
        "id": 169904975,
        "sender_full_name": "centril",
        "timestamp": 1562619983
    },
    {
        "content": "<p>I do not believe there is a viable alternative for <code>async unsafe fn</code> to what is currently implemented and I don't think it should be blocked from stabilization.</p>",
        "id": 170455896,
        "sender_full_name": "boats",
        "timestamp": 1562681183
    },
    {
        "content": "<blockquote>\n<p>A good point; ostensibly you can imagine trait UnsafeFuture: Future {} which is checked on calls to .poll through lang items to change this but costs are increasing now... (i.e. \"hack\" in</p>\n</blockquote>",
        "id": 170456046,
        "sender_full_name": "boats",
        "timestamp": 1562681285
    },
    {
        "content": "<p>This doesn't make sense to me, these types would still implement <code>Future</code> and thus have a safe poll method (unless you meant adding a supertrait to <em>future</em>, rather than what you wrote, but even this is pretty contrived and complicated)</p>",
        "id": 170456145,
        "sender_full_name": "boats",
        "timestamp": 1562681351
    },
    {
        "content": "<p>Yeah it has to be a supertrait</p>",
        "id": 170456325,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562681481
    },
    {
        "content": "<p>But that route feels \"not worth it\" to me</p>",
        "id": 170456345,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562681503
    },
    {
        "content": "<p>yea its a lot of machiner and I agree with taylor that this represents a very normal pattern (imposing invariants on the constructor you expect to be true during the lifetime of the object)</p>",
        "id": 170456690,
        "sender_full_name": "boats",
        "timestamp": 1562681737
    },
    {
        "content": "<p>literally this is how <code>Vec::from_raw_parts</code> works!</p>",
        "id": 170456699,
        "sender_full_name": "boats",
        "timestamp": 1562681743
    },
    {
        "content": "<p>I also don't know what invariants you could be upholding at an await point, either.. I guess if it involved some shared state passed in through the function call.</p>",
        "id": 170457172,
        "sender_full_name": "boats",
        "timestamp": 1562682032
    },
    {
        "content": "<p>Yea after these few minutes of reflection, not only do I think an alternative design is overcomplicated, I think it would be wrong. In practice, the only place to uphold invariants on an async fn is at the call site.</p>",
        "id": 170457300,
        "sender_full_name": "boats",
        "timestamp": 1562682121
    },
    {
        "content": "<p>I mean I think you may well have to check things at the await site -- i.e., that a raw pointer is still valid.</p>",
        "id": 170457954,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562682465
    },
    {
        "content": "<p>But I do think it's \"the normal pattern\" in Rust today to denote such things <em>primarily</em> at the creation site (from-raw-parts being a good example)</p>",
        "id": 170458023,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562682487
    },
    {
        "content": "<p>thats what i mean by shared state passed in through the call</p>",
        "id": 170458042,
        "sender_full_name": "boats",
        "timestamp": 1562682503
    },
    {
        "content": "<p>And a lot of times those invariants <em>are</em> solely* enforced at the creation site in any case</p>",
        "id": 170458049,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562682506
    },
    {
        "content": "<p>e.g., \"this must be a raw pointer that represents an owned box\" or \"this index must be within bounds for that thing\" or something</p>",
        "id": 170458082,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562682525
    },
    {
        "content": "<p>(I guess it'd be interesting to see some examples in practice)</p>",
        "id": 170458113,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562682543
    },
    {
        "content": "<p>It's also true for <code>Vec::from_raw_parts</code> for example, that you can't invalidate the pointer you pass to it through another API later on.</p>",
        "id": 170458504,
        "sender_full_name": "boats",
        "timestamp": 1562682751
    },
    {
        "content": "<p>I don't even think this rises to the level of the interaction between <code>Pin</code> and <code>Drop</code>, where we unfortunately have to uphold invariants in a less than ideal place (pin projection) because we can't uphold them in the best place (the drop impl).</p>",
        "id": 170458696,
        "sender_full_name": "boats",
        "timestamp": 1562682881
    },
    {
        "content": "<blockquote>\n<p>It's also true for <code>Vec::from_raw_parts</code> for example, that you can't invalidate the pointer you pass to it through another API later on.</p>\n</blockquote>\n<p>right, it represents a (logical) ownership transfer</p>",
        "id": 170470449,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562691444
    },
    {
        "content": "<blockquote>\n<p>it was one of the reasons I pushed back against <span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> 's idea way back when that literal <code>unsafe { ... }</code> blocks should have an effect on the way the code inside them was optimized</p>\n</blockquote>\n<p>I wouldnt even say it was my idea, I think I got it from Niko's blog post. ;) But yes I entertained it for a while. Mostly out of necessity. But with Stacked Borrows it does not seem needed any more and then I definitely prefer not to do it (i.e., I prefer to leave <code>unsafe</code> a purely syntactic marker).</p>",
        "id": 170516982,
        "sender_full_name": "RalfJ",
        "timestamp": 1562741537
    }
]