[
    {
        "content": "<p>Currently you can do something like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>let future = async_function_call();\n... do other stuff ...\nlet result = future.await;\n</code></pre></div>\n<p>Is there any reason to do that? In theory it would allow eager execution so that the eventual <code>await</code> call returns immediately if the future got done before we needed it. However, Rust doesn't do anything with futures until they are polled, so it seems like the main benefit of not immediately awaiting doesn't apply.</p>",
        "id": 249890870,
        "sender_full_name": "eholk",
        "timestamp": 1629310722
    },
    {
        "content": "<p>right, there's not much point to that pattern in rust. the equivalent pattern  if you do want some amount of concurrency is to spawn the future as a new task, or else use some combinator like <code>join!</code> or <code>select!</code></p>",
        "id": 249893053,
        "sender_full_name": "rpjohnst",
        "timestamp": 1629311735
    },
    {
        "content": "<p>spawned task handles are actually a decent use case for this pattern, since they allow for the \"concurrency in the meantime\" you're talking about, while still allowing you to sequence operations after the spawned code</p>",
        "id": 249915149,
        "sender_full_name": "tmandry",
        "timestamp": 1629322657
    },
    {
        "content": "<p>So would that look something like this?</p>\n<div class=\"codehilite\"><pre><span></span><code>let handle = spawn(async { do_some_computation() });\ndo_some_stuff_in_the_meantime();\nlet result = handle.await;\n</code></pre></div>",
        "id": 249923315,
        "sender_full_name": "eholk",
        "timestamp": 1629328679
    },
    {
        "content": "<p>Where <code>handle.await</code> is basically the same as <code>join!</code></p>",
        "id": 249923380,
        "sender_full_name": "eholk",
        "timestamp": 1629328704
    },
    {
        "content": "<p><code>join!</code> in future land is quite distinct</p>",
        "id": 249923565,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629328864
    },
    {
        "content": "<p>but <code>handle.await</code> is basically the same as \"joining a thread\" in that case</p>",
        "id": 249923583,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629328878
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"421986\">eholk</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/Delayed.20awaiting/near/249923315\">said</a>:</p>\n<blockquote>\n<p>So would that look something like this?</p>\n<p><div class=\"codehilite\"><pre><span></span><code>let handle = spawn(async { do_some_computation() });\ndo_some_stuff_in_the_meantime();\nlet result = handle.await;\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Very common is this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">handles</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Vec</span>::<span class=\"n\">with_capacity</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">handles</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">spawn</span><span class=\"p\">(</span><span class=\"n\">reqwest</span>::<span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">\"...\"</span><span class=\"p\">)));</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">handles</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">h</span><span class=\"p\">.</span><span class=\"k\">await</span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 250141953,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1629477520
    }
]