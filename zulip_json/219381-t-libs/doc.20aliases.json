[
    {
        "content": "<p>I just posted <a href=\"https://github.com/rust-lang/rust/pull/84709\">https://github.com/rust-lang/rust/pull/84709</a> , which adds a doc alias for <code>chdir</code>. We've had several discussions recently about the level of justification we should require before adding a doc alias. I'm hoping that that PR sets a good example for a threshold that I think we should consider reasonable.</p>",
        "id": 236734240,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1619725780
    },
    {
        "content": "<p>in a far future, I'm imagining that you can pick your \"previous language\" from a dropdown in the settings and get doc aliases based on that. ArrayList searches turn up Vec, for example.</p>",
        "id": 236779219,
        "sender_full_name": "Lokathor",
        "timestamp": 1619752166
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> In this case, it isn't so much \"previous language\" as \"operating system\".</p>",
        "id": 236780375,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1619753309
    },
    {
        "content": "<p>chdir is a UNIX (POSIX) thing.</p>",
        "id": 236780381,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1619753317
    },
    {
        "content": "<p>I just assumed it was some C thing, since C and Unix are such close friends</p>",
        "id": 236781700,
        "sender_full_name": "Lokathor",
        "timestamp": 1619754622
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> i really think we should first write down a guideline before adding more. every time we accept a PR like this, we suddenly get many more PRs with similar additions for which we still don't have a guideline</p>",
        "id": 236821381,
        "sender_full_name": "Mara",
        "timestamp": 1619782593
    },
    {
        "content": "<p>Fair enough. We do need a policy.</p>",
        "id": 236821456,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1619782656
    },
    {
        "content": "<p>it would be nice if rustdoc search results showed badges next to each item, sort of like how it displays \"deprecated\" and \"experimental\" badges next to items in the module-level docs. in addition to showing \"deprecated\" and \"experimental\" badges in the search results, it could also show an \"alias\" badge, and the search results page could also sort the results so that it displays in order 1) normal results, 2) aliased results, 3) deprecated results, 4) experimental results</p>",
        "id": 236980514,
        "sender_full_name": "bstrie",
        "timestamp": 1619886000
    },
    {
        "content": "<p>that would take a lot of the edge off of the alias additions, IMO</p>",
        "id": 236980572,
        "sender_full_name": "bstrie",
        "timestamp": 1619886017
    },
    {
        "content": "<p>I'd take a pr for that :)</p>",
        "id": 236980945,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1619886335
    },
    {
        "content": "<p>I don't think always sorting deprecated and experimental things to the bottom is great though, that could be what you're looking for. Rustdoc has <em>lots</em> of search results especially for small queries</p>",
        "id": 236981066,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1619886414
    },
    {
        "content": "<p>I tend to disagree, take a look at a search for \"MAX\": <a href=\"https://doc.rust-lang.org/std/index.html?search=max\">https://doc.rust-lang.org/std/index.html?search=max</a> , where all the deprecated items are sorted above the non-deprecated items, which results in bad user experience. I see no reason for deprecated items to ever take precedence over their replacements; for the subset of people who actually want the deprecated items, they can scroll down, because the alternative is to penalize the people who are looking for the non-deprecated items, which seems counter-productive</p>",
        "id": 236981203,
        "sender_full_name": "bstrie",
        "timestamp": 1619886566
    },
    {
        "content": "<p>but yes, I'd be happy to submit a PR adding badges to search results, but I'll probably need some mentoring since I've never touched rustdoc before. I'll take it into the rustdoc channel</p>",
        "id": 236981303,
        "sender_full_name": "bstrie",
        "timestamp": 1619886618
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256342\">@bstrie</span> that's because you searched for <em>exactly</em> max and there are lots of exact results. If you search for try there are lots of inexact results and sorting try! to the bottom makes it hard to find: <a href=\"https://doc.rust-lang.org/std/index.html?search=try\">https://doc.rust-lang.org/std/index.html?search=try</a></p>",
        "id": 236983677,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1619888704
    },
    {
        "content": "<p>sorting exact results according to your idea seems fine though</p>",
        "id": 236983710,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1619888726
    },
    {
        "content": "<p>I wasn't intending to disrupt the current hierarchy of results, i.e. first you display exact matches, then you display fuzzy matches. the deprecated etc. sorting would take place within each hierarchy</p>",
        "id": 236983806,
        "sender_full_name": "bstrie",
        "timestamp": 1619888792
    },
    {
        "content": "<p>ahhh that makes more sense</p>",
        "id": 236983829,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1619888814
    },
    {
        "content": "<p>but first I'll implement the badges for deprecated/experimental, then the next step can be badges for aliases, then we can work out the sorting after those are in</p>",
        "id": 236983888,
        "sender_full_name": "bstrie",
        "timestamp": 1619888876
    },
    {
        "content": "<p>the aforementioned hierarchy is relevant to this discussion; I might expect that an alias would only show up in search results based on exactly matching the alias, and not fuzzy matching the alias. this would reduce the cognitive cost of adding a ton of aliases</p>",
        "id": 236984063,
        "sender_full_name": "bstrie",
        "timestamp": 1619888983
    },
    {
        "content": "<p>I think the issue with aliases is that they lack context. It should be something like <code>doc(alias(name=\"chdir\", from=\"posix\"))</code></p>",
        "id": 236984990,
        "sender_full_name": "The 8472",
        "timestamp": 1619889802
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"330154\">@The 8472</span> I would love to see that.</p>",
        "id": 236989743,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1619894267
    },
    {
        "content": "<p>Sure, the badge could easily contain that information. Something like \"AKA in Python\", \"AKA in POSIX\" (I'd avoid using the phrase \"alias\" literally to avoid any potential confusion with type aliases)</p>",
        "id": 236989957,
        "sender_full_name": "bstrie",
        "timestamp": 1619894468
    },
    {
        "content": "<p>There are multiple overloaded uses for alias. Stuff people might know from other languages or libraries but also general documentation help, e.g. there's one for <code>+=</code> on <code>AddAssign</code>. Also the old name on some replacements for deprecated functions. And I think some other uses have been proposed too.</p>",
        "id": 236990726,
        "sender_full_name": "The 8472",
        "timestamp": 1619895192
    },
    {
        "content": "<p>How about \"equivalent in language X\"?</p>",
        "id": 236990816,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619895289
    },
    {
        "content": "<p>once aliases are added for multiple languages that might be too wordy.<code> &lt;language logo&gt;: &lt;alias&gt;</code>, if it has a logo.</p>",
        "id": 236990942,
        "sender_full_name": "The 8472",
        "timestamp": 1619895438
    },
    {
        "content": "<p>that seems a bit too elaborate, not everything has a universal logo or a recognizable logo (javascript, posix). either way you need to print the string, so I don't see much use in the logo</p>",
        "id": 236995613,
        "sender_full_name": "bstrie",
        "timestamp": 1619900290
    },
    {
        "content": "<p>I would just do the name of the language: <code>posix: chdir</code></p>",
        "id": 237002846,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1619905075
    },
    {
        "content": "<p>the problem is that we still need to decide which languages/standards we're going to refer to, and what we consider 'equivalent'. we simply do not have the bandwidth or knowledge to maintain these mappings for every popular language in existence. and even if we did, it's not clear at all what 'the equivalent of a python dict' is for example. depends entirely on which properties of that type are relevant.</p>",
        "id": 237040702,
        "sender_full_name": "Mara",
        "timestamp": 1619947972
    },
    {
        "content": "<p>a python-&gt;rust cheat sheet would need to contain a bit of an explanation about in which ways things are and aren't the same. that kind of context/explanation does not fit in <code>doc(alias = \"python: thing\")</code>.</p>",
        "id": 237040766,
        "sender_full_name": "Mara",
        "timestamp": 1619948041
    },
    {
        "content": "<p>Yeah, an entire language cheat sheet is something for like an appendix chapter of The Book (one lang per page), or more likely it's just a project of its own.</p>",
        "id": 237188640,
        "sender_full_name": "Lokathor",
        "timestamp": 1620059235
    },
    {
        "content": "<p>I've seen such a PR recently,  <a href=\"https://github.com/rust-lang/rust/issues/86554\">#86554</a> or <a href=\"https://github.com/rust-lang/rust/issues/86596\">#86596</a> for instance. It'd be great if our current standing is documented to prevent accepting aliases by mistake and lose consistency (and the docs would help us review them)</p>",
        "id": 243793287,
        "sender_full_name": "Yuki Okushi",
        "timestamp": 1624544519
    },
    {
        "content": "<p>But I'm not sure where is the best, maybe std-dev-guide?</p>",
        "id": 243793361,
        "sender_full_name": "Yuki Okushi",
        "timestamp": 1624544535
    },
    {
        "content": "<p>sounds like something for the libs agenda. i'll make an issue for it</p>",
        "id": 243793484,
        "sender_full_name": "Mara",
        "timestamp": 1624544581
    },
    {
        "content": "<p>sounds good, thanks!</p>",
        "id": 243793596,
        "sender_full_name": "Yuki Okushi",
        "timestamp": 1624544628
    },
    {
        "content": "<p>I believe we should consider two documentation alias sets:<br>\nAliases of the form: \"linear_interpolation\" for \"lerp\" or vice versa. These are not about other programming languages, these are about literal ways to say the thing differently.<br>\nCertain POSIX, Darwin, Linux, and Windows aliases instead of language aliases for OS-generic system APIs where there is an unequivocal match, especially for the cases where we already do so anyways(!)</p>",
        "id": 244085438,
        "sender_full_name": "Jubilee",
        "timestamp": 1624828728
    },
    {
        "content": "<p>I think \"unequivocal match\" is likely to be the largest source of controversy there.</p>",
        "id": 244087938,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1624832293
    },
    {
        "content": "<p>That aside, though, I agree with that proposed policy.</p>",
        "id": 244087955,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1624832324
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310399\">Mara</span> <a href=\"#narrow/stream/219381-t-libs/topic/doc.20aliases/near/243793484\">said</a>:</p>\n<blockquote>\n<p>sounds like something for the libs agenda. i'll make an issue for it</p>\n</blockquote>\n<p>Thanks!  I was meaning to ask about that second PR.</p>",
        "id": 244090281,
        "sender_full_name": "scottmcm",
        "timestamp": 1624836277
    },
    {
        "content": "<p>In practice, I would expect it to be \"we're notionally 'just' providing an interface to that syscall.\"<br>\nBoth of these transform things into having a policy of \"provide aliases from every programming language and wind up shipping a terabyte of aliases over the next couple years\" to \"provide aliases to things that make sense to Rust in Rust\".</p>",
        "id": 244092057,
        "sender_full_name": "Jubilee",
        "timestamp": 1624839414
    }
]