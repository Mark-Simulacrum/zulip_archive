[
    {
        "content": "<p>Currently, <code>TrustedLen</code> is implemented for all <code>Range&lt;T&gt; where T: Step</code>. Is there any technical reason why this must be the case, or would it make sense to use specific impls instead of the blanket impl. This would allow the <code>Step</code> trait to no longer be marked <code>unsafe</code>.</p>",
        "id": 232527027,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1617157724
    },
    {
        "content": "<p>That's not enough, because <code>next</code> is trusting <code>&lt;</code> to be able to call <code>forward_unchecked</code>: <a href=\"https://doc.rust-lang.org/src/core/iter/range.rs.html#506\">https://doc.rust-lang.org/src/core/iter/range.rs.html#506</a></p>",
        "id": 232534006,
        "sender_full_name": "scottmcm",
        "timestamp": 1617164225
    },
    {
        "content": "<p>Although I guess the safety condition could be that <code>&lt;</code> returned true, so you can only rely on that in the implementation of <code>forward_unchecked</code> if you trust the <code>&lt;</code> operator?</p>",
        "id": 232534107,
        "sender_full_name": "scottmcm",
        "timestamp": 1617164315
    },
    {
        "content": "<p>(But the meta question of whether <code>Step</code> is well-enough justified to be a trait, vs just implementing <code>Iterator</code> for a known set of range types, is an interesting one.)</p>",
        "id": 232534138,
        "sender_full_name": "scottmcm",
        "timestamp": 1617164368
    },
    {
        "content": "<p>I feel like this is similar to how <code>Hash</code> requires valid <code>PartialEq</code>/<code>Eq</code> implementations, even though nothing is <code>unsafe</code>.</p>",
        "id": 232534217,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1617164427
    },
    {
        "content": "<p>I think <code>Step</code> should implement <code>Iterator</code> â€” that's pretty much why it exists. I was just confused as to why it was <code>unsafe</code>, and found that it was because <code>TrustedLen</code> is <em>automatically</em> implemented for <code>Range&lt;T: Step&gt;</code></p>",
        "id": 232534293,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1617164498
    },
    {
        "content": "<p><code>forward_unchecked</code> being unsafe is important, though -- that tells LLVM it doesn't wrap, which is much better than the hack it used to use</p>",
        "id": 232534358,
        "sender_full_name": "scottmcm",
        "timestamp": 1617164547
    },
    {
        "content": "<p>I get that. The <em>entire trait</em> is unsafe to implement, though.</p>",
        "id": 232534369,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1617164570
    },
    {
        "content": "<p>It's <code>unsafe trait Step</code></p>",
        "id": 232534377,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1617164583
    },
    {
        "content": "<p>Right, and the <code>unsafe</code> there is a statement about <code>&lt;</code>.</p>",
        "id": 232534394,
        "sender_full_name": "scottmcm",
        "timestamp": 1617164614
    },
    {
        "content": "<p>(Reference to the old hack: <a href=\"https://doc.rust-lang.org/1.31.0/src/core/iter/range.rs.html#223\">https://doc.rust-lang.org/1.31.0/src/core/iter/range.rs.html#223</a>)</p>",
        "id": 232534402,
        "sender_full_name": "scottmcm",
        "timestamp": 1617164632
    },
    {
        "content": "<p>Just spitballing here, but it <em>would</em> be possible to have the trait itself be safe, change the linked line to <code>let n = Step::forward(self.start.clone(), 1).expect(\"you screwed up invariants\");</code>, yes? Performance could be matched with specialization for the stdlib types (basically integers and char). At that point there wouldn't be any potential for UB, correct?</p>",
        "id": 232534791,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1617164912
    },
    {
        "content": "<p>So there would be a \"potential\" panic (unless it could be optimized out) for user-code, but stdlib would work as it currently does.</p>",
        "id": 232534859,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1617164991
    },
    {
        "content": "<p>Sure, or <code>range_next</code> could just be a method on <code>Step</code> with a default implementation.</p>",
        "id": 232535028,
        "sender_full_name": "scottmcm",
        "timestamp": 1617165119
    },
    {
        "content": "<p>That would make a lot more sense lol</p>",
        "id": 232535081,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1617165137
    },
    {
        "content": "<p>Lots of possibilities -- all the way up to marking <code>Range</code> as <code>#[fundamental]</code> and thus letting people implement <code>Iterator</code> on it themselves.  (Which is the direction that having <code>Step::range_next</code> is sortof heading.)</p>",
        "id": 232535163,
        "sender_full_name": "scottmcm",
        "timestamp": 1617165217
    },
    {
        "content": "<p>I'll definitely think about this more. The status quo seems like it's leaking an optimization detail that requires <code>unsafe</code> externally when that doesn't strictly have to be the case.</p>",
        "id": 232535795,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1617165787
    },
    {
        "content": "<p>On the other hand anything relying on specialization isn't available to 3rd party implementations because specialization is unstable.</p>",
        "id": 232611425,
        "sender_full_name": "The 8472",
        "timestamp": 1617204484
    },
    {
        "content": "<p>specialization is unstable <em>for now</em> -- the standard library should be designed with the assumption that specialization will eventually be stable</p>",
        "id": 232628299,
        "sender_full_name": "cuviper",
        "timestamp": 1617210330
    },
    {
        "content": "<p>given the state of specialization I'd say it's a bit fraught to even attempt to guess what specialization eventually will or won't allow. which is to say, I think specialization ought to be considered nothing more than an implementation detail right now, and the standard library should be designed such that nothing backward-incompatible would occur if in theory specialization were removed outright.</p>",
        "id": 232640568,
        "sender_full_name": "bstrie",
        "timestamp": 1617214944
    },
    {
        "content": "<p>What I mentioned would only use specialization for optimization, nothing more</p>",
        "id": 232641636,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1617215356
    },
    {
        "content": "<p>Going to try my idea of changing the default impl and using specialization for stdlib perf. It would let us keep the <code>Step</code> trait mostly as-is, while making it not UB to break invariants (just wrong behavior). I think that's the smartest way to modify it so it can be stabilized <span aria-label=\"fingers crossed\" class=\"emoji emoji-1f91e\" role=\"img\" title=\"fingers crossed\">:fingers_crossed:</span></p>",
        "id": 232709442,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1617257815
    },
    {
        "content": "<p>Welp, turns out the specialization breaks inference :/ Pretty sure this is related <a href=\"https://github.com/rust-lang/rust/issues/46363\">https://github.com/rust-lang/rust/issues/46363</a></p>",
        "id": 232719071,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1617264409
    },
    {
        "content": "<p>Isn't that the reason why most specializations in std delegate to an internal  specialization trait?</p>",
        "id": 232779931,
        "sender_full_name": "The 8472",
        "timestamp": 1617292158
    },
    {
        "content": "<p>maybe there are multiple reasons, but AIUI internal specialization is to avoid \"impl may be specialized\" being part of the stable <code>std</code> API, once specialization itself is stable</p>",
        "id": 232790835,
        "sender_full_name": "cuviper",
        "timestamp": 1617296580
    },
    {
        "content": "<p>the inference problem is new to me</p>",
        "id": 232790910,
        "sender_full_name": "cuviper",
        "timestamp": 1617296614
    },
    {
        "content": "<p>Ok, but that approach still should avoid any inference problems since the specialization helpers will only be used in one place.</p>",
        "id": 232800942,
        "sender_full_name": "The 8472",
        "timestamp": 1617300886
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"330154\">@The 8472</span> yes, I asked on #t-compiler and that was the recommendation. It worked and I'm prepping a PR now.</p>",
        "id": 232861704,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1617340646
    },
    {
        "content": "<p>Not sure if #t-libs is the right stream for this, but could someone with the proper knowledge of MIR explain what exactly this means? I <em>think</em> it's a matter of missing <code>#[inline(always)]</code> on the private specialization. It's hard to make sense of because it's literally the diff of a diff.</p>",
        "id": 232868043,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1617346952
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/83772#issuecomment-812357040\">https://github.com/rust-lang/rust/pull/83772#issuecomment-812357040</a></p>",
        "id": 232868055,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1617346955
    },
    {
        "content": "<p>Aside from the \"scope 7\" block, I think this diff amounts to just moving part of <code>bb2</code> to <code>bb4</code>, which presumably isn't an issue. But I don't know enough about MIR to say for sure.</p>",
        "id": 232868189,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1617347052
    },
    {
        "content": "<p>If the optimization still works then I think you only have to regenerate the expected output for that test.</p>",
        "id": 232868306,
        "sender_full_name": "The 8472",
        "timestamp": 1617347169
    },
    {
        "content": "<p>That's the thing. I <em>think</em> it is still optimized, but I'm not positive. It's definitely using the specialization, but that was never in doubt in my head.</p>",
        "id": 232868371,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1617347243
    },
    {
        "content": "<p>And given this affects literally every <code>0..10</code>-style iterator in the language, I'd rather be 100%.</p>",
        "id": 232868383,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1617347261
    },
    {
        "content": "<p>it looks fine<br>\nthe only significant difference is that <code>&lt;std::ops::Range&lt;i32&gt; as Iterator&gt;::next</code> is now inlined<br>\nwhich introduced another local and slightly changed the order of the other blocks</p>\n<p>stated differently: the test diff is the mir inliner removing a layer of abstraction, after you added a layer of abstraction</p>\n<p>(and that specific test is just testing that storage markers are removed, which they are)</p>",
        "id": 232921096,
        "sender_full_name": "erikdesjardins",
        "timestamp": 1617381702
    },
    {
        "content": "<p>How could I regenerate the output for this test? Or would it be easier to try and manually apply the pseudo-diff?</p>",
        "id": 232942511,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1617392392
    },
    {
        "content": "<p><code>./x.py test src/test/mir-opt/remove_storage_markers.rs --bless</code> should automatically update the test files</p>",
        "id": 232944372,
        "sender_full_name": "erikdesjardins",
        "timestamp": 1617393446
    },
    {
        "content": "<p>It worked, thanks!</p>",
        "id": 232957983,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1617401534
    }
]