[
    {
        "content": "<p>I can't find any docs anywhere that guarantee that <code>NonZeroU*</code> types are layout compatible with their <code>u*</code> analogues. I assume this is non-controversial though. Would there be any objections to a PR that adds this to std?</p>",
        "id": 274728167,
        "sender_full_name": "Jake",
        "timestamp": 1646849012
    },
    {
        "content": "<p>If you look at the definition of the type you can a <code>repr(transparent)</code> attribute. It means that the layout (representation) of the type is the same as the underline one.</p>",
        "id": 274728499,
        "sender_full_name": "Urgau",
        "timestamp": 1646849119
    },
    {
        "content": "<p>I think they already guarantee the <code>Option&lt;NonZeroU##&gt;</code> layout, so yeah, it makes sense to guarantee it.</p>\n<p>But exactly what \"layout\" means is vague (see the UCG threads), so you might want to say exactly what you mean by it in the PR instead of the word \"layout\".  Perhaps \"same size and alignment\".</p>",
        "id": 274728669,
        "sender_full_name": "scottmcm",
        "timestamp": 1646849172
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"327095\">Urgau</span> <a href=\"#narrow/stream/219381-t-libs/topic/Gurantees.20of.20.60NonZeroU*.60/near/274728499\">said</a>:</p>\n<blockquote>\n<p>If you look at the definition of the type you can a <code>repr(transparent)</code> attribute.</p>\n</blockquote>\n<p>The definition of a type in the standard library is not necessarily a guarantee that it cannot change.  So generally the parts that <em>are</em> guaranteed should be in the prose.</p>",
        "id": 274728771,
        "sender_full_name": "scottmcm",
        "timestamp": 1646849216
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"327095\">Urgau</span> <a href=\"#narrow/stream/219381-t-libs/topic/Gurantees.20of.20.60NonZeroU*.60/near/274728499\">said</a>:</p>\n<blockquote>\n<p>If you look at the definition of the type you can a <code>repr(transparent)</code> attribute. It means that the layout (representation) of the type is the same as the underline one.</p>\n</blockquote>\n<p>That isn't enough without knowing what the field is, and also we need to additionally guarantee that <code>NonZeroU8::new(value)</code> is stored as <code>value</code> and not as <code>value - 1</code></p>",
        "id": 274728860,
        "sender_full_name": "Jake",
        "timestamp": 1646849258
    },
    {
        "content": "<p>Documenting that guarantee seems reasonable.</p>",
        "id": 274733956,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1646851662
    },
    {
        "content": "<p>Layout is, in addition to size and alignment, also the register type, which LLVM definitely uses and we preserve through repr(transparent) on purpose</p>",
        "id": 274739948,
        "sender_full_name": "oli",
        "timestamp": 1646854142
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310518\">Jake</span> <a href=\"#narrow/stream/219381-t-libs/topic/Gurantees.20of.20.60NonZeroU*.60/near/274728860\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"327095\">Urgau</span> <a href=\"#narrow/stream/219381-t-libs/topic/Gurantees.20of.20.60NonZeroU*.60/near/274728499\">said</a>:</p>\n<blockquote>\n<p>If you look at the definition of the type you can a <code>repr(transparent)</code> attribute. It means that the layout (representation) of the type is the same as the underline one.</p>\n</blockquote>\n<p>That isn't enough without knowing what the field is, and also we need to additionally guarantee that <code>NonZeroU8::new(value)</code> is stored as <code>value</code> and not as <code>value - 1</code></p>\n</blockquote>\n<p>Fair, I didn't think of that.</p>",
        "id": 274740024,
        "sender_full_name": "Urgau",
        "timestamp": 1646854188
    },
    {
        "content": "<p>Incidentally they <em>could</em> implement AsRef&lt;zeroable_num_type&gt;, but it seems currently they do not.</p>",
        "id": 274741853,
        "sender_full_name": "Lokathor",
        "timestamp": 1646855063
    },
    {
        "content": "<p>Oh, interesting idea.  <code>Deref</code> seems undesirable, but <code>AsRef</code> seems like it'd be ok.</p>\n<p>(Not sure why anyone would ever take <code>AsRef&lt;u32&gt;</code>, though.)</p>",
        "id": 274742236,
        "sender_full_name": "scottmcm",
        "timestamp": 1646855245
    },
    {
        "content": "<p>more likely AsRef&lt;T&gt; and then T happens to be u32 in some case</p>",
        "id": 274743089,
        "sender_full_name": "Lokathor",
        "timestamp": 1646855636
    },
    {
        "content": "<p>definitely not <code>AsMut</code> though</p>",
        "id": 274749287,
        "sender_full_name": "cuviper",
        "timestamp": 1646858433
    },
    {
        "content": "<p>Though that might be an interesting way to do this documentation.</p>\n<p>Add both of</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">AsRef</span><span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">NonZeroU32</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"nb\">AsMut</span><span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">NonZeroU32</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>And comment on them the layout guaranteeds/restrictions that allow them to be done.</p>\n<p>(Like how we have <code>impl !Clone for &amp;mut _</code> which is a great way to keep the compiler from ever suggesting to implement it, or potentially some day to point at in error messages for extra context.)</p>",
        "id": 274752693,
        "sender_full_name": "scottmcm",
        "timestamp": 1646860125
    },
    {
        "content": "<p><code>#[repr(transparent)]</code> appears in rustdoc output.</p>",
        "id": 276791941,
        "sender_full_name": "nagisa",
        "timestamp": 1648392381
    },
    {
        "content": "<p>Ah, never mind, that has already been discussedâ€¦</p>",
        "id": 276791987,
        "sender_full_name": "nagisa",
        "timestamp": 1648392472
    }
]