[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/219381-t-libs/topic/.23.5Bderive.28Default.29.5D.20on.20enums.20.E2.80.94.20non-exhaustive.20interaction/near/241854398\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>I think the \"non-structuralness\" is the bigger factor. Every other derive (that generates any methods) cares about all the variants. This would be the only one that doesn't.</p>\n</blockquote>\n<p>this strikes me as a justification after the fact, I'm not confident that this is the source of the current unstated policy. My guess at the history of derives all being very structural is that it's because those were the easiest / least bikeshed-y, not because people didn't want to go beyond that.</p>\n</blockquote>\n<p>I guess there's a philosophical question there about whether <code>derive</code> is supposed to have any meaning other that \"arbitrary codegen here\".  I've always considered it to imply a sort of map-reduce -- even serde's complicated derives are still the general \"combine the calls to the same trait on the subfields\" structure.</p>\n<p>It's unclear to me whether this is also affected by there having been a long time where there wasn't any option available between <a href=\"http://do-it-in-build.rs\">do-it-in-build.rs</a> and do-it-in-a-derive.</p>",
        "id": 241863189,
        "sender_full_name": "scottmcm",
        "timestamp": 1623117769
    },
    {
        "content": "<p><code>derive</code> should just mean \"give me the standard way of doing this\".</p>",
        "id": 241863761,
        "sender_full_name": "Lokathor",
        "timestamp": 1623118509
    },
    {
        "content": "<p>Agreed; the point of derive should be to \"do the right/obvious thing\".</p>",
        "id": 241927586,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1623162344
    }
]