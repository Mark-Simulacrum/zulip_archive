[
    {
        "content": "<p>Not sure this the right place for this, I'm new to Zullip.</p>\n<p>I'm looking for help with reviewing <a href=\"https://github.com/rust-lang/socket2/pull/161\">https://github.com/rust-lang/socket2/pull/161</a>. The important part is that it casts a <code>&amp;mut [u8]</code> to <code>&amp;mut [MaybeUninit&lt;u8&gt;]</code>, which I know is unsound, but calls a function with a documented promise to not write initialised bytes to the slice (and directly calls the <code>recv</code> system call). So the question is: is that undefined behaviour?</p>",
        "id": 220589201,
        "sender_full_name": "Thomas de Zeeuw",
        "timestamp": 1608561092
    },
    {
        "content": "<p>there's no <em>UB</em> in that cast, the unsoundness arises from other code misbehaving</p>",
        "id": 220595624,
        "sender_full_name": "RalfJ",
        "timestamp": 1608564840
    },
    {
        "content": "<p>so if you have a way to ensure that <em>everyone</em> who gets access to that <code>&amp;mut [MaybeUninit&lt;u8&gt;]</code> follows the rules (i.e., doesn't de-initialized things), then you are good.</p>",
        "id": 220595709,
        "sender_full_name": "RalfJ",
        "timestamp": 1608564875
    },
    {
        "content": "<p>That PR opens an interesting question though -- what happens when uninitialized memory is passed to syscalls? I am not aware of a proper account for this.^^</p>",
        "id": 220595818,
        "sender_full_name": "RalfJ",
        "timestamp": 1608564940
    },
    {
        "content": "<p>and these are not even syscalls directly, right? there is some C code that is executed first?<br>\nso how does that C code feel about working with uninit data? can we rely on this not causing trouble?</p>",
        "id": 220595969,
        "sender_full_name": "RalfJ",
        "timestamp": 1608565003
    },
    {
        "content": "<p>I assume libc, whatever the implementation, doesn't write uninitialised bytes, but there aren't any guarantees in the documentation. It does document (in recv/read etc) that it writes valid bytes up to the amount returned, but again doesn't guarantee it doesn't change bytes after the written part. In other words I think with <code>let n = libc::recv(&amp;mut buf)</code>, <code>buf[..n]</code> are valid bytes, but nothing is guaranteed for <code>buf[n..]</code>.</p>",
        "id": 220597298,
        "sender_full_name": "Thomas de Zeeuw",
        "timestamp": 1608565723
    },
    {
        "content": "<p>In my code I use <code>fn read(buf: &amp;mut [MaybeUninit&lt;u8&gt;]) -&gt; Result&lt;&amp;mut [u8]&gt;</code> which returns the part of the buffer that has been initialized.</p>",
        "id": 220600212,
        "sender_full_name": "Amanieu",
        "timestamp": 1608567239
    }
]