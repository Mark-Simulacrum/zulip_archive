[
    {
        "content": "<p>Hi all, I was thinking about some APIs for getting the predecessor, successor or closest value from a BTreeMap or BTreeSet given a key. I think these methods would fit into a tree-like data structure and could be implemented with reasonable complexity. I would like to collect some opinions about this. Thanks</p>",
        "id": 221076386,
        "sender_full_name": "garro",
        "timestamp": 1609176540
    },
    {
        "content": "<p>A use case of this API could be  the implementation of an Interval Tree</p>",
        "id": 221076557,
        "sender_full_name": "garro",
        "timestamp": 1609176691
    },
    {
        "content": "<p>I'm pretty sure the design is being pioneered with cursors on linked list, first, and then once we feel good there expect to extend it to btree.</p>",
        "id": 221077500,
        "sender_full_name": "simulacrum",
        "timestamp": 1609177461
    },
    {
        "content": "<p>But I think a simpler API could be implemented also without cursors: what I am thinking to could look like</p>\n<div class=\"codehilite\"><pre><span></span><code>predecessor(key: &amp;Q) -&gt; (&amp;K, &amp;V)\nsuccessor(key: &amp;Q) -&gt; (&amp;K, &amp;V)\n...\n</code></pre></div>",
        "id": 221082624,
        "sender_full_name": "garro",
        "timestamp": 1609181521
    },
    {
        "content": "<p><code>.predecessor(k)</code> is <code>.range(..k).next_back()</code>, FWIW, and there's a similar <code>RangeBounds</code> approach for successor too.</p>\n<p>(Note that you're missing some <code>Option&lt;_&gt;</code> in those signatures.)</p>",
        "id": 221116312,
        "sender_full_name": "scottmcm",
        "timestamp": 1609225507
    },
    {
        "content": "<p>Yeah, sorry for missing <code>Option</code>s.<br>\nProbably <code>.predecessor(k)</code> would be more explicit then <code>.range(..k).next_back()</code> though. <br>\nOn the other hand, also <code>first</code> and <code>last</code> in slices could be obtained through other methods with the same complexity and results (<code>get(0)</code> and <code>x.get(x.len())</code>), although it was chosen to implement the more explicit methods.<br>\nAnd I am not even sure that <code>.range(..k).next_back()</code> has the best complexity, as I did not check the implementation.</p>",
        "id": 221120512,
        "sender_full_name": "garro",
        "timestamp": 1609232031
    },
    {
        "content": "<p>For example, <code>.range</code> searches for the range start, that could be avoided if one is only interested in the predecessor of a given key, and for the end, that is not needed if only the successor is requested</p>",
        "id": 221121745,
        "sender_full_name": "garro",
        "timestamp": 1609233620
    },
    {
        "content": "<p>If I would like to go on with this proposal, what is the right way to proceed? Should I do a Pull Request or open an issue? Or should I start an RFC?</p>",
        "id": 221277693,
        "sender_full_name": "garro",
        "timestamp": 1609404553
    }
]