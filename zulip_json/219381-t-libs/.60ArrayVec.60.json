[
    {
        "content": "<p>The current design of <code>FromIterator</code> for arrays (see <a href=\"https://github.com/rust-lang/rust/issues/75717\">#75717</a>) pretty much implements a slightly \"weaker\" version of <a href=\"https://docs.rs/arrayvec/0.5.1/arrayvec/struct.ArrayVec.html\"><code>ArrayVec</code></a>, so it might make sense to instead \"just\" add a complete <code>ArrayVec</code> implementation to std as mentioned by <code>ollie27</code> in <a href=\"https://github.com/rust-lang/rust/pull/75717#issuecomment-676630203\">https://github.com/rust-lang/rust/pull/75717#issuecomment-676630203</a>.<br>\nThis seems like it requires some discussion.</p>\n<p>I personally am fairly ambivalent about this and mostly just want to merge <a href=\"https://github.com/rust-lang/rust/issues/75717\">#75717</a> so we can use it in other methods for now.</p>",
        "id": 207455626,
        "sender_full_name": "lcnr",
        "timestamp": 1597867591
    },
    {
        "content": "<p>you could make a private <code>ArrayVec</code> for now, for all the places that need to share similar code</p>",
        "id": 207456723,
        "sender_full_name": "cuviper",
        "timestamp": 1597868191
    },
    {
        "content": "<p>punt the <code>FromIterator</code>/<code>FillError</code> design decisions until later</p>",
        "id": 207456752,
        "sender_full_name": "cuviper",
        "timestamp": 1597868210
    },
    {
        "content": "<p>I am the lead of <code>tinyvec</code>, and my opinion is that until at least min_const_generics it will be hard to make a \"future proof\" arrayvec like type in the standard library</p>",
        "id": 207456829,
        "sender_full_name": "Lokathor",
        "timestamp": 1597868274
    },
    {
        "content": "<p>of course, a private version that's not meant to be stable can be made immediately</p>",
        "id": 207456891,
        "sender_full_name": "Lokathor",
        "timestamp": 1597868295
    },
    {
        "content": "<p>It would be unstable until after const generics is stable</p>",
        "id": 207456912,
        "sender_full_name": "lcnr",
        "timestamp": 1597868309
    },
    {
        "content": "<p>at least</p>",
        "id": 207456919,
        "sender_full_name": "lcnr",
        "timestamp": 1597868316
    },
    {
        "content": "<p>but changing stuff once it's used is harder than to get it right from the start <span aria-label=\"laughter tears\" class=\"emoji emoji-1f602\" role=\"img\" title=\"laughter tears\">:laughter_tears:</span></p>",
        "id": 207456957,
        "sender_full_name": "lcnr",
        "timestamp": 1597868356
    },
    {
        "content": "<p>just use tinyvec for now, as of a bit ago the 0.3.4 version is already within the overall rust-lang/rust dependency graph.</p>",
        "id": 207456978,
        "sender_full_name": "Lokathor",
        "timestamp": 1597868374
    },
    {
        "content": "<p>so it's been \"approved\" and all that</p>",
        "id": 207456987,
        "sender_full_name": "Lokathor",
        "timestamp": 1597868385
    },
    {
        "content": "<p>that's not the same as being approved in <code>std</code></p>",
        "id": 207457000,
        "sender_full_name": "cuviper",
        "timestamp": 1597868396
    },
    {
        "content": "<p>Can we use tinyvec in core?</p>",
        "id": 207457005,
        "sender_full_name": "lcnr",
        "timestamp": 1597868398
    },
    {
        "content": "<p>it works without alloc, yes</p>",
        "id": 207457059,
        "sender_full_name": "Lokathor",
        "timestamp": 1597868409
    },
    {
        "content": "<p>We can use libraries in core <span aria-label=\"shock\" class=\"emoji emoji-1f628\" role=\"img\" title=\"shock\">:shock:</span></p>",
        "id": 207457097,
        "sender_full_name": "lcnr",
        "timestamp": 1597868436
    },
    {
        "content": "<p>I don't think so...</p>",
        "id": 207457107,
        "sender_full_name": "cuviper",
        "timestamp": 1597868443
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> i have to admit I don't know where tinyvec is  being used, i just got some pings to fix the license on the 0.3 series</p>",
        "id": 207457112,
        "sender_full_name": "Lokathor",
        "timestamp": 1597868447
    },
    {
        "content": "<p>presumably, <code>tinyvec</code> depends on <code>core</code></p>",
        "id": 207457118,
        "sender_full_name": "cuviper",
        "timestamp": 1597868450
    },
    {
        "content": "<p>oh, right, it does do that XD</p>",
        "id": 207457131,
        "sender_full_name": "Lokathor",
        "timestamp": 1597868461
    },
    {
        "content": "<p>oh well, it's a good abstraction to get into core some day, we all agree on that it seems</p>",
        "id": 207457213,
        "sender_full_name": "Lokathor",
        "timestamp": 1597868503
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> <code>cargo tree -i tinyvec</code> only shows a direct dependency from <code>unicode-normalization</code>, but a lot chains from there</p>",
        "id": 207457572,
        "sender_full_name": "cuviper",
        "timestamp": 1597868696
    },
    {
        "content": "<blockquote>\n<p>oh well, it's a good abstraction to get into core some day, we all agree on that it seems</p>\n</blockquote>\n<p>Hmm, if it seems fairly certain that we want to add <code>ArrayVec</code> into core in the future, it probably makes sense to do so instead of <a href=\"https://github.com/rust-lang/rust/issues/75717\">#75717</a></p>",
        "id": 207457573,
        "sender_full_name": "lcnr",
        "timestamp": 1597868697
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> neato. my download count is gonna go wayyyyy up</p>",
        "id": 207457656,
        "sender_full_name": "Lokathor",
        "timestamp": 1597868740
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> I think it makes sense even if it remains private.</p>",
        "id": 207457804,
        "sender_full_name": "cuviper",
        "timestamp": 1597868829
    },
    {
        "content": "<p>at least so we stop reinventing that wheel</p>",
        "id": 207457860,
        "sender_full_name": "cuviper",
        "timestamp": 1597868869
    },
    {
        "content": "<p>It's not hard to implement at all, would just take an afternoon to cover all the basic cases</p>",
        "id": 207457863,
        "sender_full_name": "Lokathor",
        "timestamp": 1597868871
    },
    {
        "content": "<p>since rustc can use unstable stuff on stable, you could even use min_const_generics right now</p>",
        "id": 207457941,
        "sender_full_name": "Lokathor",
        "timestamp": 1597868898
    },
    {
        "content": "<p>it doesn't need a \"full\" <code>Vec</code> API coverage to begin with</p>",
        "id": 207457949,
        "sender_full_name": "cuviper",
        "timestamp": 1597868902
    },
    {
        "content": "<p>right</p>",
        "id": 207457971,
        "sender_full_name": "Lokathor",
        "timestamp": 1597868919
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> what's the selling point between <code>tinyvec::ArrayVec</code> and <code>arrayvec::ArrayVec</code>?</p>",
        "id": 207458538,
        "sender_full_name": "cuviper",
        "timestamp": 1597869230
    },
    {
        "content": "<p>the <code>unsafe</code>/<code>Default</code> tradeoff?</p>",
        "id": 207458545,
        "sender_full_name": "cuviper",
        "timestamp": 1597869236
    },
    {
        "content": "<p>yep</p>",
        "id": 207458782,
        "sender_full_name": "Lokathor",
        "timestamp": 1597869380
    },
    {
        "content": "<p>i kinda made it as a joke in response to a rant that <span class=\"user-mention\" data-user-id=\"127617\">@Shnatsel</span> wrote, but then people used it for real and then here we are.</p>",
        "id": 207458828,
        "sender_full_name": "Lokathor",
        "timestamp": 1597869410
    },
    {
        "content": "<p>also i try to exclusively use crates that also include the Zlib license, so i end up writing a lot of my own crates</p>",
        "id": 207458856,
        "sender_full_name": "Lokathor",
        "timestamp": 1597869436
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"138448\">cuviper</span> <a href=\"#narrow/stream/219381-t-libs/topic/.60ArrayVec.60/near/207458545\">said</a>:</p>\n<blockquote>\n<p>the <code>unsafe</code>/<code>Default</code> tradeoff?</p>\n</blockquote>\n<p>Could you flesh this out for me please? What is the trade off?</p>",
        "id": 207461262,
        "sender_full_name": "Tim McNamara",
        "timestamp": 1597870896
    },
    {
        "content": "<p><code>tinyvec</code> contains no <code>unsafe</code> anywhere in the crate. Publicly or hidden. To still be an effective container type at all, there's gotta be a limitation.</p>\n<ul>\n<li>you could make only Copy types work, and leave old data in place</li>\n<li>you could make only Default types work, and replace values pulled out of the container with a default instance.</li>\n</ul>",
        "id": 207464918,
        "sender_full_name": "Lokathor",
        "timestamp": 1597873357
    },
    {
        "content": "<p>Ah understood. Thanks for taking the time.</p>",
        "id": 207465331,
        "sender_full_name": "Tim McNamara",
        "timestamp": 1597873650
    },
    {
        "content": "<p>I feel like std ought to at least provide an \"array builder\" kind of thing (so people don't need to handle the array-of-MaybeUninit themselves), and the step from that to a full arrayvec is so small that we might as well.</p>\n<p>(Aside: <a href=\"#narrow/stream/219381-t-libs/topic/Provide.20an.20array-builder.2F-vec.20in.20.60core.3A.3Aarray.60.3F/near/206505560\">https://rust-lang.zulipchat.com/#narrow/stream/219381-t-libs/topic/Provide.20an.20array-builder.2F-vec.20in.20.60core.3A.3Aarray.60.3F/near/206505560</a>)</p>",
        "id": 207493682,
        "sender_full_name": "scottmcm",
        "timestamp": 1597906237
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/219381-t-libs/topic/.60ArrayVec.60/near/207493682\">said</a>:</p>\n<blockquote>\n<p>I feel like std ought to at least provide an \"array builder\" kind of thing (so people don't need to handle the array-of-MaybeUninit themselves), and the step from that to a full arrayvec is so small that we might as well.</p>\n</blockquote>\n<p>There is this as well: <a href=\"https://github.com/rust-lang/rust/pull/75644\">https://github.com/rust-lang/rust/pull/75644</a></p>",
        "id": 207493773,
        "sender_full_name": "jknodt",
        "timestamp": 1597906354
    },
    {
        "content": "<p>That method is a good example of why we should have a proper builder type, to my eye.  We're getting way too many copies of <code>unsafe { mem::transmute_copy::&lt;_, [T; N]&gt;(&amp;array) }</code> in implementations of things.</p>",
        "id": 207494362,
        "sender_full_name": "scottmcm",
        "timestamp": 1597907001
    },
    {
        "content": "<p>Then let's merge <a href=\"https://github.com/rust-lang/rust/issues/75717\">#75717</a> <span aria-label=\"laughter tears\" class=\"emoji emoji-1f602\" role=\"img\" title=\"laughter tears\">:laughter_tears:</span></p>",
        "id": 207494454,
        "sender_full_name": "lcnr",
        "timestamp": 1597907103
    },
    {
        "content": "<p>we can rename that to <code>ArrayVec</code> later on if we want to</p>",
        "id": 207494461,
        "sender_full_name": "lcnr",
        "timestamp": 1597907111
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> Is there size difference between tinyvec, arrayvec and the one in standard library?</p>",
        "id": 207501146,
        "sender_full_name": "pickfire",
        "timestamp": 1597913217
    },
    {
        "content": "<p>the tinyvec crate actually has several vecs in it, I don't think any of them exactly match similar vecs elsewhere in terms of size</p>",
        "id": 207517439,
        "sender_full_name": "Lokathor",
        "timestamp": 1597927393
    },
    {
        "content": "<p>Ah, so it is not compatible with standard library vec in terms of size like <code>SmartString</code>.</p>",
        "id": 207606942,
        "sender_full_name": "pickfire",
        "timestamp": 1597995337
    },
    {
        "content": "<p>Well, first I want to be clear that there's an <code>arrayvec</code> crate with an <code>ArrayVec</code> type, and I don't know what their details are at all</p>\n<p>Second though, for <code>tinyvec</code> we've got the following in terms of sizes:</p>\n<ul>\n<li><code>ArrayVec</code> is <code>u16</code> + the array</li>\n<li><code>SliceVec</code> is <code>usize</code> + the slice</li>\n<li><code>TinyVec</code> is an enum between an <code>ArrayVec</code> and a <code>Vec</code></li>\n</ul>",
        "id": 207607096,
        "sender_full_name": "Lokathor",
        "timestamp": 1597995479
    },
    {
        "content": "<p>Side topic, I did <code>ve</code> based on <code>beef</code> but weird that it is not any faster even though it only uses 2 usize rather than 3 usize. <a href=\"https://github.com/pickfire/ve\">https://github.com/pickfire/ve</a></p>",
        "id": 207642015,
        "sender_full_name": "pickfire",
        "timestamp": 1598020887
    },
    {
        "content": "<p>That's really 2 or 3 <code>usize</code>s, 16 or 24 bytes on 64-bit</p>",
        "id": 207642866,
        "sender_full_name": "cuviper",
        "timestamp": 1598021300
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"225422\">@pickfire</span> the number of usizes in a vec is almost completely unimportant, unless you're dealing with a vec of vecs</p>",
        "id": 207651729,
        "sender_full_name": "Lokathor",
        "timestamp": 1598025689
    },
    {
        "content": "<p>otherwise all the memory used up comes down to the elements themselves</p>",
        "id": 207651772,
        "sender_full_name": "Lokathor",
        "timestamp": 1598025708
    },
    {
        "content": "<p>But I heard if there is only 2 usize, it can directly load into the registers unlike 3 usize. So I thought it may be faster, also not everyone needs 2^64 elements so I think even 2^16 may work for most of the cases if it's small.</p>",
        "id": 207711458,
        "sender_full_name": "pickfire",
        "timestamp": 1598079515
    },
    {
        "content": "<blockquote>\n<p>But I heard if there is only 2 usize, it can directly load into the registers unlike 3 usize.</p>\n</blockquote>\n<p>Correct. Most architectures have provisions for this in their calling conventions.</p>",
        "id": 207740784,
        "sender_full_name": "Amanieu",
        "timestamp": 1598127904
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"2645\">@T-libs</span> Can we go ahead and try to merge <a href=\"https://github.com/rust-lang/rust/pull/75717\">https://github.com/rust-lang/rust/pull/75717</a>, even if we later decide to add <code>ArrayVec</code> I don't think that PR will hurt (and I already needed it a few times)</p>",
        "id": 211103527,
        "sender_full_name": "lcnr",
        "timestamp": 1600937130
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> Could you add in the PR description details about what this adds and what problem this solves?</p>",
        "id": 211106472,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1600939107
    },
    {
        "content": "<p>At first it feels confusing to see a type named <code>SomethingError</code> but that is primarily used with a <code>new</code> constructor rather only being in a <code>Result</code></p>",
        "id": 211107070,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1600939472
    },
    {
        "content": "<p>added an explanation to the PR <span class=\"user-mention\" data-user-id=\"219747\">@Simon Sapin</span> does this make sense or is there something I should elaborate on or you disagree with?</p>",
        "id": 211140946,
        "sender_full_name": "lcnr",
        "timestamp": 1600958518
    },
    {
        "content": "<p>Thanks. I think I agree with ollie that this is pretty much an <code>ArrayVec</code> so we might as well call it that</p>",
        "id": 211155732,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1600964757
    },
    {
        "content": "<p>Then I’d split the <code>fill</code> methods into impls of <code>Extend</code> and <code>TryFrom</code></p>",
        "id": 211155906,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1600964824
    }
]