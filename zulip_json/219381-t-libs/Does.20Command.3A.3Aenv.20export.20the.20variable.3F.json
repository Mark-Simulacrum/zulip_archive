[
    {
        "content": "<p>Does <a href=\"https://doc.rust-lang.org/std/process/struct.Command.html#method.env\">https://doc.rust-lang.org/std/process/struct.Command.html#method.env</a> preserve the env variable across subprocesses? If not, is there a way to do that?</p>",
        "id": 211861148,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601517182
    },
    {
        "content": "<p>When you say \"subprocesses\" you mean children of the process that calls <code>Command::env()</code>?</p>",
        "id": 211864120,
        "sender_full_name": "Noah Lev",
        "timestamp": 1601520843
    },
    {
        "content": "<p>I mean grandchildren</p>",
        "id": 211864818,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601521702
    },
    {
        "content": "<p>but the answer is yes because <code>SYSROOT</code> is being passed through, I figured it out in <a href=\"#narrow/stream/246057-t-cargo/topic/Does.20cargo.20pass.20--sysroot.3F\">https://rust-lang.zulipchat.com/#narrow/stream/246057-t-cargo/topic/Does.20cargo.20pass.20--sysroot.3F</a></p>",
        "id": 211864827,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601521729
    },
    {
        "content": "<p>I don't think there is any way <em>not</em> to pass variables to subprocesses</p>",
        "id": 212219172,
        "sender_full_name": "RalfJ",
        "timestamp": 1601811178
    },
    {
        "content": "<p>this is probably confusion caused by <code>export</code> in shell scripts, which is a horrible name... linux shells have variables and and environment and they are closely interacting; <code>export</code> is how you move a variable from being a normal local shell variable to being an env var.<br>\nbut env vars are always propagated to chilren and grandchildren.</p>",
        "id": 212219221,
        "sender_full_name": "RalfJ",
        "timestamp": 1601811250
    },
    {
        "content": "<p>ahhh</p>",
        "id": 212223126,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601817683
    },
    {
        "content": "<p>yeah that makes a lot of sense, thank you!</p>",
        "id": 212223129,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601817692
    },
    {
        "content": "<p>isn't that OS depends ?</p>",
        "id": 212223556,
        "sender_full_name": "lzutao",
        "timestamp": 1601818427
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"209117\">lzutao</span> <a href=\"#narrow/stream/219381-t-libs/topic/Does.20Command.3A.3Aenv.20export.20the.20variable.3F/near/212223556\">said</a>:</p>\n<blockquote>\n<p>isn't that OS depends ?</p>\n</blockquote>\n<p>what's \"that\"? env vars are AFAIK inherited to (grand)children on all OSes. I would say things that do not behave like that should not be called \"env vars\" as that is one of their primary features.</p>",
        "id": 212223648,
        "sender_full_name": "RalfJ",
        "timestamp": 1601818561
    },
    {
        "content": "<p>because there are no standard defining that sub-process or child process must inherent all env variable from its parent process.<br>\nBut Windows and posix does that, which are what we care the most.<br>\nSo just don't care about that, as nobody else care either.</p>",
        "id": 212224222,
        "sender_full_name": "lzutao",
        "timestamp": 1601819501
    },
    {
        "content": "<p>If children do not inherit some kind of \"variables\", calling them \"environment variables\" would be a misnomer. I would describe such platforms as \"not supporting env vars\".</p>",
        "id": 212224874,
        "sender_full_name": "RalfJ",
        "timestamp": 1601820591
    },
    {
        "content": "<p>IIRC, technically Windows doesn't truly have a concept of child processes. Processes are just processes that may or may not share some resource or another (e.g. they just so happen to be attached to the same console). That said, the default for <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-createprocessw\"><code>CreateProcess</code></a> is to copy/paste the environment block of the \"parent\" process unless you explicitly provide another environment block.</p>\n<blockquote>\n<p><code>lpEnvironment</code></p>\n<p>A pointer to the environment block for the new process. If this parameter is NULL, the new process uses the environment of the calling process.</p>\n</blockquote>",
        "id": 212226940,
        "sender_full_name": "Chris Denton",
        "timestamp": 1601823988
    },
    {
        "content": "<p>Just like you can set a different environment with <code>execve</code></p>",
        "id": 212229196,
        "sender_full_name": "cuviper",
        "timestamp": 1601827662
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260325\">@Chris Denton</span> \"the process that spawned the current one\" seems like a close enough notion of \"child process\" for the purpose of this definition -- there is no need to keep that state around.</p>",
        "id": 212240533,
        "sender_full_name": "RalfJ",
        "timestamp": 1601843714
    },
    {
        "content": "<p>Fair enough.</p>",
        "id": 212240555,
        "sender_full_name": "Chris Denton",
        "timestamp": 1601843756
    }
]