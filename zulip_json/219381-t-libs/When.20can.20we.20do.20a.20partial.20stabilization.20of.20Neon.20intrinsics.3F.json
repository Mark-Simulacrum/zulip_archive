[
    {
        "content": "<p><a href=\"https://github.com/rust-lang/stdarch/issues/1125\">https://github.com/rust-lang/stdarch/issues/1125</a></p>",
        "id": 235124201,
        "sender_full_name": "Lokathor",
        "timestamp": 1618804688
    },
    {
        "content": "<p>The story here is that blocking all of Neon on having 100% of the intrinsics covered is... a poor user experience. People have been at it off and on for years, and we're only up to like 37% coverage.</p>\n<p>However, what's already been added is perfectly functional as is, so we could stabilize just some of  them. Since the API is \"we will do what the vendor says\" there's no chance of an unexpected design change later on the more we put in.</p>\n<p>(This is also a T-lang tangential issue, since it's technically intrinsics, but it's mostly T-libs I think)</p>",
        "id": 235124409,
        "sender_full_name": "Lokathor",
        "timestamp": 1618804884
    },
    {
        "content": "<p>One thing that would make me more comfortable with partial stabilization is a test that checks that the stdarch intrinsics behave identically to the C versions with random inputs.</p>",
        "id": 235132911,
        "sender_full_name": "Amanieu",
        "timestamp": 1618813406
    },
    {
        "content": "<p>Is there anything we (Arm) can do to help here? Our intention was to improve the intrinsics coverage, and to that end <span class=\"user-mention\" data-user-id=\"309977\">@Jamie Cunliffe</span> has experimented with generating them. We put that on hold because we hit some snags, and saw the recent PRs extending the coverage using a different approach, but we think we can repurpose what he's done to generate tests.</p>",
        "id": 235180065,
        "sender_full_name": "Jacob Bramley",
        "timestamp": 1618838939
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> if there are bugs, do you think they'll require changing the API? If not, I don't know if the intrinsics need to be unstable just because they might be buggy, the best way to catch bugs is for people to use them.</p>",
        "id": 235189132,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1618842338
    },
    {
        "content": "<p>It's possible some API changes might be required, for example if an AArch64-only intrinsic was exposed on ARM.</p>",
        "id": 235189295,
        "sender_full_name": "Amanieu",
        "timestamp": 1618842385
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"399135\">@Jacob Bramley</span> That's great if you already have something that mostly works, we're happy to accept it!</p>",
        "id": 235196832,
        "sender_full_name": "Amanieu",
        "timestamp": 1618844854
    },
    {
        "content": "<p>Ideally we would want something that could work for both ARM and x86 intrinsics, but if your version is only applicable to ARM then that's fine too.</p>",
        "id": 235196946,
        "sender_full_name": "Amanieu",
        "timestamp": 1618844880
    },
    {
        "content": "<p>wouldn't we be stabilizing on an intrinsic by intrinsic basis, and thus we'd be checking off the intriniscs to be stabilized against some sort of list from some sort of place?</p>",
        "id": 235220560,
        "sender_full_name": "Lokathor",
        "timestamp": 1618854358
    },
    {
        "content": "<p>I would ideally like to see ASIMD1 and ASIMD2 treated as if they were more distinct entities, since they kind of are, even if they seem to offer (mostly?) the same API.<br>\nI would definitely like to see ASIMD1 and ASIMD2 <em>tested</em> as if they were distinct entities.</p>",
        "id": 235228121,
        "sender_full_name": "Jubilee",
        "timestamp": 1618857524
    },
    {
        "content": "<p>is asimd1 the simd for ARM 32-bit devices and then asimd2 is the simd for Aarch64 devices?</p>",
        "id": 235230236,
        "sender_full_name": "Lokathor",
        "timestamp": 1618858443
    },
    {
        "content": "<p>Yeah, ASIMD1 is Arm v7's \"Neon\", and ASIMD2 is Arm v8's \"Neon\", and I believe the targets of interest are ASIMD1 programs on Arm v7 devices, ASIMD2 programs on aarch64, and programs using \"Neon\" on aarch64 in \"aarch32\" mode.</p>",
        "id": 235232132,
        "sender_full_name": "Jubilee",
        "timestamp": 1618859164
    },
    {
        "content": "<p>How should we get the behavior of these instructions in Clang? I think this requires disassembling the corresponding Clang program and putting the result into the tests. Could it be a way to get them from llvm's document?</p>",
        "id": 235473849,
        "sender_full_name": "Sparrow Li",
        "timestamp": 1618994104
    },
    {
        "content": "<p>It's perhaps worth mentioning that most Arm documentation (including the reference manual) just refers to it as \"Advanced SIMD\" (no \"2\"), whether for Armv7 or Armv8 (AArch32 or AArch64). It does work differently in AArch32 and AArch64, so the intrinsics should reflect that, but Armv8's AArch32 NEON is a natural extension of Armv7's NEON so 32-bit Armv7 vs 32-bit Armv8 shouldn't be such a fundamental change. (There will be a few new instructions.)</p>",
        "id": 235491713,
        "sender_full_name": "Jacob Bramley",
        "timestamp": 1619003702
    },
    {
        "content": "<p>Note that Armv8 != AArch64. Armv8 includes both AArch32 and AArch64 states, Armv7 includes only AArch32 (named retrospectively).</p>",
        "id": 235492540,
        "sender_full_name": "Jacob Bramley",
        "timestamp": 1619004137
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"353056\">@Sparrow Li</span> You don't need to get their behavior, just emit a C file that calls the intrinsics with random inputs and a Rust file that calls the intrinsics with the same inputs, then compare the results.</p>",
        "id": 235495246,
        "sender_full_name": "Amanieu",
        "timestamp": 1619005507
    },
    {
        "content": "<p>I am aware their instructions are mostly the same... which is why my main concerns are their effects on floating point registers, potential ABI issues that might materialize (see <a href=\"https://github.com/rust-lang/rust/issues/64609\">#64609</a> for how x86 has some particularly <em>amusing</em> examples in how this can cause unsoundness issues), and making sure we at least know what is happening there. Rust has mostly deferred caring about these details to LLVM, but now we have <code>cg_clif</code>, and a possible portable <code>core::simd</code> library, and we might be running out of room to ignore details like the D/Q vs. V layout of different Neon versions, or differences in floating point results.</p>",
        "id": 236044682,
        "sender_full_name": "Jubilee",
        "timestamp": 1619334356
    },
    {
        "content": "<p>There are no ABI issues. ARM (32-bit) and AArch64 are completely different ISAs.</p>",
        "id": 236059754,
        "sender_full_name": "Amanieu",
        "timestamp": 1619351428
    },
    {
        "content": "<p>I mean regarding the register layout.</p>",
        "id": 236059764,
        "sender_full_name": "Amanieu",
        "timestamp": 1619351445
    },
    {
        "content": "<p>Passing vectors via GPR/stack vs vector registers is still an issue, but that's the same as x86.</p>",
        "id": 236059786,
        "sender_full_name": "Amanieu",
        "timestamp": 1619351500
    },
    {
        "content": "<p>I am aware that's how it's <em>supposed</em> to work. I am also aware of bugs in LLVM codegen and the Rust compiler.<br>\nAnd I don't think passing vectors in memory is long-term acceptable on account of the huge speed losses in code that is supposed to be fast.</p>\n<p>So by \"ABI issue\" I mean anything that could block <strong>removing</strong> that behavior, because somewhere in the combinatorically explosive space of arguments and code inputs to Rust, LLVM, and the actual microprocessors we somehow induce an erroneous state. The kind of thing you file an issue over.</p>",
        "id": 236067783,
        "sender_full_name": "Jubilee",
        "timestamp": 1619359328
    },
    {
        "content": "<p>If there are truly no such issues, then passing vectors through memory is a special case that we should no longer apply to Arm processors, and we can all celebrate and pop a bottle of champagne as we gain huge perf wins by circumventing that behavior on Arm. Should I go file that PR, or would I be introducing critical bugs by doing so?</p>",
        "id": 236068880,
        "sender_full_name": "Jubilee",
        "timestamp": 1619360549
    },
    {
        "content": "<p>No, ARM has exactly the same issues as x86 with regards to the ABI.</p>",
        "id": 236069323,
        "sender_full_name": "Amanieu",
        "timestamp": 1619361050
    },
    {
        "content": "<p>E.g. soft-float vs hard-float ARM, etc. This is a problem with C code as well: soft-float ABI code is explicitly incompatible with hard-float ABI code.</p>",
        "id": 236069344,
        "sender_full_name": "Amanieu",
        "timestamp": 1619361083
    },
    {
        "content": "<p>But this is somewhat off-topic here since this topic is about the NEON intrinsics.</p>",
        "id": 236069416,
        "sender_full_name": "Amanieu",
        "timestamp": 1619361179
    }
]