[
    {
        "content": "<p>Hello, writing my first PR, and the goal is to make std::ops traits (<code>Add</code>, <code>Sub</code>, so on) const for primitives and <code>NonZero</code>s.<br>\nI am doing this with <a href=\"https://github.com/rust-lang/rust/issues/67792\"><code>const_trait_impl</code></a>, similar to what <a href=\"https://github.com/rust-lang/rust/issues/87852\"><code>const_num_from_num</code></a> does.<br>\nIs something like this wanted, even if it uses an unstable feature?</p>\n<p>I have also made a patch to make the default functions of PartialEq, Eq, and PartialOrd const, so it's much easier to create const implementations of this, but it's much harder to merge with temporary syntax so I won't humor that just yet.</p>\n<p>Have a look at <a href=\"https://github.com/AlexApps99/rust/tree/const_ops\">https://github.com/AlexApps99/rust/tree/const_ops</a> if you want, though it's not a particularly complex set of changes.</p>",
        "id": 257462957,
        "sender_full_name": "AlexApps99",
        "timestamp": 1634173301
    },
    {
        "content": "<p>yea, we should wait until the next bootstrap bump before doing anything here</p>",
        "id": 257495067,
        "sender_full_name": "oli",
        "timestamp": 1634198524
    },
    {
        "content": "<p>also, as mentioned in <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/first.20pr/near/257494822\">https://rust-lang.zulipchat.com/#narrow/stream/146212-t-compiler.2Fconst-eval/topic/first.20pr/near/257494822</a>, I just remembered that wg-const-eval can make functions unstably const fn without pinging T-libs, but we never talked about the even-more-unstable const trait bounds, and I just went ahead and merged things without thinking about that.</p>",
        "id": 257495773,
        "sender_full_name": "oli",
        "timestamp": 1634198903
    },
    {
        "content": "<blockquote>\n<p>we should wait until the next bootstrap bump</p>\n</blockquote>\n<p>When is that? Asking so I know if I should shelve it for now or keep working on it</p>",
        "id": 257496318,
        "sender_full_name": "AlexApps99",
        "timestamp": 1634199123
    },
    {
        "content": "<p><a href=\"https://forge.rust-lang.org/\">https://forge.rust-lang.org/</a> says october 19th</p>",
        "id": 257496402,
        "sender_full_name": "oli",
        "timestamp": 1634199186
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/219381-t-libs/topic/Const.20std.3A.3Aops.20traits.20PR/near/257495067\">said</a>:</p>\n<blockquote>\n<p>yea, we should wait until the next bootstrap bump before doing anything here</p>\n</blockquote>\n<p>actually, your changes don't use <code>~const</code>, so we're good on that end, no need to wait</p>",
        "id": 257496588,
        "sender_full_name": "oli",
        "timestamp": 1634199308
    },
    {
        "content": "<p>I put it up as a draft PR here:<br>\n<a href=\"https://github.com/rust-lang/rust/pull/89876\">https://github.com/rust-lang/rust/pull/89876</a><br>\nIt's my first, so I'd be keen for feedback wherever needed.</p>",
        "id": 257500050,
        "sender_full_name": "AlexApps99",
        "timestamp": 1634200951
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/219381-t-libs/topic/Const.20std.3A.3Aops.20traits.20PR/near/257496588\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/219381-t-libs/topic/Const.20std.3A.3Aops.20traits.20PR/near/257495067\">said</a>:</p>\n<blockquote>\n<p>yea, we should wait until the next bootstrap bump before doing anything here</p>\n</blockquote>\n<p>actually, your changes don't use <code>~const</code>, so we're good on that end, no need to wait</p>\n</blockquote>\n<p>Let me be clear about what \"constifications\" need the next bootstrap bump: inherent associated functions that use <code>~const</code> bounds, and anything that has <code>~const Drop</code> bounds. These are the only things that have not yet entered the beta release IIRC.</p>",
        "id": 257698103,
        "sender_full_name": "fee1-dead",
        "timestamp": 1634304900
    },
    {
        "content": "<p>Where is the tracking issue for <code>~const</code>?</p>",
        "id": 257818559,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1634377670
    },
    {
        "content": "<p>Oh, found it: <a href=\"https://github.com/rust-lang/rust/issues/67792\">https://github.com/rust-lang/rust/issues/67792</a></p>",
        "id": 257818831,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1634377923
    },
    {
        "content": "<p>Rebased because a newer PR had overlapping functionality, and took the opportunity to create a tracking issue:<br>\n<a href=\"https://github.com/rust-lang/rust/issues/90080\">https://github.com/rust-lang/rust/issues/90080</a></p>",
        "id": 258304154,
        "sender_full_name": "AlexApps99",
        "timestamp": 1634697828
    },
    {
        "content": "<p>Uh... I didn't see that PR...</p>",
        "id": 258327010,
        "sender_full_name": "oli",
        "timestamp": 1634716652
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119235\">@David Tolnay</span> we're putting a hold on adding more unstable const impls until a T-libs sign-off on that. I messed up and merged a few PRs already, but we should talk about the ramnifications first</p>",
        "id": 258327248,
        "sender_full_name": "oli",
        "timestamp": 1634716777
    }
]