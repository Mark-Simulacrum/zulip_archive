[
    {
        "content": "<p>Hi hi; something I've been wanted to have in the stdlib for a while now is a counterpart to C++'s <code>std::thread::hardware_concurrency</code>. The way I was thinking of doing this was by backing it by the <code>num_cpus</code> crate which has all this information already. The one thing I'm not sure about though is what the right API for this would be. Perhaps something like<code>std::env::cpu_count</code>?</p>\n<p>Keen to hear thoughts!</p>",
        "id": 203948489,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1594816214
    },
    {
        "content": "<ul>\n<li><a href=\"https://en.cppreference.com/w/cpp/thread/thread/hardware_concurrency\">C++ std::thread::hardware_concurrency</a></li>\n<li><a href=\"https://docs.rs/num_cpus/1.13.0/num_cpus/\">num_cpus on crates.io</a></li>\n</ul>",
        "id": 203948665,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1594816314
    },
    {
        "content": "<p>It might be worth tracking down that C++ proposal to see if they justify that name, and maybe what alternates they considered.</p>",
        "id": 203978601,
        "sender_full_name": "cuviper",
        "timestamp": 1594830349
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> good idea; will do!</p>",
        "id": 203996932,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1594839092
    },
    {
        "content": "<p>Does<code>std::thread::hardware_concurrency</code> help one to implement NUMA-aware software?</p>",
        "id": 204028561,
        "sender_full_name": "nagisa",
        "timestamp": 1594857601
    },
    {
        "content": "<p>Issues like <a href=\"https://github.com/rayon-rs/rayon/issues/319\">https://github.com/rayon-rs/rayon/issues/319</a> is probably my biggest pet peeve around Rust’s thread pool/runtime/concurrency libraries nowadays.</p>",
        "id": 204028728,
        "sender_full_name": "nagisa",
        "timestamp": 1594857676
    },
    {
        "content": "<blockquote>\n<p>If the value is not well defined or not computable, returns ​0​. </p>\n</blockquote>\n<p>Wow what a bad choice. If you pass it directly into the thread pool thread count, you’re going to sometimes get 0 threads...</p>",
        "id": 204028891,
        "sender_full_name": "nagisa",
        "timestamp": 1594857777
    },
    {
        "content": "<p>it's just a plain count, presumably logical cpus</p>",
        "id": 204032186,
        "sender_full_name": "cuviper",
        "timestamp": 1594860536
    },
    {
        "content": "<p>but I guess it might return something fancy on GPUs or something</p>",
        "id": 204032213,
        "sender_full_name": "cuviper",
        "timestamp": 1594860568
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> judging from the docs<code>num_cpus</code> luckily doesn't return less than 1 <a href=\"https://docs.rs/num_cpus/1.13.0/num_cpus/fn.get.html\">https://docs.rs/num_cpus/1.13.0/num_cpus/fn.get.html</a> -- agree the C++ variant is uhh, _not ideal_ haha</p>",
        "id": 204058899,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1594889069
    },
    {
        "content": "<p>After some archeology it seems that the first introduction of <code>hardware_concurrency</code> was in Boost 0.35, released in March 2008: <a href=\"https://www.boost.org/doc/libs/1_35_0/doc/html/thread/thread_management.html#thread.thread_management.thread.hardware_concurrency\">https://www.boost.org/doc/libs/1_35_0/doc/html/thread/thread_management.html#thread.thread_management.thread.hardware_concurrency</a></p>",
        "id": 204069071,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1594896991
    },
    {
        "content": "<p>They cite this is so they can be closer to the C++ 0x working draft: <a href=\"https://www.boost.org/users/history/version_1_35_0.html\">https://www.boost.org/users/history/version_1_35_0.html</a></p>",
        "id": 204069119,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1594897049
    },
    {
        "content": "<p>Yay, found the paper that first mentions <code>hardware_concurrency</code>: Multi-threading Library for Standard C++, N2320 (2017) -- <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2320.html\">http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2320.html</a></p>",
        "id": 204104759,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1594915343
    },
    {
        "content": "<p>It also doesn't feature any form of discussion on the topic <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> -- so that's not helpful here haha</p>",
        "id": 204104802,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1594915363
    },
    {
        "content": "<p>Also potentially of note is that we <em>already</em> basically ship this in libtest anyway, so moving to libstd seems good in that respect</p>",
        "id": 204105151,
        "sender_full_name": "simulacrum",
        "timestamp": 1594915514
    },
    {
        "content": "<p>The way we tracked this down was fun though: doing a binary search over the C++ 11 drafts looking for <code>hardware_concurrency</code> through the various years of <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/\">http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/</a> -- ended up finding a 6 month date range and found the corresponding paper (:</p>",
        "id": 204105202,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1594915534
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> oh cool! -- by that do you mean <code>std::test</code>, or just internally? -- would love to take a look</p>",
        "id": 204105396,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1594915617
    },
    {
        "content": "<p>just internally</p>",
        "id": 204105445,
        "sender_full_name": "simulacrum",
        "timestamp": 1594915639
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/master/src/libtest/helpers/concurrency.rs\">https://github.com/rust-lang/rust/blob/master/src/libtest/helpers/concurrency.rs</a></p>",
        "id": 204105503,
        "sender_full_name": "simulacrum",
        "timestamp": 1594915666
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> oh amazing; yeah I guess a PR would then essentially just be moving some code around</p>",
        "id": 204106352,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1594916027
    },
    {
        "content": "<p>yeah that's my expectation</p>",
        "id": 204106412,
        "sender_full_name": "simulacrum",
        "timestamp": 1594916043
    },
    {
        "content": "<p>putting it in std also means we're far more likely to get ports as we introduce more targets</p>",
        "id": 204106440,
        "sender_full_name": "simulacrum",
        "timestamp": 1594916059
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> do you have any opinions on what this should be named / which submodule to place it in? I'm torn between <code>std::env</code> and <code>std::thread</code></p>",
        "id": 204106442,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1594916060
    },
    {
        "content": "<p>I think thread makes more sense personally, if only because std::env feels more \"grab bag\"</p>",
        "id": 204106482,
        "sender_full_name": "simulacrum",
        "timestamp": 1594916088
    },
    {
        "content": "<p>if you're accessing this you're probably doing it as part of working with threads, too, so more discoverable</p>",
        "id": 204106527,
        "sender_full_name": "simulacrum",
        "timestamp": 1594916110
    },
    {
        "content": "<p>yeah, fair</p>",
        "id": 204106540,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1594916121
    },
    {
        "content": "<p>has prior art in C++ as well so might make sense to go with what's familiar</p>",
        "id": 204106574,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1594916141
    },
    {
        "content": "<p>Oki wrote a draft proposal: <a href=\"https://paper.dropbox.com/doc/2020-07-16-cpu-count-in-stdlib--A33In0_WCX9fhdqn~XlGxEfCAg-a6hEDlixdJadxrQ79lbBs\">https://paper.dropbox.com/doc/2020-07-16-cpu-count-in-stdlib--A33In0_WCX9fhdqn~XlGxEfCAg-a6hEDlixdJadxrQ79lbBs</a></p>",
        "id": 204108966,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1594917188
    },
    {
        "content": "<p>Don't think we'd need a full RFC for this, right?</p>",
        "id": 204108990,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1594917207
    },
    {
        "content": "<p><code>cpu_count</code> doesn't seem like the best name to me, but <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> on having this functionality in libstd!</p>",
        "id": 204109347,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594917387
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> if you have any suggestions for a different name; I'd love to hear!</p>",
        "id": 204109827,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1594917629
    },
    {
        "content": "<p><code>hardware_threads</code>? <code>hardware_concurrency</code> also doesn't sound bad tbh.</p>\n<p><code>cpu_count</code> sounds like it would return 1 except on NUMA systems.</p>",
        "id": 204110097,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594917764
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> oh yeah truu -- there's also probably a good case to be made that if <code>hardware_concurrency</code> doesn't sound particularly out of place that we should default to just naming it that</p>",
        "id": 204110900,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1594918192
    },
    {
        "content": "<p>\"hardware threads\" terminology is also fairly established. For example the RISC-V spec uses it (just abbreviated as \"hart\").</p>",
        "id": 204111022,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594918244
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> do you have a link to that by any chance?</p>",
        "id": 204112015,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1594918759
    },
    {
        "content": "<p><a href=\"https://riscv.org/specifications/isa-spec-pdf/\">https://riscv.org/specifications/isa-spec-pdf/</a> pdf page 20</p>",
        "id": 204113056,
        "sender_full_name": "lqd",
        "timestamp": 1594919241
    },
    {
        "content": "<p>In \"Volume I: User-Level ISA\", Chapter 1.1 RISC-V Hardware Platform Terminology:</p>\n<blockquote>\n<p>A component is termed a core if it contains an independent instruction fetch unit. A RISC-V-compatible core might support multiple RISC-V-compatible hardware threads, or harts, through multithreading.</p>\n</blockquote>",
        "id": 204113062,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594919245
    },
    {
        "content": "<p>Let's not call the function harts but hardware threads seems fine</p>",
        "id": 204115669,
        "sender_full_name": "simulacrum",
        "timestamp": 1594920475
    },
    {
        "content": "<p>Yeah I didn't mean to suggest \"harts\" literally</p>",
        "id": 204117298,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594921253
    },
    {
        "content": "<p>I'd love to see this as well, and <code>std::thread::hardware_threads()</code> seems like a fine name.</p>",
        "id": 204263758,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1595022563
    },
    {
        "content": "<p>We should account for systems that have no concept of this, though. For instance, a WebAssembly or asm.js target might have some concept of threads but might not have access to any information about the number of hardware threads.</p>",
        "id": 204263847,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1595022609
    },
    {
        "content": "<p>I think it'd be reasonable for it to return an <code>Option&lt;usize&gt;</code>.</p>",
        "id": 204263864,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1595022619
    },
    {
        "content": "<p>That way, a caller won't just blithely use it as \"number of threads to spawn\" without thinking about the right default for them.</p>",
        "id": 204263898,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1595022654
    },
    {
        "content": "<p>(Another option would be <code>Option&lt;NonZeroUsize&gt;</code>.)</p>",
        "id": 204263940,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1595022703
    },
    {
        "content": "<p>Ah yeah fair enough! — I like <code>Option&lt;NonZeroUsize&gt;</code> quite a bit here as well 😊</p>",
        "id": 204266889,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1595024942
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 204271435,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1595029047
    },
    {
        "content": "<p>Okk, got most of a patch done — walking the cats real quick and will submit. Should have it up in an hour or so ✨</p>",
        "id": 204302536,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1595082434
    },
    {
        "content": "<p>Filed a PR! <a href=\"https://github.com/rust-lang/rust/pull/74480\">https://github.com/rust-lang/rust/pull/74480</a></p>",
        "id": 204305382,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1595087276
    },
    {
        "content": "<p>from what I can read in glibc docs, num_cpus can give 0 cpus</p>",
        "id": 204314383,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1595100570
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214522\">@Leo Le Bouter</span> oh that's good to know! Looking at the code now it seems like we handle that case internally by just setting it to 1 instead. <a href=\"https://github.com/rust-lang/rust/pull/74480#issuecomment-660531159\">https://github.com/rust-lang/rust/pull/74480#issuecomment-660531159</a> suggests we should return <code>Result</code> instead of <code>Option</code> as well, so perhaps <code>io::Result&lt;usize&gt;</code> is the better signature.</p>",
        "id": 204314884,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1595101448
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214522\">@Leo Le Bouter</span> ah, I believe we already guard against that case though -- if 0 cpus are returned, it's set back to 1. Which I think is the intuitive behavior; don't think anyone would ever expect 0 to be returned if the call was successful.</p>",
        "id": 204317047,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1595105218
    },
    {
        "content": "<p>actually; just made that an error -- think that's the right approach</p>",
        "id": 204317130,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1595105370
    },
    {
        "content": "<p>In <a href=\"https://github.com/rust-lang/rust/pull/74480#issuecomment-662045841\">https://github.com/rust-lang/rust/pull/74480#issuecomment-662045841</a> the name <code>available_concurrency</code> was suggested; how do people feel about that?</p>",
        "id": 204859578,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1595542484
    },
    {
        "content": "<p>Overall the thread seems to have gathered quite a bit of attention; wasn't expecting that <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 204859669,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1595542558
    },
    {
        "content": "<p>That name change seems like an improvement to me.</p>",
        "id": 204990475,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1595657383
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 204990476,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1595657393
    },
    {
        "content": "<p>Now that <a href=\"https://github.com/rust-lang/rust/pull/89310\">https://github.com/rust-lang/rust/pull/89310</a> has been merged, I think we should be ready to open an FCP on <a href=\"https://github.com/rust-lang/rust/issues/74479\">https://github.com/rust-lang/rust/issues/74479</a>. There's one improvement we could make for Windows, but it doesn't affect the public API or guarantees in the docs, so we should be good to add that later as well.</p>\n<p>Haven't really participated in the new libs merge process yet, so checking here to see if that's indeed the right next step to propose <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> </p>\n<p>cc/ <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> <span class=\"user-mention\" data-user-id=\"310399\">@Mara</span></p>",
        "id": 260635506,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1636365499
    },
    {
        "content": "<p>I think that's the right next step.</p>",
        "id": 260660472,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1636380315
    },
    {
        "content": "<p>Commented on the thread, asking to start an FCP!</p>",
        "id": 260784720,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1636457576
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211722\">Yoshua Wuyts [he/they]</span> <a href=\"#narrow/stream/219381-t-libs/topic/C.2B.2B.20std.3A.3Athread.3A.3Ahardware_concurrency.20in.20the.20stdlib/near/260784720\">said</a>:</p>\n<blockquote>\n<p>Commented on the thread, asking to start an FCP!</p>\n</blockquote>\n<p>In response to the latest round of discussion, I wrote a <a href=\"https://github.com/rust-lang/rust/issues/74479#issuecomment-964118724\">long comment</a> about whether we should look at CFS bandwidth limits or not. Long story short: I'm not actually sure we <em>should</em>.</p>",
        "id": 260794027,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1636462993
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> thanks for going in depth on the thread! I feel like I understand what CFS quotas are now, and am inclined to agree with your conclusion.</p>",
        "id": 260796747,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1636464429
    },
    {
        "content": "<p>Thank you! Would you post that on the thread, please? I think it's important to have more than just emoji reactions there.</p>",
        "id": 260800205,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1636466189
    },
    {
        "content": "<p>(Largely the latter part I mean; not fishing for gratitude, just the part where you're responding to the overall argument. ;) )</p>",
        "id": 260800252,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1636466217
    }
]