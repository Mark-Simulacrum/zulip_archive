[
    {
        "content": "<p>Is it possible to emit a compile time warning if a std library function is called with a statically known \"bad\" value?</p>",
        "id": 274422752,
        "sender_full_name": "Chris Denton",
        "timestamp": 1646672684
    },
    {
        "content": "<p>Reason I'm asking is that on Windows if you do <code>File::open(\"aux\")</code> the path gets converted to <code>\\\\.\\aux</code> (that is the aux device). This may not be what the user expected. I thought it might be useful to warn the user about this and suggest explicitly doing <code>File::open(r\"\\\\.\\aux\")</code> if it was intentional.</p>",
        "id": 274422762,
        "sender_full_name": "Chris Denton",
        "timestamp": 1646672688
    },
    {
        "content": "<p>clippy?</p>",
        "id": 274422926,
        "sender_full_name": "The 8472",
        "timestamp": 1646672751
    },
    {
        "content": "<p>Oh, can it do that?</p>",
        "id": 274423035,
        "sender_full_name": "Chris Denton",
        "timestamp": 1646672781
    },
    {
        "content": "<p>it can look at literal values, yeah</p>",
        "id": 274423250,
        "sender_full_name": "The 8472",
        "timestamp": 1646672875
    },
    {
        "content": "<p>This is also possible in the compiler, though I suspect clippy is the better place for this one.</p>",
        "id": 274424872,
        "sender_full_name": "Ben Kimock (Saethlin)",
        "timestamp": 1646673424
    },
    {
        "content": "<p>Windows acts like this for any file extension too, right? <code>\"aux.foo\"</code>, <code>\"con.bar\"</code>, ...</p>",
        "id": 274437996,
        "sender_full_name": "cuviper",
        "timestamp": 1646678360
    },
    {
        "content": "<p>Windows 10 does. But Windows 11 has changed it. So <code>aux.txt</code> and <code>C:\\path\\to\\aux</code> now works how you'd naively expect.</p>",
        "id": 274438537,
        "sender_full_name": "Chris Denton",
        "timestamp": 1646678595
    },
    {
        "content": "<p>This obviously causes a bit of an inconsistency where you can create/open such files using a path but not if you use the just the name on its own. Powershell works around this but I'm not sure that Rust can without breaking existing code.</p>",
        "id": 274440766,
        "sender_full_name": "Chris Denton",
        "timestamp": 1646679584
    }
]