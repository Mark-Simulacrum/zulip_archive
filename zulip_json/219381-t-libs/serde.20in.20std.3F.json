[
    {
        "content": "<p>I'm working on patches to add a new target to std. The target's ABI includes some CBOR. Would it be ok to add serde and serde_cbor to std (for this target only)? The alternative would be to write/vendor some minimal CBOR implementation</p>",
        "id": 260668884,
        "sender_full_name": "Jethro",
        "timestamp": 1636383937
    },
    {
        "content": "<p>cbor in the abi? what target are you working on?</p>",
        "id": 260671018,
        "sender_full_name": "Mara",
        "timestamp": 1636384842
    },
    {
        "content": "<p>a new target for amazon nitro enclaves</p>",
        "id": 260671152,
        "sender_full_name": "Jethro",
        "timestamp": 1636384916
    },
    {
        "content": "<p>where would <code>std</code> be manually dealing with ABI?</p>",
        "id": 260690789,
        "sender_full_name": "cuviper",
        "timestamp": 1636392764
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"209168\">Thom Chiovoloni</span> has marked this topic as resolved.</p>",
        "id": 260692339,
        "sender_full_name": "Notification Bot",
        "timestamp": 1636393410
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"209168\">Thom Chiovoloni</span> has marked this topic as unresolved.</p>",
        "id": 260692342,
        "sender_full_name": "Notification Bot",
        "timestamp": 1636393412
    },
    {
        "content": "<p>(err, sorry, i didn't mean to click that button <span aria-label=\"sweat\" class=\"emoji emoji-1f613\" role=\"img\" title=\"sweat\">:sweat:</span>)</p>",
        "id": 260692393,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1636393433
    },
    {
        "content": "<p>Isn't <code>serde_cbor</code> looking for a maintainer?</p>",
        "id": 260692463,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1636393456
    },
    {
        "content": "<p>If you add serde you should disable serde_derive I think. Having proc macros as part of the standard library build will make the compiled standard library only work with a single host compiler (and not with the host compiler for all targets) I think as proc macros need to be compiled for the host and rustc tries to load all proc macros used by a crate when loading the crate. Rustc itself already has a hack (<code>-Zdual-proc-macro</code>) to make allow it to use proc macros while still being able to cross compile. However unlike for libstd, we don't support cross compiling code linking against internal rustc libraries anyway AFAIK.</p>",
        "id": 260713862,
        "sender_full_name": "bjorn3",
        "timestamp": 1636403100
    },
    {
        "content": "<p>Using serde without serde_derive is pretty verbose though, so maybe writing your own cbor implementation is the best option?</p>",
        "id": 260713942,
        "sender_full_name": "bjorn3",
        "timestamp": 1636403151
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> in std::net<br>\n<span class=\"user-mention\" data-user-id=\"209168\">@Thom Chiovoloni</span> yeah I guess we would be using a different CBOR crate</p>",
        "id": 260717594,
        "sender_full_name": "Jethro",
        "timestamp": 1636404923
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span></p>\n<blockquote>\n<p>Having proc macros as part of the standard library build will make the compiled standard library only work with a single host compiler (and not with the host compiler for all targets)</p>\n</blockquote>\n<p>really? the proc macros aren't evaluated at compile time?</p>",
        "id": 260717946,
        "sender_full_name": "Jethro",
        "timestamp": 1636405116
    },
    {
        "content": "<p>They are, but it is possible to re-export proc macros, so they still need to be registered as dependencies.</p>",
        "id": 260718044,
        "sender_full_name": "bjorn3",
        "timestamp": 1636405171
    },
    {
        "content": "<p>I guess we could use a build script instead, but that seems... not ideal</p>",
        "id": 260718170,
        "sender_full_name": "Jethro",
        "timestamp": 1636405213
    },
    {
        "content": "<p>It is possible that it will work if you don't re-export any proc-macro, but I would be somewhat surprised if such a special case exists.</p>",
        "id": 260718191,
        "sender_full_name": "bjorn3",
        "timestamp": 1636405220
    },
    {
        "content": "<p>Do you only need to deserialize structs, or also enums?</p>",
        "id": 260718307,
        "sender_full_name": "bjorn3",
        "timestamp": 1636405269
    },
    {
        "content": "<p>If only structs, maybe it would be possible to write a <code>macro_rules!</code> macro?</p>",
        "id": 260718351,
        "sender_full_name": "bjorn3",
        "timestamp": 1636405290
    },
    {
        "content": "<p>there are enums, but the structures/enums are pretty simple, so it's certainly possible to not use serde</p>",
        "id": 260718391,
        "sender_full_name": "Jethro",
        "timestamp": 1636405316
    },
    {
        "content": "<p>it's just less nice</p>",
        "id": 260718468,
        "sender_full_name": "Jethro",
        "timestamp": 1636405333
    },
    {
        "content": "<blockquote>\n<p>They are, but it is possible to re-export proc macros, so they still need to be registered as dependencies.</p>\n</blockquote>\n<p>I see. For some reason I thought there was only one big rlib that contained everything, but checking some installed targets I do see now that every dependency of std is included as an rlib in the distribution</p>",
        "id": 260718621,
        "sender_full_name": "Jethro",
        "timestamp": 1636405417
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"138938\">Jethro</span> <a href=\"#narrow/stream/219381-t-libs/topic/serde.20in.20std.3F/near/260717594\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"138448\">cuviper</span> in std::net</p>\n</blockquote>\n<p>so you mean something in the system's networking API and ABI requires CBOR?<br>\n(I was thinking of lower level ABI at first, like calling conventions)</p>",
        "id": 260723439,
        "sender_full_name": "cuviper",
        "timestamp": 1636407980
    },
    {
        "content": "<p>yeah no, not calling conventions. more like DNS resolution</p>",
        "id": 260724439,
        "sender_full_name": "Jethro",
        "timestamp": 1636408563
    },
    {
        "content": "<p>well I suppose you could say that this is technically the calling convention for some RPC</p>",
        "id": 260724799,
        "sender_full_name": "Jethro",
        "timestamp": 1636408743
    },
    {
        "content": "<p>Hm, if we include proc macros in libstd, it would also break -Zbuild-std on at least musl linux with static CRT (which is the default).</p>",
        "id": 260734666,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1636414509
    },
    {
        "content": "<p>Ah, right, this would only be relevant to this new target, so that's probably fine</p>",
        "id": 260734714,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1636414552
    },
    {
        "content": "<p>I still suspect that if it's not that bad to do it manually, there are enough reasons to justify doing so.</p>",
        "id": 260734790,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1636414585
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"138938\">Jethro</span> <a href=\"#narrow/stream/219381-t-libs/topic/serde.20in.20std.3F/near/260668884\">said</a>:</p>\n<blockquote>\n<p>I'm working on patches to add a new target to std. The target's ABI includes some CBOR. Would it be ok to add serde and serde_cbor to std (for this target only)? The alternative would be to write/vendor some minimal CBOR implementation</p>\n</blockquote>\n<p>Note that <code>serde_cbor</code> isn't currently actively maintained, and needs help. Making std depend on it for a target would add more pressure. I think if you're considering doing this, the plan would <em>have</em> to include volunteering to help maintain it and fix any outstanding issues.</p>",
        "id": 260738783,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1636417491
    },
    {
        "content": "<p>See the note at the top of <a href=\"https://crates.io/crates/serde_cbor\">https://crates.io/crates/serde_cbor</a> .</p>",
        "id": 260738831,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1636417531
    },
    {
        "content": "<p>Which references <a href=\"https://crates.io/crates/ciborium\">https://crates.io/crates/ciborium</a> . (And minicbor, but that's under an unusual non-standard license.)</p>",
        "id": 260739490,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1636418059
    },
    {
        "content": "<p>Noted</p>",
        "id": 260766349,
        "sender_full_name": "Jethro",
        "timestamp": 1636446186
    }
]