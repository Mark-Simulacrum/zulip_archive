[
    {
        "content": "<p>What was the original reason that stdarch is a submodule rather than in-tree? I can't really figure out why it doesn't live in libcore directly, and even the readme seems to suggest that the repo shouldn't be used</p>",
        "id": 245575792,
        "sender_full_name": "bstrie",
        "timestamp": 1625957292
    },
    {
        "content": "<p>it started as <a href=\"http://github.com/BurntSushi/stdsimd\">github.com/BurntSushi/stdsimd</a>: <a href=\"https://github.com/rust-lang/stdarch/commit/e00fa2a29d1724c3ad6049d513dcae491038ed7b\">https://github.com/rust-lang/stdarch/commit/e00fa2a29d1724c3ad6049d513dcae491038ed7b</a></p>\n<p>at some point, we (alex and i, i think) started crowd-sourcing the implementations of the Intel intrinsics, and just generally found it easier to iterate outside of rust proper. i think it was more a matter of not having a great reason to move it in tree.</p>\n<p>with that said, <span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> might have some deeper insight here.</p>",
        "id": 245576205,
        "sender_full_name": "BurntSushi",
        "timestamp": 1625958018
    },
    {
        "content": "<p>right now I'm just wondering if I need to do any sort of coordination dance if I'm making changes to both the rust repo and stdarch simultaneously, or if it's ok to leave the HEAD of the stdarch repo in a partly-finished state that wouldn't compile with rust HEAD until the rust PR is accepted</p>",
        "id": 245576440,
        "sender_full_name": "bstrie",
        "timestamp": 1625958275
    },
    {
        "content": "<p>which is to say, I'm moving <code>asm!</code> into stdarch, and obviously I can't have it be defined twice, and the easy way just involves defining it in stdarch, and then not bumping the stdarch dep until I can atomically remove the current <code>asm!</code> definition</p>",
        "id": 245576589,
        "sender_full_name": "bstrie",
        "timestamp": 1625958504
    },
    {
        "content": "<p>although I guess, heh, there's no reason that two macros can't be defined by the same compiler builtin... and there's no reason that the compiler has to know that the two exported items are the same thing... so actually I can just define it in stdarch, and bump the dep whenever, and then I only need to remove the rust repo implementation when I go through and add it to the prelude</p>",
        "id": 245576651,
        "sender_full_name": "bstrie",
        "timestamp": 1625958640
    },
    {
        "content": "<p>This was originally done for maintainability and testability, it was just easier to iterate outside and include as a submodule later.</p>",
        "id": 245686535,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1626096907
    },
    {
        "content": "<p>There's precedent, however, for having changes on the main branch of stdarch which can't land in rust-lang/rust. It blocks updating the submodule but it's not unheard of</p>",
        "id": 245686587,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1626096932
    },
    {
        "content": "<p>Would those be substantially harder to do with a fork of rust-lang/rust, if stdarch weren't a submodule?</p>",
        "id": 245708737,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1626106232
    },
    {
        "content": "<p>Moving stdarch into rust-lang/rust would probably make it easier on tooling. As it is, nothing in core::arch has any support in rust-analyzer, it's been this way for a while, and when I tried to solve it, it seemed fairly difficult. (Obviously tooling limitations aren't that compelling of a reason to drive organization, but as it is, it is at the very least, fairly odd the way that libcore includes stdarch via a fairly circuitious <code>#[path]</code> expression...)</p>",
        "id": 245854090,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1626195300
    },
    {
        "content": "<p>I'm not really looking forward for a change like this for several reasons (I guess the ship has sailed on it if it's this close to happening), but honestly the biggest one is the prospect of losing IDE support for the <code>asm!</code> macro.</p>",
        "id": 245854275,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1626195383
    }
]