[
    {
        "content": "<p>I was just looking at the implementation of <code>Vec::truncate</code> and noticed that it doesn't return early if <code>len == self.len()</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">truncate</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">len</span>: <span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// This is safe because:</span>\n<span class=\"w\">        </span><span class=\"c1\">//</span>\n<span class=\"w\">        </span><span class=\"c1\">// * the slice passed to `drop_in_place` is valid; the `len &gt; self.len`</span>\n<span class=\"w\">        </span><span class=\"c1\">//   case avoids creating an invalid slice, and</span>\n<span class=\"w\">        </span><span class=\"c1\">// * the `len` of the vector is shrunk before calling `drop_in_place`,</span>\n<span class=\"w\">        </span><span class=\"c1\">//   such that no value will be dropped twice in case `drop_in_place`</span>\n<span class=\"w\">        </span><span class=\"c1\">//   were to panic once (if it panics twice, the program aborts).</span>\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">len</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">return</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">remaining_len</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">len</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ptr</span>::<span class=\"n\">slice_from_raw_parts_mut</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">as_mut_ptr</span><span class=\"p\">().</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">len</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">remaining_len</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">len</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">ptr</span>::<span class=\"n\">drop_in_place</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Why is that? It's not apparent to me why <code>if len &gt; self.len</code> can't be <code>if len &gt;= self.len</code>.</p>\n<p>Thanks!</p>",
        "id": 222147821,
        "sender_full_name": "Noah Lev",
        "timestamp": 1610157983
    },
    {
        "content": "<p>From what I see it’s correct but could indeed use &gt;= without problems, I don’t think it would cause any errors</p>",
        "id": 222148386,
        "sender_full_name": "Poliorcetics",
        "timestamp": 1610158788
    },
    {
        "content": "<p>I believe this is for performance reasons, iirc LLVM is less able to optimize the &gt;= in some cases. I may be confusing it with some other case though.</p>",
        "id": 222153174,
        "sender_full_name": "simulacrum",
        "timestamp": 1610166626
    },
    {
        "content": "<p>See the conversation in <a href=\"https://github.com/rust-lang/rust/pull/78884\">https://github.com/rust-lang/rust/pull/78884</a>, <span class=\"user-mention\" data-user-id=\"307537\">@Camelid</span></p>",
        "id": 222153737,
        "sender_full_name": "scottmcm",
        "timestamp": 1610167644
    },
    {
        "content": "<p>Ah, that makes sense. Thanks!</p>",
        "id": 222188069,
        "sender_full_name": "Noah Lev",
        "timestamp": 1610224226
    },
    {
        "content": "<p>It is interesting how important it is to look at the actual changes in output when optimizing something – it's very surprising sometimes.</p>",
        "id": 222188098,
        "sender_full_name": "Noah Lev",
        "timestamp": 1610224271
    },
    {
        "content": "<p>I actually saw that PR before but I forgot about it <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 222188110,
        "sender_full_name": "Noah Lev",
        "timestamp": 1610224297
    },
    {
        "content": "<p>I just made a PR (<a href=\"https://github.com/rust-lang/rust/issues/80857\">#80857</a>) to add a comment to <code>Vec::truncate</code> explaining why it uses <code>&gt;</code> and not <code>&gt;=</code>. Hopefully now it will no longer confuse people in the future!</p>",
        "id": 222188510,
        "sender_full_name": "Noah Lev",
        "timestamp": 1610224752
    },
    {
        "content": "<p>Huh, I'm having a hard time thinking about the conditional check in <code>truncate()</code> ever being a performance bottleneck. On the surface, this seems like an optimization that solves a non-problem</p>",
        "id": 231552213,
        "sender_full_name": "Christian Mazakas",
        "timestamp": 1616537547
    }
]