[
    {
        "content": "<p>Is there interest in adding an <code>at_exit</code> function to the standard library? It would be really helpful for e.g. <a href=\"#narrow/stream/122651-general/topic/DHAT.20and.20rustdoc/near/219666747\">ensuring a memory profiler always runs even if not dropped</a>, since it's meant to live for the lifetime of the program and often <code>process::exit</code> is called before it's dropped</p>",
        "id": 219667136,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607723551
    },
    {
        "content": "<p>there's already a private <code>sys_common::at_exit</code> but I don't think it's stable</p>",
        "id": 219667157,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607723567
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"120989\">@njn</span></p>",
        "id": 219667197,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607723599
    },
    {
        "content": "<p>at_exit is extremely unsafe to use</p>",
        "id": 219671193,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1607726401
    },
    {
        "content": "<p>you can only invoke async-signal-safe operations inside of it</p>",
        "id": 219671270,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1607726431
    },
    {
        "content": "<p>and it behaves very differently on unix and windows</p>",
        "id": 219671298,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1607726456
    },
    {
        "content": "<p>Code also continues to run in other threads after those callbacks have executed</p>",
        "id": 219680140,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1607734449
    },
    {
        "content": "<p>unless you're on windows, where all threads but the main thread are abruptly killed in the middle of whatever they were doing!</p>",
        "id": 219680167,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1607734497
    },
    {
        "content": "<p>whoa that's news to me</p>",
        "id": 219680189,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1607734533
    },
    {
        "content": "<p>That's why we had to get rid of log's atexit callback iirc</p>",
        "id": 219680348,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1607734689
    },
    {
        "content": "<p>It would just deadlock on windows if the process exited while a thread was installing a logger</p>",
        "id": 219680358,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1607734708
    },
    {
        "content": "<p>oh that is alarming</p>",
        "id": 219682936,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607738207
    },
    {
        "content": "<p>I guess it could be <code>unsafe fn</code>? but it sounds like all the invariants aren't known and it might just crash</p>",
        "id": 219682944,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607738228
    },
    {
        "content": "<p>both rust's std and C's stdlib have an 'at exit' function. rust's one is pretty safe. it's directly called from process::exit.</p>",
        "id": 219829640,
        "sender_full_name": "Mara",
        "timestamp": 1607946290
    },
    {
        "content": "<p>(but that one doesn't work for Rust libraries used from C programs. it's used for flushing stdout at exit and WSACleanup on windows)</p>",
        "id": 219829799,
        "sender_full_name": "Mara",
        "timestamp": 1607946410
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310399\">Mara</span> <a href=\"#narrow/stream/219381-t-libs/topic/at_exit.20.3F/near/219829799\">said</a>:</p>\n<blockquote>\n<p>(but that one doesn't work for Rust libraries used from C programs. it's used for flushing stdout at exit and WSACleanup on windows)</p>\n</blockquote>\n<p>FWIW, that would work fine for my use case, which is a Rust binary with a global allocator whose destructor isn't running</p>",
        "id": 219845863,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607955211
    },
    {
        "content": "<p>(because someone used <code>process::exit</code>, not because globals aren't dropped, it's a local in <code>main</code>)</p>",
        "id": 219845931,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607955241
    },
    {
        "content": "<p>that one has a pretty good implementation. it even handles adding more at_exit handlers from within such a handler, with a recursion limit etc. (which is overkill considering it's used only in two places now)</p>\n<p>so exposing that one is probably fine.</p>",
        "id": 219848915,
        "sender_full_name": "Mara",
        "timestamp": 1607956451
    },
    {
        "content": "<p>We could call it <code>at_rust_main_exit</code> or similar to convay that's on the exit of rust main and not on process exit.</p>\n<p>For the case rust is integrated into C we could provide a <code>unsafe</code> way to call that exit handler(s), including in the documentation the problems with C at_exit method and appropriate recommendations about how/what to call it.</p>",
        "id": 219899289,
        "sender_full_name": "Philipp Korber",
        "timestamp": 1607978606
    },
    {
        "content": "<p>But process::exit works either way and will Invoke rust handlers regardless of whether main was rust controlled</p>",
        "id": 219901218,
        "sender_full_name": "nagisa",
        "timestamp": 1607979610
    },
    {
        "content": "<p>it runs after a rusty <code>main</code> or calls to rust <code>std::process::exit</code>, but not any external cause like <code>libc::exit</code></p>",
        "id": 219912053,
        "sender_full_name": "cuviper",
        "timestamp": 1607985218
    },
    {
        "content": "<p>It also won't run if you exit via signal. But most importantly, it won't run in the library case. And honestly, the most <em>common</em> times I see C programmers use <code>atexit</code> is in libraries.</p>",
        "id": 219915329,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1607987220
    },
    {
        "content": "<p>often incorrectly! <a href=\"https://github.com/openssl/openssl/issues/6214\">https://github.com/openssl/openssl/issues/6214</a></p>",
        "id": 219915734,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1607987513
    }
]