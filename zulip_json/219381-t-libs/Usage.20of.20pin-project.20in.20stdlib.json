[
    {
        "content": "<p>Hi all,</p>\n<p>I'm currently working on some more involved async adapters, and I was wondering how to go about using <code>pin-project</code> in the stdlib. I'm assuming this is something we want to do, since without it it'd be much harder to validate we're correctly using <code>Pin</code> (essentially all of the async ecosystem makes use of <code>pin-project</code>). But I'm not sure how to go about adding a dependency to the stdlib?</p>\n<p>Does anyone have any guidance on how to add <code>pin-project</code> as a dep to stdlib?</p>\n<p>cc/ <span class=\"user-mention\" data-user-id=\"213313\">@Taiki Endo</span> probably as well</p>",
        "id": 225101605,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1612396914
    },
    {
        "content": "<p>Naively tried including <code>pin-project-lite</code> as a dependency of <code>core</code>, but that fails compilation. Which makes sense since I'm assuming <code>pin-project-lite</code> depends on <code>core</code>. The solution would probably be to inline the source somehow, but I'm guessing there's processes around this, and probably requires coordinating with the crate maintainers.</p>",
        "id": 225102283,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1612397354
    },
    {
        "content": "<p>crates that are to be used as part of core/stdlib generally expose a feature that makes it usable in that context.</p>",
        "id": 225102641,
        "sender_full_name": "nagisa",
        "timestamp": 1612397619
    },
    {
        "content": "<p>see <code>rustc-dep-of-std</code> for <code>libc</code> or <code>hashbrown</code>.</p>",
        "id": 225102746,
        "sender_full_name": "nagisa",
        "timestamp": 1612397674
    },
    {
        "content": "<p>this typically involves making the crate <code>#[no_std]</code> if used in libstd or <code>#[no_core]</code> if used in <code>libcore</code>.</p>",
        "id": 225102835,
        "sender_full_name": "nagisa",
        "timestamp": 1612397751
    },
    {
        "content": "<p>The other more generic concerns are: license compatibility and maintainership. The crates currently part of libstd are part of the rust-lang organisation, for various reasons.</p>",
        "id": 225103152,
        "sender_full_name": "nagisa",
        "timestamp": 1612397944
    },
    {
        "content": "<p>cfg-if is a macro-only rustc-dep-of-std that would probably work similarly to pin-project-lite</p>",
        "id": 225103205,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1612398001
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211722\">@Yoshua Wuyts</span></p>\n<p>First, I have two questions.</p>\n<ol>\n<li>Which crate are you actually planning to use? (pin-project or pin-project-lite)</li>\n<li>Which crate are you actually planning to use pin-project* with? (std, alloc, core, or other)</li>\n</ol>\n<p>In general, as for 1, my recommendation as an author of both crates is to use pin-project whenever possible. See <a href=\"https://github.com/rust-lang/futures-rs/issues/2170#issuecomment-755208805\">https://github.com/rust-lang/futures-rs/issues/2170#issuecomment-755208805</a> and <a href=\"https://github.com/tokio-rs/tracing/issues/1178#issuecomment-760337757\">https://github.com/tokio-rs/tracing/issues/1178#issuecomment-760337757</a> for reasons.</p>\n<p>However, if 1 is pin-project, I'm not sure what we need to use proc-macro with std or core.</p>\n<p>If 1 is pin-project-lite and 2 is <em>not</em> core, it's relatively easy (IIUC). <a href=\"https://github.com/taiki-e/pin-project-lite/compare/master...rustc-dep-of-std\">https://github.com/taiki-e/pin-project-lite/compare/master...rustc-dep-of-std</a></p>\n<p>If 1 is pin-project-lite and 2 is core, I think it's possible, but it requires a breaking change to pin-project-lite. I can accept this, but not immediately. (I know a way that to avoid breaking changes, but I don't like it way.)</p>\n<p>Also, I don't know about the policy for adding dependencies to the standard library, but if there's anything I can do please let me know. (The license should be fine.)</p>",
        "id": 225121887,
        "sender_full_name": "Taiki Endo",
        "timestamp": 1612418030
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"213313\">@Taiki Endo</span> I'd prefer <code>pin-project</code> for 1, and I'm looking to use it in <code>core</code> for 2.</p>",
        "id": 225132886,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1612428780
    },
    {
        "content": "<p>The reason for that is that most <code>Future</code> / <code>Stream</code> combinators van be exposed from that layer, since we never allocate.</p>",
        "id": 225133206,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1612428973
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"213313\">@Taiki Endo</span> what <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> is saying probably is what's needed to make this work: enable the crate to work on <code>#[no_core]</code>, and then ensure the licenses are compatible and the Rust org can maintain them. I think you are the right person to help with these; though it feels like a big ask <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 225133797,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1612429381
    },
    {
        "content": "<p>I am not sure it's possible to have std depend on a proc macro. Proc macros at a minimum need the <code>proc_macro</code> crate. Even if that works out <code>no_core</code> is a <em>very</em> large ask that will probably end up duplicating most of the core crate.</p>\n<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> will know more about this than me.</p>",
        "id": 225175296,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1612452810
    },
    {
        "content": "<p>It'll be annoying but it's not infeasible I think, no need for no_core I think - I don't have the bandwidth to help out right now though.</p>",
        "id": 225175520,
        "sender_full_name": "simulacrum",
        "timestamp": 1612452905
    },
    {
        "content": "<p>My worry is for stage 1 builds where we haven't built libstd yet and can't use the beta libstd. Proc macros still use a standard library IIUC</p>\n<p>(Does that mean build scripts for libstd must have <code>no_std</code>?)</p>",
        "id": 225175806,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1612453019
    },
    {
        "content": "<p>the proc macro crate would use the previous stage's libstd just like the compiler does</p>",
        "id": 225176369,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1612453249
    },
    {
        "content": "<p>just like when cross compiling proc macro crates are built for the host, not the target</p>",
        "id": 225176438,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1612453292
    },
    {
        "content": "<p>I don't see how that can work - the proc macro is being compiled by stage1, but libstd was compiled by beta. The ABI is different.</p>",
        "id": 225177543,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1612453771
    },
    {
        "content": "<p><code>pin-project-lite</code> is a <code>macro_rules</code> macro, and prior experience points to it being enough for most cases we'd want to cover here. Would that be easier to include?</p>",
        "id": 225236186,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1612479146
    },
    {
        "content": "<p>yes, much</p>",
        "id": 225237670,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1612479956
    },
    {
        "content": "<p>Filed a PR which could make use of <code>pin-project-lite</code>. This contains a concrete example for why we'd want this available in <code>core</code>: <a href=\"https://github.com/rust-lang/rust/pull/81797\">https://github.com/rust-lang/rust/pull/81797</a></p>",
        "id": 225331512,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1612547008
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211722\">@Yoshua Wuyts</span> Thanks for the response.</p>\n<blockquote>\n<p>The reason for that is that most Future / Stream combinators van be exposed from that layer, since we never allocate.</p>\n</blockquote>\n<p>That makes sense. However, as mentioned in the above comment, pin-project-lite can't provide no-core support right away, so I recommend adding to std first (by using pin-project-lite's rustc-dep-of-std feature) instead of using unsafe code. I can promise to provide no-core support for pin-project-lite before the feature stabilizes.</p>\n<blockquote>\n<p>what nagisa is saying probably is what's needed to make this work: enable the crate to work on #[no_core], and then ensure the licenses are compatible and the Rust org can maintain them.</p>\n</blockquote>\n<p>I'm okay with move the repository and add write/publish permissions to T-libs (if I can keep accessing the repo as admin).<br>\nFor other things, I think I already answered these in the above comment.</p>",
        "id": 226231626,
        "sender_full_name": "Taiki Endo",
        "timestamp": 1613200481
    },
    {
        "content": "<p><a href=\"https://rustc-dev-guide.rust-lang.org/crates-io.html#cratesio-dependencies\">The policy on adding dependencies to the compiler</a> does not seem to mention the repository/crate owner, but the library may have another stricter policy...</p>",
        "id": 226284284,
        "sender_full_name": "Taiki Endo",
        "timestamp": 1613275258
    },
    {
        "content": "<p>It's not a hard requirement since for example <a href=\"https://github.com/gimli-rs/object\">https://github.com/gimli-rs/object</a> is a dependency of std.</p>",
        "id": 226299745,
        "sender_full_name": "Amanieu",
        "timestamp": 1613302027
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"213313\">@Taiki Endo</span> sounds good; I'll update my PR be on <code>std</code> for now then</p>",
        "id": 226536858,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1613492877
    }
]