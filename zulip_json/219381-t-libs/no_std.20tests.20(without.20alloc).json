[
    {
        "content": "<p>I'm currently looking into <a href=\"https://github.com/rust-lang/rfcs/issues/2810\">https://github.com/rust-lang/rfcs/issues/2810</a> by copying the <code>catch_unwind</code> implementation into <code>core</code> and removing the use of <code>Box</code>. While adding a test to <code>library/core/tests</code> I was surprised to see that <code>panic_unwind</code> appears to be used, since it depends on <code>alloc</code>.</p>\n<p>If <code>library/core/tests</code> depends on <code>alloc</code>, is there a way to write tests for <code>core</code> without depending on <code>alloc</code> (i.e., to replicate someone who's trying to write <code>no_std</code> and no alloc code)?</p>",
        "id": 258269087,
        "sender_full_name": "Daniel Paoliello",
        "timestamp": 1634676369
    },
    {
        "content": "<p><code>src/test/ui/panic-runtime</code> has a bunch of no_std tests</p>",
        "id": 258272491,
        "sender_full_name": "The 8472",
        "timestamp": 1634677765
    },
    {
        "content": "<p>All <code>#[test]</code> tests have libstd available as libtest depends on it. The reason libcore tests are in core/tests and not distributed throughout core/ is to make a dependency on libstd/libtest possible I think.</p>",
        "id": 258277972,
        "sender_full_name": "bjorn3",
        "timestamp": 1634680103
    },
    {
        "content": "<p>How do you want to implement catch_unwind in libcore by the way? It depends on a panic runtime which is only available when you use libstd.</p>",
        "id": 258278128,
        "sender_full_name": "bjorn3",
        "timestamp": 1634680197
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/219381-t-libs/topic/no_std.20tests.20.28without.20alloc.29/near/258278128\">said</a>:</p>\n<blockquote>\n<p>How do you want to implement catch_unwind in libcore by the way? It depends on a panic runtime which is only available when you use libstd.</p>\n</blockquote>\n<p>Honestly, I'm not sure: that's part of the reason that I'm making this prototype. I figure that if I can get something working, then that will help illuminate what problems need to be solved and decisions need to be made, and then I can move the discussion on the GitHub issue forward (or create an RFC with a proposal).</p>",
        "id": 258290411,
        "sender_full_name": "Daniel Paoliello",
        "timestamp": 1634686971
    },
    {
        "content": "<p>Also, I may be wrong but it appears that <code>panic_unwind</code> depends on <code>core</code>+<code>alloc</code> not <code>std</code>, so it might be useful to someone in that environment to be able to use <code>catch_unwind</code>. And it <em>should</em> be possible for someone implementing their own panic runtime to provide the functions required to make <code>catch_unwind</code> work if they so desire...</p>",
        "id": 258293037,
        "sender_full_name": "Daniel Paoliello",
        "timestamp": 1634688739
    },
    {
        "content": "<p><code>catch_unwind</code> calls <code>__rust_panic_cleanup</code> from the panic runtime (which is only included when using libstd) and <code>panic_count::decrease()</code> from libstd.</p>",
        "id": 258334009,
        "sender_full_name": "bjorn3",
        "timestamp": 1634720257
    },
    {
        "content": "<p>It happens that I have implemented a panic runtime, and <code>try</code>/<code>abort</code> are intrinsics that I need (<a href=\"https://github.com/nbdd0121/unwinding/blob/trunk/src/panicking.rs\">https://github.com/nbdd0121/unwinding/blob/trunk/src/panicking.rs</a>). However I am not too worried about it using nightly features, given that <code>lang_items</code> is need for personality function..</p>",
        "id": 258387787,
        "sender_full_name": "Gary Guo",
        "timestamp": 1634743579
    },
    {
        "content": "<p>I thought about a no_std catch_unwind design but really couldn't figure out. Especially since foreign exceptions can only be dealt with the panic runtime. We could define a few more lang_items and require user to define them instead, but that really wouldn't reduce the number of nightly features.</p>",
        "id": 258388243,
        "sender_full_name": "Gary Guo",
        "timestamp": 1634743754
    },
    {
        "content": "<p>We don't guarantee through which mechanism unwinding works in rust. It happens to be implemented using DWARF/SEH in cg_llvm, but other backends (or even cg_llvm) may use different mechanisms if they are easier to implement or faster. Without a unwinding mechanism guarantee, it won't be possible to initiate a stack unwind on stable except through libstd.</p>",
        "id": 258422035,
        "sender_full_name": "bjorn3",
        "timestamp": 1634755703
    },
    {
        "content": "<p>FYI, I have a working prototype: <a href=\"https://github.com/rust-lang/rfcs/issues/2810#issuecomment-948937887\">https://github.com/rust-lang/rfcs/issues/2810#issuecomment-948937887</a><br>\nIt works out-of-the-box for libcore+liballoc environments using one of the existing panic runtimes, and requires custom panic runtimes to implement a single extern function (but only if they use <code>catch_unwind</code>).</p>",
        "id": 258604181,
        "sender_full_name": "Daniel Paoliello",
        "timestamp": 1634844874
    }
]