[
    {
        "content": "<p>If I'm not mistaken, const generics have <em>actually</em> gotten far enough that we could consider making BTreeMap&lt;K, V&gt; into <code>BTreeMap&lt;K, V, const B: usize = 6&gt;</code> or whatever? And then a user could override the default?</p>\n<p>This was always the dream/meme for BTreeMap. I don't know how default inference or backcompat on this stuff is these days, but at worst it seems like we could play typedef games to hide it but have like RealBTreeMap for people that want to mess with it?</p>",
        "id": 276891211,
        "sender_full_name": "Gankra",
        "timestamp": 1648481695
    },
    {
        "content": "<p>from the compiler/cg side that seems fine, if we add allocator support to it we would end up with <code>BTreeMap&lt;K, V, const B: usize = 6, A: Allocator = DefaultAllocator&gt;</code> which seems like the right order to me</p>",
        "id": 276891506,
        "sender_full_name": "lcnr",
        "timestamp": 1648481834
    },
    {
        "content": "<p>a major issue is that methods on <code>BTreeMap</code> have to also keep the default, so we would have to add <code>BTreeMap::new_with_b</code> or whatever</p>",
        "id": 276891667,
        "sender_full_name": "lcnr",
        "timestamp": 1648481894
    },
    {
        "content": "<p>Do we accept <code>_</code> for const generic arguments?  So that someone who doesn't care can still use <code>BTreeMap&lt;K, V, _, SpecialAlloc&gt;</code>?</p>",
        "id": 276891687,
        "sender_full_name": "scottmcm",
        "timestamp": 1648481902
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/219381-t-libs/topic/Exposing.20BTreeMap's.20.22B.22.3F/near/276891687\">said</a>:</p>\n<blockquote>\n<p>Do we accept <code>_</code> for const generic arguments?  So that someone who doesn't care can still use <code>BTreeMap&lt;K, V, _, SpecialAlloc&gt;</code>?</p>\n</blockquote>\n<p>50/50</p>",
        "id": 276891735,
        "sender_full_name": "lcnr",
        "timestamp": 1648481927
    },
    {
        "content": "<p>with a feature gate</p>",
        "id": 276891757,
        "sender_full_name": "lcnr",
        "timestamp": 1648481935
    },
    {
        "content": "<p>the current impl works as it should afaik</p>",
        "id": 276891797,
        "sender_full_name": "lcnr",
        "timestamp": 1648481953
    },
    {
        "content": "<p>but I am not happy with it cause it makes hir visitors a bit more fragile. With that feature we now have two ways to represent <code>_</code> for types in the hir, both as <code>hir::TyKind::Infer</code> and <code>hir::GenericArg::Infer</code>. If any hir visitor were to care for that, it would probably miss the generic arg representation by accident</p>",
        "id": 276892023,
        "sender_full_name": "lcnr",
        "timestamp": 1648482048
    },
    {
        "content": "<p>also, <code>BTreeMap&lt;K, V,  _, MyAlloc&gt;</code> drops the default for <code>B</code> which might be annoying</p>",
        "id": 276892377,
        "sender_full_name": "lcnr",
        "timestamp": 1648482235
    },
    {
        "content": "<p>we should just add a <code>default</code> generic argument which either uses the default for that generic parameter or causes an error <span aria-label=\"sparkles\" class=\"emoji emoji-2728\" role=\"img\" title=\"sparkles\">:sparkles:</span></p>",
        "id": 276892482,
        "sender_full_name": "lcnr",
        "timestamp": 1648482267
    },
    {
        "content": "<p><code>BTreeMap&lt;K, V, default, MyAlloc&gt;</code> :3</p>",
        "id": 276892521,
        "sender_full_name": "lcnr",
        "timestamp": 1648482284
    },
    {
        "content": "<p>Oh, right, <code>_</code> is inferred, not \"use the default\".  We could probably make <code>BTreeMap&lt;K, V, =, MyAlloc&gt;</code> work for that...</p>\n<p>Scope creep: it could also be something like <code>BTreeMap&lt;K, V, Strategy = LinearScan&lt;6&gt;, Allocator = DefaultAllocator&gt;</code>.</p>",
        "id": 276892643,
        "sender_full_name": "scottmcm",
        "timestamp": 1648482341
    },
    {
        "content": "<p>please no full STL/Boost</p>",
        "id": 276894752,
        "sender_full_name": "Gankra",
        "timestamp": 1648483291
    },
    {
        "content": "<p>\"statically\" branching on B to choose the strategy internally is plenty</p>",
        "id": 276894883,
        "sender_full_name": "Gankra",
        "timestamp": 1648483346
    },
    {
        "content": "<blockquote>\n<p><code>_</code> is inferred, not \"use the default\"</p>\n</blockquote>\n<p>well, I'd love it if <code>_</code> could be extended to mean \"infer this, but use the default as a fallback\" :)</p>",
        "id": 277039037,
        "sender_full_name": "bstrie",
        "timestamp": 1648574720
    },
    {
        "content": "<p>Exposing B would be a big win, in my view.</p>",
        "id": 277059011,
        "sender_full_name": "Tim McNamara",
        "timestamp": 1648584780
    },
    {
        "content": "<p>Can we have something like <code>const B: usize = 4096 / mem::size_of::&lt;T&gt;</code> yet?</p>",
        "id": 277066744,
        "sender_full_name": "Tavian Barnes",
        "timestamp": 1648589173
    },
    {
        "content": "<p>are you targeting page size there?</p>",
        "id": 277068227,
        "sender_full_name": "cuviper",
        "timestamp": 1648590092
    },
    {
        "content": "<p>Yeah but that's just a guess, I haven't benchmarked or anything</p>",
        "id": 277070365,
        "sender_full_name": "Tavian Barnes",
        "timestamp": 1648591377
    },
    {
        "content": "<p>ok -- the specific effect of <code>B</code> is more complicated than that, but it could be worth experimenting</p>",
        "id": 277071172,
        "sender_full_name": "cuviper",
        "timestamp": 1648591937
    },
    {
        "content": "<p>yeah back in the day \"8\" or whatever we picked was at least based on some micro-benchmarking. I believe the kinds of conventional logic I applied in my very old article about BTreeMap is... flawed. In particular, we eventually learned that the \"conventional wisdom\" of never using parent pointers in a BTree (because this would require you to access-to-modify the child whenever you move it around) actually turned out to be <em>false</em> in the context of a Not For Actual Filesystems datastructure, because the relative costs of \"touch another node\" and \"maintain a stack of the path you took\" are <em>WAY</em> different</p>",
        "id": 277196796,
        "sender_full_name": "Gankra",
        "timestamp": 1648669700
    }
]