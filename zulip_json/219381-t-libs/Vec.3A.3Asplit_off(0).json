[
    {
        "content": "<p>Would it be worth adding a check to see if the argument to <code>split_off</code> is zero,  something like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">mem</span>::<span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Vec</span>::<span class=\"n\">new</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 209122068,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1599241545
    },
    {
        "content": "<blockquote>\n<p>After the call, the original vector will be left containing the elements [0, at) with its previous capacity unchanged.</p>\n</blockquote>",
        "id": 209123625,
        "sender_full_name": "cuviper",
        "timestamp": 1599242506
    },
    {
        "content": "<p>the capacity being the sticking point there</p>",
        "id": 209123636,
        "sender_full_name": "cuviper",
        "timestamp": 1599242516
    },
    {
        "content": "<p>Fair enough, but that could be addressed by <code>::with_capacity(self.capacity())</code> instead of <code>::new()</code>, right?</p>",
        "id": 209124605,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1599243079
    },
    {
        "content": "<p>it also says \"Returns a newly allocated vector...\", although its somewhat contrived to imagine code relying on that</p>",
        "id": 209144589,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1599256552
    },
    {
        "content": "<p>suppose there are only a few items in your huge buffer, and you intend to split those into a new smaller allocation</p>",
        "id": 209151865,
        "sender_full_name": "cuviper",
        "timestamp": 1599264743
    },
    {
        "content": "<p>you can <code>mem::take(&amp;mut vec)</code> if you don't care about allocations</p>",
        "id": 209152280,
        "sender_full_name": "cuviper",
        "timestamp": 1599265370
    }
]