[
    {
        "content": "<p>so update on the error in core / backtrace in core work</p>",
        "id": 237416072,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1620170678
    },
    {
        "content": "<p>I finally got back to working on the backtrace in core and now have a working proof of concept implementation</p>",
        "id": 237416094,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1620170699
    },
    {
        "content": "<p>right now I'm using weak_lang_items to hook the behavior that's defined in std</p>",
        "id": 237416125,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1620170720
    },
    {
        "content": "<p>and the net effect of this is that <code>no_std</code> binaries must define these lang items now, so some tests are broken, I figure thats okay since this is just a proof of concept</p>",
        "id": 237416165,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1620170753
    },
    {
        "content": "<p>I was hoping to find some way to provide default implementations of these functions in the case where std isn't linked in, but for now I'm not convinced that's the best place to invest my effort</p>",
        "id": 237416236,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1620170789
    },
    {
        "content": "<p>So I'm currently trying to decide what the best next steps are</p>",
        "id": 237416394,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1620170912
    },
    {
        "content": "<p>the big question is should we go ahead and finish stabilizing the changes to the error trait?</p>",
        "id": 237416408,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1620170924
    },
    {
        "content": "<p>my feeling is we shouldn't, I'm relatively confident that the backtrace in core and the inherent method with Box being in std are both non issues</p>",
        "id": 237416438,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1620170955
    },
    {
        "content": "<p>but I'm not 100% confident</p>",
        "id": 237416470,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1620170985
    },
    {
        "content": "<p>Instead I think I should go ahead with just moving the error trait into core, and do the full Backtrace in core implementation, including an RFC</p>",
        "id": 237416545,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1620171011
    },
    {
        "content": "<p>I don't get the impression that it will be a large amount of work</p>",
        "id": 237416603,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1620171044
    },
    {
        "content": "<p>the main issue will be answering the questions about weak lang items and backtrace</p>",
        "id": 237416630,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1620171058
    },
    {
        "content": "<p>I'm not at all super invested into this, but it's exciting nonetheless :)</p>",
        "id": 237424592,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620176171
    },
    {
        "content": "<p>we'll have to be careful this doesn't affect no_std users, even in code size etc.  a lot of no_std users have no use for Backtrace, and care a lot about code size, memory usage, etc.</p>",
        "id": 237475076,
        "sender_full_name": "Mara",
        "timestamp": 1620212019
    },
    {
        "content": "<p>excited to see progress here. will be really nice to have Error in core</p>",
        "id": 237475195,
        "sender_full_name": "Mara",
        "timestamp": 1620212093
    },
    {
        "content": "<p>recent conversation has me wondering if it would be possible to move the error trait into <code>liballoc</code> sooner rather than later, then eventually move it the rest of the way to <code>core</code>.</p>",
        "id": 240123682,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1621897102
    },
    {
        "content": "<p>this would enable <code>anyhow</code> and <code>eyre</code> to provide their full API on <code>no_std</code> + alloc I think</p>",
        "id": 240123710,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1621897143
    },
    {
        "content": "<p>here's the convo for reference: <a href=\"https://github.com/informalsystems/tendermint-rs/issues/669\">https://github.com/informalsystems/tendermint-rs/issues/669</a></p>",
        "id": 240123738,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1621897181
    },
    {
        "content": "<p>has the issue around backtraces proved to be resolvable with less work than the work needed to get it to libcore?</p>\n<p>when i filed <a href=\"https://github.com/rust-lang/rust/issues/62502\">https://github.com/rust-lang/rust/issues/62502</a> a bajillion years ago, that was the issue that closed it</p>",
        "id": 240124295,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1621897508
    },
    {
        "content": "<p>ooh</p>",
        "id": 240126663,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1621899266
    },
    {
        "content": "<p>i already finished the proof of concept for Backtrace in core</p>",
        "id": 240126669,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1621899275
    },
    {
        "content": "<p>its far from approved though, and it affects our no_std binary API (new language items that have to be defined)</p>",
        "id": 240126691,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1621899309
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> no_std binaries are still nightly only. Only no_std libraries are stable IIRC.</p>",
        "id": 240140116,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1621915325
    },
    {
        "content": "<p>Yea, but I expect we may not want to add a bunch of new language items. There are alternative approaches we could still take</p>",
        "id": 240140249,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1621915535
    },
    {
        "content": "<p>So I figure the next step is to write an RFC on the changes to backtrace to get it in core</p>",
        "id": 240140335,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1621915630
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"219696\">XAMPPRocky</span> <a href=\"#narrow/stream/219381-t-libs/topic/error.20in.20core/near/240140116\">said</a>:</p>\n<blockquote>\n<p>no_std binaries are still nightly only. Only no_std libraries are stable IIRC.</p>\n</blockquote>\n<p>breaking no_std binaries would make a lot of people very unhappy though</p>",
        "id": 240151466,
        "sender_full_name": "Mara",
        "timestamp": 1621927723
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"219696\">XAMPPRocky</span> <a href=\"#narrow/stream/219381-t-libs/topic/error.20in.20core/near/240140116\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> no_std binaries are still nightly only. Only no_std libraries are stable IIRC.</p>\n</blockquote>\n<p>A combination of <code>#![no_std]</code>, <code>#![no_main]</code>, <code>#[no_mangle] extern fn main</code> 'works TM' on x86-64-linux stable:<br>\n<a href=\"https://github.com/HeroicKatora/ethox/blob/master/ethox-no-std/main.rs\">https://github.com/HeroicKatora/ethox/blob/master/ethox-no-std/main.rs</a><br>\nIt might technically not be intended to</p>",
        "id": 240168063,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1621938682
    },
    {
        "content": "<p>This is definitely intended, the entire embedded ecosystem relies on this working</p>",
        "id": 240181366,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1621946902
    },
    {
        "content": "<p>(this was stabilized and announced in Rust 1.30.0: <a href=\"https://blog.rust-lang.org/2018/10/25/Rust-1.30.0.html#no_std-applications\">https://blog.rust-lang.org/2018/10/25/Rust-1.30.0.html#no_std-applications</a>)</p>",
        "id": 240181810,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1621947105
    },
    {
        "content": "<p>What’s not stable yet (blocked on <a href=\"https://github.com/rust-lang/rust/issues/66741\">https://github.com/rust-lang/rust/issues/66741</a>) is no_std + alloc applications</p>",
        "id": 240183815,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1621947948
    },
    {
        "content": "<p>Maybe what I’m thinking about is no_std on custom platforms, as what was thinking about specifically was needing to define <code>eh_personality</code> which is not stable.</p>",
        "id": 240213608,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1621959861
    },
    {
        "content": "<p>Yeah, if the issue is breaking things that currently define lang items, that's not an issue as lang items aren't stable.</p>",
        "id": 240219053,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1621962228
    },
    {
        "content": "<p>We definitely shouldn't break <code>no_std</code> applications that build on stable today.</p>",
        "id": 240219131,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1621962247
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"229913\">HeroicKatora</span> <a href=\"#narrow/stream/219381-t-libs/topic/error.20in.20core/near/240168063\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"219696\">XAMPPRocky</span> <a href=\"#narrow/stream/219381-t-libs/topic/error.20in.20core/near/240140116\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> no_std binaries are still nightly only. Only no_std libraries are stable IIRC.</p>\n</blockquote>\n<p>A combination of <code>#![no_std]</code>, <code>#![no_main]</code>, <code>#[no_mangle] extern fn main</code> 'works TM' on x86-64-linux stable:<br>\n<a href=\"https://github.com/HeroicKatora/ethox/blob/master/ethox-no-std/main.rs\">https://github.com/HeroicKatora/ethox/blob/master/ethox-no-std/main.rs</a><br>\nIt might technically not be intended to</p>\n</blockquote>\n<p>does this also need panic=abort to work?</p>",
        "id": 240229926,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1621967069
    },
    {
        "content": "<p>trying to figure out why you don't have to define <code>rust_eh_personality</code> like <span class=\"user-mention\" data-user-id=\"219696\">@XAMPPRocky</span> mentioned</p>",
        "id": 240229954,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1621967090
    },
    {
        "content": "<p>it's looking like the backtrace in core impl, if we were to straight up copy my proof of concept, would break these on stable</p>",
        "id": 240230045,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1621967140
    },
    {
        "content": "<p>I'm hoping there's a way to setup a fall back, so that if these item's aren't set the compiler provides default impls that just no-op whenever the backtrace APIs are called</p>",
        "id": 240230164,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1621967199
    },
    {
        "content": "<p>but I could not figure out how to do that before</p>",
        "id": 240230204,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1621967222
    },
    {
        "content": "<p>alternatively there are other approaches we discussed back in the backtrace stabilization PR / tracking issue iirc</p>",
        "id": 240230234,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1621967238
    },
    {
        "content": "<p>we could just remove <code>Backtrace</code> from <code>Error</code> and focus on generic member access since it provides a superset of the same functionality</p>",
        "id": 240230277,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1621967259
    },
    {
        "content": "<p>and maybe add an extension trait or something that's in the prelude that makes all the old <code>backtrace</code> calls on nightly work via generic member access...</p>",
        "id": 240230356,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1621967290
    },
    {
        "content": "<p>or we could just break them, they are unstable for a reason</p>",
        "id": 240230364,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1621967294
    },
    {
        "content": "<p>alternatively there was the proposal to introduce a <code>Backtrace</code> trait which goes into the Error trait interface instead and is defined in core</p>",
        "id": 240230424,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1621967322
    },
    {
        "content": "<p>the main concern that shot that down last time iirc was API stability on the <code>Backtrace</code> trait</p>",
        "id": 240230452,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1621967343
    },
    {
        "content": "<p>Either way, I think making a decision on Backtrace and moving forward is probably one of the top priority items that we need to resolve next to move forward with getting Error into core</p>",
        "id": 240230687,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1621967431
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> Have you considered or tried making them defined in <code>core</code>? That way it shouldn’t affect <code>#[no_std]</code> and <code>#[no_core]</code> is unstable.</p>",
        "id": 240244041,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1621973687
    },
    {
        "content": "<p>yea, a bit. initially I tried using weak linkage which would let me have a fallback impl of each function implemented locally, then I could check if the symbol was defined, and if I get a null ptr for it I could fall back. The issue though was that weak linkage isn't portable afaik</p>",
        "id": 240244270,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1621973803
    },
    {
        "content": "<p>also I don't think I got it to even work</p>",
        "id": 240244281,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1621973813
    },
    {
        "content": "<p>tho that's probably my fault</p>",
        "id": 240244305,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1621973824
    },
    {
        "content": "<p>as is though I don't see how core could define these, if core already provided the lang item then std wouldn't be able to</p>",
        "id": 240244347,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1621973852
    },
    {
        "content": "<p>and we can't actually move the full impl to core because that's the whole point of this change, its all <code>std</code> specific code that can't live in core</p>",
        "id": 240244406,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1621973883
    }
]