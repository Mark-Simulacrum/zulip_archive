[
    {
        "content": "<p>The whole \"how do I build something on heap without putting it on stack first\" thing <a href=\"https://users.rust-lang.org/t/construct-a-box-i32-32-32-32-without-hitting-stack/71214?u=scottmcm\">came up on URLO</a>.</p>\n<p>It looks like it's been a couple years; could we at least stabilize <code>Box::new_uninit</code> and <code>Box::new_zeroed</code> and <code>Box::assume_init</code>?</p>\n<p>I could make a PR for a subset, if that would help.</p>\n<p>Tracking issue: <a href=\"https://github.com/rust-lang/rust/issues/63291\">https://github.com/rust-lang/rust/issues/63291</a></p>",
        "id": 270531880,
        "sender_full_name": "scottmcm",
        "timestamp": 1643886403
    },
    {
        "content": "<p>A personal clarification: I think the ones for box can and ought to be stabilized; but I don't think the ones for <code>{A,}Rc</code> necessarily should, because the whole non-guaranteed <code>&amp;mut</code> access in there is annoying; I'd personally like to see something like <span class=\"user-mention\" data-user-id=\"132829\">@Christopher Durham</span>'s <a href=\"https://docs.rs/rc-box\">https://docs.rs/rc-box</a> be featured so that we could avoid the <code>rc.get_mut().unwrap()</code> dance before the call to <code>.write()</code>.</p>",
        "id": 270553958,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1643897203
    },
    {
        "content": "<p>I can't find it right now, but there was a PR a while back to add a <code>RcAlloc</code> so you could make <code>Box&lt;T, RcAlloc&gt;</code> and then convert that into <code>Rc&lt;T&gt;</code> without reallocating. (<code>RcAlloc</code> wraps another <code>Alloc</code> and wraps the allocation in the space for <code>RcInner</code>.)<br>\nThinking long-term, that feels like the better solution, as it doesn't require mirroring ~all of the <code>Box</code> APIs into two new types for \"has space for no-realloc recounting\". But it also blocks on alloc/storage APIs, so... though if the intent is primarily to avoid blowing the stack, a copy from <code>Box</code> to <code>Rc</code> isn't going to blow the stack, it'll just be a giant copy.</p>",
        "id": 270554904,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1643897647
    },
    {
        "content": "<p>I am <em>slightly</em> unhappy about the combinations of new methods. <a href=\"https://github.com/rust-lang/wg-allocators/issues/90\">https://github.com/rust-lang/wg-allocators/issues/90</a></p>",
        "id": 270554942,
        "sender_full_name": "The 8472",
        "timestamp": 1643897664
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330154\">The 8472</span> That's a nice suggestion as well, and thus, <em>imho</em>, a quite legitimate argument not to stabilize yet; I haven't read all the comments in the tracking issue, <span class=\"user-mention\" data-user-id=\"330154\">@The 8472</span>: did you mention this builder pattern idea there?</p>",
        "id": 270555367,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1643897881
    },
    {
        "content": "<p>No, I haven't</p>",
        "id": 270555461,
        "sender_full_name": "The 8472",
        "timestamp": 1643897920
    },
    {
        "content": "<p>Found the PR: <a href=\"https://github.com/rust-lang/rust/pull/84338\">https://github.com/rust-lang/rust/pull/84338</a><br>\nIt wasn't landed because it was a significant compile time regression on code using <code>Rc</code> due to LLVM spending more time optimizing.</p>",
        "id": 270555601,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1643897985
    },
    {
        "content": "<p>In <a href=\"https://github.com/rust-lang/rust/issues/87777\">#87777</a> I added <code>try_new_zeroed_slice</code> and <code>try_new_uninit_slice</code> labeled them as #[unstable] issue <a href=\"https://github.com/rust-lang/rust/issues/32838\">#32838</a><br>\nShould they be changed to <a href=\"https://github.com/rust-lang/rust/issues/63291\">#63291</a> too?</p>",
        "id": 270556417,
        "sender_full_name": "The 8472",
        "timestamp": 1643898309
    },
    {
        "content": "<p>Hrm, no, all the <code>try_</code> variants are tracked as <a href=\"https://github.com/rust-lang/rust/issues/32838\">#32838</a>. Still, there's some overlap.</p>",
        "id": 270556798,
        "sender_full_name": "The 8472",
        "timestamp": 1643898451
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330154\">The 8472</span> <a href=\"#narrow/stream/219381-t-libs/topic/Can.20we.20stabilize.20.60Box.3A.3Anew_uninit.60.20.26.20friends.3F/near/270554942\">said</a>:</p>\n<blockquote>\n<p>I am <em>slightly</em> unhappy about the combinations of new methods. <a href=\"https://github.com/rust-lang/wg-allocators/issues/90\">https://github.com/rust-lang/wg-allocators/issues/90</a></p>\n</blockquote>\n<p>I cant help but pattern match combinatorial explosions of methods like this, always feels like a sign that APIs in question are modeling effects</p>",
        "id": 270613356,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643920374
    },
    {
        "content": "<p>I touched on this here <a href=\"https://github.com/rust-lang/rust/pull/93653#issuecomment-1030733043\">https://github.com/rust-lang/rust/pull/93653#issuecomment-1030733043</a> and ended up nominating that PR, but we can shuffle the nomination elsewhere (the PR itself is \"OK\", just worried about letting this continue)</p>",
        "id": 270861309,
        "sender_full_name": "simulacrum",
        "timestamp": 1644112205
    }
]