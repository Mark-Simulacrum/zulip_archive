[
    {
        "content": "<p>Is there any reason this isn't done? Many times I've want to just exit out of a function if an <code>Option</code> is a <code>None</code>. This feels like an intuitive thing to do given that the alternative is to construct a syntactically complex <code>if</code>/<code>let</code>/<code>else</code>/<code>return</code> that breaks up method chaining.</p>",
        "id": 220111236,
        "sender_full_name": "Joshua Barretto",
        "timestamp": 1608123145
    },
    {
        "content": "<p>So you don't want to use <code>?</code> on a unit value, just want to have a unit return be able to convert from an early <code>None</code>.</p>",
        "id": 220136321,
        "sender_full_name": "cuviper",
        "timestamp": 1608135413
    },
    {
        "content": "<p>I think that halfway use is why it's not done. There was a redesign of <code>Try</code> that separated those concepts -- I think it was <span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span>'s <code>Bubble</code></p>",
        "id": 220136544,
        "sender_full_name": "cuviper",
        "timestamp": 1608135512
    },
    {
        "content": "<p>cuviper is correct; today that cannot be done without also allowing <code>()??????????</code> to be legal, which is undesirable.</p>\n<p>I don't know that there's appetite for the asymmetrical case in general, or for <code>None?</code> to work in <code>()</code> specifically.  I think it's likely that at least the answer would be to wait for <code>try{}</code> before adding it -- one could plausibly do something like <code>let _: Option&lt;()&gt; = try { ... function body here ... };</code> to handle the specific case, which would have the nice consequence of emphasizing to the reader how the control flow will work in the block.  (And since it's for the whole method, you can try it with an IIFE for now: <code>(||{ ... function body here ... })();</code>)  In general I like the idea that anything you can produce from a <code>?</code> can be consumed by a <code>?</code>, and that the <code>Ok</code> type is the same in both cases.  The only asymmetric case that seems clearly interesting to me is being able to use <code>?</code> on a <code>Result&lt;T, !&gt;</code> in any method, but I don't know any <code>Try</code> designs that could do that without specialization.</p>\n<p>From a different perspective, I think it's also nicer for the \"you used <code>?</code> in a <code>-&gt; ()</code> function\" to be able to say \"you can't do that with this return type\", than to have to give an error like \"you can only do that on <code>Option</code> in here\" -- I think more often when that's done by mistake people want to change the function to return a <code>Result</code> than to just do <code>.ok()?</code> and ignore the error.</p>\n<p>(Thanks for the ping! Very timely; I've actually just been <a href=\"https://github.com/scottmcm/rust/pull/2\">working on a new <code>Try</code> proposal</a>.  I should go rename one of those traits to <code>Bubble</code> <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span>)</p>",
        "id": 220145257,
        "sender_full_name": "scottmcm",
        "timestamp": 1608139448
    },
    {
        "content": "<blockquote>\n<p>today that cannot be done without also allowing ()?????????? to be legal, which is undesirable</p>\n</blockquote>\n<p>I think that sounds more like a bug in the current design of <code>Try</code> to be honest, but I assume that's one of the motives for your new proposal.</p>",
        "id": 220147660,
        "sender_full_name": "Joshua Barretto",
        "timestamp": 1608140508
    },
    {
        "content": "<p>I don't know that it's necessarily a bug in the design.  From a feature coherence perspective, I think it's reasonable to have the property that if <code>x?</code> is legal, then you can also use <code>try { x? }</code> to get back to <code>x</code>.</p>\n<p>But it's also true that <code>x + y</code> being legal tells you nothing about <code>x - y</code>, so one could also argue that there's no reason to couple things.</p>",
        "id": 220148568,
        "sender_full_name": "scottmcm",
        "timestamp": 1608140905
    },
    {
        "content": "<p>I think the problem here is that, from my perspective, the <code>Try</code> trait defines the relationship between a type and the \"result-like\" that it decays into backwards. Currently you implement <code>Try</code> for the final result-like type, but switching this around (i.e: implementing it for the type that will decay to the result-like type) allows you to prevent the edge case that cuviper mentions.</p>",
        "id": 220251927,
        "sender_full_name": "Joshua Barretto",
        "timestamp": 1608216561
    },
    {
        "content": "<p>Here's an example of something I was imagining. It uses two traits, <code>Decay</code> and <code>Outcome</code>. <code>Decay</code> allows a type to have the <code>?</code> operator used upon it, whereas <code>Outcome</code> allows a type to be used as a target for the <code>?</code> operator (i.e: the result of a function). There are examples at the bottom demonstrating usage (using a macro analogous to the old <code>try</code> macro).</p>\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=65d6c777ac25ec7341e48e4f34f0ec87\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=65d6c777ac25ec7341e48e4f34f0ec87</a></p>\n<p>This setup allows <code>Option</code> to be propagated into a <code>Result&lt;T, ()&gt;</code>, or a <code>()</code>, along with everything that the <code>Try</code> trait allows right now.</p>\n<p>Of course, it's only a quick example so it doesn't include all of the useful extra stuff that <code>Try</code> has right now.</p>\n<p>Together, the traits allow the propagation of arbitrary result-like types in much the same way as <code>Try</code> does now, but also allow types to opt into being propagated on a more precise basis to avoid edge cases like the one cuviper mentions.</p>",
        "id": 220254279,
        "sender_full_name": "Joshua Barretto",
        "timestamp": 1608217711
    },
    {
        "content": "<p>One <em>can</em> certainly separate the introduction and elimination (in the Gentzen sense) of the Result-like type into two different traits.  The question is entirely around whether libs (and maybe lang) wish to allow those interconversions -- it's my current understanding that allowing <code>?</code>-on-<code>Option</code> in a <code>-&gt; Result&lt;_, _&gt;</code> context is <em>not</em> something wanted, rather that it's desired that one uses <code>.ok_or(...)</code> in those situations.</p>",
        "id": 220296088,
        "sender_full_name": "scottmcm",
        "timestamp": 1608236170
    },
    {
        "content": "<p>That specifically only works when the result is <code>Result&lt;_, ()&gt;</code> - at which point there's no functional difference between it and an <code>Option&lt;_&gt;</code> anyway (indeed, clippy will tell you to replace it). If anything, this feels like the correct behaviour.</p>",
        "id": 220302783,
        "sender_full_name": "Joshua Barretto",
        "timestamp": 1608239295
    },
    {
        "content": "<p>Depends whether <code>Result&lt;_, ()&gt;</code> is itself the correct thing to use.  <code>()</code> is not <code>std::error::Error</code>, so it's not obvious that's worth encouraging.  (The current unstable one can convert between <code>Option&lt;T&gt;</code> and <code>Result&lt;T, NoneError&gt;</code>, but even that isn't necessarily wanted and <code>NoneError</code> is not stable to be able to use that.)</p>",
        "id": 220321363,
        "sender_full_name": "scottmcm",
        "timestamp": 1608250230
    },
    {
        "content": "<p>I'm pretty sure I did show a stable way to use <code>NoneError</code> indirectly before, but I don't remember what I did offhand.</p>",
        "id": 220398977,
        "sender_full_name": "cuviper",
        "timestamp": 1608310958
    },
    {
        "content": "<p>As far as I know it can only be used indirectly for the option-&gt;result direction, like this: &lt;<a href=\"https://github.com/scottmcm/rust/blob/do-or-do-not/src/test/ui/try-on-option-in-result-method.rs#L5\">https://github.com/scottmcm/rust/blob/do-or-do-not/src/test/ui/try-on-option-in-result-method.rs#L5</a>&gt;</p>",
        "id": 220413629,
        "sender_full_name": "scottmcm",
        "timestamp": 1608317665
    },
    {
        "content": "<p>yeah, that looks right</p>",
        "id": 220422339,
        "sender_full_name": "cuviper",
        "timestamp": 1608322083
    },
    {
        "content": "<blockquote>\n<p>Depends whether Result&lt;_, ()&gt; is itself the correct thing to use. () is not std::error::Error, so it's not obvious that's worth encouraging</p>\n</blockquote>\n<p>I don't think such a proposal would encourage that. No more than the existing error handling setup does, anyway.</p>",
        "id": 220488510,
        "sender_full_name": "Joshua Barretto",
        "timestamp": 1608413932
    }
]