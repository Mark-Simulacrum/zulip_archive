[
    {
        "content": "<p>sorry, i haven't really done a libstd enhancement proposal before, so i'm not quite sure how this works; has anyone had a chance to look at <a href=\"https://github.com/rust-lang/rust/pull/86412\">https://github.com/rust-lang/rust/pull/86412</a> ? does it need a tracking issue? or maybe other more visible call for feedback?</p>",
        "id": 244363612,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1625011091
    },
    {
        "content": "<p>I just posted a comment to that.</p>",
        "id": 244374058,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1625024124
    },
    {
        "content": "<p>I'd <em>love</em> to see public methods <code>Stdin::locked()</code> and <code>Stdout::locked()</code> and <code>Stderr::locked()</code>. If those came with documentation and tests, I'd r+ those right now.</p>",
        "id": 244374118,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1625024174
    },
    {
        "content": "<p>That doesn't get us all the way to <code>std::io::stdin().lines()</code>, but it'd give us <code>std::io::stdin().locked().lines()</code>, which is slightly longer but more general.</p>",
        "id": 244374136,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1625024207
    },
    {
        "content": "<p>And it also gives us <code>let stdin = std::io::stdin().locked();</code>, which is almost always what I end up wanting.</p>",
        "id": 244374146,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1625024223
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"411291\">@Taylor Yu [they/she]</span> Would you be interested in adding those? I'd be happy to walk you through the process, including the tracking issue.</p>",
        "id": 244374201,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1625024284
    },
    {
        "content": "<p>thanks for the feedback! i commented on the PR, probably at more length than i had intended; sorry about that</p>",
        "id": 244443774,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1625067630
    },
    {
        "content": "<p>new PR: <a href=\"https://github.com/rust-lang/rust/pull/86799\">https://github.com/rust-lang/rust/pull/86799</a> for owned locked stdio handles</p>",
        "id": 244654924,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1625194784
    },
    {
        "content": "<p>Posted a review. Thanks for working on this!</p>",
        "id": 244655749,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1625195932
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> if you have a chance to look at <a href=\"https://github.com/rust-lang/rust/pull/86846\">https://github.com/rust-lang/rust/pull/86846</a> (add tracking issue number to feature gates) and <a href=\"https://github.com/rust-lang/rust/pull/86847\">https://github.com/rust-lang/rust/pull/86847</a> (Stdin forwarders), that would be great!</p>",
        "id": 245699876,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1626102556
    },
    {
        "content": "<p>Just r+ed the former.</p>",
        "id": 245705174,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1626104809
    },
    {
        "content": "<p>if you want me to add a tracking issue for the latter, i can do that and then ping you when i'm done</p>",
        "id": 245705421,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1626104919
    },
    {
        "content": "<p>For the latter, I'm a little torn. On the one hand, I want to make standard input easier to use. On the other hand, now that the new into_locked method exists, people really can just write these as one-liners.</p>",
        "id": 245705538,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1626104970
    },
    {
        "content": "<p>I can understand, though, that the locking <em>concept</em> may be adding complexity. I don't know how much of that is avoidable by just not making someone call a method with lock in the name.</p>",
        "id": 245705762,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1626105051
    },
    {
        "content": "<p>I'm not strongly opposed, but I also wonder how much these forwarders will help, above and beyond <code>into_locked</code>.</p>",
        "id": 245705878,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1626105103
    },
    {
        "content": "<p>we do have precedent in the <code>read_line</code> forwarder, and the implicitly locking <code>Read</code> implementation. and <code>lines</code> is arguably easier to use in some ways than <code>read_line</code></p>",
        "id": 245705929,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1626105121
    },
    {
        "content": "<p>(regardless, I do think those methods should have a separate tracking issue, assuming we add them)</p>",
        "id": 245705974,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1626105126
    },
    {
        "content": "<p>Hmmm, that's a good point...</p>",
        "id": 245706543,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1626105375
    },
    {
        "content": "<p>Alright, given that we already have read_line, I don't see an issue with these. Can you please file a separate library tracking issue (feature gate <code>stdin_forwarders</code> or similar)?</p>",
        "id": 245707271,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1626105646
    },
    {
        "content": "<p>Also, once they're merged, could you please post on the users forum and/or Reddit, trying to get people to try it out, and especially asking for feedback from recent adopters of Rust?</p>",
        "id": 245707542,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1626105749
    },
    {
        "content": "<p>I'll just say that neither of these are methods I'd ever use myself.</p>\n<p>What I want as a user is a way to get it locked as a one-liner, <em>but stop allocating on my behalf so much</em>.</p>",
        "id": 245707622,
        "sender_full_name": "Lokathor",
        "timestamp": 1626105789
    },
    {
        "content": "<p>so <code>lines</code> would be counterproductive for your goals because it does a lot of allocations?</p>",
        "id": 245707720,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1626105836
    },
    {
        "content": "<p>Right, i want the form that takes &amp;mut String and fills it with the message</p>",
        "id": 245707811,
        "sender_full_name": "Lokathor",
        "timestamp": 1626105861
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> so, you would want to call into_locked and then read lines one at a time into the same String buffer?</p>",
        "id": 245707902,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1626105905
    },
    {
        "content": "<p>yes</p>",
        "id": 245707953,
        "sender_full_name": "Lokathor",
        "timestamp": 1626105925
    },
    {
        "content": "<p>That seems like something the optimizer could theoretically do, assuming you stop looking at the previous String by the time you get the next one.</p>",
        "id": 245708031,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1626105961
    },
    {
        "content": "<p>Well I'm sure that a \"sufficiently smart compiler\" can handle it, but I'm also very confident we won't see such a thing for quite some time, if ever</p>",
        "id": 245708243,
        "sender_full_name": "Lokathor",
        "timestamp": 1626106041
    },
    {
        "content": "<p>No argument there.</p>",
        "id": 245708264,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1626106057
    },
    {
        "content": "<p>Also, cc <span class=\"user-mention\" data-user-id=\"220717\">@Bart Massey</span> or <span class=\"user-mention\" data-user-id=\"317761\">@Bart Massey</span> (not sure which one is the right account), who teaches Rust to his students.</p>",
        "id": 245708363,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1626106084
    },
    {
        "content": "<p>Would <code>into_locked</code> and/or <code>lines</code> help your students?</p>",
        "id": 245708506,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1626106137
    },
    {
        "content": "<p>The bigger problem I've had myself, which doesn't get handled by these changes, is that when I'm trying to prompt the user for input and then get a reply back i have to manipulate stdin but <em>also</em> stdout because stdout flushes in line mode by default</p>",
        "id": 245708512,
        "sender_full_name": "Lokathor",
        "timestamp": 1626106140
    },
    {
        "content": "<p>yeah part of why i wanted <code>lines</code> is making a loop prompting for input, but not repeating the code that prints the prompt. otherwise i could <code>for line in io::stdin().lock().lines()</code> and be done with it (because the temporary won't get dropped until the end of the loop body)</p>",
        "id": 245708761,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1626106242
    },
    {
        "content": "<p>So how would you write that now?</p>",
        "id": 245708886,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1626106296
    },
    {
        "content": "<p>My \"quick and dirty\" function for prompt and get input ended up being like this: &lt;<a href=\"https://github.com/Lokathor/stdgame/blob/main/src/main.rs#L10-L25\">https://github.com/Lokathor/stdgame/blob/main/src/main.rs#L10-L25</a>&gt;, though here I'm also returning String still.</p>",
        "id": 245709082,
        "sender_full_name": "Lokathor",
        "timestamp": 1626106354
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">lines</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">io</span>::<span class=\"n\">stdin</span><span class=\"p\">().</span><span class=\"n\">lines</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"c1\">// before, let lines = io::stdin().lock().lines() would get a lifetime error</span>\n<span class=\"k\">loop</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">print!</span><span class=\"p\">(</span><span class=\"s\">\"prompt: \"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">io</span>::<span class=\"n\">stdout</span><span class=\"p\">().</span><span class=\"n\">flush</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">line</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lines</span><span class=\"p\">.</span><span class=\"n\">next</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// do stuff</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 245709226,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1626106433
    },
    {
        "content": "<p>note that print<strong>ln</strong> will flush</p>",
        "id": 245709297,
        "sender_full_name": "Lokathor",
        "timestamp": 1626106454
    },
    {
        "content": "<p>oops, fixed</p>",
        "id": 245709404,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1626106500
    },
    {
        "content": "<p>now what's also unfortunate here is that the lines iterator doesn't work on windows :P</p>",
        "id": 245709650,
        "sender_full_name": "Lokathor",
        "timestamp": 1626106583
    },
    {
        "content": "<p>it doesn't? what goes wrong?</p>",
        "id": 245709678,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1626106601
    },
    {
        "content": "<p>it cuts the <code>\\n</code> but ignores the <code>\\r</code></p>",
        "id": 245709753,
        "sender_full_name": "Lokathor",
        "timestamp": 1626106618
    },
    {
        "content": "<p>so you don't get properly split lines</p>",
        "id": 245709782,
        "sender_full_name": "Lokathor",
        "timestamp": 1626106623
    },
    {
        "content": "<p>it does? <a href=\"https://doc.rust-lang.org/src/std/io/mod.rs.html#2571-2576\">https://doc.rust-lang.org/src/std/io/mod.rs.html#2571-2576</a> seems to show it also trims <code>\\r</code></p>",
        "id": 245711779,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1626107395
    },
    {
        "content": "<p>hmmmm... oh, my mistake, it's <em>only</em> read_line which does this thing: &lt;<a href=\"https://doc.rust-lang.org/std/io/trait.BufRead.html#method.read_line\">https://doc.rust-lang.org/std/io/trait.BufRead.html#method.read_line</a>&gt;</p>",
        "id": 245713641,
        "sender_full_name": "Lokathor",
        "timestamp": 1626108210
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> updated stdin forwarders stuff: <a href=\"https://github.com/rust-lang/rust/pull/86847\">https://github.com/rust-lang/rust/pull/86847</a> <a href=\"https://github.com/rust-lang/rust/issues/87096\">https://github.com/rust-lang/rust/issues/87096</a></p>",
        "id": 245896127,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1626214205
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"411291\">@Taylor Yu [they/she]</span> Stepping away for a bit, but <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span>, thank you for doing that work.</p>",
        "id": 245896194,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1626214253
    },
    {
        "content": "<p>No objections at this time.</p>",
        "id": 245896201,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1626214257
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> does anything else need to be done for <a href=\"https://github.com/rust-lang/rust/pull/86847\">https://github.com/rust-lang/rust/pull/86847</a> ?</p>",
        "id": 246672987,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1626834007
    },
    {
        "content": "<p>Nope. Merging...</p>",
        "id": 246673042,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1626834107
    }
]