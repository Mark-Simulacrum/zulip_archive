[
    {
        "content": "<p>This thread is related to <a href=\"https://github.com/rust-lang/rust/pull/89926\">https://github.com/rust-lang/rust/pull/89926</a> .</p>",
        "id": 265071760,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1639600602
    },
    {
        "content": "<p>/poll How should <code>Instant::duration_since</code> and <code>-</code> on <code>Instant</code>s behave when time appears to go backwards or people pass the <code>Instant</code> arguments in the wrong order?<br>\nAlways saturate and return 0 if the \"later\" time is earlier than the \"earlier\" time.<br>\nPanic if overflow checks are enabled (so by default, saturate in release, panic in debug).<br>\nAdd new codegen flag for this analogous to overflow, saturate in release, enable this flag for panics in debug.<br>\nAdd new codegen flag for this analogous to overflow, saturate in all profiles by default, only panic if people opt-in</p>",
        "id": 265075237,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1639602498
    },
    {
        "content": "<p>/poll Which options would you object to?<br>\nAlways saturate and return 0 if the \"later\" time is earlier than the \"earlier\" time.<br>\nPanic if overflow checks are enabled (so by default, saturate in release, panic in debug).<br>\nAdd new codegen flag for this analogous to overflow, saturate in release, enable this flag for panics in debug.<br>\nAdd new codegen flag for this analogous to overflow, saturate in all profiles by default, only panic if people opt-in</p>",
        "id": 265075313,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1639602556
    },
    {
        "content": "<p>cc <span class=\"user-group-mention\" data-user-group-id=\"4493\">@T-libs</span> <span class=\"user-group-mention\" data-user-group-id=\"2645\">@T-libs-api</span></p>",
        "id": 265075339,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1639602580
    },
    {
        "content": "<p>(did you want non-libs participation, e.g., me?) I think there was discussion indicating no in the meeting, but not sure)</p>",
        "id": 265075536,
        "sender_full_name": "simulacrum",
        "timestamp": 1639602710
    },
    {
        "content": "<p>The votes aren't secret, so they could be tallied for just libs members if needed.</p>",
        "id": 265075680,
        "sender_full_name": "The 8472",
        "timestamp": 1639602777
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"330154\">@The 8472</span> Can you please clarify your objection to the \"add new codegen flag\" option, and why you object to that one but not the other options that can panic? I think I didn't understand your objection in the meeting, and I'd like to.</p>",
        "id": 265075928,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1639602937
    },
    {
        "content": "<p>I generally object to the codegen flags because I think the added complexity to the compiler is not worth it for such a niche issue.</p>",
        "id": 265076186,
        "sender_full_name": "Amanieu",
        "timestamp": 1639603073
    },
    {
        "content": "<p>Well, specifically for the flag that's always disabled doesn't help anyone. The panic is mostly meant to catch misuse and people wouldn't even know that it's something they could turn on for tests. Panic on clocks going backwards... I don't think anyone has  ever asked for it, although I can imagine some highly paranoid use-cases that might want, hypothetically... but still not really a good motivator considering you don't have control about the current situation either.</p>\n<p>And it's also a very specific flag that I don't think it's worth it on its own. This panic <em>should</em> just be another debug_assert. So if there is compiler-work being done then it should be getting debug asserts to work generally, not for this one case.</p>",
        "id": 265076531,
        "sender_full_name": "The 8472",
        "timestamp": 1639603245
    },
    {
        "content": "<p>imo Instant should be deprecated, functionally.</p>",
        "id": 265078618,
        "sender_full_name": "Jubilee",
        "timestamp": 1639604263
    },
    {
        "content": "<p>Discussing adding epicycles to Instant's behavior via compiler flags, et cetera, is a good sign that it's just not the right type.</p>",
        "id": 265078737,
        "sender_full_name": "Jubilee",
        "timestamp": 1639604312
    },
    {
        "content": "<p>That, or we carve it down to a deeply reduced subset of Meaning of what it currently is, and carve out the competing usecases into a new type.<br>\nDuration is probably OK. It's a little oddball but eh.<br>\nI realize this is proposing a lot of churn, and I have definitely accepted that certain things in Rust cannot be fixed because fixing them is seen as not-so-important and would require a v2 of the lang, basically, or at least of std, but getting time right is Slightly Important, and we should aim to have a correct, solid-for-at-least-another-69-years API by <em>checks notes</em> 2038 January 19.</p>",
        "id": 265079890,
        "sender_full_name": "Jubilee",
        "timestamp": 1639604720
    },
    {
        "content": "<p>The obviously <em>correct</em> solution is to make time going backwards an <code>unreachable_unchecked()</code>, after all OS APIs guarantee it therefore it cannot happen.</p>",
        "id": 265080785,
        "sender_full_name": "The 8472",
        "timestamp": 1639605089
    },
    {
        "content": "<p>I stand corrected. By \"correct\" I seem to have meant \"resilient\".</p>",
        "id": 265080965,
        "sender_full_name": "Jubilee",
        "timestamp": 1639605165
    },
    {
        "content": "<p>The main use I have for <code>Instant</code> is something like, \"I want to make sure <em>at least</em> X long of a pause happens before the next loop, so I do an <code>Instant</code> for the before-work and after-work points of a loop and then sleep the difference if there's spare time.\"<br>\nSo in that sort of a context, I don't care about equality or whatever, I just need to know how long to call <code>sleep</code> for.<br>\nThat's why I <em>suspect</em> that \"just saturate the value\" is fine.</p>\n<p>But really, in rust 3.0 let's have Duration just use a signed value already and dispense with this entire pile of fiddly nonsense.</p>",
        "id": 265085605,
        "sender_full_name": "Lokathor",
        "timestamp": 1639607518
    },
    {
        "content": "<p>Why even was Duration unsigned in the first place? Every other good time api I've seen or used has signed values for durations, or allows them.</p>",
        "id": 265087914,
        "sender_full_name": "Connor Horman",
        "timestamp": 1639608907
    },
    {
        "content": "<p>(Disclaimer: \"every other good time api I've seen or used\" is java.time and std::chrono)</p>",
        "id": 265087948,
        "sender_full_name": "Connor Horman",
        "timestamp": 1639608931
    },
    {
        "content": "<p>it's totally unprepared for timey wimey stuff</p>",
        "id": 265088666,
        "sender_full_name": "cuviper",
        "timestamp": 1639609280
    },
    {
        "content": "<p>How many things would break if the underlying type was changed from unsigned to signed-but-x2-the-bytes?</p>",
        "id": 265089549,
        "sender_full_name": "Patrick Poitras",
        "timestamp": 1639609747
    },
    {
        "content": "<p>like a <code>u32</code> to <code>i64</code> type conversion. Other than the speed considerations, though this is probably still much faster than the previous overhead</p>",
        "id": 265089631,
        "sender_full_name": "Patrick Poitras",
        "timestamp": 1639609799
    },
    {
        "content": "<p>The problem is Duration::Zero exists (and could also be constructed) so someone might assume that d &lt; ZERO cannot be true.</p>",
        "id": 265089772,
        "sender_full_name": "The 8472",
        "timestamp": 1639609870
    },
    {
        "content": "<p>I nudged for Duration::ZERO as opposed to ::MIN and \"::MAX is somewhat ambiguous and may change a little\" specifically to allow changing the repr.</p>",
        "id": 265091843,
        "sender_full_name": "Jubilee",
        "timestamp": 1639611072
    },
    {
        "content": "<p>IMO it's fine if a type has a ZERO constant that is not MIN.</p>",
        "id": 265091867,
        "sender_full_name": "Jubilee",
        "timestamp": 1639611100
    },
    {
        "content": "<p>Most of the methods to get usable values out of a <code>Duration</code> are unsigned though (<code>as_{nanos,micros,millis,secs}</code>, ...). What are they supposed to return for negative durations?</p>",
        "id": 265092283,
        "sender_full_name": "Hans Kratz",
        "timestamp": 1639611343
    },
    {
        "content": "<p><code>.unsigned_abs()</code></p>",
        "id": 265092542,
        "sender_full_name": "Jubilee",
        "timestamp": 1639611525
    },
    {
        "content": "<p>That would maintain the status quo, while also adding space for <code>as_signed_nanos</code> (or equivalent formulation)</p>",
        "id": 265092870,
        "sender_full_name": "Patrick Poitras",
        "timestamp": 1639611744
    },
    {
        "content": "<p>This would also allow for two events whose order is undetermined to be processed without causing issues</p>",
        "id": 265093665,
        "sender_full_name": "Patrick Poitras",
        "timestamp": 1639612242
    },
    {
        "content": "<p>we could tuck a sign bit in <code>nanos</code> without increasing the <code>Duration</code> size</p>",
        "id": 265098247,
        "sender_full_name": "cuviper",
        "timestamp": 1639615440
    },
    {
        "content": "<p>(<code>{u64, u32}</code> has padding in 64-bit targets, but not 32-bit, otherwise we could just add a <code>sign: bool</code>)</p>",
        "id": 265098406,
        "sender_full_name": "cuviper",
        "timestamp": 1639615557
    },
    {
        "content": "<p>(probably not a big deal if we just bump to 16-bytes everywhere though)</p>",
        "id": 265098524,
        "sender_full_name": "cuviper",
        "timestamp": 1639615644
    }
]