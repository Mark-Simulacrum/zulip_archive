[
    {
        "content": "<p>If I recall correctly, all this unfortunate business with env lock is related to the fact that Command wants to use a new environment configured for child for PATH lookup.</p>",
        "id": 229219925,
        "sender_full_name": "tm",
        "timestamp": 1615153149
    },
    {
        "content": "<p>but maybe it should just make a copy as suggested earlier</p>",
        "id": 229220049,
        "sender_full_name": "tm",
        "timestamp": 1615153272
    },
    {
        "content": "<p>Is it required to do the PATH-search itself? Couldn't it just fork the child, change the environment as directed in the child, and <em>then</em> do the PATH lookup (or call <code>execvpe</code>)?</p>",
        "id": 229222799,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615155835
    },
    {
        "content": "<p>That wouldn't even require making a copy.</p>",
        "id": 229222874,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615155883
    },
    {
        "content": "<p>Another thread could be changing the environment at that time, which is why I would expect a copy to be necessary.</p>",
        "id": 229222976,
        "sender_full_name": "tm",
        "timestamp": 1615155985
    },
    {
        "content": "<p>Are you concerned about the changes taking effect, or are you concerned about the environment being in an inconsistent state when <code>fork</code> snapshots it for the child?</p>",
        "id": 229223009,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615156059
    },
    {
        "content": "<p>About an inconsistent state.</p>",
        "id": 229223014,
        "sender_full_name": "tm",
        "timestamp": 1615156077
    },
    {
        "content": "<p>I'm assuming you're concerned about another thread using the Rust environment functions, rather than another thread calling <code>setenv</code> directly (since the raw C function isn't necessarily thread-safe in the first place)?</p>",
        "id": 229223196,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615156249
    },
    {
        "content": "<p>(As a side note, glibc's setenv actually does seem to be thread-safe.)</p>",
        "id": 229223436,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615156474
    },
    {
        "content": "<p>Modification through Rust library functions, concurrently from another threads, is what I had in mind, yes.</p>",
        "id": 229224273,
        "sender_full_name": "tm",
        "timestamp": 1615157397
    },
    {
        "content": "<p>I'm currently writing a patch to the exec manpage, because I found a corner case it didn't explain and had to dig into the source code. (Turns out that <code>execvpe</code> searches the caller's <code>PATH</code>, <em>not</em> the path supplied as an argument.)</p>",
        "id": 229224352,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615157443
    },
    {
        "content": "<p>Yeah, that is one of reasons why I find Rust behaviour surprising. Though, if I recall correctly, there are no functions in POSIX that use PATH and custom environment both.</p>",
        "id": 229225077,
        "sender_full_name": "tm",
        "timestamp": 1615158137
    },
    {
        "content": "<p>Yeah, <code>execvpe</code> is apparently an extension.</p>",
        "id": 229225094,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615158162
    },
    {
        "content": "<p>OK. So, one way to solve this would be for Rust to snapshot the Rust environment completely, then fork, then set that environment in the child. That would <em>work</em>, but it seems like an excessive amount of overhead to impose on process spawning.</p>",
        "id": 229225344,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615158436
    },
    {
        "content": "<p>I think I'm going to split discussion of alternative fixes out of this CI-fixing thread.</p>",
        "id": 229225487,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615158590
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"242791\" href=\"/#narrow/stream/242791-t-infra/topic/i686-gnu.20timeouts\">#t-infra &gt; i686-gnu timeouts</a> by <span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span></p>",
        "id": 229225573,
        "sender_full_name": "Notification Bot",
        "timestamp": 1615158636
    },
    {
        "content": "<p>(Context for t-libs: this grew out of the linked discussion about CI failures, which are being fixed for the moment with a revert. This part of the discussion is about whether there's a better long-term fix for environment handling around Command.)</p>",
        "id": 229225644,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615158690
    },
    {
        "content": "<p>In theory, we could take over environment handling ourselves, and point <code>environ</code> to point to memory we own, whenever we want to change the environment. That would mean we know anything <em>other</em> than ourselves will have to change <code>environ</code> if it wants to change the environment in ways that might lead to inconsistency, and we can handle the environment in a safe way where we know \"our\" last environment value, which means we could potentially do an atomic snapshot of <code>environ</code> and then check in the child if that snapshot is still valid. That would have many downsides, though, apart from complexity. Any use of libc to change the environment would result in copying the entire environment, which would add overhead to simple <code>setenv</code> operations from C.</p>",
        "id": 229225897,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615158958
    },
    {
        "content": "<p>Assuming we don't want to do that, which I don't think we do, that means we're stuck with libc's environment handling.</p>",
        "id": 229226074,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615159121
    },
    {
        "content": "<p>If we can address the issue of <code>fork</code>, for everything else we could make our own environment handling more target-aware; specifically, we could know that on glibc targets, glibc's environment handling already does its own internal locking, which means we don't need to do our own. That doesn't address <code>fork</code> though.</p>",
        "id": 229226107,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615159169
    },
    {
        "content": "<p>I think the current approach is not unreasonable.  Just need to change it so it doesn't attempt to unlock the lock after <code>fork</code>. </p>\n<p>Even though glibc may have a lock on <code>setenv</code>, it is still documented as mt-unsafe.  I would be uncomfortable making any assumptions there.</p>\n<p>There was recently a discussion on internals about the mess around <code>setenv</code> here: <a href=\"https://internals.rust-lang.org/t/function-to-hold-lock-on-execution-environment-for-ffi/13702\">https://internals.rust-lang.org/t/function-to-hold-lock-on-execution-environment-for-ffi/13702</a></p>",
        "id": 229228030,
        "sender_full_name": "Eric Huss",
        "timestamp": 1615160983
    },
    {
        "content": "<p>Hmmm. Just not unlocking the lock <em>might</em> be an option, iff it's acceptable to be unable to touch the environment in a <code>before_exec</code>/<code>pre_exec</code> function.</p>",
        "id": 229228402,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615161313
    },
    {
        "content": "<p>That raises another possibility: if we change how we store the lock a little, we could reinitialize the lock immediately after <code>fork</code>.</p>",
        "id": 229228492,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615161376
    },
    {
        "content": "<p>We could make that change, starting with the now-reverted-to-mutex code, and then re-apply the change to switch to an rwlock.</p>",
        "id": 229228571,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615161450
    },
    {
        "content": "<p>Does that seem reasonable? Release the lock in the parent process, reinitialize the lock (without ever touching the original again even to unlock it) in the child?</p>",
        "id": 229228757,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615161611
    },
    {
        "content": "<p>I vaguely remember messing with setenv &amp; fork a while ago. Can't remember the context though.</p>",
        "id": 229235125,
        "sender_full_name": "Amanieu",
        "timestamp": 1615167427
    },
    {
        "content": "<p>Locking in the parent before forking and then unlocking in both the parent and child is generally the correct way to do this.</p>",
        "id": 229235205,
        "sender_full_name": "Amanieu",
        "timestamp": 1615167507
    },
    {
        "content": "<p>You don't need to mess with manually resetting the lock in the child.</p>",
        "id": 229235213,
        "sender_full_name": "Amanieu",
        "timestamp": 1615167531
    },
    {
        "content": "<p>Hmm, actually you might.</p>",
        "id": 229235237,
        "sender_full_name": "Amanieu",
        "timestamp": 1615167553
    },
    {
        "content": "<p>You're not actually allowed to call any pthread functions in the child.</p>",
        "id": 229235255,
        "sender_full_name": "Amanieu",
        "timestamp": 1615167584
    },
    {
        "content": "<p>Yeah, I don't think it's correct to unlock in the child with either kind of mutex.</p>",
        "id": 229259827,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615190149
    },
    {
        "content": "<p>And on top of that, many of the pthread functions (including the mutex functions) aren't async-signal-safe, so they can't be called after fork and before exec.</p>",
        "id": 229259993,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615190254
    },
    {
        "content": "<blockquote>\n<p>iff it's acceptable to be unable to touch the environment in a before_exec/pre_exec function.</p>\n</blockquote>\n<p>is setenv even allowed after fork?</p>",
        "id": 229280299,
        "sender_full_name": "The 8472",
        "timestamp": 1615201093
    },
    {
        "content": "<p>No</p>",
        "id": 229282496,
        "sender_full_name": "Amanieu",
        "timestamp": 1615202206
    },
    {
        "content": "<p>It depends? The single threaded programs would be one of things to consider.</p>",
        "id": 229283172,
        "sender_full_name": "tm",
        "timestamp": 1615202586
    },
    {
        "content": "<blockquote>\n<p>After a fork() in a multithreaded program, the child can safely call only async-signal-safe functions (see signal-safety(7)) until such time as it calls execve(2).</p>\n</blockquote>",
        "id": 229288188,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1615205357
    },
    {
        "content": "<p>Many, <em>many</em> programs do setenv after fork and before exec, to set up the child's environment. But yeah, in theory any such program that's multithreaded <em>could</em> fail if another thread happened to be in the midst of a setenv, or for that matter a malloc if setenv wants to change the allocation...</p>",
        "id": 229345496,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615226554
    },
    {
        "content": "<p>Ah, I see; in Rust, the child process just sets <code>environ</code>, it doesn't call setenv.</p>",
        "id": 229346165,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615226826
    },
    {
        "content": "<p>That can be done without a race.</p>",
        "id": 229346190,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615226836
    },
    {
        "content": "<p>OK, perhaps we <em>do</em> need to just copy the environment (if we need to change it). And prepare the changed environment in the parent, too, since we can't malloc. And then document that pre_exec functions can't affect the environment...</p>",
        "id": 229346451,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615226942
    },
    {
        "content": "<p>I posted a complete summary to <a href=\"https://github.com/rust-lang/rust/issues/64718#issuecomment-793030479\">https://github.com/rust-lang/rust/issues/64718#issuecomment-793030479</a> . Gah, this is a mess.</p>",
        "id": 229363844,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615233290
    },
    {
        "content": "<p><code>posix_spawnp</code> is never used when PATH had been modified and lookup is required.</p>",
        "id": 229366036,
        "sender_full_name": "tm",
        "timestamp": 1615234238
    },
    {
        "content": "<p>Another thing that came up in previous attempts to implement path search on Rust side, was that there are platform specific defaults when PATH is unset.</p>",
        "id": 229366619,
        "sender_full_name": "tm",
        "timestamp": 1615234487
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"352985\">tm</span> <a href=\"#narrow/stream/219381-t-libs/topic/environment.2C.20locking.2C.20fork.2C.20and.20Command/near/229366036\">said</a>:</p>\n<blockquote>\n<p><code>posix_spawnp</code> is never used when PATH had been modified and lookup is required.</p>\n</blockquote>\n<p>Ah, I didn't catch that. But if we have our own <code>PATH</code> search code, we could drop all that logic and call <code>posix_spawn</code> in more cases.</p>",
        "id": 229371412,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615236691
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"352985\">tm</span> <a href=\"#narrow/stream/219381-t-libs/topic/environment.2C.20locking.2C.20fork.2C.20and.20Command/near/229366619\">said</a>:</p>\n<blockquote>\n<p>Another thing that came up in previous attempts to implement path search on Rust side, was that there are platform specific defaults when PATH is unset.</p>\n</blockquote>\n<p>I'm aware, but I think we might still be able to fix that. (Worst case, we might have to propagate those defaults, but I suspect in practice it might be viable to ignore those for consistency.)</p>",
        "id": 229371663,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615236793
    },
    {
        "content": "<p>PR for the first two points of your summary. <a href=\"https://github.com/rust-lang/rust/issues/82949\">#82949</a></p>",
        "id": 229551197,
        "sender_full_name": "The 8472",
        "timestamp": 1615322991
    },
    {
        "content": "<p>Thanks! Reviewed and responded.</p>",
        "id": 229554996,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615324387
    },
    {
        "content": "<p>The 3rd (and maybe also 4th) points seem exactly what <a href=\"https://github.com/rust-lang/rust/issues/55359\">#55359</a> <a href=\"https://github.com/rust-lang/rust/issues/64718#issuecomment-692158468\">did</a>.</p>",
        "id": 229641382,
        "sender_full_name": "hyd-dev",
        "timestamp": 1615375935
    }
]