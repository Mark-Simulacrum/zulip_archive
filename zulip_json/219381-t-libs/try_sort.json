[
    {
        "content": "<p>It seems there aren't any good methods for fallible sorting, with two (to me) compelling use-cases:</p>\n<ul>\n<li>PartialOrd where you want to bail out early on, EG, NaN-like values with an <code>Err()</code> or <code>None</code></li>\n<li>Values that rely on some external information which may or may not itself be present</li>\n</ul>\n<p>It seems there should be some kind of <code>try_sort_by&lt;R: Try&lt;Ok = Ordering&gt;, F: FnMut(&amp;T, &amp;T) -&gt; R&gt;(&amp;mut self, compare: F) -&gt; Option&lt;R::Error&gt;</code> (and similar <code>try_sort_by_key</code>, <code>try_sort_unstable*</code>). Would implementations of these functions have a chance of landing as an unstable API?</p>",
        "id": 226691220,
        "sender_full_name": "CraftSpider",
        "timestamp": 1613582031
    },
    {
        "content": "<p>what state would it leave the input if it failed?</p>",
        "id": 226691363,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1613582082
    },
    {
        "content": "<p>That's the biggest question. Current sort and sort_unstable functions just say that if the ordering isn't total, the result is undefined. I think 'unchanged' is impractical, so I think 'undefined' is also fine here</p>",
        "id": 226691644,
        "sender_full_name": "CraftSpider",
        "timestamp": 1613582195
    },
    {
        "content": "<p>The result after a failed sort should still be usable, but not meaningfully sorted</p>",
        "id": 226691730,
        "sender_full_name": "CraftSpider",
        "timestamp": 1613582229
    },
    {
        "content": "<p>Given that it's safe and the available bounds, I think the only practical implementation would be \"it's some permutation of the original\".</p>",
        "id": 226691771,
        "sender_full_name": "scottmcm",
        "timestamp": 1613582248
    },
    {
        "content": "<p>One of the problems with adding another dimension here is that it's at least 6 more methods.</p>",
        "id": 226691952,
        "sender_full_name": "scottmcm",
        "timestamp": 1613582316
    },
    {
        "content": "<p>it would be arguably worth it for float sorting, although i suspect the performance would be hard to make as good...</p>",
        "id": 226692085,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1613582384
    },
    {
        "content": "<p>Does this really need fallible comparators?  It seems like threading that all the way through the implementation would be a pain, and could have strange effects on the codegen and thus perf.</p>",
        "id": 226692103,
        "sender_full_name": "scottmcm",
        "timestamp": 1613582395
    },
    {
        "content": "<p>5, I think. <code>sort_by</code>, <code>sort_by_key</code>, <code>sort_by_cached_key</code>, then the first two again as unstable</p>",
        "id": 226692111,
        "sender_full_name": "CraftSpider",
        "timestamp": 1613582399
    },
    {
        "content": "<p>Note that for float sorting there's <code>f32::total_cmp</code>, which works great for sorting.</p>",
        "id": 226692198,
        "sender_full_name": "scottmcm",
        "timestamp": 1613582423
    },
    {
        "content": "<p>yeah</p>",
        "id": 226692288,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1613582466
    },
    {
        "content": "<p>if that ever stabilizes...</p>",
        "id": 226692304,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1613582472
    },
    {
        "content": "<p>The thing I was pondering, for your proposal, is whether for the \"external information\" one that ever makes sense for anything <em>but</em> <code>_by_cached_key</code>.</p>",
        "id": 226693143,
        "sender_full_name": "scottmcm",
        "timestamp": 1613582817
    },
    {
        "content": "<p>Fair. This was more inspired by cases for user-defined types, and my second bullet-point where the issue isn't as much the ordering of the values, but that the sort itself may fail. Which then begs a performance question, but I think computing-as-you-go for EG filesystem access is no less efficient than pre-computing, and much nicer to read.</p>",
        "id": 226693173,
        "sender_full_name": "CraftSpider",
        "timestamp": 1613582827
    },
    {
        "content": "<p>And hm, yeah. For what I just said, you would <em>always</em> want to cache the key performance wise, unless you were somehow worried about it changing mid-sort? Which would probably be more an issue with design at that point</p>",
        "id": 226693240,
        "sender_full_name": "CraftSpider",
        "timestamp": 1613582865
    },
    {
        "content": "<p>You arguably can't even change the key mid-sort, because that would almost certainly violate transitivity.</p>",
        "id": 226693338,
        "sender_full_name": "scottmcm",
        "timestamp": 1613582897
    },
    {
        "content": "<p>So I was thinking along the lines of \"what if there was just <code>sort_by_fallible_key</code>?\"</p>",
        "id": 226693375,
        "sender_full_name": "scottmcm",
        "timestamp": 1613582918
    },
    {
        "content": "<p>Yeah. So only allowing caching would prevent an easy to make data race error</p>",
        "id": 226693416,
        "sender_full_name": "CraftSpider",
        "timestamp": 1613582938
    },
    {
        "content": "<p>Where the key function is <code>&amp;T -&gt; Result&lt;K, E&gt;</code>.</p>",
        "id": 226693425,
        "sender_full_name": "scottmcm",
        "timestamp": 1613582941
    },
    {
        "content": "<p>Then <code>sort_by_fallible_key</code> is <code>-&gt; Result&lt;(), E&gt;</code>, and leave it unpermuted if any of the key extractors fail.</p>",
        "id": 226693496,
        "sender_full_name": "scottmcm",
        "timestamp": 1613582977
    },
    {
        "content": "<p>Hm, could work. I like the genericity of the original, but this would probably be nicer on codegen and allow that invariant</p>",
        "id": 226693766,
        "sender_full_name": "CraftSpider",
        "timestamp": 1613583078
    },
    {
        "content": "<p>there are a lot of cases where you can't use <code>sort_by.*_key</code> where you could use <code>sort_by</code>, also i think the \"external information\" case is probably not the most common, and it seems unfortunate to force the inefficiency of precomputing on them</p>",
        "id": 226693791,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1613583084
    },
    {
        "content": "<p>And it's only one new method, not 6+.  And it doesn't require touching the internals of the sorting algorithms.</p>",
        "id": 226693969,
        "sender_full_name": "scottmcm",
        "timestamp": 1613583147
    },
    {
        "content": "<p>Hmm. I kind of agree with Thom, but I'm trying to consider how to allow both the likely more common and the less, without API bloat. I think 2 methods might be okay, but it would be weird for them to look symmetric but have wildly different signatures/invariants</p>",
        "id": 226694502,
        "sender_full_name": "CraftSpider",
        "timestamp": 1613583356
    },
    {
        "content": "<p><code>try_sort_by</code> and <code>sort_fallible_key</code> wouldn't look symmetric, it might raise \"why not the rest of the sort methods\", but it at least covers the two cases. Regains the sorting internals issue though</p>",
        "id": 226694945,
        "sender_full_name": "CraftSpider",
        "timestamp": 1613583504
    },
    {
        "content": "<p>I'll probably think on it some more. Might open a PR if you think any variant of this API might be worth adding, and do more bikeshedding once the implementation costs are clearer?</p>",
        "id": 226695260,
        "sender_full_name": "CraftSpider",
        "timestamp": 1613583602
    }
]