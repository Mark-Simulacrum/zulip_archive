[
    {
        "content": "<p>Since now we can have macros living inside modules instead of the root of std/core, example being <code>ptr::addr_of</code>, I propose moving other macros.</p>\n<p>This shouldn't be a breaking change, because they still can be exposed via prelude.</p>\n<ul>\n<li><code>asm!</code>/<code>llvm_asm!</code>/<code>global_asm!</code> - someone proposed to put them inside <code>core::arch::$ARCH</code></li>\n<li><code>is_$ARCH_feature_detected!</code> -&gt; <code>std::arch::$ARCH::is_feature_detected</code></li>\n<li><code>env!</code>/<code>option_env!</code> -&gt; <code>std::env</code></li>\n<li><code>print!</code> family -&gt; <code>std::io</code></li>\n<li><code>write!</code> family -&gt; <code>core::fmt</code> or <code>core::io</code></li>\n<li><code>format!</code> -&gt; <code>std::fmt</code> (it kinda conflicts with current <code>std::fmt::format</code> function)</li>\n<li><code>format_args!</code> -&gt; <code>core::fmt</code></li>\n<li><code>panic!</code> -&gt; <code>core::panic</code></li>\n<li><code>thread_local!</code> -&gt; <code>std::thread::thread_local</code></li>\n<li><code>todo!</code>/<code>unimplemented!</code>/<code>unreachable!</code> -&gt; <code>core::hint</code></li>\n<li><code>vec!</code> -&gt; <code>std::vec</code></li>\n</ul>",
        "id": 239857772,
        "sender_full_name": "Soveu",
        "timestamp": 1621673555
    },
    {
        "content": "<p>you can currently call them like <code>std::env!(\"...\")</code>, which would break if they were moved</p>",
        "id": 239874550,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1621691932
    },
    {
        "content": "<p>We could absolutely move them, as long as we keep them callable at the top level and in the prelude. That may or may not have value.</p>",
        "id": 239888513,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1621705435
    },
    {
        "content": "<p>Yes, you could move them in the same way that any other item gets \"moved\", by leaving a shim in the old location that passes through to the new location.</p>",
        "id": 239889011,
        "sender_full_name": "bstrie",
        "timestamp": 1621705959
    },
    {
        "content": "<p>An argument that I like for moving them is that it makes the docs more intuitive; I would expect the <code>println!</code> docs to live in <code>std::io</code>, not in the crate root. The converse is also true: if I'm looking at the API index as represented by the crate root, I likely don't want to be shown this great big grab bag of random macros.</p>",
        "id": 239889087,
        "sender_full_name": "bstrie",
        "timestamp": 1621706051
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256342\">bstrie</span> <a href=\"#narrow/stream/219381-t-libs/topic/Put.20macros.20inside.20appropriate.20modules/near/239889087\">said</a>:</p>\n<blockquote>\n<p>I likely don't want to be shown this great big grab bag of random macros.</p>\n</blockquote>\n<p>yeah this is one of the benefits i look forward to the most.</p>\n<p>otherwise, having macros in their corresponding modules sounds like a good idea to me. i think we should be careful with churn (as always), but otherwise think it's the right direction to move in.</p>",
        "id": 239890998,
        "sender_full_name": "BurntSushi",
        "timestamp": 1621708050
    },
    {
        "content": "<p>heck, I might just submit a PR for that this weekend. not all the prelude macros necessarily <em>have</em> good modules to live in, so I'll ignore those for now to avoid bikeshedding, but it seems reasonable to start with the macros with \"obvious\" places to live and leave the rest to an RFC</p>",
        "id": 239892421,
        "sender_full_name": "bstrie",
        "timestamp": 1621709474
    },
    {
        "content": "<p>Please skip <code>asm!</code>. The placement of that one has been through a lot of bikeshed already.</p>",
        "id": 239939653,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1621764290
    },
    {
        "content": "<p><code>env!</code> should be renamed <code>var!</code> if it’s exported under <code>std::env</code> to reduce the repetitiveness IMO. <code>env!</code> made sense when called with no prefix.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">std</span>::<span class=\"n\">env</span>::<span class=\"fm\">env!</span><span class=\"p\">(</span><span class=\"s\">\"foo\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">std</span>::<span class=\"n\">env</span>::<span class=\"n\">var</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"foo\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"n\">std</span>::<span class=\"n\">env</span>::<span class=\"fm\">option_env!</span><span class=\"p\">(</span><span class=\"s\">\"foo\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">std</span>::<span class=\"n\">env</span>::<span class=\"n\">option_var</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"foo\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 239945850,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1621771085
    },
    {
        "content": "<p><code>std::env::var!</code> is potentially confusing with <code>std::env::var</code>. At least, imo, it might cause some confusion.</p>",
        "id": 239946246,
        "sender_full_name": "Connor Horman",
        "timestamp": 1621771486
    },
    {
        "content": "<p>yes, I won't be touching asm!. The goal is to make this PR as non-contentious as possible.</p>",
        "id": 239954710,
        "sender_full_name": "bstrie",
        "timestamp": 1621779827
    },
    {
        "content": "<p>Note that all of these macros will still be exported from the prelude, as required by backwards-compatibility, so I'm not too worried about <code>std::env::env!</code>, since people will still be using it as <code>env!</code></p>",
        "id": 239954788,
        "sender_full_name": "bstrie",
        "timestamp": 1621779890
    },
    {
        "content": "<p>I’m mildly opposed to having <code>env!</code> and <code>option_env!</code> in <code>std::env</code>. The module is documented as \"Inspection and manipulation of the process’s environment.\" <strong>The</strong> process is implicitly the run-time process executing the code being compiled, whereas <code>env!</code> and <code>option_env!</code> access variables of the environment the compiler is running in.</p>",
        "id": 239954939,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1621780039
    },
    {
        "content": "<p>that sounds like contention, so I won't move them :P</p>",
        "id": 239955043,
        "sender_full_name": "bstrie",
        "timestamp": 1621780149
    },
    {
        "content": "<p>if nothing else this will reveal how many macros have corresponding, non-contentious modules :)</p>",
        "id": 239955196,
        "sender_full_name": "bstrie",
        "timestamp": 1621780288
    },
    {
        "content": "<p>of course, one could argue that if macro namespacing had been in the language since 1.0 then people would have put <code>env!</code> in <code>std::env</code> anyway, but I'll leave that to a future RFC</p>",
        "id": 239955255,
        "sender_full_name": "bstrie",
        "timestamp": 1621780327
    },
    {
        "content": "<p>even if we'd had macro namespacing from the start, it would still be something like <code>core::compile_time::env!</code>, since that's what the macro is actually about.</p>",
        "id": 239981792,
        "sender_full_name": "Lokathor",
        "timestamp": 1621808023
    },
    {
        "content": "<p>and maybe <code>core::compile_time::concat!</code> and <code>core::compile_time::include_bytes!</code> and friends?</p>",
        "id": 239984924,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621811477
    },
    {
        "content": "<p>a lot of the macros really want to live in a hypothetical <code>compile_time</code> (or maybe <code>meta</code>?) module, purely due to the nature of what macros get used for due to when they run compared to regular functions. that said, <code>concat</code> and <code>include_bytes</code> could live in <code>std::str</code> and <code>std::array</code>. I don't intend to touch those for now, my first PR is just going to be for the <code>std::io</code> macros.</p>",
        "id": 239987234,
        "sender_full_name": "bstrie",
        "timestamp": 1621814122
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256342\">@bstrie</span> <code>std::str::concat!</code> seems sensible to me.</p>",
        "id": 240001550,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1621829073
    },
    {
        "content": "<p>And then <code>concat_bytes</code> and <code>include_bytes</code> can live somewhere appropriate for slice-y things.</p>",
        "id": 240001556,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1621829092
    },
    {
        "content": "<p>I mean would think the fact that it’s a macro would intuit that something is happening at compile-time, as these macros are no different from proc macros in third party crates these days.</p>",
        "id": 240004521,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1621831432
    },
    {
        "content": "<p>Maybe. A proc-macro can expand to code that does something at runtime, in the same way that <code>println!</code> does not make the compiler print something</p>",
        "id": 240027925,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1621849183
    },
    {
        "content": "<blockquote>\n<p>I might just submit a PR for that this weekend</p>\n</blockquote>\n<p>i'd really prefer to see a RFC first before starting to move all these things around. we should first make sure the eventual goal is clear and agreeable</p>",
        "id": 240036372,
        "sender_full_name": "Mara",
        "timestamp": 1621854516
    },
    {
        "content": "<p>I'm happy to author an RFC, but IMO the parts that need discussion are the means, not the goals. It goes without saying that items in the stdlib ought to be defined in submodules (even items that have always been exported from the prelude, like <code>Option</code>), and that the current un-namespaced state of macros in std is an artifact of technical limitations as of Rust 1.0 (similar to how <code>std::i32::MAX</code> was a merely an artifact of the lack of associated consts until Rust 1.1). Furthermore, past discussions have indicated that future macro additions should be namespaced (<code>std::task::ready</code>, <code>std::ptr::addr_of</code>), so the use of namespacing on macros is not contentious. The goals are given above: in a concrete sense to improve the documentation, in an abstract sense to make the stdlib more intuitive. What needs to be discussed is where things ought to live, but not all macros need that discussion; I find it safe to presume that people will concur that <code>println!</code> should go in <code>std::io</code>.</p>",
        "id": 240092279,
        "sender_full_name": "bstrie",
        "timestamp": 1621881293
    },
    {
        "content": "<p>It still seems like a large enough change to warrant an RFC</p>",
        "id": 240092435,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1621881354
    },
    {
        "content": "<p>In any case I'm putting aside that PR for now, because there's a more fundamental prerequisite: macro definitions need to be migrated from macros 1.0 to macros 2.0 if they ever want to be namespaced. I'll start there, since I'm not even sure how mature the macros 2.0 implementation is right now (it gets used a lot, but largely for builtins).</p>",
        "id": 240092558,
        "sender_full_name": "bstrie",
        "timestamp": 1621881405
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"209168\">Thom Chiovoloni</span> <a href=\"#narrow/stream/219381-t-libs/topic/Put.20macros.20inside.20appropriate.20modules/near/240092435\">said</a>:</p>\n<blockquote>\n<p>It still seems like a large enough change to warrant an RFC</p>\n</blockquote>\n<p>For the large majority of the macros, I agree. For the specific case of <code>std::io::println!</code> I would suggest otherwise, and that if people can't even agree on such a small change as that then I would be rather dim on the prospects of the broader RFC. Or to put it another way, if people aren't keen on <code>std::io::println!</code>, then I don't see how I'd possibly persuade them by offering to move even <em>more</em> macros. :P</p>",
        "id": 240093124,
        "sender_full_name": "bstrie",
        "timestamp": 1621881651
    },
    {
        "content": "<p>(and before I go trying to move the stdlib to macros 2.0 I'll start by moving the compiler to macros 2.0; dogfooding and all that :P )</p>",
        "id": 240094782,
        "sender_full_name": "bstrie",
        "timestamp": 1621882399
    },
    {
        "content": "<blockquote>\n<p>It goes without saying [..]</p>\n</blockquote>\n<p>that's a big assumption. regardless, we should discuss changes like that on an rfc, even if they are uncontroversial. we should have an overview of such changes together with all the relevant context and pros and cons</p>\n<blockquote>\n<p>if people can't even agree on such a small change as that then</p>\n</blockquote>\n<p>this confuses me. asking for an RFC isn't disagreeing. it means \"yes, sounds good. let's discuss this.\"</p>",
        "id": 240100735,
        "sender_full_name": "Mara",
        "timestamp": 1621884921
    },
    {
        "content": "<p>A large value of the RFC, even if we all immediately agree on all points, is that RFCs get much more publicity within the wider rust world than any PR.</p>",
        "id": 240201475,
        "sender_full_name": "Lokathor",
        "timestamp": 1621955124
    },
    {
        "content": "<p>I wonder if it would be in-scope for the RFC to discuss namespacing <em>attributes</em> as well, since 1) they're already defined as proc macros in the stdlib (although often just as builtins) and 2) I'm always annoyed that I have to look in the reference for their documentation rather than the API docs. There could be <code>std::hint::inline</code>, <code>std::mem::repr</code>, <code>std::panic::panic_handler</code>, etc. But maybe other people think of these as language features rather than library features.</p>",
        "id": 240210998,
        "sender_full_name": "bstrie",
        "timestamp": 1621958696
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256342\">@bstrie</span> FWIW I think they should, all macros or macro-like builtin should be at least considered.</p>",
        "id": 240214106,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1621960076
    },
    {
        "content": "<p>I do think of most attributes as being language features rather than proc-macros, particularly the ones you couldn't implement yourself within a crate not part of the standard library.</p>",
        "id": 240217267,
        "sender_full_name": "Lokathor",
        "timestamp": 1621961418
    },
    {
        "content": "<p>That's a good point, although there are also non-macros that couldn't be defined apart from the stdlib; consider the <code>Copy</code> trait. And interestingly the <code>Copy</code> derive macro is already namespaced in <code>std::marker</code>. The nature of the stdlib kind of makes the line between language and library fuzzy.</p>",
        "id": 240219510,
        "sender_full_name": "bstrie",
        "timestamp": 1621962428
    },
    {
        "content": "<p>Copy is marked as <code>lang</code> in the source ;3</p>",
        "id": 240220013,
        "sender_full_name": "Lokathor",
        "timestamp": 1621962688
    },
    {
        "content": "<p>indeed, but I find the distinction between lang items, builtins, and intrinsics to be semi-arbitrary :)</p>",
        "id": 240220402,
        "sender_full_name": "bstrie",
        "timestamp": 1621962846
    },
    {
        "content": "<p>I think, if we could organize it from scratch, then <code>core::lang</code> would just be the home of all the lang item things all at once. Also <code>alloc::lang</code> for Box, and maybe <code>std::lang</code> if necessary (I dunno if there's std-only lang items)</p>\n<p>But that's not the world we live in, so whatever. Getting macros out of the crate root is of some mild value, but we don't need to worry about absolutely perfect, just avoid deceptive paths</p>",
        "id": 240220457,
        "sender_full_name": "Lokathor",
        "timestamp": 1621962874
    },
    {
        "content": "<p>to be clear, while I do like the \"niceness\" of having things live in their proper place, I think most of the concrete benefit here would be in putting docs in places where users are likely to look for them</p>",
        "id": 240220587,
        "sender_full_name": "bstrie",
        "timestamp": 1621962960
    },
    {
        "content": "<p>oh i essentially never look for items in modules. Search is too good for that</p>",
        "id": 240221222,
        "sender_full_name": "Lokathor",
        "timestamp": 1621963240
    },
    {
        "content": "<p>search works when you know what you're looking for, but it's not useful for organic discovery. For example I would like people to organically learn about the existence <code>writeln!</code> merely by scanning the <code>std::io</code> docs.</p>",
        "id": 240221613,
        "sender_full_name": "bstrie",
        "timestamp": 1621963428
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256342\">@bstrie</span> I do think that's a good argument.</p>",
        "id": 240222871,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1621963956
    },
    {
        "content": "<p>In particular, if there's somewhere that module docs already say \"also see this macro\", that's a good hint for where the macro belongs.</p>",
        "id": 240222942,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1621963988
    },
    {
        "content": "<p><code>format!</code> and <code>format_args!</code> and similar probably belong in <code>std::fmt</code> for instance.</p>",
        "id": 240223365,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1621964160
    },
    {
        "content": "<p>format_args maybe, but format is defined in alloc and used to make String values, so it feels like it should live wherever you find the String type (in alloc, or re-exported in std)</p>",
        "id": 240261920,
        "sender_full_name": "Lokathor",
        "timestamp": 1621984384
    },
    {
        "content": "<p>This is why we have an <code>alloc::fmt</code> module which reexports the contents of <code>core::fmt</code>, instead of itself being a reexport</p>",
        "id": 240287962,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1622014213
    },
    {
        "content": "<p>We already have <code>std::fmt::format</code> for converting <code>Arguments</code> to a <code>String</code> so it makes sense for <code>std::fmt::format!</code> to be there too.</p>",
        "id": 240379697,
        "sender_full_name": "Kestrer",
        "timestamp": 1622058063
    }
]