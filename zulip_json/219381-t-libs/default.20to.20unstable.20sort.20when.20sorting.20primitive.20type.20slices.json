[
    {
        "content": "<p>leonardo-m had the idea here: <a href=\"https://github.com/rust-lang/rust/pull/76541#issuecomment-689852777\">https://github.com/rust-lang/rust/pull/76541#issuecomment-689852777</a></p>\n<p>Could we add a custom  slice sort impl for slices of primitive types which uses <code>sort::quicksort</code> (what <code>.unstable_sort()</code> uses) instead of <code>merge_sort</code> (what stable <code>.sort()</code> uses)?</p>\n<p>Using unstable sort should have more performance and if we have slices of primitives like <code>u8</code>, it does not matter which 1 comes first in <code>[1, 1, 2, 3]</code> (we don't need to retain original order since there is no extra data but that primitive value).</p>",
        "id": 209610962,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1599727949
    },
    {
        "content": "<p>As we already have <code>unstable_sort</code>, defaulting it to <code>sort</code> may be surprising. If people already specified <code>unstable_sort</code> but they get <code>sort</code>, usually one would feel surprised. I don't know if this is a good idea unless it's always faster and better.</p>",
        "id": 209672310,
        "sender_full_name": "pickfire",
        "timestamp": 1599755184
    },
    {
        "content": "<p>But say if we only have <code>sort</code> but no <code>unstable_sort</code> then this would be a good idea since we can just do the optimization on the underlying layer probably without any breaking changes or impact on users.</p>",
        "id": 209672488,
        "sender_full_name": "pickfire",
        "timestamp": 1599755264
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"225422\">@pickfire</span> Maybe I'm misreading what you said, but this is about switching sort() to unstable_sort() not the other way around.</p>",
        "id": 209672510,
        "sender_full_name": "simulacrum",
        "timestamp": 1599755269
    },
    {
        "content": "<p>It would ~never make sense to pay the price of sort() for unstable_sort(), I expect.</p>",
        "id": 209672582,
        "sender_full_name": "simulacrum",
        "timestamp": 1599755286
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> So you mean when users do <code>sort</code> on primitive slices, they get <code>unstable_sort</code> instead?</p>",
        "id": 209672807,
        "sender_full_name": "pickfire",
        "timestamp": 1599755387
    },
    {
        "content": "<p>Yes.</p>",
        "id": 209672815,
        "sender_full_name": "simulacrum",
        "timestamp": 1599755393
    },
    {
        "content": "<p>But wouldn't <code>unstable_sort</code> still be available?</p>",
        "id": 209672857,
        "sender_full_name": "pickfire",
        "timestamp": 1599755402
    },
    {
        "content": "<p>unstable_sort is available, but you may not know if you can use it in a generic context, for one thing. This is just an optimization, could really be done for any type with structural equality probably?</p>",
        "id": 209672961,
        "sender_full_name": "simulacrum",
        "timestamp": 1599755447
    },
    {
        "content": "<p>But what if users really want <code>sort</code> but not <code>unstable_sort</code>?</p>",
        "id": 209673018,
        "sender_full_name": "pickfire",
        "timestamp": 1599755469
    },
    {
        "content": "<p>...why would they? And how can they tell the difference?</p>",
        "id": 209673379,
        "sender_full_name": "simulacrum",
        "timestamp": 1599755603
    },
    {
        "content": "<p>Ah, if I am not mistaken so <code>sort</code> is the exact equivalent as <code>sort_unstable</code> for primitives types (likely those that implements <code>Copy</code>) except being slower? Am I correct?</p>",
        "id": 209673383,
        "sender_full_name": "pickfire",
        "timestamp": 1599755605
    },
    {
        "content": "<p>For all types with structural equality and comparison operations</p>",
        "id": 209673565,
        "sender_full_name": "simulacrum",
        "timestamp": 1599755679
    },
    {
        "content": "<p>I don't know what the status of the specialization moratorium is, but it seems plausible to do this if unstable sort is in fact faster in these cases</p>",
        "id": 209676317,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1599756873
    },
    {
        "content": "<p>The docs claim so:</p>\n<blockquote>\n<p>When applicable, unstable sorting is preferred because it is generally faster than stable sorting and it doesn't allocate auxiliary memory.</p>\n</blockquote>",
        "id": 209678329,
        "sender_full_name": "cuviper",
        "timestamp": 1599757639
    },
    {
        "content": "<p>on <code>unstable_sort</code>:</p>\n<blockquote>\n<p>It is typically faster than stable sorting, except in a few special cases, e.g., when the slice consists of several concatenated sorted sequences.</p>\n</blockquote>",
        "id": 209678497,
        "sender_full_name": "cuviper",
        "timestamp": 1599757705
    },
    {
        "content": "<p>I did actually run into someone on Discord (I think it was) the other day who was asking how to merge several sorted sequences, and I suggested <code>sort</code> for exactly that reason.  (Obligatory <a href=\"https://xkcd.com/1172/\">https://xkcd.com/1172/</a>)</p>",
        "id": 209684760,
        "sender_full_name": "scottmcm",
        "timestamp": 1599760716
    },
    {
        "content": "<p>Pondering: this would have to be for <code>.sort()</code> only, right?  <code>.sort_by_key(|x| x.some_u32)</code> needs to still be stable...</p>",
        "id": 209686307,
        "sender_full_name": "scottmcm",
        "timestamp": 1599761360
    },
    {
        "content": "<p>Hm, I think so, yes. We don't know what the closures does so cannot assume it is an identity function</p>",
        "id": 209686820,
        "sender_full_name": "simulacrum",
        "timestamp": 1599761544
    },
    {
        "content": "<p>In theory, you could assume based on specialization that if the element type and the key type are both simple indistinguishable-if-equal types that <code>sort_unstable</code> is fine, but it's not clear that it's worth doing.</p>",
        "id": 209703527,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599769079
    },
    {
        "content": "<p><code>sort_by_key</code> doesn't provide the index, just the element by value, so if the element is a <code>u64</code> and the returned key is a <code>u32</code> (for instance) then you could use <code>sort_unstable</code>.</p>",
        "id": 209703636,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599769135
    },
    {
        "content": "<p>Hm, not necessarily, because the u64 could be an index into, say, a HashMap&lt;u64, SomeComplexType&gt;</p>",
        "id": 209704915,
        "sender_full_name": "simulacrum",
        "timestamp": 1599769787
    },
    {
        "content": "<p>oh, though I guess you still can't derive whether we swapped two u64s or not</p>",
        "id": 209704974,
        "sender_full_name": "simulacrum",
        "timestamp": 1599769806
    },
    {
        "content": "<p>yeah that seems right then</p>",
        "id": 209704981,
        "sender_full_name": "simulacrum",
        "timestamp": 1599769812
    },
    {
        "content": "<p>If that's straightforward to do with <code>min_specialization</code> then by all means, but if it isn't then that seems fine too.</p>",
        "id": 209707799,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599771317
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> the element and key types both being indistinguishable-if-equal is unsufficient.  Demo with them both being i32: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=4c66ebd6b1344872e87eeb20f6c114bc\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=4c66ebd6b1344872e87eeb20f6c114bc</a></p>\n<p>(I think it also requires that the key function is injective.)</p>",
        "id": 209717110,
        "sender_full_name": "scottmcm",
        "timestamp": 1599776552
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> You're right, strictly speaking that's valid according to the contract of the function. Cute!</p>",
        "id": 209717176,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599776618
    },
    {
        "content": "<p>So you can partition elements into arbitrary order-preserved partitions that way.</p>",
        "id": 209717276,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599776678
    },
    {
        "content": "<p>Yup.  We don't have a dedicated equivalent of C++'s <code>stable_partition</code>, so <code>.sort_by_key(predicate)</code> is the simplest way I know to do that right now.</p>",
        "id": 209717352,
        "sender_full_name": "scottmcm",
        "timestamp": 1599776748
    },
    {
        "content": "<p>We could, and possibly should, provide a <code>partition_by_key</code> function.</p>",
        "id": 209717489,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599776861
    },
    {
        "content": "<p>Well we have <a href=\"https://doc.rust-lang.org/nightly/core/iter/trait.Iterator.html#method.partition_in_place\">https://doc.rust-lang.org/nightly/core/iter/trait.Iterator.html#method.partition_in_place</a>, but it's unstable -- in both senses of the word.  I don't remember whether a stable partition is doable in O(1) extra space.  I figure probably not, or quicksort would be stable more often.</p>",
        "id": 209717680,
        "sender_full_name": "scottmcm",
        "timestamp": 1599777002
    },
    {
        "content": "<p>In O(1) extra space and no worse than n log n time?</p>",
        "id": 209717770,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599777050
    },
    {
        "content": "<p>If you have a boolean predicate, it absolutely is.</p>",
        "id": 209717846,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599777117
    },
    {
        "content": "<p>If you have arbitrary keys, I don't know if there's an algorithm that would allow that.</p>",
        "id": 209717894,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599777132
    },
    {
        "content": "<p>But with a boolean predicate, it's trivial: track the next insertion indexes for false/true, walk the list forward, apply the predicate, put the element at the index and increment/decrement the index, then reverse the second set of elements.</p>",
        "id": 209717981,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599777206
    },
    {
        "content": "<p>The <a href=\"https://en.cppreference.com/w/cpp/algorithm/stable_partition\">C++ requirements</a> suggest there's just the simple ones -- O(n) time &amp; space, or O(n lg n) time without extra space.</p>",
        "id": 209718008,
        "sender_full_name": "scottmcm",
        "timestamp": 1599777235
    },
    {
        "content": "<p>Ah, sorry, I just realized that by O(1) extra space you mean \"in place\".</p>",
        "id": 209718066,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599777263
    },
    {
        "content": "<p>(as opposed to \"without any auxiliary space\".)</p>",
        "id": 209718075,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599777272
    },
    {
        "content": "<p>Ah, right -- sorry for confusion.  (We do have <code>Iterator::partition</code> if allocating O(n) space is ok.)</p>",
        "id": 209718117,
        "sender_full_name": "scottmcm",
        "timestamp": 1599777313
    },
    {
        "content": "<p>I think if you want to guarantee that you call the predicate only once per element then the C++ requirements are the best you can do.</p>",
        "id": 209718141,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599777339
    },
    {
        "content": "<p>I think it <em>might</em> be possible to do better if you don't mind doing two passes and two sets of calls to the predicate, but that's probably not ideal.</p>",
        "id": 209718228,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599777389
    },
    {
        "content": "<p>And conveniently we have <code>.sort_by_cached_key</code> for only calling the predicate once per item then doing an unstable sort by the composite key ;)</p>",
        "id": 209718253,
        "sender_full_name": "scottmcm",
        "timestamp": 1599777425
    }
]