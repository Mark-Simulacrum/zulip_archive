[
    {
        "content": "<p>I know const-generics are coming along - is it possible to write this code?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">]</span>: <span class=\"p\">[</span><span class=\"kt\">i32</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"mi\">2</span><span class=\"p\">).</span><span class=\"n\">collect</span><span class=\"p\">();</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>It's not implemented on nightly, but is it possible in theory? <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=f4bea44ca888ece05a049416ae8acf06\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=f4bea44ca888ece05a049416ae8acf06</a></p>",
        "id": 211440070,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601249727
    },
    {
        "content": "<p>I guess <code>size_hint()</code> is dynamic and not part of the type system so it would have to be fallible</p>",
        "id": 211440298,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601250019
    },
    {
        "content": "<p>yeah, the error cases are a question -- if the iterator is too short, do you panic?</p>",
        "id": 211443701,
        "sender_full_name": "cuviper",
        "timestamp": 1601255611
    },
    {
        "content": "<p>if it's too long, do you leave those in the iterator? (that's what <code>ArrayVec</code> does)</p>",
        "id": 211443709,
        "sender_full_name": "cuviper",
        "timestamp": 1601255634
    },
    {
        "content": "<p>Iterators change size dynamically (fundamentally), so it's pretty much impossible to use the type system to do something infallible.</p>\n<p>But yeah, I think the real answer is that we'll end up with <code>ArrayVec</code> in core.  We've got most of it already (between <code>[T; N]::map</code> and <code>core::array::IntoIter</code>), so the answer being to collect into an arrayvec and unwrap/try_into the arrayvec sounds like the right approach to me.</p>",
        "id": 211449139,
        "sender_full_name": "scottmcm",
        "timestamp": 1601264614
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> is working on implementing something for this, since I'm not too up to date on what the exact plan is I'll just tag him</p>",
        "id": 211450297,
        "sender_full_name": "jknodt",
        "timestamp": 1601266414
    },
    {
        "content": "<blockquote>\n<p>But yeah, I think the real answer is that we'll end up with ArrayVec in core. We've got most of it already (between [T; N]::map and core::array::IntoIter), so the answer being to collect into an arrayvec and unwrap/try_into the arrayvec sounds like the right approach to me.</p>\n</blockquote>\n<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span>  see discussion in <a href=\"#narrow/stream/219381-t-libs/topic/.60ArrayVec.60\">https://rust-lang.zulipchat.com/#narrow/stream/219381-t-libs/topic/.60ArrayVec.60</a> and <a href=\"https://github.com/rust-lang/rust/issues/75717\">#75717</a></p>",
        "id": 211457623,
        "sender_full_name": "lcnr",
        "timestamp": 1601276409
    },
    {
        "content": "<p>while I wouldn't mind someone else opening a PR for this, I will probably do so during the next few weeks once I have the time</p>",
        "id": 211457692,
        "sender_full_name": "lcnr",
        "timestamp": 1601276478
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> I think you'll want to chime in on <a href=\"https://github.com/rust-lang/rfcs/pull/2990\">https://github.com/rust-lang/rfcs/pull/2990</a></p>",
        "id": 211488765,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1601298058
    },
    {
        "content": "<p>I'm hoping for the syntax of</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">LengthMismatchError</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iter</span><span class=\"p\">.</span><span class=\"n\">collect</span><span class=\"p\">();</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>And <code>LengthMismatchError</code> is morally</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">enum</span> <span class=\"nc\">LengthMismatchError</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">TooShort</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">contents</span>: <span class=\"nc\">ArrayVec</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">TooLong</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">contents</span>: <span class=\"nc\">ArrayVec</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">e</span>: <span class=\"nc\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i</span>: <span class=\"nb\">Iterator</span> <span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 211489008,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1601298200
    },
    {
        "content": "<p>hmm, I personally think that it's better to pretend like collecting into arrays works like <code>.take(N).collect()</code>, so that we don't care about <code>TooLong</code>. But I guess <code>Result&lt;[T; N],  FillError&gt;</code> would make sense with <code>FillError&lt;T, N&gt;(ArrayVec&lt;T, N - 1&gt;)</code></p>",
        "id": 211499623,
        "sender_full_name": "lcnr",
        "timestamp": 1601303349
    },
    {
        "content": "<p>I think <code>Result&lt;[T; N], ArrayVec&lt;T; _&gt;&gt;</code> won't work because of coherence</p>",
        "id": 211499698,
        "sender_full_name": "lcnr",
        "timestamp": 1601303395
    },
    {
        "content": "<p>I'd disagree with your <code>take</code>-embedded version:</p>\n<ol>\n<li>You can always add <code>take(N)</code> yourself if that's what you want.</li>\n<li>functions like <code>copy_from_slice</code> require exactly matching lengths as well.</li>\n</ol>",
        "id": 211502052,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1601304366
    },
    {
        "content": "<p>An interesting thing about <code>TooLong</code> is that you can do it yourself with <code>.by_ref().collect()</code> and looking at the iterator afterwards.  But of course that has perf implications, and Jake's right about other things wanting exact matches in length (like `[T;N]: TryFrom&lt;&amp;[T]&gt;``).</p>",
        "id": 211541936,
        "sender_full_name": "scottmcm",
        "timestamp": 1601323009
    },
    {
        "content": "<p>Honestly, I think I'd rather see length errors come from a <code>[T;N]: TryFrom&lt;ArrayVec&lt;T, N&gt;&gt;</code> that we'll want anyway, rather than adding more weird <code>Result</code> impls in <code>collect</code>.</p>",
        "id": 211542145,
        "sender_full_name": "scottmcm",
        "timestamp": 1601323099
    },
    {
        "content": "<blockquote>\n<p>But of course that has perf implications</p>\n</blockquote>\n<p>doing so explicitly has the same cost as <code>TooLong</code> but is opt in, or am I misunderstanding you here</p>",
        "id": 211542248,
        "sender_full_name": "lcnr",
        "timestamp": 1601323154
    },
    {
        "content": "<p>I mean that today <code>by_ref</code> iteration tends to inhibit optimizations in some cases.</p>",
        "id": 211542320,
        "sender_full_name": "scottmcm",
        "timestamp": 1601323198
    },
    {
        "content": "<p><span aria-label=\"shock\" class=\"emoji emoji-1f628\" role=\"img\" title=\"shock\">:shock:</span> <a href=\"https://github.com/rust-lang/rust/issues/77307\">#77307</a></p>",
        "id": 211542399,
        "sender_full_name": "lcnr",
        "timestamp": 1601323220
    },
    {
        "content": "<p>or because of something else?</p>",
        "id": 211542419,
        "sender_full_name": "lcnr",
        "timestamp": 1601323231
    },
    {
        "content": "<p>Because a lack of <code>Sized</code> specialization means that implementations of it can only use object-safe methods.</p>",
        "id": 211542549,
        "sender_full_name": "scottmcm",
        "timestamp": 1601323293
    },
    {
        "content": "<p>I should try adding one again and see whether <code>min_specialization</code> can do it...</p>",
        "id": 211542663,
        "sender_full_name": "scottmcm",
        "timestamp": 1601323334
    },
    {
        "content": "<p>so <code>by_ref</code> is</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">by_ref</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">Self</span>: <span class=\"nb\">Sized</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>by default</p>",
        "id": 211542798,
        "sender_full_name": "lcnr",
        "timestamp": 1601323385
    },
    {
        "content": "<p>how do you want to specialize that method?</p>",
        "id": 211542821,
        "sender_full_name": "lcnr",
        "timestamp": 1601323393
    },
    {
        "content": "<p>(This is why <code>nth</code> doesn't use <code>try_fold</code>, for example)</p>",
        "id": 211542889,
        "sender_full_name": "scottmcm",
        "timestamp": 1601323422
    },
    {
        "content": "<p>(Wait, why is that green?)</p>",
        "id": 211543044,
        "sender_full_name": "scottmcm",
        "timestamp": 1601323492
    },
    {
        "content": "<p>what's green?</p>",
        "id": 211543162,
        "sender_full_name": "lcnr",
        "timestamp": 1601323549
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/t4Z0p9-r-Z_U5oCEbUPZugx_/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/t4Z0p9-r-Z_U5oCEbUPZugx_/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/t4Z0p9-r-Z_U5oCEbUPZugx_/image.png\"></a></div>",
        "id": 211543600,
        "sender_full_name": "scottmcm",
        "timestamp": 1601323728
    },
    {
        "content": "<p>I think that's a highlight word configured for you</p>",
        "id": 211544258,
        "sender_full_name": "simulacrum",
        "timestamp": 1601324029
    },
    {
        "content": "<p>Check <a href=\"#settings/alert-words\">https://rust-lang.zulipchat.com/#settings/alert-words</a></p>",
        "id": 211544279,
        "sender_full_name": "simulacrum",
        "timestamp": 1601324039
    },
    {
        "content": "<p>Oh, so it is.  I totally forgotten about that feature...</p>\n<p>(Sorry for noise.)</p>",
        "id": 211544385,
        "sender_full_name": "scottmcm",
        "timestamp": 1601324078
    },
    {
        "content": "<p>Well now I'm going to use that for my own amusement... try_fold</p>",
        "id": 211546186,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1601324998
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> it's not the by_ref method that's the issue, it's the impl of Iterator for &amp;mut I where I: Iterator, which can't override many of the methods to delegate</p>",
        "id": 211547715,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1601325781
    },
    {
        "content": "<p>but <code>iter.by_ref().collect()</code> doesn't really have to override a method, does it?</p>",
        "id": 211547849,
        "sender_full_name": "lcnr",
        "timestamp": 1601325854
    },
    {
        "content": "<p>The <code>FromIterator</code> will call methods that might have been nice to be overloaded, though.  Not to mention other potential specialization -- <code>vec.into_iter().by_ref().collect()</code> as an obvious, if unlikely, one.</p>",
        "id": 211551898,
        "sender_full_name": "scottmcm",
        "timestamp": 1601327994
    },
    {
        "content": "<p>I'm no longer following super well, but it may help to know that what I <em>actually</em> wanted was this, which didn't require going through iterators at all:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// split [a::c::d] into (a, c::d)</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">iter</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">path_str</span><span class=\"p\">.</span><span class=\"n\">rmatch_indices</span><span class=\"p\">(</span><span class=\"s\">\"::\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">segments</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iter</span><span class=\"p\">.</span><span class=\"n\">by_ref</span><span class=\"p\">().</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">idx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">segments</span><span class=\"p\">.</span><span class=\"n\">last</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">base</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rest</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">path_str</span><span class=\"p\">[</span><span class=\"o\">..</span><span class=\"n\">idx</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">path_str</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"o\">..</span><span class=\"p\">]);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 211553220,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601328810
    },
    {
        "content": "<p>occasionally with some more error checking to make sure <code>iter.next().is_none()</code></p>",
        "id": 211553406,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601328919
    },
    {
        "content": "<p>And FWIW, I don't think the valuable trait here is <code>ExactSizeIterator</code> but maybe <code>TrustedLen</code>.</p>",
        "id": 211567687,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1601339028
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/219381-t-libs/topic/Collect.20ExactSizeIterator.20into.20an.20array.3F/near/211553220\">said</a>:</p>\n<blockquote>\n<p>I'm no longer following super well, but it may help to know that what I <em>actually</em> wanted was this,</p>\n</blockquote>\n<p>This isn't valid code.</p>",
        "id": 211567928,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1601339246
    },
    {
        "content": "<p>But it looks like this does your intent:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">example</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">path_str</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"a::c::d\"</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">iter</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">path_str</span><span class=\"p\">.</span><span class=\"n\">splitn</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"::\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">base</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iter</span><span class=\"p\">.</span><span class=\"n\">next</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">rest</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iter</span><span class=\"p\">.</span><span class=\"n\">next</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">dbg</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">base</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rest</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"nb\">Some</span><span class=\"p\">(())</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 211568090,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1601339392
    },
    {
        "content": "<p>no, that doesn't handle multiple segments in front properly: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=e443e92eb16d77801a4560085b26a4f4\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=e443e92eb16d77801a4560085b26a4f4</a></p>",
        "id": 211569081,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601340477
    },
    {
        "content": "<p>oh I forgot a <code>.0</code>, here's the fixed verison: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=1a7f518d4b09500c144018e643f8988b\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=1a7f518d4b09500c144018e643f8988b</a></p>",
        "id": 211569185,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601340571
    },
    {
        "content": "<blockquote>\n<p>multiple segments in front</p>\n</blockquote>\n<p>Well, that's more of an issue with the testcases you provided.</p>",
        "id": 211569265,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1601340629
    },
    {
        "content": "<blockquote>\n<p>which didn't require going through iterators at all:</p>\n</blockquote>\n<p>You also appear to be using a different definition of \"didn't\" or \"iterator\" than I am familiar with.</p>",
        "id": 211569437,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1601340810
    },
    {
        "content": "<p>lol, sorry I meant to say 'collect'</p>",
        "id": 211569523,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601340889
    },
    {
        "content": "<p>the split() version means I can avoid <code>format!()</code> or <code>collect()</code>, so the lifetimes match up and the temporary isn't dropped</p>",
        "id": 211569557,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601340933
    },
    {
        "content": "<p>for reference, this is how the code ended up: <a href=\"https://github.com/rust-lang/rust/blob/e414a998953c0cdf59b956322274cac5fe9dbf84/src/librustdoc/passes/collect_intra_doc_links.rs#L355\">https://github.com/rust-lang/rust/blob/e414a998953c0cdf59b956322274cac5fe9dbf84/src/librustdoc/passes/collect_intra_doc_links.rs#L355</a></p>",
        "id": 211569682,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601341043
    },
    {
        "content": "<p>... I should probably add some comments to that</p>",
        "id": 211569695,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601341074
    },
    {
        "content": "<p>Clearly you want</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">SplitAround</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">rsplit_around</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">needle</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">SplitAround</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">rsplit_around</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">needle</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Box</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">rmatch_indices</span><span class=\"p\">(</span><span class=\"n\">needle</span><span class=\"p\">).</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"p\">(</span><span class=\"n\">idx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">tail</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">split_at</span><span class=\"p\">(</span><span class=\"n\">idx</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">tail</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">tail</span><span class=\"p\">[</span><span class=\"n\">needle</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"o\">..</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">tail</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}))</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">correct</span><span class=\"p\">(</span><span class=\"n\">path_str</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">path_str</span><span class=\"p\">.</span><span class=\"n\">rsplit_around</span><span class=\"p\">(</span><span class=\"s\">\"::\"</span><span class=\"p\">).</span><span class=\"n\">nth</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 211569910,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1601341254
    },
    {
        "content": "<p>that looks useful, yeah</p>",
        "id": 211570035,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601341349
    },
    {
        "content": "<p>could I convince you to add that to std? ;)</p>",
        "id": 211570044,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601341357
    },
    {
        "content": "<p>if you made it less general (a function instead of a trait) I think you could get rid of the boxing</p>",
        "id": 211570083,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601341405
    },
    {
        "content": "<p>You can get rid of the box with a custom iterator</p>",
        "id": 211570448,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1601341700
    },
    {
        "content": "<p>And if it were in the std, you could leverage the pattern API</p>",
        "id": 211570457,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1601341715
    },
    {
        "content": "<p>Oh for the day when the pattern API stabilizes.</p>",
        "id": 211570465,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1601341726
    },
    {
        "content": "<p>IIRC it has a lifetime in its trait -- is it one of those places that would really rather have GATs?</p>",
        "id": 211693814,
        "sender_full_name": "scottmcm",
        "timestamp": 1601419053
    },
    {
        "content": "<p>Hmm. Are GATs baked enough that we could experiment with them for the Pattern API?</p>",
        "id": 211703698,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1601427194
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125254\">@kennytm</span> is my mentor for All Things Pattern</p>",
        "id": 211703901,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1601427430
    },
    {
        "content": "<p><a href=\"https://play.integer32.com/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=dd14a542bb97269888a1da2b791852fa\">Seems present enough to play with such an API</a></p>",
        "id": 211707469,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1601431343
    }
]