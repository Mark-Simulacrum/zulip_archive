[
    {
        "content": "<p>What's the path forward for stabilizing the <code>raw_entry</code> HashMap API? It's been present but unstable for a while, and has also been exposed publicly in <code>hashbrown</code> for just about as long without incident. Personally, the fact that you can get it by adding the <code>hashbrown</code> dep is the main reason I haven't been more bothersome about missing the functionality it adds...</p>\n<ul>\n<li>tracking issue: <a href=\"https://github.com/rust-lang/rust/issues/56167\">https://github.com/rust-lang/rust/issues/56167</a></li>\n<li>docs <a href=\"https://doc.rust-lang.org/std/collections/struct.HashMap.html#method.raw_entry_mut\">https://doc.rust-lang.org/std/collections/struct.HashMap.html#method.raw_entry_mut</a> (well, there abouts anyway)</li>\n</ul>\n<p>I don't mind creating a stabilization PR if that's the path forward, but wanted to check.</p>",
        "id": 206473435,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1597072786
    },
    {
        "content": "<p>FWIW I don't really feel like it's quite as niche as the documentation implies, I very often want to defer creation of an owned key until it's needed. I've found it to meaningfully improve perf over entry for a few different kinds of workloads:</p>\n<ul>\n<li>\n<p>Workloads where the key clone is expensive. (example case: I hit this when implementing a cache of SQL source code Strings to prepared statements).</p>\n</li>\n<li>\n<p>Workloads where get-or-insert operations are common, but the \"hit\" rate is fairly high (example case: I've hit this when implementing string interning).</p>\n</li>\n</ul>\n<p>(It's also just always been mildlly disappointing that there's no alternative for get-or-insert beyond 'do two lookups' and 'make an owned key every time you insert'...)</p>",
        "id": 206477203,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1597074775
    },
    {
        "content": "<p>IMO there are some serious issues with <code>RawEntry</code>. It definitely needs a proper API review and better documentation before being stabilized.</p>",
        "id": 206481468,
        "sender_full_name": "Amanieu",
        "timestamp": 1597076889
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> Yeah i was starting to realized that when writing the 2nd comment... How far off from viable do you think it is?</p>\n<p>To me, it looks like there are some fairly clear surface-level issues around naming/consistency and such, especially on the builders\\*. I also agree about docs, at a minimum it should have examples the use cases it claims to be useful for...</p>\n<p>Although, it's seems like you are talking about deeper issues, maybe?</p>\n<p>\\* I remember thinking that the original RawEntry proposal felt like it had a cleaner API there, although I guess it was infeasible... It does look like the builders were fixed in a bit of an ad-hoc way though, and i'm guessing not a ton of thought has been spent on it since then...</p>",
        "id": 206514252,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1597094097
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"209168\">@Thom Chiovoloni</span> One issue that stood out is that <code>from_hash</code> and <code>search</code> methods on <code>RawEntryBuilderMut</code> both do the exact same thing.</p>",
        "id": 206514516,
        "sender_full_name": "Amanieu",
        "timestamp": 1597094282
    },
    {
        "content": "<p>Basically the feature needs to someone to go through the API and make it consistent. And then add the missing documentation.</p>",
        "id": 206514603,
        "sender_full_name": "Amanieu",
        "timestamp": 1597094321
    },
    {
        "content": "<p>I suggest experimenting in <code>hashbrown</code> first, which has a few API additions that <code>std</code> doesn't have (like <code>RawVacantEntryMut::insert_with_hasher</code>). Afterwards it will be trivial to port any API changes back to <code>std</code>.</p>",
        "id": 206514973,
        "sender_full_name": "Amanieu",
        "timestamp": 1597094500
    },
    {
        "content": "<p>that makes sense. i was about to ask if hashbrown was the right place to take a stab, and i'm glad the answer is yes. not sure when i'll find time for that, in truth, but...  <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 206515371,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1597094667
    },
    {
        "content": "<p>Just passing by to say that it'd be wonderful to have this :-)</p>\n<p><a href=\"https://github.com/rust-lang/rust/issues/56167\">https://github.com/rust-lang/rust/issues/56167</a></p>",
        "id": 214319754,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1603463059
    }
]