[
    {
        "content": "<p>Context: <a href=\"https://internals.rust-lang.org/t/auto-infer-namespaces-on-struct-and-enum-instantiations/14764/9?u=scottmcm\">https://internals.rust-lang.org/t/auto-infer-namespaces-on-struct-and-enum-instantiations/14764/9?u=scottmcm</a></p>\n<p>Once upon a time it was the pattern that things be <code>io::Error</code>, not <code>io::IoError</code>.</p>\n<p>Is that still suggested?  I'm wondering if thoughts have changed here, and particularly if any of those reasons would also apply to enums.  Like whether <code>enum CookieHandling { Parse, Skip }</code> are considered idomatic, or whether conventions would just suggest that the variants have more understandable-in-isolation names.</p>",
        "id": 240229907,
        "sender_full_name": "scottmcm",
        "timestamp": 1621967059
    },
    {
        "content": "<p>I think our policy is to prefer the former still</p>",
        "id": 240231031,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1621967598
    },
    {
        "content": "<p>well, I think we actually prefer more sentence like error names most of the time</p>",
        "id": 240231076,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1621967626
    },
    {
        "content": "<p>like ParseIntError</p>",
        "id": 240231080,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1621967629
    },
    {
        "content": "<p>VerbNounError</p>",
        "id": 240231104,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1621967637
    },
    {
        "content": "<p>but yea, I think relying on the enum name to provide context on the meaning of the enum variants is idiomatic personally, unless you put the variants in a prelude directly.</p>",
        "id": 240231526,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1621967830
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/219381-t-libs/topic/Current.20thoughts.20on.20.22stuttering.22.20names.3F/near/240231526\">said</a>:</p>\n<blockquote>\n<p>but yea, I think relying on the enum name to provide context on the meaning of the enum variants is idiomatic personally, unless you put the variants in a prelude directly.</p>\n</blockquote>\n<p>yes, very strong agree here.</p>\n<p>if and when i do something like <code>use foo::bar::EnumName::*;</code>, the scope is almost always tightly constrained, e.g., to a single function with a match block. so the \"context\" is still not far away in that case, while absolving the need to spell out the full enum.</p>",
        "id": 240231969,
        "sender_full_name": "BurntSushi",
        "timestamp": 1621968025
    },
    {
        "content": "<p>personally I don't duplicate an enum's name in its variants, if a user wants to glob-import to avoid writing the <code>Foo::</code> then it's reasonable to do so in an inner scope</p>",
        "id": 240232213,
        "sender_full_name": "bstrie",
        "timestamp": 1621968146
    },
    {
        "content": "<p>While the stated policy is still to prefer <code>io::Error</code> over just <code>IoError</code>, in practice a large portion of the standard library doesn't do that, and new things that get added usually do not do that. It's mostly just <code>io</code> and <code>fmt</code> that do that. Personally, I think we should just update the policy to the newer style that we actually do use in practice, because the old policy is ugly anyway.</p>\n<p><strong>However</strong>, type name and enum variant name are generally a different question. Most enum handling I see is <code>EnumName::TagName</code>, very rarely is a tag used without the enum it goes with. Like BurntSushi said, usually in very local contexts when \"everyone knows\" what a particular variant is all about.</p>\n<p>\"something something <code>Some</code>/<code>None</code> and <code>Ok</code>/<code>Err</code> are outliers  and should not have been counted in the survey\".</p>",
        "id": 240261633,
        "sender_full_name": "Lokathor",
        "timestamp": 1621984090
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/219381-t-libs/topic/Current.20thoughts.20on.20.22stuttering.22.20names.3F/near/240261633\">said</a>:</p>\n<blockquote>\n<p>While the stated policy is still to prefer <code>io::Error</code> over just <code>IoError</code>, in practice a large portion of the standard library doesn't do that, and new things that get added usually do not do that. It's mostly just <code>io</code> and <code>fmt</code> that do that. Personally, I think we should just update the policy to the newer style that we actually do use in practice, because the old policy is ugly anyway.</p>\n<p><strong>However</strong>, type name and enum variant name are generally a different question. Most enum handling I see is <code>EnumName::TagName</code>, very rarely is a tag used without the enum it goes with. Like BurntSushi said, usually in very local contexts when \"everyone knows\" what a particular variant is all about.</p>\n<p>\"something something <code>Some</code>/<code>None</code> and <code>Ok</code>/<code>Err</code> are outliers  and should not have been counted in the survey\".</p>\n</blockquote>\n<p>can you give examples of what you mean by other parts of the codebase that don't follow the same style as <code>io::Error</code>?</p>",
        "id": 240262356,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1621984719
    },
    {
        "content": "<p>I personally do think we should avoid duplication between enum names and their variants; <code>Foo::Thing1</code>, not<code>Foo::Thing1Foo</code> or <code>Foo::FooThing1</code>.</p>",
        "id": 240263388,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1621985550
    },
    {
        "content": "<p>And I similarly think we should avoid duplication between modules and items in those modules. <code>foo::func</code> and <code>foo::ThingError</code>, not <code>foo::foo_func</code> and <code>foo::FooThingError</code>.</p>",
        "id": 240263422,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1621985605
    },
    {
        "content": "<p>The one exception to that: I don't think it's a good practice to shadow well-known names. So, <code>foo::ThingError</code>or <code>foo::thing::ThingError</code>, not <code>foo::Error</code> or <code>foo::thing::Error</code>.</p>",
        "id": 240263481,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1621985647
    },
    {
        "content": "<p>I think <code>io::Write</code> and <code>fmt::Write</code> was a mistake.</p>",
        "id": 240263494,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1621985664
    },
    {
        "content": "<p>(Side note, I think we should find a better description than \"stuttering\", since that's a thing some people have to deal with. Perhaps \"redundant\" names?)</p>",
        "id": 240263605,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1621985772
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/219381-t-libs/topic/Current.20thoughts.20on.20.22stuttering.22.20names.3F/near/240263422\">said</a>:</p>\n<blockquote>\n<p>And I similarly think we should avoid duplication between modules and items in those modules. <code>foo::func</code> and <code>foo::ThingError</code>, not <code>foo::foo_func</code> and <code>foo::FooThingError</code>.</p>\n</blockquote>\n<p>this is the one I bet causes most of the issues</p>",
        "id": 240263635,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1621985821
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/219381-t-libs/topic/Current.20thoughts.20on.20.22stuttering.22.20names.3F/near/240262356\">said</a>:</p>\n<blockquote>\n<p>can you give examples of what you mean by other parts of the codebase that don't follow the same style as <code>io::Error</code>?</p>\n</blockquote>\n<p>Yeah, uh, nearly every error type outside of io and fmt. NulError, VarError, ErrorKind, NoneError, RecvError, SendError, Utf8Error, AllocError, probably more but that seems like enough examples.</p>\n<p>And, yes, (some of) these don't repeat a module path within their name, but that brings me to my next point:</p>\n<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/219381-t-libs/topic/Current.20thoughts.20on.20.22stuttering.22.20names.3F/near/240263422\">said</a>:</p>\n<blockquote>\n<p>And I similarly think we should avoid duplication between modules and items in those modules. <code>foo::func</code> and <code>foo::ThingError</code>, not <code>foo::foo_func</code> and <code>foo::FooThingError</code>.</p>\n</blockquote>\n<p>The module that a funciton lives in shouldn't really affect the name at all. The names of all your stuff should make sense even if they exist in a totally flat namespace. Then you can just pretty much fully import everything, and it doesn't have a lot of clashes, and it reads well too.</p>",
        "id": 240266517,
        "sender_full_name": "Lokathor",
        "timestamp": 1621988665
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> I don't think that's true in general. Otherwise, <code>std::env::vars</code> should be called <code>std::env::env_vars</code>, for instance.</p>",
        "id": 240278108,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1622002733
    },
    {
        "content": "<p>And <code>std::path::is_separator</code> would need to be called <code>is_path_separator</code> or similar.</p>",
        "id": 240278128,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1622002793
    },
    {
        "content": "<p>I'm sure there are many other examples.</p>",
        "id": 240278135,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1622002801
    },
    {
        "content": "<p>But I agree with both of those things ;P</p>",
        "id": 240278174,
        "sender_full_name": "Lokathor",
        "timestamp": 1622002812
    },
    {
        "content": "<p>That would be quite inconsistent with our existing practice, and with existing practice in many other languages with module systems.</p>",
        "id": 240278272,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1622003038
    },
    {
        "content": "<p>i think \"slightly\" is a better adverb there.</p>",
        "id": 240278472,
        "sender_full_name": "Lokathor",
        "timestamp": 1622003251
    },
    {
        "content": "<p>and i won't speak to all languages, but i'll note that <code>isPathSeparator</code> is a function in Haskell, which has a module system</p>",
        "id": 240278543,
        "sender_full_name": "Lokathor",
        "timestamp": 1622003290
    },
    {
        "content": "<p>I don't think we need to rename every old thing, but I absolutely think that new additions should prefer being named so that they don't need to be module prefixed.</p>",
        "id": 240279458,
        "sender_full_name": "Lokathor",
        "timestamp": 1622004378
    },
    {
        "content": "<p>I think in general that would produce suboptimal names.</p>",
        "id": 240294420,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1622018973
    },
    {
        "content": "<p>Can you give an example of a name that would be forced to be sub-optimal <em>when used fully imported</em>?</p>\n<p>Because if the block of <code>use</code> junk at the top of a file is like some tiny portion \"less optimal\" that's really not a huge deal in practice.</p>",
        "id": 240319544,
        "sender_full_name": "Lokathor",
        "timestamp": 1622033851
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/219381-t-libs/topic/Current.20thoughts.20on.20.22stuttering.22.20names.3F/near/240294420\">said</a>:</p>\n<blockquote>\n<p>I think in general that would produce suboptimal names.</p>\n</blockquote>\n<p>yeah, i agree. </p>\n<p>i think this is one of those things where it is difficult to establish a simple, succinct and universal rule to follow. for me personally, the thing i strive for is, \"reduce redundancy in the names of things with respect to their full absolute path.\" and moreover, i think it is appropriate to define things in a way where the module name is part of the context of its use. <code>path::is_separator</code> is a good example of that. i like that much better than <code>is_path_separator</code>.</p>\n<p>and i think \"sub-optimal when used fully imported\" is not the only standard by which to judge names. names can be sub-optimal in other ways, like, when not fully imported.</p>",
        "id": 240319687,
        "sender_full_name": "BurntSushi",
        "timestamp": 1622033918
    },
    {
        "content": "<p>Of course it's not the only standard.</p>",
        "id": 240402263,
        "sender_full_name": "Lokathor",
        "timestamp": 1622069858
    },
    {
        "content": "<p>However, if my approach would so clearly produce sub-optimal names, I would like to know what you think those sub-optimal names produced actually are.</p>",
        "id": 240402489,
        "sender_full_name": "Lokathor",
        "timestamp": 1622070027
    },
    {
        "content": "<p>i think the \"make everything work when fully imported\" convention leads to the \"smurf naming\" problem</p>",
        "id": 240424126,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1622096095
    },
    {
        "content": "<p>Iterators pretty consistently use the <code>io::Error</code> style, e.g. <code>std::collections::binary_heap::{Drain, DrainSorted, IntoIter, IntoIterSorted, Iter}</code>. In addition all of the types in <code>std::collections::{collection name}</code> follow this pattern, like <code>hash_map::Entry</code>.<br>\nOne notable module that uses the <code>IoError</code> style is <code>std::sync::atomic</code>. I think that was a mistake, because it results in imports like <code>use std::sync::atomic::{self, AtomicU32, AtomicUsize, AtomicBool}</code>, where if it used the other method it could simply be <code>use std::sync::atomic;</code> and <code>atomic::{U32, Usize, Bool}</code>.</p>",
        "id": 240433826,
        "sender_full_name": "Kestrer",
        "timestamp": 1622103723
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/219381-t-libs/topic/Current.20thoughts.20on.20.22stuttering.22.20names.3F/near/240402489\">said</a>:</p>\n<blockquote>\n<p>However, if my approach would so clearly produce sub-optimal names, I would like to know what you think those sub-optimal names produced actually are.</p>\n</blockquote>\n<p>i think josh did that already.</p>",
        "id": 240453064,
        "sender_full_name": "BurntSushi",
        "timestamp": 1622115821
    },
    {
        "content": "<p>Actually Josh didn't post anything in the thread since I asked the question, so clearly that is incorrect. but whatever. Kestrer was much more helpful.</p>",
        "id": 240472045,
        "sender_full_name": "Lokathor",
        "timestamp": 1622124214
    },
    {
        "content": "<p>The biggest problem with module prefixed names is that tooling generally doesn't get it right as to when a type or function is \"supposed\" to be known about in a partly prefixed way.</p>",
        "id": 240472362,
        "sender_full_name": "Lokathor",
        "timestamp": 1622124331
    },
    {
        "content": "<p>josh brought up <code>path::is_separator</code> (which i repeated) and also <code>std::env::vars</code>.</p>",
        "id": 240472894,
        "sender_full_name": "BurntSushi",
        "timestamp": 1622124518
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/219381-t-libs/topic/Current.20thoughts.20on.20.22stuttering.22.20names.3F/near/240472362\">said</a>:</p>\n<blockquote>\n<p>The biggest problem with module prefixed names is that tooling generally doesn't get it right as to when a type or function is \"supposed\" to be known about in a partly prefixed way.</p>\n</blockquote>\n<p>i either haven't experienced this or don't understand it. could you please give an example?</p>",
        "id": 240472994,
        "sender_full_name": "BurntSushi",
        "timestamp": 1622124562
    },
    {
        "content": "<p>Oh, I agree with that. A big example is stuff like rust-analyzer's auto-import feature.</p>",
        "id": 240474557,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1622125188
    },
    {
        "content": "<p>it imports the name fully, rather than partially — it doesn't (and likely can't without a pile of dodgy heuristics) really know when a path is better with a partial import or a full import.</p>",
        "id": 240474947,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1622125326
    },
    {
        "content": "<p>If you write <code>fn f() -&gt; fmt::Error&lt;|&gt;</code>, rust-analyzer should suggest autoimporting <code>std::fmt</code>. It doesn't do that at the moment, but that's a bug, no need to work around that by changing how things should be named.</p>",
        "id": 240480812,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1622127575
    },
    {
        "content": "<blockquote>\n<p>josh brought up <code>path::is_separator</code> (which i repeated) and also <code>std::env::vars</code>.</p>\n</blockquote>\n<p>Yes, I saw that, and then after I saw that example I asked a follow-up question that was more specifically worded. But, instead of an answer to my more specific question, I got a denial that the question was useful at all, which I found to be not helpful.</p>",
        "id": 240481085,
        "sender_full_name": "Lokathor",
        "timestamp": 1622127661
    },
    {
        "content": "<p>In addition to what Thom said, rustdoc also does not magically know when to module-prefix things.</p>",
        "id": 240481349,
        "sender_full_name": "Lokathor",
        "timestamp": 1622127739
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/219381-t-libs/topic/Current.20thoughts.20on.20.22stuttering.22.20names.3F/near/240481085\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>josh brought up <code>path::is_separator</code> (which i repeated) and also <code>std::env::vars</code>.</p>\n</blockquote>\n<p>Yes, I saw that, and then after I saw that example I asked a follow-up question that was more specifically worded. But, instead of an answer to my more specific question, I got a denial that the question was useful at all, which I found to be not helpful.</p>\n</blockquote>\n<p>i didn't deny it. i said that i don't think it's the only standard. you agreed. so now i don't know where we are in the conversation, and yes, i agree, it is getting frustrating.</p>\n<p>in my comment above (\"i think this is one of those things ...\"), i did my best to give my general stance on this issue. if you'd like to reset, then i might suggest taking it from there.</p>",
        "id": 240482595,
        "sender_full_name": "BurntSushi",
        "timestamp": 1622128197
    },
    {
        "content": "<blockquote>\n<p>If you write fn f() -&gt; fmt::Error&lt;|&gt;, rust-analyzer should suggest autoimporting std::fmt. It doesn't do that at the moment, but that's a bug, no need to work around that by changing how things should be named.</p>\n</blockquote>\n<p>If i type std::fmt::Error though, it will suggest importing the whole thing. This will IIRC also happen on the autocomplete if I do <code>std::fmt::Err&lt;|&gt;</code> and tabcomplete.</p>",
        "id": 240482723,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1622128232
    },
    {
        "content": "<p>i will also say that, more generally, i don't think the tooling shortcomings i've seen is a good enough reason to change our naming strategy.</p>",
        "id": 240482849,
        "sender_full_name": "BurntSushi",
        "timestamp": 1622128287
    },
    {
        "content": "<p>for rustdoc, i do things like <code>[module::Foo](Foo)</code> or whatever when i think the module name should be included for appropriate context. (which is sometimes, but not always.)</p>",
        "id": 240483016,
        "sender_full_name": "BurntSushi",
        "timestamp": 1622128337
    },
    {
        "content": "<p>maybe add <code>#[doc(module_prefixed)]</code>, allowing annotating those types that should show up in rustdoc (and rust-analyzer auto-complete) prefixed by their immediate parent module/crate?</p>",
        "id": 240483177,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1622128405
    },
    {
        "content": "<p>I remember seeing a proposal about a 'canonical' doc path, so when you have re-exports you don't double up on documentation and it can show a better location. Could be similar</p>",
        "id": 240483449,
        "sender_full_name": "Conrad Ludgate",
        "timestamp": 1622128517
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"222471\">BurntSushi</span> <a href=\"#narrow/stream/219381-t-libs/topic/Current.20thoughts.20on.20.22stuttering.22.20names.3F/near/240472994\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/219381-t-libs/topic/Current.20thoughts.20on.20.22stuttering.22.20names.3F/near/240472362\">said</a>:</p>\n<blockquote>\n<p>The biggest problem with module prefixed names is that tooling generally doesn't get it right as to when a type or function is \"supposed\" to be known about in a partly prefixed way.</p>\n</blockquote>\n<p>i either haven't experienced this or don't understand it. could you please give an example?</p>\n</blockquote>\n<p>I've seen this complaint before. As in, you're writing <code>io::Error</code> everywhere in your source but then you're debugging the application in <code>gdb</code> or using <code>Debug</code> or something to inspect it and you end up just seeing <code>Error</code> in the tool output and don't know what <code>Error</code> it is, because it doesn't know to prefix with the module.</p>",
        "id": 240523544,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1622145802
    },
    {
        "content": "<p>I vaguely recall this coming up in some conversation we had a while back, not sure what the context was other than that it was related to the prelude and <span class=\"user-mention\" data-user-id=\"119235\">@David Tolnay</span> recommended we only discourage reusing identifier names when the identifier is part of the prelude. So new types named <code>Error</code> are okay but new types named <code>Result</code> are discouraged.</p>",
        "id": 240523824,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1622145926
    },
    {
        "content": "<p>I would love to see an option to set the disambiguated name in rustdoc, such as in the parameters and return values of functions.</p>",
        "id": 240528343,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1622148122
    },
    {
        "content": "<p>The fully qualified path already is in the title attribute, i.e. you just have to hover over it</p>",
        "id": 240535320,
        "sender_full_name": "The 8472",
        "timestamp": 1622151426
    },
    {
        "content": "<p>True, but that's not as helpful for skimming.</p>",
        "id": 240535928,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1622151748
    },
    {
        "content": "<p>I guess it could scan the whole crate to see whether names are ambiguous and add path elements until they aren't.</p>",
        "id": 240536797,
        "sender_full_name": "The 8472",
        "timestamp": 1622152224
    },
    {
        "content": "<p>mhh, no it wouldn't be helpful if you're in the io module and it said io::Error because fmt::Error exists somewhere else</p>",
        "id": 240536861,
        "sender_full_name": "The 8472",
        "timestamp": 1622152271
    },
    {
        "content": "<p>maybe in other modules where there's no obvious preference</p>",
        "id": 240536961,
        "sender_full_name": "The 8472",
        "timestamp": 1622152324
    },
    {
        "content": "<p>I honestly <em>want</em> it to be spelled <code>io::Error</code> everywhere, even in the io module.</p>",
        "id": 240537019,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1622152362
    },
    {
        "content": "<p>I don't think rustdoc needs to do a scan and disambiguation. I'd be happy with an attr of some kind, either at the item level or the module level.</p>",
        "id": 240537057,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1622152382
    },
    {
        "content": "<p>\"please include the module when referencing this name\" or \"please include the module when referencing any name from this module\".</p>",
        "id": 240537098,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1622152403
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/219381-t-libs/topic/Current.20thoughts.20on.20.22stuttering.22.20names.3F/near/240523824\">said</a>:</p>\n<blockquote>\n<p>So new types named <code>Error</code> are okay but new types named <code>Result</code> are discouraged.</p>\n</blockquote>\n<p>I'm pretty sure I read somewhere (rust book?) that it is common and recommended practice to locally define <code>type Result&lt;T&gt; = std::result::Result&lt;T, MyError&gt;</code>, and I think I'm not the only one who follows that style, so changing it to discouraged would probably be rather disruptive.</p>",
        "id": 240546395,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622159614
    },
    {
        "content": "<p>It's probably better to do: <code>type Result&lt;T, E = MyError&gt; = core::result::Result&lt;T, E&gt;</code></p>",
        "id": 240547233,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1622160329
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330154\">The 8472</span> <a href=\"#narrow/stream/219381-t-libs/topic/Current.20thoughts.20on.20.22stuttering.22.20names.3F/near/240535320\">said</a>:</p>\n<blockquote>\n<p>The fully qualified path already is in the title attribute, i.e. you just have to hover over it</p>\n</blockquote>\n<p>Top of page isn't really the issue. It's every other part of the page where a type is used in a signature.</p>",
        "id": 240554949,
        "sender_full_name": "Lokathor",
        "timestamp": 1622168602
    },
    {
        "content": "<p>hover works there too (note: title <em>attribute</em> on the html tag, not the title of the page)</p>",
        "id": 240555770,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622169617
    }
]