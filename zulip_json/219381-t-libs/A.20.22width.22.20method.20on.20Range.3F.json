[
    {
        "content": "<p>I tried to call <code>.len()</code> on a <code>Range&lt;u64&gt;</code> today, which of course didn't work, since it's not <code>ExactSizeIterator</code>.</p>\n<p>I didn't really need a <code>usize</code>, though -- a <code>u64</code> would have been fine -- so it made me thing about adding a method for it. Specifically, it'd be <code>&amp;Range&lt;uNN&gt; -&gt; uNN</code> and <code>&amp;Range&lt;iNN&gt; -&gt; uNN</code>.</p>\n<p>It certainly shouldn't be named <code>.len()</code>, since that would break <code>Range&lt;usize&gt;::len</code>, so I was thinking <code>.width()</code>.  (Other things that came up while searching were <code>.diameter()</code> and <code>.distance()</code>.)</p>\n<p>Does that sound reasonable?  Or too niche?</p>",
        "id": 276834515,
        "sender_full_name": "scottmcm",
        "timestamp": 1648451334
    },
    {
        "content": "<p>Rayon has something like this internally, but we just called it <code>len</code> because it's only for 64/128<br>\n<a href=\"https://github.com/rayon-rs/rayon/blob/f57bfa5126bc07ab752e9cbda0194f3b35876ce9/src/range.rs#L221-L230\">https://github.com/rayon-rs/rayon/blob/f57bfa5126bc07ab752e9cbda0194f3b35876ce9/src/range.rs#L221-L230</a></p>",
        "id": 276897058,
        "sender_full_name": "cuviper",
        "timestamp": 1648484294
    },
    {
        "content": "<p>would you also do <code>RangeInclusive</code>?</p>",
        "id": 276897128,
        "sender_full_name": "cuviper",
        "timestamp": 1648484334
    },
    {
        "content": "<p>Well you \"can't\" do that in the general case, since the max range on RangeInclusive exceeds the type's max value (which is the point)</p>",
        "id": 276899669,
        "sender_full_name": "Lokathor",
        "timestamp": 1648485390
    },
    {
        "content": "<p>yes, that's the implied point of my question :)</p>",
        "id": 276900155,
        "sender_full_name": "cuviper",
        "timestamp": 1648485584
    },
    {
        "content": "<p>size + overflow bool</p>",
        "id": 276901974,
        "sender_full_name": "The 8472",
        "timestamp": 1648486341
    },
    {
        "content": "<p>I was tempted to do <code>&amp;RangeInclusive&lt;NonZeroU64&gt; -&gt; u64</code>, but that's a whole other question, so wouldn't be part of V1</p>",
        "id": 276910227,
        "sender_full_name": "scottmcm",
        "timestamp": 1648490427
    },
    {
        "content": "<p><code>Range::len</code> as a whole is kinda weird, since <code>Range&lt;u32&gt;::len</code> is actually a bug.</p>",
        "id": 276910297,
        "sender_full_name": "scottmcm",
        "timestamp": 1648490466
    },
    {
        "content": "<p>would it be implemented for everything that implements Sub? if so, then what about 10..5? when used as an iterator that range is empty, but when doing end-start you get -5, not 0.</p>",
        "id": 277178660,
        "sender_full_name": "Mara",
        "timestamp": 1648660876
    },
    {
        "content": "<p>i don't think it always makes sense to use the same type. e.g. <code>'a'..'f'</code> has a 'width' of 5, which shouldn't be represented as <code>char</code></p>",
        "id": 277178911,
        "sender_full_name": "Mara",
        "timestamp": 1648660996
    },
    {
        "content": "<p>No, <code>Sub</code> is definitely wrong.  For unsigned types it's just <code>saturating_sub</code>, though.  (For signed it's a bit harder.)</p>\n<p>And yes, I was thinking different types, like <code>unsigned_abs</code> does</p>\n<blockquote>\n<p>Specifically, it'd be <code>&amp;Range&lt;uNN&gt; -&gt; uNN</code> and <code>&amp;Range&lt;iNN&gt; -&gt; uNN</code>.</p>\n</blockquote>\n<p>I suppose that trait question gets to the unknown-to-me question of \"what should <code>Step</code> be?\".  Because we could do it with macros or by updating <code>Step</code>, and I don't know which would be better for this.</p>",
        "id": 277180977,
        "sender_full_name": "scottmcm",
        "timestamp": 1648661978
    },
    {
        "content": "<p><code>Step</code> has <a href=\"https://doc.rust-lang.org/nightly/std/iter/trait.Step.html#tymethod.steps_between\"><code>Step::steps_between</code></a></p>",
        "id": 277429630,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1648824677
    },
    {
        "content": "<p>I would think <code>Range::width</code> would be defined in terms of that</p>",
        "id": 277429852,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1648824737
    },
    {
        "content": "<p>But that's <code>usize</code>, no better than <code>len()</code></p>",
        "id": 277430373,
        "sender_full_name": "cuviper",
        "timestamp": 1648824937
    },
    {
        "content": "<p>Is the suggestion to give <code>Step</code> an associated unsigned type?</p>",
        "id": 277430531,
        "sender_full_name": "cuviper",
        "timestamp": 1648825009
    },
    {
        "content": "<p>Hm right</p>",
        "id": 277431795,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1648825525
    },
    {
        "content": "<p>Though using <code>stepe_between</code> works when length happens to fit in <code>usize</code>, whereas <code>ExactSizeIterator</code> only works if all lengths fit in <code>usize</code></p>",
        "id": 277431966,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1648825581
    },
    {
        "content": "<p>One could imagine a (bad) <code>Range::width</code> as <code>fn width(a..b: Self) -&gt; usize { steps_between(&amp;a, &amp;b).unwrap() }</code></p>",
        "id": 277432183,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1648825669
    },
    {
        "content": "<p>Yeah, the existing <code>Step</code> could give like a <code>saturating_len</code> or something.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"138448\">cuviper</span> <a href=\"#narrow/stream/219381-t-libs/topic/A.20.22width.22.20method.20on.20Range.3F/near/277430531\">said</a>:</p>\n<blockquote>\n<p>Is the suggestion to give <code>Step</code> an associated unsigned type?</p>\n</blockquote>\n<p>That could certainly work.  like a <code>type WidthType;</code> or (<a href=\"https://en.cppreference.com/w/cpp/iterator/distance\">for the C++ people</a>) <code>type DistanceType;</code>/<code>type DifferenceType;</code>.</p>\n<p>But I don't know if it's worth it, given everything else in <code>Step</code> now speaks <code>usize</code>.  (As we hit the \"interval vs iterator\" interpretation problem again.)</p>",
        "id": 277461512,
        "sender_full_name": "scottmcm",
        "timestamp": 1648838050
    },
    {
        "content": "<p>You could always implement it manually by forwarding by usize::MAX in a loop and accumulating into a larger type</p>",
        "id": 277462155,
        "sender_full_name": "The 8472",
        "timestamp": 1648838363
    }
]