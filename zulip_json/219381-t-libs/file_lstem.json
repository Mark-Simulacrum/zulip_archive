[
    {
        "content": "<p>Firstly, apologies if this is not the correct place to ask this. </p>\n<p>I would like to like to add a method to <code>std::path::Path</code> to extract the file stem, but for the portion before the <em>first</em> <code>.</code>. I was thinking to name it <code>file_lstem</code> so it is easy to recognise how it differs from the existing <a href=\"https://doc.rust-lang.org/std/path/struct.PathBuf.html#method.file_stem\"><code>file_stem</code></a> without needing to change the current API.<br>\nI personally find that when I want a file stem it is almost always this \"left\" variant.<br>\nDo you think this is something worth pursuing, and if so, do I create an RFC?</p>",
        "id": 238076313,
        "sender_full_name": "Michael Hall",
        "timestamp": 1620610434
    },
    {
        "content": "<p>I guess another option for the name could be <code>file_prefix</code></p>",
        "id": 238076747,
        "sender_full_name": "Michael Hall",
        "timestamp": 1620610976
    },
    {
        "content": "<p>Why does this need to be part of libstd directly? You could use <code>let bytes = path.file_name().as_bytes(); bytes[bytes.position('.')..]</code> I think.</p>",
        "id": 238079211,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1620613851
    },
    {
        "content": "<p>My thinking was that this is a fairly common need for people working with Path objects. As I mentioned, it is something I use far more than the <code>file_stem</code> variant.<br>\nI appreciate that it is easy enough to do without a libstd method, but I guess the same statement could be made about many of the libstd methods?</p>",
        "id": 238079497,
        "sender_full_name": "Michael Hall",
        "timestamp": 1620614162
    },
    {
        "content": "<p>Not so sure about the name, but generally small additions like this are proposed as a PR and a member of the libs team will evaluate it there; no need to write a full RFC. Someone from the libs team may chime in here as well, of course.</p>",
        "id": 238079727,
        "sender_full_name": "simulacrum",
        "timestamp": 1620614409
    },
    {
        "content": "<p>Some thoughts: How could this handle a <code>.foo</code> file?  Would it imply having an <code>lextension</code> too?  Or what about an iterator over the possible <code>(name, ext)</code> pairs?</p>",
        "id": 238080233,
        "sender_full_name": "scottmcm",
        "timestamp": 1620615001
    },
    {
        "content": "<p>seems like you'd have trouble with something like <code>File Version 3.5.4 (Copy).tar.gz</code></p>",
        "id": 238080541,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1620615356
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/219381-t-libs/topic/file_lstem/near/238079727\">said</a>:</p>\n<blockquote>\n<p>Not so sure about the name, but generally small additions like this are proposed as a PR and a member of the libs team will evaluate it there; no need to write a full RFC. Someone from the libs team may chime in here as well, of course.</p>\n</blockquote>\n<p>Thanks, I'll do that and also try and capture all of the discussion here so far.</p>",
        "id": 238081433,
        "sender_full_name": "Michael Hall",
        "timestamp": 1620616320
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/219381-t-libs/topic/file_lstem/near/238080233\">said</a>:</p>\n<blockquote>\n<p>Some thoughts: How could this handle a <code>.foo</code> file?  Would it imply having an <code>lextension</code> too?  Or what about an iterator over the possible <code>(name, ext)</code> pairs?</p>\n</blockquote>\n<p>I was thinking of mirroring <code>file_stem</code> in this respect - i.e. if <code>.</code> if the file name starts with <code>.</code> and there is no other <code>.</code>, then return <code>None</code>.<br>\nThe idea of an iterator over <code>(name, ext)</code> pairs is interesting. Although, I guess that would be a more general method akin to <code>components</code>, I guess it would be <code>file_components</code>... One method from python's <code>pathlib</code> that  generalises over extensions is <a href=\"https://docs.python.org/3/library/pathlib.html#pathlib.PurePath.suffixes\"><code>suffixes</code></a>. So if we felt the need to have <code>lextension</code>, it might be better to just implement <code>extensions</code>, and then if others feel like <code>lextension</code> was needed it would be quite easy to add.</p>",
        "id": 238081866,
        "sender_full_name": "Michael Hall",
        "timestamp": 1620616820
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"229517\">Jacob Lifshay</span> <a href=\"#narrow/stream/219381-t-libs/topic/file_lstem/near/238080541\">said</a>:</p>\n<blockquote>\n<p>seems like you'd have trouble with something like <code>File Version 3.5.4 (Copy).tar.gz</code></p>\n</blockquote>\n<p>It would have trouble with that I guess. i.e. you wouldn't get <code>File Version 3.5.4 (Copy)</code> as a result.</p>",
        "id": 238082043,
        "sender_full_name": "Michael Hall",
        "timestamp": 1620617025
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"410803\">Michael Hall</span> <a href=\"#narrow/stream/219381-t-libs/topic/file_lstem/near/238082043\">said</a>:</p>\n<blockquote>\n<p>It would have trouble with that I guess. i.e. you wouldn't get <code>File Version 3.5.4 (Copy)</code> as a result.</p>\n</blockquote>\n<p>This is one of the kinds of things I was thinking of for the iterator -- you could take the first/last (depending which what it iterates) match of a known extension so that if <code>.tar.gz</code> was in the allow-list you'd get that one, not <code>.5.4 (Copy).tar.gz</code>, which isn't really ever of use to anyone.</p>",
        "id": 238085718,
        "sender_full_name": "scottmcm",
        "timestamp": 1620620996
    },
    {
        "content": "<p>For anyone interested in following this: <a href=\"https://github.com/rust-lang/rust/pull/85166\">https://github.com/rust-lang/rust/pull/85166</a></p>",
        "id": 238234555,
        "sender_full_name": "Michael Hall",
        "timestamp": 1620693909
    }
]