[
    {
        "content": "<p>I've been working towards making rustls panic-free, and one thing that I looked at that seems tricky is that something like <code>slice::split_at()</code> and, in particular, <code>split_at_mut()</code> (since I think it's harder -- or even impossible -- to do in safe Rust), can panic. Presumably the optimizer might take care of that if <code>mid</code> is a constant, but I feel like it would be pretty nice if we had alternatives to these that would return <code>Option</code> or <code>Result</code>. What do people think?</p>",
        "id": 238532755,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1620848657
    },
    {
        "content": "<p>Where you'd never get <code>None</code> unless you passed an out-of-range index?</p>",
        "id": 238533304,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1620848897
    },
    {
        "content": "<p>Yes, exactly</p>",
        "id": 238533651,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1620849061
    },
    {
        "content": "<p>That seems reasonable, yeah.</p>",
        "id": 238533871,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1620849162
    },
    {
        "content": "<p>Feels a bit tricky because so many of slice's methods can panic, so there maybe needs to be a policy on what qualifies?<br>\nWould the naming just be <code>try_split_at_mut()</code>?</p>",
        "id": 238534334,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1620849361
    },
    {
        "content": "<p>I'd honestly love to have non-panicking versions of <em>every</em> such function. We should probably have a naming convention.</p>",
        "id": 238534490,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1620849411
    },
    {
        "content": "<p>If that's the case, shouldn't unstable methods start being non-panicking from the start?</p>",
        "id": 238534834,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1620849562
    },
    {
        "content": "<p>(like <code>as_chunks()</code>, say)</p>",
        "id": 238534868,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1620849583
    },
    {
        "content": "<p>or is it okay at this level to just have two versions of every method?</p>",
        "id": 238534980,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1620849613
    },
    {
        "content": "<p>Like came up for <code>Vec</code>, could there be a <code>SlicePanicFree&lt;T&gt;</code>?  Because just a naming convention is vulnerable to \"oops I forgot to use the <code>try_</code> version\".  For example, I could easily imagine trying to make a quick PR to fix something and using the panicking version when they'd rather I didn't.</p>\n<p>(That has its own problems of requiring duplicating the non-panicking things like <code>first()</code>, but maybe there's a nice way to share stuff...)</p>",
        "id": 238545692,
        "sender_full_name": "scottmcm",
        "timestamp": 1620854005
    },
    {
        "content": "<p>Yeah, that does seem a better option</p>",
        "id": 238585032,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1620885709
    }
]