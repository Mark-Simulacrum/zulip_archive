[
    {
        "content": "<p>Hello! I've been working on a libs-impl issue from GitHub, and I was wondering whether someone could check if I'm using the right approach. I feel a bit weird about messaging here, and I sincerely apologize if this isn't the right place.</p>\n<p>The issue is here: <a href=\"https://github.com/rust-lang/rust/issues/80804\">https://github.com/rust-lang/rust/issues/80804</a></p>\n<p><code>fs::hard_link</code> uses a system call to create a hard link. On systems where it is available, it is preferable to use the <code>linkat</code> call, because it can be told not to follow symbolic links. However, it isn't available on all systems; currently, for VxWorks, Redox, and Android, the code uses the <code>link</code> call instead.  On other systems, it assumes the <code>link</code> call is present and calls that. The problem is that on older MacOS systems (specifically, 10.9) the <code>linkat</code> call isn't available, which generates an error when we try to use it.</p>\n<p>What I've done to fix it is to split the systems into three categories. VxWorks and Redox are still assumed to not have <code>linkat</code>. Android and MacOS, systems that have <code>linkat</code> on more recent versions, use <code>weak!</code> to check at runtime. For other systems, <code>linkat</code> is still assumed to be available. I could instead just always check at runtime, but I figure there's probably some performance penalty to doing it that way.</p>\n<p>I apologize if this explanation is unclear; I can post either a diff or the new version of the code if needed, and the issue has more information. That said, I wanted someone's take: am I going about this the right way?</p>",
        "id": 241347654,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1622695004
    },
    {
        "content": "<p>For Android specifically, you could probably just use a raw syscall for linkat, it was added to the Linux kernel in 2.6.16</p>",
        "id": 241348397,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1622696112
    },
    {
        "content": "<p>that's old enough you might be able to use the syscall unconditionally, icr the minimum version required by rust on Android</p>",
        "id": 241348568,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1622696303
    },
    {
        "content": "<p>I'm mildly nervous about doing something that might break Android builds in a PR intended to fix MacOS builds. That said, it also doesn't look like there's any way that any android version Rust supports would lack <code>linkat</code>.  The oldest version Rust support seems to support is Gingerbread, which ran the kernel version 2.6.35; even Cupcake used 2.6.27. So yeah, it looks like it should be fine to remove.</p>",
        "id": 241349027,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1622696883
    },
    {
        "content": "<p>note that there's a difference between the <code>linkat</code> function being in libc and the Linux kernel supporting <code>linkat</code></p>",
        "id": 241349415,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1622697422
    },
    {
        "content": "<p>There is?</p>",
        "id": 241349652,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1622697745
    },
    {
        "content": "<p>How would I be that it's in libc on the oldest version we support then?</p>",
        "id": 241349668,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1622697779
    },
    {
        "content": "<p>Nvm, I think I figured out how.</p>",
        "id": 241350219,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1622698543
    },
    {
        "content": "<p>Nope.</p>",
        "id": 241350572,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1622698936
    },
    {
        "content": "<p>It was added to bionic's libc in API level 21.</p>",
        "id": 241350582,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1622698962
    },
    {
        "content": "<p>Rust supports back to API level 9.</p>",
        "id": 241350591,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1622698987
    },
    {
        "content": "<p>Does anyone have any other comments on my approach?</p>",
        "id": 241350746,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1622699185
    },
    {
        "content": "<p>Alright, I'm going to submit a pull request. Thanks a ton for all the help. <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 241353262,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1622702365
    },
    {
        "content": "<p>I was suggesting something like <code>syscall(SYS_linkat, olddirfd, oldpath, newdirfd, newpath, flags)</code></p>",
        "id": 241354543,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1622703760
    },
    {
        "content": "<p>I'm afraid I'm confused. What does this mean? Should I add it to my PR?</p>",
        "id": 241356663,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1622705415
    },
    {
        "content": "<p>This is my first time doing anything systems programming related, and also my first time working on Rust.</p>",
        "id": 241356703,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1622705463
    },
    {
        "content": "<p>I'm sorry.</p>",
        "id": 241357139,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1622705789
    },
    {
        "content": "<p>the <code>syscall</code> function from <code>libc</code> allows you to make any syscall by passing in the syscall number (the <code>SYS_*</code> constant), followed by the arguments to the actual syscall (with some arch-specific adjustments for passing 64-bit values): <a href=\"https://manpages.debian.org/buster/manpages-dev/syscall.2.en.html\">https://manpages.debian.org/buster/manpages-dev/syscall.2.en.html</a></p>",
        "id": 241359458,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1622707532
    },
    {
        "content": "<p>so, assuming I didn't make any mistakes, you should be able to call <code>linkat_wrapper</code> instead of <code>linkat</code>:<br>\n<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=433f69dbbe5b9d9d2105521226b44ce5\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=433f69dbbe5b9d9d2105521226b44ce5</a><br>\nyou'll definitely need to get someone to double check that I did it right though</p>",
        "id": 241360433,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1622708208
    },
    {
        "content": "<p>that should work even on very old versions of Android</p>",
        "id": 241360658,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1622708356
    },
    {
        "content": "<p>I see!</p>",
        "id": 241364845,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1622711250
    },
    {
        "content": "<p>What's the advantage of that over <code>weak!</code>?</p>",
        "id": 241364986,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1622711345
    },
    {
        "content": "<p>you can use the <code>linkat</code> syscall even if the systems' libc isn't new enough to support it  yet</p>",
        "id": 241365822,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1622711830
    },
    {
        "content": "<p>with <code>weak!</code> you have to fall-back to using <code>link</code></p>",
        "id": 241365932,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1622711894
    },
    {
        "content": "<p>I wonder if I should revert to always using <code>link</code> on android. It has the correct behavior anyway, it's just a bit awkward to say \"well, this isn't the right way to do it, but it has the right end result on this platform so it's fine\".</p>",
        "id": 241366008,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1622711975
    },
    {
        "content": "<p>reverting to <code>link</code> on android sounds good to me!</p>",
        "id": 241369558,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1622714230
    },
    {
        "content": "<p>we have a <code>syscall!()</code> macro that calls <code>syscall(SYS_*)</code> if weak!() doesn't work</p>",
        "id": 241369596,
        "sender_full_name": "Mara",
        "timestamp": 1622714261
    },
    {
        "content": "<p>see library/std/src/sys/unix/weak.rs</p>",
        "id": 241369681,
        "sender_full_name": "Mara",
        "timestamp": 1622714297
    },
    {
        "content": "<blockquote>\n<p>I feel a bit weird about messaging here, and I sincerely apologize if this isn't the right place.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"417924\">@Aris</span> fwiw this is definitely the right place for this sort of question :)</p>",
        "id": 241449388,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1622752778
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"417924\">@Aris</span> I do think that <code>syscall!</code> would be the right answer here: use it from the library if available, otherwise make the syscall directly, and that way there's no need to ever call <code>link</code>.</p>",
        "id": 241450309,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1622753220
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/219381-t-libs/topic/Using.20weak!.20in.20fs.3A.3Ahard_link/near/241449388\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>I feel a bit weird about messaging here, and I sincerely apologize if this isn't the right place.</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"417924\">Aris</span> fwiw this is definitely the right place for this sort of question :)</p>\n</blockquote>\n<p>Thanks. That's really reassuring. When I looked at the channel, I was kind of scared because it seemed to be used for a bunch of advanced coordination well above my paygrade afkskfsk</p>",
        "id": 241452078,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1622753820
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/219381-t-libs/topic/Using.20weak!.20in.20fs.3A.3Ahard_link/near/241450309\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"417924\">Aris</span> I do think that <code>syscall!</code> would be the right answer here: use it from the library if available, otherwise make the syscall directly, and that way there's no need to ever call <code>link</code>.</p>\n</blockquote>\n<p>I'm kind of hesistant for a few reasons. This would mean special-casing Android, adding a new part of the <code>cfg_if!</code> just for it. I'd be doing that despite the fact that the current way of doing it, just using <code>link</code>, is working fine for Android. The other problem is that I've just pinged my reviewer and told them that the PR is ready for review again, before I saw this. I'm kind of worried I'll annoy them if I keep making changes to it. Maybe I'm worrying too much about that though.</p>",
        "id": 241453204,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1622754151
    },
    {
        "content": "<blockquote>\n<p>I was kind of scared because it seemed to be used for a bunch of advanced coordination well above my paygrade afkskfsk</p>\n</blockquote>\n<p>hehe, very relatable, but yea the libs team zulip stream is definitely for answering questions from contributors working on T-libs PRs as well as for coordination between teams</p>",
        "id": 241453718,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1622754342
    },
    {
        "content": "<p>we just get more of the latter</p>",
        "id": 241453757,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1622754355
    },
    {
        "content": "<blockquote>\n<p>I'm kind of worried I'll annoy them if I keep making changes to it. Maybe I'm worrying too much about that though.</p>\n</blockquote>\n<p>another thing to absolutely not be worried about, though I very much appreciate the care for maintainers this implies.</p>",
        "id": 242654068,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1623702061
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"417924\">@inquisitivecrystal</span> I just reviewed the PR / backlog of comments</p>",
        "id": 242654620,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1623702311
    },
    {
        "content": "<p>my current question is, does the <code>syscall!</code> version that mara and josh have suggested work on the older versions of MacOS that are having linker errors?</p>",
        "id": 242654957,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1623702480
    },
    {
        "content": "<p>and clarification question to make sure I understand the current state of things:</p>",
        "id": 242655021,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1623702493
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> your suggestion is that they use <code>weak!</code> and <code>linkat</code>and then use <code>syscall!</code> instead of <code>link</code>as the fallback?</p>",
        "id": 242655167,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1623702637
    },
    {
        "content": "<p>Yes. Use <code>linkat</code> if the symbol exists, use <code>syscall!</code> to call the <code>linkat</code> syscall as the fallback, never call <code>link</code>.</p>",
        "id": 242655347,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1623702727
    },
    {
        "content": "<p>(note that syscall!() already tries weak!() first)</p>",
        "id": 242657141,
        "sender_full_name": "Mara",
        "timestamp": 1623703688
    },
    {
        "content": "<p>so only use <code>syscall!</code> then</p>",
        "id": 242658254,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1623704309
    },
    {
        "content": "<p>which already does the fallback internally</p>",
        "id": 242658287,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1623704331
    },
    {
        "content": "<p>I'm a bit confused here.</p>",
        "id": 242663110,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1623707070
    },
    {
        "content": "<p>I'm happy to set it up in whatever way y'all would prefer.</p>",
        "id": 242663134,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1623707088
    },
    {
        "content": "<p>My understanding though is that <code>syscall!</code> would <em>not</em> work on the versions of macos that lack this symbol.</p>",
        "id": 242663278,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1623707166
    },
    {
        "content": "<p>The <a href=\"https://github.com/rust-lang/rust/blob/673d0db5e393e9c64897005b470bfeb6d5aec61b/library/std/src/sys/unix/weak.rs#L104\">syscall implementation that applies on macos</a> seems not to have any fallback; it just logs an error if the symbol isn't present.</p>",
        "id": 242663421,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1623707282
    },
    {
        "content": "<p>The situation where we could use <code>syscall!</code> is for android. The <a href=\"https://github.com/rust-lang/rust/blob/673d0db5e393e9c64897005b470bfeb6d5aec61b/library/std/src/sys/unix/weak.rs#L122\">syscall implementation that applies to Android</a> does do a fallback if the symbol isn't present, so I could do it in that case. The reason I'm hesitant is that the Android version already works fine no matter what (it isn't a problem to use <code>link</code> on Android, since it already has the desired behavior). If you want me to change Android to use <code>syscall!</code> instead of <code>link</code>, I can do that though.</p>",
        "id": 242663863,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1623707569
    },
    {
        "content": "<p>I don't think <code>syscall!</code> will work for macos though?</p>",
        "id": 242663899,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1623707603
    },
    {
        "content": "<p>oh. yeah, for macos, the <code>libc</code> crate doesn't expose any SYS_ constants it seems. (it does have a <code>syscall(..)</code> function though).</p>",
        "id": 242664146,
        "sender_full_name": "Mara",
        "timestamp": 1623707773
    },
    {
        "content": "<p>so yeah, for non-linux, syscall!() is pretty much identical to weak!() right now. :(</p>",
        "id": 242664193,
        "sender_full_name": "Mara",
        "timestamp": 1623707820
    },
    {
        "content": "<p>It's slightly worse, because it makes it harder to handle the error case. :/</p>",
        "id": 242664361,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1623707961
    },
    {
        "content": "<p>is there any particular reason we should be avoiding the <code>link</code> call as a fallback?</p>",
        "id": 242665029,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1623708423
    },
    {
        "content": "<p>Not on Android: there, the two are basically identical. On macos, it follows symlinks, which is unfortunate because we've tried to standardize on not following symlinks where possible. But there's no way to get that behavior on old macos, so following them is the least bad way to handle the situation.</p>",
        "id": 242665298,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1623708612
    },
    {
        "content": "<p>There's also the issue of what to do about tests. On old macos, the tests will fail after this PR. I could make macos skip the relevant test? But also, currently it won't even build, so the test failing is kind of an upgrade. I wish there was a way to skip it <em>only</em> on the macos versions that had this problem, but I don't think there is.</p>",
        "id": 242665535,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1623708763
    },
    {
        "content": "<p>Do you have any thoughts on how to proceed on this?</p>",
        "id": 243479531,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1624346241
    },
    {
        "content": "<p>I'm sorry to nag.</p>",
        "id": 243479535,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1624346245
    },
    {
        "content": "<p>you don't need to apologize, it's ok to resume unresolved conversations occasionally, it's in the nature of synchronous chat channels to quickly move on. :) it's also possible that the other participants here don't have anything to add at this time. perhaps you could leave a comment in <a href=\"https://github.com/rust-lang/rust/issues/85953\">#85953</a> briefly summarizing the current state and laying out the unresolved questions?</p>",
        "id": 243534452,
        "sender_full_name": "bstrie",
        "timestamp": 1624375942
    },
    {
        "content": "<p>I agree with <span class=\"user-mention\" data-user-id=\"256342\">@bstrie</span>, right now its a little hard to know the way forward, because as far as I can tell all the options we have leave something broken somewhere</p>",
        "id": 243567526,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1624390309
    },
    {
        "content": "<p>so knowing the options available and the exact tradeoffs we're weighing is probably the best way forward</p>",
        "id": 243567638,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1624390349
    },
    {
        "content": "<p>I'm more than happy to prepare something like that!</p>",
        "id": 243605855,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1624422315
    },
    {
        "content": "<p>I just posted <a href=\"https://github.com/rust-lang/rust/pull/85953#issuecomment-869467142\">a status report</a>. It's not as clear as I'd like it to be, but hopefully it'll get the job done. Let me know if there's anything I need to explain further!</p>",
        "id": 244113408,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1624867764
    },
    {
        "content": "<p>Hi! So, uhh... I'm trying to figure out how to import the <code>weak!</code> macro to use it in the test (over in <code>library/std/src/fs/tests.rs</code>). I cannot for the life of me figure out how to make that happen. It seems I don't really understand the principles underlying <code>#[macro_use]</code>.</p>",
        "id": 244769236,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625270277
    },
    {
        "content": "<p>Okay, I figured it out. Exactly how bad is it if I end up reordering module declarations in <code>std/src/lib.rs</code> so that I can use a macro from one module in the tests for another?</p>",
        "id": 244973647,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625518572
    },
    {
        "content": "<p>bleh, does declaration order matter for macros? is that also true if you use macros 2.0, which doesn't require macro_use?</p>",
        "id": 244973803,
        "sender_full_name": "bstrie",
        "timestamp": 1625518712
    },
    {
        "content": "<p>It does. I don't know how how anyone thought this was a good idea, but it must have seemed sensible at the time.</p>",
        "id": 244973936,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625518808
    },
    {
        "content": "<p>Uhh, actually, I could try that.</p>",
        "id": 244973939,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625518812
    },
    {
        "content": "<p>MBE 2.0 is available to std?</p>",
        "id": 244973973,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625518842
    },
    {
        "content": "<p>yep, std can use macros 2.0, and is even using them for some public macros in stable releases (<a href=\"https://doc.rust-lang.org/src/core/ptr/mod.rs.html#1526-1528\">https://doc.rust-lang.org/src/core/ptr/mod.rs.html#1526-1528</a>). And this isn't even a public item (right?), so there shouldn't be any worry about API stability</p>",
        "id": 244974149,
        "sender_full_name": "bstrie",
        "timestamp": 1625519003
    },
    {
        "content": "<p>Yeah, this macro is purely internal.</p>",
        "id": 244974226,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625519077
    },
    {
        "content": "<p>I think this is going to work.</p>",
        "id": 244974247,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625519104
    },
    {
        "content": "<p>let me know if it does, I'm eager to understand any existing limitations of macros 2.0</p>",
        "id": 244974269,
        "sender_full_name": "bstrie",
        "timestamp": 1625519134
    },
    {
        "content": "<p>It's not exactly on topic, but if you have the time to answer, what's blocking macros 2.0? What I got from the tracking issue was that there's some design work that still needs to be done that isn't getting done?</p>",
        "id": 244974369,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625519244
    },
    {
        "content": "<p>If you don't have time, I totally understand. :)</p>",
        "id": 244974599,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625519445
    },
    {
        "content": "<p>I'm not the best person to ask, but IIRC there are unresolved questions about how control over hygiene should be presented to the user. right now I'm trying to make progress by getting the compiler to dogfood macros 2.0, but reviews take time :P <a href=\"https://github.com/rust-lang/rust/pull/85690\">https://github.com/rust-lang/rust/pull/85690</a></p>",
        "id": 244974619,
        "sender_full_name": "bstrie",
        "timestamp": 1625519470
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 244974691,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625519530
    },
    {
        "content": "<p>so it's safe to use the feature, just understand that for now you might need to add an attribute to the macro definition if you find that its hygiene is too restrictive for your use case (macros 2.0 has stricter hygiene by default than macros 1.0)</p>",
        "id": 244974724,
        "sender_full_name": "bstrie",
        "timestamp": 1625519571
    },
    {
        "content": "<p>Hey, sorry to bother y'all. <a href=\"https://github.com/rust-lang/rust/issues/85953\">#85953</a> was just <code>r+</code>ed, which is great. I was kind of hoping to clean up the commit history before it got actually merged. I don't want to hold it up any further though...</p>",
        "id": 245230309,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625686050
    },
    {
        "content": "<p>Would someone be willing to do a quick <code>r+</code> again after I run an interactive rebase? If not, I can just leave it.</p>",
        "id": 245230439,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625686100
    },
    {
        "content": "<p>can do</p>",
        "id": 245231579,
        "sender_full_name": "The 8472",
        "timestamp": 1625686653
    },
    {
        "content": "<p>If possible please rebase on the same base commit, that should leave the github force-push view empty, makes it easier to review the delta.</p>",
        "id": 245232726,
        "sender_full_name": "The 8472",
        "timestamp": 1625687186
    },
    {
        "content": "<p>Same base commit?</p>",
        "id": 245232875,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625687267
    },
    {
        "content": "<p>As in, leave the commit before the first one I did the same? Or leave the first one I did the same?</p>",
        "id": 245232943,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625687287
    },
    {
        "content": "<blockquote>\n<p>As in, leave the commit before the first one I did the same? </p>\n</blockquote>\n<p>That.</p>",
        "id": 245232970,
        "sender_full_name": "The 8472",
        "timestamp": 1625687307
    },
    {
        "content": "<p>Sure thing!</p>",
        "id": 245233464,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625687551
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"417924\">@inquisitivecrystal</span> Sorry, I <em>did</em> see that note but forgot about it when I went to r+.</p>",
        "id": 245234765,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1625688154
    },
    {
        "content": "<p>It happens to all of us!</p>",
        "id": 245236872,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625689249
    },
    {
        "content": "<p>I have completed my commit cleanup. Thank you for giving me the chance to fix that. It was really bothering me.</p>",
        "id": 245237037,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625689339
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"330154\">@The 8472</span>! I really appreciate the help!</p>",
        "id": 245237142,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625689418
    },
    {
        "content": "<p>I just want to mention that someone is asking in <a href=\"https://github.com/rust-lang/rust/issues/80804\">#80804</a> which version of Rust this will be available in. A backport to beta may be worth considering, though that's not my call.</p>",
        "id": 245237498,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625689596
    },
    {
        "content": "<p>This failed in a rollup.</p>",
        "id": 245266664,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625711913
    },
    {
        "content": "<p>Platform specific imports. I'd imported something on a platform it shouldn't have been on.</p>",
        "id": 245266672,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625711932
    },
    {
        "content": "<p>I've fixed that problem, but it's very hard to me to tell if there will be more. I've cross compiled it locally to see if I could find any problems, and I haven't, but I also can't cross compile it for every system.</p>",
        "id": 245266763,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625712039
    },
    {
        "content": "<p><del>Could I maybe get someone to run a <code>try</code> for me?</del> Edit: Nevermind, someone had another suggestion.</p>",
        "id": 245266769,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625712054
    },
    {
        "content": "<p>I was just talking about this problem with someone in <a class=\"stream\" data-stream-id=\"122651\" href=\"/#narrow/stream/122651-general\">#general</a>, incidentally. Nothing particularly interesting, but the <a href=\"#narrow/stream/122651-general/topic/Lengthy.20bors.20runs/near/245262622\">discussion starts here</a> if you want to backread.</p>",
        "id": 245266833,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625712149
    },
    {
        "content": "<p>Yeah, I think the best thing to do is probably either run <code>try</code> and fix problems until it works or `r+ rollup=never\" it. I tested it on all the platforms I could figure out how to cross compile to. There may be problems on another platform or two, but it can't be that many tries until we catch all of them.</p>",
        "id": 245276098,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625725331
    },
    {
        "content": "<p>I could try another approach? I could maybe just <code>#[allow(unused_imports)]</code> and not worry about the platforms? I'm worried that I'd end up messing things up in some other way, but that may be irrational. Let me know if you'd prefer that.</p>",
        "id": 245276256,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625725527
    },
    {
        "content": "<p>I'm very sorry for all the trouble.</p>",
        "id": 245276326,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625725603
    },
    {
        "content": "<blockquote>\n<p>#[allow(unused_imports)]</p>\n</blockquote>\n<p>That's discouraged, but you could do a <code>#[cfg_attr(not(osx), allow(unusued_imports))]</code> (paraphrasing). Or move the imports into the function itself.</p>",
        "id": 245278036,
        "sender_full_name": "The 8472",
        "timestamp": 1625727481
    },
    {
        "content": "<p>As a side note, it's possible for someone to delegate bors access to you for one issue, which would let you try repeatedly on that issue.</p>",
        "id": 245278397,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1625727758
    },
    {
        "content": "<p>Also, yeah, you don't really want to use unused imports. Even though it means more work, we do prefer cfg directives on each item.</p>",
        "id": 245278441,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1625727824
    },
    {
        "content": "<p>I honestly figured you wouldn't trust me enough delegate for the PR. I am pretty new and all.</p>",
        "id": 245279084,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625728320
    },
    {
        "content": "<p>If I were on an evil quest to destroy the rust project (I'm not), I could conceivably do some damage with it.</p>",
        "id": 245279338,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625728468
    },
    {
        "content": "<p>Of course, if you do decide to delegate to me, I'll be sure to be especially trustworthy. :)</p>",
        "id": 245279698,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625728783
    },
    {
        "content": "<p>Okay, the try worked.</p>",
        "id": 245359879,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625772521
    },
    {
        "content": "<p>I'm not sure that's very meaningful though. I had gotten the impression that try ran it on all the platforms, but it's seeming like that might not be the case?</p>",
        "id": 245360065,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625772604
    },
    {
        "content": "<p>If I'm reading <a href=\"https://github.com/rust-lang/rust/blob/master/.github/workflows/ci.yml#L528-L532\">this</a> right, try runs only on <code>x86_64-linux</code>, as opposed to a real run, which runs on <a href=\"https://github.com/rust-lang/rust/blob/master/.github/workflows/ci.yml#L157-L422\">everything under the sun</a>.</p>",
        "id": 245360355,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625772727
    },
    {
        "content": "<p>I'm kind of hoping I'm reading it wrong.</p>",
        "id": 245360443,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625772770
    },
    {
        "content": "<p>If I did request something unhelpful, I apologize.</p>",
        "id": 245360711,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625772905
    },
    {
        "content": "<p>In either case, the next step would be to run a a real <code>r+</code>. I can do that now that it's delegated, but I won't until someone gives me the go-ahead. I might suggest <code>rollup=never</code> if the try might not have covered everything.</p>",
        "id": 245360948,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625773031
    },
    {
        "content": "<p>Well, if nothing else comes about this, I'm going to come out of it with a lot better understanding of how the CI works. :)</p>",
        "id": 245361171,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625773152
    },
    {
        "content": "<p>You mean you need need someone to r+ proper use of delegated r+? :P</p>\n<p>More seriously, you <em>could</em> modify the CI script to test the platforms you want. But at that seems like overkill just to test a few lines of <code>cfg</code>s to shut up linters. So just using the delegated rights you have been given seems fairly safe. Afaik you should use <code>r=joshtripplet</code> though so bors records him as original approver.</p>",
        "id": 245370917,
        "sender_full_name": "The 8472",
        "timestamp": 1625777737
    },
    {
        "content": "<p>Will do! Thanks for the reminder!</p>",
        "id": 245371789,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625778144
    },
    {
        "content": "<p>It failed again, though it got a lot closer to finishing this time.</p>",
        "id": 245388537,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625791243
    },
    {
        "content": "<p>Temporarily rejiggering the try config is looking increasingly tempting. It's faster and it doesn't block the queue.</p>",
        "id": 245388562,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625791283
    },
    {
        "content": "<p>It is a bit silly for such a small change though.</p>",
        "id": 245388610,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625791327
    },
    {
        "content": "<p>Will I bother anyone if I do it that way?</p>",
        "id": 245388662,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625791429
    },
    {
        "content": "<p>I'd undo it fully before the final version, of course.</p>",
        "id": 245388703,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625791450
    },
    {
        "content": "<p>my guess is you might want to <code>r-</code> the PR before you do that, so the modified CI config won't get accidentally merged?</p>",
        "id": 245388837,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1625791610
    },
    {
        "content": "<p>I would, yeah.</p>",
        "id": 245388992,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625791763
    },
    {
        "content": "<p>I'm going for it. I'll post an explanatory comment in thread.</p>",
        "id": 245389010,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625791793
    },
    {
        "content": "<p>It's fine to add one or two builders to the PR matrix, just don't add all 60.</p>",
        "id": 245389020,
        "sender_full_name": "Eric Huss",
        "timestamp": 1625791801
    },
    {
        "content": "<p>Definitely r- first. :)</p>",
        "id": 245389077,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1625791818
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"417924\">@inquisitivecrystal</span> Just wanted to reassure you that you're doing it right. :)</p>",
        "id": 245389084,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1625791828
    },
    {
        "content": "<p>It's definitely intimidating to Invoke Ye Olde CI Machinery the first few times.</p>",
        "id": 245389101,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1625791854
    },
    {
        "content": "<p>And you will end up breaking a rollup at some point, but that happens, and nobody's going to bite your head off about it. :)</p>",
        "id": 245389118,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1625791880
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120518\">Eric Huss</span> <a href=\"#narrow/stream/219381-t-libs/topic/Using.20weak!.20in.20fs.3A.3Ahard_link/near/245389020\">said</a>:</p>\n<blockquote>\n<p>It's fine to add one or two builders to the PR matrix, just don't add all 60.</p>\n</blockquote>\n<p>Why not?</p>",
        "id": 245389230,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625791989
    },
    {
        "content": "<p>We have limited CI capacity, once it hits the cap it would block all other builders.</p>",
        "id": 245389314,
        "sender_full_name": "Eric Huss",
        "timestamp": 1625792050
    },
    {
        "content": "<p>Alright. So, if I need to run this against all unix systems, you're saying it's better to do that via <code>r=</code> than <code>try</code>?</p>",
        "id": 245389360,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625792132
    },
    {
        "content": "<p>Also, in practice, a couple of additional platforms gives you the test matrix you need. In this case, you need some macOS platforms.</p>",
        "id": 245389365,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1625792137
    },
    {
        "content": "<p>Do the platforms run in order?</p>",
        "id": 245389385,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625792162
    },
    {
        "content": "<p>They run somewhat in parallel.</p>",
        "id": 245389427,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1625792174
    },
    {
        "content": "<p>Alright.</p>",
        "id": 245389444,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625792197
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"417924\">@inquisitivecrystal</span> If you genuinely needed \"all unix systems\" that'd be a different matter, but most of the time you need a subset to get an idea. Once a subset passes, it's reasonable to start throwing it at r+ to see about merging it.</p>",
        "id": 245389445,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1625792200
    },
    {
        "content": "<p>Looking at the last run, it looks like almost all the Unix jobs finished.</p>",
        "id": 245389458,
        "sender_full_name": "Eric Huss",
        "timestamp": 1625792224
    },
    {
        "content": "<p>It was just the macos one that failed.</p>",
        "id": 245389466,
        "sender_full_name": "Eric Huss",
        "timestamp": 1625792235
    },
    {
        "content": "<p>if it were me, i'd add a few likely-to-break platforms, see if they pass under <code>try</code>, then revert the CI change and do the full run with an <code>r+</code> and see what else breaks. but i'm not a team member, so you shouldn't take my word for it :)</p>",
        "id": 245389477,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1625792254
    },
    {
        "content": "<p>Alrighty!</p>",
        "id": 245389544,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625792292
    },
    {
        "content": "<p>(oops, looks like i basically said what Josh said)</p>",
        "id": 245389562,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1625792319
    },
    {
        "content": "<p>Josh, thank you for the reassurance a bit earlier. This process is pretty confusing and a bit scary scary the first time through it, and I really appreciate all the advice and support.</p>",
        "id": 245389678,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625792421
    },
    {
        "content": "<p>Thank you everyone else for you advice as well.</p>",
        "id": 245389713,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625792453
    },
    {
        "content": "<p>Rust has been the most friendly open source project I've gotten to contribute to, and I appreciate everyone for helping to make it that way. <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 245389811,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625792540
    },
    {
        "content": "<p>Okay, the try finally passed!</p>",
        "id": 245404810,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625810948
    },
    {
        "content": "<p>Commit etiquette question: is it better to leave a seperate commit with the changes I did to make the build work, or merge them in where they logically belong? I'm inclined to do the later, since there aren't really any substantive changes for a reviewer to look at.</p>",
        "id": 245404932,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625811096
    },
    {
        "content": "<p>I think I'll keep them as a separate commit, just because that's probably less controversial. I'll finish things up tomorrow.</p>",
        "id": 245419240,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625821854
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"417924\">@inquisitivecrystal</span> Merging them into the relevant commit is ideal, but not required. Rust doesn't have a hard requirement that every single commit builds and passes tests, the way some projects do.</p>",
        "id": 245463993,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1625847576
    },
    {
        "content": "<p>When people bisect Rust, they commonly bisect merges only, not every commit.</p>",
        "id": 245464076,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1625847610
    },
    {
        "content": "<p>Alright, I'll do that then!</p>",
        "id": 245532589,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625897648
    },
    {
        "content": "<p>I also have some good news. <a href=\"https://github.com/rust-lang/rust/issues/86968\">#86968</a>, another news of mine, was merged. It fixes the bug that required adding that empty documentation.  I can remove those horrible<code>#[doc = \"\"]</code>attributes now.</p>",
        "id": 245532734,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625897935
    },
    {
        "content": "<p>I'm glad. I never felt great about those.</p>",
        "id": 245532751,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625897977
    },
    {
        "content": "<p>I've rebased onto master, stripping out those attributes and merging the commits together sensibly. I've also gotten rid of those temporary changes to the CI.</p>",
        "id": 245532889,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625898155
    },
    {
        "content": "<p>It probably sounds like a lot, but none of it is substantive.</p>",
        "id": 245532890,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625898178
    },
    {
        "content": "<p>And... the documentation thing doesn't seem to be working.</p>",
        "id": 245533690,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625899512
    },
    {
        "content": "<p><em>sighs deeply</em></p>",
        "id": 245533694,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625899517
    },
    {
        "content": "<p>I wrote tests.</p>",
        "id": 245533695,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625899520
    },
    {
        "content": "<p>Oh!</p>",
        "id": 245533698,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625899544
    },
    {
        "content": "<p>Bootstrapping!</p>",
        "id": 245533700,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625899550
    },
    {
        "content": "<p>They need to stay in till the next release cycle. Alright.</p>",
        "id": 245533752,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625899605
    },
    {
        "content": "<p>you can put a <code>#![cfg_attr(bootstrap, ...)]</code> on it</p>",
        "id": 245533772,
        "sender_full_name": "The 8472",
        "timestamp": 1625899669
    },
    {
        "content": "<p>Not much point. It's a hack, but that if anything makes it more messy.</p>",
        "id": 245533820,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625899704
    },
    {
        "content": "<p>it lets people know that something can be removed later</p>",
        "id": 245533834,
        "sender_full_name": "The 8472",
        "timestamp": 1625899733
    },
    {
        "content": "<p>I can yank it later myself, but if you really think it's a good idea I can do it?</p>",
        "id": 245533904,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625899828
    },
    {
        "content": "<p>May as well at least test it to see that it works...</p>",
        "id": 245533907,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625899839
    },
    {
        "content": "<p>Ahh well, if it's the best practice I should just do it.</p>",
        "id": 245534087,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625900097
    },
    {
        "content": "<p>It removes <em>your memory</em> as a dependency.</p>",
        "id": 245534404,
        "sender_full_name": "isHavvy",
        "timestamp": 1625900634
    },
    {
        "content": "<p>What, you're not comfortable with the fate of the Rust project depending solely on my memory? ;)</p>",
        "id": 245534472,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625900720
    },
    {
        "content": "<p>Also, consider it done.</p>",
        "id": 245534476,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625900738
    },
    {
        "content": "<p>What if the League of Unsafe Programming Languages sends an assassin?</p>",
        "id": 245534734,
        "sender_full_name": "The 8472",
        "timestamp": 1625901084
    },
    {
        "content": "<p>You're right. This is a safety issue.</p>",
        "id": 245534792,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625901146
    },
    {
        "content": "<p>Specifically, my safety from assasins.</p>",
        "id": 245534799,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625901160
    },
    {
        "content": "<p>Alright, rebasing and editing complete, and I've force pushed.</p>",
        "id": 245535945,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625902763
    },
    {
        "content": "<p>I'll <code>r=</code> in a bit.</p>",
        "id": 245536040,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625902923
    },
    {
        "content": "<p><code>r=</code>ed. Fingers crossed it actually builds this time.</p>",
        "id": 245537366,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625904903
    },
    {
        "content": "<p>I just realized that, if this is backported, it's going to need the <code>doc</code> attribute added unconditionally. But if the libs team approves a backport, I can deal with that then.</p>",
        "id": 245537443,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625904972
    },
    {
        "content": "<p>It would probably be best to  edit it to drop some of the nonessential changes anyway, to minimize the amount of code that's being backported and thus minimizw the possibility of problems. Easy enough to do this at the same time.</p>",
        "id": 245537522,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625905168
    },
    {
        "content": "<p>Actually, now that I think about it, the change to <code>weak!</code> is in itself nonessential. One would probably just drop that, making the whole issue irrelevant.</p>",
        "id": 245537649,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625905334
    }
]