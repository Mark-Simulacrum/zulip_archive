[
    {
        "content": "<p>Do we have some clear rules when to add an <code>#[inline]</code> attribute to functions? <code>#[inline(always)]</code> and <code>#[inline(never)]</code> are only justified if there are good reasons (preferably benchmarks) to believe they improve performance/code size. The plain <code>#[inline]</code> on the other hand seems more confusing. \"yes for non-generic functions\", \"sometimes also for generic functions\", ...</p>\n<p>Do we have a clear, precise guide on this?</p>",
        "id": 187753679,
        "sender_full_name": "Lukas Kalbertodt",
        "timestamp": 1581243302
    },
    {
        "content": "<p>IIRC <span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> was usually the go-to person on it, but we never wrote up clear guidelines.</p>\n<p>My understanding is that:</p>\n<ul>\n<li><code>#[inline]</code> on a generic function is usually not the right idea, these are already available for inlining to LLVM</li>\n<li><code>#[inline]</code> on a non-generic function makes it available for inlining to LLVM by codegening into downstream modules (i.e., has compile time overheads</li>\n<li><code>#[inline(always)]</code> should pretty much never be used, at least in std, as it can bloat binaries and we usually don't know our downstream users that well (unlike downstream crates, where they might know that some function is only used in one place and should get inlined).</li>\n<li><code>#[inline(never)]</code> should also pretty much never be used in std, for similar reasons; modulo e.g. panic machinery where we mark it <code>#[cold]</code> and <code>#[inline(never)]</code> often.</li>\n</ul>",
        "id": 187760444,
        "sender_full_name": "simulacrum",
        "timestamp": 1581257837
    },
    {
        "content": "<p>IIRC <code>#[inline]</code> does increase the inlining priority of a generic function, so it can make sense to use there in some contexts, but you'd generally better have a good reason to do it.</p>",
        "id": 187763167,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1581263478
    },
    {
        "content": "<p>Yes, it does. But usually we want to leave it to LLVM to decide that in std, at least, since it \"knows better\" in some sense -- mostly I think because std is used in everyone's code, so we need to be careful about things more so than random libraries</p>",
        "id": 187763639,
        "sender_full_name": "simulacrum",
        "timestamp": 1581264266
    },
    {
        "content": "<p>IIRC alex also based that advice on the idea that everyone will just use LTO all the time, which the default cargo profile.release doesn't actually do.</p>",
        "id": 187766537,
        "sender_full_name": "Lokathor",
        "timestamp": 1581270039
    },
    {
        "content": "<p>thinlto is enabled by default</p>",
        "id": 187766618,
        "sender_full_name": "simulacrum",
        "timestamp": 1581270242
    },
    {
        "content": "<p>you don't need full lto for these benefits afaik</p>",
        "id": 187766645,
        "sender_full_name": "simulacrum",
        "timestamp": 1581270249
    },
    {
        "content": "<p>and it's fine for us to be not at 100% perf due to missing annotations if lto is not enabled</p>",
        "id": 187766648,
        "sender_full_name": "simulacrum",
        "timestamp": 1581270265
    },
    {
        "content": "<p>people who want 100% perf imo should be using a custom profile and possibly even -Zbuild-std and so forth</p>",
        "id": 187766650,
        "sender_full_name": "simulacrum",
        "timestamp": 1581270287
    },
    {
        "content": "<p>The documentation states that thinlto is only between codegen units, not between crates.</p>",
        "id": 187766998,
        "sender_full_name": "Lokathor",
        "timestamp": 1581271078
    },
    {
        "content": "<p>that's true, but generics and #[inline] things get codegen'd into your crate</p>",
        "id": 187767117,
        "sender_full_name": "simulacrum",
        "timestamp": 1581271270
    },
    {
        "content": "<p>So for generic function <code>#[inline]</code> increases the inlining priority, but it still doesn't force it to be inlined? I used to think that <code>#[inline]</code> on a generic function did nothing, but I could have misunderstood</p>",
        "id": 187772062,
        "sender_full_name": "Tim Vermeulen",
        "timestamp": 1581281092
    },
    {
        "content": "<p>My understanding is that it also boosts some LLVM heuristic</p>",
        "id": 187772580,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1581282067
    },
    {
        "content": "<p>Yes, it both makes the item available for inlining (already true of generics) and bosts an llvm heuristic</p>",
        "id": 187772963,
        "sender_full_name": "simulacrum",
        "timestamp": 1581282829
    },
    {
        "content": "<p>However, also keep in mind that rustc's codegen strategies have become more nuanced over time. For example, there's now a mode (-Zshare-generics) that reuses monomorphizations already created in dependencies where possible, though it's only enabled by default at opt-level={0,1,s,z} today. So the old heuristic \"generic = available for inlining everywhere\" no longer necessarily holds.</p>",
        "id": 187774021,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1581284711
    },
    {
        "content": "<p>Yes, I think we don't care about non-opt-level=3 performance <em>that</em> much, in practice, but that's definitely true :)</p>",
        "id": 187818240,
        "sender_full_name": "simulacrum",
        "timestamp": 1581343880
    },
    {
        "content": "<p>The last I wrote up (I think?) about inlining stuff is at <a href=\"https://github.com/rust-lang/hashbrown/pull/119\" target=\"_blank\" title=\"https://github.com/rust-lang/hashbrown/pull/119\">https://github.com/rust-lang/hashbrown/pull/119</a>. Basically what was said previously is correct. You never need <code>#[inline(always)]</code> unless it's like an ABI thing. You probably don't ever need <code>#[inline(never)]</code> unless you actually see LLVM making wrong decisions (we could probably remove <code>#[inline(never)]</code> from <code>#[cold]</code> functions, those attributes are likely basically synonymous). You also basically never need <code>#[inline]</code> unless benchmarks show differently.</p>\n<p>There's legitimate cases you need <code>#[inline]</code> such as tiny functions that aren't otherwise inlined, but I'd still recommend waiting for a benchmark to show anything before actually applying <code>#[inline]</code>. The downside of <code>#[inline]</code> is that increases compile times, and if you add it <em>everywhere</em> it can actually lead to very noticeable increases in compile time.</p>",
        "id": 187831451,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1581351997
    },
    {
        "content": "<p>There is documentation that KodrAus added to the libs team docs on forge, I don't how much of that matches the current discussion though. <a href=\"https://forge.rust-lang.org/libs/maintaining-std.html#is-that-inline-right\" target=\"_blank\" title=\"https://forge.rust-lang.org/libs/maintaining-std.html#is-that-inline-right\">https://forge.rust-lang.org/libs/maintaining-std.html#is-that-inline-right</a></p>",
        "id": 187832459,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1581352640
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> So why almost all the user facing functions in std have inline attributes?</p>",
        "id": 187902819,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1581419748
    },
    {
        "content": "<p>Many of them were likely added from benchmarks, though some look to be at least plausibly wrong</p>",
        "id": 187907408,
        "sender_full_name": "simulacrum",
        "timestamp": 1581424596
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"249222\">@Elichai Turkel</span> agreed with <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span>, they're probably either erroneous, justified by a benchmark since forgotten, or added at a time it was more necessary than it is today. Consistency is definitely not a quality anyone would label libstd's usage of <code>#[inline]</code> as</p>",
        "id": 187934281,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1581442733
    },
    {
        "content": "<p>There are times when even debug performance can also be a concern, perhaps some of them are from that.</p>",
        "id": 187935570,
        "sender_full_name": "Lokathor",
        "timestamp": 1581443553
    },
    {
        "content": "<p>Does <code>#[inline]</code> do anything with <code>opt-level=0</code>?</p>",
        "id": 187954367,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1581454823
    },
    {
        "content": "<p>We explicitly currently do not optimize for debug performance in the standard library, generally speaking.</p>\n<p>I am not sure about opt-level=0 and inline.</p>",
        "id": 187954639,
        "sender_full_name": "simulacrum",
        "timestamp": 1581454927
    },
    {
        "content": "<p>opt-level=0 doesn't run the inlining pass (only AlwaysInliner), but I believe it still <em>in general</em> has to codegen inline functions in crates using them, so code size and build times get worse for no benefit. Maybe upstream instances can be reused, if they exist and are exported, but as one often links release builds of libstd, libcore, etc. and copies of inline functions are internalized in normal release mode...</p>",
        "id": 187955298,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1581455263
    },
    {
        "content": "<p>Hmm, unfortunate</p>",
        "id": 187959029,
        "sender_full_name": "Lokathor",
        "timestamp": 1581457360
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219747\">@Simon Sapin</span> in <code>opt-level=0</code> mode as <span class=\"user-mention\" data-user-id=\"124289\">@Hanna Kruppe</span> pointed out the inliner isn't even run, but the <code>inlinehint</code> LLVM attribute <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=b10ec97edc60b0634bfc06cea9e1cdf8\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=b10ec97edc60b0634bfc06cea9e1cdf8\">is indeed added</a>. Additionally in release mode <code>#[inline]</code> causes translation into every single CGU, whereas in debug mode <a href=\"https://github.com/rust-lang/rust/blob/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src/librustc/mir/mono.rs#L87\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src/librustc/mir/mono.rs#L87\">we do not do that and only translate into one CGU</a>. Effectively, it's entirely ignored. (this is distinct from <code>#[inline(always)]</code>)</p>",
        "id": 187968842,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1581465228
    }
]