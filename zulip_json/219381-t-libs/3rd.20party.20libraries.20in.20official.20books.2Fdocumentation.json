[
    {
        "content": "<p>hey, we're working on the error handling book and in our last meeting we wanted to know if we should / shouldn't mention 3rd party crates in  our examples</p>",
        "id": 228818338,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614880073
    },
    {
        "content": "<p>or if we should include recommendations</p>",
        "id": 228818362,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614880083
    },
    {
        "content": "<p>do we have any policy on this?</p>",
        "id": 228818468,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614880104
    },
    {
        "content": "<p>generally speaking we do not want to mention 3rd party crates, especially anywhere where you would be tempted to enumerate if someone said 'but what about Y'</p>",
        "id": 228818823,
        "sender_full_name": "simulacrum",
        "timestamp": 1614880260
    },
    {
        "content": "<p>we mention the <code>dirs</code> crate as a replacement for env::home_dir, but i think this has honestly been something of a mistake:</p>\n<ul>\n<li>that crate was the source of a bunch of drama last year and was briefly abandoned or something</li>\n<li>for the non-home dir use case, it makes some (subtly) opinionated choices (CLI tools on macos putting config and such things in ~/Library is not common or often desirable...)</li>\n</ul>\n<p>that said, for error handling, perhaps it's hard to avoid...</p>",
        "id": 228820533,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1614880861
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"209168\">Thom Chiovoloni</span> <a href=\"#narrow/stream/219381-t-libs/topic/3rd.20party.20libraries.20in.20official.20books.2Fdocumentation/near/228820533\">said</a>:</p>\n<blockquote>\n<p>that said, for error handling, perhaps it's hard to avoid...</p>\n</blockquote>\n<p>Yea, this is sort of the key concern</p>",
        "id": 228821522,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614881232
    },
    {
        "content": "<p>my feeling is a lot of rust's approach to error handling revolves around encouraging 3rd party error handling library usage</p>",
        "id": 228821608,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614881279
    },
    {
        "content": "<p>like, the expectation is that you'll need something more complex and specific to your application than what std could hope to provide</p>",
        "id": 228821719,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614881305
    },
    {
        "content": "<blockquote>\n<p>especially anywhere where you would be tempted to enumerate if someone said 'but what about Y'</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> so my approach to this historically has been to not gatekeep what can be listed</p>",
        "id": 228821834,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614881345
    },
    {
        "content": "<p>so we could in theory have a chapter just documenting the various error handling libraries out there, and make it so anyone could add theirs to the list</p>",
        "id": 228821886,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614881366
    },
    {
        "content": "<p>tho I could see that going sideways here</p>",
        "id": 228821897,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614881373
    },
    {
        "content": "<p>even just in the form of choice overload</p>",
        "id": 228821920,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614881382
    },
    {
        "content": "<p>The challenge is that fundamentally you <em>are</em> forced to gatekeep just by virtue of someone developing a new crate not knowing they can or not feeling like they want to be on that list. Plus, even \"attempted\" exhaustivity still implies endorsement, you can't get around that. It's definitely a hard problem!</p>",
        "id": 228822237,
        "sender_full_name": "simulacrum",
        "timestamp": 1614881482
    },
    {
        "content": "<p>yea</p>",
        "id": 228822409,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614881543
    },
    {
        "content": "<p>Mentioning stuff in a dedicated book on the topic feels fine. it actually would probably be pretty conspicuous to fail to mention 3rd party crates in an error handling book...</p>\n<p>I think mentioning them in the stdlib docs is more dubious, although I'm not sure I can fully defend this distinction beyond: I suspect the stdlib docs would get stale much more quickly and is less likely to keep up to date on changes here.</p>\n<p>That said, yeah it's tricky since it's hard to cover everybody's crate, and these things change over time. <code>failure</code>'s deprecated now after all, but was the new hotness for quite a while.</p>",
        "id": 228822620,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1614881640
    },
    {
        "content": "<p>yea</p>",
        "id": 228822728,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614881674
    },
    {
        "content": "<p>maybe we could survey the error handling crates that currently exist, classify them, and then describe them indirectly</p>",
        "id": 228822850,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614881733
    },
    {
        "content": "<p>One question I have - do you think there could be a single crate endorsed? e.g. is there a solution that's likely good to get started with?</p>",
        "id": 228822852,
        "sender_full_name": "simulacrum",
        "timestamp": 1614881733
    },
    {
        "content": "<p>\"you'll find error handling crates that act like a dyn error and they work like this\"</p>",
        "id": 228822872,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614881742
    },
    {
        "content": "<p>rather than \"check out anyhow or eyre\"</p>",
        "id": 228822884,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614881748
    },
    {
        "content": "<p>Complete agreement here: we shouldn't try to list error-handling crates.</p>",
        "id": 228823020,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1614881779
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/219381-t-libs/topic/3rd.20party.20libraries.20in.20official.20books.2Fdocumentation/near/228822852\">said</a>:</p>\n<blockquote>\n<p>One question I have - do you think there could be a single crate endorsed? e.g. is there a solution that's likely good to get started with?</p>\n</blockquote>\n<p>for some specific problems I'd say yes but for the main ones people need these libraries for no, there's competing solutions still</p>",
        "id": 228823031,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614881783
    },
    {
        "content": "<p>thiserror vs snafu</p>",
        "id": 228823039,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614881786
    },
    {
        "content": "<p>anyhow vs eyre</p>",
        "id": 228823071,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614881796
    },
    {
        "content": "<p>Hm, I think that can work, but I think there a ton of value in specifying a default choice. We may not be able to do that yet though.</p>",
        "id": 228823102,
        "sender_full_name": "simulacrum",
        "timestamp": 1614881805
    },
    {
        "content": "<p>and many more crates that I don't personally use so cant even easily recall</p>",
        "id": 228823113,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614881808
    },
    {
        "content": "<p>which is part of the problem no doubt</p>",
        "id": 228823116,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614881812
    },
    {
        "content": "<p>One thing I think we could safely do would be to say \"here's a category on <a href=\"http://crates.io\">crates.io</a>, you might find some useful crates in that category, we're not endorsing any particular crate\".</p>",
        "id": 228823152,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1614881828
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/219381-t-libs/topic/3rd.20party.20libraries.20in.20official.20books.2Fdocumentation/near/228823152\">said</a>:</p>\n<blockquote>\n<p>One thing I think we could safely do would be to say \"here's a category on <a href=\"http://crates.io\">crates.io</a>, you might find some useful crates in that category, we're not endorsing any particular crate\".</p>\n</blockquote>\n<p>yea, and if we do it in a way thats easily searchable we could possibly reach out to crates and be like \"hey we think you should add this category here's a PR\"</p>",
        "id": 228823204,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614881856
    },
    {
        "content": "<p>I think starting by trying to talk about the pattern is good though.</p>",
        "id": 228823223,
        "sender_full_name": "simulacrum",
        "timestamp": 1614881869
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/219381-t-libs/topic/3rd.20party.20libraries.20in.20official.20books.2Fdocumentation/near/228823102\">said</a>:</p>\n<blockquote>\n<p>Hm, I think that can work, but I think there a ton of value in specifying a default choice.</p>\n</blockquote>\n<p>I agree with this but part of my feeling is that we can't really do that unless that default choice is part of the stdlib (and if it's really a \"default choice\", I think it's easy to argue that it should be).</p>",
        "id": 228823244,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1614881875
    },
    {
        "content": "<p>and kinda organize the ecosystem a bit and then let the ecosystem carry that forward</p>",
        "id": 228823247,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614881876
    },
    {
        "content": "<p>for the most part I don't think any of the defaults will win specifically</p>",
        "id": 228823376,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614881907
    },
    {
        "content": "<p>Well, std also implies stability - whereas defaults can change over time</p>",
        "id": 228823379,
        "sender_full_name": "simulacrum",
        "timestamp": 1614881909
    },
    {
        "content": "<p>I can see an error derive going into std</p>",
        "id": 228823395,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614881915
    },
    {
        "content": "<p>I personally hope that one day there are two standard error-handling solutions in the standard library, one that's a \"smarter grab-bag dyn Error with downcasting\" like anyhow/eyre, and one that's a \"generate enum variants\" like thiserror.</p>",
        "id": 228823409,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1614881923
    },
    {
        "content": "<p>but I don't see one of the error derive libraries becoming a defacto winner that everyone uses</p>",
        "id": 228823428,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614881930
    },
    {
        "content": "<p>But if there's not obvious defaults, I think going with patterns to start is my recommendation</p>",
        "id": 228823437,
        "sender_full_name": "simulacrum",
        "timestamp": 1614881934
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> I was pushing towards getting an anyhow/eyre like into std but my conversation with mara made me reconsider</p>",
        "id": 228823502,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614881958
    },
    {
        "content": "<p>I don't think that pointing to a category on <a href=\"http://crates.io\">crates.io</a> is sufficient. Even if we can't pick <em>one</em>, the book should at least go into some detail on one or two specific crates, and indicate that others exist (and possibly name them)</p>",
        "id": 228823512,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614881962
    },
    {
        "content": "<p>But I don't think the ecosystem is ready for such a step yet, personally, <em>especially</em> because we're talking about evolving Error (with some kind of dynamically attachable properties), and we'd need to give time for people to explore the resulting design space.</p>",
        "id": 228823555,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1614881975
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/219381-t-libs/topic/3rd.20party.20libraries.20in.20official.20books.2Fdocumentation/near/228823512\">said</a>:</p>\n<blockquote>\n<p>I don't think that pointing to a category on <a href=\"http://crates.io\">crates.io</a> is sufficient. Even if we can't pick <em>one</em>, the book should at least go into some detail on one or two specific crates, and indicate that others exist (and possibly name them)</p>\n</blockquote>\n<p>If we'd done that a few years ago, we'd have pointed to crates like failure, or quick_error, both of which are no longer generally considered the right choice.</p>",
        "id": 228823707,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1614882015
    },
    {
        "content": "<p>Okay, that happens... update the book</p>",
        "id": 228823771,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614882035
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/219381-t-libs/topic/3rd.20party.20libraries.20in.20official.20books.2Fdocumentation/near/228823771\">said</a>:</p>\n<blockquote>\n<p>Okay, that happens... update the book</p>\n</blockquote>\n<p>that's costly because most ppl wont read the book twice</p>",
        "id": 228823805,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614882051
    },
    {
        "content": "<p>so the official endorsement lingers</p>",
        "id": 228823851,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614882062
    },
    {
        "content": "<p>I think I lean towards not naming any 3rd party libs</p>",
        "id": 228823947,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614882096
    },
    {
        "content": "<p>Talking about error handling in the abstract is less useful than talking about any particular crate</p>",
        "id": 228824018,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614882122
    },
    {
        "content": "<p>it doesn't even matter which one, consider it a \"running example\" if you like</p>",
        "id": 228824132,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614882144
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/219381-t-libs/topic/3rd.20party.20libraries.20in.20official.20books.2Fdocumentation/near/228824018\">said</a>:</p>\n<blockquote>\n<p>Talking about error handling in the abstract is less useful than talking about any particular crate</p>\n</blockquote>\n<p>we would still allude to them and describe them</p>",
        "id": 228824135,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614882145
    },
    {
        "content": "<p>like, we'd describe 3rd party libraries, and show how <code>anyhow</code> works essentially</p>",
        "id": 228824166,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614882161
    },
    {
        "content": "<p>and probably mention that there are many error derive macros</p>",
        "id": 228824192,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614882173
    },
    {
        "content": "<p>and maybe show a mock-up of what they look like as if std provided one (not sure on this idea)</p>",
        "id": 228824240,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614882192
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/219381-t-libs/topic/3rd.20party.20libraries.20in.20official.20books.2Fdocumentation/near/228824132\">said</a>:</p>\n<blockquote>\n<p>it doesn't even matter which one, consider it a \"running example\" if you like</p>\n</blockquote>\n<p>funny that you mention running example, because that's exactly how we planned on doing this, where we have multiple examples that each share a crate that we build up over each example</p>",
        "id": 228824348,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614882236
    },
    {
        "content": "<p>well, \"exactly how we planned\"</p>",
        "id": 228824440,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614882255
    },
    {
        "content": "<p>as in vaguely mentioned during one of our meetings</p>",
        "id": 228824453,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614882261
    },
    {
        "content": "<p>lol</p>",
        "id": 228824459,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614882261
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> We could always give an abstract example. \"Suppose we have an error-handling library, <code>airneyhow</code>, which provides <code>airneyhow::Error</code>...\"</p>",
        "id": 228824737,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1614882361
    },
    {
        "content": "<p>loool</p>",
        "id": 228824830,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614882380
    },
    {
        "content": "<p>Or would that be putting on airs? :)</p>",
        "id": 228824892,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1614882404
    },
    {
        "content": "<p>banned</p>",
        "id": 228824916,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614882416
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/219381-t-libs/topic/3rd.20party.20libraries.20in.20official.20books.2Fdocumentation/near/228824166\">said</a>:</p>\n<blockquote>\n<p>like, we'd describe 3rd party libraries, and show how <code>anyhow</code> works essentially</p>\n</blockquote>\n<p>Hopefully you just mean in the abstract.</p>\n<p>Concretely going into the implementation should be out of scope IMO: It's nontrivial to write correctly while following our current \"best guess\" of the rust aliasing model (see <a href=\"https://github.com/dtolnay/anyhow/pull/134\">https://github.com/dtolnay/anyhow/pull/134</a>). However, covering this endorses the current aliasing model in ways that may be undesirable for official docs, given that it's still a work in progress and subject to change.</p>\n<p>It's also probably more complex than any of the bits in the nomicon...</p>",
        "id": 228824947,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1614882428
    },
    {
        "content": "<blockquote>\n<p>Hopefully you just mean in the abstract.</p>\n</blockquote>\n<p>oh yea, it will forsure be simplified</p>",
        "id": 228825041,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614882460
    },
    {
        "content": "<p>none of the manual vtable stuff</p>",
        "id": 228825056,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614882464
    },
    {
        "content": "<p>yeh, i'd avoid it using unsafe if possible. (P.S. IIRC eyre started as a fork of anyhow, and you might want to see if you can apply that patch/something like it if you weren't already aware. I think the version on anyhow master has safer wrappers for some of that stuff too)</p>",
        "id": 228826157,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1614882872
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/219381-t-libs/topic/3rd.20party.20libraries.20in.20official.20books.2Fdocumentation/near/228823020\">said</a>:</p>\n<blockquote>\n<p>Complete agreement here: we shouldn't try to list error-handling crates.</p>\n</blockquote>\n<p>Definitely agreed here, because I don't know any way to resolve what feels like inevitable drama in from people making PRs to add mentions of their own libraries.</p>\n<p>I like the \"link to a <a href=\"http://crates.io\">crates.io</a> tag\" approach.</p>",
        "id": 228826210,
        "sender_full_name": "scottmcm",
        "timestamp": 1614882897
    },
    {
        "content": "<p>I checked, and I don't see any relevant <a href=\"http://crates.io\">crates.io</a> category, which would be ideal.</p>",
        "id": 228827213,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1614883303
    },
    {
        "content": "<p>It might make sense to add a category, and send PRs to the current generation of error-handling crates, which would have the advantage of not listing historical ones.</p>",
        "id": 228827319,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1614883330
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"209168\">Thom Chiovoloni</span> <a href=\"#narrow/stream/219381-t-libs/topic/3rd.20party.20libraries.20in.20official.20books.2Fdocumentation/near/228826157\">said</a>:</p>\n<blockquote>\n<p>yeh, i'd avoid it using unsafe if possible. (P.S. IIRC eyre started as a fork of anyhow, and you might want to see if you can apply that patch/something like it if you weren't already aware. I think the version on anyhow master has safer wrappers for some of that stuff too)</p>\n</blockquote>\n<p>already added to my todo list as soon as you linked that PR</p>",
        "id": 228830724,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614884586
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/219381-t-libs/topic/3rd.20party.20libraries.20in.20official.20books.2Fdocumentation/near/228827319\">said</a>:</p>\n<blockquote>\n<p>It might make sense to add a category, and send PRs to the current generation of error-handling crates, which would have the advantage of not listing historical ones.</p>\n</blockquote>\n<p>for what it's worth I think there shouldn't be just 1 tag</p>",
        "id": 228830866,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614884641
    },
    {
        "content": "<p>I was imagining like 5 / 6 tags</p>",
        "id": 228830912,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614884647
    },
    {
        "content": "<p>error-reporting, error-reacting, error-defining, error-propagating</p>",
        "id": 228830955,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614884660
    },
    {
        "content": "<p>etc</p>",
        "id": 228830959,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614884661
    },
    {
        "content": "<p>oh no no friend, on <a href=\"http://crates.io\">crates.io</a> we use :: as the sub-sepatator</p>",
        "id": 228848165,
        "sender_full_name": "Lokathor",
        "timestamp": 1614891064
    },
    {
        "content": "<p>for whatever reason, that's not a joke</p>",
        "id": 228848222,
        "sender_full_name": "Lokathor",
        "timestamp": 1614891089
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/219381-t-libs/topic/3rd.20party.20libraries.20in.20official.20books.2Fdocumentation/near/228848165\">said</a>:</p>\n<blockquote>\n<p>oh no no friend, on <a href=\"http://crates.io\">crates.io</a> we use :: as the sub-sepatator</p>\n</blockquote>\n<p>noted,</p>",
        "id": 228863580,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614897515
    },
    {
        "content": "<p>i haven't read the entire thread, but i would like to express that i am perhaps a bit more sympathetic to the idea of including either recommendations or specific examples of third party crates in \"official\" docs. i am, of course, also extremely sympathetic to the problems induced by doing such things. it does have a lot of potential to go bad. in general, the reason why i'm sympathetic to the idea of doing it is that it seems like something users would ultimately appreciate. if the alternative is using more generic language and contorting ourselves somewhat just to avoid mentioning an existing solution because it's third party, then that doesn't sound like a good position to be in IMO. because now it means folks reading these materials need to do their own translation step between the stuff provided in the docs and how to apply it to the actual crate they'll use. in essence, this prevents us from using one of the most effective educational techniques: providing real concrete examples that users can apply directly and expect to have it work.</p>",
        "id": 228956753,
        "sender_full_name": "BurntSushi",
        "timestamp": 1614952619
    },
    {
        "content": "<p>solving the problems caused by having third party libraries mentioned in official materials seems difficult or perhaps even impossible. i have no illusions about that. i think what it might come down to is which problems we would rather have. personally, i think i would rather have the problems associated with having third party crates in official materials than the problem of producing official materials that aren't as good as they can be. i think the latter problem has a broader reach. but i recognize that this is a bit wishy washy...</p>",
        "id": 228957186,
        "sender_full_name": "BurntSushi",
        "timestamp": 1614952768
    },
    {
        "content": "<p>The other thing that could maybe help is to have some somewhat object criterion</p>",
        "id": 229010860,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1614972595
    },
    {
        "content": "<p>as in, we take the 3 most popular (as measured by recent downloads on <a href=\"http://crates.io\">crates.io</a> at some point of time) crates from the error handling category</p>",
        "id": 229010957,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1614972620
    },
    {
        "content": "<p>that way you can endorse common options without having to mess with a long list of candidates, and you only have to revise it if there's actually a new contender that's sufficiently popular</p>",
        "id": 229011043,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1614972660
    },
    {
        "content": "<p>Another option, if we do decide it's important to have a specific example, is to pick <em>one</em> thing that's considered to be an up-to-date choice, use that as an example, and add appropriate disclaimers in a few places saying \"this is one example, using the xyz crate; there are many other crates available via <a href=\"http://crates.io\">crates.io</a> (in such-and-such category), and this shouldn't be taken as a recommendation for one crate over another\".</p>",
        "id": 229011887,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1614972981
    },
    {
        "content": "<p>I believe we've had some negative experiences in the past with pointing to any specific crates, but if we're going to do so, I think it'd be reasonable to just pick something and make it clear it was a semi-arbitrary choice.</p>",
        "id": 229012070,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1614973061
    },
    {
        "content": "<p>That makes it less likely people will send in PRs adding their own crates, because we aren't providing a list, we're giving one example.</p>",
        "id": 229012137,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1614973086
    },
    {
        "content": "<p>(And people can add their own crates by using the appropriate category on <a href=\"http://crates.io\">crates.io</a>, and <a href=\"http://crates.io\">crates.io</a> gives appropriate statistics so people can gauge recency, popularity, etc.)</p>",
        "id": 229012207,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1614973114
    },
    {
        "content": "<p>it is a mild recommendation of one over another. that's just how it goes. you've taught the user how to use that crate and they don't yet have knowledge of how to use the others and so now it has an advantage.</p>\n<p><em>but that is okay</em></p>\n<p>We actually <em>want</em> people to have a shared vocabulary for things in the ecosystem and if someone wants to make an alternative way to do X <em>and have everyone adopt it</em> then they should make their new way clearly enough better to justify people moving over.</p>",
        "id": 229013099,
        "sender_full_name": "Lokathor",
        "timestamp": 1614973456
    },
    {
        "content": "<p>Like if someone makes a serialization library, they better have a very good story for how it's better than <code>serde</code> if they want people to use it. That reason can be whatever they want to have it be. Maybe the new lib has less features and then builds twice as fast, that would be neat.</p>",
        "id": 229013640,
        "sender_full_name": "Lokathor",
        "timestamp": 1614973690
    },
    {
        "content": "<p>And anyone can still use their own crate all they want to do that. But if you're asking other people to spend their time to override ecosystem inertia, then you genuinely need to articulate <em>why</em> people should try the new thing.</p>",
        "id": 229013830,
        "sender_full_name": "Lokathor",
        "timestamp": 1614973794
    },
    {
        "content": "<p>--signed, a dummy who actually does almost exclusively use his own crates for near everything, and sometimes other people also use his crates, and sometimes not.</p>",
        "id": 229014051,
        "sender_full_name": "Lokathor",
        "timestamp": 1614973874
    },
    {
        "content": "<p>There isn't even a category for error handling on <a href=\"http://crates.io\">crates.io</a></p>",
        "id": 229037120,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614984316
    },
    {
        "content": "<p>we should probably fix that first</p>",
        "id": 229037132,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614984319
    },
    {
        "content": "<p>okay hows this for a plan, create an announcment about how we plan to write the book, including referencing 3rd party crates, and how we're going to pick them. Essentially tell everyone who wants their crate considered to add the correct new category to their crate</p>",
        "id": 229037244,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614984369
    },
    {
        "content": "<p>then in the book itself preface the section with concrete examples with an explanation that we're going to use specific 3rd party libraries but we're not specifically endorsing them, and re-explain the method we used to pick them, and that we will periodically check if we should update examples to other crates that have become the defacto standard by our established metric.</p>",
        "id": 229037380,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614984444
    },
    {
        "content": "<p>I think just keeping the book up to date with current trends is more important than the part where you disclaim any possible endorsement, but otherwise that all sounds fine.</p>",
        "id": 229040365,
        "sender_full_name": "Lokathor",
        "timestamp": 1614986037
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> that sounds okay. it will also give folks outside the libs team to weigh in on that decision. so we might phrase it as, \"as of now, we are planning on doing X, but we welcome feedback on X.\"</p>\n<p>also, i think it's a bit weasely to say, \"we picked this crate for reason foo, it's important enough to show examples of it, show how to use it and incorporate it into this really important topic, buuuuuuuut we don't endorse it.\" with that said, i understand why we might want to say something like that. maybe we could just doubly emphasize that it is a third party crate and not controlled by the libs team. (although, confusingly, it may be maintained by a libs team member... hah.)</p>",
        "id": 229040441,
        "sender_full_name": "BurntSushi",
        "timestamp": 1614986065
    },
    {
        "content": "<p>Undigested thought: For some reason it feels to me far more reasonable for a <em>book</em> to mention 3rd party crates than for the <em>reference docs</em> to do so.</p>\n<p>That's a bit self-contradictory, though, so I'm trying to figure out why.  Maybe it's because it's more normal for a book to be a \"voice of the author\", and thus fundamentally at least slightly subjective anyway.  Maybe it's because there's always the possibility of writing an additional book from a different perspective -- like an \"error handling in embedded\" book or something would be fine too, and probably talk about rather different things.  Whereas there's only one \"these are the reference docs for the error trait\", making it more impersonal and conflicty.</p>",
        "id": 229045022,
        "sender_full_name": "scottmcm",
        "timestamp": 1614988902
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> fwiw the error handling book is intended to be more like a book than a reference</p>",
        "id": 229045663,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614989331
    },
    {
        "content": "<p>we've been planning on avoiding duplication of information as much as we reasonably can and cross linking to the reference / book / whatever else is relevant as much as we can</p>",
        "id": 229045754,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614989391
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> Yeah, I had missed the \"book\" part of the topic when I made my original post in the thread, so wanted to add some nuance to it.</p>\n<p>In long form \"telling a story\" there's way more space for nuance and alternatives than, say, what can reasonably fit in an Examples section of a rustdoc entry.</p>",
        "id": 229047043,
        "sender_full_name": "scottmcm",
        "timestamp": 1614990204
    },
    {
        "content": "<p>Gotcha</p>",
        "id": 229047119,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614990247
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/219381-t-libs/topic/3rd.20party.20libraries.20in.20official.20books.2Fdocumentation/near/229045022\">said</a>:</p>\n<blockquote>\n<p>Undigested thought: For some reason it feels to me far more reasonable for a <em>book</em> to mention 3rd party crates than for the <em>reference docs</em> to do so.</p>\n</blockquote>\n<p>Yeah, I feel the same way basically (and said as much <a href=\"#narrow/stream/219381-t-libs/topic/3rd.20party.20libraries.20in.20official.20books.2Fdocumentation/near/228822620\">https://rust-lang.zulipchat.com/#narrow/stream/219381-t-libs/topic/3rd.20party.20libraries.20in.20official.20books.2Fdocumentation/near/228822620</a> ). Rust books often have the author voice show through, and are less serious than the official docs (for example: the nomicon, despite the serious subject matter)</p>\n<p>A big hesitation I have here is: how to decide when to remove a recommendation of a crate from the book because it's gone out of style (as happened with error_chain and failure in the past). Short of official deprecation or notice of lack of maintenance, it seems much easier to add stuff than remove stuff, which seems bad... Or are we okay with it referring to crates past the point when they're actually the best recommendations?</p>\n<p>The other, lager one, is: I really think we should avoid the situation where we explicitly \"bless\" a single crate as the solution to a problem again, as I know for a fact that last time the stdlib did this, it did discourage people from producing alternatives, despite it not exactly being a solved problem that fits perfectly in all cases. This was for sure unintentional, but we should learn from it.</p>\n<p>A way to avoid that (without hitting the problem <span class=\"user-mention\" data-user-id=\"222471\">@BurntSushi</span> mentioned where we avoid committing to anything) might just be to mention more than one crate when describing solutions... For something like error handling perhaps this isn't as much of a risk though, as it's easier to see that theres no one-size-fits-all solution. I also think being in a book alleviates the issue as well, but it's worth trying to avoid.</p>",
        "id": 229062620,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1615004127
    }
]