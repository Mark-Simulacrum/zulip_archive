[
    {
        "content": "<p>It appears as like currently <code>Pin&lt;Arc&lt;T&gt;&gt;</code> is not that useful, since it's not possible to get <code>Pin&lt;&amp;mut T&gt;</code> in safe code. Is it desirable to add pinned versions of <code>get_mut</code> and <code>make_mut</code> to arc?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Arc</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">get_mut_pin</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">this</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Pin</span><span class=\"o\">&lt;</span><span class=\"n\">Arc</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">Pin</span><span class=\"o\">&lt;&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// Safety: Pin is `repr(transparent)` and we don't move the value behind arc</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">unpin</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Arc</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">mem</span>::<span class=\"n\">transmute</span><span class=\"p\">(</span><span class=\"n\">this</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">reference</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Arc</span>::<span class=\"n\">get_mut</span><span class=\"p\">(</span><span class=\"n\">unpin</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"c1\">// Safety: Arc is pinned</span>\n<span class=\"w\">        </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">Pin</span>::<span class=\"n\">new_unchecked</span><span class=\"p\">(</span><span class=\"n\">reference</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">make_mut_pin</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">this</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Pin</span><span class=\"o\">&lt;</span><span class=\"n\">Arc</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Pin</span><span class=\"o\">&lt;&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">T</span>: <span class=\"nb\">Clone</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// Safety: Pin is `repr(transparent)` and we don't move the value behind arc</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">unpin</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Arc</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">mem</span>::<span class=\"n\">transmute</span><span class=\"p\">(</span><span class=\"n\">this</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">reference</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Arc</span>::<span class=\"n\">make_mut</span><span class=\"p\">(</span><span class=\"n\">unpin</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"c1\">// Safety: Arc is pinned</span>\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">Pin</span>::<span class=\"n\">new_unchecked</span><span class=\"p\">(</span><span class=\"n\">reference</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=2b8669a1bf55f4a7831e31bf4b5532d2\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=2b8669a1bf55f4a7831e31bf4b5532d2</a></p>",
        "id": 266680073,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1641212579
    },
    {
        "content": "<p><code>Arc::make_mut</code> moves the <code>T</code> if there's a single <code>Arc</code> and at least one <code>Weak</code> pointing to that allocation, so the implementation of <code>make_mut_pin</code> is unsound</p>",
        "id": 266681629,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1641213788
    },
    {
        "content": "<p>Oh, thanks for pointing this out. We can still add <code>get_mut_pin</code> and/or also implement <code>make_mut_pin</code> is a sound way (it seems like we just need to copy <code>make_mut</code> and remove the move-when-only-weaks optimization), right?</p>",
        "id": 266688325,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1641218329
    },
    {
        "content": "<p>In general, <code>!Unpin + Clone</code> is kind of an antipattern: if something is self-referential, then it shouldn't be <code>Clone</code>able, unless the newly created instance had a way to feature a \"dangling\" sentinel to put instead of the self-reference:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span>::<span class=\"n\">core</span>::<span class=\"n\">marker</span>::<span class=\"n\">PhantomPinned</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">PinSensitive</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">SelfRef</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">buf</span>: <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">1_024</span><span class=\"p\">],</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">thing</span>: <span class=\"nc\">ptr</span>::<span class=\"n\">NonNull</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">_may_be_selfref</span>: <span class=\"nc\">PinSensitive</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// Use a non-ZST static to be able to use ptr-eq to check for dangliness.</span>\n<span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">DANGLING_SENTINEL</span>: <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"s\">b\"&lt;dangling&gt;\"</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Clone</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">SelfRef</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">clone</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"bp\">self</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">_</span> <span class=\"nc\">SelfRef</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">      </span>-&gt; <span class=\"nc\">SelfRef</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">buf</span>: <span class=\"nc\">self</span><span class=\"p\">.</span><span class=\"n\">buf</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">thing</span>: <span class=\"nc\">DANGLING_SENTINEL</span><span class=\"p\">.</span><span class=\"n\">as_slice</span><span class=\"p\">().</span><span class=\"n\">into</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">_may_be_self_ref</span>: <span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"o\">&gt;</span>::<span class=\"n\">default</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>So, with that in mind; are <code>make_mut_pin</code> -like APIs that necessary?</p>",
        "id": 266743046,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1641248150
    },
    {
        "content": "<p>(Maybe a <code>FixSelfRefs</code> kind of extra trait taking a <code>Pin&lt;&amp;mut Self&gt;</code> would make sense for such situations <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span>)</p>",
        "id": 266743455,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1641248521
    },
    {
        "content": "<p>Well, I only have a use case for a <code>get_mut_pin</code>, so maybe <code>make_mut_pin</code> is unnecessary <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 266791573,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1641292129
    },
    {
        "content": "<p>And just for context: my use case is something like the following</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">shared</span>: <span class=\"nc\">Arc</span><span class=\"o\">&lt;</span><span class=\"n\">Mutex</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">Stream</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Sync</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Unpin</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.;</span><span class=\"w\"></span>\n\n<span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">Arc</span>::<span class=\"n\">get_mut</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">shared</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"c1\">// avoid locking when we are the only owned of the stream</span>\n<span class=\"w\">    </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">unique</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">stream</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">unique</span><span class=\"p\">.</span><span class=\"n\">get_mut</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// pin &amp; use stream</span>\n<span class=\"w\">    </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">None</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">stream</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">unique</span><span class=\"p\">.</span><span class=\"n\">lock</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// pin &amp; use stream</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>i.e. I want to remove the <code>Unpin</code> bound and just pin the arc instead.<br>\n*I actually use a different type from <code>Mutex</code>, and it needs a pin projection too, but this is a different topic</p>",
        "id": 266792687,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1641292880
    },
    {
        "content": "<p>That code would only replace a single atomic compare exchange with an atomic load at the cost of an extra potentially mispredicted branch. Uncontexted mutexes are locked using a single atomic compare exchange. No interaction with the kernel needed.</p>",
        "id": 266793918,
        "sender_full_name": "bjorn3",
        "timestamp": 1641293708
    },
    {
        "content": "<p>Well, I need to check if the <code>Arc</code> is unique for other reasons anyway, so I can as well use it, to remove the lock, I guess <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 266863937,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1641330704
    },
    {
        "content": "<p>Actually, now I'm wandering if <code>Mutex</code> can have a <code>lock_pin</code> method?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">lock_pin</span><span class=\"p\">(</span><span class=\"bp\">self</span>: <span class=\"nc\">Pin</span><span class=\"o\">&lt;&amp;</span><span class=\"n\">Mutex</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">LockResult</span><span class=\"o\">&lt;</span><span class=\"n\">Pin</span><span class=\"o\">&lt;</span><span class=\"n\">MutexGuard</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cm\">/* ... */</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 266877861,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1641338322
    },
    {
        "content": "<p>yeah that's a general problem with Pin. it's kind of 'viral' like that. there's a lot of methods that could have a pin-variant.</p>",
        "id": 266939972,
        "sender_full_name": "Mara",
        "timestamp": 1641391991
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"273349\">Waffle Lapkin</span> <a href=\"#narrow/stream/219381-t-libs/topic/pinned.20.60.7Bget.2Cmake.7D_mut.60.20for.20.60Arc.60.3F/near/266877861\">said</a>:</p>\n<blockquote>\n<p>Actually, now I'm wandering if <code>Mutex</code> can have a <code>lock_pin</code> method?</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">lock_pin</span><span class=\"p\">(</span><span class=\"bp\">self</span>: <span class=\"nc\">Pin</span><span class=\"o\">&lt;&amp;</span><span class=\"n\">Mutex</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">LockResult</span><span class=\"o\">&lt;</span><span class=\"n\">Pin</span><span class=\"o\">&lt;</span><span class=\"n\">MutexGuard</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cm\">/* ... */</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>this specific function would be problematic though. it makes the pinning of the <code>T</code> inside the <code>Mutex&lt;T&gt;</code> <a href=\"https://doc.rust-lang.org/stable/std/pin/index.html#pinning-is-structural-for-field\">structural</a>. however, a <code>Mutex&lt;T&gt;</code> that's pinned in place (e.g. leaked or a static one (once we make Mutex::new const)) can still give out <code>&amp;mut</code> references to the <code>T</code> inside, allowing you to move/replace that <code>T</code>.</p>",
        "id": 266940777,
        "sender_full_name": "Mara",
        "timestamp": 1641392461
    },
    {
        "content": "<p>this already compiles fine today:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Box</span>::<span class=\"n\">pin</span><span class=\"p\">(</span><span class=\"n\">Mutex</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">PhantomPinned</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">m</span><span class=\"p\">.</span><span class=\"n\">lock</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">PhantomPinned</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 266941615,
        "sender_full_name": "Mara",
        "timestamp": 1641392980
    },
    {
        "content": "<p>A pinning version of Mutex that doesn't have any lock method for <code>&amp;Self</code>, but only one for <code>Pin&lt;&amp;Self&gt;</code> (returning <code>Pin&lt;&amp;mut T&gt;</code>) ought to be sound though, right? I couldn't find any existing version of such a thing in a crate.</p>",
        "id": 266941893,
        "sender_full_name": "Frank Steffahn",
        "timestamp": 1641393124
    },
    {
        "content": "<p>sure. it's just that <code>Pin&lt;&amp;T&gt;</code> will always get you a <code>&amp;T</code> safely. so <code>Pin&lt;&amp;T&gt;</code> vs <code>&amp;T</code> is not as meaningful as <code>Pin&lt;&amp;mut T&gt;</code> vs <code>&amp;mut T</code>. (but it can still be useful. see also a huge amount of discussion <a href=\"https://github.com/rust-lang/rust/issues/78186\">here</a>.)</p>",
        "id": 266942148,
        "sender_full_name": "Mara",
        "timestamp": 1641393259
    },
    {
        "content": "<p>Thanks for the link. I love the name <code>MutexThatGetsVeryAngryIfItIsMoved</code> <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 266943077,
        "sender_full_name": "Frank Steffahn",
        "timestamp": 1641393802
    },
    {
        "content": "<p>also known as pthread_mutex_t</p>",
        "id": 266943824,
        "sender_full_name": "Mara",
        "timestamp": 1641394191
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310399\">Mara</span> <a href=\"#narrow/stream/219381-t-libs/topic/pinned.20.60.7Bget.2Cmake.7D_mut.60.20for.20.60Arc.60.3F/near/266942148\">said</a>:</p>\n<blockquote>\n<p>sure. it's just that <code>Pin&lt;&amp;T&gt;</code> will always get you a <code>&amp;T</code> safely. so <code>Pin&lt;&amp;T&gt;</code> vs <code>&amp;T</code> is not as meaningful as <code>Pin&lt;&amp;mut T&gt;</code> vs <code>&amp;mut T</code>.</p>\n</blockquote>\n<p>Oh, I didn't know this. Right, the <code>Deref</code> impl for <code>Pin</code> doesn't require <code>P::Target: Unpin</code>. That's a little weird with respect to interiour mutability, but good to know. The consequence of this is that types that allow going from <code>&amp;W&lt;T&gt;</code> to <code>&amp;mut T</code> (mutex, rwlock, etc) can never simultaneously allow structural pinning in the form of <code>Pin&lt;&amp;W&lt;T&gt;&gt; -&gt; Pin&lt;&amp;mut T&gt;</code>.</p>\n<p>So the only solution to keeping one type and allowing structural pinning is moving \"Is expected to be pinned?\" into a type parameter. Like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Mutex</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Unpinned</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">lock_pin</span><span class=\"p\">(</span><span class=\"bp\">self</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Mutex</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Unpinned</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">LockResult</span><span class=\"o\">&lt;</span><span class=\"n\">MutexGuard</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cm\">/* ... */</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Mutex</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Pinned</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">lock_pin</span><span class=\"p\">(</span><span class=\"bp\">self</span>: <span class=\"nc\">Pin</span><span class=\"o\">&lt;&amp;</span><span class=\"n\">Mutex</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Pinned</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">LockResult</span><span class=\"o\">&lt;</span><span class=\"n\">Pin</span><span class=\"o\">&lt;</span><span class=\"n\">MutexGuard</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cm\">/* ... */</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Which to me seems weird, considering that usually using <code>Pin</code> doesn't require having an additional type param...</p>\n<p>Also, thanks for the link to the discussion, it was an interesting read.</p>",
        "id": 267111216,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1641501555
    },
    {
        "content": "<p>Honestly, now I'm even more confused about <code>Pin</code>...</p>",
        "id": 267111289,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1641501597
    },
    {
        "content": "<blockquote>\n<p>So the only solution to keeping one type and allowing structural pinning is moving \"Is expected to be pinned?\" into a type parameter.</p>\n</blockquote>\n<p>Or just make a separate PinMutex type.</p>",
        "id": 267122873,
        "sender_full_name": "Mara",
        "timestamp": 1641507467
    }
]