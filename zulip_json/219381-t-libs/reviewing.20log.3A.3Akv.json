[
    {
        "content": "<p>Hey all! We've had an unstable API for structured logging in the log crate for some time now. I think it's almost ready to stabilize (just have one open PR to get over the line) but would love an API review from Libs and anybody who wants to check it out. Would anybody here be up for a run through via Zoom sometime in the next week or two?</p>",
        "id": 202507185,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1593559276
    },
    {
        "content": "<p>I'd be happy to look over the API.</p>",
        "id": 202529970,
        "sender_full_name": "Amanieu",
        "timestamp": 1593577886
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> <span aria-label=\"bow\" class=\"emoji emoji-1f647\" role=\"img\" title=\"bow\">:bow:</span> I’m just waiting on a stabilization PR in <code>rust-lang</code> that rounds out some features in <code>log</code> then it should be ready to go</p>",
        "id": 202553479,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1593599699
    },
    {
        "content": "<p>There is one point I am not sure from that, how does one preserve the context for key value logging? If the same key value is used in multiple places, so it needs to be repeated?</p>\n<p>Also, looking at the code it does seemed complicated. I didn't know it will be so complicated at first.</p>",
        "id": 203816658,
        "sender_full_name": "pickfire",
        "timestamp": 1594721265
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"225422\">@pickfire</span> I believe most of the complexity comes from not forcing any allocations whatsoever: every value is passed by reference and converted into a <code>log::kv::Value</code> which doesn't have any inherent cost associated with it.</p>",
        "id": 203946330,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1594814841
    },
    {
        "content": "<p>(hoping I got that right haha)</p>",
        "id": 203946338,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1594814847
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"225422\">@pickfire</span> not sure I follow your first question though: what do you mean by \"used in multiple places, so it needs to be repeated\"? -- like multiple log statements referencing the same values?</p>",
        "id": 203946414,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1594814883
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211722\">@Yoshua Wuyts</span> Yes, sort of like some scoping.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">a</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">log</span>::<span class=\"n\">info</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;hello&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"nc\">x</span><span class=\"w\"> </span><span class=\"p\">});</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">b</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">b</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">log</span>::<span class=\"n\">info</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;world&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"nc\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span>: <span class=\"nc\">y</span><span class=\"w\"> </span><span class=\"p\">});</span><span class=\"w\">  </span><span class=\"c1\">// repeated structure</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>I also wonder if there is any way to buffer the log and flush it once at the end of each task. This is useful when running multiple threads but wanting to read the logs in a single threaded version since it is easier to read.</p>",
        "id": 204078234,
        "sender_full_name": "pickfire",
        "timestamp": 1594903936
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"225422\">@pickfire</span> there's nothing really stopping anyone from building a logger that does exactly that — at least from <code>log</code>'s perspective</p>",
        "id": 204078492,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1594904091
    },
    {
        "content": "<p>But how about the other thing I mentioned? So it needs to be duplicated for log from a low level perspective?</p>",
        "id": 204078583,
        "sender_full_name": "pickfire",
        "timestamp": 1594904156
    },
    {
        "content": "<p>Also, can it supports <code>log::info!(\"hello\", { x })</code> as an alias to <code>log::info!(\"hello\", { x: x })</code>?</p>",
        "id": 204078671,
        "sender_full_name": "pickfire",
        "timestamp": 1594904189
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"225422\">@pickfire</span> There is a fair bit going on in there, especially inside the <code>Value</code> struct, but I've been thinking of hoisting <code>Value</code> out into its own crate somewhere, because there's some interest from the <code>tracing</code> folks in using it too.</p>",
        "id": 204148616,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1594936626
    },
    {
        "content": "<p>There are so many things we could do with macros, like also letting you associate a <code>impl std::error::Error</code> explicitly</p>",
        "id": 204148767,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1594936726
    }
]