[
    {
        "content": "<p>The <a href=\"https://doc.rust-lang.org/std/sync/mpsc/struct.TryIter.html\">TryIter</a> for mpsc::Receiver yields <code>None</code> for either of 2 conditions:</p>\n<ul>\n<li>\n<p>The sending end of the channel disconnected<br>\n<strong>OR</strong></p>\n</li>\n<li>\n<p>The channel is empty</p>\n</li>\n</ul>\n<p>This obscurity makes it impossible for consumers of the iterator to detect if/when the channel is disconnected, and thus impossible to properly react if the channel gets disconnected.</p>\n<p>There should also be an iterator for <code>Receiver</code> whose <code>Item</code> type is <code>Result&lt;T,std::sync::mpsc::RecvError&gt;</code>, so that disconnects can be detected.</p>",
        "id": 203208778,
        "sender_full_name": "chabing",
        "timestamp": 1594159220
    },
    {
        "content": "<p>I think you could use <code>iter::from_fn</code> to approximate this, at least</p>",
        "id": 203209190,
        "sender_full_name": "cuviper",
        "timestamp": 1594159448
    },
    {
        "content": "<p>Yes, there are possible workarounds. But this should be addressed in the standard library because of the double-meaning of <code>None</code></p>",
        "id": 203209439,
        "sender_full_name": "chabing",
        "timestamp": 1594159627
    },
    {
        "content": "<p>which would you map to the iterator's <code>None</code>, empty or disconnected?</p>",
        "id": 203209483,
        "sender_full_name": "cuviper",
        "timestamp": 1594159669
    },
    {
        "content": "<p>Empty would go to <code>None</code>. Iterators should only use None when they are empty, not overload its meaning.</p>",
        "id": 203209693,
        "sender_full_name": "chabing",
        "timestamp": 1594159804
    },
    {
        "content": "<p>Plus, <a href=\"https://doc.rust-lang.org/std/sync/mpsc/struct.RecvError.html\">RecvError</a> already exists</p>",
        "id": 203209751,
        "sender_full_name": "chabing",
        "timestamp": 1594159858
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">try_iter</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">receiver</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Receiver</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">TryRecvError</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">&#39;_</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">std</span>::<span class=\"n\">iter</span>::<span class=\"n\">from_fn</span><span class=\"p\">(</span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">receiver</span><span class=\"p\">.</span><span class=\"n\">try_recv</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">TryRecvError</span>::<span class=\"n\">Empty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">other</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 203209759,
        "sender_full_name": "cuviper",
        "timestamp": 1594159865
    },
    {
        "content": "<p>oh, I didn't map to <code>RecvError</code>, but that's easy enough</p>",
        "id": 203209805,
        "sender_full_name": "cuviper",
        "timestamp": 1594159919
    },
    {
        "content": "<p>I know it can be worked around, but my point is that the current try_recv is flawed.</p>",
        "id": 203209946,
        "sender_full_name": "chabing",
        "timestamp": 1594160021
    },
    {
        "content": "<p>One sec, I'll make an example</p>",
        "id": 203209957,
        "sender_full_name": "chabing",
        "timestamp": 1594160031
    },
    {
        "content": "<p><code>mpsc</code> is considered flawed in general...</p>",
        "id": 203209971,
        "sender_full_name": "cuviper",
        "timestamp": 1594160041
    },
    {
        "content": "<p>maybe this should be proposed for <code>crossbeam-channel</code></p>",
        "id": 203210021,
        "sender_full_name": "cuviper",
        "timestamp": 1594160058
    },
    {
        "content": "<p>Oh, how is it generally flawed? Should I be using something else?</p>",
        "id": 203210027,
        "sender_full_name": "chabing",
        "timestamp": 1594160065
    },
    {
        "content": "<p>there's some background here: <a href=\"https://stjepang.github.io/2019/03/02/new-channels.html\">https://stjepang.github.io/2019/03/02/new-channels.html</a></p>",
        "id": 203210057,
        "sender_full_name": "cuviper",
        "timestamp": 1594160097
    },
    {
        "content": "<p>Some links embedded from there:<br>\nregrets: <a href=\"https://github.com/rust-lang/rust/pull/42397#issuecomment-315867774\">https://github.com/rust-lang/rust/pull/42397#issuecomment-315867774</a><br>\nknown panic: <a href=\"https://github.com/rust-lang/rust/issues/39364\">https://github.com/rust-lang/rust/issues/39364</a></p>",
        "id": 203210258,
        "sender_full_name": "cuviper",
        "timestamp": 1594160233
    },
    {
        "content": "<p>and also this topic: <a href=\"#narrow/stream/219381-t-libs/topic/Replacing.20mpsc/near/197012164\">https://rust-lang.zulipchat.com/#narrow/stream/219381-t-libs/topic/Replacing.20mpsc/near/197012164</a></p>",
        "id": 203210369,
        "sender_full_name": "cuviper",
        "timestamp": 1594160308
    },
    {
        "content": "<p>What should I do then? I need this functionality for what I'm doing</p>",
        "id": 203210623,
        "sender_full_name": "chabing",
        "timestamp": 1594160491
    },
    {
        "content": "<p>Should I use some external crate or just do the above workaround?</p>",
        "id": 203210701,
        "sender_full_name": "chabing",
        "timestamp": 1594160532
    },
    {
        "content": "<p><code>crossbeam-channel</code> is a pretty safe bet. <code>flume</code> is a newer alternative.</p>",
        "id": 203210996,
        "sender_full_name": "cuviper",
        "timestamp": 1594160759
    },
    {
        "content": "<p>regardless, I don't think any of them have the exact iterator you want</p>",
        "id": 203211083,
        "sender_full_name": "cuviper",
        "timestamp": 1594160811
    },
    {
        "content": "<p>but it may be faster to get it added to those external crates, if only to avoid <code>std</code> stabilization delays</p>",
        "id": 203211129,
        "sender_full_name": "cuviper",
        "timestamp": 1594160854
    },
    {
        "content": "<p>Ok.</p>",
        "id": 203211146,
        "sender_full_name": "chabing",
        "timestamp": 1594160881
    },
    {
        "content": "<p>Thanks for the help</p>",
        "id": 203211184,
        "sender_full_name": "chabing",
        "timestamp": 1594160885
    },
    {
        "content": "<p>Oh, is there an ongoing discussion about deprecating or replacing mpsc withing std?</p>",
        "id": 203211217,
        "sender_full_name": "chabing",
        "timestamp": 1594160929
    },
    {
        "content": "<p>there was, but I'm not sure of the current opinion</p>",
        "id": 203211419,
        "sender_full_name": "cuviper",
        "timestamp": 1594161104
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"247690\">@chabing</span> You can read <a href=\"#narrow/stream/219381-t-libs/topic/Replacing.20mpsc\">https://rust-lang.zulipchat.com/#narrow/stream/219381-t-libs/topic/Replacing.20mpsc</a> for the most recent discussion.</p>",
        "id": 203242404,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1594196513
    }
]