[
    {
        "content": "<p>The <code>Allocator</code> trait has methods like this:</p>",
        "id": 263957067,
        "sender_full_name": "nnethercote",
        "timestamp": 1638851055
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">allocate</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">layout</span>: <span class=\"nc\">Layout</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">NonNull</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">AllocErrrust</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 263957074,
        "sender_full_name": "nnethercote",
        "timestamp": 1638851074
    },
    {
        "content": "<p>This has scope for the actual size allocated being different (larger) than the requested size. But in practice the size of the <code>NonNull&lt;[u8]&gt;</code> is always the same as the requested size.</p>",
        "id": 263957101,
        "sender_full_name": "nnethercote",
        "timestamp": 1638851132
    },
    {
        "content": "<p>I'm wondering if it's possible to make the actual size returned take advantage of malloc_usable_size or something similar. I did this in the past with Firefox and it was quite effective, particularly for things like <code>Vec</code>.</p>",
        "id": 263957154,
        "sender_full_name": "nnethercote",
        "timestamp": 1638851188
    },
    {
        "content": "<p>E.g. imagine you have a <code>Vec</code> where the element are 72 bytes in size, and  you resize it to 16 elements. That's 1152 bytes. In practice the allocator might round this up to 1536 bytes, so you could actually fit 21 elements in that space.</p>",
        "id": 263957225,
        "sender_full_name": "nnethercote",
        "timestamp": 1638851291
    },
    {
        "content": "<p>In practice I think the split between <code>Allocator</code> and <code>GlobalAlloc</code> may make things difficult.</p>",
        "id": 263957236,
        "sender_full_name": "nnethercote",
        "timestamp": 1638851339
    },
    {
        "content": "<p>The latter is what knows about the internals of the allocator implementation, and so can provide answers to questions like \"exactly how much memory did I really allocate for that request\". But it has methods like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">alloc</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">layout</span>: <span class=\"nc\">Layout</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 263957262,
        "sender_full_name": "nnethercote",
        "timestamp": 1638851392
    },
    {
        "content": "<p>The raw pointer return value doesn't allow for the size info to be returned easily.</p>",
        "id": 263957310,
        "sender_full_name": "nnethercote",
        "timestamp": 1638851418
    },
    {
        "content": "<p>Anyway, I'm wondering if people have considered this previously, if I'm overlooking anything, etc.</p>",
        "id": 263957316,
        "sender_full_name": "nnethercote",
        "timestamp": 1638851446
    },
    {
        "content": "<p>Maybe <code>Allocator</code> could gain new method that return the size too, defaulting to the same size requested.</p>",
        "id": 263958204,
        "sender_full_name": "cuviper",
        "timestamp": 1638852546
    },
    {
        "content": "<p>Hmm, the unstable methods do return pointer slices, so you could set a real useable size there.</p>",
        "id": 263958278,
        "sender_full_name": "cuviper",
        "timestamp": 1638852612
    },
    {
        "content": "<p>I see what you mean now, the <code>Allocator</code> trait makes it possible but <code>GlobalAlloc</code> does not</p>",
        "id": 263958417,
        "sender_full_name": "cuviper",
        "timestamp": 1638852783
    },
    {
        "content": "<p>Couldn't we still add new methods to that though?</p>",
        "id": 263958506,
        "sender_full_name": "cuviper",
        "timestamp": 1638852877
    },
    {
        "content": "<p>Yes!!! I've been complaining about this for sooooo long!</p>\n<ul>\n<li><a href=\"https://github.com/rust-lang/wg-allocators/issues/74\">https://github.com/rust-lang/wg-allocators/issues/74</a></li>\n<li><a href=\"https://github.com/rust-lang/wg-allocators/issues/75\">https://github.com/rust-lang/wg-allocators/issues/75</a></li>\n<li>probably some threads on zulip</li>\n</ul>\n<p>The current design is not good for high performance. Either it has to assume the caller will need the size info, or return the requested size. Eitehr of these are bad unless your allocator can return it without any cos</p>",
        "id": 263961304,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1638855911
    },
    {
        "content": "<p>I would have thought that returning the actual size was easy to do as part of the alloc() call. Certainly easier than determining the actual size in a separate option afterwards</p>",
        "id": 263968998,
        "sender_full_name": "nnethercote",
        "timestamp": 1638864331
    }
]