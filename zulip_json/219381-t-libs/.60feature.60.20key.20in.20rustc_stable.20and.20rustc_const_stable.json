[
    {
        "content": "<p>Hi! I was previously confused when stabilization PRs for library features would change a <code>rustc_unstable</code> / <code>rustc_const_unstable</code> to the corresponding stable attribute while changing the <code>feature</code> (flag) key. I found out this is the current standard procedure when a feature is partially stabilized, but to me it seems like this just makes the <code>feature</code> key in <code>rustc_stable</code> / <code>rustc_const_stable</code> useless by having it sometimes refer to the actual feature you would have previously used, sometimes to a feature flag that never really existed.</p>",
        "id": 251692269,
        "sender_full_name": "jplatte",
        "timestamp": 1630577009
    },
    {
        "content": "<p>yeah, unstable features get renamed sometimes. so when something is partially st abilized, that is effectively an unstable feature rename followed by a stabilization of that, at once.</p>",
        "id": 251692397,
        "sender_full_name": "Mara",
        "timestamp": 1630577089
    },
    {
        "content": "<p>Thus I looked into why this is even needed on the stable attributes by changing the code around so it is no longer needed. It didn't even take long to get that to compile, but ran into lots of runtime errors (seems like it's because the on-disk representation of those attributes changed)</p>",
        "id": 251692455,
        "sender_full_name": "jplatte",
        "timestamp": 1630577126
    },
    {
        "content": "<p>it's only for the diagnostic that tells you the feature is stable, and you no longer need to enable it. but that doesn't work as well across renames and partial stabilizations, but that's okay.</p>",
        "id": 251692475,
        "sender_full_name": "Mara",
        "timestamp": 1630577140
    },
    {
        "content": "<p>e.g.</p>\n<div class=\"codehilite\"><pre><span></span><code>warning: the feature `array_map` has been stable since 1.55.0 and no longer requires an attribute to enable\n --&gt; src/main.rs:1:12\n  |\n1 | #![feature(array_map)]\n  |            ^^^^^^^^^\n  |\n  = note: `#[warn(stable_features)]` on by default\n</code></pre></div>",
        "id": 251692574,
        "sender_full_name": "Mara",
        "timestamp": 1630577188
    },
    {
        "content": "<p>Okay, but everything compiles after my changes, where do I need to look for the code that is responsible for that error message?</p>",
        "id": 251692664,
        "sender_full_name": "jplatte",
        "timestamp": 1630577250
    },
    {
        "content": "<p>I would like to make it possible to omit the feature key in these situations</p>",
        "id": 251692684,
        "sender_full_name": "jplatte",
        "timestamp": 1630577264
    },
    {
        "content": "<p>It just results in lots of declarations of stable features that were never unstable..</p>",
        "id": 251692827,
        "sender_full_name": "jplatte",
        "timestamp": 1630577345
    },
    {
        "content": "<p>I'm pretty sure there's a decent amount of entries in the <a href=\"http://caniuse.rs\">caniuse.rs</a> \"database\" (I maintain that site) that have \"wrong\" feature flag entries because I took the \"stabilized name\", where now I think I should have used the previous name because the stable one is not useful in any way</p>",
        "id": 251692966,
        "sender_full_name": "jplatte",
        "timestamp": 1630577419
    },
    {
        "content": "<p>looks like <code>src/test/ui/stable-features.rs</code> should also test library features like <code>array_map</code>.</p>",
        "id": 251693778,
        "sender_full_name": "Mara",
        "timestamp": 1630577998
    },
    {
        "content": "<p>though i guess <code>rust1</code> is already a library feature. did that test not fail for you?</p>",
        "id": 251693852,
        "sender_full_name": "Mara",
        "timestamp": 1630578038
    },
    {
        "content": "<p>I did not get to tests</p>",
        "id": 251694187,
        "sender_full_name": "jplatte",
        "timestamp": 1630578257
    },
    {
        "content": "<p>I get lots of error like this one:</p>\n<div class=\"codehilite\"><pre><span></span><code>error: internal compiler error: unexpected panic\n\nnote: the compiler unexpectedly panicked. this is a bug.\n\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&amp;template=ice.md\n\nnote: rustc 1.55.0-beta.1 (739f8f0a8 2021-07-28) running on x86_64-unknown-linux-gnu\n\nnote: compiler flags: -Z macro-backtrace -Z tls-model=initial-exec -Z unstable-options -Z binary-dep-depinfo -C opt-level=3 -C embed-bitcode=no -C debuginfo=0 -C incremental -C link-args=-Wl,-rpath,$ORIGIN/../lib -C llvm-args=-import-instr-limit=10 --crate-type lib\n\nnote: some of the compiler flags provided by cargo are hidden\n\nquery stack during panic:\n#0 [predicates_of] computing predicates of `html::render::context::Context`\n#1 [check_item_well_formed] checking that `html::format::print_generic_bounds` is well-formed\n#2 [analysis] running analysis passes on this crate\nend of query stack\nthread &#39;rustc&#39; panicked at &#39;no entry found for key&#39;, compiler/rustc_query_impl/src/on_disk_cache.rs:175:20\nstack backtrace:\n   0: rust_begin_unwind\n             at /rustc/739f8f0a8d728054a60a37fb29517e9e7cc2365a/library/std/src/panicking.rs:515:5\n   1: core::panicking::panic_fmt\n             at /rustc/739f8f0a8d728054a60a37fb29517e9e7cc2365a/library/core/src/panicking.rs:92:14\n   2: core::option::expect_failed\n             at /rustc/739f8f0a8d728054a60a37fb29517e9e7cc2365a/library/core/src/option.rs:1578:5\n   3: rustc_query_impl::on_disk_cache::CacheDecoder::file_index_to_file\n   4: rustc_query_impl::on_disk_cache::&lt;impl rustc_serialize::serialize::Decodable&lt;rustc_query_impl::on_disk_cache::CacheDecoder&gt; for rustc_span::span_encoding::Span&gt;::decode\n   5: &lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold\n   6: &lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter\n   7: &lt;[(rustc_middle::ty::Predicate,rustc_span::span_encoding::Span)] as rustc_middle::ty::codec::RefDecodable&lt;D&gt;&gt;::decode\n   8: rustc_query_impl::on_disk_cache::OnDiskCache::try_load_query_result\n   9: rustc_query_impl::plumbing::&lt;impl rustc_query_system::query::config::QueryDescription&lt;rustc_query_impl::plumbing::QueryCtxt&gt; for rustc_query_impl::queries::predicates_of&gt;::try_load_from_disk\n  10: rustc_query_system::query::plumbing::load_from_disk_and_cache_in_memory\n  11: rustc_query_system::query::plumbing::get_query_impl\n  12: &lt;rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine&gt;::predicates_of\n  13: rustc_ty_utils::ty::param_env\n  14: rustc_query_system::dep_graph::graph::DepGraph&lt;K&gt;::with_task_impl\n  15: rustc_data_structures::stack::ensure_sufficient_stack\n  16: rustc_query_system::query::plumbing::force_query_with_job\n  17: rustc_query_system::query::plumbing::get_query_impl\n  18: &lt;rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine&gt;::param_env\n  19: rustc_typeck::check::wfcheck::for_id\n  20: rustc_typeck::check::wfcheck::check_item_well_formed\n  21: rustc_query_system::dep_graph::graph::DepGraph&lt;K&gt;::with_task_impl\n  22: rustc_data_structures::stack::ensure_sufficient_stack\n  23: rustc_query_system::query::plumbing::force_query_with_job\n  24: rustc_query_system::query::plumbing::get_query_impl\n  25: &lt;rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine&gt;::check_item_well_formed\n  26: &lt;rustc_typeck::check::wfcheck::CheckTypeWellFormedVisitor as rustc_hir::intravisit::Visitor&gt;::visit_item\n  27: rustc_data_structures::sync::par_for_each_in\n  28: rustc_hir::hir::Crate::par_visit_all_item_likes\n  29: rustc_session::session::Session::track_errors\n  30: rustc_typeck::check_crate\n  31: rustc_interface::passes::analysis\n  32: rustc_middle::dep_graph::&lt;impl rustc_query_system::dep_graph::DepKind for rustc_middle::dep_graph::dep_node::DepKind&gt;::with_deps\n  33: rustc_query_system::dep_graph::graph::DepGraph&lt;K&gt;::with_task_impl\n  34: rustc_query_system::dep_graph::graph::DepGraph&lt;K&gt;::with_eval_always_task\n  35: rustc_data_structures::stack::ensure_sufficient_stack\n  36: rustc_query_system::query::plumbing::force_query_with_job\n  37: rustc_query_system::query::plumbing::get_query_impl\n  38: &lt;rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine&gt;::analysis\n  39: rustc_interface::queries::&lt;impl rustc_interface::interface::Compiler&gt;::enter\n  40: rustc_span::with_source_map\n  41: rustc_interface::interface::create_compiler_and_run\n  42: scoped_tls::ScopedKey&lt;T&gt;::set\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\n</code></pre></div>",
        "id": 251694220,
        "sender_full_name": "jplatte",
        "timestamp": 1630578288
    },
    {
        "content": "<p>I opened a PR for this: <a href=\"https://github.com/rust-lang/rust/pull/88588\">https://github.com/rust-lang/rust/pull/88588</a></p>",
        "id": 251700407,
        "sender_full_name": "jplatte",
        "timestamp": 1630582173
    },
    {
        "content": "<p>are you reusing the stage1 cache or something? don't do that - try <code>rm -r build/stage1*/$TARGET/incremental</code></p>",
        "id": 252561849,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1631154322
    },
    {
        "content": "<p>oh no, this is a panic from the beta compiler, that is weird</p>",
        "id": 252561861,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1631154341
    },
    {
        "content": "<p>Bump! <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> suggested I revive this thread because the PR wasn't as uncontroversial as I had hoped.</p>",
        "id": 256379108,
        "sender_full_name": "jplatte",
        "timestamp": 1633510624
    },
    {
        "content": "<p>Should I copy over the comments from the PR? Discussion (really just one msg from <span class=\"user-mention\" data-user-id=\"310399\">@Mara</span>, two replies by myself) starts <a href=\"https://github.com/rust-lang/rust/pull/88588#issuecomment-911573951\">here</a>.</p>",
        "id": 256379369,
        "sender_full_name": "jplatte",
        "timestamp": 1633510763
    }
]