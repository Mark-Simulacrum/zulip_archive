[
    {
        "content": "<p>I could have sworn there was a method in the stdlib on integers to get both the quotient and remainder of a division simultaneously, but I guess I was wrong. is it worth writing up an RFC for this? the benefit (aside from convenience) would be the ability to guarantee that only one division instruction is emitted, but maybe that's trivial enough that LLVM can always do that anyway?</p>",
        "id": 224665080,
        "sender_full_name": "bstrie",
        "timestamp": 1612127740
    },
    {
        "content": "<p>llvm has no trouble combining the operations</p>",
        "id": 224665400,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1612128193
    },
    {
        "content": "<p>IIRC there isn't even a llvm instruction that combines the two so the only viable impl of that method would be to codegen it into separate insns anyway</p>",
        "id": 224666357,
        "sender_full_name": "nagisa",
        "timestamp": 1612129472
    },
    {
        "content": "<p>I've previously wanted this operation for convenience/conciseness reasons</p>",
        "id": 224670555,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1612133421
    },
    {
        "content": "<p>You might be thinking of <code>num::Integer::div_rem</code>: <a href=\"https://docs.rs/num/0.3.1/num/trait.Integer.html#tymethod.div_rem\">https://docs.rs/num/0.3.1/num/trait.Integer.html#tymethod.div_rem</a></p>\n<p>(And yes, there's no combined intrinsic in LLVM.)</p>",
        "id": 224670872,
        "sender_full_name": "scottmcm",
        "timestamp": 1612133989
    },
    {
        "content": "<p>We have prior art of such combinations with f{32,64}::sin_cos</p>",
        "id": 225007537,
        "sender_full_name": "Poliorcetics",
        "timestamp": 1612355006
    },
    {
        "content": "<p>I have distinct memory of stumbling upon this method or function <em>somewhere</em>, looking its the source in curiosity and finding literally <code>(a / b, a % b)</code></p>",
        "id": 225057924,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1612376529
    },
    {
        "content": "<p>That's the implementation in <code>num</code>, certainly: <a href=\"https://docs.rs/num-integer/0.1.44/src/num_integer/lib.rs.html#563-565\">https://docs.rs/num-integer/0.1.44/src/num_integer/lib.rs.html#563-565</a></p>",
        "id": 225058800,
        "sender_full_name": "scottmcm",
        "timestamp": 1612376863
    },
    {
        "content": "<p>LLVM easily turns that into a single <code>div</code> though</p>",
        "id": 225084431,
        "sender_full_name": "cuviper",
        "timestamp": 1612387437
    },
    {
        "content": "<p>afaik for 128-bit integers, <code>(a/b, a%b)</code> still won't generate a <code>udivmodti4</code> <a href=\"https://github.com/rust-lang/rust/issues/44545\">https://github.com/rust-lang/rust/issues/44545</a></p>",
        "id": 225134187,
        "sender_full_name": "kennytm",
        "timestamp": 1612429607
    },
    {
        "content": "<p>IIRC it's more an artifact of llvm not knowing about this intrinsic. If it did it could use it. But adding this knowledge would involve changing various built-ins libraries too</p>",
        "id": 225146528,
        "sender_full_name": "nagisa",
        "timestamp": 1612437686
    },
    {
        "content": "<p>FWIW, I do really like <code>div_rem</code> as a method.  It's certainly wasn't obvious to me back in the day that doing them separately was \"right\" until I learned more about LLVM.  And getting the tuple is quite convenient.</p>\n<p>As a bonus, it leads nicely into <code>div_mod</code>, giving a nice opportunity to talk about the difference between <code>rem</code> and <code>mod</code> with signed numbers, and where doing them together is potentially more justifiable since both the resulting values need a fixup.  (CSE might get rid of the duplication anyway, but hard to say.)</p>\n<p>Could even do <code>div_mod</code> where the modulus is always an unsigned type...</p>",
        "id": 225198105,
        "sender_full_name": "scottmcm",
        "timestamp": 1612461829
    }
]