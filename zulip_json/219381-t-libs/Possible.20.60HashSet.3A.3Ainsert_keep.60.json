[
    {
        "content": "<p>On <code>HashSet</code>, <code>HashSet::replace(K) -&gt; Option&lt;K&gt;</code> inserts the new element, and returns the old element if it existed. Would there be interest in a \"couterpart\" to this method, a <code>HashSet::insert_keep(K) -&gt; Option&lt;K&gt;</code> that inserts the input if there was no matching entry in the set already, and returns the input unchanged if there was? (name obviously bikeshedable)</p>",
        "id": 262423384,
        "sender_full_name": "Jake",
        "timestamp": 1637654665
    },
    {
        "content": "<p>This exists on nightly under the name<a href=\"https://doc.rust-lang.org/std/collections/struct.HashMap.html#method.try_insert\"><code>try_insert</code></a>.</p>",
        "id": 262423659,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1637654892
    },
    {
        "content": "<p>There is <a href=\"https://doc.rust-lang.org/std/collections/struct.HashSet.html#method.get_or_insert\"><code>HashSet::get_or_insert(&amp;mut self, value: T) -&gt; &amp;T</code></a> on nightly.</p>",
        "id": 262423695,
        "sender_full_name": "Hans Kratz",
        "timestamp": 1637654938
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"118594\">Dylan MacKenzie (ecstatic-morse)</span> <a href=\"#narrow/stream/219381-t-libs/topic/Possible.20.60HashSet.3A.3Ainsert_keep.60/near/262423659\">said</a>:</p>\n<blockquote>\n<p>This exists on nightly under the name<a href=\"https://doc.rust-lang.org/std/collections/struct.HashMap.html#method.try_insert\"><code>try_insert</code></a>.</p>\n</blockquote>\n<p>Only on maps, not on sets</p>",
        "id": 262423813,
        "sender_full_name": "Jake",
        "timestamp": 1637655013
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407656\">Hans Kratz</span> <a href=\"#narrow/stream/219381-t-libs/topic/Possible.20.60HashSet.3A.3Ainsert_keep.60/near/262423695\">said</a>:</p>\n<blockquote>\n<p>There is <a href=\"https://doc.rust-lang.org/std/collections/struct.HashSet.html#method.get_or_insert\"><code>HashSet::get_or_insert(&amp;mut self, value: T) -&gt; &amp;T</code></a> on nightly.</p>\n</blockquote>\n<p>That doesn't seem to address my use case, since I need the value that I tried to insert back if the insertion failed</p>",
        "id": 262423889,
        "sender_full_name": "Jake",
        "timestamp": 1637655076
    },
    {
        "content": "<p>you can make something like that with raw entries on a <code>HashMap&lt;K, ()&gt;</code> at least.</p>",
        "id": 262427125,
        "sender_full_name": "The 8472",
        "timestamp": 1637657433
    },
    {
        "content": "<p>Well, I don't even need raw entries on a <code>HashMap</code> since <code>try_insert</code> exists there; unfortunately, switching from <code>HashSet&lt;K&gt;</code> to <code>HashMap&lt;K, ()&gt;</code> for this kind of thing would be quite annoying though (my use case isnt particularly perf sensitive, so I just wrote a function, but someone else might end up in a different situation)</p>",
        "id": 262428394,
        "sender_full_name": "Jake",
        "timestamp": 1637658182
    }
]