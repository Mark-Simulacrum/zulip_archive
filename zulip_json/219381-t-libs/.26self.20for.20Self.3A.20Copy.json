[
    {
        "content": "<p>Reviewing <a href=\"https://github.com/rust-lang/rust/issues/93886\">#93886</a>, I noted that it is stabilizing a method which has <code>&amp;self</code> where <code>Self</code> is <code>u8</code>, which seems unnecessary. Do we have any general sense/policy on avoiding this kind of thing in method signatures?</p>",
        "id": 271652301,
        "sender_full_name": "simulacrum",
        "timestamp": 1644621872
    },
    {
        "content": "<p>Imo there's no reason <em>not</em> to take it by value</p>",
        "id": 271670383,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1644642682
    },
    {
        "content": "<p>The tracking issue has <code>self</code> not <code>&amp;self</code>as the signature: <a href=\"https://github.com/rust-lang/rust/issues/77174\">#77174</a></p>",
        "id": 271685888,
        "sender_full_name": "Mara",
        "timestamp": 1644667723
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span>  The was some discussion about it here: <a href=\"https://github.com/rust-lang/rust/pull/73111#discussion_r475587995\">https://github.com/rust-lang/rust/pull/73111#discussion_r475587995</a></p>",
        "id": 271685891,
        "sender_full_name": "Mara",
        "timestamp": 1644667736
    },
    {
        "content": "<p>Hm</p>",
        "id": 271686334,
        "sender_full_name": "simulacrum",
        "timestamp": 1644668495
    },
    {
        "content": "<p>I guess your comment there was missed before merging?</p>",
        "id": 271686399,
        "sender_full_name": "simulacrum",
        "timestamp": 1644668549
    },
    {
        "content": "<p>I'll comment later about dropping the reference, I don't think consistency is worth it.</p>",
        "id": 271686499,
        "sender_full_name": "simulacrum",
        "timestamp": 1644668743
    },
    {
        "content": "<p>Some <code>u8</code> methods take <code>&amp;self</code> because they used to be on a trait: <a href=\"https://doc.rust-lang.org/std/ascii/trait.AsciiExt.html\">https://doc.rust-lang.org/std/ascii/trait.AsciiExt.html</a></p>",
        "id": 272110003,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1645015148
    },
    {
        "content": "<p>(Which is also implemented for <code>str</code> and <code>[u8]</code>)</p>",
        "id": 272110052,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1645015192
    },
    {
        "content": "<p>For new inherent methods I don’t think there’s any point in doing the same</p>",
        "id": 272110126,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1645015229
    },
    {
        "content": "<p>There's also a clippy lint for this, though it's dubious, since its suggestion is non-portable in usefulness (it lints up to pointer size for Copy types, but the pointer size isn't fixed). u8 is probably safe, though.</p>",
        "id": 272111449,
        "sender_full_name": "Connor Horman",
        "timestamp": 1645015997
    },
    {
        "content": "<p>just using pointer size is probably the wrong metric. the \"good\" calculation would have to be based on the ABI and what other registers are already used and stuff, right?</p>",
        "id": 272118870,
        "sender_full_name": "Lokathor",
        "timestamp": 1645020017
    },
    {
        "content": "<p>That's even worse for portability, though.</p>",
        "id": 272119007,
        "sender_full_name": "Connor Horman",
        "timestamp": 1645020063
    },
    {
        "content": "<p>One reason why consistency is quite important here even though it doesn't matter at the call site: function ptr coercion. It's an annoying papercut if I can pass <code>T::method1</code> to eg <code>Iterator::map</code>, but <code>T::method2</code> instead requires eta expansion to <code>|x| x.method2()</code> due to different <code>self</code> types.</p>",
        "id": 272126322,
        "sender_full_name": "Johannes Dahlström",
        "timestamp": 1645023395
    },
    {
        "content": "<p>I think in either direction that problem feels pretty similar to some of the copy ergonomics issues discussed in <a href=\"https://lang-team.rust-lang.org/design_notes/copy_ergonomics.html#references-to-copy-types\">https://lang-team.rust-lang.org/design_notes/copy_ergonomics.html#references-to-copy-types</a></p>\n<p>Would you maybe want to add a paragraph to that design note about this case? It seems plausible the compiler could permit coercing either way, generating a small shim if necessary</p>",
        "id": 272126733,
        "sender_full_name": "simulacrum",
        "timestamp": 1645023573
    },
    {
        "content": "<p>Re passing a function rather than a closure to <code>Iterator::map</code>: there is no single right answer here, depending on whether the iterator has <code>Item=T</code> or <code>Item=&amp;T</code></p>",
        "id": 272127873,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1645024092
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219747\">@Simon Sapin</span> Yeah, but I mean that consistently requiring a closure wrapper (or <code>.copied()</code>etc if applicable) is still better than one method needing a wrapper and another of the same type not needing one.</p>",
        "id": 272133696,
        "sender_full_name": "Johannes Dahlström",
        "timestamp": 1645026630
    },
    {
        "content": "<blockquote>\n<p>That's even worse for portability, though.</p>\n</blockquote>\n<p>Yeah. It is.</p>",
        "id": 272141468,
        "sender_full_name": "Lokathor",
        "timestamp": 1645029696
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"219747\">Simon Sapin</span> <a href=\"#narrow/stream/219381-t-libs/topic/.26self.20for.20Self.3A.20Copy/near/272127873\">said</a>:</p>\n<blockquote>\n<p>Re passing a function rather than a closure to <code>Iterator::map</code>: there is no single right answer here, depending on whether the iterator has <code>Item=T</code> or <code>Item=&amp;T</code></p>\n</blockquote>\n<p>Hmm, I think that suggests that having it on <code>u8</code> is minutely better, since there's <code>.copied()</code> but not <code>.make_a_reference_somehow()</code>.</p>",
        "id": 272154957,
        "sender_full_name": "scottmcm",
        "timestamp": 1645034851
    }
]