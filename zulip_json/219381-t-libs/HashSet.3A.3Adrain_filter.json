[
    {
        "content": "<p>I added <code>HashSet::drain_filter</code> in <a href=\"https://github.com/rust-lang/hashbrown/pull/179\">hashbrown#179</a> and now I'm working on a patch to add it to <code>std</code> (<a href=\"https://github.com/rust-lang/rust/issues/59618\">rust#59618</a>).  However, the current structure of the <code>HashSet</code> code makes it difficult.</p>\n<p><code>std::collections::HashSet</code> is a wrapper around <code>std::collections::HashMap</code>, which is a wrapper around <code>hashbrown::HashMap</code>.  The <code>hashbrown::HashSet</code> type is not used at all, so I can't reuse its <code>drain_filter</code> method.  Changing the <code>std</code> type to wrap <code>hashbrown::HashSet</code> would simplify this code greatly, but it's a very invasive change. Would there be any objections to this?</p>\n<p>One alternative is for <code>hashbrown</code> to expose the internal <code>DrainFilterInner</code> type when built as a rustc dep, so that <code>std</code> can build its iterators on top of this type.  Another alternative is for <code>std::collections::HashSet::drain_filter</code> to return an anonymous <code>impl Iterator</code> type (because it would create its own closure), but I think <code>std</code> tries to avoid that.</p>",
        "id": 206508738,
        "sender_full_name": "Matt Brubeck",
        "timestamp": 1597090961
    },
    {
        "content": "<p>Another idea: Make both HashSet types <code>repr(transparent)</code> and provide zero-cost conversions between them, so <code>std</code> can call methods from the <code>hashbrown</code> type even though its own type is distinct.</p>",
        "id": 206509216,
        "sender_full_name": "Matt Brubeck",
        "timestamp": 1597091281
    },
    {
        "content": "<p>I think it would be nice if <code>HashSet</code> just wrapped <code>hashbrown::HashSet</code>.</p>",
        "id": 206521053,
        "sender_full_name": "cuviper",
        "timestamp": 1597098692
    },
    {
        "content": "<p>Right now they are duplicating the logic of wrapping <code>Map</code> as a <code>Set</code></p>",
        "id": 206521093,
        "sender_full_name": "cuviper",
        "timestamp": 1597098722
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 206521100,
        "sender_full_name": "cuviper",
        "timestamp": 1597098722
    },
    {
        "content": "<p>(but so does <code>BTreeSet</code>, <code>IndexSet</code>, etc.)</p>",
        "id": 206521154,
        "sender_full_name": "cuviper",
        "timestamp": 1597098763
    },
    {
        "content": "<p>Changing <code>std::HashSet</code> to be a wrapper around <code>hashbrown::HashSet</code> is fine with me.</p>",
        "id": 206521679,
        "sender_full_name": "Amanieu",
        "timestamp": 1597099219
    },
    {
        "content": "<p>As long as the API doesn't change it really doesn't matter how it's implemented internally.</p>",
        "id": 206521707,
        "sender_full_name": "Amanieu",
        "timestamp": 1597099248
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 206525978,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1597102849
    },
    {
        "content": "<p>Thanks, everyone. I have a branch now that makes std's HashSet wrap hashbrown's HashSet:<br>\n<a href=\"https://github.com/rust-lang/rust/issues/59618#issuecomment-671663475\">https://github.com/rust-lang/rust/issues/59618#issuecomment-671663475</a></p>",
        "id": 206721469,
        "sender_full_name": "Matt Brubeck",
        "timestamp": 1597251755
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"270999\">@Matt Brubeck</span> Let me know when you want me to publish a new release of hashbrown.</p>",
        "id": 206978640,
        "sender_full_name": "Amanieu",
        "timestamp": 1597437256
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> I can submit my libstd PR whenever the new release is ready. If you'd like to wait and see if other breaking changes come along, that's fine; I'm in no hurry.</p>",
        "id": 207174865,
        "sender_full_name": "Matt Brubeck",
        "timestamp": 1597686481
    }
]