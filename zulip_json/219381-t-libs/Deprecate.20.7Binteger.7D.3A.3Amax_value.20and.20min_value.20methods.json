[
    {
        "content": "<p>I'm preparing a PR to deprecate <code>{integer}::{min,max}_value</code> methods<br>\nin favour of associated constants <code>{MAX,MIN}</code>.<br>\nUnlike <code>std::{integer}::{MAX,MIN}</code> which can be imported,<br>\n<code>{max,min}_value</code> cannot and has to be annotated<br>\nwith <code>#[inline(always)]</code> to be inline-able in debug builds.<br>\n<code>{MAX,MIN}</code> associated constant doesn't have that limitation<br>\nand is able to replace them in all uses.</p>\n<p>I would like to hear your thoughts on this.</p>",
        "id": 204903911,
        "sender_full_name": "lzutao",
        "timestamp": 1595589392
    },
    {
        "content": "<p>i continue to be pretty \"meh\" on deprecations like this. i think their best use is when we actively don't want people to use older APIs for some reason or another. but in this case, the older APIs really aren't hurting anything. for cases like this, i'd either prefer not deprecating them, or perhaps more pragmatically, lump them into a group of similar deprecations that we do at the same time. (for an edition release?)</p>",
        "id": 204908499,
        "sender_full_name": "BurntSushi",
        "timestamp": 1595593255
    },
    {
        "content": "<p>You has a point.<br>\nHowever, currently we have 3 ways to use max/min value of integers: <br>\nthe const method (1), the associated constant (2), and the module constant (3).<br>\n(1) and (2) are overlapping with each other in all use-cases. </p>\n<ul>\n<li>\n<p>This causes styling issue.<br>\nProjects might prefer (2) but new contributors might use (1).<br>\nThis is not being enforced by any automatic tools but reviewers and guidelines.</p>\n</li>\n<li>\n<p>Another weak point is (1) makes rustc doing more work for the same purpose, especially in debug mode.</p>\n</li>\n</ul>",
        "id": 204909941,
        "sender_full_name": "lzutao",
        "timestamp": 1595594353
    },
    {
        "content": "<p>yeah, sure, i definitely admit that having multiple different ways to get at the constants isn't ideal.</p>",
        "id": 204911059,
        "sender_full_name": "BurntSushi",
        "timestamp": 1595595150
    },
    {
        "content": "<p>The main reason to prefer the module constant instead of the type constant is because of minimum rust version support. If you care about that and your CI isn't enforcing it you should get better CI.</p>",
        "id": 204913171,
        "sender_full_name": "Lokathor",
        "timestamp": 1595596398
    },
    {
        "content": "<p>yeah, I know that. So here I'm not suggesting deprecating module constant.<br>\nEdit: To clarify, module constant can be imported, but type constant and const method cannot.<br>\nSo I don't suggest deprecating module constant.<br>\nAbout MRVS, I think rustc project only care about stable version.</p>",
        "id": 204913465,
        "sender_full_name": "lzutao",
        "timestamp": 1595596583
    },
    {
        "content": "<p>I would be pretty strongly opposed to deprecating in the current edition.</p>",
        "id": 204915983,
        "sender_full_name": "simulacrum",
        "timestamp": 1595597975
    },
    {
        "content": "<p>I also think we should deprecate all but one at the same time.</p>",
        "id": 204916018,
        "sender_full_name": "simulacrum",
        "timestamp": 1595597997
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/219381-t-libs/topic/Deprecate.20.7Binteger.7D.3A.3A.7Bmin.2Cmax.7D_value.20methods/near/204916018\">said</a>:</p>\n<blockquote>\n<p>I also think we should deprecate all but one at the same time.</p>\n</blockquote>\n<p>Could you clarify? What all?</p>",
        "id": 204916779,
        "sender_full_name": "lzutao",
        "timestamp": 1595598393
    },
    {
        "content": "<p>We have three ways of getting min/max today: module constants, methods, and type constants. I think if the consensus is that the type constants are the \"right way\" then those should be the only ones left after we deprecate. I think deprecating module consts and methods in 2021 edition makes sense.</p>",
        "id": 204917024,
        "sender_full_name": "simulacrum",
        "timestamp": 1595598538
    },
    {
        "content": "<p>but we currently have no way to import type constant.</p>",
        "id": 204917092,
        "sender_full_name": "lzutao",
        "timestamp": 1595598595
    },
    {
        "content": "<p>IMO, that's not a problem.</p>",
        "id": 204917180,
        "sender_full_name": "simulacrum",
        "timestamp": 1595598625
    },
    {
        "content": "<p>If users really want the <code>MAX</code> name in the namespace, they can define their own constants -- I consider <code>use std::u8::MAX;</code> to pretty much always be a bad idea, and deprecating that is I think an improvement.</p>",
        "id": 204917262,
        "sender_full_name": "simulacrum",
        "timestamp": 1595598675
    },
    {
        "content": "<blockquote>\n<p>About MRVS, I think rustc project only care about stable version.</p>\n</blockquote>\n<p>I absolutely, and in the strongest possible terms, disagree with this idea.</p>",
        "id": 204921033,
        "sender_full_name": "Lokathor",
        "timestamp": 1595600414
    },
    {
        "content": "<p>That's what I see from compiler devs opinions.<br>\nIt's true that people are trying with RFC about MRVS.<br>\nBut If compiler devs care about MRVS, they will patch any security in older stable releases, not just the current stable.</p>",
        "id": 204921466,
        "sender_full_name": "lzutao",
        "timestamp": 1595600614
    },
    {
        "content": "<p>I don't really know how that has relevance to this discussion though?</p>\n<p>In some sense, sure, you could say \"deprecating now is fine\" because the old versions are unsupported and everyone should be on latest stable and keeping up with deprecations. I think that's not a good attitude to take, though, and <em>especially</em> when the pain caused by deprecation gives you no benefit - it's not like the new way is any better for old code - we should strive to avoid making people migrate (or slap <code>#[allow(deprecated)]</code> on their crate).</p>",
        "id": 204921814,
        "sender_full_name": "simulacrum",
        "timestamp": 1595600788
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/219381-t-libs/topic/Deprecate.20.7Binteger.7D.3A.3A.7Bmin.2Cmax.7D_value.20methods/near/204917262\">said</a>:</p>\n<blockquote>\n<p>If users really want the <code>MAX</code> name in the namespace, they can define their own constants</p>\n</blockquote>\n<p>That's kind of tedious when you have to re-define the constant. But I'm fine with it.</p>\n<p>One more question. Can we make the deprecation work only for Rustc codebase?</p>",
        "id": 204922061,
        "sender_full_name": "lzutao",
        "timestamp": 1595600886
    },
    {
        "content": "<p>Well, it is tedious, I guess, but the cases where people would actually do this seem slim-to-none</p>",
        "id": 204922935,
        "sender_full_name": "simulacrum",
        "timestamp": 1595601274
    },
    {
        "content": "<p>I don't know what you mean \"only for rustc codebase\"</p>",
        "id": 204923033,
        "sender_full_name": "simulacrum",
        "timestamp": 1595601323
    },
    {
        "content": "<p>I don't personally think rustc is in any special place wrt to min/max</p>",
        "id": 204923105,
        "sender_full_name": "simulacrum",
        "timestamp": 1595601357
    },
    {
        "content": "<p>Like internal lints</p>",
        "id": 204923204,
        "sender_full_name": "lzutao",
        "timestamp": 1595601394
    },
    {
        "content": "<p>I mean probably but I'd not personally want to maintain that, there's really no point in the hassle of reviewing and implementing that I think</p>",
        "id": 204923250,
        "sender_full_name": "simulacrum",
        "timestamp": 1595601419
    },
    {
        "content": "<p>Because just a few days ago, I saw a rustc contributor using const method instead of type constants.<br>\nReviewer was not catching that.<br>\nNot that I blame them or it is a big problems, but still type constants are preferred in all places in rustc repo.</p>\n<p>Anyway, I will open an issue in clippy then.</p>",
        "id": 204923671,
        "sender_full_name": "lzutao",
        "timestamp": 1595601611
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> I don't see it as a problem personally, they're all equally good in my eyes</p>",
        "id": 204924106,
        "sender_full_name": "simulacrum",
        "timestamp": 1595601796
    },
    {
        "content": "<p>obviously good to standardize in the long run, but we can do that in rustc when migrating to the next edition no problem</p>",
        "id": 204924161,
        "sender_full_name": "simulacrum",
        "timestamp": 1595601821
    },
    {
        "content": "<p>It's more as a style issue. Clippy could be a tool to enforce this.</p>",
        "id": 204924297,
        "sender_full_name": "lzutao",
        "timestamp": 1595601882
    },
    {
        "content": "<p>Right I mean I would personally not care but up to you if you want to pursue a clippy lint etc</p>",
        "id": 204924860,
        "sender_full_name": "simulacrum",
        "timestamp": 1595602122
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 204938345,
        "sender_full_name": "Lokathor",
        "timestamp": 1595608869
    },
    {
        "content": "<blockquote>\n<p>One more question. Can we make the deprecation work only for Rustc codebase?</p>\n</blockquote>\n<p>You can make the lint <code>allow</code> by default and <code>warn</code> on it in <a href=\"http://lib.rs\">lib.rs</a>.</p>",
        "id": 204946882,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1595613309
    },
    {
        "content": "<p>Well, I guess that requires having a lint for this specific issue which seems little overkill</p>",
        "id": 204947004,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1595613373
    },
    {
        "content": "<p>Python has <code>DeprecationWarning</code> and<code>PendingDeprecationWarning</code> for this, maybe rust could do the same?</p>",
        "id": 204947082,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1595613440
    },
    {
        "content": "<p><a href=\"https://www.python.org/dev/peps/pep-0565/#additional-use-case-for-futurewarning\">https://www.python.org/dev/peps/pep-0565/#additional-use-case-for-futurewarning</a></p>",
        "id": 204947131,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1595613470
    },
    {
        "content": "<p>There are a few things that are documented as \"soft-deprecated\" -- maybe that deserves a default-allow lint?</p>",
        "id": 204956534,
        "sender_full_name": "cuviper",
        "timestamp": 1595618727
    },
    {
        "content": "<p>we have future deprecations too</p>",
        "id": 204956575,
        "sender_full_name": "simulacrum",
        "timestamp": 1595618753
    },
    {
        "content": "<p>but we can add a \"soft deprecated\" state too, I think</p>",
        "id": 204956626,
        "sender_full_name": "simulacrum",
        "timestamp": 1595618766
    },
    {
        "content": "<p>It is times like these where I wish we had a way to declare the minimum supported Rust version in our crates, and then Rust would shut up about any deprecation that is newer than that version. Then we'd be able to stop all this nonsense about \"is it too soon to deprecate this?\".</p>",
        "id": 205120551,
        "sender_full_name": "Peter Rabbit",
        "timestamp": 1595858594
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125267\">@Peter Rabbit</span> We've talked about having an MSRV field in <code>Cargo.toml</code>. Hadn't occurred to me that it would be useful for controlling deprecations as well; that seems quite reasonable.</p>",
        "id": 205149250,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1595873191
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> to using such a field for that purpose too.</p>",
        "id": 205149266,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1595873202
    },
    {
        "content": "<p>At this time, we still don't have a way to actually change the view of the standard library that a crate gets based on edition, right? And no concrete plans to make that step? And also we're pretty well set against doing a \"rust 2.0\" any time within like a decade or two?</p>\n<p>So aren't all library deprecations essentially just ignorable hints anyway?</p>",
        "id": 205156462,
        "sender_full_name": "Lokathor",
        "timestamp": 1595877021
    },
    {
        "content": "<p>well deprecation is not really a \"view\" and we already have <code>since = \"1.45.0\"</code> implemented, I think \"since = \"edition2021\"` is not a big step.</p>",
        "id": 205158619,
        "sender_full_name": "simulacrum",
        "timestamp": 1595878311
    },
    {
        "content": "<p>But currently it's not possible for a crate to switch to a new edition and lose access to some part of the standard library (type, method, impl, etc) compared to the previous edition. So far the compiler is only equipped to handle edition changes causing syntax changes, not other kinds of changes.</p>\n<p>So given that, library deprecations are (currently) just a warning with no \"teeth\" to support them.</p>",
        "id": 205163086,
        "sender_full_name": "Lokathor",
        "timestamp": 1595880930
    },
    {
        "content": "<p>Right but I think this proposal doesn't imply losing access? At least for this case of deprecation I'm fine with it having no teeth :)</p>",
        "id": 205163316,
        "sender_full_name": "simulacrum",
        "timestamp": 1595881049
    },
    {
        "content": "<p>I suppose what I was getting at is the question of why it matters that we deprecate anything, or not deprecate anything, if the deprecations never lead to something actually going away entirely (as does happen in some other languages / apis / etc).</p>",
        "id": 205165427,
        "sender_full_name": "Lokathor",
        "timestamp": 1595882288
    },
    {
        "content": "<p>It's annoying to put <code>#[allow(deprecated)]</code> on stuff that I need to keep using for MSRV</p>",
        "id": 205165568,
        "sender_full_name": "cuviper",
        "timestamp": 1595882366
    },
    {
        "content": "<p>But otherwise, deprecations are useful to nudge people toward better APIs</p>",
        "id": 205165671,
        "sender_full_name": "cuviper",
        "timestamp": 1595882405
    },
    {
        "content": "<p>Yeah, there are teaching resources that use old APIs because of the time they were written in, and you might not know that you should use something else without the warning.</p>",
        "id": 205169038,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1595884427
    },
    {
        "content": "<p>I think \"you should use something else\" is the sticking point. For every specific deprecated method, why <em>should</em> you use something else? In languages that actually remove public APIs, it's a warning to prevent being blindsided when it's removed. In this case, what exactly is the harm in using <code>min_value()</code>? What is the <em>benefit</em> of using <code>::MIN</code>? I agree that it's pretty weak. At best it could be a clippy lint (\"use this as it's more idiomatic\").</p>",
        "id": 205185570,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595897081
    },
    {
        "content": "<p>I actually recall clippy telling me to prefer min_value for a while XD</p>",
        "id": 205187125,
        "sender_full_name": "Lokathor",
        "timestamp": 1595898876
    },
    {
        "content": "<p><code>since = \"edition2021\"</code> seems like it would be useful, but we should be careful to only use it in cases where that function is being replaced by something that is only available in a newer edition. Otherwise it is much better to use <code>since = \"1.45.0\"</code> style deprecations with smart MSRV behavior.</p>",
        "id": 205204987,
        "sender_full_name": "Peter Rabbit",
        "timestamp": 1595921540
    },
    {
        "content": "<p>I thought <code>accessible(\"i32::MIN\")</code> is more preferable over <code>since = \"1.45.0\"</code>?</p>",
        "id": 205496634,
        "sender_full_name": "pickfire",
        "timestamp": 1596124551
    },
    {
        "content": "<p>Is this a place were we could do <code>since=\"2.0.0\"</code> (or whatever that thing was that was added) so that the docs have the yellow pointer to the constants, but nobody gets warnings about it?</p>",
        "id": 205668176,
        "sender_full_name": "scottmcm",
        "timestamp": 1596263801
    },
    {
        "content": "<blockquote>\n<p>What is the benefit of using ::MIN? </p>\n</blockquote>\n<p>I'd say this is on the same level as nudging people towards \"idiomatic Rust\". It's good for the ecosystem if there's a common way things are done. We lint to make people use snake_case functions and CamelCase types, it seems equally appropriate to lint to make people use \"the right way\" of getting the min/max value of some int type.</p>",
        "id": 206173550,
        "sender_full_name": "RalfJ",
        "timestamp": 1596735841
    },
    {
        "content": "<p>this is unlike other deprecations where the deprecated method is actually \"wrong\" in some sense (like it has undesirable behavior that we cannot change, or it is incorrectly not unsafe, or so)</p>",
        "id": 206173635,
        "sender_full_name": "RalfJ",
        "timestamp": 1596735870
    },
    {
        "content": "<blockquote>\n<p>We lint to make people use snake_case functions and CamelCase types, it seems equally appropriate to lint to make people use \"the right way\" of getting the min/max value of some int type.</p>\n</blockquote>\n<p>I’m fine with that, but as you and I both said; that’s a <em>lint</em>. I disagree that it’s a deprecation. Even if deprecations happen to be implemented as lints. </p>\n<p>Requiring using <code>dyn</code> could be seen as a deprecation as we would like to remove the ability to omit it. Right now, using <code>'_</code> is just a lint as there’s no push to make omitting it required. </p>\n<p>So I guess if there’s a plan to make the methods unavailable in a future edition (which there’s some chatter about) then a deprecation makes sense. Otherwise just a lint.</p>",
        "id": 206392929,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1596976105
    }
]