[
    {
        "content": "<p>I’ve been idly wondering if it would be worth introducing entirely new <code>Read</code> and <code>Write</code> traits, leaving the existing one alone in order to more easily make changes that are tricky to do backward-compatibly. Those changes include soundly reading into an uninitialized slice (cc <span class=\"user-mention\" data-user-id=\"243558\">@Steven Fackler</span>), existing in <code>libcore</code> (so not requiring <code>std::io::Error</code> which requires <code>Box</code> and <code>errno</code>), and perhaps others. These new APIs could live in an <code>io2</code> module (<code>std::io2</code> and <code>core::io2</code>).</p>",
        "id": 185198593,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1578564801
    },
    {
        "content": "<p>(I am however not volunteering to champion such a proposal.)</p>",
        "id": 185198614,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1578564832
    },
    {
        "content": "<p>That definitely is an option, but it'd be so disruptive that I think we'd need a <em>really</em> good reason to do it. The uninitialized buffer stuff can be added in a pretty clean way to the existing trait so I don't know if it's worth it.</p>",
        "id": 185212344,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1578577276
    },
    {
        "content": "<p>It would indeed be disruptive and probably no individual change alone is worth that. But maybe together?</p>",
        "id": 185212594,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1578577454
    },
    {
        "content": "<p>Having read and write traits in core is a very good thing.</p>",
        "id": 185239745,
        "sender_full_name": "Lokathor",
        "timestamp": 1578593840
    },
    {
        "content": "<p>they don't need to be complete replacements for existing read and write though</p>",
        "id": 185239779,
        "sender_full_name": "Lokathor",
        "timestamp": 1578593874
    },
    {
        "content": "<p>an ideal situation would be if a subset of current read/write could be extracted and put in a sub trait in core, and then std read and write extend that with all the stuff</p>",
        "id": 185239895,
        "sender_full_name": "Lokathor",
        "timestamp": 1578593934
    },
    {
        "content": "<p>and all that would be totally orthogonal to adding new methods for uninit memory or not</p>",
        "id": 185239949,
        "sender_full_name": "Lokathor",
        "timestamp": 1578593973
    },
    {
        "content": "<blockquote>\n<p>an ideal situation would be if a subset of current read/write could be extracted and put in a sub trait in core</p>\n</blockquote>\n<p>But they can’t, because <code>std::io::Error</code>.</p>",
        "id": 185241294,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1578594847
    },
    {
        "content": "<p>well, then i guess we'll need io2 eventually</p>",
        "id": 185241579,
        "sender_full_name": "Lokathor",
        "timestamp": 1578595079
    },
    {
        "content": "<p>or a merge of core and std</p>",
        "id": 185243146,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1578596062
    },
    {
        "content": "<p>Maybe.</p>\n<p>std error needs to be in std because of having os awareness and possible allocating and such, but the point of having core reading and writing is to make your code be totally agnostic to things like that, and even support no OS and no allocation.</p>",
        "id": 185250220,
        "sender_full_name": "Lokathor",
        "timestamp": 1578600496
    }
]