[
    {
        "content": "<p>Hi,<br>\nHow do people feel about moving most of <code>std::io</code> to <code>core::io</code> in the next edition? this will require a new <code>Error</code> type for the return value of the traits.<br>\nI think this is one of the main hurdles for no-std now that we have <code>alloc</code>. I'm willing to put in the time to implement this but I don't want to waste that time if no one else thinks it's a good idea or if people think that even for editions it's a really big breaking change</p>",
        "id": 189003625,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1582623248
    },
    {
        "content": "<p>Have you considered moving it to <code>alloc</code>, which would allow us to keep the same <code>Error</code> type? Or do you really need it in <code>core</code>?</p>",
        "id": 189005631,
        "sender_full_name": "Amanieu",
        "timestamp": 1582625106
    },
    {
        "content": "<p>I feel that using different <code>Error</code> types for <code>core::io</code> and <code>std::io</code> would be poorly received.</p>",
        "id": 189005879,
        "sender_full_name": "Amanieu",
        "timestamp": 1582625330
    },
    {
        "content": "<p>There's also the issue that a lot of I/O types are very OS-specific, e.g. <code>IoSlice</code> is a wrapper around an OS type.</p>",
        "id": 189005994,
        "sender_full_name": "Amanieu",
        "timestamp": 1582625423
    },
    {
        "content": "<p>Keep in mind that we can't make breaking changes to the standard library in an edition upgrade, since the same libstd is used by code from all editions.</p>",
        "id": 189006052,
        "sender_full_name": "Amanieu",
        "timestamp": 1582625487
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> Yeah, well <code>alloc</code> solves the Box problem, but not the <code>errno</code> usage we have.  obviously things like <code>IoSlice</code> will need to stay in <code>std</code>.<br>\nYou're right about the editions. I guess if this is done it must not be a breaking change.<br>\nwe could maybe move the error type itself to <code>alloc</code> but keep the implementation of <code>last_os_error</code> in std? that will either require importing a trait(breaking change) or do some other magic</p>",
        "id": 189006726,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1582626088
    },
    {
        "content": "<p>btw, why is custom itself Boxed?(the error inside of custom is already boxed)</p>",
        "id": 189006841,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1582626206
    },
    {
        "content": "<p>I wonder if there are enough changes we would like to make to <code>std::io</code> but can’t that together they are worth making a new <code>io2</code> module with other traits etc</p>",
        "id": 189010150,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1582629099
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"249222\">Elichai Turkel</span> <a href=\"#narrow/stream/219381-t-libs/topic/core.3A.3Aio/near/189006841\" title=\"#narrow/stream/219381-t-libs/topic/core.3A.3Aio/near/189006841\">said</a>:</p>\n<blockquote>\n<p>btw, why is custom itself Boxed?(the error inside of custom is already boxed)</p>\n</blockquote>\n<p>I would guess to keep the enum small and don’t force users of other variants to copy more padding bytes</p>",
        "id": 189010292,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1582629230
    },
    {
        "content": "<blockquote>\n<p>I would guess to keep the enum small and don’t force users of other variants to copy more padding bytes</p>\n</blockquote>\n<p>hmm Well if we really believe most people don't use Custom then I guess it's fine, I just cringe on the double indirection</p>",
        "id": 189010841,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1582629675
    },
    {
        "content": "<p><code>io2</code> might be a good idea. but I have a feeling it will decrease the possibility of it happening because that means no constraints from the current system and back to the drawing board to design a new better io module</p>\n<p>Maybe start a list of everything we want to change in <code>io</code> and see if it's worth deprecating the old io?</p>",
        "id": 189010942,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1582629777
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"249222\">Elichai Turkel</span> <a href=\"#narrow/stream/219381-t-libs/topic/core.3A.3Aio/near/189010841\" title=\"#narrow/stream/219381-t-libs/topic/core.3A.3Aio/near/189010841\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>I would guess to keep the enum small and don’t force users of other variants to copy more padding bytes</p>\n</blockquote>\n<p>hmm Well if we really believe most people don't use Custom then I guess it's fine, I just cringe on the double indirection</p>\n</blockquote>\n<p>This is trading inefficiency in the error case (more indirection to access error data) for more efficiency in the success case (smaller io::Result::Err means less data on the stack to copy around for calls and such). Seems like the right trade to me even if people <em>do</em> use Custom</p>",
        "id": 189191563,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1582787106
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"209168\">@Thom Chiovoloni</span> if that's the reason then we can instead put the whole Repr enum in a box. That way the error case will be 8 bytes instead of the current 16</p>",
        "id": 189306461,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1582894289
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> <br>\nhow bad is it to call errno from liballoc?<br>\nif we-will provide a shim that either panics/returns some default when there's no OS. <br>\nthis is the only real problem with moving std::io to alloc::io</p>",
        "id": 190836212,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1584445461
    },
    {
        "content": "<p>That's probably a deal-breaker.</p>",
        "id": 190836268,
        "sender_full_name": "Amanieu",
        "timestamp": 1584445508
    }
]