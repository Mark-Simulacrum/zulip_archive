[
    {
        "content": "<p>This has come up a lot recently so I finally went and wrote up an RFC for how I think we can solve this problem once and for all: <a href=\"https://github.com/rust-lang/rfcs/pull/3240\">https://github.com/rust-lang/rfcs/pull/3240</a></p>",
        "id": 274195773,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1646432085
    },
    {
        "content": "<p>One idea I had floating around at one point was to gate these on compiler version and maybe even crate version for arbitrary crates, but I'm not sure if the trade-offs are worth it.</p>",
        "id": 274208356,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1646441227
    },
    {
        "content": "<p>By gate on compiler version do you mean determine the edition based on the stable since version?</p>",
        "id": 274210170,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1646442992
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby [she/her]</span> This looks great!</p>",
        "id": 274211512,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1646444560
    },
    {
        "content": "<p>Seems like the right balance.</p>",
        "id": 274211521,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1646444577
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby [she/her]</span> <a href=\"#narrow/stream/219381-t-libs/topic/RFC.20for.20preventing.20ambiguous.20inference.20breakages/near/274210170\">said</a>:</p>\n<blockquote>\n<p>By gate on compiler version do you mean determine the edition based on the stable since version?</p>\n</blockquote>\n<p>I meant gate not on edition, but on compiler version ala MSRV (filtering out all newer methods). Of course, that might have to be tied into an edition gate requiring crates to specify the compiler version.</p>",
        "id": 274249179,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1646493984
    },
    {
        "content": "<p>yeah, i've also suggested that a few times. treating things that were stabilized after the <code>rust-version</code> in the cargo.toml as unstable in name resolution</p>",
        "id": 274258658,
        "sender_full_name": "Mara",
        "timestamp": 1646505787
    },
    {
        "content": "<p>I (and others) use build scripts (and <code>#[cfg(accessible)]</code> could be used the same way) to detect either rust versions or available functions/features in some cases for internals. This would be broken if the above was made the case (unless you could still use the <code>#[feature]</code> to enable it, even on stable channel).</p>",
        "id": 274260807,
        "sender_full_name": "Connor Horman",
        "timestamp": 1646508653
    }
]