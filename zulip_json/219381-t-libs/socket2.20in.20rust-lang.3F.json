[
    {
        "content": "<p>Hey all! I've been the home of the <code>socket2</code> crate for some time now (<a href=\"https://github.com/alexcrichton/socket2-rs\">https://github.com/alexcrichton/socket2-rs</a>) where the crate tries to soup up the socket support in libstd with low level configuration and an API that closely mirrors the raw berkely sockets API. I haven't been able to maintain  it for some time now but  @Thomasdezeeuw has been doing a great job. I was wondering, what would the libs team think of moving the repository into the rust-lang organization? I think it's either that or the tokio organization at this point.</p>",
        "id": 214434834,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1603555286
    },
    {
        "content": "<p>If we intend to eventually land <code>Socket</code> in std, then I think it makes sense to move into the rust-lang org. If we don't, then I think it may as well just live somewhere externally.</p>",
        "id": 214447463,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1603570838
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> I don't think it makes sense to use the <code>tokio</code> organization as the home for something that doesn't have a hard requirement on tokio.</p>",
        "id": 214468713,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1603601636
    },
    {
        "content": "<p>Looking over the API, I personally <em>would</em> love to see that become part of <code>std</code> someday.</p>",
        "id": 214468847,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1603601815
    },
    {
        "content": "<p>My long term plan for socket2 is to use in std lib. First I would like to use it Mio however. This would give the entire Rust community a single crate for dealing with socket2 that would support all OS/architectures that Rust supports. But this a long term plan ~ two years. If that is too long I'm ok with keeping it as a personal repo until its ready for inclusion in std lib.</p>",
        "id": 214477644,
        "sender_full_name": "Thomas de Zeeuw",
        "timestamp": 1603615020
    },
    {
        "content": "<p>Why does using socket2 in mio need to be a prerequisite?</p>",
        "id": 214503775,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1603649627
    },
    {
        "content": "<p>Using it in std seems orthogonal.</p>",
        "id": 214503787,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1603649642
    },
    {
        "content": "<p>Yes please, <code>socket2</code> as <code>std::net::Socket</code> in the stdlib would be incredibly useful! Pretty much every async runtime builds on some form of <code>net2</code>/<code>socket2</code> as their foundation, and setting connection flags is not great without having direct access to the socket constructor.</p>\n<p>As I understand it WASI is also working on adding a BSD socket API? Exposing it from std could turn that into a nice vertical (Rust stdlib &lt;- WASI &lt;- OS BSD sockets)</p>",
        "id": 214549228,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1603703505
    },
    {
        "content": "<p>it does seem like there's some interest to move into rust-lang, so would there be any objection if I were to do that?</p>",
        "id": 214597048,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1603729438
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> Sounds great! Do you know how far off <code>socket2</code> might be from being added to <code>std</code> itself?</p>",
        "id": 214615665,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1603737394
    },
    {
        "content": "<p>IMO the biggest question is how to handle platform-specific settings</p>",
        "id": 214618236,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1603738631
    },
    {
        "content": "<p>extension traits are the \"traditional\" way, but they're really kind of gross, so I'm wondering how things would go if we just add cfg'd methods now that rustdoc has support to display the cfg's required for a specific bit of API</p>",
        "id": 214618298,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1603738676
    },
    {
        "content": "<p>the atomics already do that. and with cfg(accessible) it might become more common</p>",
        "id": 214618412,
        "sender_full_name": "Mara",
        "timestamp": 1603738724
    },
    {
        "content": "<p>yeah</p>",
        "id": 214618456,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1603738742
    },
    {
        "content": "<p>and this seems like a less risky place to try it out since Socket is a quite low-level API</p>",
        "id": 214618487,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1603738760
    },
    {
        "content": "<p>I think on a type like Socket which has almost all APIs otherwise behind extension traits it makes sense</p>",
        "id": 214618493,
        "sender_full_name": "simulacrum",
        "timestamp": 1603738762
    },
    {
        "content": "<p>where presumably you'd have a better idea of just how platform specific you're being</p>",
        "id": 214618501,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1603738770
    },
    {
        "content": "<p>yeah</p>",
        "id": 214618517,
        "sender_full_name": "Mara",
        "timestamp": 1603738780
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204346\">@Ashley Mannix</span> tbh I haven't followed the crate a ton recently and it's recently gone through a number of changes so I'm not sure.</p>",
        "id": 214642031,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1603751978
    },
    {
        "content": "<p>where I left it I wouldn't consider it too far from adding to std itself</p>",
        "id": 214642036,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1603751988
    },
    {
        "content": "<p>ok I'll plan to move the repo soon unless anyone feels otherwise in the next few days</p>",
        "id": 214642265,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1603752158
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243558\">Steven Fackler</span> <a href=\"#narrow/stream/219381-t-libs/topic/socket2.20in.20rust-lang.3F/near/214618298\">said</a>:</p>\n<blockquote>\n<p>extension traits are the \"traditional\" way, but they're really kind of gross, so I'm wondering how things would go if we just add cfg'd methods now that rustdoc has support to display the cfg's required for a specific bit of API</p>\n</blockquote>\n<p>small note, rustdoc has had this support for a while, the only thing that changed recently is it now works for <code>impl Trait</code></p>",
        "id": 214648729,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603757900
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/rustdoc/advanced-features.html#interactions-between-platform-specific-docs\">https://doc.rust-lang.org/nightly/rustdoc/advanced-features.html#interactions-between-platform-specific-docs</a></p>",
        "id": 214648759,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603757940
    },
    {
        "content": "<p>Side note, is there any fundamental reason we couldn't move existing extension trait methods into the types they extend?</p>",
        "id": 214804550,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1603871998
    },
    {
        "content": "<p>No - the traits are only there to force people to explicitly import them as a kind of speedbump to accidentally writing platform-dependent code</p>",
        "id": 214823062,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1603884246
    },
    {
        "content": "<p>The portability lint was designed to act as that, but it's not clear that it's ever actually going to happen</p>",
        "id": 214823099,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1603884275
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243558\">@Steven Fackler</span> I'm not sure that's worth the corresponding hassle. I <em>do</em> want to see the portability lint happen, and I'd love to see someone pick that up and run with it, but I don't think that <em>should</em> be a prerequisite to simplifying target-specific methods to just be <code>cfg</code>-controlled.</p>",
        "id": 214889406,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1603915022
    },
    {
        "content": "<p>Yeah I don't think it's a hard prereq either</p>",
        "id": 214889540,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1603915084
    },
    {
        "content": "<p>I don't share that opinion at all. Being able to see that the code is platform specific in code review has been critical to keeping codebases properly portable.</p>",
        "id": 214916209,
        "sender_full_name": "nagisa",
        "timestamp": 1603933583
    },
    {
        "content": "<p>I don't particularly care if its an import or a lint or something else entirely as long as its obvious from looking at the code that e.g. <code>(x: &amp;OsStr).as_bytes()</code> is not portable.</p>",
        "id": 214916281,
        "sender_full_name": "nagisa",
        "timestamp": 1603933677
    },
    {
        "content": "<p>I'd definitely like to have the portability lint, along with the ability to easily assert somewhere at the top of the code \"this is target X, don't warn about anything that works on target X\".</p>",
        "id": 214930462,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1603952770
    },
    {
        "content": "<p>But the extension traits are a painful way of handling that. Leaving aside the splits in the code, and the separate imports, they're also hard to extend without causing breakage, and require the careful \"sealed trait\" dance, which people can and do forget when adding new ones.</p>",
        "id": 214930497,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1603952869
    },
    {
        "content": "<p>They also require a separate trait for any given variation in targets (e.g. one extension trait for unix and another one for linux), which introduces substantial friction when introducing support for calling some platform's functions.</p>",
        "id": 214930627,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1603953054
    },
    {
        "content": "<p>I think there's quite a bit of value in eliminating that in favor of the standard <code>cfg</code> mechanism.</p>",
        "id": 214930638,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1603953075
    },
    {
        "content": "<p>/me glances at <a href=\"https://github.com/rust-lang/rust/issues/77089\">https://github.com/rust-lang/rust/issues/77089</a></p>",
        "id": 214965373,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603977954
    },
    {
        "content": "<p>ok repo moved! <a href=\"https://github.com/rust-lang/socket2-rs\">https://github.com/rust-lang/socket2-rs</a></p>",
        "id": 215017728,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604000437
    },
    {
        "content": "<p>Do the same maintainer(s) still have write access?</p>",
        "id": 215017855,
        "sender_full_name": "Mara",
        "timestamp": 1604000514
    },
    {
        "content": "<p>It got a new PR just now. Is there anyone right now who can actually review and merge things on this repository, now that it's moved? Not sure where to look exactly, but I think nobody has write access to it right now.</p>",
        "id": 215085686,
        "sender_full_name": "Mara",
        "timestamp": 1604059892
    },
    {
        "content": "<p>@Thomasdezeeuw and @stjepang are both admins on the repo according to the manage access page</p>",
        "id": 215088502,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1604061561
    },
    {
        "content": "<p>Ah okay, cool :)</p>",
        "id": 215095352,
        "sender_full_name": "Mara",
        "timestamp": 1604065305
    },
    {
        "content": "<p>@stjepang unfortunately doesn't have enough time to maintain socket2 any more. I'm quite busy this month still, but after that should have enough time for socket2. I would however like someone to review with me, especially the prs I intend to send</p>",
        "id": 215693607,
        "sender_full_name": "Thomas de Zeeuw",
        "timestamp": 1604572175
    },
    {
        "content": "<p>I wouldn't mind helping out with reviews there, if that helps. But maybe some of the existing contriutors want to help maintain socket2? Looks like <code>de-vri-es</code> has been somewhat active lately.</p>",
        "id": 215695153,
        "sender_full_name": "Mara",
        "timestamp": 1604573047
    }
]