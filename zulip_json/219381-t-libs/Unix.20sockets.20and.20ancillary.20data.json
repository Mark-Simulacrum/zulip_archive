[
    {
        "content": "<p>Could someone take a look at <a href=\"https://github.com/rust-lang/rust/pull/69864\">https://github.com/rust-lang/rust/pull/69864</a> ? I provided some feedback that got it to what I think is a workable state, but I'm not an approver for that area.</p>",
        "id": 207906851,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598309745
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> are you looking for API or code review?</p>",
        "id": 207964184,
        "sender_full_name": "simulacrum",
        "timestamp": 1598363105
    },
    {
        "content": "<p>Primarily the latter. I think the API seems reasonable now, but of course that feedback is welcome too.</p>",
        "id": 207972227,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598366861
    },
    {
        "content": "<p>Hm. Generally speaking we're trying to move out code review into libs-impl.</p>\n<p>It looks like it's adding a lot of code -- I guess everything added is unstable? It might make sense to just merge; I can look over the code if you think that would be helpful -- not sure how much review you've already done.</p>",
        "id": 207972694,
        "sender_full_name": "simulacrum",
        "timestamp": 1598367033
    },
    {
        "content": "<p>I've done fairly thorough review, but libs aren't my area so there might be something I missed.</p>",
        "id": 207973849,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598367540
    },
    {
        "content": "<p>The biggest piece of the patch is splitting a file that would otherwise pass the soft file size limit.</p>",
        "id": 207973994,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598367598
    },
    {
        "content": "<p>And then the ancillary handling is all new code.</p>",
        "id": 207974086,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598367625
    },
    {
        "content": "<p>I am personally inclined to just say \"good enough\" if you've done a fairly thorough review</p>",
        "id": 207974163,
        "sender_full_name": "simulacrum",
        "timestamp": 1598367661
    },
    {
        "content": "<p>Could you give a quick check that the marking of things as unstable is done correctly and nothing was missed/insta-stable? As long as that much is right, then sure.</p>",
        "id": 207975307,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598368156
    },
    {
        "content": "<p>That's the kind of thing I'm not yet used to checking for.</p>",
        "id": 207975382,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598368197
    },
    {
        "content": "<p>yeah, left two comments</p>",
        "id": 207975471,
        "sender_full_name": "simulacrum",
        "timestamp": 1598368224
    },
    {
        "content": "<p>stable trait impls on stable types will be insta-stable, regardless of the attribute</p>",
        "id": 207975499,
        "sender_full_name": "cuviper",
        "timestamp": 1598368241
    },
    {
        "content": "<p>otherwise, the compiler will warn you if you're missing stable/unstable</p>",
        "id": 207975523,
        "sender_full_name": "cuviper",
        "timestamp": 1598368257
    },
    {
        "content": "<p>I suppose even unstable trait impls can have stable implications if they're used indirectly, like <code>Try</code></p>",
        "id": 207975634,
        "sender_full_name": "cuviper",
        "timestamp": 1598368313
    },
    {
        "content": "<p>yeah I'm not clear on whether <code>TryFrom&lt;SomeType&gt; for SomeUnstableType</code> is observable</p>",
        "id": 207975779,
        "sender_full_name": "simulacrum",
        "timestamp": 1598368369
    },
    {
        "content": "<p>seems better to be on the safe side.</p>",
        "id": 207975790,
        "sender_full_name": "simulacrum",
        "timestamp": 1598368374
    },
    {
        "content": "<p>The patch looks too long, kinda hard to read all at once.</p>",
        "id": 207978723,
        "sender_full_name": "pickfire",
        "timestamp": 1598369597
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"cp\">#[cfg(any(</span>\n<span class=\"cp\">    target_os = </span><span class=\"s\">&quot;haiku&quot;</span><span class=\"cp\">,</span>\n<span class=\"cp\">    target_os = </span><span class=\"s\">&quot;solaris&quot;</span><span class=\"cp\">,</span>\n<span class=\"cp\">    target_os = </span><span class=\"s\">&quot;illumos&quot;</span><span class=\"cp\">,</span>\n<span class=\"cp\">    target_os = </span><span class=\"s\">&quot;macos&quot;</span><span class=\"cp\">,</span>\n<span class=\"cp\">    target_os = </span><span class=\"s\">&quot;ios&quot;</span><span class=\"cp\">,</span>\n<span class=\"cp\">    target_os = </span><span class=\"s\">&quot;freebsd&quot;</span><span class=\"cp\">,</span>\n<span class=\"cp\">    target_os = </span><span class=\"s\">&quot;dragonfly&quot;</span><span class=\"cp\">,</span>\n<span class=\"cp\">    target_os = </span><span class=\"s\">&quot;openbsd&quot;</span><span class=\"cp\">,</span>\n<span class=\"cp\">    target_os = </span><span class=\"s\">&quot;netbsd&quot;</span><span class=\"cp\">,</span>\n<span class=\"cp\">    target_os = </span><span class=\"s\">&quot;linux&quot;</span><span class=\"cp\">,</span>\n<span class=\"cp\">    target_os = </span><span class=\"s\">&quot;android&quot;</span><span class=\"cp\">,</span>\n<span class=\"cp\">    target_os = </span><span class=\"s\">&quot;emscripten&quot;</span><span class=\"cp\">,</span>\n<span class=\"cp\">    target_os = </span><span class=\"s\">&quot;fuchsia&quot;</span><span class=\"cp\">,</span>\n<span class=\"cp\">    target_env = </span><span class=\"s\">&quot;uclibc&quot;</span><span class=\"cp\">,</span>\n<span class=\"cp\">))]</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 207979498,
        "sender_full_name": "pickfire",
        "timestamp": 1598369954
    },
    {
        "content": "<p>Wow, I wish there is something like <code>matches!</code> there, or  maybe a variable or something to shorten it.</p>",
        "id": 207979532,
        "sender_full_name": "pickfire",
        "timestamp": 1598369975
    },
    {
        "content": "<p>I would at least sort it, so humans can easily tell if an OS is in that list</p>",
        "id": 207980158,
        "sender_full_name": "cuviper",
        "timestamp": 1598370321
    },
    {
        "content": "<p>Maybe you could comment in the post <span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> ?</p>",
        "id": 207981951,
        "sender_full_name": "pickfire",
        "timestamp": 1598371247
    },
    {
        "content": "<p>IMO there needs to be a T-libs decision on whether it is acceptable to have public api in <code>os::unix</code> based on <code>target_os</code>.</p>",
        "id": 207984887,
        "sender_full_name": "nagisa",
        "timestamp": 1598372686
    },
    {
        "content": "<p>like I wrote in my comment, so far everything inside <code>os::unix</code> was available as long as <code>cfg(unix)</code> held.</p>",
        "id": 207984945,
        "sender_full_name": "nagisa",
        "timestamp": 1598372710
    },
    {
        "content": "<p>Do we have any unix targets that aren't included in the list above? Is the <code>#[cfg]</code> here even necessary?</p>",
        "id": 207993293,
        "sender_full_name": "Amanieu",
        "timestamp": 1598376309
    },
    {
        "content": "<p>Unix sockets and sending fds over them should be supported by any platform that claims to be unix.</p>",
        "id": 207993353,
        "sender_full_name": "Amanieu",
        "timestamp": 1598376337
    },
    {
        "content": "<p><code>vxworks</code>?</p>",
        "id": 207993479,
        "sender_full_name": "cuviper",
        "timestamp": 1598376383
    },
    {
        "content": "<p><code>redox</code>?</p>",
        "id": 207993755,
        "sender_full_name": "cuviper",
        "timestamp": 1598376508
    },
    {
        "content": "<p>It seems like the APIs should just be stubbed out and return errors on those platforms</p>",
        "id": 207994001,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1598376618
    },
    {
        "content": "<p>also <code>target_env = newlib</code>.</p>",
        "id": 207994063,
        "sender_full_name": "nagisa",
        "timestamp": 1598376650
    },
    {
        "content": "<p>My understanding is that it was originally written for all Unix platforms, and then a request on the issue asked for it to be limited to platforms for which the public headers documented the necessary details.</p>",
        "id": 208022164,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598388884
    },
    {
        "content": "<p>This was in response to Amanieu’s question on what platforms aren’t in this list that are otherwise <code>cfg(unix)</code></p>",
        "id": 208043688,
        "sender_full_name": "nagisa",
        "timestamp": 1598404667
    },
    {
        "content": "<p>I understand that. I think that list was written without regard for if it was the complete list for Unix.</p>\n<p>That said, I don't think it is.</p>",
        "id": 208050567,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598413849
    }
]