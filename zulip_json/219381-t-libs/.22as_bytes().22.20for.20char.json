[
    {
        "content": "<p>While thinking about some of the implications of <code>concat_bytes!()</code> this morning I realized it seemed a little odd that <code>char</code> didn't have any easy way to get the byte representation.</p>\n<p>This would be pretty easy to do, but it's a little different than for <code>&amp;str</code> because <code>char</code> is copy and most likely not behind a reference, meaning the implementation would probably look as follows - but I think this means the naming of <code>as_</code> would be non-idomatic? (Since it's not returning a reference.) What would the ideal name of this function be?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">as_bytes</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// SAFETY: const sound because we transmute two types with the same layout</span>\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">mem</span>::<span class=\"n\">transmute</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 247741870,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1627668001
    },
    {
        "content": "<p>that looks equivalent to <code>(c as u32).to_ne_bytes()</code> i think?</p>",
        "id": 247742756,
        "sender_full_name": "BurntSushi",
        "timestamp": 1627668420
    },
    {
        "content": "<p>Hmm, I suppose that would be a way to do it, I guess it's just not as intuitive. Fair I suppose.</p>",
        "id": 247744173,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1627669191
    },
    {
        "content": "<p>(Also I guess that answers the question in a roundabout way: <code>to_bytes()</code>, but maybe it isn't desirable.)</p>",
        "id": 247744350,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1627669259
    },
    {
        "content": "<p>You could also argue for <code>[u8; 3]</code> in this case, since the maximum code point is U+10FFFF</p>",
        "id": 247745132,
        "sender_full_name": "cuviper",
        "timestamp": 1627669684
    },
    {
        "content": "<p>i'm not sure the benefit of doing this, though. I think <code>concat_bytes!</code> probably would want not the byte representation of the <code>char</code>, but its UTF-8 encoded representation (which is different, but commonly confused)...</p>",
        "id": 247745916,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1627670083
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> 1M characters ought to be enough for everyone.</p>",
        "id": 247746263,
        "sender_full_name": "The 8472",
        "timestamp": 1627670287
    },
    {
        "content": "<p>UTF-8 originally went up to 6 bytes for 31 significant bits</p>",
        "id": 247746985,
        "sender_full_name": "cuviper",
        "timestamp": 1627670697
    },
    {
        "content": "<p>right. you still sometimes see code in the wild that handles that</p>",
        "id": 247747065,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1627670740
    },
    {
        "content": "<p>According to <a href=\"https://www.cl.cam.ac.uk/~mgk25/ucs/utf-8-history.txt\">the designers of UTF-8</a>, \"The 4, 5, and 6 byte sequences are only there for political reasons. I would prefer to delete these.\"</p>",
        "id": 247747460,
        "sender_full_name": "Chris Denton",
        "timestamp": 1627670952
    },
    {
        "content": "<p>still, I'd rather use utf32 than 3byte-chars</p>",
        "id": 247747737,
        "sender_full_name": "The 8472",
        "timestamp": 1627671099
    },
    {
        "content": "<p>probably simd-friendlier.</p>",
        "id": 247747764,
        "sender_full_name": "The 8472",
        "timestamp": 1627671121
    },
    {
        "content": "<p>it's very unclear what 'the byte representation' of a <code>char</code> is. i'd expect the utf-8 encoding, not some byte representation of the codepoint as 32-bit integer. we could add a <code>char.codepoint()</code> function that gives a u32, such that you can write <code>'a'.codepoint().to_ne_bytes()</code> if you want the native-endian encoding of the codepoint. we already have <code>'a'.encode_utf8(&amp;mut [0; 4])</code> for utf-8 encoding. wouldn't hurt to have something with a slightly easier api, but it's a bit tricky because it can be 1, 2, 3 or 4 bytes. maybe once we have something like ArrayVec&lt;u8, 4&gt; in std.</p>",
        "id": 247800840,
        "sender_full_name": "Mara",
        "timestamp": 1627733037
    },
    {
        "content": "<p>I'd expect the bytes you see if you convert a <code>&amp;[char]</code> to <code>&amp;[u8]</code></p>",
        "id": 247806479,
        "sender_full_name": "Lokathor",
        "timestamp": 1627741401
    },
    {
        "content": "<p>particularly, since char is always 4 bytes, I'd expect the \"bytes of a char\" to always be 4 bytes</p>",
        "id": 247806524,
        "sender_full_name": "Lokathor",
        "timestamp": 1627741452
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/219381-t-libs/topic/.22as_bytes.28.29.22.20for.20char/near/247806479\">said</a>:</p>\n<blockquote>\n<p>I'd expect the bytes you see if you convert a <code>&amp;[char]</code> to <code>&amp;[u8]</code></p>\n</blockquote>\n<p>i think this is probably not what most people would expect, or if they would, its because they thought that the bytes would end up being the same as the UTF-8 representation.</p>",
        "id": 247812462,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1627748191
    },
    {
        "content": "<p>If you want that, you can always do <code>(c as u32).to_ne_bytes()</code> or w/e. adding another way to do this seems too likely to cause confusion IMO.</p>",
        "id": 247812469,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1627748206
    },
    {
        "content": "<p>What's the use case for getting the raw bytes of a <code>char</code>?</p>",
        "id": 247815677,
        "sender_full_name": "Chris Denton",
        "timestamp": 1627752743
    },
    {
        "content": "<p>serialization mostly, i guess</p>",
        "id": 247818540,
        "sender_full_name": "Lokathor",
        "timestamp": 1627756723
    },
    {
        "content": "<p>just serialize as a u32 then</p>",
        "id": 247818916,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1627757283
    },
    {
        "content": "<p>I wasn't even the one making the request for this to begin with :P</p>",
        "id": 247826716,
        "sender_full_name": "Lokathor",
        "timestamp": 1627770382
    },
    {
        "content": "<p>It just seems very strange that <code>str</code> has <code>.as_bytes()</code> but <code>char</code> doesn't have an equivalent.</p>",
        "id": 248248989,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1628010008
    },
    {
        "content": "<p>a <code>str</code> is just a restricted <code>[u8]</code>, but a <code>char</code> doesn't have the same byte layout at all.</p>",
        "id": 248249150,
        "sender_full_name": "Lokathor",
        "timestamp": 1628010090
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/219381-t-libs/topic/.22as_bytes.28.29.22.20for.20char/near/247806479\">said</a>:</p>\n<blockquote>\n<p>I'd expect the bytes you see if you convert a <code>&amp;[char]</code> to <code>&amp;[u8]</code></p>\n</blockquote>\n<p>Convert how?  Mojibake is such a pervasive bug, talking about Unicode â†” bytes conversion without specifying the choice of encoding is irresponsible. <code>str::as_bytes</code> can arguably get away with UTF-8 being the implied universal default, but not <em>native-endian</em> UTF-32, IMO</p>",
        "id": 248380121,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1628097562
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"319552\">Jeremiah Senkpiel</span> <a href=\"#narrow/stream/219381-t-libs/topic/.22as_bytes.28.29.22.20for.20char/near/248248989\">said</a>:</p>\n<blockquote>\n<p>It just seems very strange that <code>str</code> has <code>.as_bytes()</code> but <code>char</code> doesn't have an equivalent.</p>\n</blockquote>\n<p>The equivalent is <code>char::encode_utf8</code></p>",
        "id": 248380157,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1628097581
    },
    {
        "content": "<p>i mean convert as in slice cast.</p>",
        "id": 248381782,
        "sender_full_name": "Lokathor",
        "timestamp": 1628098324
    }
]