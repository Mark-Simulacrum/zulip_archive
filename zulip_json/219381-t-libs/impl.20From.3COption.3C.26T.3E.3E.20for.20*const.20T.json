[
    {
        "content": "<p>I wasn't able to find a built-in way to simply and safely convert from <code>Option&lt;&amp;T&gt;</code> to <code>*const T</code> (where <code>None</code> becomes null). This is functionally a transmute, but it surprised me that there's no <code>Option&lt;&amp;T&gt;::as_ptr</code> or other safe one-liner, and that I either needed to transmute or invoke <code>core::ptr::null</code> manually.</p>",
        "id": 270651914,
        "sender_full_name": "Alyssa Haroldsen [she]",
        "timestamp": 1643936204
    },
    {
        "content": "<p>Would it make sense for the stdlib to <code>impl&lt;T: ?Sized&gt; From&lt;Option&lt;&amp;T&gt;&gt; for *const T</code> and <code>impl&lt;T: ?Sized&gt; From&lt;Option&lt;&amp;mut T&gt;&gt; for *mut T</code>? There could also be associated <code>as_ptr</code> and <code>as_mut_ptr</code> for <code>Option&lt;&amp;T&gt;</code> and <code>Option&lt;&amp;mut T&gt;</code></p>",
        "id": 270652070,
        "sender_full_name": "Alyssa Haroldsen [she]",
        "timestamp": 1643936308
    },
    {
        "content": "<p>Having a <code>From</code> implementation sounds reasonable. Not sure how I feel about a method.</p>",
        "id": 270652273,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1643936430
    },
    {
        "content": "<p>True, it would be confusing especially considering <code>as_ref</code> converts from <code>&amp;Option&lt;T&gt;</code> to <code>Option&lt;&amp;T&gt;</code> and <code>as_ptr</code> would do something entirely different.</p>",
        "id": 270652521,
        "sender_full_name": "Alyssa Haroldsen [she]",
        "timestamp": 1643936639
    },
    {
        "content": "<p>Is this a small enough thing that I could just send a PR with the code changes?</p>",
        "id": 270652689,
        "sender_full_name": "Alyssa Haroldsen [she]",
        "timestamp": 1643936735
    },
    {
        "content": "<p>(the <code>From</code> impls)</p>",
        "id": 270652697,
        "sender_full_name": "Alyssa Haroldsen [she]",
        "timestamp": 1643936744
    },
    {
        "content": "<p><code>T: ?Sized</code> is the trick though -- what metadata do you use for that pointer?</p>",
        "id": 270653366,
        "sender_full_name": "cuviper",
        "timestamp": 1643937251
    },
    {
        "content": "<p>isn't this <code>core::ptr::as_ref</code>?</p>",
        "id": 270653394,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643937278
    },
    {
        "content": "<p>I don't think you can just use <code>transmute</code>, because that metadata is probably in the uninit padding of <code>None</code></p>",
        "id": 270653419,
        "sender_full_name": "cuviper",
        "timestamp": 1643937305
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"271719\">@Mario Carneiro</span> this is the other direction</p>",
        "id": 270653444,
        "sender_full_name": "cuviper",
        "timestamp": 1643937321
    },
    {
        "content": "<p>Isn't the metadata irrelevant here? <code>Option&lt;&amp;T&gt;</code> has the same representation as <code>*const T</code>, even for <code>T: ?Sized</code>. <del>https://doc.rust-lang.org/std/option/index.html#representation</del> less confident about my source</p>",
        "id": 270653665,
        "sender_full_name": "Alyssa Haroldsen [she]",
        "timestamp": 1643937489
    },
    {
        "content": "<p>oh interesting. This is the obvious implementation and it fails at <code>std::ptr::null</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">to_ptr</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">val</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;&amp;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">val</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">None</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">ptr</span>::<span class=\"n\">null</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 270653709,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643937529
    },
    {
        "content": "<p>are there no null wide pointers?</p>",
        "id": 270653726,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643937545
    },
    {
        "content": "<p>There are null wide pointers, the data component has no restriction. But <code>null()</code> doesn't know how to propagate possible metadata from the <code>&amp;T</code></p>",
        "id": 270653855,
        "sender_full_name": "Alyssa Haroldsen [she]",
        "timestamp": 1643937652
    },
    {
        "content": "<p>Though if it is <code>None</code>, there's no metadata to read. Whatever's there should be fine to put in though?</p>",
        "id": 270653898,
        "sender_full_name": "Alyssa Haroldsen [she]",
        "timestamp": 1643937686
    },
    {
        "content": "<p>Assuming wide raw pointers truly have no restriction on their bits, which still seems to be contentious</p>",
        "id": 270653934,
        "sender_full_name": "Alyssa Haroldsen [she]",
        "timestamp": 1643937712
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"400643\">Alyssa Haroldsen [she]</span> <a href=\"#narrow/stream/219381-t-libs/topic/impl.20From.3COption.3C.26T.3E.3E.20for.20*const.20T/near/270653855\">said</a>:</p>\n<blockquote>\n<p>There are null wide pointers, the data component has no restriction.</p>\n</blockquote>\n<p>Is it possible to create one in safe code?</p>",
        "id": 270654029,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643937758
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"271719\">@Mario Carneiro</span> <code>core::ptr::slice_from_raw_parts(core::ptr::null(), 0)</code></p>",
        "id": 270654103,
        "sender_full_name": "Alyssa Haroldsen [she]",
        "timestamp": 1643937831
    },
    {
        "content": "<p>that's for a slice though, not a dyn pointer. I can believe it for slices but dyn metadata can't just be 0 (or at least it is not decided yet whether this is alright)</p>",
        "id": 270654246,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643937899
    },
    {
        "content": "<p>A slice is a DST?</p>",
        "id": 270654273,
        "sender_full_name": "Alyssa Haroldsen [she]",
        "timestamp": 1643937926
    },
    {
        "content": "<p>sorry, should clarify</p>",
        "id": 270654292,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643937944
    },
    {
        "content": "<p>Yeah dyn pointer is where it's weird</p>",
        "id": 270654366,
        "sender_full_name": "Alyssa Haroldsen [she]",
        "timestamp": 1643937994
    },
    {
        "content": "<p>I need to get back to the raw pointer metadata API Github thread to argue that restrictions on the metadata component of raw pointers are a bad idea and we shouldn't do that, as it violates the entire spirit of raw pointers</p>",
        "id": 270654393,
        "sender_full_name": "Alyssa Haroldsen [she]",
        "timestamp": 1643938022
    },
    {
        "content": "<p>I think it makes sense to require valid metadata, but it is also reasonable to allow <code>(0, 0)</code> specifically as a valid <code>*const dyn Trait</code></p>",
        "id": 270654606,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643938153
    },
    {
        "content": "<p>I'm not sure why it makes sense to require anything of raw pointers</p>",
        "id": 270654653,
        "sender_full_name": "Alyssa Haroldsen [she]",
        "timestamp": 1643938193
    },
    {
        "content": "<p>That's why they're raw</p>",
        "id": 270654656,
        "sender_full_name": "Alyssa Haroldsen [she]",
        "timestamp": 1643938200
    },
    {
        "content": "<p>there is no language level access to the metadata, no way to create them outside the approved mechanisms that always produce valid metadata</p>",
        "id": 270654743,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643938266
    },
    {
        "content": "<p>if there was a way to hand roll vtables I might agree with you but it is explicitly off limits in current rust</p>",
        "id": 270654767,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643938297
    },
    {
        "content": "<p>No language level access _yet_, it's nightly-only because this is still an argument</p>",
        "id": 270654828,
        "sender_full_name": "Alyssa Haroldsen [she]",
        "timestamp": 1643938330
    },
    {
        "content": "<p>no, AFAIK there is no nightly access either</p>",
        "id": 270654849,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643938351
    },
    {
        "content": "<p>Plus I can always transmute a raw pointer</p>",
        "id": 270654855,
        "sender_full_name": "Alyssa Haroldsen [she]",
        "timestamp": 1643938361
    },
    {
        "content": "<p><code>Pointee::Metadata</code> still treats the metadata opaquely</p>",
        "id": 270654861,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643938367
    },
    {
        "content": "<p>yeah but that doesn't make it non-UB</p>",
        "id": 270654869,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643938377
    },
    {
        "content": "<p>My argument is that raw pointers specifically exist to have no invariants, and have those invariants asserted through <code>unsafe</code>. Accessing dyn metadata of a wide raw pointer should be unsafe, just like dereferencing it would be.</p>",
        "id": 270654941,
        "sender_full_name": "Alyssa Haroldsen [she]",
        "timestamp": 1643938438
    },
    {
        "content": "<p>But that's only because dyn metadata has an invariant - it has to be a valid vtable. There is no such requirement on the metadata of slices, since all possible bits are valid</p>",
        "id": 270655019,
        "sender_full_name": "Alyssa Haroldsen [she]",
        "timestamp": 1643938476
    },
    {
        "content": "<p>except <code>uninit</code></p>",
        "id": 270655044,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643938493
    },
    {
        "content": "<p>Yes, except that :)</p>",
        "id": 270655061,
        "sender_full_name": "Alyssa Haroldsen [she]",
        "timestamp": 1643938504
    },
    {
        "content": "<p>All possible initialized bits are valid</p>",
        "id": 270655078,
        "sender_full_name": "Alyssa Haroldsen [she]",
        "timestamp": 1643938525
    },
    {
        "content": "<p>so <code>std::ptr::null_slice()</code> could be a thing, but general <code>null</code> seems open</p>",
        "id": 270655168,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643938579
    },
    {
        "content": "<p>Anyways, I'm fine deferring <code>T: ?Sized</code> for this impl until the metadata problem is hashed out. Would it be small enough to just upload a PR? It would be my first Rust code contribution <span aria-label=\"happy\" class=\"emoji emoji-1f600\" role=\"img\" title=\"happy\">:happy:</span></p>",
        "id": 270655277,
        "sender_full_name": "Alyssa Haroldsen [she]",
        "timestamp": 1643938630
    },
    {
        "content": "<p>Yes, you can just open a PR :)</p>",
        "id": 270655351,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1643938650
    },
    {
        "content": "<p>There's not a problem adding <code>?Sized</code> to a trait impl after the fact, right?</p>",
        "id": 270655377,
        "sender_full_name": "Alyssa Haroldsen [she]",
        "timestamp": 1643938657
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"400643\">Alyssa Haroldsen [she]</span> <a href=\"#narrow/stream/219381-t-libs/topic/impl.20From.3COption.3C.26T.3E.3E.20for.20*const.20T/near/270653934\">said</a>:</p>\n<blockquote>\n<p>Assuming wide raw pointers truly have no restriction on their bits, which still seems to be contentious</p>\n</blockquote>\n<p><del>I believe you can safely get the size of a wide pointer.</del> Just checked. I stand corrected for trait objects</p>",
        "id": 270656918,
        "sender_full_name": "Connor Horman",
        "timestamp": 1643939462
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"257758\">Connor Horman</span> <a href=\"#narrow/stream/219381-t-libs/topic/impl.20From.3COption.3C.26T.3E.3E.20for.20*const.20T/near/270656918\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"400643\">Alyssa Haroldsen [she]</span> <a href=\"#narrow/stream/219381-t-libs/topic/impl.20From.3COption.3C.26T.3E.3E.20for.20*const.20T/near/270653934\">said</a>:</p>\n<blockquote>\n<p>Assuming wide raw pointers truly have no restriction on their bits, which still seems to be contentious</p>\n</blockquote>\n<p>I believe you can safely get the size of a wide pointer.</p>\n</blockquote>\n<p>Meaning, the length component of a <code>*const [T]</code>? Yes.</p>",
        "id": 270657056,
        "sender_full_name": "Alyssa Haroldsen [she]",
        "timestamp": 1643939514
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"400643\">Alyssa Haroldsen [she]</span> <a href=\"#narrow/stream/219381-t-libs/topic/impl.20From.3COption.3C.26T.3E.3E.20for.20*const.20T/near/270655377\">said</a>:</p>\n<blockquote>\n<p>There's not a problem adding <code>?Sized</code> to a trait impl after the fact, right?</p>\n</blockquote>\n<p>that can be a problem, if coherence allowed downstream to write specific types in place of your <code>T</code>, but they can't here because neither <code>Option</code> nor <code>*const _</code> are fundamental</p>",
        "id": 270657827,
        "sender_full_name": "cuviper",
        "timestamp": 1643940099
    },
    {
        "content": "<p>So do I mark the impl as unstable first then?</p>",
        "id": 270658522,
        "sender_full_name": "Alyssa Haroldsen [she]",
        "timestamp": 1643940646
    },
    {
        "content": "<p>Aren't trait impls usually insta-stable?</p>",
        "id": 270658552,
        "sender_full_name": "Connor Horman",
        "timestamp": 1643940666
    },
    {
        "content": "<p>What to I put it as stable since?</p>",
        "id": 270658569,
        "sender_full_name": "Alyssa Haroldsen [she]",
        "timestamp": 1643940677
    },
    {
        "content": "<p>and do I create an always-stable feature?</p>",
        "id": 270658671,
        "sender_full_name": "Alyssa Haroldsen [she]",
        "timestamp": 1643940753
    },
    {
        "content": "<p>I see the versions listed on forge, I assume I should put 1.60 since that's the current nightly. I also noticed this'll need FCP before merging, which is fine. Though I'm still not sure what to put for <code>feature = </code></p>",
        "id": 270659051,
        "sender_full_name": "Alyssa Haroldsen [she]",
        "timestamp": 1643941035
    },
    {
        "content": "<p>make up a unique feature name, and mark stable on the current nightly version</p>",
        "id": 270659161,
        "sender_full_name": "cuviper",
        "timestamp": 1643941127
    },
    {
        "content": "<p>something like <code>pointer_from_option_ref</code></p>",
        "id": 270659197,
        "sender_full_name": "cuviper",
        "timestamp": 1643941155
    },
    {
        "content": "<p>Got it. I'll also be marking it <code>const</code> and adding <code>#[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]</code></p>",
        "id": 270659318,
        "sender_full_name": "Alyssa Haroldsen [she]",
        "timestamp": 1643941254
    }
]