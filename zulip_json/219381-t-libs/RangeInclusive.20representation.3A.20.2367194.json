[
    {
        "content": "<p>hey <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> , your note about removing <code>fn canonicalized_is_empty</code> led me to a thought ...</p>",
        "id": 187314054,
        "sender_full_name": "pnkfelix",
        "timestamp": 1580770355
    },
    {
        "content": "<p>would it be bonkers to have an associated type be in charge of tracking the <code>is_empty</code>-ness of the iterator that is implicitly associated with the range?</p>",
        "id": 187314132,
        "sender_full_name": "pnkfelix",
        "timestamp": 1580770422
    },
    {
        "content": "<p>hm, so like</p>\n<div class=\"codehilite\"><pre><span></span>struct RangeInclusive&lt;Idx: SomeTrait&gt; {\n    start: Idx,\n    end: Idx,\n    is_empty: Idx::Empty,\n}\n</pre></div>",
        "id": 187314234,
        "sender_full_name": "simulacrum",
        "timestamp": 1580770479
    },
    {
        "content": "<p>so instead of having it be <code>Option&lt;bool&gt;</code>, it would instead be <code>Trait::IterState</code>, which would be <code>bool</code> for integer types, and <code>()</code> for other stuff ?&gt;</p>",
        "id": 187314237,
        "sender_full_name": "pnkfelix",
        "timestamp": 1580770481
    },
    {
        "content": "<p>Yeah exactly</p>",
        "id": 187314245,
        "sender_full_name": "pnkfelix",
        "timestamp": 1580770490
    },
    {
        "content": "<p>i don't know if this would actually <em>resolve</em> the problem here</p>",
        "id": 187314273,
        "sender_full_name": "pnkfelix",
        "timestamp": 1580770510
    },
    {
        "content": "<p>I'm not sure if we can add that backwards-compatibly</p>",
        "id": 187314281,
        "sender_full_name": "simulacrum",
        "timestamp": 1580770515
    },
    {
        "content": "<p>I find the backwards-compatibility situation here very murky</p>",
        "id": 187314295,
        "sender_full_name": "pnkfelix",
        "timestamp": 1580770534
    },
    {
        "content": "<p>i.e., even if we have <code>impl&lt;T&gt; SomeTrait for T {}</code> then I imagine you still need <code>T: SomeTrait</code> if you have <code>struct SomeRangeContainer&lt;T&gt; { range: RangeInclusive&lt;T&gt; }</code>, right?</p>",
        "id": 187314356,
        "sender_full_name": "simulacrum",
        "timestamp": 1580770563
    },
    {
        "content": "<p>ah yeah, it would have to be something everybody implements</p>",
        "id": 187314381,
        "sender_full_name": "pnkfelix",
        "timestamp": 1580770591
    },
    {
        "content": "<p>(I guess it would be <code>default impl&lt;T&gt; SomeTrait for T {}</code></p>",
        "id": 187314382,
        "sender_full_name": "simulacrum",
        "timestamp": 1580770591
    },
    {
        "content": "<p>my point is that we can't add that bound backwards compatibly I think</p>",
        "id": 187314393,
        "sender_full_name": "simulacrum",
        "timestamp": 1580770604
    },
    {
        "content": "<p>right. But maybe even worse, it might have to be something like <code>Sized</code></p>",
        "id": 187314399,
        "sender_full_name": "pnkfelix",
        "timestamp": 1580770608
    },
    {
        "content": "<p>yeah I retract my suggestion now.</p>",
        "id": 187314409,
        "sender_full_name": "pnkfelix",
        "timestamp": 1580770620
    },
    {
        "content": "<p>I think if we were to go down that path I would just eagerly compute the emptiness for integers in the constructor</p>",
        "id": 187314443,
        "sender_full_name": "simulacrum",
        "timestamp": 1580770646
    },
    {
        "content": "<p>i.e., we do that calculation up front</p>",
        "id": 187314449,
        "sender_full_name": "simulacrum",
        "timestamp": 1580770651
    },
    {
        "content": "<p>it does work if you have a blanket impl that applies to all types</p>",
        "id": 187314454,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1580770657
    },
    {
        "content": "<p>yeah but then we'd be doing somethinig involving specialization of an associated type</p>",
        "id": 187314511,
        "sender_full_name": "pnkfelix",
        "timestamp": 1580770684
    },
    {
        "content": "<p>ie. this compiles</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"nc\">Inner</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">Trait</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Outer</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">inner</span>: <span class=\"nc\">Inner</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 187314512,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1580770684
    },
    {
        "content": "<p>true</p>",
        "id": 187314517,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1580770692
    },
    {
        "content": "<p>huh, I would.. not have expected that</p>",
        "id": 187314550,
        "sender_full_name": "simulacrum",
        "timestamp": 1580770740
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Assoc</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Assoc</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"kt\">bool</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Assoc</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">Foo</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">value</span>: <span class=\"nc\">T</span>::<span class=\"n\">Assoc</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Bar</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">Assoc</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>",
        "id": 187314573,
        "sender_full_name": "simulacrum",
        "timestamp": 1580770758
    },
    {
        "content": "<blockquote>\n<p>I think if we were to go down that path I would just eagerly compute the emptiness for integers in the constructor</p>\n</blockquote>\n<p>I assume there's some argument against doing this that's already been posted somewhere?</p>",
        "id": 187314579,
        "sender_full_name": "pnkfelix",
        "timestamp": 1580770764
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> well, it still needs specialization</p>",
        "id": 187314594,
        "sender_full_name": "simulacrum",
        "timestamp": 1580770777
    },
    {
        "content": "<p>and arguably if we go down that road then we are basically saying \"if you're not an integer your PartialEq is just broken\"</p>",
        "id": 187314618,
        "sender_full_name": "simulacrum",
        "timestamp": 1580770801
    },
    {
        "content": "<p>otoh, I don't even know of many uses for PartialEq on ranges</p>",
        "id": 187314678,
        "sender_full_name": "simulacrum",
        "timestamp": 1580770820
    },
    {
        "content": "<p>hmm, i would nonetheless worry about breaking it</p>",
        "id": 187314694,
        "sender_full_name": "pnkfelix",
        "timestamp": 1580770840
    },
    {
        "content": "<p>it = ? in that?</p>",
        "id": 187314716,
        "sender_full_name": "simulacrum",
        "timestamp": 1580770859
    },
    {
        "content": "<p>I would worry about breaking PartialEq on ranges.</p>",
        "id": 187314730,
        "sender_full_name": "pnkfelix",
        "timestamp": 1580770873
    },
    {
        "content": "<p>(even for non-integers)</p>",
        "id": 187314750,
        "sender_full_name": "pnkfelix",
        "timestamp": 1580770890
    },
    {
        "content": "<p>hm, sure -- my proposal does not do so (or at least not known cases), but hash the Hash/Eq problem</p>",
        "id": 187314752,
        "sender_full_name": "simulacrum",
        "timestamp": 1580770894
    },
    {
        "content": "<p>Though I do think the situation of having it be iteration sensitive would not have been so bad</p>",
        "id": 187314769,
        "sender_full_name": "pnkfelix",
        "timestamp": 1580770911
    },
    {
        "content": "<p>i.e. <a href=\"https://github.com/rust-lang/rust/pull/51622#discussion_r196309340\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/51622#discussion_r196309340\">this conversation</a>, I think, could have been dealt with via messaging</p>",
        "id": 187314828,
        "sender_full_name": "pnkfelix",
        "timestamp": 1580770935
    },
    {
        "content": "<p>(and allowing <code> r == (r.start()..=r.end())</code> to not always be true)</p>",
        "id": 187314840,
        "sender_full_name": "pnkfelix",
        "timestamp": 1580770954
    },
    {
        "content": "<p>To be clear:</p>\n<div class=\"codehilite\"><pre><span></span>fn reflexive(r: RangeInclusive) -&gt; bool {\n    r == (r.start()..=r.end())\n}\n</pre></div>\n\n\n<p>is not always true <em>today</em></p>",
        "id": 187314851,
        "sender_full_name": "simulacrum",
        "timestamp": 1580770964
    },
    {
        "content": "<p>because <code>(u8::max_value()..=u8::max_value()).next() != (u8::max_value()..=u8::max_value())</code></p>",
        "id": 187314885,
        "sender_full_name": "simulacrum",
        "timestamp": 1580771004
    },
    {
        "content": "<p>and based on testing there's no sentinel value or anything for performance reasons</p>",
        "id": 187314907,
        "sender_full_name": "simulacrum",
        "timestamp": 1580771025
    },
    {
        "content": "<p>wow, wait, I thought part of the goal of the current design was to achieve that reflexivity property</p>",
        "id": 187314916,
        "sender_full_name": "pnkfelix",
        "timestamp": 1580771039
    },
    {
        "content": "<p>my understanding is that the goal is a bit different</p>",
        "id": 187314959,
        "sender_full_name": "simulacrum",
        "timestamp": 1580771053
    },
    {
        "content": "<p>(I used to think like you did, so my prior comments may have been unclear)</p>",
        "id": 187314974,
        "sender_full_name": "simulacrum",
        "timestamp": 1580771069
    },
    {
        "content": "<p>because AFAIK we cannot guarantee reflexivity like that (emptiness is a property not represented by it)</p>",
        "id": 187315002,
        "sender_full_name": "simulacrum",
        "timestamp": 1580771104
    },
    {
        "content": "<p>i.e., start and end are insufficient to faithfully inform about the whole state of a RangeInclusive</p>",
        "id": 187315021,
        "sender_full_name": "simulacrum",
        "timestamp": 1580771119
    },
    {
        "content": "<p>yeah. I was mostly figuring we would just accept that the <code>x..=y</code> form is incapable of expressing all possible RangeInclusives</p>",
        "id": 187315099,
        "sender_full_name": "pnkfelix",
        "timestamp": 1580771169
    },
    {
        "content": "<p>What we are trying to do, and I believe accomplish today, is:</p>\n<blockquote>\n<p>Right. Both \"compares equal when reconstructed form accessors\" and \"yields the same items if compares equal\" seem desirable, but we can’t have both with this PR’s three-fields design. (<a href=\"https://github.com/rust-lang/rust/pull/51622#discussion_r196513565\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/51622#discussion_r196513565\">https://github.com/rust-lang/rust/pull/51622#discussion_r196513565</a>)</p>\n</blockquote>",
        "id": 187315110,
        "sender_full_name": "simulacrum",
        "timestamp": 1580771181
    },
    {
        "content": "<p>er, specifically, the latter</p>",
        "id": 187315126,
        "sender_full_name": "simulacrum",
        "timestamp": 1580771200
    },
    {
        "content": "<p>i.e. that <em>if</em> PartialEq == true, then self.next() == other.next()</p>",
        "id": 187315133,
        "sender_full_name": "simulacrum",
        "timestamp": 1580771218
    },
    {
        "content": "<p>(gottta go AFK)</p>",
        "id": 187315226,
        "sender_full_name": "pnkfelix",
        "timestamp": 1580771306
    },
    {
        "content": "<p>I think my impl does not satisfy that fully though, as <code>((self.start == self.end) == (other.start == other.end))</code> is a necessary but insufficient condition for determining emptiness, so it would not work.</p>",
        "id": 187315269,
        "sender_full_name": "simulacrum",
        "timestamp": 1580771356
    },
    {
        "content": "<p>And indeed, it does make sense that determining emptiness <em>requires</em> PartialOrd/Step in the general case.</p>",
        "id": 187315379,
        "sender_full_name": "simulacrum",
        "timestamp": 1580771420
    },
    {
        "content": "<p>To me it seems like there's a fundamental design bug somewhere here. Either in the fact that ranges <em>are</em> iterators (vs implementing <code>IntoIterator</code>), or in the fact that ranges don't require <code>PartialOrd</code> for their <code>Idx</code></p>",
        "id": 187460644,
        "sender_full_name": "pnkfelix",
        "timestamp": 1580914913
    },
    {
        "content": "<p>(and I wonder whether we could address such design bugs via an edition change? Not sure.)</p>",
        "id": 187460711,
        "sender_full_name": "pnkfelix",
        "timestamp": 1580914939
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> I think there is a design bug, yes, or at least an unfortunate reality. I think we have no mechanism that allows us to change std via edition mechanisms (though I've long thought about trying to design something, just never had the time)</p>",
        "id": 187462093,
        "sender_full_name": "simulacrum",
        "timestamp": 1580915785
    },
    {
        "content": "<p>the only possible edition change is make <code>x..=y</code> return a different type which is IntoIterator but not Iterator.</p>",
        "id": 187462117,
        "sender_full_name": "kennytm",
        "timestamp": 1580915801
    },
    {
        "content": "<p>hm, I think we can't even really do that without breaking a bunch of code that has <code>let foo: RangeInclusive&lt;usize&gt; = x..=y</code> right?</p>",
        "id": 187462566,
        "sender_full_name": "simulacrum",
        "timestamp": 1580916072
    },
    {
        "content": "<p>fixably, in theory, but seems too big a change for editions</p>",
        "id": 187462585,
        "sender_full_name": "simulacrum",
        "timestamp": 1580916085
    },
    {
        "content": "<p>yeah that would be a disruptive change. i just mean it is \"possible\" (unlike removing Iterator from RangeInclusive which out right requires Rust 2.0) <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 187462835,
        "sender_full_name": "kennytm",
        "timestamp": 1580916242
    },
    {
        "content": "<p>my thoughts in this direction have been to make it not possible to use that impl (i.e., the compiler ignores its existence) in the next edition, with the thought being that since (to my knowledge) you can't test for lack of a trait impl positively that might work out fine</p>",
        "id": 187463070,
        "sender_full_name": "simulacrum",
        "timestamp": 1580916374
    },
    {
        "content": "<p><code>let foo: RangeInclusive&lt;usize&gt; = x..=y</code> seems unlikely to be common</p>",
        "id": 187515250,
        "sender_full_name": "centril",
        "timestamp": 1580956131
    },
    {
        "content": "<p>if we could make edition changes for modules I certainly think we can for this</p>",
        "id": 187515259,
        "sender_full_name": "centril",
        "timestamp": 1580956148
    },
    {
        "content": "<p>whether it's a good idea is a different matter</p>",
        "id": 187515260,
        "sender_full_name": "centril",
        "timestamp": 1580956154
    },
    {
        "content": "<p>well you could also allow coercion from <code>NewRangeInclusive&lt;X&gt;</code> to <code>RangeInclusive&lt;X&gt;</code> <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 187516615,
        "sender_full_name": "kennytm",
        "timestamp": 1580958543
    },
    {
        "content": "<p>in the meantime: PR <a href=\"https://github.com/rust-lang/rust/issues/68835\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/68835\">#68835</a> looks good to me. We can just land it, right <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> ? (I don't think it needs a backport or anything, since its not like we've seen this weaponized in practice...\")</p>",
        "id": 187563296,
        "sender_full_name": "pnkfelix",
        "timestamp": 1581006354
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> possibly modulo test ignoring</p>",
        "id": 187563461,
        "sender_full_name": "simulacrum",
        "timestamp": 1581006448
    },
    {
        "content": "<p>I'll take a look today and try to approve it</p>",
        "id": 187563486,
        "sender_full_name": "simulacrum",
        "timestamp": 1581006461
    },
    {
        "content": "<p>Oh I thought they added that, but did not actually confirm with eyes</p>",
        "id": 187563505,
        "sender_full_name": "pnkfelix",
        "timestamp": 1581006479
    },
    {
        "content": "<p>I think there was a couple iterations</p>",
        "id": 187563595,
        "sender_full_name": "simulacrum",
        "timestamp": 1581006519
    }
]