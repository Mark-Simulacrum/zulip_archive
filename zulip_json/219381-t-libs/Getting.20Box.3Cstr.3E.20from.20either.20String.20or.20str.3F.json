[
    {
        "content": "<p>What combination of existing traits would allow me to get a <code>Box&lt;str&gt;</code> out of either <code>String</code> or <code>&amp;str</code>, without having to create a new custom trait, and without making a copy if given a <code>String</code>? I'd like to call <code>.into_boxed_str()</code> if given a <code>String</code> (which doesn't copy), or copy the <code>str</code> into a box if given a <code>&amp;str</code>.</p>",
        "id": 194979511,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587583594
    },
    {
        "content": "<p>hm, do you want.. traits?</p>",
        "id": 194979659,
        "sender_full_name": "simulacrum",
        "timestamp": 1587583673
    },
    {
        "content": "<p>or would a method be sufficient</p>",
        "id": 194979667,
        "sender_full_name": "simulacrum",
        "timestamp": 1587583677
    },
    {
        "content": "<p>oh, I see, you're intending to accept via a function argument</p>",
        "id": 194979749,
        "sender_full_name": "simulacrum",
        "timestamp": 1587583702
    },
    {
        "content": "<p><code>Box&lt;str&gt;</code> already implements both <code>From&lt;String&gt;</code> and <code>From&lt;&amp;str&gt;</code></p>",
        "id": 194979841,
        "sender_full_name": "cuviper",
        "timestamp": 1587583738
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> Oh, hey, that's perfect.</p>",
        "id": 194980661,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587584086
    },
    {
        "content": "<p>Somehow it never seems to occur to me to look for <code>From</code> impls, especially when I see explicit methods like <code>String::into_boxed_str</code>.</p>",
        "id": 194980749,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587584127
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 194980753,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587584131
    },
    {
        "content": "<p>I think they're relatively recent fwiw</p>",
        "id": 194980767,
        "sender_full_name": "simulacrum",
        "timestamp": 1587584139
    },
    {
        "content": "<p>Sure enough, accepting <code>Into&lt;Box&lt;str&gt;&gt;</code> gets me exactly what I want.</p>",
        "id": 194980972,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587584228
    },
    {
        "content": "<p>On a somewhat related note: would it make sense to have <code>From&lt;String&gt;</code> and <code>From&lt;&amp;str&gt;</code> (and <code>From&lt;Box&lt;str&gt;&gt;</code>) for <code>Box&lt;[u8]&gt;</code>?</p>",
        "id": 194981831,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587584615
    },
    {
        "content": "<p>indirectly, there is <code>impl From&lt;Box&lt;str&gt;&gt; for Box&lt;[u8]&gt;</code></p>",
        "id": 194983840,
        "sender_full_name": "cuviper",
        "timestamp": 1587585589
    },
    {
        "content": "<p>FWIW, I'm now working on <code>From&lt;Cow&gt; for Box</code> inspired from here</p>",
        "id": 194983965,
        "sender_full_name": "cuviper",
        "timestamp": 1587585628
    },
    {
        "content": "<p>personally I'm not a fan of the niche From impls, but ... not sure</p>",
        "id": 194983974,
        "sender_full_name": "simulacrum",
        "timestamp": 1587585632
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> Right, but that wouldn't allow <code>param: impl Box&lt;[u8]&gt;</code> to accept <code>String</code> or <code>&amp;str</code>, right?</p>",
        "id": 194984024,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587585654
    },
    {
        "content": "<p>they always feel a bit odd to have, even if not <em>wrong</em></p>",
        "id": 194984026,
        "sender_full_name": "simulacrum",
        "timestamp": 1587585657
    },
    {
        "content": "<p>correct, that <code>param</code> wouldn't work through two layers of <code>From</code></p>",
        "id": 194984093,
        "sender_full_name": "cuviper",
        "timestamp": 1587585690
    }
]