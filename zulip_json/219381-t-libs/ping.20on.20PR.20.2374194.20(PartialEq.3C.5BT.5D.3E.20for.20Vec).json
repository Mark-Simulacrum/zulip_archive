[
    {
        "content": "<p>Can I convince one more libs team member to sign off on FCP for <a href=\"https://github.com/rust-lang/rust/pull/74194\">https://github.com/rust-lang/rust/pull/74194</a> ?  It's a two-line change and not really urgent, but it'd be nice not to keep rebasing and bumping it any longer.</p>",
        "id": 210304036,
        "sender_full_name": "Matt Brubeck",
        "timestamp": 1600282252
    },
    {
        "content": "<p>i'm not sure how that pr wasn't tracked by us (wg-triage), will ping the remainder of people (as per what we do normally do)</p>",
        "id": 210313400,
        "sender_full_name": "DPC",
        "timestamp": 1600286713
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 210314808,
        "sender_full_name": "Matt Brubeck",
        "timestamp": 1600287411
    },
    {
        "content": "<p>Could I get an r+ on this now that FCP is complete?  Ping <span class=\"user-mention\" data-user-id=\"243558\">@Steven Fackler</span> because you are the assignee, or <span class=\"user-mention\" data-user-id=\"118772\">@Lukas Kalbertodt</span> because you looked at it initially.  Thanks again!</p>",
        "id": 212455651,
        "sender_full_name": "Matt Brubeck",
        "timestamp": 1602003375
    },
    {
        "content": "<p>did we ever do a crater run for this, or are we just going to see what the beta runs come back with?</p>",
        "id": 212456149,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1602003612
    },
    {
        "content": "<p>We did not do a crater run.  I don't know if that's something that we should do first or not.</p>",
        "id": 212456451,
        "sender_full_name": "Matt Brubeck",
        "timestamp": 1602003757
    },
    {
        "content": "<p>I haven't seen any example of code that could be broken by this, and failed to come up with any on my own, though that doesn't mean there is none...</p>",
        "id": 212457333,
        "sender_full_name": "Matt Brubeck",
        "timestamp": 1602004256
    },
    {
        "content": "<p>Conflicting impls aren't possible because of coherence. I don't think that ambiguous inference problems are possible, either: Any code that would use the new impls does not compile without them, as far as I can tell.</p>",
        "id": 212457798,
        "sender_full_name": "Matt Brubeck",
        "timestamp": 1602004530
    },
    {
        "content": "<p>So I guess, as author, unless I've missed something, I'm comfortable landing this without a crater run.  It can be backed out easily if any problems show up on beta, or from nightly users.</p>",
        "id": 212458243,
        "sender_full_name": "Matt Brubeck",
        "timestamp": 1602004733
    },
    {
        "content": "<p>The failure I could potentially see is something like <code>assert_eq!(vec_of_string, [\"foo\".into()])</code>, but we'll see how things turn out</p>",
        "id": 212459182,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1602005243
    },
    {
        "content": "<p>Couldn't you impl PartialEq&lt;[UserType]&gt; for Vec&lt;UserType&gt;? Or is [UserType] not a local type (where UserType is)?</p>",
        "id": 214370462,
        "sender_full_name": "Connor Horman",
        "timestamp": 1603490257
    }
]