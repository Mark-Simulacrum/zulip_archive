[
    {
        "content": "<p>Has it ever been considered to make WTF-8 a stable format as the backing data type? This would allow things like <code>.as_bytes()</code> for all OS's, not just Unix via the extension trait.</p>",
        "id": 242814615,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1623801429
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"245610\">@Jacob Pratt</span> It's been discussed. I'd love to see that happen.</p>",
        "id": 242819808,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1623806438
    },
    {
        "content": "<p>Though to clarify something, OsStr/OsString would never be guaranteed to have WTF-8 on all platforms.</p>",
        "id": 242819838,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1623806509
    },
    {
        "content": "<p>But we could guarantee bytes on all platforms.</p>",
        "id": 242819843,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1623806521
    },
    {
        "content": "<p>Yeah, of course. Just guarantee <em>something</em> that is either UTF-8 or WTF-8 (I think that's exhaustive?). Would an RFC be needed for this? I know WTF-8 has a spec.</p>",
        "id": 242819934,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1623806605
    },
    {
        "content": "<p>SimonSapin has thoughts about this. Is he on zulip?</p>\n<p>There was an rfc about tweaking wtf8 but i don't think it is implemented yet. Iirc, we wouldn't be able to do something like that if we had exposed wtf8.</p>\n<p>I selfishly very much want to expose the internal representation, but i definitely share Simon's concerns too.</p>",
        "id": 242820861,
        "sender_full_name": "BurntSushi",
        "timestamp": 1623807642
    },
    {
        "content": "<p>(without exposing the internal representation, it is a real pain to run regexes or globs on paths)</p>",
        "id": 242820885,
        "sender_full_name": "BurntSushi",
        "timestamp": 1623807676
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245610\">Jacob Pratt</span> <a href=\"#narrow/stream/219381-t-libs/topic/OsStr.20and.20WTF-8/near/242819934\">said</a>:</p>\n<blockquote>\n<p>Yeah, of course. Just guarantee <em>something</em> that is either UTF-8 or WTF-8 (I think that's exhaustive?). Would an RFC be needed for this? I know WTF-8 has a spec.</p>\n</blockquote>\n<p>You're not guaranteed that it's either UTF-8 or WTF-8.</p>",
        "id": 242821425,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1623808226
    },
    {
        "content": "<p>On Windows it's WTF-8. On UNIX platforms, it's bytes, no guarantee about encoding.</p>",
        "id": 242821430,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1623808244
    },
    {
        "content": "<p>You're guaranteed in both cases that you can convert UTF-8 to an OsString.</p>",
        "id": 242821445,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1623808270
    },
    {
        "content": "<p>so doesn't every platform have bytes then? All platforms can at least do &amp;OsStr -&gt; &amp;[u8], they just can't necessarily do &amp;mut OsStr -&gt; &amp;mut [u8]?</p>",
        "id": 242822106,
        "sender_full_name": "Lokathor",
        "timestamp": 1623808990
    },
    {
        "content": "<p>like, how is wtf-8 different from \"bytes with no encoding guarantee\"?</p>",
        "id": 242822120,
        "sender_full_name": "Lokathor",
        "timestamp": 1623809021
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> I agree; that's exactly the interface we can offer.</p>",
        "id": 242822219,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1623809132
    },
    {
        "content": "<p>We should allow an infallible conversion from OsStr to [u8], and a fallible conversion from [u8] to OsStr.</p>",
        "id": 242822244,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1623809160
    },
    {
        "content": "<p>(That conversion can only fail on Windows.)</p>",
        "id": 242822291,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1623809177
    },
    {
        "content": "<p>that conversion sounds easy to misuse, if it is not os-specific, since the encoding of those bytes is os-specific</p>",
        "id": 242825030,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623812499
    },
    {
        "content": "<blockquote>\n<p>You're not guaranteed that it's either UTF-8 or WTF-8.</p>\n</blockquote>\n<p>What else can it be (currently)? Though I was more looking for something like <span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> mentioned â€” just a way to get <em>some</em> bytes without caring what they are.</p>",
        "id": 242825495,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1623812970
    },
    {
        "content": "<p>Both UTF-8 and WTF-8 have invalid byte sequences, right? On linux there are no invalid byte sequences except possibly those containing <code>/</code> in weird places</p>",
        "id": 242825839,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623813303
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"245610\">@Jacob Pratt</span> On UNIX systems, OS strings can contain anything but NUL, and path components can contain anything but NUL and <code>/</code> (since <code>/</code> can only separate directories).</p>",
        "id": 242826929,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1623814661
    },
    {
        "content": "<p>So you can name a directory <code>\\x99\\xAA\\xBB\\xCC</code>, which is not valid UTF-8 or WTF-8.</p>",
        "id": 242826987,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1623814690
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/219381-t-libs/topic/OsStr.20and.20WTF-8/near/242825030\">said</a>:</p>\n<blockquote>\n<p>that conversion sounds easy to misuse, if it is not os-specific, since the encoding of those bytes is os-specific</p>\n</blockquote>\n<p>It's still valid to do things like \"does this end in <code>.txt</code>\" or \"split this on <code>.</code>\".</p>",
        "id": 242827028,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1623814778
    },
    {
        "content": "<p>Basically, it'd be reasonable to treat it as a <code>bstr::BString</code>.</p>",
        "id": 242827040,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1623814796
    },
    {
        "content": "<p>Don't make any assumptions about arbitrary bytes, but you can operate on specific bytes you recognize.</p>",
        "id": 242827087,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1623814827
    },
    {
        "content": "<p>are you sure that all platforms can commit to ascii as ascii? I would guess that some systems use UTF-16 or something like it (don't some windows versions do this?)</p>",
        "id": 242827121,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623814919
    },
    {
        "content": "<p>that is, I think the obvious \"does this end in <code>.txt</code>\" algorithm is likely to be incorrect for some platforms</p>",
        "id": 242827172,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623814968
    },
    {
        "content": "<p>Rust doesn't store Windows strings in their native form. Rust automatically converts Windows UTF-16 to and from UTF-8 for every OS API call. But it uses WTF-8 to account for the possibility of broken UTF-16.  So, in Rust, the Windows bytes are ASCII compatible. I'd guess that at this point <code>OsStr</code> being ASCII compatible is an explicit feature of the standard library.</p>",
        "id": 242827485,
        "sender_full_name": "Chris Denton",
        "timestamp": 1623815409
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260325\">Chris Denton</span> <a href=\"#narrow/stream/219381-t-libs/topic/OsStr.20and.20WTF-8/near/242827485\">said</a>:</p>\n<blockquote>\n<p>I'd guess that at this point <code>OsStr</code> being ASCII compatible is an explicit feature of the standard library.</p>\n</blockquote>\n<p>Exactly. I think we should make a decision about whether to commit to that.</p>",
        "id": 242827517,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1623815507
    },
    {
        "content": "<p>And I think we should.</p>",
        "id": 242827518,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1623815513
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/219381-t-libs/topic/OsStr.20and.20WTF-8/near/242827172\">said</a>:</p>\n<blockquote>\n<p>that is, I think the obvious \"does this end in <code>.txt</code>\" algorithm is likely to be incorrect for some platforms</p>\n</blockquote>\n<p>Well, to be clear, that specific example only makes sense on platforms for which file extensions make sense. But, for instance, you could ask if one <code>OsStr</code> is a suffix of another <code>OsStr</code>, which would then let you process things supplied by the user such as via environment variables or command-line arguments.</p>",
        "id": 242827602,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1623815596
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/219381-t-libs/topic/OsStr.20and.20WTF-8/near/242827121\">said</a>:</p>\n<blockquote>\n<p>are you sure that all platforms can commit to ascii as ascii?</p>\n</blockquote>\n<p>We'd have to do some translation if Rust ever ran on an EBCDIC platform; I can live with that.</p>",
        "id": 242827712,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1623815711
    },
    {
        "content": "<p>shift-jis encoded names can't be blindly treated as ascii since it's a multi-byte encoding where the second byte could accidentally match ascii</p>",
        "id": 242864567,
        "sender_full_name": "The 8472",
        "timestamp": 1623841332
    },
    {
        "content": "<p>At this point, we're already allowing people to treat OsString as ASCII, by calling some of the new functions on it.</p>",
        "id": 242885089,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1623852263
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"219747\">@Simon Sapin</span> (i tried cc'ing you from mobile last night, but your name didn't come up, weird)</p>",
        "id": 242887588,
        "sender_full_name": "BurntSushi",
        "timestamp": 1623853262
    },
    {
        "content": "<p>In any case, we don't have to treat it as ASCII to expose bytes.</p>",
        "id": 242887727,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1623853316
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260325\">Chris Denton</span> <a href=\"#narrow/stream/219381-t-libs/topic/OsStr.20and.20WTF-8/near/242827485\">said</a>:</p>\n<blockquote>\n<p>I'd guess that at this point <code>OsStr</code> being ASCII compatible is an explicit feature of the standard library.</p>\n</blockquote>\n<p>No, on Unix <code>OsStr</code> is arbitrary bytes (without nul) and there is no guarantee at all about how to meaningfully interpret those bytes as text. You could argue that \"almost all\" systems these days in practice use some ASCII-compatible encoding, but itâ€™s the exact same argument as \"almost all\" systems use UTF-8</p>",
        "id": 242918589,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1623866453
    },
    {
        "content": "<p>That's true. I think it'd be reasonable for us to standardize that it's bytes, and also tell people \"it's often ASCII, here are some functions for interpreting it as ASCII, but here are some considerations where you <em>might</em> not want to\".</p>",
        "id": 242919752,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1623866950
    },
    {
        "content": "<p>Back to the original topic of exposing the WTF-8 bytes of <code>OsStr</code> on Windows, Iâ€™m conflicted. It would make a lot of things easier, but at the same time I feel that WTF-8 is an abomination that I inflicted on the world by necessity but that should never have existed. At the moment its use in <code>OsStr</code> is somewhat \"contained\" but with if exposed in public APIs it will eventually propagate into various file formats and network protocols, sometimes by accident, and generations of future developers will be plagued with having to deal with it in new code for backward-compatibility</p>",
        "id": 242920099,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1623867094
    },
    {
        "content": "<p>On a more pragmatic side, documenting the format as exactly WTF-8 would prevent implementing <a href=\"https://github.com/rust-lang/rust/issues/49802\">https://github.com/rust-lang/rust/issues/49802</a> (which is an accepted but not-yet-implemented RFC)</p>",
        "id": 242920246,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1623867140
    },
    {
        "content": "<p>We can document it as \"some unspecified superset of UTF-8\" but thatâ€™s rather weak against users (accidentally or not) depending on WTF-8 details</p>",
        "id": 242920327,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1623867182
    },
    {
        "content": "<p>/me would be fine with not actually guaranteeing WTF-8.</p>",
        "id": 242922359,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1623868163
    },
    {
        "content": "<p>Would there really be much of a benefit of guaranteeing wtf8? for cross-platform code you'd still have to deal with bags of bytes</p>",
        "id": 242922366,
        "sender_full_name": "The 8472",
        "timestamp": 1623868167
    },
    {
        "content": "<p>I think the important part is guaranteeing \"bytes\".</p>",
        "id": 242922371,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1623868170
    },
    {
        "content": "<p>If the conversion function is called <code>as_bytes()</code> and returns <code>&amp;[u8]</code> then that should provide the needed access without making any promises about encoding</p>",
        "id": 242965551,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623896182
    },
    {
        "content": "<p>Mostly for the record:</p>\n<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/219381-t-libs/topic/OsStr.20and.20WTF-8/near/242821430\">said</a>:</p>\n<blockquote>\n<p>On Windows it's WTF-8. On UNIX platforms, it's bytes, no guarantee about encoding.<br>\nYou're guaranteed in both cases that you can convert UTF-8 to an OsString.</p>\n</blockquote>\n<p>NUL is a valid UTF-8 byte, but at least on Unix not a valid OsString byte, so that conversion can in fact fail.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/219381-t-libs/topic/OsStr.20and.20WTF-8/near/242822291\">said</a>:</p>\n<blockquote>\n<p>We should allow an infallible conversion from OsStr to [u8], and a fallible conversion from [u8] to OsStr.<br>\n(That conversion can only fail on Windows.)</p>\n</blockquote>\n<p>Similar to the above, [u8] could contain NUL, so the [u8] -&gt; OsStr conversion can fail on Unix systems, too.</p>",
        "id": 243340286,
        "sender_full_name": "LingM",
        "timestamp": 1624251912
    },
    {
        "content": "<p>Surprisingly, OsStr can contain null</p>",
        "id": 243344630,
        "sender_full_name": "Chris Denton",
        "timestamp": 1624257762
    },
    {
        "content": "<p>Well, guess I'm one of today's luck 10k then...</p>",
        "id": 243391881,
        "sender_full_name": "LingM",
        "timestamp": 1624286284
    },
    {
        "content": "<p>Looks like std checks for inner nul when it adds the nul terminator to an <code>OsStr</code> <a href=\"https://github.com/rust-lang/rust/blob/6a5b97adb4da4b0f913d19765e91d4322ef6542e/library/std/src/sys/unix/fs.rs#L911-L913\">https://github.com/rust-lang/rust/blob/6a5b97adb4da4b0f913d19765e91d4322ef6542e/library/std/src/sys/unix/fs.rs#L911-L913</a></p>",
        "id": 243412751,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1624295281
    },
    {
        "content": "<p>Yep, the std does a null check before using it in an OS API. But <code>OsStr</code> itself is allowed to contain nulls. E.g. <code>OsStr::new(\"Hello\\0World!\")</code>.</p>",
        "id": 243414365,
        "sender_full_name": "Chris Denton",
        "timestamp": 1624296067
    }
]