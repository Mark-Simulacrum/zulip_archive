[
    {
        "content": "<p>Turns out it's pretty easy to make the same path refer to different types in different editions (e.g. to make std::ops::Range be a Copy type on edition 2021, and move the iterator/non-copy one to std::iter::Range, cc <span class=\"user-mention\" data-user-id=\"243558\">@Steven Fackler</span>): <a href=\"https://github.com/rust-lang/rust/pull/82489\">https://github.com/rust-lang/rust/pull/82489</a></p>\n<p>Not saying we should do this, but looks like it's possible with a pretty small change.</p>",
        "id": 227650138,
        "sender_full_name": "Mara",
        "timestamp": 1614192086
    },
    {
        "content": "<p>oh nice! Yeah, I think the question for that bit of the proposal is more \"should we\" rather than \"can we\". I'm worried about what rustdoc would do in particular</p>",
        "id": 227650921,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1614192377
    },
    {
        "content": "<p>yeah, it'd need to understand this attribute and document it in some way. but eddyb's idea was to only allow this on type aliases, and not as some kind of cfg() thing. that makes it a lot easier for both rustdoc and rustc.</p>",
        "id": 227651091,
        "sender_full_name": "Mara",
        "timestamp": 1614192465
    },
    {
        "content": "<p>I'm not sure how that is better for rustdoc</p>",
        "id": 227657214,
        "sender_full_name": "Lokathor",
        "timestamp": 1614194862
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/219381-t-libs/topic/Edition-dependent.20type.20aliases/near/227657214\">said</a>:</p>\n<blockquote>\n<p>I'm not sure how that is better for rustdoc</p>\n</blockquote>\n<p>guessing its because the docs get associated with the alias rather than the internal options</p>",
        "id": 227658952,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614195555
    },
    {
        "content": "<p>because the items it resolves to can still have their own place/path/page, and the alias can be a simple page linking them both</p>",
        "id": 227660493,
        "sender_full_name": "Mara",
        "timestamp": 1614196249
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/219381-t-libs/topic/Edition-dependent.20type.20aliases/near/227657214\">said</a>:</p>\n<blockquote>\n<p>I'm not sure how that is better for rustdoc</p>\n</blockquote>\n<p>even if rustdoc handles it badly now, it makes it <em>possible</em> for rustdoc to tell the difference. Rustdoc doesn't see <code>cfg</code> at <em>all</em> <a href=\"https://github.com/rust-lang/rust/issues/1998\">https://github.com/rust-lang/rust/issues/1998</a></p>",
        "id": 227678323,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614203108
    },
    {
        "content": "<p>oh I'm well aware of how not-seeing-cfg rustdoc is, as all the earlier versions of <code>fermium</code> can silently show</p>",
        "id": 227679590,
        "sender_full_name": "Lokathor",
        "timestamp": 1614203678
    },
    {
        "content": "<p>So, if I have a crate D which is a dependency of crate A and D exports <code>std::ops::Range</code> in it's public interface. If crate D migrates to the 2021 edition, the type in it's interface can't change, since upgrading editions isn't supposed to be a semver breaking change, right?</p>",
        "id": 228335168,
        "sender_full_name": "Ahmed Charles",
        "timestamp": 1614646411
    },
    {
        "content": "<p><code>std::ops::Range</code> will be the same in both editions. <code>0..1</code> will be a different type depending on the edition (something like <code>std::ops::Range2021</code>)</p>",
        "id": 228335311,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614646509
    },
    {
        "content": "<p>Note:  \"Turns out it's pretty easy to make the same path refer to different types in different editions\" suggests that there exists a path which has different types, even if I misunderstood and <code>std::ops::Range</code> isn't the proposed type which changes.</p>",
        "id": 228335460,
        "sender_full_name": "Ahmed Charles",
        "timestamp": 1614646599
    },
    {
        "content": "<p>that seems really weird to me</p>",
        "id": 228335478,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614646623
    },
    {
        "content": "<p>oh huh it's a new compiler built-in</p>",
        "id": 228335511,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614646638
    },
    {
        "content": "<p>I guess that works too</p>",
        "id": 228335514,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614646640
    },
    {
        "content": "<p>This isn't about <code>0..1</code> returning a different type, it's about what type is referred to by a given path.</p>",
        "id": 228335548,
        "sender_full_name": "Ahmed Charles",
        "timestamp": 1614646681
    },
    {
        "content": "<p>As far as I can tell, exporting <code>std::ops::Range</code> is allowed and upgrading a crate to a new edition can't impact semver compatibility, so that suggests that all paths need to refer to consistent types across editions?</p>",
        "id": 228335668,
        "sender_full_name": "Ahmed Charles",
        "timestamp": 1614646750
    },
    {
        "content": "<p>The <code>cargo fix</code> for moving to 2021 would change it to use <code>Range2018</code> rather than the type alias <code>Range</code>.</p>\n<p>Then calling it would require <code>(0..10).into_iter()</code> for code in 2021, but code in 2018 would still be able to call it with just <code>0..10</code>.</p>",
        "id": 228336439,
        "sender_full_name": "scottmcm",
        "timestamp": 1614647174
    },
    {
        "content": "<p>So, crate A would have to change it's interface to export <code>std::ops::Range2018</code> in order to maintain semver after upgrading editions?</p>",
        "id": 228338004,
        "sender_full_name": "Ahmed Charles",
        "timestamp": 1614648194
    },
    {
        "content": "<p>So if crate A stayed on 2018, it'd still say <code>Range</code>, which would be <code>Range2018</code>.  If it wanted to upgrade editions, it'd also have that <code>Range</code>-&gt;<code>Range2018</code> rename that D had.</p>\n<p>But the cross-edition mixes would all still work.</p>",
        "id": 228340192,
        "sender_full_name": "scottmcm",
        "timestamp": 1614649802
    },
    {
        "content": "<p>It seems like that would make using <code>cargo fix</code> really important. I hope it's documented well, cause simply changing the <code>Cargo.toml</code> to be the new edition would silently break a crate where this was the only issue.</p>",
        "id": 228341647,
        "sender_full_name": "Ahmed Charles",
        "timestamp": 1614650911
    },
    {
        "content": "<p>See <a href=\"https://doc.rust-lang.org/nightly/edition-guide/editions/transitioning-an-existing-project-to-a-new-edition.html\">https://doc.rust-lang.org/nightly/edition-guide/editions/transitioning-an-existing-project-to-a-new-edition.html</a> -- it's fairly normal that just changing the number wouldn't be sufficient.</p>",
        "id": 228348639,
        "sender_full_name": "scottmcm",
        "timestamp": 1614656801
    },
    {
        "content": "<p>I think the current version should be called std::iter::Range on all editions. (not Range2018 or Range1 or something)</p>",
        "id": 228356497,
        "sender_full_name": "Mara",
        "timestamp": 1614663334
    },
    {
        "content": "<p>I agree that <code>Range</code> should be available in all editions.  I was just expecting that the specific names would also be available for migration purposes.  (Either rename to Range2018, upgrade editions, then rewrite to Range; or rewrite to Range2021, upgrade editions, then rename to Range.)</p>",
        "id": 228356909,
        "sender_full_name": "scottmcm",
        "timestamp": 1614663726
    },
    {
        "content": "<p>Yes, and i'm suggesting the specific name for the <code>Range</code> <code>Iterator</code> (the '2018 version') could be <code>std::iter::Range</code>, since it's an iterator.</p>",
        "id": 228377119,
        "sender_full_name": "Mara",
        "timestamp": 1614676562
    },
    {
        "content": "<p>This is messy if you have any <code>Range</code> in your public API too -- need to keep the old flavor to avoid a breaking change</p>",
        "id": 228515908,
        "sender_full_name": "cuviper",
        "timestamp": 1614733236
    }
]