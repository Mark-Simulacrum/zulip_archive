[
    {
        "content": "<p>Regarding <a href=\"https://github.com/rust-lang/rust/issues/75091\">https://github.com/rust-lang/rust/issues/75091</a>.<br>\nWhat steps are necessary to begin stabilizing this, what would be the best way to approach the open question?</p>",
        "id": 234748117,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1618518870
    },
    {
        "content": "<p>I'm not sure this is ready for stabilization in its current state. It's quite an odd API, and both the name and documentation suggests that it modifies a pointer instead of creating a new one. And on thin pointers <code>a.set_ptr_value(b)</code> is just another way of writing <code>b</code>. To me it seems like this function is just a temporary placeholder until we have a proper way to deal with fat pointers.</p>",
        "id": 234829461,
        "sender_full_name": "Mara",
        "timestamp": 1618568776
    },
    {
        "content": "<p>Yeah I kinda know what pointers are all about and I can confirm that it took me far longer than a few moments to come to grips with this method.</p>",
        "id": 234872044,
        "sender_full_name": "Lokathor",
        "timestamp": 1618586229
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"219747\">@Simon Sapin</span> another api that can be removed now that we have <a href=\"https://doc.rust-lang.org/nightly/core/ptr/fn.from_raw_parts.html\">https://doc.rust-lang.org/nightly/core/ptr/fn.from_raw_parts.html</a> and <a href=\"https://doc.rust-lang.org/nightly/core/ptr/fn.metadata.html\">https://doc.rust-lang.org/nightly/core/ptr/fn.metadata.html</a></p>",
        "id": 234875238,
        "sender_full_name": "oli",
        "timestamp": 1618587387
    },
    {
        "content": "<p>Agreed. (Also <a href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html#method.to_raw_parts\">https://doc.rust-lang.org/nightly/std/primitive.pointer.html#method.to_raw_parts</a> which is convenience for <code>(self.cast::&lt;()&gt;(), metadata(self))</code>)</p>",
        "id": 234875686,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1618587579
    },
    {
        "content": "<p>Though the open question in <a href=\"https://github.com/rust-lang/rust/issues/75091\">https://github.com/rust-lang/rust/issues/75091</a> is still relevant</p>",
        "id": 234876191,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1618587748
    },
    {
        "content": "<p>However, consider that stabilizing the <code>{to,from}_raw_parts</code> method requires stabilizing the details of the <code>Pointee</code> trait—at least the bounds of its associated type— since it appears in the interface, while the composite <code>set_ptr_value</code> does not. I can totally understand the desire to have it be a value transform instead of a mutation though.</p>",
        "id": 234938124,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1618617991
    }
]