[
    {
        "content": "<p>Would it be good to have <code>String::some()</code> to return <code>Option&lt;String&gt;</code> if it is not empty for feature parity with <code>Result::some()</code>? Do we need a tracking issue for this?</p>",
        "id": 206897577,
        "sender_full_name": "pickfire",
        "timestamp": 1597379835
    },
    {
        "content": "<p>The empty string is a valid string, so calling it <code>String::some()</code> feels like a bad name. Perhaps a name like <code>String::non_empty</code>?</p>",
        "id": 206897810,
        "sender_full_name": "isHavvy",
        "timestamp": 1597380162
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"225422\">@pickfire</span> I'm <a href=\"https://doc.rust-lang.org/nightly/std/result/enum.Result.html\">not seeing</a> a <code>Result::some</code>, so I don't follow what you're suggesting.  Also, would you expect it on <code>Vec</code> as well?</p>\n<p>And it's not obvious to me that such a method is generally-useful enough to be worth having.  It's not <code>Option&lt;NonEmptyString&gt;</code>, so the bool from <code>!.is_empty()</code> seems fine.  And there's always the <code>Some(string).filter(|x| !x.is_empty())</code> dance available...</p>",
        "id": 206900383,
        "sender_full_name": "scottmcm",
        "timestamp": 1597384031
    },
    {
        "content": "<p>or <code>(!string.is_empty()).then_some(string)</code></p>",
        "id": 206904939,
        "sender_full_name": "cuviper",
        "timestamp": 1597389911
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"225422\">@pickfire</span> Under what circumstances, or for what use cases, would you want this?</p>",
        "id": 206943372,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597419945
    },
    {
        "content": "<p>Feels a lot like a form of validation.</p>",
        "id": 206973683,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1597434916
    },
    {
        "content": "<p>An alias for <code>if vec.is_empty() { None } else { Some(vec) }</code>.</p>",
        "id": 207024453,
        "sender_full_name": "pickfire",
        "timestamp": 1597502143
    },
    {
        "content": "<p>Wait, I mean <code>Result::ok()</code>, not <code>Result::some()</code>.</p>",
        "id": 207024498,
        "sender_full_name": "pickfire",
        "timestamp": 1597502188
    },
    {
        "content": "<p>Rather than doing it in 6 lines, one can do it in one.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">completions</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">build</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">completions</span><span class=\"p\">.</span><span class=\"n\">is_empty</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">None</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">completions</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>Vs</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">build</span><span class=\"p\">().</span><span class=\"n\">some</span><span class=\"p\">()</span><span class=\"w\">  </span><span class=\"c1\">// or non_empty()</span>\n</code></pre></div>\n\n\n<p>But personally I wouldn't have guessed that <code>non_empty</code> would returns <code>Option</code>.</p>",
        "id": 207024572,
        "sender_full_name": "pickfire",
        "timestamp": 1597502335
    },
    {
        "content": "<p>Maybe <code>non_empty_or_none</code> is more clear on what it returns.</p>",
        "id": 207025475,
        "sender_full_name": "Lukas Kalbertodt",
        "timestamp": 1597503907
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"225422\">@pickfire</span> note that <code>Result::ok</code> (and <code>Result::err</code>) are methods with names matching the variants of the enum, so don't seem like obvious precedents for this.  And cuviper and I have each provided existing one-liners for this.</p>",
        "id": 207051253,
        "sender_full_name": "scottmcm",
        "timestamp": 1597546069
    },
    {
        "content": "<p>Yes, they looks like a hack to me, I mean not as straightforward to understand.</p>",
        "id": 207066899,
        "sender_full_name": "pickfire",
        "timestamp": 1597576545
    }
]