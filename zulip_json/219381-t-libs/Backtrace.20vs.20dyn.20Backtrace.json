[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> Had the background thread going in our Libs meeting on \"Why come up with a weird dyn-like scheme instead of just using <code>dyn Trait</code>?\". I try to avoid exposing <code>dyn Trait</code> publicly because it's limiting:</p>\n<ul>\n<li>You have to either box or have a <code>dyn Trait</code> to return to satisfy lifetimes</li>\n<li>You can't combine it with other traits</li>\n<li>You're limited to a subset of APIs to retain object safety</li>\n</ul>\n<p>In libraries where I've used <code>dyn Trait</code> heavily I've never yet regretted encapsulating it in the public API. So I think the <code>RawWaker</code>-like scheme for <code>Backtrace</code> buys us flexibility.</p>",
        "id": 224249935,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1611782820
    },
    {
        "content": "<p>And we can't Box/Rc things in core.</p>",
        "id": 224250144,
        "sender_full_name": "Mara",
        "timestamp": 1611782907
    }
]