[
    {
        "content": "<p>I often need this function in my projects:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">ilog2</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">PrimInt</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">Unsigned</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">n</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">bits_minus_1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">bits_minus_1</span><span class=\"p\">.</span><span class=\"n\">saturating_sub</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">.</span><span class=\"n\">leading_zeros</span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I'm surprised that a function like this is not already in <code>std</code>, considering that <code>std</code> has float log2 functions.<br>\nCould this function be added to std? :)</p>",
        "id": 222204759,
        "sender_full_name": "Boscop",
        "timestamp": 1610251915
    },
    {
        "content": "<p>There's some discussion at <a href=\"https://github.com/rust-lang/rust/issues/70887\">https://github.com/rust-lang/rust/issues/70887</a> and <a href=\"https://github.com/rust-lang/rust/pull/70835\">https://github.com/rust-lang/rust/pull/70835</a></p>",
        "id": 222205382,
        "sender_full_name": "Eric Huss",
        "timestamp": 1610253104
    },
    {
        "content": "<p>I've only ever used <code>leading_zeros</code> in a place where I wanted <code>ilog2</code>, so a general <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> from me.</p>\n<p>Now that <a href=\"https://doc.rust-lang.org/nightly/std/num/struct.NonZeroU32.html#method.leading_zeros\"><code>NonZeroUN</code> has <code>leading_zeros</code></a>, maybe just put it on those to start?  That way you can avoid the whole <code>0</code>-vs-<code>-1</code>-vs-<code>None</code> conversation for log(0)...</p>",
        "id": 222214370,
        "sender_full_name": "scottmcm",
        "timestamp": 1610271308
    },
    {
        "content": "<p>(And it should probably return <code>u32</code>, not <code>usize</code>, for consistency.  I totally get why you'd pick something other than <code>u32</code>, but I don't think <code>usize</code> is enough better to be worth being inconsistent.)</p>",
        "id": 222214686,
        "sender_full_name": "scottmcm",
        "timestamp": 1610271869
    },
    {
        "content": "<p>I would <em>love</em> to have <code>ilog2</code> as well. I think someone just needs to post an updated PR that <em>only</em> includes <code>ilog2</code>.</p>",
        "id": 222247904,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610321465
    },
    {
        "content": "<p>I've wanted that particular method a couple of times in the last few weeks.</p>",
        "id": 222247919,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610321502
    },
    {
        "content": "<p>Out of curiosity, which behaviour did your situation want for ilog2(0), Josh?</p>",
        "id": 222248002,
        "sender_full_name": "scottmcm",
        "timestamp": 1610321594
    },
    {
        "content": "<p>Bikeshed question: Do we call it <code>ilog2</code> or <code>highest_set_bit</code>?</p>",
        "id": 222259398,
        "sender_full_name": "isHavvy",
        "timestamp": 1610339316
    },
    {
        "content": "<p>/me just now realized those are the same</p>",
        "id": 222259459,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610339443
    },
    {
        "content": "<p>So for that reason alone I like highest_set_bit</p>",
        "id": 222259470,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610339463
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> I'd like it to be called <code>ilog2</code>, because in practice what I tend to <em>want</em> (and what I've seen others want) is the integer log, not the highest set bit. And much like existing functions such as <code>leading_zeroes</code>, while it's possible to construct what you want, you have to think about it to figure out if it matches the semantics you want.</p>",
        "id": 222262194,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610343703
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/219381-t-libs/topic/Add.20integer.20log2.20function.20to.20std/near/222248002\">said</a>:</p>\n<blockquote>\n<p>Out of curiosity, which behaviour did your situation want for ilog2(0), Josh?</p>\n</blockquote>\n<p>For one of the cases, I had a semantic guarantee that the argument would never be 0. For the other, I didn't, but I had a check for zero in advance.</p>",
        "id": 222262305,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610343863
    },
    {
        "content": "<p>Would a doc alias work in this case? Also, having <code>highest_set_bit</code> would allow for having <code>lowest_set_bit</code> as well; as well as <code>_unset_bit</code>.</p>",
        "id": 222262333,
        "sender_full_name": "isHavvy",
        "timestamp": 1610343950
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"296643\">@isHavvy</span> \"highest set\" and \"lowest set\" already more-or-less exist (as <code>trailing_zeros</code> and <code>leading_zeros</code>).</p>",
        "id": 222262560,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610344369
    },
    {
        "content": "<p>The goal of having <code>ilog2</code> is specifically to have a function that's clearly \"the integer log\", not \"equivalent to the integer log if you check the docs first\".</p>",
        "id": 222262572,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610344411
    },
    {
        "content": "<p>Fair enough.</p>",
        "id": 222262723,
        "sender_full_name": "isHavvy",
        "timestamp": 1610344661
    },
    {
        "content": "<p>(And, for that matter, to be self-documenting for the next person who reads the code.)</p>",
        "id": 222262772,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610344725
    },
    {
        "content": "<p>I'm glad that <code>leading_zeros</code> and <code>trailing_zeros</code> exist, though, because occasionally that <em>is</em> the function you want. And in practice I expect there to be one underlying implementation, and just a couple of functions that call it.</p>",
        "id": 222262777,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610344743
    },
    {
        "content": "<p>My main concern with <code>ilog2</code> is that it's not clear if it's <code>log2</code> rounded up or down. Or what <code>ilog2(0)</code> even means. On the other hand <code>highest_set_bit</code>/<code>trailing_zeros</code>/<code>leading_zeros</code> have unambiguous semantics.</p>",
        "id": 222271404,
        "sender_full_name": "Amanieu",
        "timestamp": 1610354736
    },
    {
        "content": "<p>My solution for the algebraics crate is to have separate <code>ceil_log2</code> and <code>floor_log2</code> functions: <a href=\"https://docs.rs/algebraics/0.2.0/algebraics/algebraic_numbers/struct.RealAlgebraicNumber.html#method.checked_floor_log2\">https://docs.rs/algebraics/0.2.0/algebraics/algebraic_numbers/struct.RealAlgebraicNumber.html#method.checked_floor_log2</a></p>",
        "id": 222276325,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1610358200
    },
    {
        "content": "<p>see also the <a href=\"https://docs.rs/algebraics/0.2.0/algebraics/traits/trait.CeilLog2.html\"><code>CeilLog2</code></a> and <a href=\"https://docs.rs/algebraics/0.2.0/algebraics/traits/trait.FloorLog2.html\"><code>FloorLog2</code></a> traits</p>",
        "id": 222276549,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1610358370
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/219381-t-libs/topic/Add.20integer.20log2.20function.20to.20std/near/222262777\">said</a>:</p>\n<blockquote>\n<p>I'm glad that <code>leading_zeros</code> and <code>trailing_zeros</code> exist, though, because occasionally that <em>is</em> the function you want. And in practice I expect there to be one underlying implementation, and just a couple of functions that call it.</p>\n</blockquote>\n<p>that sounds like you can add <code>doc(alias = \"ilog2\")</code> and get most of the benefit</p>",
        "id": 222292965,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610369626
    },
    {
        "content": "<p>I can probably revive my PR adding <code>Integer::log</code> -- it was accepted, with all that's missing really is fixing a failing test on a platform which has a non-native float impl.</p>",
        "id": 222303510,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1610375456
    },
    {
        "content": "<p>[deleted]</p>",
        "id": 222304031,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1610375684
    },
    {
        "content": "<p>Okay, resurrected the log PR: <a href=\"https://github.com/rust-lang/rust/pull/80918\">https://github.com/rust-lang/rust/pull/80918</a></p>",
        "id": 222325947,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1610384694
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/219381-t-libs/topic/Add.20integer.20log2.20function.20to.20std/near/222262305\">said</a>:</p>\n<blockquote>\n<p>For one of the cases, I had a semantic guarantee that the argument would never be 0. For the other, I didn't, but I had a check for zero in advance.</p>\n</blockquote>\n<p>Interesting -- that gives extra support to the \"just put it on <code>NonZeroU##</code>\" approach.</p>",
        "id": 222358595,
        "sender_full_name": "scottmcm",
        "timestamp": 1610399507
    },
    {
        "content": "<p>That would have been inconvenient.</p>",
        "id": 222400110,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610437749
    },
    {
        "content": "<p>I had knowledge that it was non-zero, because I just calculated it, but it was still in a u64.</p>",
        "id": 222400139,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610437794
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> it might have unambiguous semantics, but not obvious semantics, at least for me it requires thinking.</p>\n<p>I think it's obvious that like all other integer operations(ie division) they are rounded down.</p>",
        "id": 222494901,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1610485787
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 222844869,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1610709428
    }
]