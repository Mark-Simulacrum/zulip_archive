[
    {
        "content": "<p>Hello, where do I go from adding a new function to the std and how do I determine whether I should open an RFC on <a href=\"https://github.com/rust-lang/rfcs/issues\">https://github.com/rust-lang/rfcs/issues</a> first or open a tracking issue on &lt;<a href=\"https://github.com/rust-lang/rust/issues\">https://github.com/rust-lang/rust/issues</a>&gt; right away?</p>",
        "id": 257573486,
        "sender_full_name": "ruster",
        "timestamp": 1634232516
    },
    {
        "content": "<p>you probably don't need an RFC</p>",
        "id": 257573936,
        "sender_full_name": "cuviper",
        "timestamp": 1634232701
    },
    {
        "content": "<p>And if what I have to do is open a tracking issue, where do I actually describe my feature anyway? I never really see a tracking issue have a descriptive description of what the feature does and why it's supposed to be added.</p>",
        "id": 257573949,
        "sender_full_name": "ruster",
        "timestamp": 1634232704
    },
    {
        "content": "<p>asking about your specific idea here on zulip is a good start</p>",
        "id": 257573975,
        "sender_full_name": "cuviper",
        "timestamp": 1634232713
    },
    {
        "content": "<p>there's also this guide: <a href=\"https://std-dev-guide.rust-lang.org/\">https://std-dev-guide.rust-lang.org/</a></p>",
        "id": 257573987,
        "sender_full_name": "cuviper",
        "timestamp": 1634232718
    },
    {
        "content": "<p>Ah</p>",
        "id": 257574017,
        "sender_full_name": "ruster",
        "timestamp": 1634232723
    },
    {
        "content": "<p>didn't know about that guide! Where have you got that from?</p>",
        "id": 257574071,
        "sender_full_name": "ruster",
        "timestamp": 1634232736
    },
    {
        "content": "<p>I know it because I'm on the libs team, but I don't know if anything links to it off-hand</p>",
        "id": 257574242,
        "sender_full_name": "cuviper",
        "timestamp": 1634232806
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/libs-team/\">https://github.com/rust-lang/libs-team/</a> mentions it</p>",
        "id": 257574282,
        "sender_full_name": "cuviper",
        "timestamp": 1634232828
    },
    {
        "content": "<p>Ah I see</p>",
        "id": 257574298,
        "sender_full_name": "ruster",
        "timestamp": 1634232837
    },
    {
        "content": "<p>there is also <a href=\"https://forge.rust-lang.org/libs/index.html\">https://forge.rust-lang.org/libs/index.html</a></p>",
        "id": 257574381,
        "sender_full_name": "cuviper",
        "timestamp": 1634232862
    },
    {
        "content": "<p>it's entirely possible that things are inconsistent, but help is welcome!</p>",
        "id": 257574507,
        "sender_full_name": "cuviper",
        "timestamp": 1634232908
    },
    {
        "content": "<p>Alright I think I will give it a shot to try getting some opinions on my idea in here first.</p>",
        "id": 257574993,
        "sender_full_name": "ruster",
        "timestamp": 1634233084
    },
    {
        "content": "<p>Well.<br>\nI hope this is a joke. I just spend half an hour writing this down and then I accidentally press some random something and now all my text is gone and undo/redo does nothing</p>",
        "id": 257579168,
        "sender_full_name": "ruster",
        "timestamp": 1634234737
    },
    {
        "content": "<p>It may be in drafts.</p>",
        "id": 257579318,
        "sender_full_name": "Eh2406",
        "timestamp": 1634234789
    },
    {
        "content": "<p>it's not there either sadly...<br>\nTo keep it short I wanted to add a <code>count_digits</code> that counts the digits of an integer <code>123.count_digits()</code> would be 3. Such a function could be a nicer wrapper for <code>integer.checked_log10().unwrap_or(0) as usize + 1</code>.<br>\nI came up with this while working on <a href=\"https://github.com/rust-lang/rust/pull/89737\">https://github.com/rust-lang/rust/pull/89737</a></p>",
        "id": 257579440,
        "sender_full_name": "ruster",
        "timestamp": 1634234848
    },
    {
        "content": "<p>Apart from better readability my other motivation was that if we provide such a function, the programmer can more easily avoid mistakes like <code>123.to_string().len()</code> to get the length</p>",
        "id": 257579625,
        "sender_full_name": "ruster",
        "timestamp": 1634234917
    },
    {
        "content": "<p>Because it's very inefficient.</p>",
        "id": 257579652,
        "sender_full_name": "ruster",
        "timestamp": 1634234925
    },
    {
        "content": "<p>Any thoughts? Maybe this has been discussed in the past?</p>",
        "id": 257579775,
        "sender_full_name": "ruster",
        "timestamp": 1634234983
    },
    {
        "content": "<p>while writing my previous text I also came to the conclusion that <code>log10</code> <em>is</em> the fastest way to get the length of an integer in Rust (I'm 99% sure)</p>",
        "id": 257579958,
        "sender_full_name": "ruster",
        "timestamp": 1634235057
    },
    {
        "content": "<p>yeah i sure wouldn't to_string on it</p>",
        "id": 257580042,
        "sender_full_name": "Lokathor",
        "timestamp": 1634235099
    },
    {
        "content": "<p>then I also mentioned this <a href=\"https://stackoverflow.com/questions/1489830/efficient-way-to-determine-number-of-digits-in-an-integer\">https://stackoverflow.com/questions/1489830/efficient-way-to-determine-number-of-digits-in-an-integer</a> and <a href=\"http://graphics.stanford.edu/~seander/bithacks.html#IntegerLog10\">http://graphics.stanford.edu/~seander/bithacks.html#IntegerLog10</a><br>\nSo basically what we already have in here <a href=\"https://github.com/rust-lang/rust/blob/fe1c942eee3489743d655d81ca89166217db0547/library/core/src/num/int_log10.rs\">https://github.com/rust-lang/rust/blob/fe1c942eee3489743d655d81ca89166217db0547/library/core/src/num/int_log10.rs</a> is really good, especially now that it's even branchless</p>",
        "id": 257580064,
        "sender_full_name": "ruster",
        "timestamp": 1634235111
    },
    {
        "content": "<p>i think you'd want the count_digits to take a radix the same as parsing does</p>",
        "id": 257580089,
        "sender_full_name": "Lokathor",
        "timestamp": 1634235121
    },
    {
        "content": "<p>Oh yeah that sounds good. In addition, counting the length of a float on the other hand is not trivial at all. It is really hard I think so that's actually something where a count_digits could come in really handy.</p>",
        "id": 257580268,
        "sender_full_name": "ruster",
        "timestamp": 1634235188
    },
    {
        "content": "<p>And ultimately this is what we can use to optimize our own float to string too in the std (the PR currently only optimizes int to string conversion)</p>",
        "id": 257580339,
        "sender_full_name": "ruster",
        "timestamp": 1634235221
    },
    {
        "content": "<p>But maybe I'm overthinking it and we don't need this, I don't know.</p>\n<p>But to summarize why I think we should have <code>{i8, i16, i32, i64, isize, i128}::count_digits</code> and <code>{u8, u16, u32, u64, usize, u128}::count_digits</code> as well as <code>{f32, f64}::count_digits</code> (they all need separate implementations):</p>\n<ol>\n<li>Easier to read</li>\n<li>Prevent easy to make mistakes when counting integer digits like implementing it inefficiently (those mistakes have been made in the std and the PR corrects them)</li>\n<li>Provide a float implementation which is not trivial to implement<br>\nAny thoughts?</li>\n</ol>",
        "id": 257581559,
        "sender_full_name": "ruster",
        "timestamp": 1634235758
    },
    {
        "content": "<p>Like, especially if we do implement a sophisticated float preallocation thing <a href=\"https://github.com/rust-lang/rust/pull/89737/files#diff-1a13885e89de65916e7e0f9436a79cb2e697e23dcaa1a24e8fb3106d8b89dc7eR2448\">here</a> then I think it would make a lot of sense to expose it as a public API as well because it could be used outside that as well</p>",
        "id": 257581877,
        "sender_full_name": "ruster",
        "timestamp": 1634235867
    },
    {
        "content": "<p>What's the use case for a floating point <code>count_digits</code>? When would somebody call it?</p>",
        "id": 257589044,
        "sender_full_name": "John Kugelman",
        "timestamp": 1634238726
    },
    {
        "content": "<p>formatting</p>",
        "id": 257589672,
        "sender_full_name": "Lokathor",
        "timestamp": 1634239010
    },
    {
        "content": "<p>For the signed integers, is it just digits counted or is there <code>+1</code> for the negative sign?</p>",
        "id": 257589695,
        "sender_full_name": "John Kugelman",
        "timestamp": 1634239021
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/219381-t-libs/topic/Adding.20a.20new.20function.20to.20std/near/257589672\">said</a>:</p>\n<blockquote>\n<p>formatting</p>\n</blockquote>\n<p>Outside of the standard library itself?</p>",
        "id": 257590516,
        "sender_full_name": "John Kugelman",
        "timestamp": 1634239301
    },
    {
        "content": "<p>there's one or two crates that provide alternative formatting systems that greatly reduce code size for embedded.</p>",
        "id": 257593647,
        "sender_full_name": "Lokathor",
        "timestamp": 1634240620
    },
    {
        "content": "<p>This may also be useful for TUI crates, since they may need to make adjustments depending on the size of elements</p>",
        "id": 257594938,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1634241223
    },
    {
        "content": "<p><span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span> how do you define digit counts for floats like 0.333333333333333314829616256247390992939472198486328125 or 1e+308 or 1e-308 or NaN</p>",
        "id": 257665435,
        "sender_full_name": "kennytm",
        "timestamp": 1634287811
    },
    {
        "content": "<p><code>.to_string().len()</code> is a decent way to specify the operation, but it might be a little too tailored to formatting peculiarities</p>",
        "id": 257665871,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634288062
    },
    {
        "content": "<p>For <code>uN</code>, there is mostly only one possible implementation (except for whether <code>0</code> counts as 1 digit or 0). For <code>iN</code>, you may or may not want to count the <code>-</code> sign (but if you want some other behavior it wouldn't be too bad to implement it yourself in terms of the unsigned version). For floats... there is a lot of design space</p>",
        "id": 257666201,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634288235
    },
    {
        "content": "<p>if it's defined to be <code>f.to_string().len()</code> it can't be used for e.g. formatting <code>{:e}</code> output</p>\n<p><code>1e308</code> will have 309 digits and <code>1e-308</code> will have 310 \"digits\".</p>\n<p>imo if it is defined for float for formatting it should separate digits before and after the dot, and maybe the exponent as well (<code>4.25e99.count_digits() == (1, 2, 99)</code> perhaps).</p>",
        "id": 257667745,
        "sender_full_name": "kennytm",
        "timestamp": 1634288991
    },
    {
        "content": "<p>I think there is an argument for including at least all the options that you can use in a <code>{:..}</code> format arg</p>",
        "id": 257668426,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634289356
    },
    {
        "content": "<p>I remember hearing a talk, I think for MSVC's C++ standard library, about a very elaborate <code>f32::to_string</code> type of function, with the specification that the resulting string is as short as possible while producing the nearest number that would parse and round to the original float</p>",
        "id": 257668749,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634289522
    },
    {
        "content": "<p>so your <code>0.333333333333333314829616256247390992939472198486328125</code> example would probably end up as something like <code>0.33333333</code> for <code>f32</code> and <code>0.33333333333333331</code> for <code>f64</code></p>",
        "id": 257668835,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634289577
    },
    {
        "content": "<p>it is just <code>0.3333333333333333</code> in the default settings, i used <code>{:.160}</code> to get all the binary digits <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span>.</p>",
        "id": 257669589,
        "sender_full_name": "kennytm",
        "timestamp": 1634290006
    },
    {
        "content": "<p>iirc Rust's default flt2str is already the elaborated type, just not as fast as <code>ryu</code></p>",
        "id": 257669671,
        "sender_full_name": "kennytm",
        "timestamp": 1634290053
    },
    {
        "content": "<p>Here's the talk: <a href=\"https://youtu.be/4P_kbF0EbZM\">https://youtu.be/4P_kbF0EbZM</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"4P_kbF0EbZM\" href=\"https://youtu.be/4P_kbF0EbZM\"><img src=\"https://uploads.zulipusercontent.net/57b5a0dbde9c4d01e05750ec3d22072efaecbb2b/68747470733a2f2f692e7974696d672e636f6d2f76692f34505f6b62463045625a4d2f64656661756c742e6a7067\"></a></div>",
        "id": 257670409,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634290456
    },
    {
        "content": "<p>Length in characters, utf8 bytes, utf16 bytes, or something else?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"sd\">/// log10 + 1 (with log10(0) == 0)</span>\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">dec_len_u8</span><span class=\"p\">(</span><span class=\"n\">n</span>: <span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">.</span><span class=\"n\">wrapping_add</span><span class=\"p\">(</span><span class=\"mb\">0b01_00000000</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">100</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"p\">.</span><span class=\"n\">wrapping_add</span><span class=\"p\">(</span><span class=\"mb\">0b10_00000000</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// + '+'.len_utf8() // format always with sign</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">dec_len_i8</span><span class=\"p\">(</span><span class=\"n\">n</span>: <span class=\"kt\">i8</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">sign</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">((</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"kt\">u8</span>::<span class=\"n\">BITS</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"sc\">'-'</span><span class=\"p\">.</span><span class=\"n\">len_utf8</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"p\">.</span><span class=\"n\">unsigned_abs</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">sign</span><span class=\"w\">  </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"p\">((</span><span class=\"n\">n</span><span class=\"p\">.</span><span class=\"n\">wrapping_add</span><span class=\"p\">(</span><span class=\"mb\">0b01_00000000</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">100</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"p\">.</span><span class=\"n\">wrapping_add</span><span class=\"p\">(</span><span class=\"mb\">0b10_00000000</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"sc\">'-'</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// ascii</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"char: {} len: {}\"</span><span class=\"p\">,</span><span class=\"n\">c</span><span class=\"p\">,</span><span class=\"n\">c</span><span class=\"p\">.</span><span class=\"n\">len_utf8</span><span class=\"p\">());</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"sc\">'−'</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// '\\u{2212}' Real minus</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"char: {} len: {}\"</span><span class=\"p\">,</span><span class=\"n\">c</span><span class=\"p\">,</span><span class=\"n\">c</span><span class=\"p\">.</span><span class=\"n\">len_utf8</span><span class=\"p\">());</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Ascii vs Unicode Mathematical Alphanumeric Symbols</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"sc\">'0'</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"char: {} len: {}\"</span><span class=\"p\">,</span><span class=\"n\">c</span><span class=\"p\">,</span><span class=\"n\">c</span><span class=\"p\">.</span><span class=\"n\">len_utf8</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"sc\">'𝟎'</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"char: {} len: {}\"</span><span class=\"p\">,</span><span class=\"n\">c</span><span class=\"p\">,</span><span class=\"n\">c</span><span class=\"p\">.</span><span class=\"n\">len_utf8</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"sc\">'𝟘'</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"char: {} len: {}\"</span><span class=\"p\">,</span><span class=\"n\">c</span><span class=\"p\">,</span><span class=\"n\">c</span><span class=\"p\">.</span><span class=\"n\">len_utf8</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"sc\">'𝟢'</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"char: {} len: {}\"</span><span class=\"p\">,</span><span class=\"n\">c</span><span class=\"p\">,</span><span class=\"n\">c</span><span class=\"p\">.</span><span class=\"n\">len_utf8</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"sc\">'𝟬'</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"char: {} len: {}\"</span><span class=\"p\">,</span><span class=\"n\">c</span><span class=\"p\">,</span><span class=\"n\">c</span><span class=\"p\">.</span><span class=\"n\">len_utf8</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"sc\">'𝟶'</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"char: {} len: {}\"</span><span class=\"p\">,</span><span class=\"n\">c</span><span class=\"p\">,</span><span class=\"n\">c</span><span class=\"p\">.</span><span class=\"n\">len_utf8</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">..=</span><span class=\"mi\">255</span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{} {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">dec_len_u8</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"kt\">i8</span>::<span class=\"n\">MIN</span><span class=\"o\">..=</span><span class=\"kt\">i8</span>::<span class=\"n\">MAX</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{} {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">dec_len_i8</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 257682443,
        "sender_full_name": "Bot+",
        "timestamp": 1634297226
    },
    {
        "content": "<p>length in characters, utf-8 bytes and utf16 code units (not bytes!) should all be the same because all the characters used in <code>{u,i,f}N::to_string</code> are ASCII</p>",
        "id": 257686374,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634299335
    },
    {
        "content": "<p>Yeah this is why I asked what the use case is. Without a clear use case it seems likely a floating point method wouldn't do what a caller wants and they would likely just have to write their own. It may give too much precision when they want rounding, or it may round when they want exact representation. They may want to take into account all the formatting options; or not. One could plausibly want either <code>0.33333333</code> or <code>0.333333333333333314829616256247390992939472198486328125</code> -- how do we know which they want? Is that another option?</p>\n<p>If the method balloons up and has a half dozen options it starts to lose its shine...</p>\n<p>Also, there should be a compelling use case where a person wouldn't simply use <code>fmt::Formatter</code> to create a string with exactly the formatting options they want and then inspect the <code>String</code> output. When would somebody want to count the digits without actually creating a string?</p>",
        "id": 257712877,
        "sender_full_name": "John Kugelman",
        "timestamp": 1634310441
    },
    {
        "content": "<p>If it is useful, perhaps it belongs on <code>Formatter</code> instead of free floating.</p>",
        "id": 257713626,
        "sender_full_name": "John Kugelman",
        "timestamp": 1634310671
    },
    {
        "content": "<p>well one example is that you might want to format directly to an output sink without the allocation. your system might not even <em>have</em> an allocator.</p>",
        "id": 257730084,
        "sender_full_name": "Lokathor",
        "timestamp": 1634317077
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"449326\">John Kugelman</span> <a href=\"#narrow/stream/219381-t-libs/topic/add.20new.20.3Cnumber.3E.3A.3Acount_digits.20function/near/257712877\">said</a>:</p>\n<blockquote>\n<p>If the method balloons up and has a half dozen options it starts to lose its shine...</p>\n</blockquote>\n<p>I actually agree with the <code>&lt;charconv&gt;</code> design on this point: there should be a public-but-out-of-the-way function with lots of knobs so that the power users don't have to write it themselves. Float formatting is really gnarly and this is certainly a candidate for std or at least a high quality crate. But default options for the simple case would also make sense, and like I said the obvious choice is whatever <code>to_string</code> does.</p>",
        "id": 257734475,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634318814
    },
    {
        "content": "<p>I think if this includes the sign, and for floats the decimal point and exponent, it should not be named <code>digits</code>.</p>",
        "id": 257735420,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1634319211
    },
    {
        "content": "<p><code>chars</code> perhaps.</p>",
        "id": 257735448,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1634319224
    },
    {
        "content": "<p><code>len_as_str</code>?</p>",
        "id": 257735634,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634319301
    },
    {
        "content": "<p><code>fmt_len</code></p>",
        "id": 257738011,
        "sender_full_name": "Lokathor",
        "timestamp": 1634320301
    },
    {
        "content": "<p>actually we could make this an extension of the existing fmt traits so that you can get the length for various kinds of formatting</p>",
        "id": 257738167,
        "sender_full_name": "Lokathor",
        "timestamp": 1634320363
    },
    {
        "content": "<p>trait BinaryLen: Binary { fn fmt_len(&amp;self) -&gt; usize }</p>",
        "id": 257738264,
        "sender_full_name": "Lokathor",
        "timestamp": 1634320404
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">format_len</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"0x{:x}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">12345</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 257738546,
        "sender_full_name": "kennytm",
        "timestamp": 1634320520
    },
    {
        "content": "<p>option 1,</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">LowerHex</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">fmt</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Formatter</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">fmt_len</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Formatter</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">core</span>::<span class=\"n\">result</span>::<span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Error</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">old_length</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">.</span><span class=\"n\">current_length</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">fmt</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">.</span><span class=\"n\">current_length</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">old_length</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>option 2,</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">LowerHex</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">fmt</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Formatter</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">.</span><span class=\"n\">count_length_only</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">f</span><span class=\"p\">.</span><span class=\"n\">increase_length_by</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">log16</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">Ok</span><span class=\"p\">(());</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"c1\">// regular code.</span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 257739504,
        "sender_full_name": "kennytm",
        "timestamp": 1634320899
    },
    {
        "content": "<p>Are either of those options no_alloc friendly?</p>",
        "id": 257742008,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634321962
    },
    {
        "content": "<p>you'd need to use some sort of arrayvec and format into that and hope you don't overflow</p>",
        "id": 257742175,
        "sender_full_name": "Lokathor",
        "timestamp": 1634322018
    },
    {
        "content": "<p>also, i know i suggested it, but that leans towards the \"way too many knobs\" end of things</p>",
        "id": 257742241,
        "sender_full_name": "Lokathor",
        "timestamp": 1634322052
    },
    {
        "content": "<p>If we're only calculating the length, why would we need an arrayvec?</p>",
        "id": 257742878,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634322302
    },
    {
        "content": "<p>Given the result, the user might be interested in formatting into an arrayvec or similar, but that's a separate issue. They might be using an alternate formatting library tailored for embedded applications or something</p>",
        "id": 257743131,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634322398
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/219381-t-libs/topic/add.20new.20.3Cnumber.3E.3A.3Acount_digits.20function/near/257742008\">said</a>:</p>\n<blockquote>\n<p>Are either of those options no_alloc friendly?</p>\n</blockquote>\n<p>they have to be <code>#[no_alloc]</code> because these <code>fmt</code> impl is in <code>core</code>, not <code>alloc</code> <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 257744204,
        "sender_full_name": "kennytm",
        "timestamp": 1634322835
    },
    {
        "content": "<blockquote>\n<p>If we're only calculating the length, why would we need an arrayvec?</p>\n</blockquote>\n<p>as far as i know you can't make a Formatter yourself. Only core can do it for you.</p>",
        "id": 257748218,
        "sender_full_name": "Lokathor",
        "timestamp": 1634324638
    },
    {
        "content": "<p>So if you do need a Formatter to target your fmt call to, then you'd need some sort of dummy target.</p>",
        "id": 257748360,
        "sender_full_name": "Lokathor",
        "timestamp": 1634324692
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">hex_len</span><span class=\"p\">(</span><span class=\"n\">n</span>: <span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kt\">u32</span>::<span class=\"n\">BITS</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"p\">.</span><span class=\"n\">leading_zeros</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">bin_len</span><span class=\"p\">(</span><span class=\"n\">n</span>: <span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kt\">u32</span>::<span class=\"n\">BITS</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"p\">.</span><span class=\"n\">leading_zeros</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I don't think count_digits() would be very useful for real world workloads outside of naive ascii swar hijinks.</p>\n<div class=\"codehilite\" data-code-language=\"JavaScript\"><pre><span></span><code><span class=\"c1\">// Run js in browser devtools</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"ow\">new</span> <span class=\"nb\">Intl</span><span class=\"p\">.</span><span class=\"nx\">NumberFormat</span><span class=\"p\">(</span><span class=\"s1\">'en'</span><span class=\"p\">).</span><span class=\"nx\">format</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mf\">500</span><span class=\"nx\">_000</span><span class=\"p\">),</span> <span class=\"ow\">new</span> <span class=\"nb\">Intl</span><span class=\"p\">.</span><span class=\"nx\">NumberFormat</span><span class=\"p\">(</span><span class=\"s1\">'en'</span><span class=\"p\">).</span><span class=\"nx\">format</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mf\">500</span><span class=\"nx\">_000</span><span class=\"p\">).</span><span class=\"nx\">length</span><span class=\"p\">);</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"ow\">new</span> <span class=\"nb\">Intl</span><span class=\"p\">.</span><span class=\"nx\">NumberFormat</span><span class=\"p\">(</span><span class=\"s1\">'en-IN'</span><span class=\"p\">).</span><span class=\"nx\">format</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mf\">500</span><span class=\"nx\">_000</span><span class=\"p\">),</span> <span class=\"ow\">new</span> <span class=\"nb\">Intl</span><span class=\"p\">.</span><span class=\"nx\">NumberFormat</span><span class=\"p\">(</span><span class=\"s1\">'en-IN'</span><span class=\"p\">).</span><span class=\"nx\">format</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mf\">500</span><span class=\"nx\">_000</span><span class=\"p\">).</span><span class=\"nx\">length</span><span class=\"p\">);</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"ow\">new</span> <span class=\"nb\">Intl</span><span class=\"p\">.</span><span class=\"nx\">NumberFormat</span><span class=\"p\">(</span><span class=\"s1\">'ar-EG'</span><span class=\"p\">).</span><span class=\"nx\">format</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mf\">500</span><span class=\"nx\">_000</span><span class=\"p\">),</span> <span class=\"ow\">new</span> <span class=\"nb\">Intl</span><span class=\"p\">.</span><span class=\"nx\">NumberFormat</span><span class=\"p\">(</span><span class=\"s1\">'ar-EG'</span><span class=\"p\">).</span><span class=\"nx\">format</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mf\">500</span><span class=\"nx\">_000</span><span class=\"p\">).</span><span class=\"nx\">length</span><span class=\"p\">);</span>\n</code></pre></div>",
        "id": 257801735,
        "sender_full_name": "Bot+",
        "timestamp": 1634360194
    },
    {
        "content": "<blockquote>\n<p>I don't think count_digits() would be very useful for real world workloads</p>\n</blockquote>\n<p>a lot of interchange protocols will use ascii numbers (json for example)</p>",
        "id": 258600386,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1634843217
    },
    {
        "content": "<p>well, but json is variable-length so you need a large buffer anyway and can just dump the digits into it</p>",
        "id": 258600799,
        "sender_full_name": "The 8472",
        "timestamp": 1634843392
    },
    {
        "content": "<p>fair enough. i think there are real a lot of real world cases where ascii formatting of numebrs is correct/desirable, but mainly when the number is not being displayed to a human</p>",
        "id": 258605868,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1634845624
    },
    {
        "content": "<p>maybe if you had a length-prefixed format that still writes out ascii and you want to calculate the length without using an intermediate buffer then it could be useful.</p>",
        "id": 258606930,
        "sender_full_name": "The 8472",
        "timestamp": 1634846087
    },
    {
        "content": "<p>I would use such a method. I currently have an extension trait that does just that. <a href=\"https://github.com/time-rs/time/blob/a28507f4d38e7fa463ccc6486a63c521f9d47b67/src/formatting/mod.rs#L43-L115\">https://github.com/time-rs/time/blob/a28507f4d38e7fa463ccc6486a63c521f9d47b67/src/formatting/mod.rs#L43-L115</a></p>",
        "id": 258607423,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1634846294
    },
    {
        "content": "<p>I would appreciate such a method as well, to avoid having to carefully fiddle with log10 and figure out if I need to add one.</p>",
        "id": 258615034,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1634849390
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/219381-t-libs/topic/add.20new.20.3Cnumber.3E.3A.3Acount_digits.20function/near/258615034\">said</a>:</p>\n<blockquote>\n<p>figure out if I need to add one.</p>\n</blockquote>\n<p>The answer is always yes.</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mrow><mi>r</mi><mi>a</mi><mi>d</mi><mi>i</mi><mi>x</mi></mrow></msub><mo stretchy=\"false\">(</mo><mi>v</mi><mi>a</mi><mi>l</mi><mi>u</mi><mi>e</mi><mo>∨</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">\\log _{radix}(value\\vee 1)+1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24196799999999993em;\"><span style=\"top:-2.4558600000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal mtight\">a</span><span class=\"mord mathnormal mtight\">d</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mord mathnormal mtight\">x</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24414em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">e</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∨</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span></span></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// micro optimizations!</span>\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">hex_len</span><span class=\"p\">(</span><span class=\"n\">n</span>: <span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"kt\">u8</span>::<span class=\"n\">BITS</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"p\">((</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">).</span><span class=\"n\">leading_zeros</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">bin_len</span><span class=\"p\">(</span><span class=\"n\">n</span>: <span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kt\">u8</span>::<span class=\"n\">BITS</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">).</span><span class=\"n\">leading_zeros</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">dec_len</span><span class=\"p\">(</span><span class=\"n\">n</span>: <span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">.</span><span class=\"n\">wrapping_add</span><span class=\"p\">(</span><span class=\"mb\">0b01_00000000</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">100</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"p\">.</span><span class=\"n\">wrapping_add</span><span class=\"p\">(</span><span class=\"mb\">0b10_00000000</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>For small numbers it's better to think in terms of how many usize registers max value needs, for bigger numbers allocate few extra bytes to output buffer.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// 200 byte 00-99 LUT is faster</span>\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">write_u8</span><span class=\"p\">(</span><span class=\"n\">n</span>: <span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">buf</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">C1</span>: <span class=\"kt\">u32</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mb\">0b11_00000000</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">C2</span>: <span class=\"kt\">u32</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mb\">0b10_00000000</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">100</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">log10</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">.</span><span class=\"n\">wrapping_add</span><span class=\"p\">(</span><span class=\"n\">C1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"p\">.</span><span class=\"n\">wrapping_add</span><span class=\"p\">(</span><span class=\"n\">C2</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">low</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">high</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">mid</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">high</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">high</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">high</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">u32</span>::<span class=\"n\">from_le_bytes</span><span class=\"p\">([</span><span class=\"n\">low</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">high</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">mid</span><span class=\"p\">]);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">|=</span><span class=\"w\"> </span><span class=\"kt\">u32</span>::<span class=\"n\">from_ne_bytes</span><span class=\"p\">([</span><span class=\"sc\">b'0'</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">]);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"p\">.</span><span class=\"n\">rotate_left</span><span class=\"p\">(</span><span class=\"n\">log10</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">*</span><span class=\"n\">buf</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"p\">.</span><span class=\"n\">to_le_bytes</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">log10</span><span class=\"p\">.</span><span class=\"n\">wrapping_add</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 258634691,
        "sender_full_name": "Bot+",
        "timestamp": 1634859596
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"420380\">Bot+</span> <a href=\"#narrow/stream/219381-t-libs/topic/add.20new.20.3Cnumber.3E.3A.3Acount_digits.20function/near/258634691\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/219381-t-libs/topic/add.20new.20.3Cnumber.3E.3A.3Acount_digits.20function/near/258615034\">said</a>:</p>\n<blockquote>\n<p>figure out if I need to add one.</p>\n</blockquote>\n<p>The answer is always yes.</p>\n</blockquote>\n<p>I realize that, but i use it rarely enough that it requires a moment's extra thought every time.</p>",
        "id": 258712361,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1634909785
    },
    {
        "content": "<p><code>hex_len</code> of <code>u8</code> can be done simpler: <code>(n &gt;&gt; 4).wrapping_add(31) &gt;&gt; 4</code></p>",
        "id": 260323388,
        "sender_full_name": "Falk Hüffner",
        "timestamp": 1636054777
    },
    {
        "content": "<p>Or <code>let n = n as u32; (n + 0x1f0) &gt;&gt; 8</code></p>",
        "id": 260336191,
        "sender_full_name": "Falk Hüffner",
        "timestamp": 1636060672
    },
    {
        "content": "<p>so is the most general version of this an extension trait for types that can predict their format width, the same as some iterators can predict their iteration count?</p>",
        "id": 260341701,
        "sender_full_name": "Lokathor",
        "timestamp": 1636063885
    },
    {
        "content": "<p>Then it's not just number types and digits, but you could ask any type how many bytes it expects to format</p>",
        "id": 260341829,
        "sender_full_name": "Lokathor",
        "timestamp": 1636063929
    }
]