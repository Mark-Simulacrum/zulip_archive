[
    {
        "content": "<p>We had quite a few instances of unsafe use of Vec::with_capacity over the last few years where untrusted user input is passed to it (same with other types). The idea came up if there could be a clippy lint for it, but it’s tricky with the API today. Which got me thinking if there could be an intrinsic or helper to mark a usize as “safe” for capacity reservations.</p>",
        "id": 275230713,
        "sender_full_name": "Armin Ronacher",
        "timestamp": 1647262327
    },
    {
        "content": "<p>Eg <code>Vec::with_capacity(trusted_capacity(x))</code></p>",
        "id": 275230824,
        "sender_full_name": "Armin Ronacher",
        "timestamp": 1647262390
    },
    {
        "content": "<p>That way an untrusted capacity could be linted against and a change to <code>x.min(MAX_SENSIBLE_CAPACITY)</code> could be proposed</p>",
        "id": 275230946,
        "sender_full_name": "Armin Ronacher",
        "timestamp": 1647262455
    },
    {
        "content": "<p>What do you mean by \"unsafe use\"? <code>Vec::with_capacity</code> isn't an <code>unsafe fn</code></p>",
        "id": 275236657,
        "sender_full_name": "bstrie",
        "timestamp": 1647265332
    },
    {
        "content": "<p>a fallable version, <code>try_with_capacity</code>, would perhaps be appropriate, but users can make that themselves if they want.</p>",
        "id": 275238176,
        "sender_full_name": "Lokathor",
        "timestamp": 1647266037
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256342\">bstrie</span> <a href=\"#narrow/stream/219381-t-libs/topic/Better.20and.20safer.20ergonomics.20for.20T.3A.3Awith_capacity.20or.20raw.20a.2E.2E.2E/near/275236657\">said</a>:</p>\n<blockquote>\n<p>What do you mean by \"unsafe use\"? <code>Vec::with_capacity</code> isn't an <code>unsafe fn</code></p>\n</blockquote>\n<p>My interpretation was if you blindly trusted a <code>Content-Length</code> header for instance and ended up trying to allocate many gigabytes when handling a HTTP request. It's not _unsafe_ but it can bring down your application (and can be used in an attack to bring down an entire service)</p>",
        "id": 275238865,
        "sender_full_name": "Conrad Ludgate",
        "timestamp": 1647266323
    },
    {
        "content": "<p>And the solution presented to find a way to lint these allocation APIs in order to not allocate such large amounts unless you could somehow prove that you've checked the number isn't ridiculously large</p>",
        "id": 275239153,
        "sender_full_name": "Conrad Ludgate",
        "timestamp": 1647266410
    },
    {
        "content": "<p>Ah, I think I too misread Armin's text at first.</p>\n<p>@5225225 isn't in here, but I've done a _bit_ of fuzzing with them and I can confirm that passing untrusted data to <code>Vec::with_capacity</code> is a huge source of panics/DoS issues in the Rust ecosystem generally.</p>",
        "id": 275245119,
        "sender_full_name": "Ben Kimock (Saethlin)",
        "timestamp": 1647268940
    },
    {
        "content": "<p>The <code>trust-dns</code> crates do something interesting which may be related <a href=\"https://github.com/bluejekyll/trust-dns/blob/dc5c414ec0553af8a65441d0c747fb8e9f8e174e/crates/proto/src/serialize/binary/restrict.rs\">https://github.com/bluejekyll/trust-dns/blob/dc5c414ec0553af8a65441d0c747fb8e9f8e174e/crates/proto/src/serialize/binary/restrict.rs</a></p>\n<p>Usage looks like this: <a href=\"https://github.com/bluejekyll/trust-dns/blob/dc5c414ec0553af8a65441d0c747fb8e9f8e174e/crates/proto/src/rr/domain/name.rs#L1155\">https://github.com/bluejekyll/trust-dns/blob/dc5c414ec0553af8a65441d0c747fb8e9f8e174e/crates/proto/src/rr/domain/name.rs#L1155</a></p>",
        "id": 275245571,
        "sender_full_name": "Ben Kimock (Saethlin)",
        "timestamp": 1647269159
    },
    {
        "content": "<p>Yep. Unsafe in the sense of causing large or failing allocations because of accidentally trusting user input. Common issue are things like parsers or deserializers</p>",
        "id": 275249601,
        "sender_full_name": "Armin Ronacher",
        "timestamp": 1647270712
    },
    {
        "content": "<p>I think it's important not to call \"allocating too much memory\" as \"unsafe\", since obviously safe code can trivially do it.</p>\n<p>Maybe \"tainted\", to borrow a term from perl? <a href=\"https://stackoverflow.com/questions/2228457/is-perls-taint-mode-useful\">https://stackoverflow.com/questions/2228457/is-perls-taint-mode-useful</a></p>",
        "id": 275298570,
        "sender_full_name": "scottmcm",
        "timestamp": 1647292182
    },
    {
        "content": "<p>maybe just \"vulnerable\", since rust projects do issue CVEs for DoS attacks</p>",
        "id": 275299105,
        "sender_full_name": "bstrie",
        "timestamp": 1647292472
    },
    {
        "content": "<p>I regret the use of the word \"unsafe\" :)</p>",
        "id": 275310622,
        "sender_full_name": "Armin Ronacher",
        "timestamp": 1647299638
    }
]