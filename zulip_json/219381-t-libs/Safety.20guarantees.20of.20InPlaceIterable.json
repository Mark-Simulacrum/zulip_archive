[
    {
        "content": "<p>By implementing <code>InPlaceIterable</code> the implementor guarantees that a successful call to <code>next()</code> will have taken at least an item from the underlying <code>SourceIter</code>. However does this also apply to <code>try_fold</code>? I.e. If I call <code>try_fold</code> on an <code>InPlaceIterable</code> and it returns a failure do I have the same guarantees as if <code>next()</code> was called?  </p>\n<p>My reasoning is the following:</p>\n<ul>\n<li>It returns a failure, which can only be provided by the closure since it requires an instance of the <code>Try::Error</code> type which the <code>try_fold</code> implementation knows</li>\n<li>Since the closure was called, an item must have been supplied to it, which <strong>ideally</strong> requires calling <code>next()</code> or something equivalent. The implementation of <code>SpecFromIter</code> for <code>I: Iterator + SourceItemMarker</code>seems to assume this (see <a href=\"https://github.com/rust-lang/rust/blob/master/library/alloc/src/vec/source_iter_marker.rs#L60-L62\">here</a>).</li>\n</ul>",
        "id": 223743336,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1611398685
    },
    {
        "content": "<p>Yes, it should also apply  to try_fold. If try_fold yielded an element then at least one slot in the source must be available.<br>\nIf you have concrete changes in mind you can CC me on that PR since I am responsible for that hideous thing. :D<br>\nIt's only meant for std-internal use so far, so its spec may not be 100% watertight.</p>",
        "id": 224544360,
        "sender_full_name": "The 8472",
        "timestamp": 1611959239
    },
    {
        "content": "<p>There's not really any way that <code>try_fold</code> could fail without reading an item even if it wanted to -- there's no way to produce the required type without passing an item from the iterator.  (Well, if you know that the item type is <code>()</code> or something you could make one yourself, but I can't imagine any way to accidentally return an error from <code>try_fold</code> without reading at least one item.)</p>\n<p>There are plenty of easy ways to do <code>try_fold</code> wrong, but that one, at least, isn't one of them <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 224564297,
        "sender_full_name": "scottmcm",
        "timestamp": 1611979844
    },
    {
        "content": "<p>Well, technically someone could use specialization to clone and return the same value from <code>try_fold</code>, which would mean that only the first call will result in a call to <code>next</code>. Yes, this is pretty convoluted, but it's not explicitly forbidden. </p>\n<p>Anyway, I was thinking if it was correct to implement <code>InPlaceIterable</code> for <code>ResultShunt</code> (which is internal to the stdlib), and since its <code>Iterator::next</code> implementation end up calling <code>try_fold</code> on the underlying iterator I ended up with this question.</p>",
        "id": 224582052,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1612008197
    },
    {
        "content": "<p>For <code>.collect::&lt;Result&lt;Vec&lt;_&gt;,_&gt;&gt;()</code>? Yeah that should work.</p>",
        "id": 224584946,
        "sender_full_name": "The 8472",
        "timestamp": 1612013009
    }
]