[
    {
        "content": "<p>Augh, I wrote this out twice, and zulip lost it both times. Then, I typed it out in my text editor, but zulip wouldn't let me paste it in. Not sure if these bugs are in firefox nightly or zulip, but either way... Here, I can paste it as a gist. So, here's a link to a small discussion around a potential <code>core::char::NonZeroChar</code> type. Sorry it's not a more normal thread.</p>\n<p><a href=\"https://gist.github.com/thomcc/db9cccb5fb7b33f2b199537161fa2879\">https://gist.github.com/thomcc/db9cccb5fb7b33f2b199537161fa2879</a></p>",
        "id": 234213710,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1618254632
    },
    {
        "content": "<p>How common is that issue (I rarely deal with FFI)? Could it be handled by a crate?</p>",
        "id": 234215087,
        "sender_full_name": "The 8472",
        "timestamp": 1618255270
    },
    {
        "content": "<p>I think it has several uses, and it could only be handled to a limited degree by a crate, as there are no stable (or even semi-stable) ways to define types with niches.</p>\n<p>It's also moderately useful for code that doesn't do FFI but implements certain unicode algorithms (ones where this is applicable). That code currently tends to use '\\0' as a sentinel value, which is less clear.</p>",
        "id": 234215821,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1618255598
    },
    {
        "content": "<p>The fact that it could only be handled to a limited degree by a crate makes it mostly not useful as a external crate, since at that point you might as well (in the example I gave) have <code>MyCString::push(char)</code> return <code>Result&lt;(), MyNulError&gt;</code>, rather than force users to go through (and read the docs for) a <code>NonZeroChar</code> type they wouldn't already be familiar with.</p>",
        "id": 234216053,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1618255705
    },
    {
        "content": "<p>Null-safety is separate from niches. chars already should have niches since they're only valid for a limited range of unicode values, adding 0 as extra niche probably doesn't add all that much more except maybe in some complex enums where the niche overlap would help?</p>",
        "id": 234216487,
        "sender_full_name": "The 8472",
        "timestamp": 1618255869
    },
    {
        "content": "<p>It's more that <code>Option&lt;NonZeroChar&gt;</code> is equivalent to <code>char</code> and '\\0' is equivalent to None::&lt;NonZeroChar&gt;</p>",
        "id": 234216639,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1618255926
    },
    {
        "content": "<p>Admittedly, a big reason to have this is separate from the niche. The niche is an added benefit, that allows it to be used in more scenarios</p>",
        "id": 234216875,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1618256026
    },
    {
        "content": "<p>Without the niche it could be defined as an external crate, IMO it's simple enough that it wouldn't be worth using most of the time. I think the bar for \"should this be in the stdlib\" isn't \"can this be defined externally\", since there are a lot of great methods and types in the stdlib that I use all the time, which I wouldn't add a dependency on a third party crate for.</p>",
        "id": 234217209,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1618256163
    },
    {
        "content": "<p>(Moreover, as discussed, this <em>can't</em> be defined externally, not without giving up a property that, at least IMO, is useful)</p>",
        "id": 234217434,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1618256268
    },
    {
        "content": "<blockquote>\n<p>#[dear_mister_rustc_give_me_a_niche(1..=0x10ffff)]</p>\n</blockquote>\n<p>petition to rename <code>rustc_layout_scalar_valid_range_start</code> to this</p>",
        "id": 234223481,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1618258739
    },
    {
        "content": "<p>actually I wonder if we could change <code>rustc_layout_scalar_valid_range_start</code> to <code>rustc_layout_scalar_valid_range</code> and have it take a range instead of an integer</p>",
        "id": 234223528,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1618258761
    },
    {
        "content": "<p>I think the ideal version of this takes multiple ranges. Since the real valid range for char is <code>0..0xd800 | 0xe000..0x110000</code></p>",
        "id": 234227140,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1618260221
    },
    {
        "content": "<p>or something like that</p>",
        "id": 234227146,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1618260228
    },
    {
        "content": "<p>I can't remember why, but I think there might be resistance to a niche not being a single continuous range</p>",
        "id": 234238056,
        "sender_full_name": "bstrie",
        "timestamp": 1618265219
    },
    {
        "content": "<p>The resistance I remember is to allowing multiple bit patterns to represent one discriminant (like \"any NAN bit pattern\" or \"anything with the low bit set\"), and the \"single continuous range\" restriction was \"just\" an implementation restriction.</p>",
        "id": 234238318,
        "sender_full_name": "scottmcm",
        "timestamp": 1618265401
    }
]