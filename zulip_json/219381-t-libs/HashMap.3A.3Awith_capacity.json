[
    {
        "content": "<p>HashMap::with_capacity is implemented for RandomState only, but not for <code>BuildHasher + Default</code>. This makes using FxHashMap, and any other case with a custom hasher impl more cumbersome. Well I'm sure there is a reason behind this, but does anyone know what that reason is?</p>",
        "id": 223059446,
        "sender_full_name": "Dániel Buga",
        "timestamp": 1610912620
    },
    {
        "content": "<p>I think it's something to do with default type parameters not being used in inference</p>",
        "id": 223059808,
        "sender_full_name": "scottmcm",
        "timestamp": 1610913080
    },
    {
        "content": "<p>So if it was generic, then <code>HashMap::with_capacity(4)</code> would always complain that you need to specify the hasher.</p>",
        "id": 223059815,
        "sender_full_name": "scottmcm",
        "timestamp": 1610913112
    },
    {
        "content": "<p>That's interesting. Is that by design, or inference being not sophisticated enough?</p>",
        "id": 223059868,
        "sender_full_name": "Dániel Buga",
        "timestamp": 1610913157
    },
    {
        "content": "<p>Not sure <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>\n<p>I think it gets into the territory of fallbacks, which is hard to have with inference.  Because if you do <code>let FxHashMap&lt;_, _&gt; = HashMap::default()</code>, then you want the Hasher to be inferred, not defaulted.</p>",
        "id": 223059947,
        "sender_full_name": "scottmcm",
        "timestamp": 1610913247
    },
    {
        "content": "<p>Uh, yeah, you're right. I guess it's a problem that seems easier than it actually is.</p>",
        "id": 223059995,
        "sender_full_name": "Dániel Buga",
        "timestamp": 1610913361
    }
]