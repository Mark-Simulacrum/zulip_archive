[
    {
        "content": "<p>I'm interested in having a function in <code>BTreeMap</code> that would return the highest key below a given key, and a function that returns a range where the lower bound is expanded to include the next key below. (This would be for a BTreeMap representing ranges/extents of data.) Does that seem like a reasonable thing to do?</p>",
        "id": 190838468,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1584447282
    },
    {
        "content": "<p><code>some_btreemap.highest_key_below(k)</code> is equivalent to <code>some_btreemap.range(..=k).next_back().map(|(k, _)| k)</code></p>",
        "id": 190838527,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1584447337
    },
    {
        "content": "<p>And then the range function I'm looking for would be equivalent to <code>some_btreemap.range(some_btreemap.highest_key_below(start)..end)</code>, but only walking the tree once, not twice.</p>",
        "id": 190838666,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1584447408
    },
    {
        "content": "<p>Can't you already do this with <code>range</code>?</p>",
        "id": 190838746,
        "sender_full_name": "Amanieu",
        "timestamp": 1584447471
    },
    {
        "content": "<p>Using <code>Included</code> and <code>Excluded</code></p>",
        "id": 190838820,
        "sender_full_name": "Amanieu",
        "timestamp": 1584447500
    },
    {
        "content": "<p>Highest key below <code>k</code>: <code>btree.range((Unbounded, Excluded(&amp;k))).next_back()</code></p>",
        "id": 190838980,
        "sender_full_name": "Amanieu",
        "timestamp": 1584447605
    },
    {
        "content": "<p>That's equivalent to what I just wrote above, yes.</p>",
        "id": 190839037,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1584447634
    },
    {
        "content": "<p>(Also, I'd want <code>Included</code>, not <code>Excluded</code>, which is why I wrote <code>..=</code> above.)</p>",
        "id": 190839066,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1584447655
    },
    {
        "content": "<p>It might make more sense to add cursors to btree like we did with <code>LinkedList</code>.</p>",
        "id": 190839116,
        "sender_full_name": "Amanieu",
        "timestamp": 1584447695
    },
    {
        "content": "<p>Potentially useful, but <code>range</code> really is close to what I want, I just need the ability to extend the range earlier to encompass the element preceding a key.</p>",
        "id": 190839234,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1584447759
    },
    {
        "content": "<p>One moment, let me post some sample code.</p>",
        "id": 190839248,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1584447770
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=2a3adf26c8e0e0cc61fc511abab57c1c\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=2a3adf26c8e0e0cc61fc511abab57c1c\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=2a3adf26c8e0e0cc61fc511abab57c1c</a></p>",
        "id": 190839314,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1584447830
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">collections</span>::<span class=\"n\">BTreeMap</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">BTreeMap</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">m</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">&quot;data through 9&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">m</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">&quot;data through 99&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">m</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">&quot;data through 999&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">m</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">&quot;data through 9999&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">m</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"mi\">10000</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">&quot;data through 99999&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">first</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"p\">.</span><span class=\"n\">range</span><span class=\"p\">(..</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">).</span><span class=\"n\">next_back</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;first relevant key: {}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">first</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;Relevant ranges:&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"p\">.</span><span class=\"n\">range</span><span class=\"p\">(</span><span class=\"n\">first</span><span class=\"p\">..</span><span class=\"mi\">5000</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;{} {}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 190839331,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1584447842
    },
    {
        "content": "<p>To satisfy a request for data from 50 to 5000, I need the keys 10, 100, and 1000.</p>",
        "id": 190839399,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1584447871
    },
    {
        "content": "<p>Does that make sense?</p>",
        "id": 190839410,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1584447886
    },
    {
        "content": "<p>With a cursor you could do something like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">cur</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"p\">.</span><span class=\"n\">cursor_at_upper_bound</span><span class=\"p\">(</span><span class=\"n\">Included</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"mi\">50</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"k\">while</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">((</span><span class=\"n\">k</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">cur</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">5000</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">break</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;{} {}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">cur</span><span class=\"p\">.</span><span class=\"n\">move_next</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 190849695,
        "sender_full_name": "Amanieu",
        "timestamp": 1584453076
    },
    {
        "content": "<p>That cursor_at_upper_bound operation would still have to exist with the semantics I described, though.</p>",
        "id": 191306212,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1584740480
    },
    {
        "content": "<p><a href=\"https://docs.rs/intrusive-collections/0.8.5/intrusive_collections/rbtree/struct.RBTree.html#method.upper_bound\" target=\"_blank\" title=\"https://docs.rs/intrusive-collections/0.8.5/intrusive_collections/rbtree/struct.RBTree.html#method.upper_bound\">https://docs.rs/intrusive-collections/0.8.5/intrusive_collections/rbtree/struct.RBTree.html#method.upper_bound</a></p>",
        "id": 191313719,
        "sender_full_name": "Amanieu",
        "timestamp": 1584745678
    },
    {
        "content": "<p>Nice! That would indeed be perfect.</p>",
        "id": 191368147,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1584828987
    }
]