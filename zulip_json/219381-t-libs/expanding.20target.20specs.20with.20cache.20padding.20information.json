[
    {
        "content": "<p>In <a href=\"#narrow/stream/219381-t-libs/topic/.60std.3A.3Amem.3A.3ACachePadded.60\">https://rust-lang.zulipchat.com/#narrow/stream/219381-t-libs/topic/.60std.3A.3Amem.3A.3ACachePadded.60</a> we've been talking about adding <code>std::mem::CachePadded</code> to the stdlib. One thing that's come up is that the current cache padding implementations are not good enough as they make too broad assumptions.</p>\n<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> suggested the right solution would be to add cache padding information to the <a href=\"https://github.com/rust-lang/rust/tree/master/compiler/rustc_target/src/spec\">target specs</a>. Unless I'm missing something it appears we only track triples, and not specific CPUs. What would be the right way to add this information into the stdlib so that we can later use it to set the alignment of <code>std::mem::CachePadded</code>?</p>",
        "id": 216255743,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1605034036
    },
    {
        "content": "<p>as a first step, I think it would just be making similar broad assumptions (like treating all <code>x86_64</code> the same), but doing that in target specs is a bit more principled</p>",
        "id": 216256027,
        "sender_full_name": "cuviper",
        "timestamp": 1605034159
    },
    {
        "content": "<p>I don't see any precedent of using <code>target-cpu</code> in the standard library though</p>",
        "id": 216256208,
        "sender_full_name": "cuviper",
        "timestamp": 1605034218
    },
    {
        "content": "<p>especially since <code>std</code> is currently precompiled for the generic target</p>",
        "id": 216256282,
        "sender_full_name": "cuviper",
        "timestamp": 1605034248
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> cool, that makes sense! Had no idea the stdlib was precompiled, but that makes a lot of sense now that I think about it. â€” yes cool that makes a lot of sense to start</p>",
        "id": 216261055,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1605036212
    },
    {
        "content": "<p>(There's long been a wish to have <code>std</code> not just be the one precompiled one -- it's be nice to have <code>debug_assert</code>ions work in debug mode, for example -- but I don't know what the progress of that is.  Maybe the <code>std</code>-aware cargo stuff?)</p>",
        "id": 216265573,
        "sender_full_name": "scottmcm",
        "timestamp": 1605038323
    },
    {
        "content": "<p>I'm not sure what the state of field alignment annotations is but to some degree instead of catch padded something like <code>struct S { #[align(cach_size)]  f: AtomicUsize }</code>  could be used. (Edit: to work well with precompiled std)</p>\n<p>Except that due to different caches, unusual cache sizes and other things which need to be considered (e.g. for   ll/sc atomic operations) we probably should not use cache size as terminology.</p>\n<p>While C++ hardware_destructive_inference_size  isn't necessary the most intuitive name, it's more or less the feature we need instead of cache size based alignment/paying I think.</p>",
        "id": 216335953,
        "sender_full_name": "Philipp Korber",
        "timestamp": 1605095631
    },
    {
        "content": "<p>This also would work with less specify targets as in a certain way it would hint the smallest size most likely guaranteed to avoid unwanted inference.</p>",
        "id": 216336447,
        "sender_full_name": "Philipp Korber",
        "timestamp": 1605095986
    },
    {
        "content": "<p>Anyway this probably requires some form of \"extended\" target spec I guess?</p>",
        "id": 216336815,
        "sender_full_name": "Philipp Korber",
        "timestamp": 1605096209
    }
]