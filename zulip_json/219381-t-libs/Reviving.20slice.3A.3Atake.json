[
    {
        "content": "<p>The <code>slice::take</code> PR (<a href=\"https://github.com/rust-lang/rust/pull/62282\">https://github.com/rust-lang/rust/pull/62282</a>) was closed due to inactivity earlier this year when it was very close to being merged. I'd love to push this forward, what would that entail? Do I just create a new PR with the same changes?</p>",
        "id": 210793212,
        "sender_full_name": "Tim Vermeulen",
        "timestamp": 1600719081
    },
    {
        "content": "<p>(I'm amused that the first line of that PR is \"A previous PR that would have added some of this functionality was closed due to inactivity: <a href=\"https://github.com/rust-lang/rust/issues/49173\">#49173</a>\")</p>",
        "id": 210796133,
        "sender_full_name": "scottmcm",
        "timestamp": 1600720428
    },
    {
        "content": "<p>question: what's the use case compared to a slice pattern?</p>",
        "id": 210796289,
        "sender_full_name": "Jubilee",
        "timestamp": 1600720504
    },
    {
        "content": "<p>But yes, new unstable methods probably just needs a new PR addressing whatever kept the previous one from going in.</p>",
        "id": 210797224,
        "sender_full_name": "scottmcm",
        "timestamp": 1600720995
    },
    {
        "content": "<p>(And maybe some code modernization like <code>slice::check_range</code>; unsure.)</p>\n<p>Shame that needs a new <code>OneSidedRange</code> trait, that that it's for a bad reason...</p>",
        "id": 210797531,
        "sender_full_name": "scottmcm",
        "timestamp": 1600721155
    },
    {
        "content": "<p>Why is that a shame, seems like a pretty elegant solution to me?</p>",
        "id": 210798401,
        "sender_full_name": "Tim Vermeulen",
        "timestamp": 1600721600
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> <code>slice::take</code> is mostly an ergonomics improvement over <code>slice::split_at</code> where you reassign one of the parts back to the slice, especially with mutable slices this can be a bit annoying. The <code>slice::Chunks</code> iterator types could especially benefit from this, code like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">tmp</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">mem</span>::<span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">v</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">[]);</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">tail</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">tmp</span><span class=\"p\">.</span><span class=\"n\">split_at_mut</span><span class=\"p\">(</span><span class=\"n\">sz</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">tail</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>is a one-liner with <code>slice::take</code>.</p>",
        "id": 210799407,
        "sender_full_name": "Tim Vermeulen",
        "timestamp": 1600722108
    },
    {
        "content": "<p>mmm, It is a lot of methods on slice which then go to Vec... I already struggle to read the docs for it.</p>",
        "id": 210800421,
        "sender_full_name": "Jubilee",
        "timestamp": 1600722588
    },
    {
        "content": "<p><code>take</code> is a method on <code>&amp;mut &amp;[T]</code>, not on <code>&amp;[T]</code>, so it shouldn't go to <code>Vec</code>.</p>",
        "id": 210800718,
        "sender_full_name": "Tim Vermeulen",
        "timestamp": 1600722717
    },
    {
        "content": "<p>methods on [u8] appear in the documentation for Vec&lt;T&gt;, I wouldn't expect a difference here.</p>",
        "id": 210801332,
        "sender_full_name": "Jubilee",
        "timestamp": 1600723022
    },
    {
        "content": "<p>Those methods are actually callable on (certain) vectors, these are not</p>",
        "id": 210802513,
        "sender_full_name": "Tim Vermeulen",
        "timestamp": 1600723720
    },
    {
        "content": "<p><del>8</del> 7 methods is still a lot of API real estate on std::slice.</p>",
        "id": 210802929,
        "sender_full_name": "Jubilee",
        "timestamp": 1600723928
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220645\">@Tim Vermeulen</span> oops, *\"not that it's for a bad reason\".</p>\n<p>It's just one of those things that I wouldn't hesitate to do in my own code but that seems to always make an addition more complicated for <code>core</code>.  It leads to questions like \"should it be public? what if people want to wrap it?\" etc -- see how <code>SliceIndex</code> is a stable trait with only (probably-perma-)unstable methods, for example.</p>",
        "id": 210834039,
        "sender_full_name": "scottmcm",
        "timestamp": 1600758263
    },
    {
        "content": "<p>Also, now that <code>slice::Iter&lt;'a, T&gt;</code> is both <code>AsRef&lt;[T]&gt;</code> and has <code>.as_slice()</code>, it makes me think that anything using <code>.take_first()</code> on a <code>&amp;mut &amp;'a [T]</code> should probably be calling <code>.next()</code> on a <code>&amp;mut Iter&lt;'a, T&gt;</code> instead...</p>",
        "id": 210834331,
        "sender_full_name": "scottmcm",
        "timestamp": 1600758524
    },
    {
        "content": "<p><code>slice::take</code> could technically also take a normal range and first do a rotate to make whatever's outside of that range contiguous. That does turn it into quite a different operation though (with different performance) so I think a new trait is the right call, maybe we'll even find uses for it elsewhere.</p>",
        "id": 210835099,
        "sender_full_name": "Tim Vermeulen",
        "timestamp": 1600759226
    },
    {
        "content": "<p>I'm quite indifferent about <code>take_first</code>/<code>take_last</code>, but I don't think you can always just use <code>Iter</code> either, sometimes for other purposes it makes sense to really store it as a slice (e.g. see <code>slice::Split</code> which could benefit from <code>take_first</code> inside <code>next</code>). Converting back and forth is often not worth the trouble.</p>",
        "id": 210838102,
        "sender_full_name": "Tim Vermeulen",
        "timestamp": 1600761652
    },
    {
        "content": "<p>Some tests in that PR don't compile in a reasonable amount of time because they contain <code>&amp;[(); usize::MAX]</code>, is that not supposed to be fine?</p>",
        "id": 210856507,
        "sender_full_name": "Tim Vermeulen",
        "timestamp": 1600773869
    },
    {
        "content": "<p>Or does the slice length limit of <code>isize::MAX</code> also apply to ZST?</p>",
        "id": 210861306,
        "sender_full_name": "Tim Vermeulen",
        "timestamp": 1600777177
    },
    {
        "content": "<p>Or maybe that's only when they're from a <code>Vec</code>...</p>",
        "id": 210861338,
        "sender_full_name": "Tim Vermeulen",
        "timestamp": 1600777198
    },
    {
        "content": "<p>The limit of <code>isize::MAX</code> concerns the allocation size, i.e. to <code>size_of_val</code>, not the slice length.<br>\nEven a vector of isize::MAX ZSTs is fine.</p>",
        "id": 210861964,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1600777556
    },
    {
        "content": "<p>Thanks for clarifying, in that case I'm not sure why <code>&amp;[(); usize::MAX]</code> doesn't compile in a reasonable amount of time. The playground also times out on it (<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=d5acc3bab9d1002851321d90693cb806\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=d5acc3bab9d1002851321d90693cb806</a>)</p>",
        "id": 210863536,
        "sender_full_name": "Tim Vermeulen",
        "timestamp": 1600778323
    },
    {
        "content": "<p>Looks like a compiler bug to me. Actually I'm not sure hmm.</p>",
        "id": 210891278,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1600790168
    },
    {
        "content": "<p>I'd report a bug, yeah</p>",
        "id": 210891945,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600790415
    },
    {
        "content": "<p>From godbolt earlier versions of Rust died with OOM and newer versions take a very long time. Looks like a very old bug.</p>",
        "id": 210892682,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1600790703
    },
    {
        "content": "<p>please report it nevertheless</p>",
        "id": 210894742,
        "sender_full_name": "DPC",
        "timestamp": 1600791579
    },
    {
        "content": "<p>Already doing :P</p>",
        "id": 210895137,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1600791740
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 210898705,
        "sender_full_name": "Tim Vermeulen",
        "timestamp": 1600793330
    }
]