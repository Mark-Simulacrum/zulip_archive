[
    {
        "content": "<p>Hi<br>\n<a href=\"https://discordapp.com/channels/442252698964721669/487245758739906560/738718768905322546\">I suggested in Discord:</a></p>\n<blockquote>\n<p>is there a particular reason why the Read trait isn't implemented for Iterator&lt;Item = u8&gt;? I have found a crate that does an implementation but I feel like this is something that would make sense to be in the standard library</p>\n<p>If there is no reason for the lack of this implementation I'd be happy to work on it</p>\n</blockquote>\n<p><a href=\"https://discordapp.com/channels/442252698964721669/487245758739906560/738908911058550826\">To which scottmcm replied:</a></p>\n<blockquote>\n<p>Perhaps because there's a bit of an impedence mismatch between item-at-a-time in iterators and the chunkyness that Read tends to prefer.  You could check with libs on zulip for a better answer.</p>\n</blockquote>\n<p>And while I understand this I feel like it makes sense to be able to have a way to convert between each other. There's a large similarity between both types and a way to pass an <code>Iterator&lt;Item = u8&gt;</code> into a method that requests a <a href=\"https://doc.rust-lang.org/std/io/trait.Read.html\">Read</a> might be useful in many occasions.<br>\nConsidering that implementing Read for <code>Iterator&lt;Item = u8&gt;</code> wouldn't make sense maybe implementing <code>From&lt;Iterator&lt;Item = u8&gt;&gt;</code> for <code>Read</code> would?</p>",
        "id": 205680750,
        "sender_full_name": "Rafael Patronilo",
        "timestamp": 1596287324
    },
    {
        "content": "<p>What are those occasions specifically?</p>",
        "id": 205683673,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1596291931
    },
    {
        "content": "<p><code>Read</code> is a trait - you can't implement <code>From</code> for it.</p>",
        "id": 205683682,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1596291952
    },
    {
        "content": "<p>You could make an adapter struct to do this, but that doesn't need to be in the standard library</p>",
        "id": 205684446,
        "sender_full_name": "Lokathor",
        "timestamp": 1596293197
    },
    {
        "content": "<blockquote>\n<p>What are those occasions specifically?</p>\n</blockquote>\n<p>I was thinking of the generic situation when you have a lib function that returns an object implementing Iterator&lt;Item = u8&gt; and you wanna pass it to a function requesting a Read object (situation which I had yesterday but managed to find another solution).</p>",
        "id": 205686951,
        "sender_full_name": "Rafael Patronilo",
        "timestamp": 1596297409
    },
    {
        "content": "<blockquote>\n<p>You could make an adapter struct to do this, but that doesn't need to be in the standard library</p>\n</blockquote>\n<p>I guess this could indeed be too specific to include in the standard library</p>",
        "id": 205686952,
        "sender_full_name": "Rafael Patronilo",
        "timestamp": 1596297415
    }
]