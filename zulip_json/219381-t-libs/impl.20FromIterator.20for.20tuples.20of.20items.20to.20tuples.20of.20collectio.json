[
    {
        "content": "<p>how controversial of a change would it be to add <code>FromIterator</code> impls for combinations of tuples</p>",
        "id": 210586226,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600472806
    },
    {
        "content": "<p>im thinking something like this</p>",
        "id": 210586229,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600472813
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"cp\">#![feature(extend_one)]</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">iter</span>::<span class=\"p\">{</span><span class=\"n\">once</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">FromIterator</span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Tuple</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">W</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">FromIterator</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Tuple</span><span class=\"o\">&lt;</span><span class=\"n\">V</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">W</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">V</span>: <span class=\"nb\">Default</span> <span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Extend</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">W</span>: <span class=\"nb\">Default</span> <span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Extend</span><span class=\"o\">&lt;</span><span class=\"n\">B</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">X</span>: <span class=\"nb\">Default</span> <span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Extend</span><span class=\"o\">&lt;</span><span class=\"n\">C</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">from_iter</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">IntoIterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"p\">)</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">(</span><span class=\"n\">iter</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">v</span>: <span class=\"nc\">V</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Default</span>::<span class=\"n\">default</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">w</span>: <span class=\"nc\">W</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Default</span>::<span class=\"n\">default</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"nc\">X</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Default</span>::<span class=\"n\">default</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">iter</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iter</span><span class=\"p\">.</span><span class=\"n\">into_iter</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">reservation</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">iter</span><span class=\"p\">.</span><span class=\"n\">size_hint</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">upper_bound</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">upper_bound</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"n\">lower_bound</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">lower_bound</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">extend_reserve</span><span class=\"p\">(</span><span class=\"n\">reservation</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">w</span><span class=\"p\">.</span><span class=\"n\">extend_reserve</span><span class=\"p\">(</span><span class=\"n\">reservation</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">extend_reserve</span><span class=\"p\">(</span><span class=\"n\">reservation</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">iter</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">once</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">w</span><span class=\"p\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">once</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">once</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"n\">Tuple</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">2.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">&quot;3&quot;</span><span class=\"p\">)];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">Tuple</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">)</span>: <span class=\"nc\">Tuple</span><span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">into_iter</span><span class=\"p\">().</span><span class=\"n\">collect</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 210586233,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600472818
    },
    {
        "content": "<p>Conceptually it seems reasonable.  I feel like there's some reluctance to add more macro-for-all-tuples-up-to-12 things, though.</p>\n<p>It does make the think that the whole FromIterator vs Default+Extend thing is unfortunate.  (See also <code>Iterator::partition</code>.)</p>",
        "id": 210587948,
        "sender_full_name": "scottmcm",
        "timestamp": 1600474688
    },
    {
        "content": "<p>yea, that made me sad when I ran into it</p>",
        "id": 210588166,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600475013
    },
    {
        "content": "<p>really feels like <code>Default + Extend</code> is what <code>FromIterator</code> should be</p>",
        "id": 210588176,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600475028
    },
    {
        "content": "<p>I have some prior art for rayon, at least for tuple pairs:</p>\n<ul>\n<li><a href=\"https://github.com/rayon-rs/rayon/pull/604\"><code>ParallelExtend for (A, B)</code></a></li>\n<li>(draft) <a href=\"https://github.com/rayon-rs/rayon/pull/802\"><code>FromParallelIterator for (A, B)</code></a></li>\n</ul>",
        "id": 210588224,
        "sender_full_name": "cuviper",
        "timestamp": 1600475051
    },
    {
        "content": "<p>oh cool!</p>",
        "id": 210588231,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600475073
    },
    {
        "content": "<p>this enables cool things like nested <code>unzip</code>, to any arbitrary level like <code>((A, B), (C, (D, E)))</code></p>",
        "id": 210588244,
        "sender_full_name": "cuviper",
        "timestamp": 1600475124
    },
    {
        "content": "<p>yw</p>",
        "id": 210588249,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600475134
    },
    {
        "content": "<p>YEA</p>",
        "id": 210588250,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600475135
    },
    {
        "content": "<p>gdi</p>",
        "id": 210588251,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600475137
    },
    {
        "content": "<p>yea*</p>",
        "id": 210588252,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600475138
    },
    {
        "content": "<p>that was the first thing I saw in the pr and i was like oh shit!</p>",
        "id": 210588294,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600475166
    },
    {
        "content": "<p>and an unzipping <code>collect</code> for <code>Result&lt;(A, B), E&gt;</code> is pretty neat too, I think</p>",
        "id": 210588306,
        "sender_full_name": "cuviper",
        "timestamp": 1600475187
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/219381-t-libs/topic/impl.20FromIterator.20for.20tuples.20of.20items.20to.20tuples.20of.20collectio/near/210587948\">said</a>:</p>\n<blockquote>\n<p>Conceptually it seems reasonable.  I feel like there's some reluctance to add more macro-for-all-tuples-up-to-12 things, though.</p>\n<p>It does make the think that the whole FromIterator vs Default+Extend thing is unfortunate.  (See also <code>Iterator::partition</code>.)</p>\n</blockquote>\n<p>I guess that menas we could work around the <code>up-to-12</code> things by only implementing it for (A, B) and making ppl nest the tuples :)</p>",
        "id": 210588312,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600475200
    },
    {
        "content": "<p>I was thinking that the other option here would be to call it <code>unzip</code> rather than <code>collect</code> -- which has the advantage that it could go in unstable</p>",
        "id": 210588313,
        "sender_full_name": "scottmcm",
        "timestamp": 1600475202
    },
    {
        "content": "<p>_not actually serious_</p>",
        "id": 210588319,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600475210
    },
    {
        "content": "<p>hmm</p>",
        "id": 210588336,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600475246
    },
    {
        "content": "<p>oh yea because you cant do unstable trait impls</p>",
        "id": 210588338,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600475253
    },
    {
        "content": "<p>so would you then just have <code>unzip</code> use <code>Default + Extend</code> as its bounds instead of <code>FromIterator</code>?</p>",
        "id": 210588345,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600475279
    },
    {
        "content": "<p>_wondering how this impl would prevent ppl from using it instead of collect when tuples aren't involved_</p>",
        "id": 210588390,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600475309
    },
    {
        "content": "<p>note, if it's not literally <code>FromIterator</code>, the <code>Result</code> case above won't work</p>",
        "id": 210588395,
        "sender_full_name": "cuviper",
        "timestamp": 1600475318
    },
    {
        "content": "<p>oh</p>",
        "id": 210588405,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600475339
    },
    {
        "content": "<p>well thats fine, unzip could use FromIterator and those impls could use Default + Extend like my example</p>",
        "id": 210588416,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600475364
    },
    {
        "content": "<p>Basically, I was thinking that since it can't delegate to <code>FromIterator</code> on the inner collections, then just having a separate method that doesn't mention <code>FromIterator</code> at all might be fine.  But as cuviper notes, that does preclude using the other <code>FromIterator</code>s with it....</p>\n<p>(Though personally I'm not a huge fan of that impl, since nobody can ever find it...)</p>",
        "id": 210588491,
        "sender_full_name": "scottmcm",
        "timestamp": 1600475447
    },
    {
        "content": "<p>IMO, adding an inherent <code>unzip</code> method to tuples is fine for unstable exploration, although it will be annoying to deal with lang items</p>",
        "id": 210588495,
        "sender_full_name": "cuviper",
        "timestamp": 1600475460
    },
    {
        "content": "<p>but ultimately I think it would be nicer to actually have the real <code>Extend</code> and <code>FromIterator</code></p>",
        "id": 210588508,
        "sender_full_name": "cuviper",
        "timestamp": 1600475489
    },
    {
        "content": "<p>I was thinking a method on <code>Iterator&lt;Item = (...)&gt;</code>, not an inherent on tuples.</p>",
        "id": 210588522,
        "sender_full_name": "scottmcm",
        "timestamp": 1600475518
    },
    {
        "content": "<p><code>Iterator::unzip</code> already exists</p>",
        "id": 210588577,
        "sender_full_name": "cuviper",
        "timestamp": 1600475535
    },
    {
        "content": "<p>do you mean like <code>unzip3</code>, <code>unzip4</code>, etc?</p>",
        "id": 210588636,
        "sender_full_name": "cuviper",
        "timestamp": 1600475624
    },
    {
        "content": "<p>the numbering wouldn't actually matter in practice right?</p>",
        "id": 210588694,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600475651
    },
    {
        "content": "<p>unless we artificially limited the item types on each fn</p>",
        "id": 210588703,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600475663
    },
    {
        "content": "<p>basically <code>unzip3</code> would have to be the <code>FromIterator</code> impl you'd do for a 3 tuple</p>",
        "id": 210588713,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600475686
    },
    {
        "content": "<p>and it just directly uses Extend and Default</p>",
        "id": 210588721,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600475696
    },
    {
        "content": "<p>don't like that idea</p>",
        "id": 210588739,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600475711
    },
    {
        "content": "<p>wait actually no i thikn i get it more</p>",
        "id": 210588811,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600475769
    },
    {
        "content": "<p>because if you did it ontop of FromIterator again youre right back at square one of it being instantly stable</p>",
        "id": 210588820,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600475781
    },
    {
        "content": "<p>the current <code>Iterator::unzip</code> just directly does a loop like your initial code here</p>",
        "id": 210588873,
        "sender_full_name": "cuviper",
        "timestamp": 1600475850
    },
    {
        "content": "<p>although with a <code>fold</code> instead of a <code>for</code> loop</p>",
        "id": 210588878,
        "sender_full_name": "cuviper",
        "timestamp": 1600475857
    },
    {
        "content": "<p>makes sense</p>",
        "id": 210588882,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600475864
    },
    {
        "content": "<p>I don't really think a bunch of new <code>unzipN</code> methods is the way to go, but I'm not sure what <span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> meant</p>",
        "id": 210588957,
        "sender_full_name": "cuviper",
        "timestamp": 1600475943
    },
    {
        "content": "<p>alternatively</p>",
        "id": 210589433,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600476688
    },
    {
        "content": "<p>we could implement <code>Default</code> and <code>Extend</code> for tuples and then add this impl for FromIterator</p>",
        "id": 210589436,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600476709
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">W</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">FromIterator</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Tuple</span><span class=\"o\">&lt;</span><span class=\"n\">V</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">W</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">V</span>: <span class=\"nb\">Default</span> <span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Extend</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">W</span>: <span class=\"nb\">Default</span> <span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Extend</span><span class=\"o\">&lt;</span><span class=\"n\">B</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">X</span>: <span class=\"nb\">Default</span> <span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Extend</span><span class=\"o\">&lt;</span><span class=\"n\">C</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">from_iter</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">IntoIterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"p\">)</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">(</span><span class=\"n\">iter</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">tuple</span>: <span class=\"nc\">Tuple</span><span class=\"o\">&lt;</span><span class=\"n\">V</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">W</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Default</span>::<span class=\"n\">default</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">tuple</span><span class=\"p\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">iter</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">tuple</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 210589440,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600476718
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Tuple</span><span class=\"o\">&lt;</span><span class=\"n\">V</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">W</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">V</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">W</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">W</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">Extend</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Tuple</span><span class=\"o\">&lt;</span><span class=\"n\">V</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">W</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">V</span>: <span class=\"nb\">Extend</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">W</span>: <span class=\"nb\">Extend</span><span class=\"o\">&lt;</span><span class=\"n\">B</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">X</span>: <span class=\"nb\">Extend</span><span class=\"o\">&lt;</span><span class=\"n\">C</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">extend</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">IntoIterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"p\">)</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">iter</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">iter</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iter</span><span class=\"p\">.</span><span class=\"n\">into_iter</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">reservation</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">iter</span><span class=\"p\">.</span><span class=\"n\">size_hint</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">upper_bound</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">upper_bound</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"n\">lower_bound</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">lower_bound</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"mf\">0.</span><span class=\"n\">extend_reserve</span><span class=\"p\">(</span><span class=\"n\">reservation</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"mf\">1.</span><span class=\"n\">extend_reserve</span><span class=\"p\">(</span><span class=\"n\">reservation</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"mf\">2.</span><span class=\"n\">extend_reserve</span><span class=\"p\">(</span><span class=\"n\">reservation</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"n\">iter</span><span class=\"p\">.</span><span class=\"n\">into_iter</span><span class=\"p\">().</span><span class=\"n\">fold</span><span class=\"p\">((),</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">values</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"mf\">0.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">once</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"mf\">1.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">once</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"mf\">2.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">once</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">.</span><span class=\"mi\">2</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">});</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">V</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">W</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">Default</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Tuple</span><span class=\"o\">&lt;</span><span class=\"n\">V</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">W</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">V</span>: <span class=\"nb\">Default</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">W</span>: <span class=\"nb\">Default</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">X</span>: <span class=\"nb\">Default</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">default</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Tuple</span><span class=\"p\">(</span><span class=\"nb\">Default</span>::<span class=\"n\">default</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"nb\">Default</span>::<span class=\"n\">default</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"nb\">Default</span>::<span class=\"n\">default</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 210589485,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600476744
    },
    {
        "content": "<p>this is even further from the \"allow experimentation via unstable\" goal, lol</p>",
        "id": 210589497,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600476776
    },
    {
        "content": "<p>Oh, right 12 new <code>unzipN</code> methods sounds terrible.  Apparently I should have thought that one through further :P</p>",
        "id": 210634310,
        "sender_full_name": "scottmcm",
        "timestamp": 1600548114
    },
    {
        "content": "<p>lol</p>",
        "id": 210634393,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600548213
    },
    {
        "content": "<p>so does that mean we're back at thinking this would have to be done via an instantly stable FromIterator impl?</p>",
        "id": 210634688,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600548617
    },
    {
        "content": "<p>and if so, do we think this change would need an RFC? is it likely to be accepted? is it worth pursueing?</p>",
        "id": 210634694,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600548643
    },
    {
        "content": "<p>It would get the <code>needs-fcp</code> label, but that doesn't necessarily mean an RFC -- I just got <a href=\"https://github.com/rust-lang/rust/issues/76310\">#76310</a> in without one, though that was following well-established patterns.</p>",
        "id": 210635109,
        "sender_full_name": "scottmcm",
        "timestamp": 1600549263
    },
    {
        "content": "<p>Hmm, coming at this from the other direction, if tuples are <code>FromIterator</code>, they should probably be <code>(Into)Iterator</code> too.</p>",
        "id": 210635138,
        "sender_full_name": "scottmcm",
        "timestamp": 1600549321
    },
    {
        "content": "<p>So maybe this starts to hit RFC territory?</p>\n<p>Presumably there's a reason that we can't <code>for (i, j) in (vec1, vec2)</code> today, and have to go through named methods?</p>",
        "id": 210635208,
        "sender_full_name": "scottmcm",
        "timestamp": 1600549391
    },
    {
        "content": "<p>Oh, no, that's probably because the \"what if the lengths don't match?\" behaviour question.  Which is a problem that <code>FromIterator</code> doesn't have...</p>",
        "id": 210635279,
        "sender_full_name": "scottmcm",
        "timestamp": 1600549486
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 210635281,
        "sender_full_name": "scottmcm",
        "timestamp": 1600549497
    },
    {
        "content": "<p>For different lengths, same answer as zip... and I did this in rayon too! <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span><br>\n<a href=\"https://github.com/rayon-rs/rayon/pull/711\">https://github.com/rayon-rs/rayon/pull/711</a></p>",
        "id": 210636218,
        "sender_full_name": "cuviper",
        "timestamp": 1600550888
    },
    {
        "content": "<p>For all these, I think the motivation was stronger in rayon because it's harder to do the parallel thing manually</p>",
        "id": 210636242,
        "sender_full_name": "cuviper",
        "timestamp": 1600550963
    },
    {
        "content": "<p>But, it would still be neat to see the same in <code>std</code></p>",
        "id": 210636304,
        "sender_full_name": "cuviper",
        "timestamp": 1600551019
    },
    {
        "content": "<p>it's really nice to have rayon as prior art here</p>",
        "id": 210648628,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600575620
    },
    {
        "content": "<p>For what it's worth, I recently reinvented <code>unzip</code> because I forgot it existed and didn't find it when searching in <code>std</code> and <code>itertools</code> docs.  The first thing I looked for was <code>impl FromIterator for (T, U)</code>.  So this proposal would definitely have helped me:<br>\n<a href=\"https://users.rust-lang.org/t/how-to-use-iterators-that-lead-to-two-collects/48985\">https://users.rust-lang.org/t/how-to-use-iterators-that-lead-to-two-collects/48985</a></p>",
        "id": 210775012,
        "sender_full_name": "Matt Brubeck",
        "timestamp": 1600710040
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> were you planning to try a PR for this? I think <code>IntoIterator</code>, <code>FromIterator</code>, and <code>Extend</code>are all viable for tuple pairs at least, acting as simple <code>zip</code> and <code>unzip</code>.</p>",
        "id": 213970044,
        "sender_full_name": "cuviper",
        "timestamp": 1603223019
    },
    {
        "content": "<p>if not, I'm willing to try for it myself</p>",
        "id": 213970063,
        "sender_full_name": "cuviper",
        "timestamp": 1603223027
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> if you're interested in doing pls do</p>",
        "id": 213972814,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603224438
    },
    {
        "content": "<p>I probably wouldn't get around to it for a while otherwise</p>",
        "id": 213972836,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603224450
    },
    {
        "content": "<p>Will this account for possibly in the future extending the impl to N-length tuples? I asked <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> whether this would be possible I think a year ago, and I believe the answer was that _in theory_ it may be possible someday.</p>\n<p>I think it'd be nice if this addition at least kept the option open to enable support for any-length tuples some day. I assume it does, but figured it's still worth a mention.</p>",
        "id": 214028318,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1603273163
    },
    {
        "content": "<p>You certainly can add separate impls for 3, 4, ...</p>",
        "id": 214067320,
        "sender_full_name": "cuviper",
        "timestamp": 1603294117
    },
    {
        "content": "<p>For truly <em>any</em> length, we would need variadic types in some form, but I don't see any reason why adding pairs now would block that later.</p>",
        "id": 214067561,
        "sender_full_name": "cuviper",
        "timestamp": 1603294209
    },
    {
        "content": "<p>Cool! That's what I was hoping the answer would be</p>",
        "id": 214078514,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1603298464
    },
    {
        "content": "<p>this reminds me I need to work on getting SIMD-vectors-as-arrays...</p>",
        "id": 214079137,
        "sender_full_name": "Jubilee",
        "timestamp": 1603298744
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> If they're all of the same type, wouldn't the final step make more sense w/</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">arr</span>: <span class=\"p\">[</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">into_iter</span><span class=\"p\">().</span><span class=\"n\">collect</span><span class=\"p\">();</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>Or is this specifically for cases where you know they aren't the same type</p>",
        "id": 214079765,
        "sender_full_name": "Jubilee",
        "timestamp": 1603299003
    },
    {
        "content": "<p>I think I'd prefer consistency of tuple-of-items to tuple-of-collections, and array to array</p>",
        "id": 214080304,
        "sender_full_name": "cuviper",
        "timestamp": 1603299215
    },
    {
        "content": "<p>I don't remember the exact context of this originally but I think we'd want support for when the types are different</p>",
        "id": 214080315,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1603299221
    },
    {
        "content": "<p>arrays may also be confusing if we get <code>FromIterator&lt;T&gt; for [T; N]</code> vs. <code>FromIterator&lt;[T; N]&gt; for [C; N] where C: FromIterator&lt;T&gt;</code></p>",
        "id": 214080357,
        "sender_full_name": "cuviper",
        "timestamp": 1603299241
    },
    {
        "content": "<p>yeaaaah</p>",
        "id": 214080459,
        "sender_full_name": "Jubilee",
        "timestamp": 1603299269
    },
    {
        "content": "<p>I did the <code>IntoIterator</code> bit first: <a href=\"https://github.com/rust-lang/rust/pull/78204\">https://github.com/rust-lang/rust/pull/78204</a></p>",
        "id": 214112856,
        "sender_full_name": "cuviper",
        "timestamp": 1603313390
    }
]