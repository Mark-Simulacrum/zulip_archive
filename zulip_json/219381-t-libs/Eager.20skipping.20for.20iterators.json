[
    {
        "content": "<p>I know that the normal answer to \"how do I skip N eagerly?\" is \"use <code>let _ = nth(N-1);</code>\", but seeing cuviper putting a comment about it in &lt;<a href=\"https://users.rust-lang.org/t/hide-beginning-of-vec/48274/3?u=scottmcm\">https://users.rust-lang.org/t/hide-beginning-of-vec/48274/3?u=scottmcm</a>&gt; because of its non-obviousness made me wish once again that we had a more readable and discoverable way of doing that.</p>\n<p><code>Skip</code> itself is a rather weird adapter, too.  It's the only one I can think of that becomes a pass-through as soon as you've read a single item from it.  So maybe there's an API in there that could be a reasonable addition if it's also a way to get the underlying iterator out of a <code>Skip</code>, not _just_ a different way to write <code>nth</code>?</p>\n<p>Here's a sketch of an idea:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">It</span>: <span class=\"nc\">FusedIterator</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Skip</span><span class=\"o\">&lt;</span><span class=\"n\">It</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">eagerly</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">It</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>Note the fused requirement: writing this made me realize that using <code>nth</code> as an eager skip can be a gotcha for unfused things (and there's no <code>must_use</code> to help).  It probably needs to be more like <code>.nth(N-1)?</code> instead to work well.</p>\n<p>That would simplify the URLO post's suggestion down to </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">into_iter</span><span class=\"p\">().</span><span class=\"n\">skip</span><span class=\"p\">(</span><span class=\"mi\">16</span><span class=\"p\">).</span><span class=\"n\">eagerly</span><span class=\"p\">()</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>Which seems interesting.</p>\n<p>Thoughts?  Suggestions?  Alternatives?  Dissents?</p>",
        "id": 209044788,
        "sender_full_name": "scottmcm",
        "timestamp": 1599179725
    },
    {
        "content": "<p>in a similar space, I see people trying to get <code>vec[0]</code> by value a lot (and don't care about the rest of the vec). currently the options are:</p>\n<ul>\n<li><code>vec.remove(0)</code>, which is expensive if the vec is large</li>\n<li><code>vec.swap_remove(0)</code>, which is not super easy to find and still copies the last element</li>\n<li><code>vec.into_iter().next()</code>, which is very difficult to find if you don't know iterators well</li>\n</ul>\n<p>I don't know if this needs its own method, but it would be nice to document it maybe</p>",
        "id": 209045693,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599180807
    },
    {
        "content": "<blockquote>\n<p><code>vec.swap_remove(0)</code>, which is not super easy to find and still copies the last element</p>\n</blockquote>\n<p>That should be possible to remove as a dead store, although IDK if LLVM is smart enough to do so.</p>",
        "id": 209046656,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1599182082
    },
    {
        "content": "<p>That (the <code>swap_remove</code> one) is probably particularly difficult for LLVM to know when there are Drop calls involved, especially if those have potential panic branches.</p>\n<p>To toss in another option that's probably good: <code>vec.truncate(1); vec.pop()</code>.</p>\n<p>But this is just more evidence that documenting it or having a method might be good...</p>",
        "id": 209047281,
        "sender_full_name": "scottmcm",
        "timestamp": 1599182958
    },
    {
        "content": "<p>yeah <code>truncate()</code> seems like it should generate less code for LLVM to optimize out</p>",
        "id": 209047896,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599183823
    },
    {
        "content": "<p>fewer calls through trait methods</p>",
        "id": 209047900,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599183828
    },
    {
        "content": "<p>There's <a href=\"https://docs.rs/itertools/0.9.0/itertools/trait.Itertools.html#method.dropping\">https://docs.rs/itertools/0.9.0/itertools/trait.Itertools.html#method.dropping</a></p>",
        "id": 209051275,
        "sender_full_name": "cuviper",
        "timestamp": 1599189310
    },
    {
        "content": "<p>But a method on <code>Skip</code> is interesting</p>",
        "id": 209051281,
        "sender_full_name": "cuviper",
        "timestamp": 1599189326
    },
    {
        "content": "<p>For anyone here from <a href=\"https://jyn514.github.io/2020/09/05/Rust-in-2021.html\">jyn514's blog post</a>, see also <a href=\"#narrow/stream/219381-t-libs/topic/APIs.20for.20getting.20stuff.20from.20a.20Vec.20by.20owned/near/209048053\">https://rust-lang.zulipchat.com/#narrow/stream/219381-t-libs/topic/APIs.20for.20getting.20stuff.20from.20a.20Vec.20by.20owned/near/209048053</a></p>",
        "id": 209254867,
        "sender_full_name": "scottmcm",
        "timestamp": 1599450750
    }
]