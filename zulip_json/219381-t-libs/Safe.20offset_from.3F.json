[
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html#method.offset_from\">https://doc.rust-lang.org/nightly/std/primitive.pointer.html#method.offset_from</a> has pretty steep safety requirements. Is it possible to build a safe API like it that works on slices and is fallible? (returns <code>None</code> if the parameter is not a sub-slice)</p>",
        "id": 246055839,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1626329818
    },
    {
        "content": "<p>In particular: how to check whether pointers are from the same allocated object, without the check itself invoking provenance daemons?</p>",
        "id": 246055947,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1626329942
    },
    {
        "content": "<p>You can't. It is a compiler concept, not something physically represented after compilation.</p>",
        "id": 246056753,
        "sender_full_name": "bjorn3",
        "timestamp": 1626330919
    },
    {
        "content": "<p>I ended up doing <code>usize</code> arithmetic without using <code>ptr::offset_from</code>. Does this look correct?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"k\">fn</span> <span class=\"nf\">address_range</span><span class=\"p\">(</span><span class=\"n\">slice</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">std</span>::<span class=\"n\">ops</span>::<span class=\"n\">RangeInclusive</span><span class=\"o\">&lt;</span><span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">slice</span><span class=\"p\">.</span><span class=\"n\">as_ptr</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">end</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">slice</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">start</span><span class=\"o\">..=</span><span class=\"n\">end</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">slice_addresses</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">address_range</span><span class=\"p\">(</span><span class=\"n\">slice</span><span class=\"p\">.</span><span class=\"n\">as_bytes</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">on_disk_addresses</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">address_range</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">dirstate_map</span><span class=\"p\">.</span><span class=\"n\">on_disk</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">on_disk_addresses</span><span class=\"p\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"n\">slice_addresses</span><span class=\"p\">.</span><span class=\"n\">start</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">on_disk_addresses</span><span class=\"p\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"n\">slice_addresses</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">slice_addresses</span><span class=\"p\">.</span><span class=\"n\">start</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">on_disk_addresses</span><span class=\"p\">.</span><span class=\"n\">start</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">offset_from_usize</span><span class=\"p\">(</span><span class=\"n\">offset</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">None</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 246059532,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1626333530
    },
    {
        "content": "<p>It matters what offset_from_usize is offsetting from. If it's working off <code>on_disk_address</code> then this seems right to me</p>",
        "id": 246061716,
        "sender_full_name": "nagisa",
        "timestamp": 1626335222
    },
    {
        "content": "<p>you will end up with a pointer with the <code>on_disk_address</code>'s provenance. And since that object is strict superset of <code>slice</code> you aren't at risk of making an invalid pointer.</p>",
        "id": 246061815,
        "sender_full_name": "nagisa",
        "timestamp": 1626335317
    },
    {
        "content": "<p>(Sorry I didnâ€™t remove the parts less relevant, <code>offset_from_usize</code> does not offset pointers but returns a <code>struct Offset([u8; 4])</code> for 32-bit big-endian without alignment, for writing in a binary file format)</p>",
        "id": 246066164,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1626338095
    },
    {
        "content": "<p>Why does <code>ptr::offset_from</code> have so much safety requirements compared to converting to <code>usize</code> and subtracting?</p>",
        "id": 246066521,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1626338307
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"219747\">Simon Sapin</span> <a href=\"#narrow/stream/219381-t-libs/topic/Safe.20offset_from.3F/near/246066521\">said</a>:</p>\n<blockquote>\n<p>Why does <code>ptr::offset_from</code> have so much safety requirements compared to converting to <code>usize</code> and subtracting?</p>\n</blockquote>\n<p>I'd expect the semantics are inherited from C. Part of requiring the offset to be divisible by <code>size_of::&lt;T&gt;()</code> is so the compiler can use fancy math to convert the division into a shift and/or multiplication.</p>",
        "id": 246072543,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1626342446
    },
    {
        "content": "<p>It preserves provenance of the object being offset from, which gives the compiler information about what the object ought to be.</p>",
        "id": 246076753,
        "sender_full_name": "nagisa",
        "timestamp": 1626345449
    },
    {
        "content": "<p>i.e. the operation of offsetting from a pointer to an object that compiler otherwise might not know anything about gives it useful information about what the object may be (e.g. its size)</p>",
        "id": 246076850,
        "sender_full_name": "nagisa",
        "timestamp": 1626345496
    },
    {
        "content": "<p>You can use <code>wrapping_offset</code> for a less strong variant.</p>",
        "id": 246076953,
        "sender_full_name": "nagisa",
        "timestamp": 1626345586
    },
    {
        "content": "<p>casting to an integer is the most flexible and most optimization defeating option.</p>",
        "id": 246077036,
        "sender_full_name": "nagisa",
        "timestamp": 1626345636
    },
    {
        "content": "<p>Ah, I guess we don't have a <code>wrapping_offset_from</code> <span aria-label=\"frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"frown\">:frown:</span></p>",
        "id": 246077107,
        "sender_full_name": "nagisa",
        "timestamp": 1626345719
    },
    {
        "content": "<p>There used to be, but it was deprecated a year and a bit ago: <a href=\"https://github.com/rust-lang/rust/pull/73580\">https://github.com/rust-lang/rust/pull/73580</a></p>",
        "id": 246627999,
        "sender_full_name": "scottmcm",
        "timestamp": 1626804462
    },
    {
        "content": "<p><code>offset_from</code> returns <code>isize</code>, not another pointer. What does preserving provenance even mean there?</p>",
        "id": 248378779,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1628096934
    },
    {
        "content": "<p>provenance is not a feature of a type, but of a value, but you are right, that returned <code>isize</code> has no provenance if used on two pointers with the same provenance, you need a pointer with provenance in order to obtain a real pointer again. Using two pointers with different provenance as arguments to <code>offset_from</code> is UB as we don't have the concept of values with two separate provenances, and thus any behaviour with such values is undefined</p>",
        "id": 248379334,
        "sender_full_name": "oli",
        "timestamp": 1628097213
    },
    {
        "content": "<p>Why is it useful to declare UB when <code>offset_from</code> arguments have different provenance, given that the return value does not have any provenance itself?</p>",
        "id": 248380591,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1628097787
    },
    {
        "content": "<p>the return value will have <em>two</em> provenances if you pass two args of different provenance, and we haven't defined what the meaning of two provenances is. There's probably more subtlety here, but this is as far as my understanding goes</p>",
        "id": 248385511,
        "sender_full_name": "oli",
        "timestamp": 1628100171
    },
    {
        "content": "<p>if you pass two arguments with the same provenance, the return value is indeed provenance-free</p>",
        "id": 248385550,
        "sender_full_name": "oli",
        "timestamp": 1628100194
    }
]