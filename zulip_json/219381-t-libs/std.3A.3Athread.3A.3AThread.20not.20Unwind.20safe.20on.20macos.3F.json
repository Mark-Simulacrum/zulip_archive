[
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=7db21b09b483dae9d53e83e9d92c7d07\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=7db21b09b483dae9d53e83e9d92c7d07</a> compiles fine on linux, but on macos:</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0277]: the type `UnsafeCell&lt;libc::unix::bsd::apple::pthread_cond_t&gt;` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n --&gt; src/main.rs:6:5\n  |\n6 |     safe(std::thread::current());\n  |     ^^^^ `UnsafeCell&lt;libc::unix::bsd::apple::pthread_cond_t&gt;` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n  |\n  = help: within `std::thread::Inner`, the trait `RefUnwindSafe` is not implemented for `UnsafeCell&lt;libc::unix::bsd::apple::pthread_cond_t&gt;`\n  = note: required because it appears within the type `std::sys::unix::condvar::Condvar`\n  = note: required because it appears within the type `*const std::sys::unix::condvar::Condvar`\n  = note: required because it appears within the type `Unique&lt;std::sys::unix::condvar::Condvar&gt;`\n  = note: required because it appears within the type `Box&lt;std::sys::unix::condvar::Condvar&gt;`\n  = note: required because it appears within the type `std::sys_common::condvar::Condvar`\n  = note: required because it appears within the type `Condvar`\n  = note: required because it appears within the type `std::sys_common::thread_parker::generic::Parker`\n  = note: required because it appears within the type `std::thread::Inner`\n  = note: required because of the requirements on the impl of `UnwindSafe` for `Arc&lt;std::thread::Inner&gt;`\n  = note: required because it appears within the type `Thread`\n</code></pre></div>\n<p>is this an oversight? Seems bad to have different behavior on different platforms without documenting it. I tested a couple previous stables and it doesnt seem to be a recent regression</p>",
        "id": 275528493,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1647444795
    },
    {
        "content": "<p>that looks like an oversight. quite possibly we should get rid of the 'unwind safe' traits entirely.</p>",
        "id": 275982086,
        "sender_full_name": "Mara",
        "timestamp": 1647802446
    },
    {
        "content": "<p>Most probably, particularly since they have nothing to do with the normal safe/unsafe distinction. (specifically: all types already <em>must</em> remain sound in the presence of unwinding, and UnwindSafe is just like \"also I'm pretty sure it's useful as well as sound\")</p>",
        "id": 276008368,
        "sender_full_name": "Lokathor",
        "timestamp": 1647841277
    },
    {
        "content": "<p>Previous discussion: <a href=\"https://internals.rust-lang.org/t/pre-rfc-deprecating-unwindsafe/15974\">https://internals.rust-lang.org/t/pre-rfc-deprecating-unwindsafe/15974</a></p>",
        "id": 276033921,
        "sender_full_name": "bjorn3",
        "timestamp": 1647860509
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310399\">Mara</span> <a href=\"#narrow/stream/219381-t-libs/topic/std.3A.3Athread.3A.3AThread.20not.20Unwind.20safe.20on.20macos.3F/near/275982086\">said</a>:</p>\n<blockquote>\n<p>that looks like an oversight. quite possibly we should get rid of the 'unwind safe' traits entirely.</p>\n</blockquote>\n<p>I agree</p>",
        "id": 276410814,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1648074941
    }
]