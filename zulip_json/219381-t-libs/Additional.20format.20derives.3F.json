[
    {
        "content": "<p>Is there any reason the standard library can't have additional derives for the other non-Display formatters (eg: Binary, UpperHex, etc)?</p>\n<p>Assuming all the fields of the whatever implement that formatter already, then it should work exactly like the Debug derive.</p>",
        "id": 227000074,
        "sender_full_name": "Lokathor",
        "timestamp": 1613756568
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> Yes, for the same reason there's no <code>#[derive(Display)]</code> either. UpperHex is for <code>{:X}</code>, not for <code>{:X?}</code>. Deriving it only makes sense for the debug version.</p>",
        "id": 227002127,
        "sender_full_name": "Mara",
        "timestamp": 1613757390
    },
    {
        "content": "<p>That doesn't actually explain at all why there can't be a derive for UpperHex.</p>",
        "id": 227002412,
        "sender_full_name": "Lokathor",
        "timestamp": 1613757486
    },
    {
        "content": "<p>like, so is the logic \"sometimes it might derive the wrong way to show the value\"? then don't use the derive. sometimes ParialEq is also wrong when derived, but that doesn't means we don't still have a derive for it that usually does work.</p>",
        "id": 227002557,
        "sender_full_name": "Lokathor",
        "timestamp": 1613757557
    },
    {
        "content": "<p>But what would the derive do? UpperHex is the equivalent of Display for hex, not the equivalent of Debug for hex. There's also no derive for Display, so I'm not sure what you're expecting here.</p>",
        "id": 227002895,
        "sender_full_name": "Mara",
        "timestamp": 1613757693
    },
    {
        "content": "<p>Note that <code>{:X?}</code> (debug hex) already works with <code>#[derive(Debug)]</code></p>",
        "id": 227002956,
        "sender_full_name": "Mara",
        "timestamp": 1613757715
    },
    {
        "content": "<p>i don't doubt you, but also had no idea, and don't even know how i would have known that based on the docs of the Formatter type</p>",
        "id": 227003339,
        "sender_full_name": "Lokathor",
        "timestamp": 1613757853
    },
    {
        "content": "<p>because the Formatter doesn't appear to have a method to see if you're supposed to format a number as hex</p>",
        "id": 227003402,
        "sender_full_name": "Lokathor",
        "timestamp": 1613757881
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/48584\">https://github.com/rust-lang/rust/issues/48584</a> seems like the now closed tracking issue, see the last comment</p>",
        "id": 227004325,
        "sender_full_name": "simulacrum",
        "timestamp": 1613758309
    },
    {
        "content": "<p>the last comment is a question from a year ago that no one ever replied to :3</p>",
        "id": 227004663,
        "sender_full_name": "Lokathor",
        "timestamp": 1613758467
    },
    {
        "content": "<p>Yeah, so those should be made public.</p>",
        "id": 227004793,
        "sender_full_name": "Lokathor",
        "timestamp": 1613758524
    },
    {
        "content": "<p>I mean I <em>also</em> think we should be able to derive all formatter styles too.</p>",
        "id": 227004963,
        "sender_full_name": "Lokathor",
        "timestamp": 1613758585
    },
    {
        "content": "<p>Hm, so what would <code>#[derive(Display)]</code> do?</p>",
        "id": 227005837,
        "sender_full_name": "Mara",
        "timestamp": 1613759020
    },
    {
        "content": "<p>It would do what Debug does, but if you don't think that's appropriate for showing to a user then you just don't derive, and you write it yourself.</p>",
        "id": 227006102,
        "sender_full_name": "Lokathor",
        "timestamp": 1613759139
    },
    {
        "content": "<p>you don't <em>have</em> to use a derive just because it exists for some people to use.</p>",
        "id": 227006150,
        "sender_full_name": "Lokathor",
        "timestamp": 1613759161
    },
    {
        "content": "<p>So it'd do what Debug does, but forward to Display for all members? That will give some weird results if you have fields that are a String or an Error or something, becuase those will be put in there unquoted, including newlines and whitespace and stuff.</p>",
        "id": 227006516,
        "sender_full_name": "Mara",
        "timestamp": 1613759349
    },
    {
        "content": "<p>yes, and if it does the wrong thing for your type you would just not use the derive and write it yourself.</p>",
        "id": 227006777,
        "sender_full_name": "Lokathor",
        "timestamp": 1613759467
    },
    {
        "content": "<p>which is no worse than currently</p>",
        "id": 227006801,
        "sender_full_name": "Lokathor",
        "timestamp": 1613759475
    },
    {
        "content": "<p>but if it does do the right thing for you already, then you just saved yourself some time</p>",
        "id": 227006834,
        "sender_full_name": "Lokathor",
        "timestamp": 1613759495
    },
    {
        "content": "<p>i can't think of any situation where the debug-style derived output would be useful or correct for Display. do you have an example?</p>",
        "id": 227007156,
        "sender_full_name": "Mara",
        "timestamp": 1613759616
    },
    {
        "content": "<p>I think the idea is that this is almost never the right choice, so adding the option is more likely to encourage misuse than add convenience</p>",
        "id": 227007158,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1613759618
    },
    {
        "content": "<p>I mean Debug is just \"you show this to a rust dev\" and Display is just \"you show this to a non-rust dev\", it's not like either of them are particularly suited to actual \"end users\" in the sense of non-programmers.</p>",
        "id": 227007165,
        "sender_full_name": "Lokathor",
        "timestamp": 1613759622
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/219381-t-libs/topic/Additional.20format.20derives.3F/near/227007165\">said</a>:</p>\n<blockquote>\n<p>I mean Debug is just \"you show this to a rust dev\" and Display is just \"you show this to a non-rust dev\", it's not like either of them are particularly suited to actual \"end users\" in the sense of non-programmers.</p>\n</blockquote>\n<p>I don't necessarily agree with this characterization of <code>Display</code></p>",
        "id": 227007298,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1613759667
    },
    {
        "content": "<p>depending on your application I think there are definitely cases where you'd want to show <code>Display</code> impls to end users</p>",
        "id": 227007362,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1613759707
    },
    {
        "content": "<p>and that this is what it is intended for</p>",
        "id": 227007393,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1613759718
    },
    {
        "content": "<blockquote>\n<p>Display is just \"you show this to a non-rust dev\"</p>\n</blockquote>\n<p><code>Display</code> is for things that are displayed in an obvious/canonical way. E.g. an ipv4 address being displayed as 1.2.3.4, or a string displayed as just its contents.</p>",
        "id": 227007419,
        "sender_full_name": "Mara",
        "timestamp": 1613759733
    },
    {
        "content": "<p>This is e.g. why Vec&lt;u32&gt; doesn't implement Display, but does implement Debug.</p>",
        "id": 227007588,
        "sender_full_name": "Mara",
        "timestamp": 1613759801
    },
    {
        "content": "<p>Yes but \"depending on your application\" is already flying in the face of the fact that the type creator picked the Display impl for you</p>",
        "id": 227007597,
        "sender_full_name": "Lokathor",
        "timestamp": 1613759803
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/219381-t-libs/topic/Additional.20format.20derives.3F/near/227006102\">said</a>:</p>\n<blockquote>\n<p>It would do what Debug does, but if you don't think that's appropriate for showing to a user then you just don't derive, and you write it yourself.</p>\n</blockquote>\n<p>I don't think this is appropriate -- I'd expect <code>derive(Display)</code> on a newtype to just forward to the inner <code>Display</code>, for example, not to call the inner things's <code>Debug</code>.</p>\n<p>(Now, a crate providing <code>derive(DisplayAsDebug)</code> or whatever seems fine, but that doesn't need to be <code>core</code>.)</p>",
        "id": 227007631,
        "sender_full_name": "scottmcm",
        "timestamp": 1613759825
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/219381-t-libs/topic/Additional.20format.20derives.3F/near/227007597\">said</a>:</p>\n<blockquote>\n<p>Yes but \"depending on your application\" is already flying in the face of the fact that the type creator picked the Display impl for you</p>\n</blockquote>\n<p>yea but that type creator is supposed to make the impl _for_ those applications that have end users viewing program values via the UI</p>",
        "id": 227007683,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1613759850
    },
    {
        "content": "<blockquote>\n<p>Yes but \"depending on your application\" is already flying in the face of the fact that the type creator picked the Display impl for you</p>\n</blockquote>\n<p>that's why Display implementations should only exist if there is one obvious way. such as for strings. and also why they don't exist for things like Vec or Result.</p>",
        "id": 227007807,
        "sender_full_name": "Mara",
        "timestamp": 1613759902
    },
    {
        "content": "<p>I don't care about that point and we'll clearly never see eye to eye about it</p>",
        "id": 227008436,
        "sender_full_name": "Lokathor",
        "timestamp": 1613760203
    },
    {
        "content": "<p>can we just fix the Formatter type so that it gives you all thr right info?</p>",
        "id": 227008462,
        "sender_full_name": "Lokathor",
        "timestamp": 1613760220
    },
    {
        "content": "<p>that rfc proposed an API for this: &lt;<a href=\"https://github.com/rust-lang/rfcs/blob/master/text/2226-fmt-debug-hex.md#formatter-api\">https://github.com/rust-lang/rfcs/blob/master/text/2226-fmt-debug-hex.md#formatter-api</a>&gt;</p>\n<p>but nobody has implemented it yet.</p>",
        "id": 227008837,
        "sender_full_name": "Mara",
        "timestamp": 1613760393
    },
    {
        "content": "<p>So this RFC is approved and just waiting on an implementation? I will find someone if so.</p>",
        "id": 227015983,
        "sender_full_name": "Lokathor",
        "timestamp": 1613763160
    },
    {
        "content": "<p>yes. but an implementation might be tricky, because .number_radix() should also return 16 in an UpperHex implementation for example. right now i can't think of a good place to do that that would still be efficient, but i haven't put much thought into it yet.</p>",
        "id": 227021761,
        "sender_full_name": "Mara",
        "timestamp": 1613765651
    },
    {
        "content": "<p>Apparently someone already did the PR and then skipped the one part I care about: <a href=\"https://github.com/rust-lang/rust/pull/48978\">https://github.com/rust-lang/rust/pull/48978</a></p>",
        "id": 227064393,
        "sender_full_name": "Lokathor",
        "timestamp": 1613794448
    },
    {
        "content": "<p>they did have a justified reason to skip on it, but still a bad turn of luck for me</p>",
        "id": 227064418,
        "sender_full_name": "Lokathor",
        "timestamp": 1613794479
    }
]