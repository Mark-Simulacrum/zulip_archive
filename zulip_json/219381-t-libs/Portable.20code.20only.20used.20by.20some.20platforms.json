[
    {
        "content": "<p>Placing code in <code>std::sys_common</code> that is portable but only used by some platforms leads to unused/dead code warnings. Adding e.g <code>cfg(any(unix, wasi))</code> doesn't work because then tidy complains because <code>cfg</code>'d code should go into <code>std::sys</code>.</p>\n<p>What's the right way to deal with this? <code>#[allow(dead_code)}</code> or a new cross platform  module under <code>std::sys</code>?</p>",
        "id": 231366535,
        "sender_full_name": "The 8472",
        "timestamp": 1616439958
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"330154\">@The 8472</span> hm. we already have cfgs in sys_common. maybe tidy missed those?</p>",
        "id": 231367097,
        "sender_full_name": "Mara",
        "timestamp": 1616440182
    },
    {
        "content": "<p>oh maybe it doesn't understand <code>cfg_if::cfg_if!</code> and accepts that in sys_common</p>",
        "id": 231367258,
        "sender_full_name": "Mara",
        "timestamp": 1616440237
    },
    {
        "content": "<p>Yeah, there are some exceptions</p>\n<div class=\"codehilite\"><pre><span></span><code>    // Integration test for platform-specific run-time feature detection:\n    &quot;library/std/tests/run-time-detect.rs&quot;,\n    &quot;library/std/src/net/test.rs&quot;,\n    &quot;library/std/src/net/addr&quot;,\n    &quot;library/std/src/net/udp&quot;,\n    &quot;library/std/src/sys_common/mod.rs&quot;,\n    &quot;library/std/src/sys_common/net.rs&quot;,\n    &quot;library/std/src/sys_common/backtrace.rs&quot;,\n    &quot;library/std/src/sys_common/remutex.rs&quot;,\n    &quot;library/std/src/sync/mutex.rs&quot;,\n</code></pre></div>\n<p>But I think they shouldn't be relied on... my addition to rwlock was probably in error.</p>",
        "id": 231367296,
        "sender_full_name": "The 8472",
        "timestamp": 1616440252
    },
    {
        "content": "<p>i think it's fine</p>",
        "id": 231367550,
        "sender_full_name": "Mara",
        "timestamp": 1616440364
    },
    {
        "content": "<p>Well, I wanted to add another one that's not on the exception list that's why I'm asking.</p>",
        "id": 231367635,
        "sender_full_name": "The 8472",
        "timestamp": 1616440403
    },
    {
        "content": "<p>I'll pepper it with <code>#[allow(dead_code)]</code> for now, let's see what the reviewers say.</p>",
        "id": 231367958,
        "sender_full_name": "The 8472",
        "timestamp": 1616440521
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"330154\">@The 8472</span> i'm fine with cfgs like those on StaticRWLock on new additions, even if that means adding another exception to tidy's list. the whole sys/sys_common/std split is pretty much non-existent anyway. any project towards splitting that will have much bigger issues to deal with than a few anti-dead_code cfgs.</p>",
        "id": 231368330,
        "sender_full_name": "Mara",
        "timestamp": 1616440660
    },
    {
        "content": "<p>and if you go for <code>allow(dead_code)</code>, please make that <code>cfg_attr(..., allow(dead_code))</code>, so we still detect it if code becomes unused on all platforms.</p>",
        "id": 231368419,
        "sender_full_name": "Mara",
        "timestamp": 1616440694
    },
    {
        "content": "<p>Great,  that makes the intent clearer</p>",
        "id": 231368718,
        "sender_full_name": "The 8472",
        "timestamp": 1616440794
    }
]