[
    {
        "content": "<p>Hi, the <a class=\"stream\" data-stream-id=\"257204\" href=\"/#narrow/stream/257204-project-error-handling\">#project-error-handling</a> is currently polishing the rough edges of the <code>Termination</code> trait and also looking at ways <code>ExitCode</code>s can interact with it. For now, we are waiting for <a href=\"https://github.com/rust-lang/rfcs/pull/2895\">Generic Member Access</a> to implement reporting <code>Error</code>s at the termination (apart from the <code>ExitCode</code>). The question is, how to approach this implementation from the official way? There is an <a href=\"https://github.com/rust-lang/rust/issues/43301\">RFC</a> for tracking the <code>Termination</code> trait stabilization - so we could just add the implementation to the GMA PR.</p>",
        "id": 227660898,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1614196435
    },
    {
        "content": "<p>For now the idea around <code>ExitCode</code>s is to return an arbitrary numeric value (which can be then used by the user to interpret it).</p>",
        "id": 227661104,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1614196536
    },
    {
        "content": "<p>Yay!  Exciting that <code>ExitCode</code> is finally getting some love.</p>",
        "id": 227674196,
        "sender_full_name": "scottmcm",
        "timestamp": 1614201399
    },
    {
        "content": "<p>:D</p>",
        "id": 227677506,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614202707
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204346\">@Ashley Mannix</span> could you help us come up with  a proper way of including our improvements and stabilizing it?</p>",
        "id": 228123702,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1614510645
    },
    {
        "content": "<p>I am currently working on tying the <code>Termination</code> with printing 'ExitCode's on program exit. I read various documents like <a href=\"https://internals.rust-lang.org/t/mini-pre-rfc-redesigning-process-exitstatus/5426/15\">pre-RFC</a> or <a href=\"https://github.com/rust-lang/project-error-handling/issues/7\">this issue</a>. <br>\nI like the existing pre-RFC simplicity, but I am afraid it is not enough and it may require much maintenance to sustain the proper error codes if some changes occur in the operating systems (especially other than the holy trio Windows/Unix/MacOs). I am curious about your ideas on this topic? Generally <a href=\"https://github.com/rust-lang/project-error-handling/issues/22#issuecomment-738270096\">this comment</a> is a good proposition of how may this look. There seemed to be more interest on the topic in the past, but now it seems to be stagnant <span aria-label=\"frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"frown\">:frown:</span></p>",
        "id": 230044828,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1615562004
    },
    {
        "content": "<p>I don't think we should be printing the exit code, just using it as the process exit code.</p>",
        "id": 230067208,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615569927
    },
    {
        "content": "<p>Right, so just returning and no printing. The errors should be printed upon exiting the process though, am I right?</p>",
        "id": 230073771,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1615572585
    },
    {
        "content": "<p>that's a decision made by the process running the program</p>",
        "id": 230074229,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1615572785
    },
    {
        "content": "<p>if it's bash, it'll by default print if the process exited due to a signal, but a bare exit status is also available</p>",
        "id": 230074272,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1615572807
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"344196\">@Jakub Duchniewicz</span> Do you mean the Error part of a Result?</p>",
        "id": 230079232,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615575041
    },
    {
        "content": "<p>That should be printed, as it currently is.</p>",
        "id": 230079241,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615575046
    },
    {
        "content": "<p>Yes</p>",
        "id": 230079323,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1615575081
    },
    {
        "content": "<p>It's purely ExitCode that shouldn't be printed; that should only be returned.</p>",
        "id": 230079550,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615575165
    },
    {
        "content": "<p>This part is quite unambiguous, but I would like to gather some opinions on having more <code>ExitCode</code>s and having them mapped to OS codes</p>",
        "id": 230079665,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1615575216
    },
    {
        "content": "<p>If <code>ExitCode</code> is going to be useful for this purpose, I don't think we should attempt to set any semantics other than \"0 is success, non-zero is failure, provide any non-zero value you like\".</p>",
        "id": 230082121,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615576229
    },
    {
        "content": "<p>People may need to implement an arbitrary exit-code convention.</p>",
        "id": 230082173,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615576253
    },
    {
        "content": "<p>Things like constants for the <code>sysexits.h</code> ones seem plausible, but I agree that people will need arbitrary ones.</p>\n<p>Even just being able to <code>return ExitCode(2)</code> from <code>main</code> instead of needing to call <code>exit</code> (and bypass drops) would be nice.</p>",
        "id": 230122119,
        "sender_full_name": "scottmcm",
        "timestamp": 1615597019
    },
    {
        "content": "<p>I think we should separate the os mappings issue from the rest of <code>Termination</code> stabilization</p>",
        "id": 230122198,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1615597088
    },
    {
        "content": "<p>like everyone else said, just being able to provide a specific exit code for a graceful exit is probably enough for most people's use cases, and until someone makes a proposal for mappings and constants they should be able to make a 3rd party crate that provides those same mappings</p>",
        "id": 230122226,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1615597147
    },
    {
        "content": "<p>my expectation is that we will just want to add a constructor for <code>ExitStatus</code> from arbitrary integers, and then we can leave the specialization with exit code extraction as part of the generic member access rfc for errors</p>",
        "id": 230122400,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1615597268
    },
    {
        "content": "<p>IIRC one of the questions for it last time was what type(s) it should use.  Since <code>exit</code> takes <code>int</code>, but <code>WEXITSTATUS</code> only gives the bottom 8 bits of that, but <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-getexitcodeprocess\">Windows preserves a whole <code>DWORD</code> (<code>u32</code>)</a>.</p>",
        "id": 230187118,
        "sender_full_name": "scottmcm",
        "timestamp": 1615667591
    },
    {
        "content": "<p>Yes, this is one of the issues with choosing a proper implementation</p>",
        "id": 230187649,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1615668227
    },
    {
        "content": "<p>So the small draft of changes in scope is <a href=\"https://gist.github.com/JDuchniewicz/c326357c0d0a0b0e4c89b44dd1e28d19\">here</a>. The remaining question is what should be the underlying value of <code>ExitCode</code> since Termination returns <code>i32</code> which is later translated to <code>isize</code> in <code>start</code> function</p>",
        "id": 230527285,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1615906813
    },
    {
        "content": "<p>Probably <span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> would know more about this topic and why it is <code>not isize</code> in the first place</p>",
        "id": 230527582,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1615906889
    },
    {
        "content": "<p>Is there a reason it's translated to isize?</p>",
        "id": 230527698,
        "sender_full_name": "Connor Horman",
        "timestamp": 1615906923
    },
    {
        "content": "<p>Exit codes are typically <code>int</code>s which generally equates to <code>i32</code>.</p>",
        "id": 230527869,
        "sender_full_name": "Connor Horman",
        "timestamp": 1615906972
    },
    {
        "content": "<p>(Which, yes, are used in different ways depending on the platform)</p>",
        "id": 230528006,
        "sender_full_name": "Connor Horman",
        "timestamp": 1615907016
    },
    {
        "content": "<p>that why it is even more interesting why they were set to <code>u8</code> in the first place</p>",
        "id": 230528586,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1615907188
    },
    {
        "content": "<p>probably because unices use only 255  of exit codes?</p>",
        "id": 230528674,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1615907221
    },
    {
        "content": "<p>but I doubt it</p>",
        "id": 230528697,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1615907227
    },
    {
        "content": "<p>That seems like a likely explanation, honestly.</p>",
        "id": 230538323,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615910326
    },
    {
        "content": "<p>Might also be that that's all we can portably count on.</p>",
        "id": 230538416,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615910356
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"344196\">Jakub Duchniewicz</span> <a href=\"#narrow/stream/219381-t-libs/topic/Termination.2FExit.20Status.20Stabilization/near/230527582\">said</a>:</p>\n<blockquote>\n<p>Probably <span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> would know more about this topic and why it is <code>not isize</code> in the first place</p>\n</blockquote>\n<p><a href=\"#narrow/stream/219381-t-libs/topic/Termination.2FExit.20Status.20Stabilization/near/230187118\">https://rust-lang.zulipchat.com/#narrow/stream/219381-t-libs/topic/Termination.2FExit.20Status.20Stabilization/near/230187118</a></p>\n<p>Originally posix was 0..=255, but now it's <code>c_int</code>, and on windows it's <code>DWORD</code> (<code>u32</code>), so it's not obvious what the correct type is.  (And then there's esoteric platforms where it's a string, or something.)</p>\n<p>But in general, the answer for <code>ExitCode</code> is that there wasn't really substantial design -- it was just tossing something together to get non-<code>()</code>-<code>main</code> stabilized.  Probably it's <code>i32</code> because there was an <a href=\"https://github.com/rust-lang/rust/pull/48497/files#diff-d28320a72819402338af92259522275ed5e735179368ca421704fbdd937cea07L1456\"><code>impl Termination for i32</code></a> and <code>ExitCode</code> was created to punt on the question of whether <code>i32</code> was the right type, or whether <em>any</em> integer type as a return from <code>main</code> was desirable.</p>",
        "id": 230553742,
        "sender_full_name": "scottmcm",
        "timestamp": 1615914843
    },
    {
        "content": "<p>so I guess we are ok with changing the underlying type of <code>ExitCode</code> to be <code>i32</code>?</p>",
        "id": 230555702,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1615915481
    },
    {
        "content": "<p>Do you mean of <code>start</code>?  The struct is <code>pub struct ExitCode(imp::ExitCode);</code>, which seems plausible, as it allows different types for different platforms...</p>",
        "id": 230556130,
        "sender_full_name": "scottmcm",
        "timestamp": 1615915617
    },
    {
        "content": "<p>Linux  <code>sys_exit</code> and <code>sys_exit_group</code> both mask <code>error_code&amp;0xff</code> in the kernel</p>",
        "id": 230558964,
        "sender_full_name": "cuviper",
        "timestamp": 1615916604
    },
    {
        "content": "<p>Worth noting, I <em>think</em> Fuchsia might actually use <code>u64</code> here?</p>",
        "id": 230559193,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615916684
    },
    {
        "content": "<p>That was mentioned on an unrelated PR.</p>",
        "id": 230559204,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615916690
    },
    {
        "content": "<p>So <code>i32</code> doesn't seem like a portable assumption.</p>",
        "id": 230559233,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615916701
    },
    {
        "content": "<p>Maybe <code>ExitCode: From&lt;u8&gt;</code> everywhere, with platform-specific constructors from other things?  (And just never expose the underlying field as <code>pub</code>.)</p>",
        "id": 230560684,
        "sender_full_name": "scottmcm",
        "timestamp": 1615917141
    },
    {
        "content": "<p>That sounds like the right answer, yeah.</p>",
        "id": 230563102,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615917945
    },
    {
        "content": "<p>Least-common-denominator portable API that'll cover most common cases, platform-specific API to use the full extent of the platform.</p>",
        "id": 230563210,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615917978
    },
    {
        "content": "<p>Yeah, I feel like the 90% (or more) case is just codes in 0-10.</p>",
        "id": 230563623,
        "sender_full_name": "scottmcm",
        "timestamp": 1615918126
    },
    {
        "content": "<p>i think i even saw a 13 recently <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span></p>",
        "id": 230563692,
        "sender_full_name": "Mara",
        "timestamp": 1615918155
    },
    {
        "content": "<p>13 is for SIGPIPE, signal(7) lists up to 31: <a href=\"https://man7.org/linux/man-pages/man7/signal.7.html\">https://man7.org/linux/man-pages/man7/signal.7.html</a></p>",
        "id": 230564755,
        "sender_full_name": "bstrie",
        "timestamp": 1615918555
    },
    {
        "content": "<p>signals are returned differently than just exit codes (although some shells might not display/handle them differently (?))</p>",
        "id": 230565053,
        "sender_full_name": "Mara",
        "timestamp": 1615918666
    },
    {
        "content": "<p>I just ran <code>sleep 1000</code> and then used <code>kill -13</code> on it, and the bash <code>$?</code>is 141 (i.e. 128+sig)</p>",
        "id": 230565200,
        "sender_full_name": "cuviper",
        "timestamp": 1615918721
    },
    {
        "content": "<p>but I don't remember if that's just a shell-ism</p>",
        "id": 230565259,
        "sender_full_name": "cuviper",
        "timestamp": 1615918757
    },
    {
        "content": "<p><code>WTERMSIG</code> uses separate bits than a normal exit code</p>",
        "id": 230565306,
        "sender_full_name": "cuviper",
        "timestamp": 1615918783
    },
    {
        "content": "<p>yeah that's just the shell. zsh does the same +128 thing for signals, but the kernel encodes it separately.</p>",
        "id": 230565599,
        "sender_full_name": "Mara",
        "timestamp": 1615918877
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/219381-t-libs/topic/Termination.2FExit.20Status.20Stabilization/near/230563623\">said</a>:</p>\n<blockquote>\n<p>Yeah, I feel like the 90% (or more) case is just codes in 0-10.</p>\n</blockquote>\n<p>There's also common usage of codes around 128 and codes around 255, for programs that want to pass through some other program's exit code but carve out a bit of space for their own errors.</p>",
        "id": 230571544,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615921267
    },
    {
        "content": "<p>But yeah, I think most portable programs will be happy using a <code>u8</code>, and only specific programs on non-UNIX platforms will need to return specific errors above 255.</p>",
        "id": 230571618,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615921308
    },
    {
        "content": "<p>In the <a href=\"https://internals.rust-lang.org/t/mini-pre-rfc-redesigning-process-exitstatus/5426/15\">pre-RFC</a> the difference between signals and codes is explained quite well. But AFAIK we will not be doing this distinction and just return whatever is in the <code>ExitCode</code> (assuming the user put something there).</p>",
        "id": 230573867,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1615922214
    },
    {
        "content": "<p>aha, here's where the discussion was hiding</p>",
        "id": 269793887,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643400115
    },
    {
        "content": "<p>So I'm spending today digging up everything I can on the current status of Termination so I can propose a path towards stabilization</p>",
        "id": 269794777,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643400505
    },
    {
        "content": "<p>I left some comments in the thread on <code>?</code>-in-main</p>",
        "id": 269794790,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643400514
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/43301#issuecomment-1024587145\">https://github.com/rust-lang/rust/issues/43301#issuecomment-1024587145</a></p>",
        "id": 269794815,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643400524
    },
    {
        "content": "<p>the main issues at the moment are the representation concerns mentioned here, and by association the return type of Termination, as well as the name of the Termination trait</p>",
        "id": 269794872,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643400546
    },
    {
        "content": "<p>a while back withoutboats suggested that the trait should be a Verb, and so should be renamed Terminate to be consistent with other trait names we export</p>",
        "id": 269794924,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643400576
    },
    {
        "content": "<p>other commenters suggested Exit</p>",
        "id": 269794938,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643400582
    },
    {
        "content": "<p>I was personally somewhat compelled by the argument that it should be <code>Exit</code> because exit has connotations of a graceful shutdown, where as terminate has connotations of an abrupt shutdown, and this trait is representing graceful shutdown which makes Exit the more appropriate name.</p>",
        "id": 269795109,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643400647
    },
    {
        "content": "<p>I also like the idea of making it a verb</p>",
        "id": 269795120,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643400652
    },
    {
        "content": "<p>I've nominated the issue for discussion in the next libs-api team meeting so we can quickly navigate the bikeshed on the name</p>",
        "id": 269795174,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643400680
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby [she/her]</span> So, I think it makes sense for it to be a verb if it actually performs that verb.</p>",
        "id": 269795184,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1643400682
    },
    {
        "content": "<p>But this trait doesn't represent a thing that exits. It represents a thing that reports a message, and then provides an exit code.</p>",
        "id": 269795219,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1643400702
    },
    {
        "content": "<p>though I think getting some of the bikeshed out ahead of time in this thread would be a good idea</p>",
        "id": 269795227,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643400705
    },
    {
        "content": "<p><code>std::process::exit</code> is questionably-graceful, though, since it doesn't run destructors.</p>\n<p>I don't know if that's relevant for the trait name, though.</p>",
        "id": 269795307,
        "sender_full_name": "scottmcm",
        "timestamp": 1643400726
    },
    {
        "content": "<p>I don't think it makes sense to <code>impl Exit for ThingWithAnI32</code>, for instance.</p>",
        "id": 269795308,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1643400726
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/219381-t-libs/topic/Termination.2FExit.20Status.20Stabilization/near/269795307\">said</a>:</p>\n<blockquote>\n<p><code>std::process::exit</code> is questionably-graceful, though, since it doesn't run destructors.</p>\n<p>I don't know if that's relevant for the trait name, though.</p>\n</blockquote>\n<p>another fair point</p>",
        "id": 269795325,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643400736
    },
    {
        "content": "<p>both of these concerns seem like compelling enough reasons to just leave it as Termination to me</p>",
        "id": 269795424,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643400789
    },
    {
        "content": "<p>also that causes less churn during stabilization for nightly users</p>",
        "id": 269795443,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643400800
    },
    {
        "content": "<p>(though I don't think that should be a factor in the decision making)</p>",
        "id": 269795461,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643400810
    },
    {
        "content": "<p>Regardless of the naming concern, I'm going to go ahead and update the return type to be <code>ExitCode</code>, since its pretty clear that this gives us the most flexibility going forward to solve platform specific concerns</p>",
        "id": 269795554,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643400844
    },
    {
        "content": "<p>And my feeling is we should go ahead with stabilizing Termination::report() -&gt; ExitCode, with a minimal stable API for exit code where we can only construct success and failure, then we can have a more focused design discussion about expanding the API of ExitCode</p>",
        "id": 269795652,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643400897
    },
    {
        "content": "<p>I do wonder if we should be interrogating the relationship between ExitCode and ExitStatus</p>",
        "id": 269797841,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643401715
    },
    {
        "content": "<p>or I guess, I want to have a clear story of what their relationship is and why we have both before we stabilize ExitCode</p>",
        "id": 269797877,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643401733
    },
    {
        "content": "<p>I know that ExitCode was introduced as a placeholder so I wouldn't be surprised if this is more about synthesizing a story rather than finding the historically planned one.</p>",
        "id": 269798130,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643401860
    },
    {
        "content": "<p>If we go the <code>ExitCode</code> route, then we're going to have all the same considerations regarding how to create an <code>ExitCode</code>, and as far as I can tell <code>Termination</code> will have almost no value until we do.</p>",
        "id": 269798572,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1643402083
    },
    {
        "content": "<p>The point of stabilizing <code>Termination</code> is to let people define their own impls, and much of the value of that is being able to have exit codes.</p>",
        "id": 269798601,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1643402099
    },
    {
        "content": "<p>So if we're not prepared to add <code>impl From&lt;i32&gt; for ExitCode</code> or <code>impl From&lt;u8&gt; for ExitCode</code>, or alternatively add impls in the standard library that internally generate ExitCode values (which seems even harder right now), then I think we shouldn't try to stabilize <code>Termination</code> yet.</p>",
        "id": 269798765,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1643402169
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/219381-t-libs/topic/Termination.2FExit.20Status.20Stabilization/near/269798601\">said</a>:</p>\n<blockquote>\n<p>The point of stabilizing <code>Termination</code> is to let people define their own impls, and much of the value of that is being able to have exit codes.</p>\n</blockquote>\n<p>related to this, if someone calls <code>std::process::exit</code> in <code>Termination::report</code>, how many destructors do we not run that would otherwise have been run?</p>",
        "id": 269799746,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643402653
    },
    {
        "content": "<p>would this affect things in statics?</p>",
        "id": 269799796,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643402675
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/219381-t-libs/topic/Termination.2FExit.20Status.20Stabilization/near/269798601\">said</a>:</p>\n<blockquote>\n<p>The point of stabilizing <code>Termination</code> is to let people define their own impls, and much of the value of that is being able to have exit codes.</p>\n</blockquote>\n<p>I do want to push back on the idea that Exit codes are the only value for Termination, it is also the point at which people would customize error reporting output for return from main</p>",
        "id": 269800007,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643402793
    },
    {
        "content": "<p>such as writing a custom Result that only implements Termination for E: Error instead of E: Debug, or something that colorizes the <code>Error: </code> part of the output or otherwise changes the header we put before error messages</p>",
        "id": 269800075,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643402838
    },
    {
        "content": "<p>Fair. It's not the <em>only</em> value. But I do think that it's sufficient value that we should settle the question beforehand.</p>",
        "id": 269800118,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1643402862
    },
    {
        "content": "<p>Rather than deferring it until we handle <code>ExitCode</code>.</p>",
        "id": 269800142,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1643402876
    },
    {
        "content": "<p>I'm sad that in the absence of specialization people <em>can't</em> write <code>impl Termination for Result&lt;(), MyError&gt;</code> or similar.</p>",
        "id": 269800250,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1643402920
    },
    {
        "content": "<p>yea</p>",
        "id": 269800283,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643402938
    },
    {
        "content": "<p>Though if we avoid adding any new impls, we could <code>impl Termination for Result&lt;OtherUnit, MyError&gt;</code>. :)</p>",
        "id": 269800336,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1643402963
    },
    {
        "content": "<p>I'm wondering if <code>std::error::Report</code> could be a short term answer for this</p>",
        "id": 269800453,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643403006
    },
    {
        "content": "<p>since we could do a specialization on that internally</p>",
        "id": 269800469,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643403014
    },
    {
        "content": "<p>I'm wondering how hard it would be to do a dynamic downcast attempt.</p>",
        "id": 269800517,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1643403051
    },
    {
        "content": "<p>lol</p>",
        "id": 269800544,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643403065
    },
    {
        "content": "<p>And make <code>impl Termination for Result&lt;(), E&gt;</code> automatically handle <code>E: Error</code> iff it implements <code>Error</code>.</p>",
        "id": 269800571,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1643403078
    },
    {
        "content": "<p>so far we're only working on adding trait upcasting right?</p>",
        "id": 269800574,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643403079
    },
    {
        "content": "<p>not trait downcasting</p>",
        "id": 269800578,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643403082
    },
    {
        "content": "<p>That's about implicit coercion, I think.</p>",
        "id": 269800612,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1643403097
    },
    {
        "content": "<p>I think we support explicit downcasting today.</p>",
        "id": 269800625,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1643403106
    },
    {
        "content": "<p>whatt</p>",
        "id": 269800642,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643403115
    },
    {
        "content": "<p>as in <code>&amp;dyn Debug -&gt; Option&lt;&amp;dyn Error&gt;</code>?</p>",
        "id": 269800744,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643403155
    },
    {
        "content": "<p>I <em>think</em> so?</p>",
        "id": 269800753,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1643403162
    },
    {
        "content": "<p>Checking...</p>",
        "id": 269800759,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1643403163
    },
    {
        "content": "<p>ty</p>",
        "id": 269800771,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643403170
    },
    {
        "content": "<p>So, I'm wondering if we can do this: <a href=\"https://docs.rs/anyhow/latest/src/anyhow/error.rs.html#487\">https://docs.rs/anyhow/latest/src/anyhow/error.rs.html#487</a></p>",
        "id": 269800837,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1643403210
    },
    {
        "content": "<p>The one potential issue is that, as far as I can tell, you can only do that if <code>'static</code>.</p>",
        "id": 269800875,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1643403235
    },
    {
        "content": "<p>But I don't see how you could usefully have a <em>return value from main</em> that has a non-static lifetime.</p>",
        "id": 269800923,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1643403250
    },
    {
        "content": "<p>I think the anyhow one only works because when you construct an error from a Display type it makes a new type that has a custom vtable for casting it back</p>",
        "id": 269800990,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643403300
    },
    {
        "content": "<p>like, that's concrete downcasting still</p>",
        "id": 269801130,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643403364
    },
    {
        "content": "<p>not downcasting to a trait object which would require knowing the concrete type in order to grab its error vtable</p>",
        "id": 269801161,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643403383
    },
    {
        "content": "<p>the compiler doesn't secretly implement vtables by having some place in static memory where they're all stored that we can look up based on the type in question, does it?</p>",
        "id": 269801252,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643403440
    },
    {
        "content": "<p>would be cool if we could do something like <code>fn(type_id, trait_id) -&gt; Option&lt;vtable_for_trait_from_type&gt;</code></p>",
        "id": 269801274,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643403467
    },
    {
        "content": "<p>also, do vtables always contain the type ID or is that only Any / Error / traits that opt into this via a virtual method that do?</p>",
        "id": 269801382,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643403525
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby [she/her]</span> <a href=\"#narrow/stream/219381-t-libs/topic/Termination.2FExit.20Status.20Stabilization/near/269797841\">said</a>:</p>\n<blockquote>\n<p>I do wonder if we should be interrogating the relationship between ExitCode and ExitStatus</p>\n</blockquote>\n<p><code>ExitStatus</code> has to deal with signals, iirc, so that forced the difference.  It's not clear to me what <code>fn main() -&gt; ExitStatus</code> should mean if it returns a signal value.</p>",
        "id": 269801760,
        "sender_full_name": "scottmcm",
        "timestamp": 1643403692
    },
    {
        "content": "<p><del>if it returns sigsegv we clearly must immediately dereference null</del></p>",
        "id": 269801862,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1643403732
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/219381-t-libs/topic/Termination.2FExit.20Status.20Stabilization/near/269801760\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby [she/her]</span> <a href=\"#narrow/stream/219381-t-libs/topic/Termination.2FExit.20Status.20Stabilization/near/269797841\">said</a>:</p>\n<blockquote>\n<p>I do wonder if we should be interrogating the relationship between ExitCode and ExitStatus</p>\n</blockquote>\n<p><code>ExitStatus</code> has to deal with signals, iirc, so that forced the difference.  It's not clear to me what <code>fn main() -&gt; ExitStatus</code> should mean if it returns a signal value.</p>\n</blockquote>\n<p>the IRLO thread made it seem like returning a signal would be somewhat nonsensical on most if not all platforms, so keeping it separate to make it clear that it has nothing to do with signals seems like a good start for justifying two separate types.</p>",
        "id": 269801988,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643403808
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/93442/\">https://github.com/rust-lang/rust/pull/93442/</a></p>",
        "id": 269802279,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643403958
    },
    {
        "content": "<p>I guess we can at least do <code>impl From&lt;ExitCode&gt; for ExitStatus</code>, and <code>impl TryFrom&lt;ExitStatus, Error = ExitedBySignalError&gt; for ExitCode</code>.</p>",
        "id": 269802406,
        "sender_full_name": "scottmcm",
        "timestamp": 1643404009
    },
    {
        "content": "<p>Another question, do we want to try to provide minimal consistent cross-platform API on ExitCode?</p>",
        "id": 269802660,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643404136
    },
    {
        "content": "<p>I think this is probably the biggest question when it comes to defining the shape of the ExitCode API</p>",
        "id": 269802700,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643404163
    },
    {
        "content": "<p>like, do we want to only expose the minimal API for constructing ExitCodes that will behave consistently on all platforms?</p>",
        "id": 269802752,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643404192
    },
    {
        "content": "<p>or do some extra bookkeeping under the hood when converting from ExitCode -&gt; the platform specific i32/whatever</p>",
        "id": 269802834,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643404222
    },
    {
        "content": "<p>That seems to be a major design consideration in the IRLO thread, so I can imagine us providing just <code>u8</code> construction for cross platform exit codes, plus some platform specific extension APIs for constructing richer platform specific ExitCodes</p>",
        "id": 269802980,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643404309
    },
    {
        "content": "<p>Could start with just <code>ExitCode::SUCCESS</code> and <code>ExitCode::FAILURE</code> (like C's <code>EXIT_SUCCESS</code> and <code>EXIT_FAILURE</code>) to get <code>Termination</code> unblocked -- that'd be enough for the basic \"I just want to use <code>Display</code> or <code>Error</code> instead of <code>Debug</code>\" uses of <code>Termination</code>.</p>",
        "id": 269803874,
        "sender_full_name": "scottmcm",
        "timestamp": 1643404703
    },
    {
        "content": "<p>I suggested that above but Josh pushed back above here: <a href=\"#narrow/stream/219381-t-libs/topic/Termination.2FExit.20Status.20Stabilization/near/269798601\">https://rust-lang.zulipchat.com/#narrow/stream/219381-t-libs/topic/Termination.2FExit.20Status.20Stabilization/near/269798601</a></p>",
        "id": 269804363,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643404931
    },
    {
        "content": "<p>Yeah, I feel like we need to actually decide where this is leading, rather than stabilizing part of it and deferring the hard part.</p>",
        "id": 269804401,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1643404954
    },
    {
        "content": "<p>We already had some issues because we stabilized part of it and now wish we could change that.</p>",
        "id": 269804426,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1643404969
    },
    {
        "content": "<p>I'd like to not repeat that.</p>",
        "id": 269804433,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1643404973
    },
    {
        "content": "<p>I still think we are leaving plenty of room to figure it out later, but I think we will have plenty of time to figure out the picture a bit better before we get anywhere near stabilization</p>",
        "id": 269804470,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643404991
    },
    {
        "content": "<p>so hopefully we can make this a moot point quickly</p>",
        "id": 269804495,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643405004
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby [she/her]</span> <a href=\"#narrow/stream/219381-t-libs/topic/Termination.2FExit.20Status.20Stabilization/near/269802752\">said</a>:</p>\n<blockquote>\n<p>like, do we want to only expose the minimal API for constructing ExitCodes that will behave consistently on all platforms?</p>\n</blockquote>\n<p>For my part, at least, I'd be happy with <code>impl From&lt;u8&gt; for ExitCode</code>. That's not necessarily 100% portable, but in practice if any platform didn't support it, it could just ignore it or translate into success/failure.</p>",
        "id": 269804517,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1643405018
    },
    {
        "content": "<p>so the biggest concern I know about already on that axis is this one from the IRLO thread</p>",
        "id": 269804618,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643405055
    },
    {
        "content": "<blockquote>\n<p>The Bourne shell further confuses the issue by mapping “signal” statuses onto 128 + signal number (i.e. if you observe the value 139 in $?, that could mean either exit code 139 or signal 11; there’s no way to tell). For this reason, good practice on Unix is to avoid using exit statuses above 127.</p>\n</blockquote>",
        "id": 269804636,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643405064
    },
    {
        "content": "<p>By bourne shell here I'm assuming they're referring specifically to <code>sh</code>, not <code>bash</code> or its newer decendents</p>",
        "id": 269804700,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643405097
    },
    {
        "content": "<p>is that correct?</p>",
        "id": 269804709,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643405100
    },
    {
        "content": "<p><del>brb, gotta go write a quick rfc for u7 literals</del></p>",
        "id": 269804788,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643405133
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby [she/her]</span> <a href=\"#narrow/stream/219381-t-libs/topic/Termination.2FExit.20Status.20Stabilization/near/269804700\">said</a>:</p>\n<blockquote>\n<p>By bourne shell here I'm assuming they're referring specifically to <code>sh</code>, not <code>bash</code> or its newer decendents</p>\n</blockquote>\n<p>No, I think that's true of bourne-compatible shells in general.</p>",
        "id": 269804805,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1643405143
    },
    {
        "content": "<p>Hmm, is this one of the places where <code>From</code> is confusing?  Should it be named <code>new</code> instead?  Or would you want platform-specific <code>new</code>s with different types?</p>",
        "id": 269804871,
        "sender_full_name": "scottmcm",
        "timestamp": 1643405166
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>~$ sleep 1000 ; echo $?\n[In another window: `killall -SEGV sleep`]\nSegmentation fault\n139\n</code></pre></div>",
        "id": 269804914,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1643405192
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/219381-t-libs/topic/Termination.2FExit.20Status.20Stabilization/near/269804805\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby [she/her]</span> <a href=\"#narrow/stream/219381-t-libs/topic/Termination.2FExit.20Status.20Stabilization/near/269804700\">said</a>:</p>\n<blockquote>\n<p>By bourne shell here I'm assuming they're referring specifically to <code>sh</code>, not <code>bash</code> or its newer decendents</p>\n</blockquote>\n<p>No, I think that's true of bourne-compatible shells in general.</p>\n</blockquote>\n<p>Then does this mean we should try to restrict the constructor to only work for <code>0-127</code>?</p>",
        "id": 269804918,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643405194
    },
    {
        "content": "<p>No, because you actually can exit with 0-255 in UNIX and it'll return that.</p>",
        "id": 269804952,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1643405212
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>~$ sh -c &#39;exit 180&#39; ; echo $?\n180\n</code></pre></div>",
        "id": 269804983,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1643405229
    },
    {
        "content": "<p>but like, why would someone want to return with a value &gt; 127 if its ambiguous?</p>",
        "id": 269804997,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643405237
    },
    {
        "content": "<p>is it possible to disambiguate?</p>",
        "id": 269805009,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643405243
    },
    {
        "content": "<p>Because it's not actually ambiguous in the UNIX API, only in shells.</p>",
        "id": 269805017,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1643405249
    },
    {
        "content": "<p>You can disambiguate from the wait status code.</p>",
        "id": 269805026,
        "sender_full_name": "Connor Horman",
        "timestamp": 1643405257
    },
    {
        "content": "<p>In the API, you can ask \"did this exit with a signal\".</p>",
        "id": 269805035,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1643405262
    },
    {
        "content": "<p>okay, so we say shells are fine, they made their own bed and they can disambiguate still if they need to</p>",
        "id": 269805119,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643405290
    },
    {
        "content": "<p>Yup.</p>",
        "id": 269805132,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1643405295
    },
    {
        "content": "<p>and we just go with a <code>u8</code> based constructor initially on <code>ExitCode</code></p>",
        "id": 269805142,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643405302
    },
    {
        "content": "<p>do you think that would be enough of a minimal API for stabilization?</p>",
        "id": 269805164,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643405317
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby [she/her]</span> <a href=\"#narrow/stream/219381-t-libs/topic/Termination.2FExit.20Status.20Stabilization/near/269804788\">said</a>:</p>\n<blockquote>\n<p><del>brb, gotta go write a quick rfc for u7 literals</del></p>\n</blockquote>\n<p>I'd love to have <code>u7</code> and <code>u31</code> and <code>usizeminusone</code>, TBH.  <code>usizeminusone</code> especially is the correct type for a whole bunch of things, because of the <code>GEP</code> restrictions, and having <code>u31: Into&lt;u32&gt; + Into&lt;i32&gt;</code> would also be nice.  Not to mention the niche advantages like why OCaml (iirc) uses <code>i63</code> as its \"normal\" integral type.</p>\n<p>But realistically that'll be best done as a smart const generic width type.</p>",
        "id": 269805202,
        "sender_full_name": "scottmcm",
        "timestamp": 1643405339
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby [she/her]</span> <a href=\"#narrow/stream/219381-t-libs/topic/Termination.2FExit.20Status.20Stabilization/near/269805164\">said</a>:</p>\n<blockquote>\n<p>do you think that would be enough of a minimal API for stabilization?</p>\n</blockquote>\n<p>I'd be happy to see that. We could potentially add a (sealed) <code>ExitCodeExt</code> on Windows that lets you exit with a wider range of values, but that doesn't have to be in the initial PR.</p>",
        "id": 269805241,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1643405368
    },
    {
        "content": "<p>llvmification</p>",
        "id": 269805248,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643405372
    },
    {
        "content": "<p>I'm genuinely sad that POSIX doesn't allow you to \"exit\" with an \"I died from this signal\" wait status.</p>",
        "id": 269805316,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1643405406
    },
    {
        "content": "<p>I have a real-world use case for that.</p>",
        "id": 269805332,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1643405415
    },
    {
        "content": "<p>What about wrapping a C interface that returns <code>int</code> like main. There should be a way to do that from Rust.</p>",
        "id": 269805334,
        "sender_full_name": "Connor Horman",
        "timestamp": 1643405417
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"257758\">@Connor Horman</span> As in, you're building Rust to embed into a C interface callable via a main-like function?</p>",
        "id": 269805418,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1643405466
    },
    {
        "content": "<p>And the expected way to provide an exit code is to return it from that interface?</p>",
        "id": 269805448,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1643405480
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"257758\">Connor Horman</span> <a href=\"#narrow/stream/219381-t-libs/topic/Termination.2FExit.20Status.20Stabilization/near/269805334\">said</a>:</p>\n<blockquote>\n<p>What about wrapping a C interface that returns <code>int</code> like main. There should be a way to do that from Rust.</p>\n</blockquote>\n<p>Can always call <code>std::process::exit</code> if you just need to return the same thing C would.</p>",
        "id": 269805459,
        "sender_full_name": "scottmcm",
        "timestamp": 1643405488
    },
    {
        "content": "<p>(How would <code>std::process::exit</code> be implemented in that context?)</p>",
        "id": 269805463,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1643405490
    },
    {
        "content": "<p>Yeah. And if you can get the benefits of just returning from main that would be good.</p>",
        "id": 269805480,
        "sender_full_name": "Connor Horman",
        "timestamp": 1643405495
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/219381-t-libs/topic/Termination.2FExit.20Status.20Stabilization/near/269805241\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby [she/her]</span> <a href=\"#narrow/stream/219381-t-libs/topic/Termination.2FExit.20Status.20Stabilization/near/269805164\">said</a>:</p>\n<blockquote>\n<p>do you think that would be enough of a minimal API for stabilization?</p>\n</blockquote>\n<p>I'd be happy to see that. We could potentially add a (sealed) <code>ExitCodeExt</code> on Windows that lets you exit with a wider range of values, but that doesn't have to be in the initial PR.</p>\n</blockquote>\n<p>sounds good, I'll add that as a separate PR, gonna start with just a <code>new</code> inherent method and we can discuss adding a <code>From</code> impl separately</p>",
        "id": 269805499,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643405508
    },
    {
        "content": "<p>Or, no. The other way arround</p>",
        "id": 269805501,
        "sender_full_name": "Connor Horman",
        "timestamp": 1643405509
    },
    {
        "content": "<p>Calling a C function that looks like main (something like SDL_main).</p>",
        "id": 269805568,
        "sender_full_name": "Connor Horman",
        "timestamp": 1643405533
    },
    {
        "content": "<p>Having the ability to do this while also cleaning up local destructors would be nice (without having to do the trampoline thing you currently already do).</p>",
        "id": 269805624,
        "sender_full_name": "Connor Horman",
        "timestamp": 1643405559
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/219381-t-libs/topic/Termination.2FExit.20Status.20Stabilization/near/269805332\">said</a>:</p>\n<blockquote>\n<p>I have a real-world use case for that.</p>\n</blockquote>\n<p>Assuming no other threads, and the signal has default action of Terminate, <code>signal(signo; SIG_DFL); raise(signo);</code> works for this.</p>",
        "id": 269805691,
        "sender_full_name": "Connor Horman",
        "timestamp": 1643405599
    },
    {
        "content": "<p>Would it be tolerable for <code>impl Termination for ExitStatus</code> to re-raise a signal?</p>\n<p>(I don't really know anything about signals)</p>",
        "id": 269805823,
        "sender_full_name": "scottmcm",
        "timestamp": 1643405652
    },
    {
        "content": "<p>It would be a problem if a signal handler was installed for the signal, or the signal was ignored.</p>",
        "id": 269805895,
        "sender_full_name": "Connor Horman",
        "timestamp": 1643405696
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"257758\">Connor Horman</span> <a href=\"#narrow/stream/219381-t-libs/topic/Termination.2FExit.20Status.20Stabilization/near/269805691\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/219381-t-libs/topic/Termination.2FExit.20Status.20Stabilization/near/269805332\">said</a>:</p>\n<blockquote>\n<p>I have a real-world use case for that.</p>\n</blockquote>\n<p>Assuming no other threads, and the signal has default action of Terminate, <code>signal(signo; SIG_DFL); raise(signo);</code> works for this.</p>\n</blockquote>\n<p>Yeah, I could do that, it's just not ideal. And in particular, I don't actually want to dump core for signals whose default termination dumps core.</p>",
        "id": 269805963,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1643405742
    },
    {
        "content": "<p>Yeah, plus the free race condition in a multithreaded program.</p>",
        "id": 269806279,
        "sender_full_name": "Connor Horman",
        "timestamp": 1643405893
    },
    {
        "content": "<p>Hmm, actually one argument against using <code>new</code> instead of <code>from</code> is that <code>from</code> can at least be effectively overloaded as we add more ways to construct, if we make <code>new</code> take a <code>u8</code> then any other constructors will feel decidedly second class</p>",
        "id": 269806300,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643405904
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"257758\">@Connor Horman</span> Fortunately I'm not multithreaded at the point where I'm exiting.</p>",
        "id": 269806312,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1643405915
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby [she/her]</span> Yeah, agreed.</p>",
        "id": 269806355,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1643405935
    },
    {
        "content": "<p>That was my rationale for <code>From</code>.</p>",
        "id": 269806365,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1643405939
    },
    {
        "content": "<p>yea, I just always feel like <code>From</code> is spooky because of overlap bullshit I've run into in error handling land</p>",
        "id": 269806393,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643405966
    },
    {
        "content": "<p>so I'm always a bit more cautious adding trait methods vs inherent methods</p>",
        "id": 269806402,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643405976
    },
    {
        "content": "<p>but I cant see how that would become an issue here</p>",
        "id": 269806414,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643405984
    },
    {
        "content": "<p>so fuck it, doing <code>From</code></p>",
        "id": 269806428,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643405991
    },
    {
        "content": "<p>And my \"would TryFrom the other way be reasonable\" heuristic is fine, I think, so I guess <code>From</code> is fine.</p>",
        "id": 269807549,
        "sender_full_name": "scottmcm",
        "timestamp": 1643406614
    },
    {
        "content": "<p>(Albeit perhaps a bit weird if the type itself collapses to bool, instead of only doing that in<code> Termination</code>.)</p>",
        "id": 269807595,
        "sender_full_name": "scottmcm",
        "timestamp": 1643406644
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/219381-t-libs/topic/Termination.2FExit.20Status.20Stabilization/near/269807595\">said</a>:</p>\n<blockquote>\n<p>(Albeit perhaps a bit weird if the type itself collapses to bool, instead of only doing that in<code> Termination</code>.)</p>\n</blockquote>\n<p>the <code>unsupported</code> imp module does only store a bool internally</p>",
        "id": 269807695,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643406702
    },
    {
        "content": "<p>not sure if that's what you meant by collapsing to a bool</p>",
        "id": 269807744,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643406719
    },
    {
        "content": "<p>but we wouldn't be able to round trip a u8 thru ExitCode on wasm I'm guessing?</p>",
        "id": 269807802,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643406732
    },
    {
        "content": "<p>not sure what other platforms fall under <code>unsupported</code></p>",
        "id": 269807822,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643406742
    },
    {
        "content": "<p>Related to the <code>From&lt;u8&gt;</code> impl and the test output when the code isn't 0, do we support any platforms where <code>ExitCode</code> isn't 0 / do we want to maintain the abstraction that <code>ExitCode::SUCCESS</code> isn't necessarily a 0?</p>",
        "id": 269808257,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643406971
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/std/process/struct.ExitStatus.html#method.success\">https://doc.rust-lang.org/std/process/struct.ExitStatus.html#method.success</a> defines success to be <code>0</code>, FWIW</p>",
        "id": 269808475,
        "sender_full_name": "scottmcm",
        "timestamp": 1643407099
    },
    {
        "content": "<p>Which platform only supports <code>exit(u8)</code>?</p>",
        "id": 269808503,
        "sender_full_name": "The 8472",
        "timestamp": 1643407122
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330154\">The 8472</span> <a href=\"#narrow/stream/219381-t-libs/topic/Termination.2FExit.20Status.20Stabilization/near/269808503\">said</a>:</p>\n<blockquote>\n<p>Which platform only supports <code>exit(u8)</code>?</p>\n</blockquote>\n<p>various unix platforms I think</p>",
        "id": 269808533,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643407143
    },
    {
        "content": "<p><a href=\"https://internals.rust-lang.org/t/mini-pre-rfc-redesigning-process-exitstatus/5426\">https://internals.rust-lang.org/t/mini-pre-rfc-redesigning-process-exitstatus/5426</a> has a detailed rundown</p>",
        "id": 269808551,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643407152
    },
    {
        "content": "<p>The docs on <code>exit</code> also mention that the value is masked to just the lower 8 bits on Linux</p>",
        "id": 269808694,
        "sender_full_name": "cuviper",
        "timestamp": 1643407208
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/219381-t-libs/topic/Termination.2FExit.20Status.20Stabilization/near/269808475\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://doc.rust-lang.org/std/process/struct.ExitStatus.html#method.success\">https://doc.rust-lang.org/std/process/struct.ExitStatus.html#method.success</a> defines success to be <code>0</code>, FWIW</p>\n</blockquote>\n<p>hmm, then maybe it's okay to just codify that everywhere as a language level requirement for our exit codes, and if we ever run into a platform that violates that we can do the mapping in the runtime after we've returned the ExitCode</p>",
        "id": 269808733,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643407221
    },
    {
        "content": "<p>If I understand that correctly they all take an int (i32), just some can't return it to the parent.</p>",
        "id": 269808935,
        "sender_full_name": "The 8472",
        "timestamp": 1643407318
    },
    {
        "content": "<p>what's the practical difference?</p>",
        "id": 269809015,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643407354
    },
    {
        "content": "<p>So I think it should be fine to call exit with i32 and then when the systems improve their posix-compliance also report that in the status of a child</p>",
        "id": 269809077,
        "sender_full_name": "The 8472",
        "timestamp": 1643407395
    },
    {
        "content": "<p>Why should we prefer to just expose i32 directly rather than trying to push users towards the minimal subset that is mostly cross platform with platform specific extension APIs for constructing from i32 / u32 or w/e for those platforms?</p>",
        "id": 269809284,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643407504
    },
    {
        "content": "<p>I don't understand what you're saying we should be doing or what the justification is <span class=\"user-mention\" data-user-id=\"330154\">@The 8472</span></p>",
        "id": 269809321,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643407527
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby [she/her]</span> <a href=\"#narrow/stream/219381-t-libs/topic/Termination.2FExit.20Status.20Stabilization/near/269809284\">said</a>:</p>\n<blockquote>\n<p>Why should we prefer to just expose i32 directly rather than trying to push users towards the minimal subset that is mostly cross platform with platform specific extension APIs for constructing from i32 / u32 or w/e for those platforms?</p>\n</blockquote>\n<p>In this I'm guessing you mean we should just impl <code>From&lt;i32&gt; for ExitStatus</code> rather than <code>From&lt;u8&gt;</code>, is that accurate?</p>",
        "id": 269809371,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643407560
    },
    {
        "content": "<p>yeah</p>",
        "id": 269809426,
        "sender_full_name": "The 8472",
        "timestamp": 1643407574
    },
    {
        "content": "<p>needs fewer cfg's</p>",
        "id": 269809443,
        "sender_full_name": "The 8472",
        "timestamp": 1643407587
    },
    {
        "content": "<p>can you give me a rough example of when you'd want to use the i32 one and what the equivalent cfg'ed version would look like?</p>",
        "id": 269809501,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643407630
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/93445\">https://github.com/rust-lang/rust/pull/93445</a></p>",
        "id": 269809940,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643407906
    },
    {
        "content": "<p>Well, since it can immediately be used as Termination I don't have a concrete use, but, maybe forwarding it over IPC or something? If the From impls were platform-specific then you'd need cfgs to forward 32bit error codes on windows and 8bit ones on unix.</p>",
        "id": 269810124,
        "sender_full_name": "The 8472",
        "timestamp": 1643408017
    },
    {
        "content": "<p>once those two PRs I've posted have landed I'll open a stabilization PR for termination which we can use for the remaining discussion leading up to stabilization rather than the <code>?</code>-in-main tracking issue</p>",
        "id": 269810131,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643408024
    },
    {
        "content": "<p>But since exit() already takes 32bit values that doesn't seem necessary. Getting the full 32bits out on the other side is a separate problem.</p>",
        "id": 269810211,
        "sender_full_name": "The 8472",
        "timestamp": 1643408056
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330154\">The 8472</span> <a href=\"#narrow/stream/219381-t-libs/topic/Termination.2FExit.20Status.20Stabilization/near/269810124\">said</a>:</p>\n<blockquote>\n<p>Well, since it can immediately be used as Termination I don't have a concrete use, but, maybe forwarding it over IPC or something? If the From impls were platform-specific then you'd need cfgs to forward 32bit error codes on windows and 8bit ones on unix.</p>\n</blockquote>\n<p>You wouldn't need <code>cfg</code>s for fowarding, if the API you're forwarding from can give you an <code>ExitCode</code>. And if it can't, you're calling a platform-specific API anyway.</p>",
        "id": 269810232,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1643408073
    },
    {
        "content": "<p>See the IPC part. Sending it over a socket for example.</p>",
        "id": 269810294,
        "sender_full_name": "The 8472",
        "timestamp": 1643408108
    },
    {
        "content": "<p>okay but, independent of this specific question, because we're using <code>From</code> for the <code>u8</code> we can easily add <code>From&lt;i32&gt;</code> in  the future if we have motivating examples justifying it</p>",
        "id": 269810430,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643408145
    },
    {
        "content": "<p>so <span class=\"user-mention\" data-user-id=\"330154\">@The 8472</span> is it fair to assume you'd be okay with just stabilizing the <code>From&lt;u8&gt;</code> initially?</p>",
        "id": 269810555,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643408165
    },
    {
        "content": "<blockquote>\n<p>related to this, if someone calls <code>std::process::exit</code> in <code>Termination::report</code>, how many destructors do we not run that would otherwise have been run?</p>\n</blockquote>\n<p>The entire call stack.</p>\n<blockquote>\n<p>would this affect things in statics?</p>\n</blockquote>\n<p>static things by definition \"live until the end of the program\". In other words, they don't drop because if they did there would be a moment in the program when they aren't alive anymore.</p>",
        "id": 269810617,
        "sender_full_name": "Lokathor",
        "timestamp": 1643408177
    },
    {
        "content": "<p><code>The entire call stack.</code> but by the time you've returned from main you've already taken down the entire callstack, right?</p>",
        "id": 269810888,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643408235
    },
    {
        "content": "<p>also dang, do we really _never_ call drops on statics? I know we don't in some cases because it's fucked up flushing some tracing subscriber layers I've worked on, but I couldn't remember if it was an always thing or only on certain exits</p>",
        "id": 269811008,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643408291
    },
    {
        "content": "<p>yeah if you exit from \"outside of main\" then the rest of the program would by definition already be dealt with.</p>\n<p>however where that would be logically doesn't entirely make sense because right now rust specifically doesn't have a life before main so there's no place for main to return to. So you'd have to define that</p>",
        "id": 269811231,
        "sender_full_name": "Lokathor",
        "timestamp": 1643408411
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby [she/her]</span> I guess it's ok to avoid surprises about truncation</p>",
        "id": 269811378,
        "sender_full_name": "The 8472",
        "timestamp": 1643408490
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/219381-t-libs/topic/Termination.2FExit.20Status.20Stabilization/near/269811231\">said</a>:</p>\n<blockquote>\n<p>yeah if you exit from \"outside of main\" then the rest of the program would by definition already be dealt with.</p>\n<p>however where that would be logically doesn't entirely make sense because right now rust specifically doesn't have a life before main so there's no place for main to return to. So you'd have to define that</p>\n</blockquote>\n<p>In practice we do have life after main though through stable <code>?</code> in main: <a href=\"https://github.com/rust-lang/rust/pull/93442/files#diff-4c47313bf04136516af411c803a91862020d8dbc02afdc9a6653c6d7e4709f7bR145\">https://github.com/rust-lang/rust/pull/93442/files#diff-4c47313bf04136516af411c803a91862020d8dbc02afdc9a6653c6d7e4709f7bR145</a></p>",
        "id": 269811540,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643408579
    },
    {
        "content": "<p>Like, the only time calling <code>std::process::exit</code> in <code>Termination</code> would ever potentially not happen after main is if someone calls <code>Termination::report</code> manually in their own code</p>",
        "id": 269811604,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643408627
    },
    {
        "content": "<p>and I'm not sure we should really be overly concerned with that potential avenue of misuse(is it even?)</p>",
        "id": 269811703,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643408667
    },
    {
        "content": "<p>it would be interesting if we had a method you could implement but never call</p>",
        "id": 269811758,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643408699
    },
    {
        "content": "<p>if the reporting just prints and exits that's fine  anyone can already do that</p>",
        "id": 269811762,
        "sender_full_name": "Lokathor",
        "timestamp": 1643408702
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/219381-t-libs/topic/Termination.2FExit.20Status.20Stabilization/near/269811762\">said</a>:</p>\n<blockquote>\n<p>if the reporting just prints and exits that's fine  anyone can already do that</p>\n</blockquote>\n<p>I think that's what's being discussed</p>",
        "id": 269811787,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643408716
    },
    {
        "content": "<p>I asked that question because I was trying to imply that maybe it would be okay to stabilize just SUCCESS and FAILURE and push people towards calling <code>exit</code> in <code>Termination</code> when they need more specific exit codes.</p>",
        "id": 269811850,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643408760
    },
    {
        "content": "<p>ah, right. yes that's a good plan</p>",
        "id": 269811902,
        "sender_full_name": "Lokathor",
        "timestamp": 1643408778
    },
    {
        "content": "<p>but we've since approached a consensus on adding From&lt;u8&gt; so there's even less need for exit in Termination</p>",
        "id": 269811916,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643408789
    },
    {
        "content": "<p>how would any of this work in the presence of the start attribute for a custom entry point? currently this is nightly only and largely forgotten about, but Some Day (tm) we should get back to it</p>",
        "id": 269812150,
        "sender_full_name": "Lokathor",
        "timestamp": 1643408932
    },
    {
        "content": "<p>it's probably best to say that the std library runtime will print and exit, but that other runtimes can just do other things</p>",
        "id": 269812391,
        "sender_full_name": "Lokathor",
        "timestamp": 1643409082
    },
    {
        "content": "<p>Sounds good, do you want to open a PR to add a note related to that to the docs on Termination?</p>",
        "id": 269812618,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643409187
    },
    {
        "content": "<p>or open an issue requesting the change</p>",
        "id": 269812653,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643409208
    },
    {
        "content": "<p>Also, do you feel like this should be a blocker for stabilization? (my guess is no)</p>",
        "id": 269812763,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643409257
    },
    {
        "content": "<p>i don't think it blocks, no. it's more like just a clarification</p>",
        "id": 269812956,
        "sender_full_name": "Lokathor",
        "timestamp": 1643409383
    },
    {
        "content": "<p>i could open an issue later</p>",
        "id": 269812966,
        "sender_full_name": "Lokathor",
        "timestamp": 1643409392
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/219381-t-libs/topic/Termination.2FExit.20Status.20Stabilization/near/269812966\">said</a>:</p>\n<blockquote>\n<p>i could open an issue later</p>\n</blockquote>\n<p>thank you!</p>",
        "id": 269813188,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643409558
    },
    {
        "content": "<p>can anyone tell what the hell broke here? <a href=\"https://github.com/rust-lang/rust/pull/93442#issuecomment-1024660532\">https://github.com/rust-lang/rust/pull/93442#issuecomment-1024660532</a></p>",
        "id": 269813206,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643409576
    },
    {
        "content": "<p>confused why mir-opt is segfaulting</p>",
        "id": 269813397,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643409710
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby [she/her]</span> <a href=\"#narrow/stream/242791-t-infra/topic/Spurious.20mir-opt.20segfaults.20GHA/near/269699225\">https://rust-lang.zulipchat.com/#narrow/stream/242791-t-infra/topic/Spurious.20mir-opt.20segfaults.20GHA/near/269699225</a> This is not a problem with your PR, it's a problem with every PR.</p>",
        "id": 269815296,
        "sender_full_name": "Urgau",
        "timestamp": 1643410845
    },
    {
        "content": "<p>Aah, okay</p>",
        "id": 269815365,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643410884
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby [she/her]</span> <a href=\"#narrow/stream/219381-t-libs/topic/Termination.2FExit.20Status.20Stabilization/near/269811008\">said</a>:</p>\n<blockquote>\n<p>also dang, do we really _never_ call drops on statics?</p>\n</blockquote>\n<p>I'm sure we don't, because running them recreates all the ordering problems again -- the <code>drop</code>s could reference other <code>static</code>s.</p>",
        "id": 269822431,
        "sender_full_name": "scottmcm",
        "timestamp": 1643415412
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/93448\">https://github.com/rust-lang/rust/issues/93448</a></p>",
        "id": 269828885,
        "sender_full_name": "Lokathor",
        "timestamp": 1643420912
    },
    {
        "content": "<p>with this stabilization is there any hope of resolving the prior Debug/Display discussion, or at least not precluding the possibility of resolving it in the future (if indeed there is any hope of ever resolving it at all)?</p>",
        "id": 270021594,
        "sender_full_name": "bstrie",
        "timestamp": 1643631375
    },
    {
        "content": "<p>I have eventual hopes of fixing it for Errors via specialization</p>",
        "id": 270032920,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643636770
    },
    {
        "content": "<p>Same way I want to fix unwrap and expect</p>",
        "id": 270033022,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643636812
    },
    {
        "content": "<p>I don't think that is possible to ever do soundly. A type may implement <code>Display</code> and <code>Debug</code> for different lifetimes. At codegen time we don't know which one was implemented for the non-lifetime-erased type, so we don't know which one to use.</p>",
        "id": 270037564,
        "sender_full_name": "bjorn3",
        "timestamp": 1643638656
    },
    {
        "content": "<p>It would be much easier to at an edition boundary swap between a <code>Debug</code> based <code>Termination</code> trait and a <code>Display</code> based <code>Termination</code> trait. This requires <code>Termination</code> to not be stabilized before the new edition though.</p>",
        "id": 270037790,
        "sender_full_name": "bjorn3",
        "timestamp": 1643638739
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256342\">bstrie</span> <a href=\"#narrow/stream/219381-t-libs/topic/Termination.2FExit.20Status.20Stabilization/near/270021594\">said</a>:</p>\n<blockquote>\n<p>with this stabilization is there any hope of resolving the prior Debug/Display discussion</p>\n</blockquote>\n<p>Well, one version we could always do is offer different types for the output.</p>\n<p>Especially since a really nice version of this would do things like have a localized display and everything.</p>\n<p>That'd need <code>?</code> support to be a really good replacement, though -- which goes back to the same \"if you really care about the output why not just make a function?\" thing that came up in the discussion last time.  Making a Termination impl isn't necessarily the best way to do this.</p>",
        "id": 270091650,
        "sender_full_name": "scottmcm",
        "timestamp": 1643657778
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/219381-t-libs/topic/Termination.2FExit.20Status.20Stabilization/near/270037564\">said</a>:</p>\n<blockquote>\n<p>I don't think that is possible to ever do soundly. A type may implement <code>Display</code> and <code>Debug</code> for different lifetimes. At codegen time we don't know which one was implemented for the non-lifetime-erased type, so we don't know which one to use.</p>\n</blockquote>\n<p>I think niko has some ideas around always applicable impls where we'd only be able to specialize in cases where the impls don't depend on lifetimes, but yea, its a stretch rn</p>",
        "id": 270091854,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643657866
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/219381-t-libs/topic/Termination.2FExit.20Status.20Stabilization/near/270037790\">said</a>:</p>\n<blockquote>\n<p>It would be much easier to at an edition boundary swap between a <code>Debug</code> based <code>Termination</code> trait and a <code>Display</code> based <code>Termination</code> trait. This requires <code>Termination</code> to not be stabilized before the new edition though.</p>\n</blockquote>\n<p>If we're going to do this why would we pick <code>Display</code> over <code>Error</code>?</p>",
        "id": 270092081,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643657955
    },
    {
        "content": "<p>also probably important to note that so long as <code>Termination</code> is stabilized its always going to be possible to circumvent the <code>Display</code> vs <code>Debug</code> issue by just using a different type than <code>std::result::Result</code></p>",
        "id": 270092239,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643658021
    },
    {
        "content": "<p>though its still annoying to work with diff result types, especially because the <code>Ok</code> and <code>Err</code> variants that are in scope won't apply and shadowing them is not necessarily the best idea</p>",
        "id": 270092415,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643658120
    },
    {
        "content": "<p>I wonder if there is any special <code>try_v2</code> syntax sugary thing we could do to fix this without needing to change a ton of existing code</p>",
        "id": 270092687,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643658236
    },
    {
        "content": "<p><code>try{}</code>+<code>yeet</code>.  (Oh, you said without touching existing code)</p>",
        "id": 270092768,
        "sender_full_name": "scottmcm",
        "timestamp": 1643658260
    },
    {
        "content": "<p>maybe somehow changing the <code>Ok</code> item in the function namespace to be an alias for <code>Try::from_output</code> tho i can't imagine that not causing inference breakages</p>",
        "id": 270092827,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643658296
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/219381-t-libs/topic/Termination.2FExit.20Status.20Stabilization/near/270092768\">said</a>:</p>\n<blockquote>\n<p><code>try{}</code>+<code>yeet</code>.  (Oh, you said without touching existing code)</p>\n</blockquote>\n<p>yea, something that works outside of try blocks ideally</p>",
        "id": 270092849,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643658308
    },
    {
        "content": "<p>Yeah, especially in closures it'd be horrible.</p>",
        "id": 270092861,
        "sender_full_name": "scottmcm",
        "timestamp": 1643658312
    },
    {
        "content": "<p>well, <span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> if you wanted another wishlist item to think about ;D</p>",
        "id": 270092916,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643658336
    },
    {
        "content": "<p>See how <code>core</code> uses <code>try { a }</code> instead of <code>Ok(a)</code> often: <a href=\"https://github.com/rust-lang/rust/blob/24b8bb13bff98bb747cd403b86596af43aceee78/library/core/src/iter/traits/iterator.rs#L2029\">https://github.com/rust-lang/rust/blob/24b8bb13bff98bb747cd403b86596af43aceee78/library/core/src/iter/traits/iterator.rs#L2029</a></p>",
        "id": 270093021,
        "sender_full_name": "scottmcm",
        "timestamp": 1643658370
    },
    {
        "content": "<p>tho my guess is that the right solution is exactly what you said, try blocks and yeet</p>",
        "id": 270093025,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643658375
    },
    {
        "content": "<p>i just fking hate how changing code to use try blocks requires that you indent the entire function</p>",
        "id": 270093102,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643658413
    },
    {
        "content": "<p>i feel like we really need to figure out a function level try syntax as well</p>",
        "id": 270093126,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643658425
    },
    {
        "content": "<p>of course that still breaks the ppl who want to be able to do <code>try { ... }.context()</code> on the entire function body</p>",
        "id": 270093235,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643658473
    },
    {
        "content": "<p>feels like there's no winning sometimes</p>",
        "id": 270093306,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643658489
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"kr\">try</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 270095588,
        "sender_full_name": "The 8472",
        "timestamp": 1643659312
    },
    {
        "content": "<p>alternatively</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">path</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Path</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kr\">try</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// ...</span>\n<span class=\"p\">}.</span><span class=\"n\">wrap_err</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"couldnt foo {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"n\">display</span><span class=\"p\">());</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 270096024,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643659474
    },
    {
        "content": "<p>or even worse</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">path</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kr\">try</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// ...</span>\n<span class=\"p\">}.</span><span class=\"n\">wrap_err</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"couldnt foo {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"n\">display</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">T</span>: <span class=\"nb\">AsRef</span><span class=\"o\">&lt;</span><span class=\"n\">Path</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 270096238,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643659562
    },
    {
        "content": "<p>tried picking the worst possible place to put a where bound :D</p>",
        "id": 270096343,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643659600
    },
    {
        "content": "<p>maybe that can be fixed with another postfix macro :D</p>",
        "id": 270096484,
        "sender_full_name": "The 8472",
        "timestamp": 1643659671
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby [she/her]</span> <a href=\"#narrow/stream/219381-t-libs/topic/Termination.2FExit.20Status.20Stabilization/near/270093126\">said</a>:</p>\n<blockquote>\n<p>i feel like we really need to figure out a function level try syntax as well</p>\n</blockquote>\n<p>Yes, I've always wanted one of those that -- like <code>async fn</code> -- affects <code>return</code> expressions as well.  (And thus is different from just having a <code>try</code> block in the body.)</p>\n<p>But that's what leads to arguments on how to write the definition, so I've been avoiding it.</p>",
        "id": 270103298,
        "sender_full_name": "scottmcm",
        "timestamp": 1643662600
    },
    {
        "content": "<p>Yeah, it’ll be the bike shed from hell, but I think we should do it</p>",
        "id": 270104834,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1643663239
    },
    {
        "content": "<p>Ok(()) kills me</p>",
        "id": 270104879,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1643663259
    },
    {
        "content": "<p>Agreed, I think it's worth the bike shed, but I also think that if we're careful in how we structure the discussions, we can make it productive and constructive without much bikeshedding</p>",
        "id": 270105222,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643663389
    },
    {
        "content": "<p>Though at this point I do think we're getting pretty far off topic for the termination stabilization thread</p>",
        "id": 270105360,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643663431
    },
    {
        "content": "<p><em>\"wait, #t-libs is just #project-error-handling?\" \"always has been\"</em></p>",
        "id": 270109612,
        "sender_full_name": "bstrie",
        "timestamp": 1643665235
    },
    {
        "content": "<p>Teleports being you</p>",
        "id": 270110489,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643665641
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby [she/her]</span> did we discuss the consts vs constructors and is_ methods?</p>",
        "id": 271366698,
        "sender_full_name": "simulacrum",
        "timestamp": 1644451359
    },
    {
        "content": "<p>I'm particularly worried that if some target has a bool or enum with two variants, I suspect that might mean that the consts permit exhaustive matching?</p>",
        "id": 271366752,
        "sender_full_name": "simulacrum",
        "timestamp": 1644451397
    },
    {
        "content": "<p>(I think tracing recently ran into trouble here)</p>",
        "id": 271366770,
        "sender_full_name": "simulacrum",
        "timestamp": 1644451410
    },
    {
        "content": "<p>not that I know of</p>",
        "id": 271367594,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1644451919
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/219381-t-libs/topic/Termination.2FExit.20Status.20Stabilization/near/271366752\">said</a>:</p>\n<blockquote>\n<p>I'm particularly worried that if some target has a bool or enum with two variants, I suspect that might mean that the consts permit exhaustive matching?</p>\n</blockquote>\n<p>what do you mean \"some target has a bool or enum with two variants\"?</p>",
        "id": 271367650,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1644451938
    },
    {
        "content": "<p>is this referring to exitcode's internal representation?</p>",
        "id": 271367694,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1644451977
    },
    {
        "content": "<p>I know the unsupported platform (wasm I believe?) has a bool</p>",
        "id": 271367727,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1644451997
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[derive(PartialEq, Eq, Clone, Copy, Debug)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">ExitCode</span><span class=\"p\">(</span><span class=\"kt\">bool</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">ExitCode</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">SUCCESS</span>: <span class=\"nc\">ExitCode</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ExitCode</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">FAILURE</span>: <span class=\"nc\">ExitCode</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ExitCode</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">as_i32</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">From</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">ExitCode</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">from</span><span class=\"p\">(</span><span class=\"n\">code</span>: <span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"bp\">Self</span>::<span class=\"n\">SUCCESS</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"mi\">1</span><span class=\"o\">..=</span><span class=\"mi\">255</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"bp\">Self</span>::<span class=\"n\">FAILURE</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 271367757,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1644452014
    },
    {
        "content": "<p>so is the idea ppl might be able to match against this even tho the bool is private?</p>",
        "id": 271367841,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1644452042
    },
    {
        "content": "<p>Right - let me see if I can make an example</p>",
        "id": 271370247,
        "sender_full_name": "simulacrum",
        "timestamp": 1644453242
    },
    {
        "content": "<p>I know I posted a similarish example here comparing quality of MaybeUninit <a href=\"https://internals.rust-lang.org/t/constifying-the-std-core-library/12962/4\">https://internals.rust-lang.org/t/constifying-the-std-core-library/12962/4</a> If that is the kind of thing you mean</p>",
        "id": 271371044,
        "sender_full_name": "matt rice",
        "timestamp": 1644453830
    },
    {
        "content": "<p>Oh, well, without PartialEq it looks like you can't match or check at all - <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2021&amp;gist=70f54f4bb1124fdc0f106271d7155911\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2021&amp;gist=70f54f4bb1124fdc0f106271d7155911</a></p>",
        "id": 271371533,
        "sender_full_name": "simulacrum",
        "timestamp": 1644454173
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/219381-t-libs/topic/Termination.2FExit.20Status.20Stabilization/near/271371533\">said</a>:</p>\n<blockquote>\n<p>Oh, well, without PartialEq it looks like you can't match or check at all - <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2021&amp;gist=70f54f4bb1124fdc0f106271d7155911\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2021&amp;gist=70f54f4bb1124fdc0f106271d7155911</a></p>\n</blockquote>\n<p>I think we could get away with never adding PartialEq to <code>ExitCode</code> because we don't really have to make it ever usable for user code outside of as a return value for <code>report</code>, but it doesn't seem like something nobody will ever ask for in the future</p>",
        "id": 271382880,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1644464760
    },
    {
        "content": "<p>I wonder if we should maybe consider adding an explicit negative impl as a stability guarantee</p>",
        "id": 271382920,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1644464771
    },
    {
        "content": "<p>or at least come up with a plan still for how to deal with the const constructors if we were to ever stabilize partialeq on exitcode</p>",
        "id": 271382931,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1644464798
    },
    {
        "content": "<p>The easiest thing is to just make them const fn rather than const associated items; I'm not sure why they were added as consts in the first place.</p>",
        "id": 271383944,
        "sender_full_name": "simulacrum",
        "timestamp": 1644465966
    },
    {
        "content": "<p>Probably because they <em>are</em> simple constants rather than computations, and it seems reasonable to express them that way. <code>ExitCode::SUCCESS</code> seems appealing and evocative of what it actually means; <code>ExitCode::success()</code> raises eyebrows.</p>",
        "id": 271391344,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1644475006
    },
    {
        "content": "<p>I don't think it'd be the end of the world if we did allow PartialEq on ExitCode. The only guarantees we have to give are <code>ExitCode::SUCCESS == ExitCode::SUCCESS</code>, <code>ExitCode::FAILURE == ExitCode::FAILURE</code>, <code>ExitCode::SUCCESS != ExitCode::FAILURE</code>.</p>",
        "id": 271391437,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1644475084
    },
    {
        "content": "<p>We can be explicit that there <em>may</em> exist <code>ExitCode</code> values that aren't equal to either.</p>",
        "id": 271391472,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1644475132
    },
    {
        "content": "<p>And we could mark <code>ExitCode</code> as <code>#[non_exhaustive]</code> if need be.</p>",
        "id": 271391496,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1644475173
    },
    {
        "content": "<p>I think the main downside to PartialEq is that it's probably a little odd to have ExitCode(4) == FAILURE; the other side of that is that if it isn't then there's exit codes which aren't really detectable in some sense</p>",
        "id": 271419736,
        "sender_full_name": "simulacrum",
        "timestamp": 1644493550
    },
    {
        "content": "<p>I think simulacrum's point is a good one here.  I wonder if it makes sense to change that impl for unsupported to hold a u8, rather than a bool, to avoid the <code>ExitCode(3) == ExitCode(4)</code> problem for it.</p>",
        "id": 271461281,
        "sender_full_name": "scottmcm",
        "timestamp": 1644512575
    },
    {
        "content": "<p>fwiw, I also left a comment on the PR</p>",
        "id": 271461350,
        "sender_full_name": "simulacrum",
        "timestamp": 1644512606
    },
    {
        "content": "<p>It wouldn't be <code>ExitCode(3) == FAILURE</code> though; it would be <code>ExitCode::from(3) == FAILURE</code>, which seems much more reasonable.</p>",
        "id": 271466107,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1644514639
    },
    {
        "content": "<p>(and that's only on a platform with a bool exit code)</p>",
        "id": 271466136,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1644514652
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> I thought the impl for unsupported was a u8, and that bool impl was for wasm?</p>",
        "id": 271466373,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1644514746
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/219381-t-libs/topic/Termination.2FExit.20Status.20Stabilization/near/271466373\">said</a>:</p>\n<blockquote>\n<p>I thought the impl for unsupported was a u8, and that bool impl was for wasm?</p>\n</blockquote>\n<p>Looks like the <code>sys/unsupported</code> one folds the <code>u8</code> down to a <code>bool</code>: <a href=\"https://github.com/rust-lang/rust/pull/93445/files#diff-2395a2386cebf75c04bc95a1ad184ca1c7309a99bd6009ea127e07fa2394967eR165\">https://github.com/rust-lang/rust/pull/93445/files#diff-2395a2386cebf75c04bc95a1ad184ca1c7309a99bd6009ea127e07fa2394967eR165</a></p>",
        "id": 271475959,
        "sender_full_name": "scottmcm",
        "timestamp": 1644518813
    }
]