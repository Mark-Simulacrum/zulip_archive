[
    {
        "content": "<p>Hi, the <a class=\"stream\" data-stream-id=\"257204\" href=\"/#narrow/stream/257204-project-error-handling\">#project-error-handling</a> is currently polishing the rough edges of the <code>Termination</code> trait and also looking at ways <code>ExitCode</code>s can interact with it. For now, we are waiting for <a href=\"https://github.com/rust-lang/rfcs/pull/2895\">Generic Member Access</a> to implement reporting <code>Error</code>s at the termination (apart from the <code>ExitCode</code>). The question is, how to approach this implementation from the official way? There is an <a href=\"https://github.com/rust-lang/rust/issues/43301\">RFC</a> for tracking the <code>Termination</code> trait stabilization - so we could just add the implementation to the GMA PR.</p>",
        "id": 227660898,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1614196435
    },
    {
        "content": "<p>For now the idea around <code>ExitCode</code>s is to return an arbitrary numeric value (which can be then used by the user to interpret it).</p>",
        "id": 227661104,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1614196536
    },
    {
        "content": "<p>Yay!  Exciting that <code>ExitCode</code> is finally getting some love.</p>",
        "id": 227674196,
        "sender_full_name": "scottmcm",
        "timestamp": 1614201399
    },
    {
        "content": "<p>:D</p>",
        "id": 227677506,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614202707
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204346\">@Ashley Mannix</span> could you help us come up with  a proper way of including our improvements and stabilizing it?</p>",
        "id": 228123702,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1614510645
    },
    {
        "content": "<p>I am currently working on tying the <code>Termination</code> with printing 'ExitCode's on program exit. I read various documents like <a href=\"https://internals.rust-lang.org/t/mini-pre-rfc-redesigning-process-exitstatus/5426/15\">pre-RFC</a> or <a href=\"https://github.com/rust-lang/project-error-handling/issues/7\">this issue</a>. <br>\nI like the existing pre-RFC simplicity, but I am afraid it is not enough and it may require much maintenance to sustain the proper error codes if some changes occur in the operating systems (especially other than the holy trio Windows/Unix/MacOs). I am curious about your ideas on this topic? Generally <a href=\"https://github.com/rust-lang/project-error-handling/issues/22#issuecomment-738270096\">this comment</a> is a good proposition of how may this look. There seemed to be more interest on the topic in the past, but now it seems to be stagnant <span aria-label=\"frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"frown\">:frown:</span></p>",
        "id": 230044828,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1615562004
    },
    {
        "content": "<p>I don't think we should be printing the exit code, just using it as the process exit code.</p>",
        "id": 230067208,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615569927
    },
    {
        "content": "<p>Right, so just returning and no printing. The errors should be printed upon exiting the process though, am I right?</p>",
        "id": 230073771,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1615572585
    },
    {
        "content": "<p>that's a decision made by the process running the program</p>",
        "id": 230074229,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1615572785
    },
    {
        "content": "<p>if it's bash, it'll by default print if the process exited due to a signal, but a bare exit status is also available</p>",
        "id": 230074272,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1615572807
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"344196\">@Jakub Duchniewicz</span> Do you mean the Error part of a Result?</p>",
        "id": 230079232,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615575041
    },
    {
        "content": "<p>That should be printed, as it currently is.</p>",
        "id": 230079241,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615575046
    },
    {
        "content": "<p>Yes</p>",
        "id": 230079323,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1615575081
    },
    {
        "content": "<p>It's purely ExitCode that shouldn't be printed; that should only be returned.</p>",
        "id": 230079550,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615575165
    },
    {
        "content": "<p>This part is quite unambiguous, but I would like to gather some opinions on having more <code>ExitCode</code>s and having them mapped to OS codes</p>",
        "id": 230079665,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1615575216
    },
    {
        "content": "<p>If <code>ExitCode</code> is going to be useful for this purpose, I don't think we should attempt to set any semantics other than \"0 is success, non-zero is failure, provide any non-zero value you like\".</p>",
        "id": 230082121,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615576229
    },
    {
        "content": "<p>People may need to implement an arbitrary exit-code convention.</p>",
        "id": 230082173,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615576253
    },
    {
        "content": "<p>Things like constants for the <code>sysexits.h</code> ones seem plausible, but I agree that people will need arbitrary ones.</p>\n<p>Even just being able to <code>return ExitCode(2)</code> from <code>main</code> instead of needing to call <code>exit</code> (and bypass drops) would be nice.</p>",
        "id": 230122119,
        "sender_full_name": "scottmcm",
        "timestamp": 1615597019
    },
    {
        "content": "<p>I think we should separate the os mappings issue from the rest of <code>Termination</code> stabilization</p>",
        "id": 230122198,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1615597088
    },
    {
        "content": "<p>like everyone else said, just being able to provide a specific exit code for a graceful exit is probably enough for most people's use cases, and until someone makes a proposal for mappings and constants they should be able to make a 3rd party crate that provides those same mappings</p>",
        "id": 230122226,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1615597147
    },
    {
        "content": "<p>my expectation is that we will just want to add a constructor for <code>ExitStatus</code> from arbitrary integers, and then we can leave the specialization with exit code extraction as part of the generic member access rfc for errors</p>",
        "id": 230122400,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1615597268
    },
    {
        "content": "<p>IIRC one of the questions for it last time was what type(s) it should use.  Since <code>exit</code> takes <code>int</code>, but <code>WEXITSTATUS</code> only gives the bottom 8 bits of that, but <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-getexitcodeprocess\">Windows preserves a whole <code>DWORD</code> (<code>u32</code>)</a>.</p>",
        "id": 230187118,
        "sender_full_name": "scottmcm",
        "timestamp": 1615667591
    },
    {
        "content": "<p>Yes, this is one of the issues with choosing a proper implementation</p>",
        "id": 230187649,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1615668227
    },
    {
        "content": "<p>So the small draft of changes in scope is <a href=\"https://gist.github.com/JDuchniewicz/c326357c0d0a0b0e4c89b44dd1e28d19\">here</a>. The remaining question is what should be the underlying value of <code>ExitCode</code> since Termination returns <code>i32</code> which is later translated to <code>isize</code> in <code>start</code> function</p>",
        "id": 230527285,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1615906813
    },
    {
        "content": "<p>Probably <span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> would know more about this topic and why it is <code>not isize</code> in the first place</p>",
        "id": 230527582,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1615906889
    },
    {
        "content": "<p>Is there a reason it's translated to isize?</p>",
        "id": 230527698,
        "sender_full_name": "Connor Horman",
        "timestamp": 1615906923
    },
    {
        "content": "<p>Exit codes are typically <code>int</code>s which generally equates to <code>i32</code>.</p>",
        "id": 230527869,
        "sender_full_name": "Connor Horman",
        "timestamp": 1615906972
    },
    {
        "content": "<p>(Which, yes, are used in different ways depending on the platform)</p>",
        "id": 230528006,
        "sender_full_name": "Connor Horman",
        "timestamp": 1615907016
    },
    {
        "content": "<p>that why it is even more interesting why they were set to <code>u8</code> in the first place</p>",
        "id": 230528586,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1615907188
    },
    {
        "content": "<p>probably because unices use only 255  of exit codes?</p>",
        "id": 230528674,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1615907221
    },
    {
        "content": "<p>but I doubt it</p>",
        "id": 230528697,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1615907227
    },
    {
        "content": "<p>That seems like a likely explanation, honestly.</p>",
        "id": 230538323,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615910326
    },
    {
        "content": "<p>Might also be that that's all we can portably count on.</p>",
        "id": 230538416,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615910356
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"344196\">Jakub Duchniewicz</span> <a href=\"#narrow/stream/219381-t-libs/topic/Termination.2FExit.20Status.20Stabilization/near/230527582\">said</a>:</p>\n<blockquote>\n<p>Probably <span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> would know more about this topic and why it is <code>not isize</code> in the first place</p>\n</blockquote>\n<p><a href=\"#narrow/stream/219381-t-libs/topic/Termination.2FExit.20Status.20Stabilization/near/230187118\">https://rust-lang.zulipchat.com/#narrow/stream/219381-t-libs/topic/Termination.2FExit.20Status.20Stabilization/near/230187118</a></p>\n<p>Originally posix was 0..=255, but now it's <code>c_int</code>, and on windows it's <code>DWORD</code> (<code>u32</code>), so it's not obvious what the correct type is.  (And then there's esoteric platforms where it's a string, or something.)</p>\n<p>But in general, the answer for <code>ExitCode</code> is that there wasn't really substantial design -- it was just tossing something together to get non-<code>()</code>-<code>main</code> stabilized.  Probably it's <code>i32</code> because there was an <a href=\"https://github.com/rust-lang/rust/pull/48497/files#diff-d28320a72819402338af92259522275ed5e735179368ca421704fbdd937cea07L1456\"><code>impl Termination for i32</code></a> and <code>ExitCode</code> was created to punt on the question of whether <code>i32</code> was the right type, or whether <em>any</em> integer type as a return from <code>main</code> was desirable.</p>",
        "id": 230553742,
        "sender_full_name": "scottmcm",
        "timestamp": 1615914843
    },
    {
        "content": "<p>so I guess we are ok with changing the underlying type of <code>ExitCode</code> to be <code>i32</code>?</p>",
        "id": 230555702,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1615915481
    },
    {
        "content": "<p>Do you mean of <code>start</code>?  The struct is <code>pub struct ExitCode(imp::ExitCode);</code>, which seems plausible, as it allows different types for different platforms...</p>",
        "id": 230556130,
        "sender_full_name": "scottmcm",
        "timestamp": 1615915617
    },
    {
        "content": "<p>Linux  <code>sys_exit</code> and <code>sys_exit_group</code> both mask <code>error_code&amp;0xff</code> in the kernel</p>",
        "id": 230558964,
        "sender_full_name": "cuviper",
        "timestamp": 1615916604
    },
    {
        "content": "<p>Worth noting, I <em>think</em> Fuchsia might actually use <code>u64</code> here?</p>",
        "id": 230559193,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615916684
    },
    {
        "content": "<p>That was mentioned on an unrelated PR.</p>",
        "id": 230559204,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615916690
    },
    {
        "content": "<p>So <code>i32</code> doesn't seem like a portable assumption.</p>",
        "id": 230559233,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615916701
    },
    {
        "content": "<p>Maybe <code>ExitCode: From&lt;u8&gt;</code> everywhere, with platform-specific constructors from other things?  (And just never expose the underlying field as <code>pub</code>.)</p>",
        "id": 230560684,
        "sender_full_name": "scottmcm",
        "timestamp": 1615917141
    },
    {
        "content": "<p>That sounds like the right answer, yeah.</p>",
        "id": 230563102,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615917945
    },
    {
        "content": "<p>Least-common-denominator portable API that'll cover most common cases, platform-specific API to use the full extent of the platform.</p>",
        "id": 230563210,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615917978
    },
    {
        "content": "<p>Yeah, I feel like the 90% (or more) case is just codes in 0-10.</p>",
        "id": 230563623,
        "sender_full_name": "scottmcm",
        "timestamp": 1615918126
    },
    {
        "content": "<p>i think i even saw a 13 recently <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span></p>",
        "id": 230563692,
        "sender_full_name": "Mara",
        "timestamp": 1615918155
    },
    {
        "content": "<p>13 is for SIGPIPE, signal(7) lists up to 31: <a href=\"https://man7.org/linux/man-pages/man7/signal.7.html\">https://man7.org/linux/man-pages/man7/signal.7.html</a></p>",
        "id": 230564755,
        "sender_full_name": "bstrie",
        "timestamp": 1615918555
    },
    {
        "content": "<p>signals are returned differently than just exit codes (although some shells might not display/handle them differently (?))</p>",
        "id": 230565053,
        "sender_full_name": "Mara",
        "timestamp": 1615918666
    },
    {
        "content": "<p>I just ran <code>sleep 1000</code> and then used <code>kill -13</code> on it, and the bash <code>$?</code>is 141 (i.e. 128+sig)</p>",
        "id": 230565200,
        "sender_full_name": "cuviper",
        "timestamp": 1615918721
    },
    {
        "content": "<p>but I don't remember if that's just a shell-ism</p>",
        "id": 230565259,
        "sender_full_name": "cuviper",
        "timestamp": 1615918757
    },
    {
        "content": "<p><code>WTERMSIG</code> uses separate bits than a normal exit code</p>",
        "id": 230565306,
        "sender_full_name": "cuviper",
        "timestamp": 1615918783
    },
    {
        "content": "<p>yeah that's just the shell. zsh does the same +128 thing for signals, but the kernel encodes it separately.</p>",
        "id": 230565599,
        "sender_full_name": "Mara",
        "timestamp": 1615918877
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/219381-t-libs/topic/Termination.2FExit.20Status.20Stabilization/near/230563623\">said</a>:</p>\n<blockquote>\n<p>Yeah, I feel like the 90% (or more) case is just codes in 0-10.</p>\n</blockquote>\n<p>There's also common usage of codes around 128 and codes around 255, for programs that want to pass through some other program's exit code but carve out a bit of space for their own errors.</p>",
        "id": 230571544,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615921267
    },
    {
        "content": "<p>But yeah, I think most portable programs will be happy using a <code>u8</code>, and only specific programs on non-UNIX platforms will need to return specific errors above 255.</p>",
        "id": 230571618,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615921308
    },
    {
        "content": "<p>In the <a href=\"https://internals.rust-lang.org/t/mini-pre-rfc-redesigning-process-exitstatus/5426/15\">pre-RFC</a> the difference between signals and codes is explained quite well. But AFAIK we will not be doing this distinction and just return whatever is in the <code>ExitCode</code> (assuming the user put something there).</p>",
        "id": 230573867,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1615922214
    }
]