[
    {
        "content": "<p>When catching a <code>panic!(\"using {}\", \"fmt\")</code> with <code>catch_unwind</code>, is there any way of recovering the formatted panic message? I have a recollection of doing <code>.downcast_ref::&lt;String&gt;()</code> and <code>.downcast_ref::&lt;&amp;'static str&gt;()</code>, but these days they both return <code>None</code>, it looks like because the payload behind <code>dyn Any</code> is actually a private struct. Has that changed? CC <span class=\"user-mention\" data-user-id=\"310399\">@Mara</span> who worked on panic_2021</p>",
        "id": 245307886,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1625748522
    },
    {
        "content": "<p>Hmm I read that wrong. <a href=\"https://github.com/rust-lang/rust/blob/0cd0709f19d316c4796fa71c5f52c8612a5f3771/library/std/src/panicking.rs#L492-L493\">https://github.com/rust-lang/rust/blob/0cd0709f19d316c4796fa71c5f52c8612a5f3771/library/std/src/panicking.rs#L492-L493</a> looks like it still unsizes <code>String</code> to <code>dyn Any</code></p>",
        "id": 245308303,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1625748759
    },
    {
        "content": "<p>That should be a <code>String</code> right now, and might become a <code>&amp;'static str</code> once we teach the compiler a bit more about formatting constants.</p>",
        "id": 245309121,
        "sender_full_name": "Mara",
        "timestamp": 1625749214
    },
    {
        "content": "<p>Downcasting<code>String</code> and <code>&amp;'static str</code> should cover all cases currently generated by <code>panic!</code>.</p>",
        "id": 245323707,
        "sender_full_name": "Amanieu",
        "timestamp": 1625755661
    },
    {
        "content": "<p>Yes that’s what I expected, but I have a case where the <code>Box&lt;dyn Any&gt;</code> returned by <code>catch_unwind</code> where downcasting returns <code>None</code> for both <code>String</code> and <code>&amp;'static str</code>: <a href=\"https://github.com/dgrunwald/rust-cpython/pull/264\">https://github.com/dgrunwald/rust-cpython/pull/264</a></p>",
        "id": 245343221,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1625764568
    },
    {
        "content": "<p>is it coercing the Box&lt;dyn Any&gt; into a <code>&amp;dyn Any</code>? maybe you need to &amp;*err when passing to handle_error?</p>\n<p>i have had this problem before, but my default cause was not None, it was the string <code>Box&lt;dyn Any&gt;</code> like how the rust rt does it</p>",
        "id": 245343529,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1625764720
    },
    {
        "content": "<p>on L230, sorry i wasnt specific</p>",
        "id": 245344841,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1625765377
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"219747\">Simon Sapin</span> <a href=\"#narrow/stream/219381-t-libs/topic/Panic.20message.20from.20.60catch_unwind.60.E2.80.99s.20.60dyn.20Any.60/near/245343221\">said</a>:</p>\n<blockquote>\n<p>Yes that’s what I expected, but I have a case where the <code>Box&lt;dyn Any&gt;</code> returned by <code>catch_unwind</code> where downcasting returns <code>None</code> for both <code>String</code> and <code>&amp;'static str</code>: <a href=\"https://github.com/dgrunwald/rust-cpython/pull/264\">https://github.com/dgrunwald/rust-cpython/pull/264</a></p>\n</blockquote>\n<p>Sometimes it can be another <code>Box&lt;dyn Any&gt;</code> that contains the real payload. I don't know why this happens sometimes, but I've seen it also. (It took inspecting in the debugger to find out).  Here's the code I ended up using to handle it <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=7f5a946f77790508e66f5241322bbcef\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=7f5a946f77790508e66f5241322bbcef</a></p>",
        "id": 245354865,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1625770075
    },
    {
        "content": "<p>It recursively follows the box up to a depth limit. I don't think that's needed in practice, but my initial version of that function recursed infinitely due to this issue <a href=\"https://doc.rust-lang.org/std/any/index.html#smart-pointers-and-dyn-any\">https://doc.rust-lang.org/std/any/index.html#smart-pointers-and-dyn-any</a>), and after I fixed that, it didn't seem like it was bad to have that guard there, so I left it.</p>",
        "id": 245355065,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1625770170
    },
    {
        "content": "<p>I think you just need to dereference the box: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=4bcc90171a8a07a3667af9b6214e2786\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=4bcc90171a8a07a3667af9b6214e2786</a><br>\nas the the <code>dyn Any</code> in the <code>Box&lt;dyn Any&gt;</code> that catch_unwind gives you is the payload, but <code>Box</code> itself also implement <code>dyn Any</code></p>",
        "id": 245355263,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1625770262
    },
    {
        "content": "<p>(The included test will demonstrate the infinite recursion if you change <code>&amp;**v</code> to <code>v</code> or <code>&amp;*v</code> on line 22. it's stupidly subtle)</p>",
        "id": 245355282,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1625770275
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"257428\">Gus Wynn</span> <a href=\"#narrow/stream/219381-t-libs/topic/Panic.20message.20from.20.60catch_unwind.60.E2.80.99s.20.60dyn.20Any.60/near/245355263\">said</a>:</p>\n<blockquote>\n<p>I think you just need to dereference the box: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=4bcc90171a8a07a3667af9b6214e2786\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=4bcc90171a8a07a3667af9b6214e2786</a><br>\nas the the <code>dyn Any</code> in the <code>Box&lt;dyn Any&gt;</code> that catch_unwind gives you is the payload, but <code>Box</code> itself also implement <code>dyn Any</code></p>\n</blockquote>\n<p>That doesn't help in the case where the thing inside the box is itself a Box&lt;dyn Any&gt;, which I've seen (i think it was with thread join(), not catch_unwind, thogh)</p>",
        "id": 245355449,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1625770344
    },
    {
        "content": "<p>thats very curious, I would be interested to see the code that caused that, just remembering the dereference the box before downcasting has always worked for me</p>",
        "id": 245355611,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1625770423
    },
    {
        "content": "<p>yeah, i wasn't sure what caused it either. i had to examine it in the debugger before i figured out that's what had happened.</p>",
        "id": 245355720,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1625770461
    },
    {
        "content": "<p>I think in <span class=\"user-mention\" data-user-id=\"219747\">@Simon Sapin</span>'s pr, the call to extract_panic can just do *the_boxed_dyn_any as its just doing catch_unwind, but the recursive solution is an interesting one Ill remember if something weird ever comes up for me</p>",
        "id": 245355961,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1625770575
    },
    {
        "content": "<p>Good catch <span class=\"user-mention\" data-user-id=\"257428\">@Gus Wynn</span>, thanks!</p>",
        "id": 245356459,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1625770800
    },
    {
        "content": "<p>I think I’ve even encountered this bug in a different code base before, but it didn’t occur to me at all this time before you pointed it out</p>",
        "id": 245356604,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1625770846
    },
    {
        "content": "<p>I’ve changed the parameter to <code>Box&lt;dyn Any&gt;</code> all the way, to avoid the subtlety</p>",
        "id": 245356723,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1625770919
    },
    {
        "content": "<p>Perhaps this could be a lint</p>",
        "id": 245357062,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1625771088
    },
    {
        "content": "<p>warn when usizing and auto-deref would both work</p>",
        "id": 245357095,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1625771102
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"219747\">Simon Sapin</span> <a href=\"#narrow/stream/219381-t-libs/topic/Panic.20message.20from.20.60catch_unwind.60.E2.80.99s.20.60dyn.20Any.60/near/245356723\">said</a>:</p>\n<blockquote>\n<p>I’ve changed the parameter to <code>Box&lt;dyn Any&gt;</code> all the way, to avoid the subtlety</p>\n</blockquote>\n<p>I'd be curious to see if this actually works, or if you need an explicit dereference somewhere always (I suspect you do, but not sure)</p>",
        "id": 245375201,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1625779985
    },
    {
        "content": "<p>the link that <span class=\"user-mention\" data-user-id=\"209168\">@Thom Chiovoloni</span> linked (<a href=\"https://doc.rust-lang.org/std/any/index.html#smart-pointers-and-dyn-any\">https://doc.rust-lang.org/std/any/index.html#smart-pointers-and-dyn-any</a>) is great, first ive ever seen that, it would be nice as a lint (for Any specifically, but also maybe for things like anyhow::Error that also downcast</p>",
        "id": 245375266,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1625780037
    },
    {
        "content": "<p><code>Boy&lt;dyn Any&gt;</code> all the way does work in the updated <a href=\"https://github.com/dgrunwald/rust-cpython/pull/264\">https://github.com/dgrunwald/rust-cpython/pull/264</a>. Presumably with auto-deref on the <code>downcast_ref</code> calls, which are defined on <code>dyn Any</code> not just <code>&amp;dyn Any</code>.</p>",
        "id": 245534891,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1625901261
    }
]