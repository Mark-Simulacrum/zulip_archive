[
    {
        "content": "<p>I was kinda surprised when I was trying to use Wrapping that I couldn't use <code>id += 1;</code> (for example) for it, and had to use <code>id += Wrapping(1)</code>. This made me have to go to all places where I was doing \"raw\" arith and change it. Why is primitve arithmetic not implemented? I find <code>+= Wrapping(1);</code> specially odd because that <code>1</code> won't actually have any wrapping behavior, so to me it reduces readability because it makes me think about something that doesn't happen.</p>\n<p>If it turns out it's a good idea to implement it, I'd be happy to do it!</p>\n<p>(I thought about making a feature request on github but decided to come here instead)</p>",
        "id": 241346960,
        "sender_full_name": "Pedro Mendes",
        "timestamp": 1622693894
    },
    {
        "content": "<p>I've also had this issue before, it makes the Wrapping newtype completely unergonomic</p>",
        "id": 241405233,
        "sender_full_name": "Lokathor",
        "timestamp": 1622733217
    },
    {
        "content": "<blockquote>\n<p>Why is primitve arithmetic not implemented?</p>\n</blockquote>\n<p>Not sure</p>\n<blockquote>\n<p>If it turns out it's a good idea to implement it, I'd be happy to do it!</p>\n</blockquote>\n<p>imo you should go for it and see if you run into any issues</p>",
        "id": 241453194,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1622754148
    },
    {
        "content": "<p>My best guess for possible breakage would be something like <code>x += 10.into();</code> (from people working around the lack of this), but luckily that seems to not compile today: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=fde08791e067d16dd7b5dfc9fc097b23\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=fde08791e067d16dd7b5dfc9fc097b23</a></p>",
        "id": 241461874,
        "sender_full_name": "scottmcm",
        "timestamp": 1622757715
    },
    {
        "content": "<p>One thing to ponder, here:<br>\nIf there's <code>Wrapping&lt;i32&gt; += i32</code>, I'd expect there to be <code>Wrapping&lt;i32&gt; + i32</code>.<br>\nBut if there's <code>Wrapping&lt;i32&gt; + i32</code>, I'd expect there to be <code>i32 + Wrapping&lt;i32&gt;</code>.<br>\nAnd if there's <code>i32 + Wrapping&lt;i32&gt;</code>, I'd expect there to be <code>i32 += Wrapping&lt;i32&gt;</code>.</p>\n<p>Which would mean that <code>x = x.wrapping_add(1)</code> could be spelled <code>x += Wrapping(1)</code>.  I don't know if that's a good thing or a bad thing, though.</p>",
        "id": 241462623,
        "sender_full_name": "scottmcm",
        "timestamp": 1622758105
    },
    {
        "content": "<p>tbqh there should be a way to control the wrapping-ness of a computation on a block level.</p>",
        "id": 241462992,
        "sender_full_name": "Jubilee",
        "timestamp": 1622758317
    },
    {
        "content": "<p>I wonder if the core problem here is not actually the lack of heterogeneous math, but the lack of custom literals.</p>",
        "id": 241463204,
        "sender_full_name": "scottmcm",
        "timestamp": 1622758435
    },
    {
        "content": "<p>also might be interesting.</p>",
        "id": 241463256,
        "sender_full_name": "Jubilee",
        "timestamp": 1622758449
    },
    {
        "content": "<p>Because it'd be great if <code>x + 1</code> worked for BigInteger and Wrapping and ...</p>",
        "id": 241463295,
        "sender_full_name": "scottmcm",
        "timestamp": 1622758479
    },
    {
        "content": "<p>but wrapping code could look more like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wrapping</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">id</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 241463311,
        "sender_full_name": "Jubilee",
        "timestamp": 1622758494
    },
    {
        "content": "<p>C# does that, but I'm not a fan, since it can't be \"deep\".  It's been discussed a bunch in the context of \"FAST† math\", but for example it doesn't solve <code>.sum()</code> or <code>.pow(n)</code>, so I don't think it's worth doing.</p>\n<p>† Floats Allowing Sketchy Transformations</p>",
        "id": 241463595,
        "sender_full_name": "scottmcm",
        "timestamp": 1622758667
    },
    {
        "content": "<p>isn't there a crate for that</p>",
        "id": 241463664,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1622758696
    },
    {
        "content": "<p>what Jubilee said</p>",
        "id": 241463676,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1622758706
    },
    {
        "content": "<p><a href=\"https://github.com/llogiq/overflower\">https://github.com/llogiq/overflower</a></p>",
        "id": 241463732,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1622758753
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/219381-t-libs/topic/.7BArith.7D.28Assign.29.3Cprimitive.3E.20for.20Wrapping.3Cpritimive.3E/near/241463595\">said</a>:</p>\n<blockquote>\n<p>C# does that, but I'm not a fan, since it can't be \"deep\".  It's been discussed a bunch in the context of \"FAST† math\", but for example it doesn't solve <code>.sum()</code> or <code>.pow(n)</code>, so I don't think it's worth doing.</p>\n<p>† Floats Allowing Sketchy Transformations</p>\n</blockquote>\n<p>idk, why can't it be deep? <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span></p>",
        "id": 241463901,
        "sender_full_name": "Jubilee",
        "timestamp": 1622758861
    },
    {
        "content": "<p>Well, how can <code>.next_power_of_two()</code> mean <code>.wrapping_next_power_of_two()</code> in a <code>wrapping</code> block?</p>",
        "id": 241463955,
        "sender_full_name": "scottmcm",
        "timestamp": 1622758905
    },
    {
        "content": "<p>(Everything I can come up with with basically the same as \"well, just use <code>Wrapping&lt;_&gt;</code> as a type\".)</p>",
        "id": 241464018,
        "sender_full_name": "scottmcm",
        "timestamp": 1622758928
    },
    {
        "content": "<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> ...is that a problem?</p>",
        "id": 241464086,
        "sender_full_name": "Jubilee",
        "timestamp": 1622758976
    },
    {
        "content": "<p>time for some <span aria-label=\"sparkles\" class=\"emoji emoji-2728\" role=\"img\" title=\"sparkles\">:sparkles:</span> compiler magic <span aria-label=\"sparkles\" class=\"emoji emoji-2728\" role=\"img\" title=\"sparkles\">:sparkles:</span></p>",
        "id": 241466300,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1622760511
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/219381-t-libs/topic/.7BArith.7D.28Assign.29.3Cprimitive.3E.20for.20Wrapping.3Cpritimive.3E/near/241463204\">said</a>:</p>\n<blockquote>\n<p>I wonder if the core problem here is not actually the lack of heterogeneous math, but the lack of custom literals.</p>\n</blockquote>\n<p>now you're talkin my language</p>",
        "id": 241472884,
        "sender_full_name": "Lokathor",
        "timestamp": 1622766137
    },
    {
        "content": "<p>I think that <code>x += Wrapping(1)</code> should not have wrapping semantics, because the left hand side is not wrapping. Otherwise, wrapping behaviour would be weirdly infectious - it makes more sense for the operation to always be applied to the left hand side. This would make addition non-commutative but I think we already pay the price of that due to how the operator traits and symbols are defined today.</p>",
        "id": 241496064,
        "sender_full_name": "Kestrer",
        "timestamp": 1622788659
    },
    {
        "content": "<p>strings already have non-commutative addition</p>",
        "id": 241496517,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1622789124
    },
    {
        "content": "<p>String addition is still commutative at the type level, though -- <code>&amp;str + String</code> and <code>String + &amp;str</code> both exist.</p>",
        "id": 241503611,
        "sender_full_name": "scottmcm",
        "timestamp": 1622794456
    },
    {
        "content": "<p>I think it's quite consistent to get off <span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> 's slippery slope at the first stage. <code>Wrapping&lt;i32&gt; += i32</code> has a clear asymmetry, while <code>Wrapping&lt;i32&gt; + i32</code> is ambiguous about whether you want wrapping or not.</p>",
        "id": 241510089,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622798587
    },
    {
        "content": "<p>The thing I worry about is that I'd like to have a bunch of things that keep it from stopping there.  For example, I think it would be nice, in general, to be able to get <code>a + b</code> automatically from <code>a += b</code> (as <code>*a = *a + b</code>) when <code>a</code> is <code>Copy</code>.</p>",
        "id": 241556315,
        "sender_full_name": "scottmcm",
        "timestamp": 1622822321
    },
    {
        "content": "<p>I guess if such a general mechanism was added (and I think that there are a lot of problems with doing that <em>in general</em>), then this example could be reconsidered in that context. But for this particular case, I think it is better to have <code>Wrapping&lt;i32&gt; += i32</code> but not <code>Wrapping&lt;i32&gt; + i32</code>. If the latter sneaks in because it's required to satisfy some interface, I won't lose sleep over it, but I think it should be avoided if possible.</p>",
        "id": 241559137,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622823569
    },
    {
        "content": "<p>I think this is related to how I feel like this wants custom literals.  <code>Wrapping(x) + 1</code> seems somehow more reasonable to me, than <code>Wrapping(x) + y</code>, where <code>x, y: i32</code>.</p>",
        "id": 241560081,
        "sender_full_name": "scottmcm",
        "timestamp": 1622823973
    },
    {
        "content": "<p>I definitely agree there, custom literals would mean there is no need for mixed type addition at all</p>",
        "id": 241560414,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622824120
    },
    {
        "content": "<p>Yeah, this is admittedly kind of what we wound up implementing for SIMD, where we decided that for a SIMD type Simd{N}, where N is some numeric type (since they all are), that <code>Simd{N} + {N} =&gt; Simd{N}</code>.<br>\nIt's a <strong>very</strong> common idiom in vector math libraries.</p>",
        "id": 241562947,
        "sender_full_name": "Jubilee",
        "timestamp": 1622825273
    }
]