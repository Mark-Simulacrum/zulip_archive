[
    {
        "content": "<p>It would make my life a lot easier right now if HashMap were in alloc: <a href=\"https://github.com/rust-lang/rust/pull/77253/commits/45250f4bb468bb1a48f616b0b6dfca733836c2c0\">https://github.com/rust-lang/rust/pull/77253/commits/45250f4bb468bb1a48f616b0b6dfca733836c2c0</a> is broken because it can't refer to upstream crates. Is there any reason not to move it, assuming that <code>std</code> re-exports it?</p>",
        "id": 211396220,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601178023
    },
    {
        "content": "<p>HashMap needs not only <code>alloc</code> but also <code>some_randomization_source_from_somewhere</code></p>",
        "id": 211396247,
        "sender_full_name": "Lokathor",
        "timestamp": 1601178105
    },
    {
        "content": "<p>that's a trait though, I thought?</p>",
        "id": 211396295,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601178163
    },
    {
        "content": "<p>could the trait be in alloc and the default implementation be in std? or does that break coherence?</p>",
        "id": 211396299,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601178179
    },
    {
        "content": "<p>Well, <code>hashbrown</code>, the crate that provides the <code>HashMap</code> that <code>std</code> uses, can be used in a <code>no_std</code> setting if <code>alloc</code> is available, and I'm not sure how it gets its randomization in that case.</p>",
        "id": 211396428,
        "sender_full_name": "Lokathor",
        "timestamp": 1601178376
    },
    {
        "content": "<p>looks like it uses <code>ahash</code></p>",
        "id": 211396508,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601178556
    },
    {
        "content": "<p>let me see what std uses</p>",
        "id": 211396520,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601178591
    },
    {
        "content": "<p>looks like it's OS-specific: <a href=\"https://doc.rust-lang.org/src/std/collections/hash/map.rs.html#2525\">https://doc.rust-lang.org/src/std/collections/hash/map.rs.html#2525</a></p>",
        "id": 211396565,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601178621
    },
    {
        "content": "<p>is there interest in making hashmaps available in alloc? It seems like it would be useful for things besides intra-doc links ;)</p>",
        "id": 211396571,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601178654
    },
    {
        "content": "<blockquote>\n<p>aHash uses the hardware AES instruction on x86 processors to provide a keyed hash function. aHash is not a cryptographically secure hash.</p>\n</blockquote>",
        "id": 211396580,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601178691
    },
    {
        "content": "<p>is there interest? Yes, i'm sure.</p>\n<p>can it be done so simply? Well it hasn't been done yet so...</p>",
        "id": 211396702,
        "sender_full_name": "Lokathor",
        "timestamp": 1601178865
    },
    {
        "content": "<p>let me fix <a href=\"https://github.com/rust-lang/rust/issues/77254\">https://github.com/rust-lang/rust/issues/77254</a> tonight and then I'll get back to you</p>",
        "id": 211396865,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601179115
    },
    {
        "content": "<p>We'd have to pull <code>hashbrown</code> into <code>alloc</code> to get <code>HashMap</code> in there, to avoid a circular dependency</p>",
        "id": 211397710,
        "sender_full_name": "cuviper",
        "timestamp": 1601180626
    },
    {
        "content": "<p>(apart from the question of default hasher)</p>",
        "id": 211397748,
        "sender_full_name": "cuviper",
        "timestamp": 1601180646
    },
    {
        "content": "<p>oh right</p>",
        "id": 211417785,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601215008
    },
    {
        "content": "<p>yeah that's unfortunate</p>",
        "id": 211417788,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601215014
    },
    {
        "content": "<p>Could maybe this be done with the re-export in std somehow?  IIRC the part that needs the fancy stuff is the <code>S = RandomState</code> -- could it be in <code>alloc</code> without that default, and have the <code>std</code> version be <code>type HashMap&lt;K, V, S = RandomState&gt; = alloc::HashMap&lt;K, V, S&gt;;</code>?</p>\n<p>(Assuming defaults even work right in type aliases...)</p>",
        "id": 211433344,
        "sender_full_name": "scottmcm",
        "timestamp": 1601238783
    },
    {
        "content": "<p>defaults do work right in type aliases â€” I use <code>type Result&lt;T, E = MyError&gt; = core::result::Result&lt;T, E&gt;;</code> all the time.</p>",
        "id": 211435828,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1601242902
    },
    {
        "content": "<p>Are you sure? I was under the impression that you had to use <code>type Result&lt;T&gt; = core::result::Result&lt;T, MyError&gt;</code> instead.</p>",
        "id": 211436534,
        "sender_full_name": "Amanieu",
        "timestamp": 1601243976
    },
    {
        "content": "<p>Maybe they fixed defaults in type aliases since I last checked...</p>",
        "id": 211436537,
        "sender_full_name": "Amanieu",
        "timestamp": 1601243998
    },
    {
        "content": "<p>There's also <code>HashMap::new</code> and <code>with_capacity</code> that are only defined for <code>S = RandomState</code>. I don't know how we'd do that through a type alias, unless we employ language hacks to bypass coherence.</p>",
        "id": 211437919,
        "sender_full_name": "cuviper",
        "timestamp": 1601246279
    },
    {
        "content": "<p>is there a reason they're only defined for <code>S = RandomState</code>? <code>new</code> just delegates to <code>Default</code>, which doesn't have the bound: <a href=\"https://doc.rust-lang.org/nightly/std/collections/struct.HashMap.html#impl-Default\">https://doc.rust-lang.org/nightly/std/collections/struct.HashMap.html#impl-Default</a></p>",
        "id": 211439119,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601248096
    },
    {
        "content": "<p>this annoys me a lot when working with FxHashMap, I have to call <code>default()</code> instead of <code>new</code> even though they do the same thing</p>",
        "id": 211439126,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601248118
    },
    {
        "content": "<p>I think instead that could just require <code>S: Default</code></p>",
        "id": 211439137,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601248145
    },
    {
        "content": "<p>making a pr for that now</p>",
        "id": 211439206,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601248240
    },
    {
        "content": "<p>oh hmm</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0283]: type annotations needed for `std::collections::HashMap&lt;i32, i32, S&gt;`\n  --&gt; library/std/benches/hash/map.rs:17:21\n   |\n17 |         let mut m = HashMap::new();\n   |             -----   ^^^^^^^^^^^^ cannot infer type for type parameter `S`\n   |             |\n   |             consider giving `m` the explicit type `std::collections::HashMap&lt;i32, i32, S&gt;`, where the type parameter `S` is specified\n   |\n   = note: cannot satisfy `_: std::default::Default`\n   = note: required by `std::collections::HashMap::&lt;K, V, S&gt;::new`\n</code></pre></div>",
        "id": 211439218,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601248266
    },
    {
        "content": "<p>and I can't add the default either:</p>\n<div class=\"codehilite\"><pre><span></span><code>error: defaults for type parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions.\n   --&gt; library/std/src/collections/hash/map.rs:205:12\n    |\n205 | impl&lt;K, V, S: Default = RandomState&gt; HashMap&lt;K, V, S&gt; {\n    |            ^\n    |\n    = note: `#[deny(invalid_type_param_default)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #36887 &lt;https://github.com/rust-lang/rust/issues/36887&gt;\n</code></pre></div>",
        "id": 211439234,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601248316
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"138448\">cuviper</span> <a href=\"#narrow/stream/219381-t-libs/topic/Why.20is.20HashMap.20in.20std.20and.20not.20alloc.3F/near/211437919\">said</a>:</p>\n<blockquote>\n<p>There's also <code>HashMap::new</code> and <code>with_capacity</code> that are only defined for <code>S = RandomState</code>. I don't know how we'd do that through a type alias, unless we employ language hacks to bypass coherence.</p>\n</blockquote>\n<p>anyway this doesn't seem like a big deal, you don't <em>have</em> to go through the type alias:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// std</span>\n<span class=\"k\">type</span> <span class=\"nc\">HashMap</span><span class=\"o\">&lt;</span><span class=\"n\">K</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">RandomState</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">alloc</span>::<span class=\"n\">HashMap</span><span class=\"o\">&lt;</span><span class=\"n\">K</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">K</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">alloc</span>::<span class=\"n\">HashMap</span><span class=\"o\">&lt;</span><span class=\"n\">K</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">RandomState</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 211439430,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601248618
    },
    {
        "content": "<p>That shouldn't build due to coherence violation</p>",
        "id": 211439712,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1601249089
    },
    {
        "content": "<p>We have some hacks that allow that for primitives though</p>",
        "id": 211439723,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1601249113
    },
    {
        "content": "<p>It seems that type inference doesn't account for defaults, which is why <code>HashMap&lt;i32, i32&gt;::new()</code> continues to compile but <code>HashMap::new()</code> does not.</p>",
        "id": 211448905,
        "sender_full_name": "Ahmed Charles",
        "timestamp": 1601264220
    },
    {
        "content": "<p>the solution to this is to unify core/alloc/std and make them feature flags</p>",
        "id": 212055244,
        "sender_full_name": "boats",
        "timestamp": 1601633098
    },
    {
        "content": "<p>wouldn't that interfere with <em>all</em> the external crates that sit between core and std? <br>\nat least: <code>cfg-if</code>, <code>compiler_builtins</code>, <code>hashbrown</code>, <code>libc</code>, <code>rustc-demangle</code>, <code>unwind</code></p>",
        "id": 212094775,
        "sender_full_name": "cuviper",
        "timestamp": 1601654675
    },
    {
        "content": "<p>cfg_if is just a macro, it's technically valid no_core even. compiler_builtins is part of core i think, the rest are \"above core inside of std\"</p>",
        "id": 212094889,
        "sender_full_name": "Lokathor",
        "timestamp": 1601654737
    },
    {
        "content": "<p>They may have to be pulled in directly as modules rather than crates</p>",
        "id": 212110337,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1601662954
    },
    {
        "content": "<p>or rely on a minimal libcore that just defines lang items</p>",
        "id": 212110392,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1601662983
    },
    {
        "content": "<p><code>compiler_builtins</code> can be compiled separately, the methods it provides are only needed at link time.</p>",
        "id": 212111379,
        "sender_full_name": "Amanieu",
        "timestamp": 1601663548
    },
    {
        "content": "<p>I think that unifying std/alloc/core would require a full RFC since there are many issues that need to be addressed.</p>",
        "id": 212111436,
        "sender_full_name": "Amanieu",
        "timestamp": 1601663589
    },
    {
        "content": "<p>For example, how can I have a Linux no_std binary that doesn't depend on libc since std depends on libc.</p>",
        "id": 212111498,
        "sender_full_name": "Amanieu",
        "timestamp": 1601663632
    },
    {
        "content": "<p>There's definitely a bunch of issues to resolve, but <code>libc</code> shouldn't be a problem. It is already <code>no_core</code>, and on platforms that don't have a C library it automatically becomes an empty crate.</p>",
        "id": 212124501,
        "sender_full_name": "Eric Huss",
        "timestamp": 1601670318
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256759\">boats</span> <a href=\"#narrow/stream/219381-t-libs/topic/Why.20is.20HashMap.20in.20std.20and.20not.20alloc.3F/near/212055244\">said</a>:</p>\n<blockquote>\n<p>the solution to this is to unify core/alloc/std and make them feature flags</p>\n</blockquote>\n<p>fwiw we're talking about doing this in the error handling project group as part of our effort to move the Error trait into core</p>",
        "id": 212129315,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601672925
    },
    {
        "content": "<p>here's the relevant thread <a href=\"#narrow/stream/257204-project-error-handling/topic/std.2Falloc.2Fcore\">https://rust-lang.zulipchat.com/#narrow/stream/257204-project-error-handling/topic/std.2Falloc.2Fcore</a></p>",
        "id": 212129440,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601673009
    },
    {
        "content": "<p>tho I wanna highlight this comment from Manishearth which points out that this could also be solved by allowing multiple crates in one package where coherence rules only apply to the whole group <a href=\"#narrow/stream/257204-project-error-handling/topic/std.2Falloc.2Fcore/near/211830027\">https://rust-lang.zulipchat.com/#narrow/stream/257204-project-error-handling/topic/std.2Falloc.2Fcore/near/211830027</a></p>",
        "id": 212130051,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601673472
    },
    {
        "content": "<p>also i think the allocation randomness source has some overlap with issues that I've come up against with my Backtrace in core proof of concept, which we talked about here <a href=\"#narrow/stream/213817-t-lang/topic/global.20hooks.20and.20their.20relation.20to.20traits.20and.20vtables\">https://rust-lang.zulipchat.com/#narrow/stream/213817-t-lang/topic/global.20hooks.20and.20their.20relation.20to.20traits.20and.20vtables</a> and here <a href=\"#narrow/stream/257204-project-error-handling/topic/Global.20Hooks\">https://rust-lang.zulipchat.com/#narrow/stream/257204-project-error-handling/topic/Global.20Hooks</a></p>",
        "id": 212130170,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601673540
    },
    {
        "content": "<p>FWIW this would make me happy from a purely selfish view of using more intra-doc links in std <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span>  <a href=\"https://github.com/rust-lang/rust/issues/74481\">https://github.com/rust-lang/rust/issues/74481</a></p>",
        "id": 212134742,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601676807
    },
    {
        "content": "<p>Would a fair summary so far be that we're all for it, we just need to RFC the fine details?</p>\n<p>Does anyone care to take a stance <strong>opposing</strong> the merging of core/alloc/std ?</p>",
        "id": 212140990,
        "sender_full_name": "Lokathor",
        "timestamp": 1601681857
    },
    {
        "content": "<p>I disagree personally that an rfc is the right step, I think we should be able to merge them without user-visible effects (like linkage changes) other than more flexible impls internally</p>",
        "id": 212141059,
        "sender_full_name": "simulacrum",
        "timestamp": 1601681909
    },
    {
        "content": "<p>Well, an RFC \"might not hurt\" because it is a fairly big change to the guts of rust and people will want to have ample warning about it. Even if the change over <em>could</em> be done without any direct disruption to most users.</p>",
        "id": 212141176,
        "sender_full_name": "Lokathor",
        "timestamp": 1601682083
    },
    {
        "content": "<p>A T-compiler MCP laying out the design, maybe, but I don't see why the community would need to weigh in on what is ultimately an internal decision? Like, I guess I do not see it as that big a change</p>",
        "id": 212141369,
        "sender_full_name": "simulacrum",
        "timestamp": 1601682301
    },
    {
        "content": "<p>It's not about them weighing in specifically. I don't think that most people would have anything to say about the process.</p>\n<p>It's about the community perception: big improvements get RFCs, and they get a little publicity because of it. This would be a big improvement that would help in areas X, Y, Z etc, so it gets an RFC and gets the associated publicity. Most intermediate and advanced Rust programmers have an <em>understanding</em> of how the standard library works: There's the <code>core</code> crate, and then there's <code>alloc</code>, and then there's <code>libc</code> and other OS stuff, and you put it all together and get <code>std</code>, and a ton of what's \"in\" <code>std</code> is re-exports from <code>core</code> and <code>alloc</code>, but some of it is \"new\" because it's OS related (like checking the clock).</p>\n<p>So if you go through a big process and make it so that the common notion of how the standard library is put together is suddenly <em>wrong</em>, then you need to <strong>communicate</strong> that with people. Even if technically their code continues to compile.</p>",
        "id": 212142138,
        "sender_full_name": "Lokathor",
        "timestamp": 1601683153
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> I know <span class=\"user-mention\" data-user-id=\"132040\">@Manish Goregaokar</span> is somewhat opposed, as they noted in the comment I linked</p>",
        "id": 212142760,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601683708
    },
    {
        "content": "<p>I guess I feel RFC is the wrong process; I would be all in favor of blog post(s) on inside rust. I think an MCP for the compiler team would contain about everything the RFC would for something of this magnitude, but avoid the checkboxes and other painful bits of rfcs.</p>",
        "id": 212145292,
        "sender_full_name": "simulacrum",
        "timestamp": 1601686725
    },
    {
        "content": "<p>a blog post would also suffice</p>",
        "id": 212146583,
        "sender_full_name": "Lokathor",
        "timestamp": 1601688861
    },
    {
        "content": "<p>At the very least there should be some sort of design doc where people can point out potential problems with the proposed approach.</p>",
        "id": 212146660,
        "sender_full_name": "Amanieu",
        "timestamp": 1601688968
    },
    {
        "content": "<p>Yep, I think that's an MCP for compiler team. If we want to make changes to the end user interface, then I think an RFC is warranted, but ultimately that's a t-libs call.</p>",
        "id": 212147326,
        "sender_full_name": "simulacrum",
        "timestamp": 1601690136
    }
]