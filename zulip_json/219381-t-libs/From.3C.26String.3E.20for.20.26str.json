[
    {
        "content": "<p>Is it possible to add an implementation of <code>&lt;'a&gt; From&lt;&amp;'a String&gt; for &amp;'a str</code> to the std library or is there an explicit reason it's not there?</p>",
        "id": 222058306,
        "sender_full_name": "rylev",
        "timestamp": 1610102781
    },
    {
        "content": "<p>I'll move this topic to <a class=\"stream\" data-stream-id=\"219381\" href=\"/#narrow/stream/219381-t-libs\">#t-libs</a> since that's probably a more relevant stream <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 222066553,
        "sender_full_name": "davidtwco",
        "timestamp": 1610108809
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"122651\" href=\"/#narrow/stream/122651-general/topic/From.3C.26String.3E.20for.20.26str\">#general &gt; From&lt;&amp;String&gt; for &amp;str</a> by <span class=\"user-mention silent\" data-user-id=\"116107\">davidtwco</span></p>",
        "id": 222066568,
        "sender_full_name": "Notification Bot",
        "timestamp": 1610108818
    },
    {
        "content": "<p>I think this conversion is just <code>&amp;**x</code> ?</p>",
        "id": 222118061,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1610135895
    },
    {
        "content": "<p>there's <code>Deref</code>, <code>AsRef&lt;str&gt;</code>, <code>Borrow&lt;str&gt;</code>, or the inherent <code>String::as_str()</code></p>",
        "id": 222121009,
        "sender_full_name": "cuviper",
        "timestamp": 1610137485
    },
    {
        "content": "<p>I don't see any precedent of <code>From</code> for a reference</p>",
        "id": 222121441,
        "sender_full_name": "cuviper",
        "timestamp": 1610137726
    },
    {
        "content": "<p>yeah, <code>s.as_str()</code> seems like the right move</p>",
        "id": 222128945,
        "sender_full_name": "Lokathor",
        "timestamp": 1610141616
    },
    {
        "content": "<p>there's already enough ways to convert between strings <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 222133874,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610144467
    },
    {
        "content": "<p>This is for generic code where an API takes Into&lt;&amp;str&gt;.</p>",
        "id": 222181274,
        "sender_full_name": "rylev",
        "timestamp": 1610215109
    },
    {
        "content": "<p><code>Into&lt;&amp;str&gt;</code> is a strange choice though, because I don't know anything besides the reflexive impl for that</p>",
        "id": 222182003,
        "sender_full_name": "cuviper",
        "timestamp": 1610216004
    },
    {
        "content": "<p><code>AsRef&lt;str&gt;</code> would be more typical</p>",
        "id": 222182015,
        "sender_full_name": "cuviper",
        "timestamp": 1610216023
    },
    {
        "content": "<p>I totally get that. I do think this is a slight usability papercut. i just noticed that most of my APIs take Into&lt;T&gt; for there parameters but when T=&amp;str I have to switch to a different trait. I get why things are the way they are, but it would be nice if there was one uniform way to build APIs that took parameters that could turn into the value that I ultimately care about.</p>",
        "id": 222215716,
        "sender_full_name": "rylev",
        "timestamp": 1610273883
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224872\">@rylev</span> even after this change it wouldn't be uniform because you can't take String, only &amp;String. And there's no way to write <code>impl From&lt;String&gt; for &amp;str</code> because of lifetimes</p>",
        "id": 222219732,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610280994
    },
    {
        "content": "<p>Thatâ€™s true. Itâ€™s unfortunate, but I understand why it is how it is. ðŸ˜€</p>",
        "id": 222343310,
        "sender_full_name": "rylev",
        "timestamp": 1610392332
    },
    {
        "content": "<p>Use <code>Into&lt;_&gt;</code> for owned values, and <code>AsRef&lt;_&gt;</code> or <code>AsMut&lt;_&gt;</code> for borrowed references.</p>",
        "id": 222349458,
        "sender_full_name": "cuviper",
        "timestamp": 1610395103
    },
    {
        "content": "<p>just as APIs have to decide between <code>self</code>, <code>&amp;self</code>, and <code>&amp;mut self</code></p>",
        "id": 222349486,
        "sender_full_name": "cuviper",
        "timestamp": 1610395117
    },
    {
        "content": "<p>Is this worth mentioning in the docs for Into?</p>",
        "id": 223986582,
        "sender_full_name": "enterprisey",
        "timestamp": 1611624122
    },
    {
        "content": "<p>So I've been thinking more about this, and I think what <span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> is correct though slightly misleading. Let's say I have a function <code>foo</code> that takes some argument <code>T: 'a</code> and returns some result <code>MyStruct&lt;'a&gt;</code>. The argument is an owned value but with lifetime <code>'a</code>. If we want to make the parameter more flexible we can change it to <code>Into&lt;T&gt;</code> where <code>T: 'a</code>. <br>\nNow let's move to the specific case of <code>T</code> being <code>&amp;'a str</code>. If I need to move the string slice into the return result I can't use <code>AsRef</code> as the lifetime of the borrow is contrained to the lifetime on the call to <code>as_ref()</code>. If there was an implementation for <code>From&lt;&amp;'a String&gt; for &amp;'a str</code> I could use <code>Into&lt;&amp;'a str&gt;</code> as the generic paramter.</p>",
        "id": 224162743,
        "sender_full_name": "rylev",
        "timestamp": 1611743359
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224872\">@rylev</span> my quick take on that is that we might want to be more general, something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nc\">Deref</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">From</span><span class=\"o\">&lt;&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"n\">T</span>::<span class=\"n\">Target</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"o\">..</span><span class=\"p\">.}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 224215273,
        "sender_full_name": "cuviper",
        "timestamp": 1611768132
    },
    {
        "content": "<p>but I think that would require lattice specialization</p>",
        "id": 224215283,
        "sender_full_name": "cuviper",
        "timestamp": 1611768140
    },
    {
        "content": "<p>If you have a call taking <code>arg: T</code> where <code>T</code> is already constrained to <code>&amp;str</code>, then <code>&amp;String</code> should already work by deref coercion. But I think that will go out the window as soon as you change it to <code>arg: impl Into&lt;T&gt;</code>.</p>",
        "id": 224215513,
        "sender_full_name": "cuviper",
        "timestamp": 1611768242
    },
    {
        "content": "<p>the <code>impl</code> above would sort of codify part of deref coercion in <code>From</code>, if that's possible</p>",
        "id": 224215691,
        "sender_full_name": "cuviper",
        "timestamp": 1611768309
    },
    {
        "content": "<p>Maybe <code>String</code> is special enough to justify its own deref-like <code>From</code>, or maybe we should do it individually for a lot of <code>Deref</code> types</p>",
        "id": 224216345,
        "sender_full_name": "cuviper",
        "timestamp": 1611768552
    }
]