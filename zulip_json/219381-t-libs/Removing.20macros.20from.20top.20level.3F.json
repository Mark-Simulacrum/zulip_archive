[
    {
        "content": "<p>An exciting development in the last month or so that we haven't really discussed is that we are now merging macros at paths (first <code>core::ptr::raw!/raw_mut!</code>, now also <code>core::task::ready!</code>). Several of the macros which are auto-imported from std are actually rarely used and would not have been added to the prelude except that macros originally had to be exported that way. Should we consider exposing some of these macros at paths and removing them from the prelude in the next edition?</p>",
        "id": 203827733,
        "sender_full_name": "boats",
        "timestamp": 1594730360
    },
    {
        "content": "<p>I'm thinking of things like <code>is_x86_feature_detected</code>, the include macros, maybe line/column/module_path, maybe thread_local. The macros that are mainly used for debugging purposes, the panics, formatting macros, vec, all should stay in the prelude IMO.</p>",
        "id": 203827923,
        "sender_full_name": "boats",
        "timestamp": 1594730472
    },
    {
        "content": "<p>There was some discussion about moving asm! to core::arch::$ARCH::asm! in the RFC.</p>",
        "id": 203837136,
        "sender_full_name": "Amanieu",
        "timestamp": 1594735610
    },
    {
        "content": "<p>line/column/module_path are \"used for debugging purposes\"</p>",
        "id": 203852086,
        "sender_full_name": "Lokathor",
        "timestamp": 1594742710
    },
    {
        "content": "<p>I would love to be able to move macros out of the std crate root. Even without an edition, I think could make sense to move the macros to better locations and then reexport them in the root for back compat.</p>",
        "id": 203853212,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1594743311
    },
    {
        "content": "<p>I'm not sure if it's possible to remove macros in an edition boundary, or in general to change the standard library in an edition boundary.</p>",
        "id": 203854644,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1594744027
    },
    {
        "content": "<p>I don't think that functionality exists now, but it definitely seems plausible to teach the compiler to ignore certain reexports when certain editions are selected</p>",
        "id": 203855132,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1594744300
    },
    {
        "content": "<p>Yeah it seems <em>technically</em> possible, though politically possible maybe not.</p>",
        "id": 203855249,
        "sender_full_name": "Lokathor",
        "timestamp": 1594744342
    },
    {
        "content": "<p>It has been suggested that a new edition could use a different implicit prelude path though</p>",
        "id": 203856158,
        "sender_full_name": "cuviper",
        "timestamp": 1594744803
    },
    {
        "content": "<p>I'm on board with moving macros to non-root locations and phasing out some of those re-exports in a future edition.</p>",
        "id": 203870423,
        "sender_full_name": "Peter Rabbit",
        "timestamp": 1594751796
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256759\">@boats</span> will \"macros have their own path\" be stabilized during a particular release or is it just generally in the pipeline?</p>",
        "id": 203871537,
        "sender_full_name": "Lokathor",
        "timestamp": 1594752388
    },
    {
        "content": "<p>@Lokathor we just have 2 macros going into nightly that are at paths. The feature has existed since around 2018 but we haven't used it in std before. I'm not sure if it presents any problems for 2015 edition crates</p>",
        "id": 203882213,
        "sender_full_name": "boats",
        "timestamp": 1594757912
    },
    {
        "content": "<p>We've never implemented support, but editions can remove paths without any issue. They just can't redefine paths (once a path is used in one edition, it can never be used to mean  something with a different definition in a future edition.)</p>",
        "id": 203882280,
        "sender_full_name": "boats",
        "timestamp": 1594757963
    },
    {
        "content": "<p>Editions can't remove impls, or can't without a lot of extra machinery to make sure cross-edition crates stay coherent</p>",
        "id": 203882529,
        "sender_full_name": "boats",
        "timestamp": 1594758086
    },
    {
        "content": "<p>Oh my. Can user crates make macros at paths? I've still been using <code>#[macro_export]</code> and having my macros be at the top level of the crate.</p>",
        "id": 203891798,
        "sender_full_name": "Lokathor",
        "timestamp": 1594762717
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/219381-t-libs/topic/Removing.20macros.20from.20top.20level.3F/near/203891798\">said</a>:</p>\n<blockquote>\n<p>Oh my. Can user crates make macros at paths? I've still been using <code>#[macro_export]</code> and having my macros be at the top level of the crate.</p>\n</blockquote>\n<p>Yes, they can, as of roughly around the 2018 edition.</p>",
        "id": 203906782,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1594774815
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> That does seem like the cleanest way to do it.</p>",
        "id": 203906796,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1594774829
    },
    {
        "content": "<p>Personally, I would be very hesitant to cause the churn that removing a common macro would cause. We could certainly implement the technical means to do so. But would it be worth pushing people to change their code like that, or should we just soft-deprecate the old names and tell people to use the new ones?</p>",
        "id": 203906839,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1594774897
    },
    {
        "content": "<p>(how do you do that? because when i type <code>pub macro_rules!</code> the compiler says i can't put visibility on macros)</p>",
        "id": 203906930,
        "sender_full_name": "Lokathor",
        "timestamp": 1594775007
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> You still have to write <code>#[macro_export]</code>, but you can now import using <code>use</code> with a path.</p>",
        "id": 203913953,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1594784691
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/edition-guide/rust-2018/macros/macro-changes.html\">https://doc.rust-lang.org/nightly/edition-guide/rust-2018/macros/macro-changes.html</a></p>",
        "id": 203913956,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1594784695
    },
    {
        "content": "<p>Ah, okay. I follow now. I've actually had to import alloc::vec::vec before so i should have realized.</p>",
        "id": 203915144,
        "sender_full_name": "Lokathor",
        "timestamp": 1594786362
    },
    {
        "content": "<p>rustdoc is still having some issues with <code>pub macro</code> though it seems: <a href=\"https://github.com/rust-lang/rust/issues/74355\">https://github.com/rust-lang/rust/issues/74355</a></p>",
        "id": 203921400,
        "sender_full_name": "RalfJ",
        "timestamp": 1594795730
    }
]