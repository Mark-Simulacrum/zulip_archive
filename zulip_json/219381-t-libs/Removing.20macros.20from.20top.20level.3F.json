[
    {
        "content": "<p>An exciting development in the last month or so that we haven't really discussed is that we are now merging macros at paths (first <code>core::ptr::raw!/raw_mut!</code>, now also <code>core::task::ready!</code>). Several of the macros which are auto-imported from std are actually rarely used and would not have been added to the prelude except that macros originally had to be exported that way. Should we consider exposing some of these macros at paths and removing them from the prelude in the next edition?</p>",
        "id": 203827733,
        "sender_full_name": "boats",
        "timestamp": 1594730360
    },
    {
        "content": "<p>I'm thinking of things like <code>is_x86_feature_detected</code>, the include macros, maybe line/column/module_path, maybe thread_local. The macros that are mainly used for debugging purposes, the panics, formatting macros, vec, all should stay in the prelude IMO.</p>",
        "id": 203827923,
        "sender_full_name": "boats",
        "timestamp": 1594730472
    },
    {
        "content": "<p>There was some discussion about moving asm! to core::arch::$ARCH::asm! in the RFC.</p>",
        "id": 203837136,
        "sender_full_name": "Amanieu",
        "timestamp": 1594735610
    },
    {
        "content": "<p>line/column/module_path are \"used for debugging purposes\"</p>",
        "id": 203852086,
        "sender_full_name": "Lokathor",
        "timestamp": 1594742710
    },
    {
        "content": "<p>I would love to be able to move macros out of the std crate root. Even without an edition, I think could make sense to move the macros to better locations and then reexport them in the root for back compat.</p>",
        "id": 203853212,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1594743311
    },
    {
        "content": "<p>I'm not sure if it's possible to remove macros in an edition boundary, or in general to change the standard library in an edition boundary.</p>",
        "id": 203854644,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1594744027
    },
    {
        "content": "<p>I don't think that functionality exists now, but it definitely seems plausible to teach the compiler to ignore certain reexports when certain editions are selected</p>",
        "id": 203855132,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1594744300
    },
    {
        "content": "<p>Yeah it seems <em>technically</em> possible, though politically possible maybe not.</p>",
        "id": 203855249,
        "sender_full_name": "Lokathor",
        "timestamp": 1594744342
    },
    {
        "content": "<p>It has been suggested that a new edition could use a different implicit prelude path though</p>",
        "id": 203856158,
        "sender_full_name": "cuviper",
        "timestamp": 1594744803
    },
    {
        "content": "<p>I'm on board with moving macros to non-root locations and phasing out some of those re-exports in a future edition.</p>",
        "id": 203870423,
        "sender_full_name": "Peter Rabbit",
        "timestamp": 1594751796
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256759\">@boats</span> will \"macros have their own path\" be stabilized during a particular release or is it just generally in the pipeline?</p>",
        "id": 203871537,
        "sender_full_name": "Lokathor",
        "timestamp": 1594752388
    },
    {
        "content": "<p>@Lokathor we just have 2 macros going into nightly that are at paths. The feature has existed since around 2018 but we haven't used it in std before. I'm not sure if it presents any problems for 2015 edition crates</p>",
        "id": 203882213,
        "sender_full_name": "boats",
        "timestamp": 1594757912
    },
    {
        "content": "<p>We've never implemented support, but editions can remove paths without any issue. They just can't redefine paths (once a path is used in one edition, it can never be used to mean  something with a different definition in a future edition.)</p>",
        "id": 203882280,
        "sender_full_name": "boats",
        "timestamp": 1594757963
    },
    {
        "content": "<p>Editions can't remove impls, or can't without a lot of extra machinery to make sure cross-edition crates stay coherent</p>",
        "id": 203882529,
        "sender_full_name": "boats",
        "timestamp": 1594758086
    },
    {
        "content": "<p>Oh my. Can user crates make macros at paths? I've still been using <code>#[macro_export]</code> and having my macros be at the top level of the crate.</p>",
        "id": 203891798,
        "sender_full_name": "Lokathor",
        "timestamp": 1594762717
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/219381-t-libs/topic/Removing.20macros.20from.20top.20level.3F/near/203891798\">said</a>:</p>\n<blockquote>\n<p>Oh my. Can user crates make macros at paths? I've still been using <code>#[macro_export]</code> and having my macros be at the top level of the crate.</p>\n</blockquote>\n<p>Yes, they can, as of roughly around the 2018 edition.</p>",
        "id": 203906782,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1594774815
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> That does seem like the cleanest way to do it.</p>",
        "id": 203906796,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1594774829
    },
    {
        "content": "<p>Personally, I would be very hesitant to cause the churn that removing a common macro would cause. We could certainly implement the technical means to do so. But would it be worth pushing people to change their code like that, or should we just soft-deprecate the old names and tell people to use the new ones?</p>",
        "id": 203906839,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1594774897
    },
    {
        "content": "<p>(how do you do that? because when i type <code>pub macro_rules!</code> the compiler says i can't put visibility on macros)</p>",
        "id": 203906930,
        "sender_full_name": "Lokathor",
        "timestamp": 1594775007
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> You still have to write <code>#[macro_export]</code>, but you can now import using <code>use</code> with a path.</p>",
        "id": 203913953,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1594784691
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/edition-guide/rust-2018/macros/macro-changes.html\">https://doc.rust-lang.org/nightly/edition-guide/rust-2018/macros/macro-changes.html</a></p>",
        "id": 203913956,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1594784695
    },
    {
        "content": "<p>Ah, okay. I follow now. I've actually had to import alloc::vec::vec before so i should have realized.</p>",
        "id": 203915144,
        "sender_full_name": "Lokathor",
        "timestamp": 1594786362
    },
    {
        "content": "<p>rustdoc is still having some issues with <code>pub macro</code> though it seems: <a href=\"https://github.com/rust-lang/rust/issues/74355\">https://github.com/rust-lang/rust/issues/74355</a></p>",
        "id": 203921400,
        "sender_full_name": "RalfJ",
        "timestamp": 1594795730
    },
    {
        "content": "<p>As far as I can tell in-line macros are now generally available. How would folks feel about if we added re-exports from submodules for the macros currently in root?</p>\n<p>I'm hesitant to combine deprecation / removal + re-exporting from submodules in a single pass, since that seems like a very large topic. So instead I'm wondering if we could perhaps try re-exporting first. That would enable for example <code>std::panic</code> to also include <code>{panic!, unreachable!, unimplemented!, todo!}</code>, which is great for discoverability and documentation.</p>",
        "id": 272677263,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1645443953
    },
    {
        "content": "<p>(Additional motivation from me personally is that this seems like a relatively small and uncontroversial change, but big enough that it warrants an RFC. I've never written an RFC before, and this seems like just the right size of topic to try writing one for.)</p>",
        "id": 272677687,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1645444186
    },
    {
        "content": "<blockquote>\n<p>I'm hesitant to combine deprecation / removal + re-exporting from submodules in a single pass, since that seems like a very large topic. So instead I'm wondering if we could perhaps try re-exporting first.</p>\n</blockquote>\n<p>Are you proposing re-exporting from the modules? I.e., leaving the definitions in their macros module and re-exporting from e.g. panic? Would there be any observable difference to the user to move the macros to e.g. panic and re-export from the top-level? What do you think is the long-term plan? (I'm a bit confused by the talk of deprecation, I'd think we could be backwards compatible by re-exporting, but I do seem to remember some tricky edge cases around old vs new macro naming)</p>",
        "id": 272682072,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1645446744
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256841\">Nick Cameron</span> <a href=\"#narrow/stream/219381-t-libs/topic/Removing.20macros.20from.20top.20level.3F/near/272682072\">said</a>:</p>\n<blockquote>\n<p>Are you proposing re-exporting from the modules? I.e., leaving the definitions in their macros module and re-exporting from e.g. panic? Would there be any observable difference to the user to move the macros to e.g. panic and re-export from the top-level?</p>\n</blockquote>\n<p>Good question! I haven't looked at it closely enough that I have a preference which way we flip it. Do you have a preference? I figured I'd check in with the WG first to see what folks thought about the general idea before hashing out further details.</p>",
        "id": 272694413,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1645453348
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256841\">Nick Cameron</span> <a href=\"#narrow/stream/219381-t-libs/topic/Removing.20macros.20from.20top.20level.3F/near/272682072\">said</a>:</p>\n<blockquote>\n<p>What do you think is the long-term plan? (I'm a bit confused by the talk of deprecation, I'd think we could be backwards compatible by re-exporting, but I do seem to remember some tricky edge cases around old vs new macro naming)</p>\n</blockquote>\n<p>I mean, ultimately it does seem the most neat if we didn't have a big catch-all pile of macros live in std's root. Reading this thread it seems most everyone agrees with that. But there are some details which need to be worked out on how to move away from that, so that's why I'm intentionally trying to break this up into two steps. Which hopefully will be more manageable than attempting to do it all in one go.</p>",
        "id": 272694684,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1645453491
    },
    {
        "content": "<p>I've thought about this before, and I think you'll want to start with only the macros that have extremely obvious places where they should live, e.g. <code>std::io::println!</code>. Many other macros are probably going to require making new modules, which is going to take forever to bikeshed and shouldn't block the obvious ones.</p>",
        "id": 272698157,
        "sender_full_name": "bstrie",
        "timestamp": 1645455243
    },
    {
        "content": "<p>for example, I could imagine a <code>std::meta</code> module for \"things to do with Rust source code itself\", which could contain <code>column!</code>, <code>stringify!</code>, <code>cfg!</code>, etc (and if we ever move the <code>proc_macro</code> crate into std (perhaps behind an off-by-default Cargo feature in the glorious build-std future??) then <code>TokenStream</code> could live in here too, and so on)</p>",
        "id": 272698551,
        "sender_full_name": "bstrie",
        "timestamp": 1645455458
    },
    {
        "content": "<p>likewise there were plans years ago for a <code>std::test</code> for things to do with the test runner, which is the natural place for <code>assert!</code> et al, and maybe even <code>dbg!</code></p>",
        "id": 272698798,
        "sender_full_name": "bstrie",
        "timestamp": 1645455583
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256342\">bstrie</span> <a href=\"#narrow/stream/219381-t-libs/topic/Removing.20macros.20from.20top.20level.3F/near/272698798\">said</a>:</p>\n<blockquote>\n<p><code>std::test</code> [...] is the natural place for <code>assert!</code></p>\n</blockquote>\n<p>Agree with the bikeshedding concern: I would disagree with that location <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 272701353,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1645456740
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211722\">@Yoshua Wuyts [he/they]</span> moving macros to relevant modules and adding re-exports in the root sounds great. (better than the other way around.) it's a relatively small change, but an RFC could be useful.</p>\n<blockquote>\n<p>I've never written an RFC before, and this seems like just the right size of topic to try writing one for.</p>\n</blockquote>\n<p>yeah. it's a relatively small change, but it'd be nice to have the motivation and an overview of the changes in one place. if the standard RFC template doesn't work, feel free to structure it differently. the document just needs to have all the information/answers/motivation so an informed decision can be made, in whatever way is most useful. (I'm saying this because the standard 'guide level explanation' and 'reference level explanation' sections in the rfc template are more focussed at <em>new</em> (language) features, and might not work well for proposals like this.)</p>",
        "id": 272701600,
        "sender_full_name": "Mara",
        "timestamp": 1645456854
    },
    {
        "content": "<p>One question I'm sure that will come up is \"what's the point of moving everything if you have to re-export from the crate root anyway?\"</p>",
        "id": 272702002,
        "sender_full_name": "Lokathor",
        "timestamp": 1645457048
    },
    {
        "content": "<p>the root re-export is only for backwards compatibility. but it might be interesting to discuss the differences between a macro in std's or core's root and a macro in the prelude.</p>",
        "id": 272702341,
        "sender_full_name": "Mara",
        "timestamp": 1645457221
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310399\">Mara</span> <a href=\"#narrow/stream/219381-t-libs/topic/Removing.20macros.20from.20top.20level.3F/near/272701600\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"211722\">Yoshua Wuyts [he/they]</span> moving macros to relevant modules and adding re-exports in the root sounds great. (better than the other way around.) it's a relatively small change, but an RFC could be useful.</p>\n</blockquote>\n<p>Yay, amazing! - An RFC it is then! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 272703370,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1645457746
    },
    {
        "content": "<p>Right Mara, the backwards compatibility concern is the reason for the std root re-exports. However, given that the re-exports are a hard requirement, what's the value in doing any of the other re-organizing. What benefit will users see from having all these macros suddenly be \"in two places\".</p>\n<p>And I don't mean \"convince me in this zulip thread\", I mean the RFC text should have a convincing answer.</p>",
        "id": 272707117,
        "sender_full_name": "Lokathor",
        "timestamp": 1645459536
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> I'll make sure to address that (:</p>",
        "id": 272708914,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1645460463
    },
    {
        "content": "<p>Oh, <code>std::panic!()</code> works.  That's a shame.</p>\n<p>It would have been nice if this could have just been \"put in a reasonable module + prelude reexport\".</p>",
        "id": 272715891,
        "sender_full_name": "scottmcm",
        "timestamp": 1645464158
    },
    {
        "content": "<p>note that old-style macros are already reachable from two places, both <code>println</code> and <code>std::println</code> work (the latter isn't the case for things that are <em>actually</em> in the prelude). it's fair to emphasize that this change is mostly for better documentation (giving these macros homes in places other than the crate root is both what new users expect (striving for consistency is one of the things people like about Rust) and theoretically lets us clean up the chaotic grab bag of <a href=\"https://doc.rust-lang.org/std/index.html#macros\">https://doc.rust-lang.org/std/index.html#macros</a> (via <code>#[doc(hidden)]</code> on wrapper macros))</p>",
        "id": 272715915,
        "sender_full_name": "bstrie",
        "timestamp": 1645464176
    },
    {
        "content": "<p>on the T-libs side it also helps to emphasize that \"namespace where possible\" appears to have won out over \"put macros in the crate root\" when it comes to stabilizing new macros, as has been done for <code>ptr::raw!</code> and <code>arch::asm!</code> and <code>arch::is_foo_feature_detected!</code></p>",
        "id": 272716133,
        "sender_full_name": "bstrie",
        "timestamp": 1645464333
    },
    {
        "content": "<p>and don't get me started on the fact that I'd like to namespace all the builtin attributes as well, and make their documentation live in std rather than the reference :P imagine <code>std::hint::inline</code>...</p>",
        "id": 272716252,
        "sender_full_name": "bstrie",
        "timestamp": 1645464394
    },
    {
        "content": "<p>Hey all, I've written out a preliminary mapping of all macros in <code>std</code> to their new homes. So far everyone seems mostly on board with the idea of re-exporting macros, so I now expect the main point of discussion will be to figure out which submodules to actually move the macros to. I figured I'd front-load that and get people's input on that as soon as possible.</p>\n<p>Let me know what y'alls thoughts are on this!: <a href=\"https://hackmd.io/@yoshuawuyts/rJg8AyWbq\">https://hackmd.io/@yoshuawuyts/rJg8AyWbq</a></p>",
        "id": 274245696,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1646489763
    },
    {
        "content": "<p>I guess as an aside: I just realized <code>core::arch</code> exists, but <code>std::arch</code> does not? I think I failed to include the <code>core::arch::arch!</code> macros for that reason.</p>",
        "id": 274245793,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1646489941
    },
    {
        "content": "<p>it should exist - <a href=\"https://doc.rust-lang.org/nightly/std/arch/index.html\">https://doc.rust-lang.org/nightly/std/arch/index.html</a></p>",
        "id": 274246031,
        "sender_full_name": "simulacrum",
        "timestamp": 1646490252
    },
    {
        "content": "<p>the macros iirc don't get rendered for some awkward reason</p>",
        "id": 274246036,
        "sender_full_name": "simulacrum",
        "timestamp": 1646490266
    },
    {
        "content": "<p><a class=\"stream-topic\" data-stream-id=\"219381\" href=\"/#narrow/stream/219381-t-libs/topic/asm.2Fglobal_asm.20only.20in.20core.3F\">#t-libs &gt; asm/global_asm only in core?</a> maybe?</p>",
        "id": 274246048,
        "sender_full_name": "simulacrum",
        "timestamp": 1646490307
    },
    {
        "content": "<p>Left a few comments on the hackmd.</p>",
        "id": 274246050,
        "sender_full_name": "bjorn3",
        "timestamp": 1646490309
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211722\">Yoshua Wuyts [he/they]</span> <a href=\"#narrow/stream/219381-t-libs/topic/Removing.20macros.20from.20top.20level.3F/near/274245793\">said</a>:</p>\n<blockquote>\n<p>I guess as an aside: I just realized <code>core::arch</code> exists, but <code>std::arch</code> does not? I think I failed to include the <code>core::arch::arch!</code> macros for that reason.</p>\n</blockquote>\n<p><a href=\"/user_uploads/4715/9_USEkCtk0o1XCRiCXg9XM5t/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/9_USEkCtk0o1XCRiCXg9XM5t/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/9_USEkCtk0o1XCRiCXg9XM5t/image.png\"></a></div>",
        "id": 274246074,
        "sender_full_name": "bjorn3",
        "timestamp": 1646490358
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// The `no_inline`-attribute is required to make the documentation of all</span>\n<span class=\"c1\">// targets available.</span>\n<span class=\"c1\">// See https://github.com/rust-lang/rust/pull/57808#issuecomment-457390549 for</span>\n<span class=\"c1\">// more information.</span>\n<span class=\"cp\">#[doc(no_inline)]</span><span class=\"w\"> </span><span class=\"c1\">// Note (#82861): required for correct documentation</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">arch</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 274246122,
        "sender_full_name": "bjorn3",
        "timestamp": 1646490379
    },
    {
        "content": "<p>It's a bit unclear for macros which you've named by path, e.g., future::join, and you've put std as the proposed new location, are you proposing std::future as the location (good, IMO) or moving to std (bad, IMO)</p>",
        "id": 274363086,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1646643084
    },
    {
        "content": "<p>Urgh, it is annoying that HackMD sometimes just dumps comments at the end of the doc (I think when the comment is on a code block)</p>",
        "id": 274364021,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1646643702
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256841\">Nick Cameron</span> <a href=\"#narrow/stream/219381-t-libs/topic/Removing.20macros.20from.20top.20level.3F/near/274363086\">said</a>:</p>\n<blockquote>\n<p>It's a bit unclear for macros which you've named by path, e.g., future::join, and you've put std as the proposed new location, are you proposing std::future as the location (good, IMO) or moving to std (bad, IMO)</p>\n</blockquote>\n<p>Oh, that's a good point. Yeah I didn't mean to change its location. I'll work on clarifying that!</p>",
        "id": 274387823,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1646658215
    },
    {
        "content": "<p>Re: where to put line! etc, I think <code>std::source::line/column/file/include_bytes!</code> etc read quite nicely</p>",
        "id": 275569063,
        "sender_full_name": "Johannes Dahlström",
        "timestamp": 1647460742
    },
    {
        "content": "<p>I'm not sure that a new module just to hold macros that will be at the crate root anyway is the best route.</p>",
        "id": 275584867,
        "sender_full_name": "Lokathor",
        "timestamp": 1647469235
    }
]