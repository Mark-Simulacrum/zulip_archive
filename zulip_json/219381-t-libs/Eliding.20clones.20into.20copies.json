[
    {
        "content": "<p>Further to <a href=\"https://www.reddit.com/r/rust/comments/qwfo33/comment/hl5bwg4/\">this comment on the Rust subreddit</a>, I found <a href=\"https://github.com/rust-lang/rust/pull/81854\">the PR that specialized <code>clone_from_slice</code> for <code>T: Copy</code></a> but it doesn't explain its motivation.  Is it  always valid to elide clones into copies (cloning may have side effects) and, if so, should that be more clearly documented?  cc <span class=\"user-mention\" data-user-id=\"330154\">@The 8472</span> (PR author).</p>",
        "id": 262099159,
        "sender_full_name": "eggyal",
        "timestamp": 1637342831
    },
    {
        "content": "<p><a href=\"https://rust-lang.github.io/rfcs/1521-copy-clone-semantics.html\">https://rust-lang.github.io/rfcs/1521-copy-clone-semantics.html</a></p>",
        "id": 262100960,
        "sender_full_name": "The 8472",
        "timestamp": 1637343563
    },
    {
        "content": "<p>I do think it's kinda odd that <code>vec![x].clone().pop().unwrap()</code> is allowed to just be a Copy and not call the clone, but <code>x.clone()</code> isn't.  There was some conversation about that on IRLO recently: <a href=\"https://internals.rust-lang.org/t/associativity-commutivity-etc-for-standard-operators/15251/31?u=scottmcm\">https://internals.rust-lang.org/t/associativity-commutivity-etc-for-standard-operators/15251/31?u=scottmcm</a></p>",
        "id": 262104765,
        "sender_full_name": "scottmcm",
        "timestamp": 1637345030
    },
    {
        "content": "<p>Hm.  It seems some official clarification may be required.  I guess there isn't a process for amending approved RFCs?  So would clarification require a further RFC?</p>",
        "id": 262106257,
        "sender_full_name": "eggyal",
        "timestamp": 1637345655
    },
    {
        "content": "<p>It's not really about which specific call but who does the substitution. the compiler isn't allowed to replace it but the library is.</p>",
        "id": 262109348,
        "sender_full_name": "The 8472",
        "timestamp": 1637347038
    },
    {
        "content": "<p>So a library can replace a <code>.clone()</code> (maybe in some generic code for example) with a copy. That's pretty much what many vec specializations do.</p>",
        "id": 262109406,
        "sender_full_name": "The 8472",
        "timestamp": 1637347074
    },
    {
        "content": "<p>But I don't find that 100% clear from the docs or RFC.  To my reading the RFC says \"these are the language semantics, so a compiler can make this optimization\".   Hence the confusion in the current Reddit discussion, and the earlier IRLO one.</p>",
        "id": 262109657,
        "sender_full_name": "eggyal",
        "timestamp": 1637347167
    },
    {
        "content": "<p>Hrm, true. I guess the RFC could be amended, clarifications shouldn't take much ceremony. I don't think it makes that much practical difference. Even if we think the compiler would theoretically be allowed to do it it currently doesn't anyway, while std does make copious use of that license.</p>",
        "id": 262113825,
        "sender_full_name": "The 8472",
        "timestamp": 1637348709
    },
    {
        "content": "<p>So the primary difference is only whether <em>direct</em> calls to <code>.clone()</code> execute side-effects. As soon as you pass it off to something else that says it'll clone then it may not.</p>",
        "id": 262113962,
        "sender_full_name": "The 8472",
        "timestamp": 1637348763
    },
    {
        "content": "<p>Unless the compiler <em>is</em> allowed to perform this optimization (and I'm minded to agree that it <em>isn't</em>, or at least <em>shouldn't be</em>), should RFC 1521 even exist at all?  After all, in that case and as you say, this is neither a language nor compiler issue: it's \"just\" a library one—so shouldn't it just be documented on each relevant library method?  E.g. <code>clone_from_slice</code> would explicitly document that it will use copy instead of clone if <code>T: Copy</code>.</p>",
        "id": 262120401,
        "sender_full_name": "eggyal",
        "timestamp": 1637351456
    },
    {
        "content": "<p>Perhaps the RFC gives permission to do it retroactively, even if it could be considered a behaviour-breaking change.</p>\n<p>(See how I just specialized it for arrays last week.)</p>",
        "id": 262122232,
        "sender_full_name": "scottmcm",
        "timestamp": 1637352229
    },
    {
        "content": "<p>It's not specific to <code>clone_from_slice</code>. The standard library does that kind of optimization in an expanding set of operations.</p>",
        "id": 262122247,
        "sender_full_name": "The 8472",
        "timestamp": 1637352235
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330154\">The 8472</span> <a href=\"#narrow/stream/219381-t-libs/topic/Eliding.20clones.20into.20copies/near/262122247\">said</a>:</p>\n<blockquote>\n<p>It's not specific to <code>clone_from_slice</code>. The standard library does that kind of optimization in an expanding set of operations.</p>\n</blockquote>\n<p>Sure, I get that.  But the point remains: this is an implementation decision of each library function and not a wider language/compiler specification.</p>",
        "id": 262122418,
        "sender_full_name": "eggyal",
        "timestamp": 1637352318
    },
    {
        "content": "<p>libs design gets RFCs too since it practically affects a lot of code. slices are pretty fundamental, even if its implemented methods aren't provided by the compiler itself.</p>",
        "id": 262122632,
        "sender_full_name": "The 8472",
        "timestamp": 1637352413
    },
    {
        "content": "<p>So the RFC basically says we reserve the right to do this anywhere.</p>",
        "id": 262122708,
        "sender_full_name": "The 8472",
        "timestamp": 1637352451
    },
    {
        "content": "<p>Okay, fair.  So then maybe the RFC just needs to be clarified as being explicitly a libs one and not a wider language one?  ¯\\_(ツ)_/¯</p>",
        "id": 262122870,
        "sender_full_name": "eggyal",
        "timestamp": 1637352513
    },
    {
        "content": "<p>yeah, just make a PR, I think clarifications don't need much ceremony</p>",
        "id": 262123000,
        "sender_full_name": "The 8472",
        "timestamp": 1637352577
    },
    {
        "content": "<p>Thanks.   I've opened <a href=\"https://github.com/rust-lang/rfcs/pull/3197\">https://github.com/rust-lang/rfcs/pull/3197</a></p>",
        "id": 262127225,
        "sender_full_name": "eggyal",
        "timestamp": 1637354683
    }
]