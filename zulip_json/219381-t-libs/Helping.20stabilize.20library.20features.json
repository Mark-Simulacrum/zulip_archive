[
    {
        "content": "<p>I've noticed that there are a lot of features in rust that have been unstable for a long time. I was wondering if there was a way I could help y'all move library features towards stabilization. Maybe drawing up some lists of features that it might be worth stabilizing?</p>",
        "id": 245569292,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625948794
    },
    {
        "content": "<p>Any in particular you've got your eye on? A number have blockers but many don't to my knowledge. Stabilizing library features is pretty straightforward: take a look at <a href=\"https://rustc-dev-guide.rust-lang.org/stability.html#stabilizing-a-library-feature\">the guide</a>.</p>",
        "id": 245569697,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1625949397
    },
    {
        "content": "<p>Feel free to ask questions. I've stabilized a bit myself.</p>",
        "id": 245569702,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1625949411
    },
    {
        "content": "<p>I don't really have any in particular in mind. Just hoping to help move the process in general along. :)</p>",
        "id": 245569781,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625949525
    },
    {
        "content": "<p>Wiuld I be correct in assuming that the most important criteria are that there not be unresolved blockers and that the feature have been implemented for a while?</p>",
        "id": 245569801,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625949572
    },
    {
        "content": "<p>That would be my assumption, yes.</p>",
        "id": 245569870,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1625949622
    },
    {
        "content": "<p>Smaller APIs are also likely easier to land as they'll typically be less controversial.</p>",
        "id": 245569922,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1625949722
    },
    {
        "content": "<p>That's two of the critical criteria; the third is that we have some experience reports from people who have actually tried the feature and found it to work.</p>",
        "id": 245612314,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1626017162
    },
    {
        "content": "<p>We want to know that it actually serves a purpose, and that we are not stabilizing something that nobody has tried.</p>",
        "id": 245612349,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1626017186
    },
    {
        "content": "<p>Getting people to try small unstable features seems difficult. On their own they're not worth it and even nightly-only crates might try to minimize their use of them to have a path to stabilization.</p>\n<p>That mostly leaves rustc/std itself and crates with explicit nightly features.</p>",
        "id": 245622976,
        "sender_full_name": "The 8472",
        "timestamp": 1626032056
    },
    {
        "content": "<p>Certainly. But smaller APIs need less unstable usage as well. Take <a href=\"https://github.com/rust-lang/rust/issues/80959\">#80959</a> for example â€” I've no idea if there was anyone actually using the method unstably. It was clearly desired, though, and had a trivial implementation, so there wasn't much pushback against stabilization.</p>",
        "id": 245623132,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1626032335
    },
    {
        "content": "<p>And ironically rustc/std wasn't even using that feature.</p>",
        "id": 245623144,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1626032383
    },
    {
        "content": "<p>I'm pretty aggressive about using unstable features in my private projects. My codebase isn't going to be working on stable anytime soon so I might as well take advantage of all the unstable features. The code is still being actively developed and maintained so it isn't much trouble to fix the code if breakage occurs.</p>",
        "id": 245625848,
        "sender_full_name": "Amanieu",
        "timestamp": 1626036695
    },
    {
        "content": "<p>Been burned by unstable features recently (<code>never_type</code>, <code>external_doc</code>, <code>const_fn</code> in particular) so been moving affected repositories to beta/stable recently, myself. I do have some features I would like stabilized (<code>Once</code>, <code>unboxed_closures</code> for example), but I also don't feel too strongly about it, because especially as far as library features are concerned, most of the time there's a crate in the ecosystem that can provide equivalent functionality.</p>",
        "id": 245626714,
        "sender_full_name": "nagisa",
        "timestamp": 1626037369
    },
    {
        "content": "<p>Features I'm using: <code>is_sorted, maybe_uninit_slice, maybe_uninit_ref, maybe_uninit_extra, vec_spare_capacity, maybe_uninit_ref, thread_local, asm, naked_functions, iter_partition_in_place, alloc_error_handler, atomic_mut_ptr, never_type, const_fn_trait_bound</code></p>",
        "id": 245627925,
        "sender_full_name": "Amanieu",
        "timestamp": 1626038525
    },
    {
        "content": "<p>Plus a bunch of unstable rustc flags (<code>-Zinstrument-coverage</code>, JSON targets) &amp; cargo features (<code>--profile</code>, <code>--config</code>, resolver v2)</p>",
        "id": 245627967,
        "sender_full_name": "Amanieu",
        "timestamp": 1626038635
    },
    {
        "content": "<p>I always use nightly because rustfmt holds back on the good stuff, but for rust itself i avoid nightly features as much as i can. I usually just don't even write the code at all rather than turning on a nightly feature, unless that feature is completely critical to getting something done (eg: inline_asm).</p>",
        "id": 245653028,
        "sender_full_name": "Lokathor",
        "timestamp": 1626074601
    }
]