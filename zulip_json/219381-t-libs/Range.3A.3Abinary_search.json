[
    {
        "content": "<p>I've long wanted to add a binary search to <code>Range</code> because of how useful binary search can be even without a slice, how could this best be approached?<br>\nIt doesn't seem possible to use the <code>Step</code> trait in its current form for this, so I see a couple options:</p>\n<ul>\n<li>modify the <code>Step</code> trait</li>\n<li>add a new trait</li>\n<li>use a macro to implement it for all integer types</li>\n<li>only implement it for <code>Range&lt;usize&gt;</code> (since that's by far the most important one)<br>\nNone of these seem great, I'm leaning towards the last option because it leaves all other options open, but I'm hoping there's another option I haven't thought of.</li>\n</ul>",
        "id": 185397936,
        "sender_full_name": "Tim Vermeulen",
        "timestamp": 1578763398
    },
    {
        "content": "<p>What do you mean by binary search on range? What would you be searching <em>in</em>?</p>",
        "id": 185398141,
        "sender_full_name": "simulacrum",
        "timestamp": 1578763701
    },
    {
        "content": "<p>You'd be searching in the range itself. I should have been more specific, this only works with <code>binary_search_by</code> and <code>binary_search_by_key</code>, <code>binary_search</code> as it's currently on <code>[T]</code> would indeed make no sense</p>",
        "id": 185398482,
        "sender_full_name": "Tim Vermeulen",
        "timestamp": 1578764378
    },
    {
        "content": "<p>The signature of <code>Range&lt;usize&gt;::binary_search_by</code> would be</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">binary_search_by</span><span class=\"o\">&lt;</span><span class=\"n\">F</span>: <span class=\"nb\">FnMut</span><span class=\"p\">(</span><span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Ordering</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span>: <span class=\"nc\">F</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>and using that <code>[T]::binary_search_by</code> could be reimplemented using something like <code>(0..self.len()).binary_search_by(|i| f(self[i]))</code></p>",
        "id": 185398597,
        "sender_full_name": "Tim Vermeulen",
        "timestamp": 1578764539
    },
    {
        "content": "<p>is it something like Go's <a href=\"https://godoc.org/sort#Search\" target=\"_blank\" title=\"https://godoc.org/sort#Search\"><code>sort.Search</code></a>?</p>",
        "id": 185398810,
        "sender_full_name": "kennytm",
        "timestamp": 1578764962
    },
    {
        "content": "<p>It does seem like it! The main difference being that by having the closure return an <code>Ordering</code>, the function is able to return <code>Ok</code>/<code>Err</code> depending on whether the search \"succeeded\"</p>",
        "id": 185399054,
        "sender_full_name": "Tim Vermeulen",
        "timestamp": 1578765369
    }
]