[
    {
        "content": "<p>Hey all,</p>\n<p>There's been a few feature requests and pull requests that are centered on accessing the remainder of a split iterator. Currently, I have been able to find <code>as_str()</code> for <code>std::string::Split</code> (see tracking <a href=\"https://github.com/rust-lang/rust/issues/77998\">#77998</a>) and newly suggested is the <code>as_slice()</code> iterator put forward in PR <a href=\"https://github.com/rust-lang/rust/issues/92287\">#92287</a>, which seems to fill the same role for slices. </p>\n<p>Would it be worth looking into implementing a more general implementation of this that would cover all \"split\" types?</p>",
        "id": 266174606,
        "sender_full_name": "Patrick Poitras",
        "timestamp": 1640613732
    },
    {
        "content": "<p>Once we have settled on one it probably translates well to the others? Or are there benefits from doing it all at once (\"more general implementation\")?</p>",
        "id": 266174985,
        "sender_full_name": "The 8472",
        "timestamp": 1640614096
    },
    {
        "content": "<p>My only concern here was consistency, but it seems that split methods have either \"split_off\"-like behavior, where it only splits once (e.g. <code>Vec::split_off</code>, <code>String::split_off</code>, <code>linked_list::CursorMut::split_before/split_after</code>). These ones we don't need to implement this at all. The only other one we really need to look at would be <code>std::io::Split</code>. Given that, we can probably do them one at a time like <span class=\"user-mention\" data-user-id=\"330154\">@The 8472</span> suggested</p>",
        "id": 266175994,
        "sender_full_name": "Patrick Poitras",
        "timestamp": 1640614823
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451171\">Patrick Poitras</span> has marked this topic as resolved.</p>",
        "id": 266176011,
        "sender_full_name": "Notification Bot",
        "timestamp": 1640614850
    },
    {
        "content": "<p>It's still useful linking them as prior art.</p>",
        "id": 266176288,
        "sender_full_name": "The 8472",
        "timestamp": 1640615148
    }
]