[
    {
        "content": "<p>(I imagine this has been discussed in some place before, but I'm not sure where.)</p>\n<p>I think we should start working towards a <code>.collect_array()</code> on a (subset of) iterators, through a new trait. Something like <code>ExactSizeIterator</code>, except the size is (an associated) const. <code>ConstSizeIterator</code> witht <code>const SIZE: usize;</code> or something. Then we can easily implement that in pretty much all cases where we have an <code>ExactSizeIterator</code>, such as for arrays and for <code>Map</code> adapters over types that implement that trait, etc. Then when const generics get more advanced, we'll be able to use it for <code>chain</code> and <code>zip</code> in the future too to allow for generic array concatenation etc.</p>",
        "id": 274716898,
        "sender_full_name": "Mara",
        "timestamp": 1646844923
    },
    {
        "content": "<p>Oh, <span class=\"user-mention\" data-user-id=\"326176\">@Boxy [she/her]</span> is telling me this might not be possible yet, even for simple cases like <code>map</code></p>",
        "id": 274717550,
        "sender_full_name": "Mara",
        "timestamp": 1646845189
    },
    {
        "content": "<p>we can't use the current <code>Iterator</code> types for this as <code>next</code> changes the available length without changing the type. adding this to std right away doesn't feel like the best path forward to me. I think that working on fixed size iterators makes more sense outside of std rn</p>",
        "id": 274722310,
        "sender_full_name": "lcnr",
        "timestamp": 1646846906
    }
]