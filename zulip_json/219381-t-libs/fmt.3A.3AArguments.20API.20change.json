[
    {
        "content": "<p>A recent commit at <a href=\"https://github.com/rust-lang/rust/pull/74056\">https://github.com/rust-lang/rust/pull/74056</a> seems to have \"broken\" the runtime-fmt crate (<a href=\"https://docs.rs/runtime-fmt/0.4.1/runtime_fmt/\">https://docs.rs/runtime-fmt/0.4.1/runtime_fmt/</a>). This was relying on unstable APIs (<code>new_v1_formatted()</code> and <code>new_v1()</code>), so it isn't a surprise it is now in this state. The error it spits out is:</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0495]: cannot infer an appropriate lifetime for autoref due to conflicting requirements\n   --&gt; src/lib.rs:265:33\n</code></pre></div>\n\n\n<p>And this is because libstd's <code>Arguments</code> now accepts a <code>pieces: &amp;'a [&amp;'static str]</code> in <code>new_v1_formatted()</code>/<code>new_v1()</code>, instead of a <code>pieces: &amp;'a [&amp;'a str]</code>.</p>\n<p>However, I'm unable to find an alternative to this. Aside from completely changing the runtime-fmt crate. Any thoughts on this?</p>",
        "id": 209797660,
        "sender_full_name": "Lurker",
        "timestamp": 1599839092
    },
    {
        "content": "<p>Or my main concern, was this something that was being accidentally \"supported\" that's no longer supported?</p>",
        "id": 209798322,
        "sender_full_name": "Lurker",
        "timestamp": 1599839388
    },
    {
        "content": "<p>Moving this over to <a class=\"stream\" data-stream-id=\"219381\" href=\"/#narrow/stream/219381-t-libs\">#t-libs</a></p>",
        "id": 209799026,
        "sender_full_name": "simulacrum",
        "timestamp": 1599839728
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"182449\" href=\"/#narrow/stream/182449-t-compiler.2Fhelp/topic/fmt.3A.3AArguments.20API.20change\">#t-compiler/help &gt; fmt::Arguments API change</a> by <span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span></p>",
        "id": 209799045,
        "sender_full_name": "Notification Bot",
        "timestamp": 1599839743
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"317934\">@Lurker</span> You can pass non-<code>'static</code> strings via <code>args</code> instead of <code>pieces</code>.</p>",
        "id": 209801201,
        "sender_full_name": "Amanieu",
        "timestamp": 1599840686
    },
    {
        "content": "<p>The rationale for changing the lifetime to <code>'static</code> is that it allows libraries using <code>as_str</code> (e.g. loggers) to pass the string to other threads without needing to worry about lifetimes.</p>",
        "id": 209801461,
        "sender_full_name": "Amanieu",
        "timestamp": 1599840796
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> Indeed, but in this case, the <code>runtime-fmt</code> crate is sort of mimicking the underlying API - it composes its own <code>pieces</code>, <code>args</code> and <code>fmt</code> to later pass it to <code>Arguments::new_v1_formatted()</code> and <code>Arguments::new_v1()</code>.</p>",
        "id": 209803733,
        "sender_full_name": "Lurker",
        "timestamp": 1599841845
    },
    {
        "content": "<p>It was fine while <code>pieces</code> was a slice of <code>&amp;'a str</code>, but now it's a slice of <code>&amp;'static str</code>, I'm not seeing a way to change the way <code>pieces</code> are handled without changing the API.</p>",
        "id": 209803748,
        "sender_full_name": "Lurker",
        "timestamp": 1599841853
    },
    {
        "content": "<p>Can't you just inject a new arg between the existing ones?</p>",
        "id": 209809136,
        "sender_full_name": "Amanieu",
        "timestamp": 1599844620
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"317934\">Lurker</span> <a href=\"#narrow/stream/219381-t-libs/topic/fmt.3A.3AArguments.20API.20change/near/209798322\">said</a>:</p>\n<blockquote>\n<p>Or my main concern, was this something that was being accidentally \"supported\" that's no longer supported?</p>\n</blockquote>\n<p>Looks like it, yes -- that is basically true for any use of unstable APIs that are not actually intended to be stabilized.</p>",
        "id": 209871837,
        "sender_full_name": "RalfJ",
        "timestamp": 1599900720
    },
    {
        "content": "<p>and these functions are <code>doc(hidden)</code> and don't have a tracking issue, so... quite clearly not intended for stabilization ;)</p>",
        "id": 209871895,
        "sender_full_name": "RalfJ",
        "timestamp": 1599900789
    },
    {
        "content": "<p>I assume those functions will be made private once macro hygiene is good enough to support that</p>",
        "id": 209871935,
        "sender_full_name": "RalfJ",
        "timestamp": 1599900862
    },
    {
        "content": "<p>Thanks, this is the downside of building on unstable APIs. I think longer term I'll move away from runtime-fmt since it is becoming harder to keep up to date with nightly and with new bumps I end up needing to fix something.</p>",
        "id": 210002755,
        "sender_full_name": "Lurker",
        "timestamp": 1600089558
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> I had a look but I don't see how that'd be possible. The <code>args</code> are just a list of <code>Argument</code>s, which has an <code>position</code> and a <code>format</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>pub struct Argument&lt;&#39;a&gt; {\n   pub position: Position&lt;&#39;a&gt;,\n   pub format: FormatSpec&lt;&#39;a&gt;,\n}\n</code></pre></div>\n\n\n<p>So I don't see an easy way of just chuck in a  <code>piece</code> (of <code>str</code> type) into a slice of <code>Argument</code>s. Unless I'm misunderstanding.</p>",
        "id": 210004602,
        "sender_full_name": "Lurker",
        "timestamp": 1600090138
    },
    {
        "content": "<p>I'd recommend notifying the maintainer, but it's to be expected. Arguments is mostly not intended to be touched directly, you're only really supposed to use <code>format_args!</code> and now I guess <code>as_str</code>. It's on the maintainer's head, more or less, for exposing an unstable API.</p>",
        "id": 210005890,
        "sender_full_name": "Jubilee",
        "timestamp": 1600090713
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"317934\">@Lurker</span> It's a list of <code>ArgumentV1</code> which holds an opaque type and a function pointer to format it.</p>",
        "id": 210011999,
        "sender_full_name": "Amanieu",
        "timestamp": 1600093358
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"317934\">@Lurker</span> <a href=\"https://github.com/rust-lang/rust/pull/74056#issuecomment-659612289\">see here</a> for some code that creates an <code>ArgumentV1</code> from <code>&amp;str</code></p>",
        "id": 210031654,
        "sender_full_name": "RalfJ",
        "timestamp": 1600101807
    },
    {
        "content": "<p>Good point, I was looking into <code>runtime-fmt</code>s Argument struct itself, but if abstract over I should be able to compose a <code>runtime-fmt</code> Piece / Argument and then push that into the stdlib's <code>Arguments</code> itself.</p>",
        "id": 210398271,
        "sender_full_name": "Lurker",
        "timestamp": 1600353170
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> I'll contact the maintainer, but was looking for a quick fix first as the maintainer seems absent (issue <a href=\"https://github.com/SpaceManiac/runtime-fmt/issues/13\">https://github.com/SpaceManiac/runtime-fmt/issues/13</a>, for example, has been open for a while).</p>",
        "id": 210398476,
        "sender_full_name": "Lurker",
        "timestamp": 1600353259
    }
]