[
    {
        "content": "<p>Hello everyone!<br>\nIs there a reason <code>impl From&lt;$int&gt; for RangeInclusive&lt;$int&gt;</code> is not implemented in the standard library? Would it probably be accepted if I added such an impl?</p>",
        "id": 205281511,
        "sender_full_name": "marmeladema",
        "timestamp": 1595965469
    },
    {
        "content": "<p>do you also want to implement <code>impl From&lt;$int&gt; for RangeFrom&lt;$int&gt;</code>?</p>",
        "id": 205281596,
        "sender_full_name": "lcnr",
        "timestamp": 1595965518
    },
    {
        "content": "<p>Well, I currently don't need it, but if it makes sense, I can group both impl in the same tracking issue / PR.</p>",
        "id": 205281724,
        "sender_full_name": "marmeladema",
        "timestamp": 1595965574
    },
    {
        "content": "<p>imo the latter doesn't really make sense</p>",
        "id": 205281820,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1595965630
    },
    {
        "content": "<p>turning an int into a range that contains just that int seems fine though</p>",
        "id": 205281844,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1595965644
    },
    {
        "content": "<p>wait, so RangeInclusive impls would be <code>x -&gt; x..=x</code>?</p>",
        "id": 205281930,
        "sender_full_name": "lcnr",
        "timestamp": 1595965683
    },
    {
        "content": "<p>Yes</p>",
        "id": 205281948,
        "sender_full_name": "marmeladema",
        "timestamp": 1595965692
    },
    {
        "content": "<p>hmm, that seems fine for me, I somehow thought <code>RangeInclusive</code> was <code>x -&gt; ..=x</code> which I don't want (edit: I actually thought of something like <code>0..=x</code>, but w/e)</p>",
        "id": 205282084,
        "sender_full_name": "lcnr",
        "timestamp": 1595965766
    },
    {
        "content": "<p>I know its not terribly useful i guess, but in my case, I have some macros that converts some type to some other type using the From trait and I have to wrap RangeInclusive to be able to implement the From trait</p>",
        "id": 205282136,
        "sender_full_name": "marmeladema",
        "timestamp": 1595965799
    },
    {
        "content": "<p>It’s not obvious to me that this conversion <em>should</em> exist in a general purpose trait</p>",
        "id": 205334695,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1596015116
    },
    {
        "content": "<p>In some sense <code>4_u8</code> is/means \"the same thing\" as <code>4_u32</code> so that conversion should exist, but that’s not the case here</p>",
        "id": 205334783,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1596015165
    },
    {
        "content": "<p>Sounds not so good to me but I think it may confuse other to think that <code>x</code> means <code>0..=x</code> rather than <code>x..=x</code>. Potential footgun, but I think most cases they may rather implement <code>Index&lt;usize&gt;</code> when they need <code>x</code> to be <code>x..=x</code> for <code>Index&lt;RangeInclusive&lt;usize&gt;&gt;</code>. Not sure where others still need <code>RangeInclusive&lt;$num&gt;</code>. <span class=\"user-mention\" data-user-id=\"281572\">@marmeladema</span> Do you have a use case for this?</p>",
        "id": 205503080,
        "sender_full_name": "pickfire",
        "timestamp": 1596127711
    },
    {
        "content": "<p>i feel like <code>x..=x</code> is simpler to type out than trying to remember what a particular From impl thinks it should be doing.</p>",
        "id": 205512203,
        "sender_full_name": "Lokathor",
        "timestamp": 1596132504
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281572\">@marmeladema</span> Maybe experiment with a <code>RangeInclusive::single(x)</code> method? That way it's not insta-stable, so has a lower bar.  And with <code>Step</code>, <code>Range::single(x)</code> could be made to work too...</p>",
        "id": 205668127,
        "sender_full_name": "scottmcm",
        "timestamp": 1596263648
    },
    {
        "content": "<p>That would not really help me as I am dealing with a macro that converts an enum which olds different kind of data into another enum which holds \"ranges\" of that data using the <code>Into</code> trait. It's not a big issue, i wrapped <code>InclusiveRange</code> into a new type and everyone is happy.</p>\n<p>Since people in this thread seem to be confused about such an <code>Impl</code> being the standard library, I won't bother proposing this change but thank you everyone for your feedbacks <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 205673052,
        "sender_full_name": "marmeladema",
        "timestamp": 1596273270
    }
]