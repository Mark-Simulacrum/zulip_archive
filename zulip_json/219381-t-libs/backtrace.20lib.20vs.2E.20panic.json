[
    {
        "content": "<p>As I'm working on the backtrace config without environment variables, one question that comes to mind is if we <em>want</em> to separate the default policy for capturing/displaying backtraces between panics and the (currently unstable) std::backtrace::Backtrace type. If we don't, then the API design becomes rather simpler -- I'm curious if folks have thoughts on this question.</p>\n<p>I'm going to try and dig up with RUST_LIB_BACKTRACE was introduced as a separate env variable for the unstable API as it stands today, in the meantime.</p>\n<p>cc <span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby [she/her]</span></p>",
        "id": 269322510,
        "sender_full_name": "simulacrum",
        "timestamp": 1643144132
    },
    {
        "content": "<p>Like you said, the design is significantly simpler if we make the backtrace capture default a property of backtrace itself and not additionally a feature on the default panic handler</p>",
        "id": 269323015,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643144341
    },
    {
        "content": "<p>Assuming that's what you meant by having a separate default policy</p>",
        "id": 269323083,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643144374
    },
    {
        "content": "<p>I can definitely see the value to having a different configuration for panics, which are in my mind more frequently intended for developers and debugging rather than for users</p>",
        "id": 269323307,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643144433
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 269323653,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643144559
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 269323693,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643144576
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 269323771,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643144609
    },
    {
        "content": "<p>Well, I just meant having a single toggle rather than two separate ones -- I suppose you can think of it as being attached to Backtrace rather than panic handlers or whatever else, but the important distinction is one vs. two :)</p>",
        "id": 269324074,
        "sender_full_name": "simulacrum",
        "timestamp": 1643144722
    },
    {
        "content": "<p>Yeah thats precisely what I meant too. Okay perfect! I think we understand each other</p>",
        "id": 269324117,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643144746
    },
    {
        "content": "<p>What's your preference Mark?</p>",
        "id": 269324207,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643144770
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby [she/her]</span> <a href=\"#narrow/stream/219381-t-libs/topic/backtrace.20lib.20vs.2E.20panic/near/269323307\">said</a>:</p>\n<blockquote>\n<p>I can definitely see the value to having a different configuration for panics, which are in my mind more frequently intended for developers and debugging rather than for users</p>\n</blockquote>\n<p>I'm not sure I understand this -- for library backtraces, we don't control whether to do any printing (that's done by whatever calls Backtrace::capture)</p>",
        "id": 269324323,
        "sender_full_name": "simulacrum",
        "timestamp": 1643144821
    },
    {
        "content": "<p>I think my current inclination is to have a single API that controls the capture behavior -- there's two actual knobs to configure, in theory:</p>\n<ul>\n<li>Whether to capture (a relatively fast, but not trivial operation)</li>\n<li>How to print (full or short today, potentially more options eventually)</li>\n</ul>",
        "id": 269324502,
        "sender_full_name": "simulacrum",
        "timestamp": 1643144889
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/219381-t-libs/topic/backtrace.20lib.20vs.2E.20panic/near/269324323\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby [she/her]</span> <a href=\"#narrow/stream/219381-t-libs/topic/backtrace.20lib.20vs.2E.20panic/near/269323307\">said</a>:</p>\n<blockquote>\n<p>I can definitely see the value to having a different configuration for panics, which are in my mind more frequently intended for developers and debugging rather than for users</p>\n</blockquote>\n<p>I'm not sure I understand this -- for library backtraces, we don't control whether to do any printing (that's done by whatever calls Backtrace::capture)</p>\n</blockquote>\n<p>I'm referring to how <code>RUST_BACKTRACE</code> only controls if we display a Backtrace in the panic handler, but <code>Backtrace::capture</code> is controlled by <code>RUST_LIB_BACKTRACE</code> (or maybe some combination of both env variables? I can't even remember)</p>",
        "id": 269324532,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643144912
    },
    {
        "content": "<p>Backtrace::capture is controlled by RUST_LIB_BACKTRACE, if set, with a fallback to RUST_BACKTRACE, today</p>",
        "id": 269324564,
        "sender_full_name": "simulacrum",
        "timestamp": 1643144937
    },
    {
        "content": "<p>so i guess I'm saying, I can maybe see some value to the fact that today we can do <code>RUST_BACKTRACE=1 RUST_LIB_BACKTRACE=0</code></p>",
        "id": 269324658,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643144980
    },
    {
        "content": "<p>In general the primary reason to not enable capturing library backtraces but <em>do</em> enable panic captures is that library backtraces may be \"commonly\" captured -- in something resembling a hot path, unlike panics (which presumably never happen)</p>",
        "id": 269324694,
        "sender_full_name": "simulacrum",
        "timestamp": 1643145001
    },
    {
        "content": "<p>though honestly I think its very strange that its easier to only enable lib backtraces than it is to only enable panic backtraces</p>",
        "id": 269324784,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643145020
    },
    {
        "content": "<p>that seems backwards</p>",
        "id": 269324793,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643145024
    },
    {
        "content": "<p>maybe I'm just not correctly intuiting when ppl would want to enable one vs the other tho</p>",
        "id": 269324828,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643145044
    },
    {
        "content": "<p>I suspect the Backtrace::capture API is something of a wart, in practice, in terms of depending on a single env var</p>",
        "id": 269324900,
        "sender_full_name": "simulacrum",
        "timestamp": 1643145087
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/219381-t-libs/topic/backtrace.20lib.20vs.2E.20panic/near/269324694\">said</a>:</p>\n<blockquote>\n<p>In general the primary reason to not enable capturing library backtraces but <em>do</em> enable panic captures is that library backtraces may be \"commonly\" captured -- in something resembling a hot path, unlike panics (which presumably never happen)</p>\n</blockquote>\n<p>yea, that and the fact that library backtraces are more likely to be shown to a user are why I'd expect ppl to learn towards enabling panic backtraces if they're only going to enable it in one place</p>",
        "id": 269324908,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643145088
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/219381-t-libs/topic/backtrace.20lib.20vs.2E.20panic/near/269324900\">said</a>:</p>\n<blockquote>\n<p>I suspect the Backtrace::capture API is something of a wart, in practice, in terms of depending on a single env var</p>\n</blockquote>\n<p>you mean depending on two env vars?</p>",
        "id": 269324927,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643145101
    },
    {
        "content": "<p>It feels like it wants to be more of a RUST_LOG with per-module/per-function</p>",
        "id": 269324938,
        "sender_full_name": "simulacrum",
        "timestamp": 1643145108
    },
    {
        "content": "<p>oh interesting!</p>",
        "id": 269324962,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643145119
    },
    {
        "content": "<p>this kinda gets back to my earlier suggestion to have the backtrace capture be hookable</p>",
        "id": 269325057,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643145154
    },
    {
        "content": "<p>I wouldn't expect library backtraces to be more commonly shown to users, I don't think -- it feels about the same vis-a-vis panic backtraces</p>",
        "id": 269325062,
        "sender_full_name": "simulacrum",
        "timestamp": 1643145157
    },
    {
        "content": "<p>so you could install your own capture test function that does act like rustlog by looking at the current module / function</p>",
        "id": 269325093,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643145171
    },
    {
        "content": "<p>eh, a function can't do that, you need a macro. log crate or tracing could provide a <code>trace_with_backtrace!(...)</code> already, if we stabilized the type, just calling force_capture</p>",
        "id": 269325194,
        "sender_full_name": "simulacrum",
        "timestamp": 1643145213
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/219381-t-libs/topic/backtrace.20lib.20vs.2E.20panic/near/269325062\">said</a>:</p>\n<blockquote>\n<p>I wouldn't expect library backtraces to be more commonly shown to users, I don't think -- it feels about the same vis-a-vis panic backtraces</p>\n</blockquote>\n<p>interesting</p>",
        "id": 269325197,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643145213
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/219381-t-libs/topic/backtrace.20lib.20vs.2E.20panic/near/269325194\">said</a>:</p>\n<blockquote>\n<p>eh, a function can't do that, you need a macro. log crate or tracing could provide a <code>trace_with_backtrace!(...)</code> already, if we stabilized the type, just calling force_capture</p>\n</blockquote>\n<p><span aria-label=\"smiling devil\" class=\"emoji emoji-1f608\" role=\"img\" title=\"smiling devil\">:smiling_devil:</span> simply inspect the backtrace frames after capture then decide if you should throw it away :D</p>",
        "id": 269325375,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643145264
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/219381-t-libs/topic/backtrace.20lib.20vs.2E.20panic/near/269324502\">said</a>:</p>\n<blockquote>\n<p>I think my current inclination is to have a single API that controls the capture behavior -- there's two actual knobs to configure, in theory:</p>\n<ul>\n<li>Whether to capture (a relatively fast, but not trivial operation)</li>\n<li>How to print (full or short today, potentially more options eventually)</li>\n</ul>\n</blockquote>\n<p>regardless, I think I am have the same preference</p>",
        "id": 269325467,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643145308
    },
    {
        "content": "<p>make backtrace capture configurability a property of Backtrace, then if users need to customize backtrace capture further in their error types or panics they can do so in their own error constructors / panic handler</p>",
        "id": 269325534,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643145352
    },
    {
        "content": "<p>I guess on the second bullet point</p>",
        "id": 269325604,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643145368
    },
    {
        "content": "<p>if we add a configurability knob for the format separate from the capture setting, should we also provide a way to override it?</p>",
        "id": 269325645,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643145386
    },
    {
        "content": "<p>like, <code>Backtrace::force_capture(format)</code></p>",
        "id": 269325674,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643145399
    },
    {
        "content": "<p>No, I don't think it should be a property of Backtrace -- having that depend on environment variables and have a force_capture vs. regular capture feels weird to me.</p>\n<p>I'd suggest just having a single hook to configure panic behavior, maybe even just a boolean (capture vs. not), with the default short backtrace printing</p>",
        "id": 269325721,
        "sender_full_name": "simulacrum",
        "timestamp": 1643145416
    },
    {
        "content": "<p>oh so you mean get rid of <code>force_capture</code> all together</p>",
        "id": 269325783,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643145440
    },
    {
        "content": "<p>(the format is something that can be decided at formatting time, i.e., in Debug or Display,)</p>",
        "id": 269325787,
        "sender_full_name": "simulacrum",
        "timestamp": 1643145441
    },
    {
        "content": "<p>and only have the configurability in the panic handler</p>",
        "id": 269325793,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643145447
    },
    {
        "content": "<p>that sounds great too</p>",
        "id": 269325800,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643145452
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/219381-t-libs/topic/backtrace.20lib.20vs.2E.20panic/near/269325787\">said</a>:</p>\n<blockquote>\n<p>(the format is something that can be decided at formatting time, i.e., in Debug or Display,)</p>\n</blockquote>\n<p>debug vs display doesn't currently correspond to full vs short</p>",
        "id": 269325845,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643145476
    },
    {
        "content": "<p>the debug format is a custom array-like output</p>",
        "id": 269325919,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643145494
    },
    {
        "content": "<p>Yeah, so I'm envisioning that we:</p>\n<ul>\n<li>Remove RUST_LIB_BACKTRACE as a knob, with Backtrace::capture always capturing (i.e., basically the force_capture of today).</li>\n<li>Expose <code>std::panic::config::set_capture_backtrace(bool)</code>, or so, to configure that behavior</li>\n</ul>",
        "id": 269325977,
        "sender_full_name": "simulacrum",
        "timestamp": 1643145524
    },
    {
        "content": "<p><span aria-label=\"100\" class=\"emoji emoji-1f4af\" role=\"img\" title=\"100\">:100:</span></p>",
        "id": 269326010,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643145537
    },
    {
        "content": "<p>I like it</p>",
        "id": 269326015,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643145539
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby [she/her]</span> <a href=\"#narrow/stream/219381-t-libs/topic/backtrace.20lib.20vs.2E.20panic/near/269325845\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/219381-t-libs/topic/backtrace.20lib.20vs.2E.20panic/near/269325787\">said</a>:</p>\n<blockquote>\n<p>(the format is something that can be decided at formatting time, i.e., in Debug or Display,)</p>\n</blockquote>\n<p>debug vs display doesn't currently correspond to full vs short</p>\n</blockquote>\n<p>yes, I know, I mean that it's not something that affects the capture function, it can be configured later -- maybe with the alternate formatting specifier, for example.</p>",
        "id": 269326050,
        "sender_full_name": "simulacrum",
        "timestamp": 1643145550
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 269326079,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643145560
    },
    {
        "content": "<p>Ok, I'll adjust the PR with that much simpler API (though not the first bullet, I can take that to a separate PR, seems orthogonal)</p>",
        "id": 269326140,
        "sender_full_name": "simulacrum",
        "timestamp": 1643145589
    },
    {
        "content": "<p>sounds good, I might also add <code>std::panic::config::get_capture_backtrace() -&gt; bool</code> to the todo list</p>",
        "id": 269326337,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1643145667
    },
    {
        "content": "<p>yeah, sure</p>",
        "id": 269328594,
        "sender_full_name": "simulacrum",
        "timestamp": 1643146677
    },
    {
        "content": "<p>maybe it should be a static with a wrapper around an atomicbool, exposing a set/get. not sure yet.</p>",
        "id": 269328671,
        "sender_full_name": "simulacrum",
        "timestamp": 1643146698
    }
]