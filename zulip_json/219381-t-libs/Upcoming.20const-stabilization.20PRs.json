[
    {
        "content": "<p>Now that <code>if</code> and <code>match</code> can be used in <code>const fn</code> on stable, there are a large number of standard library functions that can be const-stabilized. Someone on GithHub has indicated that they want to take this on, so please ping me or someone else from wg-const-eval if a PR like this pops up in your feed.</p>",
        "id": 208503477,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1598820204
    },
    {
        "content": "<p>Speaking of these, I don't think <a href=\"https://github.com/rust-lang/rust/pull/75463\">https://github.com/rust-lang/rust/pull/75463</a> should have landed. Every stabilization requires FCP.</p>",
        "id": 208536048,
        "sender_full_name": "RalfJ",
        "timestamp": 1598865907
    },
    {
        "content": "<p>I suggest the PR be reverted, and then re-attempted following process. Cc <span class=\"user-group-mention\" data-user-group-id=\"2645\">@T-libs</span></p>",
        "id": 208536077,
        "sender_full_name": "RalfJ",
        "timestamp": 1598865938
    },
    {
        "content": "<p>That's my bad. I don't do a lot of libs stuff and those methods are trivial. I'll ask CDirk to batch all their PRs into one maybe? Otherwise there's going to be a lot of checkboxes.</p>",
        "id": 208575436,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1598888815
    },
    {
        "content": "<p>Actually, is there any reason going forward to require T-libs approval on const-stabilization PRs? The standard library implementation is now the domain of the compiler team, and the only reason I'm aware of to hold off on making something <code>const</code> is that it restricts the potential implementations.</p>",
        "id": 208576528,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1598889259
    },
    {
        "content": "<p>Not saying this should have applied to <a href=\"https://github.com/rust-lang/rust/issues/75463\">#75463</a>, which is still a process break, albeit a minor one.</p>",
        "id": 208576643,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1598889316
    },
    {
        "content": "<p><code>const</code>-ness is part of the API, which is still managed by <code>T-libs</code></p>",
        "id": 208576883,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1598889405
    },
    {
        "content": "<p>Sure, but if the libs team is no longer responsible for the implementation, what value are they adding?</p>",
        "id": 208577132,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1598889505
    },
    {
        "content": "<p>we add value by deliberating on the API itself, which is the thing we promise stability for. constness is part of the API, so it requires FCP by the libs team.</p>\n<p>also, in times past, we have _not_ accepted blanket PRs to constify everything. (it has been tried before.) we would rather see a more methodical approach where each API (or perhaps small groups of related APIs) are discussed individually. the reason for this is that once we mark a method or function as <code>const</code>, we can _never_ write an implementation for that function that isn't const. that's a potentially major limitation and requires careful scrutiny.</p>",
        "id": 208578196,
        "sender_full_name": "BurntSushi",
        "timestamp": 1598889864
    },
    {
        "content": "<p>Very well. I'm going to assign you to some PRs so that you can open MCPs on them (I don't think non-libs-team members can)</p>",
        "id": 208578738,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1598890068
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span> i'm on the libs team, but i took myself off of FCP checkboxes years ago. i don't have the bandwidth to deal with std PRs.</p>",
        "id": 208578968,
        "sender_full_name": "BurntSushi",
        "timestamp": 1598890140
    },
    {
        "content": "<p>Ah, I'll try <span class=\"user-mention\" data-user-id=\"204346\">@Ashley Mannix</span>  then? Although if you wanted to trigger the FCP that would be great.</p>",
        "id": 208579574,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1598890383
    },
    {
        "content": "<p>ye Ashley should be fine</p>",
        "id": 208581072,
        "sender_full_name": "DPC",
        "timestamp": 1598890947
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"118594\">ecstatic-morse</span> <a href=\"#narrow/stream/219381-t-libs/topic/Upcoming.20const-stabilization.20PRs/near/208577132\">said</a>:</p>\n<blockquote>\n<p>Sure, but if the libs team is no longer responsible for the implementation, what value are they adding?</p>\n</blockquote>\n<p>just like t-lang guards everything publicly/stably observable about the language itself, t-libs does the same for the library API. in both cases t-compiler is responsible for <em>implementation</em>, but that only covers the aspects that are not directly observable to the user, and aspects that are not subject to stability guarantees (e.g., lints).</p>",
        "id": 208594250,
        "sender_full_name": "RalfJ",
        "timestamp": 1598897268
    },
    {
        "content": "<p>Example: if another rust compiler were to come along, they'd ideally follow the same T-lang edicts about what \"is\" rust and they'd offer the same standard library that T-libs declares to be \"the\" standard library, but since they're an entirely separate compiler project they wouldn't have much to do with T-compiler (other than maybe command line flag compatibility or whatever).</p>",
        "id": 208601157,
        "sender_full_name": "Lokathor",
        "timestamp": 1598900415
    },
    {
        "content": "<p>† The same standard library signatures -- they could implement them differently (<code>T-libs-impl</code>), say by not using intrinsics in all the same situations, or not having the same lang items.</p>",
        "id": 208611612,
        "sender_full_name": "scottmcm",
        "timestamp": 1598905965
    },
    {
        "content": "<p>(though intrinsics are generally guarded by t-lang, at least when they add fundamentally new capabilities to the language. they are not just an implementation detail.)</p>",
        "id": 208652695,
        "sender_full_name": "RalfJ",
        "timestamp": 1598945316
    },
    {
        "content": "<p>(Right, some intrinsics make semantically-visible promises where lang definitely cares.  I was thinking more about things like <code>unchecked_add</code>, which an alternative implementation could just not have if it wanted, and just use a normal wrapping add in all those situations.  That's not necessarily a good QoI choice, but it's be a completely valid implementation.)</p>",
        "id": 208721121,
        "sender_full_name": "scottmcm",
        "timestamp": 1598981637
    },
    {
        "content": "<p>I got a bit distracted by safe transmute yesterday so will dig through the things I’m assigned to this afternoon :slight_smile:</p>",
        "id": 208775838,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1599017249
    }
]