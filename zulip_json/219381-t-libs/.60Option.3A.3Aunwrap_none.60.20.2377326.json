[
    {
        "content": "<p>I want to ensure that something is <code>None</code>, so I instinctively typed out <code>unwrap_none</code> and was dismayed that it was unstable. Could someone take a look at <a href=\"https://github.com/rust-lang/rust/issues/77326\">#77326</a> which stabilizes it? I know there were some concerns listed on a previous attempt at stabilization but this would be a really useful function and fairly self-contained. Thanks!</p>",
        "id": 218512023,
        "sender_full_name": "Noah Lev",
        "timestamp": 1606880132
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307537\">@Camelid</span> has anything changed since <a href=\"https://github.com/rust-lang/rust/pull/73077#issuecomment-643754745\">https://github.com/rust-lang/rust/pull/73077#issuecomment-643754745</a> ?</p>",
        "id": 218514793,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606884091
    },
    {
        "content": "<p>Not that I know of, but personally I disagree with that comment. I know we don't want the standard library to grow too big, but it's a pretty small method and it's much clearer and easier to use than:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">assert</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">some_long_function_chain</span><span class=\"p\">().</span><span class=\"n\">is_none</span><span class=\"p\">());</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 218748540,
        "sender_full_name": "Noah Lev",
        "timestamp": 1607026586
    },
    {
        "content": "<p><code>assert_eq!(some_long_function_chain(), None, \"message {}\", val);</code> has the avantage of having the <code>assert</code> at the start of the line and the message formatting is not done if there is no error, which a method accepting <code>&amp;str</code> would have to do to <em>before</em> calling <code>opt.expect_none(&amp;format!(\"message {}\", val));</code>.</p>",
        "id": 218752250,
        "sender_full_name": "Poliorcetics",
        "timestamp": 1607028436
    },
    {
        "content": "<p>I really don't like those methods</p>",
        "id": 218752364,
        "sender_full_name": "Poliorcetics",
        "timestamp": 1607028494
    },
    {
        "content": "<p>(the ones proposed for stabilisation)</p>",
        "id": 218752413,
        "sender_full_name": "Poliorcetics",
        "timestamp": 1607028520
    },
    {
        "content": "<p>personally I think the <code>assert!</code> is the easiest of all those three</p>",
        "id": 218757589,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607031247
    },
    {
        "content": "<p>I would say the <code>assert</code> family of macros in its entirety. It's commonly used, very well supported and tested (mostly by the thousand of lines of tests already using it).</p>\n<p>Also, <code>unwrap_none</code> seems like an anti pattern. You're not really unwrapping anything and that seem sketchy to me. <code>(Result|Option)::unwrap</code> I can understand, <code>Result::unwrap_err</code> too since you get something out of it</p>",
        "id": 218759077,
        "sender_full_name": "Poliorcetics",
        "timestamp": 1607032061
    },
    {
        "content": "<p>But <code>unwrap_none</code> ? All you get is an assertion, and I don't think we should start adding assertion-only methods on types</p>",
        "id": 218759181,
        "sender_full_name": "Poliorcetics",
        "timestamp": 1607032103
    }
]