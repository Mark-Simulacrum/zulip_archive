[
    {
        "content": "<p>Could someone take a look at <a href=\"https://github.com/rust-lang/rust/issues/73894\">https://github.com/rust-lang/rust/issues/73894</a> ? There's an async-signal-safety issue, and I think someone with libs experience should take a look at it.</p>",
        "id": 206636035,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597183020
    },
    {
        "content": "<p>I'll ask our glibc folks too</p>",
        "id": 206640113,
        "sender_full_name": "cuviper",
        "timestamp": 1597186063
    },
    {
        "content": "<p>I just looked at the implementation of abort in glibc, it looks signal-safe to me.</p>",
        "id": 206643834,
        "sender_full_name": "Amanieu",
        "timestamp": 1597188657
    },
    {
        "content": "<p>Hmm actually I can see an issue if it's used after <code>fork</code> in a multi-threaded process, it could deadlock itself trying to acquire the recursive lock.</p>",
        "id": 206643991,
        "sender_full_name": "Amanieu",
        "timestamp": 1597188803
    },
    {
        "content": "<p>Yeah, there's a comment to that effect in the manual sources:</p>\n<div class=\"codehilite\"><pre><span></span><code>@deftypefun void abort (void)\n@standards<span class=\"nb\">{</span>ISO, stdlib.h<span class=\"nb\">}</span>\n@safety<span class=\"nb\">{</span>@prelim<span class=\"nb\">{}</span>@mtsafe<span class=\"nb\">{}</span>@asunsafe<span class=\"nb\">{</span>@asucorrupt<span class=\"nb\">{}}</span>@acunsafe<span class=\"nb\">{</span>@aculock<span class=\"nb\">{}</span> @acucorrupt<span class=\"nb\">{}}}</span>\n@c The implementation takes a recursive lock and attempts to support\n@c calls from signal handlers, but if we&#39;re in the middle of flushing or\n@c using streams, we may encounter them in inconsistent states.\nThe @code<span class=\"nb\">{</span>abort<span class=\"nb\">}</span> function causes abnormal program termination.  This\ndoes not execute cleanup functions registered with @code<span class=\"nb\">{</span>atexit<span class=\"nb\">}</span> or\n@code<span class=\"nb\">{</span>on<span class=\"nb\">_</span>exit<span class=\"nb\">}</span>.\n</code></pre></div>",
        "id": 206644085,
        "sender_full_name": "cuviper",
        "timestamp": 1597188862
    },
    {
        "content": "<p>(the <code>@c</code> lines)</p>",
        "id": 206644179,
        "sender_full_name": "cuviper",
        "timestamp": 1597188962
    },
    {
        "content": "<p>It seems like we should just call the abort intrinsic instead and not worry about whatever the current glibc version is doing. Even if they fix the implementation we're still stuck supporting glibc versions that don't have that for a decade or whatever</p>",
        "id": 206704802,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1597244173
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243558\">@Steven Fackler</span> the upstream issue said it was just a problem with the docs and it had been async safe for a while</p>",
        "id": 206708969,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1597245911
    },
    {
        "content": "<p>Not sure how long 'a while' is though</p>",
        "id": 206709028,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1597245933
    },
    {
        "content": "<p>Except that it takes out a lock, right?</p>",
        "id": 206709029,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1597245933
    },
    {
        "content": "<p>Ah ok yeah</p>",
        "id": 206709126,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1597245975
    },
    {
        "content": "<p>'a while' is 2.27</p>",
        "id": 206709194,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1597246009
    },
    {
        "content": "<p>A process dying with a SIGABRT is much more user-friendly than dying with a SIGILL (which is what <code>intrinsics::abort</code> does).</p>",
        "id": 206721055,
        "sender_full_name": "Amanieu",
        "timestamp": 1597251532
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> It is, but a process hitting the rare case where it deadlocks internally or otherwise breaks due to concurrency issues is even less friendly.</p>",
        "id": 206722266,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597252172
    },
    {
        "content": "<p>How would a user ever interact with the child processes if it aborts pre-exec?</p>",
        "id": 206724289,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1597253127
    },
    {
        "content": "<p>To get the deadlock you need one thread to abort at the exact same time a <code>fork</code> is happening in another thread. And then you need to have the child process also abort itself.</p>",
        "id": 206772093,
        "sender_full_name": "Amanieu",
        "timestamp": 1597281701
    },
    {
        "content": "<p>These circumstances are exceedingly rare.</p>",
        "id": 206772124,
        "sender_full_name": "Amanieu",
        "timestamp": 1597281723
    },
    {
        "content": "<p>still seems like a shame that such failure conditions exist</p>",
        "id": 206798333,
        "sender_full_name": "RalfJ",
        "timestamp": 1597313273
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> Most race conditions do tend to be exceedingly rare; that's all the <em>more</em> reason to avoid them, because they also tend to be hard to debug or diagnose.</p>",
        "id": 206848365,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597341541
    },
    {
        "content": "<p>An abort race means you already have bad things going on. Plus only the child can deadlock, so things like supervised restart should still work after the parent death.</p>\n<p>So the race failure ultimately just means you'd have a deadlocked orphan that was already trying to die.</p>",
        "id": 206855604,
        "sender_full_name": "cuviper",
        "timestamp": 1597345199
    },
    {
        "content": "<p>sometimes programming leads to some colorful sentences</p>",
        "id": 206855991,
        "sender_full_name": "Lokathor",
        "timestamp": 1597345349
    },
    {
        "content": "<p>I'd still argue libc should consider this a bug. for example, they could try_acquire the lock a couple times (is <code>sleep</code> async-signal-safe?), and then SIGILL if they cannot get the lock, basically falling back to a less nice abort.</p>",
        "id": 206903144,
        "sender_full_name": "RalfJ",
        "timestamp": 1597387688
    }
]