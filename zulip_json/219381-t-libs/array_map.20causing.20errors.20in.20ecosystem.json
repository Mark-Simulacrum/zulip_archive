[
    {
        "content": "<p>While triaging the beta crater run, I came across quite a few crates which are using <code>map</code> as a method on arrays. This is causing conflicts with the unstable <code>[T; N]::map</code> added to core in 1.47; I suspect we don't want to do anything but thought I'd at least bring it up.</p>\n<p>It looks like the breakage isn't too bad -- maybe a few dozen crates -- and it's sort of in the allowed territory per official rules.</p>\n<p>cc <span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span></p>",
        "id": 209388527,
        "sender_full_name": "simulacrum",
        "timestamp": 1599573078
    },
    {
        "content": "<p>What do those crates define map to mean? The same thing, or something different?</p>",
        "id": 209399833,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599577647
    },
    {
        "content": "<p>Usually something different</p>",
        "id": 209399984,
        "sender_full_name": "simulacrum",
        "timestamp": 1599577705
    },
    {
        "content": "<p>e.g., <a href=\"https://docs.rs/pod/0.5.0/pod/trait.Pod.html#method.map\">https://docs.rs/pod/0.5.0/pod/trait.Pod.html#method.map</a></p>",
        "id": 209400012,
        "sender_full_name": "simulacrum",
        "timestamp": 1599577717
    },
    {
        "content": "<p>which is a safe transmute I think?</p>",
        "id": 209400026,
        "sender_full_name": "simulacrum",
        "timestamp": 1599577723
    },
    {
        "content": "<p>(Or claims to be anyway, I haven't checked)</p>",
        "id": 209400097,
        "sender_full_name": "simulacrum",
        "timestamp": 1599577748
    },
    {
        "content": "<p>I think that's the main example</p>",
        "id": 209400120,
        "sender_full_name": "simulacrum",
        "timestamp": 1599577759
    },
    {
        "content": "<p>even if it is \"the same thing\" since array_map is unstable it doesn't help them much :)</p>",
        "id": 209400196,
        "sender_full_name": "simulacrum",
        "timestamp": 1599577788
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> Mine is exactly the same as the unstable <code>std</code> one: <a href=\"https://docs.rs/arraytools/0.1.5/arraytools/trait.ArrayTools.html#method.map\">https://docs.rs/arraytools/0.1.5/arraytools/trait.ArrayTools.html#method.map</a> -- I do hope to deprecate that crate in favour of the real const generic methods, though.</p>",
        "id": 209414258,
        "sender_full_name": "scottmcm",
        "timestamp": 1599584049
    },
    {
        "content": "<p>I would still like a lang change to make this easier to disambiguate, though.  It came up here, it came up again in <code>Iterator::intersperse</code>, and more.  Old IRLO thread: <a href=\"https://internals.rust-lang.org/t/idea-paths-in-method-names/6834?u=scottmcm\">https://internals.rust-lang.org/t/idea-paths-in-method-names/6834?u=scottmcm</a></p>",
        "id": 209414743,
        "sender_full_name": "scottmcm",
        "timestamp": 1599584291
    },
    {
        "content": "<p>it would be nice if the compiler could automatically disambiguate to the stable (external) methods if you don't have the necessary feature enabled anyway. maybe give a future-incompat warning, then move on without it</p>",
        "id": 209415542,
        "sender_full_name": "cuviper",
        "timestamp": 1599584654
    },
    {
        "content": "<p>aren't we doing so already, I think this only emits a future compat lint rn</p>",
        "id": 209416083,
        "sender_full_name": "lcnr",
        "timestamp": 1599584979
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=b72566df00a134e7170b49bed6575ef9\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=b72566df00a134e7170b49bed6575ef9</a></p>",
        "id": 209416219,
        "sender_full_name": "lcnr",
        "timestamp": 1599585047
    },
    {
        "content": "<p>Oh, good!</p>",
        "id": 209416373,
        "sender_full_name": "cuviper",
        "timestamp": 1599585113
    },
    {
        "content": "<p>Then extend that to have an <code>assume-rust-version = \"1.xx\"</code> field in Cargo.toml and compare that against the stable version of the feature. If it predates it, then ignore the stdlib version. Mini editions <span aria-label=\"innocent\" class=\"emoji emoji-1f607\" role=\"img\" title=\"innocent\">:innocent:</span></p>",
        "id": 209416389,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1599585119
    },
    {
        "content": "<p>so what does the breakage look like from crater? were these <code>deny(warnings)</code>?</p>",
        "id": 209416473,
        "sender_full_name": "cuviper",
        "timestamp": 1599585142
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> yes please</p>",
        "id": 209416540,
        "sender_full_name": "cuviper",
        "timestamp": 1599585178
    },
    {
        "content": "<p>And somehow mesh that with <code>cfg(available)</code></p>",
        "id": 209416605,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1599585218
    },
    {
        "content": "<p>although sometimes I want to conditionally use new features</p>",
        "id": 209416615,
        "sender_full_name": "cuviper",
        "timestamp": 1599585225
    },
    {
        "content": "<p>right, <code>cfg</code> is a wrinkle</p>",
        "id": 209416630,
        "sender_full_name": "cuviper",
        "timestamp": 1599585236
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116155\">Jake Goulding</span> <a href=\"#narrow/stream/219381-t-libs/topic/array_map.20causing.20errors.20in.20ecosystem/near/209416389\">said</a>:</p>\n<blockquote>\n<p>Then extend that to have an <code>assume-rust-version = \"1.xx\"</code> field in Cargo.toml and compare that against the stable version of the feature. If it predates it, then ignore the stdlib version. Mini editions <span aria-label=\"innocent\" class=\"emoji emoji-1f607\" role=\"img\" title=\"innocent\">:innocent:</span></p>\n</blockquote>\n<p>We've talked about having a minimum-rust-version field in <code>Cargo.toml</code> for different reasons. Not entirely sure I'd want to have that change the behavior of the compiler, though.</p>",
        "id": 209417670,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599585780
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> the <code>pod</code> failure did not give a future-compat lint, just \"use of unstable library feature\"<br>\n<a href=\"https://crater-reports.s3.amazonaws.com/beta-1.47-1/beta-2020-08-29/reg/pod-0.5.0/log.txt\">https://crater-reports.s3.amazonaws.com/beta-1.47-1/beta-2020-08-29/reg/pod-0.5.0/log.txt</a></p>",
        "id": 209417828,
        "sender_full_name": "cuviper",
        "timestamp": 1599585874
    },
    {
        "content": "<p>I wonder why that's different than your playground</p>",
        "id": 209417848,
        "sender_full_name": "cuviper",
        "timestamp": 1599585893
    },
    {
        "content": "<p>that's a type inference issue</p>",
        "id": 209418697,
        "sender_full_name": "lcnr",
        "timestamp": 1599586307
    },
    {
        "content": "<p>looks like we missed something while implemented the array lang item</p>",
        "id": 209418761,
        "sender_full_name": "lcnr",
        "timestamp": 1599586331
    },
    {
        "content": "<p><code>un</code> shouldn't even be an array, so idk what's going on there, will have to look</p>",
        "id": 209418788,
        "sender_full_name": "lcnr",
        "timestamp": 1599586352
    },
    {
        "content": "<p>wait, nm. I misread, let me look further <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 209419380,
        "sender_full_name": "lcnr",
        "timestamp": 1599586689
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> let's file an issue to track this then since it sounds plausibly bad</p>",
        "id": 209419445,
        "sender_full_name": "simulacrum",
        "timestamp": 1599586724
    },
    {
        "content": "<p>(even if not regression-y necessarily)</p>",
        "id": 209419460,
        "sender_full_name": "simulacrum",
        "timestamp": 1599586733
    },
    {
        "content": "<p>ah, we prioritize <code>*un</code> over <code>&amp;*un</code> here in auto deref</p>",
        "id": 209419757,
        "sender_full_name": "lcnr",
        "timestamp": 1599586875
    },
    {
        "content": "<p>so at least this isn't my fault <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 209419803,
        "sender_full_name": "lcnr",
        "timestamp": 1599586903
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=1c26d53fd68f9e1c7a4bf63b5bcd36ce\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=1c26d53fd68f9e1c7a4bf63b5bcd36ce</a></p>",
        "id": 209419975,
        "sender_full_name": "lcnr",
        "timestamp": 1599586980
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">map</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"c1\">// fails</span>\n<span class=\"c1\">// trait Foo { fn map(&amp;mut self) {} } // compiles</span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"k\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 209419997,
        "sender_full_name": "lcnr",
        "timestamp": 1599586990
    },
    {
        "content": "<p>so instead of trying to go from <code>&amp;mut [T; 2]</code> to <code>&amp;[T; 2]</code> it \"just stops\" at <code>[T; 2]</code> here</p>",
        "id": 209420085,
        "sender_full_name": "lcnr",
        "timestamp": 1599587038
    },
    {
        "content": "<p>hm that seems.. annoying</p>",
        "id": 209420231,
        "sender_full_name": "simulacrum",
        "timestamp": 1599587106
    },
    {
        "content": "<p>makes sense though :/</p>",
        "id": 209420270,
        "sender_full_name": "simulacrum",
        "timestamp": 1599587127
    },
    {
        "content": "<p>we might be able to improve the lint here so I do think opening an issue makes sense</p>",
        "id": 209420397,
        "sender_full_name": "lcnr",
        "timestamp": 1599587177
    },
    {
        "content": "<p>but I am not sure how easy this will be</p>",
        "id": 209420411,
        "sender_full_name": "lcnr",
        "timestamp": 1599587184
    },
    {
        "content": "<p>this happens with all unstable methods:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">into_raw_parts</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"c1\">// fails</span>\n<span class=\"c1\">// trait Foo { fn into_raw_parts(&amp;mut self) {} } // compiles</span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Vec</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">into_raw_parts</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 209422140,
        "sender_full_name": "lcnr",
        "timestamp": 1599587958
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/219381-t-libs/topic/array_map.20causing.20errors.20in.20ecosystem/near/209417670\">said</a>:</p>\n<blockquote>\n<p>We've talked about having a minimum-rust-version field in <code>Cargo.toml</code> for different reasons.</p>\n</blockquote>\n<p>And this wouldn't be a <em>minimum</em> either. It's more like \"I wrote this code assuming the functionality available in X\". It's closer to a <em>maximum</em>, but not that either.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/219381-t-libs/topic/array_map.20causing.20errors.20in.20ecosystem/near/209417670\">said</a>:</p>\n<blockquote>\n<p>Not entirely sure I'd want to have that change the behavior of the compiler, though.</p>\n</blockquote>\n<p>Presumably users aren't happy that the \"behavior of the compiler\" (really including the stdlib) changes in a new version either <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span>. (note that I understand that there's a difference, but I'm focusing on behavior to the end user).</p>",
        "id": 209425086,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1599589479
    },
    {
        "content": "<p><code>dont-automatically-choose-implementations-introduced-after=\"1.XX\"</code></p>",
        "id": 209425164,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1599589524
    },
    {
        "content": "<p>Also, my 30-second solution <em>obviously</em> also solves the whole edition-specific prelude issue. <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 209425526,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1599589708
    },
    {
        "content": "<p>just make the current rust version an officially sanctioned cfg and let people sort it out ;P</p>",
        "id": 209425865,
        "sender_full_name": "Lokathor",
        "timestamp": 1599589867
    },
    {
        "content": "<p>That's already an accepted RFC</p>",
        "id": 209425901,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1599589882
    },
    {
        "content": "<p>yeah but it's been stalled a while as i recall</p>",
        "id": 209425948,
        "sender_full_name": "Lokathor",
        "timestamp": 1599589912
    },
    {
        "content": "<p>That doesn't seem to solve the problem of the stdlib introducing methods that people weren't expecting to call. Can you expand on how it would?</p>",
        "id": 209425951,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1599589914
    },
    {
        "content": "<p>Stepping back a little, I'd expect this problem to only get worse over time — more people will use Rust, the stdlib will get more features, and good names are in short supply. As const generics become more functional, we'll probably have a small mountain of issues. See the \"recent\" <code>array::into_iter</code> and the proposed <code>array::as_ref</code>.</p>",
        "id": 209428616,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1599591273
    },
    {
        "content": "<p>clamp</p>",
        "id": 209441223,
        "sender_full_name": "Jubilee",
        "timestamp": 1599597553
    },
    {
        "content": "<p>It would at least be nice to give people an ergonomic way (still has auto-(de)ref, doesn't break chaining) to force the method to be from a particular trait so that they have a reasonable option for writing code that won't break.  (<em>cough</em> <a href=\"https://internals.rust-lang.org/t/idea-paths-in-method-names/6834?u=scottmcm\">https://internals.rust-lang.org/t/idea-paths-in-method-names/6834?u=scottmcm</a> <em>cough</em>)</p>",
        "id": 209451816,
        "sender_full_name": "scottmcm",
        "timestamp": 1599603963
    },
    {
        "content": "<p>\"writing code that won't break\" seems to imply that you'd have to use that form everywhere, no? Or would you only use that when a known change is coming down the line?</p>",
        "id": 209457138,
        "sender_full_name": "cuviper",
        "timestamp": 1599608434
    },
    {
        "content": "<p>that form also makes it easier to fix code that does break.</p>",
        "id": 209458195,
        "sender_full_name": "Jubilee",
        "timestamp": 1599609467
    },
    {
        "content": "<p>I was thinking of it largely as the \"oh, I got a future compat warning -- let me switch to <code>.Itertools::intersperse(\",\")</code> now so I'll be safe for that update\"</p>",
        "id": 209458300,
        "sender_full_name": "scottmcm",
        "timestamp": 1599609577
    },
    {
        "content": "<p>The versions that would could silently make things keep working are things like code depending on the order of trait <code>use</code>s, which scare me.</p>",
        "id": 209458400,
        "sender_full_name": "scottmcm",
        "timestamp": 1599609629
    }
]