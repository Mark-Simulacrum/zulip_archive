[
    {
        "content": "<p>There's been a little more activity on the proposed RFC for revamped numeric constants ( <a href=\"https://github.com/rust-lang/rfcs/pull/2700\" target=\"_blank\" title=\"https://github.com/rust-lang/rfcs/pull/2700\">https://github.com/rust-lang/rfcs/pull/2700</a> ) , figured I'd make a thread here in case people find it easier to keep up with than on github. right now the question to be resolved seems to be whether or not to ever deprecate the constants that it proposes to replace; my stance is that I don't care if these constants get deprecated for a good long while, but I do want to guarantee that they will be deprecated <em>eventually</em>, though I'm not picky at how long that pre-deprecation period may be. cc <span class=\"user-mention\" data-user-id=\"117909\">@faern</span></p>",
        "id": 185966266,
        "sender_full_name": "bstrie",
        "timestamp": 1579302103
    },
    {
        "content": "<p>ultimately my motivation is that I really care that people searching the docs for \"max\" know which constant we expect them to use; I'm not especially concerned with making existing code throw warnings or feel pressured to update. this is intended to be an improvement to ergonomics and beginner ease. if there is some established solution to this <em>other</em> than deprecation, I would love to know about it!</p>",
        "id": 185966453,
        "sender_full_name": "bstrie",
        "timestamp": 1579302287
    },
    {
        "content": "<p>i think deprecating them eventually is probably fine, in accordance with whatever our normal procedures are. we've deprecated (what feels like) a lot of stuff at a fairly consistent pace, and i feel like not doing it for this would be a break from that norm.</p>\n<p>i do still think it would be nice to stop being so deprecation happy, but can really appreciate the arguments in favor of doing it. a good middle road here might be to just make the period in which the replacement API exists without a corresponding deprecation be longer.</p>\n<p>cc <span class=\"user-mention\" data-user-id=\"219747\">@Simon Sapin</span> since i know he was expressing opinions on this.</p>",
        "id": 185966869,
        "sender_full_name": "BurntSushi",
        "timestamp": 1579302761
    },
    {
        "content": "<p>Right, a good thing about <code>#[rustc_deprecated(since = \"…\")]</code> is that we can make the warnings start in releases arbitrarily far in the future</p>",
        "id": 185966997,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1579302908
    },
    {
        "content": "<p>I think there’s a whole spectrum of consequences to old code that keeps using something that has a better alternative. For example <code>std::mem::unitialized</code> is often UB. <code>str::trim_right</code> is named backwards if you’re doing Arabic text layout, so <code>trim_end</code> can make code easier to understand. But <code>i32::MAX</code> instead of <code>std::i32::MAX</code>… IMO the difference feels very marginal and supperficial</p>",
        "id": 185967320,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1579303253
    },
    {
        "content": "<p>How those various cases should translate exactly in terms of when to emit deprecation warnings, I don’t have a strong opinion</p>",
        "id": 185967344,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1579303288
    },
    {
        "content": "<p>Maybe we should add a mechanism to make something deprecated only in a new edition, for the very low-impact ones. Edition migration is typically when we’re already doing busywork</p>",
        "id": 185967410,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1579303357
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256342\">@bstrie</span> BTW when there’s only part of a proposal that has consensus (in this case the new constants) sending a first PR for that helps have it sooner and doesn’t mean rejecting the rest</p>",
        "id": 185967727,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1579303789
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219747\">@Simon Sapin</span> by \"sending a PR\" are you referring to having two separate RFCs, one for adding the new constants and another for deprecating them, or are you referring to rustc PRs? if the latter, then I believe @faern has already updated their rustc PR to add in these new constants without deprecating the old ones</p>",
        "id": 185968061,
        "sender_full_name": "bstrie",
        "timestamp": 1579304114
    },
    {
        "content": "<p>Implementation PR, not RFC</p>",
        "id": 185968082,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1579304142
    },
    {
        "content": "<p>I'm just about to push an update to the RFC which shuffles around the steps to imply that we could add the new constants and then decide upon deprecation sometime in the future</p>",
        "id": 185968086,
        "sender_full_name": "bstrie",
        "timestamp": 1579304146
    },
    {
        "content": "<p>I don't know if there currently exists a way to say \"this item will only be seen as deprecated to users of an edition &gt;= $EDITION_X\", but I'm also all for that if we're worried about churn</p>",
        "id": 185968331,
        "sender_full_name": "bstrie",
        "timestamp": 1579304360
    },
    {
        "content": "<p>after all, we're not <em>that</em> far out from a new edition... I can wait eighteen months :P</p>",
        "id": 185968345,
        "sender_full_name": "bstrie",
        "timestamp": 1579304383
    },
    {
        "content": "<p>i really like the idea of pushing some subset of deprecations to a new edition.</p>",
        "id": 185971996,
        "sender_full_name": "BurntSushi",
        "timestamp": 1579308490
    },
    {
        "content": "<p>would be good to keep that in mind as edition planning advances this year, although it might be out of scope to consider the exact mechanism for that right now :P</p>",
        "id": 185972219,
        "sender_full_name": "bstrie",
        "timestamp": 1579308778
    },
    {
        "content": "<p>Ping? did this topic become empty now after the split?</p>",
        "id": 186049500,
        "sender_full_name": "faern",
        "timestamp": 1579457431
    },
    {
        "content": "<p>The RFC2700 thread is now empty? Or I'm not understanding Zulip.</p>",
        "id": 186049520,
        "sender_full_name": "faern",
        "timestamp": 1579457473
    },
    {
        "content": "<p>I've moved messages around so that they're in the correct topics.</p>",
        "id": 186049678,
        "sender_full_name": "davidtwco",
        "timestamp": 1579457742
    },
    {
        "content": "<p>When <a class=\"stream-topic\" data-stream-id=\"219381\" href=\"/#narrow/stream/219381-t-libs/topic/Deprecating.20compare_and_swap\">#t-libs &gt; Deprecating compare_and_swap</a> was forked off, it appears that messages from before the discussion shifted to deprecating <code>compare_and_swap</code> were moved too, so I've moved those back.</p>",
        "id": 186049740,
        "sender_full_name": "davidtwco",
        "timestamp": 1579457800
    },
    {
        "content": "<p>Ok. Copying my message over which was for this thread:</p>",
        "id": 186049816,
        "sender_full_name": "faern",
        "timestamp": 1579457921
    },
    {
        "content": "<p>I'm also fine with deprecating in the next edition. Just like <span class=\"user-mention\" data-user-id=\"256342\">@bstrie</span> I only care about that it will <em>eventually</em> be done. However, I think we should update the docs for the old ways of reaching the consts immediately upon stabilizing them. Something like a soft deprecation. So people can immediately see which ones they should pick if they are writing new code, without giving warnings to existing code.</p>",
        "id": 186049817,
        "sender_full_name": "faern",
        "timestamp": 1579457924
    },
    {
        "content": "<p>Yep, I agree that the docs should do so (nightly docs can essentially all point to the new locations)</p>",
        "id": 186051062,
        "sender_full_name": "simulacrum",
        "timestamp": 1579460301
    },
    {
        "content": "<p>A question not very discussed is when to stabilize the new constants? In my first PR I just stabilized them instantly since I also deprecated the old ones instantly. But in the new smaller PR that just introduces the constants, they are introduced as unstable. I can adapt my PR either way. But I assume we want to get it merged as unstable for at least a while first to make sure it seems to work at all :)</p>",
        "id": 186051232,
        "sender_full_name": "faern",
        "timestamp": 1579460602
    },
    {
        "content": "<p>hm, yes, though I imagine we'll want to move towards stabilization relatively quickly</p>",
        "id": 186052041,
        "sender_full_name": "simulacrum",
        "timestamp": 1579462092
    },
    {
        "content": "<p>certainly until they're stable I would feel odd even soft-deprecating the old ones</p>",
        "id": 186052044,
        "sender_full_name": "simulacrum",
        "timestamp": 1579462108
    },
    {
        "content": "<p>Certainly. We of course can't say that the old ones are not the recommended ones until there are usable replacements on stable. I agree to that. As I wrote above, clearly indicate to users to use the new ones when we stabilize them.</p>",
        "id": 186052118,
        "sender_full_name": "faern",
        "timestamp": 1579462294
    },
    {
        "content": "<p>mhm</p>\n<p>So if I understand correctly we do have a PR which just adds the new constants, not changing the old ones, in any way, right? <a href=\"https://github.com/rust-lang/rust/pull/68325\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/68325\">https://github.com/rust-lang/rust/pull/68325</a></p>",
        "id": 186052226,
        "sender_full_name": "simulacrum",
        "timestamp": 1579462486
    },
    {
        "content": "<p>Exactly! Except they redefine the old ones to use the values from the new ones in order to keep a single source of truth.</p>",
        "id": 186052284,
        "sender_full_name": "faern",
        "timestamp": 1579462564
    },
    {
        "content": "<p>sure yes</p>",
        "id": 186052289,
        "sender_full_name": "simulacrum",
        "timestamp": 1579462603
    },
    {
        "content": "<p>I imagine though that redefinition is at fault for the test failure (since rustdoc is plausibly not being recursive)</p>\n<p>Maybe we can flip the \"canonical\" to be the old ones for now?</p>",
        "id": 186052301,
        "sender_full_name": "simulacrum",
        "timestamp": 1579462634
    },
    {
        "content": "<p>Or someone tell me how to fix the test? That feels more productive than doing work in this PR to reverse it and then having to fix the test anyway and reverse it once again further down the road.</p>",
        "id": 186052343,
        "sender_full_name": "faern",
        "timestamp": 1579462686
    },
    {
        "content": "<p>hm, yeah, trying to investigate the test itself now</p>",
        "id": 186052354,
        "sender_full_name": "simulacrum",
        "timestamp": 1579462744
    },
    {
        "content": "<p>I can't seem to find <code>PI</code> at all in that test</p>",
        "id": 186052360,
        "sender_full_name": "simulacrum",
        "timestamp": 1579462772
    },
    {
        "content": "<p>I don't even know how to run it locally. So very slow to iterate towards the CI.</p>",
        "id": 186052361,
        "sender_full_name": "faern",
        "timestamp": 1579462773
    },
    {
        "content": "<p><code>./x.py test --stage 1 src/test/rustdoc</code> should work</p>",
        "id": 186052409,
        "sender_full_name": "simulacrum",
        "timestamp": 1579462821
    },
    {
        "content": "<p>you did modify the test case which is surprising to me</p>",
        "id": 186052417,
        "sender_full_name": "simulacrum",
        "timestamp": 1579462869
    },
    {
        "content": "<p>Maybe to try to debug?</p>",
        "id": 186052420,
        "sender_full_name": "simulacrum",
        "timestamp": 1579462885
    },
    {
        "content": "<p>Well, yes. Currently in the PR I remove the test. I tried various ways to fix it before that.</p>",
        "id": 186052465,
        "sender_full_name": "faern",
        "timestamp": 1579462926
    },
    {
        "content": "<p>Oh I see <a href=\"https://github.com/rust-lang/rust/commit/bd51e02c7ab5eb27787da407e95d5b37cd9ba0d2\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/commit/bd51e02c7ab5eb27787da407e95d5b37cd9ba0d2\">https://github.com/rust-lang/rust/commit/bd51e02c7ab5eb27787da407e95d5b37cd9ba0d2</a> was what CI comment is about</p>",
        "id": 186052482,
        "sender_full_name": "simulacrum",
        "timestamp": 1579462987
    },
    {
        "content": "<p>Yup. Tried to switch to some other constant which was not an associated one. Since I assume the test was just about re-exporting a constant. That it was EPSILON was irrelevant I guessed.</p>",
        "id": 186052531,
        "sender_full_name": "faern",
        "timestamp": 1579463047
    },
    {
        "content": "<p>Yes, that's true looks like it should be irrelevant</p>",
        "id": 186052533,
        "sender_full_name": "simulacrum",
        "timestamp": 1579463068
    },
    {
        "content": "<p>I would run it locally, and look in <code>build/&lt;triple&gt;/test/rustdoc/show-const-contents/</code> in your web browser to try and figure out what should go there</p>",
        "id": 186052542,
        "sender_full_name": "simulacrum",
        "timestamp": 1579463104
    },
    {
        "content": "<p>Uhm. Ok. I got the @has test to work. But the @!has still fails. Not exactly sure what that tries to test for. That the documentation does not contain <code>; //</code>? Well, the one for PI does <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 186052765,
        "sender_full_name": "faern",
        "timestamp": 1579463542
    },
    {
        "content": "<p>Probably worth looking at the master-generated docs to try and see what that is looking for</p>",
        "id": 186052880,
        "sender_full_name": "simulacrum",
        "timestamp": 1579463787
    },
    {
        "content": "<p>might be e.g. testing that we don't show a comment or something like that</p>",
        "id": 186052882,
        "sender_full_name": "simulacrum",
        "timestamp": 1579463797
    },
    {
        "content": "<p>It would seem like that's what it tests for. However, it does show the comment in my generated html. Not sure why it would suddenly do that for PI if it did not for EPSILON before.</p>",
        "id": 186052890,
        "sender_full_name": "faern",
        "timestamp": 1579463847
    },
    {
        "content": "<p>I don't know either :)</p>\n<p>I don't have a lot of time to dig into this question myself, but we would likely want to answer it before changing the test.</p>",
        "id": 186053003,
        "sender_full_name": "simulacrum",
        "timestamp": 1579464060
    },
    {
        "content": "<p>I pushed a new fix. It does test that the output is the same as I can see on <a href=\"https://doc.rust-lang.org/nightly/std/f32/consts/constant.PI.html\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/std/f32/consts/constant.PI.html\">https://doc.rust-lang.org/nightly/std/f32/consts/constant.PI.html</a>. So I guess all is well then? If the rustdoc people don't want the docs to contain what it currently contains that's not a problem for this PR</p>",
        "id": 186053012,
        "sender_full_name": "faern",
        "timestamp": 1579464082
    },
    {
        "content": "<p>On nightly EPSILON does not generate a comment after the value, but PI does. I guess it's something about the definition of the value being short enough or something.</p>",
        "id": 186053138,
        "sender_full_name": "faern",
        "timestamp": 1579464183
    },
    {
        "content": "<p>hm, okay, let's just drop the !has test for epsilon</p>",
        "id": 186054048,
        "sender_full_name": "simulacrum",
        "timestamp": 1579465153
    },
    {
        "content": "<p>I'm pretty happy with the PR. I think the only thing missing is an issue number for the unstable attribute. So we would need a tracking issue I assume. But I guess we should get the RFC merged first. Anything left there?</p>",
        "id": 186059150,
        "sender_full_name": "faern",
        "timestamp": 1579472111
    },
    {
        "content": "<blockquote>\n<p>A question not very discussed is when to stabilize the new constants?</p>\n</blockquote>\n<p>Is it possible to write code that works on older Stable Rust (with the old constants), in such a way that the new constants would shadow the old ones after they’re added? (Maybe <code>use std::i32; i32::MAX</code>?) If adding <em>unstable</em> constant regress that code we may need to add them as insta-stable</p>",
        "id": 186082523,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1579509502
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219747\">@Simon Sapin</span> is there a <code>#[rustc_deprecate(edition = \"...\")]</code> that deprecates only after a particular edition ?</p>",
        "id": 186098133,
        "sender_full_name": "gnzlbg",
        "timestamp": 1579524169
    },
    {
        "content": "<p>that way people writing code using older editions won't have to deal with the warnings</p>",
        "id": 186098178,
        "sender_full_name": "gnzlbg",
        "timestamp": 1579524188
    },
    {
        "content": "<p>There is not, that I know of</p>",
        "id": 186098422,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1579524379
    },
    {
        "content": "<p>But I think it could be interesting to add</p>",
        "id": 186098430,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1579524388
    },
    {
        "content": "<p>I suppose it can be added when it is needed</p>",
        "id": 186098493,
        "sender_full_name": "gnzlbg",
        "timestamp": 1579524436
    },
    {
        "content": "<p>I personally don't mind that much about whether the churn of deprecating things for consistency purposes is worth it or not, since it shouldn't really impact old code unless it has a <code>deny(warnings)</code>, in which case the authors wanted that code to break when these things happen</p>",
        "id": 186098611,
        "sender_full_name": "gnzlbg",
        "timestamp": 1579524510
    },
    {
        "content": "<p>what we could do in a future edition is make it an error to use those</p>",
        "id": 186098659,
        "sender_full_name": "gnzlbg",
        "timestamp": 1579524554
    },
    {
        "content": "<p>that feels more consistent with what we have been doing until now (deprecate in current edition, turn that into an error in the next one)</p>",
        "id": 186098683,
        "sender_full_name": "gnzlbg",
        "timestamp": 1579524574
    },
    {
        "content": "<p>from that point-of-view, the deprecation warning \"warns\" that it will become an error in the next edition, and <code>cargo fix</code> can trivially fix these</p>",
        "id": 186098761,
        "sender_full_name": "gnzlbg",
        "timestamp": 1579524611
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219747\">@Simon Sapin</span> doesn't name resolution always prefer anything explicitly <code>use</code>d before checking in the prologue, which is where the new constants would be defined? in any case I don't see how even intermixing them would ever possibly be a problem, since not only are they the same type, the old constants would be changed to be just re-exports of the new ones</p>",
        "id": 186197779,
        "sender_full_name": "bstrie",
        "timestamp": 1579623002
    },
    {
        "content": "<p>I don’t know, but either way I’d feel better with a test.</p>",
        "id": 186197863,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1579623035
    },
    {
        "content": "<p>And yeah, previously-valid code starting to use the new constant is only a problem if the new ones are <code>#[unstable]</code>. Once they are stable it’s not a problem since they have the same respective types and values</p>",
        "id": 186198006,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1579623121
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219747\">@Simon Sapin</span> I tried what you suggested, and it seems to not be a problem. I used a build of the compiler/std from the branch in my PR and when I <code>use std::u16</code> and later access <code>u16::MAX</code> it compiles without any warning. But if I remove the <code>use</code> then I get an error that <code>u16::MAX</code> is unstable. So existing code should not get errors that they use unstable library items.</p>",
        "id": 186421412,
        "sender_full_name": "faern",
        "timestamp": 1579805477
    },
    {
        "content": "<p>Thanks for trying it out! It still sounds like a good test to add, if there isn’t one already :)</p>",
        "id": 186421590,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1579805582
    },
    {
        "content": "<p>Add a test that tries to use <code>std::u16::MAX</code> and make sure it works without unlocking a feature? Seems like a very temporary test to me. We will likely stabilize the constants very soon after adding them, they just need to reach nightly a little while so we see if it causes any problems or not.</p>",
        "id": 186421737,
        "sender_full_name": "faern",
        "timestamp": 1579805655
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219747\">@Simon Sapin</span> I added it. Is this what you had in mind, or did I misinterpret you? <a href=\"https://github.com/rust-lang/rust/pull/68325/commits/6438938d450fe3abdb5abbead3ad14823e4e75f6\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/68325/commits/6438938d450fe3abdb5abbead3ad14823e4e75f6\">https://github.com/rust-lang/rust/pull/68325/commits/6438938d450fe3abdb5abbead3ad14823e4e75f6</a></p>",
        "id": 186423601,
        "sender_full_name": "faern",
        "timestamp": 1579806709
    },
    {
        "content": "<p>Yes exactly, thanks</p>",
        "id": 186423697,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1579806738
    },
    {
        "content": "<p>Great. Then I'm not sure what we are waiting for any longer. No one seems to oppose the RFC and we seem to agree approximately how to implement it. Could we have the RFC merged? If not is there anything I can do now to help unblock that?</p>",
        "id": 186424067,
        "sender_full_name": "faern",
        "timestamp": 1579806933
    },
    {
        "content": "<p>Yeah I'm a bit confused about why the RFC isn't merged yet. The FCP is finished and the discussion afterwards should happen on the tracking issue, right? <span class=\"user-mention\" data-user-id=\"219747\">@Simon Sapin</span> Should I simply merge it and create a tracking issue?</p>",
        "id": 186425261,
        "sender_full_name": "Lukas Kalbertodt",
        "timestamp": 1579807556
    },
    {
        "content": "<p>(And sorry, forgot to check Zulip this week :&lt;)</p>",
        "id": 186425335,
        "sender_full_name": "Lukas Kalbertodt",
        "timestamp": 1579807578
    },
    {
        "content": "<p>Yes, go ahead. Merging a creating a tracking issue is a manual process.</p>",
        "id": 186425460,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1579807655
    },
    {
        "content": "<p>Will do</p>",
        "id": 186426335,
        "sender_full_name": "Lukas Kalbertodt",
        "timestamp": 1579808056
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"118772\">@Lukas Kalbertodt</span> take a look at how I have merged RFCs in the past btw</p>",
        "id": 186426873,
        "sender_full_name": "centril",
        "timestamp": 1579808352
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> There is also <a href=\"https://forge.rust-lang.org/lang/rfc-merge-procedure.html\" target=\"_blank\" title=\"https://forge.rust-lang.org/lang/rfc-merge-procedure.html\">this chapter in the Rust forge</a></p>",
        "id": 186427135,
        "sender_full_name": "Lukas Kalbertodt",
        "timestamp": 1579808494
    },
    {
        "content": "<p>I guess you always did it pretty similarly to that?</p>",
        "id": 186427161,
        "sender_full_name": "Lukas Kalbertodt",
        "timestamp": 1579808513
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"118772\">@Lukas Kalbertodt</span> I think you linked to the wrong PR in the first bullet in the tracking issue.<br>\nAnyway. I will go ahead and update the PR so the unstable attribute points to the correct issue.</p>",
        "id": 186427903,
        "sender_full_name": "faern",
        "timestamp": 1579808956
    },
    {
        "content": "<p>Yeah, I know, I will fix everything eventually. I am slow :D</p>",
        "id": 186428123,
        "sender_full_name": "Lukas Kalbertodt",
        "timestamp": 1579809080
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219747\">@Simon Sapin</span> So I already adjusted the links in the PR, but i cannot merge it on GitHub. It says \"at least one review required\". Am I expected to merge it locally? Because it seems like the others always merged it via GitHub.</p>",
        "id": 186429135,
        "sender_full_name": "Lukas Kalbertodt",
        "timestamp": 1579809627
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span>, do we need a github \"review\" to merge an RFC?</p>",
        "id": 186431553,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1579811045
    },
    {
        "content": "<p>dont think so</p>",
        "id": 186431565,
        "sender_full_name": "centril",
        "timestamp": 1579811055
    },
    {
        "content": "<p>I tried adding a review, but now I get \"The base branch restricts merging to authorized users.\"</p>",
        "id": 186431904,
        "sender_full_name": "Lukas Kalbertodt",
        "timestamp": 1579811317
    },
    {
        "content": "<p>Could I even push to <code>master</code>?</p>",
        "id": 186431915,
        "sender_full_name": "Lukas Kalbertodt",
        "timestamp": 1579811322
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219747\">@Simon Sapin</span>  Sorry for ping again, but seems like I need a helping hand with this. Don't want to leave this PR in this half-merged state for so long. I didn't know I couldn't merge into <code>master</code> :&lt;</p>",
        "id": 186432452,
        "sender_full_name": "Lukas Kalbertodt",
        "timestamp": 1579811683
    },
    {
        "content": "<p>Clicked the green button</p>",
        "id": 186432649,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1579811848
    },
    {
        "content": "<p>Thanks a bunch :)</p>",
        "id": 186432739,
        "sender_full_name": "Lukas Kalbertodt",
        "timestamp": 1579811913
    },
    {
        "content": "<p>For the future: should I get the permission to also merge? Not sure if this is intended</p>",
        "id": 186432752,
        "sender_full_name": "Lukas Kalbertodt",
        "timestamp": 1579811927
    },
    {
        "content": "<p>Maybe it’s tied to r+ permission?</p>",
        "id": 186433323,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1579812332
    },
    {
        "content": "<p>I think permissions on the rfc repository are currently ad-hoc, not tied to rust-lang/team</p>",
        "id": 186433603,
        "sender_full_name": "simulacrum",
        "timestamp": 1579812488
    },
    {
        "content": "<p>yeah; I have write access to rust-lang/rfcs</p>",
        "id": 186434755,
        "sender_full_name": "centril",
        "timestamp": 1579813320
    },
    {
        "content": "<p>The PR adding the constants has been updated to point to the correct tracking issue. And the CI test is happy. I think the PR is ready for review/merge <span class=\"user-mention\" data-user-id=\"118772\">@Lukas Kalbertodt</span></p>",
        "id": 186439402,
        "sender_full_name": "faern",
        "timestamp": 1579815900
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"117909\">@faern</span> Yip, saw that. But don't have any time today anymore. Will re-review it in the coming days, hopefully tomorrow.</p>",
        "id": 186439549,
        "sender_full_name": "Lukas Kalbertodt",
        "timestamp": 1579815965
    },
    {
        "content": "<p>Ok, sweet. Great we made some progress today :)</p>",
        "id": 186439596,
        "sender_full_name": "faern",
        "timestamp": 1579816005
    },
    {
        "content": "<p>yes, thanks everyone for helping to work this through!</p>",
        "id": 186523162,
        "sender_full_name": "bstrie",
        "timestamp": 1579892779
    },
    {
        "content": "<p>The crater run seems to be stuck. It has been on 120832 completed jobs and 69% for quite a while now.</p>",
        "id": 186826122,
        "sender_full_name": "faern",
        "timestamp": 1580243883
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> Ping. Since you started the crater run. It's now been stuck at the same job for almost a day.</p>",
        "id": 186862027,
        "sender_full_name": "faern",
        "timestamp": 1580282793
    },
    {
        "content": "<p>fixed it</p>",
        "id": 186863736,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1580284966
    },
    {
        "content": "<p>Thanks! Oh, yeah. I see now that there was activity on the issue regarding this.</p>",
        "id": 186864449,
        "sender_full_name": "faern",
        "timestamp": 1580285890
    },
    {
        "content": "<p>Merged. Yay! Great work everyone. Hope shit does not hit the fan when the next nightly comes out :)</p>",
        "id": 187005196,
        "sender_full_name": "faern",
        "timestamp": 1580402549
    },
    {
        "content": "<p>I sure hope so too! =D</p>",
        "id": 187022605,
        "sender_full_name": "Lukas Kalbertodt",
        "timestamp": 1580413172
    },
    {
        "content": "<p>I have now prepared a stabilization PR. I won't submit it tonight, but it's basically ready now at least. A bit more work than it sounds. Since I also had to update most examples to use the associated constants instead of the old ones. Plus add to the documentation of the old ones that they are outdated and the assoc consts should be used.</p>",
        "id": 187408613,
        "sender_full_name": "faern",
        "timestamp": 1580856462
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"118772\">@Lukas Kalbertodt</span> What do you think is a suitable time to wait before stabilization? My take was that it's already decided that it will be stabilized unless we find any problems. And we have had a successful crater run plus it's been in nightly for a few days now without any complaints that I'm aware of. As such, we don't need to wait very long(?)</p>",
        "id": 187476420,
        "sender_full_name": "faern",
        "timestamp": 1580924526
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"117909\">@faern</span>  I am not completely sure about the \"minimum time to stabilization\", but a few days are way too little I think. I usually expect features to cook on nightly for several release cycles at least before getting stabilized. I would advise you to push your stabilization commits to a branch of yours, to NOT create a PR and to link that branch in the tracking issue. Ala \"I already did the code changes and am ready to create a PR. For anyone interested: &lt;branch&gt;\".</p>",
        "id": 187481890,
        "sender_full_name": "Lukas Kalbertodt",
        "timestamp": 1580928149
    },
    {
        "content": "<p>But that's just my take on this ^_^</p>",
        "id": 187481925,
        "sender_full_name": "Lukas Kalbertodt",
        "timestamp": 1580928171
    },
    {
        "content": "<p>I think it is not bad to stabilize soon -- I don't think we'll see much movement on use of these features before that happens since they're near-zero improvements on existing stable features. But I would personally give it a week or two to give it a little more time to bake.</p>",
        "id": 187482157,
        "sender_full_name": "simulacrum",
        "timestamp": 1580928321
    },
    {
        "content": "<p>I agree with <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span>. It's a close to zero change basically. Very little impact. And no one will use it until we actually advise them to switch over.<br>\nI'll push the code and link it in the tracking PR then and submit a PR when a bit over one week has passed.</p>",
        "id": 187482370,
        "sender_full_name": "faern",
        "timestamp": 1580928447
    },
    {
        "content": "<p><span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span> on that plan.</p>",
        "id": 187482462,
        "sender_full_name": "simulacrum",
        "timestamp": 1580928484
    },
    {
        "content": "<p>I have now published the PR stabilizing the constants.</p>",
        "id": 187714515,
        "sender_full_name": "faern",
        "timestamp": 1581163646
    }
]