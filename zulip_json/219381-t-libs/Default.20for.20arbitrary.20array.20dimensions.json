[
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=7e34db2c84b77679c245c6ea20a14026\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=7e34db2c84b77679c245c6ea20a14026</a></p>\n<p>This compiles today. Is there a reason we're still using the individual 0-&gt;32 specialized implementations in core, or is it just that nobody has sent a PR since const generics were stabilized?</p>",
        "id": 265224054,
        "sender_full_name": "Matthew Maurer",
        "timestamp": 1639691195
    },
    {
        "content": "<p>std has an impl for <code>[T; 0]: Default</code> even when <code>T</code> doesnt implement <code>Default</code></p>",
        "id": 265224108,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1639691222
    },
    {
        "content": "<p>Ah, so we'd need something like OverlappingInstances from haskell or something like !Default as a negative trait bound to prevent it from overlapping? Are there any RFCs for those sorts of features in the works?</p>",
        "id": 265224414,
        "sender_full_name": "Matthew Maurer",
        "timestamp": 1639691384
    },
    {
        "content": "<p>There have been some attempts.  I found <a href=\"https://github.com/rust-lang/rust/issues/74326\">#74326</a> for example.</p>",
        "id": 265225373,
        "sender_full_name": "scottmcm",
        "timestamp": 1639691867
    },
    {
        "content": "<p>I suppose another possibility to prevent it from overlapping would be if you could say <code>&lt;T: Default, const N: usize, N &gt; 0&gt;</code> but that opens another can of worms</p>",
        "id": 265228216,
        "sender_full_name": "Matthew Maurer",
        "timestamp": 1639693269
    },
    {
        "content": "<p><code>feature(generic_const_exprs)</code> permits this but it makes it so that <code>[T; N]: Default</code> doesnt hold</p>",
        "id": 265228897,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1639693644
    },
    {
        "content": "<p>would also need <code>impl Trait&lt;true&gt; for ()</code> <code>impl Trait&lt;false&gt; for ()</code> to cause <code>for&lt;const B: bool&gt; (): Trait&lt;B&gt;</code> to hold</p>",
        "id": 265229099,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1639693757
    }
]