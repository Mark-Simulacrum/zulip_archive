[
    {
        "content": "<p>Is there any reason there isn't a <code>slice::find</code> method a la <code>str::find</code>? It seems like it would be quite useful. It could use the unstable <code>SlicePattern</code> trait in the same manner <code>Pattern</code> is currently used for <code>str</code>. I can submit a PR creating this method if it's desired.</p>",
        "id": 244967165,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1625512980
    },
    {
        "content": "<p>You can use <code>.iter().position()</code>.</p>",
        "id": 244967421,
        "sender_full_name": "bjorn3",
        "timestamp": 1625513202
    },
    {
        "content": "<p>for substring search, <code>.iter().position()</code> would give you multiplicative time complexity. <code>str::find</code> gives you additive time complexity.</p>\n<p><span class=\"user-mention\" data-user-id=\"245610\">@Jacob Pratt</span> i don't think there has been any cohesive plan put forward in terms of how much \"string\" APIs should be carried over to <code>&amp;[u8]</code> specifically. or are referring to substring search over a generic <code>&amp;[T]</code>?</p>",
        "id": 244967684,
        "sender_full_name": "BurntSushi",
        "timestamp": 1625513451
    },
    {
        "content": "<p>That's what I am doing currently; it just seems somewhat verbose compared to the equivalent for <code>str</code>.</p>",
        "id": 244967704,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1625513471
    },
    {
        "content": "<p>In my particular situation, I'm searching for a given byte. Making a previous string API generic over any sequence of bytes, basically.</p>",
        "id": 244967725,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1625513502
    },
    {
        "content": "<p>memchr crate?</p>",
        "id": 244967798,
        "sender_full_name": "The 8472",
        "timestamp": 1625513554
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"330154\">@The 8472</span> I was looking at stdlib specifically. I'm aware there are other solutions, of course.</p>",
        "id": 244967827,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1625513615
    },
    {
        "content": "<p>well, slice has an unstable memchr too</p>",
        "id": 244967911,
        "sender_full_name": "The 8472",
        "timestamp": 1625513690
    },
    {
        "content": "<p>can be used within std, but not on path to stabilization</p>",
        "id": 244967947,
        "sender_full_name": "The 8472",
        "timestamp": 1625513740
    },
    {
        "content": "<p>Yeah, that would be an implementation detail of a possible PR I'd create. But as <span class=\"user-mention\" data-user-id=\"222471\">@BurntSushi</span>  said there hasn't really been a plan for what should be carried over from str to byte slices.</p>",
        "id": 244968043,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1625513806
    },
    {
        "content": "<p>yeah as the author of bstr, i tend to think that &amp;[u8] should basically have all the same methods as &amp;str. with that said, bstr hasn't exactly taken off either.</p>",
        "id": 244968165,
        "sender_full_name": "BurntSushi",
        "timestamp": 1625513935
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"245610\">@Jacob Pratt</span> for finding a single byte, <code>iter().position()</code> could be good enough, especially if your haystacks are small.</p>",
        "id": 244968210,
        "sender_full_name": "BurntSushi",
        "timestamp": 1625513990
    },
    {
        "content": "<p>I'm with you there! I'd use the bstr crate but I like to keep dependency count down for my libraries.<br>\n<code>.iter().position()</code> is definitely good enough. I just wasn't sure if there was any reason this API is \"missing\".</p>",
        "id": 244968308,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1625514101
    },
    {
        "content": "<p>slice::find is covered by this rfc, i believe <a href=\"https://github.com/rust-lang/rust/issues/56345\">https://github.com/rust-lang/rust/issues/56345</a>. i think it's waiting on implementation? not sure</p>",
        "id": 245331757,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1625758814
    },
    {
        "content": "<p>it's very thorough (and complex as a result), and has been accepted with no implementation for a while :(</p>",
        "id": 245331890,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1625758876
    },
    {
        "content": "<p>(which is somewhat surprising, since the RFC included a prototyped version as an external library)</p>",
        "id": 245332025,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1625758934
    },
    {
        "content": "<p>I'll take a look into that. I've got other priorities but might be able to pull something from the linked repo.</p>",
        "id": 245361604,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1625773350
    },
    {
        "content": "<p>In the last libs-api meeting it was proposed to reduce the scope as std-internal, not user-implementable trait of the needle API. So implementing it on [u8] might still be in scope. That could be discussed on the issue once an update comment is posted.</p>",
        "id": 245369501,
        "sender_full_name": "The 8472",
        "timestamp": 1625777002
    }
]