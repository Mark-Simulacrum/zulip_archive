[
    {
        "content": "<p>Hello to T-libs!</p>\n<p>T-lang has an MCP proposal for <a href=\"https://github.com/rust-lang/lang-team/issues/44\">per-edition preludes</a>. For example, the 2021 prelude might also include the <code>TryInto</code> trait. The exact details of what goes into what prelude are out of scope at this time. What's being focused on at the moment is just the ability to do this <em>at all</em>. Naturally the prelude differences should be easy for users to understand and work with, so we'd want to have very clear explanations of what's going on.</p>\n<p>Since this has quite a bit of effect on what parts of the standard library get used and how, input is needed from T-libs as to what details they'd like to see as part of an RFC towards this.</p>\n<p>Please comment either here in this topic or in the <a href=\"#narrow/stream/243200-t-lang.2Fmajor-changes/topic/MCP.3A.20per-edition.20preludes.20lang-team.2344\">t-lang/major changes topic</a>, but <strong>not</strong> on the github issue itself, which is being reserved for progress updates only.</p>",
        "id": 209329658,
        "sender_full_name": "Lokathor",
        "timestamp": 1599515641
    },
    {
        "content": "<ul>\n<li><code>TryInto</code> &amp; <code>TryFrom</code></li>\n<li>New <code>panic</code> macro which only accepts format args, not arbitrary values.</li>\n</ul>",
        "id": 209330765,
        "sender_full_name": "Amanieu",
        "timestamp": 1599517047
    },
    {
        "content": "<p>only TryInto, not TryFrom?</p>",
        "id": 209330844,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599517170
    },
    {
        "content": "<p>Well first let's focus on what would be in an RFC for doing this at all.</p>\n<p>Is it really as simple as saying \"we're gonna do it\" and then we change a file or two and use the <code>edition</code> compiler flag to decide what the implicit prelude file is for that module? Or are there other concerns?</p>",
        "id": 209331000,
        "sender_full_name": "Lokathor",
        "timestamp": 1599517401
    },
    {
        "content": "<p>Is it a problem that foreign macros won't know what prelude is in use?</p>",
        "id": 209331333,
        "sender_full_name": "cuviper",
        "timestamp": 1599517825
    },
    {
        "content": "<p>But I suppose a clean macro should even work with no prelude.</p>",
        "id": 209331364,
        "sender_full_name": "cuviper",
        "timestamp": 1599517867
    },
    {
        "content": "<p>One sticking point of this in the past that I've felt is that to me the goal of an edition is that if you're warning-free on the previous edition then you're guaranteed to compile successfully in the next edition. In 2018 we achieved this with a whole lot of lints warning you to change things if they were going to break. With a prelude change, however, I don't think there's been thought/development on what a lint would be for this. This means that a prelude change in an edition could make upgrading the edition more difficult for some projects (e.g. <code>cargo fix --edition</code> won't \"just work\"). I'm not sure what the actual fallout of this is, though, and it may be only a small handful of projects that don't compile with a new prelude</p>",
        "id": 209332478,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1599519467
    },
    {
        "content": "<p>could we add a lint for things that would conflict in the new version?</p>",
        "id": 209332539,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599519563
    },
    {
        "content": "<p>things like 'don't define your own TryInto'?</p>",
        "id": 209332541,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599519575
    },
    {
        "content": "<p>I feel like 99% of the actual problems from this are just <a href=\"https://lib.rs/crates/try_from\">https://lib.rs/crates/try_from</a>, so we might also be able to do something in that crate to help.  Or even just special-case some warnings for that specifically, ...</p>",
        "id": 209332764,
        "sender_full_name": "scottmcm",
        "timestamp": 1599519817
    },
    {
        "content": "<p>If the issue is literally TryFrom and TryInto conflicting with that crate, then the cargo fix --edition could literally just delete it from people's Cargo.toml manifests and its use statements elsewhere and see how that goes. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 209333281,
        "sender_full_name": "Jubilee",
        "timestamp": 1599520434
    },
    {
        "content": "<p>that would (potentially) involve all deps also already being updated, is the thing.</p>",
        "id": 209333536,
        "sender_full_name": "Lokathor",
        "timestamp": 1599520773
    },
    {
        "content": "<p>I don't really understand Rust's scope model 100% here, would the dependencies have to be compiled \"in the presence\" of the new prelude?</p>",
        "id": 209333709,
        "sender_full_name": "Jubilee",
        "timestamp": 1599520967
    },
    {
        "content": "<p>No, dependencies control their own edition (and prelude)</p>",
        "id": 209335179,
        "sender_full_name": "cuviper",
        "timestamp": 1599523216
    },
    {
        "content": "<p>Only macros blur that line</p>",
        "id": 209335193,
        "sender_full_name": "cuviper",
        "timestamp": 1599523230
    },
    {
        "content": "<p>the core TryFrom and the <code>try_from</code> crate TryFrom aren't the same TryFrom, is the problem, if there's any <code>try_from::TryFrom</code> impls that are being used across crates, then you need to update dep crates to use <code>core::convert::TryFrom</code> (as a breaking change) and then you can go up the build tree replacing the trait usage until the whole ecosystem moves over.</p>",
        "id": 209335876,
        "sender_full_name": "Lokathor",
        "timestamp": 1599524084
    },
    {
        "content": "<p>It definitely seems plausible to have a rustfix lint thing that looks for imported trait methods called <code>try_from</code> that aren't from std's TryFrom and automatically convert them to UFCS without the import</p>",
        "id": 209337351,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1599526575
    },
    {
        "content": "<p>might be weird with glob imports?</p>",
        "id": 209337353,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1599526580
    },
    {
        "content": "<p>We might not be able to rustfix them away, but it should be pretty easy to detect them and tell people how to migrate.</p>",
        "id": 209348250,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599544724
    },
    {
        "content": "<p>Also, to clarify something in terms of scope: the general sentiment of the lang team was that we'd be supportive of the minor language tweak needed to have a per-edition prelude, so we'd like to make that capability available to the libs team if you'd like it, and we're happy to delegate any and all decisions about the actual prelude changes to the libs team.</p>",
        "id": 209348321,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599544806
    }
]