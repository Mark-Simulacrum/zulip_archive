[
    {
        "content": "<p>I noticed that <code>slice::contains</code> has this example: \"If you do not have a <code>&amp;T</code>, but some other value that you can compare with one (for example, <code>String</code> implements <code>PartialEq&lt;str&gt;</code>), you can use <code>iter().any</code>:\". I'm wondering, is there a reason not to make this work more along the lines of <code>HashMap::get()</code>, with the parameter getting a different type argument <code>Q</code> and the constraint that <code>Q: PartialEq&lt;T&gt;</code> (or the other way around)?</p>",
        "id": 251681704,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1630571188
    },
    {
        "content": "<p>I suppose the same thing would be true for other slice methods with <code>PartialEq</code> constraints</p>",
        "id": 251681730,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1630571214
    },
    {
        "content": "<p>the signature of <code>slice.contains</code> can't be changed like that without breaking code</p>",
        "id": 251685022,
        "sender_full_name": "Mara",
        "timestamp": 1630572937
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=0a2cd3b8f43d239452dfd5b34b115d46\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=0a2cd3b8f43d239452dfd5b34b115d46</a></p>",
        "id": 251685452,
        "sender_full_name": "Mara",
        "timestamp": 1630573186
    },
    {
        "content": "<p>hmm, thanks, so the issue here is just that it cannot be inferred, and that's part of the compatibility guarantee?</p>",
        "id": 251695070,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1630578891
    },
    {
        "content": "<p>afaik inference breakage is allowed in principle, but it depends on impact. For contains that might be pretty big</p>",
        "id": 251695408,
        "sender_full_name": "The 8472",
        "timestamp": 1630579124
    },
    {
        "content": "<p>rustc itself doesn't even compile if you make that change to <code>slice.contains</code></p>",
        "id": 251695476,
        "sender_full_name": "Mara",
        "timestamp": 1630579189
    },
    {
        "content": "<p>This issue: <a href=\"https://github.com/rust-lang/rust/issues/42671\">https://github.com/rust-lang/rust/issues/42671</a> (2017, wowee) suggested adding a <code>contains_ref</code></p>",
        "id": 251738804,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1630598379
    },
    {
        "content": "<p>I think this was covered by the (now withdrawan) needle api in the past. There are a few things like this; I had wanted position/rposition too (see <a href=\"https://github.com/rust-lang/rust/pull/84058\">https://github.com/rust-lang/rust/pull/84058</a>).</p>\n<p>I think the fact that that needle and such is now not going to happen (which is probably the right call), there's a number of slice methods that were tied up in it which we should consider stabilizing somehow</p>",
        "id": 251962695,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1630719472
    }
]