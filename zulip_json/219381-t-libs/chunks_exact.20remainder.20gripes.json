[
    {
        "content": "<p>The <code>chunks_exact</code> functions (anything that matches <code>r?chunks_exact(_mut)?</code>) are all really pretty awkward to use correctly in the (common, IMO) case where you at least care <em>somewhat</em> about the remainder. Even if it's just to know it's len (but often its to process it differently).</p>\n<p>It requires something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">iter</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">slice</span><span class=\"p\">.</span><span class=\"n\">chunks_exact</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">rem</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iter</span><span class=\"p\">.</span><span class=\"n\">remainder</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">chunk</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">iter</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// use chunk</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"c1\">// use rem</span>\n</code></pre></div>\n<p>Is there anything that can/should be done to improve this? If not, can we avoid the same issues in the upcoming <code>array_chunks </code>?</p>",
        "id": 245389953,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1625792750
    },
    {
        "content": "<p>if you could match on the return value you could write <code>let (iter, rem) = slice.chunks_exact(N); for chunk in iter { .. }</code>, which is maybe nicer but still pretty awkward compared to the case where you ignore the remainder: <code>for chunk in slice.chunks_exact(N) { .. }</code></p>",
        "id": 245390172,
        "sender_full_name": "rpjohnst",
        "timestamp": 1625793002
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"117495\">rpjohnst</span> <a href=\"#narrow/stream/219381-t-libs/topic/chunks_exact.20remainder.20gripes/near/245390172\">said</a>:</p>\n<blockquote>\n<p>if you could match on the return value you could write <code>let (iter, rem) = slice.chunks_exact(N); for chunk in iter { .. }</code></p>\n</blockquote>\n<p>That would require chunks_exact returning a tuple, no?</p>",
        "id": 245391342,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1625794537
    },
    {
        "content": "<p>adding a <code>.self_and_remainder()</code> to the adapter should be feasible</p>",
        "id": 245409481,
        "sender_full_name": "The 8472",
        "timestamp": 1625815455
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"209168\">Thom Chiovoloni</span> <a href=\"#narrow/stream/219381-t-libs/topic/chunks_exact.20remainder.20gripes/near/245391342\">said</a>:</p>\n<blockquote>\n<p>That would require chunks_exact returning a tuple, no?</p>\n</blockquote>\n<p>yeah, or a struct with public fields- just speaking generally about matching vs .remainder()</p>",
        "id": 245488142,
        "sender_full_name": "rpjohnst",
        "timestamp": 1625859704
    }
]