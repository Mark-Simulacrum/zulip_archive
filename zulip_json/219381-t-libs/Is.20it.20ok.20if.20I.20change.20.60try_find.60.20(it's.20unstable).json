[
    {
        "content": "<p>As part of my <code>?</code> PR, I need to do something with <a href=\"https://doc.rust-lang.org/nightly/std/iter/trait.Iterator.html#method.try_find\"><code>Iterator::try_find</code></a> (<a href=\"https://github.com/rust-lang/rust/issues/63178\">tracking issue</a>).</p>\n<p>Today it's </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">try_find</span><span class=\"o\">&lt;</span><span class=\"n\">F</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span>: <span class=\"nc\">F</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span>::<span class=\"n\">Item</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">TryV1</span><span class=\"o\">&gt;</span>::<span class=\"n\">Error</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"> </span><span class=\"o\">....</span><span class=\"w\"></span>\n</code></pre></div>\n<p>but of course with <code>TryV2</code> there's no associated <code>Error</code> type to put there.</p>\n<p>Right now I have it as</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">try_find</span><span class=\"o\">&lt;</span><span class=\"n\">F</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">E</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span>: <span class=\"nc\">F</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span>::<span class=\"n\">Item</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">E</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">Self</span>: <span class=\"nb\">Sized</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">F</span>: <span class=\"nb\">FnMut</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">Self</span>::<span class=\"n\">Item</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">R</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">R</span>: <span class=\"nc\">TryV2</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// FIXME: This is a weird bound; the API should change</span>\n<span class=\"w\">        </span><span class=\"n\">R</span>: <span class=\"nc\">crate</span>::<span class=\"n\">ops</span>::<span class=\"n\">TryV2</span><span class=\"o\">&lt;</span><span class=\"n\">Residual</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"k\">crate</span>::<span class=\"n\">convert</span>::<span class=\"n\">Infallible</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">E</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n</code></pre></div>\n<p>&lt;<a href=\"https://github.com/rust-lang/rust/pull/84767/commits/ca92b5a23a9bb30a0741e9969e73d838eeba1ad1#diff-c552b2bf18fb3212fe93dd601ce487badf5e50faf9aeed4db7b0f6c22571ef01R2421\">https://github.com/rust-lang/rust/pull/84767/commits/ca92b5a23a9bb30a0741e9969e73d838eeba1ad1#diff-c552b2bf18fb3212fe93dd601ce487badf5e50faf9aeed4db7b0f6c22571ef01R2421</a>&gt;</p>\n<p>Is it ok to have it like that for a while, and to break people on nightly who were turbofishing it?  (It didn't break any caller in the rust tree.)</p>\n<p>My instinct is yes, since the original author has this comment in the tracking issue:</p>\n<blockquote>\n<p>The next step for this feature would be to allow coupling the resulting Try type with the closure return type.</p>\n</blockquote>\n<p>and similar things (like <a href=\"https://github.com/rust-lang/rust/issues/79711\"><code>array::try_map</code></a>) don't use <code>Try</code> for this, so there's probably still a holistic API unification to be done across these things.</p>",
        "id": 237868748,
        "sender_full_name": "scottmcm",
        "timestamp": 1620411911
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> not on t-libs, but in general breaking nightly APIs when necessary is fine</p>",
        "id": 237884502,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1620418783
    },
    {
        "content": "<p>(just don't break them when there's a simple way not to)</p>",
        "id": 237884513,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1620418792
    },
    {
        "content": "<p>Yeah, I know it's not prohibited.  I just like getting a \"seems plausible\" on libs stuff, or an \"I agree that's weird, but it's ok to fix that later\".</p>",
        "id": 237888807,
        "sender_full_name": "scottmcm",
        "timestamp": 1620420996
    },
    {
        "content": "<p>I think breaking should be fine, but it would be good to get an issue filed with instructions on how to fix (so we can point users at it)</p>",
        "id": 237891747,
        "sender_full_name": "simulacrum",
        "timestamp": 1620422392
    },
    {
        "content": "<p>The only difference is the number of generic parameters, so I don't really expect anyone to have trouble with it.  It's not a complicated fix <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 237990582,
        "sender_full_name": "scottmcm",
        "timestamp": 1620514755
    },
    {
        "content": "<p>I think i would just ask, what is the alternative to not breaking? That part wasn't clear to me at least. If there's no good alternative (or the alternatives are impractical) then breaking nightly folks seems OK to me.</p>",
        "id": 237990919,
        "sender_full_name": "BurntSushi",
        "timestamp": 1620515080
    },
    {
        "content": "<p>I guess the core of the trouble is that there's no type-level way to get the <code>E</code> type out of a <code>Result&lt;_, E&gt;</code> right now -- thus the adding a new generic parameter so that I can <code>=</code> constrain it.</p>\n<p>The simplest way around that is adding a quick pub-in-private-mod one to do that, but generally <code>core</code> seems to not like doing that.</p>\n<p>I think the \"real\" long-term solution is an HKT-style \"family\" type-function like was in the first draft of 3058.  With that, instead of <code>-&gt; Result&lt;Option&lt;Self::Item&gt;, /* something */&gt;</code> it'd be <code>-&gt; &lt; R::Residual as GetMeTheCorrespondingTypeWhereOutputIs&lt;Option&lt;Self::Item&gt;&gt; &gt;::TheType</code>.</p>\n<p>But since that was removed from the accepted RFC, it feels like I shouldn't be adding it as part of this change.  I guess I could just add it and make an issue for reconsidering it?  It just feels a bit like sidestepping process, though...</p>",
        "id": 238011875,
        "sender_full_name": "scottmcm",
        "timestamp": 1620539935
    },
    {
        "content": "<p>i think you should do what is necessary to unblock you (your initial proposal sounds fine?) and file an issue that basically captures this conversation if possible.</p>",
        "id": 238025205,
        "sender_full_name": "BurntSushi",
        "timestamp": 1620555322
    },
    {
        "content": "<p>Sounds good.  I've opened <a href=\"https://github.com/rust-lang/rust/issues/85115\">https://github.com/rust-lang/rust/issues/85115</a> to resolve the general question around <code>try_map</code> and <code>try_find</code> and such.</p>\n<p>Amusingly, looking into this, I might have been overly cautious.  This isn't the first time that the number of generic parameters on <code>Iterator::try_find</code> will have changed <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 238049836,
        "sender_full_name": "scottmcm",
        "timestamp": 1620582163
    }
]