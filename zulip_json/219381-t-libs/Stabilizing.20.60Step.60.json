[
    {
        "content": "<p>Aside from my recent-ish change making it safe to implement (<a href=\"https://github.com/rust-lang/rust/issues/83772\">#83772</a> which was merged on May 30), the <code>Step</code> trait (<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>) has been unchanged since <a href=\"https://github.com/rust-lang/rust/issues/69659\">#69659</a> (14 months ago). Does it make sense to stabilize this as-is? Without <code>TrustedStep</code> of course, as that requires min-specialization.</p>",
        "id": 246808006,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1626928453
    },
    {
        "content": "<p>Bueller?</p>",
        "id": 246916786,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1626995901
    },
    {
        "content": "<p>I would like to see this stablized. I have a library that would benefit from being able to impl Step (and does, behind a crate feature).</p>",
        "id": 246920135,
        "sender_full_name": "Connor Horman",
        "timestamp": 1626999406
    },
    {
        "content": "<p>Step was also unchanged for a while before those changes, so I'm not really convinced that just the time means that it's good to go.</p>\n<p>There's never been an RFC, right?  It seems to me like it might be worth an RFC arguing that this form is correct, and more generally that a trait here at all is correct.</p>\n<p>For example, one possible alternative would be to make <code>Range</code> and friends <code>#[fundamental]</code> so that num could just implement <code>Iterator for Range&lt;BigInt&gt;</code> directly itself.</p>\n<p>Other possible things include whether there are types that should only go forward, and thus there should be Step for Iterator and BackwardStep for DoubleEndedIterator, for example.</p>",
        "id": 247094751,
        "sender_full_name": "scottmcm",
        "timestamp": 1627162154
    },
    {
        "content": "<p>What would be the negatives of it being <code>#[fundamental]</code>?</p>",
        "id": 247108033,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1627187342
    },
    {
        "content": "<p>But no, as far as I know there's never been an RFC. Something like <code>BackwardStep</code> (bikeshedding apart) would already be possible by just calling <code>.backward()</code>, not <code>.forward()</code>, no?</p>",
        "id": 247108090,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1627187430
    },
    {
        "content": "<p>^^ negatives from a lang/libs perspective. There are certainly negatives from a user perspective (like requiring multiple implementations for the same output type)</p>",
        "id": 247108105,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1627187488
    },
    {
        "content": "<p>The main negative as far as I know is that it means that future impls are a breaking change?</p>",
        "id": 247112302,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1627195621
    },
    {
        "content": "<p>Which is actually a pretty big negative.</p>",
        "id": 247112307,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1627195630
    },
    {
        "content": "<p>It basically makes it impossible to implement new standard library traits for it.</p>",
        "id": 247112311,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1627195656
    },
    {
        "content": "<p>I'd think that a new trait would be less of a big club.</p>",
        "id": 247112362,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1627195753
    },
    {
        "content": "<p>Just thinking, having the various range types be fundamental would prohibit implementing <code>Copy</code>, would it not? Barring specialization or overlapping marker traits presumably.</p>",
        "id": 247113063,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1627197002
    },
    {
        "content": "<p>I believe it would, though I'm not an expert.</p>",
        "id": 247113243,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1627197317
    },
    {
        "content": "<p>I'd like not to preclude implementing Copy on ranges, from reading its past discussions I might have a design that satisfies all parties but I need to think about it some more and actually write it up</p>",
        "id": 247130819,
        "sender_full_name": "bstrie",
        "timestamp": 1627226302
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245610\">Jacob Pratt</span> <a href=\"#narrow/stream/219381-t-libs/topic/Stabilizing.20.60Step.60/near/247108090\">said</a>:</p>\n<blockquote>\n<p>Something like <code>BackwardStep</code> (bikeshedding apart) would already be possible by just calling <code>.backward()</code>, not <code>.forward()</code>, no?</p>\n</blockquote>\n<p>But what if there's a type that can only step forward, and thus <code>backward</code> isn't implementable?  Right now <code>Step</code> implies <code>DoubleEndedIterator</code>; there's no way to be <em>only</em> <code>Iterator</code>.</p>",
        "id": 247140988,
        "sender_full_name": "scottmcm",
        "timestamp": 1627241416
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417924\">inquisitivecrystal</span> <a href=\"#narrow/stream/219381-t-libs/topic/Stabilizing.20.60Step.60/near/247112311\">said</a>:</p>\n<blockquote>\n<p>It basically makes it impossible to implement new standard library traits for it.</p>\n</blockquote>\n<p>Well, implementations can be added, but only at the same time as the new trait is added.  If something is forgotten at stabilization time, it can never be added later.</p>\n<p>(<code>#[fundamental]</code> is a big hammer, so it's not obvious to me that it would be the <em>correct</em> solution, but given the large number of trait designs we've been through I think it's at least worth seriously looking at as an alternative to avoid needing to pick the One True Step Trait.)</p>",
        "id": 247141079,
        "sender_full_name": "scottmcm",
        "timestamp": 1627241545
    },
    {
        "content": "<p>Are you thinking something along the lines of splitting <code>Step</code> into <code>ForwardStep</code> and <code>BackwardStep</code>? I'm not sure how <code>steps_between</code> would fit into a spit off the top of my head, but I suppose it could be done.</p>",
        "id": 247142704,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1627243893
    },
    {
        "content": "<p><code>DoubleEndedIterator</code> and whatnot could be implemented automatically when both traits are implemented.</p>",
        "id": 247142706,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1627243909
    },
    {
        "content": "<p>for <code>steps_between</code>, maybe have a <code>MeasurableStep</code> trait?</p>",
        "id": 247147537,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1627249972
    },
    {
        "content": "<p>or <code>MeasureSteps</code></p>",
        "id": 247147547,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1627250002
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/219381-t-libs/topic/Stabilizing.20.60Step.60/near/247141079\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"417924\">inquisitivecrystal</span> <a href=\"#narrow/stream/219381-t-libs/topic/Stabilizing.20.60Step.60/near/247112311\">said</a>:</p>\n<blockquote>\n<p>It basically makes it impossible to implement new standard library traits for it.</p>\n</blockquote>\n<p>Well, implementations can be added, but only at the same time as the new trait is added.  If something is forgotten at stabilization time, it can never be added later.</p>\n<p>(<code>#[fundamental]</code> is a big hammer, so it's not obvious to me that it would be the <em>correct</em> solution, but given the large number of trait designs we've been through I think it's at least worth seriously looking at as an alternative to avoid needing to pick the One True Step Trait.)</p>\n</blockquote>\n<p>It feels to me like this is essentially technical debt. Or, that's not quite the right term. But we'd be sacrificing future flexibility because we don't want to figure out how to design the API now.</p>",
        "id": 247149426,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1627253036
    },
    {
        "content": "<p>It feels a bit silly. It's like... working out the correct API may not be easy, but it's still our job to do it, somehow.</p>",
        "id": 247149479,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1627253116
    },
    {
        "content": "<p>I would consider it less bad to have an incorrectly desgined <code>Step</code> API than to lock future rust stdlib developers out of the flexibility that comes from being able to implement traits.</p>",
        "id": 247149492,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1627253156
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 247161749,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1627273062
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"229517\">@Jacob Lifshay</span> the problem is <code>steps_between</code> is for moving forwards, not backwards</p>",
        "id": 247161921,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1627273276
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245610\">Jacob Pratt</span> <a href=\"#narrow/stream/219381-t-libs/topic/Stabilizing.20.60Step.60/near/247161921\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"229517\">Jacob Lifshay</span> the problem is <code>steps_between</code> is for moving forwards, not backwards</p>\n</blockquote>\n<p>?? it should be for counting the number of steps needed to move between <code>a</code> and <code>b</code>, <code>steps_between(&amp;a, &amp;b)</code>. it counts the number of steps to move forward from <code>a</code> to get to <code>b</code>; it also counts the number of steps to move backward from <code>b</code> to get to <code>a</code>. So, it's useful for both stepping forwards and for stepping backwards</p>",
        "id": 247163647,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1627275794
    },
    {
        "content": "<p>I see what you mean, but why would that be a separate trait?</p>",
        "id": 247164186,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1627276542
    },
    {
        "content": "<p>Right now there's an invariant \"<code>steps_between(&amp;a, &amp;b) == None</code> if <code>a &gt; b</code>\" which obviously couldn't be generalized to <code>ForwardStep</code> and <code>BackwardStep</code> traits. You <em>could</em> just flip the ordering of everything, but then it's not clear what should be used for <code>TrustedLen</code> impls.</p>",
        "id": 247164241,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1627276624
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245610\">Jacob Pratt</span> <a href=\"#narrow/stream/219381-t-libs/topic/Stabilizing.20.60Step.60/near/247164186\">said</a>:</p>\n<blockquote>\n<p>I see what you mean, but why would that be a separate trait?</p>\n</blockquote>\n<p>because <code>steps_between</code> is useful for things that can only step forwards, or things that can only step backwards, or things that can step either direction...it is a more general concept than just <code>StepForward</code> or <code>StepBackward</code>.</p>",
        "id": 247166548,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1627279865
    },
    {
        "content": "<p>Additionally, by having <code>steps_between</code> be in a separate trait, you don't ever have to worry that <code>StepForward::steps_between</code> and <code>StepBackward::steps_between</code> might behave differently, they both refer to <code>MeasureStep::steps_between</code> (though I'm not necessarily advocating that <code>MeasureStep</code> should be a super-trait of the other <code>Step*</code> traits...)</p>",
        "id": 247166872,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1627280231
    },
    {
        "content": "<p>It likely wouldn't be clear what a step is if it's a separate trait, as there's two directions it can go (right now it's clearly only forwards).</p>",
        "id": 247166966,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1627280363
    },
    {
        "content": "<p>Honestly I don't see a use case for a backwards-only implementation of <code>Step</code> — what would require such a thing?</p>",
        "id": 247166978,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1627280389
    },
    {
        "content": "<p>because right now I'm debating something I can't envision a use for, which seems...useless</p>",
        "id": 247167037,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1627280420
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245610\">Jacob Pratt</span> <a href=\"#narrow/stream/219381-t-libs/topic/Stabilizing.20.60Step.60/near/247166978\">said</a>:</p>\n<blockquote>\n<p>Honestly I don't see a use case for a backwards-only implementation of <code>Step</code> — what would require such a thing?</p>\n</blockquote>\n<p>hmm, how about something like git's commit graph, but without merge commits: you could easily step from a particular revision to an older revision by just following parent links, however you couldn't go from an older revision to a newer one because there could be multiple revisions that all have the same parent and you can't decide which one to use. You could implement <code>BackwardStep</code> and <code>steps_between</code>, but not <code>ForwardStep</code>.</p>",
        "id": 247169636,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1627283266
    },
    {
        "content": "<p>Another example where you could implement <code>BackwardStep</code> but not <code>ForwardStep</code> is for a reversed version of a forward-only type.</p>",
        "id": 247169721,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1627283361
    },
    {
        "content": "<p>While you could obviously use <code>Step</code> and its methods on its own, the purpose <em>is</em> for the various <code>Range*</code> types, is it not? Unless there's plans to have a backwards-by-default type, wouldn't this only be for the likely uncommon case of calling methods directly?</p>",
        "id": 247170277,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1627283887
    },
    {
        "content": "<p>Basically there's no \"reverse iterator\" anywhere in stdlib</p>",
        "id": 247170821,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1627284407
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245610\">Jacob Pratt</span> <a href=\"#narrow/stream/219381-t-libs/topic/Stabilizing.20.60Step.60/near/247170821\">said</a>:</p>\n<blockquote>\n<p>Basically there's no \"reverse iterator\" anywhere in stdlib</p>\n</blockquote>\n<p>ok, in that case, <code>Step</code> can be split into <code>ForwardStep</code> and <code>BidirectionalStep</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">ForwardStep</span>: <span class=\"nb\">Clone</span> <span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">PartialOrd</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">steps_between</span><span class=\"p\">(</span><span class=\"n\">start</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">end</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">forward_checked</span><span class=\"p\">(</span><span class=\"n\">start</span>: <span class=\"nc\">Self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">count</span>: <span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">forward</span><span class=\"p\">(</span><span class=\"n\">start</span>: <span class=\"nc\">Self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">count</span>: <span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">forward_unchecked</span><span class=\"p\">(</span><span class=\"n\">start</span>: <span class=\"nc\">Self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">count</span>: <span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">BidirectionalStep</span>: <span class=\"nc\">ForwardStep</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">backward_checked</span><span class=\"p\">(</span><span class=\"n\">start</span>: <span class=\"nc\">Self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">count</span>: <span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">backward</span><span class=\"p\">(</span><span class=\"n\">start</span>: <span class=\"nc\">Self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">count</span>: <span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">backward_unchecked</span><span class=\"p\">(</span><span class=\"n\">start</span>: <span class=\"nc\">Self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">count</span>: <span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 247209419,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1627309635
    },
    {
        "content": "<p>reverse iterator/step can be added later:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[unstable(feature = </span><span class=\"s\">\"reverse_iter\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">ReverseStep</span>: <span class=\"nb\">Clone</span> <span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">PartialOrd</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"sd\">/// get `(start..end).len()`</span>\n<span class=\"w\">    </span><span class=\"sd\">/// if `steps_between(&amp;a, &amp;b) == Some(N)`, then</span>\n<span class=\"w\">    </span><span class=\"sd\">/// it must be the case that `a == backward(b, N)`</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">steps_between</span><span class=\"p\">(</span><span class=\"n\">start</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">end</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">backward_checked</span><span class=\"p\">(</span><span class=\"n\">start</span>: <span class=\"nc\">Self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">count</span>: <span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">backward</span><span class=\"p\">(</span><span class=\"n\">start</span>: <span class=\"nc\">Self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">count</span>: <span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">backward_unchecked</span><span class=\"p\">(</span><span class=\"n\">start</span>: <span class=\"nc\">Self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">count</span>: <span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">BidirectionalStep</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">ReverseStep</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[unstable(feature = </span><span class=\"s\">\"reverse_iter\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">ReverseIterator</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Item</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">next_back</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span>::<span class=\"n\">Item</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">BidirectionalIterator</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">ReverseIterator</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// maybe modify Iterator::rev() to use ReverseIterator bound instead of BidirectionalIterator once specialization is good enough?</span>\n</code></pre></div>",
        "id": 247212338,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1627310833
    },
    {
        "content": "<p>^^ Anyone else have thoughts on that? It seems like a reasonable change to make that would assuage concerns.</p>",
        "id": 247253138,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1627329367
    },
    {
        "content": "<p>What mathematical structure makes it easy to only calculate steps in one direction but still have a way to calculate steps between, since that requires subtraction?</p>",
        "id": 247253982,
        "sender_full_name": "The 8472",
        "timestamp": 1627329746
    },
    {
        "content": "<p>A single linked list would fit that description. You'd need some additional info to calculate the number of steps between two nodes efficiently, but there would be no way to iterate in reverse for obvious reasons.</p>",
        "id": 247255266,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1627330315
    },
    {
        "content": "<p>you would need to be able to calculate the steps between <em>any two nodes</em>, so that would only allow a linked list with the index encoded in every node, which kind of voids the benefits of a linked list, no?</p>",
        "id": 247255905,
        "sender_full_name": "The 8472",
        "timestamp": 1627330599
    },
    {
        "content": "<p>And it wouldn't have an efficient <code>nth</code> implementation.</p>",
        "id": 247255973,
        "sender_full_name": "The 8472",
        "timestamp": 1627330636
    },
    {
        "content": "<p>Like I said it wouldn't be efficient, but you <em>could</em> just walk the list.</p>",
        "id": 247256010,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1627330657
    },
    {
        "content": "<p>I know git commits were mentioned earlier.</p>",
        "id": 247256034,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1627330667
    },
    {
        "content": "<p>At that point you could just use an iterator.</p>",
        "id": 247256040,
        "sender_full_name": "The 8472",
        "timestamp": 1627330671
    },
    {
        "content": "<p>git history doesn't work because it's a graph not a sequence.</p>",
        "id": 247256418,
        "sender_full_name": "The 8472",
        "timestamp": 1627330832
    },
    {
        "content": "<p>Hrrm... the <code>Step</code> trait has <code>PartialOrd</code> as bound but doesn't talk about what happens when you have something that doesn't have total order.</p>",
        "id": 247257108,
        "sender_full_name": "The 8472",
        "timestamp": 1627331173
    },
    {
        "content": "<p>So technically a git commit <code>Range</code> and <code>Step</code> would be possible (even though inefficient) but could lead to surprising results. E.g. you could find that a value is <code>contain()</code>ed in  range but iterating through the whole range will never visit it because you're walking down a different branch.</p>",
        "id": 247257416,
        "sender_full_name": "The 8472",
        "timestamp": 1627331351
    },
    {
        "content": "<p>git commits won't work because there is no unambiguous parent for every commit, some have multiple parents.<br>\nIf git's commit graph were modified to enforce that every commit can have either 0 or 1 parent commit (thereby excluding merge commits as mentioned earlier) and the graph is required to be a DAG (already a requirement for git iirc), then comparing can be done where they're equal if both inputs are the same node, and one is less/greater than another if it is an ancestor/descendent node of the other node, otherwise they are incomparable. That comparison scheme is consistent and ranges are either not well defined (endpoints are two unrelated nodes, similar to <code>NaN..=NaN</code>) or ranges include only the nodes that are descendents of one and ancestors of the other endpoint (and also the endpoint nodes themselves as appropriate), all such nodes can be reached by walking the parent node chain.</p>",
        "id": 247258795,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1627332073
    },
    {
        "content": "<p>If you specify a range of git commits then you can search for possible paths between those nodes. everything along all possible paths between them then would fall into this \"range\". And it can be stepped through if you choose any particular path, e.g. the shortest one.<br>\nThat's all that the current bounds require (Clone + PartialOrd). You'd have to do some expensive computation on each step or cache it somewhere, but technically it would be allowed. I just think it would be a bad idea.</p>",
        "id": 247259272,
        "sender_full_name": "The 8472",
        "timestamp": 1627332286
    },
    {
        "content": "<p>so, assuming <code>contain</code>'s code is implemented correctly as <code>begin &lt;= x &amp;&amp; x &lt; end</code> for <code>Range</code> (and similarly for other range types), it will always return the correct result for the above <code>PartialOrd</code> definition I stated.</p>",
        "id": 247259505,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1627332388
    },
    {
        "content": "<p>My point was that <code>Range::contain(x) == true</code> but  <code>while let Some(y) = Step::forward_checked(1) { if x == y {prinln!(\"found!\")} }</code> will never print.</p>",
        "id": 247259860,
        "sender_full_name": "The 8472",
        "timestamp": 1627332594
    },
    {
        "content": "<p>aiui <code>PartialOrd</code>'s requirements do not preclude diamonds.</p>",
        "id": 247260157,
        "sender_full_name": "The 8472",
        "timestamp": 1627332732
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330154\">The 8472</span> <a href=\"#narrow/stream/219381-t-libs/topic/Stabilizing.20.60Step.60/near/247259272\">said</a>:</p>\n<blockquote>\n<p>If you specify a range of git commits then you can search for possible paths between those nodes. everything along all possible paths between them then would fall into this \"range\". And it can be stepped through if you choose any particular path, e.g. the shortest one.<br>\nThat's all that the current bounds require (Clone + PartialOrd). You'd have to do some expensive computation on each step or cache it somewhere, but technically it would be allowed. I just think it would be a bad idea.</p>\n</blockquote>\n<p>well, I'd say it's your own fault for implementing any <code>Step</code> trait for git commits, since <code>forward</code> has to arbitrarily choose one path since which path to follow is ambiguous, of course range iteration will not be consistent. For the modified git commit graph without merge commits, range iteration is consistent since there is always either 0 or 1 path between nodes, so no arbitrary choice is needed.</p>",
        "id": 247260352,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1627332825
    },
    {
        "content": "<p>basically, I'm saying <code>Step</code> should require that there is always 0 or 1 valid path(s) between any two values</p>",
        "id": 247260722,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1627332992
    },
    {
        "content": "<p>I don't disagree, I was merely pointing out that it currently isn't forbidding that.</p>",
        "id": 247260853,
        "sender_full_name": "The 8472",
        "timestamp": 1627333078
    },
    {
        "content": "<p>though <code>steps_between</code> may have to be modified to distinguish between no path and path with <code>count &gt; usize::MAX</code></p>",
        "id": 247261045,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1627333167
    },
    {
        "content": "<p>Or we require <code>Ord</code>, then there is a total order which implies only one path.</p>",
        "id": 247261359,
        "sender_full_name": "The 8472",
        "timestamp": 1627333237
    },
    {
        "content": "<p>just requiring <code>Ord</code> may be easier, since we wouldn't have to define what <code>(a..=b).collect()</code> returns when <code>a.partial_ord(&amp;b) == None</code></p>",
        "id": 247262542,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1627333509
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"229517\">Jacob Lifshay</span> <a href=\"#narrow/stream/219381-t-libs/topic/Stabilizing.20.60Step.60/near/247261045\">said</a>:</p>\n<blockquote>\n<p>though <code>steps_between</code> may have to be modified to distinguish between no path and path with <code>count &gt; usize::MAX</code></p>\n</blockquote>\n<p>Hmm, I opened this issue back in 2018, and it sounds like it might still be a problem: <a href=\"https://github.com/rust-lang/rust/issues/48117\">https://github.com/rust-lang/rust/issues/48117</a></p>",
        "id": 247272490,
        "sender_full_name": "scottmcm",
        "timestamp": 1627338749
    },
    {
        "content": "<p>@scottmcm these two things are no longer true, though</p>\n<blockquote>\n<p>But it also uses <code>None</code> for unimplemented</p>\n<p>And as a result, <code>Range</code> needs to return <code>(0, None)</code> when it gets <code>None</code></p>\n</blockquote>",
        "id": 247288570,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1627354087
    }
]