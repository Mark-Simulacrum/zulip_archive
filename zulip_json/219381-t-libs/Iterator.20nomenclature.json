[
    {
        "content": "<p>Looking through the <code>core::iter</code> module description I am missing some terms to describe parts of a chain of iterator adapters.</p>\n<p>The java stream package distinguishes \"source\", \"intermediate operation\", \"terminal operation\" and calls the whole assembly \"pipeline\". We have \"adapter\" for \"intermediate operation\", but the other pieces are missing in the public documentation.<br>\nI have already used some of the other javaisms in internal documentation for <code>SourceIter</code>. Can I make them part of the public documentation or are there other names that have been used somewhere?</p>\n<p>Being able to name concepts is useful.</p>",
        "id": 245579964,
        "sender_full_name": "The 8472",
        "timestamp": 1625964635
    },
    {
        "content": "<p>Bikeshed: \"terminal operation\" doesn't sound as good if you're using \"adapter\" instead of \"intermediate operation\".</p>",
        "id": 245580103,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625964929
    },
    {
        "content": "<p>We do have a section on iterators being lazy, but it doesn't name the category of things that aren't lazy.</p>",
        "id": 245580170,
        "sender_full_name": "The 8472",
        "timestamp": 1625965065
    },
    {
        "content": "<p>I think some people like to call the \"terminal operation\" consumers/consuming operations</p>",
        "id": 245580225,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1625965138
    },
    {
        "content": "<p>That's slightly ambiguous since they don't necessarily consume the iterator. But that criticism would also apply to terminal operation. They do tend to consume some items at least.</p>",
        "id": 245580396,
        "sender_full_name": "The 8472",
        "timestamp": 1625965353
    },
    {
        "content": "<p>accumulator, reduce, fold, etc.; not sure we have an unambiguous single term that covers all of them</p>",
        "id": 245580407,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1625965398
    },
    {
        "content": "<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> iterating method, driver.</p>",
        "id": 245580460,
        "sender_full_name": "The 8472",
        "timestamp": 1625965460
    },
    {
        "content": "<p>I'm confused about \"consumer\" being a problem. I'd think that we're talking about things that take ownership of the iterator, at which point you can't do anything else with it? I think I'm missing something.</p>",
        "id": 245580737,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625966024
    },
    {
        "content": "<p>Some of the methods only take <code>&amp;mut self</code> instead of <code>self</code>.</p>",
        "id": 245580824,
        "sender_full_name": "The 8472",
        "timestamp": 1625966131
    },
    {
        "content": "<p>And <code>next()</code> is barely consuming, it's the smallest unit of iteration.</p>",
        "id": 245580853,
        "sender_full_name": "The 8472",
        "timestamp": 1625966164
    },
    {
        "content": "<p>Yeah, fair.</p>",
        "id": 245580872,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625966186
    },
    {
        "content": "<p>I have used \"advancing method\" in some places.</p>",
        "id": 245580885,
        "sender_full_name": "The 8472",
        "timestamp": 1625966237
    },
    {
        "content": "<p>I feel like \"consumer\" does fit for the ones that take <code>self</code>, but you'd need something self for the ones that take <code>&amp;mut self </code>, and it sounds like you're looking for something that covers both.</p>",
        "id": 245581034,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625966521
    },
    {
        "content": "<p>Just call them \"Advancers\"; \"Consumers\" are a subset that advance them entirely?</p>",
        "id": 245585276,
        "sender_full_name": "isHavvy",
        "timestamp": 1625973996
    },
    {
        "content": "<p>I have never felt the need to name all possible operations together that advance / consume / whatever-it-is-if-it-isn’t-an-adapter an iterator. I’m interested in realistic or even real examples of using such a term.</p>\n<p>Reading Java’s <code>Stream</code> docs, it seems to me like the need to clearly call out “terminal operations” is mostly just due to the fact that the programmer needs to manually make sure to never call more than one “terminal” operation to avoid <code>IllegalStateException</code>. In Rust, you can just do whatever you want, as long as the borrow checker allows it, which includes continuing iteration over the remaining elements after something like <code>find</code> or <code>any</code> was called (I’m not even sure e.g. if that is something that <code>Java</code>’s <code>anyMatch</code> allows or disallows; it calls itself “short-circuiting terminal operation”, reading the docs it feels like continuing iteration afterwards is probably not allowed).</p>",
        "id": 245600327,
        "sender_full_name": "Frank Steffahn",
        "timestamp": 1625999435
    },
    {
        "content": "<p>I'm writing a proposal on effects of iterators and need to distinguish between the results of things like <code>count()</code>, adapters and more incidental things like <code>clone()</code> in <code>cloned()</code>.</p>",
        "id": 245601255,
        "sender_full_name": "The 8472",
        "timestamp": 1626001020
    },
    {
        "content": "<p>I think for now it makes sense to just come up with terminology that is tailored to your proposal, without worrying about whether it ought to apply more broadly. Java's model may be sufficiently different that trying to port terms over directly might not be an especially good fit</p>",
        "id": 245613114,
        "sender_full_name": "bstrie",
        "timestamp": 1626018478
    }
]