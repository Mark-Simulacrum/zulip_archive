[
    {
        "content": "<p>Sometimes I run into an error like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0277]: can&#39;t compare `&amp;char` with `char`\n    --&gt; src/librustdoc/passes/collect_intra_doc_links.rs:1980:61\n     |\n1980 |                 while path.get(current).map_or(false, |c| c != &#39;&gt;&#39;) {\n     |                                                             ^^ no implementation for `&amp;char == char`\n     |\n     = help: the trait `std::cmp::PartialEq&lt;char&gt;` is not implemented for `&amp;char`\n</code></pre></div>\n\n\n<p>This can easily be solved by changing the comparison to <code>*c != '&gt;'</code>, but it's kind of frustrating because <code>char</code> is <code>Copy</code> and this can be easily solved. Is there any way to improve this? Could there be something in <code>core</code> like this?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">PartialEq</span><span class=\"o\">&lt;&amp;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nb\">Copy</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">eq</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">other</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">other</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// ...</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// And the same, but with `&amp;T` and `T` reversed.</span>\n</code></pre></div>\n\n<p>Thank you!</p>",
        "id": 211084957,
        "sender_full_name": "Noah Lev",
        "timestamp": 1600915671
    },
    {
        "content": "<p>for specific types (like <code>char</code>) this would probably be fine. I think that adding a blanket impl for it would be a little more tricky.</p>",
        "id": 211085293,
        "sender_full_name": "Lokathor",
        "timestamp": 1600916074
    },
    {
        "content": "<p>For types that currently only have one <code>PartialEq</code>, adding more will hurt type inference</p>",
        "id": 211085441,
        "sender_full_name": "cuviper",
        "timestamp": 1600916300
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"138448\">cuviper</span> <a href=\"#narrow/stream/219381-t-libs/topic/.26char.20.3D.3D.20char/near/211085441\">said</a>:</p>\n<blockquote>\n<p>For types that currently only have one <code>PartialEq</code>, adding more will hurt type inference</p>\n</blockquote>\n<p>Hurt type inference performance?</p>",
        "id": 211085903,
        "sender_full_name": "Noah Lev",
        "timestamp": 1600917000
    },
    {
        "content": "<p>as in, the compiler will have trouble inferring things</p>",
        "id": 211085954,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600917035
    },
    {
        "content": "<p>In other words: Type inference will have too many options and will fail with an error message.</p>",
        "id": 211085964,
        "sender_full_name": "Lokathor",
        "timestamp": 1600917051
    },
    {
        "content": "<p>this is the same reason <code>f(&amp;my_string)</code> doesn't work if f takes a trait</p>",
        "id": 211085966,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600917054
    },
    {
        "content": "<p>you have to explicitly say <code>my_string.as_str()</code></p>",
        "id": 211085975,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600917066
    },
    {
        "content": "<p>Is that considered a semver breaking change then?</p>",
        "id": 211086075,
        "sender_full_name": "Noah Lev",
        "timestamp": 1600917187
    },
    {
        "content": "<p>It's <em>technically</em> a minor change, which is allowed (with caution)</p>",
        "id": 211086158,
        "sender_full_name": "cuviper",
        "timestamp": 1600917307
    },
    {
        "content": "<p>I guess because you can adapt to it pretty easily?</p>",
        "id": 211086168,
        "sender_full_name": "Noah Lev",
        "timestamp": 1600917328
    },
    {
        "content": "<p>Yes</p>",
        "id": 211086170,
        "sender_full_name": "cuviper",
        "timestamp": 1600917335
    },
    {
        "content": "<p>(By just specifying an explicit type?)</p>",
        "id": 211086171,
        "sender_full_name": "Noah Lev",
        "timestamp": 1600917336
    },
    {
        "content": "<p>Well, it's minor for a specific type like <code>char</code>. The blanket <code>&amp;T</code> suggestion is a major break, because that's a fundamental type.</p>",
        "id": 211086294,
        "sender_full_name": "cuviper",
        "timestamp": 1600917486
    },
    {
        "content": "<p>Meaning that <code>&amp;Foo</code> is a local type to the crate that defines <code>Foo</code></p>",
        "id": 211086302,
        "sender_full_name": "cuviper",
        "timestamp": 1600917517
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307537\">@Camelid</span> Sounds related to <a href=\"https://github.com/rust-lang/rust/issues/44619\">https://github.com/rust-lang/rust/issues/44619</a>, though nothing ever happened with that AFAIK</p>",
        "id": 211087729,
        "sender_full_name": "scottmcm",
        "timestamp": 1600919518
    },
    {
        "content": "<p>Someone opened an issue about this: <a href=\"https://github.com/rust-lang/rust/issues/77374\">#77374</a> <span aria-label=\"laughter tears\" class=\"emoji emoji-1f602\" role=\"img\" title=\"laughter tears\">:laughter_tears:</span></p>",
        "id": 211850257,
        "sender_full_name": "Noah Lev",
        "timestamp": 1601506656
    }
]