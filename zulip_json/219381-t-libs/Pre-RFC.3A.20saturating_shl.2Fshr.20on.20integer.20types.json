[
    {
        "content": "<p>Hey folks, just want to ask if a <code>saturating_shl</code> / <code>saturating_shr</code> has been previously discussed that I can't find from searching github and here.<br>\nI'm quite happy to write up an RFC. The idea would be if the amount of bits to shift by was equal or greater than the number of bits in the type it would return <code>0</code>.</p>",
        "id": 243114701,
        "sender_full_name": "avitex",
        "timestamp": 1623989690
    },
    {
        "content": "<p>Looking for some feedback on: <a href=\"https://github.com/avitex/rfcs/blob/master/text/0000-saturating-bit-shifts.md\">https://github.com/avitex/rfcs/blob/master/text/0000-saturating-bit-shifts.md</a> if possible. Thank you! :)</p>",
        "id": 243130580,
        "sender_full_name": "avitex",
        "timestamp": 1624004982
    },
    {
        "content": "<p>I'd speak to libs-api, but it's likely that this change is so obvious and simple that an RFC wouldn't be needed. Usually adding single small methods can just go through an FCP on the PR that adds them to the Nightly standard library, without the entire formal RFC process.</p>",
        "id": 243156878,
        "sender_full_name": "Lokathor",
        "timestamp": 1624021278
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"399889\">@avitex</span> that's a very reasonable function to have. i'd be slightly worried about the name. just by the name i didn't directly grasp what it'd do, but it does make sense in some ways and i can't think of a better name right now.</p>",
        "id": 243180930,
        "sender_full_name": "Mara",
        "timestamp": 1624032518
    },
    {
        "content": "<p>I've never been super happy with applying these conventions to shl/shr, since talking about the shift amount instead of the result is a bit weird to me, given how these apply to <code>add</code> and <code>mul</code> and such.</p>\n<p>Having a shift that \"just works\" (so <code>&gt;&gt;N</code> is the same as doing <code>&gt;&gt;1</code> N times) seems very reasonable.  But it's not obvious to me that <code>saturating_</code> is the name for it -- I think one could reasonably assuming that <code>x.saturating_shr(1000)</code> would give <code>x &gt;&gt; 31</code>, not <code>0</code>, because of saturating the shift amount into an <code>i5</code>.</p>",
        "id": 243181110,
        "sender_full_name": "scottmcm",
        "timestamp": 1624032624
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"399889\">@avitex</span> x.saturating_shr(10000) would produce <code>-1</code> and not <code>0</code> for negative x, i assume?</p>",
        "id": 243181111,
        "sender_full_name": "Mara",
        "timestamp": 1624032625
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"122651\" href=\"/#narrow/stream/122651-general/topic/Pre-RFC.3A.20saturating_shl.2Fshr.20on.20integer.20types\">#general &gt; Pre-RFC: saturating_shl/shr on integer types</a> by <span class=\"user-mention silent\" data-user-id=\"310399\">Mara</span></p>",
        "id": 243181281,
        "sender_full_name": "Notification Bot",
        "timestamp": 1624032732
    },
    {
        "content": "<p>Spitballing: <code>2.signed_shl(-1) =&gt; 1</code></p>\n<p>EDIT: no, I don't like that any more.  Gives too much of an <em>A</em>SHL vibe.</p>",
        "id": 243181319,
        "sender_full_name": "scottmcm",
        "timestamp": 1624032759
    },
    {
        "content": "<p>So I guess we're doing an \"infinite precision\" shift and keeping the value that fits back in range of the type, is one way to think about it. Though that doesn't suggest a better name offhand.</p>",
        "id": 243181453,
        "sender_full_name": "Lokathor",
        "timestamp": 1624032850
    },
    {
        "content": "<p>what about signed ints?</p>",
        "id": 243193219,
        "sender_full_name": "The 8472",
        "timestamp": 1624039970
    },
    {
        "content": "<p>For this operation, it's consistent to think of the conversion from the limited precision type to the temporary infinite precision type as being the \"natural\" way you convert an integer to a higher bit integer sign-ness.</p>\n<p>In other words:</p>\n<ul>\n<li>uX to u(X+N) is always 0-extended when increasing the bit count.</li>\n<li>iX to i(X+N) is always sign-extended when increasing the bit count.</li>\n</ul>\n<p>So if you imagine it as being a \"bit increase\" to infinity bits, then the operation, then a truncation to the original size, you'll get the \"correct\" results:</p>\n<ul>\n<li>unsigned values shift in 0s on either side.</li>\n<li>signed values shift in 0s on the low end and sign bits on the high end.</li>\n</ul>",
        "id": 243195530,
        "sender_full_name": "Lokathor",
        "timestamp": 1624041605
    },
    {
        "content": "<p><a href=\"https://lists.llvm.org/pipermail/llvm-dev/2020-July/143195.html\">https://lists.llvm.org/pipermail/llvm-dev/2020-July/143195.html</a> LLVM's sat shl returns MIN or MAX, as appropriate, if the saturating condition is triggered, not 0.</p>",
        "id": 243235725,
        "sender_full_name": "Jubilee",
        "timestamp": 1624088731
    },
    {
        "content": "<p>so <code>0b1000_0000u8.saturating_shl(1) == 0xFF</code>?</p>",
        "id": 243245588,
        "sender_full_name": "Mara",
        "timestamp": 1624102948
    },
    {
        "content": "<p>The proposed behavior is <code>0b1000_0000u8.saturating_shl(1) == 0</code>. <code>0b1000_0000u8.saturating_shl(1) == 0xFF</code> would be diabolical</p>",
        "id": 243262723,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624127266
    },
    {
        "content": "<p>but I think it indicates that <code>saturating_*</code> is not the right name</p>",
        "id": 243262773,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624127297
    },
    {
        "content": "<p>can we just call this <code>shl()</code>? This is the bitshift that god intended</p>",
        "id": 243262774,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624127299
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/219381-t-libs/topic/Pre-RFC.3A.20saturating_shl.2Fshr.20on.20integer.20types/near/243262774\">said</a>:</p>\n<blockquote>\n<p>can we just call this <code>shl()</code>? This is the bitshift that god intended</p>\n</blockquote>\n<p>No, because if one <code>use std::ops::Shl;</code> then there's already a <code>shl</code>.</p>",
        "id": 243263166,
        "sender_full_name": "scottmcm",
        "timestamp": 1624127924
    },
    {
        "content": "<p>what does the normal shl do?</p>",
        "id": 243263192,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624127979
    },
    {
        "content": "<p>checks the shift amount in debug, wraps it in release.</p>",
        "id": 243263379,
        "sender_full_name": "scottmcm",
        "timestamp": 1624128258
    },
    {
        "content": "<p>ugh... I see the consistency argument but this seems like a misunderstanding of what overflow means in the context of bitshifts</p>",
        "id": 243263468,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624128425
    },
    {
        "content": "<p>how about <code>unbounded_shl</code>?</p>",
        "id": 243263532,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624128503
    },
    {
        "content": "<blockquote>\n<p>0b1000_0000u8.saturating_shl(1) == 0xFF would be diabolical</p>\n</blockquote>\n<p>that's what llvm does, as Jubilee mentioned</p>",
        "id": 243266383,
        "sender_full_name": "Mara",
        "timestamp": 1624132921
    },
    {
        "content": "<p>i'm wondering what happens if we just make regular <code>&lt;&lt;</code> and <code>&gt;&gt;</code> work with larger shifts. no panics, no wrapping in release mode. just use .wrapping_shl() if you want to avoid the check.</p>",
        "id": 243266453,
        "sender_full_name": "Mara",
        "timestamp": 1624133019
    },
    {
        "content": "<p>I would really really like this, but I fear it would fall afoul of some backward compatibility guarantee that even editions couldn't address</p>",
        "id": 243267521,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624134561
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310399\">Mara</span> <a href=\"#narrow/stream/219381-t-libs/topic/Pre-RFC.3A.20saturating_shl.2Fshr.20on.20integer.20types/near/243245588\">said</a>:</p>\n<blockquote>\n<p>so <code>0b1000_0000u8.saturating_shl(1) == 0xFF</code>?</p>\n</blockquote>\n<p>Correct.</p>",
        "id": 243267613,
        "sender_full_name": "Jubilee",
        "timestamp": 1624134710
    },
    {
        "content": "<p>and yes, this is kind of like an <code>infinite_shl</code></p>",
        "id": 243267694,
        "sender_full_name": "Jubilee",
        "timestamp": 1624134790
    },
    {
        "content": "<p>or unbounded or w/e</p>",
        "id": 243267697,
        "sender_full_name": "Jubilee",
        "timestamp": 1624134799
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/219381-t-libs/topic/Pre-RFC.3A.20saturating_shl.2Fshr.20on.20integer.20types/near/243262723\">said</a>:</p>\n<blockquote>\n<p>The proposed behavior is <code>0b1000_0000u8.saturating_shl(1) == 0</code>. <code>0b1000_0000u8.saturating_shl(1) == 0xFF</code> would be diabolical</p>\n</blockquote>\n<p>It turns out that Arm's A32/T32 is quite diabolical:<br>\n<a href=\"https://developer.arm.com/documentation/ddi0597/2020-12/Base-Instructions/USAT--Unsigned-Saturate-\">https://developer.arm.com/documentation/ddi0597/2020-12/Base-Instructions/USAT--Unsigned-Saturate-</a></p>",
        "id": 243267971,
        "sender_full_name": "Jubilee",
        "timestamp": 1624135119
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310399\">Mara</span> <a href=\"#narrow/stream/219381-t-libs/topic/Pre-RFC.3A.20saturating_shl.2Fshr.20on.20integer.20types/near/243266453\">said</a>:</p>\n<blockquote>\n<p>i'm wondering what happens if we just make regular <code>&lt;&lt;</code> and <code>&gt;&gt;</code> work with larger shifts. no panics, no wrapping in release mode. just use .wrapping_shl() if you want to avoid the check.</p>\n</blockquote>\n<p>sounds like you'd break someone, somehow, to change it at this point.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> <a href=\"#narrow/stream/219381-t-libs/topic/Pre-RFC.3A.20saturating_shl.2Fshr.20on.20integer.20types/near/243267694\">said</a>:</p>\n<blockquote>\n<p>and yes, this is kind of like an <code>infinite_shl</code></p>\n</blockquote>\n<p>please, please, call it the \"infinite shift\".</p>",
        "id": 243287652,
        "sender_full_name": "Lokathor",
        "timestamp": 1624167479
    },
    {
        "content": "<p>What should this do with negative shift amounts?  Or will it only take unsigned?</p>",
        "id": 243288799,
        "sender_full_name": "scottmcm",
        "timestamp": 1624169575
    },
    {
        "content": "<p>It's probably safer to just use unsigned shift amounts, but for signed shift the obvious choice is to shift the other way</p>",
        "id": 243288811,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624169636
    },
    {
        "content": "<p>both are preferable to UB/panic/wrap</p>",
        "id": 243288858,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624169710
    },
    {
        "content": "<blockquote>\n<p>sounds like you'd break someone, somehow, to change it at this point.</p>\n</blockquote>\n<p>but the current behaviour is already a <em>panic</em> in debug mode, but not in release mode. depending on <em>that</em> is a bit hard to imagine.</p>",
        "id": 243387253,
        "sender_full_name": "Mara",
        "timestamp": 1624284465
    },
    {
        "content": "<p>Well, more precisely, it's to panic or not based on the <code>overflow-checks</code> flag, which defaults as you say, but I know that I've altered the default setting in several projects here and there over the years. Usually to turn them off in all build profiles.</p>",
        "id": 243395297,
        "sender_full_name": "Lokathor",
        "timestamp": 1624287639
    },
    {
        "content": "<p>It certainly might actually be fine, because i don't think dynamic shift amounts are particularly popular to begin with, but my gut tells me that a crater run or an edition line might be appropriate</p>",
        "id": 243395931,
        "sender_full_name": "Lokathor",
        "timestamp": 1624287845
    },
    {
        "content": "<p>As a data point, <a href=\"https://github.com/rust-lang/rust/issues/72895#issuecomment-670677002\">here</a> someone thought <code>&gt;&gt;</code> already shifts in arbitrary many zeros. I thought the same until that post caused me to check the docs. My gut feeling is that by changing <code>&gt;&gt;</code> there are far more people who use it incorrectly right now that you'll unbreak than there are people who rely on the current behaviour.</p>\n<p>(as <span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> just mentioned while I typed this, a crater run is certainly in order to get a better data basis)</p>",
        "id": 243396744,
        "sender_full_name": "LingM",
        "timestamp": 1624288151
    },
    {
        "content": "<p>How do you do a crater run for this though? It's a behavior change, not a compilation change</p>",
        "id": 243405740,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624291868
    },
    {
        "content": "<p>I guess crater does <code>cargo test</code> under some configurations, which might catch some behavior changes, but it seems like rather poor coverage</p>",
        "id": 243405908,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624291952
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296422\">LingM</span> <a href=\"#narrow/stream/219381-t-libs/topic/Pre-RFC.3A.20saturating_shl.2Fshr.20on.20integer.20types/near/243396744\">said</a>:</p>\n<blockquote>\n<p>My gut feeling is that by changing <code>&gt;&gt;</code> there are far more people who use it incorrectly right now that you'll unbreak than there are people who rely on the current behaviour.</p>\n</blockquote>\n<p>Even assuming that's true, I'm not a fan -- I don't want to penalize people doing it correctly because others are doing it wrong.  (Especially since default debug mode will catch that they're doing it wrong.)</p>",
        "id": 243408273,
        "sender_full_name": "scottmcm",
        "timestamp": 1624293117
    },
    {
        "content": "<p>for + we already expect people to use .wrapping_add() if they really want the wrapping case. and i'm not sure if adding the extra check to <code>&gt;&gt;</code> really matters. i would expect in almost all cases that the compiler can prove it's less than the total number of bits (because it comes from leading_zeros() or it is a constant or something)</p>",
        "id": 243408640,
        "sender_full_name": "Mara",
        "timestamp": 1624293297
    },
    {
        "content": "<p>(well, <code>&lt;&lt; leading_ones()</code> is only guaranteed in-bounds on a <code>NonZero</code>, but yes.  The constant shift feels like it's by far the common case.)</p>",
        "id": 243409371,
        "sender_full_name": "scottmcm",
        "timestamp": 1624293696
    },
    {
        "content": "<p>sure. but leading_zeros() already has a zero check. so then that same check would skip over the relevant &lt;&lt; part.</p>",
        "id": 243414677,
        "sender_full_name": "Mara",
        "timestamp": 1624296222
    },
    {
        "content": "<p>I've definitely had cases where I wanted the infinite precision behavior when working with data-dependent shifts and only got reminded of the current behavior once tests failed.</p>",
        "id": 243421486,
        "sender_full_name": "The 8472",
        "timestamp": 1624299193
    }
]