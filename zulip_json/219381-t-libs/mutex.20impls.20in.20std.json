[
    {
        "content": "<p>Hi team!</p>\n<p>I've recently started to run into a couple of issues with std locks, mostly the non-<code>const</code>-iness of <code>::new</code> as well as the generally slow performance on macOS. Motivated by this, I read up on the adoption of parking_lot into  std and was sad to see that it looks like it might've stalled, perhaps partly due to time/priority constraints and partly due to the complexity of the implementation?</p>\n<p>I was wondering if/how there's ways I could help resolve this. Some ideas I have (perhaps you have other/better ones?):</p>\n<ol>\n<li>Change the <code>Box</code> alloc in <code>::new</code> to be lazy, so that it can be <code>const</code>? (feels meh, also probably somewhat slower?)</li>\n<li>Contribute a \"simpler\" lock impl that could be more easily audited/moved into <code>std</code>?</li>\n<li>Help make <code>parking_lot</code> more suitable towards a <code>std</code> inclusion (but don't know how?)</li>\n</ol>\n<p>Especially on (2) I have some ideas based on per-lock linked-lists rather than a central hash table that I think could be a lot simpler and offer similar performance to <code>parking_lot</code> at the expense of a few more bytes (1 word for mutex and 2 for rwlock/condvar).</p>\n<p>Do you have any input on this? Any feeling on which approach might be the most fruitful? Is this something worth pursuing via RFC?</p>",
        "id": 211817652,
        "sender_full_name": "Sam Rijs",
        "timestamp": 1601498633
    },
    {
        "content": "<p>I think working on parking_lot's integration would be the best path forward</p>",
        "id": 211826324,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1601499501
    },
    {
        "content": "<p>Thanks! Do you have any pointers as to what would need to be done? From what I could glean from the existing issues/PR it seemed part of the issue was reviewing the code? I‘m also a bit concerned that parking lot seems to have gained a lot of features that std might not use, but perhaps that‘s overthinking it?</p>",
        "id": 211826640,
        "sender_full_name": "Sam Rijs",
        "timestamp": 1601499666
    },
    {
        "content": "<p>I was not following the integration super closely, but <span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> would probably be the right person to ask.</p>",
        "id": 211828238,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1601500563
    },
    {
        "content": "<p>It's been a while since I last looked into this. I would suggest starting by reading Alex's review of parking_lot here: <a href=\"https://github.com/faern/parking_lot/pull/1\">https://github.com/faern/parking_lot/pull/1</a></p>",
        "id": 211839858,
        "sender_full_name": "Amanieu",
        "timestamp": 1601503573
    },
    {
        "content": "<p>One of the concerns was the use of the global allocator for the global hash table but I think we can probably replace the global hash table with a fixed-size table. The table uses chaining so it isn't really capacity-bound.</p>",
        "id": 211839979,
        "sender_full_name": "Amanieu",
        "timestamp": 1601503675
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"117909\">@faern</span> who was originally working on this.</p>",
        "id": 211840131,
        "sender_full_name": "Amanieu",
        "timestamp": 1601503784
    },
    {
        "content": "<p>Interesting point about the allocator, but why wouldn‘t the current use of box inside std::sync::Mutex run into the same problem?</p>\n<p>I‘ll be sure to check out the review you linked, thanks!</p>",
        "id": 211840402,
        "sender_full_name": "Sam Rijs",
        "timestamp": 1601504014
    },
    {
        "content": "<p>Also, if we use chaining, don‘t we need to use something like thread_local! for the chain nodes, which iirc also allocates? Or are both of these using a different allocator than the one which can be overwritten?</p>",
        "id": 211848696,
        "sender_full_name": "Sam Rijs",
        "timestamp": 1601505293
    },
    {
        "content": "<p>(Hmm, I suppose you could stack-allocate the nodes if you‘re careful?)</p>",
        "id": 211848940,
        "sender_full_name": "Sam Rijs",
        "timestamp": 1601505482
    },
    {
        "content": "<p>You can definitely stack allocate once you remove resizing from the global hashtable. At the moment the <code>thread_local</code> is used to track the max number of live threads which is used to resize the hash table as needed.</p>",
        "id": 211903267,
        "sender_full_name": "Amanieu",
        "timestamp": 1601556245
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"348117\">@Sam Rijs</span> I've been working slowly in this direction the past few weeks:</p>\n<ul>\n<li><a href=\"https://github.com/rust-lang/rust/pull/76932\">https://github.com/rust-lang/rust/pull/76932</a></li>\n<li><a href=\"https://github.com/rust-lang/rust/pull/77147\">https://github.com/rust-lang/rust/pull/77147</a></li>\n<li><a href=\"https://github.com/rust-lang/rust/pull/76919\">https://github.com/rust-lang/rust/pull/76919</a></li>\n<li><a href=\"https://github.com/rust-lang/rust/pull/77380\">https://github.com/rust-lang/rust/pull/77380</a></li>\n</ul>",
        "id": 212063636,
        "sender_full_name": "Mara",
        "timestamp": 1601639366
    },
    {
        "content": "<p>The path from this towards const Mutex::new is not clear yet, but these steps should help regardless. That path could be parking_lot integration, or could be a simple futex based implementation for Linux, and some yet-to-be-determined solution for other unixes. At least on Windows (and wasm and cloudabi) Mutex::new can be const after these changes.</p>",
        "id": 212063828,
        "sender_full_name": "Mara",
        "timestamp": 1601639498
    },
    {
        "content": "<p>Another interesting thing: Since <a href=\"https://github.com/rust-lang/rust/pull/76919\">https://github.com/rust-lang/rust/pull/76919</a>, std's version of parking/unparking no longer depends on std::sync's mutexes and condvars on Linux. I will continue that work to make that the case on all platforms. Once that's the case, Mutex <em>could</em> be modified to contain a std::lazy::SyncOnceCell. (Right now that's impossible, because SyncOnceCell uses a Once, which uses parking/unparking, which uses a Mutex on some platforms.) Not sure if that's a good idea, but it would make a lazy allocating Mutex implementation very easy.</p>",
        "id": 212064201,
        "sender_full_name": "Mara",
        "timestamp": 1601639775
    }
]