[
    {
        "content": "<p>When stabilizing a method as <code>const</code> that relies on a newly-stabilized language feature (in this case <code>const_panic</code>), I should use <code>#[rustc_allow_const_fn_unstable(..)]</code>, right? Gated behind the bootstrap cfg, naturally.</p>",
        "id": 256166667,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1633401152
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> ^^</p>",
        "id": 256166689,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1633401174
    },
    {
        "content": "<p>It's odd because the methods this is showing up on are only those directly using it. As in if A calls <code>panic!()</code> and B calls A, the compiler doesn't complain about B despite the lack of an attribute on A.</p>",
        "id": 256167111,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1633401481
    },
    {
        "content": "<p>yea, the point of the attribute is to hide the instability from callers</p>",
        "id": 256186954,
        "sender_full_name": "oli",
        "timestamp": 1633416987
    },
    {
        "content": "<p>I understood that much. Just wasn't sure if that's appropriate usage of it and I didn't mess something up with the first stabilization.</p>",
        "id": 256198091,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1633423346
    },
    {
        "content": "<p>PR is up at this point anyways.</p>",
        "id": 256198119,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1633423360
    }
]