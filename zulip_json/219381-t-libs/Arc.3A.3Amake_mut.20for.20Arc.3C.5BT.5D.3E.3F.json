[
    {
        "content": "<p>Would it be possible to enable <code>Arc::make_mut</code> for <code>Arc&lt;[T]&gt;</code> and similar for <code>Rc</code>? I know <code>Box&lt;[T]&gt;</code> is <code>Clone</code> which is a somewhat similar situation.</p>",
        "id": 217584308,
        "sender_full_name": "Peter Rabbit",
        "timestamp": 1606099969
    },
    {
        "content": "<p>sounds like that could be useful :)</p>",
        "id": 217686239,
        "sender_full_name": "Mara",
        "timestamp": 1606167659
    },
    {
        "content": "<p>I think it has to be a separate block:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">Clone</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Rc</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">make_mut</span><span class=\"p\">(</span><span class=\"n\">_this</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">todo</span><span class=\"o\">!</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 217704227,
        "sender_full_name": "cuviper",
        "timestamp": 1606180299
    },
    {
        "content": "<p>but the compiler does accept this much</p>",
        "id": 217704243,
        "sender_full_name": "cuviper",
        "timestamp": 1606180308
    },
    {
        "content": "<p>that surprises me a little, because it seems to rely on proving that the other <code>impl&lt;T: Clone&gt; Rc&lt;T&gt;</code> doesn't apply, i.e. <code>[T]: !Clone</code></p>",
        "id": 217704307,
        "sender_full_name": "cuviper",
        "timestamp": 1606180368
    },
    {
        "content": "<p>which is true, but I didn't think the compiler would allow that by coherence</p>",
        "id": 217704322,
        "sender_full_name": "cuviper",
        "timestamp": 1606180393
    },
    {
        "content": "<p>oh, that's probably because <code>[T]</code> is unsized, so it can never add <code>Clone</code>... ok, don't worry about my tangent</p>",
        "id": 217704614,
        "sender_full_name": "cuviper",
        "timestamp": 1606180740
    },
    {
        "content": "<p><code>impl&lt;T: Clone&gt; Rc&lt;T&gt;</code> does not apply not because of <code>[X]: !Clone</code>, but <code>[X]: !Sized</code> and there is an implicit <code>Sized</code> bound</p>",
        "id": 217714701,
        "sender_full_name": "kennytm",
        "timestamp": 1606193694
    },
    {
        "content": "<p>and if <a href=\"https://github.com/rust-lang/rfcs/issues/2884\">rfc#2884</a> is approved, it is possible to return <code>[X]</code> from a function and thus <code>impl&lt;X: Clone&gt; Clone for [X]</code> may be acceptable</p>",
        "id": 217714758,
        "sender_full_name": "kennytm",
        "timestamp": 1606193784
    },
    {
        "content": "<p>Ah, right, it's not because of <code>Clone: Sized</code>, but all <code>impl&lt;T&gt;</code> implies <code>T: Sized</code> by default.</p>",
        "id": 217771475,
        "sender_full_name": "cuviper",
        "timestamp": 1606232844
    }
]