[
    {
        "content": "<p>Hey, what would people think about adding the following methods to <code>bool</code>? I don’t know about anyone else but I end up writing <code>let a = if b { c } else { d };</code> a lot in my code, and it would be nice if we could reduce that down to one line since rustfmt will always expand that snippet to five lines no matter how short it is. This would also be incredibly useful in configuration heavy code.</p>\n<p>This kind of adjacent to <code>bool::then</code> except for when I know what the value for both branches should be.</p>\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=5d5424f55c39bb14f0c0f4ac0188e99b\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=5d5424f55c39bb14f0c0f4ac0188e99b</a></p>",
        "id": 231157028,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1616258899
    },
    {
        "content": "<p>Probably tangential to the discussion, but there are some over-verbosities, simillar to this where rustfmt does this expansion even if the operation is trivial</p>",
        "id": 231157338,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1616259254
    },
    {
        "content": "<p>I can see the usage for <code>either</code> but the other function’s usage eludes me</p>",
        "id": 231157477,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1616259379
    },
    {
        "content": "<p>IMO, adding APIs motivated by sub-optimal rustfmt behavior doesn't seem like a great idea to me...</p>\n<p>also, i _think_ this is why I use <code>use_small_heuristics = \"max\"</code>: <a href=\"https://github.com/rust-lang/regex/blob/ff283badce21dcebd581909d38b81f2c8c9bfb54/rustfmt.toml#L2\">https://github.com/rust-lang/regex/blob/ff283badce21dcebd581909d38b81f2c8c9bfb54/rustfmt.toml#L2</a> --- although, oddly, i can't find any docs for <code>use_small_heuristics</code> at <a href=\"https://github.com/rust-lang/rustfmt/blob/master/Configurations.md\">https://github.com/rust-lang/rustfmt/blob/master/Configurations.md</a></p>",
        "id": 231157495,
        "sender_full_name": "BurntSushi",
        "timestamp": 1616259418
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"222471\">BurntSushi</span> <a href=\"#narrow/stream/219381-t-libs/topic/Adding.20bool.3A.3A.7Beither.2C.20then_either.7D/near/231157495\">said</a>:</p>\n<blockquote>\n<p>although, oddly, i can't find any docs for <code>use_small_heuristics</code> at <a href=\"https://github.com/rust-lang/rustfmt/blob/master/Configurations.md\">https://github.com/rust-lang/rustfmt/blob/master/Configurations.md</a></p>\n</blockquote>\n<p>The <code>master</code> branch is rustfmt 2.0, not the 1.x version distributed via rustup. That option is probably renamed/replaced.</p>",
        "id": 231158272,
        "sender_full_name": "hyd-dev",
        "timestamp": 1616260201
    },
    {
        "content": "<p>Configuration options are documented at <a href=\"https://rust-lang.github.io/rustfmt/?version=v1.4.36&amp;search=\">https://rust-lang.github.io/rustfmt/?version=v1.4.36&amp;search=</a></p>\n<p>I believe I saw there was intent to move master back to 1.4, but I am uncertain what the status is.  It is a bit confusing.</p>",
        "id": 231158373,
        "sender_full_name": "Eric Huss",
        "timestamp": 1616260278
    },
    {
        "content": "<blockquote>\n<p>IMO, adding APIs motivated by sub-optimal rustfmt behavior doesn't seem like a great idea to me...</p>\n</blockquote>\n<p>Well that was an example, maybe a poor one, but I still think it’s annoying having to use full <code>if else</code> syntax, and it would nice to have something shorter. In other languages this solved by the ternary operator. E.g. <code>let a = b ? c : d;</code>. This provides similar functionality to that.</p>",
        "id": 231166006,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1616268020
    },
    {
        "content": "<blockquote>\n<p>I can see the usage for <code>either</code> but the other function’s usage eludes me</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"344196\">@Jakub Duchniewicz</span> It’s the same as <code>either</code> but the values are lazily initialised. You can see in my example of <code>then_either</code> only one of those strings is actually allocated.</p>\n<p>It’s the same reason there’s <code>unwrap_or</code> and <code>unwrap_or_else</code>.</p>",
        "id": 231166298,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1616268325
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"374396\">hyd-dev</span> <a href=\"#narrow/stream/219381-t-libs/topic/Adding.20bool.3A.3A.7Beither.2C.20then_either.7D/near/231158272\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"222471\">BurntSushi</span> <a href=\"#narrow/stream/219381-t-libs/topic/Adding.20bool.3A.3A.7Beither.2C.20then_either.7D/near/231157495\">said</a>:</p>\n<blockquote>\n<p>although, oddly, i can't find any docs for <code>use_small_heuristics</code> at <a href=\"https://github.com/rust-lang/rustfmt/blob/master/Configurations.md\">https://github.com/rust-lang/rustfmt/blob/master/Configurations.md</a></p>\n</blockquote>\n<p>The <code>master</code> branch is rustfmt 2.0, not the 1.x version distributed via rustup. That option is probably renamed/replaced.</p>\n</blockquote>\n<p>It's called <code>width_heuristics</code> in rustfmt 2.0</p>",
        "id": 231166586,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616268682
    },
    {
        "content": "<p>I think there is <a href=\"https://github.com/rust-lang/rfcs/issues/1362\">rationale behind not having ternary operator</a>. This operator seems to be quite abusable and maybe that is the reason Rust decided to opt-out from it</p>",
        "id": 231207963,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1616323150
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"344196\">@Jakub Duchniewicz</span> I’m not sure how that issue relates. This method achieves the same effect as the common use case for <code>?:</code>, it doesn’t have the same downsides of the operator as a method. It’s shorter than <code>if cond { } else { }</code>, but longer and clearer than <code>?:</code> and is not chainable in the same way people use <code>?:</code>.</p>",
        "id": 231213474,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1616329580
    },
    {
        "content": "<p>Yes, just mentioning this to give a broader context</p>",
        "id": 231213679,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1616329831
    },
    {
        "content": "<p>Maybe there could be a Rust alternative like a trait making a type <code>Ternary</code>able, but that is just thinking aloud</p>",
        "id": 231213772,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1616329938
    },
    {
        "content": "<p>Probably digressing though</p>",
        "id": 231213775,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1616329946
    },
    {
        "content": "<p>I believe version=Two property of rustfmt will make it put if/else on one line sometimes.</p>",
        "id": 231217875,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1616335037
    },
    {
        "content": "<p>I don't think that you can construct any valid argument for <code>?:</code> being abusable but <code>if-else</code> <em>not</em> being equally as abusable.</p>",
        "id": 231230387,
        "sender_full_name": "Lokathor",
        "timestamp": 1616348955
    }
]