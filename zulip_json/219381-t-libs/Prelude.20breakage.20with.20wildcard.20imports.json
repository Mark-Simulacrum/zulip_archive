[
    {
        "content": "<p>We've been talking a lot lately about the prelude, and we've gone with the premise that adding things other than traits to the prelude won't ever break anything, because people can just shadow the names we add.</p>",
        "id": 229372006,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615236958
    },
    {
        "content": "<p>However, see <a href=\"https://github.com/rust-lang/rust/pull/82770#issuecomment-792999294\">https://github.com/rust-lang/rust/pull/82770#issuecomment-792999294</a> for a counterexample.</p>",
        "id": 229372076,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615236971
    },
    {
        "content": "<p>If someone does a wildcard import <code>use some_crate::*;</code>, and we export a name from the prelude that <code>some_crate</code> exported, that'll break the code with the wildcard import.</p>",
        "id": 229372168,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615237024
    },
    {
        "content": "<p>1) Is this a known issue?<br>\n2) Do we consider this \"acceptable breakage\", and should we?<br>\n3) Should we take this into account when considering prelude additions?</p>",
        "id": 229372242,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615237055
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> <span class=\"user-mention\" data-user-id=\"310399\">@Mara</span></p>",
        "id": 229372273,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615237069
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"130111\">@anp</span></p>",
        "id": 229372376,
        "sender_full_name": "tmandry",
        "timestamp": 1615237106
    },
    {
        "content": "<p>we were just talking about this</p>",
        "id": 229372381,
        "sender_full_name": "tmandry",
        "timestamp": 1615237111
    },
    {
        "content": "<p>This only applies to macros though.<br>\n(And to imports, but for imports such restrictions are artificial and unnecessary - <a href=\"https://github.com/rust-lang/rust/issues/56414\">#56414</a>.)</p>",
        "id": 229372398,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1615237120
    },
    {
        "content": "<p>it interacts very badly with the <code>test_case</code> macro crate, which puts your code inside a module with <code>use super::*;</code></p>",
        "id": 229372450,
        "sender_full_name": "tmandry",
        "timestamp": 1615237150
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/219381-t-libs/topic/Prelude.20breakage.20with.20wildcard.20imports/near/229372242\">said</a>:</p>\n<blockquote>\n<p>2) Do we consider this \"acceptable breakage\", and should we?</p>\n</blockquote>\n<p>I think it has to be \"minor (acceptable) breakage\", under the general rule: we're allowed to add things (to avoid stagnation) and there's a more-specific way to write it that works before and after the change.</p>",
        "id": 229372793,
        "sender_full_name": "scottmcm",
        "timestamp": 1615237269
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> Is it fundamental for macros, or theoretically fixable?</p>",
        "id": 229372911,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615237319
    },
    {
        "content": "<p>(Eliminating it for imports might be worth considering at this point, but I'd like to leave that for a different thread.)</p>",
        "id": 229373039,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615237358
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116883\">tmandry</span> <a href=\"#narrow/stream/219381-t-libs/topic/Prelude.20breakage.20with.20wildcard.20imports/near/229372450\">said</a>:</p>\n<blockquote>\n<p>it interacts very badly with the <code>test_case</code> macro crate, which puts your code inside a module with <code>use super::*;</code></p>\n</blockquote>\n<p>A test module with <code>use super::*;</code> is a common pattern even without that macro.</p>",
        "id": 229373169,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615237404
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> Perhaps, but if it's something we can fix in the compiler to avoid such breakage, that seems like it'd be even better.</p>",
        "id": 229373298,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615237445
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/219381-t-libs/topic/Prelude.20breakage.20with.20wildcard.20imports/near/229372911\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"123856\">Vadim Petrochenkov</span> Is it fundamental for macros, or theoretically fixable?</p>\n</blockquote>\n<p>I'd say fundamental.</p>",
        "id": 229375038,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1615238118
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> What about macros makes it unfixable there, as compared to with functions?</p>",
        "id": 229375767,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615238401
    },
    {
        "content": "<p>Is this about non-hygienic references to things from macros? (e.g. <code>pub use some::macro</code> and provide different versions of the macros it calls, which makes a re-export not identical)</p>",
        "id": 229375964,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615238460
    },
    {
        "content": "<p>Macros are resolved/expanded early when the crate structure is still in flux, an can produce other modules/imports/macros after expansion, this imposes some restrictions.<br>\nFunctions calls are resolved late, when all crate structure is already built and frozen.</p>",
        "id": 229376541,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1615238680
    },
    {
        "content": "<p>I see. Thanks for the explanation.</p>",
        "id": 229377263,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615238926
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/219381-t-libs/topic/Prelude.20breakage.20with.20wildcard.20imports/near/229373298\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> Perhaps, but if it's something we can fix in the compiler to avoid such breakage, that seems like it'd be even better.</p>\n</blockquote>\n<p>Yeah; my statement was just answering the specific question in isolation.  (And additions like <code>Unpin</code> mean it's defacto allowed breakage.)</p>\n<p>Certainly an ambiguity resolution strategy in the compiler would be good too.  (Under obvious assumptions like it should be clear to users, resistant to permutations of <code>use</code>s, etc.)  I just don't think that I'd personally want to block a prelude addition on that existing, unless the breakage was particularly bad in practice.</p>",
        "id": 229382529,
        "sender_full_name": "scottmcm",
        "timestamp": 1615240999
    },
    {
        "content": "<p>\"particularly bad in practice\" was precisely my concern; previously, we just were assuming that additions to the prelude that weren't traits didn't even need a crater run.</p>",
        "id": 229383035,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615241129
    },
    {
        "content": "<p>Now, I think it makes sense to run macro additions through crater too.</p>",
        "id": 229383087,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615241141
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> If you're interested, it sounds like your team could provide a PR to <a href=\"https://github.com/SimonSapin/rust-std-candidates/issues/22\">https://github.com/SimonSapin/rust-std-candidates/issues/22</a> that would allow your existing code to compile without having to change.</p>",
        "id": 229383903,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615241334
    },
    {
        "content": "<p>Ah I'd thought about that but didn't think we could do it with nightlies. Now I realize there is a date in the output of <code>rustc --version</code> we could use.</p>",
        "id": 229389959,
        "sender_full_name": "tmandry",
        "timestamp": 1615243522
    },
    {
        "content": "<p>it's not a perfect solution given that we build our own toolchain and won't necessarily use the exact same commit for a given date but it should be good enough.</p>",
        "id": 229390072,
        "sender_full_name": "tmandry",
        "timestamp": 1615243575
    },
    {
        "content": "<p>still, I think this is going to create some unfortunate breakage for folks with a confusing error message</p>",
        "id": 229390169,
        "sender_full_name": "tmandry",
        "timestamp": 1615243618
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116883\">tmandry</span> <a href=\"#narrow/stream/219381-t-libs/topic/Prelude.20breakage.20with.20wildcard.20imports/near/229389959\">said</a>:</p>\n<blockquote>\n<p>Ah I'd thought about that but didn't think we could do it with nightlies. Now I realize there is a date in the output of <code>rustc --version</code> we could use.</p>\n</blockquote>\n<p>I'm not suggesting checking the date; I'd suggest test-compiling a small Rust program that uses the feature flag and macro, and seeing if it works.</p>",
        "id": 229391174,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615244094
    },
    {
        "content": "<p>oh I see, that works too</p>",
        "id": 229396469,
        "sender_full_name": "tmandry",
        "timestamp": 1615246612
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130111\">@anp</span> also opened <a href=\"https://github.com/rust-lang/rust/issues/82913\">#82913</a> to talk about this from the rust side</p>",
        "id": 229396504,
        "sender_full_name": "tmandry",
        "timestamp": 1615246641
    }
]