[
    {
        "content": "<p>From Marcus Klaas on <a href=\"https://github.com/raphlinus/pulldown-cmark/pull/493\">https://github.com/raphlinus/pulldown-cmark/pull/493</a>:</p>\n<blockquote>\n<p>The implementation looks good, but I just now noticed that <code>fmt::Write</code> has its own error. This means that it's no longer possible to pass along IO errors. If a write fails to a <code>Write</code> object, the user will have no way to discover why. This seems like a serious drawback of the change.</p>\n</blockquote>\n<p>It does seem unfortunate that AFAICT you can't return error messages from an impl of <code>fmt::Write</code>, yet you can from <code>io::Write</code>. Is there a reason for this, and does anyone have ideas for what to do?</p>",
        "id": 212976934,
        "sender_full_name": "Noah Lev",
        "timestamp": 1602442274
    },
    {
        "content": "<p>fmt::Write is in core rather than std</p>",
        "id": 212977150,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1602442647
    },
    {
        "content": "<p>Hmm, why is that relevant?</p>",
        "id": 212979046,
        "sender_full_name": "Noah Lev",
        "timestamp": 1602445945
    },
    {
        "content": "<p>io::Error allocates so it can't be in core</p>",
        "id": 212980880,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1602448996
    },
    {
        "content": "<p>(Also, it's often annoying that io::Error allocates and contains a box.)</p>",
        "id": 212981404,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602449970
    },
    {
        "content": "<p>Is there any way to solve this then?</p>",
        "id": 212981638,
        "sender_full_name": "Noah Lev",
        "timestamp": 1602450353
    },
    {
        "content": "<p>As a side note as far as I know while <code>fmt</code> based formatting can fail, it <em>rally</em> should never do so as far as possible. (As already mentioned <code>fmt::Error</code> lives in core, which means it can not depend on thinks like <code>String</code> or <code>Box</code>).</p>",
        "id": 212981675,
        "sender_full_name": "Philipp Korber",
        "timestamp": 1602450364
    },
    {
        "content": "<p>In a certain way failing <code>Display</code>/<code>Debug</code> formatting is like stating \"this type is internally in such a inconsistent state that we can't format it anymore\".  Which shouldn't be possible in the first case. Through there are use-cases where failing can make sense, but in many of this not using <code>fmt</code> formating also makes sense. (EDIT: To be clear I have run into this myself one or two times but every time it turned out to be a good idea to change the code to not use <code>fmt</code>-formatting for what I did use it before.)</p>",
        "id": 212981772,
        "sender_full_name": "Philipp Korber",
        "timestamp": 1602450568
    },
    {
        "content": "<p>Maybe <code>fmt::Error</code> could  be extended to contain a <code>Option&lt;&amp;'static str&gt;</code>. Which should be technical possible. But there might be some reasons not to do so. But I'm not aware of any. Opening a pre-RFC thread (or similar) on the internals forum could make sense, I guess.</p>",
        "id": 212981871,
        "sender_full_name": "Philipp Korber",
        "timestamp": 1602450695
    },
    {
        "content": "<p>I just noticed the error type is declared as <code>pub struct Error;</code>. (I thought it was something like <code>pub struct Error { _priv: () }</code>;). This means that adding any fields is a braking change. So I guess we are stuck with it?</p>",
        "id": 212983152,
        "sender_full_name": "Philipp Korber",
        "timestamp": 1602452972
    },
    {
        "content": "<p>Yes, I was just going to mention that :/</p>",
        "id": 212986433,
        "sender_full_name": "Noah Lev",
        "timestamp": 1602458447
    },
    {
        "content": "<p>Separate from being a breaking change, making fmt::Error not be a ZST could hurt performance,</p>\n<p>core::fmt::Write::write_{str,char,fmt} gives a <code>Result&lt;(), core::fmt::Error&gt;</code>, which works out to just being a bool. If you make the return type <code>Result&lt;(), Option&lt;&amp;'static str&gt;&gt;</code>that's suddenly a <code>3*usize</code> big value, which IIRC doesn't cleanly pass in just registers when returning.</p>",
        "id": 212990062,
        "sender_full_name": "Lokathor",
        "timestamp": 1602466061
    },
    {
        "content": "<p>I think ideally the trait would have an associated type for the Error?</p>",
        "id": 213006063,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1602488251
    },
    {
        "content": "<p>i feel that would not be very ideal, that would spread out an associated type across way too much of the ecosystem</p>",
        "id": 213006774,
        "sender_full_name": "Lokathor",
        "timestamp": 1602488775
    },
    {
        "content": "<p>How is that different from other traits with associated types? It can also just be generic over the error without an acossiated type, but that will probably be worse</p>",
        "id": 213052535,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1602516317
    },
    {
        "content": "<p>I think the trouble with an associated type there would be that you couldn't mix errors from different implementations any more, which feels pretty likely something you'd want.  Like writing to an array for a bit, then from there to a file, or whatever...</p>\n<p>Things like the error in <code>TryFrom</code> don't have quite that same mixing awkwardness.</p>",
        "id": 213066915,
        "sender_full_name": "scottmcm",
        "timestamp": 1602524496
    },
    {
        "content": "<p>Hmm, the fact that <code>.to_string()</code> doesn't even bother returning a <code>Result</code> is an indication to me that these things are <em>really</em> not supposed to ever fail...</p>",
        "id": 213067202,
        "sender_full_name": "scottmcm",
        "timestamp": 1602524667
    },
    {
        "content": "<blockquote>\n<p>However, they should never return errors spuriously. That is, a formatting implementation must and may only return an error if the passed-in Formatter returns an error. This is because, contrary to what the function signature might suggest, string formatting is an infallible operation. This function only returns a result because writing to the underlying stream might fail and it must provide a way to propagate the fact that an error has occurred back up the stack.</p>\n</blockquote>",
        "id": 213071652,
        "sender_full_name": "simulacrum",
        "timestamp": 1602527502
    },
    {
        "content": "<p>Though the reason I would want it to return an error is if writing to e.g. a file fails, and I think that should be covered by:</p>\n<blockquote>\n<p>This function only returns a result because writing to the underlying stream might fail</p>\n</blockquote>",
        "id": 213072808,
        "sender_full_name": "Noah Lev",
        "timestamp": 1602528082
    },
    {
        "content": "<p>It is perhaps worth noting that io::Write::write_fmt <em>does</em> preserve the io Error in the raw form (<a href=\"https://doc.rust-lang.org/nightly/src/std/io/mod.rs.html#1498-1513\">https://doc.rust-lang.org/nightly/src/std/io/mod.rs.html#1498-1513</a>)</p>",
        "id": 213073116,
        "sender_full_name": "simulacrum",
        "timestamp": 1602528257
    },
    {
        "content": "<p>so if you're using write! or similar with io sources, and not the fmt trait directly, you'll get the error</p>",
        "id": 213073138,
        "sender_full_name": "simulacrum",
        "timestamp": 1602528280
    }
]