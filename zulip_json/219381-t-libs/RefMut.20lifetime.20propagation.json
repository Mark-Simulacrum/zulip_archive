[
    {
        "content": "<p>I’m having trouble mapping a RefMut containing a DB connection to a corresponding transaction (which contains a lifetime):</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">borrow</span>: <span class=\"nc\">RefMut</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Client</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">conn</span><span class=\"p\">.</span><span class=\"n\">borrow_mut</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">tx</span>: <span class=\"nc\">RefMut</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">Transaction</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">postgres</span>::<span class=\"n\">Error</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">RefMut</span>::<span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">borrow</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">c</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">Client</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">.</span><span class=\"n\">transaction</span><span class=\"p\">());</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>This gives an error like the following:</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0308]: mismatched types\n  --&gt; src/db/postgre.rs:78:37\n   |\n78 |             RefMut::map(borrow, |c: &amp;&#39;a mut Client| &amp;mut c.transaction());\n   |                                     ^^^^^^^^^^^^^^ lifetime mismatch\n   |\n   = note: expected mutable reference `&amp;mut postgres::client::Client`\n              found mutable reference `&amp;&#39;a mut postgres::client::Client`\nnote: the anonymous lifetime #2 defined on the body at 78:33...\n  --&gt; src/db/postgre.rs:78:33\n   |\n78 |             RefMut::map(borrow, |c: &amp;&#39;a mut Client| &amp;mut c.transaction());\n   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: ...does not necessarily outlive the lifetime `&#39;a` as defined on the method body at 75:20\n  --&gt; src/db/postgre.rs:75:20\n   |\n75 |     fn transaction&lt;&#39;a&gt;(&amp;&#39;a self) -&gt; RefMut&lt;&#39;a, Result&lt;Transaction&lt;&#39;a&gt;, postgres::Error&gt;&gt; {\n   |                    ^^\n</code></pre></div>\n\n\n<p>Am I correct in assuming that this is due to <code>RefMut::map</code> not propagating its <code>'b</code> lifetime to the references in the function signature it takes?</p>",
        "id": 198523345,
        "sender_full_name": "Roland Kuhn",
        "timestamp": 1590219283
    },
    {
        "content": "<p>In any case, even if this did work, it wouldn’t solve my larger problem (because <code>Transaction::commit</code> consumes <code>self</code>, so a reference won’t do). But I’d still be interested in whether my assumption is correct.</p>",
        "id": 198524419,
        "sender_full_name": "Roland Kuhn",
        "timestamp": 1590221213
    },
    {
        "content": "<p>try removing the <code>'a</code> in <code>|c: &amp;'a mut Client|</code></p>",
        "id": 198527354,
        "sender_full_name": "RalfJ",
        "timestamp": 1590226580
    },
    {
        "content": "<p>so yes this is likely related to <code>map</code> taking a generic closure as an argument. and that in turn is crucial for soundness, if it propagated the outer <code>'b</code> that would be unsound.</p>",
        "id": 198527364,
        "sender_full_name": "RalfJ",
        "timestamp": 1590226653
    },
    {
        "content": "<p>You are returning a reference to a temporary in the closure, which would create a dangling reference if this compiled.</p>",
        "id": 198529660,
        "sender_full_name": "Yato",
        "timestamp": 1590230662
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"202379\">@Yato</span> Yes, indeed, this is another problem hindering abstraction over transaction creation.</p>\n<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> Why would it be unsound? The reference presented to the closure has lifetime <code>'b</code>, has it not? I’ve seen this pattern of keeping lifetimes generic to make it impossible to return references from a closure (e.g. in the dataflow constructor in differential-dataflow), where I made sense of it by assuming that the framework may kill the underlying resource after the closure but before returning control to my code. For <code>RefMut::map</code> I wouldn’t see why that should be needed, because the purpose of that method is to expose a reference to me, is it not?</p>",
        "id": 198569587,
        "sender_full_name": "Roland Kuhn",
        "timestamp": 1590302504
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"302838\">@Roland Kuhn</span> it's unsound because you could leak the reference, drop the <code>RefMut</code>, and then still use the reference.</p>",
        "id": 198570415,
        "sender_full_name": "RalfJ",
        "timestamp": 1590304101
    },
    {
        "content": "<p>basically, the lifetime in <code>RefMut</code> is an <em>upper bound</em> to the lifetime of the reference it contains, but the actual lifetime could be shorter because you can drop the <code>RefMut</code> at any time.</p>",
        "id": 198570416,
        "sender_full_name": "RalfJ",
        "timestamp": 1590304132
    },
    {
        "content": "<p>but this is subtle, in fact the first version of this API <em>did</em> propagate the lifetime and it took a bit for people to realize that that is unsound</p>",
        "id": 198570441,
        "sender_full_name": "RalfJ",
        "timestamp": 1590304178
    },
    {
        "content": "<p>Hmm, this is something I have not yet fully grasped: I thought that in my snipped <code>'a</code> would describe exactly how long the RefMut exists, so if I drop it then there is a “region of code” described by <code>'a</code> that ends with the drop.</p>",
        "id": 198570484,
        "sender_full_name": "Roland Kuhn",
        "timestamp": 1590304206
    },
    {
        "content": "<p>could you point me to the discussions on where this unsoundness was uncovered?</p>",
        "id": 198570495,
        "sender_full_name": "Roland Kuhn",
        "timestamp": 1590304297
    },
    {
        "content": "<p>Or to put it differently: how does <code>rustc</code> assign the actual lifetime of the reference passed into the closure?</p>",
        "id": 198570547,
        "sender_full_name": "Roland Kuhn",
        "timestamp": 1590304394
    },
    {
        "content": "<p>there is a more detailed description about this <em>somewhere</em> but I cannot find it right now...</p>",
        "id": 198570654,
        "sender_full_name": "RalfJ",
        "timestamp": 1590304598
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"302838\">Roland Kuhn</span> <a href=\"#narrow/stream/219381-t-libs/topic/RefMut.20lifetime.20propagation/near/198570547\">said</a>:</p>\n<blockquote>\n<p>Or to put it differently: how does <code>rustc</code> assign the actual lifetime of the reference passed into the closure?</p>\n</blockquote>\n<p>hehe, great question! the answer is, it doesnt matter.</p>",
        "id": 198570655,
        "sender_full_name": "RalfJ",
        "timestamp": 1590304607
    },
    {
        "content": "<p>this is an unsafe library. the \"actual\" lifetime used in the closure is one <em>rustc doesnt even know exists</em></p>",
        "id": 198570660,
        "sender_full_name": "RalfJ",
        "timestamp": 1590304626
    },
    {
        "content": "<p>but that's okay because in the proof we can construct it, and because of lifetime parametricity we know the code has to work even for lifetimes that it \"doesnt know exist\"</p>",
        "id": 198570662,
        "sender_full_name": "RalfJ",
        "timestamp": 1590304653
    },
    {
        "content": "<p>(for more than a year now I wanted to write a blog post on this but didnt get around to it yet)</p>",
        "id": 198570710,
        "sender_full_name": "RalfJ",
        "timestamp": 1590304749
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"302838\">Roland Kuhn</span> <a href=\"#narrow/stream/219381-t-libs/topic/RefMut.20lifetime.20propagation/near/198570484\">said</a>:</p>\n<blockquote>\n<p>Hmm, this is something I have not yet fully grasped: I thought that in my snipped <code>'a</code> would describe exactly how long the RefMut exists, so if I drop it then there is a “region of code” described by <code>'a</code> that ends with the drop.</p>\n</blockquote>\n<p>no, <code>'a</code> is just the lifetime of the <code>RefCell</code> reference you passed in</p>",
        "id": 198570733,
        "sender_full_name": "RalfJ",
        "timestamp": 1590304793
    },
    {
        "content": "<p>Okay, I get that approach, but still: how does rustc derive the bounds on the lifetimes so that it can check whether a proof exists?</p>",
        "id": 198570734,
        "sender_full_name": "Roland Kuhn",
        "timestamp": 1590304796
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"302838\">Roland Kuhn</span> <a href=\"#narrow/stream/219381-t-libs/topic/RefMut.20lifetime.20propagation/near/198570734\">said</a>:</p>\n<blockquote>\n<p>Okay, I get that approach, but still: how does rustc derive the bounds on the lifetimes so that it can check whether a proof exists?</p>\n</blockquote>\n<p>it doesnt</p>",
        "id": 198570771,
        "sender_full_name": "RalfJ",
        "timestamp": 1590304803
    },
    {
        "content": "<p>when the define <code>map</code> we have to tell it to make the closure generic</p>",
        "id": 198570778,
        "sender_full_name": "RalfJ",
        "timestamp": 1590304817
    },
    {
        "content": "<p>take a look at that code</p>",
        "id": 198570779,
        "sender_full_name": "RalfJ",
        "timestamp": 1590304821
    },
    {
        "content": "<p>or rather, the type</p>",
        "id": 198570780,
        "sender_full_name": "RalfJ",
        "timestamp": 1590304824
    },
    {
        "content": "<p>:-) but it must do something, because I get these nice and fancy ASCII art representations in my errors :D</p>",
        "id": 198570781,
        "sender_full_name": "Roland Kuhn",
        "timestamp": 1590304832
    },
    {
        "content": "<p>sure, the signature says: whatever I give you, the result has the same lifetime, deal with it</p>",
        "id": 198570791,
        "sender_full_name": "Roland Kuhn",
        "timestamp": 1590304884
    },
    {
        "content": "<p>(man it would be really useful if even for stabilized features we tracked the tracking issue in the source)</p>",
        "id": 198570792,
        "sender_full_name": "RalfJ",
        "timestamp": 1590304907
    },
    {
        "content": "<p>found the soundness counterexample: <a href=\"https://github.com/rust-lang/rust/pull/25747#issuecomment-105175235\">https://github.com/rust-lang/rust/pull/25747#issuecomment-105175235</a></p>",
        "id": 198570794,
        "sender_full_name": "RalfJ",
        "timestamp": 1590304916
    },
    {
        "content": "<p>cool, thanks; looking</p>",
        "id": 198570833,
        "sender_full_name": "Roland Kuhn",
        "timestamp": 1590304927
    },
    {
        "content": "<p>so here's the type:</p>\n<div class=\"codehilite\"><pre><span></span><code>    pub fn map&lt;U: ?Sized, F&gt;(orig: RefMut&lt;&#39;b, T&gt;, f: F) -&gt; RefMut&lt;&#39;b, U&gt;\n    where\n        F: FnOnce(&amp;mut T) -&gt; &amp;mut U,\n</code></pre></div>",
        "id": 198570835,
        "sender_full_name": "RalfJ",
        "timestamp": 1590304944
    },
    {
        "content": "<p>let's desugar this a bit:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">map</span><span class=\"o\">&lt;</span><span class=\"n\">U</span>: <span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">orig</span>: <span class=\"nc\">RefMut</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span>: <span class=\"nc\">F</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">RefMut</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">F</span>: <span class=\"nc\">for</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">FnOnce</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"p\">,</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 198570837,
        "sender_full_name": "RalfJ",
        "timestamp": 1590304968
    },
    {
        "content": "<p>notice the <code>for</code>! there's a \"nested quantifier\" here. that is crucial.</p>",
        "id": 198570842,
        "sender_full_name": "RalfJ",
        "timestamp": 1590304991
    },
    {
        "content": "<p>Yes, making the lifetime existential, right?</p>",
        "id": 198570846,
        "sender_full_name": "Roland Kuhn",
        "timestamp": 1590305028
    },
    {
        "content": "<p>the unsound version -- the version that would make your code compile -- has a slightly different type:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">map</span><span class=\"o\">&lt;</span><span class=\"n\">U</span>: <span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">orig</span>: <span class=\"nc\">RefMut</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span>: <span class=\"nc\">F</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">RefMut</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">F</span>: <span class=\"nb\">FnOnce</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"na\">&#39;b</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"na\">&#39;b</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"p\">,</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 198570847,
        "sender_full_name": "RalfJ",
        "timestamp": 1590305035
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"302838\">Roland Kuhn</span> <a href=\"#narrow/stream/219381-t-libs/topic/RefMut.20lifetime.20propagation/near/198570846\">said</a>:</p>\n<blockquote>\n<p>Yes, making the lifetime existential, right?</p>\n</blockquote>\n<p>it's a <em>universal</em> quantification, so... not really if you want to use precise terms</p>",
        "id": 198570885,
        "sender_full_name": "RalfJ",
        "timestamp": 1590305052
    },
    {
        "content": "<p>aargh, yes, just realized</p>",
        "id": 198570886,
        "sender_full_name": "Roland Kuhn",
        "timestamp": 1590305063
    },
    {
        "content": "<p>different languages use the same keywords for opposite purposes</p>",
        "id": 198570888,
        "sender_full_name": "Roland Kuhn",
        "timestamp": 1590305075
    },
    {
        "content": "<p>think of \"for\" as short for \"forall\"</p>",
        "id": 198570889,
        "sender_full_name": "RalfJ",
        "timestamp": 1590305077
    },
    {
        "content": "<p>(IMO they should have used <code>all</code> or <code>forall</code>, but, well)</p>",
        "id": 198570890,
        "sender_full_name": "RalfJ",
        "timestamp": 1590305089
    },
    {
        "content": "<p>and yes, I’m very interested in precise terms! :-)</p>",
        "id": 198570894,
        "sender_full_name": "Roland Kuhn",
        "timestamp": 1590305098
    },
    {
        "content": "<p>:D</p>",
        "id": 198570897,
        "sender_full_name": "RalfJ",
        "timestamp": 1590305102
    },
    {
        "content": "<p>I think I’ll have to spend some deep thinking minutes on the example to get it — thanks for your help!</p>",
        "id": 198570901,
        "sender_full_name": "Roland Kuhn",
        "timestamp": 1590305142
    },
    {
        "content": "<p>yes this is definitely worth pondering, but if you get to the bottom of it you gained a level-up in Rust type system comprehension. ;)</p>",
        "id": 198570952,
        "sender_full_name": "RalfJ",
        "timestamp": 1590305189
    },
    {
        "content": "<p>a worthy goal for a Sunday :-)</p>",
        "id": 198570959,
        "sender_full_name": "Roland Kuhn",
        "timestamp": 1590305206
    },
    {
        "content": "<p>:) have fun!</p>",
        "id": 198570961,
        "sender_full_name": "RalfJ",
        "timestamp": 1590305215
    },
    {
        "content": "<p>(I have this stream muted so please @mention me if there's something youd like me to look at, as you did last time)</p>",
        "id": 198570969,
        "sender_full_name": "RalfJ",
        "timestamp": 1590305238
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> That went quicker than I thought, and thanks again: universal quantification is used as a _leak stopper_ (a.k.a. reference containment) because universality includes cases that don’t permit storing references elsewhere, and the problem was that the lifetime of the actual object may be shorter than that of the RefCell (I hadn’t fully absorbed what you said above, but the example makes it clear). Neat trick!</p>",
        "id": 198571221,
        "sender_full_name": "Roland Kuhn",
        "timestamp": 1590305739
    },
    {
        "content": "<p>Yes that sums it up well :)</p>",
        "id": 198571262,
        "sender_full_name": "RalfJ",
        "timestamp": 1590305769
    },
    {
        "content": "<p>Now you probably can understand how supremely happy I was when we were actually able to formally prove this trick correct :D</p>",
        "id": 198571269,
        "sender_full_name": "RalfJ",
        "timestamp": 1590305793
    },
    {
        "content": "<p>indeed!</p>",
        "id": 198571282,
        "sender_full_name": "Roland Kuhn",
        "timestamp": 1590305802
    },
    {
        "content": "<p>if my PhD thesis wasnt already almost 300 pages I'd be tempted to include a proper description of the <code>RefCell</code> proof in there... but that would be a lot of effort and I am supposed to submit soon so probably not. :/ but a blog post will happen, eventually.</p>",
        "id": 198571294,
        "sender_full_name": "RalfJ",
        "timestamp": 1590305868
    }
]