[
    {
        "content": "<p>I noticed that <code>RawWaker</code> and <code>Waker</code> are only construct-able but not destruct-able or observable. We cannot inspect the <code>data</code> and <code>vtable</code> after being constructed into a <code>Waker</code> or <code>RawWaker</code>.<br>\nCurrently the docs of <code>RawWaker</code> clearly said it consist of two pointers: data and vtable pointers[1]. I'd assume it's a guarantee which cannot be changed. Is there any reason for NOT exposing getters or simply make fields public? If we would add more Waker methods in the future, they only affects <code>RawWakerVTable</code>, not changing <code>RawWaker</code> itself, yes?</p>\n<p>Also I found <code>Waker</code> is <code>repr(transparent)</code> to <code>RawWaker</code>. Is it expressing it's safe to transmute between them or their pointers?</p>\n<p>If we are able to get data and vtable pointers from a given <code>Waker</code>, it would allow my crate async-ffi[2] providing FFI-compatible futures without an extra Box for <code>Waker</code>. It would also be easier for <code>Waker</code> downcasting by simply comparing vtables.</p>\n<p>I already created an issue[3] about if this is possible , but no one replies for now.</p>\n<p>[1]: <a href=\"https://doc.rust-lang.org/stable/std/task/struct.RawWaker.html\">https://doc.rust-lang.org/stable/std/task/struct.RawWaker.html</a><br>\n[2]: <a href=\"https://github.com/oxalica/async-ffi\">https://github.com/oxalica/async-ffi</a><br>\n[3]: <a href=\"https://github.com/rust-lang/rust/issues/87021\">https://github.com/rust-lang/rust/issues/87021</a></p>",
        "id": 262531763,
        "sender_full_name": "oxalica",
        "timestamp": 1637712378
    }
]