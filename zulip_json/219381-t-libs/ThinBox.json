[
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"219747\">@Simon Sapin</span>, <span class=\"user-mention\" data-user-id=\"310399\">@Mara</span> and I were just talking about adding a ThinBox to <code>std</code> as a nightly only API and I'm looking into implementing it in <a href=\"https://github.com/rust-lang/rust/pull/90066\">https://github.com/rust-lang/rust/pull/90066</a>.</p>\n<p>After getting an initial version working I then decided to go back and look for prior art because I am positive I've seen people talking about this before only to realize the place i saw it before was literally in the RFC for ptr metadata, which already has a much nicer version of the same thing I tried writing up and I'm wondering, do you have a full copy of <code>ThinBox</code> written up somewhere?</p>",
        "id": 258281073,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1634681615
    },
    {
        "content": "<p>I'm extra excited about this because introducing a new alternate box specifically for handling trait objects serves as a perfect opportunity to fix the <code>Error</code> impl issue with <code>Box</code>, where we can choose to not introduce the unfortunate <code>From&lt;E: Error&gt;</code> impl that <code>Box</code> has and have <code>ThinBox&lt;dyn Error&gt;</code> impl Error and be one pointer wide at the same time</p>",
        "id": 258281260,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1634681701
    },
    {
        "content": "<p>Hey Jane, I don’t have more than what’s in the RFC, and that is completely untested since it was written for the pointer metadata that was being proposed and did not exist yet</p>",
        "id": 258282440,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1634682314
    },
    {
        "content": "<p>Alright</p>",
        "id": 258282468,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1634682331
    },
    {
        "content": "<p>I'm gonna work on implementing it then and use your rfc samples as inspiration, if you have time I'd love any feedback you could give on it</p>",
        "id": 258282570,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1634682370
    },
    {
        "content": "<p>Your PR looks like a good start. I assume you want to add more features like <code>DerefMut</code></p>",
        "id": 258283423,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1634682864
    },
    {
        "content": "<p>I think it may need a <code>PhantomData</code> for dropck</p>",
        "id": 258283428,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1634682867
    },
    {
        "content": "<p>Oh, and handling alloc errors. I like to use <code>NonNull::new(alloc(layout)).unwrap_or_else(|| handle_alloc_error(layout))</code> for that (maybe that should be a convenience method in liballoc some day)</p>",
        "id": 258283612,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1634682972
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"219747\">Simon Sapin</span> <a href=\"#narrow/stream/219381-t-libs/topic/ThinBox/near/258283428\">said</a>:</p>\n<blockquote>\n<p>I think it may need a <code>PhantomData</code> for dropck</p>\n</blockquote>\n<p>working on adding that right now based on your RFC</p>",
        "id": 258283650,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1634683009
    },
    {
        "content": "<p>… and not calling <code>alloc</code> with a zero-size layout, using <code>NonNull::dangling</code> instead. This can happen if the value is zero size and the metadata is <code>()</code>, which makes using <code>ThinBox</code> in the first place less useful but could still happen</p>",
        "id": 258283823,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1634683116
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"219747\">Simon Sapin</span> <a href=\"#narrow/stream/219381-t-libs/topic/ThinBox/near/258283423\">said</a>:</p>\n<blockquote>\n<p>Your PR looks like a good start. I assume you want to add more features like <code>DerefMut</code></p>\n</blockquote>\n<p>for sure, I'm not really certain how comprehensive I should make the API in the initial PR. I already have a usecase in mind for this for the error handling project group so I'm planning on using a custom toolchain for that project and integrating it there with only the minimum API needed to make that crate work</p>",
        "id": 258283843,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1634683132
    },
    {
        "content": "<p>Is this a public API of std, eventually to be stabilized?</p>",
        "id": 258283888,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1634683170
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"219747\">Simon Sapin</span> <a href=\"#narrow/stream/219381-t-libs/topic/ThinBox/near/258283823\">said</a>:</p>\n<blockquote>\n<p>… and not calling <code>alloc</code> with a zero-size layout, using <code>NonNull::dangling</code> instead. This can happen if the value is zero size and the metadata is <code>()</code>, which makes using <code>ThinBox</code> in the first place less useful but could still happen</p>\n</blockquote>\n<p>this is continuing the previous thought as in you would put this check in the helper function?</p>",
        "id": 258283915,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1634683183
    },
    {
        "content": "<p>there are crates in this area if you search for \"thin\", like <a href=\"https://crates.io/crates/thin_trait_object\">https://crates.io/crates/thin_trait_object</a></p>",
        "id": 258283937,
        "sender_full_name": "cuviper",
        "timestamp": 1634683195
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"219747\">Simon Sapin</span> <a href=\"#narrow/stream/219381-t-libs/topic/ThinBox/near/258283888\">said</a>:</p>\n<blockquote>\n<p>Is this a public API of std, eventually to be stabilized?</p>\n</blockquote>\n<p>yes</p>",
        "id": 258283939,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1634683196
    },
    {
        "content": "<p>(not an endorsement, just picked one that's directly relevant)</p>",
        "id": 258284021,
        "sender_full_name": "cuviper",
        "timestamp": 1634683221
    },
    {
        "content": "<p>cool</p>",
        "id": 258284035,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1634683230
    },
    {
        "content": "<p>I wonder if that one uses the ptr_metadata feature...</p>",
        "id": 258284056,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1634683243
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby [she/her]</span> <a href=\"#narrow/stream/219381-t-libs/topic/ThinBox/near/258283939\">said</a>:</p>\n<blockquote>\n<p>yes</p>\n</blockquote>\n<p>then I guess it’ll eventually get all the features, but yeah they don’t all need to be in the first PR</p>",
        "id": 258284113,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1634683274
    },
    {
        "content": "<p><a href=\"https://crates.io/crates/thin_trait_object#user-content-overview\">https://crates.io/crates/thin_trait_object#user-content-overview</a></p>\n<blockquote>\n<p>Trait objects in Rust suffer from several fundamental limitations: […] No way to manually construct a trait object given only a dispatch table and a value, i.e. to create a custom implementation which does not correspond to any type's implementation of the trait.</p>\n</blockquote>\n<p>I would guess it does not even use <code>dyn Trait</code></p>",
        "id": 258284312,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1634683370
    },
    {
        "content": "<p>how about <a href=\"https://crates.io/crates/rfc2580\">https://crates.io/crates/rfc2580</a></p>",
        "id": 258284410,
        "sender_full_name": "cuviper",
        "timestamp": 1634683435
    },
    {
        "content": "<p>oh that's just the inner pieces</p>",
        "id": 258284586,
        "sender_full_name": "cuviper",
        "timestamp": 1634683514
    },
    {
        "content": "<p>ohey thats from matthieu-m</p>",
        "id": 258284616,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1634683529
    },
    {
        "content": "<p>hmmm, tryng to integrate the <code>trait DynTrait&lt;...&gt; = ...</code> stuff from the RFC with <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> 's suggestion to use an extern type for safety isn't going well</p>",
        "id": 258284830,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1634683660
    },
    {
        "content": "<p>lol</p>",
        "id": 258284832,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1634683661
    },
    {
        "content": "<p>gonna try coming at this from a diff angle</p>",
        "id": 258284908,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1634683685
    },
    {
        "content": "<p>Looks like <a href=\"https://crates.io/crates/rfc2580\">https://crates.io/crates/rfc2580</a> is from the person arguing in the tracking issue that metadata for slices should not be plain <code>usize</code> but a dedicated struct, and similarly for all types. (I don’t really have an opinion on that.)</p>",
        "id": 258285043,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1634683794
    },
    {
        "content": "<p>ack, will leave that for later consideration then</p>",
        "id": 258285148,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1634683844
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"138448\">cuviper</span> <a href=\"#narrow/stream/219381-t-libs/topic/ThinBox/near/258284586\">said</a>:</p>\n<blockquote>\n<p>oh that's just the inner pieces</p>\n</blockquote>\n<p>it does have <a href=\"https://github.com/matthieu-m/rfc2580/blob/master/examples/thin.rs\">https://github.com/matthieu-m/rfc2580/blob/master/examples/thin.rs</a></p>",
        "id": 258285351,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1634683959
    },
    {
        "content": "<p>so i guess the diff between that example/my PR's current version and your RFC example version is that your RFC hardcodes <code>DynMetadata</code> and only works with trait objects as the parameter type</p>",
        "id": 258285496,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1634684057
    },
    {
        "content": "<p>whereas matthieu and my versions both work for arbitrary types (though of course mine is busted without the error handling you already mentioned and special handling for ZSTs)</p>",
        "id": 258285543,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1634684095
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby [she/her]</span> <a href=\"#narrow/stream/219381-t-libs/topic/ThinBox/near/258285496\">said</a>:</p>\n<blockquote>\n<p>so i guess the diff between that example/my PR's current version and your RFC example version is that your RFC hardcodes <code>DynMetadata</code> and only works with trait objects as the parameter type</p>\n</blockquote>\n<p>I’m trying to remember why I did that…</p>",
        "id": 258285602,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1634684135
    },
    {
        "content": "<p>Mine still uses an <code>Unsize</code> bound. I remember being unsatisfied with that since I’m not aware of any plan to move <code>Unsize</code> towards possible stabilization</p>",
        "id": 258285712,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1634684191
    },
    {
        "content": "<p>And I don’t like stable features mentioning unstable things in their signatures, especially maybe-perma-unstable things</p>",
        "id": 258285794,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1634684246
    },
    {
        "content": "<p>seems like this could be one of those areas where we make an exception but I'm also not in a particularly huge rush to stabilize</p>",
        "id": 258285834,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1634684278
    },
    {
        "content": "<p>so hopefully a resolution presents itself before then</p>",
        "id": 258285884,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1634684288
    },
    {
        "content": "<p>Oh yeah there’s the thing where the value alignment is unknown until we extract the vtable</p>",
        "id": 258286020,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1634684379
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> had a very cursed suggestion of using a closure to let the user handle the coercion which is 99% shitpost</p>",
        "id": 258286029,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1634684383
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=34aed1021d59c720753a8217ff9ba2e5\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=34aed1021d59c720753a8217ff9ba2e5</a></p>",
        "id": 258286032,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1634684384
    },
    {
        "content": "<p>I think that’s why my <code>ThinBox</code> is limited to trait objects</p>",
        "id": 258286061,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1634684395
    },
    {
        "content": "<p>so I can use <code>DynMetadata::align_of</code></p>",
        "id": 258286151,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1634684419
    },
    {
        "content": "<p>Also, my first version took a Box&lt;T&gt; as an input for the constructor and then moved the data around, though that version was also bad and used double indirection still so maybe not even relevant</p>",
        "id": 258286238,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1634684459
    },
    {
        "content": "<p>so we could theoretically rely on Box for the unsizing as part of the initial stable interface</p>",
        "id": 258286294,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1634684490
    },
    {
        "content": "<p>/shrug</p>",
        "id": 258286296,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1634684491
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"219747\">Simon Sapin</span> <a href=\"#narrow/stream/219381-t-libs/topic/ThinBox/near/258286020\">said</a>:</p>\n<blockquote>\n<p>Oh yeah there’s the thing where the value alignment is unknown until we extract the vtable</p>\n</blockquote>\n<p>can you elaborate on how this is an issue</p>",
        "id": 258286332,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1634684518
    },
    {
        "content": "<p>eddyb mentioned something about needing to test it for #[repr(align(1024))] sizes and using an extern type to help with safety that may have also been related to alignment, but I didn't really understand the issue at the time they mentioned this</p>",
        "id": 258286420,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1634684557
    },
    {
        "content": "<p>If I have <code>#[repr(align(32))] struct X;</code>, then <code>WithMeta&lt;X&gt;::value</code> is at offset 32</p>",
        "id": 258286463,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1634684578
    },
    {
        "content": "<p>ooooh</p>",
        "id": 258286538,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1634684615
    },
    {
        "content": "<p>does that happen automatically or do we need to handle that?</p>",
        "id": 258286569,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1634684633
    },
    {
        "content": "<p>it happens automatically when creating a <code>WithMeta&lt;X&gt;</code> with a concrete <code>X</code></p>",
        "id": 258286697,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1634684692
    },
    {
        "content": "<p>but later when dereferencing <code>ThinBox&lt;dyn SomeTrait&gt;</code> the concrete <code>X</code> is type-erased</p>",
        "id": 258286759,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1634684742
    },
    {
        "content": "<p>I wonder how <code>as_ref</code> in your PR works</p>",
        "id": 258286835,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1634684774
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"219747\">Simon Sapin</span> <a href=\"#narrow/stream/219381-t-libs/topic/ThinBox/near/258286835\">said</a>:</p>\n<blockquote>\n<p>I wonder how <code>as_ref</code> in your PR works</p>\n</blockquote>\n<p>big same</p>",
        "id": 258286843,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1634684783
    },
    {
        "content": "<p>because it sure seems to, even in the align(1024) test, lol</p>",
        "id": 258286861,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1634684794
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/90066/files#diff-cbeae90e5072b4f07b0eef276acd341f96b0ca9596ecf47a209d655ffd44a0beR12-R17\">https://github.com/rust-lang/rust/pull/90066/files#diff-cbeae90e5072b4f07b0eef276acd341f96b0ca9596ecf47a209d655ffd44a0beR12-R17</a> is confusing since the two variables named <code>T</code> don’t match</p>",
        "id": 258286931,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1634684847
    },
    {
        "content": "<p>does the <code>Metadata</code> include the padding perhaps?</p>",
        "id": 258286935,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1634684848
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"219747\">Simon Sapin</span> <a href=\"#narrow/stream/219381-t-libs/topic/ThinBox/near/258286931\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/rust-lang/rust/pull/90066/files#diff-cbeae90e5072b4f07b0eef276acd341f96b0ca9596ecf47a209d655ffd44a0beR12-R17\">https://github.com/rust-lang/rust/pull/90066/files#diff-cbeae90e5072b4f07b0eef276acd341f96b0ca9596ecf47a209d655ffd44a0beR12-R17</a> is confusing since the two variables named <code>T</code> don’t match</p>\n</blockquote>\n<p>sorry about that <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 258286962,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1634684868
    },
    {
        "content": "<p>im cleaning that up to use <code>Dyn</code> the way your examples do</p>",
        "id": 258286971,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1634684877
    },
    {
        "content": "<p>same later with <code>ThinBox&lt;U&gt;</code> in one impl vs <code>ThinBox&lt;T&gt;</code> in the next</p>",
        "id": 258287127,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1634684956
    },
    {
        "content": "<p>:&lt;</p>",
        "id": 258287142,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1634684967
    },
    {
        "content": "<p>gimmi a sec and I'll push a more consistent version</p>",
        "id": 258287159,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1634684985
    },
    {
        "content": "<p>actually</p>",
        "id": 258287161,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1634684987
    },
    {
        "content": "<p>i can just push it now</p>",
        "id": 258287164,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1634684988
    },
    {
        "content": "<p>not done testing locally but I think its fine</p>",
        "id": 258287171,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1634684993
    },
    {
        "content": "<p>and I also wanted to integrate NonNull but I can do that after</p>",
        "id": 258287227,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1634685005
    },
    {
        "content": "<p>pushed</p>",
        "id": 258287272,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1634685033
    },
    {
        "content": "<p>try making the test with <code>align(1024)</code> use a non-ZST</p>",
        "id": 258287411,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1634685109
    },
    {
        "content": "<p>and print the value in <code>Display</code>?</p>",
        "id": 258287423,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1634685117
    },
    {
        "content": "<p>I would guess <code>as_ref</code> computes the wrong pointer</p>",
        "id": 258287483,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1634685134
    },
    {
        "content": "<p>ack, testing that now</p>",
        "id": 258287685,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1634685242
    },
    {
        "content": "<p>It uses <code>&amp;inner.value</code> which accesses a field of the <code>struct { Meta, ErasedExtern }</code> which may have different layout than <code>struct { Meta, ConcreteType }</code></p>",
        "id": 258287841,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1634685306
    },
    {
        "content": "<p>makes sense</p>",
        "id": 258287915,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1634685344
    },
    {
        "content": "<p>oops I meant to sleep an hour ago <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> bye</p>",
        "id": 258288040,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1634685396
    },
    {
        "content": "<p>hehe, sorry about that and gn and thank you!</p>",
        "id": 258288057,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1634685408
    },
    {
        "content": "<p>Well I wouldn’t sleep if I kept wondering without checking</p>",
        "id": 258288485,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1634685638
    },
    {
        "content": "<p>hmm?</p>",
        "id": 258288537,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1634685666
    },
    {
        "content": "<p><a href=\"https://github.com/matthieu-m/rfc2580/blob/b58d1d3cba0d4b5e859d3617ea2d0943aaa31329/examples/thin.rs#L124-L130\">https://github.com/matthieu-m/rfc2580/blob/b58d1d3cba0d4b5e859d3617ea2d0943aaa31329/examples/thin.rs#L124-L130</a> stores a pointer to the value and applies negative offset to extract the metadata</p>",
        "id": 258288545,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1634685671
    },
    {
        "content": "<p>which is interesting, but afaict still ignores alignment</p>",
        "id": 258288565,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1634685685
    },
    {
        "content": "<p><span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span></p>",
        "id": 258288591,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1634685705
    },
    {
        "content": "<p>ah, thats what they meant by it using a middle pointer</p>",
        "id": 258288668,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1634685726
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"----\"><pre><span></span><code>error: test run failed!\nstatus: exit status: 101\ncommand: \"/home/jlusby/git/rust-lang/rust/build/x86_64-unknown-linux-gnu/test/ui/box/thin_align/a\"\nstdout:\n------------------------------------------\n\n------------------------------------------\nstderr:\n------------------------------------------\nthread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"Foo error!\"`,\n right: `\"\"`', /home/jlusby/git/rust-lang/rust/src/test/ui/box/thin_align.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre></div>",
        "id": 258288687,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1634685740
    },
    {
        "content": "<p>boom</p>",
        "id": 258288689,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1634685740
    },
    {
        "content": "<p>prophecy fulfilled</p>",
        "id": 258288702,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1634685748
    },
    {
        "content": "<p>wait it doesn’t ignore alignment… but instead writes metadata at the <em>end</em> of the area with potential padding</p>",
        "id": 258288799,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1634685835
    },
    {
        "content": "<p>That’s really interesting and clever. It removes the need for a <code>std::mem::align_of_for_meta&lt;T&gt;(meta: &lt;T as Pointee&gt;::Metadata) -&gt; usize</code> intrinsic that I thought was needed to generalize my <code>ThinBox</code></p>",
        "id": 258288951,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1634685930
    },
    {
        "content": "<p>Looks like matthieu-m has thought a lot about all this so their input would be valuable</p>",
        "id": 258289095,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1634686038
    },
    {
        "content": "<p>I just CC'ed them on the PR</p>",
        "id": 258289140,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1634686074
    },
    {
        "content": "<p>not sure if they're on the zulip though since there doesn't seem to be an @ matthieu-m on here</p>",
        "id": 258289198,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1634686089
    },
    {
        "content": "<p>… or copy-paste <a href=\"https://github.com/matthieu-m/rfc2580/blob/master/examples/thin.rs\">https://github.com/matthieu-m/rfc2580/blob/master/examples/thin.rs</a> and adapt it to use std’s <code>Pointee</code></p>",
        "id": 258289210,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1634686097
    },
    {
        "content": "<p>How would ThinBox interact with trait upcasting?</p>",
        "id": 258289224,
        "sender_full_name": "Gary Guo",
        "timestamp": 1634686108
    },
    {
        "content": "<p>I imagine that'll be impossible</p>",
        "id": 258289230,
        "sender_full_name": "Gary Guo",
        "timestamp": 1634686116
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"219747\">Simon Sapin</span> <a href=\"#narrow/stream/219381-t-libs/topic/ThinBox/near/258289210\">said</a>:</p>\n<blockquote>\n<p>… or copy-paste <a href=\"https://github.com/matthieu-m/rfc2580/blob/master/examples/thin.rs\">https://github.com/matthieu-m/rfc2580/blob/master/examples/thin.rs</a> and adapt it to use std’s <code>Pointee</code></p>\n</blockquote>\n<p>definitely seems like an attractive path forward, though I would want to talk with them first before doing that</p>",
        "id": 258289244,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1634686136
    },
    {
        "content": "<p>sure</p>",
        "id": 258289253,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1634686142
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"303710\">Gary Guo</span> <a href=\"#narrow/stream/219381-t-libs/topic/ThinBox/near/258289224\">said</a>:</p>\n<blockquote>\n<p>How would ThinBox interact with trait upcasting?</p>\n</blockquote>\n<p>presumably you can get a &amp;dyn Trait out of it and use whatever upcasting machinery gets built into rust for regular trait objects</p>",
        "id": 258289294,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1634686178
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"303710\">Gary Guo</span> <a href=\"#narrow/stream/219381-t-libs/topic/ThinBox/near/258289224\">said</a>:</p>\n<blockquote>\n<p>How would ThinBox interact with trait upcasting?</p>\n</blockquote>\n<p>You can dereferenc <code>ThinBox</code> to get <code>&amp;dyn Trait</code> or <code>&amp;mut dyn Trait</code> and upcasting <em>that</em> should Just Work</p>",
        "id": 258289302,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1634686184
    },
    {
        "content": "<p>not sure about upcasting from a ThinBox to another</p>",
        "id": 258289303,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1634686185
    },
    {
        "content": "<p>I'd probably just finish the MVP of thinbox and leave figuring out finer integrations like that to people working on trait upcasting itself</p>",
        "id": 258289378,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1634686223
    },
    {
        "content": "<p>for owned upcasting, I imagine <code>ThinkBox</code> would need an API that consumes a boxed values and overwrites the metadata</p>",
        "id": 258289409,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1634686249
    },
    {
        "content": "<p>as far as the error trait is concerned it would already work with trait upcasting which is the main place I end up wanting it, lol</p>",
        "id": 258289411,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1634686251
    },
    {
        "content": "<p>thanks to generic member access (when that lands)</p>",
        "id": 258289426,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1634686260
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby [she/her]</span> <a href=\"#narrow/stream/219381-t-libs/topic/ThinBox/near/258289426\">said</a>:</p>\n<blockquote>\n<p>thanks to generic member access (when that lands)</p>\n</blockquote>\n<p>Is that <a href=\"https://github.com/rust-lang/rfcs/pull/2895\">https://github.com/rust-lang/rfcs/pull/2895</a> ? Does it mean adding a <a href=\"https://crates.io/crates/anymap\">https://crates.io/crates/anymap</a> to errors?</p>",
        "id": 258289597,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1634686397
    },
    {
        "content": "<p>(I’ve only skimmed the summary)</p>",
        "id": 258289628,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1634686422
    },
    {
        "content": "<p>anyway, bye :)</p>",
        "id": 258289648,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1634686439
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"219747\">Simon Sapin</span> <a href=\"#narrow/stream/219381-t-libs/topic/ThinBox/near/258289597\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby [she/her]</span> <a href=\"#narrow/stream/219381-t-libs/topic/ThinBox/near/258289426\">said</a>:</p>\n<blockquote>\n<p>thanks to generic member access (when that lands)</p>\n</blockquote>\n<p>Is that <a href=\"https://github.com/rust-lang/rfcs/pull/2895\">https://github.com/rust-lang/rfcs/pull/2895</a> ? Does it mean adding a <a href=\"https://crates.io/crates/anymap\">https://crates.io/crates/anymap</a> to errors?</p>\n</blockquote>\n<p>Thats the right RFC, and kinda. It's more like adding the interface to the trait, but the storage is entirely custom to each type, and everything has to be opt in</p>",
        "id": 258289771,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1634686520
    },
    {
        "content": "<p>so for trait upcasting you would be doing something like</p>",
        "id": 258289778,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1634686526
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">provide_context</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">request</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Request</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">request</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">provide_ref</span>::<span class=\"o\">&lt;&amp;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">Serialize</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 258289915,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1634686612
    },
    {
        "content": "<p>then you could use <code>error.context_ref::&lt;&amp;dyn Serialize&gt;()</code> on an error trait object to upcast it to a serialize trait object</p>",
        "id": 258289967,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1634686644
    },
    {
        "content": "<p>I’m glad to learn a <code>align_of_for_meta</code> intrinsic isn’t necessary for a fully general <code>ThinBox</code> but it could still be useful for other niche use cases such as a <code>Vec</code>-like container that stores heterogeneously-sized values in contiguous memory</p>",
        "id": 258321145,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1634713246
    },
    {
        "content": "<p>Together with <code>size_of_for_meta</code> it could even replace the corresponding <code>DynMetadata</code> methods</p>",
        "id": 258321189,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1634713276
    },
    {
        "content": "<p>for the alignment issue you could reuse <code>Rc::try_allocate_for_layout</code> (<a href=\"https://github.com/rust-lang/rust/issues/54922\">#54922</a>).</p>",
        "id": 258332032,
        "sender_full_name": "kennytm",
        "timestamp": 1634719296
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"219747\">Simon Sapin</span> <a href=\"#narrow/stream/219381-t-libs/topic/ThinBox/near/258321145\">said</a>:</p>\n<blockquote>\n<p>I’m glad to learn a <code>align_of_for_meta</code> intrinsic isn’t necessary for a fully general <code>ThinBox</code> but it could still be useful for other niche use cases such as a <code>Vec</code>-like container that stores heterogeneously-sized values in contiguous memory</p>\n</blockquote>\n<p>What does fully general mean here?</p>",
        "id": 258495022,
        "sender_full_name": "Ben Herr",
        "timestamp": 1634798322
    },
    {
        "content": "<p>I played around with a toy implementation that tries to avoid doing its own allocation and alignment stuff and just uses regular boxes, but I probably can't make that go as far as From&lt;&amp;[T]&gt;. matthieu's thinbox seems really fancy.</p>",
        "id": 258496090,
        "sender_full_name": "Ben Herr",
        "timestamp": 1634799210
    },
    {
        "content": "<p>Fully general means for any <code>T: ?Sized</code> type, as opposed to only trait objects with <code>T: Pointee&lt;Metadata=DynMetadata&lt;T&gt;&gt;</code></p>",
        "id": 258564865,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1634829536
    },
    {
        "content": "<p>The <code>ThinBox</code> example in the RFC <a href=\"https://rust-lang.github.io/rfcs/2580-ptr-meta.html#guide-level-explanation\">https://rust-lang.github.io/rfcs/2580-ptr-meta.html#guide-level-explanation</a> does this in order to be able to use <code>DynMetadata::align_of</code></p>",
        "id": 258565079,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1634829609
    },
    {
        "content": "<p><code>DynMetadata::align_of</code> is like <code>mem::align_of_val</code> except it doesn’t need a data pointer, which is important because that’s how that example code computes the data pointer</p>",
        "id": 258565236,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1634829661
    },
    {
        "content": "<p>Instead, <a href=\"https://crates.io/crates/rfc2580\">https://crates.io/crates/rfc2580</a> keeps a pointer to the data in the \"middle\" of the allocation and uses a negative offset to find the metadata</p>",
        "id": 258565340,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1634829696
    },
    {
        "content": "<p>right</p>",
        "id": 258565391,
        "sender_full_name": "Ben Herr",
        "timestamp": 1634829713
    },
    {
        "content": "<p>i tried boxing a struct { metadata, T } where the metadata is that of the struct and not T (though i guess in practice it's identical), and then I can from_raw_parts a wide pointer to the struct and that knows how to get the T</p>",
        "id": 258565917,
        "sender_full_name": "Ben Herr",
        "timestamp": 1634829890
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"219747\">Simon Sapin</span> <a href=\"#narrow/stream/219381-t-libs/topic/ThinBox/near/258565236\">said</a>:</p>\n<blockquote>\n<p><code>DynMetadata::align_of</code> is like <code>mem::align_of_val</code> except it doesn’t need a data pointer, which is important because that’s how that example code computes the data pointer</p>\n</blockquote>\n<p>I wonder if there are cases where align can change based on the data pointer? Maybe we could just add a bound to the <code>Pointee</code> so <code>::Metadata</code> always provides <code>align_of</code>? (btw, why is it <code>align_of</code> and not <code>align</code>? it seems weird to add <code>of</code> and not provide the thing of which align is asked...)</p>",
        "id": 258825359,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1634997869
    },
    {
        "content": "<p>the <code>align_of_val_raw(_)</code> of all <em>regular</em> DST <code>T</code> in Rust so far can be derived from the type <code>T</code> itself and the value of <code>metadata(_)</code></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">align_of_val_raw</span>::<span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">align_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"n\">align_of_val_raw</span>::<span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">metadata</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">).</span><span class=\"n\">align_of</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"n\">align_of_val_raw</span>::<span class=\"o\">&lt;</span><span class=\"n\">extern_type</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"cm\">/* unspecified, may panic may abort may return 1 */</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>in theory, if we introduce an <em>inlined</em> DST such as <code>Thin&lt;dyn Trait&gt; = (DynMetadata, dyn Trait)</code> (so that <code>type ThinBox&lt;dyn Trait&gt; = Box&lt;Thin&lt;dyn Trait&gt;&gt;</code>), its alignment will be <code>max(align_of::&lt;DynMetadata&gt;(), self.0.align_of())</code>, i.e. the alignment depends on the <em>content</em> of the data pointer.</p>\n<p>this makes it impossible to implement a safe <code>align_of_val_raw</code>.  </p>\n<p>it is also impossible to use inlined DST as a struct tail e.g. <code>(u8, Thin&lt;dyn Trait&gt;)</code> due to the cyclic dependency between \"reading <code>self.1</code> to calculate the alignment\" ↔ \"getting the alignment to compute the offset of <code>self.1</code> to read the content\".</p>\n<p>imo alignment must never rely on the data pointer, and we shouldn't support <code>Thin&lt;X&gt;</code> without an explicit data-independent alignment.</p>\n<hr>\n<blockquote>\n<p>Maybe we could just add a bound to the <code>Pointee</code> so <code>::Metadata</code> always provides <code>align_of</code>?</p>\n</blockquote>\n<p>that said, i don't like this idea very much in current state since it would pollute <code>usize</code> and <code>()</code> (<code>5_usize.align_of()</code>?? though in reality it requires FQN <code>Metadata::&lt;[u8]&gt;::align_of(5)</code>).</p>",
        "id": 258834983,
        "sender_full_name": "kennytm",
        "timestamp": 1635011427
    },
    {
        "content": "<blockquote>\n<p>that said, i don't like this idea very much in current state since it would pollute <code>usize</code> and <code>()</code> (<code>5_usize.align_of()</code>?? though in reality it requires FQN <code>Metadata::&lt;[u8]&gt;::align_of(5))</code>.</p>\n</blockquote>\n<p>This would be easier if <code>Metadata</code> would always be a newtype :)<br>\n<code>SizedMetadata&lt;T&gt;</code>, <code>SliceMetadata&lt;T&gt;</code>,  <code>DynMetadata&lt;T: ?Sized&gt;</code>...</p>\n<p>Then implementing a new trait shouldn't cause any problems.</p>\n<p>Because otherwise we'd need a trait like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">MetadataOf</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">align</span><span class=\"p\">(</span><span class=\"n\">this</span>: <span class=\"nc\">Self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">MetadataOf</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">align</span><span class=\"p\">(</span><span class=\"n\">this</span>: <span class=\"nc\">Self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">mem</span>::<span class=\"n\">align_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">MetadataOf</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">align</span><span class=\"p\">(</span><span class=\"n\">this</span>: <span class=\"nc\">Self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">mem</span>::<span class=\"n\">align_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// etc</span>\n</code></pre></div>\n<p>Since <code>()</code> and <code>usize</code> don't mention <code>T</code>.</p>\n<p>With newtypes we doth don't pollute the standard commonly used types and the trait may be simpler:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Metadata</span>: <span class=\"cm\">/* we can move all the trait bounds here, from Pointee::Metadata */</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">align</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Metadata</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">SizedMetadata</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">align</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">mem</span>::<span class=\"n\">align_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Metadata</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">SliceMetadata</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">align</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">mem</span>::<span class=\"n\">align_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// etc</span>\n</code></pre></div>",
        "id": 258836034,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1635012930
    }
]