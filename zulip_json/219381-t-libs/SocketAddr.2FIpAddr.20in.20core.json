[
    {
        "content": "<p>Hey, an inconvenience that I’ve run into a couple of times when writing <code>#[no_std]</code> is that <code>std::net::SocketAddr</code>and its descendent types are unavailable.</p>\n<p>This is quite annoying for building <code>#[no_std]</code> parsers and network libraries, which often times still have to handle socket addresses, but don’t have a shared type to use. The IETF RFCs these types are based on are used in a much broader set of targets than in is currently available in std, so I think that these types should move into core.</p>\n<p>I understand why it’s not at the moment, which is that it often uses the underlying system <code>addr</code> representation, however I think there’s a very clear representation to use for all of the types in <code>#[no_std]</code>, which is <code>([u8; 4], u16)</code> for ipv4, and <code>([u16; 8], u16, u32, u32)</code> for ipv6.</p>\n<p>What do other people think? How feasible would it be to create a core version of these types, without having a bunch of duplicated code between std and core, or exposing unnecessary internal details? I found a thread from over a year ago about this but didn’t see any libs people comment on it. <a href=\"https://internals.rust-lang.org/t/std-ipv4addr-in-core/11247\">https://internals.rust-lang.org/t/std-ipv4addr-in-core/11247</a></p>",
        "id": 240369033,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1622053707
    },
    {
        "content": "<p>There is an effort to switch the representation of those types to a \"raw\" representation away from wrapping the libc types, but there is a long tail of external libraries that assume the libc layout via transmutes.</p>",
        "id": 240369502,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1622053871
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243558\">@Steven Fackler</span> That’s good to hear that there is an effort. I noticed there’s an explicit comment that the representation isn’t to be relied upon. Was that added after this became an issue?</p>",
        "id": 240370053,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1622054086
    },
    {
        "content": "<p>Yeah</p>",
        "id": 240370075,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1622054096
    },
    {
        "content": "<p>Is the list of libs using transmute being tracked somewhere?</p>",
        "id": 240370301,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1622054190
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/78802\">https://github.com/rust-lang/rust/pull/78802</a></p>",
        "id": 240371292,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1622054625
    },
    {
        "content": "<p>This raises a general question that I think might be worth considering.</p>",
        "id": 240371810,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1622054862
    },
    {
        "content": "<p>We currently try to make sure nothing in <code>core</code> is dependent on anything target-specific.</p>",
        "id": 240371852,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1622054879
    },
    {
        "content": "<p><em>Should</em> we, though?</p>",
        "id": 240371912,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1622054888
    },
    {
        "content": "<p>core, like std and alloc, still has to be built for the target.</p>",
        "id": 240371939,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1622054902
    },
    {
        "content": "<p>wouldn't <code>asm!</code> be in core?</p>",
        "id": 240371973,
        "sender_full_name": "bstrie",
        "timestamp": 1622054916
    },
    {
        "content": "<p>There's no concept of sharing \"the same\" core between, say, <code>x86_64-unknown-linux-gnu</code> and <code>x86_64-unknown-linux-musl</code>.</p>",
        "id": 240371988,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1622054928
    },
    {
        "content": "<p>Let alone between two <code>x86_64</code> targets for different OSes entirely.</p>",
        "id": 240372024,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1622054946
    },
    {
        "content": "<p>Given that, I think it'd be perfectly reasonable for core to have <em>types</em> that vary based on target. That includes addr types, for instance.</p>",
        "id": 240372119,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1622054983
    },
    {
        "content": "<blockquote>\n<p>core, like std and alloc, still has to be built for the target.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> Well one thing to keep in mind is custom targets which wouldn’t have a libc implementation to use. So there should still always be a representation for when there’s no appropriate target representation.</p>",
        "id": 240373243,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1622055444
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219696\">@XAMPPRocky</span> Sure. And in that case, we can have a default representation.</p>",
        "id": 240373565,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1622055543
    },
    {
        "content": "<p>But, for instance, we could have <code>core::something::SocketAddr</code> that's re-exported as <code>std::net::SocketAddr</code>, and always matches the libc type iff there's a libc type.</p>",
        "id": 240373795,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1622055617
    },
    {
        "content": "<p>For these types in particular, I think part of the desire was to make them smaller and less aligned by dropping some of the bits libc needs but we don't, in addition to no_std stuff</p>",
        "id": 240373801,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1622055618
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243558\">@Steven Fackler</span> I get that. But I think if that were the <em>only</em> motivation, that wouldn't be worth breaking people's existing code, even if we consider that code questionable.</p>",
        "id": 240373855,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1622055645
    },
    {
        "content": "<p>Yeah, agreed there</p>",
        "id": 240373908,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1622055671
    },
    {
        "content": "<p>And I think we don't <em>need</em> to break that compatibility just to move the type into core.</p>",
        "id": 240373986,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1622055687
    },
    {
        "content": "<p>I'd love to see quite a few types moved into core and re-exported from std.</p>",
        "id": 240374012,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1622055701
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> Right, I was just pointing more in general that there will be other things in libc that don’t have reasonable target independent defaults.</p>",
        "id": 240374992,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1622056019
    },
    {
        "content": "<p>That seems likely. Are there types like that that we'd want to move into core though?</p>",
        "id": 240376440,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1622056605
    }
]