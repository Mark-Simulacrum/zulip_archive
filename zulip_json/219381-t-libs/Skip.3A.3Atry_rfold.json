[
    {
        "content": "<p>Hmm, Skip::try_rfold makes no sense to me: <a href=\"https://github.com/rust-lang/rust/blob/d79f1bd31a1401b5d08096fcdf9a9eb23ddf95df/src/libcore/iter/adapters/mod.rs#L1985-L2008\">https://github.com/rust-lang/rust/blob/d79f1bd31a1401b5d08096fcdf9a9eb23ddf95df/src/libcore/iter/adapters/mod.rs#L1985-L2008</a></p>",
        "id": 197876920,
        "sender_full_name": "njn",
        "timestamp": 1589760805
    },
    {
        "content": "<p>Why doesn't it use <code>self.n</code>? What is going on with <code>n</code> inside check?</p>",
        "id": 197876921,
        "sender_full_name": "njn",
        "timestamp": 1589760807
    },
    {
        "content": "<p><code>try_rfold</code> works from the back of the iterator, not the front. If we take <code>n = self.len()</code> elements from the back of the iterator, we have reached the first item that needs to be skipped.</p>",
        "id": 197881404,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1589767046
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span> What really confuses me there is the apparent capture of <code>n</code> in the closure within <code>check</code>. I really don't understand how that can possibly work</p>",
        "id": 197886449,
        "sender_full_name": "njn",
        "timestamp": 1589774228
    },
    {
        "content": "<p>Maybe because it's a <code>move</code> closure?</p>",
        "id": 197886501,
        "sender_full_name": "njn",
        "timestamp": 1589774292
    },
    {
        "content": "<p>That's right. As for why it's written in such a convoluted way, I have no idea.</p>",
        "id": 197886587,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1589774482
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span> Many iterator functions go through <code>try_fold</code>/<code>try_rfold</code>, because LLVM ends up optimizing them well</p>",
        "id": 197886635,
        "sender_full_name": "njn",
        "timestamp": 1589774546
    },
    {
        "content": "<p>sometimes this results in them being hard to read</p>",
        "id": 197886636,
        "sender_full_name": "njn",
        "timestamp": 1589774553
    },
    {
        "content": "<p>Oh no. I meant putting the closure inside of <code>check</code> instead of passing it directly.</p>",
        "id": 197886641,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1589774569
    },
    {
        "content": "<p>Presumably to reduce the number of in-scope generic parameters for the closure?</p>",
        "id": 197886644,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1589774590
    },
    {
        "content": "<p>That results in less LLVM IR being generated, reducing compile times,  believe it or not. It's a pattern used all throughout the iterator code</p>",
        "id": 197886647,
        "sender_full_name": "njn",
        "timestamp": 1589774614
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span> reducing generic parameters is a big part of it, yes, since <a href=\"https://github.com/rust-lang/rust/pull/62429\">https://github.com/rust-lang/rust/pull/62429</a></p>",
        "id": 197958227,
        "sender_full_name": "cuviper",
        "timestamp": 1589818596
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span>. I checked <code>git blame</code> shortly after the discussion above, so I saw that PR. I was initially confused because <code>fold</code> is still generic and will almost always be a unique type, so presumably this doesn't reduce the number of instantiations of the closure. I read another comment from you that <a href=\"https://github.com/rust-lang/rust/issues/62429\">#62429</a> was mainly to avoid running into type-length limit by getting <code>I</code> out of scope, which makes more sense.</p>",
        "id": 197959749,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1589819179
    },
    {
        "content": "<p>Otherwise I was going to suggest that <span class=\"user-mention silent\" data-user-id=\"116107\">davidtwco</span> revert this to get a better idea of the impact of <a href=\"https://github.com/rust-lang/rust/issues/69749\">#69749</a>.</p>",
        "id": 197960009,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1589819283
    },
    {
        "content": "<p>Right, it was mostly motivated by type length</p>",
        "id": 197960020,
        "sender_full_name": "cuviper",
        "timestamp": 1589819287
    },
    {
        "content": "<p>it could still reduce for <code>fold</code> with things like <code>Chain&lt;I1, I2&gt;</code>, then you might be forwarding fold with the same closure yet different iterator types, but internally they have the same <code>::Item</code></p>",
        "id": 197960174,
        "sender_full_name": "cuviper",
        "timestamp": 1589819346
    },
    {
        "content": "<p>Well, a more advanced version of <a href=\"https://github.com/rust-lang/rust/issues/69749\">#69749</a> I guess, I think that's only for functions that don't depend on <em>any</em> of their generic parameters.</p>",
        "id": 197960222,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1589819364
    }
]