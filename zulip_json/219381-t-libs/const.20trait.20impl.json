[
    {
        "content": "<p>The only thing unresolved about const trait impls is the current <code>~const</code> syntax, right? If that's the case is there any reason we couldn't stabilize <code>impl const Trait</code> on its own? It wouldn't be possible for all cases, as some traits have bounded generics, but it <em>would</em> permit end users to implement a number of things (such as <code>Add</code>).</p>",
        "id": 258472794,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1634779742
    },
    {
        "content": "<p>There's no technical reason that I know of that would preclude a partial stabilization here.</p>",
        "id": 258472816,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1634779767
    },
    {
        "content": "<p>Well, const trait impls make adding a new default method to a trait a breaking change. We don't have a good strategy for this yet</p>",
        "id": 258503587,
        "sender_full_name": "oli",
        "timestamp": 1634803456
    },
    {
        "content": "<p>Could you elaborate? I think I understand but want to make sure.</p>",
        "id": 258573005,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1634832488
    },
    {
        "content": "<p>We probably need to separate default impl from declaration for that.</p>",
        "id": 258573055,
        "sender_full_name": "Gary Guo",
        "timestamp": 1634832511
    },
    {
        "content": "<p>Const impl needs to manually implement all default methods because default method impl can be non-const.</p>",
        "id": 258573157,
        "sender_full_name": "Gary Guo",
        "timestamp": 1634832548
    },
    {
        "content": "<p>basically even if you implemented all methods yourself, if the <code>trait</code> owner adds a non-const method, your crate breaks</p>",
        "id": 258573697,
        "sender_full_name": "oli",
        "timestamp": 1634832732
    },
    {
        "content": "<p>and right now, adding a new non-const defaulted method is not a breaking change</p>",
        "id": 258573743,
        "sender_full_name": "oli",
        "timestamp": 1634832756
    },
    {
        "content": "<p>Oh god</p>",
        "id": 258573838,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1634832793
    },
    {
        "content": "<p>yea</p>",
        "id": 258573917,
        "sender_full_name": "oli",
        "timestamp": 1634832824
    },
    {
        "content": "<p>thus my reluctance to move forward here, and I have no good ideas yet of how to fix it</p>",
        "id": 258573977,
        "sender_full_name": "oli",
        "timestamp": 1634832843
    },
    {
        "content": "<p>I need to write up the solution space in a doc and then we can weigh them against each other</p>",
        "id": 258574096,
        "sender_full_name": "oli",
        "timestamp": 1634832884
    },
    {
        "content": "<p>Yes please</p>",
        "id": 258574162,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1634832913
    },
    {
        "content": "<p>I was just about to ask if there's a write-up anywhere explaining why const impls can't inherit default impls</p>",
        "id": 258574219,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1634832938
    },
    {
        "content": "<p>there's a world of stuff the default impl could write that would not be supported in <code>const</code></p>",
        "id": 258575048,
        "sender_full_name": "cuviper",
        "timestamp": 1634833227
    },
    {
        "content": "<p>can this use some strategy similar to trait-object safety?</p>",
        "id": 258575340,
        "sender_full_name": "cuviper",
        "timestamp": 1634833330
    },
    {
        "content": "<p>I'm guessing one of the potential ways forward is to add an opt in restriction on the trait declaration that forces default impls to be always valid in const contexts, and then you could stabilize const impls on traits that have opted I already. But this would be pretty lousy because the std traits wouldn't be able to opt in since it would be breaking.</p>",
        "id": 258575396,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1634833350
    },
    {
        "content": "<p>But at least that would make it available to 3rd party traits</p>",
        "id": 258575496,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1634833392
    },
    {
        "content": "<p>I don't know what form this would take, but the trait definition could have some attribute/syntax that indicates its implementations could be used in const contexts, implicitly providing a forward guarantee of const-capable default implementations. The caller of the trait method wouldn't need to know about this, only whether the trait implementation for the type is const.</p>",
        "id": 258661477,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1634877321
    },
    {
        "content": "<p>Notably non-const end implementations could still exist. This would allow usage in stdlib.</p>",
        "id": 258661620,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1634877458
    },
    {
        "content": "<p>I feel const traits are a lot like async traits: modifier/transforms on associated function types; and syntax sugar for recognizing the traits that got all its associated functions transformed . Async trait is currently another unsolved problem, maybe these two can be investigated in depth together.</p>",
        "id": 258802434,
        "sender_full_name": "Charles Lew",
        "timestamp": 1634962812
    },
    {
        "content": "<p>And this is quite a T-lang issue.</p>",
        "id": 258802448,
        "sender_full_name": "Charles Lew",
        "timestamp": 1634962843
    },
    {
        "content": "<p>How is this remotely similar to async functions? Those are related to GATs, whereas this is solely about stability of something. Though I agree this discussion quickly moved to T-lang territory</p>",
        "id": 258841975,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1635022161
    }
]