[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> Moving to a separate thread to discuss <a href=\"https://github.com/rust-lang/rust/pull/94503\">https://github.com/rust-lang/rust/pull/94503</a> .</p>",
        "id": 273728350,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1646177577
    },
    {
        "content": "<p>Considering possible solutions to the <code>cfg_if</code> issue.</p>",
        "id": 273728839,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1646177853
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> Does it seem reasonable to you to just have a private <code>cfg_if</code> in <code>core</code>, for the moment? (We could, in the future, consider exporting that, but I'm trying to do only one thing here.)</p>",
        "id": 273728932,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1646177892
    },
    {
        "content": "<p>Yes, that sounds like a good idea.</p>",
        "id": 273728999,
        "sender_full_name": "Amanieu",
        "timestamp": 1646177923
    },
    {
        "content": "<p>Do you have any ideas for handling the docs? I have no <em>objections</em> to including the same docs in both places, but I really don't want to write an include for a path like <code>../../../../core/src/ffi/xyz.md</code>.</p>",
        "id": 273729425,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1646178145
    },
    {
        "content": "<p>A re-export would have the same docs, but then this would have to be insta-stable AFAICT.</p>",
        "id": 273729443,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1646178159
    },
    {
        "content": "<p>I think you can use <code>concat!</code> and <code>stringify!</code> in the macro so you only have to write the full path once.</p>",
        "id": 273730722,
        "sender_full_name": "Amanieu",
        "timestamp": 1646178896
    },
    {
        "content": "<p>That's once more than I'd like to write it. :)</p>",
        "id": 273730791,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1646178941
    },
    {
        "content": "<p>A long relative path like that that feels fragile.</p>",
        "id": 273730812,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1646178958
    },
    {
        "content": "<p>Not really? You'd just get a compile-time error if the path is no longer valid.</p>",
        "id": 273730938,
        "sender_full_name": "Amanieu",
        "timestamp": 1646179031
    },
    {
        "content": "<p>Relative paths are used all the time in the library docs to refer to things in std/core.</p>",
        "id": 273730964,
        "sender_full_name": "Amanieu",
        "timestamp": 1646179054
    },
    {
        "content": "<p>Yeah, I didn't realize how often they were used.</p>",
        "id": 273730985,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1646179081
    },
    {
        "content": "<p>In any case, I think making the user-visible docs clearer is worth a bit of ugliness on the code side.</p>",
        "id": 273731069,
        "sender_full_name": "Amanieu",
        "timestamp": 1646179123
    },
    {
        "content": "<p>I was kinda hoping that a link to the docs (which rustdoc can do automatically by writing <code>[`core::ffi::c_xyz`]</code> would suffice. But if you'd very much prefer the docs to be inlined rather than linked, I can do that...</p>",
        "id": 273731074,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1646179124
    },
    {
        "content": "<p>Done; let's see if this passes CI.</p>",
        "id": 273732288,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1646179773
    },
    {
        "content": "<p>(off topic, but oh this PR is great, thanks so much)</p>",
        "id": 273733360,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1646180519
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> I presume it's intentional that the unstable <code>size_t</code> and <code>NonZero</code> type aliases are no longer available in std::os::raw?</p>",
        "id": 273734350,
        "sender_full_name": "Amanieu",
        "timestamp": 1646181115
    },
    {
        "content": "<p>(Not that I object, just checking in case you missed them by accident)</p>",
        "id": 273734412,
        "sender_full_name": "Amanieu",
        "timestamp": 1646181140
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"143274\">Amanieu</span> <a href=\"#narrow/stream/219381-t-libs/topic/core.3A.3Affi/near/273734350\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> I presume it's intentional that the unstable <code>size_t</code> and <code>NonZero</code> type aliases are no longer available in std::os::raw?</p>\n</blockquote>\n<p>Quite intentional. They were unstable, so we don't need a compatibility alias.</p>",
        "id": 273734832,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1646181414
    },
    {
        "content": "<p>is the goal here to eventually do the same as was done for c_void and make libc re-export all of these?</p>",
        "id": 273741184,
        "sender_full_name": "bstrie",
        "timestamp": 1646185964
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256342\">@bstrie</span> I don't think that's at all urgent, since unlike <code>c_void</code>, these are type aliases and any user of one of them is compatible with any user of another of them.</p>",
        "id": 273741764,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1646186408
    },
    {
        "content": "<p>I think it'd be perfectly reasonable for libc to use these, in the future if libc moves to a newer MSRV.</p>",
        "id": 273741942,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1646186447
    },
    {
        "content": "<p>Ah, good point. And yes, I'm not saying that needs to be done any time soon, I'm just continuing to wonder whether or not we'll reach a state where a libc crate <em>without</em> platform-specific items even needs to exist</p>",
        "id": 273745627,
        "sender_full_name": "bstrie",
        "timestamp": 1646188815
    },
    {
        "content": "<p>IOW, if we could reach a state where users make use of core::ffi and a hypothetical libc-fooplatform crate, and the original libc crate itself can be deprecated</p>",
        "id": 273745771,
        "sender_full_name": "bstrie",
        "timestamp": 1646188934
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256342\">bstrie</span> <a href=\"#narrow/stream/219381-t-libs/topic/core.3A.3Affi/near/273745627\">said</a>:</p>\n<blockquote>\n<p>Ah, good point. And yes, I'm not saying that needs to be done any time soon, I'm just continuing to wonder whether or not we'll reach a state where a libc crate <em>without</em> platform-specific items even needs to exist</p>\n</blockquote>\n<p>I'd love to see this as well, if only to prevent the platforms supported by libc from being hardcoded.</p>",
        "id": 273746132,
        "sender_full_name": "Connor Horman",
        "timestamp": 1646189310
    },
    {
        "content": "<p>There should at least be a crate with all common functions on unix. Otherwise all users of libc would have to hard code every unix system instead of using cfg(unix).</p>",
        "id": 273767091,
        "sender_full_name": "bjorn3",
        "timestamp": 1646207022
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> was it deliberate that you didn't re-export these from std::ffi? I can whip up a quick patch to fix that if you like</p>",
        "id": 273856189,
        "sender_full_name": "bstrie",
        "timestamp": 1646246410
    },
    {
        "content": "<p>I hadn't thought about re-exporting, since I was assuming people would just use them via <code>core::ffi</code>, but I suppose in practice we re-export everything in core from std...</p>",
        "id": 273856676,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1646246612
    },
    {
        "content": "<p>right, it just seems asymmetric :P</p>",
        "id": 273856774,
        "sender_full_name": "bstrie",
        "timestamp": 1646246645
    },
    {
        "content": "<p>So I guess we should re-export these. Feel free to add a patch re-exporting them; it can just do the obvious trivial re-export (<code>pub use</code>) since they should be unstable.</p>",
        "id": 273856792,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1646246653
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/94534\">https://github.com/rust-lang/rust/pull/94534</a></p>",
        "id": 273870254,
        "sender_full_name": "bstrie",
        "timestamp": 1646252224
    }
]