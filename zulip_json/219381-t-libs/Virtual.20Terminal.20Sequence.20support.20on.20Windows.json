[
    {
        "content": "<p>On Windows, starting in Windows 10 as of like 2016 or so, the console <em>can</em> support virtual terminal sequences. However, for backwards compatibility this is off by default, and virtual terminal sequences are not processed by the console. This can be enabled using SetConsoleMode, but the programmer has to have the windows specific knowledge of how to do this.</p>\n<p>It would be extremely nice if such a simple thing were available within <code>std::os::windows::io</code> rather than needing to pull in a crate of any kind.</p>",
        "id": 243982853,
        "sender_full_name": "Lokathor",
        "timestamp": 1624665212
    },
    {
        "content": "<p>Other than the overhead of one system call, what's the <em>downside</em> to enabling this? Is it just that terminal sequences are interpreted rather than spewed to the console verbatim as control characters? Or is there something more?</p>",
        "id": 243984319,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1624667273
    },
    {
        "content": "<p>No downside other than potential backward compatibility concern (if the program expected to be able to spit out escape sequences and have them displayed raw).</p>",
        "id": 243984510,
        "sender_full_name": "Lokathor",
        "timestamp": 1624667462
    },
    {
        "content": "<p>Hard to imagine a case where you'd expect to show a raw ESC and you'd break something if you didn't.</p>",
        "id": 243985969,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1624668925
    },
    {
        "content": "<p>I don't think the standard library could call it automatically, but I think it makes sense for any terminal library to do so.</p>",
        "id": 243986031,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1624668966
    },
    {
        "content": "<p>Meanwhile, yeah, we ought to provide the function. Want to submit a PR?</p>",
        "id": 243986041,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1624668981
    },
    {
        "content": "<p><code>std::os::windows::io::enable_terminal_escapes()</code>, or something roughly along those lines?</p>",
        "id": 243986078,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1624669023
    },
    {
        "content": "<p><code>fn enable_terminal_escapes() -&gt; std::io::Result&lt;()&gt;</code></p>",
        "id": 243986087,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1624669038
    },
    {
        "content": "<p>oof, well i did ask for it so i guess it is on me to do the PR</p>",
        "id": 243986949,
        "sender_full_name": "Lokathor",
        "timestamp": 1624670149
    },
    {
        "content": "<p>it's probably worth noting in the docs that the error should be ignored â€” it would be expected to fail on stuff like mintty (and probably old versions of windows too)</p>",
        "id": 243993563,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1624680695
    },
    {
        "content": "<p>Well, if you get an error that means you (probably) can't emit virtual terminal sequences that will be picked up properly. If you were to emit virtual terminal sequences without the terminal interpreting them then it would look like garbled nonsense.</p>",
        "id": 243993690,
        "sender_full_name": "Lokathor",
        "timestamp": 1624680934
    },
    {
        "content": "<p>actually, that's not true</p>",
        "id": 243993735,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1624680974
    },
    {
        "content": "<p>on mintty, vscode, etc. that operation will error, but terminal sequences will still work (since they would work without you doing that)</p>",
        "id": 243993744,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1624681017
    },
    {
        "content": "<p>Well in the case of vscode, it depends on what shell vscode is running I suppose.</p>",
        "id": 243993755,
        "sender_full_name": "Lokathor",
        "timestamp": 1624681062
    },
    {
        "content": "<p>no, it uses xterm.js regardless</p>",
        "id": 243993758,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1624681076
    },
    {
        "content": "<p>which interprets the sequence</p>",
        "id": 243993763,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1624681082
    },
    {
        "content": "<p>the shell is unrelated</p>",
        "id": 243993795,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1624681084
    },
    {
        "content": "<p>oh wild</p>",
        "id": 243993940,
        "sender_full_name": "Lokathor",
        "timestamp": 1624681436
    },
    {
        "content": "<p>Can mintty be detected and a success be reported?</p>",
        "id": 243996742,
        "sender_full_name": "bjorn3",
        "timestamp": 1624686487
    },
    {
        "content": "<p>I believe is_atty already checks for a cygwin/mingw terminal.</p>",
        "id": 243996745,
        "sender_full_name": "bjorn3",
        "timestamp": 1624686517
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/219381-t-libs/topic/Virtual.20Terminal.20Sequence.20support.20on.20Windows/near/243996742\">said</a>:</p>\n<blockquote>\n<p>Can mintty be detected and a success be reported?</p>\n</blockquote>\n<p>not 100% reliably, but you can heuristically detect those two. that said, there could be other terminals using the new win10 pty mechanism</p>",
        "id": 243996936,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1624686881
    },
    {
        "content": "<p>there's no way to detect them really</p>",
        "id": 243996937,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1624686885
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"209168\">@Thom Chiovoloni</span> There's no way to detect that your output is a pty?</p>",
        "id": 243997345,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1624687637
    },
    {
        "content": "<p>not reliably</p>",
        "id": 243997351,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1624687646
    },
    {
        "content": "<p>How about unreliably?</p>",
        "id": 243997356,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1624687651
    },
    {
        "content": "<p>you check the file associated with the handle, and make a guess if it refers to a PTY</p>",
        "id": 243997358,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1624687662
    },
    {
        "content": "<p>Ah. :(</p>",
        "id": 243997360,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1624687669
    },
    {
        "content": "<p>So it's not a unique type of handle that you can identify? Is it just a named pipe or similar?</p>",
        "id": 243997401,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1624687685
    },
    {
        "content": "<p>yes, more or less</p>",
        "id": 243997407,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1624687695
    },
    {
        "content": "<p>Sigh.</p>",
        "id": 243997409,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1624687699
    },
    {
        "content": "<p>How about this: is there a way to detect that your output almost certainly <em>isn't</em> a pty?</p>",
        "id": 243997415,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1624687719
    },
    {
        "content": "<p><a href=\"https://github.com/softprops/atty/blob/master/src/lib.rs#L147-L152\">https://github.com/softprops/atty/blob/master/src/lib.rs#L147-L152</a> is the logic, which  is pretty reliable in practice... as long as you're looking for mintty and cytwin</p>",
        "id": 243997430,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1624687755
    },
    {
        "content": "<p>That's really unfortunate. :(</p>",
        "id": 243997438,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1624687785
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/219381-t-libs/topic/Virtual.20Terminal.20Sequence.20support.20on.20Windows/near/243997415\">said</a>:</p>\n<blockquote>\n<p>How about this: is there a way to detect that your output almost certainly <em>isn't</em> a pty?</p>\n</blockquote>\n<p>hm, i dont know off the top, and am not in a position to do experimenting at the moment.</p>",
        "id": 243997443,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1624687797
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/219381-t-libs/topic/Virtual.20Terminal.20Sequence.20support.20on.20Windows/near/243997438\">said</a>:</p>\n<blockquote>\n<p>That's really unfortunate. :(</p>\n</blockquote>\n<p>yes, i 100% agree</p>",
        "id": 243997484,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1624687807
    },
    {
        "content": "<p>I'm not really bothered by the idea of emitting terminal escapes to a terminal that doesn't support them, but I <em>am</em> bothered by the idea of emitting terminal escapes to what turns out to be a redirect to a file, or a simple <code>| less</code> or <code>| more</code> or <code>| grep</code>.</p>",
        "id": 243997495,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1624687843
    },
    {
        "content": "<p>It'd be nice to be able to detect, at a minimum, \"is this a regular file\" or \"is this a regular non-named pipe\", and know that that at least is <em>not</em> likely to be a terminal.</p>",
        "id": 243997504,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1624687886
    },
    {
        "content": "<p>in some cases the right call then is to separately open \"CONOUT$\", and write to it. you also could check if the file exists, which i <em>think</em> it won't for a pty? but I'd have to try. Or at least, I suspect theres some way to get the file name, and then use some windows api to determine that it's at least not a normal file...</p>",
        "id": 243997587,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1624688036
    },
    {
        "content": "<p>but yeah, in general it's pretty tricky, and annoying that behaving well and avoiding worst-case bad behavior are often contradictory on terminal apis on all platforms :(</p>",
        "id": 243997625,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1624688049
    },
    {
        "content": "<p>Is it reasonable to assume that a pty is always a certain <em>type</em> of handle, like a named pipe?</p>",
        "id": 243998322,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1624689229
    },
    {
        "content": "<p>For instance, would it help to call <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/namedpipeapi/nf-namedpipeapi-getnamedpipeinfo\">https://docs.microsoft.com/en-us/windows/win32/api/namedpipeapi/nf-namedpipeapi-getnamedpipeinfo</a> and see if it returns useful data?</p>",
        "id": 243998449,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1624689402
    },
    {
        "content": "<p>so, i dont know if it's a certain type of handle, but i believe it's not a named pipe, since you're supposed to use <code>GetFileInformationByHandleEx</code> to find the \"name\" of the pty, and that function is supposed to error on any named pipe (according to <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-getfileinformationbyhandleex\">https://docs.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-getfileinformationbyhandleex</a> )</p>",
        "id": 244004614,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1624698835
    },
    {
        "content": "<p>that said, i'd assume that if you look thoroughly there's <em>some</em> distinguishing feature of a pty â€” i don't <em>think</em> there's a documented one, but it's hard to say, and certainly i never considered looking for cases where that information is more-or-less \"leaked\".</p>",
        "id": 244004857,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1624699189
    },
    {
        "content": "<p>Windows has no equivalent for <code>statx(..., STATX_TYPE)</code> for its handles?</p>",
        "id": 244005375,
        "sender_full_name": "The 8472",
        "timestamp": 1624699923
    },
    {
        "content": "<p>Regardless of what the docs say, you can use <code>GetFileInformationByHandleEx</code> to get the <code>FileNameInfo</code> of a named pipe (though admittedly I don't know how stable this is). Btw, if you just want to check if it's a pipe or not then <code>GetFileType</code>should return <code>FILE_TYPE_PIPE</code>.</p>",
        "id": 244008052,
        "sender_full_name": "Chris Denton",
        "timestamp": 1624703685
    },
    {
        "content": "<blockquote>\n<p>I don't know how stable this is</p>\n</blockquote>\n<p>Seems like it's been known to work since at least 2014 which means it's almost certainly de facto stable given Windows stability guarantees.  <a href=\"https://stackoverflow.com/a/27386874\">https://stackoverflow.com/a/27386874</a></p>",
        "id": 244008574,
        "sender_full_name": "Chris Denton",
        "timestamp": 1624704136
    },
    {
        "content": "<p>Upon further investigation, it seems that MSDN is wrong and the most up to date windows terminal will interpret virtual terminal sequences <em>no matter what</em>. It's not just an \"the initial stat is unknown at startup\" thing. Even if you directly <em>turn off</em> the bit for virtual terminal sequences they will still be processed in the output sequence.</p>\n<p>Because it's not documented as working this way it may change in the future, but at least for now we don't need to actually add anything to the standard library.</p>\n<p>Test program for reference: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=156e622eabcd7dfe379cccff1e4cb20e\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=156e622eabcd7dfe379cccff1e4cb20e</a></p>",
        "id": 244106341,
        "sender_full_name": "Lokathor",
        "timestamp": 1624862110
    }
]