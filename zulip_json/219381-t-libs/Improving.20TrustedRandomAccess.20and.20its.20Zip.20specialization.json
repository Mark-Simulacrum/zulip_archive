[
    {
        "content": "<p>TrustedRandomAccess (TRA) has proven itself useful in several places for specialization but the <code>iter::Zip</code> specialization has been repeat source of unsoundness</p>\n<ul>\n<li><a href=\"https://github.com/rust-lang/rust/issues/81740\">https://github.com/rust-lang/rust/issues/81740</a></li>\n<li><a href=\"https://github.com/rust-lang/rust/issues/82291\">https://github.com/rust-lang/rust/issues/82291</a></li>\n<li><a href=\"https://github.com/rust-lang/rust/issues/82282\">https://github.com/rust-lang/rust/issues/82282</a></li>\n<li><a href=\"https://github.com/rust-lang/rust/pull/80670\">https://github.com/rust-lang/rust/pull/80670</a></li>\n<li>more?</li>\n</ul>\n<p>I think this is because TRA is quite non-local. It doesn't update the state of the iterator source or adapters which means use-sites of TRA must manage the state correctly. But iterator adapters can be composed, which means there are potentially several nested use-sites which <em>together</em> need to keep the state correctly. And there can be several different methods that need to work together, e.g. <code>next()</code>, <code>next_back()</code>, a wrapper implementation of <code>__iterator_get_unchecked</code>, the internal iteration methods, <code>Drop</code> implementations and potentially others.</p>\n<p>Additionally the lack of state update means that TRA can't be implemented on owning iterators for <code>T: Drop</code> types, which leaves some optimization potential on the table.</p>\n<p><code>ZipImpl</code> is the worst offender here since it implements everything and tries to coordinate multiple iterators on top of that. <a href=\"https://github.com/rust-lang/rust/blob/5c9c5bd5807bef81f9989728d00a6985f4375e55/library/alloc/src/vec/source_iter_marker.rs#L131-L142\">Other uses of TRA</a> can be fairly benign in comparison.</p>\n<p>So what can be done?</p>\n<ul>\n<li>Keep fixing bugs. Add more tests. Add comments why it's a minefield and what needs to be considered. Are there some invariants we could check with debug asserts?</li>\n<li>Revisit motivating benchmarks and see if removing TRA would be tolerable. The optimizer might be better than it was in the past.</li>\n<li>Optimize iterator sources (<span class=\"user-mention\" data-user-id=\"301846\">@Sebastian Dröge</span>  suggests in <a href=\"https://github.com/rust-lang/rust/issues/75935#issuecomment-680789942\">this comment</a> that current implementations are not very llvm-friendly) and adapters so we don't need TRA anymore to get fast <code>zip()</code>. Together with collecting optimizer shortfalls that need to be fixed. This seems to be hard since various adapters can introduce multiple loop exits which afaik hinder a lot of optimizations, especially on Zip where multiple iterator pipelines have to work in lockstep.</li>\n<li>Replace TRA with a more limited trait that is less non-local. What I had in mind is adding a cleanup method that informs the pipeline at the end of iteration how many front and back elements have been consumed so that the pipeline can bring itself back into a consistent state. It would be the responsibility of the <code>__iterator_get_unchecked</code> caller to invoke it after it's done iterating or on panic. This would be mostly useful for <code>fold</code> and other internal iteration methods. But that would mean we would lose optimizations on <code>for</code> loops, on the other hand it would simplify things a great deal because fewer methods have to work correctly together and state management would immediately return to the right place after iteration, so the iterator would only temporarily be inconsistent at a single callsite. And it would also enable TRA implementations for iterators implementing <code>Drop</code>.</li>\n<li>... ideas?</li>\n</ul>\n<p>CC <span class=\"user-mention\" data-user-id=\"338379\">@Giacomo Stevanato</span></p>",
        "id": 227088066,
        "sender_full_name": "The 8472",
        "timestamp": 1613823503
    },
    {
        "content": "<blockquote>\n<p>I think this is because TRA is quite non-local. It doesn't update the state of the iterator source or adapters which means use-sites of TRA must manage the state correctly.</p>\n</blockquote>\n<p>I think this is a prerequisite of these optimizations because they're enabled by the fact that the source iterator doesn't check its state. </p>\n<p>In the github issue I was thinking we could make it so that the source iterator can update its state (if this is cheap enough) without checking if it is valid (which is what mostly hinders LLVM optimizations). This will allow to implement TRA for <code>vec::IntoIter</code> and stuff like that, it won't solve the underlying safety hazards.</p>\n<blockquote>\n<p>But iterator adapters can be composed, which means there are potentially several nested use-sites which together need to keep the state correctly.</p>\n</blockquote>\n<p>I don't quite agree with this. Each iterator adapter should be sound by itself, provided the caller respect the TRA contract, but that's a common contract any adapter should respect. If an adapter breaks that contract (like <code>Zip</code> did) then it's a problem in that adapter, not in the composing them.</p>\n<blockquote>\n<p>and there can be several different methods that need to work together, e.g. <code>next()</code>, <code>next_back()</code>, a wrapper implementation of <code>__iterator_get_unchecked</code>, the internal iteration methods, <code>Drop</code> implementations and potentially others.</p>\n</blockquote>\n<p>On top of this we're also trying to keep side effects in order to not expose implementation details. This was the cause of <a href=\"https://github.com/rust-lang/rust/issues/81740\">#81740</a>, <a href=\"https://github.com/rust-lang/rust/issues/82291\">#82291</a> and <a href=\"https://github.com/rust-lang/rust/issues/82282\">#82282</a>.  And we're failing to keep them (see <a href=\"https://github.com/rust-lang/rust/issues/82303\">#82303</a> for example). </p>\n<p>IMO without preserving side-effects TRA would become much simplier,  but this would come at the cost of exposing implementation details that some code could rely upon. However from my experience the side effects are the unexpected and confusing thing, and any codebase should avoid to rely on them.</p>\n<blockquote>\n<p>Keep fixing bugs. Add more tests. Add comments why it's a minefield and what needs to be considered. Are there some invariants we could check with debug asserts?</p>\n</blockquote>\n<p>As I already said <a href=\"https://github.com/rust-lang/rust/pull/82289#discussion_r579141033\">here</a> I was planning to document the safety of the specialized <code>ZipImpl</code>. This might work out well, or just expose even more unfixable bugs, who knows.</p>\n<blockquote>\n<p>Revisit motivating benchmarks and see if removing TRA would be tolerable. The optimizer might be better than it was in the past.</p>\n</blockquote>\n<p>Might as well give it a try, but I wouldn't expect much from it.</p>\n<blockquote>\n<p>Optimize iterator sources (@Sebastian Dröge suggests in this comment that current implementations are not very llvm-friendly) and adapters so we don't need TRA anymore to get fast zip(). Together with collecting optimizer shortfalls that need to be fixed. This seems to be hard since various adapters can introduce multiple loop exits which afaik hinder a lot of optimizations, especially on Zip where multiple iterator pipelines have to work in lockstep.</p>\n</blockquote>\n<p>I don't think this will solve the problem. <a href=\"https://godbolt.org/z/x4bEbq\">Here</a>'s a microbenchmark that uses the alternative proposed <a href=\"https://github.com/rust-lang/rust/issues/75935#issuecomment-680807329\">here</a>, unfortunately it doesn't even vectorize. I think it would be better to wait for the LLVM \"bug\" to be fixed, hoping it will translate well when we add adapters.</p>\n<blockquote>\n<p>Replace TRA with a more limited trait that is less non-local. What I had in mind is adding a cleanup method that informs the pipeline at the end of iteration how many front and back elements have been consumed so that the pipeline can bring itself back into a consistent state. It would be the responsibility of the __iterator_get_unchecked caller to invoke it after it's done iterating or on panic. This would be mostly useful for fold and other internal iteration methods. But that would mean we would lose optimizations on for loops, on the other hand it would simplify things a great deal because fewer methods have to work correctly together and state management would immediately return to the right place after iteration, so the iterator would only temporarily be inconsistent at a single callsite. And it would also enable TRA implementations for iterators implementing Drop.</p>\n</blockquote>\n<p>This is an interesting idea we could explore. It should reduce the complexity deriving from modifying the same state from different methods, however I'm worried it will have the same problems the current implementation has when we will try to preserv side-effects</p>",
        "id": 227096202,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1613833064
    },
    {
        "content": "<blockquote>\n<p>In the github issue I was thinking we could make it so that the source iterator can update its state (if this is cheap enough) without checking if it is valid (which is what mostly hinders LLVM optimizations). This will allow to implement TRA for vec::IntoIter and stuff like that,</p>\n</blockquote>\n<p>Don't think that'll work since to allow indexed access the base from which we index can't change.</p>\n<blockquote>\n<p>I think this is a prerequisite of these optimizations because they're enabled by the fact that the source iterator doesn't check its state. </p>\n</blockquote>\n<p>More or less, yeah, during iteration. That's why I proposed the more restricted version that does a fixup after iteration.</p>\n<blockquote>\n<p>I don't quite agree with this. Each iterator adapter should be sound by itself, provided the caller respect the TRA contract, but that's a common contract any adapter should respect. </p>\n</blockquote>\n<p>Well yeah, of course each has to uphold the contract. But Zip is stateful, so you can first manipulate the inner Zip's state and then wrap it into another adapter which uses TRA too. That increases the number of possible cases to consider. I.e. <code>Zip:: __iterator_get_unchecked</code> doesn't just have to work on its own but also in conjunction with all the other methods.</p>\n<blockquote>\n<p>On top of this we're also trying to keep side effects in order to not expose implementation details. This was the cause of <a href=\"https://github.com/rust-lang/rust/issues/81740\">#81740</a>, <a href=\"https://github.com/rust-lang/rust/issues/82291\">#82291</a> and <a href=\"https://github.com/rust-lang/rust/issues/82282\">#82282</a>. And we're failing to keep them (see <a href=\"https://github.com/rust-lang/rust/issues/82303\">#82303</a> for example). </p>\n</blockquote>\n<p>Hrm yeah, good point. That causes a lot of complexity. It would be great if we could just get rid of that and just say it's not part of the API contract.</p>\n<blockquote>\n<p>however I'm worried it will have the same problems the current implementation has when we will try to preserv side-effects</p>\n</blockquote>\n<p>It would only have to implement internal iteration methods and <code>__iterator_get_unchecked</code>. Which means <code>next()</code> and <code>next_back()</code> could use the default implementations, greatly reducing the complexity.</p>",
        "id": 227110813,
        "sender_full_name": "The 8472",
        "timestamp": 1613847821
    },
    {
        "content": "<blockquote>\n<p>It would be great if we could just get rid of that and just say it's not part of the API contract.</p>\n</blockquote>\n<p>Unfortunately <code>Iterator::zip</code>'s  docs guarantee the short circuit behaviour :(</p>\n<blockquote>\n<p>It would only have to implement internal iteration methods and __iterator_get_unchecked. Which means next() and next_back() could use the default implementations, greatly reducing the complexity.</p>\n</blockquote>\n<p>Yeah, that part of the complexity would be gone, but you still need the logic to \"fix\" the source iterator and to preserve side-effects</p>",
        "id": 227113623,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1613850745
    },
    {
        "content": "<blockquote>\n<p>Unfortunately Iterator::zip's docs guarantee the short circuit behaviour :(</p>\n</blockquote>\n<p>Short circuiting means that it terminates early, not that the remainder gets consumed.</p>",
        "id": 227113721,
        "sender_full_name": "The 8472",
        "timestamp": 1613850845
    },
    {
        "content": "<blockquote>\n<p>but you still need the logic to \"fix\" the source iterator and to preserve side-effects</p>\n</blockquote>\n<p>Yeah, the fixing could indeed take some effort. But the side-effect preserving could possibly piggy-back on default implementations by calling them after the fold is done and the fixup has happened.</p>",
        "id": 227113810,
        "sender_full_name": "The 8472",
        "timestamp": 1613850958
    },
    {
        "content": "<blockquote>\n<p>Short circuiting means that it terminates early, not that the remainder gets consumed.</p>\n</blockquote>\n<p>But from how it's phrased it's kind of implied that <code>next</code> will be called on the first source iterator</p>",
        "id": 227114271,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1613851383
    },
    {
        "content": "<blockquote>\n<p>Yeah, the fixing could indeed take some effort. But the side-effect preserving could possibly piggy-back on default implementations by calling them after the fold is done and the fixup has happened.</p>\n</blockquote>\n<p>Right, that would probably make it easier to implement</p>",
        "id": 227114323,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1613851408
    },
    {
        "content": "<p>Well, all implementations of TRA are also ExactSizeIterator, so arguably it would be ok for zip to first inspect the length and bail out early if it's 0.</p>",
        "id": 227114738,
        "sender_full_name": "The 8472",
        "timestamp": 1613851791
    },
    {
        "content": "<blockquote>\n<p>... ideas?</p>\n</blockquote>\n<p>Another ingredient here could be to more systematically test iterators in Miri. Testing iterators properly is hard, so it would be really valuable to have a function like <code>fn test_iterator&lt;T: Iterator&gt;(t: T)</code> (or so) that collects all the best practices of what it takes to test an iterator. When running this in Miri it would detect if any kind of UB arises in that test. When I did that with <a href=\"https://github.com/rust-lang/miri/blob/74b771423a7d78e3ca000c14c1e153fbcea488e1/tests/run-pass/vec.rs#L4\">this simple function</a>, I already found illegal aliasing in several stdlib iterators.</p>\n<p>Testing can certainly not replace refactorings that make bugs less likely, but I feel like there's still a lot of room for improvement in properly testing iterators.</p>",
        "id": 228057826,
        "sender_full_name": "RalfJ",
        "timestamp": 1614431730
    },
    {
        "content": "<p>Even outside of soundness issues a standard test harness function like that would be great to verify other requirements like preservation of side effects</p>",
        "id": 228058087,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1614432036
    },
    {
        "content": "<p>It would also be really useful for non-stdlib iterators I imagine</p>",
        "id": 228058257,
        "sender_full_name": "RalfJ",
        "timestamp": 1614432247
    },
    {
        "content": "<p>That's probably not a bad idea in general but wouldn't have helped with some of the Zip issues which rely on first partially consuming an iterator and then wrapping it in an adapter and doing something with that. Zip + TRA is special in several ways. I mean TRA was originally written for just that, although we're finding uses for it in other places.</p>\n<blockquote>\n<p>that would be great to verify other requirements like preservation of side effects</p>\n</blockquote>\n<p>I'm not even sold on the whole preserving side-effects thing. Java iterators don't promise that for one and there are entirely safe ways one can implement adapters that will skip side-effects while upholding the rest of the API.</p>",
        "id": 228079339,
        "sender_full_name": "The 8472",
        "timestamp": 1614455948
    },
    {
        "content": "<p>But yeah, writing tests that specifically target specializations instead of the general case and then running them under miri would be good.</p>",
        "id": 228081307,
        "sender_full_name": "The 8472",
        "timestamp": 1614457967
    },
    {
        "content": "<p>Have there ever been any discussions about changing the for loop desugaring to use try_fold?</p>",
        "id": 228081572,
        "sender_full_name": "The 8472",
        "timestamp": 1614458200
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330154\">The 8472</span> <a href=\"#narrow/stream/219381-t-libs/topic/Improving.20TrustedRandomAccess.20and.20its.20Zip.20specialization/near/228081572\">said</a>:</p>\n<blockquote>\n<p>Have there ever been any discussions about changing the for loop desugaring to use try_fold?</p>\n</blockquote>\n<p>wouldn't that make it tricky at best to translate <code>?</code> or <code>return</code> inside the loop?</p>",
        "id": 228083877,
        "sender_full_name": "RalfJ",
        "timestamp": 1614460847
    },
    {
        "content": "<p>Ah, yeah. I only considered break and continue which could be mapped to <code>ControlFlow</code>. Maybe one could conditionally desugar based on their presence but that seems too hacky. Too bad. try_fold &amp; co make some optimizations a lot easier.</p>",
        "id": 228084158,
        "sender_full_name": "The 8472",
        "timestamp": 1614461205
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330154\">The 8472</span> <a href=\"#narrow/stream/219381-t-libs/topic/Improving.20TrustedRandomAccess.20and.20its.20Zip.20specialization/near/228081572\">said</a>:</p>\n<blockquote>\n<p>Have there ever been any discussions about changing the for loop desugaring to use try_fold?</p>\n</blockquote>\n<p>Niko brought that up in <a href=\"https://github.com/rust-lang/rfcs/pull/3058???#pullrequestreview-592106494\">https://github.com/rust-lang/rfcs/pull/3058???#pullrequestreview-592106494</a>, but in general not having TCP closures makes that challenging.</p>",
        "id": 228084171,
        "sender_full_name": "scottmcm",
        "timestamp": 1614461227
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/219381-t-libs/topic/Improving.20TrustedRandomAccess.20and.20its.20Zip.20specialization/near/228083877\">said</a>:</p>\n<blockquote>\n<p>wouldn't that make it tricky at best to translate <code>?</code> or <code>return</code> inside the loop?</p>\n</blockquote>\n<p>Since <code>?</code> desugars to a <code>return</code> you could express both of them with an additional variant in the \"err\" path.  It makes the desugar a bit trickier, but it isn't out of question. <code>break</code>/<code>continue</code> from outer scopes however are much more problematic because they would require a custom enum for each <code>for</code> loop</p>",
        "id": 228086514,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1614464125
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"2645\">@T-libs</span> what would it take to get rid of the <em>zip specialization preserves side-effects of iterator A even if B is exhausted</em> guarantee?</p>\n<p>Specifically the second sentence <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.zip\">in the documentation</a> (emphasis mine):</p>\n<blockquote>\n<p>If either iterator returns None, next from the zipped iterator will return None. <em>If the first iterator returns None, zip will short-circuit and next will not be called on the second iterator.</em></p>\n</blockquote>\n<p>It would be a breaking change. Would a PR + FCP be sufficient? Crater run?</p>\n<p>Some arguments in favor of removing it:</p>\n<ul>\n<li>the guarantee already isn't upheld in some cases and it doesn't appear to have broken anyone (<a href=\"https://github.com/rust-lang/rust/issues/82303\">#82303</a>)</li>\n<li>on top of that additional specializations have been introduced that break it further (my fault, I just realized!)</li>\n<li>quite some fragile code exists only to uphold it and serves no other purpose</li>\n<li>the current language mostly describes an implementation detail that could have been done differently when it was first implemented and focuses on <code>next()</code> which doesn't account for all the shiny new internal iteration methods that have been added over time.</li>\n<li>it makes TrustedRandomAccess easier to use for things unrelated to Zip</li>\n</ul>",
        "id": 232862478,
        "sender_full_name": "The 8472",
        "timestamp": 1617341441
    },
    {
        "content": "<p>CC <span class=\"user-mention\" data-user-id=\"139363\">@bluss</span> who originally implemented the explicit side-effect preservation.</p>",
        "id": 232867574,
        "sender_full_name": "The 8472",
        "timestamp": 1617346546
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"330154\">@The 8472</span> i think that's fine. the code there to keep that guarantee is extremely fragile and hard to maintain. reviewing pull requests there is always a challenge, so i'm all for simplifying things. i suppose we could do a crater run, but i think just a quick FCP would be enough.</p>",
        "id": 232878636,
        "sender_full_name": "Mara",
        "timestamp": 1617355304
    },
    {
        "content": "<p>Ugh, removing the side-effects handling on <code>next()</code>impacts <code>next_back()</code> behavior too. I could remove the side-effects <em>there</em>,  but that would be more radical since it could skip into the middle of an iterator rather than just omitting things around the edges. And I don't think we have a precedent for that kind of iterator behavior. I think removing the guarantee in the documentation still makes sense since we're not always delivering it anyway but removing the logic will be trickier.</p>\n<p>The java Stream API handled this kind of specification work way better. They explicitly note that many of the methods must be stateless and any side-effects in them will not be preserved by optimizations.</p>",
        "id": 232921568,
        "sender_full_name": "The 8472",
        "timestamp": 1617381933
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/83791\">#83791</a> PR for the documentation change.</p>",
        "id": 232935679,
        "sender_full_name": "The 8472",
        "timestamp": 1617388509
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/83796\">#83796</a> PR could be used for a crater run. It's not necessarily what I want to get merged, it's does more than necessary to have a better chance at finding breakage.</p>",
        "id": 232963362,
        "sender_full_name": "The 8472",
        "timestamp": 1617405683
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/85342\">#85342</a> proposes <code>zip_exact</code> which would require/check that iterators are of the same length. Perhaps it would be less dicy to just remove all the specializations from <code>zip</code>, implement <code>zip_exact</code> and add simpler specializations on that which could bail out early if lengths don't match. That would simplify things without risking backwards compatibility or surprising behavior.</p>",
        "id": 238963469,
        "sender_full_name": "The 8472",
        "timestamp": 1621157432
    },
    {
        "content": "<p>I think having a separate adapter might be a good idea, however that proposal doesn't cover cases where you don't have an ExactSizeIterator but also don't care about side effects</p>",
        "id": 238965826,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1621159827
    },
    {
        "content": "<p>Think for example of zipping with an infinite iterator</p>",
        "id": 238965863,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1621159889
    },
    {
        "content": "<p>I mentioned that :D that can be solved with a <code>take(other.len())</code></p>",
        "id": 238966040,
        "sender_full_name": "The 8472",
        "timestamp": 1621160069
    },
    {
        "content": "<p><code>impl DoubleEndedIterator for Zip</code>  requires ExactSizeIterator anyway. And specializations require <code>TrustedRandomAccess</code> which implies known length.</p>",
        "id": 238966103,
        "sender_full_name": "The 8472",
        "timestamp": 1621160148
    },
    {
        "content": "<p>There are other hypothetical optimizations in iterator chains where one could want to skip side-effects without knowing lengths, but they're on other adapters, not zip.</p>",
        "id": 238966230,
        "sender_full_name": "The 8472",
        "timestamp": 1621160213
    },
    {
        "content": "<p>The default implementation could panic lazily when it encounters a size mismatch, so it can support !ExactSizeIterator. The double-ended or specialized ones could panic early.</p>",
        "id": 238966871,
        "sender_full_name": "The 8472",
        "timestamp": 1621160904
    },
    {
        "content": "<p><code>Take</code> implements <code>ExactSizeIterator</code> only if the inner iterator does, but <code>Repeat</code> don't implement it (it implements <code>TrustedLen</code> though</p>",
        "id": 238966960,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1621161019
    },
    {
        "content": "<p>It would still ensure that the sizes match.</p>",
        "id": 238967011,
        "sender_full_name": "The 8472",
        "timestamp": 1621161098
    },
    {
        "content": "<p>I <em>think</em> this thread is most relevant to issues <a href=\"https://github.com/rust-lang/rust/issues/85863\">#85863</a> <a href=\"https://github.com/rust-lang/rust/issues/85873\">#85873</a> <a href=\"https://github.com/rust-lang/rust/issues/82303\">#82303</a> <a href=\"https://github.com/rust-lang/rust/issues/85969\">#85969</a></p>",
        "id": 242301533,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623387728
    },
    {
        "content": "<p>I’m trying to get my head around the scope of the potential unsoundness here</p>",
        "id": 242301538,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623387758
    },
    {
        "content": "<p>because  the T-compiler team is talking about doing an emergency backport, in time for the 1.53 release, of the parts of PRs <a href=\"https://github.com/rust-lang/rust/issues/85874\">#85874</a> and <a href=\"https://github.com/rust-lang/rust/issues/85975\">#85975</a> that are “just” removing optimizations that we fear may be unsound</p>",
        "id": 242301574,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623387840
    },
    {
        "content": "<p>(if there’s a better thread, please do point me to it…)</p>",
        "id": 242301631,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623387878
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"330154\">@The 8472</span> ^ ?</p>",
        "id": 242301770,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623388027
    },
    {
        "content": "<p>actually <span class=\"user-mention\" data-user-id=\"280891\">@Frank Steffahn</span> added a <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202021-06-10.20.2354818/near/242225674\">good summary</a> after the meeting was over yesterday.</p>",
        "id": 242304572,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623391561
    },
    {
        "content": "<p>in any case, T-compiler will be meeting on Friday at <time datetime=\"2021-06-11T14:00:00Z\">2021-06-11T10:00:00-04:00</time>  to discuss</p>",
        "id": 242304631,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623391597
    },
    {
        "content": "<p>in <a class=\"stream-topic\" data-stream-id=\"238009\" href=\"/#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Badhoc.5D.202021-06-11.20unsound.20stdlib.20specialization.20and.201.2E53\">#t-compiler/meetings &gt; [adhoc] 2021-06-11 unsound stdlib specialization and 1.53</a></p>",
        "id": 242304637,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623391606
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span>  <a href=\"https://github.com/rust-lang/rust/issues/85975\">#85975</a> isn't about unsoundness, \"only\" a regression in observable behavior stemming from the interaction of zip, trusted random access and backwards iteration. <a href=\"https://github.com/rust-lang/rust/issues/82303\">#82303</a> is also about observable behavior. The cases could be mooted by declaring that iterators may elide some side-effects of some adapters, but the libs team doesn't seem in favor of that, at least in the general case. The latter could also be solved by introducing a new Zip implementation (ZipExact) that has some tighter requirements which can't encounter that case.</p>\n<p><a href=\"https://github.com/rust-lang/rust/issues/85874\">#85874</a> and <a href=\"https://github.com/rust-lang/rust/issues/85863\">#85863</a> indeed are about unsoundness, albeit in fairly rare cases where someone first advances an iterator involving zip and then coerces it to a type with a different lifetime, basically the very thing that min_specialization should have avoided but still left a hole via <code>rustc_unsafe_specialization_marker</code>.</p>",
        "id": 242310436,
        "sender_full_name": "The 8472",
        "timestamp": 1623397125
    },
    {
        "content": "<p>One difference between <a href=\"https://github.com/rust-lang/rust/issues/82303\">#82303</a> and <a href=\"https://github.com/rust-lang/rust/issues/85969\">#85969</a> is that <a href=\"https://github.com/rust-lang/rust/issues/85969\">#85969</a> is a regression from stable to beta 1.53, while the other one is older.</p>",
        "id": 242314031,
        "sender_full_name": "Frank Steffahn",
        "timestamp": 1623399562
    },
    {
        "content": "<p>Okay. I think I have both your points summarized in my prep notes for the mtg, but I’ll need to check when I’m not on mobile device</p>",
        "id": 242336591,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623413945
    },
    {
        "content": "<p>Another one. <a href=\"https://github.com/rust-lang/rust/issues/86443\">#86443</a></p>",
        "id": 243211138,
        "sender_full_name": "The 8472",
        "timestamp": 1624052706
    },
    {
        "content": "<p>Oh, and of course it's due to the logic trying to preserve side-effects <em>cough cough</em></p>",
        "id": 243218415,
        "sender_full_name": "The 8472",
        "timestamp": 1624061977
    },
    {
        "content": "<p>Actually, that comes from the fix of another bug also caused by logic trying to preserve side-effects<br>\n<a href=\"https://github.com/rust-lang/rust/pull/82292/files#diff-bcb1cbec2f56e2f74fdc31ad2c1637675a7daa9a21edaeb129f10eed8936b83b\">https://github.com/rust-lang/rust/pull/82292/files#diff-bcb1cbec2f56e2f74fdc31ad2c1637675a7daa9a21edaeb129f10eed8936b83b</a><br>\nBlame this one on me</p>",
        "id": 243234877,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1624087579
    },
    {
        "content": "<p>New idea: Lift the use of <code>__iterator_get_unchecked</code> out of the Zip implementation into the <code>for</code> loop desugaring.</p>\n<p>Part of the complexity is that Zip also makes use of unchecked accesses in <code>next()</code> and <code>next_back()</code> and that basically infects everything because user code can call those methods and then call other iterator methods afterwards which the <code>TrustedRandomAccess</code> contract forbids so <em>everything</em> needs to be implemented with unchecked accesses.</p>\n<p>If Zip only implemented <code>__iterator_get_unchecked</code> without using it internally it would be much safer and simpler. To still get the performance benefits the <code>for .. in</code> loop desugaring could be changed to call a specializing wrapper around <code>IntoIterator</code> that returns an adapter that either forwards<code>next()</code> to the inner iterator for normal ones or does something like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// specialization</span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">I</span>: <span class=\"nc\">TrustedRandomAcces</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">LoopDesugaringAdapter</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">fn</span> <span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span>::<span class=\"n\">Item</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">i</span><span class=\"p\">.</span><span class=\"n\">unchecked_add</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">inner</span><span class=\"p\">.</span><span class=\"n\">__iterator_get_unchecked</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">i</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">None</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Which should give us a single loop induction variable similar to <code>for_each</code> but without all the closures and driven from the other end of the iterator. I haven't tested that this actually optimizes as I expect it to, making some simplified benchmarks with that adapter would be the next step.</p>\n<p>Downsides: </p>\n<ul>\n<li>makes <code>try_fold</code> and related methods perform worse on <code>Zip</code> adapters because those could no longer benefit from the unchecked accesses.</li>\n<li>desugaring would become more complex, which likely costs compile-time, especially on non-trusted iterators which would pay for an extra adapter without reaping the benefits</li>\n<li>for <code>Zip</code> we'll have to pick between preserving side-effects of backwards iteration or unchecked access. well, maybe we could have both but that would cost an extra call to <code>advance_back_by(0)</code> to do the trimming.</li>\n</ul>\n<p>Upsides: </p>\n<ul>\n<li>adapters other than <code>Zip</code> might optimize better too, giving some of the <code>for_each</code> benefits to <code>for _ in</code> loops</li>\n<li>The <code>TrustedRandomAccess</code> and <code>TrustedRandomAccessNoCoerce</code> distinction could be collapsed again since <code>Zip</code> is the only user of the former.</li>\n</ul>",
        "id": 266205596,
        "sender_full_name": "The 8472",
        "timestamp": 1640639863
    },
    {
        "content": "<p>Oh that's interesting. Reminds me a bit of <a href=\"https://dlang.org/spec/statement.html#foreach_over_struct_and_classes\"><code>opApply</code> in D</a>. Basically, a foreach loop in D desugars to something similar to our <a href=\"https://doc.rust-lang.org/stable/std/iter/trait.Iterator.html#method.try_for_each\"><code>Iterator::try_for_each</code></a>, which can sometimes be much easier/more efficient to implement than <code>Iterator::next</code>. (E.g. recursively for a tree.)</p>",
        "id": 266939212,
        "sender_full_name": "Mara",
        "timestamp": 1641391576
    },
    {
        "content": "<p>C#, IIRC, has special desugarings for different enumerable types because avoiding the virtual calls is so important for it.  We could certainly do something like that too.</p>\n<p>(It's probably non-trivial to attempt in rustc as an experiment, though, since right now <code>for</code> is lowered very early -- before types are known, IIRC.)</p>",
        "id": 267502608,
        "sender_full_name": "scottmcm",
        "timestamp": 1641850060
    },
    {
        "content": "<p>Java has something similar <a href=\"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/RandomAccess.html\">https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/RandomAccess.html</a></p>",
        "id": 267549023,
        "sender_full_name": "The 8472",
        "timestamp": 1641888913
    },
    {
        "content": "<p>I don't think Java's <code>RandomAccess</code> affects for loop desugaring though</p>",
        "id": 267624150,
        "sender_full_name": "Tavian Barnes",
        "timestamp": 1641925430
    },
    {
        "content": "<p>As far as I know, <code>RandomAccess</code> is just a bound to hint that <code>List.get(n)</code> on an implementor is O(1), and doesn't do anything at all in terms of the language (it definately doesn't expose any UB, as Java has none except via JNI).</p>",
        "id": 267625255,
        "sender_full_name": "Connor Horman",
        "timestamp": 1641925871
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330154\">The 8472</span> <a href=\"#narrow/stream/219381-t-libs/topic/Improving.20TrustedRandomAccess.20and.20its.20Zip.20specialization/near/266205596\">said</a>:</p>\n<blockquote>\n<p>Downsides: </p>\n<ul>\n<li>makes <code>try_fold</code> and related methods perform worse on <code>Zip</code> adapters because those could no longer benefit from the unchecked accesses.</li>\n</ul>\n</blockquote>\n<p>This may be fixable too. At that point all remaining consumers of TRA are loops, no single-step methods. Which means we can finally add a cleanup method that brings the iterator back into a safe state. Then we can also specialize <code>try_fold</code>. And also <code>by_ref()</code> iterators for that matter. It unlocks quite a few things.</p>",
        "id": 268141653,
        "sender_full_name": "The 8472",
        "timestamp": 1642273984
    },
    {
        "content": "<p>PR <a href=\"https://github.com/rust-lang/rust/issues/93243\">#93243</a>, more will follow if it is acceptable.</p>",
        "id": 269044433,
        "sender_full_name": "The 8472",
        "timestamp": 1642978857
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> <a href=\"https://hackmd.io/CN5eBvNdRySbQbPf-zp1Ww\">https://hackmd.io/CN5eBvNdRySbQbPf-zp1Ww</a><br>\nYou'll have to do some additional prodding since I'm not quite sure where you were aiming with your questions.</p>",
        "id": 272744779,
        "sender_full_name": "The 8472",
        "timestamp": 1645486222
    },
    {
        "content": "<p>skimming looks ok, will give it a more thorough read tomorrow and get back to you</p>",
        "id": 272745122,
        "sender_full_name": "simulacrum",
        "timestamp": 1645486605
    },
    {
        "content": "<p>reading this now</p>",
        "id": 273027394,
        "sender_full_name": "simulacrum",
        "timestamp": 1645659384
    }
]