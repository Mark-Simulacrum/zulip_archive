[
    {
        "content": "<p>I just noticed PR <a href=\"https://github.com/rust-lang/rust/issues/84560\">#84560</a>, and that originally it tried adding <code>#[inline(always)]</code> but it made performance worse. Yet the body of the function is literally just <code>self</code>. So I have two questions:</p>\n<ul>\n<li>How could inlining that make runtime <em>worse</em> (I would think it'd be better both because IIUC there would be less monomorphization, so instruction cache is not polluted, and because a jump is avoided)? (Maybe this question is more suited to the compiler team though...)</li>\n<li>Why is <code>#[inline(always)]</code> avoided in general in the stdlib?</li>\n</ul>\n<p>Thanks!</p>",
        "id": 239653364,
        "sender_full_name": "Noah Lev",
        "timestamp": 1621542065
    },
    {
        "content": "<p>Because <code>always</code> is a very big hammer.  In an optimized build, so long as the definition is available LLVM will inline a trivial body even without the attribute, so the situations in which it's worth using the extra-big hammer are quite narrow -- often it's just about what happens in debug builds.</p>\n<p>Most of the time it's completely appropriate to let LLVM <em>not</em> inline something if it thinks it's a bad idea to inline it.</p>",
        "id": 239654081,
        "sender_full_name": "scottmcm",
        "timestamp": 1621542426
    },
    {
        "content": "<p>It might also shuffle inlining boundaries around in a way that the hot code gets optimized less because the function is now too big or something like that</p>",
        "id": 239656313,
        "sender_full_name": "The 8472",
        "timestamp": 1621543361
    },
    {
        "content": "<p>Adding / removing an inline attribute to a function with as many instantiations as <code>into_iter</code> tends to completely change the CGU partitioning.</p>",
        "id": 239661844,
        "sender_full_name": "tm",
        "timestamp": 1621545933
    }
]