[
    {
        "content": "<p>I've <a href=\"https://users.rust-lang.org/t/u16-slice-to-u8-iterator/59078/11?u=scottmcm\">twice</a> <a href=\"https://github.com/bevyengine/bevy/pull/1966#discussion_r616169211\">recently</a> seen people misusing <code>align_to</code> since it's the \"easiest\" way to turn slices into slices of different-sized elements.</p>\n<p>I'd love to be able to suggest <a href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html#method.as_chunks\"><code>as_chunks</code></a> instead, but it's unstable.  I'd normally just send a stabilization PR and ask for an FCP, but the <a href=\"https://github.com/rust-lang/rust/issues/74985#issue-670131723\">tracking issue</a> says that it's currently blocked on a compile-time check for N==0, since it can't elegantly meet its postcondition in that case.</p>\n<p>It seems like that's a long way off from being fixable, though.  Any thoughts on how essential that is, vs just doing the runtime <code>panic</code> it does today?  I'd certainly <em>rather</em> it not compile, but it's not like it's a subtle problem that is likely to slip past notice without the compiler error, nor is it something that causes perf problems.  So I'm tempted to say I'd rather have it stable with the panic than wait for <code>where N &gt; 0</code> to be allowed...</p>",
        "id": 236721016,
        "sender_full_name": "scottmcm",
        "timestamp": 1619720328
    },
    {
        "content": "<blockquote>\n<p>It seems like that's a long way off from being fixable, though.</p>\n</blockquote>\n<p>I personally think that using a compile time check is worth it here and in general would prefer to not stabilize this with a runtime check if we're going to  later add methods with compile time checks</p>",
        "id": 236722386,
        "sender_full_name": "lcnr",
        "timestamp": 1619720914
    },
    {
        "content": "<p>now, while we're a long time off from const wf bounds</p>",
        "id": 236722430,
        "sender_full_name": "lcnr",
        "timestamp": 1619720938
    },
    {
        "content": "<p>we are exactly 0 days off from being able to implement this as a fairly innocent hack</p>",
        "id": 236722459,
        "sender_full_name": "lcnr",
        "timestamp": 1619720956
    },
    {
        "content": "<p>add an attribute <code>#[rustc_non_zero_const_param(integer)]</code> which</p>",
        "id": 236723098,
        "sender_full_name": "lcnr",
        "timestamp": 1619721211
    },
    {
        "content": "<ul>\n<li>requires const arguments instantiating the parameter to be fully concrete</li>\n</ul>",
        "id": 236723131,
        "sender_full_name": "lcnr",
        "timestamp": 1619721225
    },
    {
        "content": "<ul>\n<li>and causes an error if the argument is equal to 0</li>\n</ul>",
        "id": 236723155,
        "sender_full_name": "lcnr",
        "timestamp": 1619721237
    },
    {
        "content": "<p>this would prevent users from using <code>as_chunks</code> with a generic <code>N</code> until we've either decided that this doesn't has to be a compile time bound or const wf bounds are close enough to stable</p>",
        "id": 236723433,
        "sender_full_name": "lcnr",
        "timestamp": 1619721325
    },
    {
        "content": "<p>which imo is a good way to postpone this decision while still getting most of the benefits of having this method on stable</p>",
        "id": 236723480,
        "sender_full_name": "lcnr",
        "timestamp": 1619721351
    },
    {
        "content": "<p>if this is desirable i can either implement this in the <em>fairly near</em>(a few weeks) future or mentor immediately if someone is interested in working on this</p>",
        "id": 236724241,
        "sender_full_name": "lcnr",
        "timestamp": 1619721650
    },
    {
        "content": "<p>Another option is to make this a deny-by-default lint, which is less hacky but doesn't prevent generic parameters</p>",
        "id": 236728783,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1619723493
    },
    {
        "content": "<p>(And of course, means that make it a hard error isn't backwards compatible, which might be unsatisfactory)</p>",
        "id": 236728864,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1619723523
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/219381-t-libs/topic/How.20essential.20is.20the.20compile-time.20check.20for.20empty.20arrays.3F/near/236728864\">said</a>:</p>\n<blockquote>\n<p>(And of course, means that make it a hard error isn't backwards compatible, which might be unsatisfactory)</p>\n</blockquote>\n<p>yeah, while i except us to not necessarily end up with erroring here in the end, i do want to keep that option</p>",
        "id": 236732868,
        "sender_full_name": "lcnr",
        "timestamp": 1619725187
    },
    {
        "content": "<p>I'd be willing to make an attempt at this.  It's been a while since I added an attribute, though, so some pointers to where I should put these things and how I should check it would be appreciated.</p>",
        "id": 236746179,
        "sender_full_name": "scottmcm",
        "timestamp": 1619730442
    },
    {
        "content": "<p>you could look at my recent <code>rustc_skip_array_during_method_dispatch</code>: <a href=\"https://github.com/rust-lang/rust/pull/84147/commits/b79af2fcde91abeae805c2dbccfdbf7114bfd47b\">https://github.com/rust-lang/rust/pull/84147/commits/b79af2fcde91abeae805c2dbccfdbf7114bfd47b</a></p>",
        "id": 236751861,
        "sender_full_name": "cuviper",
        "timestamp": 1619732359
    },
    {
        "content": "<p>most of that boiler-plate is for the stored metadata though, not the attribute itself</p>",
        "id": 236751895,
        "sender_full_name": "cuviper",
        "timestamp": 1619732376
    },
    {
        "content": "<p>You could also use the <code>static_assert!</code> hack that stdarch is using. The error message is pretty bad though.</p>",
        "id": 236761012,
        "sender_full_name": "Amanieu",
        "timestamp": 1619737634
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/stdarch/blob/6cec76beed3d1d27c1b88826a0e5d8142f836d66/crates/core_arch/src/macros.rs#L69\">https://github.com/rust-lang/stdarch/blob/6cec76beed3d1d27c1b88826a0e5d8142f836d66/crates/core_arch/src/macros.rs#L69</a></p>",
        "id": 236761065,
        "sender_full_name": "Amanieu",
        "timestamp": 1619737669
    },
    {
        "content": "<p>that one also doesn't apply for <code>cargo check</code> though <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> as the errors happen during mono item collection</p>",
        "id": 236814312,
        "sender_full_name": "lcnr",
        "timestamp": 1619778461
    },
    {
        "content": "<p>it might have been sensible to use the same hack for stdarch <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> might not be possible though</p>",
        "id": 236814440,
        "sender_full_name": "lcnr",
        "timestamp": 1619778517
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/219381-t-libs/topic/How.20essential.20is.20the.20compile-time.20check.20for.20empty.20arrays.3F/near/236746179\">said</a>:</p>\n<blockquote>\n<p>I'd be willing to make an attempt at this.  It's been a while since I added an attribute, though, so some pointers to where I should put these things and how I should check it would be appreciated.</p>\n</blockquote>\n<p>so i except this to be very similar to <code>rustc_args_required_const</code>, except that the actual error reporting should probably happen somewhere else</p>",
        "id": 236814520,
        "sender_full_name": "lcnr",
        "timestamp": 1619778575
    },
    {
        "content": "<p>it probably makes sense to reuse <code>rustc_passes::intrinsicck</code>, though the name is incorrect here <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 236815472,
        "sender_full_name": "lcnr",
        "timestamp": 1619779092
    },
    {
        "content": "<p>I think we could change the  <code>ExprVisitor</code>+ <code>ItemVisitor</code> combination to be generic over the behavior of the <code>ExprVisitor</code> and add a new pass reusing that impl.</p>\n<p>We probably want to start with only allowing that attribute on methods and functions. This means we only have to check <code>hir::ExprKind::Path</code> and <code>hir::ExprKind::MethodCall</code> afaik</p>",
        "id": 236816364,
        "sender_full_name": "lcnr",
        "timestamp": 1619779616
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/219381-t-libs/topic/How.20essential.20is.20the.20compile-time.20check.20for.20empty.20arrays.3F/near/236814440\">said</a>:</p>\n<blockquote>\n<p>it might have been sensible to use the same hack for stdarch <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> might not be possible though</p>\n</blockquote>\n<p>The stdarch changes still haven't been merged yet, so it's still possible to change.</p>",
        "id": 236832750,
        "sender_full_name": "Amanieu",
        "timestamp": 1619788896
    },
    {
        "content": "<p>hmm <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> i guess the question is whether is stdarch fine with not allowing const params as arguments?</p>",
        "id": 236846068,
        "sender_full_name": "lcnr",
        "timestamp": 1619794297
    },
    {
        "content": "<p>also not too sure what's the best way to extend this attribute to accept more complex conditions than just =! 0</p>",
        "id": 236846102,
        "sender_full_name": "lcnr",
        "timestamp": 1619794317
    },
    {
        "content": "<p>so, i did implement the attribute for functions and methods: <a href=\"https://github.com/lcnr/rust/commit/f99922d91ee19022a636d3cf53559771ae14f1c0\">https://github.com/lcnr/rust/commit/f99922d91ee19022a636d3cf53559771ae14f1c0</a></p>",
        "id": 248387761,
        "sender_full_name": "lcnr",
        "timestamp": 1628101226
    },
    {
        "content": "<p>i still have to figure out a way to extend this to types as well, to prevent users from writing <code>ArrayChunks&lt;0&gt;</code> or something. I could move all of this to wf and verify it while typechecking, but that seems kinda ugly <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 248387965,
        "sender_full_name": "lcnr",
        "timestamp": 1628101337
    },
    {
        "content": "<p>going to open a thread about that in <code>t-compiler</code></p>",
        "id": 248387991,
        "sender_full_name": "lcnr",
        "timestamp": 1628101350
    },
    {
        "content": "<p>cross ref <a href=\"#narrow/stream/131828-t-compiler/topic/checking.20generic.20arg.20!.3D.200/near/248388441\">https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/checking.20generic.20arg.20!.3D.200/near/248388441</a></p>",
        "id": 248388485,
        "sender_full_name": "lcnr",
        "timestamp": 1628101591
    }
]