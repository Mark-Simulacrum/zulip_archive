[
    {
        "content": "<p>Binary search is notoriously tricky to get right, so it’s great that we have it implemented for slices. However I’ve had a couple cases where I’d like to use binary search to search something that is not a contiguous slice. Or it is a slice but the key function wants to know the index.</p>",
        "id": 221837079,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1609975120
    },
    {
        "content": "<p>Any thoughts on whether <code>binary_search_by</code> and <code>binary_search_by_key</code> methods for <code>Range&lt;usize&gt;</code> would be a good fit for the standard library?</p>",
        "id": 221837114,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1609975152
    },
    {
        "content": "<p>Once it's decoupled from indexing it could search any quantized space, right?  At that point just supporting <code>Range&lt;usize&gt;</code> feels a bit odd.</p>",
        "id": 221838823,
        "sender_full_name": "scottmcm",
        "timestamp": 1609976371
    },
    {
        "content": "<p>Sure it could be more generic than usize, but I suspect expressing the trait bounds gets annoying</p>",
        "id": 221841773,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1609978528
    },
    {
        "content": "<p>The current code uses <code>==</code>, <code>&gt;</code>, <code>/</code>, <code>+</code>, and <code>-=</code></p>",
        "id": 221841930,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1609978628
    },
    {
        "content": "<p>it also uses literals 0, 1, 2</p>",
        "id": 221844038,
        "sender_full_name": "cuviper",
        "timestamp": 1609980305
    },
    {
        "content": "<p>Could <code>Step</code> do it?  Wouldn't seem terrible if it only worked for the types where <code>Range&lt;T&gt;: Iterator</code>...</p>\n<p>Though as you say, I don't know how essential it would be to support other types.</p>",
        "id": 221848892,
        "sender_full_name": "scottmcm",
        "timestamp": 1609985127
    },
    {
        "content": "<p>Is the thing you'd like to search another container?</p>",
        "id": 221848956,
        "sender_full_name": "scottmcm",
        "timestamp": 1609985184
    },
    {
        "content": "<p>I've written something like this before, yeah.</p>",
        "id": 221850476,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1609986855
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/219381-t-libs/topic/Range.3A.3Abinary_search_by/near/221848956\">said</a>:</p>\n<blockquote>\n<p>Is the thing you'd like to search another container?</p>\n</blockquote>\n<p>The recent case is reading an mmap’ed file in some binary format, I suppose you could view it as a custom container. I don’t remember what the other case was.</p>",
        "id": 221863342,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1610003728
    },
    {
        "content": "<p>yeah i've always found Go's binary search to be much more flexible: <a href=\"https://golang.org/pkg/sort/#Search\">https://golang.org/pkg/sort/#Search</a></p>\n<p>i've had to implement it a couple of times: <a href=\"https://github.com/BurntSushi/regex-automata/blob/4e0e8ec599e92b115c53ed8d760f7c38bf91891f/src/nfa/range_trie.rs#L568-L577\">https://github.com/BurntSushi/regex-automata/blob/4e0e8ec599e92b115c53ed8d760f7c38bf91891f/src/nfa/range_trie.rs#L568-L577</a> and <a href=\"https://github.com/BurntSushi/regex-automata/blob/6682f9cef5b4ef0c0892c4a6589658cd171106d8/src/sparse.rs#L1233-L1239\">https://github.com/BurntSushi/regex-automata/blob/6682f9cef5b4ef0c0892c4a6589658cd171106d8/src/sparse.rs#L1233-L1239</a></p>",
        "id": 221938092,
        "sender_full_name": "BurntSushi",
        "timestamp": 1610024135
    },
    {
        "content": "<p>Looks like the version of this I wrote is also over <code>usize</code>: <a href=\"https://github.com/scottmcm/uax/blob/7a82b89312c0f3bfa5cde1a59b761a40ac0dfa5a/src/lookup_table.rs#L39-L55\">https://github.com/scottmcm/uax/blob/7a82b89312c0f3bfa5cde1a59b761a40ac0dfa5a/src/lookup_table.rs#L39-L55</a></p>\n<p>(Although, looking again, I'm not sure I couldn't have just used the slice one...)</p>",
        "id": 221984972,
        "sender_full_name": "scottmcm",
        "timestamp": 1610045851
    },
    {
        "content": "<p>I've written variants of bisect / binary search for root-finding before, which definitely goes beyond slices or <code>Range&lt;usize&gt;</code></p>",
        "id": 221993954,
        "sender_full_name": "cuviper",
        "timestamp": 1610050165
    }
]