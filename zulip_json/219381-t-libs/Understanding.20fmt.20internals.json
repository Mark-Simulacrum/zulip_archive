[
    {
        "content": "<p>Why do we have <a href=\"https://github.com/rust-lang/rust/blob/61edfd591cedff66fca639c02f66984f6271e5a6/library/core/src/fmt/rt/v1.rs#L42\"><code>Count::Param</code></a> and <code>ArgumentV1::from_usize</code>? Couldn't we just copy the value and just use <code>Count::Is</code> instead? (and then it could just be <code>Option&lt;usize&gt;</code>?) I've been doing some experimenting to see if I can simplify/speed up <code>format_args!</code>.</p>",
        "id": 231312888,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1616421066
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"360405\">@Cameron Steffen</span> because the Counts (and all other formatting metadata) are stored in read only memory, they're static.</p>",
        "id": 231327964,
        "sender_full_name": "Mara",
        "timestamp": 1616426345
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"360405\">@Cameron Steffen</span> I already made an experimental implementation making it all non-static, so we can get rid of Count::Param: <a href=\"https://github.com/rust-lang/rust/pull/78416/\">https://github.com/rust-lang/rust/pull/78416/</a></p>",
        "id": 231328444,
        "sender_full_name": "Mara",
        "timestamp": 1616426495
    },
    {
        "content": "<p>I see. Is that something you are still pursuing?</p>",
        "id": 231329729,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1616426920
    },
    {
        "content": "<p>I came up with a slightly different approach where I basically merge the list of <code>str</code> with the list of args, so each arg has a <code>str</code> prefix.</p>",
        "id": 231332460,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1616427724
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"360405\">@Cameron Steffen</span> the only way it'll be fast is if you separate all the static data from the dynamic data. if any element of an array contains something dynamic (e.g. an argument), it will have to be constructed entirely on the stack.</p>",
        "id": 231333064,
        "sender_full_name": "Mara",
        "timestamp": 1616427925
    },
    {
        "content": "<p>I have a new implementation (not public yet) that puts as much information as possible in read only memory. fmt::Arguments is then just two pointers. one to the arguments on the stack (without vtable pointers!), and one to all other data in one block in read only memory.</p>",
        "id": 231333297,
        "sender_full_name": "Mara",
        "timestamp": 1616427994
    },
    {
        "content": "<p>but it's not complete yet</p>",
        "id": 231333331,
        "sender_full_name": "Mara",
        "timestamp": 1616428007
    },
    {
        "content": "<p>Interesting. Is the read-only portion basically everything derived from the format string?</p>",
        "id": 231333765,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1616428140
    },
    {
        "content": "<p>(not the args)</p>",
        "id": 231333808,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1616428158
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310399\">@Mara</span> What is the difference between the v2 fmt and the current one?</p>",
        "id": 231334089,
        "sender_full_name": "pickfire",
        "timestamp": 1616428247
    },
    {
        "content": "<p>which  v2?</p>",
        "id": 231334197,
        "sender_full_name": "Mara",
        "timestamp": 1616428290
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"360405\">Cameron Steffen</span> <a href=\"#narrow/stream/219381-t-libs/topic/Understanding.20fmt.20internals/near/231333765\">said</a>:</p>\n<blockquote>\n<p>Interesting. Is the read-only portion basically everything derived from the format string?</p>\n</blockquote>\n<p>yes.</p>",
        "id": 231334232,
        "sender_full_name": "Mara",
        "timestamp": 1616428302
    },
    {
        "content": "<p>everything that doesn't change for different invocations at runtime.</p>",
        "id": 231334395,
        "sender_full_name": "Mara",
        "timestamp": 1616428345
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/78416/\">https://github.com/rust-lang/rust/pull/78416/</a></p>",
        "id": 231334724,
        "sender_full_name": "pickfire",
        "timestamp": 1616428445
    },
    {
        "content": "<p>that's not v2. that's just some experiment that shows it's important to keep the read-only data separate.</p>",
        "id": 231335110,
        "sender_full_name": "Mara",
        "timestamp": 1616428579
    },
    {
        "content": "<p>Makes sense. Then maybe any equal format strings could be collapsed to the same <code>const ParsedFormat</code>.</p>",
        "id": 231335624,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1616428745
    },
    {
        "content": "<p>Anyways I'll leave you to it. Thanks for filling me in!</p>",
        "id": 231335859,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1616428808
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"360405\">@Cameron Steffen</span> it's not just the format string. there's also the function pointers to the display functions for each argument.</p>",
        "id": 231336912,
        "sender_full_name": "Mara",
        "timestamp": 1616429114
    },
    {
        "content": "<p>right now those are stored next to the arguments, on the stack. but that's a bit of a waste, because they're constant</p>",
        "id": 231336978,
        "sender_full_name": "Mara",
        "timestamp": 1616429137
    },
    {
        "content": "<p>but separating those turns out to be very tricky. it's quite hard to get those function pointers in a <code>const</code> context in rust</p>",
        "id": 231337115,
        "sender_full_name": "Mara",
        "timestamp": 1616429169
    }
]