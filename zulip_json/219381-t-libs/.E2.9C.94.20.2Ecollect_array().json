[
    {
        "content": "<p>i feel like something like the following is probably a good starting point here</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Sequence</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Item</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">LENGTH</span>: <span class=\"kt\">usize</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">evaluate</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"p\">[</span><span class=\"bp\">Self</span>::<span class=\"n\">Item</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"bp\">Self</span>::<span class=\"n\">LENGTH</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 274722967,
        "sender_full_name": "lcnr",
        "timestamp": 1646847154
    },
    {
        "content": "<p>though we probably also want something like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">SequenceFamily</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// This needs associated const bounds and gats</span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Sequence</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span>: <span class=\"nc\">Sequence</span><span class=\"o\">&lt;</span><span class=\"n\">LENGTH</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 274723117,
        "sender_full_name": "lcnr",
        "timestamp": 1646847214
    },
    {
        "content": "<p>for</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Sequence</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"c1\">// associated type bounds</span>\n<span class=\"w\">     </span><span class=\"k\">type</span> <span class=\"nc\">Family</span>: <span class=\"nc\">SequenceFamily</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span>::<span class=\"n\">Family</span><span class=\"w\">  </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">SequenceFamily</span><span class=\"o\">&gt;</span>::<span class=\"n\">Sequence</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span>::<span class=\"n\">LENGTH</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"k\">fn</span> <span class=\"nf\">evaluate_head</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">         </span>-&gt; <span class=\"p\">(</span><span class=\"bp\">Self</span>::<span class=\"n\">Item</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span>::<span class=\"n\">Family</span><span class=\"w\">  </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">SequenceFamily</span><span class=\"o\">&gt;</span>::<span class=\"n\">Sequence</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span>::<span class=\"n\">LENGTH</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 274723635,
        "sender_full_name": "lcnr",
        "timestamp": 1646847375
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> an example where gats are nice <span aria-label=\"sparkles\" class=\"emoji emoji-2728\" role=\"img\" title=\"sparkles\">:sparkles:</span> but all of this still feels far from ever being possible on stable (or even nightly maybe <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> )</p>",
        "id": 274723783,
        "sender_full_name": "lcnr",
        "timestamp": 1646847450
    },
    {
        "content": "<blockquote>\n<p><code>next</code> changes the available length without changing the type.</p>\n</blockquote>\n<p>oh, of course. ^^'</p>",
        "id": 274724604,
        "sender_full_name": "Mara",
        "timestamp": 1646847775
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310399\">Mara</span> has marked this topic as resolved.</p>",
        "id": 274724688,
        "sender_full_name": "Notification Bot",
        "timestamp": 1646847805
    },
    {
        "content": "<p>(This is why, for example, the size_hint specializations for flatten and such use the <code>IntoIterator</code>, not the <code>Iterator</code>, because <code>&lt;[T; N] as IntoIterator&gt;</code> has known length but <code>array::IntoIter</code> doesn't.)</p>",
        "id": 274728049,
        "sender_full_name": "scottmcm",
        "timestamp": 1646848960
    },
    {
        "content": "<p>I think we might end up needing a parallel tree of adapters for this.</p>\n<p>It might also be an easier way to do the allocation reuse stuff, if it's operating on a full vector instead of just seeing the iterator.</p>",
        "id": 274728254,
        "sender_full_name": "scottmcm",
        "timestamp": 1646849039
    },
    {
        "content": "<p>I guess this would only make sense as part of an 'eager' iterator type, as opposed to a lazy one</p>",
        "id": 274729603,
        "sender_full_name": "Conrad Ludgate",
        "timestamp": 1646849592
    },
    {
        "content": "<p>wishlist issue for collecting into an array: <a href=\"https://github.com/rust-lang/rust/issues/81615\">https://github.com/rust-lang/rust/issues/81615</a></p>",
        "id": 274897583,
        "sender_full_name": "bstrie",
        "timestamp": 1646947857
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/219381-t-libs/topic/.E2.9C.94.20.2Ecollect_array.28.29/near/274722310\">said</a>:</p>\n<blockquote>\n<p>we can't use the current <code>Iterator</code> types for this as <code>next</code> changes the available length without changing the type. adding this to std right away doesn't feel like the best path forward to me. I think that working on fixed size iterators makes more sense outside of std rn</p>\n</blockquote>\n<p><a href=\"https://github.com/usbalbin/iter_fixed\">https://github.com/usbalbin/iter_fixed</a> is an example of what this could look like.</p>",
        "id": 274929985,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1646971957
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">iter_fixed</span>::<span class=\"o\">*</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">res</span>: <span class=\"p\">[</span><span class=\"n\">_</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">into_iter_fixed</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">zip</span><span class=\"p\">([</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">])</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">skip</span>::<span class=\"o\">&lt;</span><span class=\"mi\">1</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">take</span>::<span class=\"o\">&lt;</span><span class=\"mi\">2</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">collect</span><span class=\"p\">();</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 274929997,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1646971975
    }
]