[
    {
        "content": "<p>I may have asked this before, but why are there so many places in the standard library that have a different definition when compiled with <code>#[cfg(test)]</code>? E.g.:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// HACK(japaric): with cfg(test) the inherent `[T]::into_vec` method, which is</span>\n<span class=\"c1\">// required for this macro definition, is not available. Instead use the</span>\n<span class=\"c1\">// `slice::into_vec`  function which is only available with cfg(test)</span>\n<span class=\"c1\">// NB see the slice::hack module in slice.rs for more information</span>\n<span class=\"cp\">#[cfg(test)]</span><span class=\"w\"></span>\n<span class=\"fm\">macro_rules!</span><span class=\"w\"> </span><span class=\"n\">vec</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Why isn't that method available under <code>cfg(test)</code>?</p>\n<p>The <code>slice::hack</code> module that is referenced doesn't say <em>why</em> <code>impl [T]</code> is not available:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// HACK(japaric): With cfg(test) `impl [T]` is not available, these three</span>\n<span class=\"c1\">// functions are actually methods that are in `impl [T]` but not in</span>\n<span class=\"c1\">// `core::slice::SliceExt` - we need to supply these functions for the</span>\n<span class=\"c1\">// `test_permutations` test</span>\n<span class=\"k\">mod</span> <span class=\"nn\">hack</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Meanwhile, the actual impl doesn't have any more information:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[lang = </span><span class=\"s\">\"slice\"</span><span class=\"cp\">]</span><span class=\"w\"></span>\n<span class=\"cp\">#[cfg(not(test))]</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 253176547,
        "sender_full_name": "Noah Lev",
        "timestamp": 1631575962
    },
    {
        "content": "<p>I believe the reason is that when testing the code is linked to a different copy of std, so it'll need to cfg-out impl on primitives otherwise that'll conflict.</p>",
        "id": 253177191,
        "sender_full_name": "Gary Guo",
        "timestamp": 1631576471
    },
    {
        "content": "<p>But IIUC things like <code>i32::to_le_bytes()</code> are not cfg'd-out, so why slices in particular?</p>",
        "id": 253181339,
        "sender_full_name": "Noah Lev",
        "timestamp": 1631579481
    },
    {
        "content": "<p>Maybe because it's a lang item?</p>",
        "id": 253181444,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631579580
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307537\">Noah Lev</span> <a href=\"#narrow/stream/219381-t-libs/topic/question.20about.20.60cfg.28test.29.60.20hacks/near/253181339\">said</a>:</p>\n<blockquote>\n<p>But IIUC things like <code>i32::to_le_bytes()</code> are not cfg'd-out, so why slices in particular?</p>\n</blockquote>\n<p>Good point, now I am confused as well <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 253181683,
        "sender_full_name": "Gary Guo",
        "timestamp": 1631579769
    },
    {
        "content": "<p>to_le_bytes is part of <code>core</code>, that <code>slice::hack</code> thing is part of <code>alloc</code></p>",
        "id": 253236505,
        "sender_full_name": "Mara",
        "timestamp": 1631620169
    },
    {
        "content": "<p>core's tests are handled differently</p>",
        "id": 253236529,
        "sender_full_name": "Mara",
        "timestamp": 1631620179
    },
    {
        "content": "<p>core does not have any <code>#[test]</code> in <code>src/</code>. <code>alloc</code> and <code>std</code> do.</p>",
        "id": 253236669,
        "sender_full_name": "Mara",
        "timestamp": 1631620227
    },
    {
        "content": "<p>Ah, that makes sense, thanks!</p>",
        "id": 253279218,
        "sender_full_name": "Noah Lev",
        "timestamp": 1631636497
    }
]