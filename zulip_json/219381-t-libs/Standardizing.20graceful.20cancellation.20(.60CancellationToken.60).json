[
    {
        "content": "<p>Hi everyone. I'm wondering what the feelings about this group are around standarizing a minimum amount of tools for supporting graceful cancellation, like a <code>CancellationToken</code> or <code>StopToken</code>. While these can obviously be implemented as libraries, I feel like it would help to maximize interoperability between libraries if a minimal interface is standardized, so that any library can react to any kind of cancellation requests from something else.</p>\n<p>I thought a lot about how to implement graceful cancellation within the efforts to support <a href=\"https://github.com/tokio-rs/tokio/issues/1879\">structured concurrency</a> for tokio as well as later <a href=\"https://rust-lang.github.io/wg-async-foundations/vision/shiny_future/users_manual.html#scopes\">within the async working group</a>.<br>\nIn the meantime I've came up with the conclusion that it should be possible to build a single slim interface which allows to handle graceful cancellation for both synchronous as well as asynchronous applications. I've written a bit earlier on about this in <a href=\"https://gist.github.com/Matthias247/354941ebcc4d2270d07ff0c6bf066c64\">A case for CancellationTokens</a>.</p>\n<p>Now half a year later I finally found some time to prototype this, and placed the results in the <a href=\"https://github.com/Matthias247/min_cancel_token\">min-cancel-token</a> crate. I'm rather happy with this, and think it might be a good starting point for how a core/std CancellationToken could look like.<br>\nOverall this repo contains 3 parts:</p>\n<ol>\n<li>The <code>CancellationToken</code> trait which allows libraries to detect cancellation and handle it. It's designed as a <code>dyn Trait</code> to maximize interoperability. It implements 2 functionst: Getting an error if cancellation is requested, and allowing to attach a callback that is invoked on cancellation. This mostly follows the C++ StopToken design. This is probably the minimal thing that can be standardized to improve interoperability in terms of handling graceful cancellation. In contrast to the C++ design, there is no implementation associated with it - which makes it <code>core</code> compatible. To allow implementing some parts of it with type erasure, a similar design as with <code>Waker</code>s  is used.</li>\n<li>Helper functions to set and utilize a thread-local <code>CancellationToken</code>. If those would be standardized, there would be no need to pass the references around - but it would also work without. An alternative is certainly <span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> 's proposal about contexts, but I feel like that might be a bigger effort.</li>\n<li>A concrete implementation of a <code>CancellationToken</code> and <code>CancellationTokenSource</code>. Could live in <code>std</code> - but probably also in an external library. Embedded systems or async runtimes can have their own implementations, which better fit their needs.</li>\n</ol>\n<p>Obviously the implementation is this repo is neither polished nor probably 100% correct - and I also don't care a lot on how things are named.<br>\nFor now I'm mostly interested to get feedback on whether there would be any support to further pursue this.</p>\n<p>Any thoughts?</p>\n<p>Also <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> and <span class=\"user-mention\" data-user-id=\"211722\">@Yoshua Wuyts [he/they]</span>  - since I know you also looked at this.</p>",
        "id": 267319942,
        "sender_full_name": "Matthias247",
        "timestamp": 1641681276
    },
    {
        "content": "<p>I'm out of office until Monday, but can take a closer look next week. From a glance I feel like having some examples on the package would be helpful for me to get a better sense of how it's intended to be used.</p>\n<p>Here's the latest iteration on <code>stop_token</code>: <a href=\"https://docs.rs/stop-token/latest/stop_token\">https://docs.rs/stop-token/latest/stop_token</a>. It now also handles timeout based cancellation shorthands, though I'm not super sure on whether making it this generic ends up being worth it.</p>",
        "id": 267320172,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1641681609
    },
    {
        "content": "<p>The unit-tests contain some basic examples. Including on e.g. how to <code>.await</code> a stop signal. There could however definitely be more examples :)</p>",
        "id": 267320342,
        "sender_full_name": "Matthias247",
        "timestamp": 1641681853
    },
    {
        "content": "<p>This reminds me: I still need to write the follow-up to my async cancellation post, specifically on stop-token. It's not been a priority for the WG, so I haven't made any time for it. If we think cancellation tokens  should be a priority for the async foundations working group, I could get around to it. But I am a bit worried about spreading ourselves a bit too thin again.</p>\n<p>Something related I've been thinking about is the relationship between stop tokens and other form of deadlines / temporal actions. Posted a few of my notes here: <a href=\"https://github.com/async-rs/stop-token/issues/14\">https://github.com/async-rs/stop-token/issues/14</a>, but I've got a hunch we should be considering cancellation/stop tokens as part of a broader design.</p>",
        "id": 267321290,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1641683119
    },
    {
        "content": "<p>(I'm doing a poor note not thinking about work stuff, haha. I should probably log off)</p>",
        "id": 267321396,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1641683239
    },
    {
        "content": "<p>Just consider yourself lucky that you get any time at work to think about those things</p>",
        "id": 267321983,
        "sender_full_name": "Matthias247",
        "timestamp": 1641683763
    },
    {
        "content": "<p>Anyway - no need to hurry. This idea is already pending for 2 years since the first version of CancellationToken was implemented. And thanks for looking at it.</p>",
        "id": 267324039,
        "sender_full_name": "Matthias247",
        "timestamp": 1641686655
    },
    {
        "content": "<p>Hi there,<br>\nI want to change the presentation of the ignored test case in the summary of <code>cargo test</code>, and this will modify <code>TestDesc</code>.</p>\n<p>Here is the proposal.  <br>\n<a href=\"https://github.com/rust-lang/rfcs/pull/3217\">https://github.com/rust-lang/rfcs/pull/3217</a><br>\nMay I just work on this?  </p>\n<p>Because the RFC may not be requirement before PR.  Thanks for your time for reading these.</p>",
        "id": 267328081,
        "sender_full_name": "Antonio Yang",
        "timestamp": 1641692422
    },
    {
        "content": "<p>I think cancellation is an important topic and we probably want std support at some point, however, I don't think now is the right time to consider it - primarily because the async WG doesn't have the bandwidth and there are a lot of other async issues which are higher priority at the moment. In the meantime, I think work can continue in the wild. If there is community consensus on an approach, that makes standardisation much easier!</p>",
        "id": 267423649,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1641812365
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"264629\">Antonio Yang</span> has marked this topic as resolved.</p>",
        "id": 267821091,
        "sender_full_name": "Notification Bot",
        "timestamp": 1642046384
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"264629\">Antonio Yang</span> has marked this topic as unresolved.</p>",
        "id": 267821093,
        "sender_full_name": "Notification Bot",
        "timestamp": 1642046392
    }
]