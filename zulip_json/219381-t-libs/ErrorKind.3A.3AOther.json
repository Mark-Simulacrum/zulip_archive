[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> thank you for the write up for the release notes in <a href=\"https://github.com/rust-lang/rust/pull/85746#issuecomment-861776466\">https://github.com/rust-lang/rust/pull/85746#issuecomment-861776466</a> --</p>\n<p>I am wondering if you could clarify something for me. That write up says \"only match <code>ErrorKind::Other</code> if you're catching a constructed <code>std::io::Error</code> that uses that error kind.\", but this seems like a bad idea -- in general, shouldn't code <em>always</em> use <code>_</code> instead of ErrorKind::Other? That is, it feels like we should perhaps add a deprecation for matching on ErrorKind::Other (and perhaps comparison to it, but that's harder). Obviously, constructing it outside of std still makes sense, but it seems that code should not match on it, as that creates the same problem for other libraries that std had, where they can't re-categorize later</p>",
        "id": 251732311,
        "sender_full_name": "simulacrum",
        "timestamp": 1630595915
    },
    {
        "content": "<p>I personally agree, but I think that would break too much code out there.</p>",
        "id": 251740405,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630598912
    },
    {
        "content": "<p>Suppose you have a library crate that needs to emit an io::Error (perhaps because you have to supply a function to some <em>other</em> library that wants a <code>-&gt; io::Result</code>), and there's no existing error that fits.</p>",
        "id": 251740623,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630599000
    },
    {
        "content": "<p>So it's more or less accurate to emit <code>ErrorKind::Other</code> there.</p>",
        "id": 251740741,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630599031
    },
    {
        "content": "<p>Now, suppose you want to write a test for your library.</p>",
        "id": 251740770,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630599043
    },
    {
        "content": "<p>I think in that case it's reasonable for you to match your own emitted error.</p>",
        "id": 251741019,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630599131
    },
    {
        "content": "<p>I don't, on the other hand, think it's a good idea for any other code <em>invoking</em> your library to match on <code>Other</code>, though.</p>",
        "id": 251741070,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630599159
    },
    {
        "content": "<p>So perhaps we can narrow the recommendation...</p>",
        "id": 251741122,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630599176
    },
    {
        "content": "<p>Edited my comment. Thoughts on the new text?</p>",
        "id": 251741539,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630599339
    },
    {
        "content": "<p>Yeah, tests are always a bit weird</p>",
        "id": 251748199,
        "sender_full_name": "simulacrum",
        "timestamp": 1630601942
    },
    {
        "content": "<p>New comment looks good</p>",
        "id": 251748291,
        "sender_full_name": "simulacrum",
        "timestamp": 1630601972
    }
]