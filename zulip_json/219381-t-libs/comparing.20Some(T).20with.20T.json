[
    {
        "content": "<p>Hi,<br>\nHow do people feel about adding something like <code>impl&lt;T: PartialEq&gt; PartialEq&lt;Option&lt;T&gt;&gt; for T</code> such that <code>Some(5) == 5</code>?</p>\n<p>I can PR this but wanted to know if people even want that.<br>\nI think it helps ergonomics, especially in tests.</p>",
        "id": 186198107,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1579623156
    },
    {
        "content": "<p>I'd say it's worth discussing, but my gut is that people will be naturally wary of it. is there any sort of precedent for this behavior anywhere else in the stdlib?</p>",
        "id": 186198887,
        "sender_full_name": "bstrie",
        "timestamp": 1579623593
    },
    {
        "content": "<blockquote>\n<p>I'd say it's worth discussing, but my gut is that people will be naturally wary of it. is there any sort of precedent for this behavior anywhere else in the stdlib?</p>\n</blockquote>\n<p>Yes. <code>IpAddr(Ipv4Addr) == Ipv4Addr</code> it's not exactly the same because there are no user defined generics here, but close enough IMHO</p>",
        "id": 186202473,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1579625561
    },
    {
        "content": "<p>How would this feel when comparing an <code>Option&lt;Option&lt;T&gt;&gt;</code> with <code>None</code>?</p>",
        "id": 186213555,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1579632261
    },
    {
        "content": "<p>Arguably an IP address that happens to be of v4 variant <em>is</em> an IPv4 address</p>",
        "id": 186215724,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1579633595
    },
    {
        "content": "<p>But <code>Option</code> is often used where optionalness is significant</p>",
        "id": 186215785,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1579633641
    },
    {
        "content": "<blockquote>\n<p>How would this feel when comparing an <code>Option&lt;Option&lt;T&gt;&gt;</code> with <code>None</code>?</p>\n</blockquote>\n<p>Well that's a great point. sadly I think that point is more than enough to scrap the idea.</p>",
        "id": 186376394,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1579776028
    },
    {
        "content": "<p>I still think there's some merit, not as syntax with <code>==</code> but with a method like <code>option.deep_eq(foo)</code> or something, as in my experience <code>option.map_or(false, |x| x == y)</code> is a pretty common pattern when dealing with options.</p>",
        "id": 186377516,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1579777083
    },
    {
        "content": "<p>The <code>Option&lt;Option&lt;T&gt;&gt;</code> case also means you might hit trait coherence errors when implementing something like this</p>",
        "id": 186384030,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1579783125
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219747\">@Simon Sapin</span> Even in this case?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">deep_eq</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rhs</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">map_or</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">lhs</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">lhs</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">rhs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 186385193,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1579784014
    },
    {
        "content": "<p>That one looks probably fine because it only accepts <code>T</code> as a parameter. I meant for something that wants to accept either <code>T</code> or <code>Option&lt;T&gt;</code>, but even then it depends on the exact formulation</p>",
        "id": 186385505,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1579784254
    },
    {
        "content": "<blockquote>\n<p>How would this feel when comparing an <code>Option&lt;Option&lt;T&gt;&gt;</code> with <code>None</code>?</p>\n</blockquote>\n<p>Wouldn't this just be a type inference issue? Once you clarify <code>None::&lt;T&gt;</code> or <code>None::&lt;Option&lt;T&gt;&gt;</code>, it should be fine.</p>",
        "id": 186399733,
        "sender_full_name": "cuviper",
        "timestamp": 1579793475
    },
    {
        "content": "<p>But the new blanket impl does seem like a breaking change anyway</p>",
        "id": 186400013,
        "sender_full_name": "cuviper",
        "timestamp": 1579793613
    }
]