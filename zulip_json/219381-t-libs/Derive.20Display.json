[
    {
        "content": "<p>Would it be possible to derive core::fmt::Display when AsRef&lt;str&gt; exists?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[derive(Debug, Clone, Copy, core::fmt::Display)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">enum</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Bar</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"cm\">/*</span>\n<span class=\"cm\">impl core::fmt::Display for Foo {</span>\n<span class=\"cm\">    fn fmt(&amp;self, f: &amp;mut core::fmt::Formatter&lt;'_&gt;) -&gt; core::fmt::Result {</span>\n<span class=\"cm\">        f.write_str(self.as_ref())</span>\n<span class=\"cm\">    }</span>\n<span class=\"cm\">}</span>\n<span class=\"cm\">*/</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">AsRef</span><span class=\"o\">&lt;</span><span class=\"kt\">str</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">as_ref</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"kt\">str</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"s\">\"Foobar\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 257683056,
        "sender_full_name": "Bot+",
        "timestamp": 1634297533
    },
    {
        "content": "<p>(I think we should always be allowed to derive Display, but) that sounds reasonable.</p>",
        "id": 257705544,
        "sender_full_name": "Lokathor",
        "timestamp": 1634307706
    },
    {
        "content": "<p>Most derives are structural though, and this is clearly not</p>",
        "id": 257710812,
        "sender_full_name": "Gary Guo",
        "timestamp": 1634309730
    },
    {
        "content": "<p>Further more the derive macro has no idea if AsRef&lt;str&gt; is implemented</p>",
        "id": 257710865,
        "sender_full_name": "Gary Guo",
        "timestamp": 1634309753
    },
    {
        "content": "<p>I think this wants delegation more than <code>derive</code>.</p>",
        "id": 257792608,
        "sender_full_name": "scottmcm",
        "timestamp": 1634350813
    }
]