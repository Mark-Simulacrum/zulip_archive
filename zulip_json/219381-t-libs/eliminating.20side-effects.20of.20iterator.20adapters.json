[
    {
        "content": "<p>Eliminating side-effects from various iterator adapters could have some benefits<br>\na) performance, the best case scenario would be turning some infinite iterations into constant time!<br>\nb) simplification, especially around the unsafe code in <code>Zip</code><br>\nc) turn some bugs into sanctioned behavior (at least one of them is my fault, I'm biased here <span aria-label=\"kiss with blush\" class=\"emoji emoji-1f61a\" role=\"img\" title=\"kiss with blush\">:kiss_with_blush:</span><span aria-label=\"musical notes\" class=\"emoji emoji-1f3b6\" role=\"img\" title=\"musical notes\">:musical_notes:</span>)</p>\n<p>This could be introduced in a piecemeal fashion. Updating the documentation on the <code>iter</code> module to document that implementations <em>may</em> omit side-effects as long as they still produce the same final result. Then new methods could make use of it, e.g. the not yet stabilized <code>advance_by</code>.<br>\nBut updating <code>Zip</code> would be a breaking change and there are others too.</p>\n<p>And there are obvious downsides. Some side-effects are non-obvious and usually not intentional and thus easy to eliminate but others may be more likely to break user code when they're using iterators over <code>&amp;mut</code> or closures that capture mutable state. Worst case would be that they do all their logic in an <code>inspect</code> closure and then call <code>count()</code> or something similar.</p>\n<p>Should this go through an RFC? Would an incremental approach with crater runs along the way be fine? Is this even the right place or should I ask on IRLO?</p>",
        "id": 241428786,
        "sender_full_name": "The 8472",
        "timestamp": 1622743007
    },
    {
        "content": "<p>The existing methods likely won't be able to change here. But we could, I guess, add some new ones!</p>",
        "id": 241430129,
        "sender_full_name": "nagisa",
        "timestamp": 1622743679
    },
    {
        "content": "<p>Yeah, I don't think crater or rfcs are enough to consider things as side-effect free</p>",
        "id": 241430292,
        "sender_full_name": "simulacrum",
        "timestamp": 1622743766
    },
    {
        "content": "<p>It feels to me like <code>map</code> taking <code>FnMut</code>, for example, is an implicit promise that the side effects are preserved and predictable.</p>\n<p>A different version that only took <code>Fn</code>, though, would make skipping them seem reasonable to me, since while of course it's <em>possible</em> to use interior mutability to do things in that (well, or to just call functions with side effects), it feels way more sketchy to be relying upon it.</p>",
        "id": 241432159,
        "sender_full_name": "scottmcm",
        "timestamp": 1622744643
    },
    {
        "content": "<p>(Even though <code>Map</code>'s side effects for double-ended iterators are weird.)</p>",
        "id": 241432197,
        "sender_full_name": "scottmcm",
        "timestamp": 1622744663
    },
    {
        "content": "<p>rayon's version of <code>Map</code> does use <code>Fn</code>, by necessity, but I wouldn't think it at all weird for someone to increment an atomic or something along the way</p>",
        "id": 241432450,
        "sender_full_name": "cuviper",
        "timestamp": 1622744789
    },
    {
        "content": "<p>That <em>might</em> be possible to distinugish via specialization, but even then we would still be ignoring &amp;mut refs passed to the closure as iterator item.</p>",
        "id": 241432452,
        "sender_full_name": "The 8472",
        "timestamp": 1622744791
    },
    {
        "content": "<p>But ok, let's say we don't break existing methods, just remove buggy optimizations instead and move them to the new methods, what would the process then be? This would need duplication of many existing methods such as <code>inspect</code>, <code>filter</code>, <code>map</code>, <code>take</code>, <code>cloned</code>, <code>zip</code> and variants thereof.</p>",
        "id": 241432967,
        "sender_full_name": "The 8472",
        "timestamp": 1622745053
    },
    {
        "content": "<p>Seems like a fairly big change if it were done that way.</p>",
        "id": 241433280,
        "sender_full_name": "The 8472",
        "timestamp": 1622745192
    },
    {
        "content": "<p>I guess it'd need more info about how often the optimizations it could do happen to apply in \"real\" code.  Though that's admittedly super-hard to measure.</p>",
        "id": 241434502,
        "sender_full_name": "scottmcm",
        "timestamp": 1622745759
    },
    {
        "content": "<p>We had written a fair number of specializations over time that were later either removed or just not accepted because they would fail to consider side-effects.</p>",
        "id": 241436500,
        "sender_full_name": "nagisa",
        "timestamp": 1622746664
    },
    {
        "content": "<p>The most obvious cases would be <code>iter.map().skip()</code> behaving the same as <code>iter.skip().map()</code> and <code>iter.take().map().next_back()</code> not evaluating the tail at all. Of course there may be some additional adapters between the relevant ones and it would still optimize.</p>\n<p>For Zip it would be about<br>\nA) not equalizing the iterator length during the first backwards iteration step (similar to the take + next_back case)<br>\nB) not evaluating the remainder at when next() is called after  of forwards iteration returned <code>None</code> for the first time. For this case it could make sense to have a new method, that was proposed in <a href=\"https://github.com/rust-lang/rust/issues/85342\">#85342</a><br>\nBoth already are broken in some cases and at least B) could arguably be justified with existing code, i.e. iteration via counted loops instead of waiting for <code>next().is_none()</code>.</p>\n<p>But for other existing adapters like map/take etc. I'm it doesn't feel like it would be worth it to add new ones.</p>",
        "id": 241436617,
        "sender_full_name": "The 8472",
        "timestamp": 1622746703
    },
    {
        "content": "<p>A lot of them would provide significant-seeming benefits for comparatively common-looking iterator chains.</p>",
        "id": 241436623,
        "sender_full_name": "nagisa",
        "timestamp": 1622746704
    },
    {
        "content": "<p>.count() being able to just return the length for many iterators comes to mind.</p>",
        "id": 241436672,
        "sender_full_name": "nagisa",
        "timestamp": 1622746735
    },
    {
        "content": "<p>Yeah, that's another good one.</p>",
        "id": 241436706,
        "sender_full_name": "The 8472",
        "timestamp": 1622746749
    },
    {
        "content": "<p>We could let users opt into such optimizations but that may be unergonomic if they don't control the iterator source and it'll be hard to tell when it's beneficial etc. etc.</p>",
        "id": 241436891,
        "sender_full_name": "The 8472",
        "timestamp": 1622746813
    },
    {
        "content": "<p>maybe we can write MIR opts that know about iterator adapters and will reshuffle them if provably side-effect-free?</p>",
        "id": 241437059,
        "sender_full_name": "oli",
        "timestamp": 1622746893
    },
    {
        "content": "<p>most method chains on iterators look quite simple in MIR</p>",
        "id": 241437142,
        "sender_full_name": "oli",
        "timestamp": 1622746923
    },
    {
        "content": "<p>and we can be arbitrarily pessimistic in the \"no-side-effect\" checks</p>",
        "id": 241437204,
        "sender_full_name": "oli",
        "timestamp": 1622746950
    },
    {
        "content": "<p>reshuffling would work for the map + skip case, but not for take + next_back</p>",
        "id": 241437283,
        "sender_full_name": "The 8472",
        "timestamp": 1622747004
    },
    {
        "content": "<p>After some inlining and whatnot LLVM should be able to see what things are side-effect free quite often and remove them too.</p>",
        "id": 241437546,
        "sender_full_name": "nagisa",
        "timestamp": 1622747131
    },
    {
        "content": "<p>LLVM's concept of side-effect may not be the programmer's. e.g. an <code>.inspect(|x| println!(\"{}\", x))</code> would be an eliminatable side-effect for my purposes but certainly not for llvm.</p>",
        "id": 241437795,
        "sender_full_name": "The 8472",
        "timestamp": 1622747241
    },
    {
        "content": "<p>Yeah. For these MIR optimizations won't really help either. Because it needs some framework of proving side-effect-free-ness, and if you asked MIR if print is, then it definitely is a side-effect.</p>",
        "id": 241438040,
        "sender_full_name": "nagisa",
        "timestamp": 1622747345
    },
    {
        "content": "<p>I guess I'll start smaller then. Revert current breakage. A documentation update that adapters <em>may</em> elide side-effects, which will help future or 3rd-party adapters. Then <code>zip_exact</code>. And maybe experiment with specializing on Fn vs. FnMut and see if that works. The team can still tell me to write an RFC at any point <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span>‍♂️</p>",
        "id": 241438956,
        "sender_full_name": "The 8472",
        "timestamp": 1622747780
    },
    {
        "content": "<p>Another uncooked idea: What if we add a new generic argument to the Adapters that take closures? E.g. <code>Map&lt;I, F, Effects=Keep&gt;</code>. Could an edition change then somehow flip the default to <code>Map&lt;I, F, Effects=Skippable&gt;</code> by changing the return types on the <code>Iterator</code> methods?</p>",
        "id": 245718334,
        "sender_full_name": "The 8472",
        "timestamp": 1626110559
    },
    {
        "content": "<p>By \"changing\" I mean that different editions see different methods under the same name.</p>",
        "id": 245719153,
        "sender_full_name": "The 8472",
        "timestamp": 1626110922
    }
]