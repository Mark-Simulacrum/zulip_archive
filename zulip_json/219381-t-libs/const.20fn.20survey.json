[
    {
        "content": "<p>There have been frequent misunderstanding for <code>const fn</code> which <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> have been receiving every month IIRC. People (including myself) thought that using <code>const fn</code> is able to allow the compiler to optimize the binary better but it was just to allow using functions to assign to <code>const</code>. What do you all think? Should we start a survey so we know others understanding and if possible figure out how to solve the misunderstanding?</p>",
        "id": 209587761,
        "sender_full_name": "pickfire",
        "timestamp": 1599701220
    },
    {
        "content": "<p>I don't see how a survey would help clear up confusion - more, better documentation. We could add an item to the library guidelines. I suspect it's mostly not a libs concern though? It feels lang-y.</p>",
        "id": 209588285,
        "sender_full_name": "simulacrum",
        "timestamp": 1599702038
    },
    {
        "content": "<p>If it's assigning to <code>const</code> isn't the compiler then doing constant propagation?</p>",
        "id": 209595060,
        "sender_full_name": "oliver",
        "timestamp": 1599712329
    },
    {
        "content": "<p>\"constant propagation\" in most Rust discussion contexts usually references implicit constant folding done at compile time without specific request to the compiler.<br>\nWhat is done when a <code>const</code> is assigned-to with a non-immediate value is sometimes  referred to as \"compile-time function evaluation\".</p>",
        "id": 209595306,
        "sender_full_name": "Jubilee",
        "timestamp": 1599712747
    },
    {
        "content": "<p>I think the key point of common confusion here is that <em>outside of a const declaration</em> the compiler can compile-time evaluate, or not evaluate, any expression it chooses. Only a const declaration <em>forces</em> the compile-time evaluation.</p>\n<p>And <em>outside of a const declaration</em> it doesn't matter if a function call is to a <code>fn</code> or a <code>const fn</code>, the call might or might not be compile-time evaluated by the whim of the optimizer.</p>",
        "id": 209601255,
        "sender_full_name": "Lokathor",
        "timestamp": 1599720588
    },
    {
        "content": "<p>Yeah, I don't think a survey would help here. Better docs and maybe some blog posts might.</p>",
        "id": 209601738,
        "sender_full_name": "RalfJ",
        "timestamp": 1599721065
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> <a href=\"#narrow/stream/219381-t-libs/topic/const.20fn.20survey/near/209595306\">said</a>:</p>\n<blockquote>\n<p>\"constant propagation\" in most Rust discussion contexts usually references implicit constant folding done at compile time without specific request to the compiler.<br>\nWhat is done when a <code>const</code> is assigned-to with a non-immediate value is sometimes  referred to as \"compile-time function evaluation\".</p>\n</blockquote>\n<p>Would you care to elaborate on the differences between implicit constant folding and compile-time function evaluation in the Rust compiler context?</p>",
        "id": 209630642,
        "sender_full_name": "oliver",
        "timestamp": 1599740938
    },
    {
        "content": "<p>I'm curious where all of this happens in the code.</p>",
        "id": 209631100,
        "sender_full_name": "oliver",
        "timestamp": 1599741190
    },
    {
        "content": "<blockquote>\n<p>Would you care to elaborate on the differences between implicit constant folding and compile-time function evaluation in the Rust compiler context?</p>\n</blockquote>\n<p>I think one is guarantee and other is not.</p>",
        "id": 209631547,
        "sender_full_name": "lzutao",
        "timestamp": 1599741402
    },
    {
        "content": "<p>Right, so is the compiler actually sorting that out for functions or not? In theory it would.</p>",
        "id": 209631972,
        "sender_full_name": "oliver",
        "timestamp": 1599741602
    },
    {
        "content": "<p>Correct.<br>\nIn CTFE, any nontrivial CTFE is is an attempted execution by the built-in interpreter, miri, I believe? And if it fails, that is returned to the programmer as an error. In implicit constant folding, a few different things can happen. I believe miri and the const-eval infrastructure in general can nudge that along, but also LLVM is capable of doing constant folding on its own.</p>",
        "id": 209632237,
        "sender_full_name": "Jubilee",
        "timestamp": 1599741719
    },
    {
        "content": "<p>I agree that a blog post on this would be fascinating.</p>",
        "id": 209634116,
        "sender_full_name": "oliver",
        "timestamp": 1599742570
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281739\">@Oliver</span> Heh, sounds like I successfully found others like me here.</p>",
        "id": 209671210,
        "sender_full_name": "pickfire",
        "timestamp": 1599754708
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> I fell like just posting it here even helped someone like <span class=\"user-mention\" data-user-id=\"281739\">@Oliver</span>. Maybe every time we post something regarding to <code>const fn</code> we should always put this as a note, <code>const fn</code> is not for optimization like others think, it is just allowing the function to be runned in a <code>const</code> variable context.</p>",
        "id": 209671376,
        "sender_full_name": "pickfire",
        "timestamp": 1599754797
    },
    {
        "content": "<p>Yes, blog posted definitely works better than survey. <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> mentioned that he was interested in writing a blog regarding this but he have a few other blog posts in mind before this.</p>",
        "id": 209671588,
        "sender_full_name": "pickfire",
        "timestamp": 1599754883
    },
    {
        "content": "<p>I'm not even sure what would go in a blog post about this to make it fascinating.</p>",
        "id": 209676356,
        "sender_full_name": "Lokathor",
        "timestamp": 1599756892
    },
    {
        "content": "<p>A technical summary of constant propagation. Maybe more enlightening than fascinating but that depends on the reader, I'm easily impressed I guess :P</p>",
        "id": 209684515,
        "sender_full_name": "oliver",
        "timestamp": 1599760621
    },
    {
        "content": "<p>Well there is already this of course: <a href=\"https://rustc-dev-guide.rust-lang.org/borrow_check/region_inference/constraint_propagation.html\">https://rustc-dev-guide.rust-lang.org/borrow_check/region_inference/constraint_propagation.html</a></p>",
        "id": 209684605,
        "sender_full_name": "oliver",
        "timestamp": 1599760662
    },
    {
        "content": "<p>So for CTFE maybe it's equally suited to beings a dev-docs addition as it is to a blog, to be fair to everyone here my coverage of the existing literature is in the lowest percentile</p>",
        "id": 209685198,
        "sender_full_name": "oliver",
        "timestamp": 1599760877
    },
    {
        "content": "<p>Like I didn't know constant propagation was documented until just now</p>",
        "id": 209687355,
        "sender_full_name": "oliver",
        "timestamp": 1599761771
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281739\">Oliver</span> <a href=\"#narrow/stream/219381-t-libs/topic/const.20fn.20survey/near/209684605\">said</a>:</p>\n<blockquote>\n<p>Well there is already this of course: <a href=\"https://rustc-dev-guide.rust-lang.org/borrow_check/region_inference/constraint_propagation.html\">https://rustc-dev-guide.rust-lang.org/borrow_check/region_inference/constraint_propagation.html</a></p>\n</blockquote>\n<p>constraint propagation and constant propagation have basically nothing to do with each other besides being spelled similar ;)</p>",
        "id": 209755490,
        "sender_full_name": "RalfJ",
        "timestamp": 1599814594
    },
    {
        "content": "<p>Oof :)</p>",
        "id": 209778841,
        "sender_full_name": "oliver",
        "timestamp": 1599830139
    },
    {
        "content": "<p>Tl;DR bites back</p>",
        "id": 209779012,
        "sender_full_name": "oliver",
        "timestamp": 1599830216
    },
    {
        "content": "<p>i don't blame you Oliver, i had to read Ralf's message a couple of times to realise it wasn't a \"X and X are two different things\" <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 209779129,
        "sender_full_name": "DPC",
        "timestamp": 1599830279
    },
    {
        "content": "<p>yeah those two words do look rather similar^^</p>",
        "id": 209785883,
        "sender_full_name": "RalfJ",
        "timestamp": 1599833809
    },
    {
        "content": "<p>Someone did a post already <a href=\"https://www.reddit.com/r/rust/comments/iksmgk/psa_what_is_const_fn/\">https://www.reddit.com/r/rust/comments/iksmgk/psa_what_is_const_fn/</a>, but it didn't mention specifically that <code>const fn</code> does not help improving compilation performance, still it should already clarify stuff a bit.</p>",
        "id": 209799155,
        "sender_full_name": "pickfire",
        "timestamp": 1599839781
    },
    {
        "content": "<p>It's isn't optimized because the work is being done in LLVM/has already been lowered to LLVM?</p>",
        "id": 209811931,
        "sender_full_name": "oliver",
        "timestamp": 1599846000
    },
    {
        "content": "<p>it has no automatic optimization difference.</p>",
        "id": 209813264,
        "sender_full_name": "Lokathor",
        "timestamp": 1599846669
    },
    {
        "content": "<p>(and it hasn't been demonstrated to be useful as an optimization clue -- not even C++ uses it, beyond it being an \"inline\" hint)</p>",
        "id": 209829362,
        "sender_full_name": "RalfJ",
        "timestamp": 1599855096
    },
    {
        "content": "<p>So you are saying that in practice CTFE involves a code expansion (inlining - which does happens) but not a reduction to something actually treated as one might expect of a constant?</p>",
        "id": 209886279,
        "sender_full_name": "oliver",
        "timestamp": 1599925067
    },
    {
        "content": "<p>Oh well I just found this: <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/.22const.20or.20bail.20to.20dynamic.22.20possible.3F/near/209761074\">https://rust-lang.zulipchat.com/#narrow/stream/146212-t-compiler.2Fconst-eval/topic/.22const.20or.20bail.20to.20dynamic.22.20possible.3F/near/209761074</a></p>",
        "id": 209889500,
        "sender_full_name": "oliver",
        "timestamp": 1599929149
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281739\">Oliver</span> <a href=\"#narrow/stream/219381-t-libs/topic/const.20fn.20survey/near/209886279\">said</a>:</p>\n<blockquote>\n<p>So you are saying that in practice CTFE involves a code expansion (inlining - which does happens) but not a reduction to something actually treated as one might expect of a constant?</p>\n</blockquote>\n<p>no, CTFE involves nothing of the sort. we have an interpreter that can evaluate MIR code directly.</p>",
        "id": 209927971,
        "sender_full_name": "RalfJ",
        "timestamp": 1599998797
    },
    {
        "content": "<p><a href=\"https://rustc-dev-guide.rust-lang.org/const-eval.html\">https://rustc-dev-guide.rust-lang.org/const-eval.html</a> has some more detail</p>",
        "id": 209927986,
        "sender_full_name": "RalfJ",
        "timestamp": 1599998840
    }
]