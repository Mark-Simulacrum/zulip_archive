[
    {
        "content": "<p>I just ran into some folks on Reddit who had no idea that mpsc had issues, and were happily using it without any knowledge of that.</p>",
        "id": 267531370,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1641870398
    },
    {
        "content": "<p>What would be the blocker for attaching a <code>deprecated</code> to mpsc, or at least a <code>deprecated_future</code>?</p>",
        "id": 267531390,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1641870420
    },
    {
        "content": "<p>I also had no idea that mpsc has issues; what issues are there?</p>",
        "id": 267531670,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641870721
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/39364\">https://github.com/rust-lang/rust/issues/39364</a></p>",
        "id": 267531715,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1641870741
    },
    {
        "content": "<p>It has a <a href=\"https://doc.rust-lang.org/book/ch16-02-message-passing.html\">whole chapter</a> in The Book, which seems misleading if it's not supposed to be used</p>",
        "id": 267531788,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641870836
    },
    {
        "content": "<p>I agree entirely!</p>",
        "id": 267532016,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1641870999
    },
    {
        "content": "<p>Here's the subthread where this came up: <a href=\"https://www.reddit.com/r/rust/comments/rz8fjv/how_to_push_an_err_condition_to_mpscchannelstring/hrvg3nj/\">https://www.reddit.com/r/rust/comments/rz8fjv/how_to_push_an_err_condition_to_mpscchannelstring/hrvg3nj/</a></p>",
        "id": 267532385,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1641871421
    },
    {
        "content": "<p>if the current mspc is deprecated, then the need to bring one of the <a href=\"http://crates.io\">crates.io</a> alternatives into std would greatly increase. I have no opinion on exactly which one, but std needs to offer <em>some</em> version of this.</p>",
        "id": 267539889,
        "sender_full_name": "Lokathor",
        "timestamp": 1641880909
    },
    {
        "content": "<p>I mean, if it's broken, then there's a significant need to do that now. Deprecating would just formalize that, wouldn't it?</p>",
        "id": 267547835,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1641888007
    },
    {
        "content": "<p>Isn't it sufficient to deprecate <code>recv_timeout()</code>?</p>",
        "id": 267547897,
        "sender_full_name": "Hans Kratz",
        "timestamp": 1641888027
    },
    {
        "content": "<p>personally, i'm not quite sold on deprecating it. how much has the \"replace it with a trivially correct, but perhaps not fastest, implementation\" been explored? i think i would like that better instead of just completely declaring defeat.</p>",
        "id": 267575420,
        "sender_full_name": "BurntSushi",
        "timestamp": 1641905127
    },
    {
        "content": "<p>There have been discussions in several libs meetings, replacing it with a trivial implementation or wrapping an existing crate (which likely would have to be moved into the rust-lang org) were options. I don't recall if any consensus was reached.</p>",
        "id": 267594729,
        "sender_full_name": "The 8472",
        "timestamp": 1641913783
    },
    {
        "content": "<p>if someone wants to fix the mpsc implementation, that effort would be very welcome. but no one seems to have the time and expertise to do that</p>",
        "id": 267605744,
        "sender_full_name": "Mara",
        "timestamp": 1641918080
    },
    {
        "content": "<p>I believe there is a consensus on just importing flume into the standard library, it's just that nobody has gotten around to it yet.</p>",
        "id": 267608069,
        "sender_full_name": "Amanieu",
        "timestamp": 1641918936
    },
    {
        "content": "<p>flume has quite a few dependencies though, making that tricky. but maybe just taking the relevant parts could work, if the flume authors are happy with that.</p>",
        "id": 267608324,
        "sender_full_name": "Mara",
        "timestamp": 1641919040
    },
    {
        "content": "<p>Isn't it just <code>spin</code>? Everything else seems to be a dev dependency or optional.</p>",
        "id": 267608805,
        "sender_full_name": "Hans Kratz",
        "timestamp": 1641919223
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/219381-t-libs/topic/Deprecating.20mpsc/near/267539889\">said</a>:</p>\n<blockquote>\n<p>std needs to offer <em>some</em> version of this.</p>\n</blockquote>\n<p>It's not completely obvious to me that, if we <em>didn't</em> have <code>mpsc</code> already, we'd <em>need</em> to add something like this rather than refer to <a href=\"http://crates.io\">crates.io</a>.</p>",
        "id": 267615706,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1641922025
    },
    {
        "content": "<p>Regarding flume: my understanding was that the hardest part would be making flume fully <code>no_std</code> so that it could build without circular dependencies on <code>std</code>.</p>",
        "id": 267615802,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1641922067
    },
    {
        "content": "<p>flume can't be <code>no_std</code> because it needs to block, access to time, etc. The only way to integrate it into std is by copying the code over and adapting it.</p>",
        "id": 267616145,
        "sender_full_name": "Amanieu",
        "timestamp": 1641922211
    },
    {
        "content": "<p>That seems...unfortunate, especially if we're not going to adopt and expose its full feature set, and thus it would still need to exist as a standalone crate as well.</p>",
        "id": 267616292,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1641922285
    },
    {
        "content": "<p>maybe we could use the same hacks that were used for stdsimd? <code>#[path]</code> + submodule?</p>",
        "id": 267616442,
        "sender_full_name": "The 8472",
        "timestamp": 1641922351
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"222471\">BurntSushi</span> <a href=\"#narrow/stream/219381-t-libs/topic/Deprecating.20mpsc/near/267575420\">said</a>:</p>\n<blockquote>\n<p>personally, i'm not quite sold on deprecating it. how much has the \"replace it with a trivially correct, but perhaps not fastest, implementation\" been explored? i think i would like that better instead of just completely declaring defeat.</p>\n</blockquote>\n<p>My impression is that people are supportive of doing that, but someone would actually have to write that new implementation.</p>",
        "id": 267616476,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1641922372
    },
    {
        "content": "<p>I used Flume for a while and kind of think it needs a few fixes. It uses spinlocks rather than OS mutexes on unix (which has no business in the standard library). I've had some surprising behavior (rare deadlocks which for the most part I never was able to reproduce particularly frequently; or at least the one case where I was able to repro it got fixed). That is: IMO we should be careful of replacing std::sync::mpsc with something that brings its own set of problems, given that mpsc has gotten so much more production testing.</p>\n<p>Another note is: I would be cautious of the performance claims, the benchmarks it has are... not comprehensive (mostly benchmarking large numbers of threads all using the same channel and similar cases — real applications have many threads doing other things and such). Anecdotally, I ended up seeing an improvement when I went back to the std channels several months ago, although at the time I had convinced myself that the bugs weren't there anymore or were overblown (which seems to have been delusional <span aria-label=\"scream cat\" class=\"emoji emoji-1f640\" role=\"img\" title=\"scream cat\">:scream_cat:</span>), but that could have just been my usage pattern.</p>\n<p>But to be clear: I don't think worse perf is a dealbreaker, just that I'd caution against using performance numbers to justify a switch without further testing, and I expect that if we do switch, it may need various changes and improvements to get \"up to snuff\" as it were.</p>",
        "id": 267645419,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1641935418
    },
    {
        "content": "<p>How \"perhaps not fastest\" is likely to be accepted?  Like, if I rewrite the implementation to use Arc&lt;Mutex&lt;VecDeque&lt;T&gt;&gt;&gt; would that be preferable to the current implementation?</p>",
        "id": 267727345,
        "sender_full_name": "Tavian Barnes",
        "timestamp": 1641995885
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306504\">@Tavian Barnes</span> i'm personally fine with that. i think the \"just use a mutex\" solution is likely good enough for a lot of cases.</p>",
        "id": 267727848,
        "sender_full_name": "BurntSushi",
        "timestamp": 1641996089
    },
    {
        "content": "<p>Cool.  No promises, but if I get time I'll try to PR that</p>",
        "id": 267728618,
        "sender_full_name": "Tavian Barnes",
        "timestamp": 1641996413
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306504\">@Tavian Barnes</span> Isn't that what flume uses internally?</p>",
        "id": 267728668,
        "sender_full_name": "Urgau",
        "timestamp": 1641996435
    },
    {
        "content": "<p>After staring at mpsc for an hour now as an outsider, naively thinking \"how hard can it be to fix this particular issue\", I have to say I am stumped by the stupendous complexity of the current implementation.</p>",
        "id": 267728849,
        "sender_full_name": "Hans Kratz",
        "timestamp": 1641996504
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"327095\">@Urgau</span> Basically yeah, I didn't realize that.  It uses spinlocks instead of mutexes though on some platforms.</p>",
        "id": 267729624,
        "sender_full_name": "Tavian Barnes",
        "timestamp": 1641996873
    },
    {
        "content": "<p>I suppose the use of spinlocks is when there are no Mutex implementation for that platform ?</p>",
        "id": 267729755,
        "sender_full_name": "Urgau",
        "timestamp": 1641996942
    },
    {
        "content": "<p>The \"simplest\" thing to do might be to try copy/paste flume into the standard library (like suggested before) instead of trying to redo a complete implementation from scratch .</p>",
        "id": 267730244,
        "sender_full_name": "Urgau",
        "timestamp": 1641997188
    },
    {
        "content": "<p>Hm, flume seems to have recently made using an internal spinlock an optional feature: <a href=\"https://github.com/zesterer/flume/commit/de20ddf5476e6e5816e6db9765775752f86603ee\">https://github.com/zesterer/flume/commit/de20ddf5476e6e5816e6db9765775752f86603ee</a></p>",
        "id": 267731129,
        "sender_full_name": "Chris Denton",
        "timestamp": 1641997529
    },
    {
        "content": "<blockquote>\n<p>I suppose the use of spinlocks is when there are no Mutex implementation for that platform ?</p>\n</blockquote>\n<p>At the time it on all unix, because pthread_mutex_t was apparently too slow (which might be true, but the nature of things is that for various reasons spinning will almost always look better in microbenchmarks, but do worse in real code). That said, I'm happy to see they've fixed that, I should have looked.</p>",
        "id": 267822932,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1642048449
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407656\">Hans Kratz</span> <a href=\"#narrow/stream/219381-t-libs/topic/Deprecating.20mpsc/near/267728849\">said</a>:</p>\n<blockquote>\n<p>After staring at mpsc for an hour now as an outsider, naively thinking \"how hard can it be to fix this particular issue\", I have to say I am stumped by the stupendous complexity of the current implementation.</p>\n</blockquote>\n<p>The current implementation has reasonably good docs, but is complicated by a lot of things:</p>\n<ol>\n<li>\n<p>The fact that it's several implementations (oneshot, spsc, mpsc) that get switched between based on usage</p>\n<p>- starts as oneshot, upgrades to SPSC on 2nd send. either oneshot/spsc upgrae to spsc when the producer is cloned.</p>\n</li>\n<li>\n<p>The queue algorithms it uses don't all have the delivery ordering guarantees we need, e.g. the MPSC has an edge case where a later item can be delivered first, which it has to detect and work around.</p>\n</li>\n<li>Use of pools to avoid allocation overhead on each send, but the pools are also complicated because they need to maintain a fixed maximum.</li>\n<li>Being structured in such a way as to support several legacy features (select, the pre-1.0 green thread runtime, ...), which it doesn't support, but you can still feel their impact in how the code is organized.</li>\n<li>Probably other stuff. A lot of algorithms in the wild or in literature don't need to detect sender disconnection, for example. Not that I think it's really a factor.</li>\n</ol>\n<p>I actually do think we could fix the current implementation, but it would start by cutting at these optimizations (upgrade logic and pooling are most suspect IMO). It would also probably require a reliable case that triggers it, which IDK if I've seen.</p>\n<p>Anyway, I think we should just use another impl that's more obviously correct even if it's slower. I'm really not generally in favor of subpar things in the stdlib, but... this one has a bad name which reflects its limitations (mpsc),  I think/hope it will be easier to implement a good queue in the future (when the situation with the other less-than-ideal parts of std::sync are more resolved), at which point we can deprecate it for real and move to a better implementation (or implementations — IMO we really should not repeat the auto-upgrade mistake when it would be easy for us to enforce correct usage in the type system).</p>",
        "id": 267825108,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1642050961
    },
    {
        "content": "<p>Devils advocate being that \"add more mutexes\" is only becoming less and less reasonable for a core concurrency primitive, so perhaps deprecating it and pointing people in the direction of something more scalable would be better.</p>\n<p>But I probably don't really believe this (a better queue will not really save a program thats bottlenecked on a single channel). And the <code>sync_channel</code> already does just use a Mutex, IIRC.</p>",
        "id": 267825404,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1642051318
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"209168\">Thom Chiovoloni</span> <a href=\"#narrow/stream/219381-t-libs/topic/Deprecating.20mpsc/near/267825108\">said</a>:</p>\n<blockquote>\n<p>I actually do think we could fix the current implementation, but it would start by cutting at these optimizations (upgrade logic and pooling are most suspect IMO). It would also probably require a reliable case that triggers it, which IDK if I've seen.</p>\n</blockquote>\n<p>We do have a deterministic reproducer (see <a href=\"https://github.com/rust-lang/rust/issues/39364#issuecomment-1009737562\">this comment</a>) in issue <a href=\"https://github.com/rust-lang/rust/issues/39364\">#39364</a>. The problem is that the current oneshot/stream -&gt; shared upgrade is implemented without waking up a currently waiting receiver. This was written under the assumption that the receiver only wakes if there is data in the channel. That is obviously not true for <code>recv_timeout()</code>. Like others in the issue comments I have locally fixed the one problem that oberien described, namely that the waiter is not properly deregistered on the new shared channel in the timeout case, but fixing that is not enough - the <code>cnt</code> and <code>steals</code> values are also wrong in the timeout case and trigger assertions.</p>\n<p>Even if that is fixed it is likely that more issues are lurking - e.g. this panic described in  <a href=\"https://github.com/rust-lang/rust/issues/39364#issuecomment-438861408\">this comment</a> or the ones found after an attempted fix (see <a href=\"https://github.com/rust-lang/rust/issues/39364#issuecomment-529654951\">this comment</a>).</p>",
        "id": 267833779,
        "sender_full_name": "Hans Kratz",
        "timestamp": 1642060000
    },
    {
        "content": "<p>Note that the original author (<span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span>) has explicitly encouraged us to throw the existing code away and replace it with something simpler.</p>",
        "id": 267834968,
        "sender_full_name": "Amanieu",
        "timestamp": 1642060983
    },
    {
        "content": "<p>I realise this is a deep discussion and I'm an outsider (and don't even understand the motivating issue fully), but my 2c anyway: deprecating or even changing such an important and widely used item would be a huge thing to do. If y'all do it, it must be properly communicated and telegraphed to the community. Just sticking a deprecated attribute in the code would be a disaster. I would expect a loudly promoted blog post, some public discussion, possibly an RFC, and extensive documentation changes, and even that might not be enough.</p>",
        "id": 267841693,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1642065323
    },
    {
        "content": "<p>More importantly I don't think you should even consider the question of 'should we deprecate mpsc?' in isolation. There should be a vision/plan for the long-term future of the concurrency primitives and you should work backwards from that to what should be done now for this particular channel</p>",
        "id": 267841907,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1642065434
    },
    {
        "content": "<p>i agree the switching behaviour is something we could get rid of. we could have a separate OneShotChannel or something, and then not support a specific oneshot mode for the mpsc channel</p>",
        "id": 267856506,
        "sender_full_name": "Mara",
        "timestamp": 1642073757
    },
    {
        "content": "<blockquote>\n<p>But I probably don't really believe this (a better queue will not really save a program thats bottlenecked on a single channel). </p>\n</blockquote>\n<p>This isn't just a matter of throughput. The producers could also suffer latency when they're contending on the submission side which could be much lower with a lockless queue.</p>",
        "id": 267858654,
        "sender_full_name": "The 8472",
        "timestamp": 1642075099
    },
    {
        "content": "<p>Just throwing it out there, I think deprecating <code>sync::mpsc</code> and pulling in crossbeam-channel as <code>sync::mpmc</code> would be a welcome change. I've run into needing <code>Sender</code> and <code>Receiver</code> to both be <code>Sync</code> on almost every project I've worked on involving channels. While crossbeam-channel is a large complicated crate in it's own right, it's heavily user tested,  has no know bugs (<a href=\"https://github.com/crossbeam-rs/crossbeam/issues?q=is%3Aissue+is%3Aopen+label%3Abug\">as far as I can tell</a>), zero required dependencies, and is <em>very</em> well documented. I understand skepticism about pulling such a large dependency into the standard library, but it's worth considering.</p>",
        "id": 267896443,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1642092567
    },
    {
        "content": "<p>crossbeam doesn't optimize for the oneshot case <a href=\"https://github.com/crossbeam-rs/crossbeam/issues/199\">(#199)</a>; all channels use fixed flavors decided on creation, without having to handle upgrades.</p>",
        "id": 267900088,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1642093929
    },
    {
        "content": "<p><code>crossbeam-channel</code> also requires <code>crossbeam-utils</code>, which in turn requires <code>lazy_static</code></p>",
        "id": 267902719,
        "sender_full_name": "cuviper",
        "timestamp": 1642095002
    },
    {
        "content": "<p>but maybe those could be worked around or removed if we inlined and stripped unused stuff</p>",
        "id": 267902813,
        "sender_full_name": "cuviper",
        "timestamp": 1642095027
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"138448\">cuviper</span> <a href=\"#narrow/stream/219381-t-libs/topic/Deprecating.20mpsc/near/267902719\">said</a>:</p>\n<blockquote>\n<p><code>crossbeam-channel</code> also requires <code>crossbeam-utils</code>, which in turn requires <code>lazy_static</code></p>\n</blockquote>\n<p>Ah, I thought that was an optional dependency, but it looks like it's effectively required.</p>",
        "id": 267903352,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1642095259
    },
    {
        "content": "<p>It looks like it's needed only for <code>Backoff</code>, <code>CachePadded</code>, and <code>AtomicCell</code>. The first two are easily inline, the latter might take some more work.</p>",
        "id": 267903708,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1642095407
    },
    {
        "content": "<p>Could <code>AtomicCell&lt;Instant&gt;</code> be packed into an <code>AtomicUsize</code>?</p>",
        "id": 267903817,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1642095464
    },
    {
        "content": "<p>Maybe not, I suppose it could be replaced with a mutex. <code>AtomicCell</code> is difficult to inline because it's behavior is different on different architectures.</p>",
        "id": 267904281,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1642095676
    },
    {
        "content": "<p>Ah actually, it's only used for the <code>tick</code> channel, I don't think std would need it.</p>",
        "id": 267904523,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1642095770
    },
    {
        "content": "<p>For the parts we would need, crossbeam-channel is ~750 lines less than the current implementation.</p>",
        "id": 267905403,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1642096166
    },
    {
        "content": "<p>As a first step, the implementation for mpsc could be replaced with crossbeam-channel with no breaking changes, and <code>sync::mpmc</code> could be exposed later.</p>",
        "id": 267905861,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1642096379
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"363998\">@Ibraheem Ahmed</span> if you're keen, this sounds like a worthwhile experimental PR, at least</p>",
        "id": 267908269,
        "sender_full_name": "cuviper",
        "timestamp": 1642097420
    },
    {
        "content": "<p>Sure, I was wondering if a PR would help get the ball rolling, or if it would make more sense for T-libs to make a decision first.</p>",
        "id": 267908364,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1642097475
    },
    {
        "content": "<p>IMO, we could use a spur into action, showing that this is actually feasible</p>",
        "id": 267908527,
        "sender_full_name": "cuviper",
        "timestamp": 1642097544
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"363998\">@Ibraheem Ahmed</span> To confirm, are you proposing to copy-paste crossbeam-channel into the standard library, or modify the standard library to depend on it?</p>",
        "id": 267971836,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1642135430
    },
    {
        "content": "<p>Separate from that: for the purposes of copying a known-working implementation, this probably doesn't matter very much, but if we intend to continue evolving the result as something people are actively using, I'd love to base it on something that supports async.</p>",
        "id": 267971915,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1642135559
    },
    {
        "content": "<p>I regularly use channels where one end is sync and the other is async, and while I think for a first pass we should just transparently replace mpsc, if we're actually replacing it with a reasonable implementation I hope we one day have async methods as well.</p>",
        "id": 267971981,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1642135645
    },
    {
        "content": "<p>I can't imagine that anything with as many choices as channels (sync vs async, for example) would ever get added to <code>std</code> today if it were new.  So I really like the \"discourage the std's one use, remove the complicated bits from the implementation, and let people use a crate\" solution.</p>",
        "id": 267974265,
        "sender_full_name": "scottmcm",
        "timestamp": 1642138234
    },
    {
        "content": "<p>Whether we do or do not decide to expand the channel capability in <code>std</code> eventually, I don't think the current replacement plan needs to foresee that.</p>",
        "id": 267977370,
        "sender_full_name": "cuviper",
        "timestamp": 1642142573
    },
    {
        "content": "<p>As long as we're keeping the API facade, it just needs to improve the current situation. If it gets ripped out again later and replaced with something even more flexible, that will be fine too.</p>",
        "id": 267977434,
        "sender_full_name": "cuviper",
        "timestamp": 1642142646
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> Both would work, but modifying the standard-library to depend on it would probably be more work.</p>",
        "id": 268013286,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1642167063
    },
    {
        "content": "<p>I agree that the focus right now should be on fixing an existing problem, and new functionality can be added later.</p>",
        "id": 268013343,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1642167094
    },
    {
        "content": "<p>Sync/Async API split in std is still an open question.</p>",
        "id": 268013373,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1642167111
    },
    {
        "content": "<p>Modifying crossbeam to support async should be as simple as replacing the internal waker mechanism with an enum.</p>",
        "id": 268013930,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1642167407
    },
    {
        "content": "<p>Opened <a href=\"https://github.com/rust-lang/rust/pull/93563\">https://github.com/rust-lang/rust/pull/93563</a>.</p>",
        "id": 270298745,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1643754493
    },
    {
        "content": "<p>I don’t know if Zulip or PR comments are better to discuss this, but what’s the maintenance story for <code>std::sync::mpmc</code> v.s. <code>crossbeam-channel</code>? <a href=\"https://github.com/rust-lang/rust/pull/93563#issuecomment-1028923738\">https://github.com/rust-lang/rust/pull/93563#issuecomment-1028923738</a></p>",
        "id": 270540546,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1643891498
    },
    {
        "content": "<p>it's a bike-shed thing, but if we deprecate <code>mpsc</code>, I'd rather call the new thing just <code>channel</code> instead of the cryptic name</p>",
        "id": 270578269,
        "sender_full_name": "cuviper",
        "timestamp": 1643906405
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> Of the options we talked about in the meeting, I don't think any of them was to deprecate mpsc <em>and</em> introduce a new thing.</p>",
        "id": 270579061,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1643906698
    },
    {
        "content": "<p>well that's what the PR is suggesting long-term, and I think that's not a bad idea. if we fix the existing thing, and in the process have something that would be fine with multi-consumer, then \"sc\" is an unnecessary restriction baked in the name.</p>",
        "id": 270579354,
        "sender_full_name": "cuviper",
        "timestamp": 1643906814
    },
    {
        "content": "<p>agreed that \"mpsc\" is rather opaque jargon</p>",
        "id": 270581839,
        "sender_full_name": "bstrie",
        "timestamp": 1643907695
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> It seems like we have three options:<br>\n1) Deprecate, without fixing.<br>\n2) Fix, but still deprecate.<br>\n3) Fix, and expand further in the future.</p>\n<p>(3) would involve introducing a new thing but wouldn't involve deprecation; (1) and (2) would involve deprecation and I don't think it would make sense to introduce a new name in those cases.</p>",
        "id": 270598041,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1643914031
    },
    {
        "content": "<p>But yes, in general I agree that <code>channel</code> is a much better name.</p>",
        "id": 270598106,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1643914074
    },
    {
        "content": "<p>why is deprecation not part of 3 if we give the expansion a new name?</p>",
        "id": 270598345,
        "sender_full_name": "cuviper",
        "timestamp": 1643914190
    },
    {
        "content": "<p>i.e. have a fixed <code>mpsc</code>, but nudge people toward the superior <code>channel</code></p>",
        "id": 270598423,
        "sender_full_name": "cuviper",
        "timestamp": 1643914209
    },
    {
        "content": "<p>The bar for renaming things in std is pretty high since the old name needs to continue to exist anyway.</p>",
        "id": 270598754,
        "sender_full_name": "The 8472",
        "timestamp": 1643914363
    },
    {
        "content": "<p>Yeah. I don't think we'd mark something deprecated just to rename it.</p>",
        "id": 270599480,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1643914663
    },
    {
        "content": "<p>If we <em>did</em> add mpmc functionality, I'd absolutely call <em>that</em> <code>channel</code>, but I wouldn't deprecate <code>mpsc</code> in that case.</p>",
        "id": 270599559,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1643914684
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"219747\">Simon Sapin</span> <a href=\"#narrow/stream/219381-t-libs/topic/Deprecating.20mpsc/near/270540546\">said</a>:</p>\n<blockquote>\n<p>I don’t know if Zulip or PR comments are better to discuss this, but what’s the maintenance story for <code>std::sync::mpmc</code> v.s. <code>crossbeam-channel</code>? <a href=\"https://github.com/rust-lang/rust/pull/93563#issuecomment-1028923738\">https://github.com/rust-lang/rust/pull/93563#issuecomment-1028923738</a></p>\n</blockquote>\n<p>I think the ideal scenario would be to move crossbeam-channel into the rust-lang org and have std re-export that, like was done with hashbrown.</p>",
        "id": 270600183,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1643914868
    },
    {
        "content": "<p>That would let the current maintainers continue maintenance without a huge change.</p>",
        "id": 270600291,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1643914900
    },
    {
        "content": "<p>But I'm not sure how that works with crossbeam-channel depending on OS support <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 270600352,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1643914920
    },
    {
        "content": "<p>As a starter it would be good to know how large the diff to upstream is. And if it's too big if it could be minimized. Submodule of a fork with a small set of patches might be another option.</p>",
        "id": 270601081,
        "sender_full_name": "The 8472",
        "timestamp": 1643915191
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310399\">@Mara</span> in your update, did you mean T-libs is fine with the PR being merged as-is (after more review)?</p>",
        "id": 272151728,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1645033713
    },
    {
        "content": "<p>i.e before/without crossbeam-channel crate integration?</p>",
        "id": 272151863,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1645033765
    },
    {
        "content": "<p>libs-api is fine with it. libs (who is responsible for maintaining the standard library implementation) hasn't discussed it, but i don't think that's necessary. we just need one or two reviewers who are confident the code is maintanable, or at least more maintainable than what we currently have. ^^  it might take some time before it gets reviewed though, because it's a lot to review.</p>",
        "id": 272152331,
        "sender_full_name": "Mara",
        "timestamp": 1645033930
    },
    {
        "content": "<p>One of the arguments during the meeting was that upstreamability could be reconsidered at the point when/if we want to expand the API rather than just doing minimal maintenance.<br>\nAlternatively, if a later decision is to still deprecate the module then we'd need it even less.</p>",
        "id": 272154765,
        "sender_full_name": "The 8472",
        "timestamp": 1645034778
    },
    {
        "content": "<p>Relevant here is probably <a href=\"https://web.archive.org/web/20200226103012/https://stjepang.github.io/2019/03/02/new-channels.html\">Stjepan's 2019 post on deprecating MSPC channels and replacing them with a better alternative</a>. (For those unaware of who Stjepan is: they took over maintenance of the crossbeam project pretty early on, and they designed among other things crossbeam's <code>channel</code> and <code>scope</code> primitives.)</p>",
        "id": 272403114,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1645191969
    }
]