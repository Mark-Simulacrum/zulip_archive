[
    {
        "content": "<p>Hey, over the winter break me and a pal have written a const version of <code>Iterator::{combinations, permutations}</code> which uses const generics to infer the K-factor. An example of this in use is this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">n1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">n2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">n3</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">..</span><span class=\"mi\">5</span><span class=\"p\">).</span><span class=\"n\">combinations</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{}, {}, {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">n1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">n2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">n3</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>My question is one about naming: the only other const generic method in the stdlib I know of uses a <code>array_</code> prefix (<code>array_windows</code>). Both <code>combinations</code> and <code>permutations</code> currently don't have a non-const variant in the stdlib. Have people thought about guidelines on naming const generic methods? Should const generic methods always come in pairs?</p>\n<p>I don't expect there to be any guideline RFCs or anything, but I imagine at least some folks contributing to libs will have had to think about this before. So figured I'd ask (:</p>",
        "id": 221377045,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1609548520
    },
    {
        "content": "<p>array_combinations would fit</p>",
        "id": 221384121,
        "sender_full_name": "Lokathor",
        "timestamp": 1609563167
    },
    {
        "content": "<p>It seems fine just as combinations imo</p>",
        "id": 221394689,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1609584657
    },
    {
        "content": "<p>imo using just <code>combinations</code> if we don't intend to add a non const variant.</p>",
        "id": 221395004,
        "sender_full_name": "lcnr",
        "timestamp": 1609585266
    },
    {
        "content": "<p>.windows() is a bit special in that it can have an efficient version without the size in the type, because it can give &amp;[T] slices. But that's not the case for .combinations() at all. That one would have to allocate if it doesn't put the size in the type. So just <code>combinations</code> seems fine to me.</p>",
        "id": 221397591,
        "sender_full_name": "Mara",
        "timestamp": 1609589916
    },
    {
        "content": "<p>That makes sense, thank you!</p>",
        "id": 221399239,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1609592641
    },
    {
        "content": "<p>do you intend to submit a PR?</p>",
        "id": 223993698,
        "sender_full_name": "bstrie",
        "timestamp": 1611631880
    }
]