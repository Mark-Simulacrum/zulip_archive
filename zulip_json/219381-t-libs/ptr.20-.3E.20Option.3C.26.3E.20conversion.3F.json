[
    {
        "content": "<p>Whenever I have a raw pointer that I know is either a valid reference or null, converting it to <code>Option&lt;&amp; T&gt;</code> always feels a bit verbose. Maybe there should be a function in <code>core::ptr</code>?</p>",
        "id": 210917110,
        "sender_full_name": "boats",
        "timestamp": 1600801704
    },
    {
        "content": "<p>do you mean <a href=\"https://doc.rust-lang.org/std/primitive.pointer.html#method.as_ref\">https://doc.rust-lang.org/std/primitive.pointer.html#method.as_ref</a> ?</p>",
        "id": 210917231,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600801765
    },
    {
        "content": "<p>I see now that the docs here don't say that you can't call this function if there's already a unique reference anywhere, and this can also invalidate other mut pointers I think?</p>\n<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span></p>",
        "id": 210936870,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1600812079
    },
    {
        "content": "<p>they'd still be allowed to be turned to other &amp;T</p>",
        "id": 210940947,
        "sender_full_name": "Lokathor",
        "timestamp": 1600815078
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"249222\">@Elichai Turkel</span> hm, perhaps reasonable to add, though that's true of any code obtaining a &amp;T</p>",
        "id": 210948937,
        "sender_full_name": "simulacrum",
        "timestamp": 1600822621
    },
    {
        "content": "<p>Invalidation shouldn't be documented, that's (AFAIK) not a detail currently acknowledged by reference or anything formal, it's a potential extension as part of stacked borrows</p>",
        "id": 210949498,
        "sender_full_name": "simulacrum",
        "timestamp": 1600823268
    }
]