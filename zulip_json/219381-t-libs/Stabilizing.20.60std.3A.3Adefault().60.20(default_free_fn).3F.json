[
    {
        "content": "<p>Any blockers or objections to starting an FCP to stabilize <code>std::default()</code>? <a href=\"https://github.com/rust-lang/rust/issues/73014\">https://github.com/rust-lang/rust/issues/73014</a></p>",
        "id": 239702617,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1621578568
    },
    {
        "content": "<p>Well, the issue still lists this:</p>\n<blockquote>\n<p>This addition is likely to be stabilized only when we decide that direct import of trait methods is will not be supported.</p>\n</blockquote>",
        "id": 239703932,
        "sender_full_name": "scottmcm",
        "timestamp": 1621579496
    },
    {
        "content": "<p>i mean, if that happens, it could always be changed to be <code>pub use Default::default;</code>. Or it could be deprecated.</p>",
        "id": 239705562,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1621580625
    },
    {
        "content": "<p>Probably not really. You can say <code>default::&lt;T&gt;</code> but not for the method.</p>",
        "id": 239726151,
        "sender_full_name": "nagisa",
        "timestamp": 1621591622
    },
    {
        "content": "<p>I have objections</p>\n<ul>\n<li><code>default</code> is worse than <code>Default::default</code> unless it's put into prelude.</li>\n<li><code>default</code> is only marginally better than <code>Default::default</code> if it <em>is</em> put into prelude</li>\n<li>it's better to make progress with <code>Struct { field, .. }</code> sugar and not write <code>Default::default</code> in most cases</li>\n<li>adding arbitrary low benefit aliases is a way to turn the library into a garbage dump making harder to find anything or make a choice</li>\n</ul>",
        "id": 239729312,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1621593412
    },
    {
        "content": "<p>I support the first 3 of those bullet points</p>",
        "id": 239769429,
        "sender_full_name": "Lokathor",
        "timestamp": 1621611107
    },
    {
        "content": "<p>I'd also really like to get the <code>.. }</code> sugar.  Any progress on that, <span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span>?  Anything that you need help with?</p>",
        "id": 239788744,
        "sender_full_name": "scottmcm",
        "timestamp": 1621619464
    },
    {
        "content": "<p>So, I do agree that there's not much point unless we put it into the prelude. I'd love to see it in the prelude, though.</p>",
        "id": 239803063,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1621626052
    },
    {
        "content": "<p>What happened to the 2021 prelude? As I recall there were a bunch of things considered but the final cut lost everything except a few traits</p>",
        "id": 239804339,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621626744
    },
    {
        "content": "<p>was it that non-trait inclusions to the prelude don't need an edition?</p>",
        "id": 239804461,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621626806
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/219381-t-libs/topic/Stabilizing.20.60std.3A.3Adefault.28.29.60.20.28default_free_fn.29.3F/near/239804461\">said</a>:</p>\n<blockquote>\n<p>was it that non-trait inclusions to the prelude don't need an edition?</p>\n</blockquote>\n<p>Yup.  It's just trait methods that cause conflicts -- adding, say, <code>HashMap</code> to the prelude doesn't affect you if you'd already done something like <code>use some_special::FancyHashMap as HashMap;</code>, as name resolution will prefer the non-prelude one.</p>",
        "id": 239805227,
        "sender_full_name": "scottmcm",
        "timestamp": 1621627101
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> I haven't made progress on that, but I might have some time soon to do just that</p>",
        "id": 239806410,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1621627662
    }
]