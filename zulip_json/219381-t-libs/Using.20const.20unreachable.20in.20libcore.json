[
    {
        "content": "<p>I'm trying to use <code>unreachable</code> intrinsics in a method in core but it's already a const-fn. So I tried to enable the features for it, <code>const_fn</code> and <code>const_unreachable_unchecked</code>, like it's telling me to but it doesn't work. The PR for that feature merged Jul-16 so that should be in beta, right?</p>",
        "id": 210642572,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1600562765
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"229913\">@HeroicKatora</span> it works for me with <code>const_panic</code>: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=1e56a15ad80f988d72ee167a7d75b9e5\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=1e56a15ad80f988d72ee167a7d75b9e5</a></p>",
        "id": 210645680,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600569334
    },
    {
        "content": "<p>why'd you enable <code>const_unreachable_unchecked</code>, did the diagnostic tell you to? That might be a diagnostic bug</p>",
        "id": 210645682,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600569357
    },
    {
        "content": "<p>Clarification, diagnostics only tell me to enable <code>const_fn</code>. Enabling the other was me trying figure if it was a diagnostic bug</p>",
        "id": 210647176,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1600572525
    },
    {
        "content": "<p>And this is for stage0 compilation in <code>core</code> specifically. Is there any difference to a standard compilation?</p>",
        "id": 210647184,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1600572571
    },
    {
        "content": "<p>not really for core, it's compiling with beta</p>",
        "id": 210647786,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600573816
    },
    {
        "content": "<p>it suggested <code>const_panic</code> on playground though: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=60177a1d5891157ab62302f2ca05ef7f\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=60177a1d5891157ab62302f2ca05ef7f</a></p>",
        "id": 210647790,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600573824
    },
    {
        "content": "<p>It seems that nightly suggests it, not beta though. I guess I might just have to wait one beta cycle then?</p>",
        "id": 210667189,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1600608591
    },
    {
        "content": "<p>you could use <code>cfg(not(bootstrap))</code></p>",
        "id": 210667704,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600609493
    },
    {
        "content": "<p>Can this be done for stage1 as well? Still getting the same failure there.</p>",
        "id": 210673036,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1600618160
    },
    {
        "content": "<p>you might add feature gate in <a href=\"http://lib.rs\">lib.rs</a> and add <code>#[allow_internal_unstable(&lt;feature&gt;)]</code>to the method/function<br>\nuse it.</p>",
        "id": 210673352,
        "sender_full_name": "lzutao",
        "timestamp": 1600618578
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"w\">    </span><span class=\"cp\">#[allow_internal_unstable(const_fn)]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[allow_internal_unstable(const_unreachable_unchecked)]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// SAFETY: this is safe because `&amp;[T]` and `FatPtr&lt;T&gt;` have the same layout.</span>\n<span class=\"w\">        </span><span class=\"c1\">// Only `std` can make this guarantee.</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">raw_len</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">crate</span>::<span class=\"n\">ptr</span>::<span class=\"n\">Repr</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">rust</span>: <span class=\"nc\">self</span><span class=\"w\"> </span><span class=\"p\">}.</span><span class=\"n\">raw</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">mem</span>::<span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"c1\">// SAFETY: this branch taken if mathematically `isize::MAX &lt; raw_len * N`.</span>\n<span class=\"w\">            </span><span class=\"c1\">// But references must point to one allocation with size at most isize::MAX.</span>\n<span class=\"w\">            </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">isize</span>::<span class=\"n\">MAX</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"n\">raw_len</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">hint</span>::<span class=\"n\">unreachable_unchecked</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"n\">raw_len</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>I have this, it doesn't work.</p>",
        "id": 210673633,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1600619031
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>Building stage1 std artifacts (x86_64-unknown-linux-gnu -&gt; x86_64-unknown-linux-gnu)\n   Compiling core v0.0.0 (/home/andreas/code/projects/rust/library/core)\nerror[E0723]: can only call other `const fn` within a `const fn`, but `unreachable_unchecked` is not stable as `const fn`\n   --&gt; library/core/src/slice/mod.rs:108:66\n    |\n108 |             N if (isize::MAX as usize) / N &lt; raw_len =&gt; unsafe { hint::unreachable_unchecked() },\n    |                                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #57563 &lt;https://github.com/rust-lang/rust/issues/57563&gt; for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0723`.\nerror: could not compile `core`.\n</code></pre></div>",
        "id": 210673677,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1600619058
    },
    {
        "content": "<p>Did you add feature(const_unreachable_unchecked) to crate root ?</p>",
        "id": 210673857,
        "sender_full_name": "lzutao",
        "timestamp": 1600619335
    },
    {
        "content": "<p>It's already present</p>",
        "id": 210673869,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1600619356
    },
    {
        "content": "<p><code>const_fn</code> was missing but I added that.</p>",
        "id": 210673883,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1600619385
    },
    {
        "content": "<p>wait, so stage0 builds Ok?</p>",
        "id": 210674008,
        "sender_full_name": "lzutao",
        "timestamp": 1600619555
    },
    {
        "content": "<p>Yeah, but only due to <code>cfg(not(bootstrap))</code></p>",
        "id": 210674079,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1600619661
    },
    {
        "content": "<p>if you add <code>#![feature(const_panic)]</code> does it work?</p>",
        "id": 210674248,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600619988
    },
    {
        "content": "<p>(might want to turn off cfg(bootstrap) so you get faster feedback)</p>",
        "id": 210674281,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600620004
    },
    {
        "content": "<p>not sure now, probably ping <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> or <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span></p>",
        "id": 210674303,
        "sender_full_name": "lzutao",
        "timestamp": 1600620061
    },
    {
        "content": "<p><code>allow_internal_unstable</code> is for macros, not functions.</p>",
        "id": 210676214,
        "sender_full_name": "Amanieu",
        "timestamp": 1600622885
    },
    {
        "content": "<p>There's an existing <code>#[allow_internal_unstable(const_fn_union)]</code> on <code>[T]::len</code>.. <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 210679309,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1600627274
    },
    {
        "content": "<p>It's meant for code inside a macro expansion to use unstable features without the crate using the macro needing to declare those features.</p>",
        "id": 210682197,
        "sender_full_name": "Amanieu",
        "timestamp": 1600631637
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"143274\">Amanieu</span> <a href=\"#narrow/stream/219381-t-libs/topic/Using.20const.20unreachable.20in.20libcore/near/210676214\">said</a>:</p>\n<blockquote>\n<p><code>allow_internal_unstable</code> is for macros, not functions.</p>\n</blockquote>\n<p>it's also for <code>const fn</code></p>",
        "id": 210688954,
        "sender_full_name": "RalfJ",
        "timestamp": 1600641739
    },
    {
        "content": "<p>You could introduce a macro to wrap unreachable_unchecked and add allow_internal_unstable to that macro.</p>",
        "id": 210698080,
        "sender_full_name": "lzutao",
        "timestamp": 1600658012
    },
    {
        "content": "<p>That's tedious but it works.</p>",
        "id": 210698081,
        "sender_full_name": "lzutao",
        "timestamp": 1600658024
    },
    {
        "content": "<p>but it still shouldn't help for the case of a libcore <code>const fn</code> then using that macro</p>",
        "id": 210708549,
        "sender_full_name": "RalfJ",
        "timestamp": 1600673278
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> just was not aware that const stability checking also uses <code>allow_internal_unstable</code></p>",
        "id": 210708594,
        "sender_full_name": "RalfJ",
        "timestamp": 1600673299
    },
    {
        "content": "<p>we are more paranoid for const-stability than for regular stability because it is harder to hide implementation details of a <code>const fn</code> in a semver-compatible way -- any change in the function's behavior could break compilation of something</p>",
        "id": 210708639,
        "sender_full_name": "RalfJ",
        "timestamp": 1600673349
    },
    {
        "content": "<p>So I just wait? I'm fine waiting a release cycle or two here. This is probably also relevant to a missed optimization on NonZero which wants to use a similar trick but currently gravitates towards using <code>assume</code> as far as I can see.</p>",
        "id": 210712185,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1600676200
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/219381-t-libs/topic/Using.20const.20unreachable.20in.20libcore/near/210708549\">said</a>:</p>\n<blockquote>\n<p>but it still shouldn't help for the case of a libcore <code>const fn</code> then using that macro</p>\n</blockquote>\n<p>./x.py check passed locally for me.</p>",
        "id": 210723185,
        "sender_full_name": "lzutao",
        "timestamp": 1600683493
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"209117\">@lzutao</span> Would you mind sharing the specific code that works for you?</p>",
        "id": 210754072,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1600700578
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"229913\">@HeroicKatora</span> Here. I've not run it to stage1 but it passed x.py check</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gh\">diff --git library/core/src/slice/mod.rs library/core/src/slice/mod.rs</span>\n<span class=\"gh\">index ff926c517bc..3fbf6d1e3f8 100644</span>\n<span class=\"gd\">--- library/core/src/slice/mod.rs</span>\n<span class=\"gi\">+++ library/core/src/slice/mod.rs</span>\n<span class=\"gu\">@@ -75,6 +75,11 @@ pub use index::SliceIndex;</span>\n #[unstable(feature = &quot;slice_check_range&quot;, issue = &quot;76393&quot;)]\n pub use index::check_range;\n\n<span class=\"gi\">+#[allow_internal_unstable(const_unreachable_unchecked)]</span>\n<span class=\"gi\">+macro_rules! unreachable_unchecked {</span>\n<span class=\"gi\">+    () =&gt; { $crate::hint::unreachable_unchecked() };</span>\n<span class=\"gi\">+}</span>\n<span class=\"gi\">+</span>\n #[lang = &quot;slice&quot;]\n #[cfg(not(test))]\n impl&lt;T&gt; [T] {\n<span class=\"gu\">@@ -94,7 +99,12 @@ impl&lt;T&gt; [T] {</span>\n     pub const fn len(&amp;self) -&gt; usize {\n         // SAFETY: this is safe because `&amp;[T]` and `FatPtr&lt;T&gt;` have the same layout.\n         // Only `std` can make this guarantee.\n<span class=\"gd\">-        unsafe { crate::ptr::Repr { rust: self }.raw.len }</span>\n<span class=\"gi\">+        let raw_len = unsafe { crate::ptr::Repr { rust: self }.raw.len };</span>\n<span class=\"gi\">+        match mem::size_of::&lt;T&gt;() {</span>\n<span class=\"gi\">+            0 =&gt; raw_len,</span>\n<span class=\"gi\">+            n if raw_len * n &gt; (isize::MAX as usize) =&gt; unsafe { unreachable_unchecked!() },</span>\n<span class=\"gi\">+            _ =&gt; raw_len,</span>\n<span class=\"gi\">+        }</span>\n     }\n\n     /// Returns `true` if the slice has a length of 0.\n</code></pre></div>\n\n\n</div></div>",
        "id": 210755422,
        "sender_full_name": "lzutao",
        "timestamp": 1600701159
    },
    {
        "content": "<p>Please don't add such a macro and just import the function directly -- macros for <em>unsafe</em> code when they're just calling a single function seems like an anti-pattern</p>",
        "id": 210755724,
        "sender_full_name": "simulacrum",
        "timestamp": 1600701299
    },
    {
        "content": "<p>the problem is we (I and <span class=\"user-mention\" data-user-id=\"229913\">@HeroicKatora</span> ) cannot find a way to satisfy the const stability checker when using unstable <br>\n<code>core::hint::unreachable_unchecked</code> in const fn <code>slice::len</code>.</p>",
        "id": 210755929,
        "sender_full_name": "lzutao",
        "timestamp": 1600701389
    },
    {
        "content": "<p>If we could, I don't end up using this ugly hack.</p>",
        "id": 210756442,
        "sender_full_name": "lzutao",
        "timestamp": 1600701536
    },
    {
        "content": "<p>the macro has an effect on const stability checking?</p>",
        "id": 210758474,
        "sender_full_name": "simulacrum",
        "timestamp": 1600702412
    },
    {
        "content": "<p>Based on what Ralf said, it sounds like we should be able to \"just\" have a allow_internal_unstable on the [T]::len</p>",
        "id": 210758653,
        "sender_full_name": "simulacrum",
        "timestamp": 1600702482
    },
    {
        "content": "<p>It sadly doesn't work as intended: <a href=\"#narrow/stream/219381-t-libs/topic/Using.20const.20unreachable.20in.20libcore/near/210673352\">https://rust-lang.zulipchat.com/#narrow/stream/219381-t-libs/topic/Using.20const.20unreachable.20in.20libcore/near/210673352</a></p>",
        "id": 210760529,
        "sender_full_name": "lzutao",
        "timestamp": 1600703338
    },
    {
        "content": "<p>hm, maybe a beta bug, I guess</p>",
        "id": 210774385,
        "sender_full_name": "simulacrum",
        "timestamp": 1600709718
    },
    {
        "content": "<p>Seems like it works if the annotations are merged into a single one. Not sure if one of the const-check changes (i.e. 76807) is responsible or if this worked yesterday. In any case, fmt or checks should probably complain if there is more than one <code>#[allow_internal_unstable]</code> attribute.</p>",
        "id": 210851793,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1600770394
    },
    {
        "content": "<p>I think more than one <code>allow_internal_unstable</code> is just not supported and so far nobody tried that^^</p>",
        "id": 211157956,
        "sender_full_name": "RalfJ",
        "timestamp": 1600965757
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/77088\">#77088</a> has mentor instructions if someone wants to implement it.</p>",
        "id": 211158212,
        "sender_full_name": "lzutao",
        "timestamp": 1600965890
    },
    {
        "content": "<p>I can take a look at it this weekend, unless someone else does it faster <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 211162522,
        "sender_full_name": "Dániel Buga",
        "timestamp": 1600967973
    },
    {
        "content": "<p>allow_internal_unstable is documented in source as only for macro_rules! ... Maybe when it was extended for const fn, that fact was not documented?</p>",
        "id": 211243696,
        "sender_full_name": "Dániel Buga",
        "timestamp": 1601031834
    },
    {
        "content": "<p>I opened a PR (<a href=\"https://github.com/rust-lang/rust/issues/77183\">#77183</a>) that fixes <a href=\"https://github.com/rust-lang/rust/issues/77088\">#77088</a>.</p>",
        "id": 211252758,
        "sender_full_name": "Dániel Buga",
        "timestamp": 1601037946
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"334260\">Dániel Buga</span> <a href=\"#narrow/stream/219381-t-libs/topic/Using.20const.20unreachable.20in.20libcore/near/211243696\">said</a>:</p>\n<blockquote>\n<p>allow_internal_unstable is documented in source as only for macro_rules! ... Maybe when it was extended for const fn, that fact was not documented?</p>\n</blockquote>\n<p>yeah I think that is what happened... Cc <span class=\"user-group-mention\" data-user-group-id=\"1916\">@WG-const-eval</span></p>",
        "id": 211353475,
        "sender_full_name": "RalfJ",
        "timestamp": 1601115687
    },
    {
        "content": "<p>I also think it would be good to also enable allow_internal_unstable for non-const functions as well. Even if it will be properly documented, I think there could be some confusion about why it isn't. But that's just my .02€</p>",
        "id": 211355391,
        "sender_full_name": "Dániel Buga",
        "timestamp": 1601119011
    },
    {
        "content": "<p>which effect should it have on non-const fn though?</p>",
        "id": 211359318,
        "sender_full_name": "RalfJ",
        "timestamp": 1601125682
    },
    {
        "content": "<p>the reason we need it on stable const fn is that, unlike stable non-const fn, we have a check which makes sure that stable const fn only call stable const fn.</p>",
        "id": 211359353,
        "sender_full_name": "RalfJ",
        "timestamp": 1601125704
    },
    {
        "content": "<p>so we need the attribute to be able to suppress that check</p>",
        "id": 211359357,
        "sender_full_name": "RalfJ",
        "timestamp": 1601125714
    },
    {
        "content": "<p>So <code>const fn</code> ignore any other feature gates (at least lifted via allow_internal_unstable) anyway? I must admit, I don't get some things yet <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 211359638,
        "sender_full_name": "Dániel Buga",
        "timestamp": 1601126203
    },
    {
        "content": "<p><em>stable</em> <code>const fn</code> basically ignore \"outer\" feature gates of the lib they are defined in, yes. that is a way to put it.</p>",
        "id": 211360434,
        "sender_full_name": "RalfJ",
        "timestamp": 1601127462
    },
    {
        "content": "<p>also see <a href=\"https://github.com/rust-lang/rust/pull/76850\">https://github.com/rust-lang/rust/pull/76850</a></p>",
        "id": 211360479,
        "sender_full_name": "RalfJ",
        "timestamp": 1601127485
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 211360606,
        "sender_full_name": "Dániel Buga",
        "timestamp": 1601127639
    }
]