[
    {
        "content": "<p>Hi! I'm not sure this is the right place to start this discussion (please point me in the right direction if not).</p>\n<p>We use rust pretty heavily at my company, run tests in CI, etc. We currently use regexes to parse test results from the rust test process's stdout - using (approximately) <code>test (.*) \\.\\.\\. (FAILED|ok|ignored)</code>.</p>\n<p>The problem is that for one particular set of tests, stdout is pretty \"dirty\", in the sense that there's a lot of junk there that sometimes breaks this regex detection. Some of this junk we could clean up, but it's actually a pretty large challenge - because a good chunk of it comes from subprocesses / 3rd-party libraries we don't control.</p>\n<p>As a sure-fire upstream fix, if it would be possible to have the test binary accept an optional argument to dump test statuses to a file, in json format (or similar) - that would make it very difficult for that to accidentally be interrupted. e.g. <code>cargo test -- --write-json-results-file=test_results.json</code>. (I'm ambivolent on exact format &amp; option naming)</p>\n<p>What would the right way to push something like this forward? Should I go thru the RFC process? Open a github issue?</p>",
        "id": 254755740,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1632510251
    },
    {
        "content": "<p>I think libtest has something similar already available on nightly</p>",
        "id": 254755834,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1632510298
    },
    {
        "content": "<p>gimmi one sec while I lookup how to turn it on</p>",
        "id": 254756037,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1632510374
    },
    {
        "content": "<p>junit</p>",
        "id": 254756199,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1632510458
    },
    {
        "content": "<p>that's the name of the format</p>",
        "id": 254756206,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1632510461
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>❯ target/debug/deps/wardrobe_db-d1e62c1d2f0d4e7f -Zunstable-options --format junit\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;testsuites&gt;&lt;testsuite name=&quot;test&quot; package=&quot;test&quot; id=&quot;0&quot; errors=&quot;0&quot; failures=&quot;0&quot; tests=&quot;7&quot; skipped=&quot;0&quot; &gt;&lt;testcase classname=&quot;item::tests&quot; name=&quot;with_suggestion&quot; time=&quot;0&quot;/&gt;&lt;testcase classname=&quot;item::tests&quot; name=&quot;new_tags&quot; time=&quot;0&quot;/&gt;&lt;testcase classname=&quot;item::tests&quot; name=&quot;new_item&quot; time=&quot;0&quot;/&gt;&lt;testcase classname=&quot;tests&quot; name=&quot;new_item&quot; time=&quot;0&quot;/&gt;&lt;testcase classname=&quot;history::tests&quot; name=&quot;from_reader&quot; time=&quot;0&quot;/&gt;&lt;testcase classname=&quot;tests&quot; name=&quot;new_item_twice&quot; time=&quot;0&quot;/&gt;&lt;testcase classname=&quot;tests&quot; name=&quot;new_outfit&quot; time=&quot;0&quot;/&gt;&lt;system-out/&gt;&lt;system-err/&gt;&lt;/testsuite&gt;&lt;/testsuites&gt;\n</code></pre></div>",
        "id": 254756346,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1632510515
    },
    {
        "content": "<p>Oooh nice! Can I have it write that to a file rather than dumping it to stdout?</p>",
        "id": 254758433,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1632511397
    },
    {
        "content": "<p>yes, there's a <code>--logpath</code> option</p>",
        "id": 254758500,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1632511432
    },
    {
        "content": "<p>in general you can run any test binary with <code>--help</code> to see all the extra options available from libtest</p>",
        "id": 254758559,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1632511447
    },
    {
        "content": "<p>actually, im not certain logpath applies here</p>",
        "id": 254758693,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1632511516
    },
    {
        "content": "<p><code>--logfile</code>*</p>",
        "id": 254758782,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1632511561
    },
    {
        "content": "<p>and no, it is not for the junit output</p>",
        "id": 254758840,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1632511570
    },
    {
        "content": "<p>Just tested this myself, and it looks like the <code>--logfile</code> option gives a file of <code>&lt;status&gt; &lt;test_name&gt;</code> - which serves my purposes well enough.</p>",
        "id": 254771118,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1632516946
    },
    {
        "content": "<p>Seems useful to actually be able to write the junit output to a file somewhere, so it doesn't need to be parsed out with regex. Thoughts on either:<br>\n(1) making <code>--format junit --logfile=junit.xml</code> print the junit stuff to junit.xml (and not the current <code>&lt;status&gt; &lt;test_name&gt;</code> lines)<br>\n(2) adding a new argument for that e.g. <code>--format junit --outputfile=junit.xml</code></p>",
        "id": 254771420,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1632517092
    },
    {
        "content": "<p>I don't think (1) would work because that would potentially change the meaning of <code>--logfile</code> or make it contextual, which seems unideal</p>",
        "id": 254772430,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1632517533
    },
    {
        "content": "<p>(2) seems reasonable</p>",
        "id": 254772448,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1632517543
    },
    {
        "content": "<p>though when running tests you often have many test binaries</p>",
        "id": 254772488,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1632517559
    },
    {
        "content": "<p>so I'd want to be careful to come up with a solution that doesn't default to causing different tests to overwrite each other's output</p>",
        "id": 254772577,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1632517587
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>❯ cargo test -- -Zunstable-options --format junit\n    Finished test [unoptimized + debuginfo] target(s) in 0.02s\n     Running unittests (target/debug/deps/wardrobe_db-d1e62c1d2f0d4e7f)\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;testsuites&gt;&lt;testsuite name=&quot;test&quot; package=&quot;test&quot; id=&quot;0&quot; errors=&quot;0&quot; failures=&quot;0&quot; tests=&quot;7&quot; skipped=&quot;0&quot; &gt;&lt;testcase classname=&quot;item::tests&quot; name=&quot;new_item&quot; time=&quot;0&quot;/&gt;&lt;testcase classname=&quot;item::tests&quot; name=&quot;new_tags&quot; time=&quot;0&quot;/&gt;&lt;testcase classname=&quot;item::tests&quot; name=&quot;with_suggestion&quot; time=&quot;0&quot;/&gt;&lt;testcase classname=&quot;tests&quot; name=&quot;new_item&quot; time=&quot;0&quot;/&gt;&lt;testcase classname=&quot;history::tests&quot; name=&quot;from_reader&quot; time=&quot;0&quot;/&gt;&lt;testcase classname=&quot;tests&quot; name=&quot;new_item_twice&quot; time=&quot;0&quot;/&gt;&lt;testcase classname=&quot;tests&quot; name=&quot;new_outfit&quot; time=&quot;0&quot;/&gt;&lt;system-out/&gt;&lt;system-err/&gt;&lt;/testsuite&gt;&lt;/testsuites&gt;     Running unittests (target/debug/deps/wardrobe_db-296b264a815fb112)\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;testsuites&gt;&lt;testsuite name=&quot;test&quot; package=&quot;test&quot; id=&quot;0&quot; errors=&quot;0&quot; failures=&quot;0&quot; tests=&quot;0&quot; skipped=&quot;0&quot; &gt;&lt;system-out/&gt;&lt;system-err/&gt;&lt;/testsuite&gt;&lt;/testsuites&gt;   Doc-tests wardrobe-db\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;testsuites&gt;&lt;testsuite name=&quot;test&quot; package=&quot;test&quot; id=&quot;0&quot; errors=&quot;0&quot; failures=&quot;0&quot; tests=&quot;0&quot; skipped=&quot;0&quot; &gt;&lt;system-out/&gt;&lt;system-err/&gt;&lt;/testsuite&gt;&lt;/testsuites&gt;\n</code></pre></div>",
        "id": 254772702,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1632517661
    },
    {
        "content": "<p>its clearly already a bit broken at the moment when run via cargo</p>",
        "id": 254772792,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1632517685
    },
    {
        "content": "<p>we might want some sort of placeholder syntax for including the test binary name or something</p>",
        "id": 254772857,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1632517730
    },
    {
        "content": "<p>like <code>cargo test -- -Zunstable-options --format junit --output-file=junit-{}.xml</code></p>",
        "id": 254772933,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1632517778
    },
    {
        "content": "<p>where if you don't provide a place for it to include the disambiguator in each path it will error out</p>",
        "id": 254772960,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1632517801
    },
    {
        "content": "<p>This is not the only instance where more flexibility around multiple test binaries would help. Other things that come to mind are coverage, running test suites in parallel, etc.</p>",
        "id": 254773302,
        "sender_full_name": "nagisa",
        "timestamp": 1632517969
    },
    {
        "content": "<p>I've been just getting plans out of cargo and running things myself to facilitate these kinds of things, personally.</p>",
        "id": 254773354,
        "sender_full_name": "nagisa",
        "timestamp": 1632517998
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"317636\">@Joshua Warner</span> looks like we already have a wrapper around output location though both variant's currently go to stdout</p>",
        "id": 254775979,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1632519190
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"sd\">/// Generic wrapper over stdout.</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">enum</span> <span class=\"nc\">OutputLocation</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Pretty</span><span class=\"p\">(</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">term</span>::<span class=\"n\">StdoutTerminal</span><span class=\"o\">&gt;</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Raw</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 254775990,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1632519198
    },
    {
        "content": "<p>but I'm guessing it wouldn't be very difficult to add a 3rd option for outputting to a logfile</p>",
        "id": 254776023,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1632519216
    },
    {
        "content": "<p>though I haven't touched this code much before</p>",
        "id": 254776063,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1632519238
    },
    {
        "content": "<p>either way if you end up adding a <code>--output-file</code> option lmk and add me as a reviewer on the PR</p>",
        "id": 254776153,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1632519270
    },
    {
        "content": "<p>did a quick PR to fix the newline situation with junit <a href=\"https://github.com/rust-lang/rust/pull/89235\">https://github.com/rust-lang/rust/pull/89235</a></p>",
        "id": 254777863,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1632520174
    },
    {
        "content": "<p>should point you towards the files you'd need to edit in your own PR to add the <code>--output-file</code> option</p>",
        "id": 254777900,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1632520195
    },
    {
        "content": "<blockquote>\n<p>did a quick PR to fix the newline situation with junit <a href=\"https://github.com/rust-lang/rust/pull/89235\">https://github.com/rust-lang/rust/pull/89235</a></p>\n</blockquote>\n<p>Nice!</p>\n<blockquote>\n<p>we might want some sort of placeholder syntax for including the test binary name or something</p>\n</blockquote>\n<p>FWIW, we actually don't use cargo in CI (we use bazel), so I don't think the \"multiple test binaries might accidentally overwrite the output of the results\" thing is a problem. We have our own (python) test-runner that's responsible for running all the tests - so it shouldn't be too hard to make this work without any such placeholders. Agreed it would be problematic for anyone using cargo tho. Maybe that could be a later feature?</p>",
        "id": 254781737,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1632522286
    },
    {
        "content": "<p>as long as the flag is gated behind <code>-Zunstable-options</code> that should be fine <span class=\"user-mention\" data-user-id=\"317636\">@Joshua Warner</span></p>",
        "id": 254781956,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1632522435
    },
    {
        "content": "<blockquote>\n<p>its clearly already a bit broken at the moment when run via cargo</p>\n</blockquote>\n<p>Are you sure that's not mixing stderr and stdout?</p>",
        "id": 254788538,
        "sender_full_name": "The 8472",
        "timestamp": 1632527057
    },
    {
        "content": "<p>It does mix stderr and stdout but it's not doing so the same way as the other formatter</p>",
        "id": 254789724,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1632527923
    },
    {
        "content": "<p>In both cases the output from libtest goes to stdout and the output from cargo goes to stderr</p>",
        "id": 254789755,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1632527951
    },
    {
        "content": "<p>But for the pretty formatter there are extra new lines inserted before and after every test results so when they're interleaved it looks nice</p>",
        "id": 254789770,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1632527968
    },
    {
        "content": "<p>So in both cases you can just redirect stdout</p>",
        "id": 254789794,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1632527987
    },
    {
        "content": "<p>And get something that looks good because it keeps them from mixing</p>",
        "id": 254789805,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1632527995
    },
    {
        "content": "<p>But if your last line of output in stderr doesn't end in a new line the next line of output from cargo will be appended to the end of your last line</p>",
        "id": 254789936,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1632528041
    },
    {
        "content": "<p>That seems like a good justification for putting a unconditional new line after all the formatter outputs regardless of which formatter is being used and then just removing one new line from the end of each of the outputs to make it consistent still</p>",
        "id": 254789977,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1632528078
    }
]