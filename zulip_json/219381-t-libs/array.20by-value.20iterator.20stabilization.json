[
    {
        "content": "<p>Hello <span class=\"user-group-mention\" data-user-group-id=\"2645\">@T-libs</span>. With <code>min_const_generics</code> now stable, do you have thoughts on what do to about <a href=\"https://github.com/rust-lang/rust/pull/65819#issuecomment-751648891\"><code>impl IntoIterator for [T; N]</code> regressions</a> or/and about whether to stabilize <a href=\"https://github.com/rust-lang/rust/issues/65798#issuecomment-751650783\"><code>array::IntoIter::new</code></a>?</p>",
        "id": 221049743,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1609148638
    },
    {
        "content": "<p>We discussed that a couple weeks ago, and I think were generally on board with stabilizing the explicit constructor minimally to make by-value iteration possible</p>",
        "id": 221058921,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1609160414
    },
    {
        "content": "<p>I wonder if we could play some shenanigans with editions to fix the regressions? Might be magical thinking though</p>",
        "id": 221058943,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1609160456
    },
    {
        "content": "<p>Not readily, though the compiler could do it in theory. I'd rather just have a iter_owned method on arrays or something like that though.</p>",
        "id": 221061525,
        "sender_full_name": "simulacrum",
        "timestamp": 1609163228
    },
    {
        "content": "<p>Alright, so it’s either:</p>",
        "id": 221064400,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1609165930
    },
    {
        "content": "<ul>\n<li>An <code>iter_owned</code> inherent methods on arrays, which is nice because it doesn’t need to be imported</li>\n<li>Or a <code>new</code> constructor on the iterator type, which avoid the need to come up with a name that break the usual naming conventions</li>\n</ul>",
        "id": 221064466,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1609166011
    },
    {
        "content": "<p>Unless… can we have an <code>into_iter</code> inherent method and still have a trait method of the same name later, if they have the same signature?</p>",
        "id": 221064530,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1609166050
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"219747\">Simon Sapin</span> <a href=\"#narrow/stream/219381-t-libs/topic/array.20by-value.20iterator.20stabilization/near/221064530\">said</a>:</p>\n<blockquote>\n<p>Unless… can we have an <code>into_iter</code> inherent method and still have a trait method of the same name later, if they have the same signature?</p>\n</blockquote>\n<p>we theoretically can afaik, though i would prefer us to use a different name so that we can just forget about the added method once <code>IntoIterator</code> is implemented. Having a method named <code>into_iter</code> for arrays but not for <code>Vec</code> is probably confusing</p>",
        "id": 221064688,
        "sender_full_name": "lcnr",
        "timestamp": 1609166218
    },
    {
        "content": "<p>We can't have inherent into_iter without breaking code AFAIK</p>",
        "id": 221065019,
        "sender_full_name": "simulacrum",
        "timestamp": 1609166544
    },
    {
        "content": "<p>ah, yeah <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> that's the reason why we don't insta stabilize <code>IntoIter</code> <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 221065322,
        "sender_full_name": "lcnr",
        "timestamp": 1609166828
    },
    {
        "content": "<p>I like stabilizing the <code>IntoIter::new</code> method.  That's a totally reasonable API to exist (even if eventually deprecated later) and conveniently is over on a type that people will rarely look at once the <code>IntoIterator</code> finally happens.  Needing the import is unfortunate, but I think the goal here is to unblock people which it does fine, and it'd be nice to avoid a vestigial method on the array type (at which people will actually commonly look).  Especially to avoid any confusion about \"Why isn't there <code>iter_owned</code> on a <code>Vec</code>?  Can I not get an owning iterator to the items in a vector?\"</p>\n<p>(I continue to think that once the warning about <code>.into_iter()</code> has been on stable for a release or two we should just add the <code>IntoIterator</code> impl, since it's clearly the desired end-state and this is exactly the kind of change that's why the RFC decided this was an allowed breakage.  Fixing it is a strict code improvement <em>and</em> backwards compatible to Rust 1.0.0.  But obviously it's also good to not break people, so crawling forward is fine for now.)</p>",
        "id": 221116093,
        "sender_full_name": "scottmcm",
        "timestamp": 1609225174
    },
    {
        "content": "<p>Re <code>IntoIter::new</code>, sounds good!</p>",
        "id": 221116359,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1609225569
    },
    {
        "content": "<p>I agree we’ll likely add the <code>IntoIterator</code> impl at some point, it’s just a question of timing. <a href=\"https://github.com/rust-lang/rust/pull/65819#issuecomment-681132206\">https://github.com/rust-lang/rust/pull/65819#issuecomment-681132206</a> mentions work in Cargo to show the relevant warning in dependencies which would help reduce regressions further before we make the change, and looks like there is progress in <a href=\"https://github.com/rust-lang/cargo/pull/8825\">https://github.com/rust-lang/cargo/pull/8825</a></p>",
        "id": 221116438,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1609225721
    },
    {
        "content": "<p>Well, so one plausible alternative is to just stabilize an ArrayVec type which is likely to have From array impl</p>",
        "id": 221125205,
        "sender_full_name": "simulacrum",
        "timestamp": 1609238018
    },
    {
        "content": "<p>But I'd love to see progress here somehow</p>",
        "id": 221125248,
        "sender_full_name": "simulacrum",
        "timestamp": 1609238051
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> \"the warning about <code>.into_iter()</code>\" -&gt; if you're talking about the lint, that's already on stable since 2020-01-31. But as mentioned already, the cargo change to show these lint warnings for dependencies as well will be helping a lot.</p>",
        "id": 221641310,
        "sender_full_name": "Lukas Kalbertodt",
        "timestamp": 1609850266
    },
    {
        "content": "<p>My rough plan would be to wait for <a href=\"https://github.com/rust-lang/cargo/pull/8825\">https://github.com/rust-lang/cargo/pull/8825</a> to land and be on stable for a couple release cycles. By then, I would think that everyone had enough time to fix their code or fix/update their dependencies.</p>",
        "id": 221641479,
        "sender_full_name": "Lukas Kalbertodt",
        "timestamp": 1609850397
    },
    {
        "content": "<p>What do we want to do about <code>Box&lt;[T; N]&gt;</code>? The <code>array_into_iter</code> lint already warns about this, since a method call like <code>.into_iter()</code> can move out of the box, but I don't actually think that's what we would want to happen. i.e. There should be an iterator that moves items out of the box piecemeal, or just let it use <code>vec::IntoIter</code>.</p>",
        "id": 221681864,
        "sender_full_name": "cuviper",
        "timestamp": 1609870689
    },
    {
        "content": "<p>Similarly, <code>Box&lt;[T]&gt;</code> could have a consuming iterator (or use <code>vec::IntoIter</code>), but there's no warning about <code>into_iter()</code> on this yet</p>",
        "id": 221681924,
        "sender_full_name": "cuviper",
        "timestamp": 1609870733
    },
    {
        "content": "<p><code>Box&lt;[T]&gt;</code> giving a <code>vec::IntoIter</code> seems pretty reasonable -- nothing jumps to mind where the Box version could be better-optimized.</p>",
        "id": 221683344,
        "sender_full_name": "scottmcm",
        "timestamp": 1609871434
    },
    {
        "content": "<p>I'm fairly sure you can't peacemeal iterate-move out of <code>Box&lt;[T; N]&gt;</code> because it would totally mess with the allocator. You'd have to transform to Vec first</p>",
        "id": 221687610,
        "sender_full_name": "Lokathor",
        "timestamp": 1609873525
    },
    {
        "content": "<p>the allocator has no notion of T's, there shouldn't be any problem there</p>",
        "id": 221687874,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1609873665
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> To the allocator, a Vec&lt;T&gt; with a capacity of N should look the exact same as a Box&lt;[T; N]&gt;, no?</p>",
        "id": 221688080,
        "sender_full_name": "Mara",
        "timestamp": 1609873762
    },
    {
        "content": "<p>So what happens when you've done one iteration and stop? The drop for Box will try to drop the content, but then you'd drop on an uninit array element.</p>\n<p>I guess you can consume the box, leak it internally, and then carefully muck all the memory yourself after that.</p>",
        "id": 221689403,
        "sender_full_name": "Lokathor",
        "timestamp": 1609874419
    },
    {
        "content": "<p>yes, that's what into_iter does; it consumes.</p>",
        "id": 221689612,
        "sender_full_name": "Mara",
        "timestamp": 1609874541
    },
    {
        "content": "<p>so you'd use the exact same strategy as vec::IntoIter uses, or just literally re-use that type</p>",
        "id": 221689651,
        "sender_full_name": "Mara",
        "timestamp": 1609874563
    },
    {
        "content": "<p>Yeah, <code>Box&lt;[T; N]&gt;</code> → <code>Box&lt;[T]&gt;</code> → <code>Vec&lt;T&gt;</code> should all be O(1), and iterate like that.  Vec's intoiter is left+right+cap+ptr, all of which are needed for a moving iterator on <code>Box&lt;[T; N]&gt;</code> too.</p>",
        "id": 221691405,
        "sender_full_name": "scottmcm",
        "timestamp": 1609875509
    },
    {
        "content": "<p>I guess for the immediate topic, stabilizing <code>array::IntoIter</code> doesn't need to worry about <code>Box</code>. I just want to make sure we also consider this angle if/when we finally plan for <code>IntoIterator</code>, that <code>Box</code> is in the same boat. It's not <em>as</em> important as arrays, since one can manually do that  transformation to<code>Vec&lt;T&gt;</code> just fine, but it would be nice to have direct <code>IntoIterator</code> there too.</p>",
        "id": 221694145,
        "sender_full_name": "cuviper",
        "timestamp": 1609876819
    },
    {
        "content": "<p>Now that <code>min_const_generic</code> and <code>array::IntoIter[::new}</code> have been stabilized, do you think it would be a good time for t-libs to discuss the <code>IntoIterator</code> impl PR and maybe write an official comment on how to proceed? If I am not mistaken, there no \"t-libs statement\" on the PR thread so far (lots of comments by members of t-libs, but nothing official yet). I feel like the PR is somewhat in limbo right now. I guess it would be useful for everyone to know the plan forward and t-lib's thoughts on the matter. What do you think? :)</p>",
        "id": 224646681,
        "sender_full_name": "Lukas Kalbertodt",
        "timestamp": 1612102389
    },
    {
        "content": "<p>Looks like still no progress on <a href=\"https://github.com/rust-lang/cargo/pull/8825\">https://github.com/rust-lang/cargo/pull/8825</a>? <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span> </p>\n<p>That's the last I heard about what was needed: <a href=\"#narrow/stream/219381-t-libs/topic/array.20by-value.20iterator.20stabilization/near/221116438\">https://rust-lang.zulipchat.com/#narrow/stream/219381-t-libs/topic/array.20by-value.20iterator.20stabilization/near/221116438</a></p>",
        "id": 224658692,
        "sender_full_name": "scottmcm",
        "timestamp": 1612119019
    },
    {
        "content": "<blockquote>\n<p>Yeah, Box&lt;[T; N]&gt; → Box&lt;[T]&gt; → Vec&lt;T&gt; should all be O(1)</p>\n</blockquote>\n<p>I think that's wrong <code>[T; N]</code> is smaller than <code>[T]</code> due to the length field.</p>",
        "id": 224802190,
        "sender_full_name": "The 8472",
        "timestamp": 1612218311
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330154\">The 8472</span> <a href=\"#narrow/stream/219381-t-libs/topic/array.20by-value.20iterator.20stabilization/near/224802190\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>Yeah, Box&lt;[T; N]&gt; → Box&lt;[T]&gt; → Vec&lt;T&gt; should all be O(1)</p>\n</blockquote>\n<p>I think that's wrong <code>[T; N]</code> is smaller than <code>[T]</code> due to the length field.</p>\n</blockquote>\n<p>It would still be O(1), Unsizing is constant time.</p>",
        "id": 224802353,
        "sender_full_name": "Connor Horman",
        "timestamp": 1612218391
    },
    {
        "content": "<p>the first conversion adds a length field, the second conversion adds a capacity field. but those are just usizes that can easily be inlined/optimized away.</p>",
        "id": 224802562,
        "sender_full_name": "Mara",
        "timestamp": 1612218490
    },
    {
        "content": "<p>I see, I think I misunderstood box layout for DSTs.</p>",
        "id": 224804870,
        "sender_full_name": "The 8472",
        "timestamp": 1612219692
    },
    {
        "content": "<p>DSTs carry their extra info in the \"fat\" pointer, not with the data.</p>",
        "id": 224822252,
        "sender_full_name": "cuviper",
        "timestamp": 1612233869
    }
]