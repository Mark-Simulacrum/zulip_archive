[
    {
        "content": "<p>Suppose I have an iterator of key-value pairs that promises to provide values in increasing order by key. Would that allow constructing a BTreeMap more efficiently?</p>",
        "id": 191830260,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1585184559
    },
    {
        "content": "<p>Possibly.</p>",
        "id": 191852568,
        "sender_full_name": "Amanieu",
        "timestamp": 1585212031
    },
    {
        "content": "<p>I'm tempted to try rewriting btree, possibly taking a few ideas from <a href=\"https://abseil.io/blog/20190812-btree\" title=\"https://abseil.io/blog/20190812-btree\">https://abseil.io/blog/20190812-btree</a>. I had a quick look and the main difference is that they have much larger node sizes.</p>",
        "id": 191855624,
        "sender_full_name": "Amanieu",
        "timestamp": 1585213871
    },
    {
        "content": "<p>The main issue with the current implementation is that it tries to use lifetimes, but that just doesn't work when you're trying to build a datastructure.</p>",
        "id": 191855699,
        "sender_full_name": "Amanieu",
        "timestamp": 1585213911
    },
    {
        "content": "<p>The code is much less efficient than it could be.</p>",
        "id": 191855759,
        "sender_full_name": "Amanieu",
        "timestamp": 1585213924
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> I would <em>love</em> to see a more efficient <code>BTreeMap</code>, and would deeply appreciate it.</p>",
        "id": 191917295,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1585242340
    },
    {
        "content": "<p>Happy to test; I may have some large performance test cases in a few weeks.</p>",
        "id": 191917398,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1585242377
    },
    {
        "content": "<p>So, you're thinking of switching over to raw pointers and entirely unsafe internals?</p>",
        "id": 191917559,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1585242473
    },
    {
        "content": "<p>The lifetimes don't really help much with unsafety currently -- there's no raw references to speak of in the structs -- and I'm not sure what specifically <span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> is referring to.</p>",
        "id": 191917687,
        "sender_full_name": "simulacrum",
        "timestamp": 1585242535
    },
    {
        "content": "<p>(Well, I mean, they're only real help is they mean you can't wander off completely detached, but doing so in practice is quite hard anyway, certainly you're not going to start spawning a thread or w/e. The actual data is all behind raw pointers so the lifetimes don't help you there).</p>",
        "id": 191917761,
        "sender_full_name": "simulacrum",
        "timestamp": 1585242588
    },
    {
        "content": "<p>I also don't know exactly what we mean by \"much less efficient than it could be\" -- but I wouldn't disagree with it either, it's not implausible. I've not attempted to do performance analysis, though we've been steadily trying to clean up the existing impl a bit over the past month or so</p>",
        "id": 191917928,
        "sender_full_name": "simulacrum",
        "timestamp": 1585242661
    },
    {
        "content": "<p>(IMO, that has gone pretty well.)</p>",
        "id": 191917942,
        "sender_full_name": "simulacrum",
        "timestamp": 1585242666
    },
    {
        "content": "<p>The main issue is that <code>marker::Mut&lt;'a&gt;</code> only allows you to have one active <code>NodeRef</code> at a time. So the code has to go through hoops when it wants to mutate multiple nodes at once.</p>",
        "id": 191927933,
        "sender_full_name": "Amanieu",
        "timestamp": 1585246698
    },
    {
        "content": "<p>It's easier to explain with a linked list as an example. Let's say you want to remove the next node of a linked list. You call <code>list_remove(current-&gt;next)</code> and <code>list_remove</code> will unlink the next node from its two neighbors. But the compiler doesn't know that <code>current-&gt;next-&gt;prev == current</code> so it has to reload the pointer from memory even though it is probably already in a register.</p>",
        "id": 191928126,
        "sender_full_name": "Amanieu",
        "timestamp": 1585246801
    },
    {
        "content": "<p>This could be avoided if the code was a bit more liberal with lifetimes.</p>",
        "id": 191928209,
        "sender_full_name": "Amanieu",
        "timestamp": 1585246834
    },
    {
        "content": "<p>Have a look at this to see what I mean by a <code>Cell</code>-based design: <a href=\"https://github.com/Amanieu/intrusive-rs/blob/master/src/rbtree.rs\" title=\"https://github.com/Amanieu/intrusive-rs/blob/master/src/rbtree.rs\">https://github.com/Amanieu/intrusive-rs/blob/master/src/rbtree.rs</a></p>",
        "id": 191928332,
        "sender_full_name": "Amanieu",
        "timestamp": 1585246900
    },
    {
        "content": "<p>All operations on <code>NodePtr</code> take <code>self</code> (since <code>NodePtr: Copy</code>) and can freely mutate the <code>next</code>/<code>prev</code>/<code>parent</code> pointers which are wrapped in <code>Cell</code>s.</p>",
        "id": 191928512,
        "sender_full_name": "Amanieu",
        "timestamp": 1585246980
    },
    {
        "content": "<p>(This code was written before <code>NonNull</code> was stabilized, so it could be improved by making <code>NodePtr</code> non-null and wrapping it in an option)</p>",
        "id": 191928710,
        "sender_full_name": "Amanieu",
        "timestamp": 1585247066
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> That's not true, you can <code>reborrow_mut()</code> and get another NodeRef.</p>",
        "id": 191930273,
        "sender_full_name": "simulacrum",
        "timestamp": 1585247770
    },
    {
        "content": "<p>But yes, more generally, I want to drop that lifetime because I don't think it buys us much</p>",
        "id": 191930381,
        "sender_full_name": "simulacrum",
        "timestamp": 1585247822
    },
    {
        "content": "<p>I'm not sure if a rewrite is necessary, though -- I think it should be relatively straightforward to refactor the current code. It's my next planned project, in fact, if no one beats me to it.</p>",
        "id": 191930438,
        "sender_full_name": "simulacrum",
        "timestamp": 1585247857
    },
    {
        "content": "<p>You're right, a rewrite is probably overkill.</p>",
        "id": 191930570,
        "sender_full_name": "Amanieu",
        "timestamp": 1585247914
    },
    {
        "content": "<p>I've been looking at Google's btree implementation: <a href=\"https://github.com/abseil/abseil-cpp/blob/master/absl/container/internal/btree.h\" title=\"https://github.com/abseil/abseil-cpp/blob/master/absl/container/internal/btree.h\">https://github.com/abseil/abseil-cpp/blob/master/absl/container/internal/btree.h</a></p>",
        "id": 191930954,
        "sender_full_name": "Amanieu",
        "timestamp": 1585248086
    },
    {
        "content": "<p>They have a few interesting tricks:</p>\n<ul>\n<li>The number of nodes depends on the size of <code>T</code>. They use <code>constexpr</code> to aim for a leaf node size of ~256 bytes. This means that with <code>sizeof(T) == 4</code> they have a B of 61.</li>\n<li>If the tree only has a root leaf node, it may use a smaller allocation. The root node's allocation grows (via realloc) until it reaches B. All other nodes have a full allocation size.</li>\n<li>A pointer to the leftmost and rightmost leaf node is cached for faster iteration.</li>\n</ul>",
        "id": 191931345,
        "sender_full_name": "Amanieu",
        "timestamp": 1585248298
    },
    {
        "content": "<p>The first and the last item seem relatively straightforward, and I'd be unopposed -- the realloc to grow the root node sounds quite painful to get right, in some sense in particular with Rust though</p>",
        "id": 191931778,
        "sender_full_name": "simulacrum",
        "timestamp": 1585248526
    },
    {
        "content": "<p>(in particular, you would need to be even more careful about making references to that memory)</p>",
        "id": 191931826,
        "sender_full_name": "simulacrum",
        "timestamp": 1585248550
    },
    {
        "content": "<p>It also sounds like the kind of niche optimization that is ill-suited for what we usually do in std, similar to SmallVec vs Vec</p>",
        "id": 191931916,
        "sender_full_name": "simulacrum",
        "timestamp": 1585248591
    }
]