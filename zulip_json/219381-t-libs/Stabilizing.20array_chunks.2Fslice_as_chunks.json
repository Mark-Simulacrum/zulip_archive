[
    {
        "content": "<p>Issues: <a href=\"https://github.com/rust-lang/rust/issues/76354\">https://github.com/rust-lang/rust/issues/76354</a> and <a href=\"https://github.com/rust-lang/rust/issues/76354\">https://github.com/rust-lang/rust/issues/76354</a></p>\n<p>Hi folks,</p>\n<p>I wanted to check what the current blockers are, if any, for stabilizing <code>array_chunks</code> and <code>slice_as_chunks</code>. The tl;dr is that <code>std::slice::array_chunks</code> iterates over const-length array chunks of a slice <code>&amp;[T]</code>, and <code>std::slice::as_chunks</code> returns a <code>&amp;[[T; N]]</code> (i.e. the same thing, except it gives a slice directly rather than iterating over it). Both functions have reverse and <code>mut</code>-slice variants.</p>\n<p>AFAICT, the outstanding questions are:</p>\n<ul>\n<li>How to expose <code>&amp;[T] -&gt; &amp;[[T; N]]</code>? This is a useful operation to be able to do safely, but technically we could add a field to access the slice to the iterator returned from <code>array_chunks</code>, as an alternative to having separate <code>as_chunks</code>. Not clear that either option is drastically better; might just be a \"pick one based on API design taste and go with it\" decision.</li>\n<li>What to do if the supplied chunk length is 0? Currently this is a runtime panic. Ideally this would be a compile error, but this seems like it would require waiting for full const generics rather than stabilizing with min const generics. Options seem to include (a) leaving it as a runtime panic forever, (b) waiting until <code>const_evaluatable_checked</code> to ship this, or (c) documenting that it will be changed it to a compile error later (maybe unacceptable for compatibility).</li>\n</ul>\n<p>My personal motivation for wanting to stabilize this sooner is that I think it's unfortunate that converting <code>&amp;[T] -&gt; &amp;[[T; N]]</code> currently requires unsafe code.</p>",
        "id": 227728632,
        "sender_full_name": "Teddy Katz",
        "timestamp": 1614238291
    },
    {
        "content": "<p>.as_chunks().iter() seems a reasonable thing to type, if we want to keep the number of methods minimal</p>",
        "id": 227801096,
        "sender_full_name": "Lokathor",
        "timestamp": 1614272683
    },
    {
        "content": "<p><code>.as_chunks()</code> is currently returning a tuple <code>(chunks, remainder)</code>, so that would be <code>.as_chunks().0.iter()</code></p>",
        "id": 227802662,
        "sender_full_name": "cuviper",
        "timestamp": 1614273245
    },
    {
        "content": "<p>What about <code>.array_chunks().as_slice()</code> and <code>.array_chunks().remainder()</code> instead of <code>.as_chunks()</code>?</p>",
        "id": 227806181,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1614274620
    },
    {
        "content": "<p>For the <code>mut</code> versions, would it be <code>.array_chunks_mut().as_mut_slice()</code>? If so, would <code>as_slice</code> on an <code>ArrayChunksMut</code> also be available and return a shared slice? Or <code>as_slice</code> just return a slice of the corresponding type for all variants?</p>",
        "id": 227818997,
        "sender_full_name": "Teddy Katz",
        "timestamp": 1614279793
    },
    {
        "content": "<p>The <code>mut</code> versions are important here -- <code>.array_chunks_mut()</code> would need something like <code>.as_slice_and_remainder()</code> if you wanted to be able to get both slices at once, at which point it's back to being essentially <code>.as_chunks_mut()</code>.</p>",
        "id": 227821414,
        "sender_full_name": "scottmcm",
        "timestamp": 1614280734
    },
    {
        "content": "<p><code>vec::IntoIter</code> has both <code>as_slice()</code> and <code>as_mut_slice()</code><br>\n<code>slice::IterMut</code> has <code>as_slice(&amp;self) -&gt; &amp;[T]</code> and <code>into_slice(self) -&gt; &amp;mut [T]</code></p>",
        "id": 227821491,
        "sender_full_name": "cuviper",
        "timestamp": 1614280763
    },
    {
        "content": "<p>but <code>slice::IterMut</code> could reasonably have <code>as_mut_slice()</code> too, reborrowing</p>",
        "id": 227821623,
        "sender_full_name": "cuviper",
        "timestamp": 1614280806
    },
    {
        "content": "<p>I mean the borrow-check implications -- if I call <code>.as_mut_slice()</code> on the iterator, it \"locks\"s it so I can't <em>also</em> call <code>.remainder()</code>.  Thus the need for the version that returns the tuple with both mutable slices.</p>",
        "id": 227821716,
        "sender_full_name": "scottmcm",
        "timestamp": 1614280843
    },
    {
        "content": "<p>yes, true</p>",
        "id": 227821733,
        "sender_full_name": "cuviper",
        "timestamp": 1614280856
    },
    {
        "content": "<blockquote>\n<p>Or <code>as_slice</code> just return a slice of the corresponding type for all variants?</p>\n</blockquote>\n<p>I was more directly responding to this -- the precedent is that <code>as_slice</code> is always shared</p>",
        "id": 227822004,
        "sender_full_name": "cuviper",
        "timestamp": 1614280941
    },
    {
        "content": "<p>I think the important conceptual model question here is what one is normally expected to do with the remainder.</p>\n<ul>\n<li>\n<p>If it's normal to silently ignore the remainder, then the <code>.array_chunks()</code> iterator is great.</p>\n</li>\n<li>\n<p>If one should normally at least be looking at the remainder -- perhaps just as <code>assert!(remainder.is_empty())</code> or <code>if let (chunks, &amp;[]) = slice.as_chunks() {</code> -- then I think the <code>.as_chunks()</code> is better because it's more likely to not be forgotten.  (Or at least it'd be more noticeably ignored, via <code>let (chunks, _) =</code> or <code>.0</code>.)</p>\n</li>\n</ul>",
        "id": 227822377,
        "sender_full_name": "scottmcm",
        "timestamp": 1614281069
    },
    {
        "content": "<p><code>chunks_exact</code> also sets a precedent here</p>",
        "id": 227822577,
        "sender_full_name": "cuviper",
        "timestamp": 1614281133
    },
    {
        "content": "<p>in that a possibly-forgettable remainder is a thing</p>",
        "id": 227822679,
        "sender_full_name": "cuviper",
        "timestamp": 1614281165
    },
    {
        "content": "<p>It might also set a precedent that it should have <code>exact</code> in the name to mark that, though.  Dunno.</p>",
        "id": 227823983,
        "sender_full_name": "scottmcm",
        "timestamp": 1614281582
    },
    {
        "content": "<p>yeah we should go as close as possible to existing slice content</p>",
        "id": 227830258,
        "sender_full_name": "Lokathor",
        "timestamp": 1614283734
    },
    {
        "content": "<p>so chunks for \"maybe has a remainder\", chunks_exact for \"you are asserting no remainder here\"</p>",
        "id": 227830306,
        "sender_full_name": "Lokathor",
        "timestamp": 1614283756
    },
    {
        "content": "<p>In my experience with <code>chunks_exact</code>, I often want to assert that the remainder is empty, but this is a bit inconvenient (e.g. requires assigning to a variable) so I sometimes end up ignoring the remainder instead. That's not ideal, but it's unclear what would be the best way to deal with it here, aside from having a separate function that panics if there's a remainder.</p>\n<p>Aside from that, it seems weird to only be able to access one of the {slice, remainder} mutably. This is just an intuitive reaction based on thinking that accessing both parts mutably is a plausibly useful primitive, with no \"good\" (soundness-related) reason to disallow it. I don't have an actual use case in mind.</p>\n<p>I suppose if we did disallow accessing both parts mutably, someone could work around it by doing some math and calling <code>split_at_mut</code> before <code>array_chunks</code>. But that seems like it's not ideal for ergonomics.</p>",
        "id": 227830700,
        "sender_full_name": "Teddy Katz",
        "timestamp": 1614283917
    },
    {
        "content": "<p>oh oops, chunks_exact can have a remainder, it's just not in the main iterator. i guess we can't follow that so well here.</p>",
        "id": 227830964,
        "sender_full_name": "Lokathor",
        "timestamp": 1614284005
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"392468\">Teddy Katz</span> <a href=\"#narrow/stream/219381-t-libs/topic/Stabilizing.20array_chunks.2Fslice_as_chunks/near/227830700\">said</a>:</p>\n<blockquote>\n<p>I suppose if we did disallow accessing both parts mutably, someone could work around it by doing some math and calling <code>split_at_mut</code> before <code>array_chunks</code>. But that seems like it's not ideal for ergonomics.</p>\n</blockquote>\n<p>That math and <code>split_at_mut</code> is basically what <code>as_chunks_mut</code> is doing <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 227843800,
        "sender_full_name": "scottmcm",
        "timestamp": 1614289267
    },
    {
        "content": "<p>The \"I often expect the remainder to be empty\" conversation does make the think about something like <code>-&gt; Result&lt;&amp;[[T; N]], (&amp;[[T; N]], &amp;[T])&gt;</code> so it can be <code>.unwrap()</code>ed, but that return type would be pretty awkward to use when you're ok with there sometimes being a remainder.</p>",
        "id": 227844133,
        "sender_full_name": "scottmcm",
        "timestamp": 1614289419
    },
    {
        "content": "<p>yeah that sounds annoying to use...</p>",
        "id": 227845546,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1614290002
    },
    {
        "content": "<p>don't slice patterns already solve matching on the returned tuple if you want to distinguish the exact case</p>",
        "id": 227848029,
        "sender_full_name": "The 8472",
        "timestamp": 1614291105
    },
    {
        "content": "<p>I suppose you can do something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">process_chunks</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">chunks</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"p\">[[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">]])</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cm\">/* ... */</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">process_data</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">data</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"c1\">// before (no assertion):</span>\n<span class=\"w\">  </span><span class=\"n\">process_chunks</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">as_chunks_mut</span><span class=\"p\">().</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"c1\">// after (with assertion):</span>\n<span class=\"w\">  </span><span class=\"n\">process_chunks</span><span class=\"p\">(</span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">as_chunks_mut</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">chunks</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[])</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">chunks</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"fm\">panic!</span><span class=\"p\">(</span><span class=\"s\">\"unexpected remainder\"</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 227854216,
        "sender_full_name": "Teddy Katz",
        "timestamp": 1614294080
    },
    {
        "content": "<p>well that supposes that as_chunks_mut doesn't keep the borrow going once it's done</p>",
        "id": 227855520,
        "sender_full_name": "Lokathor",
        "timestamp": 1614294744
    },
    {
        "content": "<p>So to centralize the discussion back on <code>array_chunks</code>/<code>slice_as_chunks</code> (let me know if anyone disagrees with the following summary, but this is my take so far):</p>\n<ul>\n<li>It seems like it might not be workable to get rid of <code>as_chunks_mut</code>, because this would prevent simultaneously accessing the slice and the remainder, even when no soundness issue exists when doing so. IMO, this is different from <code>chunks_exact_mut</code> (which has <code>into_remainder</code>) since <code>array_chunks_mut</code> exposes a slice rather than an iterator -- iterators are more likely to only be consumed once , which makes sharing less of a problem with <code>chunks_exact_mut</code>.</li>\n<li>We could get rid of <code>array_chunks</code> in favor of <code>slice_as_chunks().0.iter()</code>. Alternatively, we could keep both.</li>\n<li>Some discussion might still be needed on whether it's tenable to stabilize these before <code>const_evaluatable_checked</code>.</li>\n</ul>",
        "id": 228030681,
        "sender_full_name": "Teddy Katz",
        "timestamp": 1614398489
    }
]