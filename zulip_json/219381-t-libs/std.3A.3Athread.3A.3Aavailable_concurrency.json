[
    {
        "content": "<p>I submitted a pull request to implement <code>std::thread::available_concurrency</code> using <code>sched_getaffinity</code> on Linux, which handles the case where the process doesn't have access to all CPUs, such as when limited via <code>taskset</code> or similar.</p>\n<p>Once that goes in, I <em>think</em> that should clear the path for stabilizing <code>available_concurrency</code>. Any objections to proposing stabilization at that point?</p>",
        "id": 255115631,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1632774877
    },
    {
        "content": "<p>I'm aware that there's also a request to support cgroup-based CPU limiting. I think that's potentially useful to add, but I personally think it'd be OK to allow that to happen in parallel (no pun intended), rather than waiting for an implementation.</p>",
        "id": 255115710,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1632774918
    },
    {
        "content": "<p>Well, the cgroup limitations are important for containers, more so than affinity masks.</p>",
        "id": 255119872,
        "sender_full_name": "The 8472",
        "timestamp": 1632776696
    },
    {
        "content": "<p>So it's an improvement, but it's not clear how this paves the way to stabilization more than adding the cgroup part would.</p>\n<p>Of course we could say that neither is critical to stabilization and the process could have been started previously.</p>",
        "id": 255120785,
        "sender_full_name": "The 8472",
        "timestamp": 1632777105
    },
    {
        "content": "<p>sched_getaffinity doesn't just handle thread affinity; it also covers cpusets.</p>",
        "id": 255157170,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1632801002
    },
    {
        "content": "<p>So <em>as far as I know</em> it covers the kind of container restriction that restricts the use of CPUs.</p>",
        "id": 255157248,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1632801054
    },
    {
        "content": "<p>It doesn't cover bandwidth-based restriction, but it covers cpuset-based restriction.</p>",
        "id": 255157282,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1632801099
    },
    {
        "content": "<p>Well, at least with k8s cfs quotas are the default for CPU allocation. Affinity-based limits are a beta feature.</p>",
        "id": 255278289,
        "sender_full_name": "The 8472",
        "timestamp": 1632855313
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/219381-t-libs/topic/std.3A.3Athread.3A.3Aavailable_concurrency/near/255115631\">said</a>:</p>\n<blockquote>\n<p>Once that goes in, I <em>think</em> that should clear the path for stabilizing <code>available_concurrency</code>. Any objections to proposing stabilization at that point?</p>\n</blockquote>\n<p>I think that makes sense! - I've submitted a patch to update the docs so we're ready to stabilize (+ we merged the naming change), and think if your patch lands as well, we'll be in a really good spot to stabilize.</p>",
        "id": 257175561,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1634031767
    },
    {
        "content": "<p>The one thing missing that we may want to address after that, is adding support for CPU limits on Windows - but that doesn't seem like it should be a blocker for stabilizing the API as long as we document that limitations exist.</p>",
        "id": 257175672,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1634031840
    },
    {
        "content": "<p>Yeah, I think we should have a <em>very</em> careful caveat comment, stating that it's useful as a default value for the amount of parallel jobs to run, but that there are many system-specific things it may not take into account, that some applications will want more specialized functionality, and that most applications should provide a means for the user to override the value.</p>",
        "id": 257176999,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1634032539
    },
    {
        "content": "<p>I just posted a bunch of comments and suggestions on <a href=\"https://github.com/rust-lang/rust/pull/89670/\">https://github.com/rust-lang/rust/pull/89670/</a> .</p>",
        "id": 257181817,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1634035159
    },
    {
        "content": "<p>I think with all of those integrated, we'd have sufficient caveats without being overly specific.</p>",
        "id": 257181835,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1634035174
    },
    {
        "content": "<p>Yay, my PR has been merged! -- I believe we just need to merge <a href=\"https://github.com/rust-lang/rust/pull/89310\">https://github.com/rust-lang/rust/pull/89310</a> next and then this should be ready to propose for stabilization?</p>",
        "id": 257563285,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1634228571
    }
]