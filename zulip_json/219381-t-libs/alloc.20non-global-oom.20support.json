[
    {
        "content": "<p>I wanted to kick a thread off here so we can hopefully reach some conclusion (or how to go about it) for <a href=\"https://github.com/rust-lang/rust/pull/84266\">https://github.com/rust-lang/rust/pull/84266</a></p>\n<p>I think from my perspective I'm not aware of fundamental blockers, so if someone feels there should be, then I think it'd be good to figure out how to raise those concerns. (I have implementation concerns, as indicated with my review comment, but they're quality of life rather than intrinsic to the approach)</p>\n<p>cc <span class=\"user-mention\" data-user-id=\"220594\">@John Ericson</span></p>",
        "id": 235722413,
        "sender_full_name": "simulacrum",
        "timestamp": 1619114701
    },
    {
        "content": "<p>Yeah, my biggest concern is that there is going to be a pretty constant stream of things that miss the cfg</p>",
        "id": 235722824,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1619114871
    },
    {
        "content": "<p>and it may tie our hands in how we implement certain internal bits (e.g. imagine we wanted to switch from a non-allocating to allocating stable sort algorithm or something like that)</p>",
        "id": 235722914,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1619114902
    },
    {
        "content": "<p>Well, setting up CI to statically check for that is easy, I believe, but it is definitely a burden on each PR</p>",
        "id": 235722962,
        "sender_full_name": "simulacrum",
        "timestamp": 1619114914
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219747\">@Simon Sapin</span> has a valid, I think, concern that this may be too niche for std itself; it may also be that we <em>do</em> want to support this experiment but as e.g. a alloc_fallible crate which alloc itself builds atop of. But that is definitely a significant increase in complexity.</p>",
        "id": 235723070,
        "sender_full_name": "simulacrum",
        "timestamp": 1619114977
    },
    {
        "content": "<p>A downside of Rust-for-Linux forking <code>alloc</code> is potentially duplicated effort in future improvements, but it’s not obvious to me that that’s much worse than accepting all of this complexity in the standard library</p>",
        "id": 235724409,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1619115512
    },
    {
        "content": "<p>I think a key question may be if it's possible to achieve what Rust-for-Linux need without being in std (and having access to unstable features etc.) -- if there's some minimal core we need to stabilize to make an out-of-tree alloc without global OOM possible, then targeting that may make more sense then this current avenue.</p>",
        "id": 235725145,
        "sender_full_name": "simulacrum",
        "timestamp": 1619115817
    },
    {
        "content": "<p>But I also am not sure about the constraints being operated in here, and that may help inform the correct approach. It may be very useful in the end to have fallible local allocators (for e.g. putting a btree inside a fixed-size arena); we may not want that in std, though.</p>",
        "id": 235725276,
        "sender_full_name": "simulacrum",
        "timestamp": 1619115869
    },
    {
        "content": "<p><a href=\"https://github.com/Rust-for-Linux/linux/issues/2#issuecomment-821289042\">https://github.com/Rust-for-Linux/linux/issues/2#issuecomment-821289042</a> discusses the lang items used by <code>alloc</code> and how to not need them</p>",
        "id": 235728227,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1619116993
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> I'm one of the folks behind for Rust-for-Linux, happy to try to answer any questions that exist.</p>",
        "id": 235729038,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1619117343
    },
    {
        "content": "<p>In the wider ecosystem adding new features that are enabled by default and are necessary to retain compatibility are actually breaking because there may be users downstream who have default-features=false set for any reason.</p>",
        "id": 235731843,
        "sender_full_name": "nagisa",
        "timestamp": 1619118580
    },
    {
        "content": "<p>But then I think std-aware or sysroot-aware cargo isn't a thing yet is it?</p>",
        "id": 235731980,
        "sender_full_name": "nagisa",
        "timestamp": 1619118631
    },
    {
        "content": "<p>-Zbuild-std isn't stable, but AFAIK is not unused</p>",
        "id": 235732115,
        "sender_full_name": "simulacrum",
        "timestamp": 1619118711
    },
    {
        "content": "<p>(so seems to work OK)</p>",
        "id": 235732133,
        "sender_full_name": "simulacrum",
        "timestamp": 1619118720
    },
    {
        "content": "<p>build-std is used a fair bit for embedded systems without pre-compiled libstd I think</p>",
        "id": 235732403,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1619118842
    },
    {
        "content": "<p>BTW I made an issue in <a href=\"https://github.com/rust-lang/wg-allocators/issues/87\">https://github.com/rust-lang/wg-allocators/issues/87</a> too.</p>",
        "id": 235734639,
        "sender_full_name": "John Ericson",
        "timestamp": 1619119784
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/84266#issuecomment-825113967\">https://github.com/rust-lang/rust/pull/84266#issuecomment-825113967</a> Does this mean its slated for the 28th?</p>",
        "id": 235735006,
        "sender_full_name": "John Ericson",
        "timestamp": 1619119935
    },
    {
        "content": "<p>yes</p>",
        "id": 235735899,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1619120284
    },
    {
        "content": "<p>at least for Pacific Time</p>",
        "id": 235735972,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1619120312
    },
    {
        "content": "<p><time datetime=\"2021-04-28T19:00:00Z\">2021-04-28T12:00:00-07:00</time></p>",
        "id": 235736098,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1619120371
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> thank you!</p>",
        "id": 235736407,
        "sender_full_name": "John Ericson",
        "timestamp": 1619120503
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130046\">@Alex Gaynor</span> Do you have thoughts on Rust-for-Linux forking <code>alloc</code> v.s. working to make upstream <code>alloc</code> do everything it needs?</p>",
        "id": 235737332,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1619120896
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"219747\">Simon Sapin</span> <a href=\"#narrow/stream/219381-t-libs/topic/alloc.20non-global-oom.20support/near/235724409\">said</a>:</p>\n<blockquote>\n<p>A downside of Rust-for-Linux forking <code>alloc</code> is potentially duplicated effort in future improvements, but it’s not obvious to me that that’s much worse than accepting all of this complexity in the standard library</p>\n</blockquote>\n<p>I responded to this in <a href=\"https://github.com/rust-lang/rust/pull/84266#issuecomment-825117489\">https://github.com/rust-lang/rust/pull/84266#issuecomment-825117489</a>, but to expound a bit I think one of the most interesting aspects of getting Rust in major projects like Linux is to promote the idea that non-userspace projects can share code too. Right now, due to the inflexibility of C, things oftend  copied pasted once and modified, whether it's cheap android phones with non-upstreamed kernels, embedded systems with various SDK ROTC code, etc. Projects like ZFS which target multiple kernels are extremely rare.</p>\n<p>Rust has done a great job of showing that sharing code even at the bottom of the stack is possible. There are currently unfortunate build system issues preventing Cargo from being used with Linux, but I hope those are addressed. Getting alloc right is the best opportunity here to do demonstrate the care that goes into Rust libraries and how they are good for far more than is originally envisioned. And that is in turn a way to begin to nudge the broader embedded community away from their \"vendor and forget\" practices that lead to so many issues.</p>",
        "id": 235737416,
        "sender_full_name": "John Ericson",
        "timestamp": 1619120920
    },
    {
        "content": "<p>(where adding the ability to make some APIs not available is also \"doing\")</p>",
        "id": 235737438,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1619120931
    },
    {
        "content": "<p>From my perspective: No panic-on-allocation-failure APIs is a hard requirement, and some of the other stuff (e.g. flags) is a nice to have, since that can easily be added on top of an existing thing.</p>\n<p>I think it's really a question of timelines -- in an ideal world we'd be able to use upstream <code>alloc</code>, but if it's a substantial difference in how long it takes to get something working, it might make sense for us to fork as a short-medium term solution and then hopefully merge back to upstraem at a later point.</p>",
        "id": 235737669,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1619121017
    },
    {
        "content": "<p>Also re long term maintainability, stuff like this ought to light a fire under <a href=\"https://github.com/rust-lang/rfcs/pull/1868\">https://github.com/rust-lang/rfcs/pull/1868</a> to make that finally get implemented. Then the pain of dealing with cfgs evaporates more or less entirely.</p>",
        "id": 235738229,
        "sender_full_name": "John Ericson",
        "timestamp": 1619121254
    },
    {
        "content": "<p>I'm not sure if the lint would help. What would be needed here is to check that the compiled output contains no call to <code>handle_alloc_error</code>, even if it goes through several internal methods. The lints only check based on cfg, so would still require cfgs being applied everywhere.<br>\nIt would take a different kind of lint.</p>",
        "id": 235740201,
        "sender_full_name": "The 8472",
        "timestamp": 1619122108
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"330154\">@The 8472</span> it should. The \"cfg\" solver can largely treat <code>os(linux)</code> <code>feature = \"...\"</code> as block boxes, akin to a SAT solver. (if we want to add a litttle domain-specific info like onely one OS at a time, that would be SMT.) In this case, we're just tracking down that all variables have unambiguous resolutions under all (realistic) cfg combinations, which is this sort of analysis's bread and better.</p>\n<p>I don't want to get too much into the weeds off topic but I'd be happy to link you the relevant prior research if you are interested.</p>",
        "id": 235748987,
        "sender_full_name": "John Ericson",
        "timestamp": 1619125790
    },
    {
        "content": "<p>I'm not sure if we're even talking about the same thing. What I am trying to say is that the lint relies on cfg <em>at all</em>. Which means you would have to slather cfgs over all the fallible or infallible methods, which <a href=\"https://github.com/rust-lang/rust/issues/84266\">#84266</a> already does.<br>\nIf we wanted to be more lightweight we'd need something different, e.g. checking if the build output doesn't contain certain methods in its call tree. <br>\nThen you wouldn't need to cfg thousands of methods and instead get build failures when undesirable methods are used, even indirectly.</p>",
        "id": 235749734,
        "sender_full_name": "The 8472",
        "timestamp": 1619126121
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"330154\">@The 8472</span> Hmm that is different. To me the annoyance isn't the shear number of CFGs, but that it takes multiple builds to catch whether they are all correct -- hence people talking about more CI failures for things that were working locally in the default configuration. With the portability lint, one effectively does the first few compilation stages simultaneously, which makes any CFG issue very easy to catch with whatever dev env is in use.</p>",
        "id": 235751392,
        "sender_full_name": "John Ericson",
        "timestamp": 1619126968
    },
    {
        "content": "<p>FWIW we can (and should) improve the contribution story around 'wrong' cfg's annotated; I think the lint may be the 'ideal' but is by no means necessary; we can hard code into x.py some logic that would make it always run cargo check for the various configs (perhaps even in the background).</p>",
        "id": 235753335,
        "sender_full_name": "simulacrum",
        "timestamp": 1619127909
    },
    {
        "content": "<p>Doesn't work for target configs at least, you suggested that recently.</p>\n<div class=\"codehilite\"><pre><span></span><code>$ ./x.py check --target x86_64-pc-windows-msvc\nUpdating only changed submodules\nSubmodules updated in 0.02 seconds\n    Finished dev [unoptimized + debuginfo] target(s) in 0.13s\nthread &#39;main&#39; panicked at &#39;\ncmake does not support Visual Studio generators.\n</code></pre></div>\n<p>But it could for this kind of config</p>",
        "id": 235753778,
        "sender_full_name": "The 8472",
        "timestamp": 1619128135
    },
    {
        "content": "<p>Well, even there, there's no reason for it not to work it just doesn't right now</p>",
        "id": 235758662,
        "sender_full_name": "simulacrum",
        "timestamp": 1619130822
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330154\">The 8472</span> <a href=\"#narrow/stream/219381-t-libs/topic/alloc.20non-global-oom.20support/near/235753778\">said</a>:</p>\n<blockquote>\n<p>Doesn't work for target configs at least, you suggested that recently.</p>\n<div class=\"codehilite\"><pre><span></span><code>$ ./x.py check --target x86_64-pc-windows-msvc\nUpdating only changed submodules\nSubmodules updated in 0.02 seconds\n    Finished dev [unoptimized + debuginfo] target(s) in 0.13s\nthread &#39;main&#39; panicked at &#39;\ncmake does not support Visual Studio generators.\n</code></pre></div>\n<p>But it could for this kind of config</p>\n</blockquote>\n<p>I would expect that particular message to go away if you turn on download-ci-llvm</p>",
        "id": 235771633,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1619139515
    },
    {
        "content": "<p>I have had enormous pains on e.g. a Linux PC trying to contribute to an project targeting multiple OS (Rustup) because of <code>#[cfg]</code> issues. I managed to improve it by cleanly and clearly segmenting everything out as much as I could, but it is monstrously easy to miss something in <em>adding</em> <code>#[cfg]</code> annotations and I did so constantly. At that point, unless I am missing something here, a badass <code>#[cfg]</code> solver can't help much, and neither can a portability lint, if both the use and def site are missing the attribute. <code>#[cfg]</code> is necessary in many cases, even desirable, but I think it should be viewed as a <em>fragile</em> solution compared to other ones, and one that can add a high burden to contributors and reviewers unless it is on an entire module-by-module basis... that is relatively easy to handle, but amounts to something close to the earlier <code>fallible_alloc</code> crate proposal.</p>",
        "id": 236036289,
        "sender_full_name": "Jubilee",
        "timestamp": 1619324782
    },
    {
        "content": "<p>I recall this discussion continuing in a libs-api call and one of the discussion points was to have separate types (with conversion methods) for infallible and fallible <code>Vec</code>. I can't find meeting notes or anything recording that discussion and how strong that conclusion was.</p>\n<p>Maybe the libs team can chime in at <a href=\"https://github.com/rust-lang/rust/issues/48043\">#48043</a> ?</p>",
        "id": 249391484,
        "sender_full_name": "The 8472",
        "timestamp": 1628877221
    },
    {
        "content": "<p>Several people in that discussion very much <em>didn't</em> want to see separate types, because those types tend to \"infect\" everything in an API, and it's a pain to support both.</p>",
        "id": 249408555,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1628885771
    },
    {
        "content": "<p>Isn’t fallibility an independent axis compared to the presence or not of a default global allocator?</p>",
        "id": 249455455,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1628940696
    },
    {
        "content": "<p>yes</p>",
        "id": 249462034,
        "sender_full_name": "Lokathor",
        "timestamp": 1628950748
    }
]