[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"143274\">Amanieu</span> <a href=\"#narrow/stream/219381-t-libs/topic/Replacing.20mpsc/near/190330406\" title=\"#narrow/stream/219381-t-libs/topic/Replacing.20mpsc/near/190330406\">said</a>:</p>\n<blockquote>\n<p>This feels similar to the move to replace std's Mutex with parking_lot::Mutex. Basically std::sync::Mutex will end up as a wrapper around parking_lot::Mutex, but with a \"worse\" API since it is already stable. (\"worse\" in this case refers to poisoning, which nobody cares about, but that's off-topic)</p>\n</blockquote>\n<p>Has this happened?</p>",
        "id": 190330533,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1583960243
    },
    {
        "content": "<p>It's being worked on... slowly</p>",
        "id": 190330781,
        "sender_full_name": "centril",
        "timestamp": 1583960379
    },
    {
        "content": "<p>iirc, this stalled out with some parking_lot changes in upstream requested by Alex, but I forget the details. There was also some problem with Instant::now coupling</p>",
        "id": 190330886,
        "sender_full_name": "simulacrum",
        "timestamp": 1583960408
    },
    {
        "content": "<p>Not yet.</p>",
        "id": 190330887,
        "sender_full_name": "Amanieu",
        "timestamp": 1583960408
    },
    {
        "content": "<p>Basically it's stalled since nobody is actively working on it.</p>",
        "id": 190330933,
        "sender_full_name": "Amanieu",
        "timestamp": 1583960429
    },
    {
        "content": "<p>faern isn't?</p>",
        "id": 190330956,
        "sender_full_name": "centril",
        "timestamp": 1583960440
    },
    {
        "content": "<p>I'll ask him about it at the next meetup then :D</p>",
        "id": 190331006,
        "sender_full_name": "centril",
        "timestamp": 1583960472
    },
    {
        "content": "<blockquote>\n<p>It's being worked on... slowly</p>\n</blockquote>\n<p>Yeah, I remember people talking about it at RustFest Rome <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 190331009,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1583960477
    },
    {
        "content": "<p>for reference: <a href=\"https://github.com/rust-lang/rust/pull/56410\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/56410\">https://github.com/rust-lang/rust/pull/56410</a></p>",
        "id": 190331031,
        "sender_full_name": "cuviper",
        "timestamp": 1583960492
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"117909\">@faern</span></p>",
        "id": 190331048,
        "sender_full_name": "centril",
        "timestamp": 1583960510
    },
    {
        "content": "<p>Alex and I talked a while ago about reforming std::sync more broadly - moving things out to more \"normal\" places like std::mutex::Mutex and removing poisoning in those versions</p>",
        "id": 190331199,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1583960593
    },
    {
        "content": "<p>I have not worked on the parking_lot integration for many months. When I started, the intention was to just integrate an already well functioning parking_lot into std. It then exploded in many directions. Alex was unhappy with quite a few things in parking_lot itself. And there are issues with how well it can work on some platforms (for example SGX and wasm last time I checked?).<br>\nI contributed quite a few improvements to parking_lot, but nowhere near everything needed to cover Alex's review.<br>\nWith those things in mind it felt like the project outgrew the energy and time I had.</p>",
        "id": 190592860,
        "sender_full_name": "faern",
        "timestamp": 1584185127
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243558\">Steven Fackler</span> <a href=\"#narrow/stream/219381-t-libs/topic/parking_lot.3A.3AMutex.20in.20std/near/190331199\" title=\"#narrow/stream/219381-t-libs/topic/parking_lot.3A.3AMutex.20in.20std/near/190331199\">said</a>:</p>\n<blockquote>\n<p>Alex and I talked a while ago about reforming std::sync more broadly - moving things out to more \"normal\" places like std::mutex::Mutex and removing poisoning in those versions</p>\n</blockquote>\n<p>My two cents is that <code>std::mutex</code> is less discoverable and pollutes the namespace more. Is there a general move in <code>std</code> to have shallower modules in general? It makes it harder to discover and compare synchronization primitives if <code>RwLock</code> and <code>Mutex</code> are not in the same module.</p>",
        "id": 190593169,
        "sender_full_name": "faern",
        "timestamp": 1584185485
    },
    {
        "content": "<p>Correction: <code>std::mutex</code> is in itself not hard to discover. But it moves different related primitives further from each other was my point :)</p>",
        "id": 190595051,
        "sender_full_name": "faern",
        "timestamp": 1584188130
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"117909\">@faern</span> There's not a move for shallower modules. I think the reasoning for having it as a separate module is that it allows breaking changes.</p>",
        "id": 190602111,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1584200927
    },
    {
        "content": "<p>It can have breaking changes in the same module if the name is different. Or put under a submodule. <code>std::sync::v2</code>? :)</p>",
        "id": 190610035,
        "sender_full_name": "faern",
        "timestamp": 1584213768
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"117909\">@faern</span> Right, but neither of those solutions are strictly better, they are what you prefer. There will always be different tradeoffs.</p>",
        "id": 190610947,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1584214765
    }
]