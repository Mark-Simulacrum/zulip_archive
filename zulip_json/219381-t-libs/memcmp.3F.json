[
    {
        "content": "<p>It looks like slice internally uses memcmp to implement Ord and Eq for [u8]. But I can't find a public method that gives me the position of the first mismatch like memcmp does.</p>",
        "id": 244964404,
        "sender_full_name": "The 8472",
        "timestamp": 1625510548
    },
    {
        "content": "<p>you can do it with iterators but I don't know if that turns into a memcmp call</p>",
        "id": 244971332,
        "sender_full_name": "Lokathor",
        "timestamp": 1625516671
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330154\">The 8472</span> <a href=\"#narrow/stream/219381-t-libs/topic/memcmp.3F/near/244964404\">said</a>:</p>\n<blockquote>\n<p>It looks like slice internally uses memcmp to implement Ord and Eq for [u8]. But I can't find a public method that gives me the position of the first mismatch like memcmp does.</p>\n</blockquote>\n<p>memcmp doesn't do that: it just returns 1, 0, or -1 (or any positive or negative value other than 0):</p>\n<p>Say we have the signature:</p>\n<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"kt\">int</span> <span class=\"nf\">memcmp</span> <span class=\"p\">(</span> <span class=\"k\">const</span> <span class=\"kt\">void</span> <span class=\"o\">*</span> <span class=\"n\">ptr1</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">void</span> <span class=\"o\">*</span> <span class=\"n\">ptr2</span><span class=\"p\">,</span> <span class=\"kt\">size_t</span> <span class=\"n\">num</span> <span class=\"p\">);</span>\n</code></pre></div>\n<p>If the value is &lt; 0, the first byte that differs is less in <code>ptr1</code> relative to <code>ptr2</code>. If it's 0, both are equal. If it's &gt; 0, then the first  byte that differs is greater in <code>ptr2</code> relative to <code>ptr2</code>.</p>",
        "id": 244974123,
        "sender_full_name": "Alexander Huszagh (He/Him)",
        "timestamp": 1625518969
    },
    {
        "content": "<p>For example, in Apple's implementation, we have this:</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"kt\">int</span>\n<span class=\"nf\">memcmp</span><span class=\"p\">(</span><span class=\"n\">s1</span><span class=\"p\">,</span> <span class=\"n\">s2</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n    <span class=\"n\">CONST</span> <span class=\"n\">VOID</span> <span class=\"o\">*</span><span class=\"n\">s1</span><span class=\"p\">;</span>         <span class=\"cm\">/* First string. */</span>\n    <span class=\"n\">CONST</span> <span class=\"n\">VOID</span> <span class=\"o\">*</span><span class=\"n\">s2</span><span class=\"p\">;</span>         <span class=\"cm\">/* Second string. */</span>\n    <span class=\"kt\">size_t</span>      <span class=\"n\">n</span><span class=\"p\">;</span>                      <span class=\"cm\">/* Length to compare. */</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">unsigned</span> <span class=\"kt\">char</span> <span class=\"n\">u1</span><span class=\"p\">,</span> <span class=\"n\">u2</span><span class=\"p\">;</span>\n\n    <span class=\"k\">for</span> <span class=\"p\">(</span> <span class=\"p\">;</span> <span class=\"n\">n</span><span class=\"o\">--</span> <span class=\"p\">;</span> <span class=\"n\">s1</span><span class=\"o\">++</span><span class=\"p\">,</span> <span class=\"n\">s2</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">u1</span> <span class=\"o\">=</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"kt\">unsigned</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"n\">s1</span><span class=\"p\">;</span>\n    <span class=\"n\">u2</span> <span class=\"o\">=</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"kt\">unsigned</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"n\">s2</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span> <span class=\"n\">u1</span> <span class=\"o\">!=</span> <span class=\"n\">u2</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">u1</span><span class=\"o\">-</span><span class=\"n\">u2</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>So the difference is just the difference in the unsigned byte here.</p>\n<p>A similarly conforming implementation can do:</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"kt\">int</span>\n<span class=\"nf\">memcmp</span> <span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">PTR</span> <span class=\"n\">str1</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">PTR</span> <span class=\"n\">str2</span><span class=\"p\">,</span> <span class=\"kt\">size_t</span> <span class=\"n\">count</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"k\">register</span> <span class=\"k\">const</span> <span class=\"kt\">unsigned</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">s1</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">unsigned</span> <span class=\"kt\">char</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">str1</span><span class=\"p\">;</span>\n  <span class=\"k\">register</span> <span class=\"k\">const</span> <span class=\"kt\">unsigned</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">s2</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">unsigned</span> <span class=\"kt\">char</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">str2</span><span class=\"p\">;</span>\n  <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">count</span><span class=\"o\">--</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">s1</span><span class=\"o\">++</span> <span class=\"o\">!=</span> <span class=\"o\">*</span><span class=\"n\">s2</span><span class=\"o\">++</span><span class=\"p\">)</span>\n          <span class=\"k\">return</span> <span class=\"n\">s1</span><span class=\"p\">[</span><span class=\"mi\">-1</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">s2</span><span class=\"p\">[</span><span class=\"mi\">-1</span><span class=\"p\">]</span> <span class=\"o\">?</span> <span class=\"mi\">-1</span> <span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n  <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>So, this is effectively just <code>cmp::Ord</code>.</p>",
        "id": 244974251,
        "sender_full_name": "Alexander Huszagh (He/Him)",
        "timestamp": 1625519110
    },
    {
        "content": "<p>Probably the best way would be to do <code>iter.position</code>.</p>\n<p>The code:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">index_not_equal</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">y</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">iter</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">().</span><span class=\"n\">zip</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">iter</span><span class=\"p\">.</span><span class=\"n\">position</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">).</span><span class=\"n\">unwrap_or</span><span class=\"p\">(</span><span class=\"kt\">usize</span>::<span class=\"n\">MAX</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Optimizes on x86_64 to:</p>\n<div class=\"codehilite\" data-code-language=\"GAS\"><pre><span></span><code><span class=\"nl\">example:</span><span class=\"err\">:</span><span class=\"nl\">index_not_equal:</span>\n        <span class=\"nf\">cmp</span>     <span class=\"no\">rsi</span><span class=\"p\">,</span> <span class=\"no\">rcx</span>\n        <span class=\"nf\">cmova</span>   <span class=\"no\">rsi</span><span class=\"p\">,</span> <span class=\"no\">rcx</span>\n        <span class=\"nf\">neg</span>     <span class=\"no\">rsi</span>\n        <span class=\"nf\">mov</span>     <span class=\"no\">rax</span><span class=\"p\">,</span> <span class=\"mi\">-1</span>\n        <span class=\"nf\">mov</span>     <span class=\"no\">r9</span><span class=\"p\">,</span> <span class=\"mi\">-1</span>\n<span class=\"nl\">.LBB0_1:</span>\n        <span class=\"nf\">lea</span>     <span class=\"no\">rcx</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"no\">rsi</span> <span class=\"err\">+</span> <span class=\"no\">r9</span><span class=\"p\">]</span>\n        <span class=\"nf\">cmp</span>     <span class=\"no\">rcx</span><span class=\"p\">,</span> <span class=\"mi\">-1</span>\n        <span class=\"nf\">je</span>      <span class=\"no\">.LBB0_4</span>\n        <span class=\"nf\">movzx</span>   <span class=\"no\">ecx</span><span class=\"p\">,</span> <span class=\"no\">byte</span> <span class=\"no\">ptr</span> <span class=\"p\">[</span><span class=\"no\">rdx</span> <span class=\"err\">+</span> <span class=\"no\">r9</span> <span class=\"err\">+</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"nf\">lea</span>     <span class=\"no\">r8</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"no\">r9</span> <span class=\"err\">+</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"nf\">cmp</span>     <span class=\"no\">byte</span> <span class=\"no\">ptr</span> <span class=\"p\">[</span><span class=\"no\">rdi</span> <span class=\"err\">+</span> <span class=\"no\">r9</span> <span class=\"err\">+</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"no\">cl</span>\n        <span class=\"nf\">mov</span>     <span class=\"no\">r9</span><span class=\"p\">,</span> <span class=\"no\">r8</span>\n        <span class=\"nf\">je</span>      <span class=\"no\">.LBB0_1</span>\n        <span class=\"nf\">sete</span>    <span class=\"no\">al</span>\n        <span class=\"nf\">movzx</span>   <span class=\"no\">eax</span><span class=\"p\">,</span> <span class=\"no\">al</span>\n        <span class=\"nf\">add</span>     <span class=\"no\">rax</span><span class=\"p\">,</span> <span class=\"no\">r8</span>\n<span class=\"nl\">.LBB0_4:</span>\n        <span class=\"nf\">ret</span>\n</code></pre></div>\n<p>Which isn't half bad.</p>\n<p>The memcmp implementation from Apple optimizes to:</p>\n<div class=\"codehilite\" data-code-language=\"GAS\"><pre><span></span><code><span class=\"nl\">memcmp:</span>\n        <span class=\"nf\">test</span>    <span class=\"no\">rdx</span><span class=\"p\">,</span> <span class=\"no\">rdx</span>\n        <span class=\"nf\">je</span>      <span class=\"no\">.L5</span>\n        <span class=\"nf\">xor</span>     <span class=\"no\">eax</span><span class=\"p\">,</span> <span class=\"no\">eax</span>\n        <span class=\"nf\">jmp</span>     <span class=\"no\">.L4</span>\n<span class=\"nl\">.L3:</span>\n        <span class=\"nf\">add</span>     <span class=\"no\">rax</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\n        <span class=\"nf\">cmp</span>     <span class=\"no\">rdx</span><span class=\"p\">,</span> <span class=\"no\">rax</span>\n        <span class=\"nf\">je</span>      <span class=\"no\">.L5</span>\n<span class=\"nl\">.L4:</span>\n        <span class=\"nf\">movzx</span>   <span class=\"no\">ecx</span><span class=\"p\">,</span> <span class=\"no\">BYTE</span> <span class=\"no\">PTR</span> <span class=\"p\">[</span><span class=\"no\">rdi</span><span class=\"err\">+</span><span class=\"no\">rax</span><span class=\"p\">]</span>\n        <span class=\"nf\">movzx</span>   <span class=\"no\">r8d</span><span class=\"p\">,</span> <span class=\"no\">BYTE</span> <span class=\"no\">PTR</span> <span class=\"p\">[</span><span class=\"no\">rsi</span><span class=\"err\">+</span><span class=\"no\">rax</span><span class=\"p\">]</span>\n        <span class=\"nf\">cmp</span>     <span class=\"no\">cl</span><span class=\"p\">,</span> <span class=\"no\">r8b</span>\n        <span class=\"nf\">je</span>      <span class=\"no\">.L3</span>\n        <span class=\"nf\">movzx</span>   <span class=\"no\">eax</span><span class=\"p\">,</span> <span class=\"no\">cl</span>\n        <span class=\"nf\">sub</span>     <span class=\"no\">eax</span><span class=\"p\">,</span> <span class=\"no\">r8d</span>\n        <span class=\"nf\">ret</span>\n<span class=\"nl\">.L5:</span>\n        <span class=\"nf\">xor</span>     <span class=\"no\">eax</span><span class=\"p\">,</span> <span class=\"no\">eax</span>\n        <span class=\"nf\">ret</span>\n</code></pre></div>\n<p>So not bad, not bad at all.</p>",
        "id": 244974743,
        "sender_full_name": "Alexander Huszagh (He/Him)",
        "timestamp": 1625519605
    },
    {
        "content": "<p>Ah, I thought there was some simd optimized routine to find the first mismatch. Maybe that was java that had it.</p>",
        "id": 244975359,
        "sender_full_name": "The 8472",
        "timestamp": 1625520308
    },
    {
        "content": "<p>You can implement I believe using SIMD operations, which will be faster for sure.</p>",
        "id": 244975384,
        "sender_full_name": "Alexander Huszagh (He/Him)",
        "timestamp": 1625520348
    },
    {
        "content": "<p>But, that's going to need platform-specific instructions or features.</p>",
        "id": 244975391,
        "sender_full_name": "Alexander Huszagh (He/Him)",
        "timestamp": 1625520358
    },
    {
        "content": "<p>But unless it's actually a bottleneck, just do the above code: it's probably not going to be the limiting factor in your code.</p>",
        "id": 244975462,
        "sender_full_name": "Alexander Huszagh (He/Him)",
        "timestamp": 1625520424
    },
    {
        "content": "<p>On x86, you could probably implement this using _mm256_movemask_epi8 and <code>x.trailing_zeros()</code>. But you probably won't need it.</p>",
        "id": 244975681,
        "sender_full_name": "Alexander Huszagh (He/Him)",
        "timestamp": 1625520667
    },
    {
        "content": "<p>I hope that helps?</p>",
        "id": 244975718,
        "sender_full_name": "Alexander Huszagh (He/Him)",
        "timestamp": 1625520721
    },
    {
        "content": "<p>Yeah, I'm starting position() and see what assembly it produces in this case.</p>",
        "id": 244975901,
        "sender_full_name": "The 8472",
        "timestamp": 1625520939
    },
    {
        "content": "<p>Sweet. If you want to see a way to implement it in ASM for x86, this is a great starting point (memchr, not the memchr2 or the others),  since it just essentially creates a mask for n1 that's all the same byte, stored in a 256-bit mask.</p>",
        "id": 244976080,
        "sender_full_name": "Alexander Huszagh (He/Him)",
        "timestamp": 1625521125
    },
    {
        "content": "<p><a href=\"https://github.com/BurntSushi/memchr/tree/master/src/memchr/x86\">https://github.com/BurntSushi/memchr/tree/master/src/memchr/x86</a></p>",
        "id": 244976082,
        "sender_full_name": "Alexander Huszagh (He/Him)",
        "timestamp": 1625521126
    },
    {
        "content": "<p>I also have a fork using packed_simd, so you can use that if you want for a more cross-platform approach:<br>\n<a href=\"https://github.com/Alexhuszagh/rust-memchr\">https://github.com/Alexhuszagh/rust-memchr</a></p>\n<p>Warning: it's nightly only.</p>",
        "id": 244976111,
        "sender_full_name": "Alexander Huszagh (He/Him)",
        "timestamp": 1625521161
    },
    {
        "content": "<p>Once stdsimd is in Nightly you'll be able to do this in SIMD very easily</p>",
        "id": 244986071,
        "sender_full_name": "Lokathor",
        "timestamp": 1625534448
    },
    {
        "content": "<p>approximate pseudocode:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">slice_a</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">().</span><span class=\"n\">copied</span><span class=\"p\">().</span><span class=\"n\">zip</span><span class=\"p\">(</span><span class=\"n\">slice_b</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">().</span><span class=\"n\">copied</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">to_array</span><span class=\"p\">().</span><span class=\"n\">iter</span><span class=\"p\">().</span><span class=\"n\">copied</span><span class=\"p\">().</span><span class=\"n\">zip</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">to_array</span><span class=\"p\">().</span><span class=\"n\">iter</span><span class=\"p\">().</span><span class=\"n\">copied</span><span class=\"p\">().</span><span class=\"n\">position</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"n\">y</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"n\">lane_count</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 244986210,
        "sender_full_name": "Lokathor",
        "timestamp": 1625534624
    },
    {
        "content": "<p>where <code>slice_a</code> and <code>slice_b</code> are slices of <code>u8xN</code> for some N you want to use, such as <code>u8x16</code></p>",
        "id": 244986262,
        "sender_full_name": "Lokathor",
        "timestamp": 1625534666
    }
]