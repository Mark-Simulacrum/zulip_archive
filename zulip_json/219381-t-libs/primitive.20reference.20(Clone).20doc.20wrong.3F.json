[
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/std/primitive.reference.html#trait-implementations-1\">https://doc.rust-lang.org/std/primitive.reference.html#trait-implementations-1</a><br>\nseems wrong about <code>Clone</code> bypassing the implementation on <code>T</code> for <code>(&amp;T).clone()</code><br>\ncounterexample: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=eabe414c721b8f7e59b94a77d6d6883b\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=eabe414c721b8f7e59b94a77d6d6883b</a><br>\ndoes anyone have a pointer to an explanation of how the doc would be correct?</p>",
        "id": 239635843,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1621534304
    },
    {
        "content": "<p>In <code>let _z: A = y.clone();</code> you still have autoderef</p>",
        "id": 239641404,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1621536751
    },
    {
        "content": "<p>my interpretation of the doc is that i should expect <code>y</code> to be <code>&amp;A</code>, not <code>A</code></p>",
        "id": 239642064,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1621537056
    },
    {
        "content": "<p>if i change it to <code>_z: ()</code>, i get this:</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0308]: mismatched types\n --&gt; src/main.rs:7:18\n  |\n7 |     let _z: () = y.clone();\n  |             --   ^^^^^^^^^ expected `()`, found struct `A`\n  |             |\n  |             expected due to this\n</code></pre></div>",
        "id": 239642195,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1621537109
    },
    {
        "content": "<p>i meant that i should expect <code>y.clone()</code> to be <code>&amp;A</code>, not <code>A</code>, according to the doc</p>",
        "id": 239642303,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1621537163
    },
    {
        "content": "<p>if i wanted to clone the ref of type<code>&amp;A</code>, i'd have to use <code>(&amp;y).clone()</code></p>",
        "id": 239642553,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1621537247
    },
    {
        "content": "<p>The doc doesn't say that the implementation of <code>Clone</code> for references bypasses autoderef</p>",
        "id": 239642687,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1621537308
    },
    {
        "content": "<blockquote>\n<p>The following traits are implemented for all &amp;T, regardless of the type of its referent:<br>\n…<br>\nClone (Note that this will not defer to T’s Clone implementation if it exists!)</p>\n</blockquote>\n<p>i can interpret that as saying that if <code>y: &amp;T</code>, then <code>y.clone()</code> should clone the ref, not the referent of type<code>T</code></p>",
        "id": 239642962,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1621537429
    },
    {
        "content": "<p>No, it means that if you're calling <code>&lt;&amp;T&gt;::clone(&amp;y)</code> then this won't defer to <code>T::clone</code></p>",
        "id": 239643121,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1621537498
    },
    {
        "content": "<p>more importantly, if <code>y: &amp;T</code>, then <code>y.clone()</code> gives me either <code>T</code> or <code>&amp;T</code> depending on whether or not <code>T</code> implements <code>Clone</code></p>",
        "id": 239643152,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1621537509
    },
    {
        "content": "<p>That's just how autoderef works. If <code>T</code> doesn't implement <code>Clone</code> then it won't find <code>T::clone</code>, proceeds to autoderef and finds <code>&lt;&amp;T&gt;::clone</code> that takes an <code>&amp;&amp;T</code>. If instead <code>T</code> implements <code>Clone</code> then the compiler istantly finds <code>T::clone</code> that takes an <code>&amp;T</code>, which is the type of <code>y</code>.</p>",
        "id": 239643603,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1621537691
    },
    {
        "content": "<p>This applies to any trait</p>",
        "id": 239643664,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1621537709
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"338379\">Giacomo Stevanato</span> <a href=\"#narrow/stream/219381-t-libs/topic/primitive.20reference.20.28Clone.29.20doc.20wrong.3F/near/239643121\">said</a>:</p>\n<blockquote>\n<p>No, it means that if you're calling <code>&lt;&amp;T&gt;::clone(&amp;y)</code> then this won't defer to <code>T::clone</code></p>\n</blockquote>\n<p>i'm not sure i understand why someone would expect the deferring to <code>T::clone</code> if attempting to clone a ref to <code>T</code></p>",
        "id": 239643715,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1621537734
    },
    {
        "content": "<p>I don't know, but that's what the documentation is warning about</p>",
        "id": 239643829,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1621537797
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"338379\">Giacomo Stevanato</span> <a href=\"#narrow/stream/219381-t-libs/topic/primitive.20reference.20.28Clone.29.20doc.20wrong.3F/near/239643603\">said</a>:</p>\n<blockquote>\n<p>That's just how autoderef works. If <code>T</code> doesn't implement <code>Clone</code> then it won't find <code>T::clone</code>, proceeds to autoderef and finds <code>&lt;&amp;T&gt;::clone</code> that takes an <code>&amp;&amp;T</code>. If instead <code>T</code> implements <code>Clone</code> then the compiler istantly finds <code>T::clone</code> that takes an <code>&amp;T</code>, which is the type of <code>y</code>.</p>\n</blockquote>\n<p>you understand this. i understand this now because i've spent quite some time staring at docs about method calls. but it was surprising behavior to me before, and i think it's likely to confuse newcomers</p>",
        "id": 239644166,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1621537929
    },
    {
        "content": "<p>Autoderef is a bit complicated, but it allows to avoid writing so many <code>&amp;</code>s. Usually you shouldn't worry about it, just remember that if a method that takes <code>&amp;self</code> exists for both <code>T</code> and <code>&amp;T</code> then calling it on a variable of type <code>t: &amp;T</code> will call the implementation for <code>T</code>. In those cases you should consider writing the explicit form (<code>T::method(t)</code> vs <code>&lt;&amp;T&gt;::method(&amp;t)</code>).</p>\n<p>There's also a nice answer on stackoverflow that explains autoderef, you might find it interesting <a href=\"https://stackoverflow.com/questions/28519997/what-are-rusts-exact-auto-dereferencing-rules\">https://stackoverflow.com/questions/28519997/what-are-rusts-exact-auto-dereferencing-rules</a></p>",
        "id": 239644804,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1621538247
    },
    {
        "content": "<p>yeah, autoderef/autoref is a great convenience and has benefits for ergonomics. it also produces surprising behavior that tripped me up, and i think we should figure out a way to document that better. the warning about <code>Clone</code> does imply that someone else ran into this sort of problem before (and i've seen it cause confusion for other people on Discord)</p>",
        "id": 239646016,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1621538808
    },
    {
        "content": "<p>clippy helps here with a lint that's an error by default:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>error: using `clone` on a double-reference; this will copy the reference of type `&amp;main::B` instead of cloning the inner type\n  --&gt; src/main.rs:14:18\n   |\n14 |     let _z: &amp;B = y.clone();\n   |                  ^^^^^^^^^\n   |\n   = note: `#[deny(clippy::clone_double_ref)]` on by default\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#clone_double_ref\nhelp: try dereferencing it\n   |\n14 |     let _z: &amp;B = &amp;(*y).clone();\n   |                  ^^^^^^^^^^^^^\nhelp: or try being explicit if you are sure, that you want to clone a reference\n   |\n14 |     let _z: &amp;B = &lt;&amp;main::B&gt;::clone(y);\n   |                  ^^^^^^^^^^^^^^^^^^^^\n</code></pre></div>",
        "id": 239646751,
        "sender_full_name": "cuviper",
        "timestamp": 1621539139
    },
    {
        "content": "<p>explicitly cloning a ref seems unusual, especially when refs are all <code>Copy</code></p>",
        "id": 239646782,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1621539154
    },
    {
        "content": "<p><code>clippy::clone_double_ref</code> is default-deny, and there's also <code>clippy::clone_on_copy</code> that's just a warning</p>",
        "id": 239646950,
        "sender_full_name": "cuviper",
        "timestamp": 1621539216
    },
    {
        "content": "<p>By the way I'm not quite sure why that <code>Clone</code> warning is there. <a href=\"https://github.com/rust-lang/rust/pull/43560\">https://github.com/rust-lang/rust/pull/43560</a> is the PR that added it with the rest of the <code>reference</code> docs and there's no discussion/thought about that</p>",
        "id": 239647143,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1621539306
    },
    {
        "content": "<p>if anything, i think there should be a warning that if you're trying to clone a ref for some reason, that the presence of a <code>Clone</code> trait on the referent can make it tricky to do so</p>",
        "id": 239647901,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1621539670
    }
]