[
    {
        "content": "<p>Hey all! Would anybody care to look at this RFC for standardising leaking/raw methods on containers? Iâ€™ve addressed some feedback but I donâ€™t think itâ€™s the sort RFC thatâ€™s got the pizazz to attract any attention on its own ðŸ˜Š <a href=\"https://github.com/rust-lang/rfcs/pull/2969\">https://github.com/rust-lang/rfcs/pull/2969</a></p>",
        "id": 207768551,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1598181951
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204346\">@Ashley Mannix</span> The thing that bothers me the most is that \"leak\" is definitely the wrong word to use for an operation that is supposed to be reversible.</p>",
        "id": 207772836,
        "sender_full_name": "Amanieu",
        "timestamp": 1598188859
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> hmm, <code>Box::leak</code> is already reversible, and thatâ€™s how we use it in <code>LinkedList</code></p>",
        "id": 207782291,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1598202684
    },
    {
        "content": "<p>there's <code>Box::leak</code> and there's <code>Box::into_raw</code></p>",
        "id": 208471995,
        "sender_full_name": "RalfJ",
        "timestamp": 1598770350
    },
    {
        "content": "<p>the former return a <code>'static</code> reference, the latter a raw pointer</p>",
        "id": 208471996,
        "sender_full_name": "RalfJ",
        "timestamp": 1598770362
    },
    {
        "content": "<p>I think that makes sense; you should use the former if you truly intend to leak it and need a reference that lives forever for some purpose, and use the latter if you are doing unsafe stuff and are probably later going to do <code>from_raw</code> or so and make sure there is no actual leak.</p>",
        "id": 208472008,
        "sender_full_name": "RalfJ",
        "timestamp": 1598770408
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> Are you thinking the existing scheme of <code>leak</code> and <code>into_raw</code>/<code>from_raw</code> using raw pointers is complete enough that we donâ€™t need another pair of methods for <code>NonNull</code>?</p>",
        "id": 208473483,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1598773241
    },
    {
        "content": "<p>hm, fair, I keep forgetting about <code>NonNull</code>. that's annoying, having to have both that and raw pointers :/</p>",
        "id": 208473855,
        "sender_full_name": "RalfJ",
        "timestamp": 1598774150
    },
    {
        "content": "<p>Also keep in mind that with custom allocators the lifetime will change to <code>'a</code> where <code>A: 'a</code>.</p>",
        "id": 208491021,
        "sender_full_name": "Amanieu",
        "timestamp": 1598802855
    },
    {
        "content": "<p>Yeh, that RFC is trying to come up with a <code>NonNull</code>-based extension to the way we already use raw pointers on containers that makes it look like we totally meant it that way all along</p>",
        "id": 208495032,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1598807903
    }
]