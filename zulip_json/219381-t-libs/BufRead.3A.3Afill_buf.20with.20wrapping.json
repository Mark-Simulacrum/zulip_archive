[
    {
        "content": "<p>Hi, Rust Team.<br>\nI'm new here, trying to figure out the right way to implement a std lib feature I've developed.<br>\nThe Guide leads me here. Perhaps I could move further, but still not sure about some details.</p>\n<p>So, the feature is a variation on the <code>BufRead::fill_buf</code> method. I would like to implement a new<br>\nmethod:</p>\n<p><code>BufRead::fill_buf_wrapping(&amp;mut self, at_least: usize) -&gt; Result&lt;&amp;[u8]&gt;</code></p>\n<p>If there's less than <code>at_least</code> bytes left then it moves remaining bytes to the beginning of the<br>\nbuffer and fills buffer further. When <code>at_least == 0</code> it behaves exactly the same as <code>fill_buf</code>.</p>\n<p>This is a simple fix which allows to take advantage of existing buffer to process/parse input data<br>\nwith push-back-like functionality if decided to not consume any bytes. End-user solution based on<br>\nread_exact method (and friends) doesn't has push-back functionality or has to handle intermediate<br>\nbuffer.</p>\n<p>Does that sound good?<br>\nAny suggestions for better method name?<br>\nShould I proceed by creating a new RFC?</p>",
        "id": 264923928,
        "sender_full_name": "Kamil Becmer",
        "timestamp": 1639515264
    },
    {
        "content": "<p>Does <code>BufRead</code> can be extended like that in terms of non-std libraries compatibility?  There's no good default implementation without access to internals.</p>",
        "id": 264925369,
        "sender_full_name": "Kamil Becmer",
        "timestamp": 1639515988
    },
    {
        "content": "<p><code>BufRead</code> is a stable, non-sealed trait so anyone can implement it. So if there's no good default implementation it probably shouldn't be added.<br>\n<code>BufReader</code> could be extended that way.</p>",
        "id": 264927871,
        "sender_full_name": "The 8472",
        "timestamp": 1639517275
    },
    {
        "content": "<p>That's a good hint, thanks!</p>",
        "id": 264929201,
        "sender_full_name": "Kamil Becmer",
        "timestamp": 1639517865
    }
]