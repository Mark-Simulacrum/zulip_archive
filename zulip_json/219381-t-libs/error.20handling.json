[
    {
        "content": "<p>Hey so we were talking about lang team priorities today and error handling came up. <span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> and I were just talking and she's expressed some interest in helping to lead a project group that would try to improve Rust's error handling story. I mention it here because, at least in the short term, I think this is largely a \"libs\" effort -- there might be interesting lang changes to be made but they're probably a bit further out, with the most <em>immediate</em> needs being (in my view) to help explain to people what the \"best practices\" are today (which probably involves external crates) and then trying to move some of that story into std so that it can be shared more broadly. </p>\n<p>Anyway, I guess I'm asking whether e.g. <span class=\"user-mention\" data-user-id=\"119235\">@David Tolnay</span> you or others might be interested in helping to push along libs RFCs in this area if/when that became appropriate.</p>",
        "id": 198957544,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590615946
    },
    {
        "content": "<p>I've been following <span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span>'s work on the <code>Error</code> trait, but mostly from the point of view of making the <code>Error</code> trait available to <code>no_std</code> core (by abstracting away the explicit dependency on backtraces).</p>",
        "id": 198963140,
        "sender_full_name": "Amanieu",
        "timestamp": 1590619618
    },
    {
        "content": "<p>i think that sounds like a great idea! i'm very invested in Rust's error handling story and would love to participate. i'm not sure how much bandwidth i'll have for it, but i'd very much like to try and be involved.</p>",
        "id": 199013134,
        "sender_full_name": "BurntSushi",
        "timestamp": 1590667917
    },
    {
        "content": "<p>I've started working on a charter / proposal for the focus items of the project group that I'll post in a little bit</p>",
        "id": 199045113,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590682971
    },
    {
        "content": "<p>right now it's just bullet points but once those are looking complete I'll write a full form proposal</p>",
        "id": 199045159,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590682994
    },
    {
        "content": "<blockquote>\n<p>I'm very invested in Rust's error handling story and would love to participate</p>\n</blockquote>\n<p>yess <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span>Ô∏è</p>",
        "id": 199045336,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590683079
    },
    {
        "content": "<p>Huzzah!</p>",
        "id": 199045432,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590683123
    },
    {
        "content": "<p>This all sounds very encouraging</p>",
        "id": 199045443,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590683128
    },
    {
        "content": "<p>here is the working copy for the project group charter <a href=\"https://hackmd.io/@2aetCAHHS5yPrDQIgqGo2Q/HyvHl9hiI\">https://hackmd.io/@2aetCAHHS5yPrDQIgqGo2Q/HyvHl9hiI</a></p>",
        "id": 199047163,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590683964
    },
    {
        "content": "<p>everyone should be able to edit</p>",
        "id": 199047307,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590684029
    },
    {
        "content": "<p>I have this whole idea of what I think the ecosystem should look like but I'm not sure if I should put it in the charter so I'm gonna just dump an appreviated version here.</p>",
        "id": 199049731,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590685235
    },
    {
        "content": "<p>To start we have <code>trait std::error::Error</code> and <code>struct std::error::Report</code> in std. </p>\n<p><code>Error</code> does exactly what it does today, providing an interface to reporting errors and extracting context like backtraces relevant to reports.  std provides a custom derive similar to <code>thiserror</code> for reducing boilerplate so people don't neglect proper error handling because they don't want to write out impls by hand.</p>\n<p><code>Report</code> fills the same role as <code>anyhow::Error</code> and <code>eyre::Report</code>.  It has a generic parameter that can store context relevant to the final report in it, like <code>Backtrace</code>, and which defines how the report is formatted. Std provides a default form of this context that just prints the top level error, its list of sources, and then the backtrace. </p>\n<p>The 3rd party error handling ecosystem is reduced to libraries that provide custom contexts / panic handlers for consistent reporting and libraries that provide error handling utilities for improved ergonomics like snafu and fehler.</p>\n<p>The report defining libraries provide custom context for <code>std::error::Report</code> and install custom panic handlers that capture similar context and produce similar reports to <code>std::error::Error</code>. This enables applications with consistent error reporting for both operational errors propogated via the Report type and programming errors reported via panics.</p>",
        "id": 199051151,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590685846
    },
    {
        "content": "<p>All of this is heavily influenced by the work I've been doing on <code>eyre</code> and <code>color-eyre</code> in specific. if you want to see how this would look out check out the various images and examples in color-eyre and its implementation <a href=\"https://github.com/yaahc/color-eyre\">https://github.com/yaahc/color-eyre</a></p>",
        "id": 199051381,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590685929
    },
    {
        "content": "<p>a standard <code>[derive(Error)]</code> (inspired by thiserror?) would be absolutely great and would make it easy for people to write their own error types, I think. I don't know what the policy re: adding new <code>derive</code> cases is.</p>",
        "id": 199052219,
        "sender_full_name": "c-cube",
        "timestamp": 1590686273
    },
    {
        "content": "<p>a lot of this work is focused around making it so error handling can easily be combined with instrumentation from <code>tracing</code>, specifically this entire body of work was inspired by wanting to capture <code>SpanTrace</code> types in anyhow. With the way <code>anyhow</code> is designed it is only possible to associate extra context like this with errors via the <code>.context</code> combinator, which inserts it into the error chain, which makes no sense for a type that is essentially a backtrace. I ended up solving this by forking anyhow to create <code>eyre</code> which adds the custom context parameter as mentioned above, and color-eyre is the most feature rich implementation of a custom context for integration with <code>eyre</code>.</p>\n<p>Once all of this is done I want to move onto fixing the error trait for generic member access to allow tighter integration between errors and reporters, implement error return traces and build the integration with them into <code>std::report::Report</code> and the error derive to make it really easy to start using them, and then look into fixing reporting for termination so that panics on errors that weren't first turned into reports can give nicely formatted error reports as well.</p>",
        "id": 199053319,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590686679
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"304512\">@c-cube</span> its gonna be hard because this would be the first derive ever with custom attributes afaik</p>",
        "id": 199053382,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590686706
    },
    {
        "content": "<p>in std*</p>",
        "id": 199053395,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590686715
    },
    {
        "content": "<p>oh and also once the generic member access is done I think we should move error into core, prior to doing the error return traces or termination report consistency changes</p>",
        "id": 199053451,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590686748
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/219381-t-libs/topic/error.20handling/near/199053382\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"304512\">c-cube</span> its gonna be hard because this would be the first derive ever with custom attributes afaik</p>\n</blockquote>\n<p>Because you'd really need custom attributes for the <code>Display</code> instance? I can see why that'd be a problem.</p>",
        "id": 199054078,
        "sender_full_name": "c-cube",
        "timestamp": 1590686934
    },
    {
        "content": "<p>yea and from impls and transparent errors</p>",
        "id": 199054410,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590687078
    },
    {
        "content": "<p>I expect figuring out which exact subsets of the apis of the various error derive crates and error reporting crates we want to include will be one of the more fun (painful) parts of the process</p>",
        "id": 199054499,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590687119
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> thanks for organizing your thoughts! how do i add comments to your hackmd document? (like a google doc)</p>",
        "id": 199059129,
        "sender_full_name": "BurntSushi",
        "timestamp": 1590689281
    },
    {
        "content": "<p>i think you just need to log in</p>",
        "id": 199059215,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590689311
    },
    {
        "content": "<p>i use my github account to login fwiw</p>",
        "id": 199059229,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590689318
    },
    {
        "content": "<p>i see, thanks. i am logged in, and i see i can edit the document. but i don't see how to add comments. i don't necessarily want to change things you wrote, i want to comment on them. it looks i can leave comments on the document as a whole, but not on specific text. am i still missing something or is this a limitation of hackmd?</p>",
        "id": 199059948,
        "sender_full_name": "BurntSushi",
        "timestamp": 1590689495
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> fwiw I think the \"custom attributes\" bit is not hard implementation wise, and I think anyhow and similar crates have pretty closely established more than \"good enough\" syntax for it -- I would not personally see it as a roadblock to have a derive similar to thiserror in core/std, perhaps with some bits unstable initially and then scaling to full flexibility over time perhaps</p>",
        "id": 199059978,
        "sender_full_name": "simulacrum",
        "timestamp": 1590689506
    },
    {
        "content": "<p>ah i think i see it now. subtle.</p>",
        "id": 199060062,
        "sender_full_name": "BurntSushi",
        "timestamp": 1590689538
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"222471\">@BurntSushi</span> I just added one on a random line</p>",
        "id": 199060068,
        "sender_full_name": "simulacrum",
        "timestamp": 1590689541
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"222471\">@BurntSushi</span> are you viewing it with the markdown preview? I think if you click to right of the line you want to comment on it shows a comment icon</p>",
        "id": 199060077,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590689550
    },
    {
        "content": "<p>~</p>",
        "id": 199060167,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590689613
    },
    {
        "content": "<p>annoyingly i cannot get it to show the icon in the screenshot but where my mouse is in this pic shows where I would click to add a comment</p>\n<p><a href=\"/user_uploads/4715/Zbp8g3adbKQjJqq_a1Tux7fy/Screenshot-from-2020-05-28-11-14-03.png\">Screenshot-from-2020-05-28-11-14-03.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/Zbp8g3adbKQjJqq_a1Tux7fy/Screenshot-from-2020-05-28-11-14-03.png\" title=\"Screenshot-from-2020-05-28-11-14-03.png\"><img src=\"/user_uploads/4715/Zbp8g3adbKQjJqq_a1Tux7fy/Screenshot-from-2020-05-28-11-14-03.png\"></a></div>",
        "id": 199060314,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590689689
    },
    {
        "content": "<p>i don't think i know what \"generic member access\" means. is it described somewhere? i think i have a good guess as to what it is, but i'm not connecting the dots as far as why it's required for moving <code>Error</code> to core.</p>",
        "id": 199061061,
        "sender_full_name": "BurntSushi",
        "timestamp": 1590689998
    },
    {
        "content": "<p>yes, theres an RFC for it</p>",
        "id": 199061431,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590690118
    },
    {
        "content": "<p>sec let me link it</p>",
        "id": 199061447,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590690120
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"222471\">@BurntSushi</span> <a href=\"https://github.com/rust-lang/rfcs/pull/2895\">https://github.com/rust-lang/rfcs/pull/2895</a></p>\n<p>it is essentially a generic object safe version of <code>fn bactrace</code> and <code>fn source</code></p>",
        "id": 199061607,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590690171
    },
    {
        "content": "<p>and its necessary because it makes it so we don't have to put <code>fn backtrace</code> on the error trait which makes it easier to move to core, though it's not the only problem so we'd probably need to put some hack to allow std to impl the downcast fn for the error trait even though its defined in core</p>",
        "id": 199061892,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590690259
    },
    {
        "content": "<p>though my understanding is that the eventual plan is to merge core and std, but i think its important to get error into core sooner than whenever that happens</p>",
        "id": 199062003,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590690295
    },
    {
        "content": "<p>i think your doc looks like a good start! i'm going to read your generic member access RFC and take a look at eyre, since i don't think i'm groking everything around traces.</p>",
        "id": 199062302,
        "sender_full_name": "BurntSushi",
        "timestamp": 1590690386
    },
    {
        "content": "<p>also, i'd like to CC stakeholders that I know of, but we should CC more folks if they exist: <span class=\"user-mention\" data-user-id=\"119235\">@David Tolnay</span> <span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span></p>",
        "id": 199062427,
        "sender_full_name": "BurntSushi",
        "timestamp": 1590690443
    },
    {
        "content": "<p>i want to CC withoutboats too, but i don't know their nick on zulip.</p>",
        "id": 199062469,
        "sender_full_name": "BurntSushi",
        "timestamp": 1590690462
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"222471\">@BurntSushi</span> check out color-eyre when you're checking out eyre, it does a much better job at leveraging the custom context stuff than the parts you'll find within eyre itself</p>",
        "id": 199062951,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590690656
    },
    {
        "content": "<p>gotya, will do!</p>",
        "id": 199063002,
        "sender_full_name": "BurntSushi",
        "timestamp": 1590690683
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"256759\">@boats</span> I believe for withoutboats</p>",
        "id": 199064582,
        "sender_full_name": "simulacrum",
        "timestamp": 1590691477
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> theres a comment thread near the bottom of  the hackmd link from above with concerns about the interaction with specialization for one of the items i've proposed we address that <span class=\"user-mention\" data-user-id=\"222471\">@BurntSushi</span> noted could probably receive a summary from the lang team to help us figure out whether or not it is in scope for the project group, can you take a look at that thread or forward it to whoever is best equiped to provide an answer?</p>",
        "id": 199064588,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590691479
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> oh, i meant that _we_ should provide a summary of the question to the lang team. but yeah, maybe that comment thread is enough.</p>",
        "id": 199064720,
        "sender_full_name": "BurntSushi",
        "timestamp": 1590691536
    },
    {
        "content": "<p>oooh</p>",
        "id": 199064741,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590691544
    },
    {
        "content": "<p>I think the thread is probably fine, but if not I will write a full summary and link to the proof of concept repo I have that implements error return traces using min_specialization</p>",
        "id": 199064927,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590691624
    },
    {
        "content": "<p>aye. yeah, basically my high level thing here is \"make it easy for them to respond.\" :)</p>",
        "id": 199065260,
        "sender_full_name": "BurntSushi",
        "timestamp": 1590691765
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/219381-t-libs/topic/error.20handling/near/199051151\">said</a>:</p>\n<blockquote>\n<p><code>Report</code> fills the same role as <code>anyhow::Error</code> and <code>eyre::Report</code>.  It has a generic parameter that can store context relevant to the final report in it, like <code>Backtrace</code>, and which defines how the report is formatted. Std provides a default form of this context that just prints the top level error, its list of sources, and then the backtrace. </p>\n</blockquote>\n<p>Ah, <em>that</em> explains why <code>Report</code> carries things like CLI error codes or HTTP error codes! <span aria-label=\"light bulb\" class=\"emoji emoji-1f4a1\" role=\"img\" title=\"light bulb\">:light_bulb:</span></p>",
        "id": 199081974,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1590697589
    },
    {
        "content": "<p>And also, the connotation of <code>Report</code> gives people a hint for when they should use it and when they should use <code>thiserror</code>-style handling.</p>",
        "id": 199082125,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1590697674
    },
    {
        "content": "<p>\"Use <code>Report</code> when the only thing you'll do with the error is report it\"</p>",
        "id": 199082186,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1590697686
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> Am I interpreting that correctly?</p>",
        "id": 199082257,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1590697733
    },
    {
        "content": "<p>exactly</p>",
        "id": 199082327,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590697778
    },
    {
        "content": "<p>I like this plan very much.</p>",
        "id": 199082431,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1590697816
    },
    {
        "content": "<p><span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 199082456,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590697830
    },
    {
        "content": "<p>What would you call a <code>Result&lt;T, Report&gt;</code>? Do you have a common name for that in mind?</p>",
        "id": 199082494,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1590697853
    },
    {
        "content": "<p>my plan is to just leave that the way it is as far as std is concerned</p>",
        "id": 199082591,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590697909
    },
    {
        "content": "<p>I'm asking because I expect to name that type many thousands of times, and I've found <code>anyhow::Result&lt;T&gt;</code> quite useful for that purpose.</p>",
        "id": 199082662,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1590697931
    },
    {
        "content": "<p>the libraries that provide the panic / error handers (renaming this from custom context) would be the ones that provide those aliases</p>",
        "id": 199082685,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590697950
    },
    {
        "content": "<p>So even if we <em>don't</em> provide a standard alias for it, people will alias it in their programs, which then means it might be helpful if we have a name in mind that is \"conventional\".</p>",
        "id": 199082713,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1590697964
    },
    {
        "content": "<p>because really in std <code>Result&lt;T, Report&gt;</code> is actually <code>Result&lt;T, Report&lt;C = BacktraceHandler&gt;&gt;</code> or something</p>",
        "id": 199082743,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590697988
    },
    {
        "content": "<p>Oh, interesting.</p>",
        "id": 199082773,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1590698010
    },
    {
        "content": "<p>I'm assuming it'll be possible to build without backtrace support and the backtrace data will disappear?</p>",
        "id": 199082864,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1590698046
    },
    {
        "content": "<p>yea, im assuming that the default provided backtracehandler in std for the report type would conditionally compile with a backtrace</p>",
        "id": 199083642,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590698441
    },
    {
        "content": "<p>thats a good point</p>",
        "id": 199083648,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590698443
    },
    {
        "content": "<p>maybe it shouldn't be called backtracehandler</p>",
        "id": 199083654,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590698448
    },
    {
        "content": "<p>i call this <code>DefaultContext</code> in eyre rn</p>",
        "id": 199083676,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590698461
    },
    {
        "content": "<p>but I want to rework the terminology to be consistent with panic handler's</p>",
        "id": 199083710,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590698476
    },
    {
        "content": "<p>the name of the context type is I think important in the same way that the name of Report is important</p>",
        "id": 199083771,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590698498
    },
    {
        "content": "<p>the difference is I feel like I've already come up with a good name for Report but not for the context <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 199083799,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590698511
    },
    {
        "content": "<p>And the default context is part of what supports things like \"the error happened while opening this file\"?</p>",
        "id": 199083888,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1590698545
    },
    {
        "content": "<p>(Or, in <code>anyhow</code> terms, <code>.with_context(|| format!(\"Error opening file {}\", filename))</code>)</p>",
        "id": 199083963,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1590698590
    },
    {
        "content": "<p>oh, no this would be a feature of the Report type</p>",
        "id": 199083997,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590698606
    },
    {
        "content": "<p>or maybe on Result itself</p>",
        "id": 199084014,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590698614
    },
    {
        "content": "<p>i dont know if we'd still want to use an extension trait if we're part of std</p>",
        "id": 199084023,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590698622
    },
    {
        "content": "<p>Where does that data get stored?</p>",
        "id": 199084029,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1590698625
    },
    {
        "content": "<p>its a new error type</p>",
        "id": 199084045,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590698632
    },
    {
        "content": "<p>in eyre this function is called <code>wrap_err</code> and <code>wrap_err_with</code></p>",
        "id": 199084110,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590698646
    },
    {
        "content": "<p>i think</p>",
        "id": 199084118,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590698649
    },
    {
        "content": "<p>/me nods</p>",
        "id": 199084119,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1590698651
    },
    {
        "content": "<p>it might be with_wrap_err</p>",
        "id": 199084121,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590698652
    },
    {
        "content": "<p>I'm trying to understand the relationship between the types here.</p>",
        "id": 199084163,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1590698667
    },
    {
        "content": "<p>the context is where you'd shove things that aren't errors</p>",
        "id": 199084169,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590698671
    },
    {
        "content": "<p>so like in color-eyre theres a concept of Report Sections</p>",
        "id": 199084193,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590698682
    },
    {
        "content": "<p>which is just any display type</p>",
        "id": 199084199,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590698685
    },
    {
        "content": "<p>and it stores that as a vec in the Context type</p>",
        "id": 199084215,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590698691
    },
    {
        "content": "<p>So now I have three questions...</p>",
        "id": 199084221,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1590698693
    },
    {
        "content": "<p>Ah, that answers one of them.</p>",
        "id": 199084260,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1590698710
    },
    {
        "content": "<p>So, Report would have the method to add information to an error, and that would get stored in the Context somehow.</p>",
        "id": 199084323,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1590698742
    },
    {
        "content": "<p>Report provides a fn to get a reference or a mutable reference to its context</p>",
        "id": 199084388,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590698763
    },
    {
        "content": "<p>handler libraries would usually impl an extension trait</p>",
        "id": 199084414,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590698775
    },
    {
        "content": "<p>which provides functions that convert the error into a report if its not already one</p>",
        "id": 199084447,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590698795
    },
    {
        "content": "<p>and then grab the context mutably</p>",
        "id": 199084456,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590698799
    },
    {
        "content": "<p>and call whatever functions it exposes to insert the data</p>",
        "id": 199084469,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590698805
    },
    {
        "content": "<p>What would <code>DefaultContext</code> (or whatever it gets called) provide in that regard?</p>",
        "id": 199084498,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1590698821
    },
    {
        "content": "<p>nothing</p>",
        "id": 199084518,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590698830
    },
    {
        "content": "<p>Um.</p>",
        "id": 199084537,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1590698839
    },
    {
        "content": "<p>the default context is planned to be based on anyhow</p>",
        "id": 199084549,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590698843
    },
    {
        "content": "<p>so it wont provide extra stuff in the context</p>",
        "id": 199084562,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590698848
    },
    {
        "content": "<p>/me is very confused now.</p>",
        "id": 199084576,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1590698856
    },
    {
        "content": "<p>it will only provide <code>wrap_err</code> for inserting new errors into the chain</p>",
        "id": 199084586,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590698861
    },
    {
        "content": "<p>Ah.</p>",
        "id": 199084595,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1590698867
    },
    {
        "content": "<p>so <code>context</code> on anyhow confusingly named in my opinion</p>",
        "id": 199084605,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590698874
    },
    {
        "content": "<p>and i dont want to bring that terminology along when it or something like it is upstreamed</p>",
        "id": 199084683,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590698890
    },
    {
        "content": "<p>(That's not a problem.)</p>",
        "id": 199084695,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1590698898
    },
    {
        "content": "<p>OK, so the default Context type available in Report by default <em>will</em> support attaching extra Error values to an existing Error.</p>",
        "id": 199084734,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1590698920
    },
    {
        "content": "<p>YES</p>",
        "id": 199084744,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590698929
    },
    {
        "content": "<p>oops</p>",
        "id": 199084746,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590698931
    },
    {
        "content": "<p>capslocks</p>",
        "id": 199084750,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590698932
    },
    {
        "content": "<p>lol</p>",
        "id": 199084751,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590698933
    },
    {
        "content": "<p>yes</p>",
        "id": 199084753,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590698934
    },
    {
        "content": "<p>Hey, that <em>is</em> a thing to shout about. ;)</p>",
        "id": 199084768,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1590698942
    },
    {
        "content": "<p>heh</p>",
        "id": 199084778,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590698946
    },
    {
        "content": "<p>but yea the report type itself provides helpers for construction of adhoc errors</p>",
        "id": 199084790,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590698957
    },
    {
        "content": "<p>in anyhow this is context</p>",
        "id": 199084801,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590698968
    },
    {
        "content": "<p>in eyre this is wrap_err</p>",
        "id": 199084805,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590698971
    },
    {
        "content": "<p>in std::error::Report its ???</p>",
        "id": 199084816,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590698976
    },
    {
        "content": "<p>But it wouldn't provide the ability to attach information that isn't an error?</p>",
        "id": 199084817,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1590698976
    },
    {
        "content": "<p>not in std, not by default</p>",
        "id": 199084844,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590698995
    },
    {
        "content": "<p>i mean we can put any features we want</p>",
        "id": 199084849,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590698999
    },
    {
        "content": "<p>we could include the sections concept</p>",
        "id": 199084875,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590699003
    },
    {
        "content": "<p>that i think is a really good one</p>",
        "id": 199084896,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590699006
    },
    {
        "content": "<p>So, if I have an <code>io::Error</code> because I couldn't open a file, how do I attach the filename?</p>",
        "id": 199084904,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1590699013
    },
    {
        "content": "<p>I think that's an important use case to handle.</p>",
        "id": 199084913,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1590699020
    },
    {
        "content": "<p>okay</p>",
        "id": 199084926,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590699028
    },
    {
        "content": "<p>I'd go as far as saying that if there's a way we can do it without excess overhead, I'd love to have the default file functions attach that information. :)</p>",
        "id": 199084941,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1590699042
    },
    {
        "content": "<p>so i would say we should support custom sections in the default error handler type</p>",
        "id": 199084946,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590699043
    },
    {
        "content": "<p>so the idea would be you just provide a string</p>",
        "id": 199084968,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590699056
    },
    {
        "content": "<p>let me show you the relevant api in color-eyre that would handle this</p>",
        "id": 199084979,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590699065
    },
    {
        "content": "<p><a href=\"https://github.com/yaahc/color-eyre/blob/master/examples/custom_section.rs\">https://github.com/yaahc/color-eyre/blob/master/examples/custom_section.rs</a></p>",
        "id": 199085064,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590699122
    },
    {
        "content": "<p>so this one attaches stderr and stdout to an error report</p>",
        "id": 199085115,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590699131
    },
    {
        "content": "<p>my intention was to encourage this kinda behavior to still exist as 3rd party libraries</p>",
        "id": 199085141,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590699145
    },
    {
        "content": "<p>but if we think this should be in std its easy and I think i have a good design for it already</p>",
        "id": 199085171,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590699163
    },
    {
        "content": "<p>I don't know that we need <em>that</em> level of flexibility in std.</p>",
        "id": 199085212,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1590699194
    },
    {
        "content": "<p>so you can always make a higher level error still</p>",
        "id": 199085248,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590699212
    },
    {
        "content": "<p>But attaching strings seems good.</p>",
        "id": 199085255,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1590699216
    },
    {
        "content": "<p>like an adhoc error the same way you do in anyhow</p>",
        "id": 199085266,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590699222
    },
    {
        "content": "<p>my plan is basically to have the default handler in std::error::Report exactly mimic the features of anyhow</p>",
        "id": 199085332,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590699245
    },
    {
        "content": "<p>Distinguishing messages for stdout and messages for stderr seems more specific to a CLI-specialized context type that could exist in the ecosystem.</p>",
        "id": 199085334,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1590699246
    },
    {
        "content": "<p>just slightly renamed</p>",
        "id": 199085337,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590699248
    },
    {
        "content": "<p>aah yea but that API isn't related to stderr / stdout</p>",
        "id": 199085376,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590699269
    },
    {
        "content": "<p>for example in your usecase it would be...</p>",
        "id": 199085390,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590699274
    },
    {
        "content": "<p>read_to_string(path).map_err(Report::from).with_section(|| \"Context:\".body(format!(\"attempting to open {}\", path)))</p>",
        "id": 199085485,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590699328
    },
    {
        "content": "<p>though this is some automatic indenting stuff</p>",
        "id": 199085514,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590699348
    },
    {
        "content": "<p>you would probably just want to use wrap_err in this case</p>",
        "id": 199085532,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590699359
    },
    {
        "content": "<p>like</p>",
        "id": 199085533,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590699360
    },
    {
        "content": "<p>if you're happy with anyhow's support for this then we're already covered</p>",
        "id": 199085578,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590699368
    },
    {
        "content": "<p>i think it might be good to include the section stuff but not the section extension stuff</p>",
        "id": 199085642,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590699409
    },
    {
        "content": "<p>so you can just associate display types with errors as sections</p>",
        "id": 199085663,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590699423
    },
    {
        "content": "<p>and then third party libraries can provide the cool buidler apis for indenting stuff and whatnot</p>",
        "id": 199085680,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590699432
    },
    {
        "content": "<p>What does <code>\"Context:\".body</code> mean? I'm trying to understand what a \"section\" is, and I'm hoping for something not too stringly-typed.</p>",
        "id": 199086138,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1590699680
    },
    {
        "content": "<p>Also, would <code>wrap_err</code> take care of the <code>Report::from</code> for me?</p>",
        "id": 199086558,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1590699920
    },
    {
        "content": "<p>oh yea, wrap_err has a <code>Into&lt;Report&gt;</code> bound</p>",
        "id": 199093092,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590704251
    },
    {
        "content": "<p>so pretend i didnt put that there</p>",
        "id": 199093105,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590704259
    },
    {
        "content": "<p>This is a bit more complicated because <code>color-eyre</code>'s context has multiple section kinds because it supports additional error msg sections and help text sections in addition to custom ones</p>",
        "id": 199093275,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590704371
    },
    {
        "content": "<p><a href=\"https://github.com/yaahc/color-eyre/blob/master/src/section/mod.rs#L158\">https://github.com/yaahc/color-eyre/blob/master/src/section/mod.rs#L158</a></p>",
        "id": 199093278,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590704374
    },
    {
        "content": "<p>but you can just imagine that <code>\"Context:\".body</code> is just an extension trait defined by some 3rd party library for constructing a <code>Display</code> type</p>",
        "id": 199093367,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590704420
    },
    {
        "content": "<p>theres no reason the body needs to be part of the implementation actually</p>",
        "id": 199093392,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590704441
    },
    {
        "content": "<p>and now I think im going to change how thats implemented in color-eyre</p>",
        "id": 199093406,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590704450
    },
    {
        "content": "<p>thankgod I didn't make the release with the sections in it yet <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 199093418,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590704462
    },
    {
        "content": "<p>I don't have enough bandwidth to participate in this group, but I can express my initial disposition.</p>\n<p>Adding something like <code>anyhow::Error</code> to std as basically just more legible and slightly optimized version of an error trait object seems good. On the other hand, I think we are not nearly as certain about things like the shape of things like error chaining (I'm talking about things like the Result::context method). That sort of functionality can be backwards compatibly added if we ever have it nailed down.</p>\n<p>eyre's addition of a different sort of \"context\" parameter is interesting and I'm curious to see how it develops. But I don't think it has been in use for enough time or by enough users to consider adding this kind of context parameter and trait to std just now. If it does prove out in the ecosystem, a defaulted parameter can be added backwards compatibly also.</p>\n<p>In general, I feel these kinds of big picture concerns about structuring error handling across an application are hard to generalize to the many different kinds of applications that people write.</p>",
        "id": 199096361,
        "sender_full_name": "boats",
        "timestamp": 1590706641
    },
    {
        "content": "<p>if we want to add it backwards compatibly we can't provide a <code>format_err!</code> macro</p>",
        "id": 199096462,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590706705
    },
    {
        "content": "<p>Basically I'm in favor of continuing the strategy we started with with the error revamp RFC: piecemeal adoption of only the most stable and certain aspects of the error handling libraries into std, expect that the full picture for any application would still involve outside libraries.</p>",
        "id": 199096474,
        "sender_full_name": "boats",
        "timestamp": 1590706722
    },
    {
        "content": "<blockquote>\n<p>But I don't think it has been in use for enough time or by enough users to consider adding this kind of context parameter and trait to std just now. If it does prove out in the ecosystem, a defaulted parameter can be added backwards compatibly also.</p>\n</blockquote>",
        "id": 199097043,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590707133
    },
    {
        "content": "<p>I'm not sure I agree with this reasoning, it seems to me that this would have the effect of pushing people away from even trying out the context stuff because they would see std adopting anyhow and specifically not adopting eyre. this would have the effect of making it harder to even gain adoption on eyre and prove it in the first place to get it upstreamed into std</p>",
        "id": 199097138,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590707195
    },
    {
        "content": "<p>if we're worried about the context then we shouldn't even bother upstreaming an error reporting type yet</p>",
        "id": 199097148,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590707209
    },
    {
        "content": "<p>i'd prefer to just try out the context though, it will be behind a feature flag and ppl will try it out on nightly and if it ends up being burdensome we can always back it out without violating stability guarantees</p>",
        "id": 199097188,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590707252
    },
    {
        "content": "<p>It seems like maybe at least some of the concern about \"well std doesn't do it\" would be satisfied by, say, making the context bits unstable for longer but still having them in std</p>",
        "id": 199097305,
        "sender_full_name": "simulacrum",
        "timestamp": 1590707338
    },
    {
        "content": "<p>(and we could always rip them out)</p>",
        "id": 199097312,
        "sender_full_name": "simulacrum",
        "timestamp": 1590707344
    },
    {
        "content": "<p>can you  have a generic parameter thats only conditionally available?</p>",
        "id": 199097323,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590707376
    },
    {
        "content": "<p>hm perhaps no, but if that means that we're stuck with a defaulted generic ~forever \"shrug\" that doesn't seem horrible if people basically never see it</p>",
        "id": 199097485,
        "sender_full_name": "simulacrum",
        "timestamp": 1590707522
    },
    {
        "content": "<p>It's our standard policy that new APIs develop in the ecosystem for a very long time before they end up in std.</p>",
        "id": 199097659,
        "sender_full_name": "boats",
        "timestamp": 1590707700
    },
    {
        "content": "<p>that's fair, but I think that just means we need to remove the error reporting type stuff from the list of items to handle by the project group rather than just continuing with stabilizing a design that is actively disputed in the ecosystem</p>",
        "id": 199097764,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590707803
    },
    {
        "content": "<p>Sure, I wouldn't frame <code>anyhow::Error</code> as \"an error reporting type.\" The <code>Error</code> trait is designed around being used as a trait object, but <code>Box&lt;dyn Error + Send + Sync&gt;</code> is an unwieldy error. Guaranteeing a backtrace was just gravy.</p>",
        "id": 199097893,
        "sender_full_name": "boats",
        "timestamp": 1590707997
    },
    {
        "content": "<p>I think being a single word is actually the more important aspect of a custom type over the standard trait object</p>",
        "id": 199097938,
        "sender_full_name": "boats",
        "timestamp": 1590708022
    },
    {
        "content": "<p>I think Rust could use a lot better tools for diagnostics and eyre is maybe a path toward that, but I don't think we are ready to have a diagnostics story in std. So I'd agree that that seems out of scope for a working group focused on improving std.</p>",
        "id": 199097974,
        "sender_full_name": "boats",
        "timestamp": 1590708087
    },
    {
        "content": "<p>(To be explicit, when I say it was \"just gravy\" I mean I made that choice in failure only because I was fishing for a reason to tell people to use it over creating a custom error enum! The atmosphere in the community was sharply against anything which allocated when it could have been a stack enum)</p>",
        "id": 199098105,
        "sender_full_name": "boats",
        "timestamp": 1590708224
    },
    {
        "content": "<p>Having the ability to extend it to support contexts in the future is more critical than supporting contexts in the first version.</p>",
        "id": 199098639,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1590708840
    },
    {
        "content": "<p>I wouldn't want us to end up with a type in <code>std</code> that will <em>never</em> be able to support adding things like \"the file this io::Error is about\".</p>",
        "id": 199098701,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1590708878
    },
    {
        "content": "<blockquote>\n<p>Sure, I wouldn't frame anyhow::Error as \"an error reporting type.\"</p>\n</blockquote>\n<p>In my experience people have a much easier time learning when to use anyhow vs an error enum when its taught in the language of handling vs reporting</p>",
        "id": 199099008,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590709195
    },
    {
        "content": "<p>so to me, even if anyhow wasnt designed as a reporting type, it ended up being one, in that its primary purpose is to just store an open set of errors and print it to the screen later.</p>",
        "id": 199099081,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590709258
    },
    {
        "content": "<p>okay I removed the item saying to add an error reporting type to std and replaced with with new section for evaluating the options for error reporter types that we could base a future std implementation on. I'm not sure if project groups should be handling research like that but I think it would be valuable.</p>",
        "id": 199214187,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590787462
    },
    {
        "content": "<p>Also, assumings its okay with the authors I would love to see the primary candidates to base the future std error reporting type on moved into rust-lang-nursery, that way we can clearly communicate that \"these are the crates being evaluated as the future for error handling, please focus on them\"</p>",
        "id": 199214276,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590787517
    },
    {
        "content": "<p>or anything else that gets the same message across so people can start consolidating on libraries that are as similar as possible to the future std reporting type, that way the ecosystem turmoil is minimized when that eventually happens.</p>",
        "id": 199214386,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590787566
    },
    {
        "content": "<p>I suspect it might cause more churn and controversy to move multiple competing libraries into the nursery (and I was under the impression that the nursery was being deprecated).</p>",
        "id": 199214440,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1590787599
    },
    {
        "content": "<p>oh, i didnt know that, nvm then</p>",
        "id": 199214465,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590787614
    },
    {
        "content": "<p>We could list the libraries that are experimentally trying to build atop the new std type(s).</p>",
        "id": 199214474,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1590787621
    },
    {
        "content": "<p>where would you want to list them?</p>",
        "id": 199214494,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590787641
    },
    {
        "content": "<p>The README for the project group that was doing this work.</p>",
        "id": 199214950,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1590787929
    },
    {
        "content": "<p>sounds good</p>",
        "id": 199216324,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590788802
    },
    {
        "content": "<p>I think it'd be interesting to try doin the evaluaton in some sort of structured way. It's something I've thought about in other contexts -- eg., have a place for people to submit experience reports or other things, and maybe have some updates and periodic reports about experiments.</p>",
        "id": 199227236,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590797558
    },
    {
        "content": "<p>That sounds like a great idea</p>",
        "id": 199231948,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590803705
    },
    {
        "content": "<p>i've been informally reaching out to ppl on twitter for this kinda thing, reviewing PR's to switch projects to color-eyre+eyre, that kinda thing</p>",
        "id": 199232008,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590803796
    },
    {
        "content": "<p>having an official channel for that information to be funnelled in would help a lot</p>",
        "id": 199232013,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1590803814
    },
    {
        "content": "<p>Just wanted to ping this issue to see if there's been any further progress on this or if there's any work that needs to be done by me to get the error handling project group started</p>",
        "id": 202367918,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1593464717
    },
    {
        "content": "<p>Hmm, I'm guessing we need someone with permission to create repos in rust-lang to set up a <code>wg-error-handling</code> repository for us. I only have permissions for the nursery org :(</p>",
        "id": 202382611,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1593475645
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span></p>",
        "id": 202385685,
        "sender_full_name": "DPC",
        "timestamp": 1593479052
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204346\">@Ashley Mannix</span> I can definitely do that. Who should have access?</p>",
        "id": 202385727,
        "sender_full_name": "simulacrum",
        "timestamp": 1593479132
    },
    {
        "content": "<p>I might prefer that we use project group terminology and try to write up an RFC for it, though I know that libs hasn't formally adopted that</p>",
        "id": 202385782,
        "sender_full_name": "simulacrum",
        "timestamp": 1593479182
    },
    {
        "content": "<p>(WG is a loaded term)</p>",
        "id": 202385784,
        "sender_full_name": "simulacrum",
        "timestamp": 1593479193
    },
    {
        "content": "<p>We could also just sidestep that and use rust-lang/error-handling for now</p>",
        "id": 202385787,
        "sender_full_name": "simulacrum",
        "timestamp": 1593479207
    },
    {
        "content": "<p>Please feel free to ping me on rust-lang repo management</p>",
        "id": 202385867,
        "sender_full_name": "simulacrum",
        "timestamp": 1593479358
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> myself and burntsushi at a minimum I would say</p>",
        "id": 202393771,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1593490086
    },
    {
        "content": "<p>beyond that I haven't really figured out a list of people to get involved. <span class=\"user-mention\" data-user-id=\"119235\">@David Tolnay</span> and <span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> never replied so I'm not sure if they're interested</p>",
        "id": 202393795,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1593490136
    },
    {
        "content": "<p>also not sure if it's my place to even answer that question, so I'll defer to <span class=\"user-mention\" data-user-id=\"204346\">@Ashley Mannix</span> on this one</p>",
        "id": 202393912,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1593490233
    },
    {
        "content": "<p>Oh I definitely think it would be your say <span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> I was just trying to see if I happened to have the right permissions to create a repository for you :) But it sounds like there‚Äôs a bit more process than I thought around it so it‚Äôs probably just as well I can‚Äôt just go spinning up <code>rust-lang</code> repos</p>",
        "id": 202395253,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1593492323
    },
    {
        "content": "<p>aah, fair, and ty</p>",
        "id": 202395553,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1593492801
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> I would think the best way to make progress on this would be to write a proposal to the libs team outlining the scope and goals of the group. I've linked the project group RFC which should explain the steps towards creating a project group, though feel to ask me any questions about it. <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/2856-project-groups.md\">https://github.com/rust-lang/rfcs/blob/master/text/2856-project-groups.md</a></p>",
        "id": 202410847,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1593508045
    },
    {
        "content": "<p>that said, I don't see a reason not to create the repo for y'all to discuss the initial proposal on if that makes sense</p>",
        "id": 202433593,
        "sender_full_name": "simulacrum",
        "timestamp": 1593523361
    },
    {
        "content": "<p>but yeah I think following something like the project group RFC makes sense</p>",
        "id": 202433613,
        "sender_full_name": "simulacrum",
        "timestamp": 1593523370
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> no rush on the repo. <span class=\"user-mention\" data-user-id=\"219696\">@XAMPPRocky</span> ty,  I'll go ahead and create the project group proposal as a first step</p>",
        "id": 202450821,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1593530451
    },
    {
        "content": "<p>Finally found time to work on this, I'll have a project group proposal submitted soon <span class=\"user-mention\" data-user-id=\"219696\">@XAMPPRocky</span></p>",
        "id": 204322277,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1595114436
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219696\">@XAMPPRocky</span>  do you know where I should submit the charter?</p>",
        "id": 204322967,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1595115960
    },
    {
        "content": "<p><a href=\"https://gist.github.com/yaahc/c5dee6f9b58f2ca928dbdd92c51a049e\">https://gist.github.com/yaahc/c5dee6f9b58f2ca928dbdd92c51a049e</a></p>",
        "id": 204323009,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1595116019
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> I‚Äôd double check with someone on the team but I would think an a PR on the RFC repo would be an appropriate venue.</p>",
        "id": 204330976,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1595129987
    },
    {
        "content": "<p>This might also be something to discuss at the libs team meeting. Because it seems like there's a lot of organisation work being or about to be done so it would be good to be in sync with that.</p>",
        "id": 204333333,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1595134895
    },
    {
        "content": "<p>an issue on the lang-team repo about a Major  Change Proposal might fit better.</p>",
        "id": 204336200,
        "sender_full_name": "Lokathor",
        "timestamp": 1595141562
    },
    {
        "content": "<p>I don't think it belongs under lang, it's not making language changes. I agree it would be better as a MCP but the libs team would have to adopt a major change proposal process first, unlike project groups we don't have an RFC for it yet.</p>",
        "id": 204337344,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1595143820
    },
    {
        "content": "<p>I‚Äôm going to have to try get properly up to speed on all the new ways teams are managing things... I‚Äôd be inclined to copy whatever lang does though. It sounds like we‚Äôre getting due for a dedicated repo üôÇ</p>",
        "id": 204337883,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1595144998
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204346\">@Ashley Mannix</span> I'd be happy to help with any of the org stuff.</p>",
        "id": 204343714,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1595155954
    },
    {
        "content": "<p>k, gonna use <a href=\"https://github.com/rust-lang/rfcs/blob/0fb14f27a48655fc52d58457440da2cbae7bb5b3/text/2797-project-ffi-unwind.md\">https://github.com/rust-lang/rfcs/blob/0fb14f27a48655fc52d58457440da2cbae7bb5b3/text/2797-project-ffi-unwind.md</a> as an example and submit to the RFC repo</p>",
        "id": 204453859,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1595267694
    }
]