[
    {
        "content": "<p>(Speaking of C-compatible, I wish we hadn't made <code>!</code> mean bitwise negation on integers, and I wonder if <em>that's</em> too late to change, but that's for another thread...)</p>",
        "id": 251102062,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630208158
    },
    {
        "content": "<p>that's not even C-compatible though?</p>",
        "id": 251102109,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630208181
    },
    {
        "content": "<p>or is that your point</p>",
        "id": 251102114,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630208187
    },
    {
        "content": "<p>That's what I mean; it's <em>not</em> C-compatible, and I think we should have made it an error instead of defining it.</p>",
        "id": 251102120,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630208198
    },
    {
        "content": "<p>it saves us an operator, dunno how important it is</p>",
        "id": 251102129,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630208221
    },
    {
        "content": "<p>I just came across, today, another person who tried to translate C code to Rust and tripped over that silently compiling into the wrong code.</p>",
        "id": 251102131,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630208223
    },
    {
        "content": "<p>I see, that makes sense</p>",
        "id": 251102153,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630208267
    },
    {
        "content": "<p>I would prefer that C not have such terrible type discipline though <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 251102202,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630208299
    },
    {
        "content": "<p>I'm not going to argue that it should coerce to bool; that'd be inconsistent with Rust being strict about the <code>bool</code> type. I just think it should be a compiler error (with a suggestion for \"did you mean (whatever the spelling of ~ is)\" and maybe another for \"did you mean == 0\").</p>",
        "id": 251102214,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630208314
    },
    {
        "content": "<p>I guess the only way you would get something different in C from rust here is if you used <code>!</code> as an operator to turn an <code>int</code> into an <code>int</code>, because if either one is a <code>bool</code> then you get the right answer</p>",
        "id": 251102304,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630208418
    },
    {
        "content": "<p>Or if you used it in an expression.</p>",
        "id": 251102348,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630208509
    },
    {
        "content": "<p><code>expr + !thing</code> and <code>expr + !!thing</code> are not that rare.</p>",
        "id": 251102382,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630208524
    },
    {
        "content": "<p>I wonder what c2rust does on examples like that</p>",
        "id": 251102493,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630208675
    },
    {
        "content": "<blockquote>\n<p>I wonder if that's too late to change, but that's for another thread...</p>\n</blockquote>\n<p>oh it's <em>way</em> too late for this one. i agree it can be a footgun when porting C code but it's also the only way to bit-negate.</p>",
        "id": 251102778,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1630209021
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"209168\">@Thom Chiovoloni</span> I mean, given a rustfix-applicable suggestion, it wouldn't be <em>impossible</em>...</p>",
        "id": 251102811,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630209077
    },
    {
        "content": "<p>I'm not arguing it'd be <em>worth it</em>.</p>",
        "id": 251102822,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630209096
    },
    {
        "content": "<p>would that catch use in macros?</p>",
        "id": 251102825,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1630209101
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"209168\">@Thom Chiovoloni</span> Yes, if we used an edition.</p>",
        "id": 251102833,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630209113
    },
    {
        "content": "<p>hm, okay. i'm unsure how it could, but i'll take your word for it</p>",
        "id": 251102885,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1630209147
    },
    {
        "content": "<p>Macros know what edition they come from, and parse code accordingly. We would only make the change in a future edition, leaving code from the current edition working exactly as it does.</p>",
        "id": 251102904,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630209191
    },
    {
        "content": "<p>I think it'd be disruptive enough we would have to do it over two editions, if we did it at all: edition N we add the new bitwise negation operator and deprecate (but not remove) the behavior of <code>!</code> on integers, and edition N+1 we make <code>!</code> on integers an error.</p>",
        "id": 251102919,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630209218
    },
    {
        "content": "<p>That way, the move to edition N eliminates 99% of cases but all existing code still continues to compile (thanks to cap-lints).</p>",
        "id": 251102984,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630209261
    },
    {
        "content": "<p>ah, yeah, i see</p>",
        "id": 251103008,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1630209303
    },
    {
        "content": "<p>I think it'd be <em>possible</em>, but it'd still be disruptive enough that it'd be questionable whether it was worthwhile.</p>",
        "id": 251103021,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630209314
    },
    {
        "content": "<p>A gentler approach would be to just introduce a new bitwise negation operation, and then add an allow-by-default lint people could enable.</p>",
        "id": 251103037,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630209338
    },
    {
        "content": "<p>i do feel like the departure here was deliberate (although the intention may have just been to be different than c)</p>",
        "id": 251103042,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1630209342
    },
    {
        "content": "<p>I know it was deliberate. I think it was done specifically to reclaim <code>~</code>, which was then used as one of the pointer sigils.</p>",
        "id": 251103093,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630209366
    },
    {
        "content": "<p>We don't have those pointer sigils anymore, though.</p>",
        "id": 251103098,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630209379
    },
    {
        "content": "<p>huh, good point, its been so long that i forgot about ~ as a ptr sigil</p>",
        "id": 251103369,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1630209652
    },
    {
        "content": "<p>I was thinking about that, but isn't the <code>~</code> pointer sigil used only on types, not expressions?</p>",
        "id": 251103612,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630209918
    },
    {
        "content": "<p>or was it also used as a deref operator</p>",
        "id": 251103622,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630209932
    },
    {
        "content": "<p>It was like the <code>box</code> operator too.</p>",
        "id": 251104038,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1630210474
    },
    {
        "content": "<p>I would try to avoid using <code>~</code> though, it isn't easy to type in many keyboard layouts</p>",
        "id": 251116022,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1630224979
    },
    {
        "content": "<p>Just introduce digraphs and trigraphs. <span aria-label=\"lol\" class=\"emoji emoji-1f606\" role=\"img\" title=\"lol\">:lol:</span> They existed for this exact reason. <a href=\"https://en.m.wikipedia.org/wiki/Digraphs_and_trigraphs\">https://en.m.wikipedia.org/wiki/Digraphs_and_trigraphs</a></p>",
        "id": 251117028,
        "sender_full_name": "bjorn3",
        "timestamp": 1630226058
    },
    {
        "content": "<p>I think in a world without C, using <code>!</code> as the \"bit invert\" operator for any bit width value is consistent and easy to understand. And making rust less good so that we can better fit with the language that we would rather people not be writing new code with in the first place is just a step in the wrong direction.</p>",
        "id": 251117930,
        "sender_full_name": "Lokathor",
        "timestamp": 1630227076
    },
    {
        "content": "<p>It's a trade-off. We want to be different when being different makes us better. I don't think this is better, though. But in any case I don't see us making this change, given compatibility.</p>",
        "id": 251167749,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630281461
    },
    {
        "content": "<p>i think it's nicely consistent, but i dont know that that outweighs the bug risk. that said, changing it this late seems unthinkable to me</p>",
        "id": 251171308,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1630285100
    },
    {
        "content": "<p>Well, I think precisely how you spell it isn't that important. It could be <code>~</code> or <code>!</code>, but it should be the same for all bags of bits, including bools.</p>\n<p>The only reason to keep \"truth negation\" separate from \"bit negation\" is if you have non-bool truths you want to be able to negate. We don't do that in Rust, so there's no reason for two operators.</p>",
        "id": 251196404,
        "sender_full_name": "Lokathor",
        "timestamp": 1630310752
    },
    {
        "content": "<p>Now, if people were allowed to write <em>custom operators</em> then you could have <code>~</code> for bit negation and write C-looking code just fine, and I could have the ever wonderful <code>&lt;$&gt;</code></p>",
        "id": 251196695,
        "sender_full_name": "Lokathor",
        "timestamp": 1630310943
    },
    {
        "content": "<p>but some people just aren't ready for that conversation, maybe for the 2183 edition.</p>",
        "id": 251196764,
        "sender_full_name": "Lokathor",
        "timestamp": 1630310991
    },
    {
        "content": "<p>The way I see it, the usual solution to \"this is a pitfall in this <em>very specific</em> situation\", such as porting C code to Rust, is not to disable the feature altogether, since it's elegantly consistent, as <span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> put it, but <strong>to offer an allow-by-default lint</strong> which people can use to track this problem. And, in this instance, it does look like a good candidate for a clippy lint, I'd say <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 251208465,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1630318408
    },
    {
        "content": "<p>shouldn't it be an allow by default lint on the C code though? Once it's in rust I don't see how you can tell the difference between intentional and unintentional use of <code>!</code></p>",
        "id": 251209299,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630318972
    },
    {
        "content": "<p>An intentional use would be to write <code>.not()</code> or something like that, I guess (which is, yet <em>again</em>, another instance for having <code>Not</code> in the prelude). Whatever it may be, what I'm suggesting is a softened version of the OP: rather than disabling something altogether (hard error), to use a lint (and, imho, that lint ought to default to <code>allow</code>).</p>",
        "id": 251211213,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1630320331
    },
    {
        "content": "<p>An intentional use could also just annotate the correct places with <code>#[allow(...)]</code> of the lint, giving opportunity to also annotate in the code why it is correct.</p>",
        "id": 251227798,
        "sender_full_name": "nagisa",
        "timestamp": 1630329626
    }
]