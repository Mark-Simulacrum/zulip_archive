[
    {
        "content": "<p>It turns out rust-analyzer has an example of how to do the mixing without even a custom error type, by getting it inferred in a closure:<br>\n<a href=\"/user_uploads/4715/aMFZPd7-yz-x51Js1CWr9Y5W/image.png\">image.png</a><br>\nCode not as an image, with the fix to stop interconverting: <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/7735/files#diff-d28550e97c9f896dcfc83614dbec25537cf8a3eee404200ba37d9c9929077249R76\">https://github.com/rust-analyzer/rust-analyzer/pull/7735/files#diff-d28550e97c9f896dcfc83614dbec25537cf8a3eee404200ba37d9c9929077249R76</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/aMFZPd7-yz-x51Js1CWr9Y5W/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/aMFZPd7-yz-x51Js1CWr9Y5W/image.png\"></a></div><p>This is a <code>-&gt; Option&lt;()&gt;</code> method, and inside the closure it's using <code>.find_map(...)?</code> from iterator, so it's on an <code>Option</code>.  But then it's also mapping to <code>Ok(...)</code> and using <code>.collect::&lt;Result&lt;_, _&gt;&gt;()?</code>.</p>\n<p>I'm continuing towards being able to do crater (<a href=\"https://github.com/rust-lang/rust/pull/82318\">https://github.com/rust-lang/rust/pull/82318</a>), but any thoughts?</p>\n<p>Personally, this is pushing me towards thinking an edition change could be worth it.  (Sketch: have a perma-unstable <code>FromResidual2018</code> used in 2018 and earlier in the <code>?</code> desugaring, but everything else is the same.  And lint on use of the option&lt;-&gt;result implementation of that.)</p>\n<p>cc <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>, who might not be following <a class=\"stream\" data-stream-id=\"219381\" href=\"/#narrow/stream/219381-t-libs\">#t-libs</a></p>",
        "id": 227125545,
        "sender_full_name": "scottmcm",
        "timestamp": 1613862176
    },
    {
        "content": "<p>Let's see what the crater run will give us. If this is the only example we can find, then continuing with this small breakage might still make more sense than an edition change. Edition changes are not great, because it means having to maintain both solutions forever.</p>",
        "id": 227152146,
        "sender_full_name": "Mara",
        "timestamp": 1613895345
    },
    {
        "content": "<p>Weren't we already going to keep supporting the accidental <code>Option</code>-&gt;<code>Result</code>? Why wouldn't we do the same the other way?<br>\n<code>impl FromResidual&lt;Result&lt;T, PseudoStableNoneError&gt;&gt; for Option&lt;U&gt;</code></p>",
        "id": 227182209,
        "sender_full_name": "cuviper",
        "timestamp": 1613928996
    },
    {
        "content": "<blockquote>\n<p>Weren't we already going to keep supporting the accidental Option-&gt;Result?</p>\n</blockquote>\n<p>If we can remove it without much breakage, that might be worth it.</p>",
        "id": 227189348,
        "sender_full_name": "Mara",
        "timestamp": 1613936566
    },
    {
        "content": "<p>I'd been thinking of keeping the option-&gt;result direction because it comes from using generics, so for some reason felt less bad to me.  Whereas Result-&gt;Option requires having the <code>Result&lt;_, NoneError&gt;</code> specifically, which should be harder.  (Except apparently it's not that much harder, given closures.)</p>",
        "id": 227189481,
        "sender_full_name": "scottmcm",
        "timestamp": 1613936704
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310399\">Mara</span> <a href=\"#narrow/stream/219381-t-libs/topic/Code.20mixing.20.60Option.60.2F.60Result.60.20in.20.60.3F.60.20(RFC.233058)/near/227152146\">said</a>:</p>\n<blockquote>\n<p>Edition changes are not great, because it means having to maintain both solutions forever.</p>\n</blockquote>\n<p>That's of course true.  This one felt like it wouldn't be too impactful, though -- just one \"call this lang item vs that lang item\" in the <code>?</code> desugar.  And the alternative is that the unwanted conversion becomes part of the trait system, which means that it can't be removed later in an edition even if we wanted to.</p>",
        "id": 227189636,
        "sender_full_name": "scottmcm",
        "timestamp": 1613936879
    },
    {
        "content": "<p>(And doing an edition change would allow things like using <code>Into</code> for result error-conversion while we're at it, for basically no extra cost.)</p>",
        "id": 227189693,
        "sender_full_name": "scottmcm",
        "timestamp": 1613936918
    },
    {
        "content": "<p>Sure, not ruling it out. Just saying that it might be okay without an edition change if the breakage is small.</p>",
        "id": 227189733,
        "sender_full_name": "Mara",
        "timestamp": 1613936972
    },
    {
        "content": "<p>That'd certainly make me happiest <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n<p>(I'm just less confident than I used to be when just making the try build broke before even getting to the crater run.)</p>",
        "id": 227189906,
        "sender_full_name": "scottmcm",
        "timestamp": 1613937138
    },
    {
        "content": "<p>I'd like to be starting to use editions more</p>",
        "id": 227337690,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614028183
    },
    {
        "content": "<p>and less breakage</p>",
        "id": 227337702,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614028186
    },
    {
        "content": "<p>it's <em>really hard</em> to judge the impact of breakage</p>",
        "id": 227337711,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614028192
    },
    {
        "content": "<p>in this case, I think continuing to support <code>NoneError</code> weirdness would be better than forking <code>?</code> behavior</p>",
        "id": 227363291,
        "sender_full_name": "cuviper",
        "timestamp": 1614040043
    },
    {
        "content": "<p>did we ever run the crater where we remove the <code>Debug</code> impl on <code>NoneError</code>?</p>",
        "id": 227363940,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1614040389
    },
    {
        "content": "<p>I don't think that hole really depends on <code>Debug</code> per se -- it's just semi-plausible that an error might convert <code>T: Debug</code></p>",
        "id": 227364313,
        "sender_full_name": "cuviper",
        "timestamp": 1614040567
    },
    {
        "content": "<p>you can use any generic bound, as long as it doesn't overlap your error's reflexive <code>From&lt;T&gt; for T</code></p>",
        "id": 227364505,
        "sender_full_name": "cuviper",
        "timestamp": 1614040710
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/219381-t-libs/topic/Code.20mixing.20.60Option.60.2F.60Result.60.20in.20.60.3F.60.20(RFC.233058)/near/227363940\">said</a>:</p>\n<blockquote>\n<p>did we ever run the crater where we remove the <code>Debug</code> impl on <code>NoneError</code>?</p>\n</blockquote>\n<p>That wouldn't have solved the <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/7735\">https://github.com/rust-analyzer/rust-analyzer/pull/7735</a> regression.</p>\n<p>The run of my prototype without the <code>mod sadness</code> is queued in <a href=\"https://crater.rust-lang.org/ex/pr-82322\">https://crater.rust-lang.org/ex/pr-82322</a></p>",
        "id": 227365178,
        "sender_full_name": "scottmcm",
        "timestamp": 1614041129
    },
    {
        "content": "<p>Hmm, all this stuff is in <code>core</code>.  I think coherence will let me get away with a blanket impl here that would make differences between editions almost unnoticable.  I'll have to give that a try and see...</p>",
        "id": 227366311,
        "sender_full_name": "scottmcm",
        "timestamp": 1614041777
    },
    {
        "content": "<p>and if coherence doesn't let you get away with it, just add a lang item <a href=\"https://github.com/rust-lang/rust/blob/11f838d64ae764c6016c2c00f958bec61e9a2691/library/std/src/f32.rs#L31-L32\">https://github.com/rust-lang/rust/blob/11f838d64ae764c6016c2c00f958bec61e9a2691/library/std/src/f32.rs#L31-L32</a> :)</p>",
        "id": 227375389,
        "sender_full_name": "bstrie",
        "timestamp": 1614048561
    },
    {
        "content": "<p>That works great for inherent -- I'm be a little more scared for trait impls <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 227382984,
        "sender_full_name": "scottmcm",
        "timestamp": 1614056514
    },
    {
        "content": "<p>Well, I think the idea worked -- it's a very small change to make it edition-sensitive: <a href=\"https://github.com/scottmcm/rust/commit/a76ae8ff5fc085a90fa7f09c8d62b6556539822a\">https://github.com/scottmcm/rust/commit/a76ae8ff5fc085a90fa7f09c8d62b6556539822a</a></p>\n<p>Certainly doing it for real would need some more tests, but given the blanket impl works and how small the compiler change is this, I think I'm personally now in \"should do an edition break\" camp.  Basically it can be thought of as \"there's two edition-specific <code>impl</code>s, but everything else is the same\", which seems tolerable to me.</p>\n<p>Dunno what that means I should do with the RFC, though.  I guess update it to have the edition break?  At least as an unresolved question?  Makes me want a lang+libs+edition straw poll before doing that, though...</p>\n<p>Does seeing this change make you feel better about a potential edition change?  (<span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span>/@<strong>Mara</strong>/others?)  Or are the details of the change relatively unimportant, with the fact that one exists at all being the most critical factor?</p>",
        "id": 227391356,
        "sender_full_name": "scottmcm",
        "timestamp": 1614065228
    },
    {
        "content": "<p>Very interesting</p>",
        "id": 227395021,
        "sender_full_name": "cuviper",
        "timestamp": 1614068138
    },
    {
        "content": "<p>That looks perfectly acceptable to me. I suppose the legacy trait could be perma-unstable, but it's minor even if we did stabilize it.</p>",
        "id": 227395221,
        "sender_full_name": "cuviper",
        "timestamp": 1614068275
    },
    {
        "content": "<p>Yeah, I was thinking perma-unstable because I don't think anyone could actually implement it on anything anyway, because of that blanket impl.</p>",
        "id": 227395622,
        "sender_full_name": "scottmcm",
        "timestamp": 1614068541
    },
    {
        "content": "<p>Crater results are in!  <a href=\"https://crater-reports.s3.amazonaws.com/pr-82322/index.html\">https://crater-reports.s3.amazonaws.com/pr-82322/index.html</a></p>\n<p>This is the run with neither <code>Option -&gt; Result</code> nor <code>Result -&gt; Option</code> interconversion.</p>\n<p>747 regressed crates, though 623 of those are are from Rocket's <code>Outcome: Try</code>: <a href=\"https://api.rocket.rs/v0.4/rocket/enum.Outcome.html#impl-Try\">https://api.rocket.rs/v0.4/rocket/enum.Outcome.html#impl-Try</a></p>\n<p>The most interesting failure I've seen so far is another instance of the pattern that lead to me opening this topic: <a href=\"https://github.com/Nadrieril/dhall-rust/blob/9138e0fae758d4beb2188d03fbafaa1893e497f5/serde_dhall/src/value.rs#L481\">https://github.com/Nadrieril/dhall-rust/blob/9138e0fae758d4beb2188d03fbafaa1893e497f5/serde_dhall/src/value.rs#L481</a></p>\n<p>(There's a smaller version of the pattern as a test in my \"what would it take to make this edition-specific\" branch -- <a href=\"https://github.com/scottmcm/rust/commit/do-or-do-not-edition#diff-5b03cfd559db8aadb574643482703a3aaba13108429108aefcad105f79f14f65R11\">https://github.com/scottmcm/rust/commit/do-or-do-not-edition#diff-5b03cfd559db8aadb574643482703a3aaba13108429108aefcad105f79f14f65R11</a> -- if you'd like one where it's easier to what's happening)</p>\n<p>I think my plan will be to update the RFC to be the edition plan.  That would be helpful anyway as the easiest way to more forward -- it could go in on nightly without trouble, since it doesn't break things.  And we could always add the implementations back in the newer editions later if we end up wanting to do so.  (Although I'd rather not, because the error messages are much cleaner without the interconversion implementations.)</p>",
        "id": 229215352,
        "sender_full_name": "scottmcm",
        "timestamp": 1615148761
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> Presumably the issue with rocket will need to go away anyway as they work on moving off of nightly?</p>",
        "id": 229216085,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615149480
    },
    {
        "content": "<p>Rocket's build fails because it's trying to implement the old <code>Try</code>, making it hard to tell whether there'd be any breaking changes.  But I'd expect that yes, it'd either go away by just implementing the new <code>Try</code> when that's on nightly, or moving off nightly altogether.</p>",
        "id": 229216252,
        "sender_full_name": "scottmcm",
        "timestamp": 1615149629
    },
    {
        "content": "<p>Considering that it's on nightly and using a nightly-only feature, I think we can ignore that breakage as it'll break <em>anyway</em> when we change <code>Try</code>.</p>",
        "id": 229216430,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615149799
    },
    {
        "content": "<p>(There are also some crates failing because they use the nightly feature to mention <code>NoneError</code> directly, which is of course allowed breakage.)</p>",
        "id": 229216431,
        "sender_full_name": "scottmcm",
        "timestamp": 1615149800
    },
    {
        "content": "<p>Agreed, I meant that more as \"so the interesting number is more like 124\".  (Though that's still not the \"real breakage\" number.)</p>",
        "id": 229216503,
        "sender_full_name": "scottmcm",
        "timestamp": 1615149866
    },
    {
        "content": "<p>would be nice if we could run a stable-only crater run</p>",
        "id": 229295085,
        "sender_full_name": "Mara",
        "timestamp": 1615209058
    },
    {
        "content": "<p>You can, if you want to, by editing the release channel and doing two try builds in quick succession (one to get master but as stable and one to get your PR as stable).</p>",
        "id": 229302059,
        "sender_full_name": "simulacrum",
        "timestamp": 1615211935
    },
    {
        "content": "<p>src/ci/run.sh</p>",
        "id": 229302099,
        "sender_full_name": "simulacrum",
        "timestamp": 1615211949
    },
    {
        "content": "<p>Agreed, Mara.  I opened <a href=\"https://github.com/rust-lang/crater/issues/563\">https://github.com/rust-lang/crater/issues/563</a> yesterday with the related idea that it would be nice for crater to flag \"this uses nightly-only features\" crates separately.</p>",
        "id": 229367427,
        "sender_full_name": "scottmcm",
        "timestamp": 1615234889
    },
    {
        "content": "<p>Oof, I wish there was a better way to find these than manually looking:<br>\n<a href=\"/user_uploads/4715/O8G2adRe7T9HFxqEQgYifTUU/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/O8G2adRe7T9HFxqEQgYifTUU/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/O8G2adRe7T9HFxqEQgYifTUU/image.png\"></a></div>",
        "id": 230471952,
        "sender_full_name": "scottmcm",
        "timestamp": 1615881519
    },
    {
        "content": "<p>is this something you could search for using <span class=\"user-mention\" data-user-id=\"116109\">@Vytautas Astrauskas [he/him]</span> 's et al rustql/qrates ? <a href=\"https://github.com/rust-corpus/qrates\">https://github.com/rust-corpus/qrates</a></p>",
        "id": 230476317,
        "sender_full_name": "lqd",
        "timestamp": 1615883558
    },
    {
        "content": "<p>That looks awesome, but it feels like it's probably overkill when I already have crater results to know what crates to look at.</p>\n<p>It's narrowed down enough that it's not that bad, just tedious.</p>",
        "id": 230476941,
        "sender_full_name": "scottmcm",
        "timestamp": 1615883919
    },
    {
        "content": "<p>Has found some gems, too -- this is probably the cleanest example yet of the mixing problem this thread is about:<br>\n<a href=\"https://github.com/thejohncrafter/Verifier/pull/1/files\">https://github.com/thejohncrafter/Verifier/pull/1/files</a></p>",
        "id": 230476996,
        "sender_full_name": "scottmcm",
        "timestamp": 1615883961
    },
    {
        "content": "<p>Looks like there are only 4 \"real\" regressions.  Full analysis of the crater results: <a href=\"https://github.com/rust-lang/rust/pull/82322#issuecomment-800452140\">https://github.com/rust-lang/rust/pull/82322?#issuecomment-800452140</a></p>\n<p>It did confirm that the \"I'm <code>From</code> anything\" isn't common, though -- the only case was <a href=\"https://lib.rs/crates/yolo-block\">https://lib.rs/crates/yolo-block</a>, which suggests that it can only be used by nightly crates (and the crate \"was primarily written as a joke\").</p>",
        "id": 230555038,
        "sender_full_name": "scottmcm",
        "timestamp": 1615915271
    },
    {
        "content": "<p>oh nice. that's not bad at all</p>",
        "id": 230555270,
        "sender_full_name": "Mara",
        "timestamp": 1615915341
    },
    {
        "content": "<p>I've made PRs for the three important ones (two of which are merged, the third is an abandoned project), so it makes me ponder doing the edition version, but as a path to remove the back-compat thing from the previous editions at some point in the future.</p>",
        "id": 230556990,
        "sender_full_name": "scottmcm",
        "timestamp": 1615915888
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> why not do it in all editions? breakage is very small right, or do you want to avoid breakage for the crates that depend on the nightly features too?</p>",
        "id": 230559357,
        "sender_full_name": "Mara",
        "timestamp": 1615916741
    },
    {
        "content": "<p>I guess I'm nervous that there are more cases of it hidden somewhere (EDIT: in code that crater can't see).  It's a weird thing in that it seems <em>more</em> likely to happen in advanced-and-complicated rust code, since it depends on somewhat complicated combinator chains to happen.</p>\n<p>If people are happy to do it on all editions I'd be happy to do that -- I'm just generally more willing to do breakage than many others on teams, so I'm trying to cautious <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 230560483,
        "sender_full_name": "scottmcm",
        "timestamp": 1615917069
    },
    {
        "content": "<p>FYI libs folks: I updated the RFC to just do it in all editions, and niko has p-FCP'd it: <a href=\"https://github.com/rust-lang/rfcs/pull/3058#issuecomment-810690641\">https://github.com/rust-lang/rfcs/pull/3058#issuecomment-810690641</a></p>",
        "id": 232534507,
        "sender_full_name": "scottmcm",
        "timestamp": 1617164705
    },
    {
        "content": "<p>Really excited to see that!</p>",
        "id": 232537187,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617167090
    }
]