[
    {
        "content": "<p>I answered a <a href=\"https://stackoverflow.com/q/69459449/68587\">question</a> on Stack Overflow where the poster thought <code>str::to_lowercase</code> worked in place. They wrote:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">enter</span><span class=\"p\">.</span><span class=\"n\">trim</span><span class=\"p\">().</span><span class=\"n\">to_lowercase</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"c1\">//trims the \"enter\" variable out of non-letter inputs and turns them into lowercase</span>\n</code></pre></div>\n<p>What are your thoughts on adding <code>#[must_use]</code> to various <code>str</code> methods that return new values? A quick, not at all exhaustive skim turns up:</p>\n<ul>\n<li><code>str::into_boxed_bytes</code></li>\n<li><code>str::into_string</code></li>\n<li><code>str::repeat</code></li>\n<li><code>str::to_ascii_uppercase</code></li>\n<li><code>str::to_ascii_lowercase</code></li>\n<li><code>str::to_uppercase</code></li>\n<li><code>str::to_lowercase</code></li>\n</ul>\n<p>(These are all from <code>alloc::str</code>.)</p>",
        "id": 256505374,
        "sender_full_name": "John Kugelman",
        "timestamp": 1633566506
    },
    {
        "content": "<p>We talked about this in today's libs-api team meeting and I think the general consensus was we only want to add must_use when it's always a misuse to ignore the value, which I'm guessing applies in all of these cases</p>",
        "id": 256505562,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1633566675
    },
    {
        "content": "<p>Like, if the function has no side effects and can only be used for it's return value then we'd want to mark it must_use</p>",
        "id": 256505603,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1633566720
    },
    {
        "content": "<p>So worth my submitting an issue or PR? I'm a new contributor so I want to make sure it'd be welcome. :)</p>",
        "id": 256505704,
        "sender_full_name": "John Kugelman",
        "timestamp": 1633566775
    },
    {
        "content": "<p>Yeah, exactly</p>",
        "id": 256505725,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1633566788
    },
    {
        "content": "<p>Definitely worth a PR</p>",
        "id": 256505733,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1633566794
    },
    {
        "content": "<p>Definitely welcome</p>",
        "id": 256505743,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1633566801
    },
    {
        "content": "<p>Awesome, thanks!</p>",
        "id": 256505761,
        "sender_full_name": "John Kugelman",
        "timestamp": 1633566813
    },
    {
        "content": "<p>My pleasure ^^</p>",
        "id": 256505769,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1633566824
    },
    {
        "content": "<p>What happens if I find lots and lots of methods to annotate? I have the suspicion/worry that I might comb the standard library and find hundreds of methods that could get <code>#[must_use]</code>'d.</p>\n<p>Should I (a) forge ahead with a big PR; (b) go module-by-module and submit a lot of small PRs; (c) compile a list and get some feedback first; (d) \"stop worrying kid you're not going to find much\"</p>",
        "id": 256506154,
        "sender_full_name": "John Kugelman",
        "timestamp": 1633567095
    },
    {
        "content": "<p>I would say group related onces together. E.g. one for str/slices, one for integers, one for collections, etc</p>",
        "id": 256506414,
        "sender_full_name": "Gary Guo",
        "timestamp": 1633567300
    },
    {
        "content": "<p>I would recommend starting small <span class=\"user-mention\" data-user-id=\"449326\">@John Kugelman</span></p>",
        "id": 256508601,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1633568977
    },
    {
        "content": "<p>It's much harder to review larger PRS which will slow down the process overall</p>",
        "id": 256508613,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1633568994
    },
    {
        "content": "<p>And not everyone was at the libs team meeting so they may end up having different perspectives and it would be good to iron those out on the initial small PRs rather than on a massive one</p>",
        "id": 256508691,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1633569037
    },
    {
        "content": "<p>Then if it becomes smooth sailing you can scale up</p>",
        "id": 256508713,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1633569073
    },
    {
        "content": "<p>Makes sense</p>",
        "id": 256508736,
        "sender_full_name": "John Kugelman",
        "timestamp": 1633569102
    },
    {
        "content": "<p>Imo best start would be to focus on str and work to fully clarify the policy on must_use</p>",
        "id": 256508791,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1633569130
    },
    {
        "content": "<p>Apply the attribute everywhere that makes sense for that type with clear and consistent justifications for each method</p>",
        "id": 256508806,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1633569158
    },
    {
        "content": "<p>I've been looking through and there's a lot of gray area, I can already see it getting muddy<br>\nLike <code>slice::to_vec</code> -- should that have it because there's no reason to ignore the return value? Or not, because a slice \"obviously\" cannot be mutated into a vector in place, and so why would anybody need the warning?</p>",
        "id": 256509106,
        "sender_full_name": "John Kugelman",
        "timestamp": 1633569444
    },
    {
        "content": "<p>(I know that's not a string method, it's just the file I happen to have open...)</p>",
        "id": 256509129,
        "sender_full_name": "John Kugelman",
        "timestamp": 1633569476
    },
    {
        "content": "<p>I would advise it in that situation. If the method takes <code>&amp;self</code> and changes no state, there's no reason to call it except for the result. and we'd like to think the optimizer can eliminate an unused call, but that basically doesn't happen in practice with allocations.</p>",
        "id": 256509210,
        "sender_full_name": "Lokathor",
        "timestamp": 1633569539
    },
    {
        "content": "<p>as opposed to <code>str::to_lowercase</code> which could plausibly mutate the string... but doesn't</p>",
        "id": 256509214,
        "sender_full_name": "John Kugelman",
        "timestamp": 1633569543
    },
    {
        "content": "<p>I think it would apply in both cases</p>",
        "id": 256509250,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1633569599
    },
    {
        "content": "<p>But yea, i think it comes with an associated stability commitment</p>",
        "id": 256509317,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1633569633
    },
    {
        "content": "<p>stability commitment?</p>",
        "id": 256509351,
        "sender_full_name": "Lokathor",
        "timestamp": 1633569679
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 256509352,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1633569679
    },
    {
        "content": "<p>God damnit</p>",
        "id": 256509359,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1633569692
    },
    {
        "content": "<p>Didn't mean to delete</p>",
        "id": 256509364,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1633569696
    },
    {
        "content": "<p>Phone UI...</p>",
        "id": 256509369,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1633569705
    },
    {
        "content": "<p>One sec</p>",
        "id": 256509374,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1633569708
    },
    {
        "content": "<blockquote>\n<p>Choosing to mark to_lowercase as on the basis that it doesn't modify the string should also come with a commitment that we would never want to add internal mutability to that method</p>\n</blockquote>",
        "id": 256509379,
        "sender_full_name": "simulacrum",
        "timestamp": 1633569712
    },
    {
        "content": "<p>ty</p>",
        "id": 256509463,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1633569770
    },
    {
        "content": "<p>i meant to edit it to say \"choosing to mark to_lowercase as #[must_use] on the basis...\"</p>",
        "id": 256509486,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1633569788
    },
    {
        "content": "<p>like, I think generally the type of reference used in the function signature should be a decent guide of intent on whether or not we intend for a method to mutate or not</p>",
        "id": 256509520,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1633569828
    },
    {
        "content": "<p>but yea, each case should be explicitly examined on whether or not we want to reserve the right to introduce side effects in the future</p>",
        "id": 256509576,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1633569855
    },
    {
        "content": "<p>for <code>&amp;self</code> methods I'm assuming the answer will usually be no</p>",
        "id": 256509594,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1633569875
    },
    {
        "content": "<p>but its a fair thing to be concerned about</p>",
        "id": 256509618,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1633569893
    },
    {
        "content": "<p><code>&amp;str</code> doesn't allow for interior mutability anyway.</p>",
        "id": 256509655,
        "sender_full_name": "Lokathor",
        "timestamp": 1633569929
    },
    {
        "content": "<p>It seems to me that <em>dropping</em> must_use from a method is \"fine\", in the sense that existing users of it likely aren't hurt by that use -- right?</p>",
        "id": 256509725,
        "sender_full_name": "simulacrum",
        "timestamp": 1633569969
    },
    {
        "content": "<p>correct</p>",
        "id": 256509735,
        "sender_full_name": "Lokathor",
        "timestamp": 1633569982
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/219381-t-libs/topic/Add.20.23.5Bmust_use.5D.20to.20str.20methods/near/256509725\">said</a>:</p>\n<blockquote>\n<p>It seems to me that <em>dropping</em> must_use from a method is \"fine\", in the sense that existing users of it likely aren't hurt by that use -- right?</p>\n</blockquote>\n<p>yea I think so</p>",
        "id": 256509738,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1633569985
    },
    {
        "content": "<p>Okay I'll bite off a small piece somewhere and see what I come up with. If I find a lot of methods to change I'll seek out some discussion &amp; clarification from you all. There could be more clarity on when to use it or not. e.g. does the wider Rust community want to see lots of <code>#[must_use]</code> or do they only want it in the most error-prone situations?</p>",
        "id": 256509748,
        "sender_full_name": "John Kugelman",
        "timestamp": 1633569994
    },
    {
        "content": "<p>ok that was my next question. it can be added or dropped without affecting stability, correct?</p>",
        "id": 256509768,
        "sender_full_name": "John Kugelman",
        "timestamp": 1633570020
    },
    {
        "content": "<p>yes it's just a potential warn-by-defeault</p>",
        "id": 256509784,
        "sender_full_name": "Lokathor",
        "timestamp": 1633570033
    },
    {
        "content": "<blockquote>\n<p>e.g. does the wider Rust community want to see lots of #[must_use] or do they only want it in the most error-prone situations?</p>\n</blockquote>\n<p>might be a good question for social media / irlo / urlo</p>",
        "id": 256509795,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1633570046
    },
    {
        "content": "<p><a href=\"https://std-dev-guide.rust-lang.org/code-considerations/design/must-use.html\">https://std-dev-guide.rust-lang.org/code-considerations/design/must-use.html</a> says:</p>\n<blockquote>\n<p>The #[must_use] attribute only produces warnings, so it can technically be introduced at any time. To avoid accumulating nuisance warnings though ping @rust-lang/libs for input before adding new #[must_use] attributes to existing types and functions.</p>\n</blockquote>",
        "id": 256509815,
        "sender_full_name": "John Kugelman",
        "timestamp": 1633570070
    },
    {
        "content": "<p>speaking for myself: i'd prefer must_use in all situations where it's true, even if it doesn't seem error prone.</p>",
        "id": 256509895,
        "sender_full_name": "Lokathor",
        "timestamp": 1633570116
    },
    {
        "content": "<p>that's my personal preference too :)</p>",
        "id": 256509909,
        "sender_full_name": "John Kugelman",
        "timestamp": 1633570130
    },
    {
        "content": "<p>I think for methods that return new objects, especially allocated ones, it's useful to be told that they're not used</p>",
        "id": 256509912,
        "sender_full_name": "Tim McNamara",
        "timestamp": 1633570131
    },
    {
        "content": "<p>every <code>new</code> and <code>from</code> too?</p>",
        "id": 256509943,
        "sender_full_name": "cuviper",
        "timestamp": 1633570171
    },
    {
        "content": "<p>Maybe?</p>",
        "id": 256509989,
        "sender_full_name": "Tim McNamara",
        "timestamp": 1633570203
    },
    {
        "content": "<p>just remember that if there are ever cases where someone would legitimately and intentionally want to discard the value must_use will only be an annoyance</p>",
        "id": 256510023,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1633570219
    },
    {
        "content": "<p>They're not being called to produce side effects</p>",
        "id": 256510025,
        "sender_full_name": "Tim McNamara",
        "timestamp": 1633570221
    },
    {
        "content": "<p>this has been discussed at length with things like thread::spawn and tokio::spawn</p>",
        "id": 256510037,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1633570232
    },
    {
        "content": "<p>actually let me double check the tokio thing</p>",
        "id": 256510062,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1633570251
    },
    {
        "content": "<p>I wonder whether some of this can be automated in the compiler? I guess probably not without a more thorough effect system...</p>",
        "id": 256510063,
        "sender_full_name": "Daniel Wagner-Hall",
        "timestamp": 1633570252
    },
    {
        "content": "<p>yeee, neither join handle nor spawn are marked as must_use</p>",
        "id": 256510096,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1633570289
    },
    {
        "content": "<p>well <code>thread::spawn</code> makes a thread which goes off to execute some code, so unless we can automatically detect side effect free code then we have to assume <code>spawn</code> is doing something</p>",
        "id": 256510105,
        "sender_full_name": "Lokathor",
        "timestamp": 1633570301
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"336670\">Daniel Wagner-Hall</span> <a href=\"#narrow/stream/219381-t-libs/topic/Add.20.23.5Bmust_use.5D.20to.20str.20methods/near/256510063\">said</a>:</p>\n<blockquote>\n<p>I wonder whether some of this can be automated in the compiler? I guess probably not without a more thorough effect system...</p>\n</blockquote>\n<p>probably starts running into linear types</p>",
        "id": 256510109,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1633570308
    },
    {
        "content": "<p>agreed jane. my gut feeling is that that's rare because most methods that take immutable args and return a result probably have no side effects</p>",
        "id": 256510142,
        "sender_full_name": "John Kugelman",
        "timestamp": 1633570323
    },
    {
        "content": "<p><code>spawn</code> has side effects on the world, but most functions with side effects only mutate their parameters</p>",
        "id": 256510187,
        "sender_full_name": "John Kugelman",
        "timestamp": 1633570366
    },
    {
        "content": "<p>Is there already a clippy lint covering these str methods?</p>",
        "id": 256510201,
        "sender_full_name": "Tim McNamara",
        "timestamp": 1633570382
    },
    {
        "content": "<p>not <code>to_lowercase</code>. that's what led me down this road. clippy didn't catch the stack overflow user's mistake</p>",
        "id": 256510235,
        "sender_full_name": "John Kugelman",
        "timestamp": 1633570420
    },
    {
        "content": "<p>Okay</p>",
        "id": 256510254,
        "sender_full_name": "Tim McNamara",
        "timestamp": 1633570436
    },
    {
        "content": "<p>I guess the question is whether must_use indicates an (unrecoverable?) error or \"just\" a mistake</p>",
        "id": 256510377,
        "sender_full_name": "Tim McNamara",
        "timestamp": 1633570523
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"323697\">Tim McNamara</span> <a href=\"#narrow/stream/219381-t-libs/topic/Add.20.23.5Bmust_use.5D.20to.20str.20methods/near/256510025\">said</a>:</p>\n<blockquote>\n<p>They're not being called to produce side effects</p>\n</blockquote>\n<p>Let's resurrect pure function :)<br>\njokes aside, clippy has a must_use_candidate lint that suggests adding must_use for pure functions.</p>",
        "id": 256510381,
        "sender_full_name": "Gary Guo",
        "timestamp": 1633570525
    },
    {
        "content": "<p>boy it'd be neat to run an audit on the standard library for all methods with immutable args, a non-unit return type, and no <code>#[must_use]</code>. I wish I knew how to do that, it would be a great starting point</p>",
        "id": 256510388,
        "sender_full_name": "John Kugelman",
        "timestamp": 1633570532
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"323697\">Tim McNamara</span> <a href=\"#narrow/stream/219381-t-libs/topic/Add.20.23.5Bmust_use.5D.20to.20str.20methods/near/256510377\">said</a>:</p>\n<blockquote>\n<p>I guess the question is whether must_use indicates an (unrecoverable?) error or \"just\" a mistake</p>\n</blockquote>\n<p>it just means \"i think you almost surely want to use this value\", but that's it.</p>",
        "id": 256510402,
        "sender_full_name": "Lokathor",
        "timestamp": 1633570551
    },
    {
        "content": "<p>That's my understanding also</p>",
        "id": 256510482,
        "sender_full_name": "Tim McNamara",
        "timestamp": 1633570604
    },
    {
        "content": "<p>(Although I am definitely not an expert)</p>",
        "id": 256510494,
        "sender_full_name": "Tim McNamara",
        "timestamp": 1633570620
    },
    {
        "content": "<p>must_use_candidate: \"Checks for public functions that have no <code>#[must_use]</code> attribute, but return something not already marked must-use, have no mutable arg and mutate no statics.\"</p>",
        "id": 256510513,
        "sender_full_name": "John Kugelman",
        "timestamp": 1633570635
    },
    {
        "content": "<p>wait that's exactly what I want. why isn't that lint triggering on everybody's code all the time?</p>",
        "id": 256510526,
        "sender_full_name": "John Kugelman",
        "timestamp": 1633570650
    },
    {
        "content": "<p>Not everyone uses clippy</p>",
        "id": 256510554,
        "sender_full_name": "Tim McNamara",
        "timestamp": 1633570682
    },
    {
        "content": "<p>Especially those starting out</p>",
        "id": 256510594,
        "sender_full_name": "Tim McNamara",
        "timestamp": 1633570697
    },
    {
        "content": "<p>its because its a pedantic lint</p>",
        "id": 256510621,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1633570727
    },
    {
        "content": "<p>it isn't ever enabled by default</p>",
        "id": 256510625,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1633570731
    },
    {
        "content": "<p>even when you enable \"all\"</p>",
        "id": 256510628,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1633570734
    },
    {
        "content": "<p>so... that would be the \"other camp\". clearly there are people who don't want <code>#[must_use]</code> going off like an air raid siren</p>",
        "id": 256510727,
        "sender_full_name": "John Kugelman",
        "timestamp": 1633570818
    },
    {
        "content": "<p>It's different. This one suggests you to add <code>#[must_use]</code>, not suggesting that return value must be used.</p>",
        "id": 256510782,
        "sender_full_name": "Gary Guo",
        "timestamp": 1633570885
    },
    {
        "content": "<p>cause I'm talking about common things like... <code>len()</code>, <code>is_empty()</code>, <code>contains()</code>, <code>get()</code>, <code>index()</code>. like 75% of all methods in existence</p>",
        "id": 256510802,
        "sender_full_name": "John Kugelman",
        "timestamp": 1633570920
    },
    {
        "content": "<p>When I write a library (possibly with many stubs) I don't want the compiler to complain that a function hasn't perform any side effects yet.</p>",
        "id": 256510844,
        "sender_full_name": "Gary Guo",
        "timestamp": 1633570929
    },
    {
        "content": "<p>should those all get <code>#[must_use]</code>?</p>",
        "id": 256510856,
        "sender_full_name": "John Kugelman",
        "timestamp": 1633570942
    },
    {
        "content": "<p>they should, shouldn't they?</p>",
        "id": 256510873,
        "sender_full_name": "John Kugelman",
        "timestamp": 1633570972
    },
    {
        "content": "<p>I assume so, though i'm not sure how must_use interacts with traits so I can't say for certain on index</p>",
        "id": 256510906,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1633571007
    },
    {
        "content": "<p>They could, but I guess no one has bothered to add them since these fns are hard to misuse.</p>",
        "id": 256510940,
        "sender_full_name": "Gary Guo",
        "timestamp": 1633571034
    },
    {
        "content": "<p>I wonder if we can have the compiler mark all const fns that have no mutable/interior mutable args as <code>#[must_use]</code> automatically.</p>",
        "id": 256511050,
        "sender_full_name": "Gary Guo",
        "timestamp": 1633571120
    },
    {
        "content": "<p>Since they can't do sideeffects</p>",
        "id": 256511104,
        "sender_full_name": "Gary Guo",
        "timestamp": 1633571161
    },
    {
        "content": "<p>You can always add static references to normal functions, but for const fns whether they do side effects or not are guaranteed by signature.</p>",
        "id": 256511212,
        "sender_full_name": "Gary Guo",
        "timestamp": 1633571240
    },
    {
        "content": "<p>I think no one added them because there's just a lot so if you don't do it <em>as you're developing</em> then it's a pain in the shell.</p>",
        "id": 256511412,
        "sender_full_name": "Lokathor",
        "timestamp": 1633571419
    },
    {
        "content": "<p>Also i suppose it's true that must_use takes a non-zero amount of additional compilation time to track</p>",
        "id": 256511445,
        "sender_full_name": "Lokathor",
        "timestamp": 1633571453
    },
    {
        "content": "<p>I mean I've never used it on any of my code. It doesn't ever come to mind</p>",
        "id": 256511533,
        "sender_full_name": "John Kugelman",
        "timestamp": 1633571534
    },
    {
        "content": "<p>It's pretty clear this isn't a onesie-twosie situation. I don't think I'll jump to a PR just yet.<br>\nWhere's a good place to discuss this further? I could make a GitHub issue... I could post on IRLO/URLO... that scares me</p>",
        "id": 256511756,
        "sender_full_name": "John Kugelman",
        "timestamp": 1633571754
    },
    {
        "content": "<p>irlo is probably the next best place to zulip</p>",
        "id": 256513051,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1633572672
    },
    {
        "content": "<p>an issue might work but it might also not be noticed by many people</p>",
        "id": 256513059,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1633572683
    }
]