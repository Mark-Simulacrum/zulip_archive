[
    {
        "content": "<p>While chasing a max-rss regression I noticed that <code>let v: Vec&lt;u8&gt; = Vec::new(); v.resize(len, 0)</code> doesn't use <code>alloc::grow_zeroed</code>. Any reason that hasn't been done except that it would need quite a bit of new plumbing?</p>",
        "id": 248413758,
        "sender_full_name": "The 8472",
        "timestamp": 1628113987
    },
    {
        "content": "<p>Thereâ€™s already specialization of a private trait in order to use <code>Allocator::allocate_zeroed</code> in <code>vec![0; len]</code>. Something similar could probably be done for <code>Vec::resize</code></p>",
        "id": 248768132,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1628425472
    },
    {
        "content": "<p>Are you thinking of just the \"resize from empty\" case, or any resize that needs to reallocate, <span class=\"user-mention\" data-user-id=\"330154\">@The 8472</span>?  The former, at least, seems like it could plausibly do something easy like <code>if self.cap() == 0 { *self = vec![x; n]; }</code> which would hopefully be cheap and useful...</p>",
        "id": 249009616,
        "sender_full_name": "scottmcm",
        "timestamp": 1628616469
    },
    {
        "content": "<p>Not any case in particular case because the thing that needed fixing wouldn't be solved by either of them since it used try_reserve before calling resize.</p>",
        "id": 249011558,
        "sender_full_name": "The 8472",
        "timestamp": 1628617411
    }
]