[
    {
        "content": "<p>So now that <code>Vec::from([1,2,3])</code> is a stable alternative to <code>vec![1,2,3]</code>, and since <code>Vec::new()</code> as <code>vec![]</code> has always worked, the only invocation of the vec macro without a stable equivalent is <code>vec![1; 2]</code>.</p>\n<p>Well... sort of. There does technically exist a public item at <code>std::vec::from_elem</code>, which is what <code>vec![1; 2]</code> expands to. But <code>vec::from_elem</code> is marked <code>#[doc(hidden)]</code> and doesn't exactly give off an air of something that people are supposed to be using. Would people be up for adding <code>Vec::from_elem</code> as a non-secret interface to this?</p>",
        "id": 225101816,
        "sender_full_name": "bstrie",
        "timestamp": 1612397046
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256342\">@bstrie</span> A problem with such a function is that the order of the arguments is somewhat arbitrary and can cause confusion. E.g. does <code>from_elem(2, 3)</code> give <code>[2, 2, 2]</code> or <code>[3, 3]</code>? In the macro with the <code>vec![2; 3]</code> syntax this is slightly less of a problem, because it matches the same syntax as <code>[T; N]</code> for arrays.</p>",
        "id": 225162589,
        "sender_full_name": "Mara",
        "timestamp": 1612447332
    },
    {
        "content": "<p>FWIW, that problem also exists for <code>Vec::resize</code>, which has the length first</p>",
        "id": 225178294,
        "sender_full_name": "cuviper",
        "timestamp": 1612454067
    },
    {
        "content": "<p>We could mention that it probably isn't a function you want to call directly, and that you should prefer the <code>vec!</code> syntax. But I think we should still document it as existing.</p>",
        "id": 225189215,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612457992
    },
    {
        "content": "<p>Jumping off the deep end a bit, one way to address the ordering thing might be to have the non-macro way be <code>repeat(x).to_vec_len(n)</code> or something.  (That name isn't great, and that form has layering problems, but maybe it'll inspire someone else to come up with a better idea.)</p>\n<p>Relatedly, is this a pattern that makes sense for other collections?  It would seem plausible for <code>VecDeque</code>, at least.  So I could also imagine adding <code>fn from_elem(T, n) -&gt; Self { Self::from_iter(repeat(x).take(n)) }</code> to <code>FromIterator</code>, and overriding it for the things that can do better...</p>",
        "id": 225199543,
        "sender_full_name": "scottmcm",
        "timestamp": 1612462410
    },
    {
        "content": "<p>actually, it occurs to me here that's there's not really any reason for this since <code>Vec::from([1; 2])</code> also works nowadays. you could even change the definition of <code>vec![1; 2]</code> to use that instead of <code>vec::from_elem</code>, though I do see that there's like a billion specialized variants of <code>vec::from_elem</code> so maybe that would be a perf loss...</p>",
        "id": 225202146,
        "sender_full_name": "bstrie",
        "timestamp": 1612463532
    },
    {
        "content": "<p>although, wait, <code>Vec::from([1; 2])</code> is more restrictive due to not accepting Clone items. so maybe there is still reason for something else.</p>",
        "id": 225203318,
        "sender_full_name": "bstrie",
        "timestamp": 1612464033
    },
    {
        "content": "<p><code>vec![1; n]</code> works when <code>n</code> is not a compile-time constant.</p>",
        "id": 225205541,
        "sender_full_name": "Amanieu",
        "timestamp": 1612465103
    },
    {
        "content": "<p>Last I looked at this, <code>vec![0; n]</code> was also the only way to get the <code>calloc</code> optimization.</p>",
        "id": 225207860,
        "sender_full_name": "scottmcm",
        "timestamp": 1612466078
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256342\">@bstrie</span> for Copy elements, there's also <code>[123].repeat(3)</code></p>",
        "id": 225219116,
        "sender_full_name": "Mara",
        "timestamp": 1612471126
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/219381-t-libs/topic/expose.20vec.3A.3Afrom_elem/near/225199543\">said</a>:</p>\n<div class=\"codehilite\"><pre><span></span><code>..\n</code></pre></div>\n<p>I would be careful to add it to FromIterator - just think about that this is new method may come as an unwanted addition for existing collections - I'm thinking of ndarray :) which implements FromIterator for its one dimensional array and has an existing <code>from_elem(n, T)</code> method (reverse argument order).</p>\n<p>In general, adding methods to traits is cute but it does kind of create unfortunate situations downstream. That's something I learned since methods were added to Ord (min/max). It's too easy to add defaulted methods, but should be weighed carefully.</p>",
        "id": 225280429,
        "sender_full_name": "bluss",
        "timestamp": 1612519880
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"143274\">Amanieu</span> <a href=\"#narrow/stream/219381-t-libs/topic/expose.20vec.3A.3Afrom_elem/near/225205541\">said</a>:</p>\n<blockquote>\n<p><code>vec![1; n]</code> works when <code>n</code> is not a compile-time constant.</p>\n</blockquote>\n<p>I'm not sure what this is in response to; all of <code>vec![1; n]</code> and <code>vec::from_elem(1, n)</code>and <code>Vec::from([1; n])</code> compile on stable regardless of if <code>n</code> is a compile-time constant or not</p>",
        "id": 225424045,
        "sender_full_name": "bstrie",
        "timestamp": 1612635779
    },
    {
        "content": "<p>that last one definitely does not work if n is not a constant.</p>",
        "id": 225424140,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1612635954
    },
    {
        "content": "<p><span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span> in my test code I wrote <code>Vec::from([1, n])</code>...</p>",
        "id": 225424446,
        "sender_full_name": "bstrie",
        "timestamp": 1612636430
    }
]