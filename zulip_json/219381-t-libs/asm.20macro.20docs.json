[
    {
        "content": "<p>was just talking about the asm macro with a friend and they were surprised by the rustdoc output in <a href=\"https://doc.rust-lang.org/stable/core/arch/macro.asm.html\">https://doc.rust-lang.org/stable/core/arch/macro.asm.html</a></p>",
        "id": 273550881,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1646080937
    },
    {
        "content": "<p>specifically the \"assembly template\" string</p>",
        "id": 273550900,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1646080952
    },
    {
        "content": "<p>and just generally I'm surprised by how empty the docs are, though they do at least link to some other docs that do document things well</p>",
        "id": 273550918,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1646080972
    },
    {
        "content": "<p>wondering if this is good and intentional or if we should put some effort into cleaning up the rustdoc output here for the macro and add more detail or some examples to our api docs themselves rather than relying entirely upon documentation hosted elsewhere</p>",
        "id": 273551007,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1646081025
    },
    {
        "content": "<p>I think separately from if it's intentional it's definitely not good. A short summary as well as basic safety guidance is probably advisable to have on page.</p>",
        "id": 273551440,
        "sender_full_name": "Lokathor",
        "timestamp": 1646081251
    },
    {
        "content": "<p>definitely intentional (see <a href=\"https://github.com/rust-lang/rust/issues/72016#issuecomment-985134497\">https://github.com/rust-lang/rust/issues/72016#issuecomment-985134497</a> ) but I think at the time Amanieu was probably more interested in finding anywhere else for the documentation to live other than the RFC book/unstable book and just happened to pick the reference and rust-by-example</p>",
        "id": 273551903,
        "sender_full_name": "bstrie",
        "timestamp": 1646081523
    },
    {
        "content": "<p>so that isn't to say that things can't be improved</p>",
        "id": 273552032,
        "sender_full_name": "bstrie",
        "timestamp": 1646081578
    },
    {
        "content": "<p>I'd be a fan of having the documentation directly on <code>asm</code>, rather than off in another doc, analogous to <a href=\"https://doc.rust-lang.org/std/fmt/index.html\">https://doc.rust-lang.org/std/fmt/index.html</a> .</p>",
        "id": 273552266,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1646081705
    },
    {
        "content": "<p><code>std::fmt</code> doesn't just link to another doc, which seems like precedent.</p>",
        "id": 273552290,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1646081721
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby [she/her]</span> <a href=\"#narrow/stream/219381-t-libs/topic/asm.20macro.20docs/near/273550900\">said</a>:</p>\n<blockquote>\n<p>specifically the \"assembly template\" string</p>\n</blockquote>\n<p>tell you friend to pay no attention to the <code>#[rustc_builtin_macro]</code> behind the curtain :P</p>",
        "id": 273552476,
        "sender_full_name": "bstrie",
        "timestamp": 1646081800
    },
    {
        "content": "<p>to that end, maybe it would be <em>less</em> confusing if the \"signature\" there were even more obviously bogus, rather than trying to halfway pretend to be a real macro</p>",
        "id": 273552599,
        "sender_full_name": "bstrie",
        "timestamp": 1646081874
    },
    {
        "content": "<p>I've been meaning to tackle the general idea of \"improving the assembly docs\" for a while now but not actually done it.</p>\n<p>The major problem (as i see it) is that \"teaching this the first time\" and \"referencing how it works later\" are different use cases that each want somewhat separate organizations.</p>",
        "id": 273552828,
        "sender_full_name": "Lokathor",
        "timestamp": 1646081953
    },
    {
        "content": "<p>yes, and I think that's what motivated the current rust-by-example/reference split for those separate concerns, but that leaves out anyone who <em>starts</em> from the stdlib docs :P</p>",
        "id": 273552927,
        "sender_full_name": "bstrie",
        "timestamp": 1646081997
    },
    {
        "content": "<p>So perhaps we teach how to use it on the item's docs, and we have the \"just a list of facts\" version live in the reference.</p>",
        "id": 273553017,
        "sender_full_name": "Lokathor",
        "timestamp": 1646082014
    },
    {
        "content": "<p>I'll draft something tonight, this will be a good way to avoid writing fragment shader code today.</p>",
        "id": 273553568,
        "sender_full_name": "Lokathor",
        "timestamp": 1646082195
    },
    {
        "content": "<p>indeed, I find the best way to get anything done is to have another, much more important thing that I need to get done :)</p>",
        "id": 273553931,
        "sender_full_name": "bstrie",
        "timestamp": 1646082358
    },
    {
        "content": "<p>I wonder if the actual specification should also live in the stdlib docs.<br>\nAs far as I can tell, the standard library documentation is the most normative thing describing any part of rust, so I'd actually expect that it doesn't just link out to a non-normative document.</p>",
        "id": 273561199,
        "sender_full_name": "Connor Horman",
        "timestamp": 1646085991
    },
    {
        "content": "<p>That seems like process abuse/scope creep.</p>",
        "id": 273563191,
        "sender_full_name": "The 8472",
        "timestamp": 1646087029
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330154\">The 8472</span> <a href=\"#narrow/stream/219381-t-libs/topic/asm.20macro.20docs/near/273563191\">said</a>:</p>\n<blockquote>\n<p>That seems like process abuse/scope creep.</p>\n</blockquote>\n<p>I mean, it's the only normative thing describing rust atm.</p>",
        "id": 273564194,
        "sender_full_name": "Connor Horman",
        "timestamp": 1646087626
    },
    {
        "content": "<p>It's the only thing you can reliably point to as \"This is how x functions, and these are it's requirements, effects, constrains, preconditions, postconditions, and errors\".</p>",
        "id": 273564287,
        "sender_full_name": "Connor Horman",
        "timestamp": 1646087669
    },
    {
        "content": "<p>The only better part is <a href=\"https://eel.is/c++latest/atomic.order\">https://eel.is/c++latest/atomic.order</a></p>",
        "id": 273564378,
        "sender_full_name": "Connor Horman",
        "timestamp": 1646087732
    },
    {
        "content": "<p>I think the \"fully precise description\" should link to the reference</p>",
        "id": 273564979,
        "sender_full_name": "Lokathor",
        "timestamp": 1646088068
    },
    {
        "content": "<p>The reference isn't normative, though.</p>",
        "id": 273565104,
        "sender_full_name": "Connor Horman",
        "timestamp": 1646088144
    },
    {
        "content": "<p>but the standard library docs aren't either so that doesn't solve your problem</p>",
        "id": 273565136,
        "sender_full_name": "Lokathor",
        "timestamp": 1646088167
    },
    {
        "content": "<p>Alright, I wrote 1800 words, and I'll probably write some more tomorrow: <a href=\"https://hackmd.io/@Lokathor/SkEY3h5l9\">https://hackmd.io/@Lokathor/SkEY3h5l9</a></p>",
        "id": 273584838,
        "sender_full_name": "Lokathor",
        "timestamp": 1646103407
    },
    {
        "content": "<p>Those docs don't mention all the various non-obvious restrictions on the inline assembly you must follow to ensure that it works with other codegen backends and future llvm versions. I'm afraid that putting this in the lib docs will make people not read those in the reference.</p>",
        "id": 273593765,
        "sender_full_name": "bjorn3",
        "timestamp": 1646112751
    },
    {
        "content": "<p>well it's currently quite incomplete, as indicated by several sections marked \"TODO\", and by the title that starts with \"draft\".</p>",
        "id": 273594376,
        "sender_full_name": "Lokathor",
        "timestamp": 1646113494
    },
    {
        "content": "<p>Would you care to expand upon this non-obvious set of limitations <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> ?</p>",
        "id": 273594395,
        "sender_full_name": "Lokathor",
        "timestamp": 1646113528
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/reference/inline-assembly.html#rules-for-inline-assembly\">https://doc.rust-lang.org/nightly/reference/inline-assembly.html#rules-for-inline-assembly</a></p>",
        "id": 273596747,
        "sender_full_name": "bjorn3",
        "timestamp": 1646116129
    },
    {
        "content": "<p>There was also some extra text about allowed inline asm directives added a couple of days ago. Doesn't seem to be part of the online version yet.</p>",
        "id": 273596818,
        "sender_full_name": "bjorn3",
        "timestamp": 1646116212
    },
    {
        "content": "<p>Well, I mean I know about all the stuff that's already written down in the reference.</p>",
        "id": 273606154,
        "sender_full_name": "Lokathor",
        "timestamp": 1646124130
    },
    {
        "content": "<p>I have seen violations of</p>\n<blockquote>\n<p>You cannot assume that two asm! blocks adjacent in source code, even without any other code between them, will end up in successive addresses in the binary without any other instructions between them.</p>\n</blockquote>\n<p>and</p>\n<blockquote>\n<p>You cannot assume that an asm! block will appear exactly once in the output binary. The compiler is allowed to instantiate multiple copies of the asm! block, for example when the function containing it is inlined in multiple places.</p>\n</blockquote>",
        "id": 273609593,
        "sender_full_name": "bjorn3",
        "timestamp": 1646125907
    },
    {
        "content": "<p>With the violation of the former causing the redox os kernel to fail to run when optimizations are disabled, but running fine with it enabled.</p>",
        "id": 273609692,
        "sender_full_name": "bjorn3",
        "timestamp": 1646125962
    },
    {
        "content": "<p>Yep, redox's stack switching code is very broken.</p>",
        "id": 273626954,
        "sender_full_name": "Amanieu",
        "timestamp": 1646134564
    },
    {
        "content": "<p>It was the kernel level syscall handling code that was broken. It is now fixed.</p>",
        "id": 273627433,
        "sender_full_name": "bjorn3",
        "timestamp": 1646134812
    },
    {
        "content": "<p><a href=\"https://github.com/redox-os/kernel/blob/master/src/context/arch/aarch64.rs#L228\">https://github.com/redox-os/kernel/blob/master/src/context/arch/aarch64.rs#L228</a></p>",
        "id": 273628063,
        "sender_full_name": "Amanieu",
        "timestamp": 1646135335
    },
    {
        "content": "<p>That one is indeed broken. The x86_64 version should be fine: <a href=\"https://github.com/redox-os/kernel/blob/81e700708d901d6552c2cef242df505d93efbf4f/src/context/arch/x86_64.rs#L207\">https://github.com/redox-os/kernel/blob/81e700708d901d6552c2cef242df505d93efbf4f/src/context/arch/x86_64.rs#L207</a></p>",
        "id": 273628260,
        "sender_full_name": "bjorn3",
        "timestamp": 1646135476
    },
    {
        "content": "<p>Anyways, this is off-topic. <span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> I'm glad you're working on improving the library docs for <code>asm!</code> and <code>global_asm!</code>. I'm adding some comments to the document.</p>",
        "id": 273630065,
        "sender_full_name": "Amanieu",
        "timestamp": 1646136418
    }
]