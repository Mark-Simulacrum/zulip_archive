[
    {
        "content": "<p>I was playing with the try_trait_v2 feature and found a weird error:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>error[E0119]: conflicting implementations of trait `std::ops::FromResidual&lt;BreakSome&lt;_&gt;&gt;` for type `std::option::Option&lt;_&gt;`\n  --&gt; src/lib.rs:46:1\n   |\n46 | impl&lt;T&gt; FromResidual&lt;BreakSome&lt;T&gt;&gt; for Option&lt;T&gt; {\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: conflicting implementation in crate `core`:\n           - impl&lt;T&gt; FromResidual for Option&lt;T&gt;;\n</code></pre></div>\n<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2021&amp;gist=5dba69eddab9d88196bcdf9989debcd7\">(play)</a><br>\nHow do these impls conflict? <code>&lt;Option&lt;T&gt; as Try&gt;::Residual = Option&lt;!&gt;</code>, so the conflicting impls are</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">FromResidual</span><span class=\"o\">&lt;</span><span class=\"n\">BreakSome</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">FromResidual</span><span class=\"o\">&lt;</span><span class=\"nb\">Option</span><span class=\"o\">&lt;!&gt;&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p><code>BreakSome&lt;T&gt;</code> and <code>Option&lt;!&gt;</code> do not overlap, so I'm confused.</p>",
        "id": 277614821,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1648984900
    },
    {
        "content": "<p>(btw the naming (output/residual) is extremely confusing, I had to check how they map to <code>ControlFlow</code> from <code>branch</code> to figure out what they do...)</p>",
        "id": 277615014,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1648984994
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"273349\">Waffle Lapkin</span> <a href=\"#narrow/stream/219381-t-libs/topic/Why.20can't.20I.20impl.20FromResidual.3CMyType.3CT.3E.3E.20for.20Option.3CT.3E.3F/near/277615014\">said</a>:</p>\n<blockquote>\n<p>(btw the naming (output/residual) is extremely confusing, I had to check how they map to <code>ControlFlow</code> from <code>branch</code> to figure out what they do...)</p>\n</blockquote>\n<p>I think we're on track to change it to the Break/Continue naming from the Residual/Output naming, actually: <a href=\"https://github.com/rust-lang/rust/issues/84277#issuecomment-1066120333\">https://github.com/rust-lang/rust/issues/84277#issuecomment-1066120333</a></p>",
        "id": 277654725,
        "sender_full_name": "scottmcm",
        "timestamp": 1649011754
    },
    {
        "content": "<p>But I'm surprised by that error too.  If it was an <em>orphan</em> rule complaint I could understand it, but not <em>overlap</em>.</p>",
        "id": 277655071,
        "sender_full_name": "scottmcm",
        "timestamp": 1649012185
    },
    {
        "content": "<p>I think I ran into the same issue when I was fiddling with the inverted ? Stuff in the error handling project group a couple weeks back</p>",
        "id": 277658140,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1649016030
    },
    {
        "content": "<p><a href=\"#narrow/stream/257204-project-error-handling/topic/Question.20mark.20operator.20inversion\">https://rust-lang.zulipchat.com/#narrow/stream/257204-project-error-handling/topic/Question.20mark.20operator.20inversion</a></p>",
        "id": 277658175,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1649016076
    },
    {
        "content": "<p>Specifically here</p>",
        "id": 277658185,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1649016116
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2021&amp;gist=859242c4bf70a8c960808c8a9bfcc01c\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2021&amp;gist=859242c4bf70a8c960808c8a9bfcc01c</a></p>",
        "id": 277658186,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1649016117
    },
    {
        "content": "<p>And I never dug into how the alternative version that was done a while back succeeded in working while mine didnt</p>",
        "id": 277658244,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1649016160
    },
    {
        "content": "<p>Moreover, I can't reproduce the same error with 2 common crates, the following works fine:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// crate \"libcore\"</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">Option2</span>::<span class=\"o\">*</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">enum</span> <span class=\"nc\">Option2</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Some2</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">None2</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">enum</span> <span class=\"nc\">Never</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Try</span>: <span class=\"nc\">FromResidual</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span>::<span class=\"n\">Residual</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Residual</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">FromResidual</span><span class=\"o\">&lt;</span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Try</span><span class=\"o\">&gt;</span>::<span class=\"n\">Residual</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Try</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Residual</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">Never</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">FromResidual</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// crate \"libuncore\"</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">libcore</span>::<span class=\"o\">*</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">MyResidual</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">FromResidual</span><span class=\"o\">&lt;</span><span class=\"n\">MyResidual</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Option2</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 277667308,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1649028488
    },
    {
        "content": "<p>But this doesn't work</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(try_trait_v2)]</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">MyResidual</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">ops</span>::<span class=\"n\">FromResidual</span><span class=\"o\">&lt;</span><span class=\"n\">MyResidual</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>error[E0119]: conflicting implementations of trait `std::ops::FromResidual&lt;MyResidual&lt;_&gt;&gt;` for type `std::option::Option&lt;_&gt;`\n --&gt; src/lib.rs:5:1\n  |\n5 | impl&lt;T&gt; std::ops::FromResidual&lt;MyResidual&lt;T&gt;&gt; for Option&lt;T&gt; {\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |\n  = note: conflicting implementation in crate `core`:\n          - impl&lt;T&gt; FromResidual for Option&lt;T&gt;;\n</code></pre></div>\n<p>I'm even more confused now...</p>",
        "id": 277667329,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1649028547
    }
]