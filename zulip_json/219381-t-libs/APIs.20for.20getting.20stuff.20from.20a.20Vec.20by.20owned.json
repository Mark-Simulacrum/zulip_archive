[
    {
        "content": "<p>(Forking from the <a href=\"#narrow/stream/219381-t-libs/topic/Eager.20skipping.20for.20iterators/near/209045693\">skipping thread</a>, cc <span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span>)</p>\n<p>Maybe with <code>min_const_generics</code> coming soon there are some new <code>TryInto</code>s that could make sense for <code>Vec</code> that could cover this?</p>\n<p>Without having worked out the details, this seems neat:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vec</span><span class=\"p\">.</span><span class=\"n\">try_into</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 209048053,
        "sender_full_name": "scottmcm",
        "timestamp": 1599184073
    },
    {
        "content": "<p>ooh that seems <em>really</em> nice</p>",
        "id": 209048103,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599184106
    },
    {
        "content": "<p>it seems like that should only work if the vec is the same length though?</p>",
        "id": 209048111,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599184127
    },
    {
        "content": "<p>Yeah, I think the ones from slices to arrays require exact matches</p>",
        "id": 209048123,
        "sender_full_name": "scottmcm",
        "timestamp": 1599184152
    },
    {
        "content": "<p>this might work though:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vec</span><span class=\"p\">.</span><span class=\"n\">try_into</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 209048133,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599184174
    },
    {
        "content": "<p>not sure what the types look like for that lol</p>",
        "id": 209048137,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599184186
    },
    {
        "content": "<p>I think that wouldn't be able to infer a type, yeah.</p>",
        "id": 209048170,
        "sender_full_name": "scottmcm",
        "timestamp": 1599184203
    },
    {
        "content": "<p>that seems prone to putting your whole vector onto stack</p>",
        "id": 209048189,
        "sender_full_name": "nagisa",
        "timestamp": 1599184216
    },
    {
        "content": "<p><code>truncate</code>-then-<code>try_into</code> doesn't seems insane, given than <code>[..n].try_into()</code> is how you do it with slices.</p>\n<p>(Another version that's essentially the <code>IntoIterator</code> one: <code>VecDeque::from(vec).pop_front()</code>)</p>\n<p>I suppose we could add <code>into_prefix&lt;N&gt;(self)-&gt;Result&lt;[T;N], Self&gt;</code> and such, but I don't know that's worth it vs just using the truncate.</p>\n<p>Hmm, <code>pop_chunk&lt;N&gt;(&amp;mut self) -&gt; Option&lt;[T; N]&gt;</code> is interesting, and also a feasible thing to combine with <code>truncate</code> to get pieces by ownership.  And the <code>pop</code> version seems more generally useful than the one that turns a whole Vec into an array, since if you only need a small enough number to fit in an array then it's a bit odd to be using a vec in the first place...</p>",
        "id": 209048229,
        "sender_full_name": "scottmcm",
        "timestamp": 1599184304
    },
    {
        "content": "<p>Well, it turns out that <code>Box&lt;[T; N]&gt;: TryFrom&lt;Box&lt;[T]&gt;&gt;</code> already existed (as well as versions for <code>Rc</code> and <code>Arc</code>) so I made a PR for the <code>[T; N]: TryFrom&lt;Vec&lt;T&gt;&gt;</code> mentioned: <a href=\"https://github.com/rust-lang/rust/pull/76310\">https://github.com/rust-lang/rust/pull/76310</a></p>",
        "id": 209051224,
        "sender_full_name": "scottmcm",
        "timestamp": 1599189238
    },
    {
        "content": "<p>hmm, i feel like pop_chunk/into_prefix are both special cases of an <code>into_chunk&lt;const N: usize&gt;(self, offset: usize)</code> but it's kinda weird/not great ergonomics</p>",
        "id": 209110844,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1599234963
    },
    {
        "content": "<p>like, you'd want it to be a range but obviously that can't work as the size of the range needs to be known at compile time</p>",
        "id": 209110922,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1599235000
    },
    {
        "content": "<p>i've definitely wanted this, but just did a try_into for the array and cloned the elements</p>",
        "id": 209111027,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1599235061
    },
    {
        "content": "<p>actually no, sorry, the case i needed this was for an array to begin with, so not quite the same</p>",
        "id": 209111111,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1599235087
    },
    {
        "content": "<p>And you could have a <code>fn drain_chunks(&amp;mut self, ...) -&gt; impl Iterator&lt;[T; N]&gt;</code></p>",
        "id": 209120221,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1599240386
    },
    {
        "content": "<p>The \"ultimate\" solution is <code>fn pick(self, idx: [usize; N]) -&gt; [T; N]</code>. Then sprinkle some <code>ptr::read</code> and <code>ptr::write</code>, and <code>MaybeUninit</code>.</p>",
        "id": 209120895,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1599240782
    },
    {
        "content": "<p>I'm sure there's a nice data structure to ensure that <code>idx</code> contains unique values, but <a href=\"https://stackoverflow.com/a/53146512/155423\">I was lazy and used a <code>BTreeSet</code> for something similar</a></p>",
        "id": 209121343,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1599241059
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"209168\">@Thom Chiovoloni</span> For <code>into_prefix</code> I agree, though I figured <code>pop_chunk</code> would be <code>&amp;mut self</code> -- kinda like the inverse of <code>.extend([1, 2, 3].into_iter_for_real())</code>.</p>\n<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> I've definitely wanted the <code>-&gt; [&amp;mut T; N]</code> version of that before. (I usually called it <code>multi_index</code>.)  Yet another think that min_const_generics makes a plausible <code>core</code> addition <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span>  (Now if only it could be <code>slice[[1, 2, 3]]</code> for easy typing...)</p>",
        "id": 209138012,
        "sender_full_name": "scottmcm",
        "timestamp": 1599251605
    },
    {
        "content": "<p>Can it not be? Just rub some traits on it.</p>",
        "id": 209138121,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1599251685
    },
    {
        "content": "<p>We're stuck returning a ref from <code>IndexMut</code>, so I don't think it's possible, no.</p>",
        "id": 209138189,
        "sender_full_name": "scottmcm",
        "timestamp": 1599251745
    },
    {
        "content": "<p>Oh, that issue, certainly.</p>",
        "id": 209151724,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1599264499
    },
    {
        "content": "<p>It would be really nice if something like this worked:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"fm\">vec!</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 225498545,
        "sender_full_name": "Noah Lev",
        "timestamp": 1612752689
    },
    {
        "content": "<p>Few different things related to that:</p>\n<ul>\n<li><a href=\"https://github.com/rust-lang/rust/issues/76342\">https://github.com/rust-lang/rust/issues/76342</a>, Irrefutable slice patterns should be inferred as arrays of that length</li>\n<li><a href=\"https://github.com/rust-lang/lang-team/pull/78\">https://github.com/rust-lang/lang-team/pull/78</a>, about possibly having deref patterns</li>\n<li><code>if let Ok([x]) = &lt;[i32;1]&gt;::try_from(vec![1]) {</code> <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=2f73e257c9d534f3a019a04a4dff55f9\">works</a> today (but really makes one want that inference bug fixed)</li>\n</ul>",
        "id": 225501555,
        "sender_full_name": "scottmcm",
        "timestamp": 1612756726
    },
    {
        "content": "<p>You can move if you convert to a <code>Box&lt;[T]&gt;</code> first:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"fm\">vec!</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">into_boxed_slice</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 225509032,
        "sender_full_name": "cuviper",
        "timestamp": 1612767907
    },
    {
        "content": "<p>hmm, actually no, that only works because the integer is copied.</p>",
        "id": 225509205,
        "sender_full_name": "cuviper",
        "timestamp": 1612768124
    },
    {
        "content": "<p>but I think that would be true of arrays too -- it cites <a href=\"https://doc.rust-lang.org/stable/error-index.html#E0508\">E0508</a></p>",
        "id": 225509226,
        "sender_full_name": "cuviper",
        "timestamp": 1612768178
    }
]