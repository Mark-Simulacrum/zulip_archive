[
    {
        "content": "<p>I am implementing a <code>Vec</code> variant, and I am using the <code>Vec</code> test cases to help verify my implementation. While doing so I found an inconsistency in the stdlib that I find very frustrating, and which is arguably incorrect.</p>\n<p><code>dedup</code>, <code>retain</code> and <code>drain_filter</code> are all consistent in that, should a panic occur on <code>Drop</code>, they stop their operation and return. You can see this here: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=24015265da2a3b5d439cfad25d20930a\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=24015265da2a3b5d439cfad25d20930a</a></p>\n<p><code>drain</code> (and <code>filter</code> since it uses <code>drain</code> internally) on the other hand, does something quite worrying, in my opinion. When it encounters a panic in a <code>Drop</code> impl, <em>it explicitly continues on, dropping more elements</em>. This means that should another <code>Drop</code> panic, we get a hard abort. The problematic lines are 111-113: <a href=\"https://doc.rust-lang.org/stable/src/alloc/vec/drain.rs.html#111\">https://doc.rust-lang.org/stable/src/alloc/vec/drain.rs.html#111</a><br>\nYou can see the abort happening here: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=9fd99600d3b2c7ef418a9322faad9f4f\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=9fd99600d3b2c7ef418a9322faad9f4f</a></p>\n<p>Note that none of the above is actually specified in the docs, which is another possible shortcoming.</p>",
        "id": 251751476,
        "sender_full_name": "orlp",
        "timestamp": 1630603127
    },
    {
        "content": "<p>looks like that behaviour was introduced in <a href=\"https://github.com/rust-lang/rust/pull/67290\">https://github.com/rust-lang/rust/pull/67290</a></p>",
        "id": 251753545,
        "sender_full_name": "Mara",
        "timestamp": 1630603874
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink  [he/him]</span></p>",
        "id": 251753573,
        "sender_full_name": "Mara",
        "timestamp": 1630603887
    },
    {
        "content": "<p>the alternative is to leak the items</p>",
        "id": 251753818,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1630603950
    },
    {
        "content": "<p>dedup and retain should defer the drop of the remaining items to the drop of the original <code>Vec</code> if I'm not mistaken</p>",
        "id": 251753956,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1630604000
    },
    {
        "content": "<p>yeah, aborting if more than one drop panics doesn't seem unreasonable.</p>",
        "id": 251754120,
        "sender_full_name": "Mara",
        "timestamp": 1630604062
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink  [he/him]</span> <a href=\"#narrow/stream/219381-t-libs/topic/Vec.20drain.20panic.20on.20Drop/near/251753818\">said</a>:</p>\n<blockquote>\n<p>the alternative is to leak the items</p>\n</blockquote>\n<p>That is not true, the <code>drain</code> could simply be stopped midway through similar to how <code>.retain(|_| false)</code> stops on panic. No items are leaked - they stay in the <code>Vec</code>, as the above playground demonstrates.</p>",
        "id": 251754909,
        "sender_full_name": "orlp",
        "timestamp": 1630604377
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink  [he/him]</span> <a href=\"#narrow/stream/219381-t-libs/topic/Vec.20drain.20panic.20on.20Drop/near/251753956\">said</a>:</p>\n<blockquote>\n<p>dedup and retain should defer the drop of the remaining items to the drop of the original <code>Vec</code> if I'm not mistaken</p>\n</blockquote>\n<p>I don't see why <code>drain</code> would be any different.</p>",
        "id": 251756234,
        "sender_full_name": "orlp",
        "timestamp": 1630604909
    },
    {
        "content": "<p>the point is that regardless of what it does exactly, either it has to leak the remaining items or run their destructors (either immediately or when the <code>Vec</code> itself is dropped)</p>",
        "id": 251759595,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1630606090
    },
    {
        "content": "<p>since drain normally drops the drained items when the <code>Drain</code> is dropped, it makes sense to keep that behavior in the presence of panics</p>",
        "id": 251759776,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1630606162
    },
    {
        "content": "<p>this is even documented <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html#method.drain\">https://doc.rust-lang.org/std/vec/struct.Vec.html#method.drain</a></p>",
        "id": 251759800,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1630606174
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink  [he/him]</span> <a href=\"#narrow/stream/219381-t-libs/topic/Vec.20drain.20panic.20on.20Drop/near/251759595\">said</a>:</p>\n<blockquote>\n<p>the point is that regardless of what it does exactly, either it has to leak the remaining items or run their destructors (either immediately or when the <code>Vec</code> itself is dropped)</p>\n</blockquote>\n<p>I really don't think this is true. <code>Drain</code> can be dropped without the <code>Vec</code> it references ever being dropped. It's completely unrelated, similar to how calling <code>retain</code> does not mean the <code>Vec</code> is being dropped anytime soon. Leaving the unprocessed items in the <code>Vec</code> is not leaking at all.</p>",
        "id": 251760541,
        "sender_full_name": "orlp",
        "timestamp": 1630606429
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink  [he/him]</span> <a href=\"#narrow/stream/219381-t-libs/topic/Vec.20drain.20panic.20on.20Drop/near/251759776\">said</a>:</p>\n<blockquote>\n<p>since drain normally drops the drained items when the <code>Drain</code> is dropped, it makes sense to keep that behavior in the presence of panics</p>\n</blockquote>\n<p>And <code>retain(|_| false)</code> normally removes all elements, yet it does not keep that behavior in the presence of panics. Nor does <code>drain_filter</code>.</p>",
        "id": 251760953,
        "sender_full_name": "orlp",
        "timestamp": 1630606562
    },
    {
        "content": "<p>Yes, not in the presence of <code>catch_unwind</code></p>",
        "id": 251761604,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1630606769
    },
    {
        "content": "<p><code>retain</code> and <code>drain_filter</code> also don't document what they do when dropped though</p>",
        "id": 251762083,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1630606931
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink  [he/him]</span> <a href=\"#narrow/stream/219381-t-libs/topic/Vec.20drain.20panic.20on.20Drop/near/251762083\">said</a>:</p>\n<blockquote>\n<p><code>retain</code> and <code>drain_filter</code> also don't document what they do when dropped though</p>\n</blockquote>\n<p>I think you might be confusing the drop of the <code>Drain</code> iterator with the drops of the elements contained within the <code>Vec</code> itself. <code>retain</code> doesn't return anything - it just directly operates on the <code>Vec</code>. <code>Drain</code> only specifies what it does when dropped because it is a lazy iterator that consumes itself on drop. For the purposes of this issue we can assume that <code>Drain</code> is always immediately dropped, so <code>v.drain(a..b);</code>.</p>",
        "id": 251762258,
        "sender_full_name": "orlp",
        "timestamp": 1630607007
    },
    {
        "content": "<p>right</p>",
        "id": 251762630,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1630607153
    },
    {
        "content": "<p>To give an analogy of how <em>strange</em> the behavior of <code>drain</code> is, it is as if <code>vec.extend(it)</code> would continue to consume iterator <code>it</code> and appending it to <code>vec</code> even after a call to <code>it.next()</code> caused a panic, instead of just stopping the extension and returning the <code>Vec</code> as it is right now.</p>",
        "id": 251763087,
        "sender_full_name": "orlp",
        "timestamp": 1630607319
    },
    {
        "content": "<p>continuing to drop elements after one drop panics matches what <code>drop_in_place</code> does for slices, and also how drops generally work though</p>",
        "id": 251763279,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1630607385
    },
    {
        "content": "<p>not saying that this is the ideal behavior, but it is pretty pervasive throughout the language</p>",
        "id": 251763436,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1630607428
    },
    {
        "content": "<p>But we aren't <code>Drop</code>ping the vector! We are draining (a portion of) the vector. The issue is obfuscated because, yes, we are in the <code>Drop</code> function of <code>Drain</code>, but that's just <em>when</em> drain performs the bulk of its operation, by necessity, not the logical operation we're performing.</p>",
        "id": 251763532,
        "sender_full_name": "orlp",
        "timestamp": 1630607467
    },
    {
        "content": "<p>It's essentially dropping a subslice of the vector</p>",
        "id": 251763747,
        "sender_full_name": "Gary Guo",
        "timestamp": 1630607539
    },
    {
        "content": "<p>So the behaviour is correct IMO</p>",
        "id": 251763773,
        "sender_full_name": "Gary Guo",
        "timestamp": 1630607544
    },
    {
        "content": "<p>I have a PR open for drain that updated the behavior to use drop_in_place which afaik does the right thing. <a href=\"https://github.com/rust-lang/rust/issues/85157\">#85157</a></p>",
        "id": 251763825,
        "sender_full_name": "The 8472",
        "timestamp": 1630607563
    },
    {
        "content": "<p>that should match the current behavior, since the tests aren't failing</p>",
        "id": 251763949,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1630607611
    },
    {
        "content": "<p>I don't think the behavior is correct because it is a divergence from every other operation on <code>Vec</code> that has exception-safety behavior.</p>",
        "id": 251764512,
        "sender_full_name": "orlp",
        "timestamp": 1630607827
    },
    {
        "content": "<p>Note that <code>Vec::drop</code> and <code>ptr::drop_in_place</code> continue dropping (at the risk of an abort) because they <em>have to</em>. Their hand is forced.</p>\n<p>That is not true for <code>Drain</code> at all.</p>",
        "id": 251766016,
        "sender_full_name": "orlp",
        "timestamp": 1630608433
    },
    {
        "content": "<p><code>Drain</code> is documented to remove all drained elements from the vector on drop</p>",
        "id": 251766435,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1630608595
    },
    {
        "content": "<p><code>retain(f)</code> is documented to remove all values for which <code>f</code> returns <code>false</code> when called, not sure why that matters. Neither specifies what happens on a drop panic.</p>",
        "id": 251766642,
        "sender_full_name": "orlp",
        "timestamp": 1630608660
    },
    {
        "content": "<p>Well, a panic runs destructors</p>",
        "id": 251767767,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1630609033
    },
    {
        "content": "<p>We're <em>already</em> running the destructor of <code>Drain</code> when this occurs. <code>Drain</code> is just very strange in that it performs its operation when dropped.</p>",
        "id": 251770403,
        "sender_full_name": "orlp",
        "timestamp": 1630610037
    },
    {
        "content": "<p>okay, but this still matches the behavior of <code>drop_in_place</code> and <code>Vec</code>'s own drop impl, and other containers</p>",
        "id": 251770899,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1630610230
    },
    {
        "content": "<p>I really don't agree, because in those functions the alternative would be leaking, whereas if <code>Drain</code> simply stops nothing is leaked.</p>",
        "id": 251771464,
        "sender_full_name": "orlp",
        "timestamp": 1630610457
    },
    {
        "content": "<p>As another example: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=95b09ce8a094fc9fbf6d41b4033654ae\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=95b09ce8a094fc9fbf6d41b4033654ae</a><br>\nIf you replace the <code>v.retain(|_| false);</code> with <code>v.drain(..);</code> you get a hard abort instead of panic, because suddenly drops are happening in another order.</p>",
        "id": 251772811,
        "sender_full_name": "orlp",
        "timestamp": 1630611018
    },
    {
        "content": "<p>My take is always that panics in drop are a huge antipattern that should never been allowed.</p>",
        "id": 251897996,
        "sender_full_name": "nagisa",
        "timestamp": 1630682906
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/219381-t-libs/topic/Vec.20drain.20panic.20on.20Drop/near/251897996\">said</a>:</p>\n<blockquote>\n<p>My take is always that panics in drop are a huge antipattern that should never been allowed.</p>\n</blockquote>\n<p>Agree. But I guess it's too late to change.</p>",
        "id": 251898435,
        "sender_full_name": "Gary Guo",
        "timestamp": 1630683060
    },
    {
        "content": "<p>Maybe we could add an unstable flag that treats all drop as nounwind, but I am not sure if it's useful.</p>",
        "id": 251898543,
        "sender_full_name": "Gary Guo",
        "timestamp": 1630683107
    },
    {
        "content": "<p>It's going to be the new billion dollar mistake everybody references in their style guides and/or denies the relevant lint in all their codebases.</p>",
        "id": 251898569,
        "sender_full_name": "nagisa",
        "timestamp": 1630683116
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"303710\">Gary Guo</span> <a href=\"#narrow/stream/219381-t-libs/topic/Vec.20drain.20panic.20on.20Drop/near/251898435\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/219381-t-libs/topic/Vec.20drain.20panic.20on.20Drop/near/251897996\">said</a>:</p>\n<blockquote>\n<p>My take is always that panics in drop are a huge antipattern that should never been allowed.</p>\n</blockquote>\n<p>Agree. But I guess it's too late to change.</p>\n</blockquote>\n<p>I don't think it is. I filed <a href=\"https://github.com/rust-lang/lang-team/issues/97\">https://github.com/rust-lang/lang-team/issues/97</a> in the hopes of eventually making a transition there. I don't currently have time to pursue it, but if someone were inclined to pick it up and champion it, I'd support it from the lang team side.</p>",
        "id": 251901055,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630684040
    },
    {
        "content": "<p>Well, at the very least the edition mechanism is not all that suitable for phasing this out. Any type from rust2015-21 would still be able to unwind from drop and everything would need to account for this possibility.</p>",
        "id": 251920227,
        "sender_full_name": "nagisa",
        "timestamp": 1630692199
    },
    {
        "content": "<p>we might be able to entirely remove this support, arguing that its almost impossible to use correctly, potentially also introducing flags such as <code>--panic-in-drop=abort</code> or some such.</p>",
        "id": 251920376,
        "sender_full_name": "nagisa",
        "timestamp": 1630692256
    },
    {
        "content": "<p>I would really love to see that become an option, then a default as soon as possible.</p>",
        "id": 251920564,
        "sender_full_name": "nagisa",
        "timestamp": 1630692343
    },
    {
        "content": "<p>i think there are some libraries that use panic-on-drop on purpose. like an automatic-throw-at-the-end-of-the-scope thing. not sure how common or important that is</p>",
        "id": 251920716,
        "sender_full_name": "Mara",
        "timestamp": 1630692393
    },
    {
        "content": "<p>Ah, I did indeed do similar things at least once before</p>",
        "id": 251921246,
        "sender_full_name": "Gary Guo",
        "timestamp": 1630692635
    },
    {
        "content": "<p>It's a way to mimic linear type with affine type system. Essentially <code>panic</code> upon drop, and <code>forget</code> when it's being used.</p>",
        "id": 251921457,
        "sender_full_name": "Gary Guo",
        "timestamp": 1630692726
    },
    {
        "content": "<p>in those cases it might be okay if it's an abort instead of an unwind</p>",
        "id": 251921491,
        "sender_full_name": "Mara",
        "timestamp": 1630692751
    },
    {
        "content": "<p>I have a feeling that unwind is better in this case than abort, if these types are not used in collections but on stack</p>",
        "id": 251922088,
        "sender_full_name": "Gary Guo",
        "timestamp": 1630693053
    },
    {
        "content": "<p>But I don't have a solid justification</p>",
        "id": 251922137,
        "sender_full_name": "Gary Guo",
        "timestamp": 1630693072
    },
    {
        "content": "<p>Given that the users can always use abort unwinding scheme already it can't be a soundness related invariant at least.</p>",
        "id": 251981689,
        "sender_full_name": "nagisa",
        "timestamp": 1630741545
    }
]