[
    {
        "content": "<p>I would be interested in adding methods for integer types, which round up to the next multiple of a given number, or which divide by a given number rounding up to the next multiple. For example:</p>\n<p>These would look like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">        </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"k\">u64</span><span class=\"p\">.</span><span class=\"n\">div_round_up</span><span class=\"p\">(</span><span class=\"mi\">4096</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"k\">u64</span><span class=\"p\">.</span><span class=\"n\">div_round_up</span><span class=\"p\">(</span><span class=\"mi\">4096</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"mi\">4095</span><span class=\"k\">u64</span><span class=\"p\">.</span><span class=\"n\">div_round_up</span><span class=\"p\">(</span><span class=\"mi\">4096</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"mi\">4096</span><span class=\"k\">u64</span><span class=\"p\">.</span><span class=\"n\">div_round_up</span><span class=\"p\">(</span><span class=\"mi\">4096</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"mi\">4097</span><span class=\"k\">u64</span><span class=\"p\">.</span><span class=\"n\">div_round_up</span><span class=\"p\">(</span><span class=\"mi\">4096</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"mi\">8191</span><span class=\"k\">u64</span><span class=\"p\">.</span><span class=\"n\">div_round_up</span><span class=\"p\">(</span><span class=\"mi\">4096</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"mi\">8192</span><span class=\"k\">u64</span><span class=\"p\">.</span><span class=\"n\">div_round_up</span><span class=\"p\">(</span><span class=\"mi\">4096</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"k\">u64</span><span class=\"p\">.</span><span class=\"n\">round_up</span><span class=\"p\">(</span><span class=\"mi\">4096</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"k\">u64</span><span class=\"p\">.</span><span class=\"n\">round_up</span><span class=\"p\">(</span><span class=\"mi\">4096</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"mi\">4096</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"mi\">4095</span><span class=\"k\">u64</span><span class=\"p\">.</span><span class=\"n\">round_up</span><span class=\"p\">(</span><span class=\"mi\">4096</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"mi\">4096</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"mi\">4096</span><span class=\"k\">u64</span><span class=\"p\">.</span><span class=\"n\">round_up</span><span class=\"p\">(</span><span class=\"mi\">4096</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"mi\">4096</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"mi\">4097</span><span class=\"k\">u64</span><span class=\"p\">.</span><span class=\"n\">round_up</span><span class=\"p\">(</span><span class=\"mi\">4096</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"mi\">8192</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"mi\">8191</span><span class=\"k\">u64</span><span class=\"p\">.</span><span class=\"n\">round_up</span><span class=\"p\">(</span><span class=\"mi\">4096</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"mi\">8192</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"mi\">8192</span><span class=\"k\">u64</span><span class=\"p\">.</span><span class=\"n\">round_up</span><span class=\"p\">(</span><span class=\"mi\">4096</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"mi\">8192</span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>Does that seem reasonable? I see these operations open-coded quite often, and often incorrectly (not accounting for 0 or for overflow).</p>",
        "id": 194498558,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587156848
    },
    {
        "content": "<p>Is this the kind of thing that needs an RFC, or is this something for which a PR would suffice?</p>",
        "id": 194498592,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587156865
    },
    {
        "content": "<p>PR would suffice I think</p>",
        "id": 194498740,
        "sender_full_name": "simulacrum",
        "timestamp": 1587156938
    },
    {
        "content": "<p>I've personally been using this trait in my codebase:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">BitOps</span>: <span class=\"nb\">Sized</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">BITS</span>: <span class=\"kt\">u32</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">sign_extend</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">width</span>: <span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">zero_extend</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">width</span>: <span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">fits_in_bits_signed</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">width</span>: <span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">fits_in_bits_unsigned</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">width</span>: <span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">is_aligned</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">align</span>: <span class=\"nc\">Self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">align_up</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">align</span>: <span class=\"nc\">Self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">wrapping_align_up</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">align</span>: <span class=\"nc\">Self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">checked_align_up</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">align</span>: <span class=\"nc\">Self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">Self</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">align_down</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">align</span>: <span class=\"nc\">Self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">align_offset</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">align</span>: <span class=\"nc\">Self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 194517083,
        "sender_full_name": "Amanieu",
        "timestamp": 1587170533
    },
    {
        "content": "<p>But it feels a bit niche for the standard library. The sign/zero extension stuff is mainly for dealing with instruction encodings, and the align stuff is for dealing with page alignment.</p>",
        "id": 194517150,
        "sender_full_name": "Amanieu",
        "timestamp": 1587170617
    },
    {
        "content": "<p>The alignment stuff might fit well into Layout, or pointers, perhaps? But I agree that seems a bit more esoteric.</p>\n<p>The division stuff is more widely applicable I think</p>",
        "id": 194517544,
        "sender_full_name": "simulacrum",
        "timestamp": 1587171044
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> Note that on ARM, the page size is not a compile-time constant (though on most systems it is 4K). The proper way of getting the page size on Linux is to read <code>getauxval(AT_PAGESZ)</code>. However now the compiler can't know that it is a power of two and will have to generate a division instruction instead of a faster bitwise masking.</p>",
        "id": 194518595,
        "sender_full_name": "Amanieu",
        "timestamp": 1587172303
    },
    {
        "content": "<p>Wait, you can't assume it's a power of two?</p>",
        "id": 194518689,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587172375
    },
    {
        "content": "<p>You can, but the problem is that the compiler doesn't know that. So it can't optimize the divide to a mask.</p>",
        "id": 194518754,
        "sender_full_name": "Amanieu",
        "timestamp": 1587172456
    },
    {
        "content": "<p>Hence why I went with <code>align_*</code> instead of <code>divide_round_*</code>.</p>",
        "id": 194518760,
        "sender_full_name": "Amanieu",
        "timestamp": 1587172473
    },
    {
        "content": "<p>I will note that there's lots of cases where I've wanted division with rounding that isn't related to page size and such, including non-power-of-two cases</p>",
        "id": 194518949,
        "sender_full_name": "simulacrum",
        "timestamp": 1587172740
    },
    {
        "content": "<p>well maybe \"lots\" is an exaggeration :) but certainly not one</p>",
        "id": 194518954,
        "sender_full_name": "simulacrum",
        "timestamp": 1587172756
    },
    {
        "content": "<p>I currently have a codebase that involves many calls to (a locally defined version of) <code>round_up</code> and <code>div_round_up</code>, many of which are powers of two but not all, and most of which are not the page size.</p>",
        "id": 194526418,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587186053
    },
    {
        "content": "<p>num-integer calls these <code>div_ceil</code> and <code>next_multiple_of</code></p>",
        "id": 194565701,
        "sender_full_name": "cuviper",
        "timestamp": 1587247135
    },
    {
        "content": "<p><code>next_multiple_of</code> seems like a clearer name than <code>round_up</code>. But I've seen <code>div_round_up</code> used pretty widely, and I think it's clearer than <code>div_ceil</code>.</p>",
        "id": 194579121,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587271905
    },
    {
        "content": "<p>I'd use these in Miri immediately :D</p>",
        "id": 194585957,
        "sender_full_name": "RalfJ",
        "timestamp": 1587284855
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/219381-t-libs/topic/round_up.20and.20div_round_up/near/194579121\" title=\"#narrow/stream/219381-t-libs/topic/round_up.20and.20div_round_up/near/194579121\">said</a>:</p>\n<blockquote>\n<p><code>next_multiple_of</code> seems like a clearer name than <code>round_up</code>. But I've seen <code>div_round_up</code> used pretty widely, and I think it's clearer than <code>div_ceil</code>.</p>\n</blockquote>\n<p>I also thought <code>round_up</code> and <code>div_round_up</code> would be very similar given their name, but I think they actually aren't... so <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> for renaming one of them</p>",
        "id": 194585999,
        "sender_full_name": "RalfJ",
        "timestamp": 1587284903
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> If you'd use these in miri, that's a good argument for including them.</p>",
        "id": 194600264,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587306384
    },
    {
        "content": "<p>to be precise, I'd use <code>next_multiple_of</code>:<br>\n<a href=\"https://github.com/rust-lang/miri/blob/4155fb610fca4fe38348ae9c57931450d7bc95d7/src/intptrcast.rs#L128\" title=\"https://github.com/rust-lang/miri/blob/4155fb610fca4fe38348ae9c57931450d7bc95d7/src/intptrcast.rs#L128\">https://github.com/rust-lang/miri/blob/4155fb610fca4fe38348ae9c57931450d7bc95d7/src/intptrcast.rs#L128</a></p>",
        "id": 194600935,
        "sender_full_name": "RalfJ",
        "timestamp": 1587307329
    },
    {
        "content": "<p><code>div_round_up</code> has certainly come up in code I wrote before, so I'm all for it, but I don't think miri would benefit</p>",
        "id": 194600987,
        "sender_full_name": "RalfJ",
        "timestamp": 1587307417
    },
    {
        "content": "<p>it's subjective, but I like the name <code>div_ceil</code> because it's close to what you'd write for floating point, <code>(x / y).ceil()</code></p>",
        "id": 194608781,
        "sender_full_name": "cuviper",
        "timestamp": 1587317011
    },
    {
        "content": "<p>had occasion to use a div_and_round_up style operation myself today</p>",
        "id": 194626633,
        "sender_full_name": "Lokathor",
        "timestamp": 1587346155
    }
]