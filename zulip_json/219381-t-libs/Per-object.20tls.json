[
    {
        "content": "<p>Thoughts on adding a type like <a href=\"https://docs.rs/thread_local/latest/thread_local/struct.ThreadLocal.html\">https://docs.rs/thread_local/latest/thread_local/struct.ThreadLocal.html</a> to the standard library?</p>",
        "id": 268637158,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1642649902
    },
    {
        "content": "<p>It allows for per-object thread local storage:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Collection</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">foo</span>: <span class=\"nc\">std</span>::<span class=\"n\">thread</span>::<span class=\"n\">ThreadLocal</span><span class=\"o\">&lt;</span><span class=\"n\">Foo</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Collection</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"c1\">// retrieves the `Foo` for the current thread</span>\n<span class=\"w\">   </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">get_or_init</span><span class=\"p\">(</span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">Foo</span>::<span class=\"n\">new</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 268637262,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1642650022
    },
    {
        "content": "<p>The API is similar to <code>OnceCell</code>... maybe <code>std::lazy::ThreadLocalOnceCell</code> is a better place.</p>",
        "id": 268637369,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1642650162
    },
    {
        "content": "<p>The <code>thread-local</code> crate currently hsa 40 million+ downloads.</p>",
        "id": 268637375,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1642650175
    },
    {
        "content": "<p>I believe it use O(n) space where n is the highest thread id that tried to access it. In addition I don't think it gets dropped when a thread exists. So for example if you spawn new threads in a loop that access it and then exit you will get an OOM. Or even just spawning an immediately exiting thread in a loop for a while before spawning a new thread acvessing the thread local would OOM.</p>",
        "id": 268664281,
        "sender_full_name": "bjorn3",
        "timestamp": 1642670842
    },
    {
        "content": "<p>Never mind. Misunderstood the code.</p>",
        "id": 268664870,
        "sender_full_name": "bjorn3",
        "timestamp": 1642671138
    },
    {
        "content": "<p>Yeah, that library clears up memory when the ThreadLocal drops. In contrast, the thread-local-object crate does the opposite, cleaning up memory when the threads drop but not when the ThreadLocal drops: <a href=\"https://docs.rs/thread-local-object/latest/thread_local_object/\">https://docs.rs/thread-local-object/latest/thread_local_object/</a></p>",
        "id": 268719438,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1642696350
    }
]