[
    {
        "content": "<p>I just spotted this in passing: <a href=\"https://github.com/rust-lang/rust/blob/f3ab6f05846951bed41d4b0661ac0735aebf3687/library/alloc/src/string.rs#L2197-L2205\">https://github.com/rust-lang/rust/blob/f3ab6f05846951bed41d4b0661ac0735aebf3687/library/alloc/src/string.rs#L2197-L2205</a></p>\n<p><code>shink_to_fit</code> is one of those things that I've always understood as something that you shouldn't usually call, since if it's short-lived it's not worth bothering, and if anyone might append to the <code>String</code> later then they'd like to have that spare capacity rather than need to re-re-allocate space.  That it should really only be used if you have reason to expect that it was once much longer than it is now, and that you're going to keep it around for a while without editing it.  (Though in Rust I'd probably to say to use <code>Box&lt;str&gt;</code> in that case instead of <code>String</code> anyway...)</p>\n<p>Given that, anyone know <em>why</em> it's called in <code>ToString::to_string</code>?  Or am I misunderstanding when I should be using <code>shrink_to_fit</code>...</p>",
        "id": 213067938,
        "sender_full_name": "scottmcm",
        "timestamp": 1602525105
    },
    {
        "content": "<p>I agree it should probably not be called there. Might be good to try to get actual statistics on this, but I'd guess that to_string() is used more often as a temporary or as part of building something bigger than it is used as the final result.</p>\n<p>E.g. <code>println!(\"{}\", thing.to_string().to_lowercase())</code>, where shrink_to_fit() is just a waste of time. Or another example from rustc: <a href=\"https://github.com/rust-lang/rust/blob/b5c9e2448c9ace53ad5c11585803894651b18b0a/compiler/rustc_ast/src/util/literal.rs#L242-L244\">https://github.com/rust-lang/rust/blob/b5c9e2448c9ace53ad5c11585803894651b18b0a/compiler/rustc_ast/src/util/literal.rs#L242-L244</a></p>\n<p>I wonder if removing that shrink_to_fit would cause any visible performance difference in rustc. Might be worth a try, just to have some data.</p>",
        "id": 213485285,
        "sender_full_name": "Mara",
        "timestamp": 1602794785
    },
    {
        "content": "<p>I bet there's definitely enough to_string() use in rustc for a perf run to be interesting.</p>",
        "id": 213486041,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1602795143
    },
    {
        "content": "<p>I'd love to see that perf run. We should check both memory usage and performance.</p>",
        "id": 213490733,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602797639
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310399\">@Mara</span> <span class=\"user-mention\" data-user-id=\"243558\">@Steven Fackler</span> If one of you would be up for submitting that as a quick PR, I'll happily throw it at rust-timer.</p>",
        "id": 213490844,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602797698
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/77997\">https://github.com/rust-lang/rust/pull/77997</a></p>",
        "id": 213491213,
        "sender_full_name": "Mara",
        "timestamp": 1602797870
    },
    {
        "content": "<p>FWIW, the shrink was added without comment in <a href=\"https://github.com/rust-lang/rust/pull/20377\">https://github.com/rust-lang/rust/pull/20377</a></p>",
        "id": 213491216,
        "sender_full_name": "cuviper",
        "timestamp": 1602797872
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310399\">@Mara</span> Awesome; queued.</p>",
        "id": 213491375,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602797953
    },
    {
        "content": "<p>This has the potential to substantially reduce the number of times we hit the allocator.</p>",
        "id": 213491410,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602797973
    },
    {
        "content": "<p>And if there are regressions, we may be able to fix them up by adding targeted <code>.shrink_to_fit()</code> calls to specific cases.</p>",
        "id": 213491438,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602797992
    },
    {
        "content": "<p>i've been looking through <a href=\"http://grep.app\">grep.app</a> for usages of .to_string(). ignoring all the str::to_string()s, i see almost only cases where shrink_to_fit should not happen. (e.g. <code>f(thing.to_string().as_str())</code> and other things like the examples i mentioned before.)</p>",
        "id": 213491633,
        "sender_full_name": "Mara",
        "timestamp": 1602798102
    },
    {
        "content": "<p>(also a surprising number of <code>println!(\"... {} ...\", thing.to_string())</code>)</p>",
        "id": 213491947,
        "sender_full_name": "Mara",
        "timestamp": 1602798282
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310399\">@Mara</span> That last one should just be deleted, if we can do that in a systematic way. :)</p>",
        "id": 213491982,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602798305
    },
    {
        "content": "<p>/me wonders if there was some specific pattern that led to that originally.</p>",
        "id": 213491996,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602798320
    },
    {
        "content": "<p>oh i mean all across github. not the rust repo itself.</p>",
        "id": 213492010,
        "sender_full_name": "Mara",
        "timestamp": 1602798330
    },
    {
        "content": "<p>Ah.</p>",
        "id": 213492019,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602798336
    },
    {
        "content": "<p>/me tests something...</p>",
        "id": 213492033,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602798344
    },
    {
        "content": "<p>Neither rustc nor clippy has a lint for that.</p>",
        "id": 213492142,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602798394
    },
    {
        "content": "<p>heh, interesting</p>",
        "id": 213492164,
        "sender_full_name": "Mara",
        "timestamp": 1602798412
    },
    {
        "content": "<p>/me adds to the never-ending todo list</p>",
        "id": 213492173,
        "sender_full_name": "Mara",
        "timestamp": 1602798418
    },
    {
        "content": "<p>I can't think of <em>any</em> case where print/println/write/writeln/etc should ever have a call to <code>.to_string()</code> as the last thing that happens in one of its arguments.</p>",
        "id": 213492197,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602798433
    },
    {
        "content": "<p>I think that'd be safe to add to rustc as a warn-by-default lint.</p>",
        "id": 213492227,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602798452
    },
    {
        "content": "<p>Can you think of <em>any</em> possible false positives?</p>",
        "id": 213492234,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602798461
    },
    {
        "content": "<p>.to_string() is not always ToString::to_string().  some types have their own .to_string(), which is sometimes the only way to display them, maybe?</p>",
        "id": 213492314,
        "sender_full_name": "Mara",
        "timestamp": 1602798503
    },
    {
        "content": "<p>Note that <code>ToString</code> is specialized, so this shrinking only applies to the default <code>T: Display</code> implementation</p>",
        "id": 213492324,
        "sender_full_name": "cuviper",
        "timestamp": 1602798509
    },
    {
        "content": "<p>all the string-like <code>ToString</code> specializations will avoid this</p>",
        "id": 213492341,
        "sender_full_name": "cuviper",
        "timestamp": 1602798521
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310399\">Mara</span> <a href=\"#narrow/stream/219381-t-libs/topic/Why.20does.20.60ToString.60.20always.20.60shrink_to_fit.60.3F/near/213492314\">said</a>:</p>\n<blockquote>\n<p>.to_string() is not always ToString::to_string().  some types have their own .to_string(), which is sometimes the only way to display them, maybe?</p>\n</blockquote>\n<p>The lint should be tied to the specific function, not the name <code>to_string</code>.</p>",
        "id": 213492401,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602798566
    },
    {
        "content": "<p>We could add a <code>#[rustc_lint_as_display_arg]</code> attribute, to be applied to functions that go from one thing implementing<code>Display</code> to another thing implementing <code>Display</code> in a way that shouldn't change the output.</p>",
        "id": 213492515,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602798616
    },
    {
        "content": "<p>yeah. but for ToString::to_string.. i can't think of any time where you'd actually want to use it as a formatting argument.</p>",
        "id": 213492544,
        "sender_full_name": "Mara",
        "timestamp": 1602798630
    },
    {
        "content": "<p>or hm. i can</p>",
        "id": 213492561,
        "sender_full_name": "Mara",
        "timestamp": 1602798638
    },
    {
        "content": "<p>with <code>{:&gt;40}</code> or something. Strings apply the padding nicely. most type's Display implementations don't</p>",
        "id": 213492587,
        "sender_full_name": "Mara",
        "timestamp": 1602798654
    },
    {
        "content": "<p>you might want <code>to_string</code> for formats with width, when the type's own formatting doesn't support that</p>",
        "id": 213492588,
        "sender_full_name": "cuviper",
        "timestamp": 1602798655
    },
    {
        "content": "<p>so it also should check for just <code>{}</code> or <code>{0}</code> or something.</p>",
        "id": 213492612,
        "sender_full_name": "Mara",
        "timestamp": 1602798666
    },
    {
        "content": "<p>yeah, what <span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> is saying.</p>",
        "id": 213492622,
        "sender_full_name": "Mara",
        "timestamp": 1602798674
    },
    {
        "content": "<p>That'd be a bug in the Display impl, but yeah, flagging code that's working around that would be a false positive.</p>",
        "id": 213492651,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602798695
    },
    {
        "content": "<p>We could account for that in the lint, though, as you said.</p>",
        "id": 213492758,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602798739
    },
    {
        "content": "<p>i bet the majority of Display implementations don't respect padding. most just do a few write!()s</p>",
        "id": 213492759,
        "sender_full_name": "Mara",
        "timestamp": 1602798740
    },
    {
        "content": "<p>hm, i vaguely remember seeing one implementation that would check if any padding is active, and then call <code>f.pad(&amp;self.to_string())</code> to take care of that.</p>",
        "id": 213492894,
        "sender_full_name": "Mara",
        "timestamp": 1602798818
    },
    {
        "content": "<p>heh</p>",
        "id": 213492904,
        "sender_full_name": "cuviper",
        "timestamp": 1602798827
    },
    {
        "content": "<p>It's unfortunate that, for the benefit of a small handful of types that'll want to do something unusual with modifiers, we make all Display impls handle modifiers themselves.</p>",
        "id": 213492910,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602798832
    },
    {
        "content": "<p>(another case where shrink_to_fit would be bad btw :P)</p>",
        "id": 213492916,
        "sender_full_name": "Mara",
        "timestamp": 1602798838
    },
    {
        "content": "<p>yeah. could be done differently, but in practice it doesn't really seem like much of a problem.</p>",
        "id": 213493041,
        "sender_full_name": "Mara",
        "timestamp": 1602798896
    },
    {
        "content": "<p>found it! <a href=\"https://github.com/rust-lang/rust/blob/dd7fc54ebdca419ad9d3ab1e9f5ed14e770768ea/compiler/rustc_data_structures/src/svh.rs#L45-L49\">https://github.com/rust-lang/rust/blob/dd7fc54ebdca419ad9d3ab1e9f5ed14e770768ea/compiler/rustc_data_structures/src/svh.rs#L45-L49</a></p>",
        "id": 213493051,
        "sender_full_name": "cuviper",
        "timestamp": 1602798901
    },
    {
        "content": "<p>haha, nice</p>",
        "id": 213493084,
        "sender_full_name": "Mara",
        "timestamp": 1602798930
    },
    {
        "content": "<p>i wonder if that type is ever Displayed anywhere with formatting/padding options.</p>",
        "id": 213493168,
        "sender_full_name": "Mara",
        "timestamp": 1602798970
    },
    {
        "content": "<p>i feel like a <code>write!(f, \"{:016x}\", self.hash)</code> would've been just fine</p>",
        "id": 213493189,
        "sender_full_name": "Mara",
        "timestamp": 1602798992
    },
    {
        "content": "<p>This seems like an excellent argument for <code>#[derive(Display)]</code>.</p>",
        "id": 213493193,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602798994
    },
    {
        "content": "<p>(because we can make derived implementations handle padding correctly)</p>",
        "id": 213493212,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602799019
    },
    {
        "content": "<p>hm, how would that derive know to use <code>\"{:016x}\", self.hash</code>?</p>",
        "id": 213493241,
        "sender_full_name": "Mara",
        "timestamp": 1602799040
    },
    {
        "content": "<p>or only have derive(Display) for wrapper types with a single member?</p>",
        "id": 213493339,
        "sender_full_name": "Mara",
        "timestamp": 1602799088
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[derive(Copy, Clone, PartialEq, Eq, Debug, Display)]</span><span class=\"w\"></span>\n<span class=\"cp\">#[display(</span><span class=\"s\">\"{hash:016x}\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Svh</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">hash</span>: <span class=\"kt\">u64</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 213493345,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602799093
    },
    {
        "content": "<p>Similar syntax to <a href=\"https://docs.rs/thiserror/\">thiserror</a>, just with <code>display</code> instead of <code>error</code> as the attribute name.</p>",
        "id": 213493438,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602799187
    },
    {
        "content": "<p>yeah okay. but i guess it's a bit too late, considering almost all Display implementations already ignore their padding options. and the derive couldn't easily do anything else than <code>f.pad(thing.to_string())</code> in most cases. it'd have to be very smart to realize that <code>{:016x}</code> on a u64 is always going to be 16 chars, and that calculating the padding/alignment can be done without allocating/formatting first.</p>",
        "id": 213493495,
        "sender_full_name": "Mara",
        "timestamp": 1602799206
    },
    {
        "content": "<p>As an initial step, I wonder if it'd make sense to have a <code>pad_fmt</code> method on <code>Formatter</code>.</p>",
        "id": 213493574,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602799273
    },
    {
        "content": "<p>Something that takes a <code>std::fmt::Arguments</code> in place of a <code>&amp;str</code>.</p>",
        "id": 213493613,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602799313
    },
    {
        "content": "<p><code>f.pad_fmt(format_args!(\"{:016x}\", self.hash))</code></p>",
        "id": 213493682,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602799343
    },
    {
        "content": "<p>maybe a Display::fmt_length that gives the number of chars (bytes?) that fmt is going to produce. the default implementation could just fmt the thing to some object that just counts the length, i suppose.</p>",
        "id": 213493684,
        "sender_full_name": "Mara",
        "timestamp": 1602799343
    },
    {
        "content": "<p>but what would that pad_fmt do, other than simply <code>f.pad(args.to_string())</code>?</p>",
        "id": 213493732,
        "sender_full_name": "Mara",
        "timestamp": 1602799390
    },
    {
        "content": "<p>hm, it could skip the to_string() if there are no options specified. but other than that, i don't think it can really help much?</p>",
        "id": 213493764,
        "sender_full_name": "Mara",
        "timestamp": 1602799422
    },
    {
        "content": "<p>I was imagining a way to get the length of an <code>Arguments</code> without (always) fully formatting it.</p>",
        "id": 213493838,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602799449
    },
    {
        "content": "<p>yeah, okay</p>",
        "id": 213493870,
        "sender_full_name": "Mara",
        "timestamp": 1602799474
    },
    {
        "content": "<p>Same concept as your mention of <code>fmt_length</code>, just on <code>Arguments</code> rather than <code>Display</code>.</p>",
        "id": 213493936,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602799535
    },
    {
        "content": "<p>They'd work well together, in that <code>Arguments::len</code> could call <code>fmt_length</code> for anything it can't compute without asking the type.</p>",
        "id": 213493960,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602799560
    },
    {
        "content": "<p>arguments wlil have to call fmt_length on all of its formatters</p>",
        "id": 213494008,
        "sender_full_name": "Mara",
        "timestamp": 1602799573
    },
    {
        "content": "<p>and Arguments already implements Display, so would be the same method</p>",
        "id": 213494020,
        "sender_full_name": "Mara",
        "timestamp": 1602799583
    },
    {
        "content": "<p>Oh, good point!</p>",
        "id": 213494040,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602799598
    },
    {
        "content": "<p>No need for a separate method, it has the same semantics.</p>",
        "id": 213494049,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602799605
    },
    {
        "content": "<p>god all this formatting stuff is a never ending rabbit hole, isn't it? :P  every time there's some conversation about  anything related to std::fmt, so many new problems and interesting ideas pop up ^^'</p>",
        "id": 213494082,
        "sender_full_name": "Mara",
        "timestamp": 1602799633
    },
    {
        "content": "<p>/me adds Display::fmt_length to the never-ending to do list.</p>",
        "id": 213494128,
        "sender_full_name": "Mara",
        "timestamp": 1602799677
    },
    {
        "content": "<p>I suppose that format args provide a <em>minimum</em> width, not a <em>maximum</em> width, so technically it'd be necessary to call <code>fmt_length</code> there. :(</p>",
        "id": 213494129,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602799680
    },
    {
        "content": "<p>Although...</p>",
        "id": 213494172,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602799685
    },
    {
        "content": "<p>I wonder if <code>Display</code> should also have an associated non-method const function <code>max_fmt_length</code> that returns <code>Option&lt;usize&gt;</code>.</p>",
        "id": 213494195,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602799713
    },
    {
        "content": "<p>and then the same for Binary, LowerHex, UpperHex, etc. etc.? :(</p>",
        "id": 213494245,
        "sender_full_name": "Mara",
        "timestamp": 1602799756
    },
    {
        "content": "<p>Yup.</p>",
        "id": 213494251,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602799761
    },
    {
        "content": "<p>yeah, maybe. then u64 could clearly say it's never more than 16 hex digits.</p>",
        "id": 213494337,
        "sender_full_name": "Mara",
        "timestamp": 1602799810
    },
    {
        "content": "<p>Exactly.</p>",
        "id": 213494342,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602799815
    },
    {
        "content": "<p>Then, entirely at compile time, <code>format_args!(\"{:016x}\", thing).fmt_len()</code> could confirm that <code>thing</code> can never be wider than <code>16</code>, so it doesn't need to call <code>thing.fmt_len()</code>.</p>",
        "id": 213494374,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602799851
    },
    {
        "content": "<p>i'd love to talk all night about std::fmt. but i should go to sleep ^^</p>",
        "id": 213494408,
        "sender_full_name": "Mara",
        "timestamp": 1602799873
    },
    {
        "content": "<p>Fair. :)</p>",
        "id": 213494412,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602799878
    },
    {
        "content": "<p>Meanwhile, I hope your PR is a huge win. :)</p>",
        "id": 213494423,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602799890
    },
    {
        "content": "<p>Thanks for making a PR here, <span class=\"user-mention\" data-user-id=\"310399\">@Mara</span>!</p>\n<p>Hmm, is it even feasible to implement your own padding-and-such logic here?  I vaguely remember some old conversation about the flags not even being usefully exposed...</p>",
        "id": 213495680,
        "sender_full_name": "scottmcm",
        "timestamp": 1602800779
    },
    {
        "content": "<p>I <em>think</em> they're exposed, but I really can't imagine many scenarios where you'd <em>want</em> to hand-implement it yourself.</p>",
        "id": 213496909,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602801683
    },
    {
        "content": "<p>Ah, I'm remembering an ancient conversation, looks like this is better since 1.24 <a href=\"https://doc.rust-lang.org/std/fmt/struct.Formatter.html#method.flags\">https://doc.rust-lang.org/std/fmt/struct.Formatter.html#method.flags</a></p>",
        "id": 213497547,
        "sender_full_name": "scottmcm",
        "timestamp": 1602802176
    },
    {
        "content": "<p>There are still some secret flags, like <code>hex</code> for Debug.</p>",
        "id": 213532243,
        "sender_full_name": "Mara",
        "timestamp": 1602837132
    },
    {
        "content": "<p><code>DebugLowerHex</code> and <code>DebugUpperHex</code> are the only two secret flags it seems.</p>",
        "id": 213533065,
        "sender_full_name": "Mara",
        "timestamp": 1602837663
    },
    {
        "content": "<p>Removing shrink_to_fit perf results: <a href=\"https://perf.rust-lang.org/compare.html?start=dd7fc54ebdca419ad9d3ab1e9f5ed14e770768ea&amp;end=a9f657d64df859414475bb3329cda65b5445193e\">https://perf.rust-lang.org/compare.html?start=dd7fc54ebdca419ad9d3ab1e9f5ed14e770768ea&amp;end=a9f657d64df859414475bb3329cda65b5445193e</a></p>",
        "id": 213536172,
        "sender_full_name": "Mara",
        "timestamp": 1602839624
    },
    {
        "content": "<p>do we know whether the -doc benchmarks still have high variance as before ?</p>",
        "id": 213538198,
        "sender_full_name": "lqd",
        "timestamp": 1602841004
    },
    {
        "content": "<p>Yes, and they will until rustdoc stops loading external crates on startup</p>",
        "id": 213557431,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602853820
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/68427\">https://github.com/rust-lang/rust/issues/68427</a></p>",
        "id": 213557507,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602853874
    },
    {
        "content": "<p>Fixing that needs a rewrite of intra-doc links which I don't currently have time for</p>",
        "id": 213558672,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602854439
    }
]