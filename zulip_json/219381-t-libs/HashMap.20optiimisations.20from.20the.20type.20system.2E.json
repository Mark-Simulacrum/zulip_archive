[
    {
        "content": "<p>I don't know if this is the right place to ask, or if this will go anywhere: I'm naively thinking, that if you can promise to the type system that all keys fit certain constraints (such as monotonically increasing), and that a hash function can be selected based on said constraints, you are statically encoding information that might allow for some optimisations.</p>\n<p>The seed of this idea came from <a href=\"https://en.wikipedia.org/wiki/Hash_table#Monotonic_keys\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Hash_table#Monotonic_keys\">this wikipedia</a> chapter on monotonic keys. It's saying that all existing entries do not need to be rehashed and moved, potentially opening the door to more run-time optimizations in terms of memory allocation, entry movement, etc.,. I could see this being of particular interest to hard real-time systems, as open-addressing lookup has to be treated as O(n) and not O(1)~, but with the partitions as described in the link, it can constrain the lookup complexity to <code>O(max(log(log n), max(partition_sizees))</code>.</p>\n<p>I've no idea how to go about pulling on this thread in more detail - I'm just a u-grad student. I thought there might be some people here that would at least be help me in where to direct my inquiries.</p>",
        "id": 190496801,
        "sender_full_name": "Ben",
        "timestamp": 1584102504
    },
    {
        "content": "<p>If you know some particular quantities of your data set, it may indeed be beneficial to swap out your hash function (which is mostly a matter of providing a struct to the HashMap implementing hasher). But this isn't really something that is going to happen automatically (ever) I'm guessing.</p>",
        "id": 190497622,
        "sender_full_name": "simulacrum",
        "timestamp": 1584103139
    },
    {
        "content": "<p>And for very particular cases -- e.g. monotonic keys -- it may even be the case that a hashmap is not what you want, but instead just a Vec + push and search via binary_search. But it really depends on your exact use case.</p>",
        "id": 190497746,
        "sender_full_name": "simulacrum",
        "timestamp": 1584103211
    },
    {
        "content": "<p>For me, I'm doing an indexed binary heap implemented priority queue. Going to serve as a data structure for my hobby OS projects timer driver. Need O(log n) queue deletion by entry ID. Id's have to be unique per entry.</p>",
        "id": 190498425,
        "sender_full_name": "Ben",
        "timestamp": 1584103754
    },
    {
        "content": "<p>I would ask on <a href=\"http://users.rust-lang.org\" target=\"_blank\" title=\"http://users.rust-lang.org\">users.rust-lang.org</a> (or perhaps #general), Zulip and such are mostly intended for team work rather than sort of general questions</p>",
        "id": 190498572,
        "sender_full_name": "simulacrum",
        "timestamp": 1584103844
    }
]