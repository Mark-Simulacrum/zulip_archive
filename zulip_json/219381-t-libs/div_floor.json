[
    {
        "content": "<p>Would a PR that adds a <code>div_floor</code> method to signed integer types be accepted? It would have the signature <code>const fn div_floor(self, rhs: Self) -&gt; Self</code>. I have found a method like this to be quite useful for implementing certain algorithms.</p>",
        "id": 251099939,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1630205627
    },
    {
        "content": "<p>In that regard, would a method like this need to be unstable to start? I've seen some methods be insta-stable that are trivial, but I've no idea what the criteria are for that, if any even exist.</p>",
        "id": 251099997,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1630205682
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"245610\">@Jacob Pratt</span> floor, or round-towards-zero?</p>",
        "id": 251100085,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630205781
    },
    {
        "content": "<p>Floor. Round towards negative infinity.</p>",
        "id": 251100092,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1630205793
    },
    {
        "content": "<p>Huh. What algorithms does that function particularly help with?</p>",
        "id": 251100098,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630205805
    },
    {
        "content": "<p>There are some with datetime arithmetic. Give me a minute and I can pull up a concrete example.</p>",
        "id": 251100105,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1630205821
    },
    {
        "content": "<p>(Not doubting it, just looking to learn.)</p>",
        "id": 251100135,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630205870
    },
    {
        "content": "<p>I'd be happy to see <code>div_floor</code>; I'd also really like <code>div_round_up</code>.</p>",
        "id": 251100204,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630205934
    },
    {
        "content": "<p>Oh, for sure. First one that pops up from a quick <code>rg</code> is calculating the day of the year (like 1-365) from a week number and weekday: <a href=\"https://github.com/time-rs/time/blob/ffb028e4d653899ecdff748c0198f2300f566ef3/src/date.rs#L146-L147\">https://github.com/time-rs/time/blob/ffb028e4d653899ecdff748c0198f2300f566ef3/src/date.rs#L146-L147</a></p>",
        "id": 251100221,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1630205964
    },
    {
        "content": "<p><code>div_ceil</code> would go alongside it, sure.</p>",
        "id": 251100227,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1630205974
    },
    {
        "content": "<p>Personally I'd like to see a fair amount of <code>num</code> uplifted into <code>core</code>, but that's my preference.</p>",
        "id": 251100237,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1630205998
    },
    {
        "content": "<p>I would as well.</p>",
        "id": 251100361,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630206086
    },
    {
        "content": "<p>I would personally r+ a patch adding both div_floor and div_ceil.</p>",
        "id": 251100365,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630206097
    },
    {
        "content": "<p>(along with tests and docs)</p>",
        "id": 251100375,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630206108
    },
    {
        "content": "<p>I'd also really love to have <code>round_up_to_multiple</code>.</p>",
        "id": 251100436,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630206160
    },
    {
        "content": "<p>Unstable I presume?</p>",
        "id": 251100440,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1630206163
    },
    {
        "content": "<p>Like <code>3.round_up_to_multiple(5) == 5</code>?</p>",
        "id": 251100449,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1630206176
    },
    {
        "content": "<p>(naming aside)</p>",
        "id": 251100454,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1630206184
    },
    {
        "content": "<p>Right. Unstable methods (with feature gate) just need an r+, but stabilization needs an FCP.</p>",
        "id": 251100458,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630206186
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245610\">Jacob Pratt</span> <a href=\"#narrow/stream/219381-t-libs/topic/div_floor/near/251100449\">said</a>:</p>\n<blockquote>\n<p>Like <code>3.round_up_to_multiple(5) == 5</code>?</p>\n</blockquote>\n<p>Yes.</p>",
        "id": 251100460,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630206191
    },
    {
        "content": "<p>Semantically, <code>x.round_up_to_multiple(y) == x.div_ceil(y) * y</code>.</p>",
        "id": 251100473,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630206212
    },
    {
        "content": "<p>Tests need to cover corner cases like <code>0</code>, <code>-1</code>, <code>-T::min</code>, <code>T::max</code>, and <code>y</code>.</p>",
        "id": 251100528,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630206257
    },
    {
        "content": "<p>Should a <code>checked_</code> alternative be provided as well?</p>",
        "id": 251100570,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1630206337
    },
    {
        "content": "<p>What's the use case for rounding to a multiple, anyways?</p>",
        "id": 251100580,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1630206356
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"245610\">@Jacob Pratt</span> \"How many blocks of size N do I need to hold the number of items I have?\"</p>",
        "id": 251100631,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630206390
    },
    {
        "content": "<p>For instance, \"how many 4k blocks does this file take up, given the number of bytes in it?\".</p>",
        "id": 251100639,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630206405
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 251100660,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1630206445
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245610\">Jacob Pratt</span> <a href=\"#narrow/stream/219381-t-libs/topic/div_floor/near/251100570\">said</a>:</p>\n<blockquote>\n<p>Should a <code>checked_</code> alternative be provided as well?</p>\n</blockquote>\n<p>round_up_to_multiple (or whatever it gets called) absolutely needs a checked version.</p>",
        "id": 251100664,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630206452
    },
    {
        "content": "<p>(and not a wrapping version)</p>",
        "id": 251100671,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630206465
    },
    {
        "content": "<p>I <em>think</em> the only way div_ceil can fail is if you give it 0, or if you do <code>(T::MIN).div_ceil(-1)</code>.</p>",
        "id": 251100763,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630206562
    },
    {
        "content": "<p>For my part, I primarily need both of these for unsigned types.</p>",
        "id": 251100830,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630206620
    },
    {
        "content": "<p>In which case I think <code>div_ceil</code> can only fail if given 0, and I think it'd be fine if that's just a panic rather than making a checked version.</p>",
        "id": 251100842,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630206640
    },
    {
        "content": "<p>so let's add:</p>\n<ul>\n<li><code>fn div_floor(self, rhs: Self) -&gt; Self</code></li>\n<li><code>fn div_ceil(self, rhs: Self) -&gt; Self</code></li>\n<li><code>fn round_up_to_multiple(self, rhs: Self) -&gt; Self</code></li>\n<li><code>fn checked_div_floor(self, rhs: Self) -&gt; Option&lt;Self&gt;</code></li>\n<li><code>fn checked_div_ceil(self, rhs: Self) -&gt; Option&lt;Self&gt;</code></li>\n<li><code>fn checked_round_up_to_multiple(self, rhs: Self) -&gt; Option&lt;Self&gt;</code></li>\n</ul>\n<p>? I don't personally need the checked versions, but they have a plausible use case I think. I <em>would</em> like them to be <code>const fn</code>, but this isn't possible (stably) for an explicit <code>panic!</code>.</p>",
        "id": 251100927,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1630206733
    },
    {
        "content": "<p>Question for you: does the signed case actually need to divide <em>by</em> a signed number, or the corresponding unsigned type?</p>",
        "id": 251100964,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630206806
    },
    {
        "content": "<p>Does the denominator need to be negative?</p>",
        "id": 251100968,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630206819
    },
    {
        "content": "<p>My personal use case only ever has a positive denominator, though the macro I'm using as a shim would handle it.</p>",
        "id": 251100974,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1630206834
    },
    {
        "content": "<p>(I don't have a use case for the signed operation, which is why I'm asking; happy to defer to you for the semantics of the signed operation.)</p>",
        "id": 251101017,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630206849
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> for adding all six, if you think None-on-0 is useful. I'd also be happy to <em>not</em> add the checked version of div_ceil or div_floor until someone actually needs it.</p>",
        "id": 251101036,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630206893
    },
    {
        "content": "<p>Also, I'm wondering if there's a better name for <code>round_up_to_multiple</code>.</p>",
        "id": 251101054,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630206918
    },
    {
        "content": "<p>Let's defer until someone asks for it, then</p>",
        "id": 251101058,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1630206923
    },
    {
        "content": "<p>And there <em>definitely</em> is, just not sure what</p>",
        "id": 251101066,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1630206933
    },
    {
        "content": "<p>Maybe <code>.next_multiple_of</code>?</p>",
        "id": 251101073,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1630206945
    },
    {
        "content": "<p>The Linux kernel calls these operations <code>div_round_up</code> and <code>round_up</code>, but the latter isn't actually self-explanatory except in the context of the former.</p>",
        "id": 251101077,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630206951
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245610\">Jacob Pratt</span> <a href=\"#narrow/stream/219381-t-libs/topic/div_floor/near/251101073\">said</a>:</p>\n<blockquote>\n<p>Maybe <code>.next_multiple_of</code>?</p>\n</blockquote>\n<p>Yes!</p>",
        "id": 251101081,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630206955
    },
    {
        "content": "<p>That's perfect.</p>",
        "id": 251101084,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630206959
    },
    {
        "content": "<p>Wait, wait, no.</p>",
        "id": 251101101,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630206963
    },
    {
        "content": "<p><code>4096.next_multiple_of(4096)</code> sounds like it should be 8192, not 4096.</p>",
        "id": 251101134,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630206985
    },
    {
        "content": "<p>hmmm</p>",
        "id": 251101138,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1630206993
    },
    {
        "content": "<p>which all but rules out anything with \"next\" in it</p>",
        "id": 251101148,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1630207017
    },
    {
        "content": "<p>Yeah, other than really verbose things like <code>round_to_next_multiple_of</code>.</p>",
        "id": 251101157,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630207035
    },
    {
        "content": "<p>(which still seems less clear than <code>round_up_...</code> names.)</p>",
        "id": 251101167,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630207054
    },
    {
        "content": "<p>I think <code>div_ceil</code> is definitely the right name for that operation, with precedent from num-integer.</p>",
        "id": 251101204,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630207084
    },
    {
        "content": "<p>I think <code>next_multiple_of</code> is actually fine. Precedent being <code>next_power_of_two</code>, which explicitly says greater than or equal in docs.</p>",
        "id": 251101245,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1630207131
    },
    {
        "content": "<p>num-integer <em>does</em> actually call it <code>num_multiple_of</code>.</p>",
        "id": 251101255,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630207143
    },
    {
        "content": "<p>Which is further precedent.</p>",
        "id": 251101264,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630207157
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> for just copying num-integer here.</p>",
        "id": 251101276,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630207192
    },
    {
        "content": "<p>Alright. I'll write that up. May or may not be tonight.</p>",
        "id": 251101328,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1630207218
    },
    {
        "content": "<p>No rush.</p>",
        "id": 251101330,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630207222
    },
    {
        "content": "<p>But feel free to CC me when it's ready.</p>",
        "id": 251101334,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630207228
    },
    {
        "content": "<p>Sounds good. Thanks for your input!</p>",
        "id": 251101338,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1630207238
    },
    {
        "content": "<p>num-integer is <code>MIT OR Apache-2.0</code> just like core, so feel free to just copy its docs unless there's something to improve.</p>",
        "id": 251101348,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630207256
    },
    {
        "content": "<p>FWIW, my two cents is that integer division should always round to negative infinity by default. That has the nicest mathematical properties, and also happens to be what most processors implement</p>",
        "id": 251101369,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630207303
    },
    {
        "content": "<p>That would be a breaking change to say the least</p>",
        "id": 251101414,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1630207326
    },
    {
        "content": "<p>I'm not sure who came up with round-to-zero integer division (C?) but it has unfortunately spread into most programming languages from there</p>",
        "id": 251101429,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630207347
    },
    {
        "content": "<p>I think C did, and I think it's the less confusing of the two options.</p>",
        "id": 251101452,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630207392
    },
    {
        "content": "<p>Both options are really confusing when it comes to negative numbers.</p>",
        "id": 251101460,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630207416
    },
    {
        "content": "<p>it makes some sense around displaying integers, but it's about as acceptable as 1-based indexing to me</p>",
        "id": 251101464,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630207421
    },
    {
        "content": "<p>They're <em>especially</em> confusing when it comes to dividing by negative numbers.</p>",
        "id": 251101469,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630207433
    },
    {
        "content": "<p>for negative divisors, there isn't much standardization. There is a post I read a while ago about three different conventions and the relative advantages between them</p>",
        "id": 251101535,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630207485
    },
    {
        "content": "<p>I find C's approach clear from a just-truncate perspective, but there's also another reason...</p>",
        "id": 251101637,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630207620
    },
    {
        "content": "<p>One key reason, I think, is that your choice of behavior for / has to be consistent with your choice of behavior for %.</p>",
        "id": 251101718,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630207710
    },
    {
        "content": "<p>well that's just restating the problem; truncation is just rounding (but with what rounding mode?)</p>",
        "id": 251101722,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630207716
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>x = 10, y = 3, x/y = 3, x%y = 1, (x/y)*y = 9, (x/y)*y + x%y = 10\nx = -10, y = 3, x/y = -3, x%y = -1, (x/y)*y = -9, (x/y)*y + x%y = -10\nx = 10, y = -3, x/y = -3, x%y = 1, (x/y)*y = 9, (x/y)*y + x%y = 10\nx = -10, y = -3, x/y = 3, x%y = -1, (x/y)*y = -9, (x/y)*y + x%y = -10\n</code></pre></div>",
        "id": 251101725,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630207720
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/219381-t-libs/topic/div_floor/near/251101722\">said</a>:</p>\n<blockquote>\n<p>well that's just restating the problem; truncation is just rounding (but with what rounding mode?)</p>\n</blockquote>\n<p>\"truncate\" meaning \"drop the fractional part\". If you drop the fractional part of -9.5 you get -9.</p>",
        "id": 251101741,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630207754
    },
    {
        "content": "<p>I contest that this is a weird operation unless you use sign-magnitude representation of a number (and english decimal integers happens to use such a representation)</p>",
        "id": 251101822,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630207825
    },
    {
        "content": "<p>I will not dispute that all of these operations are weird on signed numbers in general.</p>",
        "id": 251101839,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630207854
    },
    {
        "content": "<p>I think it's fair to say \"what's least confusing\" and \"what's most useful\", and weigh both of those in defining the semantics.</p>",
        "id": 251101865,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630207896
    },
    {
        "content": "<p>the natural algorithm for integer division yields round-to-negative-infinity which is why most processors implement it</p>",
        "id": 251101867,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630207900
    },
    {
        "content": "<p>it is also generally more useful unless you are manipulating sign-magnitude numbers and/or preparing numbers for display</p>",
        "id": 251101915,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630207933
    },
    {
        "content": "<p>for example stuff like calculating offsets generally doesn't treat 0 specially</p>",
        "id": 251101926,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630207948
    },
    {
        "content": "<p>So, while I think it's reasonable to debate what makes the most sense, I think it's clear that 1) Rust chose to be C-compatible here, 2) that would break too many things to change, and thus 3) <code>div_floor</code> is not a redundant operation with <code>/</code>.</p>",
        "id": 251102007,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630208048
    },
    {
        "content": "<p>(I split the conversations about div/mod semantics and about ! semantics into separate threads.)</p>",
        "id": 251102620,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630208854
    },
    {
        "content": "<p>I haven't found the original post I was looking for, but I do have a documentation of the three integer division conventions in <a href=\"https://github.com/leanprover-community/lean/commit/e705d8949002481a118003ea5bee2098226dbd22#diff-28df10e2dbc2fa18af1293c5145788c9983f7e892038b18717a1a80862e976b9R201-R248\">this commit here</a> for when I implemented integer division in lean</p>",
        "id": 251102705,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630208951
    },
    {
        "content": "<p>The one called \"T-rounding\" is the division you know from C, and \"E-rounding\" is round to negative infinity</p>",
        "id": 251102775,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630209014
    },
    {
        "content": "<p>Wait, E-rounding is round-to-negative-infinity, or F-rounding is?</p>",
        "id": 251102795,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630209048
    },
    {
        "content": "<p>E rounding and F rounding both round to negative infinity, but they differ for when the second number is negative</p>",
        "id": 251102817,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630209089
    },
    {
        "content": "<p>I'll make up a comparison chart</p>",
        "id": 251102881,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630209141
    },
    {
        "content": "<p>Ah, makes sense.</p>",
        "id": 251102992,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630209277
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">int.div</span> <span class=\"mi\">10</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">int.mod</span> <span class=\"mi\">10</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"c1\">-- (3, 1)</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">int.fdiv</span> <span class=\"mi\">10</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">int.fmod</span> <span class=\"mi\">10</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"c1\">-- (3, 1)</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">int.quot</span> <span class=\"mi\">10</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">int.rem</span> <span class=\"mi\">10</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"c1\">-- (3, 1)</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">int.div</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">int.mod</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"c1\">-- (-4, 2)</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">int.fdiv</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">int.fmod</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"c1\">-- (-4, 2)</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">int.quot</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">int.rem</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"c1\">-- (-3, 1)</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">int.div</span> <span class=\"mi\">10</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"n\">int.mod</span> <span class=\"mi\">10</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"c1\">-- (-3, 1)</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">int.fdiv</span> <span class=\"mi\">10</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"n\">int.fmod</span> <span class=\"mi\">10</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"c1\">-- (-4, -2)</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">int.quot</span> <span class=\"mi\">10</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"n\">int.rem</span> <span class=\"mi\">10</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"c1\">-- (-3, 1)</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">int.div</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"n\">int.mod</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"c1\">-- (4, 2)</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">int.fdiv</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"n\">int.fmod</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"c1\">-- (3, -1)</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">int.quot</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"n\">int.rem</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"c1\">-- (3, -1)</span>\n</code></pre></div>",
        "id": 251103138,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630209453
    },
    {
        "content": "<p>In the first one, the mod is always nonnegative, in the second one we always round the div down, and in the third we always round the div to 0</p>",
        "id": 251103216,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630209518
    },
    {
        "content": "<p>and in all cases the <code>x % y + (x / y) * y = x</code> identity holds unconditionally (which either determines the div from the mod or vice versa)</p>",
        "id": 251103236,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630209547
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"245610\">@Jacob Pratt</span> I really appreciate you being willing to add all these operations (<code>div_ceil</code>, <code>div_floor</code>, and <code>next_multiple_of</code>), not just the specific one you needed. I think it makes sense to add these as a family.</p>",
        "id": 251103401,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630209705
    },
    {
        "content": "<p>as you can see, in lean, without a decisive reason to pick one over the other, they are just all provided as functions. In practice no one cares and just uses the one that happens to be registered as <code>/</code></p>",
        "id": 251103437,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630209724
    },
    {
        "content": "<p>It's not like they're terrible difficult to implement :) may as well help others if I can</p>",
        "id": 251103457,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1630209736
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/219381-t-libs/topic/div_floor/near/251101134\">said</a>:</p>\n<blockquote>\n<p><code>4096.next_multiple_of(4096)</code> sounds like it should be 8192, not 4096.</p>\n</blockquote>\n<p>That’s similar to the stable <a href=\"https://doc.rust-lang.org/std/primitive.u32.html#method.next_power_of_two\"><code>next_power_of_two</code></a> which “Returns the smallest power of two greater than <strong>or equal</strong> to <code>self</code>.”</p>",
        "id": 251107478,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1630214865
    },
    {
        "content": "<p>already mentioned above :)</p>",
        "id": 251107691,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1630215117
    },
    {
        "content": "<p>Side note, but feature name? I was thinking <code>div_floor_ceil</code> and something separate for <code>next_multiple_of</code></p>",
        "id": 251107741,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1630215148
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245610\">Jacob Pratt</span> <a href=\"#narrow/stream/219381-t-libs/topic/div_floor/near/251100221\">said</a>:</p>\n<blockquote>\n<p>Oh, for sure. First one that pops up from a quick <code>rg</code> is calculating the day of the year (like 1-365) from a week number and weekday: <a href=\"https://github.com/time-rs/time/blob/ffb028e4d653899ecdff748c0198f2300f566ef3/src/date.rs#L146-L147\">https://github.com/time-rs/time/blob/ffb028e4d653899ecdff748c0198f2300f566ef3/src/date.rs#L146-L147</a></p>\n</blockquote>\n<p>Silly question: would <code>div_euclid</code> not work for it?</p>",
        "id": 251145686,
        "sender_full_name": "scottmcm",
        "timestamp": 1630257714
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"245610\">@Jacob Pratt</span> I think you can use the same feature name for all three; we can always split them if we want a partial stabilization.</p>",
        "id": 251145750,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630257764
    },
    {
        "content": "<p>more_div_methods or similar?</p>",
        "id": 251145767,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630257784
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245610\">Jacob Pratt</span> <a href=\"#narrow/stream/219381-t-libs/topic/div_floor/near/251100927\">said</a>:</p>\n<blockquote>\n<p>? I don't personally need the checked versions, but they have a plausible use case I think. I <em>would</em> like them to be <code>const fn</code>, but this isn't possible (stably) for an explicit <code>panic!</code>.</p>\n</blockquote>\n<p>I would generally say that either it should just offer <code>foo</code>, or it should have the full slate of <code>wrapping_foo</code>, <code>checked_foo</code>, and <code>saturating_foo</code> too.</p>",
        "id": 251145893,
        "sender_full_name": "scottmcm",
        "timestamp": 1630257930
    },
    {
        "content": "<p>Ah right, the E in E-rounding is named for euclid, I forgot</p>",
        "id": 251167400,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630281087
    },
    {
        "content": "<p>and I guess the others are \"floor\" and \"truncate\"</p>",
        "id": 251167468,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630281132
    },
    {
        "content": "<p><code>div_euclid</code> actually would work. Guess I never looked at the euclidean methods other than <code>rem_euclid</code>.</p>\n<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> I was hoping for a <em>slightly</em> more descriptive feature name, hence my question.</p>",
        "id": 251174219,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1630288527
    },
    {
        "content": "<p>I can still submit the PR if it's desired, though.</p>",
        "id": 251174235,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1630288561
    },
    {
        "content": "<p>nobody needs the feature name after stabilization, so they're mostly just temporary oddities in the long term of it.</p>",
        "id": 251175387,
        "sender_full_name": "Lokathor",
        "timestamp": 1630289721
    },
    {
        "content": "<p>Oh I know. But it's still nice to have in the meantime <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 251175727,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1630290075
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"245610\">@Jacob Pratt</span> How about <code>div_roundings</code>?</p>",
        "id": 251177599,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630292300
    },
    {
        "content": "<p>Works for me. Better than just \"more methods\" haha</p>",
        "id": 251177611,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1630292318
    },
    {
        "content": "<p>:)</p>",
        "id": 251177870,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630292671
    },
    {
        "content": "<p>Or <code>int_roundings</code>.</p>",
        "id": 251177875,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630292692
    },
    {
        "content": "<p>(Since one of them isn't div.)</p>",
        "id": 251177884,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630292707
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/219381-t-libs/topic/div_floor/near/251101348\">said</a>:</p>\n<blockquote>\n<p>num-integer is <code>MIT OR Apache-2.0</code> just like core, so feel free to just copy its docs unless there's something to improve.</p>\n</blockquote>\n<p>I'll take those improvements back too, if they still apply...</p>",
        "id": 251263995,
        "sender_full_name": "cuviper",
        "timestamp": 1630344589
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> Sure. Though, long-term, if those functions get added to core then num-integer can just depend on them.</p>",
        "id": 251302482,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630361307
    },
    {
        "content": "<p>in implementation, yes, but I can't re-export the docs</p>",
        "id": 251302617,
        "sender_full_name": "cuviper",
        "timestamp": 1630361388
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> Are you aware that the stated invariant for <code>next_multiple_of</code> is not always true? Calling <code>iX::MIN.next_multiple_of(&amp;-1)</code> will panic when it should return <code>iX::MIN</code>. This <em>is not</em> the case with <code>iX::MIN.prev_multiple_of(&amp;1)</code>. From quick testing this is the only edge case.</p>",
        "id": 251511060,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1630478960
    },
    {
        "content": "<p>Only noticing this because my (not yet pushed) implementation returns <code>None</code> in that case when it reasonably should not.</p>",
        "id": 251511096,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1630478993
    },
    {
        "content": "<p>I haven't run a benchmark, but adding <code>if other == -1 { return Some(self); }</code> at the top of the method (ignoring the <code>Some</code> for your crate) actually generates less assembly.</p>",
        "id": 251511373,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1630479155
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"245610\">@Jacob Pratt</span> I'd call that a bug -- care to file an issue and/or pull request?</p>",
        "id": 251609570,
        "sender_full_name": "cuviper",
        "timestamp": 1630522046
    },
    {
        "content": "<p>Will do. Just finishing up the PR for rust-lang/rust. Took me longer than I'd like to admit to realize that I used the wrong variable in one place <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 251650010,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1630543101
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> PR created: <a href=\"https://github.com/rust-lang/rust/issues/88582\">#88582</a></p>",
        "id": 251668061,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1630560615
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"245610\">@Jacob Pratt</span> Looking good. Is there a reason div_floor and div_ceil aren't present on unsigned integers?</p>",
        "id": 251668306,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630560946
    },
    {
        "content": "<p>(I specifically would like to use div_ceil on unsigned integers.)</p>",
        "id": 251668354,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630560964
    },
    {
        "content": "<p>Whoops. Was more focused on <code>div_floor</code>, which is the same as regular division on unsigned ints. Didn't even consider <code>div_ceil</code> which of course is not. I can add it.</p>",
        "id": 251668393,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1630561037
    },
    {
        "content": "<p>I can add <code>div_floor</code> if desired, but it seems a bit superfluous</p>",
        "id": 251668412,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1630561073
    },
    {
        "content": "<p>Eh, just looking and things like <code>div_euclid</code> exist despite being identical, so precedence I guess</p>",
        "id": 251668576,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1630561225
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> Updated with the added impls.</p>",
        "id": 251669427,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1630562065
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"245610\">@Jacob Pratt</span> Looking now.</p>",
        "id": 251675617,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630567329
    },
    {
        "content": "<p>Yeah, existing for consistency is good.</p>",
        "id": 251742054,
        "sender_full_name": "Lokathor",
        "timestamp": 1630599519
    },
    {
        "content": "<p>I included it right after I noticed that similar methods existed even when identical. PR is just waiting on bors now, then we're set for nightly.</p>",
        "id": 251784351,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1630615861
    },
    {
        "content": "<p>Thanks again!</p>",
        "id": 251820822,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630642904
    },
    {
        "content": "<p>Not an issue! It's (partially) something I want so I may as well make it happen.</p>",
        "id": 251821068,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1630643138
    },
    {
        "content": "<p>This actually broke <code>num-bigint</code> <a href=\"https://github.com/rust-lang/rust/pull/88582#issuecomment-912650095\">https://github.com/rust-lang/rust/pull/88582#issuecomment-912650095</a></p>",
        "id": 251904569,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1630685396
    },
    {
        "content": "<p>yeah, <a href=\"https://github.com/rust-num/num-bigint/issues/218\">https://github.com/rust-num/num-bigint/issues/218</a></p>",
        "id": 251906739,
        "sender_full_name": "cuviper",
        "timestamp": 1630686275
    },
    {
        "content": "<p>but I'll fix it</p>",
        "id": 251906746,
        "sender_full_name": "cuviper",
        "timestamp": 1630686278
    },
    {
        "content": "<p>wasn't there something in the compiler to avoid unstable items?</p>",
        "id": 251907420,
        "sender_full_name": "cuviper",
        "timestamp": 1630686586
    },
    {
        "content": "<p>but still, eventually it would stabilize and the arguments don't match, so it has to be fixed regardless</p>",
        "id": 251907511,
        "sender_full_name": "cuviper",
        "timestamp": 1630686607
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"138448\">cuviper</span> <a href=\"#narrow/stream/219381-t-libs/topic/div_floor/near/251907420\">said</a>:</p>\n<blockquote>\n<p>wasn't there something in the compiler to avoid unstable items?</p>\n</blockquote>\n<p>I thought there was supposed to be, yes.</p>",
        "id": 251909890,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630687733
    },
    {
        "content": "<p>maybe that was only with trait methods, like unstable <code>Iterator</code> vs <code>Itertools</code></p>",
        "id": 251910907,
        "sender_full_name": "cuviper",
        "timestamp": 1630688161
    },
    {
        "content": "<p>There is a check in rustc_typeck/src/check/method/probe.rs</p>",
        "id": 251911882,
        "sender_full_name": "Gary Guo",
        "timestamp": 1630688555
    },
    {
        "content": "<p>it might also be that the inherent method is on <code>self</code>, while <code>Integer</code>'s method is on <code>&amp;self</code></p>",
        "id": 251912452,
        "sender_full_name": "cuviper",
        "timestamp": 1630688814
    },
    {
        "content": "<p>Obviously I understand that it's \"acceptable breakage\" and have stated as such in issues, but might this be worth reverting before it hits the stable release? That way checks like those mentioned could be implemented. A test could be added for that situation.</p>",
        "id": 251953056,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1630710362
    },
    {
        "content": "<p>Of course <code>num-bigint</code> should make the changes, but that's a separate issue.</p>",
        "id": 251953099,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1630710379
    },
    {
        "content": "<p>I've already published <code>num-bigint</code> 0.4.2 and 0.3.3</p>",
        "id": 251954511,
        "sender_full_name": "cuviper",
        "timestamp": 1630711529
    },
    {
        "content": "<p>but of course, similar breakage could exist elsewhere</p>",
        "id": 251954586,
        "sender_full_name": "cuviper",
        "timestamp": 1630711572
    },
    {
        "content": "<p>Ah, perfect. Was just about to say that ^^</p>",
        "id": 251954594,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1630711582
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> Now that <a href=\"https://github.com/rust-lang/rust/issues/90329\">#90329</a> has been merged, <a href=\"https://github.com/rust-lang/rust/issues/88971\">#88971</a> can be reverted, correct?</p>",
        "id": 262375216,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1637613930
    },
    {
        "content": "<p>I <em>believe</em> so, yes.</p>",
        "id": 262375264,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1637613958
    },
    {
        "content": "<p>Probably worth a crater run on the revert PR, though.</p>",
        "id": 262375317,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1637613970
    },
    {
        "content": "<p>I'll prepare a PR to revert in that case.</p>",
        "id": 262375333,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1637613986
    },
    {
        "content": "<p>Let's make sure that <a href=\"https://github.com/rust-lang/rust/issues/90329\">#90329</a> does what we expect it to in this context.</p>",
        "id": 262375338,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1637613987
    },
    {
        "content": "<p>Just did <code>git revert 3ece63b64e192146fcdd1724e25856a93d7626aa</code> without conflicts. It's PR <a href=\"https://github.com/rust-lang/rust/issues/91141\">#91141</a>.</p>",
        "id": 262375809,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1637614233
    },
    {
        "content": "<p>Won't that just delay the breakage until those methods get stabilized?</p>",
        "id": 262376019,
        "sender_full_name": "The 8472",
        "timestamp": 1637614338
    },
    {
        "content": "<p>Yes? But we may as well have them under the appropriate name while unstable.</p>",
        "id": 262376171,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1637614428
    },
    {
        "content": "<p>The breakage has already been fixed in multiple places; it's just a matter of time for people to upgrade their deps now.</p>",
        "id": 262376246,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1637614448
    },
    {
        "content": "<blockquote>\n<div class=\"codehilite\"><pre><span></span><code>        // Emit a lint if there are unstable candidates alongside the stable ones.\n       //\n</code></pre></div>\n\n</blockquote>\n<p>Ah, this should cover it.</p>",
        "id": 262376738,
        "sender_full_name": "The 8472",
        "timestamp": 1637614728
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/219381-t-libs/topic/div_floor/near/262375338\">said</a>:</p>\n<blockquote>\n<p>Let's make sure that <a href=\"https://github.com/rust-lang/rust/issues/90329\">#90329</a> does what we expect it to in this context.</p>\n</blockquote>\n<p>I hope it does :)</p>",
        "id": 262398879,
        "sender_full_name": "Gary Guo",
        "timestamp": 1637628565
    },
    {
        "content": "<p>We'll find out once a crater run is queued. I'm sure your work is quality, though!</p>",
        "id": 262399835,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1637629161
    }
]