[
    {
        "content": "<p>Why these functions have pretty weak guarantees about their return value?<br>\nIt's kinda weird, because the actual implementation does what everyone expects<br>\n<a href=\"https://github.com/Lokathor/bytemuck/issues/19\">An example issue that it causes</a></p>",
        "id": 234829551,
        "sender_full_name": "Soveu",
        "timestamp": 1618568815
    },
    {
        "content": "<p>slice::align_to</p>\n<div class=\"codehilite\"><pre><span></span><code>The method may make the middle slice the greatest length possible for a given type and input slice,\nbut only your algorithm’s performance should depend on that, not its correctness.\nIt is permissible for all of the input data to be returned as the prefix or suffix slice.\n</code></pre></div>\n<p>ptr::align_offset</p>\n<div class=\"codehilite\"><pre><span></span><code>It is permissible for the implementation to always return usize::MAX.\nOnly your algorithm’s performance can depend on getting a usable offset here,\nnot its correctness.\n</code></pre></div>",
        "id": 234829772,
        "sender_full_name": "Soveu",
        "timestamp": 1618568906
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"124288\">@oli</span></p>",
        "id": 234830974,
        "sender_full_name": "Mara",
        "timestamp": 1618569474
    },
    {
        "content": "<p>This is so that const eval can actually interpret function calls to these. We may find other avenues for having different code for CTFE and runtime, at which point we would never need these to be const fn, and thus could change these rules. I would prefer not to though, as it seems better to have the same code for runtime as for ctfe</p>",
        "id": 234831773,
        "sender_full_name": "oli",
        "timestamp": 1618569873
    },
    {
        "content": "<p>The issue you linked is just a historical miri artifact</p>",
        "id": 234832084,
        "sender_full_name": "oli",
        "timestamp": 1618570048
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span></p>",
        "id": 234832108,
        "sender_full_name": "oli",
        "timestamp": 1618570067
    },
    {
        "content": "<p>The PR that introduced that comment is <a href=\"https://github.com/rust-lang/rust/issues/63295\">#63295</a>, but there's no reason listed there. It would be nice to add a comment for those who end up there after a git blame</p>",
        "id": 234832472,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1618570257
    },
    {
        "content": "<p>Also, isn't that PR a breaking change? Before unsafe code could have relied on that function always returning the right offset, after it becomes unsound, so it technically \"broke\" some code.</p>",
        "id": 234832648,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1618570344
    },
    {
        "content": "<p>The PR only documented the behaviour, the implementation was always allowed to do that. That is the only reason the function was introduced!</p>",
        "id": 234834618,
        "sender_full_name": "oli",
        "timestamp": 1618571331
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"328907\">@Soveu</span> <a href=\"https://github.com/rust-lang/rust/issues/62420\">#62420</a> goes into more detail</p>",
        "id": 234903812,
        "sender_full_name": "RalfJ",
        "timestamp": 1618599248
    }
]