[
    {
        "content": "<p>Hey, am I right that <code>PartialOrd</code> for enums cannot be implemented in stable Rust today? I was working on a <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/10529\">codegen impl for Rust-Analyzer</a> last week, but it turns out the code we're generating is broken. Now that I'm looking closer into it, it seems like it may not be possible at all?</p>\n<p>Here's a playground with what I'm referring to:  <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=c7508bdba6f4bf0b20234dd54c93dfb0\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=c7508bdba6f4bf0b20234dd54c93dfb0</a></p>",
        "id": 258006098,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1634552353
    },
    {
        "content": "<p>It seems like the obvious fix would be to <code>impl PartialOrd for Discriminant</code> (<a href=\"https://doc.rust-lang.org/std/mem/struct.Discriminant.html\">docs</a>). But <a href=\"https://doc.rust-lang.org/std/marker/trait.DiscriminantKind.html#associatedtype.Discriminant\"><code>std::marker::Discriminant</code></a> (used via (<a href=\"https://doc.rust-lang.org/core/intrinsics/fn.discriminant_value.html\"><code>intrinsics::discriminant_value</code></a>) does not guarantee <code>PartialOrd</code>, which makes me unsure about how viable that is.</p>",
        "id": 258006490,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1634552563
    },
    {
        "content": "<p>tldr of what I'm talking about:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// `x` implements `PartialOrd` here, but this only works on unstable Rust.</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">intrinsics</span>::<span class=\"n\">discriminant_value</span><span class=\"p\">(</span><span class=\"o\">&amp;*</span><span class=\"bp\">self</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"c1\">// `y` does not implement `PartialOrd`, but this works on stable Rust.</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">mem</span>::<span class=\"n\">discriminant</span><span class=\"p\">(</span><span class=\"o\">&amp;*</span><span class=\"bp\">self</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 258007168,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1634552933
    },
    {
        "content": "<p>As Discriminant is meant to be opaque, it seems strange to expose its ordering. It feels like <a href=\"https://github.com/rust-lang/rust/pull/81642\">https://github.com/rust-lang/rust/pull/81642</a> would be something more firm to build on? Ordering explicitly by the explicit numeric discriminant</p>",
        "id": 258007367,
        "sender_full_name": "Daniel Wagner-Hall",
        "timestamp": 1634553042
    },
    {
        "content": "<p>you can hash the discriminant and sort by that <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span> . You can implement a \"nop-hash\" to make this a zero cost operation</p>",
        "id": 258009491,
        "sender_full_name": "oli",
        "timestamp": 1634554226
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/219381-t-libs/topic/impl.20PartialOrd.20for.20enums.20in.20stable.20Rust/near/258009491\">said</a>:</p>\n<blockquote>\n<p>you can hash the discriminant and sort by that <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span> . You can implement a \"nop-hash\" to make this a zero cost operation</p>\n</blockquote>\n<p>lmao; not sure if I'd want to codegen this directly into unsuspecting user's source code :P</p>",
        "id": 258009981,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1634554525
    },
    {
        "content": "<p>oooh, I see, sorry, I kind of assumed you were writing a custom derive crate XD</p>",
        "id": 258010871,
        "sender_full_name": "oli",
        "timestamp": 1634554957
    },
    {
        "content": "<p>is this only for enums with field-less variants?</p>",
        "id": 258011066,
        "sender_full_name": "oli",
        "timestamp": 1634555061
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/219381-t-libs/topic/impl.20PartialOrd.20for.20enums.20in.20stable.20Rust/near/258011066\">said</a>:</p>\n<blockquote>\n<p>is this only for enums with field-less variants?</p>\n</blockquote>\n<p>yep, exactly</p>",
        "id": 258013010,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1634556200
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/219381-t-libs/topic/impl.20PartialOrd.20for.20enums.20in.20stable.20Rust/near/258009491\">said</a>:</p>\n<blockquote>\n<p>you can hash the discriminant and sort by that <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span> . You can implement a \"nop-hash\" to make this a zero cost operation</p>\n</blockquote>\n<p>I wouldn't rely on that.</p>",
        "id": 258018571,
        "sender_full_name": "Connor Horman",
        "timestamp": 1634559207
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211722\">Yoshua Wuyts [he/they]</span> <a href=\"#narrow/stream/219381-t-libs/topic/impl.20PartialOrd.20for.20enums.20in.20stable.20Rust/near/258013010\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/219381-t-libs/topic/impl.20PartialOrd.20for.20enums.20in.20stable.20Rust/near/258011066\">said</a>:</p>\n<blockquote>\n<p>is this only for enums with field-less variants?</p>\n</blockquote>\n<p>yep, exactly</p>\n</blockquote>\n<p>in that case, can't we always use an <code>as</code> cast to get the integer value? Not necessarily as efficient as the discriminant fetching, but close</p>",
        "id": 258024222,
        "sender_full_name": "oli",
        "timestamp": 1634561868
    },
    {
        "content": "<p>ohhh, yes maybe? -- hadn't considered that.</p>",
        "id": 258024374,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1634561940
    },
    {
        "content": "<p>probably converting to usize should do the trick?</p>",
        "id": 258024446,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1634561978
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> hmm, not sure how to make that work tho. If I try to cast <code>Discriminant</code> I get \"attempting to cast non-primitive\". If I try and cast self/other I get:</p>\n<div class=\"codehilite\"><pre><span></span><code>   Compiling playground v0.0.1 (/playground)\nerror[E0606]: casting `&amp;Bar` as `usize` is invalid\n  --&gt; src/lib.rs:55:29\n   |\n55 |             let __self_vi = self as usize;\n   |                             ^^^^^^^^^^^^^\n   |\n   = help: cast through a raw pointer first\n</code></pre></div>",
        "id": 258024788,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1634562113
    },
    {
        "content": "<p>you need to deref self, as you got a <code>&amp;Self</code></p>",
        "id": 258024893,
        "sender_full_name": "oli",
        "timestamp": 1634562143
    },
    {
        "content": "<p>aaw</p>",
        "id": 258025037,
        "sender_full_name": "oli",
        "timestamp": 1634562222
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>   Compiling playground v0.0.1 (/playground)\nerror[E0507]: cannot move out of `*self` which is behind a shared reference\n  --&gt; src/lib.rs:55:29\n   |\n55 |             let __self_vi = (*self) as usize;\n   |                             ^^^^^^^ move occurs because `*self` has type `Bar`, which does not implement the `Copy` trait\n</code></pre></div>\n<p>Feel like I'm still doing something wrong</p>",
        "id": 258025042,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1634562226
    },
    {
        "content": "<p>can't move <span aria-label=\"frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"frown\">:frown:</span></p>",
        "id": 258025043,
        "sender_full_name": "oli",
        "timestamp": 1634562226
    },
    {
        "content": "<p>ya</p>",
        "id": 258025051,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1634562231
    },
    {
        "content": "<p>yea</p>",
        "id": 258025055,
        "sender_full_name": "oli",
        "timestamp": 1634562233
    },
    {
        "content": "<p>I hoped these casts were non-consuming</p>",
        "id": 258025214,
        "sender_full_name": "oli",
        "timestamp": 1634562292
    },
    {
        "content": "<p>eep :(</p>",
        "id": 258025529,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1634562417
    },
    {
        "content": "<p>so... maybe suggest making the enum Copy at the same time?</p>",
        "id": 258025741,
        "sender_full_name": "oli",
        "timestamp": 1634562489
    },
    {
        "content": "<p>Why couldn't the generated code use match?</p>",
        "id": 258035742,
        "sender_full_name": "Gary Guo",
        "timestamp": 1634566678
    },
    {
        "content": "<p>that would give you a n^2 amount of match arms I think?</p>",
        "id": 258052820,
        "sender_full_name": "oli",
        "timestamp": 1634572940
    },
    {
        "content": "<p>you could use one match per enum to produce a numerical value and then compare those</p>",
        "id": 258054470,
        "sender_full_name": "The 8472",
        "timestamp": 1634573541
    },
    {
        "content": "<p>I think for a derive that would be ok, but for code that will end up committed... idk, feels kinda noisy</p>",
        "id": 258056061,
        "sender_full_name": "oli",
        "timestamp": 1634574073
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/219381-t-libs/topic/impl.20PartialOrd.20for.20enums.20in.20stable.20Rust/near/258025741\">said</a>:</p>\n<blockquote>\n<p>so... maybe suggest making the enum Copy at the same time?</p>\n</blockquote>\n<p>Definitely seems weird for a field-less enum to not be <code>Copy</code>, yeah.</p>",
        "id": 258100375,
        "sender_full_name": "scottmcm",
        "timestamp": 1634591234
    },
    {
        "content": "<p>(TBH, I wish that the normal <code>PartialOrd</code> was <code>None</code> for different variants.  It always seems so arbitrary that, say, <code>LlvmInlineAsm</code> &lt; <code>CopyNonOverlapping</code>.  And that would make the codegen way simpler, too.)</p>",
        "id": 258101506,
        "sender_full_name": "scottmcm",
        "timestamp": 1634591673
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"336670\">Daniel Wagner-Hall</span> <a href=\"#narrow/stream/219381-t-libs/topic/impl.20PartialOrd.20for.20enums.20in.20stable.20Rust/near/258007367\">said</a>:</p>\n<blockquote>\n<p>As Discriminant is meant to be opaque, it seems strange to expose its ordering.</p>\n</blockquote>\n<p><span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span> Especially since you can call it on other people's enums, and I wouldn't want to make it a breaking change for people to reorder their enums (if they haven't semi-explicitly exposed that order already somehow).</p>",
        "id": 258101677,
        "sender_full_name": "scottmcm",
        "timestamp": 1634591755
    }
]