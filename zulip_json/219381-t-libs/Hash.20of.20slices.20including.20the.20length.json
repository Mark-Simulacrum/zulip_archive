[
    {
        "content": "<p>I'd made &lt;<a href=\"https://github.com/rust-lang/rust/pull/86131\">https://github.com/rust-lang/rust/pull/86131</a>&gt; to stop hashing the length for arrays, but was reminded that that's not allowed because of <code>Borrow</code>.</p>\n<p>That made me wonder how useful it is to have the length included in the hashes for slices either.  I guess it's to avoid length extension attacks?</p>",
        "id": 241937523,
        "sender_full_name": "scottmcm",
        "timestamp": 1623165935
    },
    {
        "content": "<p>doesn't the hash function itself record the length?</p>",
        "id": 241937735,
        "sender_full_name": "The 8472",
        "timestamp": 1623166001
    },
    {
        "content": "<p>I guess it makes there be a difference between hashing <code>(vec![1], vec![2, 3, 4])</code> and <code>(vec![1, 2], vec![3, 4])</code>.</p>",
        "id": 241937903,
        "sender_full_name": "scottmcm",
        "timestamp": 1623166065
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330154\">The 8472</span> <a href=\"#narrow/stream/219381-t-libs/topic/Hash.20of.20slices.20including.20the.20length/near/241937735\">said</a>:</p>\n<blockquote>\n<p>doesn't the hash function itself record the length?</p>\n</blockquote>\n<p>I'm not sure what you're asking here.  The implementation of <code>Hash</code> for <code>[T]</code> hashes the length of the slice, then the elements.</p>",
        "id": 241938046,
        "sender_full_name": "scottmcm",
        "timestamp": 1623166121
    },
    {
        "content": "<p>hashing just a u8 would be enough for that, though, right? Essentially a null delimiter. Is there a reason we need the length specifically?</p>",
        "id": 241938100,
        "sender_full_name": "simulacrum",
        "timestamp": 1623166142
    },
    {
        "content": "<p>(it may be more efficient to hash a single byte)</p>",
        "id": 241938132,
        "sender_full_name": "simulacrum",
        "timestamp": 1623166153
    },
    {
        "content": "<blockquote>\n<p>I'm not sure what you're asking here.</p>\n</blockquote>\n<p>Well, at least in cryptography preventing length extension attacks usually is implemented in the hash function itself. But yeah, if the structure is relevant and not just the raw bytes being hashed then that's different.</p>",
        "id": 241938702,
        "sender_full_name": "The 8472",
        "timestamp": 1623166341
    },
    {
        "content": "<p>reminds me of <a href=\"https://github.com/rust-lang/rust/issues/80303\">#80303</a></p>",
        "id": 241940568,
        "sender_full_name": "cuviper",
        "timestamp": 1623167088
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330154\">The 8472</span> <a href=\"#narrow/stream/219381-t-libs/topic/Hash.20of.20slices.20including.20the.20length/near/241938702\">said</a>:</p>\n<blockquote>\n<p>Well, at least in cryptography preventing length extension attacks usually is implemented in the hash function itself. But yeah, if the structure is relevant and not just the raw bytes being hashed then that's different.</p>\n</blockquote>\n<p>Ah, I follow now.  I think it's up to the specific <code>Hasher</code> to decide if it wants to hash the total length at the end; I don't know if <code>DefaultHaser</code> or any of the others in common use actually do.</p>",
        "id": 241943700,
        "sender_full_name": "scottmcm",
        "timestamp": 1623168352
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/219381-t-libs/topic/Hash.20of.20slices.20including.20the.20length/near/241937903\">said</a>:</p>\n<blockquote>\n<p>I guess it makes there be a difference between hashing <code>(vec![1], vec![2, 3, 4])</code> and <code>(vec![1, 2], vec![3, 4])</code>.</p>\n</blockquote>\n<p>As well as a difference between hashing <code>vec![1, 2, 3]</code> and hashing <code>(vec![1, 2], 3)</code>.</p>",
        "id": 241961514,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1623175536
    },
    {
        "content": "<p>Well, if heterogeneous is allowed there's still the <code>(9, [3])</code> and <code>(9, 1, 3)</code>  kinds of conflict.</p>",
        "id": 241963517,
        "sender_full_name": "scottmcm",
        "timestamp": 1623176378
    },
    {
        "content": "<p>Or even just <code>(1, (2, 3))</code> vs <code>((1, 2), 3)</code>.</p>",
        "id": 241963782,
        "sender_full_name": "scottmcm",
        "timestamp": 1623176492
    },
    {
        "content": "<p>those are different types though. the homogenous two-vecs-next-to-eachother is the motivation for the length prefix iirc</p>",
        "id": 241964156,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1623176659
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/219381-t-libs/topic/Hash.20of.20slices.20including.20the.20length/near/241938100\">said</a>:</p>\n<blockquote>\n<p>hashing just a u8 would be enough for that, though, right? Essentially a null delimiter. Is there a reason we need the length specifically?</p>\n</blockquote>\n<p>That would cause clashes between <code>([1u8], [0u8, 2u8])</code> and <code>([1u8, 0u8], [2u8])</code></p>",
        "id": 241987134,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623186798
    },
    {
        "content": "<p>Spitballing: It could LEB128, or something, the length to reduce the number of bytes needing hashing.  That'd help the <code>[u8; 3]</code> case somewhat, though it's unclear that it'd be worth it overall.</p>",
        "id": 242024229,
        "sender_full_name": "scottmcm",
        "timestamp": 1623221990
    },
    {
        "content": "<p>for <code>[T; N]</code> the length shouldn't need to be hashed. Only for <code>[T]</code> is it necessary.</p>",
        "id": 242026379,
        "sender_full_name": "bjorn3",
        "timestamp": 1623223893
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> That's what I tried to do first, but was reminded that it does have to be hashed to match slices because of &lt;<a href=\"https://doc.rust-lang.org/std/borrow/trait.Borrow.html#impl-Borrow%3C%5BT%5D%3E-1\">https://doc.rust-lang.org/std/borrow/trait.Borrow.html#impl-Borrow%3C%5BT%5D%3E-1</a>&gt;.</p>",
        "id": 242030668,
        "sender_full_name": "scottmcm",
        "timestamp": 1623226753
    },
    {
        "content": "<p>Ah, I see.</p>",
        "id": 242038064,
        "sender_full_name": "bjorn3",
        "timestamp": 1623230861
    }
]