[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">SpecFromElem</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[inline]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">from_elem</span><span class=\"p\">(</span><span class=\"n\">elem</span>: <span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">n</span>: <span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">elem</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">buf</span>: <span class=\"nc\">RawVec</span>::<span class=\"n\">with_capacity_zeroed</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">len</span>: <span class=\"nc\">n</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Vec</span>::<span class=\"n\">with_capacity</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">ptr</span>::<span class=\"n\">write_bytes</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">as_mut_ptr</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">elem</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">set_len</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">v</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>I saw this is only applicable for <code>u8</code> but not for other integers like <code>u16</code> and friends in <code>src/liballoc/raw_vec.rs</code>, is there a reason for it?</p>",
        "id": 201274053,
        "sender_full_name": "pickfire",
        "timestamp": 1592489942
    },
    {
        "content": "<p><code>u8</code> is nice because it can use the equivalent of <code>memset</code></p>",
        "id": 201292585,
        "sender_full_name": "cuviper",
        "timestamp": 1592497790
    },
    {
        "content": "<p>I guess <code>i8</code> could cast into the same path</p>",
        "id": 201292656,
        "sender_full_name": "cuviper",
        "timestamp": 1592497807
    },
    {
        "content": "<p>other integers can only do this when they're repeating the same byte - 0, 0xFFFF, 0xABAB, ...</p>",
        "id": 201292820,
        "sender_full_name": "cuviper",
        "timestamp": 1592497892
    },
    {
        "content": "<p>u16 could specialize into something that does <code>rep stosw</code>.</p>",
        "id": 201296513,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1592499440
    },
    {
        "content": "<p>And likewise u32 and <code>rep stosd</code>.</p>",
        "id": 201296557,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1592499460
    },
    {
        "content": "<p>And u64 and <code>rep stosq</code>.</p>",
        "id": 201296694,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1592499505
    },
    {
        "content": "<p>So I can add one for <code>i8</code>?</p>",
        "id": 201455271,
        "sender_full_name": "pickfire",
        "timestamp": 1592615599
    },
    {
        "content": "<p>Also, how do I reproduce <code>rep stosw</code>? Do I add anything? Do I still need to check for the same byte?</p>",
        "id": 201455347,
        "sender_full_name": "pickfire",
        "timestamp": 1592615726
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"225422\">@pickfire</span> I don't know offhand how to get the compiler to generate a <code>rep stosw</code> (or <code>d</code> or <code>q</code>). (And in any case, it would need benchmarking to ensure that it's actually faster.)</p>",
        "id": 201462057,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1592628727
    },
    {
        "content": "<p>Do we need to use <code>asm!</code> for this?</p>",
        "id": 201577448,
        "sender_full_name": "pickfire",
        "timestamp": 1592813227
    },
    {
        "content": "<p>I don't know if that would be a performance win, though it might be worth benchmarking (via a cfg-guarded specialization).</p>",
        "id": 201627630,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1592842834
    },
    {
        "content": "<p>cfg-guarded specialization?</p>",
        "id": 201696670,
        "sender_full_name": "pickfire",
        "timestamp": 1592898890
    },
    {
        "content": "<p>You could only do the specialization on a platform where the assembly is valid.</p>",
        "id": 201746493,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1592928404
    },
    {
        "content": "<p>Maybe I should just add a TODO there so others could work on it later on, I wouldn't be looking into that.</p>",
        "id": 201846004,
        "sender_full_name": "pickfire",
        "timestamp": 1593004963
    }
]