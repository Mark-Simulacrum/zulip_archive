[
    {
        "content": "<p>I was looking at this code that I wrote in the past:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">from_residual</span><span class=\"p\">(</span><span class=\"n\">residual</span>: <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">convert</span>::<span class=\"n\">Infallible</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">E</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">residual</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"nb\">From</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>And thinking that perhaps I should rewrite it to</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">from_residual</span><span class=\"p\">(</span><span class=\"n\">residual</span>: <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">convert</span>::<span class=\"n\">Infallible</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">E</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">residual</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"nb\">From</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>But that made me think that I could go even further to</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">from_residual</span><span class=\"p\">(</span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span>: <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">convert</span>::<span class=\"n\">Infallible</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">E</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"nb\">From</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Do we have any style conventions for which of these three options are the best way to write this in the library?</p>\n<p>(It's a trait impl, so the pattern in the parameter is potentially tolerable here in a way that it wouldn't be in something that'll show more directly in rustdoc.)</p>",
        "id": 239654519,
        "sender_full_name": "scottmcm",
        "timestamp": 1621542622
    },
    {
        "content": "<p>I always struggle a bit with uninhabited patterns being just... not there, when skimming, but I don't think we have any guidelines yet</p>",
        "id": 239655246,
        "sender_full_name": "simulacrum",
        "timestamp": 1621542897
    },
    {
        "content": "<p>Option 3 seems like it most clearly communicates that there's only one form though, for the purposes of the function.</p>",
        "id": 239655304,
        "sender_full_name": "simulacrum",
        "timestamp": 1621542920
    },
    {
        "content": "<p>I usually don't care for patterns in function headers, but for the specific case of Infallible, I find that really appealing.</p>",
        "id": 239655527,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1621543005
    },
    {
        "content": "<p>Because it's <em>semantically</em> just an error, and only <em>structurally</em> a Result.</p>",
        "id": 239655568,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1621543030
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/219381-t-libs/topic/Style.20convention.20for.20irrefutable.20patterns/near/239655304\">said</a>:</p>\n<blockquote>\n<p>Option 3 seems like it most clearly communicates that there's only one form though, for the purposes of the function.</p>\n</blockquote>\n<p>interesting. I had the opposite reaction, and feel like option 3 is the least readable. My preference order was 2 &gt; 1 &gt; 3.</p>",
        "id": 239656124,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1621543275
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/219381-t-libs/topic/Style.20convention.20for.20irrefutable.20patterns/near/239655568\">said</a>:</p>\n<blockquote>\n<p>Because it's <em>semantically</em> just an error, and only <em>structurally</em> a Result.</p>\n</blockquote>\n<p>this swayed me a bit though</p>",
        "id": 239656155,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1621543297
    },
    {
        "content": "<p>I do generally feel like patterns in function args is generally distracting and harder to read. I feel like it's uncommon and not what my brain is looking for when scanning for function definitions.</p>",
        "id": 239656320,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1621543365
    },
    {
        "content": "<p>though I expect it wouldn't be particularly hard to acclimate myself to them, and that I'd quickly not feel the same way</p>",
        "id": 239656510,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1621543455
    },
    {
        "content": "<p><code>!</code> in the signature would make it more obvious that there's something uncommon going on.</p>",
        "id": 239656611,
        "sender_full_name": "The 8472",
        "timestamp": 1621543507
    },
    {
        "content": "<p>Either way though I don't think there's a substantial difference between these versions, certainly not enough to justify documenting a style convention (not that this was suggested)</p>",
        "id": 239656612,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1621543509
    },
    {
        "content": "<p>isn't it documented somewhere that the use of <code>match</code> is the idiom for Rust?</p>",
        "id": 239656779,
        "sender_full_name": "oliver",
        "timestamp": 1621543581
    },
    {
        "content": "<p>I also would find an <code>.unwrap_infallible()</code> appealing.</p>",
        "id": 239657004,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1621543694
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281739\">oliver</span> <a href=\"#narrow/stream/219381-t-libs/topic/Style.20convention.20for.20irrefutable.20patterns/near/239656779\">said</a>:</p>\n<blockquote>\n<p>isn't it documented somewhere that the use of <code>match</code> is the idiom for Rust?</p>\n</blockquote>\n<p>this was a dream I had apparently, there is nothing written in docs I can find suggesting <code>match</code> over anything else</p>",
        "id": 239658746,
        "sender_full_name": "oliver",
        "timestamp": 1621544579
    },
    {
        "content": "<p>there are a lot of times that <code>if let</code> looks nicer than a <code>match</code>, and here that naturally becomes an irrefutable <code>let</code></p>",
        "id": 239659012,
        "sender_full_name": "cuviper",
        "timestamp": 1621544667
    },
    {
        "content": "<p>I could give or take parameter patterns, but single-pattern <code>match</code> is distasteful to me</p>",
        "id": 239659094,
        "sender_full_name": "cuviper",
        "timestamp": 1621544711
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/219381-t-libs/topic/Style.20convention.20for.20irrefutable.20patterns/near/239657004\">said</a>:</p>\n<blockquote>\n<p>I also would find an <code>.unwrap_infallible()</code> appealing.</p>\n</blockquote>\n<p>Option 4, using <a href=\"https://doc.rust-lang.org/nightly/std/result/enum.Result.html#method.into_err\">https://doc.rust-lang.org/nightly/std/result/enum.Result.html#method.into_err</a> (<code>#![feature(unwrap_infallible)]</code>)</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">from_residual</span><span class=\"p\">(</span><span class=\"n\">r</span>: <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">convert</span>::<span class=\"n\">Infallible</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">E</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"nb\">From</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">.</span><span class=\"n\">into_err</span><span class=\"p\">()))</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 239659620,
        "sender_full_name": "scottmcm",
        "timestamp": 1621544911
    },
    {
        "content": "<p>Hm. I'm not sure I find that as clear, though I guess it might be something I get used to. infallible_err or something would be clearer, I think; into_err doesn't sound like it is <em>only</em> for infallible</p>",
        "id": 239659731,
        "sender_full_name": "simulacrum",
        "timestamp": 1621544974
    },
    {
        "content": "<p>Lots of conversation about the name for that method <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> <code>always_ok</code> is another one, from &lt;<a href=\"https://github.com/rust-lang/rfcs/issues/1723\">https://github.com/rust-lang/rfcs/issues/1723</a>&gt;.</p>",
        "id": 239659967,
        "sender_full_name": "scottmcm",
        "timestamp": 1621545064
    },
    {
        "content": "<p>Yeah, I'm sure.</p>",
        "id": 239660072,
        "sender_full_name": "simulacrum",
        "timestamp": 1621545103
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"138448\">cuviper</span> <a href=\"#narrow/stream/219381-t-libs/topic/Style.20convention.20for.20irrefutable.20patterns/near/239659094\">said</a>:</p>\n<blockquote>\n<p>I could give or take parameter patterns, but single-pattern <code>match</code> is distasteful to me</p>\n</blockquote>\n<p>I like it because it really clearly highlights that one of the variants is uninhabited, and otherwise looks the same as other interactions with Result which usually use match</p>",
        "id": 239785677,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1621618044
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/219381-t-libs/topic/Style.20convention.20for.20irrefutable.20patterns/near/239659620\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/219381-t-libs/topic/Style.20convention.20for.20irrefutable.20patterns/near/239657004\">said</a>:</p>\n<blockquote>\n<p>I also would find an <code>.unwrap_infallible()</code> appealing.</p>\n</blockquote>\n<p>Option 4, using <a href=\"https://doc.rust-lang.org/nightly/std/result/enum.Result.html#method.into_err\">https://doc.rust-lang.org/nightly/std/result/enum.Result.html#method.into_err</a> (<code>#![feature(unwrap_infallible)]</code>)</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">from_residual</span><span class=\"p\">(</span><span class=\"n\">r</span>: <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">convert</span>::<span class=\"n\">Infallible</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">E</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"nb\">From</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">.</span><span class=\"n\">into_err</span><span class=\"p\">()))</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>fancy</p>",
        "id": 239785879,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1621618142
    },
    {
        "content": "<p>is there a way to search for types that implement <code>From&lt;!&gt;</code></p>",
        "id": 239785910,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1621618153
    },
    {
        "content": "<p>other than searching the codebase</p>",
        "id": 239785929,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1621618163
    },
    {
        "content": "<p>ill just search the codebase</p>",
        "id": 239785939,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1621618166
    },
    {
        "content": "<p>wait no i got confused, that's not the right reflexive impl</p>",
        "id": 239786356,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1621618344
    },
    {
        "content": "<p>how do I even find what types impl <code>Into&lt;!&gt;</code>, gah</p>",
        "id": 239786383,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1621618359
    },
    {
        "content": "<p>I do love both the pattern context in argument lists, as well as that <code>!</code> makes refutable patterns irrefutable, allowing match -&gt; let. However they're both semi-obscure features, and I tend to avoid using semi-obscure features together, so as to not compound the obscurity.</p>",
        "id": 239889239,
        "sender_full_name": "bstrie",
        "timestamp": 1621706250
    },
    {
        "content": "<p>Yeah, notably this only works because libcore has <code>exhaustive_patterns</code> enabled.</p>\n<p>Without that, it has to be </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">from_residual</span><span class=\"p\">(</span><span class=\"n\">residual</span>: <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">convert</span>::<span class=\"n\">Infallible</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">E</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">residual</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">never</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">never</span><span class=\"w\"> </span><span class=\"p\">{},</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"nb\">From</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>(Example: <a href=\"https://github.com/SergioBenitez/Rocket/blob/08e5b6dd0dd9d723ca2bd4488ff4a9ef0af8b91b/core/lib/src/outcome.rs#L615-L623\">https://github.com/SergioBenitez/Rocket/blob/08e5b6dd0dd9d723ca2bd4488ff4a9ef0af8b91b/core/lib/src/outcome.rs#L615-L623</a> )</p>",
        "id": 239889482,
        "sender_full_name": "scottmcm",
        "timestamp": 1621706462
    }
]