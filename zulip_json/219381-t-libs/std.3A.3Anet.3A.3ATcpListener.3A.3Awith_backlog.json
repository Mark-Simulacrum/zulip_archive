[
    {
        "content": "<p>Right now there's no way to set the \"backlog\" for a <code>std::net::TcpListener</code>: it's hard-wired to 128. (The backlog limits the number of TCP connections that will be buffered by the OS waiting for the listener to get to them.) Unfortunately, I need about <code>10_000</code> for a thing I'm doing on Linux to avoid SYN flood protection kicking in.</p>\n<p>I have a patch to add <code>TcpListener::with_backlog(addrs, backlog)</code> which is just <code>TcpListener::bind(addrs)</code> with a backlog argument. It might need a bit of doc cleanup, but it looks otherwise fine to me?</p>\n<p>Someone wise in the ways of libraries please advise whether I need to go through an RFC (seems like it wouldn't add much here?) or can just put up an issue and a pull request and see if folks are ready for an FCP? In other words, how shall I proceed?</p>\n<p>Thanks much for any help you can give.</p>",
        "id": 273326420,
        "sender_full_name": "Bart Massey",
        "timestamp": 1645862984
    },
    {
        "content": "<p>You can use the socket2 library to call <a href=\"https://docs.rs/socket2/latest/socket2/struct.SockRef.html#method.listen\">listen</a> on an existing socket and set the backlog.</p>",
        "id": 273331716,
        "sender_full_name": "The 8472",
        "timestamp": 1645870534
    },
    {
        "content": "<p>It doesn't have to be set at construction time.</p>",
        "id": 273331730,
        "sender_full_name": "The 8472",
        "timestamp": 1645870558
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"330154\">@The 8472</span> Thanks much! That does solve my immediate problem.</p>\n<p>That said, I would still like to remove the hard-wired arbitrary 128 from <code>std</code> by providing this functionality directly there. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 273333396,
        "sender_full_name": "Bart Massey",
        "timestamp": 1645872791
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"317761\">@Bart Massey</span> I'd like to see this functionality built in as well. A function this simple wouldn't require an RFC to add as an unstable API, and I think it'd be possible to stabilize later without one either.</p>",
        "id": 273334194,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645873686
    },
    {
        "content": "<p>@JoshTriplett Thanks! I'll clean up a tiny bit more and get an issue and PR onto Github.</p>",
        "id": 273334236,
        "sender_full_name": "Bart Massey",
        "timestamp": 1645873772
    },
    {
        "content": "<p>Also, I'm assuming you already know about <code>/proc/sys/net/ipv4/tcp_max_syn_backlog</code>, if you're wanting a backlog of 10k?</p>",
        "id": 273334317,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645873875
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"317761\">Bart Massey</span> <a href=\"#narrow/stream/219381-t-libs/topic/std.3A.3Anet.3A.3ATcpListener.3A.3Awith_backlog/near/273326420\">said</a>:</p>\n<blockquote>\n<p>I have a patch to add <code>TcpListener::with_backlog(addrs, backlog)</code> which is just <code>TcpListener::bind(addrs)</code> with a backlog argument. It might need a bit of doc cleanup, but it looks otherwise fine to me?</p>\n</blockquote>\n<p>Nit: I'd probably call this <code>bind_with_backlog</code>, to help make it more self-documenting, since the bind and listen operations are combined and that might not otherwise be completely obvious.</p>",
        "id": 273334486,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645874105
    },
    {
        "content": "<p>(There's probably a better name than that, but I don't want to bikeshed any more than necessary.)</p>",
        "id": 273334495,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645874120
    },
    {
        "content": "<p>as I said, it doesn't have to be a constructor method. you could just have <code>backlog()</code> on <code>TcpListener</code> since it's already set to listen anyway.</p>",
        "id": 273335095,
        "sender_full_name": "The 8472",
        "timestamp": 1645874926
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"330154\">@The 8472</span> How confident are you that every random system with the sockets API behaves reasonably if you call listen more than once on the same socket?</p>",
        "id": 273335717,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645875616
    },
    {
        "content": "<p>Ugh. Windows.</p>\n<blockquote>\n<p>If the listen function is called on an already listening socket, it will return success without changing the value for the backlog parameter.</p>\n</blockquote>",
        "id": 273338148,
        "sender_full_name": "The 8472",
        "timestamp": 1645878754
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> Yes, I wish that the original method had been better-named than <code>bind()</code>, probably <code>new()</code>, but here we are. <code>bind_with_backlog()</code> is fine with me, but let's avoid the bikeshedding to some extent by trying to figure out what we want here â€” other candidates welcome.</p>\n<p>The reason I chose <code>with_backlog()</code> to begin with was some general method naming guide I read somewhere, but <code>bind_with_backlog()</code> and <code>bind_backlog()</code> were definitely both candidates. Of these latter two I certainly prefer <code>bind_with_backlog()</code>.  Whatever name we use the docs will be clear about what's going on.</p>",
        "id": 273351950,
        "sender_full_name": "Bart Massey",
        "timestamp": 1645895537
    },
    {
        "content": "<p>Just realized that Unix domain sockets should probably also have this. Ugh. Shall I go ahead and add this to the issue and patch before I submit? Are there other kinds of sockets I am forgetting?</p>",
        "id": 273353878,
        "sender_full_name": "Bart Massey",
        "timestamp": 1645898204
    },
    {
        "content": "<p>That seems fine to add.</p>",
        "id": 273354541,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645898922
    },
    {
        "content": "<p>So <code>unix::bind_addr_with_backlog</code> needs to be gated on both the <code>bind_with_backlog</code> and <code>unix_socket_abstract</code> features. How do I do that?</p>",
        "id": 273357704,
        "sender_full_name": "Bart Massey",
        "timestamp": 1645902803
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"317761\">Bart Massey</span> <a href=\"#narrow/stream/219381-t-libs/topic/std.3A.3Anet.3A.3ATcpListener.3A.3Awith_backlog/near/273357704\">said</a>:</p>\n<blockquote>\n<p>So <code>unix::bind_addr_with_backlog</code> needs to be gated on both the <code>bind_with_backlog</code> and <code>unix_socket_abstract</code> features. How do I do that?</p>\n</blockquote>\n<p>At the moment at least, we don't have a way to do that. It's on the libs wishlist for the lang team to gate on multiple features.</p>",
        "id": 273364569,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645911805
    },
    {
        "content": "<p>Gate it on <code>bind_with_backlog</code> and add the other feature gate in an adjacent (non-doc) comment, so people don't miss it. :)</p>",
        "id": 273364579,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645911828
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/219381-t-libs/topic/std.3A.3Anet.3A.3ATcpListener.3A.3Awith_backlog/near/273364569\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"317761\">Bart Massey</span> <a href=\"#narrow/stream/219381-t-libs/topic/std.3A.3Anet.3A.3ATcpListener.3A.3Awith_backlog/near/273357704\">said</a>:</p>\n<blockquote>\n<p>So <code>unix::bind_addr_with_backlog</code> needs to be gated on both the <code>bind_with_backlog</code> and <code>unix_socket_abstract</code> features. How do I do that?</p>\n</blockquote>\n<p>At the moment at least, we don't have a way to do that. It's on the libs wishlist for the lang team to gate on multiple features.</p>\n</blockquote>\n<p>It seems like this is more of a compiler item -- I suspect a largely pretty easy one. Is there an issue filed on this already? I suspect we could get some mentoring (maybe even I can write some steps up) and close this out fairly quickly</p>",
        "id": 273365235,
        "sender_full_name": "simulacrum",
        "timestamp": 1645912802
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> I don't think there's an issue filed.</p>",
        "id": 273366652,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645914555
    },
    {
        "content": "<p>Ok, <code>with_backlog</code> is now issue <a href=\"https://github.com/rust-lang/rust/issues/94406\">#94406</a> and PR <a href=\"https://github.com/rust-lang/rust/pull/94407\">#94407</a>.</p>",
        "id": 273367518,
        "sender_full_name": "Bart Massey",
        "timestamp": 1645915687
    },
    {
        "content": "<p>Lmk the various spectacular ways I have screwed up. <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 273367527,
        "sender_full_name": "Bart Massey",
        "timestamp": 1645915724
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"317761\">@Bart Massey</span> I think we should document the default backlog, but I don't think we need to expose it, since if you want to default to it you can just call <code>bind</code>. (Or, if you want to parse some parameter and have a default as a fallback if not configured, you'd probably just want to have your own default, which you can copy from Rust's documentation if you want.)</p>",
        "id": 273367633,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645915872
    },
    {
        "content": "<p>Sending some GitHub suggestions.</p>",
        "id": 273367805,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645916075
    },
    {
        "content": "<p>My thought process for exposing it is that it would then fail to fall out of sync with the documentation when it was changed later + folks may want to use it to match other things e.g. async runtimes. I'm good either way, but is there any harm in exposing it?</p>",
        "id": 273367825,
        "sender_full_name": "Bart Massey",
        "timestamp": 1645916123
    },
    {
        "content": "<p>People assuming it was picked out of any particularly principled selection criteria, rather than \"eh, this works\"? ;)</p>",
        "id": 273367918,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645916265
    },
    {
        "content": "<p>I <em>am</em> tempted nonetheless, but on balance I think I'd rather have a smaller surface area.</p>",
        "id": 273367972,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645916324
    },
    {
        "content": "<p>Sorry for the churn. :)</p>",
        "id": 273367981,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645916334
    },
    {
        "content": "<p>Np. Will amend.</p>",
        "id": 273368287,
        "sender_full_name": "Bart Massey",
        "timestamp": 1645916537
    }
]