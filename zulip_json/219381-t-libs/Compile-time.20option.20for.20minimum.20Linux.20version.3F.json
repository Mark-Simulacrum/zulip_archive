[
    {
        "content": "<p>std includes various workarounds to run on <em>ancient</em> Linux kernels (like 2.6.18). I'm potentially interested in introducing an option for \"minimum supported Linux kernel version\", which would allow omitting those workarounds. glibc has a similar option. Does that seem like a reasonable thing to do? (It'll have more value in the future when programs can easily compile their own <code>std</code> via cargo, but it'd still be usable for people or distros who build their own Rust.)</p>",
        "id": 189973190,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1583592674
    },
    {
        "content": "<p>do we know if those workarounds have runtime costs? I'm not sure if the complexity of such an option is worth it otherwise.</p>",
        "id": 189980191,
        "sender_full_name": "simulacrum",
        "timestamp": 1583604668
    },
    {
        "content": "<p>(I assume they do? Not sure how much of one though).</p>",
        "id": 189980194,
        "sender_full_name": "simulacrum",
        "timestamp": 1583604681
    },
    {
        "content": "<p>I would also wonder how much value there would be in providing that option versus raising the overall minimum supported linux version of <code>std</code>? If these workarounds are a problem, it might be worth considering whether they should included at all. Especially if they are EOL.</p>",
        "id": 190014657,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1583675686
    },
    {
        "content": "<p>They do have runtime costs, quite aside from complexity.</p>",
        "id": 190022729,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1583691419
    },
    {
        "content": "<p>Several extra system calls.</p>",
        "id": 190022734,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1583691439
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219696\">@XAMPPRocky</span> I do agree that we should consider raising the minimum. But I'm also thinking about future cases as well; I might want to build std to require Linux 5.5 for instance.</p>",
        "id": 190022790,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1583691526
    },
    {
        "content": "<p>Imagine a future version of std with support for io_uring, for example.</p>",
        "id": 190022800,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1583691564
    },
    {
        "content": "<p>Or restartable sequences.</p>",
        "id": 190022802,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1583691580
    },
    {
        "content": "<p>On raising the minimum, I think I'm the main holdout, or at least the only vocal one, for the sake of RHEL6. That's actually 2.6.32, but our internal builders tend to remain N-1 hosts, so those use RHEL5's 2.6.18.</p>",
        "id": 190034530,
        "sender_full_name": "cuviper",
        "timestamp": 1583714514
    },
    {
        "content": "<p>When RHEL6 goes out of support, ~Nov 2020, I'll be ready to bump the minimum accordingly.</p>",
        "id": 190034590,
        "sender_full_name": "cuviper",
        "timestamp": 1583714610
    },
    {
        "content": "<p>See also <a href=\"https://github.com/rust-lang/rust/issues/62516\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/62516\">https://github.com/rust-lang/rust/issues/62516</a></p>",
        "id": 190034634,
        "sender_full_name": "cuviper",
        "timestamp": 1583714667
    },
    {
        "content": "<p>Well it's not just me -- here's someone explicitly using el5: <a href=\"https://github.com/rust-lang/rust/issues/69862\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/69862\">https://github.com/rust-lang/rust/issues/69862</a></p>",
        "id": 190122561,
        "sender_full_name": "cuviper",
        "timestamp": 1583791330
    }
]