[
    {
        "content": "<p>Hi libs folks!  I have <a href=\"https://github.com/rust-lang/rust/pull/76041\">https://github.com/rust-lang/rust/pull/76041</a> assigned to me, which I conceptually like (though that maybe be controversial) but think is probably best postponed given the state of <code>Try</code>.</p>\n<p>What's the best way to put it on your radar for a straw poll or something?</p>",
        "id": 209145750,
        "sender_full_name": "scottmcm",
        "timestamp": 1599257626
    },
    {
        "content": "<p>i don't think the libs team currently has a \"process\" for such things other than discussing it in a thread here, so this is a good start</p>",
        "id": 209147384,
        "sender_full_name": "DPC",
        "timestamp": 1599259325
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 209169700,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1599297923
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 209169701,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1599297930
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 209169791,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1599298055
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 209169859,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1599298118
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 209169868,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1599298144
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 209170038,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1599298382
    },
    {
        "content": "<p>don't mind me, just reconsidering my thoughts</p>",
        "id": 209170241,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1599298796
    },
    {
        "content": "<p>To elaborate a bit on my post: I think the proposed semantic is the right one (if we do impl it) because of the analogy to <code>Ordering::then</code> (which the PR author mentioned) and also because if you imagine <code>Ord</code> for an empty struct, it'd be <code>cmp(&amp;self, &amp;other) -&gt; Ordering { try {} }</code>, so <code>Ordering::Equal</code> needs to map to <code>ControlFlow::Continue</code>.  (Which I guess is just saying that <code>Equal</code> is the identity element of the monoid, so is in a way the <code>then</code> point again.)</p>",
        "id": 209171968,
        "sender_full_name": "scottmcm",
        "timestamp": 1599301928
    }
]