[
    {
        "content": "<p>I just noticed <a href=\"https://github.com/rust-lang/rust/issues/46909\">#46909</a>. I wanted to check: is the absence of operation implementations for <code>&amp;mut</code> integers deliberate or an oversight? I have trouble believing it's just an oversight, given how long things have been this way...</p>",
        "id": 247049134,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1627090132
    },
    {
        "content": "<p>Deliberate as far as I know.</p>",
        "id": 247060656,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1627110673
    },
    {
        "content": "<p>Alright. Unless someone says otherwise in the next bit, I'm going to close the issue with \"libs says this is the intended behavior\".</p>",
        "id": 247112415,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1627195837
    },
    {
        "content": "<p>One clarification: I think those impls were deliberately omitted, but that doesn't mean they're something people are strongly opposed to. That would take some discussion to find out. (For my part, I'm mildly opposed but not strongly.)</p>",
        "id": 247112670,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1627196314
    },
    {
        "content": "<p><em>nods</em></p>",
        "id": 247112842,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1627196633
    },
    {
        "content": "<p>I can mention that it would either need further discussion or an RFC.</p>",
        "id": 247112887,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1627196656
    },
    {
        "content": "<p>Exactly.</p>",
        "id": 247132120,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1627228435
    },
    {
        "content": "<p>It's already annoying to write the 4 combinations of <code>T</code>/<code>&amp;T</code> operands, and that becomes 9 if you fully expand it with <code>&amp;mut T</code>.</p>",
        "id": 247148712,
        "sender_full_name": "cuviper",
        "timestamp": 1627251806
    },
    {
        "content": "<p>Pardon, I'm a bit confused. Where would you have to write them?</p>",
        "id": 247149281,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1627252707
    },
    {
        "content": "<p>As far as I know, this would require changing the <code>forward_ref_unop</code>, <code>forward_ref_binop!</code>,  and <code>forward_ref_op_assign!</code> macros, and that's it.</p>",
        "id": 247149364,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1627252906
    },
    {
        "content": "<p>They're all in one file.</p>",
        "id": 247149369,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1627252918
    },
    {
        "content": "<p>Sure, the macros can do it. My annoyance has mostly been when writing third-party types, where I also end up using macros.</p>",
        "id": 247170971,
        "sender_full_name": "cuviper",
        "timestamp": 1627284526
    },
    {
        "content": "<p>It will also multiply in the docs.</p>",
        "id": 247170998,
        "sender_full_name": "cuviper",
        "timestamp": 1627284557
    },
    {
        "content": "<p>It feels like this needs to be ergonomic to do, and if it isn't, we should make it ergonomic somehow.</p>",
        "id": 247178554,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1627290590
    },
    {
        "content": "<p>This is quite apart from the specific question of whether these specific impls should exist.</p>",
        "id": 247178660,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1627290646
    },
    {
        "content": "<p>It's not like Iike I have a solution though. Just pointing out that this seems to be a problem. :)</p>",
        "id": 247178877,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1627290796
    },
    {
        "content": "<p>Actually, I do have an idea... but I need to sleep now. I'll post tomorrow. (There's a fair chance it wont work anyway.)</p>",
        "id": 247179990,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1627291602
    },
    {
        "content": "<p>The idea was to change the coercion or lookup rules.</p>",
        "id": 247304487,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1627372857
    },
    {
        "content": "<p>I had a more specific change in mind last night, but further checking suggests that it's invalid.</p>",
        "id": 247304516,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1627372877
    },
    {
        "content": "<p>I do think it's interesting that <code>&lt;&amp;i32 as Add&gt;::add(&amp;1, &amp;mut 2);</code> compiles though. It presumably means that there's a way to do this.</p>",
        "id": 247304573,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1627372921
    },
    {
        "content": "<p>Well in that case, the <code>&amp;mut i32</code> is automatically being converted to <code>&amp;i32</code> at the call site, right?</p>",
        "id": 247305010,
        "sender_full_name": "Lokathor",
        "timestamp": 1627373207
    },
    {
        "content": "<p>Yep!</p>",
        "id": 247306812,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1627374579
    },
    {
        "content": "<p>yeah, more coercions happen at function/method call sites than at binary operator subexpressions</p>",
        "id": 247339260,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1627395543
    },
    {
        "content": "<p>Well, also, specifying the type seems to help.</p>",
        "id": 247363712,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1627406536
    },
    {
        "content": "<p>The <code>&lt;&amp;i32 as Add&gt;</code> bit does better than it would without it.</p>",
        "id": 247363754,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1627406559
    }
]