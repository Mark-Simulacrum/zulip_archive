[
    {
        "content": "<p>Can someone start an FCP for <a href=\"https://github.com/rust-lang/rust/issues/88539\">https://github.com/rust-lang/rust/issues/88539</a>?</p>",
        "id": 273289027,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1645825745
    },
    {
        "content": "<p>It's been around 6 months with no comments, and it's a pretty straightforward addition</p>",
        "id": 273289103,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1645825786
    },
    {
        "content": "<p>cc <span class=\"user-group-mention\" data-user-group-id=\"2645\">@T-libs-api</span></p>",
        "id": 274272568,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1646524120
    },
    {
        "content": "<p>Do we have any reports of it being used?</p>",
        "id": 274286780,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1646544810
    },
    {
        "content": "<p>(Speaking just for myself, I'd never bother to enable a feature for such a trivial individual function. I'd honestly just rather implement it myself.)</p>",
        "id": 274308818,
        "sender_full_name": "Lokathor",
        "timestamp": 1646577089
    },
    {
        "content": "<p>I can't find any usage of it in GitHub code search or any attempts at implementation that produce SB invalidation. Though my searching is clearly not very good, I mostly got forks of rust, bitvec, and nalgebra</p>",
        "id": 274311251,
        "sender_full_name": "Ben Kimock (Saethlin)",
        "timestamp": 1646580151
    },
    {
        "content": "<p>I've a feeling slice type without bound checks would make sense. Naturally ~all methods on it would be unsafe. Also something that could live in a crate.</p>",
        "id": 276728560,
        "sender_full_name": "nagisa",
        "timestamp": 1648304666
    },
    {
        "content": "<p>Isn't such a slice type just a thin pointer wrapper type? Or do you want to carry the length, but just never check it for index ops or such and leave that to the user?</p>",
        "id": 276729817,
        "sender_full_name": "oli",
        "timestamp": 1648306602
    },
    {
        "content": "<p>you'd want to be able to check the length manually at various times, just not on every operation</p>",
        "id": 276730531,
        "sender_full_name": "Lokathor",
        "timestamp": 1648307530
    },
    {
        "content": "<p>Also you'd likely want to be able to convert between the two forms</p>",
        "id": 276730540,
        "sender_full_name": "Lokathor",
        "timestamp": 1648307551
    },
    {
        "content": "<p>Yeah I imagine length to be there primarily to enable conversion, though it might not be a huge deal if the length is not carried around as id anticipate live regions to be small for this tyme</p>",
        "id": 276731469,
        "sender_full_name": "nagisa",
        "timestamp": 1648308990
    },
    {
        "content": "<p>The reason to make it a type and not just thin pointer is all the nice slice apis</p>",
        "id": 276731474,
        "sender_full_name": "nagisa",
        "timestamp": 1648309011
    },
    {
        "content": "<p>Wouldn't an extension trait do the job too? Or do you want to overload existing names?</p>",
        "id": 276732901,
        "sender_full_name": "The 8472",
        "timestamp": 1648310879
    },
    {
        "content": "<p>Well, isn't part of the complaint is that there are already too many methods on slice? Extension trait does not solve that..</p>",
        "id": 276791117,
        "sender_full_name": "nagisa",
        "timestamp": 1648391385
    },
    {
        "content": "<p>I mean one provided by a 3rd party crate. Then those methods wouldn't be there by default.</p>",
        "id": 276791414,
        "sender_full_name": "The 8472",
        "timestamp": 1648391726
    },
    {
        "content": "<p>Honestly, if i needed this, I wouldn't want to write a bunch of code with <code>_unchecked</code> in it on every single call. I'd just plain want something like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">UncheckedSlice</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"n\">slice</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">u</span><span class=\"p\">.</span><span class=\"n\">swap</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// or whatever</span>\n</code></pre></div>",
        "id": 276826414,
        "sender_full_name": "Lokathor",
        "timestamp": 1648441976
    },
    {
        "content": "<p>That might be nicer as a crate, since then it could have useful <code>debug_assert</code>s -- have the constructor take <em>a</em> length, and in debug it can do the checks.  But in release, skip storing that field and the checks.</p>",
        "id": 276826735,
        "sender_full_name": "scottmcm",
        "timestamp": 1648442470
    }
]