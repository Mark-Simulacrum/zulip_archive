[
    {
        "content": "<p>I think <code>Layout::array</code> is unnecessarily conservative. If you do this:</p>\n<div class=\"codehilite\"><pre><span></span><code>let layout = Layout::new::&lt;T&gt;();\nlet padding = layout.padding_needed_for(layout.align());\n</code></pre></div>\n<p>Is it possible for <code>padding</code> to be non-zero? I don't think it is, because <code>size_of::&lt;T&gt;()</code> accounts for <code>align_of::&lt;T&gt;()</code>. This means that <code>Layout::repeat</code>is more general/conservative than is necessary for <code>Layout::array</code>.</p>",
        "id": 262680812,
        "sender_full_name": "nnethercote",
        "timestamp": 1637830825
    },
    {
        "content": "<p>(In fact, the <code>debug_assert_eq!(offset, mem::size_of::&lt;T&gt;());</code> in <code>Layout::array</code> confirms this.)</p>",
        "id": 262680889,
        "sender_full_name": "nnethercote",
        "timestamp": 1637830878
    },
    {
        "content": "<p><code>Layout::array</code> also ends with <code>layout.pad_to_align()</code>, which I think is also unnecessary.</p>",
        "id": 262680995,
        "sender_full_name": "nnethercote",
        "timestamp": 1637830934
    },
    {
        "content": "<p>I'm pretty sure <code>Layout::array</code> can be simplified to this:</p>\n<div class=\"codehilite\"><pre><span></span><code>    pub fn array&lt;T&gt;(n: usize) -&gt; Result&lt;Self, LayoutError&gt; {\n        let array_size = mem::size_of::&lt;T&gt;().checked_mul(n).ok_or(LayoutError)?;\n        Ok(unsafe { Layout::from_size_align_unchecked(array_size, mem::align_of::&lt;T&gt;()) });\n    }\n</code></pre></div>\n<p>The reason this is of interest is that it's part of the code generated for <code>Vec::push</code>, which is one of the most commonly instantiated functions in <code>std</code>, so it affects the amount of LLVM IR generated.</p>",
        "id": 262686896,
        "sender_full_name": "nnethercote",
        "timestamp": 1637834839
    },
    {
        "content": "<p>That code is generated for &lt;T&gt; can't we outline it further to have an associated const for Layout of T on rawvec  and then only have <code>array&lt;const L: Layout&gt;()</code> instead? Well... <code>array&lt;const ALIGN: usize, const SIZE: usize&gt;()</code> as long as we're only on min_const_generics.<br>\nManual polymorphization basically. The code probably predates const generics.</p>",
        "id": 262687730,
        "sender_full_name": "The 8472",
        "timestamp": 1637835299
    },
    {
        "content": "<p>I'm not sure I fully understand the comment. Are you suggesting making the function <code>const</code>?</p>",
        "id": 262699383,
        "sender_full_name": "nnethercote",
        "timestamp": 1637842965
    },
    {
        "content": "<p>I'm suggesting to create fewer generic instances of it by making it generic over the layout of T (2 const usizes) instead of the type (T) itself, since there generally are fewer layouts than types.</p>",
        "id": 262700344,
        "sender_full_name": "The 8472",
        "timestamp": 1637843712
    },
    {
        "content": "<p>Note that doing:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">__</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">foo</span>::<span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"w\"> </span>::<span class=\"n\">core</span>::<span class=\"n\">mem</span>::<span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2021&amp;gist=8b37b6caee10f47dc53b02827239b9d1\">requires <code>generic_const_expressions</code></a></p>\n<p>so it doesn't look like that trick can be featured yet</p>",
        "id": 262708540,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1637848710
    }
]