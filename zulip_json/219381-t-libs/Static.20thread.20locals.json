[
    {
        "content": "<p>The Windows implementation of <code>std::thread_local</code> use the <a href=\"https://github.com/rust-lang/rust/blob/c7a30c8b6860d1f3459086f7a91074db1b54bc37/library/std/src/sys/windows/thread_local_key.rs#L49\">dynamic TLS APIs</a>. Which is great! However, this means there's no way in stable Rust (as far as I know) to do implicitly initialized TLS. These are embedded in the <code>.tls</code> section and the OS will automatically copy them for each new thread.</p>\n<p>This can be implemented on nightly using <code>asm!</code> for generating the right assembly (which is done in <a href=\"https://github.com/ChrisDenton/wintls/\">this example crate</a>) but this is lacking compared to proper compiler support. It'd be great to have something that works on stable and is a bit more ergonomic.</p>\n<p>I say this not because I'm making any concrete proposals at this time. I just saw people were working on TLS stuff and thought it was worth mentioning, in case this is of interest to anyone.</p>",
        "id": 259097101,
        "sender_full_name": "Chris Denton",
        "timestamp": 1635255502
    },
    {
        "content": "<p>Is the implicit version faster? Or just more convenient?</p>",
        "id": 259097287,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1635255576
    },
    {
        "content": "<p>It's more convenient in some ways. In C++ it's used just like a normal static (aside from its magic thread behaviour). And it doesn't require manual initialization. I would assume it's faster because it doesn't require a function call (but I admit I haven't benchmarked it).</p>",
        "id": 259098195,
        "sender_full_name": "Chris Denton",
        "timestamp": 1635255958
    },
    {
        "content": "<p>Incidentally, this is how <code>thread_local</code> is implemented in MSVC C++ which is partly why I've been looking at it. I've been asking myself \"what can C++ do that Rust can't?\" and this was one of the things. Not that that is a reason on its own to implement something.</p>",
        "id": 259099595,
        "sender_full_name": "Chris Denton",
        "timestamp": 1635256584
    },
    {
        "content": "<p>So this would improve our ability to support our thread_local attribute on Windows?</p>",
        "id": 259101308,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1635257307
    },
    {
        "content": "<p>I'd be happy to see that happen, and I'm hoping we could use our existing attribute for that, just as we do on Linux.</p>",
        "id": 259101363,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1635257332
    },
    {
        "content": "<p>I'm not actually sure! It feels like static TLS could (perhaps) be an optimization for small, const initialized, <code>Copy</code> types that use <code>thread_local</code>. But I'm not certain if that's a good idea or not. Or it could be used for all <code>thread_locals</code> but I'd want to investigate the trade-offs a bit more.</p>",
        "id": 259103378,
        "sender_full_name": "Chris Denton",
        "timestamp": 1635258088
    },
    {
        "content": "<p>I guess the issue at the moment is that they might both have different trade-offs but, while dynamic TLS can be reimplemented by any third party crate, static TLS really needs some support from the compiler (at a minimum, reading and writing values).</p>",
        "id": 259103411,
        "sender_full_name": "Chris Denton",
        "timestamp": 1635258101
    },
    {
        "content": "<p>Adding compiler support makes sense, I think.</p>",
        "id": 259103552,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1635258141
    },
    {
        "content": "<p>I'm distinguishing between <code>#[thread_local]</code> and <code>thread_local!</code>.</p>",
        "id": 259103616,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1635258168
    },
    {
        "content": "<p>I think the former should use static; I'm not sure if the latter should use static or dynamic, or if there's some semantic requirement of <code>thread_local!</code> that might distinguish.</p>",
        "id": 259103669,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1635258192
    },
    {
        "content": "<p>Ah, right. Yeah that makes sense. I think so long as there's some way to do both then I'm happy <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 259104378,
        "sender_full_name": "Chris Denton",
        "timestamp": 1635258439
    },
    {
        "content": "<blockquote>\n<p>The Windows implementation of std::thread_local use the dynamic TLS APIs. Which is great! However, this means there's no way in stable Rust (as far as I know) to do implicitly initialized TLS. These are embedded in the .tls section and the OS will automatically copy them for each new thread.</p>\n</blockquote>\n<p><code>thread_local!</code> uses implicitly initialized TLS using <code>#[thread_local]</code> with MSVC. However implicitly initialized TLS doesn't provide destructor support, so the code you linked is used to run the drop impl of thread locals when necessary.</p>\n<p><code>#[thread_local]</code> definition: <a href=\"https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/library/std/src/thread/local.rs#L202\">https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/library/std/src/thread/local.rs#L202</a><br>\ndestructor registration: <a href=\"https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/library/std/src/thread/local.rs#L220\">https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/library/std/src/thread/local.rs#L220</a></p>",
        "id": 259111129,
        "sender_full_name": "bjorn3",
        "timestamp": 1635260950
    },
    {
        "content": "<p>isn't thread spawning super slow on windows anyway? i.e. it would only provide a tiny relative improvement.</p>",
        "id": 259112297,
        "sender_full_name": "The 8472",
        "timestamp": 1635261398
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span>, I missed that. It makes more sense now.</p>",
        "id": 259113589,
        "sender_full_name": "Chris Denton",
        "timestamp": 1635261899
    },
    {
        "content": "<p>It is process creation that is super slow on windows. Thread creation on windows is _only_ about 2x slower than on linux. Source: <a href=\"https://stackoverflow.com/questions/47845/why-is-creating-a-new-process-more-expensive-on-windows-than-linux/51396188#51396188\">https://stackoverflow.com/questions/47845/why-is-creating-a-new-process-more-expensive-on-windows-than-linux/51396188#51396188</a></p>",
        "id": 259117492,
        "sender_full_name": "bjorn3",
        "timestamp": 1635263373
    },
    {
        "content": "<p>Can if there's a particular reason why is switches to dynamic tls for the needs drop case? It seems like the destructor code is independent of how the TLS slot is allocated? It just needs space for a pointer. Is it so there's a key?</p>",
        "id": 259118006,
        "sender_full_name": "Chris Denton",
        "timestamp": 1635263593
    },
    {
        "content": "<p>It doesn't switch to dynamic tls. It uses it in addition to statis tls. The static tls is used for storing the actual data. The dynamic tls is used to call the destructor.</p>",
        "id": 259118590,
        "sender_full_name": "bjorn3",
        "timestamp": 1635263825
    },
    {
        "content": "<p>Ah, I see! I completely misread that.</p>",
        "id": 259118676,
        "sender_full_name": "Chris Denton",
        "timestamp": 1635263876
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260325\">@Chris Denton</span> did you see <a href=\"https://github.com/rust-lang/rust/issues/84223\">https://github.com/rust-lang/rust/issues/84223</a> ?</p>",
        "id": 259118738,
        "sender_full_name": "Mara",
        "timestamp": 1635263889
    },
    {
        "content": "<p>That looks interesting, thanks!</p>",
        "id": 259118833,
        "sender_full_name": "Chris Denton",
        "timestamp": 1635263945
    }
]