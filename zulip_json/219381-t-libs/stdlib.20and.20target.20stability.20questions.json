[
    {
        "content": "<p>Hello,</p>\n<p><code>wasm32-wasi</code> is currently  in stable rust. However, unlike almost all other rust targets, this is far from stable with both the bytecode evolving and the stdlib capabilities. For example it has moved wasi namespace name from <code>unstable-.....</code> to <code>preview....</code>. Also the current name <code>preview</code> hints that this is not really something stable, yet it is in stable rust.</p>\n<p>In WASM-related circles, <a href=\"https://github.com/WebAssembly/tool-conventions/issues/158\">https://github.com/WebAssembly/tool-conventions/issues/158</a> there are proposals that tie WASM to browser evolutions. </p>\n<p>This is hurting IOT-like scenarios (where host VMs cannot evolve at the same pace) a lot, as users of rust in these situations are forced to sit on a rust version for longer than needed, just because <code>wasm32-wasi</code> changes at an unpredictable pace. Right now it's a die roll if it works after a rustc update.</p>\n<p>And this brings me to the topic:<br>\n1) What stability guarantees should rust have for it's targets?<br>\n2) Could we add flags similar to CPU feature flags that enable extra stdlib features. in a similar way to <code>+avx...</code> e.g. <code>+threads</code> for the wasi features?<br>\n3) If there are no written down stability guidelines for rustc targets where can we discuss some? <br>\n4) Is there a proposal somewhere that can allow an older stdlib to be used with a newer rust? I couldn't find such a thing but that would mitigate some of the pain, as we can pin the stdlib version while still getting language features.</p>",
        "id": 229916904,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1615493227
    },
    {
        "content": "<p>That room should exist -- not sure why you're not seeing it, maybe you need to subscribe to it. I can move this to there, and that should get you a link.</p>",
        "id": 229917440,
        "sender_full_name": "simulacrum",
        "timestamp": 1615493424
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"196563\" href=\"/#narrow/stream/196563-t-lang.2Fmeta/topic/stdlib.20and.20target.20stability.20questions\">#t-lang/meta &gt; stdlib and target stability questions</a> by <span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span></p>",
        "id": 229917476,
        "sender_full_name": "Notification Bot",
        "timestamp": 1615493437
    },
    {
        "content": "<p>As i discussed in another topic, Moving wasm32-wasi to nightly only won't really fix the issue, but I wonder what is the way that we can improve this situation since right now it seems really inconsistent and unpredictable. </p>\n<p>Thinking about it, maybe my question is not for #t-libs only but meta?</p>",
        "id": 229919159,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1615494057
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> since this issue has come up before in the context of <code>stdarch</code>.</p>",
        "id": 229919604,
        "sender_full_name": "Amanieu",
        "timestamp": 1615494235
    },
    {
        "content": "<p>For (1), general stability rustc should have for its targets, that's an extremely broad question and I won't get into it much myself. My belief is that stability should be defined within targets, so stability for x86_64-unknown-linux-gnu is not the same thing as wasm32-wasi. I would assert that this is required, because you wouldn't see a wasm32-wasi target in rustc for decades.</p>",
        "id": 229920716,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1615494679
    },
    {
        "content": "<p>Another thing that could help here would be a custom stdlib with a newer rustc would also help. Worst case scenario maybe IOT-like scenarios would fork stdlib, rename it, use <code>#nostd</code> then use it as a normal crate dependency but this is a convoluted solution that we can probably help make better</p>",
        "id": 229920784,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1615494715
    },
    {
        "content": "<p>For (2) this already exists today, we inherit features from LLVM so you can do things like <code>-Ctarget-features=+simd128</code> and similar for some other implemented proposals in wasm. The names aren't super great since we inherit them raw from LLVM, however</p>",
        "id": 229920792,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1615494718
    },
    {
        "content": "<p>For (3) I don't believe there are stability guidelines written down for wasm</p>",
        "id": 229920857,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1615494731
    },
    {
        "content": "<p>For (4) I don't believe there is such a proposal, and I doubt it would ever be accepted personally</p>",
        "id": 229920902,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1615494755
    },
    {
        "content": "<p>But should we have some minimal guarantees on stable targets?</p>",
        "id": 229921016,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1615494802
    },
    {
        "content": "<p>My general thoughts on this is that if you're hitting tons of breaking with changes in wasi that's a problem we should fix. I don't think it needs a grand rethinking of all targets in Rust per-se, it may be that WASI just isn't doing the right thing</p>",
        "id": 229921026,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1615494806
    },
    {
        "content": "<p>I would be fine to talk about specific breakages, but if you want to talk more generally I'm not really in a position to continue that conversation, it's not my wheelhouse</p>",
        "id": 229921073,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1615494833
    },
    {
        "content": "<p>I think WASI in particular is the culprit, as WASM generally treats is as a CPU feature mostly so that's a bit better, even if the pace is kind of not sustainable for certain kind of scenarios, that's easier to fix, but WASI in particular is unclear where I can discuss that</p>",
        "id": 229921223,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1615494884
    },
    {
        "content": "<p>If you'd like to talk about specific breakages you've seen on WASI I can help out with that, if you want to talk about the general stability of the WASI target I don't know what to do about that. AFAIK there's not really someone or some team or other in charge of that. It just sort of is what it is now and folks contributing and reviewing WASI changes do a best-effort thing to hopefully ensure no one unreasonably gets broken</p>",
        "id": 229921508,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1615494975
    },
    {
        "content": "<p>Is it the WASI standardisation team that usually does changes here? Is it coming from somewhere else? It's unclear how i can start helping to be honest, most meetings online are either standardisation related (mostly about WASM, not wasi), but that's a different beast from the implementation.</p>",
        "id": 229922150,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1615495262
    },
    {
        "content": "<p>I have some trouble understanding how the pipeline works of getting wasi features / changes into rustc stdlib and how that's supposed to evolve along with the standard (especially since the standard isn't really done) :D</p>",
        "id": 229922400,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1615495360
    },
    {
        "content": "<p>Yeah most wasi things have been me/sunfish. I should also point out that my thoughts here are all very wasm32-wasi specific, and so if you'd like to talk more broadly I just don't have much to offer myself, but I don't want to shut down anyone else's thoughts.</p>",
        "id": 229922429,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1615495375
    },
    {
        "content": "<p>Currently the way things work are that when the standard changes we update rust. That's happened only once, though, so it's not like there's much of a trend here</p>",
        "id": 229922493,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1615495403
    },
    {
        "content": "<p>That's ok my use case is wasm32-wasi. I did see thread mentioned as something in the pipeline but in that case it's ok (as threads panic now so it's not really a regression). The part that's worrying me for example is memory operations since those work now in a slow way (e.g. memcpy-equivalent), but if we add intrinsics in wasi for that, then it will break usable programs. today that run on VMs that don't have those exposed</p>",
        "id": 229922670,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1615495483
    },
    {
        "content": "<p>I'm not sure how to address hypothetical breakage. No one's proposed turning on bulk-memory-operations by default yet.</p>",
        "id": 229922803,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1615495536
    },
    {
        "content": "<p>Also AFAIK no one's proposaing adding intrinsics to wasi for this</p>",
        "id": 229922825,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1615495550
    },
    {
        "content": "<p>So the worry here is that's unclear how it will be turned on and where these things are usually discussed.</p>",
        "id": 229923190,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1615495689
    },
    {
        "content": "<p>AFAIK there's no precedent for this</p>",
        "id": 229923819,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1615495996
    },
    {
        "content": "<p>nothing major has been stabilized in the past and has been enticing enough to use</p>",
        "id": 229923832,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1615496005
    },
    {
        "content": "<p>so... whatever happens next is entirely unknown</p>",
        "id": 229923844,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1615496015
    },
    {
        "content": "<p>no one has proposed making these changes, and this style of change has not happened in the past, so... all I can really recommend is to try to follow development and if it pops up and causes problems then we can try to fix</p>",
        "id": 229923972,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1615496060
    },
    {
        "content": "<p>the goal is to not break everyone...</p>",
        "id": 229923979,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1615496065
    },
    {
        "content": "<p>when env changed for wasi functions from the previous name of <code>unstable-</code> to <code>preview-</code> is something that popped to mind that altered results while VMs (e.g. WAMR required changes to update those namespaces)</p>",
        "id": 229924045,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1615496097
    },
    {
        "content": "<p>I guess I anticipate these things to appear as people work through them: e.g. this is the only discussion i found on how to enable WASM features (not wasi). <a href=\"https://github.com/WebAssembly/tool-conventions/issues/158\">https://github.com/WebAssembly/tool-conventions/issues/158</a></p>",
        "id": 229924232,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1615496162
    },
    {
        "content": "<p>So when you say monitor development, what is the group you're referring to specifically? is the WebAssembly one mentioned above the place where defaults are decided or is it decided here for wasi (or both :D)?</p>",
        "id": 229924441,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1615496260
    },
    {
        "content": "<p>My best advice is the rust repository itself and changes to wasi's implementation of libstdt</p>",
        "id": 229924813,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1615496408
    },
    {
        "content": "<p>Alright, thanks for the help.</p>",
        "id": 229924867,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1615496430
    },
    {
        "content": "<p>By the way, for future readers of this thread, i realized that I was wrong on how to think about stable rust versions and targets available in stable rust and stdlibs versions in stable rust to support those targets. Targets are more like platforms that have tiers and those tiers come with some level of guarantees already.</p>\n<p>The contribution I see valuable moving forward that I could make for things breaking use-cases once features move into the default set is to contribute flags to disable those features whenever necessary. That way people get things by default and IOT-lile use-cases aren't stuck on a compiler version.</p>",
        "id": 230030266,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1615556744
    }
]