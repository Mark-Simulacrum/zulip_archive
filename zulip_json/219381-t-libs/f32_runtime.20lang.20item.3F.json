[
    {
        "content": "<p>I'm poking around in the f32 module and noticed that unlike ints, floats have some inherent impls defined in libcore and others in libstd, the former with the \"f32\" lang item and the latter with \"f32_runtime\". I couldn't find docs describing what the purpose of this split is. if it's portability concerns, then I still don't see why those would prevent these from being defined in libcore?</p>",
        "id": 214109049,
        "sender_full_name": "bstrie",
        "timestamp": 1603311483
    },
    {
        "content": "<p>The std ones link to libm I believe</p>",
        "id": 214110916,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1603312416
    },
    {
        "content": "<p>interesting, is libm what \"cmath\" refers to in std/f32.rs? because I see some of the std/f32 impls delegate to intrinsics::foo, and others to cmath::bar. anything that's intrinsic is something provided by LLVM, correct? any reason that those methods (e.g. floor, trunc) couldn't be moved to libcore then?</p>",
        "id": 214113443,
        "sender_full_name": "bstrie",
        "timestamp": 1603313705
    },
    {
        "content": "<p>IIRC those intrinsics will also lower to <code>libm</code> if there's no architectural support</p>",
        "id": 214117663,
        "sender_full_name": "cuviper",
        "timestamp": 1603316020
    },
    {
        "content": "<p>some of them should be pretty trivial to implement (e.g. <code>f32::trunc</code>), could we add those to compiler-builtins or something?</p>",
        "id": 214127574,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1603323094
    },
    {
        "content": "<p>In general there are implementations for a lot of this stuff in <a href=\"https://github.com/rust-lang/libm\">https://github.com/rust-lang/libm</a>, although it's very clear the code is optimized for readability over performance... (whenever i dip in there are pretty clear optimizations i see, but the testing setup is so convoluted (requires building on linux with musl) that i've never really wanted to PR it — it's also not 100% clear they'd be accepted given the statement that it's just a port of musl's impl)</p>",
        "id": 214130109,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1603325218
    },
    {
        "content": "<p>I think everyone would agree that having any implementation in core at all is preferable to having no implementation, yes? just so long as it's not penalizing libstd. is there cfg magic we could do to pull in the rust libm when using the core profile? looks like there's already shenanigans going on in order to allow inherent impls on floats in two crates, so I don't imagine this would be out of the question (and doesn't panic! already do something like this, with different implementations in core and std?)</p>",
        "id": 214133439,
        "sender_full_name": "bstrie",
        "timestamp": 1603328562
    },
    {
        "content": "<p>I think it would be unfortunate if getting decent perf required std, but I guess it's better than nothing. I mean, this has been a performance footgun in the past for people already — some crates (nalgebra I think is one) have no_std variants that depend on libm, and get way worse performance if that mode is on (usually because someone did default-feature=false).</p>\n<p>It also seems tricky to set up, but I guess it already needs a lang item so its not out of the question)</p>",
        "id": 214140086,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1603337054
    },
    {
        "content": "<p>num-traits has some implemented in <code>FloatCore</code> which do forward to <code>std</code> when possible</p>",
        "id": 214140802,
        "sender_full_name": "cuviper",
        "timestamp": 1603338304
    }
]