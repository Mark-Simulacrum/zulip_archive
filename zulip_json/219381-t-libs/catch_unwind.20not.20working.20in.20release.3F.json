[
    {
        "content": "<p>I'm trying to debug an issue where catch_unwind seems to not work in release (the panic happens but isn't caught, so the program exits). The code base is a translation from C to Rust (using c2rust) and I switched from using setjmp/longjmp to using catch_unwind/panic. Everything works fine in release mode. I'm slowly migrating the unsafe code to using safe alternatives and in this case, the goal is to switch from using function pointers and void* contexts to using closures. The first instance where the tests fail is after applying this commit: <a href=\"https://gitlab.com/ahmedcharles/lua-rs/-/commit/a0b627cc22675798c4f71c6f807c0250e31611eb\">https://gitlab.com/ahmedcharles/lua-rs/-/commit/a0b627cc22675798c4f71c6f807c0250e31611eb</a></p>\n<p>Any help (and ideas on how to debug the issue) is greatly appreciated.</p>",
        "id": 228111745,
        "sender_full_name": "Ahmed Charles",
        "timestamp": 1614495931
    },
    {
        "content": "<p>you can set a breakpoint on a <code>rust_panic</code> and see what is on your callstack.</p>",
        "id": 228129886,
        "sender_full_name": "nagisa",
        "timestamp": 1614517887
    },
    {
        "content": "<p>maybe you're panicking elsewhere and there isn't actually a catch_unwind where you think there should be one.</p>",
        "id": 228129892,
        "sender_full_name": "nagisa",
        "timestamp": 1614517904
    },
    {
        "content": "<p>(that's my intuition without digging into the code too much)</p>",
        "id": 228129899,
        "sender_full_name": "nagisa",
        "timestamp": 1614517922
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"336395\">@Ahmed Charles</span> I suspect this is because the compiler assumes that <code>extern \"C\"</code> functions never unwind and therefore the destructors are unreachable and can be removed.</p>",
        "id": 228134493,
        "sender_full_name": "Amanieu",
        "timestamp": 1614523325
    },
    {
        "content": "<p>did we actually ever implement anything of the sort? IIRC the nounwind for extern \"C\" functions was backed out because it broke certain high profile bindings relying on setjmp/longjmp.</p>",
        "id": 228141477,
        "sender_full_name": "nagisa",
        "timestamp": 1614530824
    },
    {
        "content": "<ul>\n<li><a href=\"https://github.com/rust-lang/rust/blob/1b1d85fd4cc6ace45d5ec95cd95ce2ccbe6f2e17/compiler/rustc_codegen_ssa/src/mir/block.rs#L115\">https://github.com/rust-lang/rust/blob/1b1d85fd4cc6ace45d5ec95cd95ce2ccbe6f2e17/compiler/rustc_codegen_ssa/src/mir/block.rs#L115</a></li>\n<li><a href=\"https://github.com/rust-lang/rust/blob/1b1d85fd4cc6ace45d5ec95cd95ce2ccbe6f2e17/compiler/rustc_middle/src/ty/layout.rs#L2587\">https://github.com/rust-lang/rust/blob/1b1d85fd4cc6ace45d5ec95cd95ce2ccbe6f2e17/compiler/rustc_middle/src/ty/layout.rs#L2587</a></li>\n</ul>",
        "id": 228141909,
        "sender_full_name": "tm",
        "timestamp": 1614531308
    },
    {
        "content": "<p>Ah, ok. I'll have to remove all <code>extern \"C\"</code> functions before switching to using <code>catch_unwind</code>... hopefully that works.</p>",
        "id": 228192101,
        "sender_full_name": "Ahmed Charles",
        "timestamp": 1614585117
    },
    {
        "content": "<p>You could also wait for <a href=\"https://github.com/rust-lang/rust/issues/76570\">#76570</a> to land and use <code>extern \"C-unwind\"</code>.</p>",
        "id": 228206997,
        "sender_full_name": "Amanieu",
        "timestamp": 1614594199
    },
    {
        "content": "<p>That's fine, I wanted to remove <code>extern \"C\"</code> anyways, I just didn't know it impacted unwind. The tests pass now, so this was the cause. Thanks.</p>",
        "id": 228239664,
        "sender_full_name": "Ahmed Charles",
        "timestamp": 1614609147
    }
]