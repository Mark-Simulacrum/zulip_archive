[
    {
        "content": "<p>Is there a reason why <code>std::ptr::NonNull&lt;T:?Sized&gt;</code> doesn't implement <code>From&lt;Box&lt;T: ?Sized&gt;&gt;</code>? </p>\n<p>I mean in it's design <code>NonNull</code> seems to mainly meant to handle smart pointer and similar  \"owning pointers\" (<code>LinkedList</code> Node, or <code>Arc</code>).</p>\n<p>And having to go through <code>unsafe { NonNull::new_unchecked(Box::into_raw(data)) }</code> is introducing unsafe blocks in places where (at least theoretically)  they are not needed.</p>",
        "id": 236494939,
        "sender_full_name": "Philipp Korber",
        "timestamp": 1619611696
    },
    {
        "content": "<p>Implementing <code>From&lt;Box&lt;T&gt;&gt; for NonNull&lt;T&gt;</code> would make it very easy to accidentally leak things by doing <code>function_accepting_non_null(my_box.into())</code>.</p>",
        "id": 236495288,
        "sender_full_name": "bjorn3",
        "timestamp": 1619611875
    },
    {
        "content": "<p>That's a good point.</p>\n<p>Through if there is no other we <em>maybe</em> want to add a <code>NonNull::from_box</code> method which mentions in the documentation why it's not a <code>From&lt;&gt;</code> implementation.  I guess I might write a micro RFC up this weekend <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 236495759,
        "sender_full_name": "Philipp Korber",
        "timestamp": 1619612103
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"209646\">@Philipp Korber</span> there was a proposal to add more <code>leak</code> functions, including one that gives you a <code>NonNull&lt;T&gt;</code>: <a href=\"https://github.com/KodrAus/rfcs/blob/container-leak/text/0000-container-leak.md\">https://github.com/KodrAus/rfcs/blob/container-leak/text/0000-container-leak.md</a></p>",
        "id": 236499226,
        "sender_full_name": "Mara",
        "timestamp": 1619613617
    },
    {
        "content": "<p>(but the author didn't have time to keep working on that: <a href=\"https://github.com/rust-lang/rfcs/pull/2969#issuecomment-802392063\">https://github.com/rust-lang/rfcs/pull/2969#issuecomment-802392063</a>)</p>",
        "id": 236499327,
        "sender_full_name": "Mara",
        "timestamp": 1619613664
    },
    {
        "content": "<blockquote>\n<p>NonNull::from_box method which mentions in the documentation why it's not a From&lt;&gt; implementation. I guess I might write a micro RFC up this weekend <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n</blockquote>\n<p>Probably doesnt need an RFC if its just a libs function, it can start as unstable and then when stablilizing could FCP into reality. That said, I guess this would be the place for a temperature check on such a thing...</p>",
        "id": 236546273,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1619630705
    },
    {
        "content": "<p>it'd probably make more sense as part of Box rather than NonNull. see that RFC i linked.</p>",
        "id": 236546363,
        "sender_full_name": "Mara",
        "timestamp": 1619630743
    },
    {
        "content": "<p>I have a vague recollection of trying to add <code>impl From&lt;Box&lt;T&gt;&gt; for NonNull&lt;T&gt;</code> and the compiler not accepting it. Maybe because of the liballoc vs libcore split, or because of <code>#[fundamental]</code>. (Or maybe I’m confused with some other <code>impl</code>)</p>",
        "id": 237120262,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1620024694
    },
    {
        "content": "<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> I think a bit of both. Due to the automatically generated <code>Into</code> based on the <code>From</code> and <code>Box</code> being <code>fundamental</code> this probably fails. And adding a <code>from_box</code> would fail because of the split (as long as there is no trick in std to implement methods on external (core) types).</p>",
        "id": 237637558,
        "sender_full_name": "Philipp Korber",
        "timestamp": 1620297510
    },
    {
        "content": "<p>maybe as an associated function like <code>into_raw</code>?</p>",
        "id": 237639167,
        "sender_full_name": "The 8472",
        "timestamp": 1620298537
    },
    {
        "content": "<p>What's wrong with <code>NonNull::from(Box::leak(b))</code>?</p>",
        "id": 237650893,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1620304872
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/219381-t-libs/topic/NonNull.20From.3CBox.3CT.3E.3E/near/236495288\">said</a>:</p>\n<blockquote>\n<p>Implementing <code>From&lt;Box&lt;T&gt;&gt; for NonNull&lt;T&gt;</code> would make it very easy to accidentally leak things by doing <code>function_accepting_non_null(my_box.into())</code>.</p>\n</blockquote>",
        "id": 237819630,
        "sender_full_name": "Philipp Korber",
        "timestamp": 1620393047
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330154\">The 8472</span> <a href=\"#narrow/stream/219381-t-libs/topic/NonNull.20From.3CBox.3CT.3E.3E/near/237639167\">said</a>:</p>\n<blockquote>\n<p>maybe as an associated function like <code>into_raw</code>?</p>\n</blockquote>\n<p>The problem is <code>Box::into_raw</code> already exists but returns a <code>*mut T</code> instead of an <code>NonNull&lt;T&gt;</code> mainly because it predates the existence of <code>NonNull</code>.</p>\n<p>Same is true for <code>Arc</code>/<code>Rc</code>/<code>Weak</code> <code>into_raw</code> (but they are a bit special anyway), <code>CString::into_raw</code>.</p>\n<p><code>Vec</code> and <code>String</code>'s <code>into_raw_parts</code> might still be changed to use <code>NonNull</code> as they are not stable.  On github it seems people are generally in favor of this, but it does introduce inconsistencies with the \"older' <code>into_raw</code> methods.</p>",
        "id": 237820425,
        "sender_full_name": "Philipp Korber",
        "timestamp": 1620393375
    },
    {
        "content": "<p>Sadly we (currently) can't magically change the old <code>into_raw</code> methods to return <code>NonNull</code> .</p>",
        "id": 237820515,
        "sender_full_name": "Philipp Korber",
        "timestamp": 1620393415
    },
    {
        "content": "<p>So I thought about maybe proposing something like <code>into_raw</code> but using a alternative name.</p>",
        "id": 237820678,
        "sender_full_name": "Philipp Korber",
        "timestamp": 1620393490
    },
    {
        "content": "<p>My \"like\" referred to <code>into_raw</code>'s nature as associated function, not as a name proposal ;)</p>",
        "id": 237834653,
        "sender_full_name": "The 8472",
        "timestamp": 1620398838
    },
    {
        "content": "<p>into_nonnull would be fine</p>",
        "id": 237844746,
        "sender_full_name": "Lokathor",
        "timestamp": 1620402469
    },
    {
        "content": "<p>For box and similar yes, without question. But what about <code>Vec</code>? Where it returns <code>(NonNull&lt;T&gt;, usize, usize)</code>?</p>\n<p>Just to be clear I'm not saying it doesn't work there, just that I'm not sure about it. </p>\n<p>I would prefer a naming schema we can use for all types having a \"into raw\" transformation returning a <code>NonNull</code> as it's main component.</p>",
        "id": 237857279,
        "sender_full_name": "Philipp Korber",
        "timestamp": 1620407239
    },
    {
        "content": "<p>Is there any benefit from NonNull pointers for? They may be dangling anyway for 0 capacity. Well, I guess the tuple would have a niche...</p>",
        "id": 237864209,
        "sender_full_name": "The 8472",
        "timestamp": 1620409921
    },
    {
        "content": "<p>In the return of raw parts, there's no advantage.  But it saves people doing <code>/* SAFETY: grr, this is never null but the method returns the wrong type */ NonNull::new_unchecked(the_ptr)</code> when they want to pass it to something else that doesn't want to worry about nulls.</p>",
        "id": 237867704,
        "sender_full_name": "scottmcm",
        "timestamp": 1620411396
    },
    {
        "content": "<p>bit of a drag to have concurrent raw and nonnull methods all over</p>",
        "id": 237869661,
        "sender_full_name": "Lokathor",
        "timestamp": 1620412300
    },
    {
        "content": "<p>FWIW currently the compiler can optimize out the null checks for all the standard library types <em>except</em> for <code>Cstring</code>(which for some reason doesn't inline <code>CString::into_inner</code>)<br>\n<a href=\"https://godbolt.org/z/YPKW9G5xn\">https://godbolt.org/z/YPKW9G5xn</a></p>",
        "id": 240175114,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1621943379
    },
    {
        "content": "<p>I’d be hesitant to rely on that. And even optimizations aside, <code>unwrap</code> / <code>expect</code> can be a code smell so I’d prefer having a comment \"this never panics because blah blah\"</p>",
        "id": 240178263,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1621945359
    },
    {
        "content": "<p>In any case, I've opened <a href=\"https://github.com/rust-lang/rust/pull/85719\">https://github.com/rust-lang/rust/pull/85719</a> to fix the fact that the NonNull check for CString isn't optimized out</p>",
        "id": 240308573,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1622027894
    }
]