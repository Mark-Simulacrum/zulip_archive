[
    {
        "content": "<p>I’d really like some kind of <code>ArrayVec</code> in libcore. Though last time I thought about what it could look like, I felt tension between sharing implementation code (since there’s a lot that would be similar or identical) on one hand, and not compromising on convenience for users on the other hand. (This includes things like rustdoc output that looks good)</p>",
        "id": 253664189,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1631833346
    },
    {
        "content": "<p>I don't think there would be much common code to share: most of the common stuff is implemented directly on slices.</p>",
        "id": 253670967,
        "sender_full_name": "Amanieu",
        "timestamp": 1631838170
    },
    {
        "content": "<p>I had a somewhat similar idea when I am trying to add no alloc support gimli. It looks like this: </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">VecLikeStorage</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Item</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Storage</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">new_storage</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"n\">Storage</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">as_slice</span><span class=\"p\">(</span><span class=\"n\">storage</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Self</span>::<span class=\"n\">Storage</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"n\">MaybeUninit</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span>::<span class=\"n\">Item</span><span class=\"o\">&gt;</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">as_mut_slice</span><span class=\"p\">(</span><span class=\"n\">storage</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"bp\">Self</span>::<span class=\"n\">Storage</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">MaybeUninit</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span>::<span class=\"n\">Item</span><span class=\"o\">&gt;</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">grow</span><span class=\"p\">(</span><span class=\"n\">storage</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"bp\">Self</span>::<span class=\"n\">Storage</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">additional</span>: <span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">AllocError</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">AllocError</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">VecLikeStorage</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">ArrayVecStorage</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Storage</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">MaybeUninit</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A</span>: <span class=\"nc\">Allocator</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">VecLikeStorage</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">VecStorage</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Storage</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"n\">MaybeUninit</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">VecLike</span><span class=\"o\">&lt;</span><span class=\"n\">S</span>: <span class=\"nc\">VecLikeStorage</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">storage</span>: <span class=\"nc\">S</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">len</span>: <span class=\"kt\">usize</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">S</span>: <span class=\"nc\">VecLikeStorage</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">VecLike</span><span class=\"o\">&lt;</span><span class=\"n\">S</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 253674830,
        "sender_full_name": "Gary Guo",
        "timestamp": 1631841234
    },
    {
        "content": "<p>VecLikeStorage only have methods related to its capacity, and all manipulations are in VecLike.</p>",
        "id": 253674919,
        "sender_full_name": "Gary Guo",
        "timestamp": 1631841291
    },
    {
        "content": "<p>(I had a Storage assoc type because in my case I actually want <code>impl VecLikeStorage for [T; N]</code>, but it could be replaced with Self)</p>",
        "id": 253675054,
        "sender_full_name": "Gary Guo",
        "timestamp": 1631841389
    },
    {
        "content": "<p>Yes we get a lot \"for free\" through Deref to slices. But there’s still a lot more to Vec than that. <code>library/alloc/src/vec/*.rs</code> is 4k lines</p>",
        "id": 253726320,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1631877503
    },
    {
        "content": "<p>It'd be nice to have an arrayvec-like thing in <code>core</code> even if not exposed just to avoid it getting re-implemented in essentially every single PR that does stuff with arrays.  (Though <code>collect_into_array</code> <em>has</em> helped reduce that problem somewhat.)</p>\n<p>But I do think it should be exposed.  I just don't know how it should spell and type <code>.push(x)</code>.</p>",
        "id": 253925452,
        "sender_full_name": "scottmcm",
        "timestamp": 1632036371
    },
    {
        "content": "<p>there's a suggestion to add <code>push_within_capacity</code> to Vec. It's fallible in the sense that it doesn't even try to allocate. Once we have that it would also fit arrayvec and we wouldn't have to worry about <code>push</code> as much.</p>",
        "id": 253937597,
        "sender_full_name": "The 8472",
        "timestamp": 1632049726
    },
    {
        "content": "<p>That sounds like an interesting idea. I guess the implementation of <code>push()</code> would probably be changed to make use of that method internally also.</p>",
        "id": 253985358,
        "sender_full_name": "Tim McNamara",
        "timestamp": 1632100035
    },
    {
        "content": "<p>I don’t love the name but I’ve had a use case for this one (in a <code>Vec</code>-based arena allocator)</p>",
        "id": 254002396,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1632118588
    },
    {
        "content": "<p>maybe <code>try_push</code> or something. names are hard. but yeah, having that function would be good</p>",
        "id": 254012152,
        "sender_full_name": "Mara",
        "timestamp": 1632125246
    },
    {
        "content": "<p><code>try_push</code> implies a function that returns Result or similar, rather than one that just never fails.</p>",
        "id": 254064304,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1632150222
    },
    {
        "content": "<p>wouldn't <code>push_within_capacity</code> be fallible too? or would it just drop extras?</p>",
        "id": 254065111,
        "sender_full_name": "cuviper",
        "timestamp": 1632150567
    },
    {
        "content": "<p>It would probably look like this</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">try_push</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">val</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">AllocError</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"n\">push_within_capacity</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">val</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 254067715,
        "sender_full_name": "The 8472",
        "timestamp": 1632151552
    },
    {
        "content": "<p>yeah, \"give it back on error\" is the way to go</p>",
        "id": 254070382,
        "sender_full_name": "Lokathor",
        "timestamp": 1632152427
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/89123\">#89123</a></p>",
        "id": 254097051,
        "sender_full_name": "The 8472",
        "timestamp": 1632162977
    }
]