[
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/75435\">#75435</a> is S-waiting-on-team, so i created a topic here.</p>",
        "id": 209861507,
        "sender_full_name": "Charles Lew",
        "timestamp": 1599880135
    },
    {
        "content": "<p>The libs team is still sorta checking out the design space.</p>",
        "id": 209913347,
        "sender_full_name": "pickfire",
        "timestamp": 1599971697
    },
    {
        "content": "<p>Personally i feel it is more \"smooth\" if there's a set of stable <code>term</code> api, and this one part of it.</p>",
        "id": 209920181,
        "sender_full_name": "Charles Lew",
        "timestamp": 1599985411
    },
    {
        "content": "<p>But I think that is a lot more.</p>",
        "id": 209924281,
        "sender_full_name": "pickfire",
        "timestamp": 1599993093
    },
    {
        "content": "<p>I feel that we probably need a full RFC for this.</p>",
        "id": 209932750,
        "sender_full_name": "Amanieu",
        "timestamp": 1600005371
    },
    {
        "content": "<p>Possibly with an internals post first to flesh out the design possibilities.</p>",
        "id": 209932766,
        "sender_full_name": "Amanieu",
        "timestamp": 1600005406
    },
    {
        "content": "<p>I think that we probably want some sort of API like this, but we're just stuck on the API design.</p>",
        "id": 209932783,
        "sender_full_name": "Amanieu",
        "timestamp": 1600005434
    },
    {
        "content": "<p>I don't want io::input to be a part of a larger api, i want it to be a quick and easy function useful for small programs and learning rust, much like the differences between an external logging crate and the dbg! macro</p>",
        "id": 210088621,
        "sender_full_name": "tinaun",
        "timestamp": 1600142716
    },
    {
        "content": "<p>its easy to get caught up in the search for a perfect api and prevent useful but not 100% needs-suiting for all use cases api's from landing</p>",
        "id": 210088767,
        "sender_full_name": "tinaun",
        "timestamp": 1600142931
    },
    {
        "content": "<p>Yeah, even if a full input system is made, we still <em>also</em> need this \"useful default\" system</p>",
        "id": 210088931,
        "sender_full_name": "Lokathor",
        "timestamp": 1600143180
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119491\">@tinaun</span> If we're going to have the \"quick and simple but doesn't cover all use cases\" system, that's fine, but then I don't think we should give it a name like <code>input</code>.</p>",
        "id": 210094200,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600151194
    },
    {
        "content": "<p>Having functions like <code>std::io::input_one_line()</code> seems preferable to just <code>input()</code>.</p>",
        "id": 210094289,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600151305
    },
    {
        "content": "<p>Or, if you want it to include prompting, then <code>std::io::prompt()</code>.</p>",
        "id": 210094306,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600151354
    },
    {
        "content": "<p>(And perhaps one day <code>std::io::prompt()</code> will incorporate line-editing.)</p>",
        "id": 210094318,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600151386
    },
    {
        "content": "<p>yes i can agree with that - but i think any question besides</p>\n<ul>\n<li>what should we name this function?</li>\n<li>should there be two functions, with one taking a prompt? (or even a readln!() macro so we can have optional arguments??)</li>\n</ul>\n<p>is out of scope for the pr as it stands</p>",
        "id": 210094687,
        "sender_full_name": "tinaun",
        "timestamp": 1600151835
    },
    {
        "content": "<p>Yes, this could be a macro_rules! macro if people want a Pythonesque \"one simple function to emit text and then await input\" so that it can have a variadic arg count, I don't like printing zero text being <code>\"\"</code> for the reasons that pickfire mentioned. There's probably a disadvantage to making it a macro, though.</p>",
        "id": 210120950,
        "sender_full_name": "Jubilee",
        "timestamp": 1600172460
    },
    {
        "content": "<p>I think it's indeed convenient to have a <code>std::io::Stdin::read_trimmed_line</code> or <code>std::io::Stdin::with_trimmed_line</code>(this might save one memory allocation comparing to the previous one).</p>\n<p>For <code>prompt</code> i feel it's a more chatty API... It doesn't really make sense unless there's a terminal... (For example, when <code>#[windows_subsystem = \"windows\"]</code>) That's why i feel it's better if  it is added as a <code>term::prompt</code> or <code>std::term::prompt</code> unstable API.</p>",
        "id": 210122878,
        "sender_full_name": "Charles Lew",
        "timestamp": 1600173524
    },
    {
        "content": "<p><del>Is the FromStr version in the PR now a minimum allocation version?</del><br>\nWait, no, it won't be in the case where you want to do something that isn't just FromStr parsing it.</p>",
        "id": 210124530,
        "sender_full_name": "Jubilee",
        "timestamp": 1600174475
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116458\">@Charles Lew</span> That is still good, helper function suggested here I think is also an option but I don't quite agree on mixing <code>FromStr</code> for this. <code>parse</code> is simple enough and we don't need to specify type if we split it.</p>",
        "id": 210219336,
        "sender_full_name": "pickfire",
        "timestamp": 1600227765
    },
    {
        "content": "<p>Wrote a fairly long reply on GitHub <a href=\"https://github.com/rust-lang/rust/pull/75435#issuecomment-695805123\">https://github.com/rust-lang/rust/pull/75435#issuecomment-695805123</a> â€” hope it's not too much ðŸ˜…</p>",
        "id": 210674215,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1600619886
    },
    {
        "content": "<p>Thanks a bunch! While I'm not fully convinced that that's the API we want, it feels like a good reasoning. And I like it more than the current proposed change. I think I agree that the prompt part is not really useful.</p>",
        "id": 210674676,
        "sender_full_name": "Lukas Kalbertodt",
        "timestamp": 1600620628
    },
    {
        "content": "<p>Since the original PR first popped up, I considered writing an RFC. But I haven't gotten around to it, because, you know, time. <span class=\"user-mention\" data-user-id=\"211722\">@Yoshua Wuyts</span> Would you be interested in helping out with/co-author the RFC? Especially your <code>read_to_string</code> prior art section should be included in the RFC.</p>",
        "id": 210674742,
        "sender_full_name": "Lukas Kalbertodt",
        "timestamp": 1600620728
    },
    {
        "content": "<p>Haha, I'm procrastinating on other work â€” probably shouldn't commit to writing an RFC ðŸ˜…</p>",
        "id": 210674918,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1600621054
    },
    {
        "content": "<p>Makes sense :P But if I get to it, I will ping you, in case you wanna proof read or so :)</p>",
        "id": 210674994,
        "sender_full_name": "Lukas Kalbertodt",
        "timestamp": 1600621183
    },
    {
        "content": "<p>Please do; would be happy to!</p>",
        "id": 210675092,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1600621305
    }
]