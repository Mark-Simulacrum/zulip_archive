[
    {
        "content": "<p>an example where that is necessary is</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(generic_const_exprs)]</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Generic</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">ASSOC</span>: <span class=\"kt\">usize</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Generic</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">ASSOC</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">17</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Generic</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">u16</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">ASSOC</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">13</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n\n<span class=\"k\">fn</span> <span class=\"nf\">uses_assoc_type</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">Generic</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">T</span>::<span class=\"n\">ASSOC</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">T</span>::<span class=\"n\">ASSOC</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">only_generic_n</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">13</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">uses_assoc_type</span>::<span class=\"o\">&lt;</span><span class=\"kt\">u16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 275351392,
        "sender_full_name": "lcnr",
        "timestamp": 1647338378
    },
    {
        "content": "<p>this should compile</p>",
        "id": 275351399,
        "sender_full_name": "lcnr",
        "timestamp": 1647338382
    },
    {
        "content": "<p>but currently doesn't</p>",
        "id": 275351408,
        "sender_full_name": "lcnr",
        "timestamp": 1647338387
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"328097\">@BN</span> if you want to fix it</p>",
        "id": 275351423,
        "sender_full_name": "lcnr",
        "timestamp": 1647338398
    },
    {
        "content": "<p>change <code>try_unify</code> to also take a <code>param_env</code></p>",
        "id": 275351506,
        "sender_full_name": "lcnr",
        "timestamp": 1647338413
    },
    {
        "content": "<p>and evaluate <code>Node::Leaf</code> where necessary</p>",
        "id": 275351523,
        "sender_full_name": "lcnr",
        "timestamp": 1647338426
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/eval.20in.20.60try_unify.60/near/275351423\">said</a>:</p>\n<blockquote>\n<p>cc <span class=\"user-mention silent\" data-user-id=\"328097\">BN</span> if you want to fix it</p>\n</blockquote>\n<p>yes, I can try this.</p>",
        "id": 275351790,
        "sender_full_name": "BN",
        "timestamp": 1647338562
    },
    {
        "content": "<p>We can get a <code>ParamEnv</code> from the <code>Unevaluated</code> arguments in <code>try_unify_abstract_consts</code>, but how do we get the correct <code>substs</code> in that case? </p>\n<p>Or do you also want <code>try_unify_abstract_consts</code> to take a <code>param_env</code>?</p>",
        "id": 275544236,
        "sender_full_name": "BN",
        "timestamp": 1647450204
    },
    {
        "content": "<p>If I use the substs of the of the <code>Unevaluated</code> I get an ICE that complains about the order of the substs not matching with those in the <code>param_env</code></p>",
        "id": 275544867,
        "sender_full_name": "BN",
        "timestamp": 1647450394
    },
    {
        "content": "<p>the <code>ParamEnv</code> from the <code>Unevaluated</code> arguments is the wrong one:</p>\n<p>looking at the above example in <code>only_generic_n</code> we unify the return type <code>[u8; N + 13]</code> with the return type of <code>uses_assoc_type</code> substituted with <code>[u16, N]</code></p>",
        "id": 275544986,
        "sender_full_name": "lcnr",
        "timestamp": 1647450441
    },
    {
        "content": "<p>the above program is internally represented as</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">ANON_CONST_1</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">Generic</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">T</span>::<span class=\"n\">ASSOC</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">uses_assoc_type</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">Generic</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">ANON_CONST_1</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">ANON_CONST_2</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\">  </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">13</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">only_generic_n</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">ANON_CONST_2</span>::<span class=\"o\">&lt;</span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">uses_assoc_type</span>::<span class=\"o\">&lt;</span><span class=\"kt\">u16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 275545247,
        "sender_full_name": "lcnr",
        "timestamp": 1647450535
    },
    {
        "content": "<p>ok thanks</p>",
        "id": 275545389,
        "sender_full_name": "BN",
        "timestamp": 1647450584
    },
    {
        "content": "<p>so when comparing these two types, the element type successfully unifies, and we then unify the <code>ty::Const</code></p>\n<p><code>ANON_CONST_1::&lt;u16, M&gt;</code> with <code>ANON_CONST_2::&lt;M&gt;</code></p>",
        "id": 275545393,
        "sender_full_name": "lcnr",
        "timestamp": 1647450585
    },
    {
        "content": "<p><em>to make it clear i've edited one of the <code>N</code> to <code>M</code></em></p>",
        "id": 275545526,
        "sender_full_name": "lcnr",
        "timestamp": 1647450621
    },
    {
        "content": "<p>so, we unify these two anon constants inside of <code>only_generic_n</code> which has the <code>param_env</code> with have to use</p>",
        "id": 275545689,
        "sender_full_name": "lcnr",
        "timestamp": 1647450674
    },
    {
        "content": "<blockquote>\n<p>Or do you also want try_unify_abstract_consts to take a param_env?</p>\n</blockquote>\n<p>so we want this <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 275545789,
        "sender_full_name": "lcnr",
        "timestamp": 1647450710
    },
    {
        "content": "<p>Still doesn't work unfortunately, missing the correct substs from the <code>param_env</code>. Currently using the <code>param_env</code> of the <code>obligation</code> for the call in <code>try_unify</code> in <code>process_changed_obligation</code> where we try to prove the following <code>ConstEquate</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>│ │ │ │ │ │ │ │ ├─0ms DEBUG rustc_trait_selection::traits::fulfill process_obligation pre-resolve, obligation=Obligation(predicate=Binder(ConstEquate(Const { ty: usize, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:16 ~ eval_try_unify[db7b]::only_generic_n::{constant#0}), const_param_did: None }, substs: [Const { ty: usize, val: Param(N/#0) }], promoted: None }) }, Const { ty: usize, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:12 ~ eval_try_unify[db7b]::uses_assoc_type::{constant#0}), const_param_did: None }, substs: [u16, Const { ty: usize, val: Param(N/#0) }], promoted: None }) }), []), depth=0)\n</code></pre></div>\n<p>where the obligation has this <code>param_env</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>│ │ │ │ │ │ │ │ │ ├─0ms DEBUG rustc_trait_selection::traits::fulfill param env of obligation: ParamEnv { caller_bounds: [Binder(ConstEvaluatable(WithOptConstParam { did: DefId(0:16 ~ eval_try_unify[db7b]::only_generic_n::{constant#0}), const_param_did: None }, [Const { ty: usize, val: Param(N/#0) }]), [])], reveal: UserFacing, constness: NotConst }\n</code></pre></div>\n<p>which unfortunately cannot evaluate the constant in the return type of <code>uses_assoc_type</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>│ │ ├─17ms DEBUG rustc_trait_selection::traits::fulfill select: outcome=Outcome {\n│ │ │     errors: [\n│ │ │         Error {\n│ │ │             error: CodeConstEquateError(ExpectedFound { expected: Const { ty: usize, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:16 ~ eval_try_unify[db7b]::only_generic_n::{constant#0}), const_param_did: None }, substs: [Const { ty: usize, val: Param(N/#0) }], promoted: None }) }, found: Const { ty: usize, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:12 ~ eval_try_unify[db7b]::uses_assoc_type::{constant#0}), const_param_did: None }, substs: [u16, Const { ty: usize, val: Param(N/#0) }], promoted: None }) } }, ConstMismatch(ExpectedFound { expected: Const { ty: usize, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:16 ~ eval_try_unify[db7b]::only_generic_n::{constant#0}), const_param_did: None }, substs: [Const { ty: usize, val: Param(N/#0) }], promoted: None }) }, found: Const { ty: usize, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:12 ~ eval_try_unify[db7b]::uses_assoc_type::{constant#0}), const_param_did: None }, substs: [u16, Const { ty: usize, val: Param(N/#0) }], promoted: None }) } })),\n</code></pre></div>\n<p>In <code>try_unify</code> I use the following to evaluate:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[instrument(skip(tcx), level = </span><span class=\"s\">\"debug\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">try_eval_and_replace_substs_in_root</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">tcx</span>: <span class=\"nc\">TyCtxt</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">abstr_const</span>: <span class=\"nc\">AbstractConst</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">param_env</span>: <span class=\"nc\">ty</span>::<span class=\"n\">ParamEnv</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">AbstractConst</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// We substitute generics repeatedly to allow AbstractConsts to unify where a</span>\n<span class=\"w\">    </span><span class=\"c1\">// ConstKind::Unevalated could be turned into an AbstractConst that would unify e.g.</span>\n<span class=\"w\">    </span><span class=\"c1\">// Param(N) should unify with Param(T), substs: [Unevaluated(\"T2\", [Unevaluated(\"T3\", [Param(N)])])]</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">root</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">abstr_const</span><span class=\"p\">.</span><span class=\"n\">root</span><span class=\"p\">(</span><span class=\"n\">tcx</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">Node</span>::<span class=\"n\">Leaf</span><span class=\"p\">(</span><span class=\"n\">ct</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">abstr_const</span><span class=\"p\">.</span><span class=\"n\">root</span><span class=\"p\">(</span><span class=\"n\">tcx</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">debug</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"root const: {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ct</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">evaluated</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ct</span><span class=\"p\">.</span><span class=\"n\">eval</span><span class=\"p\">(</span><span class=\"n\">tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">param_env</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">debug</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"o\">?</span><span class=\"n\">evaluated</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">AbstractConst</span>::<span class=\"n\">from_const</span><span class=\"p\">(</span><span class=\"n\">tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">evaluated</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">act</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">abstr_const</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">act</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"nb\">None</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">break</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">abstr_const</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>the relevant debug output for the <code>ConstEquate</code> obligation is:</p>\n<div class=\"codehilite\"><pre><span></span><code>│ │ │ ├─┐rustc_trait_selection::traits::const_evaluatable::try_eval_and_replace_substs_in_root abstr_const=AbstractConst { inner: [Leaf(Const { ty: usize, val: Param(N/#1) }), Leaf(Const { ty: usize, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:4 ~ eval_try_unify[db7b]::Generic::ASSOC), const_param_did: None }, substs: [T], promoted: None }) })], substs: [T, Const { ty: usize, val: Param(N/#1) }] }, param_env=ParamEnv { caller_bounds: [Binder(ConstEvaluatable(WithOptConstParam { did: DefId(0:12 ~ eval_try_unify[db7b]::uses_assoc_type::{constant#0}), const_param_did: None }, [T, Const { ty: usize, val: Param(N/#1) }]), []), Binder(TraitPredicate(&lt;T as Generic&gt;, polarity:Positive), []), Binder(TraitPredicate(&lt;T as std::marker::Sized&gt;, polarity:Positive), [])], reveal: UserFacing, constness: NotConst }\n│ │ │ │ ├─0ms DEBUG rustc_trait_selection::traits::const_evaluatable root const: Const { ty: usize, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:4 ~ eval_try_unify[db7b]::Generic::ASSOC), const_param_did: None }, substs: [T], promoted: None }) }\n│ │ │ │ ├─0ms DEBUG rustc_trait_selection::traits::const_evaluatable evaluated=Const { ty: usize, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:4 ~ eval_try_unify[db7b]::Generic::ASSOC), const_param_did: None }, substs: [T], promoted: None }) }\n</code></pre></div>",
        "id": 275568299,
        "sender_full_name": "BN",
        "timestamp": 1647460347
    },
    {
        "content": "<p>so, we need to evaluate <code>Node::Leaf</code> which can't be converted to a nested <code>AbstractConst</code></p>",
        "id": 275613814,
        "sender_full_name": "lcnr",
        "timestamp": 1647500725
    },
    {
        "content": "<p>so in the <code>Ok(None)</code> case we have to continue with the evaluated leaf.</p>",
        "id": 275614508,
        "sender_full_name": "lcnr",
        "timestamp": 1647501489
    },
    {
        "content": "<blockquote>\n<p>the relevant debug output for the <code>ConstEquate</code> obligation is:</p>\n</blockquote>\n<p>It also looks like something goes wrong here: you should get <code>Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:4 ~ eval_try_unify[db7b]::Generic::ASSOC), const_param_did: None }, substs: [u16] }) }</code> here</p>",
        "id": 275614703,
        "sender_full_name": "lcnr",
        "timestamp": 1647501678
    },
    {
        "content": "<p>not <code>Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:4 ~ eval_try_unify[db7b]::Generic::ASSOC), const_param_did: None }, substs: [T] }) }</code></p>",
        "id": 275614709,
        "sender_full_name": "lcnr",
        "timestamp": 1647501688
    },
    {
        "content": "<p>Got the new test to compile, but there are some failing tests in <code>ui/const-generics</code> now:</p>\n<p><a href=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/const-generics/issues/issue-87964.rs\"><code>ui/const-generics/issues/issue-87964.rs</code></a><br>\n<a href=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/const-generics/issues/issue-89146.rs\"><code>ui/const-generics/issues/issue-89146.rs</code></a><br>\n<a href=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/const-generics/issues/issue-89320.rs\"><code>ui/const-generics/issues/issue-89320.rs</code></a></p>\n<p>these fail with:</p>\n<div class=\"codehilite\"><pre><span></span><code>error: internal compiler error: no errors encountered even though `delay_span_bug` issued\n\nerror: internal compiler error: Encountered error `Unimplemented` selecting `Binder(&lt;^0 as Enumerable&gt;, [Ty(Anon)])` during codegen\n</code></pre></div>\n<p>For <code>issue-87964</code> we have the following <code>try_unify</code> call:</p>\n<div class=\"codehilite\"><pre><span></span><code>┐rustc_trait_selection::traits::const_evaluatable::try_unify a=AbstractConst { inner: [Leaf(Const { ty: usize, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:4 ~ issue_87964[8bc9]::Target::LENGTH), const_param_did: None }, substs: [T], promoted: None }) })], substs: [^0] }, b=AbstractConst { inner: [Leaf(Const { ty: usize, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:4 ~ issue_87964[8bc9]::Target::LENGTH), const_param_did: None }, substs: [T], promoted: None }) })], substs: [T] }, param_env=ParamEnv { caller_bounds: [Binder(ConstEvaluatable(WithOptConstParam { did: DefId(0:11 ~ issue_87964[8bc9]::{impl#0}::{constant#0}), const_param_did: None }, [T]), []), Binder(TraitPredicate(&lt;[(); _] as std::marker::Sized&gt;, polarity:Positive), []), Binder(TraitPredicate(&lt;T as Target&gt;, polarity:Positive), []), Binder(TraitPredicate(&lt;T as std::marker::Sized&gt;, polarity:Positive), [])], reveal: UserFacing, constness: NotConst }\n</code></pre></div>\n<p>and wind up with this <code>const_eval_resolve</code> call:</p>\n<div class=\"codehilite\"><pre><span></span><code>├─┐rustc_middle::mir::interpret::queries::const_eval_resolve param_env=ParamEnv { caller_bounds: [], reveal: All, constness: NotConst }, ct=Unevaluated { def: WithOptConstParam { did: DefId(0:4 ~ issue_87964[8bc9]::Target::LENGTH), const_param_did: None }, substs: [^0], promoted: None }, span=None\n</code></pre></div>\n<p>where in <code>codegen_fulfill_obligation</code> this <a href=\"https://github.com/rust-lang/rust/blob/461e8078010433ff7de2db2aaae8a3cfb0847215/compiler/rustc_trait_selection/src/traits/codegen.rs#L45\"><code>select</code></a>  fails.</p>\n<p>Should this <code>Unevaluated</code> be resolvable?</p>\n<p>There are two other failing tests but haven't looked at those in detail.</p>",
        "id": 275633123,
        "sender_full_name": "BN",
        "timestamp": 1647513624
    },
    {
        "content": "<p><a href=\"https://github.com/b-naber/rust/blob/9408f6c08d414e915b4cd74eee904a05b5c436ee/compiler/rustc_trait_selection/src/traits/const_evaluatable.rs#L647\">this</a> is the current implementation of <code>try_unify</code></p>",
        "id": 275633698,
        "sender_full_name": "BN",
        "timestamp": 1647513979
    },
    {
        "content": "<p>All of those tests that fail now were previously fixed by the <a href=\"https://github.com/rust-lang/rust/pull/90023\">pr</a> where we postponed the evaluation of some constants.</p>",
        "id": 275635252,
        "sender_full_name": "BN",
        "timestamp": 1647514858
    },
    {
        "content": "<p>when we equate two consts to i think we replace inference vars with the <code>for&lt;T&gt;</code> stuff</p>",
        "id": 275636201,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1647515356
    },
    {
        "content": "<p>&lt;<a href=\"https://github.com/rust-lang/rust/pull/88166\">https://github.com/rust-lang/rust/pull/88166</a>&gt;</p>",
        "id": 275636240,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1647515388
    },
    {
        "content": "<p>yes, but that causes the param env to be incomplete</p>",
        "id": 275636242,
        "sender_full_name": "lcnr",
        "timestamp": 1647515390
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"328097\">BN</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/eval.20in.20.60try_unify.60/near/275635252\">said</a>:</p>\n<blockquote>\n<p>All of those tests that fail now were previously fixed by the <a href=\"https://github.com/rust-lang/rust/pull/90023\">pr</a> where we postponed the evaluation of some constants.</p>\n</blockquote>\n<p>so that's the correct fix here as well</p>",
        "id": 275636294,
        "sender_full_name": "lcnr",
        "timestamp": 1647515405
    },
    {
        "content": "<p>for now</p>",
        "id": 275636298,
        "sender_full_name": "lcnr",
        "timestamp": 1647515407
    },
    {
        "content": "<p>the param env also looks kinda sus to me</p>",
        "id": 275636303,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1647515409
    },
    {
        "content": "<p>idk why there isnt one in the cosnt eval resolve thing?</p>",
        "id": 275636312,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1647515416
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"326176\">Boxy [she/her]</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/eval.20in.20.60try_unify.60/near/275636312\">said</a>:</p>\n<blockquote>\n<p>idk why there isnt one in the cosnt eval resolve thing?</p>\n</blockquote>\n<p>?</p>",
        "id": 275636334,
        "sender_full_name": "lcnr",
        "timestamp": 1647515427
    },
    {
        "content": "<p>the param env in that const_eval_resolve call has no caller bounds</p>",
        "id": 275636347,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1647515441
    },
    {
        "content": "<p>we also removed lazy normalization for constants from the compiler (or well, the lazy unification part, normalization is still lazy)</p>",
        "id": 275636357,
        "sender_full_name": "lcnr",
        "timestamp": 1647515449
    },
    {
        "content": "<p>apparently, without noticing</p>",
        "id": 275636401,
        "sender_full_name": "lcnr",
        "timestamp": 1647515486
    },
    {
        "content": "<p>so we still have <code>ConstEquate</code> predicates, but just never emit them xd</p>",
        "id": 275636417,
        "sender_full_name": "lcnr",
        "timestamp": 1647515497
    },
    {
        "content": "<p>wait we did what now <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 275636492,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1647515533
    },
    {
        "content": "<p>yeah, <code>generic_const_exprs</code> always unified eagerly</p>",
        "id": 275636516,
        "sender_full_name": "lcnr",
        "timestamp": 1647515550
    },
    {
        "content": "<p>we definitely used to make <code>ConstEquate</code> so when did we stop <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 275636570,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1647515586
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/88369\">https://github.com/rust-lang/rust/pull/88369</a> i think</p>",
        "id": 275636597,
        "sender_full_name": "lcnr",
        "timestamp": 1647515609
    },
    {
        "content": "<p>uhh</p>",
        "id": 275636608,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1647515620
    },
    {
        "content": "<p>that PR just renames feature gates and deletes a bunch of tests iirc</p>",
        "id": 275636662,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1647515645
    },
    {
        "content": "<p>i wouldnt expect that to have changed stuff in generic const exprs to stop making const equate obligatons <span aria-label=\"scream\" class=\"emoji emoji-1f631\" role=\"img\" title=\"scream\">:scream:</span></p>",
        "id": 275636706,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1647515685
    },
    {
        "content": "<p>time for a <code>git blame</code> adventure</p>",
        "id": 275636710,
        "sender_full_name": "lcnr",
        "timestamp": 1647515688
    },
    {
        "content": "<p>ah, I forgot how we did that</p>",
        "id": 275636753,
        "sender_full_name": "lcnr",
        "timestamp": 1647515714
    },
    {
        "content": "<p>nm</p>",
        "id": 275636755,
        "sender_full_name": "lcnr",
        "timestamp": 1647515715
    },
    {
        "content": "<p>aaaaaaaaaaaaaaaaaaa, yikes</p>",
        "id": 275636765,
        "sender_full_name": "lcnr",
        "timestamp": 1647515721
    },
    {
        "content": "<p>yeah, we didn't remove the lazy unifying</p>",
        "id": 275636786,
        "sender_full_name": "lcnr",
        "timestamp": 1647515740
    },
    {
        "content": "<p>I would assume that <code>InferCtxt::try_unify_abstract_consts</code> should have been updated alongside <code>InferCtxt::const_eval_resolve</code> when we made it stall on inference vars</p>",
        "id": 275636812,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1647515756
    },
    {
        "content": "<p>because its probably replacing a <code>_</code> subst with <code>^0</code> which we  then try to evalaute which was what was causing those codegen fuflill obligaton ICEs</p>",
        "id": 275636909,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1647515793
    },
    {
        "content": "<p>but I have not looked at those test failures much atall <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 275636941,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1647515813
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"326176\">Boxy [she/her]</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/eval.20in.20.60try_unify.60/near/275636812\">said</a>:</p>\n<blockquote>\n<p>I would assume that <code>InferCtxt::try_unify_abstract_consts</code> should have been updated alongside <code>InferCtxt::const_eval_resolve</code> when we made it stall on inference vars</p>\n</blockquote>\n<p>yes</p>",
        "id": 275636984,
        "sender_full_name": "lcnr",
        "timestamp": 1647515844
    },
    {
        "content": "<p>we should really fix unused substs lol</p>",
        "id": 275637035,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1647515875
    },
    {
        "content": "<p>making consts fai lto unify if there are any inference vars in substs... not great lol</p>",
        "id": 275637085,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1647515884
    },
    {
        "content": "<p>we however use <code>tcx.try_unify_abstract_consts</code> in <code>super_relate_consts</code> which is sus, cause i would expect us to get there with infer substs</p>",
        "id": 275637152,
        "sender_full_name": "lcnr",
        "timestamp": 1647515918
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"326176\">Boxy [she/her]</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/eval.20in.20.60try_unify.60/near/275636909\">said</a>:</p>\n<blockquote>\n<p>because its probably replacing a <code>_</code> subst with <code>^0</code> which we  then try to evalaute which was what was causing those codegen fuflill obligaton ICEs</p>\n</blockquote>\n<p>What exactly is <code>^0</code>? The 0 is a Debruijn index I would assume. But e.g. in <code>Const { ty: usize, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:4 ~ issue_87964[8bc9]::Target::LENGTH), const_param_did: None }, substs: [T], promoted: None }) })], substs: [^0] }</code> there is not even a Binder, what does <code>^0</code> correspond to here?</p>",
        "id": 275637242,
        "sender_full_name": "BN",
        "timestamp": 1647515987
    },
    {
        "content": "<blockquote>\n<p>there is not even a Binder, what does ^0 correspond to here?</p>\n</blockquote>\n<p>to a variable bound by the imagined binder around the whole query</p>",
        "id": 275637332,
        "sender_full_name": "lcnr",
        "timestamp": 1647516023
    },
    {
        "content": "<p>so <code>try_unify_abstract_const</code> where one consts has some infer var</p>",
        "id": 275637373,
        "sender_full_name": "lcnr",
        "timestamp": 1647516056
    },
    {
        "content": "<p>if you add a <code>debug!(?a);</code> and <code>debug!(?b)</code> to <code>InferCtxt::try_unify_abstract_consts</code> you'll maybe see it has inference var substs</p>",
        "id": 275637375,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1647516057
    },
    {
        "content": "<p>actually checks whether the two constants can be unified for all possible options for that infer var</p>",
        "id": 275637408,
        "sender_full_name": "lcnr",
        "timestamp": 1647516083
    },
    {
        "content": "<p>so there is a binder here (just informally). Ordinary queries replace these bound vars with inference vars right away, but the const eval queries just don't.</p>",
        "id": 275637587,
        "sender_full_name": "lcnr",
        "timestamp": 1647516203
    },
    {
        "content": "<p>that mostly doesn't matter, but is strictly speaking incorrect</p>",
        "id": 275637613,
        "sender_full_name": "lcnr",
        "timestamp": 1647516220
    },
    {
        "content": "<p>and also, doing that is broken cause the caller bounds of the param env of the constant might not be satisfied for all inputs</p>",
        "id": 275637702,
        "sender_full_name": "lcnr",
        "timestamp": 1647516267
    },
    {
        "content": "<p>which is causing these ice</p>",
        "id": 275637713,
        "sender_full_name": "lcnr",
        "timestamp": 1647516272
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"326176\">Boxy [she/her]</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/eval.20in.20.60try_unify.60/near/275636812\">said</a>:</p>\n<blockquote>\n<p>I would assume that <code>InferCtxt::try_unify_abstract_consts</code> should have been updated alongside <code>InferCtxt::const_eval_resolve</code> when we made it stall on inference vars</p>\n</blockquote>\n<p>so for now this is probably the easiest solution</p>",
        "id": 275637771,
        "sender_full_name": "lcnr",
        "timestamp": 1647516313
    },
    {
        "content": "<p>but i/we really should just rework pretty much all of this from scratch xd</p>",
        "id": 275637806,
        "sender_full_name": "lcnr",
        "timestamp": 1647516348
    },
    {
        "content": "<p>have to say that i am really looking forward to the <code>ty::Const</code> <code>mir::ConstKind</code> split being done</p>",
        "id": 275638561,
        "sender_full_name": "lcnr",
        "timestamp": 1647516823
    },
    {
        "content": "<p>cause then we can work on constants in the type system without caring about mir n stuff</p>",
        "id": 275638698,
        "sender_full_name": "lcnr",
        "timestamp": 1647516882
    },
    {
        "content": "<p>There's still a bit I don't understand here. First I never really understood why we need to canonicalize inference variables. I just re-read <a href=\"https://rust-lang.github.io/chalk/book/canonical_queries/canonicalization.html\">this</a>, but it doesn't really explain why we need them. Afaict canonicalization is basically replacing unbound inference variables with new inference variables, why is that necessary at all?</p>",
        "id": 275640255,
        "sender_full_name": "BN",
        "timestamp": 1647517844
    },
    {
        "content": "<p>the query system isnt great at having inference vars in arguments/return types is my understanding</p>",
        "id": 275640301,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1647517883
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"326176\">Boxy [she/her]</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/eval.20in.20.60try_unify.60/near/275636201\">said</a>:</p>\n<blockquote>\n<p>when we equate two consts to i think we replace inference vars with the <code>for&lt;T&gt;</code> stuff</p>\n</blockquote>\n<p>and then specifically in the context of equating consts</p>",
        "id": 275640321,
        "sender_full_name": "BN",
        "timestamp": 1647517894
    },
    {
        "content": "<p>(all the ices in <a href=\"https://github.com/rust-lang/rust/issues/88166\">#88166</a> are caused by inference vars in query args is my understanding)</p>",
        "id": 275640410,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1647517933
    },
    {
        "content": "<p>so using <code>?n</code> for some inference var and <code>^n</code> for a bound var</p>",
        "id": 275641154,
        "sender_full_name": "lcnr",
        "timestamp": 1647518402
    },
    {
        "content": "<p>let's say we want to check whether <code>Vec&lt;?13&gt;: Trait&lt;?4&gt;</code> holds</p>",
        "id": 275641319,
        "sender_full_name": "lcnr",
        "timestamp": 1647518456
    },
    {
        "content": "<p>ideally, we're able to evaluate this once and put it inside of a cache</p>",
        "id": 275641354,
        "sender_full_name": "lcnr",
        "timestamp": 1647518476
    },
    {
        "content": "<p>as we don't know anything about <code>?13</code> and <code>?4</code> we also want that result to apply to <code>Vec&lt;?19&gt;: Trait&lt;?7&gt;</code></p>",
        "id": 275641480,
        "sender_full_name": "lcnr",
        "timestamp": 1647518531
    },
    {
        "content": "<p>so, like, knowing that this holds for <code>?13</code> and <code>?4</code> is equivalent to knowing the result for all possible types instead of <code>?13</code> and <code>?4</code> (except for ambiguous results,  in that case <code>Vec&lt;u32&gt;: Trait&lt;?19&gt;</code> may have a different result). But both \"this doesn't hold\" and \"this holds\" applies to all possible inputs if it applies for <code>?13</code> and <code>?4</code></p>",
        "id": 275641730,
        "sender_full_name": "lcnr",
        "timestamp": 1647518681
    },
    {
        "content": "<p>so we convert <code>Vec&lt;?13&gt;: Trait&lt;?4&gt;</code> to some canonical form, which is <code>for&lt;^0, ^1&gt; Vec&lt;^0&gt;: Trait&lt;^1&gt;</code> (where the outer binder is implicit, because <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span>)</p>",
        "id": 275641882,
        "sender_full_name": "lcnr",
        "timestamp": 1647518764
    },
    {
        "content": "<p>ok thanks a lot. that makes sense</p>",
        "id": 275642245,
        "sender_full_name": "BN",
        "timestamp": 1647518983
    },
    {
        "content": "<p><del>inside of the query, we then replace <code>^0, ^1</code> with new inference variables. We do this so that if by searching for a result to <code>for&lt;^0, ^1&gt; Vec&lt;^0&gt;: Trait&lt;^1&gt;</code> we might figure out that <code>^1</code> HAS to be <code>u32</code></del></p>",
        "id": 275642273,
        "sender_full_name": "lcnr",
        "timestamp": 1647519001
    },
    {
        "content": "<p>In what way do we unify lazily now?</p>",
        "id": 275642455,
        "sender_full_name": "BN",
        "timestamp": 1647519099
    },
    {
        "content": "<p>when unifying an unevaluated const with something else, e.g. by using <code>struct Equate</code> in the compiler, we put a <code>ConstEquate</code> obligation into the current <code>FulfillmentContext</code> which we then try to prove later</p>",
        "id": 275642974,
        "sender_full_name": "lcnr",
        "timestamp": 1647519428
    },
    {
        "content": "<p>but we start by pretending like <code>Unevaluated</code> constants always unify successfully</p>",
        "id": 275642982,
        "sender_full_name": "lcnr",
        "timestamp": 1647519442
    },
    {
        "content": "<p>ah yes. And why do we want to remove this now?</p>",
        "id": 275643183,
        "sender_full_name": "BN",
        "timestamp": 1647519577
    },
    {
        "content": "<p>did i say in this thread that we want to remove it? <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 275643647,
        "sender_full_name": "lcnr",
        "timestamp": 1647519831
    },
    {
        "content": "<p>i want to remove it because it is unnecessary and adds additional complexity</p>",
        "id": 275643749,
        "sender_full_name": "lcnr",
        "timestamp": 1647519881
    },
    {
        "content": "<p>or at least mostly unnecessary</p>",
        "id": 275643768,
        "sender_full_name": "lcnr",
        "timestamp": 1647519892
    },
    {
        "content": "<p>so I would prefer to remove it and then add it back once we have some examples where it is needed</p>",
        "id": 275643810,
        "sender_full_name": "lcnr",
        "timestamp": 1647519912
    },
    {
        "content": "<p>instead of keeping it around rn while being unable to deal with hrtb</p>",
        "id": 275643839,
        "sender_full_name": "lcnr",
        "timestamp": 1647519933
    },
    {
        "content": "<p>we wouldnt be able to do the stalling on inference vars if theres no obligation <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 275643840,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1647519934
    },
    {
        "content": "<p>that's true, though tbf I don't want to stall on inference vars if we can avoid it <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 275644078,
        "sender_full_name": "lcnr",
        "timestamp": 1647520075
    },
    {
        "content": "<p>I think it would be nice if we could check for infer vars in the <code>const_eval_resolve</code> query and return <code>Err(TooGeneric)</code> there instead of returning <code>false</code> in <code>try_unify_abstract_consts</code> if either constant contains inference variables. Unfortunately the <code>canonicalize_query</code> call in <code>try_unify_abstract_consts</code> kind of messes this up in that <code>ct.substs: [^0]</code> does not contain infer vars according to <code>has_infer_types_or_consts</code>.  What type flags would we need to check for here instead?</p>",
        "id": 276029649,
        "sender_full_name": "BN",
        "timestamp": 1647858103
    },
    {
        "content": "<p>The following (minimized) test still fails with a cycle error:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">marker</span>::<span class=\"n\">PhantomData</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">TensorDimension</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">DIM</span><span class=\"w\"> </span>: <span class=\"kt\">usize</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">TensorSize</span><span class=\"w\"> </span>: <span class=\"nc\">TensorDimension</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">size</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"p\">[</span><span class=\"kt\">usize</span><span class=\"p\">;</span><span class=\"bp\">Self</span>::<span class=\"n\">DIM</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">LazyUpdim</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"w\"> </span>: <span class=\"nc\">TensorSize</span><span class=\"p\">,</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">OLDDIM</span><span class=\"w\"> </span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">DIM</span><span class=\"w\"> </span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">size</span><span class=\"w\"> </span>: <span class=\"p\">[</span><span class=\"kt\">usize</span><span class=\"p\">;</span><span class=\"n\">DIM</span><span class=\"p\">],</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">phantom</span>: <span class=\"nc\">PhantomData</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"w\"> </span>: <span class=\"nc\">TensorSize</span><span class=\"p\">,</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">DIM</span><span class=\"w\"> </span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">TensorDimension</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">LazyUpdim</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,{</span><span class=\"n\">T</span>::<span class=\"n\">DIM</span><span class=\"p\">},</span><span class=\"n\">DIM</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">DIM</span><span class=\"w\"> </span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">DIM</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"w\"> </span>: <span class=\"nc\">TensorSize</span><span class=\"p\">,</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">DIM</span><span class=\"w\"> </span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">TensorSize</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">LazyUpdim</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,{</span><span class=\"n\">T</span>::<span class=\"n\">DIM</span><span class=\"p\">},</span><span class=\"n\">DIM</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">size</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"p\">[</span><span class=\"kt\">usize</span><span class=\"p\">;</span><span class=\"n\">DIM</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0391</span><span class=\"p\">]</span>: <span class=\"nc\">cycle</span><span class=\"w\"> </span><span class=\"n\">detected</span><span class=\"w\"> </span><span class=\"n\">when</span><span class=\"w\"> </span><span class=\"n\">resolving</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">&lt;</span><span class=\"n\">LazyUpdim</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">T</span>::<span class=\"n\">DIM</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">DIM</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">TensorDimension</span><span class=\"o\">&gt;</span>::<span class=\"n\">DIM</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">src</span><span class=\"o\">/</span><span class=\"n\">test</span><span class=\"o\">/</span><span class=\"n\">ui</span><span class=\"o\">/</span><span class=\"k\">const</span><span class=\"o\">-</span><span class=\"n\">generics</span><span class=\"o\">/</span><span class=\"n\">issues</span><span class=\"o\">/</span><span class=\"n\">issue</span><span class=\"o\">-</span><span class=\"mf\">83765.</span><span class=\"n\">rs</span>:<span class=\"mi\">7</span>:<span class=\"mi\">5</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">DIM</span><span class=\"w\"> </span>: <span class=\"kt\">usize</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"o\">^^^^^^^^^^^^^^^^^^</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"n\">note</span>: <span class=\"o\">..</span><span class=\"p\">.</span><span class=\"n\">which</span><span class=\"w\"> </span><span class=\"n\">requires</span><span class=\"w\"> </span><span class=\"n\">checking</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">TensorDimension</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">fulfills</span><span class=\"w\"> </span><span class=\"n\">its</span><span class=\"w\"> </span><span class=\"n\">obligations</span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">src</span><span class=\"o\">/</span><span class=\"n\">test</span><span class=\"o\">/</span><span class=\"n\">ui</span><span class=\"o\">/</span><span class=\"k\">const</span><span class=\"o\">-</span><span class=\"n\">generics</span><span class=\"o\">/</span><span class=\"n\">issues</span><span class=\"o\">/</span><span class=\"n\">issue</span><span class=\"o\">-</span><span class=\"mf\">83765.</span><span class=\"n\">rs</span>:<span class=\"mi\">6</span>:<span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">TensorDimension</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">^^^^^^^^^^^^^^^^^^^^^</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"o\">..</span><span class=\"p\">.</span><span class=\"n\">which</span><span class=\"w\"> </span><span class=\"n\">again</span><span class=\"w\"> </span><span class=\"n\">requires</span><span class=\"w\"> </span><span class=\"n\">resolving</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">&lt;</span><span class=\"n\">LazyUpdim</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">T</span>::<span class=\"n\">DIM</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">DIM</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">TensorDimension</span><span class=\"o\">&gt;</span>::<span class=\"n\">DIM</span><span class=\"err\">`</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">completing</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">cycle</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">cycle</span><span class=\"w\"> </span><span class=\"n\">used</span><span class=\"w\"> </span><span class=\"n\">when</span><span class=\"w\"> </span><span class=\"n\">normalizing</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">&lt;</span><span class=\"n\">LazyUpdim</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">T</span>::<span class=\"n\">DIM</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">DIM</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">TensorDimension</span><span class=\"o\">&gt;</span>::<span class=\"n\">DIM</span><span class=\"err\">`</span><span class=\"w\"></span>\n\n<span class=\"n\">error</span>: <span class=\"nc\">aborting</span><span class=\"w\"> </span><span class=\"n\">due</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">previous</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"></span>\n</code></pre></div>\n<p>When we try to equate <code>DIM</code> with <code>Self::DIM</code> in the return type of <code>TensorSize::size</code>, we try to resolve <code>TensorSize::size::constant#0</code> and wind up with the following resolve attempt:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"err\">│</span><span class=\"w\"> </span><span class=\"err\">│</span><span class=\"w\"> </span><span class=\"err\">├─┐</span><span class=\"n\">rustc_ty_utils</span>::<span class=\"n\">instance</span>::<span class=\"n\">resolve_instance</span><span class=\"w\"> </span><span class=\"n\">key</span><span class=\"o\">=</span><span class=\"n\">ParamEnvAnd</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">param_env</span>: <span class=\"nc\">ParamEnv</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">caller_bounds</span>: <span class=\"p\">[</span><span class=\"n\">Binder</span><span class=\"p\">(</span><span class=\"n\">ConstEvaluatable</span><span class=\"p\">(</span><span class=\"n\">WithOptConstParam</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">did</span>: <span class=\"nc\">DefId</span><span class=\"p\">(</span><span class=\"mi\">0</span>:<span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"o\">~</span><span class=\"w\"> </span><span class=\"n\">issue_83765</span><span class=\"p\">[</span><span class=\"n\">c100</span><span class=\"p\">]</span>::<span class=\"n\">TensorSize</span>::<span class=\"n\">size</span>::<span class=\"p\">{</span><span class=\"n\">constant</span>#<span class=\"mi\">0</span><span class=\"p\">}),</span><span class=\"w\"> </span><span class=\"n\">const_param_did</span>: <span class=\"nb\">None</span> <span class=\"p\">},</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">LazyUpdim</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">T</span>::<span class=\"n\">DIM</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">DIM</span><span class=\"o\">&gt;</span><span class=\"p\">]),</span><span class=\"w\"> </span><span class=\"p\">[]),</span><span class=\"w\"> </span><span class=\"n\">Binder</span><span class=\"p\">(</span><span class=\"n\">ConstEvaluatable</span><span class=\"p\">(</span><span class=\"n\">WithOptConstParam</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">did</span>: <span class=\"nc\">DefId</span><span class=\"p\">(</span><span class=\"mi\">0</span>:<span class=\"mi\">26</span><span class=\"w\"> </span><span class=\"o\">~</span><span class=\"w\"> </span><span class=\"n\">issue_83765</span><span class=\"p\">[</span><span class=\"n\">c100</span><span class=\"p\">]</span>::<span class=\"p\">{</span><span class=\"k\">impl</span>#<span class=\"mi\">1</span><span class=\"p\">}</span>::<span class=\"p\">{</span><span class=\"n\">constant</span>#<span class=\"mi\">0</span><span class=\"p\">}),</span><span class=\"w\"> </span><span class=\"n\">const_param_did</span>: <span class=\"nb\">None</span> <span class=\"p\">},</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Const</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">ty</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">val</span>: <span class=\"nc\">Param</span><span class=\"p\">(</span><span class=\"n\">DIM</span><span class=\"o\">/</span>#<span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}]),</span><span class=\"w\"> </span><span class=\"p\">[]),</span><span class=\"w\"> </span><span class=\"n\">Binder</span><span class=\"p\">(</span><span class=\"n\">TraitPredicate</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">TensorSize</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">polarity</span>:<span class=\"nc\">Positive</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"p\">[]),</span><span class=\"w\"> </span><span class=\"n\">Binder</span><span class=\"p\">(</span><span class=\"n\">TraitPredicate</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">TensorDimension</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">polarity</span>:<span class=\"nc\">Positive</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"p\">[]),</span><span class=\"w\"> </span><span class=\"n\">Binder</span><span class=\"p\">(</span><span class=\"n\">TraitPredicate</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">marker</span>::<span class=\"nb\">Sized</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">polarity</span>:<span class=\"nc\">Positive</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"p\">[])],</span><span class=\"w\"> </span><span class=\"n\">reveal</span>: <span class=\"nc\">All</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">constness</span>: <span class=\"nc\">NotConst</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">value</span>: <span class=\"p\">(</span><span class=\"n\">DefId</span><span class=\"p\">(</span><span class=\"mi\">0</span>:<span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"o\">~</span><span class=\"w\"> </span><span class=\"n\">issue_83765</span><span class=\"p\">[</span><span class=\"n\">c100</span><span class=\"p\">]</span>::<span class=\"n\">TensorDimension</span>::<span class=\"n\">DIM</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">LazyUpdim</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">T</span>::<span class=\"n\">DIM</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">DIM</span><span class=\"o\">&gt;</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>but then when we try to process changed obligations during <code>resolve_associated_item</code> we try to prove:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"err\">│</span><span class=\"w\"> </span><span class=\"err\">│</span><span class=\"w\"> </span><span class=\"err\">│</span><span class=\"w\"> </span><span class=\"err\">│</span><span class=\"w\"> </span><span class=\"err\">│</span><span class=\"w\"> </span><span class=\"err\">│</span><span class=\"w\"> </span><span class=\"err\">│</span><span class=\"w\"> </span><span class=\"err\">├─</span><span class=\"mi\">0</span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"n\">DEBUG</span><span class=\"w\"> </span><span class=\"n\">rustc_trait_selection</span>::<span class=\"n\">traits</span>::<span class=\"n\">fulfill</span><span class=\"w\"> </span><span class=\"n\">ConstEval</span><span class=\"p\">(</span><span class=\"n\">Unevaluated</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">def</span>: <span class=\"nc\">WithOptConstParam</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">did</span>: <span class=\"nc\">DefId</span><span class=\"p\">(</span><span class=\"mi\">0</span>:<span class=\"mi\">21</span><span class=\"w\"> </span><span class=\"o\">~</span><span class=\"w\"> </span><span class=\"n\">issue_83765</span><span class=\"p\">[</span><span class=\"n\">c100</span><span class=\"p\">]</span>::<span class=\"p\">{</span><span class=\"k\">impl</span>#<span class=\"mi\">0</span><span class=\"p\">}</span>::<span class=\"p\">{</span><span class=\"n\">constant</span>#<span class=\"mi\">0</span><span class=\"p\">}),</span><span class=\"w\"> </span><span class=\"n\">const_param_did</span>: <span class=\"nb\">None</span> <span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">substs</span>: <span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Const</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">ty</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">val</span>: <span class=\"nc\">Param</span><span class=\"p\">(</span><span class=\"n\">DIM</span><span class=\"o\">/</span>#<span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}],</span><span class=\"w\"> </span><span class=\"n\">promoted</span>: <span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"err\">│</span><span class=\"w\"> </span><span class=\"err\">│</span><span class=\"w\"> </span><span class=\"err\">│</span><span class=\"w\"> </span><span class=\"err\">│</span><span class=\"w\"> </span><span class=\"err\">│</span><span class=\"w\"> </span><span class=\"err\">│</span><span class=\"w\"> </span><span class=\"err\">│</span><span class=\"w\"> </span><span class=\"err\">├─┐</span><span class=\"n\">rustc_trait_selection</span>::<span class=\"n\">traits</span>::<span class=\"n\">const_evaluatable</span>::<span class=\"n\">is_const_evaluatable</span><span class=\"w\"> </span><span class=\"n\">uv</span><span class=\"o\">=</span><span class=\"n\">Unevaluated</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">def</span>: <span class=\"nc\">WithOptConstParam</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">did</span>: <span class=\"nc\">DefId</span><span class=\"p\">(</span><span class=\"mi\">0</span>:<span class=\"mi\">21</span><span class=\"w\"> </span><span class=\"o\">~</span><span class=\"w\"> </span><span class=\"n\">issue_83765</span><span class=\"p\">[</span><span class=\"n\">c100</span><span class=\"p\">]</span>::<span class=\"p\">{</span><span class=\"k\">impl</span>#<span class=\"mi\">0</span><span class=\"p\">}</span>::<span class=\"p\">{</span><span class=\"n\">constant</span>#<span class=\"mi\">0</span><span class=\"p\">}),</span><span class=\"w\"> </span><span class=\"n\">const_param_did</span>: <span class=\"nb\">None</span> <span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">substs</span>: <span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Const</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">ty</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">val</span>: <span class=\"nc\">Param</span><span class=\"p\">(</span><span class=\"n\">DIM</span><span class=\"o\">/</span>#<span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}],</span><span class=\"w\"> </span><span class=\"n\">promoted</span>: <span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">param_env</span><span class=\"o\">=</span><span class=\"n\">ParamEnv</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">caller_bounds</span>: <span class=\"p\">[</span><span class=\"n\">Binder</span><span class=\"p\">(</span><span class=\"n\">ConstEvaluatable</span><span class=\"p\">(</span><span class=\"n\">WithOptConstParam</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">did</span>: <span class=\"nc\">DefId</span><span class=\"p\">(</span><span class=\"mi\">0</span>:<span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"o\">~</span><span class=\"w\"> </span><span class=\"n\">issue_83765</span><span class=\"p\">[</span><span class=\"n\">c100</span><span class=\"p\">]</span>::<span class=\"n\">TensorSize</span>::<span class=\"n\">size</span>::<span class=\"p\">{</span><span class=\"n\">constant</span>#<span class=\"mi\">0</span><span class=\"p\">}),</span><span class=\"w\"> </span><span class=\"n\">const_param_did</span>: <span class=\"nb\">None</span> <span class=\"p\">},</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">LazyUpdim</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">T</span>::<span class=\"n\">DIM</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">DIM</span><span class=\"o\">&gt;</span><span class=\"p\">]),</span><span class=\"w\"> </span><span class=\"p\">[]),</span><span class=\"w\"> </span><span class=\"n\">Binder</span><span class=\"p\">(</span><span class=\"n\">ConstEvaluatable</span><span class=\"p\">(</span><span class=\"n\">WithOptConstParam</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">did</span>: <span class=\"nc\">DefId</span><span class=\"p\">(</span><span class=\"mi\">0</span>:<span class=\"mi\">26</span><span class=\"w\"> </span><span class=\"o\">~</span><span class=\"w\"> </span><span class=\"n\">issue_83765</span><span class=\"p\">[</span><span class=\"n\">c100</span><span class=\"p\">]</span>::<span class=\"p\">{</span><span class=\"k\">impl</span>#<span class=\"mi\">1</span><span class=\"p\">}</span>::<span class=\"p\">{</span><span class=\"n\">constant</span>#<span class=\"mi\">0</span><span class=\"p\">}),</span><span class=\"w\"> </span><span class=\"n\">const_param_did</span>: <span class=\"nb\">None</span> <span class=\"p\">},</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Const</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">ty</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">val</span>: <span class=\"nc\">Param</span><span class=\"p\">(</span><span class=\"n\">DIM</span><span class=\"o\">/</span>#<span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}]),</span><span class=\"w\"> </span><span class=\"p\">[]),</span><span class=\"w\"> </span><span class=\"n\">Binder</span><span class=\"p\">(</span><span class=\"n\">TraitPredicate</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">TensorSize</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">polarity</span>:<span class=\"nc\">Positive</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"p\">[]),</span><span class=\"w\"> </span><span class=\"n\">Binder</span><span class=\"p\">(</span><span class=\"n\">TraitPredicate</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">TensorDimension</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">polarity</span>:<span class=\"nc\">Positive</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"p\">[]),</span><span class=\"w\"> </span><span class=\"n\">Binder</span><span class=\"p\">(</span><span class=\"n\">TraitPredicate</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">marker</span>::<span class=\"nb\">Sized</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">polarity</span>:<span class=\"nc\">Positive</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"p\">[])],</span><span class=\"w\"> </span><span class=\"n\">reveal</span>: <span class=\"nc\">All</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">constness</span>: <span class=\"nc\">NotConst</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">span</span><span class=\"o\">=</span><span class=\"n\">no</span><span class=\"o\">-</span><span class=\"n\">location</span><span class=\"w\"> </span><span class=\"p\">(</span>#<span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and try to unify the following:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"err\">│</span><span class=\"w\"> </span><span class=\"err\">│</span><span class=\"w\"> </span><span class=\"err\">│</span><span class=\"w\"> </span><span class=\"err\">│</span><span class=\"w\"> </span><span class=\"err\">│</span><span class=\"w\"> </span><span class=\"err\">│</span><span class=\"w\"> </span><span class=\"err\">│</span><span class=\"w\"> </span><span class=\"err\">│</span><span class=\"w\"> </span><span class=\"err\">│</span><span class=\"w\"> </span><span class=\"err\">├─┐</span><span class=\"n\">rustc_trait_selection</span>::<span class=\"n\">traits</span>::<span class=\"n\">const_evaluatable</span>::<span class=\"n\">try_unify</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">=</span><span class=\"n\">AbstractConst</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">inner</span>: <span class=\"p\">[</span><span class=\"n\">Leaf</span><span class=\"p\">(</span><span class=\"n\">Const</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">ty</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">val</span>: <span class=\"nc\">Unevaluated</span><span class=\"p\">(</span><span class=\"n\">Unevaluated</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">def</span>: <span class=\"nc\">WithOptConstParam</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">did</span>: <span class=\"nc\">DefId</span><span class=\"p\">(</span><span class=\"mi\">0</span>:<span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"o\">~</span><span class=\"w\"> </span><span class=\"n\">issue_83765</span><span class=\"p\">[</span><span class=\"n\">c100</span><span class=\"p\">]</span>::<span class=\"n\">TensorDimension</span>::<span class=\"n\">DIM</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">const_param_did</span>: <span class=\"nb\">None</span> <span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">substs</span>: <span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">promoted</span>: <span class=\"nb\">None</span> <span class=\"p\">})</span><span class=\"w\"> </span><span class=\"p\">})],</span><span class=\"w\"> </span><span class=\"n\">substs</span>: <span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Const</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">ty</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">val</span>: <span class=\"nc\">Param</span><span class=\"p\">(</span><span class=\"n\">DIM</span><span class=\"o\">/</span>#<span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}]</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">=</span><span class=\"n\">AbstractConst</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">inner</span>: <span class=\"p\">[</span><span class=\"n\">Leaf</span><span class=\"p\">(</span><span class=\"n\">Const</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">ty</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">val</span>: <span class=\"nc\">Unevaluated</span><span class=\"p\">(</span><span class=\"n\">Unevaluated</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">def</span>: <span class=\"nc\">WithOptConstParam</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">did</span>: <span class=\"nc\">DefId</span><span class=\"p\">(</span><span class=\"mi\">0</span>:<span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"o\">~</span><span class=\"w\"> </span><span class=\"n\">issue_83765</span><span class=\"p\">[</span><span class=\"n\">c100</span><span class=\"p\">]</span>::<span class=\"n\">TensorDimension</span>::<span class=\"n\">DIM</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">const_param_did</span>: <span class=\"nb\">None</span> <span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">substs</span>: <span class=\"p\">[</span><span class=\"bp\">Self</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">promoted</span>: <span class=\"nb\">None</span> <span class=\"p\">})</span><span class=\"w\"> </span><span class=\"p\">})],</span><span class=\"w\"> </span><span class=\"n\">substs</span>: <span class=\"p\">[</span><span class=\"n\">LazyUpdim</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">T</span>::<span class=\"n\">DIM</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">DIM</span><span class=\"o\">&gt;</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">param_env</span><span class=\"o\">=</span><span class=\"n\">ParamEnv</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">caller_bounds</span>: <span class=\"p\">[</span><span class=\"n\">Binder</span><span class=\"p\">(</span><span class=\"n\">ConstEvaluatable</span><span class=\"p\">(</span><span class=\"n\">WithOptConstParam</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">did</span>: <span class=\"nc\">DefId</span><span class=\"p\">(</span><span class=\"mi\">0</span>:<span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"o\">~</span><span class=\"w\"> </span><span class=\"n\">issue_83765</span><span class=\"p\">[</span><span class=\"n\">c100</span><span class=\"p\">]</span>::<span class=\"n\">TensorSize</span>::<span class=\"n\">size</span>::<span class=\"p\">{</span><span class=\"n\">constant</span>#<span class=\"mi\">0</span><span class=\"p\">}),</span><span class=\"w\"> </span><span class=\"n\">const_param_did</span>: <span class=\"nb\">None</span> <span class=\"p\">},</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">LazyUpdim</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">T</span>::<span class=\"n\">DIM</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">DIM</span><span class=\"o\">&gt;</span><span class=\"p\">]),</span><span class=\"w\"> </span><span class=\"p\">[]),</span><span class=\"w\"> </span><span class=\"n\">Binder</span><span class=\"p\">(</span><span class=\"n\">ConstEvaluatable</span><span class=\"p\">(</span><span class=\"n\">WithOptConstParam</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">did</span>: <span class=\"nc\">DefId</span><span class=\"p\">(</span><span class=\"mi\">0</span>:<span class=\"mi\">26</span><span class=\"w\"> </span><span class=\"o\">~</span><span class=\"w\"> </span><span class=\"n\">issue_83765</span><span class=\"p\">[</span><span class=\"n\">c100</span><span class=\"p\">]</span>::<span class=\"p\">{</span><span class=\"k\">impl</span>#<span class=\"mi\">1</span><span class=\"p\">}</span>::<span class=\"p\">{</span><span class=\"n\">constant</span>#<span class=\"mi\">0</span><span class=\"p\">}),</span><span class=\"w\"> </span><span class=\"n\">const_param_did</span>: <span class=\"nb\">None</span> <span class=\"p\">},</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Const</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">ty</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">val</span>: <span class=\"nc\">Param</span><span class=\"p\">(</span><span class=\"n\">DIM</span><span class=\"o\">/</span>#<span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}]),</span><span class=\"w\"> </span><span class=\"p\">[]),</span><span class=\"w\"> </span><span class=\"n\">Binder</span><span class=\"p\">(</span><span class=\"n\">TraitPredicate</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">TensorSize</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">polarity</span>:<span class=\"nc\">Positive</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"p\">[]),</span><span class=\"w\"> </span><span class=\"n\">Binder</span><span class=\"p\">(</span><span class=\"n\">TraitPredicate</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">TensorDimension</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">polarity</span>:<span class=\"nc\">Positive</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"p\">[]),</span><span class=\"w\"> </span><span class=\"n\">Binder</span><span class=\"p\">(</span><span class=\"n\">TraitPredicate</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">marker</span>::<span class=\"nb\">Sized</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">polarity</span>:<span class=\"nc\">Positive</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"p\">[])],</span><span class=\"w\"> </span><span class=\"n\">reveal</span>: <span class=\"nc\">All</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">constness</span>: <span class=\"nc\">NotConst</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and since we evaluate now in <code>try_unify</code> we wind up with a cycle when trying to evaluate:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"err\">│</span><span class=\"w\"> </span><span class=\"err\">│</span><span class=\"w\"> </span><span class=\"err\">│</span><span class=\"w\"> </span><span class=\"err\">│</span><span class=\"w\"> </span><span class=\"err\">│</span><span class=\"w\"> </span><span class=\"err\">│</span><span class=\"w\"> </span><span class=\"err\">│</span><span class=\"w\"> </span><span class=\"err\">│</span><span class=\"w\"> </span><span class=\"err\">│</span><span class=\"w\"> </span><span class=\"err\">│</span><span class=\"w\"> </span><span class=\"err\">├─</span><span class=\"mi\">0</span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"n\">DEBUG</span><span class=\"w\"> </span><span class=\"n\">rustc_trait_selection</span>::<span class=\"n\">traits</span>::<span class=\"n\">const_evaluatable</span><span class=\"w\"> </span><span class=\"n\">a_root</span><span class=\"o\">=</span><span class=\"n\">Leaf</span><span class=\"p\">(</span><span class=\"n\">Const</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">ty</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">val</span>: <span class=\"nc\">Unevaluated</span><span class=\"p\">(</span><span class=\"n\">Unevaluated</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">def</span>: <span class=\"nc\">WithOptConstParam</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">did</span>: <span class=\"nc\">DefId</span><span class=\"p\">(</span><span class=\"mi\">0</span>:<span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"o\">~</span><span class=\"w\"> </span><span class=\"n\">issue_83765</span><span class=\"p\">[</span><span class=\"n\">c100</span><span class=\"p\">]</span>::<span class=\"n\">TensorDimension</span>::<span class=\"n\">DIM</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">const_param_did</span>: <span class=\"nb\">None</span> <span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">substs</span>: <span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">promoted</span>: <span class=\"nb\">None</span> <span class=\"p\">})</span><span class=\"w\"> </span><span class=\"p\">}),</span><span class=\"w\"> </span><span class=\"n\">b_root</span><span class=\"o\">=</span><span class=\"n\">Leaf</span><span class=\"p\">(</span><span class=\"n\">Const</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">ty</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">val</span>: <span class=\"nc\">Unevaluated</span><span class=\"p\">(</span><span class=\"n\">Unevaluated</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">def</span>: <span class=\"nc\">WithOptConstParam</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">did</span>: <span class=\"nc\">DefId</span><span class=\"p\">(</span><span class=\"mi\">0</span>:<span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"o\">~</span><span class=\"w\"> </span><span class=\"n\">issue_83765</span><span class=\"p\">[</span><span class=\"n\">c100</span><span class=\"p\">]</span>::<span class=\"n\">TensorDimension</span>::<span class=\"n\">DIM</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">const_param_did</span>: <span class=\"nb\">None</span> <span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">substs</span>: <span class=\"p\">[</span><span class=\"n\">LazyUpdim</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">T</span>::<span class=\"n\">DIM</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">DIM</span><span class=\"o\">&gt;</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">promoted</span>: <span class=\"nb\">None</span> <span class=\"p\">})</span><span class=\"w\"> </span><span class=\"p\">})</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 276043872,
        "sender_full_name": "BN",
        "timestamp": 1647866464
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"328097\">BN</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/eval.20in.20.60try_unify.60/near/276029649\">said</a>:</p>\n<blockquote>\n<p>I think it would be nice if we could check for infer vars in the <code>const_eval_resolve</code> query and return <code>Err(TooGeneric)</code> there instead of returning <code>false</code> in <code>try_unify_abstract_consts</code> if either constant contains inference variables. Unfortunately the <code>canonicalize_query</code> call in <code>try_unify_abstract_consts</code> kind of messes this up in that <code>ct.substs: [^0]</code> does not contain infer vars according to <code>has_infer_types_or_consts</code>.  What type flags would we need to check for here instead?</p>\n</blockquote>\n<p>we cannot  check for infer vars inside of a query because calling a query with infer vars causes an ICE. Infer vars should never leak from the current <code>InferCtxt</code> even if we don't care about them (because in that case they still have a horrible impact on caching)</p>",
        "id": 276050032,
        "sender_full_name": "lcnr",
        "timestamp": 1647869266
    },
    {
        "content": "<p>you could add a function to <code>TyCtxt</code> which checks for infer vars and only calls the query if there aren't any</p>",
        "id": 276050117,
        "sender_full_name": "lcnr",
        "timestamp": 1647869294
    },
    {
        "content": "<blockquote>\n<p>The following (minimized) test still fails with a cycle error:</p>\n</blockquote>\n<p>can you try it with <code>-Ztreat-err-as-bug</code> and then paste the ICE. tbh cycles here aren't too surprising in general, so I don't mind this breaking</p>",
        "id": 276050557,
        "sender_full_name": "lcnr",
        "timestamp": 1647869532
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/59WBjh3TIaKbHPBaQ3XC-YTf/cycle_error.txt\">cycle_error.txt</a></p>",
        "id": 276051206,
        "sender_full_name": "BN",
        "timestamp": 1647869854
    },
    {
        "content": "<p>yeah, didn't look into this too deeply, but that cycle is expected for now</p>",
        "id": 276051837,
        "sender_full_name": "lcnr",
        "timestamp": 1647870154
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">TensorSize</span><span class=\"w\"> </span>: <span class=\"nc\">TensorDimension</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">size</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"p\">[</span><span class=\"kt\">usize</span><span class=\"p\">;</span><span class=\"bp\">Self</span>::<span class=\"n\">DIM</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 276051860,
        "sender_full_name": "lcnr",
        "timestamp": 1647870165
    },
    {
        "content": "<p>to check that the <code>TensorSize</code> trait is well formed, we have check all its bounds, including the implicit <code>ConstEvaluatable({ Self::DIM })</code> bound</p>",
        "id": 276051960,
        "sender_full_name": "lcnr",
        "timestamp": 1647870215
    },
    {
        "content": "<p>so if <code>TensorDimension</code> and <code>TensorSize</code> are the same trait, that's trivial as:<br>\nwhen checking that <code>{ Self::DIM }</code> is const evaluatable, we check that <code>Self::DIM</code> is well formed, for that we would have to check that <code>Self: TensorSize</code> is well formed. That currently also requires us to prove all bounds of <code>TensorSize</code>, meanign that we again have to check <code>ConstEvaluatable({ Self::DIM })</code>, causing a cycle</p>",
        "id": 276052440,
        "sender_full_name": "lcnr",
        "timestamp": 1647870405
    },
    {
        "content": "<p>it seems to me like when slippy associated consts and use into two traits, this cycle only happens for impls, e.g. when checking that <code> LazyUpdim&lt;T,{T::DIM},DIM&gt;: TensorSize</code> holds</p>",
        "id": 276052584,
        "sender_full_name": "lcnr",
        "timestamp": 1647870466
    },
    {
        "content": "<p>so yeah, that cycle looks expected to me and requires some bigger changes to rustc</p>",
        "id": 276052657,
        "sender_full_name": "lcnr",
        "timestamp": 1647870488
    },
    {
        "content": "<p>if the test already exists in our suite, add a <code>FIXME</code> and accept the cycle, if not please open an issue about it to track this '^^</p>",
        "id": 276052711,
        "sender_full_name": "lcnr",
        "timestamp": 1647870511
    }
]