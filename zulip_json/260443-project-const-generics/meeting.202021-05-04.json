[
    {
        "content": "<p>Meeting in 30 minutes</p>",
        "id": 237331147,
        "sender_full_name": "lcnr",
        "timestamp": 1620137483
    },
    {
        "content": "<p>I would like to (ab)use this meeting to quickly get some looks at <a href=\"https://github.com/rust-lang/rust/issues/84838\">#84838</a> on whether the impl seems acceptable (with <code>marker_trait_attr</code> instead of the auto trait hack which doesn't work)</p>",
        "id": 237331988,
        "sender_full_name": "lcnr",
        "timestamp": 1620137830
    },
    {
        "content": "<p>apart from this we probably want to continue with the last meeting <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> going to do some prep work now</p>",
        "id": 237332049,
        "sender_full_name": "lcnr",
        "timestamp": 1620137868
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"3805\">@project-const-generics</span> is it time? it is time!</p>",
        "id": 237336705,
        "sender_full_name": "lcnr",
        "timestamp": 1620139541
    },
    {
        "content": "<p>wave</p>",
        "id": 237337046,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620139664
    },
    {
        "content": "<p>I've been avoiding lookng at <a href=\"https://github.com/rust-lang/rust/issues/84838\">#84838</a> :) let me take a look</p>",
        "id": 237337140,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620139689
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> want to start by quickly looking at <a href=\"https://github.com/rust-lang/rust/issues/84838\">#84838</a></p>",
        "id": 237337141,
        "sender_full_name": "lcnr",
        "timestamp": 1620139689
    },
    {
        "content": "<p>^^</p>",
        "id": 237337151,
        "sender_full_name": "lcnr",
        "timestamp": 1620139695
    },
    {
        "content": "<p>the description still mentions auto traits, but that won't work as we now know :p</p>",
        "id": 237337214,
        "sender_full_name": "lcnr",
        "timestamp": 1620139722
    },
    {
        "content": "<p>so...</p>",
        "id": 237337580,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620139864
    },
    {
        "content": "<p>we're adding a kind of intrinsic <code>array_default_hack</code>?</p>",
        "id": 237337625,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620139883
    },
    {
        "content": "<p>a lang item ^^ yeah</p>",
        "id": 237337657,
        "sender_full_name": "lcnr",
        "timestamp": 1620139896
    },
    {
        "content": "<p>why not just do...</p>",
        "id": 237337703,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620139913
    },
    {
        "content": "<p>hmm, I have some mild concerns :)</p>",
        "id": 237337791,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620139935
    },
    {
        "content": "<p>so, the idea here is ultimately to create a specialized version</p>",
        "id": 237337828,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620139950
    },
    {
        "content": "<p>(right?)</p>",
        "id": 237337838,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620139955
    },
    {
        "content": "<p>yes, specialize for <code>N != 0</code> / <code>T: Default</code></p>",
        "id": 237337884,
        "sender_full_name": "lcnr",
        "timestamp": 1620139974
    },
    {
        "content": "<p>ok so I'm thinking</p>",
        "id": 237338780,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620140193
    },
    {
        "content": "<p>i was going to suggest doing something like</p>",
        "id": 237338790,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620140196
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">ArrayDefaultHack</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">make_me</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"fm\">panic!</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">Default</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">ArrayDefaultHack</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">make_me</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">[();</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">].</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">.)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 237339012,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620140264
    },
    {
        "content": "<p>although I guess you can even make it simpler</p>",
        "id": 237339144,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620140295
    },
    {
        "content": "<p><em>but</em> I realized that this impl, in its full generality, doesn't match the \"minimal specialization\" I think we will eventually get</p>",
        "id": 237339239,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620140322
    },
    {
        "content": "<p>which would work for any <code>T: Default</code> where the <code>Default</code> impl was lifetime-agnostic (which is probably all of them, but anyway)</p>",
        "id": 237339322,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620140349
    },
    {
        "content": "<p>yeah, this doesn't work with <code>min_specialization</code></p>",
        "id": 237339362,
        "sender_full_name": "lcnr",
        "timestamp": 1620140364
    },
    {
        "content": "<p>so now I'm wondering about whether these two impls would ever be accepted</p>",
        "id": 237339392,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620140379
    },
    {
        "content": "<p>plausibly</p>",
        "id": 237339455,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620140401
    },
    {
        "content": "<p>intersection impls would presumably allow it</p>",
        "id": 237339542,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620140409
    },
    {
        "content": "<p>it's definitely committing us to a more aggressive form of specialization</p>",
        "id": 237339847,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620140457
    },
    {
        "content": "<p>but one I guess we probably want</p>",
        "id": 237339887,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620140464
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-05-04/near/237339542\">said</a>:</p>\n<blockquote>\n<p>intersection impls would presumably allow it</p>\n</blockquote>\n<p>these allow an impl for <code>T: TraitA</code> and <code>T: TraitB</code> if there's also an impl for the <code>T: TraitA + TraitB</code> case?</p>",
        "id": 237339912,
        "sender_full_name": "lcnr",
        "timestamp": 1620140469
    },
    {
        "content": "<p>that's the general idea</p>",
        "id": 237339971,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620140479
    },
    {
        "content": "<p>there are other rules one might use---</p>",
        "id": 237340012,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620140486
    },
    {
        "content": "<p>for example, in this case, if you consider only their intersection, one impl is a specialization of the other</p>",
        "id": 237340320,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620140532
    },
    {
        "content": "<p>maybe we could use that to just use the <code>0</code> impl whenever it may apply</p>",
        "id": 237340565,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620140575
    },
    {
        "content": "<p>I haven't thought hard about that</p>",
        "id": 237340626,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620140586
    },
    {
        "content": "<p>ok well the PR itself I have no issue with, i think the question is how much we're willing to commit to specialization and its eventual capabilities; it's a topic I'd love to re-open (in principle)</p>",
        "id": 237341042,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620140652
    },
    {
        "content": "<p>or at least i'd like to have more of a plan</p>",
        "id": 237341081,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620140662
    },
    {
        "content": "<p>so I think that adding the generic array default impl is worth it, even if we had to permanently keep this lang item hack</p>",
        "id": 237341268,
        "sender_full_name": "lcnr",
        "timestamp": 1620140704
    },
    {
        "content": "<p>but also</p>",
        "id": 237341335,
        "sender_full_name": "lcnr",
        "timestamp": 1620140717
    },
    {
        "content": "<p><code>serde::Deserialize</code> has the same problem and can't use lang items</p>",
        "id": 237341403,
        "sender_full_name": "lcnr",
        "timestamp": 1620140730
    },
    {
        "content": "<p><a href=\"https://docs.serde.rs/serde/de/trait.Deserialize.html#impl-Deserialize%3C%27de%3E-for-%5BT%3B%200%5D\">https://docs.serde.rs/serde/de/trait.Deserialize.html#impl-Deserialize%3C%27de%3E-for-%5BT%3B%200%5D</a></p>",
        "id": 237341435,
        "sender_full_name": "lcnr",
        "timestamp": 1620140736
    },
    {
        "content": "<p>so thinking about how we want to allow this in the long term is definitely worthwhile</p>",
        "id": 237341514,
        "sender_full_name": "lcnr",
        "timestamp": 1620140754
    },
    {
        "content": "<p>it seems like it is going to come up a lot</p>",
        "id": 237341726,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620140792
    },
    {
        "content": "<p>it seems like something we could extend specialization to support without challenge</p>",
        "id": 237341858,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620140821
    },
    {
        "content": "<p>yeah, and once the generic default impl exists people can go and ask why we don't have the same impls for <code>Clone</code> or <code>Copy</code> or whatever</p>",
        "id": 237341905,
        "sender_full_name": "lcnr",
        "timestamp": 1620140831
    },
    {
        "content": "<p>i'm trying to think how to formulate my instinct of what makes the <code>; 0</code> case \"more specialized\"</p>",
        "id": 237342295,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620140905
    },
    {
        "content": "<p>it's clearly <em>not</em></p>",
        "id": 237342438,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620140935
    },
    {
        "content": "<p>well ok, I guess it's soething like this</p>",
        "id": 237342614,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620140976
    },
    {
        "content": "<p>ok so we have impl A = with default, impl B = zero length</p>",
        "id": 237342889,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620141028
    },
    {
        "content": "<p>yeah. ok. I can't come up with a way to formulate it :)</p>",
        "id": 237343104,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620141084
    },
    {
        "content": "<p>you can imagine various mechanisms, like the intersection impls i gave, althugh I remember disliking those</p>",
        "id": 237343194,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620141105
    },
    {
        "content": "<p>I thnk if you combined them with crate prioritization</p>",
        "id": 237343253,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620141120
    },
    {
        "content": "<p>I thought it was ok</p>",
        "id": 237343260,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620141122
    },
    {
        "content": "<p>otherwise there were semver hazards</p>",
        "id": 237343311,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620141126
    },
    {
        "content": "<p>e.g., intersection impls within a crate, and preferring downstream crates otherwise, something like that</p>",
        "id": 237343383,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620141141
    },
    {
        "content": "<p>oh, there's that too, isn't there</p>",
        "id": 237343447,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620141158
    },
    {
        "content": "<p>somebody could have implemented <code>impl Default for [MyType; $n]</code> already</p>",
        "id": 237343516,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620141175
    },
    {
        "content": "<p>and <code>MyType: Default</code> may be true</p>",
        "id": 237343539,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620141182
    },
    {
        "content": "<p>so, lacking specialization, this impl is a breaking change..?</p>",
        "id": 237343601,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620141199
    },
    {
        "content": "<blockquote>\n<p>only traits defined in the current crate can be implemented for arbitrary types</p>\n</blockquote>",
        "id": 237343937,
        "sender_full_name": "lcnr",
        "timestamp": 1620141275
    },
    {
        "content": "<p>it luckily doesn't seem that way</p>",
        "id": 237343958,
        "sender_full_name": "lcnr",
        "timestamp": 1620141281
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[derive(Default)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Defaulted</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Default</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">Defaulted</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">33</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">default</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"fm\">todo!</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 237343987,
        "sender_full_name": "lcnr",
        "timestamp": 1620141289
    },
    {
        "content": "<p>ah, because don't we consider \"array\" to be fundamental I guess</p>",
        "id": 237344070,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620141305
    },
    {
        "content": "<p>(do we want that once all array impls have the <code>0</code> special case?)</p>",
        "id": 237344266,
        "sender_full_name": "lcnr",
        "timestamp": 1620141350
    },
    {
        "content": "<p>i.e. once adding that special case is easier</p>",
        "id": 237344416,
        "sender_full_name": "lcnr",
        "timestamp": 1620141381
    },
    {
        "content": "<p>don't know. I have been wondering how much specialization changes the calculus</p>",
        "id": 237344429,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620141389
    },
    {
        "content": "<p>my ideal is that we can loosen some of the prohibitions against adding blanket impls</p>",
        "id": 237344473,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620141408
    },
    {
        "content": "<p>once we have specialization</p>",
        "id": 237344489,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620141414
    },
    {
        "content": "<p>I forget if there are problems with this though</p>",
        "id": 237344502,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620141419
    },
    {
        "content": "<p>so, I can try to write up a quick something for that PR based on this conversation-- I think there is a need for a \"specialization design doc\"... :)</p>",
        "id": 237344598,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620141458
    },
    {
        "content": "<p>^^</p>",
        "id": 237344644,
        "sender_full_name": "lcnr",
        "timestamp": 1620141477
    },
    {
        "content": "<p>for that pr to land?</p>",
        "id": 237344657,
        "sender_full_name": "lcnr",
        "timestamp": 1620141482
    },
    {
        "content": "<p>or in general</p>",
        "id": 237344687,
        "sender_full_name": "lcnr",
        "timestamp": 1620141484
    },
    {
        "content": "<p>i intentionally avoided anything even remotely interacting with specialization, so that we don't have to deal with that yet</p>",
        "id": 237344763,
        "sender_full_name": "lcnr",
        "timestamp": 1620141511
    },
    {
        "content": "<p>well, you didn't really</p>",
        "id": 237344797,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620141520
    },
    {
        "content": "<p>you just added a lang item to side-step it :)</p>",
        "id": 237344814,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620141531
    },
    {
        "content": "<p>I meant \"in general\", not necessarily for that PR to land, althuogh it is definitely a commitment</p>",
        "id": 237344884,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620141558
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-05-04/near/237344814\">said</a>:</p>\n<blockquote>\n<p>you just added a lang item to side-step it :)</p>\n</blockquote>\n<p>exactly, now it does not depend on specialization :p</p>",
        "id": 237345015,
        "sender_full_name": "lcnr",
        "timestamp": 1620141607
    },
    {
        "content": "<p>ah wait</p>",
        "id": 237345099,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620141644
    },
    {
        "content": "<p>there <em>is</em> a sense in which the <code>;0</code> impl is more specialized as well; it's <em>always applicable</em></p>",
        "id": 237345198,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620141685
    },
    {
        "content": "<p>(in the technial sense I introduced in my blog post)</p>",
        "id": 237345244,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620141701
    },
    {
        "content": "<p><a href=\"https://smallcultfollowing.com/babysteps/blog/2018/02/09/maximally-minimal-specialization-always-applicable-impls/\">https://smallcultfollowing.com/babysteps/blog/2018/02/09/maximally-minimal-specialization-always-applicable-impls/</a>?</p>",
        "id": 237345329,
        "sender_full_name": "lcnr",
        "timestamp": 1620141725
    },
    {
        "content": "<p><a href=\"https://smallcultfollowing.com/babysteps/blog/2018/02/09/maximally-minimal-specialization-always-applicable-impls/#the-always-applicable-test\">https://smallcultfollowing.com/babysteps/blog/2018/02/09/maximally-minimal-specialization-always-applicable-impls/#the-always-applicable-test</a></p>",
        "id": 237345334,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620141726
    },
    {
        "content": "<p>the rule exactly as I wrote it doesn't apply</p>",
        "id": 237345443,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620141764
    },
    {
        "content": "<p>anyway it's fine</p>",
        "id": 237345465,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620141781
    },
    {
        "content": "<p>there are different ways to rationalize it</p>",
        "id": 237345495,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620141791
    },
    {
        "content": "<p>you could also imagine a test like \"some specific constant makes it more specific than 'any type meeting this trait'\", but i'm not wild about that</p>",
        "id": 237345563,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620141818
    },
    {
        "content": "<p>in the limit, you could have the user tell you by assigning integers :)</p>",
        "id": 237345592,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620141832
    },
    {
        "content": "<p><code>#[impl_priority = 99]</code> <span aria-label=\"sparkles\" class=\"emoji emoji-2728\" role=\"img\" title=\"sparkles\">:sparkles:</span></p>",
        "id": 237345706,
        "sender_full_name": "lcnr",
        "timestamp": 1620141866
    },
    {
        "content": "<p>ok ok we spent a while on this :)</p>",
        "id": 237345858,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620141933
    },
    {
        "content": "<p>^^ going to spend some time looking into the remaining <code>marker_trait_attr</code> issues then</p>",
        "id": 237345916,
        "sender_full_name": "lcnr",
        "timestamp": 1620141963
    },
    {
        "content": "<p>so about <a href=\"https://hackmd.io/VOaGjRYsSXW4PR_VNwQmSQ?edit\">https://hackmd.io/VOaGjRYsSXW4PR_VNwQmSQ?edit</a></p>",
        "id": 237345961,
        "sender_full_name": "lcnr",
        "timestamp": 1620141967
    },
    {
        "content": "<p>yeah!</p>",
        "id": 237346061,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620142008
    },
    {
        "content": "<p>I'd like to return to that</p>",
        "id": 237346065,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620142010
    },
    {
        "content": "<p>i am looking at the notes from the previous meeting <a class=\"stream-topic\" data-stream-id=\"260443\" href=\"/#narrow/stream/260443-project-const-generics/topic/meeting.202021-04-27\">#project-const-generics &gt; meeting 2021-04-27</a></p>",
        "id": 237346088,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620142022
    },
    {
        "content": "<p>it sounds like the idea of \"unsafe\" having expanded meaning in <code>const fn</code> is current</p>",
        "id": 237346433,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620142150
    },
    {
        "content": "<p>is it stable?</p>",
        "id": 237346466,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620142166
    },
    {
        "content": "<p>it does not look like it</p>",
        "id": 237346666,
        "sender_full_name": "lcnr",
        "timestamp": 1620142234
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=6f9680821e2999d5c7ae27573c7c01bc\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=6f9680821e2999d5c7ae27573c7c01bc</a></p>",
        "id": 237346688,
        "sender_full_name": "lcnr",
        "timestamp": 1620142241
    },
    {
        "content": "<p>there were some interesting examples of use cases</p>",
        "id": 237346702,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620142247
    },
    {
        "content": "<p>I feel like that was part of the next step</p>",
        "id": 237346961,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620142344
    },
    {
        "content": "<ul>\n<li>So <span class=\"user-mention\" data-user-id=\"219696\">@XAMPPRocky</span> mentioned a <code>Image</code> type in rust-gpu</li>\n</ul>",
        "id": 237347113,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620142400
    },
    {
        "content": "<p><a href=\"https://github.com/EmbarkStudios/rust-gpu/blob/1431c18b9db70feafc64e5096a64e5fefffbed18/crates/spirv-std/src/image.rs#L31\">https://github.com/EmbarkStudios/rust-gpu/blob/1431c18b9db70feafc64e5096a64e5fefffbed18/crates/spirv-std/src/image.rs#L31</a></p>",
        "id": 237347118,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620142402
    },
    {
        "content": "<p>(feel free to ping with questions if you have any btw)</p>",
        "id": 237347213,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1620142441
    },
    {
        "content": "<p>I have a questiton right now</p>",
        "id": 237347312,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620142455
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">spirv_types</span>::<span class=\"n\">image_params</span>::<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">AccessQualifier</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Arrayed</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Dimensionality</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ImageDepth</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ImageFormat</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Multisampled</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Sampled</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 237347319,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620142457
    },
    {
        "content": "<p>those are ... enums?</p>",
        "id": 237347337,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620142463
    },
    {
        "content": "<p>random structs?</p>",
        "id": 237347347,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620142467
    },
    {
        "content": "<p><a href=\"https://github.com/EmbarkStudios/rust-gpu/blob/1431c18b9db70feafc64e5096a64e5fefffbed18/crates/spirv-std/shared/src/image_params.rs\">https://github.com/EmbarkStudios/rust-gpu/blob/1431c18b9db70feafc64e5096a64e5fefffbed18/crates/spirv-std/shared/src/image_params.rs</a></p>",
        "id": 237347380,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1620142479
    },
    {
        "content": "<p>They map to these parameters. <a href=\"https://www.khronos.org/registry/spir-v/specs/unified1/SPIRV.html#OpTypeImage\">https://www.khronos.org/registry/spir-v/specs/unified1/SPIRV.html#OpTypeImage</a></p>",
        "id": 237347477,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1620142508
    },
    {
        "content": "<p>it looks like you then have various impls for particular combinations of those parameters</p>",
        "id": 237347696,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620142579
    },
    {
        "content": "<p>e.g., <a href=\"https://github.com/EmbarkStudios/rust-gpu/blob/1431c18b9db70feafc64e5096a64e5fefffbed18/crates/spirv-std/src/image.rs#L312-L330\">this one</a></p>",
        "id": 237347717,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620142588
    },
    {
        "content": "<p>do you have a need for doing those operations in a fully generic way, e.g., with traits?</p>",
        "id": 237347755,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620142611
    },
    {
        "content": "<p>Well I think what's lacking from what we doing currently, is that it's hard to express all the conditions in generics.</p>",
        "id": 237347874,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1620142678
    },
    {
        "content": "<p>example?</p>",
        "id": 237347933,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620142687
    },
    {
        "content": "<p><a href=\"https://github.com/EmbarkStudios/rust-gpu/commit/7a6806c17b215df1eb6c87bde16d29292982c7ff\">https://github.com/EmbarkStudios/rust-gpu/commit/7a6806c17b215df1eb6c87bde16d29292982c7ff</a></p>",
        "id": 237348042,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1620142737
    },
    {
        "content": "<p><code>OpImageQuerySize</code> for example has this as it's requirements.</p>\n<blockquote>\n<p>Image must be an object whose type is OpTypeImage. Its Dim operand must be one of those listed under Result Type, above. Additionally, if its Dim is 1D, 2D, 3D, or Cube, it must also have either an MS of 1 or a Sampled of 0 or 2.</p>\n</blockquote>",
        "id": 237348098,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1620142758
    },
    {
        "content": "<p>and you would like to express that in a where clause?</p>",
        "id": 237348389,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620142863
    },
    {
        "content": "<p>does that mean you kind of want <a href=\"https://github.com/EmbarkStudios/rust-gpu/commit/7a6806c17b215df1eb6c87bde16d29292982c7ff#diff-af86fffcde5057920cf115f8b3cf5614131917b4904aea2ff8689d8247c05a96R1339-R1355\">this function to be a <code>const fn</code></a>?</p>",
        "id": 237348554,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620142927
    },
    {
        "content": "<p>Yeah, as part of the impl block.</p>",
        "id": 237348629,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1620142952
    },
    {
        "content": "<p>I'm going to have to run but I think what I want to do is to have you write out the code you <em>want</em> to write :)</p>",
        "id": 237348669,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620142971
    },
    {
        "content": "<p>maybe at the <a href=\"https://hackmd.io/VOaGjRYsSXW4PR_VNwQmSQ?edit\">end of this document</a></p>",
        "id": 237348711,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620142989
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-05-04/near/237348554\">said</a>:</p>\n<blockquote>\n<p>does that mean you kind of want <a href=\"https://github.com/EmbarkStudios/rust-gpu/commit/7a6806c17b215df1eb6c87bde16d29292982c7ff#diff-af86fffcde5057920cf115f8b3cf5614131917b4904aea2ff8689d8247c05a96R1339-R1355\">this function to be a <code>const fn</code></a>?</p>\n</blockquote>\n<p>I'm not sure I understand, that's in our rustc backend, and I think that code is <code>const fn</code> compatible.</p>",
        "id": 237348771,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1620143015
    },
    {
        "content": "<p>I don't really understand either :)</p>",
        "id": 237348797,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620143028
    },
    {
        "content": "<p>i do believe that could would be <code>const fn</code> compatible; I am guessing you don't want to wait to enforce that until your backend</p>",
        "id": 237348913,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620143056
    },
    {
        "content": "<p>I mean, yes. Ideally that condition would be expressed as part of the impl block.</p>",
        "id": 237349003,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1620143102
    },
    {
        "content": "<p>I'll write an example <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 237349087,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1620143137
    },
    {
        "content": "<p>thanks!</p>",
        "id": 237349341,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620143215
    },
    {
        "content": "<p>This is an interesting example because it's not really a numeric one; it's more like specializing on configuration</p>",
        "id": 237349410,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620143239
    },
    {
        "content": "<p>anyway, I have to run, <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> I'm going to try and schedule some time to put a bit more effort into sketching this this week I think</p>",
        "id": 237349472,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620143258
    },
    {
        "content": "<p>what's <em>this</em> here?</p>",
        "id": 237349603,
        "sender_full_name": "lcnr",
        "timestamp": 1620143292
    },
    {
        "content": "<p>(vision doc, I meant, but i guess I should carve out time to write-up the specialization stuff we talked about too)</p>",
        "id": 237349645,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620143307
    },
    {
        "content": "<p>and auto traits, and <code>marker_trait_attr</code>s <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span></p>",
        "id": 237349824,
        "sender_full_name": "lcnr",
        "timestamp": 1620143377
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Essentially being able to have the conditions of one parameter be dependent on another. Like in this example. You should only be able to call <code>Foo::foo</code> if <code>Foo&lt;A=0, B=0&gt;</code> or <code>Foo&lt;A={&gt;1}, B={&gt;1}&gt;</code>, but not <code>Foo&lt;A=0, B=1&gt;</code>. </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">A</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">B</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">A</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">B</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">          </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">          </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 237350541,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1620143633
    },
    {
        "content": "<p>with <code>const_evaluatable_checked</code> that would be</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(const_generics, const_evaluatable_checked)]</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">A</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">B</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">IsTrue</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Condition</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">COND</span>: <span class=\"kt\">bool</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">IsTrue</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Condition</span><span class=\"o\">&lt;</span><span class=\"kc\">true</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// You can also use const params here</span>\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">condition</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">          </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">          </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">A</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">B</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">Condition</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">condition</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"o\">&gt;</span>: <span class=\"nc\">IsTrue</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Foo</span>::<span class=\"o\">&lt;</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"o\">&gt;</span>::<span class=\"n\">foo</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"c1\">// ok</span>\n<span class=\"w\">    </span><span class=\"n\">Foo</span>::<span class=\"o\">&lt;</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">&gt;</span>::<span class=\"n\">foo</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"c1\">// ok</span>\n<span class=\"w\">    </span><span class=\"n\">Foo</span>::<span class=\"o\">&lt;</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">&gt;</span>::<span class=\"n\">foo</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"c1\">// ERR</span>\n<span class=\"w\">    </span><span class=\"n\">Foo</span>::<span class=\"o\">&lt;</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">&gt;</span>::<span class=\"n\">foo</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"c1\">// ERR</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 237351938,
        "sender_full_name": "lcnr",
        "timestamp": 1620144142
    },
    {
        "content": "<p>i still don't recommend using <code>const_evaluatable_checked</code> for anything serious</p>",
        "id": 237352072,
        "sender_full_name": "lcnr",
        "timestamp": 1620144167
    },
    {
        "content": "<p>but this is definitely something I want to support in the future</p>",
        "id": 237352107,
        "sender_full_name": "lcnr",
        "timestamp": 1620144180
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-05-04/near/237352072\">said</a>:</p>\n<blockquote>\n<p>i still don't recommend using <code>const_evaluatable_checked</code> for anything serious</p>\n</blockquote>\n<p>What about using in a side project? I'm thinking about spending time implementing PER (Packed Encoding Rules) in <code>rasn</code> using const generics for type constraints.</p>",
        "id": 237356806,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1620145775
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-05-04/near/237352107\">said</a>:</p>\n<blockquote>\n<p>but this is definitely something I want to support in the future</p>\n</blockquote>\n<p>That makes me very happy, because that code looks good enough already for what I want. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 237357137,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1620145887
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"219696\">XAMPPRocky</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-05-04/near/237356806\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-05-04/near/237352072\">said</a>:</p>\n<blockquote>\n<p>i still don't recommend using <code>const_evaluatable_checked</code> for anything serious</p>\n</blockquote>\n<p>What about using in a side project? I'm thinking about spending time implementing PER (Packed Encoding Rules) in <code>rasn</code> using const generics for type constraints.</p>\n</blockquote>\n<p>uuuuuuuuuh~</p>",
        "id": 237357206,
        "sender_full_name": "lcnr",
        "timestamp": 1620145916
    },
    {
        "content": "<p>if you're fairly frost resistant it's probably fine <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> considering that there are a lot of ICE here</p>",
        "id": 237357318,
        "sender_full_name": "lcnr",
        "timestamp": 1620145946
    },
    {
        "content": "<p>also: disable incremental compilation, cause with that it just pretty much ices unconditionally</p>",
        "id": 237357373,
        "sender_full_name": "lcnr",
        "timestamp": 1620145966
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-05-04/near/237357373\">said</a>:</p>\n<blockquote>\n<p>also: disable incremental compilation, cause with that it just pretty much ices unconditionally</p>\n</blockquote>\n<p>Maybe we should report some of these bugs if they're that deterministic. <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 237357645,
        "sender_full_name": "Hameer Abbasi",
        "timestamp": 1620146045
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-05-04/near/237357373\">said</a>:</p>\n<blockquote>\n<p>also: disable incremental compilation, cause with that it just pretty much ices unconditionally</p>\n</blockquote>\n<p>That's fine, <code>rasn</code> is a no_std parser and a bunch of traits, it takes like ~10s to compile. That's instant compared to most of the code I regularly deal with <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 237357905,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1620146142
    },
    {
        "content": "<p>we already have open issues for that</p>",
        "id": 237360988,
        "sender_full_name": "lcnr",
        "timestamp": 1620147377
    },
    {
        "content": "<p>and <span class=\"user-mention\" data-user-id=\"351972\">@Ethan Brierley</span> is working on the solution, but they don't have a lot of time rn so it takes a while for it to be finished</p>",
        "id": 237361192,
        "sender_full_name": "lcnr",
        "timestamp": 1620147477
    },
    {
        "content": "<p>which is fine, cause <code>const_evaluatable_checked</code> is <em>fundamentally</em> broken in so many other ways that it might actually be a good thing that it frequently breaks :p</p>",
        "id": 237361295,
        "sender_full_name": "lcnr",
        "timestamp": 1620147515
    }
]