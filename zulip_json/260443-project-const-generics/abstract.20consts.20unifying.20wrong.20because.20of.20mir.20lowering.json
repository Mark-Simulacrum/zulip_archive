[
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> </p>\n<p>currently we're using MIR to unify non-concrete abstract consts in the <code>const_evaluatable_checked</code> feature but this can cause some stuff to unify when it probably shouldn't. e.g. <a href=\"https://github.com/rust-lang/rust/pull/86130#pullrequestreview-679812705\">this PR</a> has an issue where the following compiles:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(const_generics, const_evaluatable_checked)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">([</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">evaluatable</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>\n<p>despite having no predicate for <code>N as usize as usize</code> being evaluatable</p>\n<p>this seems to be caused by MIR not keeping the second as cast around (no idea when this removal actually happens maybe its before MIR lowering?)</p>\n<p>can see the MIR <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=0d8151b3c1c37a477ac241a71d2df305\">here</a></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">arg</span>: <span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">arg</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>fn foo(_1: u8) -&gt; usize {\n    debug arg =&gt; _1;\n    let mut _0: usize;\n    let mut _2: u8;\n\n    bb0: {\n        _2 = _1;\n        _0 = move _2 as usize (Misc);\n        return;\n    }\n}\n</code></pre></div>\n<p>we should probably figure out a way to unify generic consts that isnt as prone to exposing details about how we lower stuff or else const_evaluatable_checked could have some undesirable back compat implications?</p>\n<p>going to open an issue somewhere about this but just opening a zulip topic for the moment</p>",
        "id": 242097255,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1623257753
    },
    {
        "content": "<p>I know that lcnr has talked about wanting to use thir for abstract consts that way there's less lowering that takes place</p>",
        "id": 242098169,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1623258141
    },
    {
        "content": "<p><span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span> seems like we have to use thir or something for this</p>",
        "id": 243360539,
        "sender_full_name": "lcnr",
        "timestamp": 1624269326
    },
    {
        "content": "<p>this seems unfortunate</p>",
        "id": 243360556,
        "sender_full_name": "lcnr",
        "timestamp": 1624269333
    }
]