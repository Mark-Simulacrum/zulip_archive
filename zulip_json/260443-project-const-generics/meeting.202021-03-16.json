[
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> is something planned for today?</p>",
        "id": 230524496,
        "sender_full_name": "oli",
        "timestamp": 1615905975
    },
    {
        "content": "<p>we normally have a meeting now</p>",
        "id": 230524653,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615906010
    },
    {
        "content": "<p>(cc <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span>)</p>",
        "id": 230524783,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615906050
    },
    {
        "content": "<p>the meeting starts at <code>16:45</code> doesn't it?</p>",
        "id": 230524953,
        "sender_full_name": "lcnr",
        "timestamp": 1615906085
    },
    {
        "content": "<p>hehe right... oops. my calendar is tracked in US time</p>",
        "id": 230525009,
        "sender_full_name": "oli",
        "timestamp": 1615906101
    },
    {
        "content": "<p>Oh, I just go by the calendar :)</p>",
        "id": 230525156,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615906147
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-03-16/near/230524953\">said</a>:</p>\n<blockquote>\n<p>the meeting starts at <code>16:45</code> doesn't it?</p>\n</blockquote>\n<p>in one hour <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 230525237,
        "sender_full_name": "lcnr",
        "timestamp": 1615906168
    },
    {
        "content": "<p>I suppose I can make it then</p>",
        "id": 230525273,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615906181
    },
    {
        "content": "<p>afaik, did i miss some time zone magic?</p>",
        "id": 230525288,
        "sender_full_name": "lcnr",
        "timestamp": 1615906187
    },
    {
        "content": "<p>no I mean... the US changed daylight savings <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 230525313,
        "sender_full_name": "oli",
        "timestamp": 1615906194
    },
    {
        "content": "<p>it's not summertime yet, is it?</p>",
        "id": 230525316,
        "sender_full_name": "lcnr",
        "timestamp": 1615906196
    },
    {
        "content": "<p>not for us</p>",
        "id": 230525332,
        "sender_full_name": "oli",
        "timestamp": 1615906200
    },
    {
        "content": "<p>already <span aria-label=\"shock\" class=\"emoji emoji-1f628\" role=\"img\" title=\"shock\">:shock:</span></p>",
        "id": 230525367,
        "sender_full_name": "lcnr",
        "timestamp": 1615906202
    },
    {
        "content": "<p>we have another 12 days</p>",
        "id": 230525405,
        "sender_full_name": "oli",
        "timestamp": 1615906211
    },
    {
        "content": "<p>yeah</p>",
        "id": 230525417,
        "sender_full_name": "lcnr",
        "timestamp": 1615906214
    },
    {
        "content": "<p>daylight saving time <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 230525470,
        "sender_full_name": "lcnr",
        "timestamp": 1615906225
    },
    {
        "content": "<p>I'm ok either way</p>",
        "id": 230525474,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615906228
    },
    {
        "content": "<p>this meeting is in the compiler team calendar, and that one tracks US DST</p>",
        "id": 230525556,
        "sender_full_name": "oli",
        "timestamp": 1615906258
    },
    {
        "content": "<p>yep; we can just move it for the next 2 weeks to make <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span>'s life better</p>",
        "id": 230525723,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615906317
    },
    {
        "content": "<p>it's fine either way <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> just didn't realize it moved forward by one hour</p>",
        "id": 230525827,
        "sender_full_name": "lcnr",
        "timestamp": 1615906343
    },
    {
        "content": "<p>lol we're all so accommodating</p>",
        "id": 230525869,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615906359
    },
    {
        "content": "<p>ok, let's do it now :)</p>",
        "id": 230525876,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615906361
    },
    {
        "content": "<p>ok <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span></p>",
        "id": 230525900,
        "sender_full_name": "lcnr",
        "timestamp": 1615906368
    },
    {
        "content": "<p>( per the calendar )</p>",
        "id": 230525912,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615906372
    },
    {
        "content": "<p>I was skimming <a class=\"stream-topic\" data-stream-id=\"260443\" href=\"/#narrow/stream/260443-project-const-generics/topic/meeting.202021-03-16\">#project-const-generics &gt; meeting 2021-03-16</a></p>",
        "id": 230525935,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615906383
    },
    {
        "content": "<p>that does mean that i didn't prepare anything though <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 230525936,
        "sender_full_name": "lcnr",
        "timestamp": 1615906384
    },
    {
        "content": "<p>maybe we can talk a bit about the \"ever put off\" topic of the weird def-id hack whose name I forgot again</p>",
        "id": 230526206,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615906482
    },
    {
        "content": "<p>regarding the flags, one thing I was wondering--</p>",
        "id": 230526230,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615906491
    },
    {
        "content": "<p>I think having a \"flags are precise\" flag seems fine</p>",
        "id": 230526246,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615906498
    },
    {
        "content": "<p>seems good, would also be interested in <a href=\"https://github.com/rust-lang/rust/issues/82707\">#82707</a></p>",
        "id": 230526247,
        "sender_full_name": "lcnr",
        "timestamp": 1615906498
    },
    {
        "content": "<p>but let's go with flags first</p>",
        "id": 230526299,
        "sender_full_name": "lcnr",
        "timestamp": 1615906513
    },
    {
        "content": "<p>but in the case where flags <em>aren't</em> precise, are we setting all the bits to true or something?</p>",
        "id": 230526309,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615906514
    },
    {
        "content": "<p>I'm a bit nervous about folks forgetting to check that flag</p>",
        "id": 230526335,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615906520
    },
    {
        "content": "<p>my idea was</p>",
        "id": 230526343,
        "sender_full_name": "lcnr",
        "timestamp": 1615906523
    },
    {
        "content": "<p>rename all flags which might be incorrect when we have <code>MISSING_CT_SUBSTS</code></p>",
        "id": 230526398,
        "sender_full_name": "lcnr",
        "timestamp": 1615906546
    },
    {
        "content": "<p>to <code>GUARANTEED_FLAG_NAME</code></p>",
        "id": 230526425,
        "sender_full_name": "lcnr",
        "timestamp": 1615906555
    },
    {
        "content": "<p>so we would have <code>fn guaranteed_needs_subst</code></p>",
        "id": 230526527,
        "sender_full_name": "lcnr",
        "timestamp": 1615906577
    },
    {
        "content": "<p>and then either add a deep type visitor which looks into the default anon const substs</p>",
        "id": 230526575,
        "sender_full_name": "lcnr",
        "timestamp": 1615906598
    },
    {
        "content": "<p>hmm</p>",
        "id": 230526708,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615906646
    },
    {
        "content": "<p>or use a type folder which replaces the substs with the actual default ones</p>",
        "id": 230526718,
        "sender_full_name": "lcnr",
        "timestamp": 1615906650
    },
    {
        "content": "<p>and then the guaranteed flags are exactly right again</p>",
        "id": 230526755,
        "sender_full_name": "lcnr",
        "timestamp": 1615906667
    },
    {
        "content": "<p>is that what's in the pr?</p>",
        "id": 230526841,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615906685
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/83086\">#83086</a>?</p>",
        "id": 230526882,
        "sender_full_name": "lcnr",
        "timestamp": 1615906700
    },
    {
        "content": "<p>no, i didn't implement the type flags changes yet</p>",
        "id": 230526927,
        "sender_full_name": "lcnr",
        "timestamp": 1615906713
    },
    {
        "content": "<p>and <code>TypeWalker</code> is also still broken</p>",
        "id": 230526967,
        "sender_full_name": "lcnr",
        "timestamp": 1615906727
    },
    {
        "content": "<p><code>TypeWalker</code> just needs a <code>tcx</code> which shouldn't be a problem</p>",
        "id": 230527030,
        "sender_full_name": "lcnr",
        "timestamp": 1615906744
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-03-16/near/230526927\">said</a>:</p>\n<blockquote>\n<p>no, i didn't implement the type flags changes yet</p>\n</blockquote>\n<p>i.e., the renames?</p>",
        "id": 230527233,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615906802
    },
    {
        "content": "<p>ye, and adding the <code>HAS_MISSING_CT_SUBSTS</code> flag</p>",
        "id": 230527403,
        "sender_full_name": "lcnr",
        "timestamp": 1615906838
    },
    {
        "content": "<p>I'm pondering</p>",
        "id": 230527461,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615906854
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-03-16/near/230526527\">said</a>:</p>\n<blockquote>\n<p>so we would have <code>fn guaranteed_needs_subst</code></p>\n</blockquote>\n<p>what prevents people from misusing this? basically, we know to write the accessors correctly to refresh the flags?</p>",
        "id": 230527575,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615906887
    },
    {
        "content": "<p>I guess the key point is that there are some bits of code where this flag <em>must</em> be correct?</p>",
        "id": 230527641,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615906911
    },
    {
        "content": "<p>is this for asserts?</p>",
        "id": 230527647,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615906914
    },
    {
        "content": "<p>I feel like in a lot of those cases we'd expect unevaluated things to have been normalized away too, but perhaps I am missing something</p>",
        "id": 230527788,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615906942
    },
    {
        "content": "<p>i don't fully understand what you're asking here</p>",
        "id": 230528037,
        "sender_full_name": "lcnr",
        "timestamp": 1615907028
    },
    {
        "content": "<p>I'm thinking about cases where having an \"overapproximation\" would be a bug</p>",
        "id": 230528100,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615907042
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_middle/src/mir/mod.rs#L286-L287\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_middle/src/mir/mod.rs#L286-L287</a> (edit: link was broken)</p>",
        "id": 230528152,
        "sender_full_name": "lcnr",
        "timestamp": 1615907056
    },
    {
        "content": "<p>is one of these cases</p>",
        "id": 230528174,
        "sender_full_name": "lcnr",
        "timestamp": 1615907061
    },
    {
        "content": "<p>a lot of the time type flags are just used as an optimization in folders</p>",
        "id": 230528240,
        "sender_full_name": "lcnr",
        "timestamp": 1615907085
    },
    {
        "content": "<p>but we do sometimes use them to change the actual behavior of the compiler</p>",
        "id": 230528363,
        "sender_full_name": "lcnr",
        "timestamp": 1615907124
    },
    {
        "content": "<p>hmm ok</p>",
        "id": 230528782,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615907263
    },
    {
        "content": "<p>that makes sense</p>",
        "id": 230528905,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615907295
    },
    {
        "content": "<p>I would probably call it \"precise\" or something rather than \"guaranteed\"</p>",
        "id": 230528933,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615907305
    },
    {
        "content": "<p>I wonder if it is useful to have two flags, MAYBE_HAS and MUST_HAVE</p>",
        "id": 230529030,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615907344
    },
    {
        "content": "<p>\"precise\" doesn't seem right to me, I copied <a href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html#method.guaranteed_eq\">https://doc.rust-lang.org/nightly/std/primitive.pointer.html#method.guaranteed_eq</a> here</p>",
        "id": 230529087,
        "sender_full_name": "lcnr",
        "timestamp": 1615907363
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-03-16/near/230528240\">said</a>:</p>\n<blockquote>\n<p>a lot of the time type flags are just used as an optimization in folders</p>\n</blockquote>\n<p>what do we plan to do in these cases?</p>",
        "id": 230529093,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615907366
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-03-16/near/230529030\">said</a>:</p>\n<blockquote>\n<p>I wonder if it is useful to have two flags, MAYBE_HAS and MUST_HAVE</p>\n</blockquote>\n<p>that also seems sensible</p>",
        "id": 230529109,
        "sender_full_name": "lcnr",
        "timestamp": 1615907374
    },
    {
        "content": "<p>or well, if we have <code>MUST_HAVE</code></p>",
        "id": 230529138,
        "sender_full_name": "lcnr",
        "timestamp": 1615907385
    },
    {
        "content": "<p>we don't need a flag for <code>MAYBE_HAS</code> but instead can use <code>MUST_HAVE | MISSING_CT_SUBSTS</code></p>",
        "id": 230529272,
        "sender_full_name": "lcnr",
        "timestamp": 1615907416
    },
    {
        "content": "<p>re: the names, guaranteed is ok too</p>",
        "id": 230529275,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615907416
    },
    {
        "content": "<p>there are some other cases where eventually we may have \"maybe\" has</p>",
        "id": 230529379,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615907447
    },
    {
        "content": "<p>example would be an unnormalized projection</p>",
        "id": 230529415,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615907455
    },
    {
        "content": "<p>these are <code>&lt;Type as &lt;unknown&gt;&gt;::Assoc</code>, are they?</p>",
        "id": 230529518,
        "sender_full_name": "lcnr",
        "timestamp": 1615907491
    },
    {
        "content": "<p>and would get introduced by <code>Type::Assoc</code></p>",
        "id": 230529713,
        "sender_full_name": "lcnr",
        "timestamp": 1615907552
    },
    {
        "content": "<p>no what I mean is</p>",
        "id": 230529748,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615907565
    },
    {
        "content": "<p>if we have lazy norm</p>",
        "id": 230529764,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615907572
    },
    {
        "content": "<p>and you have <code>&lt;T as Iterator&gt;::Item</code></p>",
        "id": 230529783,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615907577
    },
    {
        "content": "<p>we may be able to normalize that to <code>u32</code> or something</p>",
        "id": 230529796,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615907583
    },
    {
        "content": "<p>all I'm saying is that there are various ways that type flags can be \"approximate\"</p>",
        "id": 230529841,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615907601
    },
    {
        "content": "<p>this is a bit different really</p>",
        "id": 230529854,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615907605
    },
    {
        "content": "<p>since the \"MISSING_CT_SUBSTS\" isn't really a <em>nonnormalized</em> type</p>",
        "id": 230529891,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615907617
    },
    {
        "content": "<p>it's a type that's not complete yet</p>",
        "id": 230529908,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615907623
    },
    {
        "content": "<p>this difference may not matter to a lot of the code</p>",
        "id": 230530000,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615907644
    },
    {
        "content": "<p>but maybe it will</p>",
        "id": 230530006,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615907645
    },
    {
        "content": "<p>anyway, ok, this seems good</p>",
        "id": 230530020,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615907651
    },
    {
        "content": "<p>I am wondering, <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> --</p>",
        "id": 230530085,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615907673
    },
    {
        "content": "<p>what if the type flags were \"private\", and any attempt to access them when you have <code>MISSING_CT_SUBSTS</code> would just normalize?</p>",
        "id": 230530165,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615907695
    },
    {
        "content": "<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 230530618,
        "sender_full_name": "lcnr",
        "timestamp": 1615907765
    },
    {
        "content": "<p>that is a good idea</p>",
        "id": 230530643,
        "sender_full_name": "lcnr",
        "timestamp": 1615907769
    },
    {
        "content": "<p>(obviously you'd have to provide a tcx)</p>",
        "id": 230530729,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615907783
    },
    {
        "content": "<p>ye</p>",
        "id": 230530747,
        "sender_full_name": "lcnr",
        "timestamp": 1615907787
    },
    {
        "content": "<p>you could even make an <code>&amp;mut self</code> variant that replaces the self with the normalized version :)</p>",
        "id": 230530805,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615907808
    },
    {
        "content": "<p><code>&amp;mut &amp;TyS</code>?</p>",
        "id": 230530836,
        "sender_full_name": "lcnr",
        "timestamp": 1615907824
    },
    {
        "content": "<p>correct</p>",
        "id": 230530857,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615907829
    },
    {
        "content": "<p>not obviously a good idea but not obviously bad either :)</p>",
        "id": 230530898,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615907847
    },
    {
        "content": "<p>e.g., if you are recursing on a type, you realy want the normalized variant</p>",
        "id": 230530921,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615907855
    },
    {
        "content": "<p>so, i am a bit concerned whether this allows us to accidentally wreck perf</p>",
        "id": 230531019,
        "sender_full_name": "lcnr",
        "timestamp": 1615907885
    },
    {
        "content": "<p>I would maybe say have two accessors -- one for \"guaranteed type flags\" and one for \"incomplete type flags\"</p>",
        "id": 230531044,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615907893
    },
    {
        "content": "<p>the latter can be used for some purposes maybe</p>",
        "id": 230531064,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615907898
    },
    {
        "content": "<p>(or \"approximated flags\" that always returns true if MISSING_CT_SUBSTS is true)</p>",
        "id": 230531109,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615907920
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-03-16/near/230531019\">said</a>:</p>\n<blockquote>\n<p>so, i am a bit concerned whether this allows us to accidentally wreck perf</p>\n</blockquote>\n<p>say more</p>",
        "id": 230531146,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615907933
    },
    {
        "content": "<p>if we're in a ty folder for a fairly large generator/closure</p>",
        "id": 230531229,
        "sender_full_name": "lcnr",
        "timestamp": 1615907965
    },
    {
        "content": "<p>and check for the type flag at every type</p>",
        "id": 230531256,
        "sender_full_name": "lcnr",
        "timestamp": 1615907976
    },
    {
        "content": "<p>we could accidentally walk the whole type every time we do because there are some <code>MISSING_CT_SUBSTS</code> somewhere</p>",
        "id": 230531369,
        "sender_full_name": "lcnr",
        "timestamp": 1615908009
    },
    {
        "content": "<p>this is why I was suggesting <code>&amp;mut self</code>, yeah</p>",
        "id": 230531432,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615908028
    },
    {
        "content": "<p>are there cases where we would not care about the MISSING_CT_SUBSTS?</p>",
        "id": 230531524,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615908057
    },
    {
        "content": "<p>ye</p>",
        "id": 230531535,
        "sender_full_name": "lcnr",
        "timestamp": 1615908063
    },
    {
        "content": "<p>can you give me an example?</p>",
        "id": 230531555,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615908069
    },
    {
        "content": "<p>infer and placeholder types</p>",
        "id": 230531614,
        "sender_full_name": "lcnr",
        "timestamp": 1615908090
    },
    {
        "content": "<p>can't be defaults</p>",
        "id": 230531621,
        "sender_full_name": "lcnr",
        "timestamp": 1615908095
    },
    {
        "content": "<p>and <code>HAS_PROJECTION</code></p>",
        "id": 230531675,
        "sender_full_name": "lcnr",
        "timestamp": 1615908116
    },
    {
        "content": "<p>so there are some flags which can't be changed by the anon const default substs</p>",
        "id": 230531792,
        "sender_full_name": "lcnr",
        "timestamp": 1615908141
    },
    {
        "content": "<p>interesting</p>",
        "id": 230531814,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615908149
    },
    {
        "content": "<p>still</p>",
        "id": 230531829,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615908152
    },
    {
        "content": "<p>if type flags were private, we could add accessors for specific flags like those</p>",
        "id": 230531861,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615908162
    },
    {
        "content": "<p>that's pretty subtle, but it's a good point</p>",
        "id": 230531886,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615908170
    },
    {
        "content": "<p>i think i will try to use guaranteed flags for now, potentially adding a type flags folder which looks into the default substs</p>",
        "id": 230532187,
        "sender_full_name": "lcnr",
        "timestamp": 1615908269
    },
    {
        "content": "<p>what i've tried there is already promising</p>",
        "id": 230532244,
        "sender_full_name": "lcnr",
        "timestamp": 1615908289
    },
    {
        "content": "<p>want to take next week to talk about <code>const_evaluatable_checked</code>?</p>",
        "id": 230532427,
        "sender_full_name": "lcnr",
        "timestamp": 1615908356
    },
    {
        "content": "<p>ok</p>",
        "id": 230532493,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615908366
    },
    {
        "content": "<p>and talk a bit about <code>WithOptConstParam</code> now?</p>",
        "id": 230532507,
        "sender_full_name": "lcnr",
        "timestamp": 1615908370
    },
    {
        "content": "<p>do you have something there</p>",
        "id": 230532541,
        "sender_full_name": "lcnr",
        "timestamp": 1615908381
    },
    {
        "content": "<p>i have an idea which seems sound</p>",
        "id": 230532564,
        "sender_full_name": "lcnr",
        "timestamp": 1615908386
    },
    {
        "content": "<p>but i don't know how easy it is to implement</p>",
        "id": 230532585,
        "sender_full_name": "lcnr",
        "timestamp": 1615908394
    },
    {
        "content": "<p>I don't really, I haven't had much time apart from these meetings to think about const generics</p>",
        "id": 230532601,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615908400
    },
    {
        "content": "<p>I'd still like to better understand <em>exactly</em> what the problem is</p>",
        "id": 230532629,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615908410
    },
    {
        "content": "<p>to simplify a bit</p>",
        "id": 230532672,
        "sender_full_name": "lcnr",
        "timestamp": 1615908423
    },
    {
        "content": "<p>we need results from the <code>typeck</code> query in other queries while still inside of <code>typeck</code></p>",
        "id": 230532738,
        "sender_full_name": "lcnr",
        "timestamp": 1615908444
    },
    {
        "content": "<p>we currently do this by adding these results as an additional query argument</p>",
        "id": 230532828,
        "sender_full_name": "lcnr",
        "timestamp": 1615908479
    },
    {
        "content": "<p>(the <code>param_def_id</code> field of <code>WithOptConstParam</code>)</p>",
        "id": 230532890,
        "sender_full_name": "lcnr",
        "timestamp": 1615908492
    },
    {
        "content": "<p>can we walk through the example again</p>",
        "id": 230532899,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615908494
    },
    {
        "content": "<p>if we have to <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 230532982,
        "sender_full_name": "lcnr",
        "timestamp": 1615908522
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">A</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">//           ^ const parameter</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">B</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">M</span>: <span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">//           ^ const parameter</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">foo</span>::<span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">//               ^^^^^^^^^ const argument</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 230533011,
        "sender_full_name": "lcnr",
        "timestamp": 1615908531
    },
    {
        "content": "<p>at some point while typechecking <code>main</code> we lower the path <code>a.foo::&lt;{ 3 + 7 }&gt;</code></p>",
        "id": 230533128,
        "sender_full_name": "lcnr",
        "timestamp": 1615908572
    },
    {
        "content": "<p>we need an expected type for <code>{3+7}</code> iirc</p>",
        "id": 230533176,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615908588
    },
    {
        "content": "<p>yeah</p>",
        "id": 230533296,
        "sender_full_name": "lcnr",
        "timestamp": 1615908617
    },
    {
        "content": "<p>I don't quite get the cycle yet</p>",
        "id": 230533665,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615908728
    },
    {
        "content": "<p>we need to create an inference variable to repesent the unknown constant</p>",
        "id": 230533706,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615908745
    },
    {
        "content": "<p>to know the expect type of <code>{ 3 + 7 }</code> we need to know the type of <code>a</code></p>",
        "id": 230533726,
        "sender_full_name": "lcnr",
        "timestamp": 1615908752
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-03-16/near/230533706\">said</a>:</p>\n<blockquote>\n<p>we need to create an inference variable to repesent the unknown constant</p>\n</blockquote>\n<p>we don't</p>",
        "id": 230533805,
        "sender_full_name": "lcnr",
        "timestamp": 1615908779
    },
    {
        "content": "<p>so it's more about <code>A</code>?</p>",
        "id": 230533874,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615908802
    },
    {
        "content": "<p>that is, it's more about knowing which function we will invoke</p>",
        "id": 230533909,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615908813
    },
    {
        "content": "<p>ye</p>",
        "id": 230533925,
        "sender_full_name": "lcnr",
        "timestamp": 1615908819
    },
    {
        "content": "<p>so</p>",
        "id": 230534474,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615908991
    },
    {
        "content": "<p>what's a bit confusing to me is</p>",
        "id": 230534504,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615909002
    },
    {
        "content": "<p>I feel like we make that choice based just on the \"self type\"</p>",
        "id": 230534536,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615909016
    },
    {
        "content": "<p>\"that choice\" being which <code>foo</code> we are using?</p>",
        "id": 230534628,
        "sender_full_name": "lcnr",
        "timestamp": 1615909056
    },
    {
        "content": "<p>correct</p>",
        "id": 230534645,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615909063
    },
    {
        "content": "<p>we do</p>",
        "id": 230534656,
        "sender_full_name": "lcnr",
        "timestamp": 1615909067
    },
    {
        "content": "<p>you agree that this choice influences the type of <code>{ 3 + 7 }</code>?</p>",
        "id": 230534753,
        "sender_full_name": "lcnr",
        "timestamp": 1615909088
    },
    {
        "content": "<p>yes</p>",
        "id": 230534770,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615909093
    },
    {
        "content": "<p>it also infuences e.g. what kinds and number of parameters we expect</p>",
        "id": 230534798,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615909101
    },
    {
        "content": "<p>and the <em>value</em> of <code>{ 3 + 7 }</code> influences the type of <code>_b</code></p>",
        "id": 230534827,
        "sender_full_name": "lcnr",
        "timestamp": 1615909111
    },
    {
        "content": "<p>yes</p>",
        "id": 230534851,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615909121
    },
    {
        "content": "<p>which is needed while typechecking <code>main</code></p>",
        "id": 230534893,
        "sender_full_name": "lcnr",
        "timestamp": 1615909134
    },
    {
        "content": "<p>sure</p>",
        "id": 230534927,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615909144
    },
    {
        "content": "<p>and to get the value we have to typeck <code>{ 3 + 7 }</code> which relies on its expected type</p>",
        "id": 230534967,
        "sender_full_name": "lcnr",
        "timestamp": 1615909160
    },
    {
        "content": "<p>ok</p>",
        "id": 230535017,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615909185
    },
    {
        "content": "<p>quick check:</p>",
        "id": 230535052,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615909200
    },
    {
        "content": "<p>and we don't type check anonymous constants like this with the surrounding item?</p>",
        "id": 230535119,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615909211
    },
    {
        "content": "<p>we can't typeck anon consts together with their surrounding item</p>",
        "id": 230535201,
        "sender_full_name": "lcnr",
        "timestamp": 1615909239
    },
    {
        "content": "<p>afaik</p>",
        "id": 230535231,
        "sender_full_name": "lcnr",
        "timestamp": 1615909252
    },
    {
        "content": "<p>because they can be inside of binders</p>",
        "id": 230535245,
        "sender_full_name": "lcnr",
        "timestamp": 1615909257
    },
    {
        "content": "<p>and I don't know how we would deal with that</p>",
        "id": 230535262,
        "sender_full_name": "lcnr",
        "timestamp": 1615909264
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(const_generics)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![allow(incomplete_features)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"p\">();</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"p\">}]</span>: <span class=\"nb\">Sized</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 230535338,
        "sender_full_name": "lcnr",
        "timestamp": 1615909298
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(const_generics)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![allow(incomplete_features)]</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">ASSOC</span>: <span class=\"kt\">usize</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"nb\">static</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">ASSOC</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">13</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">test</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"p\">()</span>: <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"o\">&lt;&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&gt;</span>::<span class=\"n\">ASSOC</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">test</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 230535458,
        "sender_full_name": "lcnr",
        "timestamp": 1615909332
    },
    {
        "content": "<p>that's not really a problem per se, if we structure our code well</p>",
        "id": 230535472,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615909338
    },
    {
        "content": "<p>however</p>",
        "id": 230535497,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615909348
    },
    {
        "content": "<p>that example on the struct is confusing</p>",
        "id": 230535534,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615909366
    },
    {
        "content": "<p>in that there isn't a body</p>",
        "id": 230535569,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615909382
    },
    {
        "content": "<p>in any case though</p>",
        "id": 230535590,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615909389
    },
    {
        "content": "<p>I think what I would expect is that we have a \"type check\" query for anonymous constants that includes the expected type as a parameter</p>",
        "id": 230535655,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615909416
    },
    {
        "content": "<p>so instead of taking <code>WithOptConstParam</code></p>",
        "id": 230535789,
        "sender_full_name": "lcnr",
        "timestamp": 1615909454
    },
    {
        "content": "<p>all affected queries also take the expected type?</p>",
        "id": 230535869,
        "sender_full_name": "lcnr",
        "timestamp": 1615909482
    },
    {
        "content": "<p>which is what we need to do if we ever want to support generic const param types</p>",
        "id": 230536115,
        "sender_full_name": "lcnr",
        "timestamp": 1615909557
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/project-const-generics/pull/3\">https://github.com/rust-lang/project-const-generics/pull/3</a></p>",
        "id": 230536124,
        "sender_full_name": "lcnr",
        "timestamp": 1615909561
    },
    {
        "content": "<p>we would have to ignore that type when substituting and in the type flags</p>",
        "id": 230536274,
        "sender_full_name": "lcnr",
        "timestamp": 1615909602
    },
    {
        "content": "<p>(reading)</p>",
        "id": 230537929,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615910181
    },
    {
        "content": "<p>so</p>",
        "id": 230538032,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615910222
    },
    {
        "content": "<p>I somewhat think that we should type-check anonymous constants together with the enclosing body</p>",
        "id": 230538064,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615910235
    },
    {
        "content": "<p>and I'm not sure yet sure why we can't</p>",
        "id": 230538073,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615910240
    },
    {
        "content": "<p>however</p>",
        "id": 230538102,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615910252
    },
    {
        "content": "<p>if we keep it as a query</p>",
        "id": 230538149,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615910270
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> you still there</p>",
        "id": 230541342,
        "sender_full_name": "lcnr",
        "timestamp": 1615910925
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-03-16/near/230538073\">said</a>:</p>\n<blockquote>\n<p>and I'm not sure yet sure why we can't</p>\n</blockquote>\n<p>we might be able to do so, would need some help wrt binders but it might work <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 230541656,
        "sender_full_name": "lcnr",
        "timestamp": 1615911000
    },
    {
        "content": "<p>I'm sort of here</p>",
        "id": 230543848,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615911526
    },
    {
        "content": "<p>sorry, I didn't finish my sentence, did I?</p>",
        "id": 230543876,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615911533
    },
    {
        "content": "<p>you did not <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 230543942,
        "sender_full_name": "lcnr",
        "timestamp": 1615911547
    },
    {
        "content": "<p>I was probably going to say that if we kept it as a query we would presumably canonicalize the type</p>",
        "id": 230543981,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615911556
    },
    {
        "content": "<p>the query key would be something like \"env; expr; expected type\"</p>",
        "id": 230544056,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615911577
    },
    {
        "content": "<p>and it could return the canonicalized form of those things</p>",
        "id": 230544081,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615911584
    },
    {
        "content": "<p>we may not need to return the expected type I suppose</p>",
        "id": 230544100,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615911590
    },
    {
        "content": "<blockquote>\n<p>the query key</p>\n</blockquote>\n<p>for which query?</p>",
        "id": 230544347,
        "sender_full_name": "lcnr",
        "timestamp": 1615911636
    },
    {
        "content": "<blockquote>\n<p>we may not need to return the expected type I suppose</p>\n</blockquote>\n<p>i don't understand that message</p>",
        "id": 230544650,
        "sender_full_name": "lcnr",
        "timestamp": 1615911722
    },
    {
        "content": "<p>ah, the big issue why consts inside of types can't be easily typechecked together with their parent is because we may have to evaluate them during their parents typeck</p>",
        "id": 231477553,
        "sender_full_name": "lcnr",
        "timestamp": 1616509195
    }
]