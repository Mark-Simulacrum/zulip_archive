[
    {
        "content": "<p>Hi <span class=\"user-group-mention\" data-user-group-id=\"3805\">@project-const-generics</span> , the meeting will take please here in 40 minutes</p>",
        "id": 226524083,
        "sender_full_name": "lcnr",
        "timestamp": 1613487990
    },
    {
        "content": "<p>i intend to continue from where we left off last week: <a href=\"https://github.com/rust-lang/project-const-generics/blob/master/meetings/2021.02.09-lazy-norm.md\">https://github.com/rust-lang/project-const-generics/blob/master/meetings/2021.02.09-lazy-norm.md</a></p>",
        "id": 226524315,
        "sender_full_name": "lcnr",
        "timestamp": 1613488093
    },
    {
        "content": "<p>primarily taking a more in-depth look at the first of the two solutions mentioned there</p>",
        "id": 226524430,
        "sender_full_name": "lcnr",
        "timestamp": 1613488170
    },
    {
        "content": "<p>meeting notes: <a href=\"https://hackmd.io/4bIoSM60TiaODqKPAavq6w\">https://hackmd.io/4bIoSM60TiaODqKPAavq6w</a></p>",
        "id": 226524620,
        "sender_full_name": "lcnr",
        "timestamp": 1613488247
    },
    {
        "content": "<p>If you have some links I could use to study up before the meeting, that'd be helpful.</p>",
        "id": 226524637,
        "sender_full_name": "Hameer Abbasi",
        "timestamp": 1613488251
    },
    {
        "content": "<p>hm, not sure</p>",
        "id": 226524887,
        "sender_full_name": "lcnr",
        "timestamp": 1613488353
    },
    {
        "content": "<p>you can look in the notes of the first meeting and try to understand what's written there</p>",
        "id": 226524978,
        "sender_full_name": "lcnr",
        "timestamp": 1613488393
    },
    {
        "content": "<blockquote>\n<ul>\n<li>eagerly filter the supplied generic params to the anonymous constant </li>\n</ul>\n</blockquote>\n<p>especially that part</p>",
        "id": 226524996,
        "sender_full_name": "lcnr",
        "timestamp": 1613488404
    },
    {
        "content": "<p>apart from this it largely depends on what you already know <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 226525128,
        "sender_full_name": "lcnr",
        "timestamp": 1613488458
    },
    {
        "content": "<p>some relevant sections of the dev-guide would be</p>",
        "id": 226525198,
        "sender_full_name": "lcnr",
        "timestamp": 1613488500
    },
    {
        "content": "<p><a href=\"https://rustc-dev-guide.rust-lang.org/generics.html#generics-and-substitutions\">https://rustc-dev-guide.rust-lang.org/generics.html#generics-and-substitutions</a></p>",
        "id": 226525200,
        "sender_full_name": "lcnr",
        "timestamp": 1613488501
    },
    {
        "content": "<p><a href=\"https://rustc-dev-guide.rust-lang.org/generic_arguments.html\">https://rustc-dev-guide.rust-lang.org/generic_arguments.html</a></p>",
        "id": 226525229,
        "sender_full_name": "lcnr",
        "timestamp": 1613488516
    },
    {
        "content": "<p><a href=\"https://rustc-dev-guide.rust-lang.org/queries/query-evaluation-model-in-detail.html#cycles\">https://rustc-dev-guide.rust-lang.org/queries/query-evaluation-model-in-detail.html#cycles</a></p>",
        "id": 226525540,
        "sender_full_name": "lcnr",
        "timestamp": 1613488672
    },
    {
        "content": "<p>official starting now ^^</p>",
        "id": 226529514,
        "sender_full_name": "lcnr",
        "timestamp": 1613490415
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 226529525,
        "sender_full_name": "lcnr",
        "timestamp": 1613490418
    },
    {
        "content": "<p>hi lcnr</p>",
        "id": 226529540,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1613490426
    },
    {
        "content": "<p>xd</p>",
        "id": 226529549,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1613490431
    },
    {
        "content": "<p>(and others :P)</p>",
        "id": 226529587,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1613490450
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> are you able to participate today?</p>",
        "id": 226529800,
        "sender_full_name": "lcnr",
        "timestamp": 1613490534
    },
    {
        "content": "<p>I'm here now</p>",
        "id": 226529829,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613490546
    },
    {
        "content": "<p>sorry, few minutes late</p>",
        "id": 226529840,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613490552
    },
    {
        "content": "<p><span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span> no worries</p>",
        "id": 226529856,
        "sender_full_name": "lcnr",
        "timestamp": 1613490560
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-02-16/near/226524620\">said</a>:</p>\n<blockquote>\n<p>meeting notes: <a href=\"https://hackmd.io/4bIoSM60TiaODqKPAavq6w\">https://hackmd.io/4bIoSM60TiaODqKPAavq6w</a></p>\n</blockquote>\n<p>^</p>",
        "id": 226529917,
        "sender_full_name": "lcnr",
        "timestamp": 1613490584
    },
    {
        "content": "<p>reading a bit to bring back into cache</p>",
        "id": 226530027,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613490610
    },
    {
        "content": "<p>I spent some time on friday reading into the whole <code>ConstDefId</code> hack</p>",
        "id": 226530062,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613490630
    },
    {
        "content": "<p>(or whatever it's called)</p>",
        "id": 226530068,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613490634
    },
    {
        "content": "<p>something is not feeling right to me about that, but I haven't put my finger on it yet</p>",
        "id": 226530084,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613490645
    },
    {
        "content": "<p>^^ want to talk about that now?</p>",
        "id": 226530135,
        "sender_full_name": "lcnr",
        "timestamp": 1613490669
    },
    {
        "content": "<p>not necessarily, we can dig into the topics you mentioned; I just feel like there should be some other way to do it</p>",
        "id": 226530200,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613490698
    },
    {
        "content": "<p>it's probably not strictly necessary for this issue</p>",
        "id": 226530305,
        "sender_full_name": "lcnr",
        "timestamp": 1613490728
    },
    {
        "content": "<p>so let's talk about <code>WithOptConstParam</code> at some other time</p>",
        "id": 226530359,
        "sender_full_name": "lcnr",
        "timestamp": 1613490754
    },
    {
        "content": "<p>or later today if we can</p>",
        "id": 226530386,
        "sender_full_name": "lcnr",
        "timestamp": 1613490764
    },
    {
        "content": "<p>I'm reading the ## solution section</p>",
        "id": 226530485,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613490801
    },
    {
        "content": "<blockquote>\n<p>-  build a graph with parameters being nodes and an edge between 2 parameters if the target parameter can be reached by using the source parameter.</p>\n</blockquote>",
        "id": 226530530,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613490821
    },
    {
        "content": "<p>what does \"reached\" mean here</p>",
        "id": 226530692,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613490878
    },
    {
        "content": "<p>I think maybe it means that they both appear in a where-clause?</p>",
        "id": 226530745,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613490900
    },
    {
        "content": "<p>hmm... could we do this during AST -&gt; HIR lowering? It feels like we've done similar things there before</p>",
        "id": 226530768,
        "sender_full_name": "oli",
        "timestamp": 1613490909
    },
    {
        "content": "<p>I think that is roughly the idea, <span class=\"user-mention\" data-user-id=\"124288\">@oli</span></p>",
        "id": 226530880,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613490958
    },
    {
        "content": "<p>\"reached\" probably means that you can somehow get a type mentioning the target param inside of the constant</p>",
        "id": 226530984,
        "sender_full_name": "lcnr",
        "timestamp": 1613490996
    },
    {
        "content": "<p>so my expectation is that</p>",
        "id": 226531021,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613491017
    },
    {
        "content": "<p>we find the \"roots\" by scanning the HIR of the constant</p>",
        "id": 226531069,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613491037
    },
    {
        "content": "<p>and then we have the transitive closure over a graph that is built from the where clauses</p>",
        "id": 226531092,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613491050
    },
    {
        "content": "<p>where there is an (undirected) edge between two type parameters if they both appear in some where clause, I think</p>",
        "id": 226531165,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613491083
    },
    {
        "content": "<p>wait... why are we talking about multiple where clauses?</p>",
        "id": 226531249,
        "sender_full_name": "oli",
        "timestamp": 1613491109
    },
    {
        "content": "<p>I agree that <code>ConcreteType: Trait&lt;T&gt;</code> may also be roots</p>",
        "id": 226531262,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613491116
    },
    {
        "content": "<p>so, <span class=\"user-mention\" data-user-id=\"124288\">@oli</span>, the trick is that if you have some associated constant or type like <code>&lt;T as Trait&gt;::Foo</code>, we have to include whatever where clauses we may need to figure out whether <code>T: Trait</code></p>",
        "id": 226531351,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613491161
    },
    {
        "content": "<p>if we have</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">whatever_expr</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)]</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">T</span>: <span class=\"nc\">Trait</span><span class=\"o\">&lt;</span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">U</span>: <span class=\"nc\">Trait</span><span class=\"o\">&lt;</span><span class=\"n\">V</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 226531370,
        "sender_full_name": "lcnr",
        "timestamp": 1613491171
    },
    {
        "content": "<p>that is not entirely obvious :)</p>",
        "id": 226531394,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613491181
    },
    {
        "content": "<p>oh</p>",
        "id": 226531399,
        "sender_full_name": "oli",
        "timestamp": 1613491183
    },
    {
        "content": "<p>thanks!</p>",
        "id": 226531404,
        "sender_full_name": "oli",
        "timestamp": 1613491186
    },
    {
        "content": "<p>the anon const may depend on <code>V</code> even though only <code>T</code> is mentioned explicitly</p>",
        "id": 226531426,
        "sender_full_name": "lcnr",
        "timestamp": 1613491193
    },
    {
        "content": "<p>(it can be a directed edge right?)</p>",
        "id": 226531548,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1613491214
    },
    {
        "content": "<p>I don't believe it's a directed edge</p>",
        "id": 226531588,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613491221
    },
    {
        "content": "<blockquote>\n<ul>\n<li>can a <code>U: Trait&lt;T&gt;</code> somehow \"pull in\" <code>U</code> if only <code>T</code> is explicitly used?</li>\n</ul>\n</blockquote>",
        "id": 226531620,
        "sender_full_name": "lcnr",
        "timestamp": 1613491227
    },
    {
        "content": "<p>/me thinks</p>",
        "id": 226531704,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613491242
    },
    {
        "content": "<p>also would we just always yeet predicates for stuff like u32: Foo&lt;T&gt; into anon consts</p>",
        "id": 226531797,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1613491260
    },
    {
        "content": "<p>I talked a bit with <span class=\"user-mention\" data-user-id=\"326176\">@Boxy</span> about this and we were unable to figure out a way do so</p>",
        "id": 226531837,
        "sender_full_name": "lcnr",
        "timestamp": 1613491267
    },
    {
        "content": "<p>because we cant tell if u32 is used or not without typeck right?</p>",
        "id": 226531842,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1613491268
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-02-16/near/226531262\">said</a>:</p>\n<blockquote>\n<p>I agree that <code>ConcreteType: Trait&lt;T&gt;</code> may also be roots</p>\n</blockquote>\n<p>^ @Boxy &lt;3</p>",
        "id": 226531959,
        "sender_full_name": "lcnr",
        "timestamp": 1613491288
    },
    {
        "content": "<p>I'm imagining something like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Forward</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Reverse</span><span class=\"o\">&lt;</span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Reverse</span><span class=\"o\">&lt;</span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">T</span>: <span class=\"nc\">Forward</span><span class=\"o\">&lt;</span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 226531970,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613491290
    },
    {
        "content": "<p>ah</p>",
        "id": 226532039,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1613491302
    },
    {
        "content": "<p>in which case you might have something like <code>where T: Forward&lt;U&gt;</code> but <code>&lt;U as Reverse&lt;T&gt;&gt;::Bar</code>...</p>",
        "id": 226532147,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613491321
    },
    {
        "content": "<p>I guess in that case they are both roots</p>",
        "id": 226532225,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613491332
    },
    {
        "content": "<p><code> &lt;U as Reverse&lt;_&gt;&gt;::Bar</code> doesn't infer <code>T</code> i think</p>",
        "id": 226532304,
        "sender_full_name": "lcnr",
        "timestamp": 1613491354
    },
    {
        "content": "<p>I'm not entirely sure whether it's directed or not</p>",
        "id": 226532446,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613491384
    },
    {
        "content": "<p>but it's not the high order bit somehow</p>",
        "id": 226532481,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613491391
    },
    {
        "content": "<p>uh</p>",
        "id": 226532603,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1613491423
    },
    {
        "content": "<p>yeah, whether it's directed or not doesn't change anything fundamental here</p>",
        "id": 226532636,
        "sender_full_name": "lcnr",
        "timestamp": 1613491432
    },
    {
        "content": "<p>so the pro of this plan is</p>",
        "id": 226532741,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613491448
    },
    {
        "content": "<p>it packs a certain measure of complexity into the HIR lowering</p>",
        "id": 226532768,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613491456
    },
    {
        "content": "<p>but</p>",
        "id": 226532785,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613491461
    },
    {
        "content": "<p>once that is done, everything is simple</p>",
        "id": 226532804,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613491465
    },
    {
        "content": "<p>the con is that you get potentially more where clauses and type parameters than you truly needed</p>",
        "id": 226532859,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613491482
    },
    {
        "content": "<p>which could lead to extra cycles</p>",
        "id": 226532870,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613491485
    },
    {
        "content": "<p>i wonder what implied bounds has to do with it</p>",
        "id": 226532913,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613491497
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-02-16/near/226532913\">said</a>:</p>\n<blockquote>\n<p>i wonder what implied bounds has to do with it</p>\n</blockquote>\n<p>what do you mean here?</p>",
        "id": 226533016,
        "sender_full_name": "lcnr",
        "timestamp": 1613491522
    },
    {
        "content": "<p>probably there isn't much interaction, but I was thinking about how implied bounds can mean one where clause implies more than they would today</p>",
        "id": 226533184,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613491564
    },
    {
        "content": "<p>I don't think it adds anything fundamental</p>",
        "id": 226533236,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613491575
    },
    {
        "content": "<p>we already have implied bounds for supertraits</p>",
        "id": 226533257,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613491581
    },
    {
        "content": "<p>one implication though</p>",
        "id": 226533305,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613491594
    },
    {
        "content": "<p>if you have e.g.</p>",
        "id": 226533327,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613491600
    },
    {
        "content": "<p>drinking coffee and staring into this meeting text, feeling more and more like I'm reading the Necronomicon.<br>\ninfinite cycles through time and space.<br>\ndark forces projecting out from the abyss.<br>\nlowering our souls into the underworld!</p>",
        "id": 226533380,
        "sender_full_name": "Jubilee",
        "timestamp": 1613491614
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">U</span>: <span class=\"nc\">Bar</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">C</span>: <span class=\"kt\">u32</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">test</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">T</span>: <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">U</span>::<span class=\"n\">C</span><span class=\"w\"> </span><span class=\"c1\">// works</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 226533499,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613491642
    },
    {
        "content": "<p>it probably doesn't work today in particular</p>",
        "id": 226533560,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613491661
    },
    {
        "content": "<p>but it could conceivably work</p>",
        "id": 226533568,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613491664
    },
    {
        "content": "<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 226533885,
        "sender_full_name": "lcnr",
        "timestamp": 1613491740
    },
    {
        "content": "<p>the \"undirected edge\" variant covers it though</p>",
        "id": 226533932,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613491756
    },
    {
        "content": "<p>that means we must start out with considering <code>T</code> used here</p>",
        "id": 226533938,
        "sender_full_name": "lcnr",
        "timestamp": 1613491760
    },
    {
        "content": "<p>ye ^^</p>",
        "id": 226533941,
        "sender_full_name": "lcnr",
        "timestamp": 1613491762
    },
    {
        "content": "<p>mmm</p>",
        "id": 226533977,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1613491781
    },
    {
        "content": "<p>thats oof ^^\"</p>",
        "id": 226534004,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1613491789
    },
    {
        "content": "<p>it really doesn't make me happy</p>",
        "id": 226534081,
        "sender_full_name": "lcnr",
        "timestamp": 1613491806
    },
    {
        "content": "<p>anyway, I am feeling...positive about this plan</p>",
        "id": 226534088,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613491810
    },
    {
        "content": "<p>if we yeeted the U: Bar predicate onto test though it wouldnt be needed right?</p>",
        "id": 226534099,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1613491816
    },
    {
        "content": "<p>but let's talk a bit about backwards and forwards compatibility</p>",
        "id": 226534103,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613491817
    },
    {
        "content": "<p>ok, well, I'm positive at least :)</p>",
        "id": 226534139,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613491836
    },
    {
        "content": "<p>:) mixed feelings on my side</p>",
        "id": 226534183,
        "sender_full_name": "lcnr",
        "timestamp": 1613491858
    },
    {
        "content": "<p>although actually</p>",
        "id": 226534184,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613491858
    },
    {
        "content": "<p>I realize that .. well, never mind</p>",
        "id": 226534210,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613491870
    },
    {
        "content": "<p>?</p>",
        "id": 226534241,
        "sender_full_name": "Jubilee",
        "timestamp": 1613491884
    },
    {
        "content": "<p>will this filtering actually help for things where we have an <code>unevaluated</code><br>\ni.e. will every use of an anon const inside of a where clause need to pull in every where clause that contains an unevaluated const</p>",
        "id": 226534243,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1613491885
    },
    {
        "content": "<p>I was going to say that implied bounds was really about parameter types</p>",
        "id": 226534268,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613491894
    },
    {
        "content": "<p>but (a) it was desugared in chalk into where clauses and (b) I think we could easily apply it here</p>",
        "id": 226534324,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613491914
    },
    {
        "content": "<p>but I think that's largely an orthogonal issue</p>",
        "id": 226534333,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613491920
    },
    {
        "content": "<p>like, we have not really \"approved\" implied bounds anyway</p>",
        "id": 226534394,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613491930
    },
    {
        "content": "<p>it's a sort of \"experimental direction\" we may take</p>",
        "id": 226534404,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613491936
    },
    {
        "content": "<p>why does it make you unhappy, <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> ?</p>",
        "id": 226534418,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613491942
    },
    {
        "content": "<p>because it seems surprising, or because you think it will lead to far too many generic parameters and where clauses being included?</p>",
        "id": 226534466,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613491960
    },
    {
        "content": "<p>both</p>",
        "id": 226534587,
        "sender_full_name": "lcnr",
        "timestamp": 1613492010
    },
    {
        "content": "<p>and because I think that there won't be a way to avoid this</p>",
        "id": 226534619,
        "sender_full_name": "lcnr",
        "timestamp": 1613492024
    },
    {
        "content": "<p>I would argue that whether it's surprising or not is not something worth discussing at this moment</p>",
        "id": 226534637,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613492032
    },
    {
        "content": "<p>that's kind of a \"design choice\" we can consider at some future point</p>",
        "id": 226534708,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613492048
    },
    {
        "content": "<p>the question of how many generics/where-clauses get included is an interesting thing that can be factually examined and explored</p>",
        "id": 226534739,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613492068
    },
    {
        "content": "<p>my expectation is actually the opposite, that in practice this will work out pretty well</p>",
        "id": 226534778,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613492091
    },
    {
        "content": "<p>there might be some further heuristics one could apply, as well</p>",
        "id": 226534826,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613492112
    },
    {
        "content": "<p>e.g., suppose that we have <code>T::C</code> and we know that <code>C</code> is located in the trait <code>Trait</code></p>",
        "id": 226534850,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613492123
    },
    {
        "content": "<p>and there is a <code>T: Trait</code> where clause</p>",
        "id": 226534873,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613492131
    },
    {
        "content": "<p>in that case, <em>particularly if we have implied bounds</em>, that is actually all we need</p>",
        "id": 226534903,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613492146
    },
    {
        "content": "<p>but in any case we could exclude things like <code>T: Foo&lt;U&gt;</code>, because <code>T: Trait</code> can't talk about <code>U</code></p>",
        "id": 226534986,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613492167
    },
    {
        "content": "<p>(unless we add an <code>exists&lt;X&gt; { ... }</code> where clause)</p>",
        "id": 226535007,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613492176
    },
    {
        "content": "<p>I think the actual algorithm can be a bit tighter, in other words</p>",
        "id": 226535093,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613492209
    },
    {
        "content": "<p>but i am thinking about - maybe we can do a crater run to examine it? not sure if there's enough folks using const generics to make that feasible</p>",
        "id": 226535158,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613492231
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-02-16/near/226535158\">said</a>:</p>\n<blockquote>\n<p>but i am thinking about - maybe we can do a crater run to examine it? not sure if there's enough folks using const generics to make that feasible</p>\n</blockquote>\n<p>we won't be able to</p>",
        "id": 226535195,
        "sender_full_name": "lcnr",
        "timestamp": 1613492247
    },
    {
        "content": "<p>still, for any constant that is like <code>3+4</code>, none of this matters at all, and that likely covers quite a lot of them</p>",
        "id": 226535200,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613492248
    },
    {
        "content": "<p>or wait, do you mean a crater run going from \"not providing any generics\" to \"providing the reachable subset\"</p>",
        "id": 226535252,
        "sender_full_name": "lcnr",
        "timestamp": 1613492277
    },
    {
        "content": "<p>that should be possible</p>",
        "id": 226535308,
        "sender_full_name": "lcnr",
        "timestamp": 1613492284
    },
    {
        "content": "<p>but because anon consts currently can't refer to any generic parameters at all</p>",
        "id": 226535358,
        "sender_full_name": "lcnr",
        "timestamp": 1613492303
    },
    {
        "content": "<p>it probably won't be very meaningful if the crater run goes well</p>",
        "id": 226535463,
        "sender_full_name": "lcnr",
        "timestamp": 1613492336
    },
    {
        "content": "<p>what I meant was abusing crater to gather statistics</p>",
        "id": 226535520,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613492357
    },
    {
        "content": "<p>an AnonConst is a const expression, right?</p>",
        "id": 226535762,
        "sender_full_name": "Jubilee",
        "timestamp": 1613492436
    },
    {
        "content": "<p>and specifically what it becomes when it is realized in the HIR</p>",
        "id": 226535801,
        "sender_full_name": "Jubilee",
        "timestamp": 1613492451
    },
    {
        "content": "<p>an anonymous constant is a const expression that is embedded in some non-expression context</p>",
        "id": 226535863,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613492474
    },
    {
        "content": "<p>e.g., as part of a type</p>",
        "id": 226535871,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613492476
    },
    {
        "content": "<p>in any case one that does not produce a value that is directly used as a result</p>",
        "id": 226535902,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613492489
    },
    {
        "content": "<p>I believe the <code>3+4</code> in <code>[0; 3+4]</code> also qualifies</p>",
        "id": 226535929,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613492501
    },
    {
        "content": "<p>a const expr in the Bahamas, got it.</p>",
        "id": 226535956,
        "sender_full_name": "Jubilee",
        "timestamp": 1613492509
    },
    {
        "content": "<p>anyway, <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span>, what I wanted to ask was</p>",
        "id": 226536027,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613492525
    },
    {
        "content": "<p>let's just assume we had some way to get a \"guess\" at the set of required parameters/where-clauses that fit roughly the approach of</p>\n<ul>\n<li>finding a root set of parameters, perhaps with the name of traits/constants they might be using </li>\n<li>some transitive closure thereof</li>\n</ul>",
        "id": 226536132,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613492573
    },
    {
        "content": "<p>whatever we do, we know that it will be an overapproximation</p>",
        "id": 226536157,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613492584
    },
    {
        "content": "<p>so the question is</p>",
        "id": 226536408,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613492687
    },
    {
        "content": "<p>as we change the function, making it tighter, let's say</p>",
        "id": 226536424,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613492696
    },
    {
        "content": "<p>do we break compatibility?</p>",
        "id": 226536430,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613492699
    },
    {
        "content": "<p>presuming it's always a sound overapproximation</p>",
        "id": 226536440,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613492703
    },
    {
        "content": "<p>\"sound\" meaning that the predicates and params we remove were actually unreachable?</p>",
        "id": 226536504,
        "sender_full_name": "lcnr",
        "timestamp": 1613492733
    },
    {
        "content": "<p>correct</p>",
        "id": 226536542,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613492751
    },
    {
        "content": "<p>or rather, were really not needed for the expression to be evaluated</p>",
        "id": 226536560,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613492761
    },
    {
        "content": "<p>one thing I was mentioned last time --</p>",
        "id": 226536602,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613492765
    },
    {
        "content": "<p>in chalk, at least, I've thought about having a variation where</p>",
        "id": 226536618,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613492772
    },
    {
        "content": "<p>when you solve a trait, you get back not only a solution, but which predicates in the environment were needed</p>",
        "id": 226536644,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613492786
    },
    {
        "content": "<p>this would help with caching, because we can create a \"minimal cache key\"</p>",
        "id": 226536664,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613492794
    },
    {
        "content": "<p>such that if you have some superset of that minimal environment, you can still reuse the result</p>",
        "id": 226536694,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613492808
    },
    {
        "content": "<p>so, if we imagine we had that, there is potentially some world in the future where we can leverage it to get a \"precise\" result (albeit post type check)</p>",
        "id": 226536737,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613492828
    },
    {
        "content": "<p>but it seems like strictly more code would compile</p>",
        "id": 226536753,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613492837
    },
    {
        "content": "<p>so I'm trying to think, are there cases (like implied bounds, perhaps...) where that assumption is violated?</p>",
        "id": 226536794,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613492849
    },
    {
        "content": "<p>my first guess would be no</p>",
        "id": 226536885,
        "sender_full_name": "lcnr",
        "timestamp": 1613492883
    },
    {
        "content": "<p>my second guess would be</p>",
        "id": 226537046,
        "sender_full_name": "lcnr",
        "timestamp": 1613492951
    },
    {
        "content": "<p>or well, a concern</p>",
        "id": 226537075,
        "sender_full_name": "lcnr",
        "timestamp": 1613492960
    },
    {
        "content": "<p>if we fail to unify two consts because of the occurs check</p>",
        "id": 226537129,
        "sender_full_name": "lcnr",
        "timestamp": 1613492985
    },
    {
        "content": "<p>which does not cause the compilation to fail</p>",
        "id": 226537275,
        "sender_full_name": "lcnr",
        "timestamp": 1613493028
    },
    {
        "content": "<p>and then later remove the param which caused that</p>",
        "id": 226537301,
        "sender_full_name": "lcnr",
        "timestamp": 1613493039
    },
    {
        "content": "<p>The most likely thing that comes to mind is a failure to implement the minimal cache key correctly which results in the cache key potentially being actually non-minimal, especially if it caches a superset (relatively speaking) first and then tries other valid subsets. (but that shouldn't cause an error I think, just a blowup in compilation time? unless it's botched really hard)</p>",
        "id": 226537341,
        "sender_full_name": "Jubilee",
        "timestamp": 1613493058
    },
    {
        "content": "<p>we could get an error</p>",
        "id": 226537400,
        "sender_full_name": "lcnr",
        "timestamp": 1613493079
    },
    {
        "content": "<p>but breaking inference is allowed</p>",
        "id": 226537436,
        "sender_full_name": "lcnr",
        "timestamp": 1613493094
    },
    {
        "content": "<p>and more importantly, i can't think of a case where this actually happens</p>",
        "id": 226537466,
        "sender_full_name": "lcnr",
        "timestamp": 1613493106
    },
    {
        "content": "<p>it sounds quite obscure</p>",
        "id": 226537600,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613493161
    },
    {
        "content": "<p>I can sort of <em>plausibly</em> imagine it coming up</p>",
        "id": 226537612,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613493170
    },
    {
        "content": "<p>but not often</p>",
        "id": 226537615,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613493171
    },
    {
        "content": "<p>i don't think we're currently able to use the bounds of anon consts</p>",
        "id": 226537741,
        "sender_full_name": "lcnr",
        "timestamp": 1613493229
    },
    {
        "content": "<p>so I do not expect implied bounds to be an issue</p>",
        "id": 226537832,
        "sender_full_name": "lcnr",
        "timestamp": 1613493251
    },
    {
        "content": "<p>I feel like there would not be backwards compatibility issues</p>",
        "id": 226537960,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613493302
    },
    {
        "content": "<p>i expect so as well <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 226538060,
        "sender_full_name": "lcnr",
        "timestamp": 1613493338
    },
    {
        "content": "<p>which means that there is no harm with starting out with this approach</p>",
        "id": 226538089,
        "sender_full_name": "lcnr",
        "timestamp": 1613493349
    },
    {
        "content": "<p>that's what I'm getting at, yes :)</p>",
        "id": 226538103,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613493355
    },
    {
        "content": "<p>which is good <span aria-label=\"sparkles\" class=\"emoji emoji-2728\" role=\"img\" title=\"sparkles\">:sparkles:</span></p>",
        "id": 226538110,
        "sender_full_name": "lcnr",
        "timestamp": 1613493358
    },
    {
        "content": "<p>and I think we will thank ourselves later</p>",
        "id": 226538130,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613493363
    },
    {
        "content": "<p>for not trying to be too smart and tempt the cycle gods to hurl their <span aria-label=\"lightning\" class=\"emoji emoji-1f329\" role=\"img\" title=\"lightning\">:lightning:</span></p>",
        "id": 226538216,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613493381
    },
    {
        "content": "<p>I feel like when we have more of the pieces in place, we can revisit the question; I have some vague thoughts that are still germinating about better ways to reason through cycles for cases like this, but I don't know if they'll go anywhere</p>",
        "id": 226538361,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613493427
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> are you going to try and implement that then?</p>",
        "id": 226538601,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613493506
    },
    {
        "content": "<p>I would be up for reviewing</p>",
        "id": 226538607,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613493509
    },
    {
        "content": "<p>I want to start carrying more review load here so I understand the code better</p>",
        "id": 226538624,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613493517
    },
    {
        "content": "<p>I've allocated some review blocks in my schedule :)</p>",
        "id": 226538637,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613493524
    },
    {
        "content": "<p>i do think we should try and implement this approach</p>",
        "id": 226538716,
        "sender_full_name": "lcnr",
        "timestamp": 1613493546
    },
    {
        "content": "<p>I'm not sure also how many of the folks present are interested in implementing :)</p>",
        "id": 226538724,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613493548
    },
    {
        "content": "<p>/me hides</p>",
        "id": 226538765,
        "sender_full_name": "oli",
        "timestamp": 1613493562
    },
    {
        "content": "<p>i won't be able to get to it in the near future, at least until the 25th</p>",
        "id": 226538771,
        "sender_full_name": "lcnr",
        "timestamp": 1613493564
    },
    {
        "content": "<p>not you <span class=\"user-mention\" data-user-id=\"124288\">@oli</span>, you're spoken for :P</p>",
        "id": 226538793,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613493572
    },
    {
        "content": "<p>I would be interested but probably dont know enough</p>",
        "id": 226538800,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1613493574
    },
    {
        "content": "<p>(Context: I want <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> to do some stuff around named impl trait, although actually that could be a good mentored project)</p>",
        "id": 226538843,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613493593
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-02-16/near/226538771\">said</a>:</p>\n<blockquote>\n<p>i won't be able to get to it in the near future, at least until the 25th</p>\n</blockquote>\n<p>that's not like super far away :)</p>",
        "id": 226538967,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613493628
    },
    {
        "content": "<p>true ^^</p>",
        "id": 226538983,
        "sender_full_name": "lcnr",
        "timestamp": 1613493634
    },
    {
        "content": "<p>i don't think i can mentor efficiently here cause i still don't know exactly how to do this</p>",
        "id": 226539101,
        "sender_full_name": "lcnr",
        "timestamp": 1613493685
    },
    {
        "content": "<p>(\"exactly\" is carrying a lot of weight here)</p>",
        "id": 226539134,
        "sender_full_name": "lcnr",
        "timestamp": 1613493703
    },
    {
        "content": "<p>this would involve touching ParamEnv stuff wouldnt it?</p>",
        "id": 226539191,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1613493726
    },
    {
        "content": "<p>or no?</p>",
        "id": 226539205,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1613493729
    },
    {
        "content": "<p>yeah</p>",
        "id": 226539258,
        "sender_full_name": "lcnr",
        "timestamp": 1613493743
    },
    {
        "content": "<p>lol</p>",
        "id": 226539270,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1613493746
    },
    {
        "content": "<p>but only the way we create param envs</p>",
        "id": 226539292,
        "sender_full_name": "lcnr",
        "timestamp": 1613493755
    },
    {
        "content": "<p>doesn't change how we use them</p>",
        "id": 226539317,
        "sender_full_name": "lcnr",
        "timestamp": 1613493764
    },
    {
        "content": "<p>just dont create an empty one ;)</p>",
        "id": 226539334,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1613493768
    },
    {
        "content": "<p>(or do and I'll have to fix it when it pops up in my ripgrep search <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span>)</p>",
        "id": 226539396,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1613493798
    },
    {
        "content": "<p>xd</p>",
        "id": 226539418,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1613493810
    },
    {
        "content": "<p>then, that's a good point to stop today. I think I will try to implement this myself</p>",
        "id": 226539443,
        "sender_full_name": "lcnr",
        "timestamp": 1613493822
    },
    {
        "content": "<p>potentially mentoring <span class=\"user-mention\" data-user-id=\"326176\">@Boxy</span> if there ends up being a fairly clean solution</p>",
        "id": 226539508,
        "sender_full_name": "lcnr",
        "timestamp": 1613493847
    },
    {
        "content": "<p>uwu</p>",
        "id": 226539561,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1613493859
    },
    {
        "content": "<p>there's still the <code>## related</code> section</p>",
        "id": 226539597,
        "sender_full_name": "lcnr",
        "timestamp": 1613493872
    },
    {
        "content": "<p>which i would like to talk about</p>",
        "id": 226539602,
        "sender_full_name": "lcnr",
        "timestamp": 1613493877
    },
    {
        "content": "<p>but let's do this and <code>WithOptConstParam</code>next week</p>",
        "id": 226539645,
        "sender_full_name": "lcnr",
        "timestamp": 1613493898
    },
    {
        "content": "<p>thanks for your time everybody  <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 226539784,
        "sender_full_name": "lcnr",
        "timestamp": 1613493963
    },
    {
        "content": "<p>and damn you <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> for being this convincing</p>",
        "id": 226539876,
        "sender_full_name": "lcnr",
        "timestamp": 1613493986
    },
    {
        "content": "<p>i really wanted to tempt the cycle gods</p>",
        "id": 226539902,
        "sender_full_name": "lcnr",
        "timestamp": 1613493994
    },
    {
        "content": "<p>also since this was brought up earlier:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Forward</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Reverse</span><span class=\"o\">&lt;</span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Foo</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Reverse</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">T</span>: <span class=\"nc\">Forward</span><span class=\"o\">&lt;</span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">type</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nc\">Forward</span><span class=\"o\">&lt;</span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">foo</span>: <span class=\"o\">&lt;</span><span class=\"n\">U</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Reverse</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"o\">&gt;&gt;</span>::<span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">loop</span><span class=\"w\"> </span><span class=\"p\">{};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>doesnt compile</p>",
        "id": 226539957,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1613494022
    },
    {
        "content": "<p>it actually tries to infer the _ to ()</p>",
        "id": 226540016,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1613494044
    },
    {
        "content": "<p>no idea why but ^^\"</p>",
        "id": 226540035,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1613494049
    },
    {
        "content": "<p>type inference variable fallback</p>",
        "id": 226540076,
        "sender_full_name": "lcnr",
        "timestamp": 1613494070
    },
    {
        "content": "<p>ah we just try () if inference fails?</p>",
        "id": 226540168,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1613494092
    },
    {
        "content": "<p>pretty much</p>",
        "id": 226540188,
        "sender_full_name": "lcnr",
        "timestamp": 1613494104
    },
    {
        "content": "<p>we replace uninfered variables with <code>()</code></p>",
        "id": 226540219,
        "sender_full_name": "lcnr",
        "timestamp": 1613494122
    },
    {
        "content": "<p>cool</p>",
        "id": 226540235,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1613494132
    },
    {
        "content": "<p>and <code>{integer}</code> with <code>i32</code></p>",
        "id": 226540241,
        "sender_full_name": "lcnr",
        "timestamp": 1613494133
    }
]