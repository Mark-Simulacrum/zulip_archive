[
    {
        "content": "<p><code>min_const_generics</code> forbids params in anonymous constants during name resolution.</p>\n<p>We already have code working on stable which uses params in repeat expression which is currently linted against (<a href=\"https://github.com/rust-lang/rust/issues/74595\">#74595</a>)</p>",
        "id": 212731157,
        "sender_full_name": "lcnr",
        "timestamp": 1602181749
    },
    {
        "content": "<p>afaict lifetimes are currently still completely unusable as it seems to always cause an ICE (please test this for yourself). For example</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">wow</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span> <span class=\"nc\">where</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"p\">()</span>: <span class=\"nb\">Sized</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">what</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">wow</span>::<span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">()];</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 212731280,
        "sender_full_name": "lcnr",
        "timestamp": 1602181810
    },
    {
        "content": "<p>nm, only early bound lifetimes break, late bound lifetimes are already supported</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">what</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"p\">()</span>: <span class=\"nb\">Sized</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"mi\">3</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}];</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 212731447,
        "sender_full_name": "lcnr",
        "timestamp": 1602181905
    },
    {
        "content": "<p>so I personally feel that it's fine to \"just\" forbid lifetimes here, even if it breaks the second example here, as the current support is far from ideal and afaict never actually useful (It should always just be possible to replace <code>'a</code> with <code>'static</code>)</p>",
        "id": 212731902,
        "sender_full_name": "lcnr",
        "timestamp": 1602182097
    },
    {
        "content": "<p>I am not so sure about type and const parameters <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> we may want to only forbid them in types but lift the restrictions for repeat expressions to not break stable code</p>",
        "id": 212732176,
        "sender_full_name": "lcnr",
        "timestamp": 1602182238
    },
    {
        "content": "<p>I am still not too happy about breaking the following and think that doing so to slightly simplify <code>min_const_generics</code> is not worth it</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">test</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"bp\">Self</span>::<span class=\"n\">N</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 212732781,
        "sender_full_name": "lcnr",
        "timestamp": 1602182533
    },
    {
        "content": "<p>So to summarize, I think that with <code>min_const_generics</code>,  we should</p>",
        "id": 212732881,
        "sender_full_name": "lcnr",
        "timestamp": 1602182597
    },
    {
        "content": "<ul>\n<li>completely forbid lifetimes in anonymous constants which fixes ICE for early bound lifetimes and breaks code currently compiling on stable for late bound lifetimes (<a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=2f13bc141295e2cf606b04cf8235c5ac\">playground</a>)</li>\n</ul>",
        "id": 212733116,
        "sender_full_name": "lcnr",
        "timestamp": 1602182706
    },
    {
        "content": "<ul>\n<li>forbid type parameters in anonymous constants if they are used inside of types, fixing ICE and weird error messages, but keep allowing type parameters in repeat expressions while emitting the <code>const_evaluatable_unchecked</code> future compat lint, not breaking any code compiling on stable (that I know of)</li>\n</ul>",
        "id": 212733328,
        "sender_full_name": "lcnr",
        "timestamp": 1602182813
    },
    {
        "content": "<ul>\n<li>only allow const params by themselves (<code>[u8; N]</code> and  <code>[0; N]</code>) in both repeat expressions and types. Meaning that const params in more complex expressions always result in a compile error.</li>\n</ul>",
        "id": 212733699,
        "sender_full_name": "lcnr",
        "timestamp": 1602183001
    },
    {
        "content": "<p>We already forbid such lifetimes, right?</p>",
        "id": 212806938,
        "sender_full_name": "varkor",
        "timestamp": 1602239091
    },
    {
        "content": "<p>(I need to think about these examples a bit more. I'll reply properly later.)</p>",
        "id": 212807149,
        "sender_full_name": "varkor",
        "timestamp": 1602239248
    },
    {
        "content": "<p>yeah, the only change from the current <code>min_const_generics</code> impl will be to allow type params in repeat expressions, the rest is already implemented</p>",
        "id": 212807622,
        "sender_full_name": "lcnr",
        "timestamp": 1602239598
    },
    {
        "content": "<p>I think we never previously explicitly stated that late bound lifetimes currently work on stable, so I wanted to at least acknowledge that we have a breaking change here</p>",
        "id": 212807732,
        "sender_full_name": "lcnr",
        "timestamp": 1602239662
    },
    {
        "content": "<p>I would like to go ahead with the loosening of ty params in repeat expressions and then be done with this issue, <span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> did you have the time to look more deeply into this?</p>",
        "id": 213697283,
        "sender_full_name": "lcnr",
        "timestamp": 1603012314
    },
    {
        "content": "<p>Are there any concerns with permitting generic parameters in repeat expressions, other than inconsistency with other anonymous constants?</p>",
        "id": 213725952,
        "sender_full_name": "varkor",
        "timestamp": 1603055293
    },
    {
        "content": "<p>Sorry, it's been hectic since then, and I haven't thought about it in detail, but I would imagine that is fine if not.</p>",
        "id": 213725962,
        "sender_full_name": "varkor",
        "timestamp": 1603055317
    },
    {
        "content": "<p>not really, we always emit a future compat lint in that case and this will mostly keep the behavior we have on stable atm</p>",
        "id": 213762167,
        "sender_full_name": "lcnr",
        "timestamp": 1603100550
    },
    {
        "content": "<p>this keeps the behavior of</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![allow(dead_code)]</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">size_of</span>::<span class=\"o\">&lt;*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()];</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">ASSOC</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">test</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"bp\">Self</span>::<span class=\"n\">ASSOC</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 213762397,
        "sender_full_name": "lcnr",
        "timestamp": 1603100703
    },
    {
        "content": "<p>which compiles on nightly with</p>\n<div class=\"codehilite\"><pre><span></span><code>warning: cannot use constants which depend on generic parameters in types\n --&gt; src/lib.rs:4:9\n  |\n4 |     [0; std::mem::size_of::&lt;*mut T&gt;()];\n  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |\n  = note: `#[warn(const_evaluatable_unchecked)]` on by default\n  = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n  = note: for more information, see issue #76200 &lt;https://github.com/rust-lang/rust/issues/76200&gt;\n\nwarning: cannot use constants which depend on generic parameters in types\n  --&gt; src/lib.rs:13:13\n   |\n13 |         [0; Self::ASSOC];\n   |             ^^^^^^^^^^^\n   |\n   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n   = note: for more information, see issue #76200 &lt;https://github.com/rust-lang/rust/issues/76200&gt;\n\nwarning: 2 warnings emitted\n</code></pre></div>",
        "id": 213762423,
        "sender_full_name": "lcnr",
        "timestamp": 1603100719
    },
    {
        "content": "<p>Sounds good to me <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 213766187,
        "sender_full_name": "varkor",
        "timestamp": 1603103145
    },
    {
        "content": "<p>implemented in <a href=\"https://github.com/rust-lang/rust/issues/78224\">#78224</a></p>",
        "id": 214158424,
        "sender_full_name": "lcnr",
        "timestamp": 1603356239
    },
    {
        "content": "<p>PANIC!<br>\n<a href=\"https://github.com/rust-lang/rust/issues/78224\">#78224</a> will extend the <code>const_evaluatable_unchecked</code> future compat lint to <code>Self</code> types containing const params</p>",
        "id": 214357021,
        "sender_full_name": "lcnr",
        "timestamp": 1603481939
    },
    {
        "content": "<p>for example</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">ASSOC</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">test</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"bp\">Self</span>::<span class=\"n\">ASSOC</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 214357086,
        "sender_full_name": "lcnr",
        "timestamp": 1603481992
    },
    {
        "content": "<p>this is not possible on stable (obviously) but will be a future compat lint afterwards</p>",
        "id": 214357158,
        "sender_full_name": "lcnr",
        "timestamp": 1603482024
    },
    {
        "content": "<p>I think that's something we can live with, should I just add it as a test to <a href=\"https://github.com/rust-lang/rust/issues/78224\">#78224</a> <span aria-label=\"laughter tears\" class=\"emoji emoji-1f602\" role=\"img\" title=\"laughter tears\">:laughter_tears:</span></p>",
        "id": 214357189,
        "sender_full_name": "lcnr",
        "timestamp": 1603482058
    },
    {
        "content": "<p>But that lint is incorrect, no? It's not an issue to use <code>Self::ASSOC</code>, because it cannot be generic.</p>",
        "id": 214357437,
        "sender_full_name": "varkor",
        "timestamp": 1603482236
    },
    {
        "content": "<p>well, somewhat</p>",
        "id": 214357584,
        "sender_full_name": "lcnr",
        "timestamp": 1603482324
    },
    {
        "content": "<p>we probably do want to allow that</p>",
        "id": 214357614,
        "sender_full_name": "lcnr",
        "timestamp": 1603482349
    },
    {
        "content": "<p>I don't see associated consts being a problem, because if there is an issue using them, they'll already trigger an error where they are declared.</p>",
        "id": 214357788,
        "sender_full_name": "varkor",
        "timestamp": 1603482472
    },
    {
        "content": "<p>there is stuff like this</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">ASSOC</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// works</span>\n<span class=\"k\">fn</span> <span class=\"nf\">test1</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">T</span>::<span class=\"n\">ASSOC</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// does not work, because of how trait resolution currently works</span>\n<span class=\"k\">fn</span> <span class=\"nf\">test2</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">Foo</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">T</span>::<span class=\"n\">ASSOC</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 214357910,
        "sender_full_name": "lcnr",
        "timestamp": 1603482545
    },
    {
        "content": "<p>but allowing associated types for inherent impls is probably something we want</p>",
        "id": 214358056,
        "sender_full_name": "lcnr",
        "timestamp": 1603482640
    },
    {
        "content": "<p>though I can't say for sure if that also won't break down for some weird inputs</p>",
        "id": 214358123,
        "sender_full_name": "lcnr",
        "timestamp": 1603482706
    },
    {
        "content": "<p>I don't think it's a huge issue if there are some rare false positives, considering we hope to fix it before too long anyway.</p>",
        "id": 214358207,
        "sender_full_name": "varkor",
        "timestamp": 1603482747
    },
    {
        "content": "<p>what's a false positive here?</p>",
        "id": 214358225,
        "sender_full_name": "lcnr",
        "timestamp": 1603482762
    },
    {
        "content": "<p>code that works even though it shouldn't or code we lint even though it should work</p>",
        "id": 214358251,
        "sender_full_name": "lcnr",
        "timestamp": 1603482782
    },
    {
        "content": "<p>A lint even though it should work.</p>",
        "id": 214358688,
        "sender_full_name": "varkor",
        "timestamp": 1603483025
    }
]