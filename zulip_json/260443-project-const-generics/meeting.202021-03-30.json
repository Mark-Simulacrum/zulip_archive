[
    {
        "content": "<p>meeting in a bit more than 6 hours at <time datetime=\"2021-03-30T14:45:00Z\">2021-03-30T16:45:00+02:00</time></p>",
        "id": 232391768,
        "sender_full_name": "lcnr",
        "timestamp": 1617093490
    },
    {
        "content": "<p>i think this is the case for all of europe, but it is now again an hour later for me because of daylight saving time</p>",
        "id": 232391859,
        "sender_full_name": "lcnr",
        "timestamp": 1617093573
    },
    {
        "content": "<p>well then, <span class=\"user-group-mention\" data-user-group-id=\"3805\">@project-const-generics</span></p>",
        "id": 232437569,
        "sender_full_name": "lcnr",
        "timestamp": 1617115527
    },
    {
        "content": "<p>it's meeting time</p>",
        "id": 232437587,
        "sender_full_name": "lcnr",
        "timestamp": 1617115531
    },
    {
        "content": "<p>highly professional meeting notes: <a href=\"https://hackmd.io/mOABg7lVTGKTBihOf6fcvg\">https://hackmd.io/mOABg7lVTGKTBihOf6fcvg</a></p>",
        "id": 232437722,
        "sender_full_name": "lcnr",
        "timestamp": 1617115566
    },
    {
        "content": "<p>also an announcement, i won't be able to participate in the cg meeting next week due to university</p>",
        "id": 232438155,
        "sender_full_name": "lcnr",
        "timestamp": 1617115689
    },
    {
        "content": "<p>so unless there's something you want to discuss without me, it's probably easiest to just skip that one</p>",
        "id": 232438300,
        "sender_full_name": "lcnr",
        "timestamp": 1617115735
    },
    {
        "content": "<p>not completely sure about how to start today</p>",
        "id": 232438531,
        "sender_full_name": "lcnr",
        "timestamp": 1617115815
    },
    {
        "content": "<p>I'm not going to be of any help with <a href=\"https://github.com/rust-lang/rust/issues/83249\">https://github.com/rust-lang/rust/issues/83249</a>, but I can talk about generic const generics</p>",
        "id": 232438553,
        "sender_full_name": "oli",
        "timestamp": 1617115825
    },
    {
        "content": "<p>wave</p>",
        "id": 232438697,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617115876
    },
    {
        "content": "<p>i guess a good question is: <span class=\"user-mention\" data-user-id=\"124288\">@oli</span>  <span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> do you know whether we want to evaluate generic consts anywhere?</p>",
        "id": 232438702,
        "sender_full_name": "lcnr",
        "timestamp": 1617115880
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-03-30/near/232438300\">said</a>:</p>\n<blockquote>\n<p>so unless there's something you want to discuss without me, it's probably easiest to just skip that one</p>\n</blockquote>\n<p>this seems fine</p>",
        "id": 232438752,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617115895
    },
    {
        "content": "<p>if unused substs wouldn't exist</p>",
        "id": 232438782,
        "sender_full_name": "lcnr",
        "timestamp": 1617115906
    },
    {
        "content": "<p>evaluate generic consts as in \"while still polymorphic\"?</p>",
        "id": 232438903,
        "sender_full_name": "oli",
        "timestamp": 1617115935
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> you pointed me earlier at some exciting development, too, but I didn't get a chance to read up on it</p>",
        "id": 232438921,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617115940
    },
    {
        "content": "<p>yeah</p>",
        "id": 232438935,
        "sender_full_name": "lcnr",
        "timestamp": 1617115944
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-03-30/near/232438921\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> you pointed me earlier at some exciting development, too, but I didn't get a chance to read up on it</p>\n</blockquote>\n<p>don't have to then</p>",
        "id": 232438954,
        "sender_full_name": "lcnr",
        "timestamp": 1617115950
    },
    {
        "content": "<p>it's a fairly simple idea i can explain here</p>",
        "id": 232438995,
        "sender_full_name": "lcnr",
        "timestamp": 1617115962
    },
    {
        "content": "<p>I kind of want to know what it was though :)</p>",
        "id": 232438999,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617115962
    },
    {
        "content": "<p>The only reason for that ever to happen is for <code>-Zpolymorphize</code>, and I'm not sure whether that counts?</p>",
        "id": 232439000,
        "sender_full_name": "oli",
        "timestamp": 1617115962
    },
    {
        "content": "<p>yeah, that's what i was able to think of as well</p>",
        "id": 232439076,
        "sender_full_name": "lcnr",
        "timestamp": 1617115986
    },
    {
        "content": "<p>soooo</p>",
        "id": 232439099,
        "sender_full_name": "lcnr",
        "timestamp": 1617115993
    },
    {
        "content": "<p>let's start by looking at <a href=\"https://github.com/rust-lang/rust/issues/83249\">https://github.com/rust-lang/rust/issues/83249</a></p>",
        "id": 232439130,
        "sender_full_name": "lcnr",
        "timestamp": 1617116003
    },
    {
        "content": "<p>here we try to evaluate the array len in <code>foo</code> while <code>T</code> is still an inference variable</p>",
        "id": 232439300,
        "sender_full_name": "lcnr",
        "timestamp": 1617116051
    },
    {
        "content": "<p>to do that we replace the inference var <code>$0</code> with a placeholder type</p>",
        "id": 232439364,
        "sender_full_name": "lcnr",
        "timestamp": 1617116072
    },
    {
        "content": "<p><code>^0</code></p>",
        "id": 232439471,
        "sender_full_name": "lcnr",
        "timestamp": 1617116106
    },
    {
        "content": "<p>we now try to evaluate the array length in the param env of <code>bar</code> (which is empty), with <code>T = ^0</code></p>",
        "id": 232439580,
        "sender_full_name": "lcnr",
        "timestamp": 1617116141
    },
    {
        "content": "<p>which causes us to encounter <code>&lt;^0 as Foo&gt;::N</code></p>",
        "id": 232439617,
        "sender_full_name": "lcnr",
        "timestamp": 1617116154
    },
    {
        "content": "<p><em>currently</em>, trying to get the instance for that associated constants causes an ICE because we can't prove <code>^0: Foo</code></p>",
        "id": 232439780,
        "sender_full_name": "lcnr",
        "timestamp": 1617116192
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-03-30/near/232439300\">said</a>:</p>\n<blockquote>\n<p>here we try to evaluate the array len in <code>foo</code> while <code>T</code> is still an inference variable</p>\n</blockquote>\n<p>where/how/why does this happen?</p>",
        "id": 232439954,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617116257
    },
    {
        "content": "<p>while typechecking <code>bar</code></p>",
        "id": 232439987,
        "sender_full_name": "lcnr",
        "timestamp": 1617116270
    },
    {
        "content": "<p>can you walk through that a bit more for me?</p>",
        "id": 232440239,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617116352
    },
    {
        "content": "<p>so, I think that we already know the type of <code>$0</code> at that point due to lazy norm and are just missing a call to <code>resolve_vars_if_possible</code> here</p>",
        "id": 232440251,
        "sender_full_name": "lcnr",
        "timestamp": 1617116355
    },
    {
        "content": "<p>i am not sure if i can <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 232440461,
        "sender_full_name": "lcnr",
        "timestamp": 1617116415
    },
    {
        "content": "<p>i guess the fundamental question here is: do we want to try and eval consts if they contain inference variables/placeholders?</p>",
        "id": 232440561,
        "sender_full_name": "lcnr",
        "timestamp": 1617116440
    },
    {
        "content": "<p>my idea at the end of the last meeting was to only evaluate constants if they are fully concrete (ignoring unused substs)</p>",
        "id": 232440735,
        "sender_full_name": "lcnr",
        "timestamp": 1617116497
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-03-30/near/232440561\">said</a>:</p>\n<blockquote>\n<p>i guess the fundamental question here is: do we want to try and eval consts if they contain inference variables/placeholders?</p>\n</blockquote>\n<p>by that you mean its type containing inference variables, right? not the body of the constant (beyond those variables being in substs)</p>",
        "id": 232440848,
        "sender_full_name": "oli",
        "timestamp": 1617116524
    },
    {
        "content": "<p>yeah, the substs for the const contain infer vars</p>",
        "id": 232440894,
        "sender_full_name": "lcnr",
        "timestamp": 1617116537
    },
    {
        "content": "<p>doesn't this just delay the problem to CTFE time?</p>",
        "id": 232440973,
        "sender_full_name": "oli",
        "timestamp": 1617116563
    },
    {
        "content": "<p>which problem?</p>",
        "id": 232441042,
        "sender_full_name": "lcnr",
        "timestamp": 1617116585
    },
    {
        "content": "<p>the ICEing</p>",
        "id": 232441098,
        "sender_full_name": "oli",
        "timestamp": 1617116597
    },
    {
        "content": "<p><code>u8: Foo</code> is provable</p>",
        "id": 232441155,
        "sender_full_name": "lcnr",
        "timestamp": 1617116622
    },
    {
        "content": "<p>so why would we ice?</p>",
        "id": 232441165,
        "sender_full_name": "lcnr",
        "timestamp": 1617116627
    },
    {
        "content": "<p>where does the ICE occur exactly?</p>",
        "id": 232441344,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617116683
    },
    {
        "content": "<p>do we have a backtrace?</p>",
        "id": 232441350,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617116686
    },
    {
        "content": "<p>the issue has one</p>",
        "id": 232441400,
        "sender_full_name": "lcnr",
        "timestamp": 1617116704
    },
    {
        "content": "<p>also, when you say placeholder... where is the code that is doing the replacement of inference variables with placeholders? is this a canonicalized query?</p>",
        "id": 232441402,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617116705
    },
    {
        "content": "<p>we ice in <code>codegen_fulfill_obligation</code></p>",
        "id": 232441457,
        "sender_full_name": "lcnr",
        "timestamp": 1617116723
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-03-30/near/232441402\">said</a>:</p>\n<blockquote>\n<p>also, when you say placeholder... where is the code that is doing the replacement of inference variables with placeholders? is this a canonicalized query?</p>\n</blockquote>\n<p><a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_infer/infer/struct.InferCtxt.html#method.const_eval_resolve\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_infer/infer/struct.InferCtxt.html#method.const_eval_resolve</a></p>",
        "id": 232441513,
        "sender_full_name": "lcnr",
        "timestamp": 1617116743
    },
    {
        "content": "<p>yeah, it is</p>",
        "id": 232441561,
        "sender_full_name": "lcnr",
        "timestamp": 1617116756
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-03-30/near/232441165\">said</a>:</p>\n<blockquote>\n<p>so why would we ice?</p>\n</blockquote>\n<p>I don't really know anything about inference, sorry about these useless questions. I don't know why we ICE at all. Are we iceing because <code>const_eval_resolve</code> will not evaluate things with parameters, thus error, and then that error propagates into inference, even though we could totally evaluate the constant?</p>",
        "id": 232441819,
        "sender_full_name": "oli",
        "timestamp": 1617116851
    },
    {
        "content": "<p>we're icing cause <code>codegen_fulfill_obligation</code> assumes that all predicates it encounters are provable afaict</p>",
        "id": 232441929,
        "sender_full_name": "lcnr",
        "timestamp": 1617116885
    },
    {
        "content": "<p>and we use <code>codegen_fulfill_obligation</code> when trying to evaluate <code>&lt;^0 as Foo&gt;::N</code> while trying to evaluate the length of <code>[u8; T::N]</code></p>",
        "id": 232442008,
        "sender_full_name": "lcnr",
        "timestamp": 1617116924
    },
    {
        "content": "<p>oh, so if we evaluated that <code>N</code> a bit later, we'd already know that <code>^0</code> is <code>u8</code> and everything would be fine</p>",
        "id": 232442083,
        "sender_full_name": "oli",
        "timestamp": 1617116959
    },
    {
        "content": "<p>jup</p>",
        "id": 232442131,
        "sender_full_name": "lcnr",
        "timestamp": 1617116973
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-03-30/near/232441929\">said</a>:</p>\n<blockquote>\n<p>we're icing cause <code>codegen_fulfill_obligation</code> assumes that all predicates it encounters are provable afaict</p>\n</blockquote>\n<p>yeah this code is really meant to be used post monomorphization</p>",
        "id": 232442331,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617117045
    },
    {
        "content": "<p>so... could we look at the element type of the array before we look at the length and thus have the <code>InferCx</code> know about the <code>u8</code> before looking at the constant? Or would that just break another case where we first need to ignore the array element type but need the constant in order to infer the array element type?</p>\n<p>EDIT: ok, nevermind after reading the above comment about post monomorphization</p>",
        "id": 232442387,
        "sender_full_name": "oli",
        "timestamp": 1617117068
    },
    {
        "content": "<p><code>u8</code> is not inferred from the element type here, but from the return type <code>let _: u8</code></p>",
        "id": 232442501,
        "sender_full_name": "lcnr",
        "timestamp": 1617117113
    },
    {
        "content": "<p>(reading backtrace)</p>",
        "id": 232442607,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617117136
    },
    {
        "content": "<p>what if <code>const_eval_resolve</code> just returned with <code>TooGeneric</code> if there are inference variables in the input to <code>Instance::resolve</code>?</p>",
        "id": 232442946,
        "sender_full_name": "oli",
        "timestamp": 1617117261
    },
    {
        "content": "<p>then \"everything\" would be fine</p>",
        "id": 232442984,
        "sender_full_name": "lcnr",
        "timestamp": 1617117280
    },
    {
        "content": "<p>I assume those quotes mean, some code doesn't compile that you want to compile</p>",
        "id": 232443020,
        "sender_full_name": "oli",
        "timestamp": 1617117296
    },
    {
        "content": "<p>no, i assume that all code i want to compile compiles</p>",
        "id": 232443050,
        "sender_full_name": "lcnr",
        "timestamp": 1617117308
    },
    {
        "content": "<p>oh</p>",
        "id": 232443064,
        "sender_full_name": "oli",
        "timestamp": 1617117314
    },
    {
        "content": "<p>my idea is to return <code>TooGeneric</code> if it encounters either inference variables or parameters</p>",
        "id": 232443115,
        "sender_full_name": "lcnr",
        "timestamp": 1617117327
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 232443162,
        "sender_full_name": "oli",
        "timestamp": 1617117336
    },
    {
        "content": "<p>which solves both <a href=\"https://github.com/rust-lang/rust/issues/83249\">#83249</a></p>",
        "id": 232443184,
        "sender_full_name": "lcnr",
        "timestamp": 1617117340
    },
    {
        "content": "<p>and the issue we talked about in the last meeting</p>",
        "id": 232443252,
        "sender_full_name": "lcnr",
        "timestamp": 1617117351
    },
    {
        "content": "<p>so I'm still skimming the code <em>but</em> this makes sense to me -- more or less</p>",
        "id": 232443418,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617117373
    },
    {
        "content": "<p>I think that the const evaluator should be able to handle inference variables</p>",
        "id": 232443471,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617117382
    },
    {
        "content": "<p>without ICEing</p>",
        "id": 232443482,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617117384
    },
    {
        "content": "<p>how hard is it for the const eval code to return <code>TooGeneric</code>?</p>",
        "id": 232443700,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617117436
    },
    {
        "content": "<p>on inference variables?</p>",
        "id": 232443721,
        "sender_full_name": "lcnr",
        "timestamp": 1617117445
    },
    {
        "content": "<p>i assume it should <em>just work</em>™</p>",
        "id": 232443793,
        "sender_full_name": "lcnr",
        "timestamp": 1617117482
    },
    {
        "content": "<p>Yea, that's not the issue, the issue is that we use <code>Instance::resolve</code> liberally without first checking for inference vars</p>",
        "id": 232443953,
        "sender_full_name": "oli",
        "timestamp": 1617117539
    },
    {
        "content": "<p>but in this specific case, we don't even get into the const evaluator</p>",
        "id": 232443983,
        "sender_full_name": "oli",
        "timestamp": 1617117552
    },
    {
        "content": "<p>this is for resolving <em>what</em> to const eval at all</p>",
        "id": 232444017,
        "sender_full_name": "oli",
        "timestamp": 1617117569
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-03-30/near/232443953\">said</a>:</p>\n<blockquote>\n<p>Yea, that's not the issue, the issue is that we use <code>Instance::resolve</code> liberally without first checking for inference vars</p>\n</blockquote>\n<p>during typeck?</p>",
        "id": 232444044,
        "sender_full_name": "lcnr",
        "timestamp": 1617117579
    },
    {
        "content": "<p>CTFE itself uses it whenever it sees <em>any</em> unevaluated constant</p>",
        "id": 232444211,
        "sender_full_name": "oli",
        "timestamp": 1617117626
    },
    {
        "content": "<p>jup</p>",
        "id": 232444231,
        "sender_full_name": "lcnr",
        "timestamp": 1617117635
    },
    {
        "content": "<p>but that's not an issue if we can't reach ctfe with inference vars</p>",
        "id": 232444260,
        "sender_full_name": "lcnr",
        "timestamp": 1617117647
    },
    {
        "content": "<p>right</p>",
        "id": 232444270,
        "sender_full_name": "oli",
        "timestamp": 1617117652
    },
    {
        "content": "<p>and in order to not reach that, we need to check <a href=\"https://github.com/rust-lang/rust/blob/673d0db5e393e9c64897005b470bfeb6d5aec61b/compiler/rustc_middle/src/mir/interpret/queries.rs#L41\">https://github.com/rust-lang/rust/blob/673d0db5e393e9c64897005b470bfeb6d5aec61b/compiler/rustc_middle/src/mir/interpret/queries.rs#L41</a> and make sure we don't have any inference vars</p>",
        "id": 232444327,
        "sender_full_name": "oli",
        "timestamp": 1617117676
    },
    {
        "content": "<p>so... I think returning Too Generic if we have any infernce variables would be \"ok\"</p>",
        "id": 232444373,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617117700
    },
    {
        "content": "<p>that is, from the outset</p>",
        "id": 232444388,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617117704
    },
    {
        "content": "<p>it could be modified later</p>",
        "id": 232444417,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617117710
    },
    {
        "content": "<p>to be more precise</p>",
        "id": 232444430,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617117715
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-03-30/near/232444388\">said</a>:</p>\n<blockquote>\n<p>that is, from the outset</p>\n</blockquote>\n<p>I don't see how to get into CTFE at all without doing some sort of resolve first, so we won't ever get into CTFE itself.</p>",
        "id": 232444489,
        "sender_full_name": "oli",
        "timestamp": 1617117726
    },
    {
        "content": "<p>in general I don't see any reason that the code has to ICE etc in that particular place, but it'll take some refactoring etc</p>",
        "id": 232444524,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617117739
    },
    {
        "content": "<p>well for this particular example maybe</p>",
        "id": 232444552,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617117752
    },
    {
        "content": "<p>it doesn't so hard to imagine cases where the inference variable doesn't matter at all</p>",
        "id": 232444573,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617117765
    },
    {
        "content": "<p>with generic const generics I could see how we could end up with inference vars in constants where the inference var doesn't matter, yea</p>",
        "id": 232444626,
        "sender_full_name": "oli",
        "timestamp": 1617117790
    },
    {
        "content": "<p>e.g., a constant like <code>1 + &lt;u8 as Trait&lt;?U&gt;&gt;::Foo</code> where you have</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">X</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"o\">&lt;</span><span class=\"n\">X</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">Foo</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 232444645,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617117800
    },
    {
        "content": "<p>unless I'm missing something</p>",
        "id": 232444665,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617117807
    },
    {
        "content": "<p>here <code>?U</code> should not matter i think</p>",
        "id": 232444817,
        "sender_full_name": "lcnr",
        "timestamp": 1617117864
    },
    {
        "content": "<p>i guess... do we want to look into that associated const if <code>?U</code> is a parameter/inference var?</p>",
        "id": 232444882,
        "sender_full_name": "lcnr",
        "timestamp": 1617117891
    },
    {
        "content": "<p>at which point we're back at the <code>const_evaluatable_unchecked</code> future compat warning</p>",
        "id": 232444918,
        "sender_full_name": "lcnr",
        "timestamp": 1617117911
    },
    {
        "content": "<p>i personally would prefer us to not look into that constant</p>",
        "id": 232444973,
        "sender_full_name": "lcnr",
        "timestamp": 1617117935
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-03-30/near/232444817\">said</a>:</p>\n<blockquote>\n<p>here <code>?U</code> should not matter i think</p>\n</blockquote>\n<p>I agree it doesn't matter</p>",
        "id": 232444993,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617117945
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-03-30/near/232444882\">said</a>:</p>\n<blockquote>\n<p>i guess... do we want to look into that associated const if <code>?U</code> is a parameter/inference var?</p>\n</blockquote>\n<p>I don't really know what \"look into\" means here I guess</p>",
        "id": 232445060,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617117963
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-03-30/near/232444993\">said</a>:</p>\n<blockquote>\n<p>I agree it doesn't matter</p>\n</blockquote>\n<p>well, sort of</p>",
        "id": 232445088,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617117974
    },
    {
        "content": "<p>\"look into\": evaluate them <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 232445116,
        "sender_full_name": "lcnr",
        "timestamp": 1617117986
    },
    {
        "content": "<p>or like</p>",
        "id": 232445144,
        "sender_full_name": "lcnr",
        "timestamp": 1617117994
    },
    {
        "content": "<p>care about their body</p>",
        "id": 232445150,
        "sender_full_name": "lcnr",
        "timestamp": 1617117998
    },
    {
        "content": "<p>which are two separate things for stuff like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">X</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"o\">&lt;</span><span class=\"n\">X</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">Foo</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 232445221,
        "sender_full_name": "lcnr",
        "timestamp": 1617118027
    },
    {
        "content": "<p>well</p>",
        "id": 232445446,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617118109
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-03-30/near/232444918\">said</a>:</p>\n<blockquote>\n<p>at which point we're back at the <code>const_evaluatable_unchecked</code> future compat warning</p>\n</blockquote>\n<p>explain to me this</p>",
        "id": 232445480,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617118121
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-03-30/near/232444973\">said</a>:</p>\n<blockquote>\n<p>i personally would prefer us to not look into that constant</p>\n</blockquote>\n<p>though there are some cases where <em>even I</em> do not want to deal with associated const as opaque projections</p>",
        "id": 232445494,
        "sender_full_name": "lcnr",
        "timestamp": 1617118129
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-03-30/near/232444973\">said</a>:</p>\n<blockquote>\n<p>i personally would prefer us to not look into that constant</p>\n</blockquote>\n<p>if there is anything that \"scares\" me about const generics, it's that I feel like we still don't have clear alignment on what equality ought to mean somehow</p>",
        "id": 232445523,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617118146
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">ASSOC</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">17</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">test</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"bp\">Self</span>::<span class=\"n\">ASSOC</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 232445738,
        "sender_full_name": "lcnr",
        "timestamp": 1617118222
    },
    {
        "content": "<p>is the length of <code>[0; Self::ASSOC]</code> generic here?</p>",
        "id": 232445778,
        "sender_full_name": "lcnr",
        "timestamp": 1617118236
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-03-30/near/232445523\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-03-30/near/232444973\">said</a>:</p>\n<blockquote>\n<p>i personally would prefer us to not look into that constant</p>\n</blockquote>\n<p>if there is anything that \"scares\" me about const generics, it's that I feel like we still don't have clear alignment on what equality ought to mean somehow</p>\n</blockquote>\n<p>.... yes .....</p>",
        "id": 232445836,
        "sender_full_name": "lcnr",
        "timestamp": 1617118260
    },
    {
        "content": "<p>I think a T-lang MCP for this is too small, fixing the meaning of equality needs an RFC, right?</p>",
        "id": 232446062,
        "sender_full_name": "oli",
        "timestamp": 1617118339
    },
    {
        "content": "<p>agreed, but I think it's what we're most wanting</p>",
        "id": 232446095,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617118354
    },
    {
        "content": "<p>I mean... it's mostly making a decision, not like we need to figure out ... that</p>",
        "id": 232446105,
        "sender_full_name": "oli",
        "timestamp": 1617118358
    },
    {
        "content": "<p>I .. think we need to figure it out too</p>",
        "id": 232446134,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617118368
    },
    {
        "content": "<p>at least I don't yet feel like I have a good understanding</p>",
        "id": 232446162,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617118377
    },
    {
        "content": "<p>i think we need to mostly figure out tbh <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span></p>",
        "id": 232446168,
        "sender_full_name": "lcnr",
        "timestamp": 1617118378
    },
    {
        "content": "<p>I should have finished that sentence</p>",
        "id": 232446216,
        "sender_full_name": "oli",
        "timestamp": 1617118391
    },
    {
        "content": "<p>but I think to answer your question, <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span>, I sort of expect we ultimately want to treat it exactly like we treat associated type projection</p>",
        "id": 232446238,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617118397
    },
    {
        "content": "<p>which is to say that we kind of normalize as much as we can</p>",
        "id": 232446251,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617118403
    },
    {
        "content": "<p>and if there are inference variables whose value we need to know to proceed, that's kind of an \"unambiguous\" thing that stalls until we learn more about the value of that inference variable</p>",
        "id": 232446286,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617118426
    },
    {
        "content": "<p>exacatly how we construct that -- what the primitives are and how they fit together -- is a bit opaque to me now</p>",
        "id": 232446304,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617118439
    },
    {
        "content": "<p>but I think that so long as we treat the presence of inference variables as a source of <em>ambiguity</em> we should be forwards compatible</p>",
        "id": 232446388,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617118456
    },
    {
        "content": "<blockquote>\n<p>I sort of expect we ultimately want to treat it exactly like we treat associated type projection</p>\n</blockquote>\n<p>that i my idea for anonymous constant</p>",
        "id": 232446391,
        "sender_full_name": "lcnr",
        "timestamp": 1617118457
    },
    {
        "content": "<p>cause we have no backcompat issues there as they can't yet depend on generic params</p>",
        "id": 232446457,
        "sender_full_name": "lcnr",
        "timestamp": 1617118483
    },
    {
        "content": "<p>doing so for associated constants is a bit harder, as we already allow arbitrarily complex expressions there</p>",
        "id": 232446555,
        "sender_full_name": "lcnr",
        "timestamp": 1617118526
    },
    {
        "content": "<p>what makes it harder exactly?</p>",
        "id": 232446630,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617118553
    },
    {
        "content": "<p>and i don't think that we are/will be able to check for equality in these cases</p>",
        "id": 232446638,
        "sender_full_name": "lcnr",
        "timestamp": 1617118558
    },
    {
        "content": "<p>the way i look at <code>const_evaluatable_checked</code>, or just generic constants</p>",
        "id": 232446750,
        "sender_full_name": "lcnr",
        "timestamp": 1617118586
    },
    {
        "content": "<p>is that while constants are still generic</p>",
        "id": 232446768,
        "sender_full_name": "lcnr",
        "timestamp": 1617118595
    },
    {
        "content": "<p>we compare them by looking at some kind of ast</p>",
        "id": 232446911,
        "sender_full_name": "lcnr",
        "timestamp": 1617118665
    },
    {
        "content": "<p>so <code>1 + N</code> would be <code>Add(Const(1), Param(N))</code></p>",
        "id": 232447012,
        "sender_full_name": "lcnr",
        "timestamp": 1617118695
    },
    {
        "content": "<p>and to unify we pretty much do the same thing we already do for type projections (where each ast node behaves like a projection)</p>",
        "id": 232447102,
        "sender_full_name": "lcnr",
        "timestamp": 1617118732
    },
    {
        "content": "<p>doing this for arbitrary expressions is hard</p>",
        "id": 232447133,
        "sender_full_name": "lcnr",
        "timestamp": 1617118745
    },
    {
        "content": "<p>cause they can both be:</p>",
        "id": 232447144,
        "sender_full_name": "lcnr",
        "timestamp": 1617118749
    },
    {
        "content": "<ul>\n<li>not a tree (e.g. cyclic <code>while ... { .. }</code>)</li>\n</ul>",
        "id": 232447186,
        "sender_full_name": "lcnr",
        "timestamp": 1617118767
    },
    {
        "content": "<ul>\n<li>some kind of desugaring which somewhat stabilizes the way we desugar stuff</li>\n</ul>",
        "id": 232447245,
        "sender_full_name": "lcnr",
        "timestamp": 1617118797
    },
    {
        "content": "<p>does that seem roughly sensible to you?</p>",
        "id": 232447405,
        "sender_full_name": "lcnr",
        "timestamp": 1617118851
    },
    {
        "content": "<p>it's a kind of dense and unclear explanation tbh</p>",
        "id": 232447457,
        "sender_full_name": "lcnr",
        "timestamp": 1617118879
    },
    {
        "content": "<p>AST structural equality kinda <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 232447496,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1617118901
    },
    {
        "content": "<p>(not the rust ast, <code>AbstractConst</code>s are also an abstract syntax? tree)</p>",
        "id": 232447588,
        "sender_full_name": "lcnr",
        "timestamp": 1617118928
    },
    {
        "content": "<p><del>maybe not syntax <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></del></p>",
        "id": 232447618,
        "sender_full_name": "lcnr",
        "timestamp": 1617118937
    },
    {
        "content": "<p><em>Custom</em>AST structural equality xd</p>",
        "id": 232447665,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1617118955
    },
    {
        "content": "<p>time to look at the definition for syntax</p>",
        "id": 232447689,
        "sender_full_name": "lcnr",
        "timestamp": 1617118962
    },
    {
        "content": "<p>I mean it's kind of a syntax</p>",
        "id": 232447721,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1617118982
    },
    {
        "content": "<p>a much more bare bones one than surface level rust lol</p>",
        "id": 232447752,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1617118993
    },
    {
        "content": "<p>but still ^^</p>",
        "id": 232447767,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1617118998
    },
    {
        "content": "<p>There's no hope of equating arbitrary expressions, and it's not worth trying to be very clever about it. Some very simple handling like <code>1 + N</code> or <code>N + 1</code> for integers would surely be enough for 99% of use cases.</p>",
        "id": 232448803,
        "sender_full_name": "varkor",
        "timestamp": 1617119399
    },
    {
        "content": "<p>Is there a general feeling that now is the right time to work out precisely how const generic equality should work?</p>",
        "id": 232448975,
        "sender_full_name": "varkor",
        "timestamp": 1617119453
    },
    {
        "content": "<p>I think we need to be able to equate arbitrary expressions</p>",
        "id": 232449054,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1617119482
    },
    {
        "content": "<p>Do you mean arbitrary expressions that are literally syntactically the same?</p>",
        "id": 232449137,
        "sender_full_name": "varkor",
        "timestamp": 1617119521
    },
    {
        "content": "<p>that or something else, we need <em>some</em> way to tell that two expressions are the same or else we cant return types that have \"too complicated\" const expressions in them</p>",
        "id": 232449294,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1617119568
    },
    {
        "content": "<p>my solution is to put the \"too complicated\" behind some barrier</p>",
        "id": 232449372,
        "sender_full_name": "lcnr",
        "timestamp": 1617119598
    },
    {
        "content": "<p>either a function</p>",
        "id": 232449380,
        "sender_full_name": "lcnr",
        "timestamp": 1617119602
    },
    {
        "content": "<p>Yeah, I was thinking more of expressions that were not syntactically identical. I don't see why we can't just compare the <code>AbstractConst</code> representations directly as trees for the latter?</p>",
        "id": 232449404,
        "sender_full_name": "varkor",
        "timestamp": 1617119611
    },
    {
        "content": "<p>or an associated constant, as we can't restrict them</p>",
        "id": 232449417,
        "sender_full_name": "lcnr",
        "timestamp": 1617119616
    },
    {
        "content": "<p>i was thinking of \"ltierally syntactically\" when I said it but really anything to allow us to unify arbitrary expressions works</p>",
        "id": 232449421,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1617119617
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"121053\">varkor</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-03-30/near/232449404\">said</a>:</p>\n<blockquote>\n<p>Yeah, I was thinking more of expressions that were not syntactically identical. I don't see why we can't just compare the <code>AbstractConst</code> representations directly as trees for the latter?</p>\n</blockquote>\n<p>I think this is how we currently do it</p>",
        "id": 232449467,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1617119633
    },
    {
        "content": "<blockquote>\n<p>directly as trees for the latter</p>\n</blockquote>\n<p>that's what i want to do, yeah</p>",
        "id": 232449473,
        "sender_full_name": "lcnr",
        "timestamp": 1617119638
    },
    {
        "content": "<p>\"what I want to do\" is this not how it already works <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 232449545,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1617119650
    },
    {
        "content": "<p>the current state is kind of a mess, so i am pretending like it doesn't exist rn</p>",
        "id": 232449758,
        "sender_full_name": "lcnr",
        "timestamp": 1617119730
    },
    {
        "content": "<p>okay that works for me</p>",
        "id": 232449794,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1617119739
    },
    {
        "content": "<p>the current implementation of <code>try_unify</code> for abstract consts tries to do this and treats associated constants like type projections which can only be normalized to their final value</p>",
        "id": 232450037,
        "sender_full_name": "lcnr",
        "timestamp": 1617119821
    },
    {
        "content": "<p>Can't associated constants just use equality of paths?</p>",
        "id": 232450165,
        "sender_full_name": "varkor",
        "timestamp": 1617119867
    },
    {
        "content": "<p><code>DefId</code> equality?</p>",
        "id": 232450242,
        "sender_full_name": "lcnr",
        "timestamp": 1617119884
    },
    {
        "content": "<p>Yeah</p>",
        "id": 232450258,
        "sender_full_name": "varkor",
        "timestamp": 1617119890
    },
    {
        "content": "<p>jup, we do that</p>",
        "id": 232450277,
        "sender_full_name": "lcnr",
        "timestamp": 1617119896
    },
    {
        "content": "<p>Ah, okay <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 232450302,
        "sender_full_name": "varkor",
        "timestamp": 1617119906
    },
    {
        "content": "<p>do we currently unify associated constants by directly evaluating them if they're concrete?</p>",
        "id": 232450976,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1617120124
    },
    {
        "content": "<p>don't think so, we don't evaluate <code>ConstKind::Unevaluated</code> in <code>try_unify</code> at all</p>",
        "id": 232451068,
        "sender_full_name": "lcnr",
        "timestamp": 1617120153
    },
    {
        "content": "<p>alright</p>",
        "id": 232451104,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1617120163
    },
    {
        "content": "<p>I personally would like to unify <code>Add(Const(2), Param(N))</code> with <code>Add(Add(Const(1), Const(1)), Param(N))</code> by evaluating concrete subtrees</p>",
        "id": 232451229,
        "sender_full_name": "lcnr",
        "timestamp": 1617120194
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-03-30/near/232451068\">said</a>:</p>\n<blockquote>\n<p>don't think so, we don't evaluate <code>ConstKind::Unevaluated</code> in <code>try_unify</code> at all</p>\n</blockquote>\n<p>we also don't evaluate fully concrete anon consts, which is something i strongly believe we should do</p>",
        "id": 232451460,
        "sender_full_name": "lcnr",
        "timestamp": 1617120262
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-03-30/near/232451229\">said</a>:</p>\n<blockquote>\n<p>I personally would like to unify <code>Add(Const(2), Param(N))</code> with <code>Add(Add(Const(1), Const(1)), Param(N))</code> by evaluating concrete subtrees</p>\n</blockquote>\n<p>aaaaaaaaaaaaaaaaaaah</p>",
        "id": 232451732,
        "sender_full_name": "oli",
        "timestamp": 1617120363
    },
    {
        "content": "<p>the old tree based const evaluator is back</p>",
        "id": 232451758,
        "sender_full_name": "oli",
        "timestamp": 1617120371
    },
    {
        "content": "<p>YES, WE ALREADY TALKED ABOUT THIS OLI</p>",
        "id": 232451788,
        "sender_full_name": "lcnr",
        "timestamp": 1617120382
    },
    {
        "content": "<p>oops</p>",
        "id": 232451811,
        "sender_full_name": "oli",
        "timestamp": 1617120389
    },
    {
        "content": "<p>YOU SAID IT WAS \"ok <span aria-label=\"unamused\" class=\"emoji emoji-1f612\" role=\"img\" title=\"unamused\">:unamused:</span> \" IF I REUSE MIRI FOR IT</p>",
        "id": 232451860,
        "sender_full_name": "lcnr",
        "timestamp": 1617120412
    },
    {
        "content": "<p>I remember that</p>",
        "id": 232451876,
        "sender_full_name": "oli",
        "timestamp": 1617120420
    },
    {
        "content": "<p>still my opinion, go for it</p>",
        "id": 232451906,
        "sender_full_name": "oli",
        "timestamp": 1617120432
    },
    {
        "content": "<p>I'm not against it. I think I'm mostly amused <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 232451924,
        "sender_full_name": "oli",
        "timestamp": 1617120440
    },
    {
        "content": "<p>What's the alternative?</p>",
        "id": 232454807,
        "sender_full_name": "varkor",
        "timestamp": 1617121525
    },
    {
        "content": "<p>to not evaluate concrete subtrees <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 232455025,
        "sender_full_name": "lcnr",
        "timestamp": 1617121599
    },
    {
        "content": "<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 232455336,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1617121715
    },
    {
        "content": "<p>that seems tough</p>",
        "id": 232456711,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1617122227
    },
    {
        "content": "<p>lol</p>",
        "id": 232456719,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1617122228
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-03-30/near/232451229\">said</a>:</p>\n<blockquote>\n<p>I personally would like to unify <code>Add(Const(2), Param(N))</code> with <code>Add(Add(Const(1), Const(1)), Param(N))</code> by evaluating concrete subtrees</p>\n</blockquote>\n<p>By the way, this exposes evaluation order issues, because if you evaluate <code>N + (1 + 1)</code> to <code>N + 2</code> that means that <code>1 + 1</code> is getting evaluated before <code>N</code>, and you can probably use <code>let mut</code> in a block to make this observable. So you would need to check that the expression is pure somehow. (Right now it seems that mut refs are not allowed in const fn without the <code>const_mut_refs</code> feature, but I guess it is eventually supposed to be possible.)</p>",
        "id": 232513108,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617146700
    },
    {
        "content": "<p>we're already forbidding most expressions, so you can't have mutable variables or statements in general and still have it be legal. Anything more complex than simple math should go into separate const fn, and then we only check for the const fn call, not the body</p>",
        "id": 232554368,
        "sender_full_name": "oli",
        "timestamp": 1617179743
    },
    {
        "content": "<p>don’t we still need to be careful even with simple expressions like <code>N + (1 - 2)</code> vs <code>(N + 1) - 2</code>, because of overflow ?</p>",
        "id": 232619608,
        "sender_full_name": "lqd",
        "timestamp": 1617207344
    },
    {
        "content": "<p>such expressions contain an overflow check that you don't see, so they won't be unifyable I guess. But the concrete subtree evaluation could eliminate these overflow checks if it encounters them and realizes they cannot trigger</p>",
        "id": 232627144,
        "sender_full_name": "oli",
        "timestamp": 1617209967
    },
    {
        "content": "<p><code>N + (2 - 1)</code> also contains an overflow check, but during concrete subtree evaluation we'd \"just go ahead and try it\", and error if it fails</p>",
        "id": 232627228,
        "sender_full_name": "oli",
        "timestamp": 1617210001
    },
    {
        "content": "<p>(this is why I want all operations to go through miri <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span>)</p>",
        "id": 232627347,
        "sender_full_name": "oli",
        "timestamp": 1617210021
    }
]