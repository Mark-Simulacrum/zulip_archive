[
    {
        "content": "<p>Now that <code>min_const_generics</code> is pretty much done i want to focus on <code>lazy_normalization_consts</code> next. The general issue described in <a href=\"https://github.com/rust-lang/rust/issues/78369#issuecomment-727898111\">https://github.com/rust-lang/rust/issues/78369#issuecomment-727898111</a> makes me really uncomfortable so I am thinking of ways around that.</p>\n<p>A way around this would be to rely on what we are doing with <code>const_evaluatable_checked</code>, or much rather, as consts can't depend on generic params yet, we could just yeet their substs into orbit during typeck and ignore them for now.</p>",
        "id": 217328268,
        "sender_full_name": "lcnr",
        "timestamp": 1605818859
    },
    {
        "content": "<p>all of this is also really weird so I want to spend a bit more time looking into this and experiment a bit here</p>",
        "id": 217328447,
        "sender_full_name": "lcnr",
        "timestamp": 1605818982
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> are you, or someone else, interested in a sync meeting about this in around two weeks? Would try to prepare a bit before then</p>",
        "id": 217329179,
        "sender_full_name": "lcnr",
        "timestamp": 1605819380
    },
    {
        "content": "<p>Hmm, not next week, but maybe the week afterwards</p>",
        "id": 217457694,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605905853
    },
    {
        "content": "<p>I haven't really had time to read into <a href=\"https://github.com/rust-lang/rust/issues/78369\">#78369</a> though</p>",
        "id": 217457718,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605905870
    },
    {
        "content": "<p>Similar situation with me. I've been trying to complete a project recently, so I haven't had much time to keep up these past couple of weeks.</p>",
        "id": 217671927,
        "sender_full_name": "varkor",
        "timestamp": 1606159685
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> does this friday work for you? maybe  <time datetime=\"2020-12-04T18:00:00Z\">2020-12-04T19:00:00+01:00</time></p>",
        "id": 218274305,
        "sender_full_name": "lcnr",
        "timestamp": 1606735020
    },
    {
        "content": "<p>yes</p>",
        "id": 218274356,
        "sender_full_name": "oli",
        "timestamp": 1606735054
    },
    {
        "content": "<p>I will need to rearrange another meeting, but it should be doable.</p>",
        "id": 218289525,
        "sender_full_name": "varkor",
        "timestamp": 1606744975
    },
    {
        "content": "<p>I could do that</p>",
        "id": 218496127,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606864726
    },
    {
        "content": "<p>can someone send a calendar invite, though :)</p>",
        "id": 218496138,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606864732
    },
    {
        "content": "<p>does that work?</p>\n<p><a href=\"https://calendar.google.com/event?action=TEMPLATE&amp;tmeid=NWpvY3ZrdGM3OHFrOWE2MDBvZmI4NGxlaDcgYmFzdGlhbl9rYXVzY2hrZUBob3RtYWlsLmRl&amp;tmsrc=bastian_kauschke%40hotmail.de\">link</a></p>",
        "id": 218497366,
        "sender_full_name": "lcnr",
        "timestamp": 1606865625
    },
    {
        "content": "<p>i don't really use google calendar myself</p>",
        "id": 218497424,
        "sender_full_name": "lcnr",
        "timestamp": 1606865650
    },
    {
        "content": "<p>\"could not find the requested event\"</p>",
        "id": 218521866,
        "sender_full_name": "oli",
        "timestamp": 1606893489
    },
    {
        "content": "<p><a href=\"https://calendar.google.com/event?action=TEMPLATE&amp;tmeid=NWpvY3ZrdGM3OHFrOWE2MDBvZmI4NGxlaDcgYmFzdGlhbl9rYXVzY2hrZUBob3RtYWlsLmRl&amp;tmsrc=bastian_kauschke%40hotmail.de\">this one?</a></p>",
        "id": 218527876,
        "sender_full_name": "lcnr",
        "timestamp": 1606898698
    },
    {
        "content": "<p>same error</p>",
        "id": 218530997,
        "sender_full_name": "oli",
        "timestamp": 1606900623
    },
    {
        "content": "<p>can you add ppl to the participant list and let the calendar send out invites?</p>",
        "id": 218531047,
        "sender_full_name": "oli",
        "timestamp": 1606900661
    },
    {
        "content": "<p>yeah, i can add emails</p>",
        "id": 218531219,
        "sender_full_name": "lcnr",
        "timestamp": 1606900769
    },
    {
        "content": "<p>the minimal subset of lazy norm needed to fix the cycle errors. I am currently thinking about using this and scrapping full lazy norm, at least for now. This would be enough for `const_generics' afaict and does not have the issues plaguing full lazy norm <a href=\"https://github.com/lcnr/rust/pull/3\">https://github.com/lcnr/rust/pull/3</a></p>\n<p>In case someone wants to look at this before the meeting. It's fine if you don't do so as it is a fairly straightforward change</p>",
        "id": 218551251,
        "sender_full_name": "lcnr",
        "timestamp": 1606913658
    },
    {
        "content": "<p>where can I find your email adresses?</p>",
        "id": 218551320,
        "sender_full_name": "lcnr",
        "timestamp": 1606913717
    },
    {
        "content": "<p>not sure, let me PM you those I have</p>",
        "id": 218555080,
        "sender_full_name": "oli",
        "timestamp": 1606915674
    },
    {
        "content": "<p>Where will the meeting take place? Here on Zulip?</p>",
        "id": 218685545,
        "sender_full_name": "varkor",
        "timestamp": 1606997988
    },
    {
        "content": "<p>hmm, i slightly prefer zoom though it doesn't really matter tbh</p>",
        "id": 218691528,
        "sender_full_name": "lcnr",
        "timestamp": 1607001743
    },
    {
        "content": "<p>a rough agenda <a href=\"https://hackmd.io/QzlyvdORTzeWeBe78aDfXw?view\">https://hackmd.io/QzlyvdORTzeWeBe78aDfXw?view</a></p>",
        "id": 218825075,
        "sender_full_name": "lcnr",
        "timestamp": 1607084185
    },
    {
        "content": "<p>I don't mind where; just making sure I know where to go :)</p>",
        "id": 218835403,
        "sender_full_name": "varkor",
        "timestamp": 1607090312
    },
    {
        "content": "<p>don't know how to record a zoom meeting and I probably want to rewatch/reread parts of this meeting, so let's just go with zulip i guess <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 218868373,
        "sender_full_name": "lcnr",
        "timestamp": 1607104581
    },
    {
        "content": "<p>well then, is everybody here?</p>",
        "id": 218869137,
        "sender_full_name": "lcnr",
        "timestamp": 1607104837
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 218869221,
        "sender_full_name": "oli",
        "timestamp": 1607104868
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span>  <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"121053\">@varkor</span></p>",
        "id": 218869326,
        "sender_full_name": "oli",
        "timestamp": 1607104912
    },
    {
        "content": "<p>I'm here :)</p>",
        "id": 218869402,
        "sender_full_name": "varkor",
        "timestamp": 1607104927
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/lazy_normalization_consts/near/218825075\">said</a>:</p>\n<blockquote>\n<p>a rough agenda <a href=\"https://hackmd.io/QzlyvdORTzeWeBe78aDfXw?view\">https://hackmd.io/QzlyvdORTzeWeBe78aDfXw?view</a></p>\n</blockquote>\n<p>my idea for this meeting was to talk about the next steps after <code>min_const_generics</code> which pretty much boils down to always supplying the parent generics to anonymous constants</p>",
        "id": 218869620,
        "sender_full_name": "lcnr",
        "timestamp": 1607105007
    },
    {
        "content": "<p>to do this we need to prevent the cycle errors for things like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">test</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()]</span>: <span class=\"nc\">Trait</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 218869803,
        "sender_full_name": "lcnr",
        "timestamp": 1607105073
    },
    {
        "content": "<p>if we normalize constants at the end of <code>predicates_of</code> we have to typeck that anonymous constant</p>",
        "id": 218869860,
        "sender_full_name": "lcnr",
        "timestamp": 1607105097
    },
    {
        "content": "<p>which requires <code>predicates_of</code> of the parent, causing a cycle</p>",
        "id": 218869915,
        "sender_full_name": "lcnr",
        "timestamp": 1607105117
    },
    {
        "content": "<p>we currently circumvent this issue by using <code>feature(lazy_normalization_consts)</code></p>",
        "id": 218870001,
        "sender_full_name": "lcnr",
        "timestamp": 1607105156
    },
    {
        "content": "<p>do you remember what that feature does?</p>",
        "id": 218870206,
        "sender_full_name": "lcnr",
        "timestamp": 1607105235
    },
    {
        "content": "<p>I didn't know we had a special lazy norm feature gate just for constants</p>",
        "id": 218870246,
        "sender_full_name": "oli",
        "timestamp": 1607105259
    },
    {
        "content": "<p>it's active by default when using <code>feature(const_generics)</code></p>",
        "id": 218870265,
        "sender_full_name": "lcnr",
        "timestamp": 1607105275
    },
    {
        "content": "<p>Am I right in assuming that in <code>fn test&lt;T, U&gt;() where [u8; 1 + std::mem::size_of::&lt;T&gt;()]: Trait {}</code> the anonymous constant has two generic parameters, which, always get <code>T, U</code> passed when working with that constant</p>",
        "id": 218870570,
        "sender_full_name": "oli",
        "timestamp": 1607105422
    },
    {
        "content": "<p>yeah</p>",
        "id": 218870586,
        "sender_full_name": "lcnr",
        "timestamp": 1607105433
    },
    {
        "content": "<p>that's one of the big issues here</p>",
        "id": 218870598,
        "sender_full_name": "lcnr",
        "timestamp": 1607105443
    },
    {
        "content": "<p>for (<a href=\"https://github.com/rust-lang/rust/pull/79635/files#diff-34f61ce1f1f9e212f9d8abdebf4acff2f3edfa9a72827ec8f468fc5ad00ecd5d\">https://github.com/rust-lang/rust/pull/79635/files#diff-34f61ce1f1f9e212f9d8abdebf4acff2f3edfa9a72827ec8f468fc5ad00ecd5d</a>)</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(const_generics, const_evaluatable_checked)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![allow(incomplete_features)]</span><span class=\"w\"></span>\n\n<span class=\"c1\">// `N + 1` also depends on `T` here even if it doesn't use it.</span>\n<span class=\"k\">fn</span> <span class=\"nf\">q</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">todo</span><span class=\"o\">!</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">supplier</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">todo</span><span class=\"o\">!</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">catch_me</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]</span>: <span class=\"nb\">Default</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">supplier</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">q</span>::<span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">//~ ERROR mismatched types</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">catch_me</span>::<span class=\"o\">&lt;</span><span class=\"mi\">3</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 218870637,
        "sender_full_name": "lcnr",
        "timestamp": 1607105463
    },
    {
        "content": "<p>Can we \"just\" use polymorphization to ask the constant which generic parameters it actually needs?</p>",
        "id": 218870849,
        "sender_full_name": "oli",
        "timestamp": 1607105551
    },
    {
        "content": "<p>pretty much, my idea is to use <code>const_evaluatable_checked</code> and look at the <code>AbstractConst</code></p>",
        "id": 218870904,
        "sender_full_name": "lcnr",
        "timestamp": 1607105578
    },
    {
        "content": "<p>this requires us to typeck the anonymous constant though</p>",
        "id": 218870975,
        "sender_full_name": "lcnr",
        "timestamp": 1607105604
    },
    {
        "content": "<p>oh, but isn't AbstractConst just limited to a certain subset of possible constant bodies?</p>",
        "id": 218870981,
        "sender_full_name": "oli",
        "timestamp": 1607105607
    },
    {
        "content": "<p>yeah, and for concrete ones we can just ignore all substs</p>",
        "id": 218871013,
        "sender_full_name": "lcnr",
        "timestamp": 1607105619
    },
    {
        "content": "<p>sure, but what if the entire thing is ... OH haha, if there is one generic parameter used anywhere it needs to be <code>AbstractConst</code>able <em>anyway</em></p>",
        "id": 218871114,
        "sender_full_name": "oli",
        "timestamp": 1607105648
    },
    {
        "content": "<p>so my idea is that an anon const is either:</p>\n<ul>\n<li>concrete, in which case we don't build an <code>AbstractConst</code> and are able to ignore all substs</li>\n</ul>",
        "id": 218871120,
        "sender_full_name": "lcnr",
        "timestamp": 1607105651
    },
    {
        "content": "<ul>\n<li>generc, in which case we error if we can't build an <code>AbstractConst</code> and ignore the substs not mentioned by that</li>\n</ul>",
        "id": 218871163,
        "sender_full_name": "lcnr",
        "timestamp": 1607105678
    },
    {
        "content": "<p>I haven't been keeping up with <code>const_evaluatable_checked</code>: what is that going to produce in this case?</p>",
        "id": 218871227,
        "sender_full_name": "varkor",
        "timestamp": 1607105708
    },
    {
        "content": "<p><code>AbstractConst</code> are a simplified representation of the mir of a constant</p>",
        "id": 218871272,
        "sender_full_name": "lcnr",
        "timestamp": 1607105738
    },
    {
        "content": "<p>which we use to unify two unevaluated consts</p>",
        "id": 218871305,
        "sender_full_name": "lcnr",
        "timestamp": 1607105755
    },
    {
        "content": "<p>Right, so they can contain generic parameters.</p>",
        "id": 218871371,
        "sender_full_name": "varkor",
        "timestamp": 1607105770
    },
    {
        "content": "<p>yeah</p>",
        "id": 218871377,
        "sender_full_name": "lcnr",
        "timestamp": 1607105774
    },
    {
        "content": "<p>basically <code>N + 1 + 2</code> becomes <code>Add(Add(N, 1), 2)</code> (very simplified dummy example. The representation is more complex, but logically, that's it)</p>",
        "id": 218871379,
        "sender_full_name": "oli",
        "timestamp": 1607105774
    },
    {
        "content": "<p>(we could use \"simple\" polymorphization based on <code>mir_const</code> as well but that doesn't really matter in the end)</p>",
        "id": 218871493,
        "sender_full_name": "lcnr",
        "timestamp": 1607105851
    },
    {
        "content": "<p>So you build an <code>AbstractConst</code>, then walk through it, checking which parameters are actually used?</p>",
        "id": 218871494,
        "sender_full_name": "varkor",
        "timestamp": 1607105853
    },
    {
        "content": "<p>yeah</p>",
        "id": 218871504,
        "sender_full_name": "lcnr",
        "timestamp": 1607105858
    },
    {
        "content": "<p>the issue is that building an <code>AbstractConst</code> requires <code>mir_const</code></p>",
        "id": 218871574,
        "sender_full_name": "lcnr",
        "timestamp": 1607105883
    },
    {
        "content": "<p>which requires <code>typeck</code></p>",
        "id": 218871603,
        "sender_full_name": "lcnr",
        "timestamp": 1607105888
    },
    {
        "content": "<p>which means that it would cause cycle errors inside of where clauses</p>",
        "id": 218871622,
        "sender_full_name": "lcnr",
        "timestamp": 1607105899
    },
    {
        "content": "<p>so we can only do this outside of <code>predicates_of</code></p>",
        "id": 218871646,
        "sender_full_name": "lcnr",
        "timestamp": 1607105916
    },
    {
        "content": "<p>uh... I don't know too much about where clauses, why does it cause a cycle?</p>",
        "id": 218871654,
        "sender_full_name": "oli",
        "timestamp": 1607105920
    },
    {
        "content": "<p>does it cause cycles if the generic parameters are actually used?</p>",
        "id": 218871700,
        "sender_full_name": "oli",
        "timestamp": 1607105942
    },
    {
        "content": "<p>but not if they are not used?</p>",
        "id": 218871716,
        "sender_full_name": "oli",
        "timestamp": 1607105949
    },
    {
        "content": "<p>in both cases</p>",
        "id": 218871762,
        "sender_full_name": "lcnr",
        "timestamp": 1607105979
    },
    {
        "content": "<p>when typechecking a body we need to know any additional predicates we can assume to be true</p>",
        "id": 218871853,
        "sender_full_name": "lcnr",
        "timestamp": 1607106008
    },
    {
        "content": "<p>the <code>caller_bounds</code></p>",
        "id": 218871858,
        "sender_full_name": "lcnr",
        "timestamp": 1607106011
    },
    {
        "content": "<p>so that if we have a predicate <code>T: Trait</code></p>",
        "id": 218871874,
        "sender_full_name": "lcnr",
        "timestamp": 1607106021
    },
    {
        "content": "<p>we can use <code>[u8; &lt;T as Trait&gt;::ASSOC]</code></p>",
        "id": 218871898,
        "sender_full_name": "lcnr",
        "timestamp": 1607106038
    },
    {
        "content": "<p>as anonymous constants inherit the generic environment of their parent</p>",
        "id": 218871957,
        "sender_full_name": "lcnr",
        "timestamp": 1607106071
    },
    {
        "content": "<p>ah... and that bound may be in a where bound, so we need to look at the where bounds...</p>",
        "id": 218871971,
        "sender_full_name": "oli",
        "timestamp": 1607106079
    },
    {
        "content": "<p>yeah</p>",
        "id": 218871981,
        "sender_full_name": "lcnr",
        "timestamp": 1607106086
    },
    {
        "content": "<p>ok, this is probably undoable, but before we continue: can we \"just\" copy all the where bounds onto the constant, but skip the where bounds that use the constant?</p>",
        "id": 218872071,
        "sender_full_name": "oli",
        "timestamp": 1607106126
    },
    {
        "content": "<p>These cycle errors may be genuine, right? I'm trying to think of an example...</p>",
        "id": 218872085,
        "sender_full_name": "varkor",
        "timestamp": 1607106134
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"121053\">varkor</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/lazy_normalization_consts/near/218872085\">said</a>:</p>\n<blockquote>\n<p>These cycle errors may be genuine, right? I'm trying to think of an example...</p>\n</blockquote>\n<p>somewhat</p>",
        "id": 218872127,
        "sender_full_name": "lcnr",
        "timestamp": 1607106154
    },
    {
        "content": "<p>will come back to exactly that later <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 218872145,
        "sender_full_name": "lcnr",
        "timestamp": 1607106164
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/lazy_normalization_consts/near/218872071\">said</a>:</p>\n<blockquote>\n<p>ok, this is probably undoable, but before we continue: can we \"just\" copy all the where bounds onto the constant, but skip the where bounds that use the constant?</p>\n</blockquote>\n<p>this is roughly what i want to do</p>",
        "id": 218872192,
        "sender_full_name": "lcnr",
        "timestamp": 1607106190
    },
    {
        "content": "<p>i've written <a href=\"https://github.com/lcnr/rust/pull/3\">https://github.com/lcnr/rust/pull/3</a></p>",
        "id": 218872263,
        "sender_full_name": "lcnr",
        "timestamp": 1607106223
    },
    {
        "content": "<p>which instead of full lazy normalization only skips normalization while inside of <code>predicates_of</code></p>",
        "id": 218872322,
        "sender_full_name": "lcnr",
        "timestamp": 1607106244
    },
    {
        "content": "<p>and it seems to work</p>",
        "id": 218872361,
        "sender_full_name": "lcnr",
        "timestamp": 1607106256
    },
    {
        "content": "<p>does someone know of another reason why we want to use <code>lazy_normalization_consts</code></p>",
        "id": 218872533,
        "sender_full_name": "lcnr",
        "timestamp": 1607106344
    },
    {
        "content": "<p>if it's only to prevent cycles in some queries (i know of <code>predicates_of</code> and <code>type_of</code>) my approach looks really good to me</p>",
        "id": 218872682,
        "sender_full_name": "lcnr",
        "timestamp": 1607106400
    },
    {
        "content": "<p>^ <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 218872692,
        "sender_full_name": "lcnr",
        "timestamp": 1607106407
    },
    {
        "content": "<p>I... am so amazed by that PR (so simple, but so wow)...</p>",
        "id": 218872699,
        "sender_full_name": "oli",
        "timestamp": 1607106412
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"121053\">varkor</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/lazy_normalization_consts/near/218872085\">said</a>:</p>\n<blockquote>\n<p>These cycle errors may be genuine, right? I'm trying to think of an example...</p>\n</blockquote>\n<p>I guess any potential genuine cycle would lead to this bound removal simply failing (though maybe it'd require performing recursively, if one constant depending on another constant, which depended back on the original constant), so it should be okay.</p>",
        "id": 218872734,
        "sender_full_name": "varkor",
        "timestamp": 1607106429
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> so an example here is <a href=\"https://github.com/rust-lang/rust/issues/79356\">#79356</a></p>",
        "id": 218872789,
        "sender_full_name": "lcnr",
        "timestamp": 1607106465
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/lazy_normalization_consts/near/218872533\">said</a>:</p>\n<blockquote>\n<p>does someone know of another reason why we want to use <code>lazy_normalization_consts</code></p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> would be the person I'd ask :)</p>",
        "id": 218872869,
        "sender_full_name": "varkor",
        "timestamp": 1607106489
    },
    {
        "content": "<p>here a <code>[u8; unevaluated]: Sized</code> is a where clauses</p>",
        "id": 218872925,
        "sender_full_name": "lcnr",
        "timestamp": 1607106522
    },
    {
        "content": "<p>and while typechecking the unevaluated constant, we want to prove <code>[u8; other_unevaluated]: Sized</code></p>",
        "id": 218872978,
        "sender_full_name": "lcnr",
        "timestamp": 1607106547
    },
    {
        "content": "<p>This should succeed in practice, though?</p>",
        "id": 218872984,
        "sender_full_name": "varkor",
        "timestamp": 1607106548
    },
    {
        "content": "<p>if we ignore the where clause</p>",
        "id": 218873012,
        "sender_full_name": "lcnr",
        "timestamp": 1607106560
    },
    {
        "content": "<p>yes</p>",
        "id": 218873016,
        "sender_full_name": "lcnr",
        "timestamp": 1607106561
    },
    {
        "content": "<p>but we don't rn so this breaks</p>",
        "id": 218873024,
        "sender_full_name": "lcnr",
        "timestamp": 1607106566
    },
    {
        "content": "<p>Because there are no parameters. But does this not succeed under your fix?</p>",
        "id": 218873027,
        "sender_full_name": "varkor",
        "timestamp": 1607106567
    },
    {
        "content": "<p>you mean <a href=\"https://github.com/lcnr/rust/pull/3\">https://github.com/lcnr/rust/pull/3</a>?</p>",
        "id": 218873062,
        "sender_full_name": "lcnr",
        "timestamp": 1607106583
    },
    {
        "content": "<p>Yeah</p>",
        "id": 218873081,
        "sender_full_name": "varkor",
        "timestamp": 1607106592
    },
    {
        "content": "<p>no</p>",
        "id": 218873096,
        "sender_full_name": "lcnr",
        "timestamp": 1607106596
    },
    {
        "content": "<p>the cycle here is caused by trying to unify the two unevaluated consts</p>",
        "id": 218873180,
        "sender_full_name": "lcnr",
        "timestamp": 1607106623
    },
    {
        "content": "<p>one of which we are currently typechecking</p>",
        "id": 218873197,
        "sender_full_name": "lcnr",
        "timestamp": 1607106631
    },
    {
        "content": "<p>and to unify two unevaluated constants we try to evaluate them</p>",
        "id": 218873227,
        "sender_full_name": "lcnr",
        "timestamp": 1607106648
    },
    {
        "content": "<p>which requires us to again typecheck them</p>",
        "id": 218873247,
        "sender_full_name": "lcnr",
        "timestamp": 1607106658
    },
    {
        "content": "<p>so we successfully evaluate <code>predicates_of</code></p>",
        "id": 218873286,
        "sender_full_name": "lcnr",
        "timestamp": 1607106680
    },
    {
        "content": "<p>and then fail during <code>typeck(outer_anon_const)</code></p>",
        "id": 218873306,
        "sender_full_name": "lcnr",
        "timestamp": 1607106692
    },
    {
        "content": "<p>Just trying to get the control flow straight in my head.</p>",
        "id": 218873612,
        "sender_full_name": "varkor",
        "timestamp": 1607106829
    },
    {
        "content": "<p>Why doesn't <code>[u8; X]</code> always satisfy <code>Sized</code>, for any <code>X</code>? Surely it doesn't need to evaluate at any point?</p>",
        "id": 218873954,
        "sender_full_name": "varkor",
        "timestamp": 1607106973
    },
    {
        "content": "<p>it does</p>",
        "id": 218873972,
        "sender_full_name": "lcnr",
        "timestamp": 1607106979
    },
    {
        "content": "<p>but we prioritize candidates from the param env</p>",
        "id": 218874002,
        "sender_full_name": "lcnr",
        "timestamp": 1607106991
    },
    {
        "content": "<p>over builtin ones</p>",
        "id": 218874034,
        "sender_full_name": "lcnr",
        "timestamp": 1607107009
    },
    {
        "content": "<p>so we still end up with first trying to match the explicit sized bound</p>",
        "id": 218874070,
        "sender_full_name": "lcnr",
        "timestamp": 1607107025
    },
    {
        "content": "<p>and if that one failed we would have tried the builtin bound which would succeed</p>",
        "id": 218874132,
        "sender_full_name": "lcnr",
        "timestamp": 1607107058
    },
    {
        "content": "<p>Is this an open problem then, or did you also have an idea for addressing this issue?</p>",
        "id": 218874360,
        "sender_full_name": "varkor",
        "timestamp": 1607107150
    },
    {
        "content": "<p><a href=\"https://hackmd.io/QzlyvdORTzeWeBe78aDfXw#Recursive-dependencies-of-constants-in-the-param-env\">https://hackmd.io/QzlyvdORTzeWeBe78aDfXw#Recursive-dependencies-of-constants-in-the-param-env</a></p>",
        "id": 218874373,
        "sender_full_name": "lcnr",
        "timestamp": 1607107159
    },
    {
        "content": "<h3>Recursive dependencies of constants in the param env</h3>\n<p>To deal with <a href=\"https://github.com/rust-lang/rust/issues/79356\">https://github.com/rust-lang/rust/issues/79356</a> I think that we should be able to special case <code>param_env</code> or <code>predicates_of</code> of anon consts <code>ct</code><br>\nin where-clauses to replace all constants which are syntactically after <code>ct</code> or <code>ct</code> itself with something like <code>ConstKind::Opaque(DefId, Substs)</code> which are only equal to themselves.</p>",
        "id": 218874391,
        "sender_full_name": "lcnr",
        "timestamp": 1607107169
    },
    {
        "content": "<p>Ah, I don't think I saw that part earlier.</p>",
        "id": 218874402,
        "sender_full_name": "varkor",
        "timestamp": 1607107175
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/lazy_normalization_consts/near/218872071\">said</a>:</p>\n<blockquote>\n<p>ok, this is probably undoable, but before we continue: can we \"just\" copy all the where bounds onto the constant, but skip the where bounds that use the constant?</p>\n</blockquote>\n<p>we can have cycles of length two, so we have to somehow break them</p>",
        "id": 218874528,
        "sender_full_name": "lcnr",
        "timestamp": 1607107222
    },
    {
        "content": "<p>meaning that my idea is to only keep where bounds which are \"in front\" of the one containing our anon const</p>",
        "id": 218874565,
        "sender_full_name": "lcnr",
        "timestamp": 1607107249
    },
    {
        "content": "<p>Is that going to change visible behaviour depending on the order of the bounds? Aren't bounds order-agnostic at the moment?</p>",
        "id": 218874667,
        "sender_full_name": "varkor",
        "timestamp": 1607107302
    },
    {
        "content": "<p>(I mean in terms of type checking, not diagnostics.)</p>",
        "id": 218874689,
        "sender_full_name": "varkor",
        "timestamp": 1607107312
    },
    {
        "content": "<p>yeah, it would</p>",
        "id": 218874695,
        "sender_full_name": "lcnr",
        "timestamp": 1607107316
    },
    {
        "content": "<p>we could make all consts in the where bounds at the same level opaque</p>",
        "id": 218874781,
        "sender_full_name": "lcnr",
        "timestamp": 1607107345
    },
    {
        "content": "<p>which doesn't allow as much but would also fix this</p>",
        "id": 218874819,
        "sender_full_name": "lcnr",
        "timestamp": 1607107362
    },
    {
        "content": "<p>This sounds like exactly the sort of thing chalk was designed for :)</p>",
        "id": 218874886,
        "sender_full_name": "varkor",
        "timestamp": 1607107392
    },
    {
        "content": "<p>Hmm</p>",
        "id": 218874910,
        "sender_full_name": "varkor",
        "timestamp": 1607107409
    },
    {
        "content": "<p>I think I'll need to look at the code in a bit more detail to understand exactly what's going on with this example, but seems tricky.</p>",
        "id": 218875523,
        "sender_full_name": "varkor",
        "timestamp": 1607107690
    },
    {
        "content": "<p>Do you know the answer to \"Either by adding a new variant like <code>TyKind::Discarded</code> or just setting it[the unused substs] to <code>()</code> (does that work? This would result in a potentially inconsistent <code>param_env</code>, but that's probably already the case with <code>trivial_bounds</code> so <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span>).\"?</p>",
        "id": 218875597,
        "sender_full_name": "lcnr",
        "timestamp": 1607107744
    },
    {
        "content": "<p>for the following</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">Iterator</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 218875739,
        "sender_full_name": "lcnr",
        "timestamp": 1607107825
    },
    {
        "content": "<p>are there any known issues if we set <code>T</code> to <code>()</code> for the anonymous constant</p>",
        "id": 218875771,
        "sender_full_name": "lcnr",
        "timestamp": 1607107851
    },
    {
        "content": "<p>You mean setting the substs in <code>AbstractConst</code> or elsewhere?</p>",
        "id": 218875844,
        "sender_full_name": "varkor",
        "timestamp": 1607107891
    },
    {
        "content": "<p>the substs for the <code>ConstKind::Unevaluated</code></p>",
        "id": 218875871,
        "sender_full_name": "lcnr",
        "timestamp": 1607107907
    },
    {
        "content": "<p><code>1 + 2</code> is <code>ConstKind::Unevaluated { def: ..., substs: [T], promoted: None }</code> rn</p>",
        "id": 218875970,
        "sender_full_name": "lcnr",
        "timestamp": 1607107939
    },
    {
        "content": "<p>I have no idea what would happen if you did that :P<br>\nI was wondering whether it would be possible for each <code>Unevaluated</code> to know how many parameters it's using, and then <code>substs</code> only contains those parameters, instead of containing dummy values.</p>",
        "id": 218876099,
        "sender_full_name": "varkor",
        "timestamp": 1607108015
    },
    {
        "content": "<p>that's hard i think <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 218876146,
        "sender_full_name": "lcnr",
        "timestamp": 1607108038
    },
    {
        "content": "<p>esp because unevaluated consts start out with needing all substs</p>",
        "id": 218876228,
        "sender_full_name": "lcnr",
        "timestamp": 1607108063
    },
    {
        "content": "<p>Yeah, I could believe that. Probably quite a lot of bookkeeping.</p>",
        "id": 218876246,
        "sender_full_name": "varkor",
        "timestamp": 1607108070
    },
    {
        "content": "<p>because we can't always construct the <code>AbstractConst</code> eagerly</p>",
        "id": 218876268,
        "sender_full_name": "lcnr",
        "timestamp": 1607108081
    },
    {
        "content": "<p>because cycles</p>",
        "id": 218876273,
        "sender_full_name": "lcnr",
        "timestamp": 1607108085
    },
    {
        "content": "<p>Right</p>",
        "id": 218876276,
        "sender_full_name": "varkor",
        "timestamp": 1607108086
    },
    {
        "content": "<p>My naïve guess would be that <code>()</code> <em>should</em> work... but at the same time making an explicit variant instead seems more readable.</p>",
        "id": 218876351,
        "sender_full_name": "varkor",
        "timestamp": 1607108134
    },
    {
        "content": "<p>But, we'd probably just need to make that change in one place, right, so maybe it's not so bad...</p>",
        "id": 218876443,
        "sender_full_name": "varkor",
        "timestamp": 1607108176
    },
    {
        "content": "<p>(I.e. after constructing the <code>AbstractConst</code>.)</p>",
        "id": 218876483,
        "sender_full_name": "varkor",
        "timestamp": 1607108195
    },
    {
        "content": "<p>Considering it's not using that parameter for anything, I don't see what <em>would</em> go wrong :P</p>",
        "id": 218876540,
        "sender_full_name": "varkor",
        "timestamp": 1607108226
    },
    {
        "content": "<p>my thinking is that the parameter is in the param_env</p>",
        "id": 218876570,
        "sender_full_name": "lcnr",
        "timestamp": 1607108241
    },
    {
        "content": "<p>so yeah, I can't think of anything specific either</p>",
        "id": 218876641,
        "sender_full_name": "lcnr",
        "timestamp": 1607108268
    },
    {
        "content": "<p>but it does seem a bit sketchy</p>",
        "id": 218876663,
        "sender_full_name": "lcnr",
        "timestamp": 1607108279
    },
    {
        "content": "<p>It does seem worth trying as an experiment.</p>",
        "id": 218876755,
        "sender_full_name": "varkor",
        "timestamp": 1607108306
    },
    {
        "content": "<p>so it seems that unless niko or eddy have any concerns we're going to end up throwing out <code>lazy_normalization_consts</code> <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 218876915,
        "sender_full_name": "lcnr",
        "timestamp": 1607108385
    },
    {
        "content": "<p>which does make me a bit sad tbh</p>",
        "id": 218876959,
        "sender_full_name": "lcnr",
        "timestamp": 1607108402
    },
    {
        "content": "<p>Mhm, I'd very much like to hear their thoughts.</p>",
        "id": 218877274,
        "sender_full_name": "varkor",
        "timestamp": 1607108558
    },
    {
        "content": "<p>I haven't been keeping up with chalk integration recently; I wonder where they are with respect to const generics. There was some support last time I looked, if I remember correctly.</p>",
        "id": 218877532,
        "sender_full_name": "varkor",
        "timestamp": 1607108669
    },
    {
        "content": "<p>from what i can tell the support is still fairly incomplete</p>",
        "id": 218877572,
        "sender_full_name": "lcnr",
        "timestamp": 1607108696
    },
    {
        "content": "<p>The little hacks that are necessary with the current type system are crying out for a more declarative constraint solving approach.</p>",
        "id": 218877640,
        "sender_full_name": "varkor",
        "timestamp": 1607108733
    },
    {
        "content": "<p>i think they tried to add unevaluated constants but it looked like life got in the way there</p>",
        "id": 218877647,
        "sender_full_name": "lcnr",
        "timestamp": 1607108738
    },
    {
        "content": "<p>so the PR didn't land</p>",
        "id": 218877655,
        "sender_full_name": "lcnr",
        "timestamp": 1607108748
    },
    {
        "content": "<p>Ah, okay</p>",
        "id": 218877671,
        "sender_full_name": "varkor",
        "timestamp": 1607108760
    },
    {
        "content": "<p>though some of these hacks are also there after we switch to chalk i think</p>",
        "id": 218877740,
        "sender_full_name": "lcnr",
        "timestamp": 1607108781
    },
    {
        "content": "<p>Which ones are you thinking of?</p>",
        "id": 218877756,
        "sender_full_name": "varkor",
        "timestamp": 1607108791
    },
    {
        "content": "<p>typechecking stuff which is explicitly mention in it's own param env</p>",
        "id": 218877782,
        "sender_full_name": "lcnr",
        "timestamp": 1607108813
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/79356\">#79356</a></p>",
        "id": 218877806,
        "sender_full_name": "lcnr",
        "timestamp": 1607108823
    },
    {
        "content": "<p>i don't think chalk is able to handle that without some explicit changes</p>",
        "id": 218877842,
        "sender_full_name": "lcnr",
        "timestamp": 1607108838
    },
    {
        "content": "<p>That was exactly the one I was hoping chalk <em>would</em> be able to deal with.</p>",
        "id": 218877849,
        "sender_full_name": "varkor",
        "timestamp": 1607108842
    },
    {
        "content": "<p>I need to catch up with everything that's been going on, and get a better high-level understanding of the state of everything... other things just keep getting in the way <span aria-label=\"weary\" class=\"emoji emoji-1f629\" role=\"img\" title=\"weary\">:weary:</span></p>",
        "id": 218878003,
        "sender_full_name": "varkor",
        "timestamp": 1607108905
    },
    {
        "content": "<p>i don't know enough about chalk, but it does seem to me like this isn't really part of the type system anymore <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 218878029,
        "sender_full_name": "lcnr",
        "timestamp": 1607108920
    },
    {
        "content": "<p>Cycle errors seem like type system problems to me :P</p>",
        "id": 218878058,
        "sender_full_name": "varkor",
        "timestamp": 1607108940
    },
    {
        "content": "<p>well, it's a query problem</p>",
        "id": 218878075,
        "sender_full_name": "lcnr",
        "timestamp": 1607108949
    },
    {
        "content": "<p>not a type problem</p>",
        "id": 218878094,
        "sender_full_name": "lcnr",
        "timestamp": 1607108965
    },
    {
        "content": "<p>we have cycles in the type system</p>",
        "id": 218878222,
        "sender_full_name": "lcnr",
        "timestamp": 1607109021
    },
    {
        "content": "<p>I guess I was counting it as a type system problem because it happened during type checking :P</p>",
        "id": 218878250,
        "sender_full_name": "varkor",
        "timestamp": 1607109037
    },
    {
        "content": "<p>I'm afraid I have to run off (i.e. switch windows) to another meeting in five minutes. Thanks for hosting this <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span>! That demo PR looks very encouraging and the other ideas definitely seem plausible to me ^_^</p>",
        "id": 218878257,
        "sender_full_name": "varkor",
        "timestamp": 1607109041
    },
    {
        "content": "<p>my pleasure <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span> thanks for taking the time to talk this through with me you two</p>",
        "id": 218878310,
        "sender_full_name": "lcnr",
        "timestamp": 1607109073
    },
    {
        "content": "<p>So.. I guess just assign the PR to niko and eddyb and point to this discussion?</p>",
        "id": 218878384,
        "sender_full_name": "oli",
        "timestamp": 1607109122
    },
    {
        "content": "<p>it's annoying having to explicitly normalize everywhere but it doesn't look like I can avoid this</p>",
        "id": 219119107,
        "sender_full_name": "lcnr",
        "timestamp": 1607366068
    },
    {
        "content": "<p>will still take a while until that PR feels ready to me</p>",
        "id": 219119140,
        "sender_full_name": "lcnr",
        "timestamp": 1607366084
    },
    {
        "content": "<p>could it be that this stuff just <em>has</em> to be hard no matter what we do <span aria-label=\"cry\" class=\"emoji emoji-1f622\" role=\"img\" title=\"cry\">:cry:</span></p>",
        "id": 219119543,
        "sender_full_name": "lcnr",
        "timestamp": 1607366249
    },
    {
        "content": "<p>we also need lazy norm for const projections, don't we?</p>",
        "id": 221242936,
        "sender_full_name": "lcnr",
        "timestamp": 1609359300
    },
    {
        "content": "<p>like trying to relate <code>?0 + ?2</code> with <code>?1 + ?2</code> may succeed if <code>?0</code> and <code>?1</code> are equal which we can't really express without lazy norm</p>",
        "id": 221243190,
        "sender_full_name": "lcnr",
        "timestamp": 1609359491
    },
    {
        "content": "<p>i think</p>",
        "id": 221243203,
        "sender_full_name": "lcnr",
        "timestamp": 1609359501
    },
    {
        "content": "<p>hmm... is that really different from relating <code>?0</code> with <code>?1</code> directly?</p>",
        "id": 221243278,
        "sender_full_name": "oli",
        "timestamp": 1609359565
    },
    {
        "content": "<p>we must not</p>",
        "id": 221243301,
        "sender_full_name": "lcnr",
        "timestamp": 1609359585
    },
    {
        "content": "<p>or much rather, projections may not be injective</p>",
        "id": 221243381,
        "sender_full_name": "lcnr",
        "timestamp": 1609359628
    },
    {
        "content": "<p>so we can't assume this in the general case</p>",
        "id": 221243441,
        "sender_full_name": "lcnr",
        "timestamp": 1609359718
    }
]