[
    {
        "content": "<p>When documenting const generics, we explicitly mention the type of concrete const args outside of arrays. For example<br>\n<code>impl Trait&lt;13&gt; for [u8; 13]</code> is documented as <code>impl Trait&lt;13_usize&gt; for [u8; 13]</code>.</p>",
        "id": 216207602,
        "sender_full_name": "lcnr",
        "timestamp": 1605013387
    },
    {
        "content": "<p>I personally don't have a preference here. It is a bit verbose, but it can be helpful to read <code>Foo&lt;3_u8, 16_usize&gt;</code> instead of just <code>Foo&lt;3, 16&gt;</code>.</p>",
        "id": 216207695,
        "sender_full_name": "lcnr",
        "timestamp": 1605013440
    },
    {
        "content": "<p>In case you prefer to either keep or remove these type annotations, this is your chance to influence the future of the rust programming language <span aria-label=\"fire\" class=\"emoji emoji-1f525\" role=\"img\" title=\"fire\">:fire:</span></p>",
        "id": 216208076,
        "sender_full_name": "lcnr",
        "timestamp": 1605013649
    },
    {
        "content": "<p>I have a hard time coming up with a realistic example for where the suffix would be useful. It's never ambiguous for a specific type, and even if in the future types like <code>Foo&lt;T, const C: T&gt;</code> are allowed, rendering <code>Foo&lt;usize, 1_usize&gt;</code> would be pointless.</p>",
        "id": 216208169,
        "sender_full_name": "jplatte",
        "timestamp": 1605013710
    },
    {
        "content": "<p>I guess it could theoretically be hard to tell the actual type in complex situations, but not with anything like the current feature set. I.e. it seems feasible that if <code>Foo&lt;T, const C: T&gt;</code> will at some point be allowed, <code>Foo&lt;T: Trait, const C: T::Assoc&gt;</code> will too (but what would you even use that for?)</p>",
        "id": 216208436,
        "sender_full_name": "jplatte",
        "timestamp": 1605013843
    },
    {
        "content": "<p>I would rather rustdoc just normalizes that at the <em>trait</em> definition</p>",
        "id": 216208530,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605013897
    },
    {
        "content": "<p>I was thinking about <code>struct EncryptionStuff&lt;const BLOCKS: u8, const BLOCK_SIZE: usize, const PASS_COUNT: u32&gt;</code></p>",
        "id": 216208544,
        "sender_full_name": "lcnr",
        "timestamp": 1605013909
    },
    {
        "content": "<p>oh well I guess you can't since you don't know <code>T</code> yet</p>",
        "id": 216208551,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605013916
    },
    {
        "content": "<p>where the type of the const parameters can be helpful to remember the expected order</p>",
        "id": 216208633,
        "sender_full_name": "lcnr",
        "timestamp": 1605013954
    },
    {
        "content": "<p>I think things like the <code>EncryptionStuff</code> example should eventually just become parametrized over a struct, although there will of course be a timespan in which primitive const generics will be supported without custom types being supported.</p>",
        "id": 216208743,
        "sender_full_name": "jplatte",
        "timestamp": 1605014035
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> this seems like enough of an edge case I don't think it's worth making the rest of the docs more noisy</p>",
        "id": 216208794,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605014047
    },
    {
        "content": "<p>Compiler errors will also just be annoying without that, a type mismatch between <code>EncryptionStuff&lt;4, 128, 2&gt;</code> and <code>EncryptionStuff&lt;4, 128, 3&gt;</code> is much harder to understand than a mismatch between <code>EncryptionStuff&lt;EncryptionParams { blocks: 4, block_size: 128, pass_count: 2 }&gt;</code> and <code>EncryptionStuff&lt;EncryptionParams { blocks: 4, block_size: 128, pass_count: 3 }&gt;</code></p>",
        "id": 216209062,
        "sender_full_name": "jplatte",
        "timestamp": 1605014195
    },
    {
        "content": "<p>For that example, I think the former is more understandable, because of how it would likely be formatted:</p>\n<div class=\"codehilite\"><pre><span></span><code>expected: EncryptionStuff&lt;4, 128, 2&gt;\nfound:    EncryptionStuff&lt;4, 128, 3&gt;\n</code></pre></div>",
        "id": 216217894,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1605018209
    },
    {
        "content": "<p>Where I'd worry would be</p>\n<div class=\"codehilite\"><pre><span></span><code>expected: EncryptionStuff&lt;4, 128, 2&gt;\nfound:    EncryptionStuff&lt;4, 128, 2&gt;\n</code></pre></div>\n<p>Which should be</p>\n<div class=\"codehilite\"><pre><span></span><code>expected: EncryptionStuff&lt;4, 128, 2u8&gt;\nfound:    EncryptionStuff&lt;4, 128, 2u16&gt;\n</code></pre></div>",
        "id": 216218048,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1605018257
    },
    {
        "content": "<p>I'd look to the recent work to help remove the full path from error text when it's unambiguous. The error messages should strive to highlight the differences as much as possible.</p>",
        "id": 216218236,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1605018350
    },
    {
        "content": "<p>what about making the type alt text when you hover over the value?</p>",
        "id": 216221549,
        "sender_full_name": "boats",
        "timestamp": 1605019600
    },
    {
        "content": "<p>Similar, but maybe more accessible, would be to add expando-text:</p>\n<p><a href=\"/user_uploads/4715/6QuxfVBuph3-85IAZBnRMNQu/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/6QuxfVBuph3-85IAZBnRMNQu/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/6QuxfVBuph3-85IAZBnRMNQu/image.png\"></a></div>",
        "id": 216222149,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1605019862
    },
    {
        "content": "<p>Please no more buttons, rustdoc has enough buttons <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 216222735,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605020081
    },
    {
        "content": "<p>Title text sounds fine though</p>",
        "id": 216222739,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605020084
    },
    {
        "content": "<p>Ideally this would always use the way it was written in the source code, except when it's an expression that can be simplified</p>",
        "id": 216222821,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605020120
    },
    {
        "content": "<p>That's it works for associated types, both <code>T::Item</code> and <code>&lt;T as Trait&gt;::Item</code> are rendered as written</p>",
        "id": 216222905,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605020159
    },
    {
        "content": "<p>so</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">SIZE</span>: <span class=\"kt\">u8</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">SIZE</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>would say <code>SIZE</code> literally (and ideally link to <code>SIZE</code>, given visibility)?</p>",
        "id": 216223144,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1605020248
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116155\">Jake Goulding</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/documenting.20concrete.20consts.20in.20types/near/216218048\">said</a>:</p>\n<blockquote>\n<p>Where I'd worry would be</p>\n<div class=\"codehilite\"><pre><span></span><code>expected: EncryptionStuff&lt;4, 128, 2&gt;\nfound:    EncryptionStuff&lt;4, 128, 2&gt;\n</code></pre></div>\n<p>Which should be</p>\n<div class=\"codehilite\"><pre><span></span><code>expected: EncryptionStuff&lt;4, 128, 2u8&gt;\nfound:    EncryptionStuff&lt;4, 128, 2u16&gt;\n</code></pre></div>\n</blockquote>\n<p>This can't happen though, right? You would already get an error trying to instantiate one of the two since the type of the third const parameter cannot be generic.</p>",
        "id": 216224921,
        "sender_full_name": "jplatte",
        "timestamp": 1605020983
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116155\">Jake Goulding</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/documenting.20concrete.20consts.20in.20types/near/216223144\">said</a>:</p>\n<blockquote>\n<p>so</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">SIZE</span>: <span class=\"kt\">u8</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">SIZE</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>would say <code>SIZE</code> literally (and ideally link to <code>SIZE</code>, given visibility)?</p>\n</blockquote>\n<p>yes: <a href=\"/user_uploads/4715/ARSPkWp031JoVUUIo7mB9S_I/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/ARSPkWp031JoVUUIo7mB9S_I/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/ARSPkWp031JoVUUIo7mB9S_I/image.png\"></a></div>",
        "id": 216225889,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605021440
    },
    {
        "content": "<p>apparently it doesn't link though, we could fix that</p>",
        "id": 216225915,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605021453
    },
    {
        "content": "<p>What about</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 216226561,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1605021744
    },
    {
        "content": "<p><del>this is why playground should have rustdoc support</del></p>",
        "id": 216226604,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605021769
    },
    {
        "content": "<p>(I assume arbitrary const expressions are valid there)</p>",
        "id": 216226621,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1605021774
    },
    {
        "content": "<p>well look at that<br>\n<a href=\"/user_uploads/4715/Iinrux22Q-8LvqTUmB2wNbMF/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/Iinrux22Q-8LvqTUmB2wNbMF/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/Iinrux22Q-8LvqTUmB2wNbMF/image.png\"></a></div>",
        "id": 216226678,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605021794
    },
    {
        "content": "<p><a href=\"https://github.com/integer32llc/rust-playground/issues/489\">you know</a></p>",
        "id": 216226693,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1605021799
    },
    {
        "content": "<p>one of these days I'll get around to it</p>",
        "id": 216226738,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605021829
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"210267\">@Nemo157</span> has been working on <a href=\"https://github.com/Nemo157/oubliette/\">https://github.com/Nemo157/oubliette/</a> to allow rendering the doc client-side</p>",
        "id": 216226803,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605021845
    },
    {
        "content": "<p>then you wouldn't even need to store them, just pack them in an archive and send it to the browser</p>",
        "id": 216226825,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605021859
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(min_const_generics)]</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">EncryptionStuff</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">A</span>: <span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">B</span>: <span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">C</span>: <span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">demo</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">Z</span>: <span class=\"kt\">u16</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">EncryptionStuff</span><span class=\"o\">&lt;</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Z</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">EncryptionStuff</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>error[E0308]: mismatched types\n --&gt; src/lib.rs:5:50\n  |\n5 | fn demo&lt;const Z: u16&gt;() -&gt; EncryptionStuff&lt;1, 2, Z&gt; {\n  |                                                  ^ expected `u8`, found `u16`\n</code></pre></div>\n<p>That error seems reasonable already</p>",
        "id": 216227061,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1605021972
    },
    {
        "content": "<p>And in rustdoc, you should be able to click on the return type to then see that it has a <code>const u8</code> parameter. So maybe it doesn't need to be  at the usage site.</p>",
        "id": 216227203,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1605022064
    },
    {
        "content": "<p>Just like we don't list trait bounds at the usage site.</p>",
        "id": 216227224,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1605022073
    },
    {
        "content": "<p>right, yeah I guess my main objection is 'why are primitives special'</p>",
        "id": 216227322,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605022110
    },
    {
        "content": "<p>e.g. </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">EncryptionStuff</span><span class=\"o\">&lt;</span><span class=\"n\">A</span>: <span class=\"nb\">Copy</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">demo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">EncryptionStuff</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">EncryptionStuff</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 216227328,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1605022112
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/documenting.20concrete.20consts.20in.20types/near/216226678\">said</a>:</p>\n<blockquote>\n<p>well look at that<br>\n<a href=\"/user_uploads/4715/Iinrux22Q-8LvqTUmB2wNbMF/image.png\">image.png</a></p>\n</blockquote>\n<p>so we are evaluating some constants in rust doc and do not evaluate some other consts?</p>",
        "id": 216278412,
        "sender_full_name": "lcnr",
        "timestamp": 1605044336
    },
    {
        "content": "<p>that's concerning, esp because to my knowledge we don't have any tests which do not evaluate here</p>",
        "id": 216278463,
        "sender_full_name": "lcnr",
        "timestamp": 1605044373
    },
    {
        "content": "<p>looks like this is something I have to look into during the next few weeks</p>",
        "id": 216278599,
        "sender_full_name": "lcnr",
        "timestamp": 1605044452
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> you're catching all the bugs :P</p>",
        "id": 216278678,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605044502
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/documenting.20concrete.20consts.20in.20types/near/216278412\">said</a>:</p>\n<blockquote>\n<p>so we are evaluating some constants in rust doc and do not evaluate some other consts?</p>\n</blockquote>\n<p>Are you sure? It could be evaluated still, but rustdoc <em>chooses</em> to show the original source, perhaps?</p>",
        "id": 216278820,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1605044573
    },
    {
        "content": "<p>I don't think so, notice how it has different formatting from the original</p>",
        "id": 216278873,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605044605
    },
    {
        "content": "<p>well it can be evaluated, but rustdoc shows the unevaluated constant</p>",
        "id": 216278879,
        "sender_full_name": "lcnr",
        "timestamp": 1605044610
    },
    {
        "content": "<p>how it does so is secondary to me rn <span aria-label=\"laughter tears\" class=\"emoji emoji-1f602\" role=\"img\" title=\"laughter tears\">:laughter_tears:</span></p>",
        "id": 216278896,
        "sender_full_name": "lcnr",
        "timestamp": 1605044625
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/documenting.20concrete.20consts.20in.20types/near/216278873\">said</a>:</p>\n<blockquote>\n<p>I don't think so, notice how it has different formatting from the original</p>\n</blockquote>\n<p>Wouldn't that just be a missing <code>pre</code> tag?</p>",
        "id": 216278919,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1605044639
    },
    {
        "content": "<p>I mean, definitely look into it to be sure.</p>",
        "id": 216278980,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1605044654
    },
    {
        "content": "<p>I just can see a path where you are both correct and there is no problem.</p>",
        "id": 216278997,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1605044668
    },
    {
        "content": "<p>yeah, even if we are just showing the original source this is still something we don't have a test for yet afaik</p>",
        "id": 216279127,
        "sender_full_name": "lcnr",
        "timestamp": 1605044763
    },
    {
        "content": "<p>ok, so it looks good enough to me <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> considering that the rustdoc output isn't part of our stability guarantees I am fine with it not being perfect in all cases. Added one testwith an unevaluated consts</p>",
        "id": 216394742,
        "sender_full_name": "lcnr",
        "timestamp": 1605126376
    }
]