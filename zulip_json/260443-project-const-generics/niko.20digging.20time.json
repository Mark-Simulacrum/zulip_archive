[
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> would you be around <time datetime=\"2021-02-12T15:00:00Z\">2021-02-12T10:00:00-05:00</time> if I used that time to dig into the compiler a bit around const generics?</p>",
        "id": 225871649,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612976506
    },
    {
        "content": "<p>yeah</p>",
        "id": 225871805,
        "sender_full_name": "lcnr",
        "timestamp": 1612976569
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> do you still intend to do this today?</p>",
        "id": 226152763,
        "sender_full_name": "lcnr",
        "timestamp": 1613144328
    },
    {
        "content": "<p>I do except that I triple booked myself</p>",
        "id": 226152806,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613144350
    },
    {
        "content": "<p>I should've pinged you, sorry</p>",
        "id": 226152817,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613144357
    },
    {
        "content": "<p>are you around a bit later on? e.g., in ~20 minutes</p>",
        "id": 226152831,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613144363
    },
    {
        "content": "<p>yeah, will be there</p>",
        "id": 226153105,
        "sender_full_name": "lcnr",
        "timestamp": 1613144447
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> ok, I'm way late, but I'm finally reading some code</p>",
        "id": 226168852,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613150991
    },
    {
        "content": "<p>I decided to try and understand <code>WithOptConstParam</code> more closely</p>",
        "id": 226168872,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613150999
    },
    {
        "content": "<p>in particular, I'm looking at <a href=\"https://github.com/nikomatsakis/rust/blob/a118ee2c13cc96ceb27bd5030c1cca1052377604/compiler/rustc_middle/src/ty/mod.rs#L1606-L1610\">this comment</a></p>",
        "id": 226168913,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613151005
    },
    {
        "content": "<p>remind me-- for anonymous constants--</p>",
        "id": 226168968,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613151030
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 226169023,
        "sender_full_name": "lcnr",
        "timestamp": 1613151060
    },
    {
        "content": "<p>well, ok, so they can't access any of the <em>variables</em> from the surrounding context</p>",
        "id": 226169078,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613151081
    },
    {
        "content": "<p>there is an expected type</p>",
        "id": 226169098,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613151090
    },
    {
        "content": "<p>did you have some plan to type check anonymous constants together with their enclosing method?</p>",
        "id": 226169165,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613151114
    },
    {
        "content": "<p>or did I dream that</p>",
        "id": 226169169,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613151116
    },
    {
        "content": "<p>yesno</p>",
        "id": 226169238,
        "sender_full_name": "lcnr",
        "timestamp": 1613151127
    },
    {
        "content": "<p>i want to typeck inline consts together with their body</p>",
        "id": 226169269,
        "sender_full_name": "lcnr",
        "timestamp": 1613151144
    },
    {
        "content": "<p>i think that for anonymous constants the current unidirectional inference is good enough</p>",
        "id": 226169319,
        "sender_full_name": "lcnr",
        "timestamp": 1613151164
    },
    {
        "content": "<p>and typechecking them together with their enclosing method won't work for anon consts anyways</p>",
        "id": 226169427,
        "sender_full_name": "lcnr",
        "timestamp": 1613151202
    },
    {
        "content": "<p>cause they can be inside of binders</p>",
        "id": 226169439,
        "sender_full_name": "lcnr",
        "timestamp": 1613151207
    },
    {
        "content": "<p>what is an inline constant</p>",
        "id": 226169458,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613151217
    },
    {
        "content": "<p><code>const { expr }</code></p>",
        "id": 226169468,
        "sender_full_name": "lcnr",
        "timestamp": 1613151223
    },
    {
        "content": "<p>const blocks</p>",
        "id": 226169480,
        "sender_full_name": "lcnr",
        "timestamp": 1613151226
    },
    {
        "content": "<p>why do you want to type check together?</p>",
        "id": 226169512,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613151236
    },
    {
        "content": "<p>and what is an <em>anonymous</em> constant</p>",
        "id": 226169521,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613151240
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/niko.20digging.20time/near/226169439\">said</a>:</p>\n<blockquote>\n<p>cause they can be inside of binders</p>\n</blockquote>\n<p>example</p>",
        "id": 226169749,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613151326
    },
    {
        "content": "<p>remember that <a href=\"https://hackmd.io/9LIywezOQj-h5HX8vvEnSw#inline-consts\">https://hackmd.io/9LIywezOQj-h5HX8vvEnSw#inline-consts</a></p>",
        "id": 226169757,
        "sender_full_name": "lcnr",
        "timestamp": 1613151330
    },
    {
        "content": "<p>and why does that not apply to <code>const { expr }</code>?</p>",
        "id": 226169763,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613151333
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/niko.20digging.20time/near/226169749\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/niko.20digging.20time/near/226169439\">said</a>:</p>\n<blockquote>\n<p>cause they can be inside of binders</p>\n</blockquote>\n<p>example</p>\n</blockquote>\n<p><a href=\"https://github.com/rust-lang/rust/pull/79313\">https://github.com/rust-lang/rust/pull/79313</a></p>",
        "id": 226169799,
        "sender_full_name": "lcnr",
        "timestamp": 1613151352
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(const_generics)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![allow(incomplete_features)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"p\">();</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"p\">}]</span>: <span class=\"nb\">Sized</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 226169877,
        "sender_full_name": "lcnr",
        "timestamp": 1613151373
    },
    {
        "content": "<p>ok, so, the difference is that a <code>const { }</code> expression is a <em>value</em></p>",
        "id": 226169893,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613151384
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/niko.20digging.20time/near/226169893\">said</a>:</p>\n<blockquote>\n<p>ok, so, the difference is that a <code>const { }</code> expression is a <em>value</em></p>\n</blockquote>\n<p>or a pattern</p>",
        "id": 226169912,
        "sender_full_name": "lcnr",
        "timestamp": 1613151393
    },
    {
        "content": "<p>but an anonymous constant is part of a type or some expression?</p>",
        "id": 226169914,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613151394
    },
    {
        "content": "<p>e.g., if I have <code>[x; 32]</code>, that <code>32</code> is an anonymous constant, right?</p>",
        "id": 226169958,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613151415
    },
    {
        "content": "<p>anonymous constants (or at least how i use it) are array/repeat expr lengths and const arguments</p>",
        "id": 226170009,
        "sender_full_name": "lcnr",
        "timestamp": 1613151437
    },
    {
        "content": "<p>ok. const arguments feel like an expression too</p>",
        "id": 226170070,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613151471
    },
    {
        "content": "<p>I mean they all are</p>",
        "id": 226170095,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613151477
    },
    {
        "content": "<p>I'm not sure I agree there's a meaningful distinction</p>",
        "id": 226170130,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613151484
    },
    {
        "content": "<p><del>all constants are expressions</del>(that message is bogus)</p>",
        "id": 226170167,
        "sender_full_name": "lcnr",
        "timestamp": 1613151490
    },
    {
        "content": "<p>but const blocks can only occur as expressions and patterns</p>",
        "id": 226170193,
        "sender_full_name": "lcnr",
        "timestamp": 1613151502
    },
    {
        "content": "<p>anonymous constants can also occur inside of types and cannot be expressions by themselves</p>",
        "id": 226170222,
        "sender_full_name": "lcnr",
        "timestamp": 1613151512
    },
    {
        "content": "<p>the example for inline consts from the hackmd is</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">Foo</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"p\">});</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 226170347,
        "sender_full_name": "lcnr",
        "timestamp": 1613151567
    }
]