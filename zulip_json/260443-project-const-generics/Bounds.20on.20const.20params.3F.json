[
    {
        "content": "<p>Is this already being designed? I'm very interested in being able to express that my function accepts a [T; N] where N &lt; 8, let's say</p>",
        "id": 242884030,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1623851876
    },
    {
        "content": "<p>(ideally the 8 itself would be calculated based on associated consts, but that will at least also need lazy normalization IIUC)</p>",
        "id": 242884156,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1623851916
    },
    {
        "content": "<p>I think what you're looking for is <code>feature(const_evaluatable_checked)</code></p>",
        "id": 242884212,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1623851941
    },
    {
        "content": "<p>I was just looking at that, but it seems to be about other things; like, in <a href=\"https://hackmd.io/OZG_XiLFRs2Xmw5s39jRzA?view\">https://hackmd.io/OZG_XiLFRs2Xmw5s39jRzA?view</a> it talks about arithmetic expressions like N + 1</p>",
        "id": 242884351,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1623851996
    },
    {
        "content": "<p>y</p>",
        "id": 242884431,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1623852013
    },
    {
        "content": "<p>so you could write like</p>",
        "id": 242884446,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1623852018
    },
    {
        "content": "<p>I would expect placing bounds on a const generic value is simpler than evaluating a compound expression</p>",
        "id": 242884460,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1623852024
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">arg</span>: <span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"p\">[();</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">]</span>: <span class=\"p\">{</span><span class=\"w\"></span>\n\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 242884528,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1623852054
    },
    {
        "content": "<p>and then if you call it with <code>N &gt;= 8</code> it would give you a compile error because <code>7 - N</code> doesnt evaluate successfully xd</p>",
        "id": 242884584,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1623852081
    },
    {
        "content": "<p>ah, ok</p>",
        "id": 242884616,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1623852092
    },
    {
        "content": "<p>the way that const evaluatable checked works is basically where clauses that make the caller prove that some expression can be evalauted</p>",
        "id": 242884648,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1623852107
    },
    {
        "content": "<p>currently the feature is pretty WIP though <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 242884673,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1623852120
    },
    {
        "content": "<p>for example the only way to add these where clauses is to just use the expression you want to be evaluatable, somewhere in the fn signature</p>",
        "id": 242884782,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1623852150
    },
    {
        "content": "<p>and then implied bounds go brrr...</p>",
        "id": 242884798,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1623852156
    },
    {
        "content": "<p>mkay</p>",
        "id": 242885103,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1623852269
    },
    {
        "content": "<p>just as UX, <code>7 - N</code> seems a fair bit harder to understand than <code>N &lt; 8</code></p>",
        "id": 242885163,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1623852289
    },
    {
        "content": "<p>yea for sure</p>",
        "id": 242885195,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1623852298
    },
    {
        "content": "<p>shiny future <span aria-label=\"sparkles\" class=\"emoji emoji-2728\" role=\"img\" title=\"sparkles\">:sparkles:</span> would be writing something like<br>\n<code>fn foo&lt;const N: usize, T&gt;(arg: [T; N]) where { N &lt; 8 }</code> or something</p>",
        "id": 242885282,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1623852330
    },
    {
        "content": "<p>not quite there yet though</p>",
        "id": 242885303,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1623852338
    },
    {
        "content": "<p>yeah, that would be cool</p>",
        "id": 242885312,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1623852342
    },
    {
        "content": "<p>(congrats on your new role as compiler contributor BTW!)</p>",
        "id": 242885342,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1623852354
    },
    {
        "content": "<p>aa thanks :)</p>",
        "id": 242885374,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1623852362
    },
    {
        "content": "<p>it was a surprise for sure haha</p>",
        "id": 242885425,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1623852368
    }
]