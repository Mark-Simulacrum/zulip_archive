[
    {
        "content": "<p>Hey, how are you supposed to write the following? I would have expected this to work as is, but it doesn't and the error message suggestion also doesn't work AFAICT.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(const_generics, const_evaluatable_checked)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![allow(incomplete_features)]</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[derive(Debug, Clone, Copy, PartialEq, Eq)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">X</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">SIZE</span>: <span class=\"nc\">X</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Bar</span>: <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">Self</span>::<span class=\"n\">bar</span>::<span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"bp\">Self</span>::<span class=\"n\">SIZE</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">SIZE</span>: <span class=\"nc\">X</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p><strong>Error</strong></p>\n<div class=\"codehilite\"><pre><span></span><code>error: unconstrained generic constant\n  --&gt; src/lib.rs:11:21\n   |\n11 |         Self::bar::&lt;{ Self::SIZE }&gt;()\n   |                     ^^^^^^^^^^^^^^\n   |\n   = help: try adding a `where` bound using this expression: `where [(); { Self::SIZE }]:`\n</code></pre></div>",
        "id": 241704309,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1623004375
    },
    {
        "content": "<p>oh yeah that error message is <em>wildly</em> bad for types that aren't <code>usize</code></p>",
        "id": 241704368,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1623004425
    },
    {
        "content": "<p>const_evaluatable_checked wants to be able to prove that a given expression will evaluate successfully at compile time</p>",
        "id": 241704411,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1623004452
    },
    {
        "content": "<p>associated constants dont have that guarantee because you can do like</p>",
        "id": 241704417,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1623004463
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">usize</span>::<span class=\"n\">MAX</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 241704445,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1623004482
    },
    {
        "content": "<p>so you need a where clause on <code>foo</code> to say that <code>Self::SIZE</code> will evaluate successfully</p>",
        "id": 241704461,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1623004508
    },
    {
        "content": "<p>Why can they do that? How do I that for a struct?</p>",
        "id": 241704482,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1623004537
    },
    {
        "content": "<p>if you use the expression anywhere in the fn signature/where clauses rustc will implicitly add a bound that it evaluates successfully</p>",
        "id": 241704541,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1623004582
    },
    {
        "content": "<p>the diagnostic suggests <code>[(); { expr }]:</code> but this is really only correct for usize <span aria-label=\"frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"frown\">:frown:</span> </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">XEvaluates</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"nc\">X</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">XEvaluates</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"bp\">Self</span>::<span class=\"n\">SIZE</span><span class=\"p\">}</span><span class=\"o\">&gt;</span>: <span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 241704569,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1623004639
    },
    {
        "content": "<p>I think this should work</p>",
        "id": 241704570,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1623004645
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"219696\">XAMPPRocky</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/Associated.20const.20as.20parameter/near/241704482\">said</a>:</p>\n<blockquote>\n<p>Why can they do that? How do I that for a struct?</p>\n</blockquote>\n<p>i dont know what you're asking \"why can they do that\"</p>",
        "id": 241704578,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1623004660
    },
    {
        "content": "<p>As an aside: it would be nice if I could just write the following, but I understand there's issues with generic defaults on functions at the moment.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">X</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">SIZE</span>: <span class=\"nc\">X</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Bar</span>: <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">SIZE</span>: <span class=\"nc\">X</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"bp\">Self</span>::<span class=\"n\">SIZE</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 241704682,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1623004784
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"326176\">Boxy [she/her]</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/Associated.20const.20as.20parameter/near/241704569\">said</a>:</p>\n<blockquote>\n<p>the diagnostic suggests <code>[(); { expr }]:</code> but this is really only correct for usize <span aria-label=\"frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"frown\">:frown:</span> </p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">XEvaluates</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"nc\">X</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">XEvaluates</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"bp\">Self</span>::<span class=\"n\">SIZE</span><span class=\"p\">}</span><span class=\"o\">&gt;</span>: <span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thanks, I'll try this out!</p>",
        "id": 241704738,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1623004855
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"326176\">Boxy [she/her]</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/Associated.20const.20as.20parameter/near/241704578\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"219696\">XAMPPRocky</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/Associated.20const.20as.20parameter/near/241704482\">said</a>:</p>\n<blockquote>\n<p>Why can they do that? How do I that for a struct?</p>\n</blockquote>\n<p>i dont know what you're asking \"why can they do that\"</p>\n</blockquote>\n<p>Why can associated consts have expressions which are not proven to successfully validate at compile time?</p>",
        "id": 241704786,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1623004911
    },
    {
        "content": "<p>ah uh</p>",
        "id": 241704815,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1623004922
    },
    {
        "content": "<p>backwards compat I suppose</p>",
        "id": 241704850,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1623004937
    },
    {
        "content": "<p>im not sure if its a design decision or not <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 241704859,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1623004968
    },
    {
        "content": "<p>it would be nice if one day you could write like...</p>",
        "id": 241704867,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1623004980
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">evaluatable</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"bp\">Self</span>::<span class=\"n\">AssocC</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">AssocC</span>: <span class=\"kt\">usize</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 241704879,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1623004994
    },
    {
        "content": "<p>but that's a whiles off aha</p>",
        "id": 241704882,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1623005000
    },
    {
        "content": "<p>Would it need new syntax, or could the change be added through an edition like having 2024 requiring all associated consts be const evaluatable? I can’t imagine a use case for having consts that don’t work in certain const contexts. I would expect a value from one const definition to be able to be used at any const use site.</p>",
        "id": 241706721,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1623007333
    },
    {
        "content": "<p>I think 1. we will want some syntax <em>regardless</em> to express that a const must be evaluatable i.e.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">evaluatable</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"fm\">assert!</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"cm\">/* code */</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 241706756,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1623007407
    },
    {
        "content": "<p>I think that adding a rule that all assoc consts must evaluate successfully could be an edition change..?</p>",
        "id": 241706765,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1623007433
    },
    {
        "content": "<p>it <em>would</em> be a language change <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 241706805,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1623007443
    },
    {
        "content": "<p>whether that actually happens probably depends a loooot on the scale of breakage that comes from it</p>",
        "id": 241706813,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1623007462
    }
]