[
    {
        "content": "<p>Hey all, I've run into a weird error when playing around with both <code>feature(adt_const_params)</code> and <code>feature(generic_const_exprs)</code> enabled:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(adt_const_params)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![feature(generic_const_exprs)]</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[derive(PartialEq, Eq)]</span><span class=\"w\"></span>\n<span class=\"k\">enum</span> <span class=\"nc\">Colour</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">R</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">G</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">B</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">W</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Off</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Led</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">C</span>: <span class=\"nc\">Colour</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">C</span>: <span class=\"nc\">Colour</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Led</span><span class=\"o\">&lt;</span><span class=\"n\">C</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">new</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Led</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">Colour</span>::<span class=\"n\">Off</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Led</span>::<span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">Colour</span>::<span class=\"n\">Off</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">l</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Led</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The compiler gives me this error<br>\n<a href=\"/user_uploads/4715/Q8u3rjWocT1K9wnipswnrvKe/image.png\">image.png</a> <br>\nThis looks like a bug, im not sure</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/Q8u3rjWocT1K9wnipswnrvKe/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/Q8u3rjWocT1K9wnipswnrvKe/image.png\"></a></div>",
        "id": 270740541,
        "sender_full_name": "Joeyh021",
        "timestamp": 1643993001
    },
    {
        "content": "<p>it is mostly a diagnostic bug <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> note that the <code>new</code> call is actually <code>Led&lt;_&gt;::new()</code></p>",
        "id": 270814937,
        "sender_full_name": "lcnr",
        "timestamp": 1644050787
    },
    {
        "content": "<p>because of this the anonymous constant in <code>{ Colour::Off }</code> is internally represented as <code>const ANON_CONST_0&lt;const C: Colour&gt; = ...</code></p>",
        "id": 270814948,
        "sender_full_name": "lcnr",
        "timestamp": 1644050838
    },
    {
        "content": "<p>we don't evaluate anonymous constants if their generic arguments contain an inference variable</p>",
        "id": 270814953,
        "sender_full_name": "lcnr",
        "timestamp": 1644050852
    },
    {
        "content": "<p>so we never actually try to evaluate this constant as we can't infer <code>C</code>, even though it doesn't use <code>C</code></p>",
        "id": 270814999,
        "sender_full_name": "lcnr",
        "timestamp": 1644050884
    },
    {
        "content": "<p>i am a bit unhappy with how the error is emitted, so it probably makes sense to open a diagnostics issue on <a href=\"https://github.com/rust-lang/rust\">https://github.com/rust-lang/rust</a> for this</p>",
        "id": 270815014,
        "sender_full_name": "lcnr",
        "timestamp": 1644050924
    },
    {
        "content": "<p>How come <code>Led</code> requires generic arguments on the new call though. Other generic types such as <code>Vec&lt;T&gt;</code> have <code>::new()</code> which works without specifying the generics at that point<br>\nIs this a restriction of const generics?</p>",
        "id": 271057307,
        "sender_full_name": "Joeyh021",
        "timestamp": 1644275536
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/cannot.20satisfy.20the.20constant.20can.20be.20evaluated.20bug/near/270815014\">said</a>:</p>\n<blockquote>\n<p>i am a bit unhappy with how the error is emitted, so it probably makes sense to open a diagnostics issue on <a href=\"https://github.com/rust-lang/rust\">https://github.com/rust-lang/rust</a> for this</p>\n</blockquote>\n<p><a href=\"https://github.com/rust-lang/rust/issues/93750\">https://github.com/rust-lang/rust/issues/93750</a> opened. thanks for the help</p>",
        "id": 271058666,
        "sender_full_name": "Joeyh021",
        "timestamp": 1644276379
    },
    {
        "content": "<p>you are using</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">C</span>: <span class=\"nc\">Colour</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Led</span><span class=\"o\">&lt;</span><span class=\"n\">C</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">new</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Led</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">Colour</span>::<span class=\"n\">Off</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Led</span>::<span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">Colour</span>::<span class=\"n\">Off</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>instead of</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Led</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">Colour</span>::<span class=\"n\">Off</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">new</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Led</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">Colour</span>::<span class=\"n\">Off</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Led</span>::<span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">Colour</span>::<span class=\"n\">Off</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>or</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">C</span>: <span class=\"nc\">Colour</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Led</span><span class=\"o\">&lt;</span><span class=\"n\">C</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">new</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Led</span><span class=\"o\">&lt;</span><span class=\"n\">C</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Led</span>::<span class=\"o\">&lt;</span><span class=\"n\">C</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>the first one doesn't have any generic arguments while the second <code>new</code> function can infer its generic arguments through the return type</p>",
        "id": 271084184,
        "sender_full_name": "lcnr",
        "timestamp": 1644299387
    },
    {
        "content": "<p>so while the way this errors is a current shortcoming/bug of <code>feature(generic_const_exprs)</code>, it is expected and intended that your example fails to compile</p>",
        "id": 271084321,
        "sender_full_name": "lcnr",
        "timestamp": 1644299512
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/cannot.20satisfy.20the.20constant.20can.20be.20evaluated.20bug/near/271084184\">said</a>:</p>\n<blockquote>\n<p>you are using</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">C</span>: <span class=\"nc\">Colour</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Led</span><span class=\"o\">&lt;</span><span class=\"n\">C</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">new</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Led</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">Colour</span>::<span class=\"n\">Off</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Led</span>::<span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">Colour</span>::<span class=\"n\">Off</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>instead of</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Led</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">Colour</span>::<span class=\"n\">Off</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">new</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Led</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">Colour</span>::<span class=\"n\">Off</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Led</span>::<span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">Colour</span>::<span class=\"n\">Off</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>or</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">C</span>: <span class=\"nc\">Colour</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Led</span><span class=\"o\">&lt;</span><span class=\"n\">C</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">new</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Led</span><span class=\"o\">&lt;</span><span class=\"n\">C</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Led</span>::<span class=\"o\">&lt;</span><span class=\"n\">C</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>the first one doesn't have any generic arguments while the second <code>new</code> function can infer its generic arguments through the return type</p>\n</blockquote>\n<p>I see, i see my misunderstanding here. Thanks for the help!</p>",
        "id": 271101623,
        "sender_full_name": "Joeyh021",
        "timestamp": 1644312792
    }
]