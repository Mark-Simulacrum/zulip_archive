[
    {
        "content": "<p>looking at the following test from <a href=\"https://github.com/rust-lang/rust/issues/81426\">#81426</a></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(const_generics, const_evaluatable_checked)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![allow(incomplete_features)]</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">zero_init</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Substs1</span><span class=\"o\">&lt;</span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]</span>: <span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Substs1</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">])</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Substs1</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">([</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">])</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">[();</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]</span>: <span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">substs2</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">M</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Substs1</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">[();</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]</span>: <span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">zero_init</span>::<span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">substs3</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">L</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Substs1</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">[();</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)]</span>: <span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">[();</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]</span>: <span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">substs2</span>::<span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">L</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">substs3</span>::<span class=\"o\">&lt;</span><span class=\"mi\">2</span><span class=\"o\">&gt;</span><span class=\"p\">().</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">]);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 224169941,
        "sender_full_name": "lcnr",
        "timestamp": 1611748173
    },
    {
        "content": "<p>it's quite annoying that we have to explicitly mention these two const evaluatable predicates</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">[();</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)]</span>: <span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">[();</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]</span>: <span class=\"p\">,</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 224170047,
        "sender_full_name": "lcnr",
        "timestamp": 1611748237
    },
    {
        "content": "<p>considering that if <code>(L - 1) * 2 + 1</code> does not fail to evaluate, <code>(L - 1)</code> most certainly also evaluates successfully</p>",
        "id": 224170127,
        "sender_full_name": "lcnr",
        "timestamp": 1611748292
    },
    {
        "content": "<p>we could very easily try to match const eval predicates with subtrees of the const eval predicates in the caller bounds</p>",
        "id": 224170240,
        "sender_full_name": "lcnr",
        "timestamp": 1611748390
    },
    {
        "content": "<p>not sure if we already want to implement this now or wait until we get more experience with other potentially annoying cases</p>",
        "id": 224170347,
        "sender_full_name": "lcnr",
        "timestamp": 1611748455
    },
    {
        "content": "<p>it could always get its own feature gate</p>",
        "id": 224170393,
        "sender_full_name": "oli",
        "timestamp": 1611748508
    },
    {
        "content": "<p>then it can be talked about separately</p>",
        "id": 224170408,
        "sender_full_name": "oli",
        "timestamp": 1611748524
    },
    {
        "content": "<p><code>feature(const_evaluatable_checked_ergonomics)</code>? <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 224170421,
        "sender_full_name": "lcnr",
        "timestamp": 1611748543
    },
    {
        "content": "<p>yes, more underscores must mean the feature is better</p>",
        "id": 224170585,
        "sender_full_name": "oli",
        "timestamp": 1611748655
    },
    {
        "content": "<p><code>feature(cece)</code> seems good, i've been told that using acronyms is always a good thing</p>",
        "id": 224170998,
        "sender_full_name": "lcnr",
        "timestamp": 1611748897
    },
    {
        "content": "<p><del>This is probably important enough that it can just use the empty string as a feature gate. We've been saving that one for a special occasion.</del> Edit: my mistake, we permit empty feature lists.</p>",
        "id": 224411936,
        "sender_full_name": "varkor",
        "timestamp": 1611878344
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"121053\">varkor</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/const_evaluatable.3A.20subexpressions/near/224411936\">said</a>:</p>\n<blockquote>\n<p><del>This is probably important enough that it can just use the empty string as a feature gate. We've been saving that one for a special occasion.</del> Edit: my mistake, we permit empty feature lists.</p>\n</blockquote>\n<p><code>feature(____________)</code> looks like a good enough substitute -- it has the most underscores!</p>",
        "id": 224417576,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1611881377
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/const_evaluatable.3A.20subexpressions/near/224170393\">said</a>:</p>\n<blockquote>\n<p>it could always get its own feature gate</p>\n</blockquote>\n<p>i think that i would pretty always want to keep that feature active so i am not sure if splitting it off is actually worth it</p>",
        "id": 224614149,
        "sender_full_name": "lcnr",
        "timestamp": 1612053930
    },
    {
        "content": "<p>going to leave the decision to <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> ^^, i think i slightly prefer not adding an additional feature gate for this</p>",
        "id": 224614158,
        "sender_full_name": "lcnr",
        "timestamp": 1612053959
    },
    {
        "content": "<p>that was mainly meant to make the decision to add it easier if there were some concerns about always keeping it on. So fine by me to just activate it unconditionally</p>",
        "id": 224704036,
        "sender_full_name": "oli",
        "timestamp": 1612172886
    }
]