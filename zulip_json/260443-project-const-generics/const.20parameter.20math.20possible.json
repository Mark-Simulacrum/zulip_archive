[
    {
        "content": "<p>Is it possible to perform const parameter match inside an asociated function??<br>\nI'm trying to do a compile time allocation of resources and this type of function fails with the <code>use of generic parameter from outer function</code> error.<br>\nExample:</p>\n<div class=\"codehilite\"><pre><span></span><code>pub struct Resource&lt;const N: u32, const A: u32&gt;;\n\nimpl&lt;const N:u32, const A: u32&gt; Resource&lt;N, A&gt; {\n    pub fn read(&amp;self) {\n        read_offset( { A + (2 * N) } )\n    }\n}\n</code></pre></div>",
        "id": 225925224,
        "sender_full_name": "noname",
        "timestamp": 1612998084
    },
    {
        "content": "<p>your example seems fine?</p>",
        "id": 225926383,
        "sender_full_name": "lcnr",
        "timestamp": 1612998689
    },
    {
        "content": "<p>ignoring that <code>read_offset</code> does not exist, it compiles as expected?</p>",
        "id": 225926408,
        "sender_full_name": "lcnr",
        "timestamp": 1612998707
    },
    {
        "content": "<p>Ooops, yeah, didn't realise what actually caused the problem was assigning those values to constants for better reading. Apparently that's what breaks it? Is there a fix for that?? Still, thanks for the help</p>",
        "id": 225931979,
        "sender_full_name": "noname",
        "timestamp": 1613001991
    },
    {
        "content": "<p>consts that depend on const generics can easily cause things to throw a fit, that I have noticed.</p>",
        "id": 225935322,
        "sender_full_name": "Jubilee",
        "timestamp": 1613004699
    },
    {
        "content": "<p>free consts cannot depend on generic parameters from outer functions, that's true</p>",
        "id": 225965488,
        "sender_full_name": "lcnr",
        "timestamp": 1613035403
    },
    {
        "content": "<p>so the following causes a compiler error</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">FREE</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 225965558,
        "sender_full_name": "lcnr",
        "timestamp": 1613035443
    },
    {
        "content": "<p>you can use an associated constant instead, so the following works:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">A</span>: <span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>:<span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">A</span>: <span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">N</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">ASSOC</span>: <span class=\"kt\">u32</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">read</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">read_offset</span><span class=\"p\">(</span><span class=\"bp\">Self</span>::<span class=\"n\">ASSOC</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 225966304,
        "sender_full_name": "lcnr",
        "timestamp": 1613035884
    }
]