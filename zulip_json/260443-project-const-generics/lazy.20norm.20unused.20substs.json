[
    {
        "content": "<p>starting to look into the first approach outlined in the <a href=\"https://github.com/rust-lang/project-const-generics/blob/master/meetings/2021.02.16-lazy-norm.md\">meeting</a> and will use this thread to write any thoughts I have about it</p>",
        "id": 228079069,
        "sender_full_name": "lcnr",
        "timestamp": 1614455609
    },
    {
        "content": "<p>as i can't control what i think about, here's my goal if we went with the second solution <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> <a href=\"https://hackmd.io/NZ-VjSzqTImdY67dRRKQtQ\">https://hackmd.io/NZ-VjSzqTImdY67dRRKQtQ</a></p>",
        "id": 228079115,
        "sender_full_name": "lcnr",
        "timestamp": 1614455650
    },
    {
        "content": "<p>so, the goal is to filter params and predicates eagerly</p>",
        "id": 228079166,
        "sender_full_name": "lcnr",
        "timestamp": 1614455756
    },
    {
        "content": "<p>what I don't yet fully know is when we want to do this <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 228079218,
        "sender_full_name": "lcnr",
        "timestamp": 1614455776
    },
    {
        "content": "<p>if we have</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">todo!</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 228079228,
        "sender_full_name": "lcnr",
        "timestamp": 1614455803
    },
    {
        "content": "<p>we want the anon const to only depend on <code>N</code> and not on <code>T</code></p>",
        "id": 228079232,
        "sender_full_name": "lcnr",
        "timestamp": 1614455815
    },
    {
        "content": "<p>but after name resolution <code>N</code> is at index 1</p>",
        "id": 228079251,
        "sender_full_name": "lcnr",
        "timestamp": 1614455835
    },
    {
        "content": "<p>we won't be able to change this after hir building, so we would have to analyse all parent predicates before we built the hir afaict</p>",
        "id": 228079305,
        "sender_full_name": "lcnr",
        "timestamp": 1614455887
    },
    {
        "content": "<p>this feels like such a giant hack to do it during name res/mutating the name res results</p>",
        "id": 228080513,
        "sender_full_name": "lcnr",
        "timestamp": 1614457159
    },
    {
        "content": "<p>er sorry if I'm missing something, but what's the specific issue with <code>N</code> being at index 1? Would it just be that we would have to scan to find the indices that are relevant?</p>",
        "id": 228089464,
        "sender_full_name": "jknodt",
        "timestamp": 1614467576
    },
    {
        "content": "<p>idk</p>",
        "id": 228089745,
        "sender_full_name": "lcnr",
        "timestamp": 1614467984
    },
    {
        "content": "<p>the question is what we do for the substs which are unused though</p>",
        "id": 228089808,
        "sender_full_name": "lcnr",
        "timestamp": 1614468011
    },
    {
        "content": "<p>i don't really have a mental model of how exactly this should work</p>",
        "id": 228089890,
        "sender_full_name": "lcnr",
        "timestamp": 1614468143
    },
    {
        "content": "<p>so <code>N</code> being at index <code>1</code> means that we can't just internally represent this as</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">ASSOC_CT</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">ASSOC_CT</span>::<span class=\"o\">&lt;</span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">todo!</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 228089919,
        "sender_full_name": "lcnr",
        "timestamp": 1614468235
    },
    {
        "content": "<p>but instead something like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">ASSOC_CT</span><span class=\"o\">&lt;</span><span class=\"n\">dont_care</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">ASSOC_CT</span>::<span class=\"o\">&lt;</span><span class=\"n\">dummy_param</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">todo!</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 228089971,
        "sender_full_name": "lcnr",
        "timestamp": 1614468279
    },
    {
        "content": "<p>What level of HIR/MIR is this here? can we not just keep a smallvec of \"roots\" which are indices into the generics which need to be traversed?</p>\n<p>edit: by roots I mean the items named explicitly in the <code>AnonConst</code></p>",
        "id": 228090012,
        "sender_full_name": "jknodt",
        "timestamp": 1614468360
    },
    {
        "content": "<p>we have to do this before the hir is built</p>",
        "id": 228090182,
        "sender_full_name": "lcnr",
        "timestamp": 1614468579
    },
    {
        "content": "<p>I'm still a bit confused, if we're just tracking the indices for a specific <code>AnonConst</code>, if we don't reoder the generics then isn't that fine?</p>",
        "id": 228090499,
        "sender_full_name": "jknodt",
        "timestamp": 1614468913
    },
    {
        "content": "<p>i am not sure what you mean with \"just trakcing the indices\"?</p>",
        "id": 228091414,
        "sender_full_name": "lcnr",
        "timestamp": 1614470070
    },
    {
        "content": "<p>or wait</p>",
        "id": 228091507,
        "sender_full_name": "lcnr",
        "timestamp": 1614470184
    },
    {
        "content": "<p>the actual assignment from <code>Param</code> to index happens far later and is based on <code>fn generics_of</code></p>",
        "id": 228091514,
        "sender_full_name": "lcnr",
        "timestamp": 1614470202
    },
    {
        "content": "<p>so that isn't actually a problem</p>",
        "id": 228091518,
        "sender_full_name": "lcnr",
        "timestamp": 1614470208
    },
    {
        "content": "<p>i am just confused in general</p>",
        "id": 228091543,
        "sender_full_name": "lcnr",
        "timestamp": 1614470283
    },
    {
        "content": "<p>i don't think we have to do this before building the hir? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 228091586,
        "sender_full_name": "lcnr",
        "timestamp": 1614470299
    },
    {
        "content": "<p>we have to do it quite early, but during ast_lowering we don't create any <code>ty::Const</code> yet</p>",
        "id": 228091595,
        "sender_full_name": "lcnr",
        "timestamp": 1614470326
    },
    {
        "content": "<p>ok, that seems a bit better</p>",
        "id": 228091600,
        "sender_full_name": "lcnr",
        "timestamp": 1614470340
    },
    {
        "content": "<p>so i guess what I have to do is the following:</p>",
        "id": 228091616,
        "sender_full_name": "lcnr",
        "timestamp": 1614470352
    },
    {
        "content": "<ul>\n<li>walk the hir of the anon const and collect all explicitly mentioned params</li>\n</ul>",
        "id": 228091625,
        "sender_full_name": "lcnr",
        "timestamp": 1614470388
    },
    {
        "content": "<ul>\n<li>somehow get the parent generics except that they must not mention our anon const yet</li>\n</ul>",
        "id": 228091693,
        "sender_full_name": "lcnr",
        "timestamp": 1614470420
    },
    {
        "content": "<ul>\n<li>compute the minimal reachable subset/transitive closure</li>\n</ul>",
        "id": 228091713,
        "sender_full_name": "lcnr",
        "timestamp": 1614470448
    },
    {
        "content": "<p>In this case, do we also have to consider cyclic types while walking? If we either encounter cyclic types or the original anon const then do we fail out?</p>",
        "id": 228092095,
        "sender_full_name": "jknodt",
        "timestamp": 1614470860
    },
    {
        "content": "<p>no, hir is a tree</p>",
        "id": 228092173,
        "sender_full_name": "lcnr",
        "timestamp": 1614470928
    },
    {
        "content": "<p>so we don't have to worry about loops</p>",
        "id": 228092177,
        "sender_full_name": "lcnr",
        "timestamp": 1614470938
    },
    {
        "content": "<p>ah then they can't mention the original anon const?</p>",
        "id": 228092213,
        "sender_full_name": "jknodt",
        "timestamp": 1614470996
    },
    {
        "content": "<p>no</p>",
        "id": 228092343,
        "sender_full_name": "lcnr",
        "timestamp": 1614471104
    },
    {
        "content": "<p>anon consts can't be cyclic</p>",
        "id": 228092347,
        "sender_full_name": "lcnr",
        "timestamp": 1614471110
    },
    {
        "content": "<p>same as closures and generators</p>",
        "id": 228092392,
        "sender_full_name": "lcnr",
        "timestamp": 1614471126
    },
    {
        "content": "<p>ah ok ok</p>",
        "id": 228092450,
        "sender_full_name": "jknodt",
        "timestamp": 1614471188
    },
    {
        "content": "<p>is it difficult to get the parent generics excluding the anon const?</p>",
        "id": 228092463,
        "sender_full_name": "jknodt",
        "timestamp": 1614471209
    },
    {
        "content": "<p>idk</p>",
        "id": 228092478,
        "sender_full_name": "lcnr",
        "timestamp": 1614471239
    },
    {
        "content": "<p>it's kinda ugly</p>",
        "id": 228092516,
        "sender_full_name": "lcnr",
        "timestamp": 1614471246
    },
    {
        "content": "<p>cause i don't want to reimplement <code>gather_explicit_predicates_of</code></p>",
        "id": 228092532,
        "sender_full_name": "lcnr",
        "timestamp": 1614471260
    },
    {
        "content": "<p>maybe adding <code>ConstKind::Raw</code> which does not try to get the substs for anon consts</p>",
        "id": 228092567,
        "sender_full_name": "lcnr",
        "timestamp": 1614471314
    },
    {
        "content": "<p>and a <code>raw_predicates_of</code> query or something</p>",
        "id": 228092569,
        "sender_full_name": "lcnr",
        "timestamp": 1614471328
    },
    {
        "content": "<p>idk</p>",
        "id": 228092570,
        "sender_full_name": "lcnr",
        "timestamp": 1614471331
    },
    {
        "content": "<p>yea I was just looking at the function and it's quite long and does many things lol</p>",
        "id": 228092679,
        "sender_full_name": "jknodt",
        "timestamp": 1614471442
    },
    {
        "content": "<p>what is not included in <code>gather_explicit_predicates_of</code> that would be needed?</p>",
        "id": 228092849,
        "sender_full_name": "jknodt",
        "timestamp": 1614471704
    },
    {
        "content": "<p><code>gather_explicit_predicates_of</code> returns stuff which can contain our anon const as a <code>ty::ConstKind::Unevaluated</code></p>",
        "id": 228092905,
        "sender_full_name": "lcnr",
        "timestamp": 1614471745
    },
    {
        "content": "<p>for a really cheap solution, can we just call it then filter it out by def id?</p>",
        "id": 228092914,
        "sender_full_name": "jknodt",
        "timestamp": 1614471785
    },
    {
        "content": "<p>and <code>ty::ConstKind::Unevaluated</code> needs to know how many and which substs are used for our cosntant</p>",
        "id": 228092920,
        "sender_full_name": "lcnr",
        "timestamp": 1614471790
    },
    {
        "content": "<p>no, cause even just calling <code>gather_explicit_predicates_of</code> causes a cycle</p>",
        "id": 228092931,
        "sender_full_name": "lcnr",
        "timestamp": 1614471813
    },
    {
        "content": "<p>\"<span aria-label=\"cry\" class=\"emoji emoji-1f622\" role=\"img\" title=\"cry\">:cry:</span>\" indeed</p>",
        "id": 228092973,
        "sender_full_name": "lcnr",
        "timestamp": 1614471847
    },
    {
        "content": "<p>If there are multiple <code>ConstKind::Unevaluated</code>, are we ok gathering predicates with others?</p>",
        "id": 228093079,
        "sender_full_name": "jknodt",
        "timestamp": 1614471966
    },
    {
        "content": "<p>not exactly sure what you mean</p>",
        "id": 228093107,
        "sender_full_name": "lcnr",
        "timestamp": 1614471993
    },
    {
        "content": "<p>I'm just wondering whether we can just omit all <code>ConstKind::Unevaluated</code> <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_typeck/collect.rs.html#2191\">I think from here</a> or we need to include other AnonConsts</p>",
        "id": 228093145,
        "sender_full_name": "jknodt",
        "timestamp": 1614472077
    },
    {
        "content": "<p>these aren't the only ones</p>",
        "id": 228093198,
        "sender_full_name": "lcnr",
        "timestamp": 1614472098
    },
    {
        "content": "<p>any <code>ty::Ty</code> we create in that function</p>",
        "id": 228093207,
        "sender_full_name": "lcnr",
        "timestamp": 1614472128
    },
    {
        "content": "<p>can contain unevaluated anon consts</p>",
        "id": 228093209,
        "sender_full_name": "lcnr",
        "timestamp": 1614472136
    },
    {
        "content": "<p>for example in here: <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_typeck/collect.rs.html#2082\">https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_typeck/collect.rs.html#2082</a></p>",
        "id": 228093227,
        "sender_full_name": "lcnr",
        "timestamp": 1614472165
    },
    {
        "content": "<p>mmm I kind of see, that seems annoying</p>",
        "id": 228093304,
        "sender_full_name": "jknodt",
        "timestamp": 1614472259
    }
]