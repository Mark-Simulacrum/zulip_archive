[
    {
        "content": "<p>We currently emit the following error when encountering a const param outside of an identity expression:</p>\n<div class=\"codehilite\"><pre><span></span><code>error: generic parameters must not be used inside of non-trivial constant values\n --&gt; src/lib.rs:4:17\n  |\n4 |     let x: [u8; N + 1];\n  |                 ^ non-trivial anonymous constants must not depend on the parameter `N`\n  |\n  = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n</code></pre></div>",
        "id": 212737329,
        "sender_full_name": "lcnr",
        "timestamp": 1602184896
    },
    {
        "content": "<p>I am not sure if \"non-trivial constant values\" is the best way to describe this. I have yet only asked <span class=\"user-mention\" data-user-id=\"351972\">@Ethan Brierley</span> directly who expressed at least some confusion about the current wording</p>",
        "id": 212737795,
        "sender_full_name": "lcnr",
        "timestamp": 1602185104
    },
    {
        "content": "<p>(We should also split that error into two separate ones, one for type params and one for const params)</p>",
        "id": 212737883,
        "sender_full_name": "lcnr",
        "timestamp": 1602185151
    },
    {
        "content": "<p>Potential alternatives would be \"const parameters must only be used in identity expressions\"</p>",
        "id": 212737973,
        "sender_full_name": "lcnr",
        "timestamp": 1602185179
    },
    {
        "content": "<p>\"const parameters must not be used as part of a bigger expression\"</p>",
        "id": 212738021,
        "sender_full_name": "lcnr",
        "timestamp": 1602185205
    },
    {
        "content": "<p>do you have any other alternatives here or think that one of the potential alternatives is already good enough?</p>",
        "id": 212738052,
        "sender_full_name": "lcnr",
        "timestamp": 1602185212
    },
    {
        "content": "<p>How does something like this look?</p>\n<div class=\"codehilite\"><pre><span></span><code>error: generic parameters must not be used inside of non-trivial constant values\n --&gt; src/lib.rs:4:17\n  |\n4 |     let x: [u8; N + 1];\n  |                 ^^^^^ new constants can not be constructed by expressions dependent on `N`\n  |                 ^ `N` is a generic parameter so must only be used in identity expressions\n  |\n  |\n  = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n</code></pre></div>",
        "id": 212752040,
        "sender_full_name": "Ethan Brierley",
        "timestamp": 1602192791
    },
    {
        "content": "<p>hmm, do you feel like the term \"non-trivial constant values\" is useful here?</p>",
        "id": 212795546,
        "sender_full_name": "lcnr",
        "timestamp": 1602231659
    },
    {
        "content": "<p>I definitely feel this diagnostic can be improved. I'll give it some thought later.</p>",
        "id": 212806892,
        "sender_full_name": "varkor",
        "timestamp": 1602239053
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/non-trivial.20anonymous.20constants/near/212795546\">said</a>:</p>\n<blockquote>\n<p>hmm, do you feel like the term \"non-trivial constant values\" is useful here?</p>\n</blockquote>\n<p>Probably not. It creates more questions than it answers for me. In future what is trivial is likely to change, making \"non-trivial\" feel rather undefined.</p>\n<p>Also, I don't think of anonymous expressions as values when not made into a variable or something. So \"non-trivial const expressions\" is probably better than \"non-trivial constant values\".</p>",
        "id": 212812416,
        "sender_full_name": "Ethan Brierley",
        "timestamp": 1602242988
    },
    {
        "content": "<blockquote>\n<p>Potential alternatives would be \"const parameters must only be used in identity expressions\"</p>\n</blockquote>\n<p>So my best idea as of now would be something like</p>\n<div class=\"codehilite\"><pre><span></span><code>error: const parameters must only be used as identity expressions in constants\n --&gt; src/lib.rs:4:17\n  |\n4 |     let x: [u8; N + 1];\n  |                 ^^^^^ not an identity expression\n  |\n  |\n  = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n</code></pre></div>",
        "id": 212813561,
        "sender_full_name": "lcnr",
        "timestamp": 1602243722
    },
    {
        "content": "<p>I think \"identity expression\" is jargon too.</p>",
        "id": 212850299,
        "sender_full_name": "varkor",
        "timestamp": 1602262357
    },
    {
        "content": "<p>How about something like:<br>\n<code>const parameters may not be used inside expressions</code>?<br>\nIt's still perhaps a little misleading, because a const parameter <em>is</em> still an expressionâ€¦</p>",
        "id": 212850382,
        "sender_full_name": "varkor",
        "timestamp": 1602262416
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error: generic parameters must not be used inside of const computations\n --&gt; src/lib.rs:4:17\n  |\n4 |     let x: [u8; N + 1];\n  |                 ^^^^^ cannot perform const operation using `N`\n  |\n  = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n</code></pre></div>",
        "id": 212851691,
        "sender_full_name": "Lokathor",
        "timestamp": 1602263105
    },
    {
        "content": "<p>^^^ This one is very nice imo</p>",
        "id": 212851875,
        "sender_full_name": "Ethan Brierley",
        "timestamp": 1602263204
    },
    {
        "content": "<p>Yeah, that works a lot better, I think.</p>",
        "id": 212861266,
        "sender_full_name": "varkor",
        "timestamp": 1602268602
    },
    {
        "content": "<p>Maybe without the <code>of</code>, just to be a bit more concise.</p>",
        "id": 212861312,
        "sender_full_name": "varkor",
        "timestamp": 1602268638
    },
    {
        "content": "<p>hmm, I personally don't really like \"const computation\" here <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> I am however not really the target audience for error messages like this so if they are clearer to people who aren't yet as involved we should just go with that wording.</p>",
        "id": 212879494,
        "sender_full_name": "lcnr",
        "timestamp": 1602280213
    },
    {
        "content": "<p>I think my main issue is that I don't really see <code>N as u128</code> or <code>std::mem::size_of::&lt;T&gt;()</code> as a computations so that name seems inappropriate to me in these cases</p>",
        "id": 212879724,
        "sender_full_name": "lcnr",
        "timestamp": 1602280387
    },
    {
        "content": "<p>A slight adaptation: <code>generic parameters may not be involved in const computations</code>.<br>\nI agree \"const computation\" isn't perfect, but I can't currently think of a better word.</p>",
        "id": 212879751,
        "sender_full_name": "varkor",
        "timestamp": 1602280411
    },
    {
        "content": "<p>is 'const evaluation' accurate? that seems more well known than 'computation'</p>",
        "id": 212879814,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602280458
    },
    {
        "content": "<p>I'd also like to reword that help text to something like:<br>\n<code>generic consts may only be used as standalone arguments `N` </code></p>",
        "id": 212879853,
        "sender_full_name": "varkor",
        "timestamp": 1602280511
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/non-trivial.20anonymous.20constants/near/212879814\">said</a>:</p>\n<blockquote>\n<p>is 'const evaluation' accurate? that seems more well known than 'computation'</p>\n</blockquote>\n<p>That could also work.</p>",
        "id": 212879887,
        "sender_full_name": "varkor",
        "timestamp": 1602280552
    },
    {
        "content": "<p>I think const evaluation seems more correct, so <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span> on that</p>",
        "id": 212880140,
        "sender_full_name": "lcnr",
        "timestamp": 1602280753
    },
    {
        "content": "<p>As everything except <code>N</code> itself results in <code>ConstKind::Unevaluated</code> which has to be evaluated to be useful</p>",
        "id": 212880258,
        "sender_full_name": "lcnr",
        "timestamp": 1602280828
    },
    {
        "content": "<p>This is the last issue marked as blocking on GH that doesn't have an open PR yet, as far as I see.</p>",
        "id": 212880268,
        "sender_full_name": "varkor",
        "timestamp": 1602280836
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/non-trivial.20anonymous.20constants/near/212880258\">said</a>:</p>\n<blockquote>\n<p>As everything except <code>N</code> itself results in <code>ConstKind::Unevaluated</code> which has to be evaluated to be useful</p>\n</blockquote>\n<p>One thing to be aware of is that the terminology we use is different to the terminology users are familiar with (though sometimes compiler jargon leaks out into diagnostics, which we need to be careful about). I think \"evaluation\" is clear though.</p>",
        "id": 212880312,
        "sender_full_name": "varkor",
        "timestamp": 1602280888
    },
    {
        "content": "<p>I think there is merit in looking at the implementation when thinking about errors but I do agree that we - and probably especially I - have to be careful to not leak internal jargon</p>",
        "id": 212880801,
        "sender_full_name": "lcnr",
        "timestamp": 1602281333
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"121053\">varkor</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/non-trivial.20anonymous.20constants/near/212880268\">said</a>:</p>\n<blockquote>\n<p>This is the last issue marked as blocking on GH that doesn't have an open PR yet, as far as I see.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"351972\">@Ethan Brierley</span> <span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span>  does using  \"const evaluations\" also look good to you?</p>\n<p>In this case I would be satisfied and would gladly mentor anyone interested in implementing this</p>",
        "id": 212881329,
        "sender_full_name": "lcnr",
        "timestamp": 1602281848
    },
    {
        "content": "<p>It's fine. Even if it weren't, help text isn't stable, so we could fix it up later if we had to. We should just take what we have and move forward.</p>",
        "id": 212881429,
        "sender_full_name": "Lokathor",
        "timestamp": 1602281935
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error: generic parameters must not be used inside const evaluations\n --&gt; src/lib.rs:4:17\n  |\n4 |     let x: [u8; N + 1];\n  |                 ^^^^^ cannot perform const operation using `N`\n  |\n  = help: const parameters may only be used as standalone arguments `N`\n</code></pre></div>",
        "id": 212881434,
        "sender_full_name": "lcnr",
        "timestamp": 1602281942
    },
    {
        "content": "<p>I'd get rid of <code>of</code>, and maybe the <code>{ N }</code>, since that syntax is rarely necessary (except with paths)</p>",
        "id": 212881483,
        "sender_full_name": "varkor",
        "timestamp": 1602281994
    },
    {
        "content": "<p>We should instead make sure the diagnostics for writing a path without <code>{ }</code> is good.</p>",
        "id": 212881553,
        "sender_full_name": "varkor",
        "timestamp": 1602282018
    },
    {
        "content": "<p>Let me check what it currently looks like.</p>",
        "id": 212881563,
        "sender_full_name": "varkor",
        "timestamp": 1602282031
    },
    {
        "content": "<p>Really not good: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=3161a698d4b5aba24beb842c5c064ec4\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=3161a698d4b5aba24beb842c5c064ec4</a></p>",
        "id": 212881680,
        "sender_full_name": "varkor",
        "timestamp": 1602282126
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error[E0573]: expected type, found constant `m::N`\n --&gt; src/main.rs:9:17\n  |\n9 |     let _ = S::&lt;m::N&gt;;\n  |                 ^^^^ not a type\n\nerror[E0107]: wrong number of const arguments: expected 1, found 0\n --&gt; src/main.rs:9:13\n  |\n9 |     let _ = S::&lt;m::N&gt;;\n  |             ^^^^^^^^^ expected 1 const argument\n\nerror[E0107]: wrong number of type arguments: expected 0, found 1\n --&gt; src/main.rs:9:17\n  |\n9 |     let _ = S::&lt;m::N&gt;;\n  |                 ^^^^ unexpected type argument\n  |\nhelp: If this generic argument was intended as a const parameter, try surrounding it with braces:\n  |\n9 |     let _ = S::&lt;{ m::N }&gt;;\n  |                 ^      ^\n</code></pre></div>",
        "id": 212881698,
        "sender_full_name": "varkor",
        "timestamp": 1602282142
    },
    {
        "content": "<p>We do at least provide a suggestion, though.</p>",
        "id": 212881714,
        "sender_full_name": "varkor",
        "timestamp": 1602282153
    },
    {
        "content": "<p>I'd love for this to just work.</p>",
        "id": 212881737,
        "sender_full_name": "varkor",
        "timestamp": 1602282172
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/non-trivial.20anonymous.20constants/near/212881434\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code>error: generic parameters must not be used inside const evaluations\n --&gt; src/lib.rs:4:17\n  |\n4 |     let x: [u8; N + 1];\n  |                 ^^^^^ cannot perform const operation using `N`\n  |\n  = help: const parameters may only be used as standalone arguments `N`\n</code></pre></div>\n\n\n</blockquote>\n<p>The final change I'd make is \"must not\" -&gt; \"may not\", which sounds a little less forceful. But otherwise, I'm happy with that.</p>",
        "id": 212881800,
        "sender_full_name": "varkor",
        "timestamp": 1602282234
    },
    {
        "content": "<p>We can mark it as an E-easy issue or something.</p>",
        "id": 212881857,
        "sender_full_name": "varkor",
        "timestamp": 1602282252
    },
    {
        "content": "<p>except if you don't follow directions, the code doesn't compile. so it's a \"must\".</p>",
        "id": 212882009,
        "sender_full_name": "Lokathor",
        "timestamp": 1602282365
    },
    {
        "content": "<p>well, you can read 'may not X' as 'X is not allowed'</p>",
        "id": 212882180,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602282485
    },
    {
        "content": "<p>You're allowed to do it; the compiler just isn't going to do what you want if you do :P</p>",
        "id": 212882185,
        "sender_full_name": "varkor",
        "timestamp": 1602282490
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"121053\">varkor</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/non-trivial.20anonymous.20constants/near/212881737\">said</a>:</p>\n<blockquote>\n<p>I'd love for this to just work.</p>\n</blockquote>\n<p>There should probably be a dedicated issue for this, though it's essentially <a href=\"https://github.com/rust-lang/rust/issues/66615\">https://github.com/rust-lang/rust/issues/66615</a></p>",
        "id": 212882257,
        "sender_full_name": "varkor",
        "timestamp": 1602282553
    },
    {
        "content": "<p>(Opened <a href=\"https://github.com/rust-lang/rust/issues/77773\">https://github.com/rust-lang/rust/issues/77773</a>)</p>",
        "id": 212882990,
        "sender_full_name": "varkor",
        "timestamp": 1602283158
    },
    {
        "content": "<p>I would prefer <code>in const evaluation</code> or <code>in constant evaluation</code> over <code>inside const evaluations</code>. Otherwise <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 212886038,
        "sender_full_name": "jplatte",
        "timestamp": 1602286168
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/non-trivial.20anonymous.20constants/near/212881329\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"121053\">varkor</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/non-trivial.20anonymous.20constants/near/212880268\">said</a>:</p>\n<blockquote>\n<p>This is the last issue marked as blocking on GH that doesn't have an open PR yet, as far as I see.</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"351972\">Ethan Brierley</span> <span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span>  does using  \"const evaluations\" also look good to you?</p>\n<p>In this case I would be satisfied and would gladly mentor anyone interested in implementing this</p>\n</blockquote>\n<p>I have never made changes to rustc before and would love to work on this.</p>",
        "id": 212903925,
        "sender_full_name": "Ethan Brierley",
        "timestamp": 1602315763
    },
    {
        "content": "<p>I will do some searching through the code later today to try to find the relevant code.</p>",
        "id": 212903976,
        "sender_full_name": "Ethan Brierley",
        "timestamp": 1602315863
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"351972\">@Ethan Brierley</span> great! Feel free to ask me if you ever get stuck somewhere <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 212905129,
        "sender_full_name": "lcnr",
        "timestamp": 1602318058
    },
    {
        "content": "<p>Thank you</p>",
        "id": 212906526,
        "sender_full_name": "Ethan Brierley",
        "timestamp": 1602320515
    },
    {
        "content": "<p>resolved with <a href=\"https://github.com/rust-lang/rust/issues/77825\">#77825</a> by <span class=\"user-mention silent\" data-user-id=\"351972\">Ethan Brierley</span> <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 213010637,
        "sender_full_name": "lcnr",
        "timestamp": 1602491440
    },
    {
        "content": "<p>Sorry, I realised when I saw more examples that I think there were still some readability issues with what we'd suggested before. I think this error is going to be quite common, so we need to make sure it's as clear as possible. Hope it's okay for us to iterate a little more!</p>",
        "id": 213028959,
        "sender_full_name": "varkor",
        "timestamp": 1602504218
    },
    {
        "content": "<p>What are everyone's thoughts on <a href=\"https://github.com/rust-lang/rust/pull/77825/files#r503246680\">https://github.com/rust-lang/rust/pull/77825/files#r503246680</a> ?</p>",
        "id": 213031327,
        "sender_full_name": "Ethan Brierley",
        "timestamp": 1602505751
    },
    {
        "content": "<p>The comment in the link above was:</p>\n<blockquote>\n<p>I want to further suggest switching from \"evaluation\" to \"operations\", which I think is slightly less jargon-y, and also consistent with the span_label below.</p>\n</blockquote>",
        "id": 213031505,
        "sender_full_name": "varkor",
        "timestamp": 1602505862
    },
    {
        "content": "<p>I do agree that it may be confusable with \"operators\", so it's still not perfect.</p>",
        "id": 213031548,
        "sender_full_name": "varkor",
        "timestamp": 1602505895
    },
    {
        "content": "<p>I just realised that Rust programmers in general probably aren't used to thinking of the length of an array as a \"const evaluation\".</p>",
        "id": 213031643,
        "sender_full_name": "varkor",
        "timestamp": 1602505947
    },
    {
        "content": "<p>I actually think \"const expression\" might be clear enough.</p>",
        "id": 213031739,
        "sender_full_name": "varkor",
        "timestamp": 1602506012
    },
    {
        "content": "<p>(The \"nontrivial\" part would be implicit.)</p>",
        "id": 213031756,
        "sender_full_name": "varkor",
        "timestamp": 1602506028
    },
    {
        "content": "<p>I don't think expression is clear enough with, the thing we allow, <code>N</code> on its own being also a kind of expression. In other words I don't think the nontrivial part can become implicit.</p>",
        "id": 213032176,
        "sender_full_name": "Ethan Brierley",
        "timestamp": 1602506269
    },
    {
        "content": "<p>\"generic parameters may not be used as part of a larger const expression\"</p>",
        "id": 213032458,
        "sender_full_name": "varkor",
        "timestamp": 1602506413
    },
    {
        "content": "<p>It's a little long.</p>",
        "id": 213032474,
        "sender_full_name": "varkor",
        "timestamp": 1602506423
    }
]