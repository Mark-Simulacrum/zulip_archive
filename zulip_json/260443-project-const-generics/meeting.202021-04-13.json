[
    {
        "content": "<p>meeting in less than 40 minutes</p>",
        "id": 234331420,
        "sender_full_name": "lcnr",
        "timestamp": 1618322891
    },
    {
        "content": "<p>my idea is to continue where we left off 2 weeks ago and talk a bit more about how we want generic constants to behave</p>",
        "id": 234331783,
        "sender_full_name": "lcnr",
        "timestamp": 1618323008
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"3805\">@project-const-generics</span> meeting's officially starting now</p>",
        "id": 234338425,
        "sender_full_name": "lcnr",
        "timestamp": 1618325135
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 234338472,
        "sender_full_name": "lcnr",
        "timestamp": 1618325155
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> r u here? i think we probably want to revisit that question: <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-03-30/near/232446238\">https://rust-lang.zulipchat.com/#narrow/stream/260443-project-const-generics/topic/meeting.202021-03-30/near/232446238</a></p>",
        "id": 234338676,
        "sender_full_name": "lcnr",
        "timestamp": 1618325228
    },
    {
        "content": "<p>I'm here</p>",
        "id": 234338780,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618325258
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> say more :)</p>",
        "id": 234339125,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618325373
    },
    {
        "content": "<p>let me re-read, I guess</p>",
        "id": 234339135,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618325376
    },
    {
        "content": "<p>k, I caught up</p>",
        "id": 234340444,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618325772
    },
    {
        "content": "<p>were you proposing <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> to talk about the notion of equality first and foremost?</p>",
        "id": 234340474,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618325780
    },
    {
        "content": "<p>that would be good i think</p>",
        "id": 234340561,
        "sender_full_name": "lcnr",
        "timestamp": 1618325811
    },
    {
        "content": "<p>I'm collecting my thoughts here</p>",
        "id": 234340726,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618325862
    },
    {
        "content": "<p>still not completely sure what's the best way to talk about all of this '^^</p>",
        "id": 234340740,
        "sender_full_name": "lcnr",
        "timestamp": 1618325867
    },
    {
        "content": "<p>yeah</p>",
        "id": 234340758,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618325873
    },
    {
        "content": "<p>before we dive in there, I'm trying to cache back in whatever it was we talked about the other day in that zoom call</p>",
        "id": 234340847,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618325892
    },
    {
        "content": "<p>ah yes, type checking</p>",
        "id": 234340877,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618325899
    },
    {
        "content": "<p>and the need to type check again after substitution</p>",
        "id": 234340892,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618325907
    },
    {
        "content": "<p>did you look or think about that anymore at all?</p>",
        "id": 234340929,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618325922
    },
    {
        "content": "<p>i did post a short message in <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/run.20mir-typeck.20on.20constants.20before.20evaluating.20them/near/232626558\">https://rust-lang.zulipchat.com/#narrow/stream/146212-t-compiler.2Fconst-eval/topic/run.20mir-typeck.20on.20constants.20before.20evaluating.20them/near/232626558</a></p>",
        "id": 234341021,
        "sender_full_name": "lcnr",
        "timestamp": 1618325949
    },
    {
        "content": "<p>because i remembered that we already have to filter the where clauses available to anon consts inside of where clauses</p>",
        "id": 234341445,
        "sender_full_name": "lcnr",
        "timestamp": 1618326029
    },
    {
        "content": "<p>which i didn't mention during that meeting</p>",
        "id": 234341500,
        "sender_full_name": "lcnr",
        "timestamp": 1618326036
    },
    {
        "content": "<p>hmm</p>",
        "id": 234342703,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618326232
    },
    {
        "content": "<p>I'm not sure that this changes anything too fundamental, right?</p>",
        "id": 234342741,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618326239
    },
    {
        "content": "<p>it doesn't ^^</p>",
        "id": 234342863,
        "sender_full_name": "lcnr",
        "timestamp": 1618326257
    },
    {
        "content": "<p>it potentially makes retypechecking substituted consts a bit faster, because we only have to check their caller bounds</p>",
        "id": 234342957,
        "sender_full_name": "lcnr",
        "timestamp": 1618326280
    },
    {
        "content": "<p>but it doesn't solve the general problem of consts in where clauses not necessarily being wf after substitution</p>",
        "id": 234343183,
        "sender_full_name": "lcnr",
        "timestamp": 1618326329
    },
    {
        "content": "<p>ok</p>",
        "id": 234343385,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618326370
    },
    {
        "content": "<p>so</p>",
        "id": 234343391,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618326371
    },
    {
        "content": "<p>as for equality</p>",
        "id": 234343399,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618326373
    },
    {
        "content": "<p>I definitely would prefer to start with something fairly conservative</p>",
        "id": 234343449,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618326384
    },
    {
        "content": "<p>i think that typechecking consts again before evaluating them is probably the best way forward here for now</p>",
        "id": 234343471,
        "sender_full_name": "lcnr",
        "timestamp": 1618326391
    },
    {
        "content": "<p>although I think that people are definitely going to be surprised when <code>N+1</code> and <code>1+N</code> are not considered equivalent</p>",
        "id": 234343505,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618326397
    },
    {
        "content": "<p>this is of course a well-studied problem</p>",
        "id": 234343526,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618326401
    },
    {
        "content": "<p>there are a standard set of transformations that are often used</p>",
        "id": 234343560,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618326408
    },
    {
        "content": "<p>I'm trying to remember now, I have to go check my compiler text books</p>",
        "id": 234343605,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618326419
    },
    {
        "content": "<p>I believe there is a table in one of them for using within CSE</p>",
        "id": 234343633,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618326425
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-04-13/near/234343471\">said</a>:</p>\n<blockquote>\n<p>i think that typechecking consts again before evaluating them is probably the best way forward here for now</p>\n</blockquote>\n<p>I'm in favor of this for the time being</p>",
        "id": 234343747,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618326449
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-04-13/near/234343505\">said</a>:</p>\n<blockquote>\n<p>although I think that people are definitely going to be surprised when <code>N+1</code> and <code>1+N</code> are not considered equivalent</p>\n</blockquote>\n<p>my experience with this up until now was that having <code>N+1</code> and <code>1+N</code> not being equal isn't too bad</p>",
        "id": 234344128,
        "sender_full_name": "lcnr",
        "timestamp": 1618326535
    },
    {
        "content": "<p>the general problem with these canonicalization strategies concerns overflow and the like</p>",
        "id": 234344262,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618326562
    },
    {
        "content": "<p>I was just checking; Muchnick has a table</p>",
        "id": 234344316,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618326575
    },
    {
        "content": "<p>it seems to me to be irrelevant :)</p>",
        "id": 234344335,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618326578
    },
    {
        "content": "<p>to clarify:</p>",
        "id": 234344377,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618326589
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-04-13/near/234344128\">said</a>:</p>\n<blockquote>\n<p>my experience with this up until now was that having <code>N+1</code> and <code>1+N</code> not being equal isn't too bad</p>\n</blockquote>\n<p>which doesn't really mean too much, cause the people i interact with are not really representative</p>",
        "id": 234344419,
        "sender_full_name": "lcnr",
        "timestamp": 1618326600
    },
    {
        "content": "<p>I feel like we can start with a \"canon\" function is basically an identify function</p>",
        "id": 234344479,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618326605
    },
    {
        "content": "<p>however</p>",
        "id": 234344530,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618326617
    },
    {
        "content": "<p>hmm</p>",
        "id": 234344736,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618326666
    },
    {
        "content": "<p>I'd like to step ever so slightly back</p>",
        "id": 234344768,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618326673
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-04-13/near/234344479\">said</a>:</p>\n<blockquote>\n<p>I feel like we can start with a \"canon\" function is basically an identify function</p>\n</blockquote>\n<p>depending on whether it's relevant to what you want to go back to, can you elaborate a bit here?</p>",
        "id": 234345073,
        "sender_full_name": "lcnr",
        "timestamp": 1618326765
    },
    {
        "content": "<p>well</p>",
        "id": 234345593,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618326869
    },
    {
        "content": "<p>if I understood the previous topic correctly</p>",
        "id": 234345624,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618326879
    },
    {
        "content": "<p>we were saying that there needs to be some kind of equality comparison of the expression tree itself</p>",
        "id": 234345653,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618326892
    },
    {
        "content": "<p>perhaps with some \"canonicalization\" beforehand</p>",
        "id": 234345689,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618326902
    },
    {
        "content": "<p>for example, evaluating constant subtrees</p>",
        "id": 234345708,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618326908
    },
    {
        "content": "<p>or reordering <code>+</code> operands</p>",
        "id": 234345739,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618326915
    },
    {
        "content": "<p>what I am saying is that the details of what we canonicalize don't matter</p>",
        "id": 234345805,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618326936
    },
    {
        "content": "<p>the basic model remains the same either way</p>",
        "id": 234345825,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618326942
    },
    {
        "content": "<p>you apply <em>some</em> function to the HIR (I guess)</p>",
        "id": 234345858,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618326956
    },
    {
        "content": "<p>you get back a HIR</p>",
        "id": 234345893,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618326963
    },
    {
        "content": "<p>possibly with embedded val trees</p>",
        "id": 234345945,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618326974
    },
    {
        "content": "<p>HIR is maybe not right -- maybe we have some other representation for the 'expression tree' of a constant?</p>",
        "id": 234345986,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618326990
    },
    {
        "content": "<p>or maybe we even use MIR, god help us?</p>",
        "id": 234346000,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618326996
    },
    {
        "content": "<p>rn we use a small subset of mir</p>",
        "id": 234346087,
        "sender_full_name": "lcnr",
        "timestamp": 1618327025
    },
    {
        "content": "<p>i think we previously quickly touched on using thir instead</p>",
        "id": 234346152,
        "sender_full_name": "lcnr",
        "timestamp": 1618327048
    },
    {
        "content": "<p>so rn it's: MIR -&gt; <code>AbstractConst</code></p>",
        "id": 234346211,
        "sender_full_name": "lcnr",
        "timestamp": 1618327073
    },
    {
        "content": "<p>One problem I can foresee with canonicalisation is that, when we introduce custom types, canonicalisation will only be performed for some types (i.e. the primitive ones), because equality may be overloaded in such a way as to make it disobey commutativity, etc.</p>",
        "id": 234346221,
        "sender_full_name": "varkor",
        "timestamp": 1618327075
    },
    {
        "content": "<p>Which may be confusing to users.</p>",
        "id": 234346332,
        "sender_full_name": "varkor",
        "timestamp": 1618327097
    },
    {
        "content": "<p>would <code>unsafe trait Commutative: std::ops::Add {}</code> be a horrible idea</p>",
        "id": 234346418,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1618327127
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"121053\">varkor</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-04-13/near/234346221\">said</a>:</p>\n<blockquote>\n<p>One problem I can foresee with canonicalisation is that, when we introduce custom types, canonicalisation will only be performed for some types (i.e. the primitive ones), because equality may be overloaded in such a way as to make it disobey commutativity, etc.</p>\n</blockquote>\n<p>so this is an important question</p>",
        "id": 234346530,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618327173
    },
    {
        "content": "<p>I used to be a strong advocate for \"one notion of equality\" only</p>",
        "id": 234346556,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618327184
    },
    {
        "content": "<p>but I've kind of come around to \"syntactic equality\" vs \"runtime equality\" -- probably need better names</p>",
        "id": 234346588,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618327196
    },
    {
        "content": "<p>this applies also pattern matching</p>",
        "id": 234346669,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618327211
    },
    {
        "content": "<p>part of it is that I just want to be done with this discussion and in the end I don't think it's THAT important :P</p>",
        "id": 234346715,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618327226
    },
    {
        "content": "<p>but it also seems useful to be able to (e.g.) match on a floating point value and put <code>NaN</code> as the pattern...</p>",
        "id": 234346748,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618327240
    },
    {
        "content": "<p>point being though that I <em>definitely</em> think that const generics equality cannot be the same as <code>Eq</code> trait</p>",
        "id": 234346907,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618327288
    },
    {
        "content": "<p>we need to be able to do unification</p>",
        "id": 234346918,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618327294
    },
    {
        "content": "<p>and that's going to be a stricter notion of equality</p>",
        "id": 234346936,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618327301
    },
    {
        "content": "<p>it plays into this</p>",
        "id": 234346939,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618327303
    },
    {
        "content": "<p>now that I think about it</p>",
        "id": 234346947,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618327306
    },
    {
        "content": "<p>and I guess once we have const generics having a notion of equality, it seems potentially reasonable to use the same notion for pattern matching on a constant? I'm debating if I believe that :)</p>",
        "id": 234347094,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618327348
    },
    {
        "content": "<p>those seem somewhat fundamentally different, since const generics is compilation time</p>",
        "id": 234347152,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618327369
    },
    {
        "content": "<p>i still haven't read into this again</p>",
        "id": 234347162,
        "sender_full_name": "lcnr",
        "timestamp": 1618327373
    },
    {
        "content": "<p>but</p>",
        "id": 234347167,
        "sender_full_name": "lcnr",
        "timestamp": 1618327376
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-04-13/near/234347094\">said</a>:</p>\n<blockquote>\n<p>and I guess once we have const generics having a notion of equality, it seems potentially reasonable to use the same notion for pattern matching on a constant? I'm debating if I believe that :)</p>\n</blockquote>\n<p>That's an interesting suggestion.</p>",
        "id": 234347236,
        "sender_full_name": "varkor",
        "timestamp": 1618327393
    },
    {
        "content": "<p>pattern matching sometimes reasons about values instead of types</p>",
        "id": 234347238,
        "sender_full_name": "lcnr",
        "timestamp": 1618327394
    },
    {
        "content": "<p>so <code>None::&lt;NonStructuralMatch&gt;</code> is still usable for patterns</p>",
        "id": 234347313,
        "sender_full_name": "lcnr",
        "timestamp": 1618327419
    },
    {
        "content": "<p>yes</p>",
        "id": 234347439,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618327453
    },
    {
        "content": "<p>i personally think that - at least partially - splitting \"structural match for patterns\" and \"const generics equality\" is needed/a good idea</p>",
        "id": 234347503,
        "sender_full_name": "lcnr",
        "timestamp": 1618327472
    },
    {
        "content": "<p>pattern matching a (potentially unary) enum variant is definitely distinct from <code>==</code></p>",
        "id": 234347509,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618327473
    },
    {
        "content": "<p>which is probably a better argument than the one I was making</p>",
        "id": 234347532,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618327480
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-04-13/near/234347503\">said</a>:</p>\n<blockquote>\n<p>i personally think that - at least partially - splitting \"structural match for patterns\" and \"const generics equality\" is needed/a good idea</p>\n</blockquote>\n<p>I suppose they will be split, but related-- e.g., structural match for patterns will still evaluate arithmetic expressions fully</p>",
        "id": 234347642,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618327521
    },
    {
        "content": "<p>(well, there is also the question of how to handle monomorphization and pattern matching on constants)</p>",
        "id": 234347731,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618327554
    },
    {
        "content": "<p>If <code>None::&lt;NonStructuralMatch&gt;</code>is secretly viewed as a variant type, then the <code>NonStructuralMatch</code> wouldn't affect <code>None</code>, making it type-based again.</p>",
        "id": 234347798,
        "sender_full_name": "varkor",
        "timestamp": 1618327565
    },
    {
        "content": "<p>I view it as a distinct form of pattern</p>",
        "id": 234348035,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618327645
    },
    {
        "content": "<p>Perhaps, yes.</p>",
        "id": 234348056,
        "sender_full_name": "varkor",
        "timestamp": 1618327654
    },
    {
        "content": "<p>there are <em>enum variant patterns</em> and <em>constant patterns</em></p>",
        "id": 234348063,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618327657
    },
    {
        "content": "<p>enum variant patterns test what variant the enum has (and match the data within)</p>",
        "id": 234348121,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618327678
    },
    {
        "content": "<p>the behavior of constant patterns is less clear :)</p>",
        "id": 234348262,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618327718
    },
    {
        "content": "<p>anyway, ok, I think this is a tangent</p>",
        "id": 234348276,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618327723
    },
    {
        "content": "<p>So... if you have a constant in a pattern match, whose value is an enum variant, this should be matched differently to inlining the variant?</p>",
        "id": 234348283,
        "sender_full_name": "varkor",
        "timestamp": 1618327728
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=a9ce0650447a1faf39ea12ad2e919a22\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=a9ce0650447a1faf39ea12ad2e919a22</a></p>",
        "id": 234348312,
        "sender_full_name": "lcnr",
        "timestamp": 1618327739
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"121053\">varkor</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-04-13/near/234348283\">said</a>:</p>\n<blockquote>\n<p>So... if you have a constant in a pattern match, whose value is an enum variant, this should be matched differently to inlining the variant?</p>\n</blockquote>\n<p>under the model I just described, potentially yes</p>",
        "id": 234348342,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618327748
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-04-13/near/234348276\">said</a>:</p>\n<blockquote>\n<p>anyway, ok, I think this is a tangent</p>\n</blockquote>\n<p>Yes, this is more about the design, rather than implementation.</p>",
        "id": 234348348,
        "sender_full_name": "varkor",
        "timestamp": 1618327749
    },
    {
        "content": "<p>it depends on what semantics we opted for with matching constant patterns</p>",
        "id": 234348472,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618327794
    },
    {
        "content": "<p>if it is was compiled to <code>==</code>...</p>",
        "id": 234348484,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618327800
    },
    {
        "content": "<p>...then it might well be different</p>",
        "id": 234348525,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618327804
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-04-13/near/234348312\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=a9ce0650447a1faf39ea12ad2e919a22\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=a9ce0650447a1faf39ea12ad2e919a22</a></p>\n</blockquote>\n<p>yeah, that's...unfortunate</p>",
        "id": 234348642,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618327837
    },
    {
        "content": "<p>well, maybe not, but it's certainly relevant :)</p>",
        "id": 234348661,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618327845
    },
    {
        "content": "<p>I tried to future-proof here to allow for more degrees of freedom but didn't really get it right</p>",
        "id": 234348708,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618327866
    },
    {
        "content": "<p>should have maybe said something instead of only posting that link '^^</p>",
        "id": 234349093,
        "sender_full_name": "lcnr",
        "timestamp": 1618327996
    },
    {
        "content": "<p><em>anyway</em></p>",
        "id": 234349197,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618328037
    },
    {
        "content": "<p>is this pressing, <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> ?</p>",
        "id": 234349301,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618328056
    },
    {
        "content": "<p>what is the overall status of things?</p>",
        "id": 234349318,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618328059
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-04-13/near/234348063\">said</a>:</p>\n<blockquote>\n<p>there are <em>enum variant patterns</em> and <em>constant patterns</em></p>\n</blockquote>\n<p>my concern is that this distinction isn't as clear as i would ideally want it to be</p>",
        "id": 234349330,
        "sender_full_name": "lcnr",
        "timestamp": 1618328066
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-04-13/near/234349301\">said</a>:</p>\n<blockquote>\n<p>is this pressing, <span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> ?</p>\n</blockquote>\n<p>no</p>",
        "id": 234349341,
        "sender_full_name": "lcnr",
        "timestamp": 1618328071
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-04-13/near/234349318\">said</a>:</p>\n<blockquote>\n<p>what is the overall status of things?</p>\n</blockquote>\n<p>i am not really doing much rust rn</p>",
        "id": 234349444,
        "sender_full_name": "lcnr",
        "timestamp": 1618328112
    },
    {
        "content": "<p>so there isn't a lot of progress on generic const expressions afaik</p>",
        "id": 234349491,
        "sender_full_name": "lcnr",
        "timestamp": 1618328133
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-04-13/near/234349330\">said</a>:</p>\n<blockquote>\n<p>my concern is that this distinction isn't as clear as i would ideally want it to be</p>\n</blockquote>\n<p>yes. to be clear, I am coming around to make the semantics equivalent, though I think there are some challenges</p>",
        "id": 234349612,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618328172
    },
    {
        "content": "<p>this does imply that <code>a == C</code> and <code>match a { C =&gt; .. }</code> are not equivalent but...</p>",
        "id": 234349664,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618328188
    },
    {
        "content": "<p>I think that's probably acceptable.</p>",
        "id": 234349779,
        "sender_full_name": "varkor",
        "timestamp": 1618328233
    },
    {
        "content": "<p>as I said, I'm coming around :)</p>",
        "id": 234350008,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618328307
    },
    {
        "content": "<p>of course if always means <code>match a { x if x == C =&gt; ... }</code> and <code>match a { C =&gt; ...</code> are not equivalent</p>",
        "id": 234350118,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618328350
    },
    {
        "content": "<p>but at the end of the day it seems like there isn't a sol'n that matches all the expectations at once</p>",
        "id": 234350160,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618328364
    },
    {
        "content": "<p>plus I think anyone whose <code>==</code> is not equivalent to <code>derive(Eq)</code> is ultimately asking for trouble :)</p>",
        "id": 234350246,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618328403
    },
    {
        "content": "<p>Yes, I think it's simpler to think of <code>==</code> as an equivalence relation (ideally, but the laws aren't actually enforced) that does not necessarily match true equality, which is given by structural equality.</p>",
        "id": 234350539,
        "sender_full_name": "varkor",
        "timestamp": 1618328512
    },
    {
        "content": "<p>right, and then const generics equality is a subset of structural equality</p>",
        "id": 234350630,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618328535
    },
    {
        "content": "<p>basically \"structural equality we can see statically\"</p>",
        "id": 234350668,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618328550
    },
    {
        "content": "<p>I think I agree with this</p>",
        "id": 234350738,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618328579
    },
    {
        "content": "<p>plus it makes examples like the one <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> gave non-problematic</p>",
        "id": 234350758,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618328591
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-04-13/near/234350630\">said</a>:</p>\n<blockquote>\n<p>right, and then const generics equality is a subset of structural equality</p>\n</blockquote>\n<p><del>(As long as users aren't doing nasty things, like irreflexive <code>==</code>. But then they're asking for strange behaviour.)</del></p>",
        "id": 234350768,
        "sender_full_name": "varkor",
        "timestamp": 1618328595
    },
    {
        "content": "<p>the main concern is that if you have associated constants or similar things in patterns, you are stuck</p>",
        "id": 234350785,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618328606
    },
    {
        "content": "<p>but you can be conservative and handle those at monomorphization time</p>",
        "id": 234350806,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618328615
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"121053\">varkor</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-04-13/near/234350768\">said</a>:</p>\n<blockquote>\n<p>(As long as users aren't doing nasty things, like irreflexive <code>==</code>. But then they're asking for strange behaviour.)</p>\n</blockquote>\n<p>wait, this confuses me. I think of <code>==</code> as divorced from structural equality</p>",
        "id": 234350856,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618328640
    },
    {
        "content": "<p>sort of \"ideally related but not necessarily\"</p>",
        "id": 234350911,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618328645
    },
    {
        "content": "<p>Sorry, I misread your earlier comment. That's correct.</p>",
        "id": 234351180,
        "sender_full_name": "varkor",
        "timestamp": 1618328749
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"326176\">Boxy</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-04-13/near/234346418\">said</a>:</p>\n<blockquote>\n<p>would <code>unsafe trait Commutative: std::ops::Add {}</code> be a horrible idea</p>\n</blockquote>\n<p>as long as we can't be generic over traits, yes <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 234352291,
        "sender_full_name": "lcnr",
        "timestamp": 1618329147
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">CommutativeAdd</span>: <span class=\"nc\">Add</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">CommutativeSub</span>: <span class=\"nc\">Sub</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 234352357,
        "sender_full_name": "lcnr",
        "timestamp": 1618329176
    }
]