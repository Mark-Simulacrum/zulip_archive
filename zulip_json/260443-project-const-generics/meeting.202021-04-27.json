[
    {
        "content": "<p>Hi folks, I'm hoping to attend this <a href=\"https://github.com/WebAssembly/meetings/blob/master/main/2021/CG-04-27.md\">webassembly CG meeting</a> which takes place during our normally scheduled meeting time. I'm not sure how present I will be this week as a result -- I do want to talk about the vision doc stuff we had discussed last time though.</p>",
        "id": 236305641,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619514876
    },
    {
        "content": "<p>meeting <span class=\"user-group-mention\" data-user-group-id=\"3805\">@project-const-generics</span> <span aria-label=\"sparkles\" class=\"emoji emoji-2728\" role=\"img\" title=\"sparkles\">:sparkles:</span></p>",
        "id": 236349775,
        "sender_full_name": "lcnr",
        "timestamp": 1619534783
    },
    {
        "content": "<p>continuing the last meeting, we're going to talk a bit about the future of const generics</p>",
        "id": 236349964,
        "sender_full_name": "lcnr",
        "timestamp": 1619534858
    },
    {
        "content": "<p>wave</p>",
        "id": 236349996,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619534874
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> do you have some thoughts on how to best approach this topic?</p>",
        "id": 236350092,
        "sender_full_name": "lcnr",
        "timestamp": 1619534902
    },
    {
        "content": "<p>otherwise i would just look at the async/await docs and copy these :p</p>",
        "id": 236350142,
        "sender_full_name": "lcnr",
        "timestamp": 1619534922
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-04-27/near/236350142\">said</a>:</p>\n<blockquote>\n<p>otherwise i would just look at the async/await docs and copy these :p</p>\n</blockquote>\n<p>do you have a link to those docs?</p>",
        "id": 236350637,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1619535104
    },
    {
        "content": "<p><a href=\"https://rust-lang.github.io/wg-async-foundations/vision/how_to_vision/shiny_future.html\">https://rust-lang.github.io/wg-async-foundations/vision/how_to_vision/shiny_future.html</a></p>",
        "id": 236350664,
        "sender_full_name": "lcnr",
        "timestamp": 1619535112
    },
    {
        "content": "<p>thanks :)</p>",
        "id": 236350676,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1619535117
    },
    {
        "content": "<p>sorry</p>",
        "id": 236350753,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619535133
    },
    {
        "content": "<p>yeah</p>",
        "id": 236350762,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619535136
    },
    {
        "content": "<p>so</p>",
        "id": 236350772,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619535137
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> there's a repo for const-generics project, right?</p>",
        "id": 236350820,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619535154
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/project-const-generics\">https://github.com/rust-lang/project-const-generics</a></p>",
        "id": 236350846,
        "sender_full_name": "lcnr",
        "timestamp": 1619535166
    },
    {
        "content": "<p>I think probably the best thing to do at the moment is to start sketching out a few .. examples and kind of cover some of the key esign points</p>",
        "id": 236350876,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619535175
    },
    {
        "content": "<p>let's make a hackmd?</p>",
        "id": 236350887,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619535179
    },
    {
        "content": "<p><a href=\"https://hackmd.io/VOaGjRYsSXW4PR_VNwQmSQ\">https://hackmd.io/VOaGjRYsSXW4PR_VNwQmSQ</a></p>",
        "id": 236350958,
        "sender_full_name": "lcnr",
        "timestamp": 1619535209
    },
    {
        "content": "<p>I'd say a related point is variadic generics, including <code>const</code> ones. :)</p>",
        "id": 236350992,
        "sender_full_name": "Hameer Abbasi",
        "timestamp": 1619535219
    },
    {
        "content": "<p>great!</p>",
        "id": 236351108,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619535245
    },
    {
        "content": "<p>i'm going to drop in some notes</p>",
        "id": 236351176,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619535270
    },
    {
        "content": "<p>to do this <em>properly</em></p>",
        "id": 236351364,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619535353
    },
    {
        "content": "<p>we should start with <em>status quo</em></p>",
        "id": 236351379,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619535358
    },
    {
        "content": "<p>I don't think we have to go all out but i would appreciate it if we did outline some of the problems we are aiming to solve</p>",
        "id": 236351437,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619535371
    },
    {
        "content": "<p>So this is more a vision for \"const\" in Rust, rather than specifically const generics?</p>",
        "id": 236351528,
        "sender_full_name": "varkor",
        "timestamp": 1619535409
    },
    {
        "content": "<p>I may be blending things but I don't think so</p>",
        "id": 236351573,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619535426
    },
    {
        "content": "<p>to me they seem pretty intimately connected</p>",
        "id": 236351600,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619535436
    },
    {
        "content": "<p>once we have \"any type for const params\" we'll probably quickly run into wanting const fn traits i imagine so seems related <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 236351656,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1619535459
    },
    {
        "content": "<p>is there something I wrote that seems like it's <em>not</em> const generics?</p>",
        "id": 236351675,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619535467
    },
    {
        "content": "<p>k, I see</p>",
        "id": 236351705,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619535479
    },
    {
        "content": "<p>I'm ok to remove those things as 'maybes' :)</p>",
        "id": 236351785,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619535495
    },
    {
        "content": "<p>although i think that it's all one feature</p>",
        "id": 236351807,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619535499
    },
    {
        "content": "<p>in users' minds</p>",
        "id": 236351838,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619535508
    },
    {
        "content": "<p>I think it would help to have a detailed story that incorporates all of these related features, I agree.</p>",
        "id": 236351922,
        "sender_full_name": "varkor",
        "timestamp": 1619535537
    },
    {
        "content": "<p>Though perhaps there are some people interested in some aspects of this without being so involved with const generics specifically (e.g. some of the members of <a class=\"stream\" data-stream-id=\"146212\" href=\"/#narrow/stream/146212-t-compiler.2Fconst-eval\">#t-compiler/const-eval</a>).</p>",
        "id": 236352140,
        "sender_full_name": "varkor",
        "timestamp": 1619535601
    },
    {
        "content": "<p>I think this will be iterated for a little while :)</p>",
        "id": 236352401,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619535636
    },
    {
        "content": "<p>that is, I think we can  poke at it now and then float over in other streams</p>",
        "id": 236352506,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619535653
    },
    {
        "content": "<p>what's</p>\n<blockquote>\n<p>Make a compile-time expression template library.</p>\n</blockquote>",
        "id": 236352869,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1619535713
    },
    {
        "content": "<p>Something that can express an expression as a tree at compile-time.</p>",
        "id": 236353182,
        "sender_full_name": "Hameer Abbasi",
        "timestamp": 1619535764
    },
    {
        "content": "<p>oo neat, kinda reminds me of our <code>AbstractConst</code> lol...</p>",
        "id": 236353303,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1619535783
    },
    {
        "content": "<blockquote>\n<ul>\n<li>Writing a generic abstraction modifying arrays is still not possible if the abstraction needs to change array lengths.</li>\n</ul>\n</blockquote>",
        "id": 236353577,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619535821
    },
    {
        "content": "<p>can someone say a bit more about this?</p>",
        "id": 236353605,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619535826
    },
    {
        "content": "<p>OK, it seems like we sort of hit a \"fixed-ish\" point in terms of major bullets?</p>",
        "id": 236354353,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619535985
    },
    {
        "content": "<p>I have a question</p>",
        "id": 236354521,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619536029
    },
    {
        "content": "<p>at some point <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> was talking about \"unsafe in const\" being used for \"things that might not be const'</p>",
        "id": 236354561,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619536039
    },
    {
        "content": "<p>(but which would not necessarily be unsafe in an ordinary function)</p>",
        "id": 236354603,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619536049
    },
    {
        "content": "<p>to what extent is that the \"status qou\" today or is there a different understanding</p>",
        "id": 236354670,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619536068
    },
    {
        "content": "<p><a href=\"https://www.ralfj.de/blog/2018/07/19/const.html\">https://www.ralfj.de/blog/2018/07/19/const.html</a></p>",
        "id": 236354841,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619536101
    },
    {
        "content": "<p>ok :)</p>",
        "id": 236355928,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619536366
    },
    {
        "content": "<p>sounds like that should be part of the story then</p>",
        "id": 236355937,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619536370
    },
    {
        "content": "<p>I'm thinking about the motivating examples</p>",
        "id": 236356047,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619536399
    },
    {
        "content": "<p>something I've heard is the use of const generics to speed up crypto routines</p>",
        "id": 236356094,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619536412
    },
    {
        "content": "<p>I don't really know how or why</p>",
        "id": 236356104,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619536415
    },
    {
        "content": "<p>but it'd be nice to talk about things that \"everyday programmers\" might want to do too</p>",
        "id": 236356158,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619536431
    },
    {
        "content": "<p>the most obvious i guess is writing impls for all arrays</p>",
        "id": 236356171,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619536436
    },
    {
        "content": "<p>I am debating how much it's worth writing about the frustrations people face today</p>",
        "id": 236356454,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619536498
    },
    {
        "content": "<p>I think it's important for motivating and prioritizing, but maybe less so in this case for sketching the plan</p>",
        "id": 236356582,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619536530
    },
    {
        "content": "<p>maybe we can come to it later</p>",
        "id": 236356620,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619536538
    },
    {
        "content": "<p>is it worth mentioning somewhere about specialising on const params?</p>",
        "id": 236356655,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1619536556
    },
    {
        "content": "<p>that might be way out of scope for this <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 236356707,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1619536566
    },
    {
        "content": "<p>I guess one question I have is how much we are transcribing plans where consenss exists</p>",
        "id": 236356708,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619536566
    },
    {
        "content": "<p>I think it's worth adding to the list of things to consider</p>",
        "id": 236356742,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619536580
    },
    {
        "content": "<p>Would parallels that exist in the C++ world but aren't possible with Rust today be okay to mention?</p>",
        "id": 236356908,
        "sender_full_name": "Hameer Abbasi",
        "timestamp": 1619536673
    },
    {
        "content": "<p>yes</p>",
        "id": 236356975,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619536689
    },
    {
        "content": "<p>I think that's a great idea of the status quo</p>",
        "id": 236356986,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619536697
    },
    {
        "content": "<p>i.e., Grace (C++ developer) wants to do X that she' used to doing...</p>",
        "id": 236357011,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619536706
    },
    {
        "content": "<p>ok, I was thinking about it, and I do think it's important to write the status quo eventually, but I think we can iterate a bit back and forth</p>",
        "id": 236357118,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619536765
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-04-27/near/236356708\">said</a>:</p>\n<blockquote>\n<p>I guess one question I have is how much we are transcribing plans where consenss exists</p>\n</blockquote>\n<p>the reason I was asking about this is</p>",
        "id": 236357132,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619536774
    },
    {
        "content": "<p>in the async vision doc, one thing I'm excited about is writing mutually contradictory stories :)</p>",
        "id": 236357151,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619536784
    },
    {
        "content": "<p>to show the various options under consideration</p>",
        "id": 236357158,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619536789
    },
    {
        "content": "<p>and help us judge what is better</p>",
        "id": 236357167,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619536793
    },
    {
        "content": "<p>I suspect we'll want to do the same here</p>",
        "id": 236357171,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619536796
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256313\">Hameer Abbasi</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-04-27/near/236356908\">said</a>:</p>\n<blockquote>\n<p>Would parallels that exist in the C++ world but aren't possible with Rust today be okay to mention?</p>\n</blockquote>\n<p>are you noting those somewhere?</p>",
        "id": 236357282,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619536832
    },
    {
        "content": "<blockquote>\n<ul>\n<li>Make a compile-time expression template library.</li>\n</ul>\n</blockquote>\n<p>wat's this again?</p>",
        "id": 236357421,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619536885
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256313\">Hameer Abbasi</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-04-27/near/236353182\">said</a>:</p>\n<blockquote>\n<p>Something that can express an expression as a tree at compile-time.</p>\n</blockquote>",
        "id": 236357475,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1619536909
    },
    {
        "content": "<p>so something like proc-macros? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 236357578,
        "sender_full_name": "lcnr",
        "timestamp": 1619536940
    },
    {
        "content": "<p>ok, I'm wondering about whether to go through the motivating examples a bit and try to elaborate into story sketches</p>",
        "id": 236357596,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619536951
    },
    {
        "content": "<blockquote>\n<ul>\n<li>Writing an impl for all array types <code>[T; N]</code> for any <code>N</code></li>\n</ul>\n</blockquote>",
        "id": 236357603,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619536956
    },
    {
        "content": "<p>this one is realtively straightforward</p>",
        "id": 236357618,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619536962
    },
    {
        "content": "<p>there are a lot of cases where we want to special case <code>0</code> which isn't easily possible <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 236357788,
        "sender_full_name": "lcnr",
        "timestamp": 1619537035
    },
    {
        "content": "<p>like what?</p>",
        "id": 236357813,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619537043
    },
    {
        "content": "<p>also, is <code>Default</code> a good trait to write a story about?</p>",
        "id": 236357862,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619537050
    },
    {
        "content": "<p>I'm imagining the following structure for the hackmd;</p>",
        "id": 236357877,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619537059
    },
    {
        "content": "<ul>\n<li>motivations examples</li>\n</ul>",
        "id": 236357891,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619537063
    },
    {
        "content": "<p>lt's add in ideas of things we want to do with const generics there</p>",
        "id": 236357908,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619537069
    },
    {
        "content": "<p>then</p>",
        "id": 236357910,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619537071
    },
    {
        "content": "<ul>\n<li>status quo stories</li>\n</ul>",
        "id": 236357918,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619537074
    },
    {
        "content": "<p>sketch outlines based on those-- what happens today?</p>",
        "id": 236357931,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619537078
    },
    {
        "content": "<ul>\n<li>shiny future stories</li>\n</ul>",
        "id": 236357940,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619537082
    },
    {
        "content": "<ul>\n<li>sketch outlines based on motivating examples-- how could it play out instead? non-exclusive</li>\n</ul>",
        "id": 236357967,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619537091
    },
    {
        "content": "<p>(i.e., maybe we have a couple of ideas)</p>",
        "id": 236357977,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619537096
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-04-27/near/236357813\">said</a>:</p>\n<blockquote>\n<p>like what?</p>\n</blockquote>\n<p><code>impl&lt;T&gt; Trait for [T; 0] {}</code> and <code>impl&lt;T: Trait&gt; Trait for [T; 1] {}</code> often already exists so we can't use one generic impl for this without making a breaking change</p>",
        "id": 236358079,
        "sender_full_name": "lcnr",
        "timestamp": 1619537133
    },
    {
        "content": "<p>because there is no generalization that works?</p>",
        "id": 236358145,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619537156
    },
    {
        "content": "<p>not on stable ^^</p>",
        "id": 236358247,
        "sender_full_name": "lcnr",
        "timestamp": 1619537177
    },
    {
        "content": "<p>ok</p>",
        "id": 236358298,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619537194
    },
    {
        "content": "<p>I see <code>Default</code> is implemented for <code>T; N</code> where <code>N&lt;=32</code></p>",
        "id": 236358391,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619537224
    },
    {
        "content": "<p>I guess that's rougly what happens with <code>Default</code> today?</p>",
        "id": 236359158,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619537417
    },
    {
        "content": "<p>the syntax is <code>[T::default(); N]</code> not <code>[T::default(), ..N]</code> right?</p>",
        "id": 236359366,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1619537456
    },
    {
        "content": "<p>oh, yes</p>",
        "id": 236359384,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619537463
    },
    {
        "content": "<p>lol</p>",
        "id": 236359390,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619537465
    },
    {
        "content": "<p>the <code>..</code> syntax is super old</p>",
        "id": 236359396,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619537468
    },
    {
        "content": "<p>I feel like there's another story, <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span>, covering the <code>; 0</code> case</p>",
        "id": 236359506,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619537511
    },
    {
        "content": "<p>so <code>[T::default(); N]</code> probably doesnt work because <code>T::default()</code> isnt const or clone/copy(?) but also even if it did this wouldnt be enough because of the <code>[T; 0]: Default</code> impl we want even when T isnt default</p>",
        "id": 236359637,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1619537552
    },
    {
        "content": "<p>i guess this is two things <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 236359724,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1619537585
    },
    {
        "content": "<p>ah, no, that's good</p>",
        "id": 236359753,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619537591
    },
    {
        "content": "<p>well, ignoring that, is there any way to make <code>[T::default(); N]</code> work?</p>",
        "id": 236359805,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619537613
    },
    {
        "content": "<p>I was somebody writing <code>[(); N].map(|()|...)</code>, but... we can't collect, presumably?</p>",
        "id": 236359840,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619537630
    },
    {
        "content": "<p>that might be a super nifty shiny future story though :)</p>",
        "id": 236359860,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619537638
    },
    {
        "content": "<p>we can do that, <code>map</code> is also a separate function for arrays</p>",
        "id": 236359886,
        "sender_full_name": "lcnr",
        "timestamp": 1619537643
    },
    {
        "content": "<p>^^</p>",
        "id": 236359909,
        "sender_full_name": "lcnr",
        "timestamp": 1619537645
    },
    {
        "content": "<p>There's a pr for <code>generate&lt;N&gt;(fn) -&gt; [fn(i); N]</code> edit:  in progress but has been up for a long time<br>\n<a href=\"https://github.com/rust-lang/rust/pull/75644/\">https://github.com/rust-lang/rust/pull/75644/</a></p>",
        "id": 236359939,
        "sender_full_name": "jknodt",
        "timestamp": 1619537653
    },
    {
        "content": "<p>oic</p>",
        "id": 236359945,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619537657
    },
    {
        "content": "<p><code>(0..N).map(|()| T::default()).collect::&lt;[T; N]&gt;()</code> would be nice</p>",
        "id": 236360064,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1619537697
    },
    {
        "content": "<p>although still somewhat tedius to write compared to what you'd intuitively expect to work</p>",
        "id": 236360096,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1619537712
    },
    {
        "content": "<p>(also this collect impl doesnt exist lol)</p>",
        "id": 236360107,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1619537717
    },
    {
        "content": "<p>somewhat tangental, one thing that I've occasionally wanted has been const ranges, which could be used as Boxy just used them, or to index to a reference to an array in a slice</p>",
        "id": 236360279,
        "sender_full_name": "jknodt",
        "timestamp": 1619537769
    },
    {
        "content": "<p>ok, these two stories are good</p>",
        "id": 236360923,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619538014
    },
    {
        "content": "<p>I guess they give rise to some obvious shiny future stories?</p>",
        "id": 236360940,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619538020
    },
    {
        "content": "<p>well tbqh I'm not sure about the shiny future for the <code>Default</code> impl</p>",
        "id": 236361031,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619538049
    },
    {
        "content": "<p>i had an idea using marker traits and specialization :p <span class=\"user-mention silent\" data-user-id=\"256759\">boats</span> wasn't too happy with landing that on stable though</p>",
        "id": 236361117,
        "sender_full_name": "lcnr",
        "timestamp": 1619538081
    },
    {
        "content": "<p>so</p>",
        "id": 236361125,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619538085
    },
    {
        "content": "<p>ok there's too things</p>",
        "id": 236361136,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619538088
    },
    {
        "content": "<p>one is how to write the body</p>",
        "id": 236361147,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619538093
    },
    {
        "content": "<p>and the other is the specialization?</p>",
        "id": 236361153,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619538098
    },
    {
        "content": "<p>either specialization or exhaustiveness checks with \"const evaluatable bounds\"</p>",
        "id": 236361184,
        "sender_full_name": "lcnr",
        "timestamp": 1619538113
    },
    {
        "content": "<p>y</p>",
        "id": 236361185,
        "sender_full_name": "lcnr",
        "timestamp": 1619538114
    },
    {
        "content": "<p>it would be nice if <code>[{expr}; N]</code> just worked <span aria-label=\"tm\" class=\"emoji emoji-2122\" role=\"img\" title=\"tm\">:tm:</span> the same way that you can write it using macros</p>",
        "id": 236361241,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1619538124
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-04-27/near/236361147\">said</a>:</p>\n<blockquote>\n<p>one is how to write the body</p>\n</blockquote>\n<p>the <code>map</code> function works today, <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> ?</p>",
        "id": 236361248,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619538125
    },
    {
        "content": "<p>yes</p>",
        "id": 236361266,
        "sender_full_name": "lcnr",
        "timestamp": 1619538131
    },
    {
        "content": "<p>that said</p>",
        "id": 236361276,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619538134
    },
    {
        "content": "<p>ah, never mind</p>",
        "id": 236361293,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619538138
    },
    {
        "content": "<p><code>map</code> is still unstable, but it does work without relying on unstable features</p>",
        "id": 236361311,
        "sender_full_name": "lcnr",
        "timestamp": 1619538144
    },
    {
        "content": "<p>ok, let's run with that</p>",
        "id": 236361323,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619538147
    },
    {
        "content": "<p>we should add it to the status quo story too though</p>",
        "id": 236361332,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619538154
    },
    {
        "content": "<p>that she discovers it by asking <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> on Zulip ;p</p>",
        "id": 236361350,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619538159
    },
    {
        "content": "<p><span aria-label=\"sparkles\" class=\"emoji emoji-2728\" role=\"img\" title=\"sparkles\">:sparkles:</span> that's what i am here for</p>",
        "id": 236361377,
        "sender_full_name": "lcnr",
        "timestamp": 1619538172
    },
    {
        "content": "<p>Specialization is just the equivalent of <code>_</code> in the match expression. I don't see why it'd be undesirable. That said, exhaustiveness checks are just as good.</p>",
        "id": 236361450,
        "sender_full_name": "Hameer Abbasi",
        "timestamp": 1619538201
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">Default</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">T</span>: <span class=\"nb\">Default</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">default</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">[();</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">].</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"p\">()</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">T</span>::<span class=\"n\">default</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 236361486,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619538214
    },
    {
        "content": "<p>?</p>",
        "id": 236361487,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619538215
    },
    {
        "content": "<p>y</p>",
        "id": 236361497,
        "sender_full_name": "lcnr",
        "timestamp": 1619538220
    },
    {
        "content": "<p>(for every trait except <code>Default</code> in std)</p>",
        "id": 236361526,
        "sender_full_name": "lcnr",
        "timestamp": 1619538234
    },
    {
        "content": "<p>because of the <code>[NotDefault; 0]: Default</code> impl</p>",
        "id": 236361600,
        "sender_full_name": "lcnr",
        "timestamp": 1619538251
    },
    {
        "content": "<p>ok, I think the story is complete now</p>",
        "id": 236362029,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619538441
    },
    {
        "content": "<p>I merged it in with the other story someone had written</p>",
        "id": 236362047,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619538449
    },
    {
        "content": "<blockquote>\n<p>Frustrated, Barbara gives up.</p>\n</blockquote>\n<p>barbara is so relatable</p>",
        "id": 236362061,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1619538454
    },
    {
        "content": "<p>\"and goes and contributes to rust-analyzer instead\" <span aria-label=\"sob\" class=\"emoji emoji-1f62d\" role=\"img\" title=\"sob\">:sob:</span> lol</p>",
        "id": 236362234,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1619538511
    },
    {
        "content": "<p>this story isn't <em>that</em> far from the shiny future I guess</p>",
        "id": 236362244,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619538515
    },
    {
        "content": "<p>hehe nobody was supposed to see that stray edit ;)</p>",
        "id": 236362268,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619538527
    },
    {
        "content": "<p>I'm not sure what I think about <code>[(); N].map(...)</code> as an idiom though</p>",
        "id": 236362327,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619538549
    },
    {
        "content": "<p>is it backwards incompatible to have <code>[non-const-expr; 3]</code> work like our macro impls?: <code>[non-const-expr, non-const-expr, non-const-expr]</code>?</p>",
        "id": 236362411,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1619538587
    },
    {
        "content": "<p>I think so</p>",
        "id": 236362490,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619538605
    },
    {
        "content": "<p>if there are side-effects</p>",
        "id": 236362500,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619538610
    },
    {
        "content": "<p>I suppose it would be a bit odd if the expr is side effectful yeah</p>",
        "id": 236362508,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1619538615
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-04-27/near/236362327\">said</a>:</p>\n<blockquote>\n<p>I'm not sure what I think about <code>[(); N].map(...)</code> as an idiom though</p>\n</blockquote>\n<p>it's a bit ugly, but creating arrays from iterators is a can of worms, because it isn't obvious what's the best way to deal with iterators which don't return enough elements</p>",
        "id": 236362519,
        "sender_full_name": "lcnr",
        "timestamp": 1619538617
    },
    {
        "content": "<p>I think we would want <em>some</em> syntax</p>",
        "id": 236362570,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619538631
    },
    {
        "content": "<p>I don't know what it is</p>",
        "id": 236362575,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619538633
    },
    {
        "content": "<p><code>$({expr})N</code>lol</p>",
        "id": 236362651,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1619538657
    },
    {
        "content": "<p>The <code>from_fn/generate</code> I mentioned earlier should replace <code>[(); N].map(...)</code>, if it's merged in <a href=\"https://github.com/rust-lang/rust/pull/75644/\">https://github.com/rust-lang/rust/pull/75644/</a></p>",
        "id": 236362798,
        "sender_full_name": "jknodt",
        "timestamp": 1619538714
    },
    {
        "content": "<p>let's sktch some syntax for now</p>",
        "id": 236362800,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619538715
    },
    {
        "content": "<p>oh yeah I missed that</p>",
        "id": 236362872,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619538730
    },
    {
        "content": "<p>that's plausible</p>",
        "id": 236362898,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619538744
    },
    {
        "content": "<p>is there a <code>from_fn</code> trait?</p>",
        "id": 236362922,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619538753
    },
    {
        "content": "<p>ah no this is just for building arrays in specific from a given function</p>",
        "id": 236363005,
        "sender_full_name": "jknodt",
        "timestamp": 1619538795
    },
    {
        "content": "<p>I'm just thinking it might be a nice trait</p>",
        "id": 236363779,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619539099
    },
    {
        "content": "<p><code>T::from_fn(|i| ...)</code></p>",
        "id": 236363791,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619539105
    },
    {
        "content": "<p>I'd be hapier with something that's not special case to arrays</p>",
        "id": 236363822,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619539120
    },
    {
        "content": "<p>but I don't know that it has to be special syntax</p>",
        "id": 236363856,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619539137
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-04-27/near/236354670\">said</a>:</p>\n<blockquote>\n<p>to what extent is that the \"status qou\" today or is there a different understanding</p>\n</blockquote>\n<p>there is currently one unsafety check that is only active in <code>const</code>/<code>const fn</code>, and it is for casting raw ptrs to ints.<br>\nanother possible candidate might be raw ptr equality tests, but we currently just forbid those entirely in const and (unstably) provide methods to test <code>guaranteed_eq</code> and <code>guaranteed_ne</code> -- equality of ptrs at const-time is a ternary relation with possible values \"definitely equal\", \"definitely inequal\", and \"<span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span>\"</p>",
        "id": 236956713,
        "sender_full_name": "RalfJ",
        "timestamp": 1619865293
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> If you’re looking for more real world examples, we just recently merged in a <a href=\"https://github.com/EmbarkStudios/rust-gpu/blob/1431c18b9db70feafc64e5096a64e5fefffbed18/crates/spirv-std/src/image.rs#L31\">const generic <code>Image</code> type</a> in <code>rust-gpu</code>.</p>\n<p>In SPIR-V all types are parametrised, and there’s an <code>OpTypeImage</code> which has 7 different parameters ,each of which having at least 2 or 3 variants (and one having 39!). This type would have a tremendous amount of boilerplate if we had to use type generics for the parameters, but with const generics it became really easy to implement and represent. On top of which we could write traits that are parameterised on top of the type’s const parameters. This allows us to do incredibly powerful generic type checking where we can parameterise what type you can use for coordinates based on the <code>Image</code>’s parameters (E.g. vec2 for 2D image, vec3 for 3D, etc).</p>",
        "id": 236964582,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1619873301
    },
    {
        "content": "<p>Another real  example that's interesting: <a href=\"https://numpy.org/doc/stable/user/basics.broadcasting.html\">broadcasting</a>. This lets you do binary math operations on arrays that don't have identical 'shape', subject to certain 'broadcasting rules' This is very useful/common in numpy-style array programming. This might be implicit in <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> 's <code>xtensor</code> example.  I'd include <a href=\"https://github.com/google/jax\">jax</a> as another compelling example.</p>\n<p>Seems like it should be possible to implement numpy's broadcasting rules in using <code>const_evaluatable_checked</code>, but I think I'm hitting a bug?<br>\nSketch of how this might look &amp; current issue I'm hitting: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=c346968fc48081893095422ca538dcc7\">playground</a></p>",
        "id": 237079733,
        "sender_full_name": "Patrick Marks",
        "timestamp": 1619987069
    },
    {
        "content": "<p>..adding a <code>[(); N - 2]:</code> bound causes a \"evaluation of constant value failed\" error so that's not a great sign <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 237080012,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1619987319
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"263011\">@Patrick Marks</span> The one thing about const-generics is that it's currently hard to abstract over tensor dimensions, as you'd essentially need to have a tensor class with an array as a const parameter: <code>struct Tensor&lt;const N_DIMS: usize, const DIMS; [usize; N_DIMS]&gt;</code>, I don't know if that kind of thing is supported currently, but it'd be exciting if it were. This was my main use case for looking at const-generics in the first place, so hopefully linear algebra in rust will be able to take off as const-generics gets more and more features</p>",
        "id": 237081279,
        "sender_full_name": "jknodt",
        "timestamp": 1619988345
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"326189\">@jknodt</span> agreed, that would the ideal, but of course just implementing <code>Arr1&lt;N&gt;</code> ... <code>ArrK&lt;N1, ..., Nk&gt;</code> up to some reasonable K would cover many applications.</p>",
        "id": 237098600,
        "sender_full_name": "Patrick Marks",
        "timestamp": 1620002754
    },
    {
        "content": "<p>the issue there is just ergonomics, with Numpy you have 1 type, having multiple types that need to interoperate is a pain on the end user</p>",
        "id": 237098669,
        "sender_full_name": "jknodt",
        "timestamp": 1620002807
    }
]