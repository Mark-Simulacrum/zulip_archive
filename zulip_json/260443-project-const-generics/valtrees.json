[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> So the first question I have is in what situations do we actually get the interning invariant violations? Does this only occur with ptrs and byte strings/arrays?</p>",
        "id": 268010239,
        "sender_full_name": "BN",
        "timestamp": 1642165354
    },
    {
        "content": "<p>so the basic invariant violations are afaik ptr to integer casts</p>",
        "id": 268010319,
        "sender_full_name": "lcnr",
        "timestamp": 1642165403
    },
    {
        "content": "<p>just to clarify, what exactly is Scalar::Ptr? Is this just a reference to a constant? Or are these raw pointers?</p>",
        "id": 268010476,
        "sender_full_name": "BN",
        "timestamp": 1642165475
    },
    {
        "content": "<p>yeah <code>Scalar::Ptr</code> is a pointer or a reference to some constant</p>",
        "id": 268010665,
        "sender_full_name": "lcnr",
        "timestamp": 1642165580
    },
    {
        "content": "<p>How would we encode these in valtrees? Would we just have a branch to whatever is pointed to?</p>",
        "id": 268010766,
        "sender_full_name": "BN",
        "timestamp": 1642165647
    },
    {
        "content": "<p>this encoding in valtrees is already implemented</p>",
        "id": 268010846,
        "sender_full_name": "lcnr",
        "timestamp": 1642165688
    },
    {
        "content": "<p>and think so, yeah</p>",
        "id": 268010851,
        "sender_full_name": "lcnr",
        "timestamp": 1642165691
    },
    {
        "content": "<p>let me get a link, it's been a while since i've looked at this</p>",
        "id": 268010894,
        "sender_full_name": "lcnr",
        "timestamp": 1642165723
    },
    {
        "content": "<p>yeah I saw the implementation, though this specific case is unimplemented</p>",
        "id": 268010911,
        "sender_full_name": "BN",
        "timestamp": 1642165735
    },
    {
        "content": "<p>interesting, did <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> implement that in  <a href=\"https://github.com/rust-lang/rust/issues/83234\">#83234</a>?</p>",
        "id": 268011041,
        "sender_full_name": "lcnr",
        "timestamp": 1642165809
    },
    {
        "content": "<p>doesn't look like it</p>",
        "id": 268011073,
        "sender_full_name": "lcnr",
        "timestamp": 1642165838
    },
    {
        "content": "<p>No, I think that was even prior to that. Let me try to find the PR</p>",
        "id": 268011078,
        "sender_full_name": "BN",
        "timestamp": 1642165841
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/82936\">https://github.com/rust-lang/rust/pull/82936</a></p>",
        "id": 268011151,
        "sender_full_name": "BN",
        "timestamp": 1642165887
    },
    {
        "content": "<p>are you also talking about the converting a mir const to a valtree for <code>ty::Ref</code>?</p>",
        "id": 268011157,
        "sender_full_name": "lcnr",
        "timestamp": 1642165890
    },
    {
        "content": "<p>mh not sure, thats actually what I find confusing. When do we have ty::Ref(some constant) and ty::Const(Scalar::Ptr)?</p>",
        "id": 268011286,
        "sender_full_name": "BN",
        "timestamp": 1642165962
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(adt_const_params)]</span><span class=\"w\"></span>\n<span class=\"cp\">#[derive(PartialEq, Eq)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">ConstParam</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">a</span>: <span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">b</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">static</span> <span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"nc\">ConstParam</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 268011383,
        "sender_full_name": "lcnr",
        "timestamp": 1642166038
    },
    {
        "content": "<p>here <code>b</code> would be ty::Const(Scalar::ptr)?</p>",
        "id": 268011662,
        "sender_full_name": "BN",
        "timestamp": 1642166188
    },
    {
        "content": "<p>(slowly remembering stuff) if we have a value <code>Scalar::Ptr</code> of type <code>ty::Ref('whatever, u32, Mutability::Not)</code> afaik we use <code>global_alloc</code> on the value and skip the <code>ty::Ref</code> in the val tree representation</p>",
        "id": 268011679,
        "sender_full_name": "lcnr",
        "timestamp": 1642166200
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"328097\">BN</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/268011662\">said</a>:</p>\n<blockquote>\n<p>here <code>b</code> would be ty::Const(Scalar::ptr)?</p>\n</blockquote>\n<p>should be, yes</p>",
        "id": 268011695,
        "sender_full_name": "lcnr",
        "timestamp": 1642166205
    },
    {
        "content": "<p>this will mean that <code>struct Foo { value: u32 }</code> and <code>struct Bar { value: &amp;'static u32 }</code> should have the same representation as val trees</p>",
        "id": 268011755,
        "sender_full_name": "lcnr",
        "timestamp": 1642166250
    },
    {
        "content": "<blockquote>\n<p>A pointer is represented as a Node with a single child, so (42,) and &amp;42 are represented exactly the same, only the type at the ty::Const level will differ.</p>\n</blockquote>",
        "id": 268011865,
        "sender_full_name": "lcnr",
        "timestamp": 1642166291
    },
    {
        "content": "<p>ok that makes sense</p>",
        "id": 268011904,
        "sender_full_name": "BN",
        "timestamp": 1642166314
    },
    {
        "content": "<p>xd, i was wrong <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> this doesn't really matter though, <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> do you remember why we wanted to use a <code>Node</code> for references?</p>",
        "id": 268011955,
        "sender_full_name": "lcnr",
        "timestamp": 1642166346
    },
    {
        "content": "<p>I briefly looked into how we currently handle <code>ConstValue</code> during codegen. We currently make use of <code>Allocation</code> e.g. for <code>Scalar::ByRef</code> and probably also somehow for <code>Scalar::Ptr</code>. How would we get back a reference to the allocation information from the current form of valtree?</p>",
        "id": 268012115,
        "sender_full_name": "BN",
        "timestamp": 1642166423
    },
    {
        "content": "<blockquote>\n<p>How would we get back a reference to the allocation information from the current form of valtree?</p>\n</blockquote>\n<p>e.g. for stuff like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"nc\">MyType</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">N</span><span class=\"p\">.</span><span class=\"n\">field</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 268012224,
        "sender_full_name": "lcnr",
        "timestamp": 1642166491
    },
    {
        "content": "<p>during codegen of <code>foo::&lt;SomeValue&gt;</code> we need a mir constant for the valtree representation of <code>SomeValue</code>. that's what you're asking?</p>",
        "id": 268012312,
        "sender_full_name": "lcnr",
        "timestamp": 1642166525
    },
    {
        "content": "<p>we do need a conversion from valtree back to mir constants for that afaict</p>",
        "id": 268012397,
        "sender_full_name": "lcnr",
        "timestamp": 1642166584
    },
    {
        "content": "<p>So e.g. in <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_codegen_ssa/mir/operand.rs.html#68-111\"><code>OperandRef::from_const</code></a> for <code>Scalar::ByRef</code> we use its <code>data: Allocation</code> field. However with Valtrees we don't store any information that would allow us to get a reference to this <code>Allocation</code> value</p>",
        "id": 268012532,
        "sender_full_name": "BN",
        "timestamp": 1642166644
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/268012397\">said</a>:</p>\n<blockquote>\n<p>we do need a conversion from valtree back to mir constants for that afaict</p>\n</blockquote>\n<p>Yes and I'm not sure at this point how the valtree representation allows us to do that (though I haven't thought too much about this)</p>",
        "id": 268012643,
        "sender_full_name": "BN",
        "timestamp": 1642166704
    },
    {
        "content": "<p>we can rebuild a mir constant using a valtree</p>",
        "id": 268012853,
        "sender_full_name": "lcnr",
        "timestamp": 1642166838
    },
    {
        "content": "<p>well yes, I mean the information of the type information and the valtree should be enough to allow us to rebuild it,  but can we re-use all the const-eval memory information (not too familiar with how const-eval works currently, sry)?</p>",
        "id": 268013116,
        "sender_full_name": "BN",
        "timestamp": 1642166987
    },
    {
        "content": "<p>no need to apologize <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> i don't think we can easily do that</p>",
        "id": 268013269,
        "sender_full_name": "lcnr",
        "timestamp": 1642167053
    },
    {
        "content": "<p>If we re-build it from scratch that would be fairly expensive performance-wise, no?</p>",
        "id": 268013367,
        "sender_full_name": "BN",
        "timestamp": 1642167108
    },
    {
        "content": "<p>^^</p>",
        "id": 268013384,
        "sender_full_name": "lcnr",
        "timestamp": 1642167117
    },
    {
        "content": "<p>i would assume it to be acceptable, at least for now (as we're only allow integers on stable anyways)</p>",
        "id": 268013519,
        "sender_full_name": "lcnr",
        "timestamp": 1642167187
    },
    {
        "content": "<p>What if we limit valtrees to the cases where we actually get the invariant problems?</p>",
        "id": 268013568,
        "sender_full_name": "BN",
        "timestamp": 1642167224
    },
    {
        "content": "<p>the issue i see with reusing a mir constant here is that this might play badly with the query system as multiple mir constants map to the same valtree. Not completely certain how to avoid nondeterministic query results there</p>",
        "id": 268013704,
        "sender_full_name": "lcnr",
        "timestamp": 1642167288
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"328097\">BN</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/268013568\">said</a>:</p>\n<blockquote>\n<p>What if we limit valtrees to the cases where we actually get the invariant problems?</p>\n</blockquote>\n<p>what exactly do you mean with that?</p>",
        "id": 268013775,
        "sender_full_name": "lcnr",
        "timestamp": 1642167330
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/268013775\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"328097\">BN</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/268013568\">said</a>:</p>\n<blockquote>\n<p>What if we limit valtrees to the cases where we actually get the invariant problems?</p>\n</blockquote>\n<p>what exactly do you mean with that?</p>\n</blockquote>\n<p>yeah not sure, I dont think that made much sense^^ . I was just thinking that maybe we add some additional field or replace the Scalar::Ptr field and Scalar::Slice (for byte strings) field with some valtree like representation that can prevent the invariant problem (for those cases which actually cause the problem) and for other constvalues we just use a representation more like the current. But I'm probably missing something, like some Scalar::ByRef constant recursively depending on a ptr or something.</p>",
        "id": 268014466,
        "sender_full_name": "BN",
        "timestamp": 1642167673
    },
    {
        "content": "<p>what's the  \"invariant problem\"</p>",
        "id": 268014654,
        "sender_full_name": "lcnr",
        "timestamp": 1642167750
    },
    {
        "content": "<p>that ty::Const has multiple ways of representing the same value</p>",
        "id": 268014752,
        "sender_full_name": "BN",
        "timestamp": 1642167799
    },
    {
        "content": "<p>or rather \"if interned things are equal, their interned address is the same\"</p>",
        "id": 268014893,
        "sender_full_name": "BN",
        "timestamp": 1642167868
    },
    {
        "content": "<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> i assume that we don't want to change stuff about <code>Scalar</code> for this if we can avoid it</p>",
        "id": 268015128,
        "sender_full_name": "lcnr",
        "timestamp": 1642167958
    },
    {
        "content": "<p>Isn't <code>Scalar</code> supposed to go away anyway? Don't we just want to use <code>ScalarInt</code>for the leafs of the valtrees and <code>ConstValue</code> is replaced with <code>Valtree</code> right?</p>",
        "id": 268015450,
        "sender_full_name": "BN",
        "timestamp": 1642168091
    },
    {
        "content": "<p>we don't want to use <code>Scalar</code> in valtrees, i don't think there are any plans to remove <code>Scalar</code> from mir constants</p>",
        "id": 268015617,
        "sender_full_name": "lcnr",
        "timestamp": 1642168190
    },
    {
        "content": "<p>and we can't avoid the \"equality issues\" in mir constants</p>",
        "id": 268015854,
        "sender_full_name": "lcnr",
        "timestamp": 1642168314
    },
    {
        "content": "<p>isn't <code>mir::Constant</code> just a wrapper around <code>ty::Constant</code> that allows us to distinguish between which <code>ConstValue</code>s cannot be used by the type system anymore? </p>\n<p>And as far as I understood oli's proposal we do want to replace <code>ConstValue</code> with the following:</p>\n<div class=\"codehilite\"><pre><span></span><code>enum ConstValue&lt;&#39;tcx&gt; {\n    Leaf(u128),\n    Node {\n        variant: Option&lt;VariantIdx&gt;,\n        elements: &amp;&#39;tcx [ConstValue&lt;&#39;tcx&gt;],\n    }\n}\n</code></pre></div>",
        "id": 268015947,
        "sender_full_name": "BN",
        "timestamp": 1642168345
    },
    {
        "content": "<p>yeah, but this <code>ConstValue</code> won't be used by <code>mir::Constant</code>s anymore</p>",
        "id": 268016023,
        "sender_full_name": "lcnr",
        "timestamp": 1642168386
    },
    {
        "content": "<p>I don't understand that, can you elaborate? What does <code>mir::Constant</code> use instead?</p>",
        "id": 268016092,
        "sender_full_name": "BN",
        "timestamp": 1642168427
    },
    {
        "content": "<p>the final goal for <code>mir::Constant</code>s will be something like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// in the mir module</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Const</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">span</span>: <span class=\"nc\">Span</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">user_ty</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">UserTypeAnnotationIndex</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ty</span>: <span class=\"nc\">Ty</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">kind</span>: <span class=\"nc\">mir</span>::<span class=\"n\">ConstKind</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"sd\">/// A different type from the one used in `ty::Const`s</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">enum</span> <span class=\"nc\">ConstValue</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Scalar</span><span class=\"p\">(</span><span class=\"n\">Scalar</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Slice</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">data</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">tcx</span> <span class=\"nc\">Allocation</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">start</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">end</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ByRef</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">alloc</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">tcx</span> <span class=\"nc\">Allocation</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">offset</span>: <span class=\"nc\">Size</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">enum</span> <span class=\"nc\">ConstKind</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Value</span><span class=\"p\">(</span><span class=\"n\">ConstValue</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Unevaluated</span><span class=\"p\">(</span><span class=\"n\">DefId</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Substs</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Promoted</span><span class=\"p\">(</span><span class=\"n\">DefId</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Substs</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Promoted</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Param</span><span class=\"p\">(</span><span class=\"n\">ParamConst</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 268016361,
        "sender_full_name": "lcnr",
        "timestamp": 1642168584
    },
    {
        "content": "<p>so mir constants keep the current <code>ConstValue</code>, only <code>ty::Const</code>s will have a different representation</p>",
        "id": 268016388,
        "sender_full_name": "lcnr",
        "timestamp": 1642168608
    },
    {
        "content": "<p>ah i see, thanks. that makes more sense.</p>",
        "id": 268016529,
        "sender_full_name": "BN",
        "timestamp": 1642168683
    },
    {
        "content": "<p>ok so, I think I roughly know how to implement this. Probably makes the most sense for me to just try to implement this now and we can sync again after I stumbled on some problems, ok?</p>",
        "id": 268016820,
        "sender_full_name": "BN",
        "timestamp": 1642168814
    },
    {
        "content": "<p><span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span> hope my explanations were helpful even though i don't remember as much about this as i hoped '^^</p>",
        "id": 268017098,
        "sender_full_name": "lcnr",
        "timestamp": 1642168926
    },
    {
        "content": "<p>yes that was helpful. Clarified some things I was confused about. Thanks a lot for your time.</p>",
        "id": 268017156,
        "sender_full_name": "BN",
        "timestamp": 1642168965
    },
    {
        "content": "<p>for less complex stuff, feel free to just ask async here</p>",
        "id": 268017229,
        "sender_full_name": "lcnr",
        "timestamp": 1642169012
    },
    {
        "content": "<p>btw have you talked to oli about whether its ok that I continue with the implementation?</p>",
        "id": 268017358,
        "sender_full_name": "BN",
        "timestamp": 1642169072
    },
    {
        "content": "<p>:3 nope, i assume he would hate that, so let's try to do this in secret</p>",
        "id": 268017825,
        "sender_full_name": "lcnr",
        "timestamp": 1642169287
    },
    {
        "content": "<p>(yes i did ask him before suggesting this to you)</p>",
        "id": 268017857,
        "sender_full_name": "lcnr",
        "timestamp": 1642169302
    },
    {
        "content": "<p>Hey @lcnr, I'm a little confused about how pointers are handled in const-eval.</p>\n<p>When we try to evaluate a constant <code>&amp;str</code>, <code>eval_body_using_ecx</code> creates a <code>ConstAlloc</code>(with an Allocation that has, say, id <code>alloc2</code>) that refers to a pointer to another Allocation (with id <code>alloc1</code>) that contains the actual string data. The id for the allocation that contains the data is contained in a relocation of <code>alloc2</code>. </p>\n<p>I haven't found a function that allows one to deref a <code>MemPlace</code> (pointing to the allocation of <code>alloc2</code>) so as to get the actual byte data of the string slice. Maybe I misunderstand something, can you clarify the following, please?</p>\n<p>Do all pointer allocations point to their pointee allocation through an entry in <code>relocations</code>? If that's the case I don't really understand what <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_const_eval/interpret/place.rs.html#297-306\"><code>deref_operand</code></a> does.  It seems as if it just uses the <code>offset</code> of the actual pointer (not the <code>alloc_id</code> in the relocation) to create a <code>MemPlace</code>. In our case this is just a pointer to 0, since that is the <code>offset</code> of the pointer for <code>alloc2</code>. Is there a function that allows one to get access to the actual data given a <code>MemPlace</code> that points to <code>alloc2</code>?</p>",
        "id": 268865803,
        "sender_full_name": "BN",
        "timestamp": 1642782117
    },
    {
        "content": "<p>won't be online this weekend, and <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> or <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> know more about mir values, but I would assume that: </p>\n<ul>\n<li>Do all pointer allocations point to their pointee allocation through an entry in relocations?</li>\n</ul>\n<p>yes </p>\n<ul>\n<li>If that's the case I don't really understand what deref_operand does. It seems as if it just uses the offset of the actual pointer (not the alloc_id in the relocation) to create a MemPlace. In our case this is just a pointer to 0, since that is the offset of the pointer for alloc2. Is there a function that allows one to get access to the actual data given a MemPlace that points to alloc2?</li>\n</ul>\n<p>for that i would have to look at the code itself. It seems to me like your currently trying to implement the valtree conversion for references? afaik<br>\n<code>fn check_const_value_eq</code> already handles stuff like str in an okayish way <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> or maybe you can look at <code>fn destructure_const</code>if you haven't already.</p>\n<p>Can take some time next week to delve into this, though i would like to see the bigger picture of where you're stuck for that .</p>",
        "id": 268873440,
        "sender_full_name": "lcnr",
        "timestamp": 1642785561
    },
    {
        "content": "<p><code>deref_operand</code> does value-to-place conversion (turning a ptr value into a place for the same memory location), like the <code>*</code> operator in C or Rust.</p>",
        "id": 268886810,
        "sender_full_name": "RalfJ",
        "timestamp": 1642791032
    },
    {
        "content": "<p>this does not involve any memory access -- memory accesses occur when reading from or writing to a place</p>",
        "id": 268886915,
        "sender_full_name": "RalfJ",
        "timestamp": 1642791081
    },
    {
        "content": "<p>but e.g. <code>&amp;mut *x</code> does no memory access, which shows that clearly <code>*</code> does not do a memory access</p>",
        "id": 268886960,
        "sender_full_name": "RalfJ",
        "timestamp": 1642791098
    },
    {
        "content": "<blockquote>\n<p>Is there a function that allows one to get access to the actual data given a MemPlace that points to alloc2?</p>\n</blockquote>\n<p>yes, <code>read_immediate</code>. there is a <code>impl&lt;'tcx, Tag: Provenance&gt; From&lt;MPlaceTy&lt;'tcx, Tag&gt;&gt; for OpTy&lt;'tcx, Tag&gt;</code> so you can do <code>&amp;mplace.into()</code> and pass that to a <code>read_*</code> method.<br>\n(but note that I dont know what you want to achieve, I dont have the high-level picture here.)</p>",
        "id": 268887572,
        "sender_full_name": "RalfJ",
        "timestamp": 1642791348
    },
    {
        "content": "<p>Thanks for the answers.</p>\n<p>Ah, <code>read_immediate</code> and <code>read_immediate_from_mplace</code> are what I was looking for, reading those also helped to clear up the confusion I had about how pointers are handled in const-eval.</p>",
        "id": 268953983,
        "sender_full_name": "BN",
        "timestamp": 1642852508
    },
    {
        "content": "<p>I have a question about how we should handle slices whose byte data contains uninitialised bits. Currently I'm handling slices in the following way in <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_const_eval/const_eval/mod.rs.html#57-133\">const_to_valtree_inner</a>:</p>\n<div class=\"codehilite\"><pre><span></span><code>        ty::Ref(..) if place_ty.is_slice() =&gt; {\n            match ecx.try_read_immediate_from_mplace(&amp;place) {\n                Ok(Some(imm)) =&gt; {\n                    debug!(&quot;immediate: {:?}&quot;, imm);\n                    let (alloc, range) = ecx.get_alloc_from_imm_scalar_pair(imm);\n\n                    let alloc_bytes = match alloc.get_bytes(&amp;ecx.tcx, range) {\n                        Ok(bytes) =&gt; bytes,\n                        Err(_) =&gt; return None,\n                    };\n                    debug!(?alloc_bytes);\n\n                    let bytes = ecx.tcx.arena.alloc_slice(alloc_bytes);\n                    let len = bytes.len();\n                    let slice = ty::ValSlice { bytes};\n\n                    Some(ty::ValTree::SliceOrStr(slice))\n                }\n                _ =&gt; {\n                    None\n                }\n            }\n        }\n</code></pre></div>\n<p>where <code>get_alloc_from_imm_scalar_pair</code> is:</p>\n<div class=\"codehilite\"><pre><span></span><code>    pub fn get_alloc_from_imm_scalar_pair(\n        &amp;self,\n        imm: ImmTy&lt;&#39;tcx, M::PointerTag&gt;,\n    ) -&gt; (&amp;Allocation, AllocRange) {\n        match imm.imm {\n            Immediate::ScalarPair(a, b) =&gt; {\n                let (data, start) = match self.scalar_to_ptr(a.check_init().unwrap()).into_parts() {\n                    (Some(alloc_id), offset) =&gt; {\n                        (self.tcx.global_alloc(alloc_id).unwrap_memory(), offset.bytes())\n                    }\n                    (None, _offset) =&gt; (\n                        self.tcx.intern_const_alloc(Allocation::from_bytes_byte_aligned_immutable(\n                            b&quot;&quot; as &amp;[u8],\n                        )),\n                        0,\n                    ),\n                };\n                let len = b.to_machine_usize(self).unwrap();\n                let size = Size::from_bytes(len);\n                let start = Size::from_bytes(start);\n\n                (data, AllocRange { start, size })\n            }\n            _ =&gt; bug!(&quot;{:?} not a ScalarPair&quot;, imm),\n        }\n    }\n</code></pre></div>\n<p>First, is this reasonable to handle slices that way? </p>\n<p>We can't get bytes for slices that contain uninitialised bytes, I would assume that the correct way to handle those is just return <code>None</code> in <code>const_to_valtree</code> or should we handle those differently?</p>",
        "id": 269716532,
        "sender_full_name": "BN",
        "timestamp": 1643366659
    },
    {
        "content": "<blockquote>\n<p>I would assume that the correct way to handle those is just return None in const_to_valtree or should we handle those differently?</p>\n</blockquote>\n<p>yeah, trying to convert uninit bytes into a valtree should fail</p>",
        "id": 269721933,
        "sender_full_name": "lcnr",
        "timestamp": 1643369599
    },
    {
        "content": "<p><em>note: please use \"```rust\" in code snippets, they are fairly hard to read for me without syntax highlighting</em></p>",
        "id": 269722111,
        "sender_full_name": "lcnr",
        "timestamp": 1643369706
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/269721933\">said</a>:</p>\n<blockquote>\n<p>yeah, trying to convert uninit bytes into a valtree should fail</p>\n</blockquote>\n<p>imo we can even always error eagerly here, even during selection, as imo having the requirement that const arguments either evaluate to a valtree or error seems nice to me</p>",
        "id": 269722344,
        "sender_full_name": "lcnr",
        "timestamp": 1643369854
    },
    {
        "content": "<p>though that decision will need signoff by the lang team, and by <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> :p (also think the same about non utf8 strs as const arguments, they should just error imo)</p>",
        "id": 269722451,
        "sender_full_name": "lcnr",
        "timestamp": 1643369915
    },
    {
        "content": "<p>Well, I think we actually have no choice but to error <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 269722676,
        "sender_full_name": "oli",
        "timestamp": 1643370081
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/269722344\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/269721933\">said</a>:</p>\n<blockquote>\n<p>yeah, trying to convert uninit bytes into a valtree should fail</p>\n</blockquote>\n<p>imo we can even always error eagerly here, even during selection, as imo having the requirement that const arguments either evaluate to a valtree or error seems nice to me</p>\n</blockquote>\n<p>We do get ICEs when building std though if we error in the uninitialised case.</p>",
        "id": 269722775,
        "sender_full_name": "BN",
        "timestamp": 1643370142
    },
    {
        "content": "<p>that seems fairly correct to me, <code>get_alloc_from_imm_scalar_pair</code> should probably not ice on wrong values, but apart from that it seems fairly nice</p>",
        "id": 269722795,
        "sender_full_name": "lcnr",
        "timestamp": 1643370158
    },
    {
        "content": "<p>Maybe I'm calling <code>const_to_valtree</code> in the wrong place though</p>",
        "id": 269722800,
        "sender_full_name": "BN",
        "timestamp": 1643370161
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"328097\">BN</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/269722775\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/269722344\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/269721933\">said</a>:</p>\n<blockquote>\n<p>yeah, trying to convert uninit bytes into a valtree should fail</p>\n</blockquote>\n<p>imo we can even always error eagerly here, even during selection, as imo having the requirement that const arguments either evaluate to a valtree or error seems nice to me</p>\n</blockquote>\n<p>We do get ICEs when building std though if we error in the uninitialised case.</p>\n</blockquote>\n<p>why that?</p>",
        "id": 269722807,
        "sender_full_name": "lcnr",
        "timestamp": 1643370165
    },
    {
        "content": "<p>where does it ice, i.e. what's the backtrace</p>",
        "id": 269722821,
        "sender_full_name": "lcnr",
        "timestamp": 1643370174
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/269722676\">said</a>:</p>\n<blockquote>\n<p>Well, I think we actually have no choice but to error <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>\n</blockquote>\n<p>why? inside of selection we could also silently fail and reject the relevant candidate here</p>",
        "id": 269722886,
        "sender_full_name": "lcnr",
        "timestamp": 1643370224
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/269722807\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"328097\">BN</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/269722775\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/269722344\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/269721933\">said</a>:</p>\n<blockquote>\n<p>yeah, trying to convert uninit bytes into a valtree should fail</p>\n</blockquote>\n<p>imo we can even always error eagerly here, even during selection, as imo having the requirement that const arguments either evaluate to a valtree or error seems nice to me</p>\n</blockquote>\n<p>We do get ICEs when building std though if we error in the uninitialised case.</p>\n</blockquote>\n<p>why that?</p>\n</blockquote>\n<p><a href=\"/user_uploads/4715/Cczx-Zr86CRl0hHGm7tLX-nn/backtrace.txt\">backtrace.txt</a></p>",
        "id": 269723758,
        "sender_full_name": "BN",
        "timestamp": 1643370683
    },
    {
        "content": "<p>I'm calling <code>const_to_valtree</code> in <code>eval_to_const_value_raw_provider</code></p>",
        "id": 269723804,
        "sender_full_name": "BN",
        "timestamp": 1643370708
    },
    {
        "content": "<p>eh sorry I meant in <code>turn_into_const_value</code>, but the backtrace shows that anyway</p>",
        "id": 269724063,
        "sender_full_name": "BN",
        "timestamp": 1643370831
    },
    {
        "content": "<p>you're not emitting an error in the uninitialized case here, are you? that's an internal compiler error <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 269724072,
        "sender_full_name": "lcnr",
        "timestamp": 1643370836
    },
    {
        "content": "<p>well this is if I use:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">alloc_bytes</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">alloc</span><span class=\"p\">.</span><span class=\"n\">get_bytes</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">ecx</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">range</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">bytes</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">bug</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">.)</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>\n<p>instead of returning None in the <code>Err</code> case</p>",
        "id": 269724240,
        "sender_full_name": "BN",
        "timestamp": 1643370922
    },
    {
        "content": "<p>so, <code>charwidth_table</code> is never used as a const argument, so we shouldn't try to get a valtree for it <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 269724421,
        "sender_full_name": "lcnr",
        "timestamp": 1643371018
    },
    {
        "content": "<p>but it also shouldn't error if it were used in a valtree <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 269724448,
        "sender_full_name": "lcnr",
        "timestamp": 1643371041
    },
    {
        "content": "<p>ah, a slice of <code>(char, char, u8, u8)</code> contains padding bytes xx</p>",
        "id": 269724497,
        "sender_full_name": "lcnr",
        "timestamp": 1643371074
    },
    {
        "content": "<p>that's probably what's wrong here</p>",
        "id": 269724509,
        "sender_full_name": "lcnr",
        "timestamp": 1643371079
    },
    {
        "content": "<p>do you mind opening a draft pr or sharing your current progress?</p>",
        "id": 269724636,
        "sender_full_name": "lcnr",
        "timestamp": 1643371149
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"328097\">BN</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/269724240\">said</a>:</p>\n<blockquote>\n<p>well this is if I use:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">alloc_bytes</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">alloc</span><span class=\"p\">.</span><span class=\"n\">get_bytes</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">ecx</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">range</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">bytes</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">bug</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">.)</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>\n<p>instead of returning None in the <code>Err</code> case</p>\n</blockquote>\n<p>emitting a compiler bug isn't right here, i would like to emit an error instead of <code>bug!</code> here, though we probably don't have a good span for that</p>",
        "id": 269724715,
        "sender_full_name": "lcnr",
        "timestamp": 1643371201
    },
    {
        "content": "<p>probably makes sense to change <code>const_to_valtree</code> to return a <code>Result</code> instead of an option</p>",
        "id": 269724851,
        "sender_full_name": "lcnr",
        "timestamp": 1643371235
    },
    {
        "content": "<p>I can do that, but would need to clean this up first. I'm also currently trying to incoorporate <code>Valtree</code> into <code>ty::Const</code> to implement <code>PartialEq</code> and <code>Eq</code> in terms of valtree, without getting rid of <code>ConstValue</code> completely yet. I can open the WIP after that.</p>",
        "id": 269724947,
        "sender_full_name": "BN",
        "timestamp": 1643371289
    },
    {
        "content": "<p>or wait, failing to construct a valtree can just always error eagerly, don't think that returning <code>Result</code> is necessary</p>",
        "id": 269724967,
        "sender_full_name": "lcnr",
        "timestamp": 1643371305
    },
    {
        "content": "<blockquote>\n<p>without getting rid of ConstValue completely yet</p>\n</blockquote>\n<p>what's blocking you from completely removing <code>ConstValue</code> from <code>ty::Const</code> rn?</p>",
        "id": 269725030,
        "sender_full_name": "lcnr",
        "timestamp": 1643371329
    },
    {
        "content": "<p>because I don't know yet how to convert valtree back into <code>mir::ConstValue</code></p>",
        "id": 269725069,
        "sender_full_name": "BN",
        "timestamp": 1643371353
    },
    {
        "content": "<p>ah <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 269725131,
        "sender_full_name": "lcnr",
        "timestamp": 1643371389
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/269724967\">said</a>:</p>\n<blockquote>\n<p>or wait, failing to construct a valtree can just always error eagerly, don't think that returning <code>Result</code> is necessary</p>\n</blockquote>\n<p>not completely sure what you mean here now, so you do want us to ICE if this fails?</p>",
        "id": 269725251,
        "sender_full_name": "BN",
        "timestamp": 1643371449
    },
    {
        "content": "<p>no, return <code>None</code> if it fails</p>",
        "id": 269725278,
        "sender_full_name": "lcnr",
        "timestamp": 1643371471
    },
    {
        "content": "<p>ok</p>",
        "id": 269725286,
        "sender_full_name": "BN",
        "timestamp": 1643371478
    },
    {
        "content": "<p>and what can i do about the padding problem?</p>",
        "id": 269725322,
        "sender_full_name": "BN",
        "timestamp": 1643371500
    },
    {
        "content": "<p>but when encountering <code>None</code> from <code>const_to_valtree</code> we can always error i think</p>",
        "id": 269725324,
        "sender_full_name": "lcnr",
        "timestamp": 1643371500
    },
    {
        "content": "<p>cry? <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 269725614,
        "sender_full_name": "lcnr",
        "timestamp": 1643371645
    },
    {
        "content": "<p>not sure myself</p>",
        "id": 269725625,
        "sender_full_name": "lcnr",
        "timestamp": 1643371653
    },
    {
        "content": "<p>so you can't eagerly convert a slice into bytes</p>",
        "id": 269725648,
        "sender_full_name": "lcnr",
        "timestamp": 1643371674
    },
    {
        "content": "<p>i think yuo can reuse <code>branches</code> for that, with the length as <code>n</code></p>",
        "id": 269725729,
        "sender_full_name": "lcnr",
        "timestamp": 1643371698
    },
    {
        "content": "<p>can call that directly with the <code>ty::Ref</code> to a slice afaict</p>",
        "id": 269725938,
        "sender_full_name": "lcnr",
        "timestamp": 1643371830
    },
    {
        "content": "<p>codegen should be able to handle padding correctly though, right? I haven't looked too deeply into that, but I think <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_codegen_llvm/consts.rs.html#27\"><code>const_alloc_to_llvm</code></a> should probably handle padding right?</p>",
        "id": 269725976,
        "sender_full_name": "BN",
        "timestamp": 1643371857
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/269725729\">said</a>:</p>\n<blockquote>\n<p>i think yuo can reuse <code>branches</code> for that, with the length as <code>n</code></p>\n</blockquote>\n<p>I think @oli suspected recursing on slice types to be the source for the large perf regression</p>",
        "id": 269726146,
        "sender_full_name": "BN",
        "timestamp": 1643371949
    },
    {
        "content": "<p>we can specialcase <code>&amp;[&lt;integer_ty&gt;]</code> to directly read bytes</p>",
        "id": 269726211,
        "sender_full_name": "lcnr",
        "timestamp": 1643371988
    },
    {
        "content": "<p>but imo it's fine to not care about any perf regressions for now</p>",
        "id": 269726240,
        "sender_full_name": "lcnr",
        "timestamp": 1643371999
    },
    {
        "content": "<p>ok, I'll try that. Thanks for the help</p>",
        "id": 269726327,
        "sender_full_name": "BN",
        "timestamp": 1643372042
    },
    {
        "content": "<p>i suggest using <code>branches</code> for now and then later adding a specialcase for <code>&amp;[u8]</code> or whatever if it gets necessary for perf</p>",
        "id": 269726347,
        "sender_full_name": "lcnr",
        "timestamp": 1643372052
    },
    {
        "content": "<p>Padding should not affect valtree creation. We only read bytes of the fields</p>",
        "id": 269728300,
        "sender_full_name": "oli",
        "timestamp": 1643373168
    },
    {
        "content": "<blockquote>\n<p>why? inside of selection we could also silently fail and reject the relevant candidate here</p>\n</blockquote>\n<p>Right, slightly concerning, but probably ok. I'd prefer to start with hard errors</p>",
        "id": 269728495,
        "sender_full_name": "oli",
        "timestamp": 1643373270
    },
    {
        "content": "<p>If padding affects valtree creation I screwed up</p>",
        "id": 269728578,
        "sender_full_name": "oli",
        "timestamp": 1643373314
    },
    {
        "content": "<p>Lmk if I can help debug</p>",
        "id": 269728600,
        "sender_full_name": "oli",
        "timestamp": 1643373324
    },
    {
        "content": "<p>You shouldn't convert valtree back to constvalue. Codegen can handle both... oh wait. My valtree pr isn't merged yet</p>",
        "id": 269728885,
        "sender_full_name": "oli",
        "timestamp": 1643373460
    },
    {
        "content": "<p><span aria-label=\"sob\" class=\"emoji emoji-1f62d\" role=\"img\" title=\"sob\">:sob:</span></p>",
        "id": 269728897,
        "sender_full_name": "oli",
        "timestamp": 1643373467
    },
    {
        "content": "<p>I think you want to fix up the valtree PR first or at least cherry pick a few changes out of it</p>",
        "id": 269728985,
        "sender_full_name": "oli",
        "timestamp": 1643373494
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/269728578\">said</a>:</p>\n<blockquote>\n<p>If padding affects valtree creation I screwed up</p>\n</blockquote>\n<p>it doesn't, but your pr didn't implement valtree conversions for slices and references, so <span class=\"user-mention silent\" data-user-id=\"328097\">BN</span> still has to do that</p>",
        "id": 269731633,
        "sender_full_name": "lcnr",
        "timestamp": 1643374852
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/269728885\">said</a>:</p>\n<blockquote>\n<p>You shouldn't convert valtree back to constvalue. Codegen can handle both... oh wait. My valtree pr isn't merged yet</p>\n</blockquote>\n<p>can you go more into depth why that isn't necessary? during codegen, we need to convert valtrees to llvm constants if const params are used inside of functions</p>",
        "id": 269731855,
        "sender_full_name": "lcnr",
        "timestamp": 1643374937
    },
    {
        "content": "<p>did you already implement this conversion or is there something i am missing here?</p>",
        "id": 269731914,
        "sender_full_name": "lcnr",
        "timestamp": 1643374963
    },
    {
        "content": "<p>I thought I did, but it's def not merged. Maybe I forgot to push?</p>",
        "id": 269731942,
        "sender_full_name": "oli",
        "timestamp": 1643374983
    },
    {
        "content": "<p>the most recent pr here is <a href=\"https://github.com/rust-lang/rust/issues/83234\">#83234</a>  afaik</p>",
        "id": 269731992,
        "sender_full_name": "lcnr",
        "timestamp": 1643375013
    },
    {
        "content": "<p>Yea, so I implemented valtree to llvm conversion, but likely not exhaustively</p>",
        "id": 269732005,
        "sender_full_name": "oli",
        "timestamp": 1643375021
    },
    {
        "content": "<p>In any case, I'm not sure if converting to constvalue is the right thing or whether we should just go from valtree to backend directly</p>",
        "id": 269732118,
        "sender_full_name": "oli",
        "timestamp": 1643375065
    },
    {
        "content": "<p>Where are you encountering this anyway? Feels odd to have complex valtrees in codegen, I thought that wouldn't happen</p>",
        "id": 269732193,
        "sender_full_name": "oli",
        "timestamp": 1643375109
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(adt_const_params)]</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[derive(Debug, PartialEq, Eq)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Inner</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"nb\">static</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">u16</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"cp\">#[derive(Debug, PartialEq, Eq)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">MyStruct</span><span class=\"p\">(</span><span class=\"n\">Inner</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"nb\">static</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">VALUE</span>: <span class=\"nc\">MyStruct</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">VALUE</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">foo</span>::<span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">MyStruct</span><span class=\"p\">(</span><span class=\"n\">Inner</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 269732582,
        "sender_full_name": "lcnr",
        "timestamp": 1643375309
    },
    {
        "content": "<p>we're going to end up with an instance of <code>foo::&lt;SOME_VALTREE&gt;</code> and inside of that instance we need to create an llvm value/constant for <code>SOME_VALTREE</code> when using it</p>",
        "id": 269732703,
        "sender_full_name": "lcnr",
        "timestamp": 1643375370
    },
    {
        "content": "<p>Ooh, inside the function, right</p>",
        "id": 269734443,
        "sender_full_name": "oli",
        "timestamp": 1643376198
    },
    {
        "content": "<p>Yea</p>",
        "id": 269734473,
        "sender_full_name": "oli",
        "timestamp": 1643376210
    },
    {
        "content": "<p>Still unsure whether we go indirectly through constvalue or not</p>",
        "id": 269734501,
        "sender_full_name": "oli",
        "timestamp": 1643376234
    },
    {
        "content": "<p>Opinions?</p>",
        "id": 269734507,
        "sender_full_name": "oli",
        "timestamp": 1643376237
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> not sure how we currently do the conversions</p>",
        "id": 269734605,
        "sender_full_name": "lcnr",
        "timestamp": 1643376279
    },
    {
        "content": "<p>would have to check whether we would then have to reimplement the conversion for each backend</p>",
        "id": 269734749,
        "sender_full_name": "lcnr",
        "timestamp": 1643376332
    },
    {
        "content": "<p>i think going valtree -&gt; const value has the advantage of being easily verifiable</p>",
        "id": 269734813,
        "sender_full_name": "lcnr",
        "timestamp": 1643376355
    },
    {
        "content": "<p>go valtree -&gt; const value, and add a debug assert that const value -&gt; valtree results in the same valtree again</p>",
        "id": 269734955,
        "sender_full_name": "lcnr",
        "timestamp": 1643376418
    },
    {
        "content": "<p>so yeah, prefer valtree to const value and then to backend const <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 269735049,
        "sender_full_name": "lcnr",
        "timestamp": 1643376474
    },
    {
        "content": "<p>Sgtm</p>",
        "id": 269735629,
        "sender_full_name": "oli",
        "timestamp": 1643376747
    },
    {
        "content": "<p>Now... the best way to do this is probably CTFE itself</p>",
        "id": 269735697,
        "sender_full_name": "oli",
        "timestamp": 1643376781
    },
    {
        "content": "<p>It is a backend, too</p>",
        "id": 269735711,
        "sender_full_name": "oli",
        "timestamp": 1643376788
    },
    {
        "content": "<p>And you need lots of CTFE features for the back-conversion anyway I'm guessing</p>",
        "id": 269736445,
        "sender_full_name": "oli",
        "timestamp": 1643377087
    },
    {
        "content": "<p>Then you can spin up an evalcx and let it do the conversion and interning for you</p>",
        "id": 269736446,
        "sender_full_name": "oli",
        "timestamp": 1643377087
    },
    {
        "content": "<p>Like... treat all aggregate valtrees like an Rvalue::Aggregate and share code</p>",
        "id": 269736447,
        "sender_full_name": "oli",
        "timestamp": 1643377087
    },
    {
        "content": "<p>There is a problem with the current valtree implementation (on master). If you use the <code>const_to_valtree</code> query, e.g. by adding </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span>::<span class=\"n\">ParamEnvAnd</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">param_env</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">value</span>: <span class=\"nc\">constant</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">valtree</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">const_to_valtree</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>to <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_const_eval/const_eval/eval_queries.rs.html#193-213\"><code>turn_into_const_value</code></a> you get lots of ICEs of the following form when building std:</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;rustc&#39; panicked at &#39;forcing query with already existing `DepNode`\n- query-key: ParamEnvAnd { param_env: ParamEnv { caller_bounds: [], reveal: UserFacing, constness: NotConst }, value: ConstAlloc { alloc_id: alloc36, ty: usize } }\n- dep-node: const_to_valtree(8183515e4cdd3830-6eb438d76f2aa9d5)&#39;, /Users/bn/Documents/rust-local-fork/playground/compiler/rustc_query_system/src/dep_graph/graph.rs:300:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\nerror: internal compiler error: unexpected panic\n\nnote: the compiler unexpectedly panicked. this is a bug.\n\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&amp;template=ice.md\n\nnote: rustc 1.60.0-dev running on x86_64-apple-darwin\n\nnote: compiler flags: -Z unstable-options -Z macro-backtrace -Z osx-rpath-install-name -Z crate-attr=doc(html_root_url=&quot;https://doc.rust-lang.org/nightly/&quot;) -Z binary-dep-depinfo -Z force-unstable-if-unmarked -C opt-level=3 -C embed-bitcode=no -C split-debuginfo=unpacked -C codegen-units=4 -C debuginfo=1 -C debug-assertions=on -C incremental -C symbol-mangling-version=legacy -C link-args=-Wl,-rpath,@loader_path/../lib -C split-debuginfo=unpacked -C prefer-dynamic -C llvm-args=-import-instr-limit=10 -C embed-bitcode=yes --crate-type lib\n\nnote: some of the compiler flags provided by cargo are hidden\n\nquery stack during panic:\n#0 [const_to_valtree] destructure constant\n#1 [eval_to_const_value_raw] simplifying constant for the type system `num::dec2flt::decimal::Decimal::digits::{constant#0}`\nend of query stack\n</code></pre></div>",
        "id": 269782600,
        "sender_full_name": "BN",
        "timestamp": 1643395255
    },
    {
        "content": "<p>Whoa, sounds like <code>ConstAlloc</code>'s PartialEq or StableHash impl is broken. Probably the former. It should compare equal if the content is equal, so if the memory behind the alloc ID is the same</p>",
        "id": 269786116,
        "sender_full_name": "oli",
        "timestamp": 1643396683
    },
    {
        "content": "<p>OK thanks, I'll take a look at that</p>",
        "id": 269787748,
        "sender_full_name": "BN",
        "timestamp": 1643397349
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/269722344\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/269721933\">said</a>:</p>\n<blockquote>\n<p>yeah, trying to convert uninit bytes into a valtree should fail</p>\n</blockquote>\n<p>imo we can even always error eagerly here, even during selection, as imo having the requirement that const arguments either evaluate to a valtree or error seems nice to me</p>\n</blockquote>\n<p>yes -- the entire point of valtrees is that all const generic arguments must be representable as valtrees. that ensures that they are sufficiently well-behaved to not break everything. hopefully.^^</p>",
        "id": 269793458,
        "sender_full_name": "RalfJ",
        "timestamp": 1643399939
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/269721933\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>I would assume that the correct way to handle those is just return None in const_to_valtree or should we handle those differently?</p>\n</blockquote>\n<p>yeah, trying to convert uninit bytes into a valtree should fail</p>\n</blockquote>\n<p>I think this was already noted, but just to be sure: uninit <code>u8</code> should definitely fail, but padding should just be ignored entirely by valtree construction so it is okay for that to be uninit.</p>",
        "id": 269793741,
        "sender_full_name": "RalfJ",
        "timestamp": 1643400040
    },
    {
        "content": "<p>I have some valtree notes at <a href=\"https://hackmd.io/Qvrj_eOFTkCHZrhJ7f1ItA\">https://hackmd.io/Qvrj_eOFTkCHZrhJ7f1ItA</a>, but I think some of that is superseded by oli's (not yet merged) PR</p>",
        "id": 269794091,
        "sender_full_name": "RalfJ",
        "timestamp": 1643400198
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/269786116\">said</a>:</p>\n<blockquote>\n<p>Whoa, sounds like <code>ConstAlloc</code>'s PartialEq or StableHash impl is broken. Probably the former. It should compare equal if the content is equal, so if the memory behind the alloc ID is the same</p>\n</blockquote>\n<p>is checking the content correct? i thought that we don't dedup allocations <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 269796098,
        "sender_full_name": "lcnr",
        "timestamp": 1643400980
    },
    {
        "content": "<p>though at this point I don't know what to do <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 269796576,
        "sender_full_name": "lcnr",
        "timestamp": 1643401091
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/269793458\">said</a>:</p>\n<blockquote>\n<p>yes -- the entire point of valtrees is that all const generic arguments must be representable as valtrees. that ensures that they are sufficiently well-behaved to not break everything. hopefully.^^</p>\n</blockquote>\n<p>ah, that wasn't what I was saying, my concerns were about things like the following</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(generic_const_exprs)]</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">B</span>: <span class=\"kt\">bool</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">transmute</span>::<span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">B</span>: <span class=\"kt\">bool</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"o\">&lt;</span><span class=\"n\">B</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 269796978,
        "sender_full_name": "lcnr",
        "timestamp": 1643401287
    },
    {
        "content": "<p>vs.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(generic_const_exprs)]</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">B</span>: <span class=\"kt\">bool</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">bool_or_panic</span><span class=\"p\">(</span><span class=\"n\">n</span>: <span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"fm\">panic!</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bool_or_panic</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">B</span>: <span class=\"kt\">bool</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"o\">&lt;</span><span class=\"n\">B</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 269797244,
        "sender_full_name": "lcnr",
        "timestamp": 1643401426
    },
    {
        "content": "<p>the second example with an explicit panic should compile imo. We check whether the first impl applies for <code>[u8: 2]</code>, see that it uses a constant that panics (failing to satisfy its const evaluatable bound), and therefore consider the two impls to not overlap</p>",
        "id": 269797422,
        "sender_full_name": "lcnr",
        "timestamp": 1643401497
    },
    {
        "content": "<p>we could do the same thing for the first example. Check whether the two impls overlap by looking at the first impl with <code>N == 2</code>. We are then unable to convert the final value to a valtree and therefore consider the first impl to not apply for <code>[u8; 2]</code> and consider the two impls to not overlap, causing this to compile</p>",
        "id": 269797679,
        "sender_full_name": "lcnr",
        "timestamp": 1643401634
    },
    {
        "content": "<p>for the first example i however want to just eagerly error because the user caused ub in some way</p>",
        "id": 269797747,
        "sender_full_name": "lcnr",
        "timestamp": 1643401668
    },
    {
        "content": "<p><em>note: the first example currently fails even without converting the result to a valtree, we could use some more complex type for which we only error once we make a deep valtree conversion</em></p>",
        "id": 269797864,
        "sender_full_name": "lcnr",
        "timestamp": 1643401726
    },
    {
        "content": "<p>does that explanation makes sense to you <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span>? i don't think it is immediately obvious whether failing to construct a valtree for some constant during selection should error loudly or silently fail, which would only cause us to discard that selection candidate, not necessarily causing compilation to fail</p>",
        "id": 269798115,
        "sender_full_name": "lcnr",
        "timestamp": 1643401852
    },
    {
        "content": "<p>the first example causes compile-time UB, which we dont guarantee to detect</p>",
        "id": 269799569,
        "sender_full_name": "RalfJ",
        "timestamp": 1643402563
    },
    {
        "content": "<p>I dont have good intuition for trait selection stuff, so I am slightly worried about using \"CTFE failed\" as a signal to <em>allow</em> other code</p>",
        "id": 269799655,
        "sender_full_name": "RalfJ",
        "timestamp": 1643402617
    },
    {
        "content": "<p>that sounds like a monotonicity rule broken</p>",
        "id": 269799666,
        "sender_full_name": "RalfJ",
        "timestamp": 1643402626
    },
    {
        "content": "<p>it means if we at some point make our UB checker worse (so it detects fewer bugs) -- which we should be free to do -- then suddenly that could lead to existing code <em>failing</em> to compile</p>",
        "id": 269799752,
        "sender_full_name": "RalfJ",
        "timestamp": 1643402655
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/269799752\">said</a>:</p>\n<blockquote>\n<p>it means if we at some point make our UB checker worse (so it detects fewer bugs) -- which we should be free to do -- then suddenly that could lead to existing code <em>failing</em> to compile</p>\n</blockquote>\n<p>that is true, and a reason for us to always emit an error when encountering ub</p>",
        "id": 269799859,
        "sender_full_name": "lcnr",
        "timestamp": 1643402710
    },
    {
        "content": "<p>I would extend that to panics, now considering lib crate authors</p>",
        "id": 269799902,
        "sender_full_name": "RalfJ",
        "timestamp": 1643402741
    },
    {
        "content": "<p>a lib crate could make a const panic in fewer situations and then suddenly that leads to downstream code failing? that seems... very surprising at least</p>",
        "id": 269799970,
        "sender_full_name": "RalfJ",
        "timestamp": 1643402763
    },
    {
        "content": "<p>so my personal preference -- in particular since nothing here is precisely specified, let alone formally modeled -- would be to be cautious and never use \"CTFE failed\" as a signal to allow <em>anything</em>. always treat it as \"CTFE failed now but who knows, it might succeed in the future\".</p>",
        "id": 269800034,
        "sender_full_name": "RalfJ",
        "timestamp": 1643402810
    },
    {
        "content": "<p>(so in a \"multiple worlds\" view of trait selection, \"CTFE failed\" might be true at the current world but not in future worlds. not sure if I am making sense here, this refers to some blog posts niko wrote a long time ago.)</p>",
        "id": 269800112,
        "sender_full_name": "RalfJ",
        "timestamp": 1643402855
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/269799970\">said</a>:</p>\n<blockquote>\n<p>a lib crate could make a const panic in fewer situations and then suddenly that leads to downstream code failing? that seems... very surprising at least</p>\n</blockquote>\n<p>i always (implicitly) assumed <code>panic! -&gt; returns stuff</code> to be breaking, i.e. the act of panicking being part of the stability guarantees anyways</p>",
        "id": 269800237,
        "sender_full_name": "lcnr",
        "timestamp": 1643402912
    },
    {
        "content": "<p>but after seeing that assumption explicitly stated makes it seem a lot less desirable to me</p>",
        "id": 269800286,
        "sender_full_name": "lcnr",
        "timestamp": 1643402941
    },
    {
        "content": "<p>and probably not the way large parts of the rust community think about it</p>",
        "id": 269800372,
        "sender_full_name": "lcnr",
        "timestamp": 1643402978
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"328097\">@BN</span> should actually write a summary for this, but suppressing ctfe errors during trait selection might not actually be needed <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 269800861,
        "sender_full_name": "lcnr",
        "timestamp": 1643403225
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/269800034\">said</a>:</p>\n<blockquote>\n<p>so my personal preference -- in particular since nothing here is precisely specified, let alone formally modeled -- would be to be cautious and never use \"CTFE failed\" as a signal to allow <em>anything</em>. always treat it as \"CTFE failed now but who knows, it might succeed in the future\".</p>\n</blockquote>\n<p>the problem here is that CTFE silently failing is needed for the \"default way of writing impls\" to work as expected</p>",
        "id": 269801769,
        "sender_full_name": "lcnr",
        "timestamp": 1643403695
    },
    {
        "content": "<p>e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">CanShrink</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// ...</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 269801904,
        "sender_full_name": "lcnr",
        "timestamp": 1643403761
    },
    {
        "content": "<p>we want to be able to check <code>[u8; 0]: CanShrink&lt;_&gt;</code> without causing loud errors</p>",
        "id": 269801965,
        "sender_full_name": "lcnr",
        "timestamp": 1643403797
    },
    {
        "content": "<p>even by adding a bound which checks for \"eval to <code>true</code>\" instead of panics, e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">CanShrink</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">BoolValue</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">}</span>: <span class=\"nc\">IsTrue</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// ...</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 269802156,
        "sender_full_name": "lcnr",
        "timestamp": 1643403893
    },
    {
        "content": "<p>we still have the <code>0 - 1</code> constant in the <code>TraitRef</code> for that impl, which we will try to unify with stuff before considering any where bounds, still causing a ctfe panic</p>",
        "id": 269802242,
        "sender_full_name": "lcnr",
        "timestamp": 1643403942
    },
    {
        "content": "<p>so we either add some ingenious hack here to deal with this, or at least sometimes silence ctfe errors are a necessity</p>",
        "id": 269802371,
        "sender_full_name": "lcnr",
        "timestamp": 1643403990
    },
    {
        "content": "<p>got to write a summary for this issue next week, even if we don't change the current plan, it's still good to explicitly write down any tradeoffs</p>",
        "id": 269802459,
        "sender_full_name": "lcnr",
        "timestamp": 1643404043
    },
    {
        "content": "<p>yeah while thinking about your 2nd original example I did realize that \"abort compilation on any error\" doesnt obviously work either</p>",
        "id": 269802697,
        "sender_full_name": "RalfJ",
        "timestamp": 1643404161
    },
    {
        "content": "<p>I am not quite sure what to make of these \"speculative\" CTFE executions. I dont have a good mental model that would explain what intuitively should happen here.</p>",
        "id": 269802736,
        "sender_full_name": "RalfJ",
        "timestamp": 1643404185
    },
    {
        "content": "<p>but this feels related to negative impls, somehow?</p>",
        "id": 269802763,
        "sender_full_name": "RalfJ",
        "timestamp": 1643404197
    },
    {
        "content": "<p>so in that sense maybe CTFE evalaution failure should be more like \"impl not found\" and less like \"negative impl found\"? that should make CTFE <em>not</em> failing in the future a future-compat change, similar to adding more impls.</p>",
        "id": 269802942,
        "sender_full_name": "RalfJ",
        "timestamp": 1643404289
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/269802942\">said</a>:</p>\n<blockquote>\n<p>so in that sense maybe CTFE evalaution failure should be more like \"impl not found\" and less like \"negative impl found\"? that should make CTFE <em>not</em> failing in the future a future-compat change, similar to adding more impls.</p>\n</blockquote>\n<p>that is a good idea i didn't think about <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> </p>\n<blockquote>\n<p>so we either add some ingenious hack here to deal with this</p>\n</blockquote>\n<p>gj <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span>  :p</p>",
        "id": 269803240,
        "sender_full_name": "lcnr",
        "timestamp": 1643404443
    },
    {
        "content": "<p>I dont know what I did but I am glad it is helpful :)</p>",
        "id": 269804027,
        "sender_full_name": "RalfJ",
        "timestamp": 1643404777
    },
    {
        "content": "<blockquote>\n<p>is checking the content correct? i thought that we don't dedup allocations <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>\n</blockquote>\n<p>We don't proactively. But two constants with the same memory are equal, otherwise we could end up with two constants that are equal but compare different. That breaks the type system. I mean it's the very reason we do all this valtree stuff...</p>",
        "id": 269808076,
        "sender_full_name": "oli",
        "timestamp": 1643406872
    },
    {
        "content": "<p>It is hard to get the equality right, as you can see from this error</p>",
        "id": 269808113,
        "sender_full_name": "oli",
        "timestamp": 1643406898
    },
    {
        "content": "<p>this all sounds like hacking around the lack of valtrees?</p>",
        "id": 269953444,
        "sender_full_name": "RalfJ",
        "timestamp": 1643573238
    },
    {
        "content": "<p>the type system should never even have to deal with an allocation-backed constant</p>",
        "id": 269953452,
        "sender_full_name": "RalfJ",
        "timestamp": 1643573250
    },
    {
        "content": "<p>that is the entire point of valtrees</p>",
        "id": 269953454,
        "sender_full_name": "RalfJ",
        "timestamp": 1643573255
    },
    {
        "content": "<p>so all talk about equality of allocations in the context of the type system misses the point, I think?</p>",
        "id": 269953513,
        "sender_full_name": "RalfJ",
        "timestamp": 1643573290
    },
    {
        "content": "<p>We're mostly talking about equality in the query system</p>",
        "id": 269955805,
        "sender_full_name": "oli",
        "timestamp": 1643575072
    },
    {
        "content": "<p>We want to Deduplicate queries that take allocid arguments</p>",
        "id": 269955888,
        "sender_full_name": "oli",
        "timestamp": 1643575130
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/269955888\">said</a>:</p>\n<blockquote>\n<p>We want to Deduplicate queries that take allocid arguments</p>\n</blockquote>\n<p>i think we would have to either dedup allocids or canonicalize them in the query output (which seems difficult)</p>",
        "id": 270005472,
        "sender_full_name": "lcnr",
        "timestamp": 1643623150
    },
    {
        "content": "<p>Do we even need <code>const_to_valtree</code> to be a query? Afaict we would always have to call that function inside <code>eval_to_const_value_raw</code> anyway, which is a query, so the valtree result is cached implicitly. <code>const_to_valtree_recursive</code> isn't a query, so it's not as if we would gain any benefit of caching sub-results (not sure whether that is something that might be beneficial though).</p>",
        "id": 270008691,
        "sender_full_name": "BN",
        "timestamp": 1643624692
    },
    {
        "content": "<p>it would be advantageous in case multiple calls to <code>eval_to_const_value_raw</code> have the same result</p>",
        "id": 270009433,
        "sender_full_name": "lcnr",
        "timestamp": 1643624979
    },
    {
        "content": "<p>though this only matters for complex result values, at which point they currently have different alloc ids anyways, so we can't even dedup them</p>",
        "id": 270009470,
        "sender_full_name": "lcnr",
        "timestamp": 1643624999
    },
    {
        "content": "<p>so yeah, just not using a query for <code>const_to_valtree</code> might be best for now <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 270009573,
        "sender_full_name": "lcnr",
        "timestamp": 1643625034
    },
    {
        "content": "<p>Why isn't it possible to give out a unique <code>AllocId</code> for an <code>Allocation</code>?</p>",
        "id": 270014727,
        "sender_full_name": "BN",
        "timestamp": 1643627537
    },
    {
        "content": "<p>you mean to deduplicate <code>Allocation</code>s? it might be possible, i don't know why we are not currently doing that</p>",
        "id": 270016967,
        "sender_full_name": "lcnr",
        "timestamp": 1643628787
    },
    {
        "content": "<p>though, i assume that we may need different allocation ids for \"equivalent\" allocations during const eval</p>",
        "id": 270017047,
        "sender_full_name": "lcnr",
        "timestamp": 1643628837
    },
    {
        "content": "<p>so that we can check whether two ptrs point to the same location</p>",
        "id": 270017130,
        "sender_full_name": "lcnr",
        "timestamp": 1643628865
    },
    {
        "content": "<p>Allocations can be mutable. In that case deduplicating them would be behavior changing and probably introducing UB due to aliasing mutable references.</p>",
        "id": 270018906,
        "sender_full_name": "bjorn3",
        "timestamp": 1643629839
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/270017047\">said</a>:</p>\n<blockquote>\n<p>though, i assume that we may need different allocation ids for \"equivalent\" allocations during const eval</p>\n</blockquote>\n<p>By equivalent you just mean that a pointer allocation (with a relocation to the actual allocation) and the actual allocation should have different <code>AllocId</code>s?</p>",
        "id": 270023285,
        "sender_full_name": "BN",
        "timestamp": 1643632269
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/270018906\">said</a>:</p>\n<blockquote>\n<p>Allocations can be mutable. In that case deduplicating them would be behavior changing and probably introducing UB due to aliasing mutable references.</p>\n</blockquote>\n<p>But how does giving out multiple <code>AllocId</code>s for the same <code>Allocation</code> prevent that problem, that's still a form of aliasing of mutable references, isn't it?</p>",
        "id": 270023445,
        "sender_full_name": "BN",
        "timestamp": 1643632346
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"328097\">BN</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/270023285\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/270017047\">said</a>:</p>\n<blockquote>\n<p>though, i assume that we may need different allocation ids for \"equivalent\" allocations during const eval</p>\n</blockquote>\n<p>By equivalent you just mean that a pointer allocation (with a relocation to the actual allocation) and the actual allocation should have different <code>AllocId</code>s?</p>\n</blockquote>\n<p>no, my concern is the following code:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 270024367,
        "sender_full_name": "lcnr",
        "timestamp": 1643632813
    },
    {
        "content": "<p>here the target of both <code>x</code> and <code>y</code> are allocations containing the value 3. If we were to dedup allocations, both x and y would point to the same allocation, meaning that the mutation through x would be visible through <code>y</code></p>",
        "id": 270024461,
        "sender_full_name": "lcnr",
        "timestamp": 1643632870
    },
    {
        "content": "<p>Ah thanks, I misunderstood this. I thought we wanted to deduplicate <code>AllocId</code>s for the same <code>Allocation</code>, which we <a href=\"https://github.com/rust-lang/rust/blob/415c9f95884caebd0be9b837ef0885d1ffde1b9b/compiler/rustc_middle/src/mir/interpret/mod.rs#L459-L476\">currently don't</a> do for <code>GlobalAlloc::Memory</code>, but do for <code>GlobalAlloc::Function</code> and <code>GlobalAlloc::Static</code> (why is that problematic to do for memory?).</p>\n<p>And I think I'm probably missunderstanding the problem with the query system. The problem of the existing <code>DepNode</code>s is not due to the fact that we have different <code>AllocId</code>s for the same <code>Allocation</code>? If not, what exactly is the problem here (sry don't know the query system that well)?</p>",
        "id": 270025793,
        "sender_full_name": "BN",
        "timestamp": 1643633537
    },
    {
        "content": "<p>I had a wrong assumption about how we're encoding <code>AllocId</code>s <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> we actually do encode the contents of the allocations afaict, so the query system doesn't observe the ids of allocations meaning that it's fine if we assign different ids to the same allocation in separate incremental runs</p>",
        "id": 270038449,
        "sender_full_name": "lcnr",
        "timestamp": 1643639001
    },
    {
        "content": "<p>i think the issue is the <code>#[derive(HashStable)]</code> for <code>Allocation</code></p>",
        "id": 270038582,
        "sender_full_name": "lcnr",
        "timestamp": 1643639053
    },
    {
        "content": "<p>which is used during the <code>hash_stable</code> call for <code>AllocId</code></p>",
        "id": 270038617,
        "sender_full_name": "lcnr",
        "timestamp": 1643639072
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"328097\">BN</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/269782600\">said</a>:</p>\n<blockquote>\n<p>There is a problem with the current valtree implementation (on master). If you use the <code>const_to_valtree</code> query, e.g. by adding </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span>::<span class=\"n\">ParamEnvAnd</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">param_env</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">value</span>: <span class=\"nc\">constant</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">valtree</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">const_to_valtree</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>to <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_const_eval/const_eval/eval_queries.rs.html#193-213\"><code>turn_into_const_value</code></a> you get lots of ICEs of the following form when building std:</p>\n<p><div class=\"codehilite\"><pre><span></span><code>thread &#39;rustc&#39; panicked at &#39;forcing query with already existing `DepNode`\n- query-key: ParamEnvAnd { param_env: ParamEnv { caller_bounds: [], reveal: UserFacing, constness: NotConst }, value: ConstAlloc { alloc_id: alloc36, ty: usize } }\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>do you know what's the <code>GlobalAlloc</code> for  <code>alloc36</code>?</p>",
        "id": 270038879,
        "sender_full_name": "lcnr",
        "timestamp": 1643639176
    },
    {
        "content": "<p>Well... the query system can observe the ids due to <code>PartialEq</code> on <code>AllocId</code> comparing the raw ids <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 270039300,
        "sender_full_name": "oli",
        "timestamp": 1643639336
    },
    {
        "content": "<p>damn, it looks like I lost some of my work in the valtree PR in a rebase, let's see if github can still find it</p>",
        "id": 270039643,
        "sender_full_name": "oli",
        "timestamp": 1643639465
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/270039300\">said</a>:</p>\n<blockquote>\n<p>Well... the query system can observe the ids due to <code>PartialEq</code> on <code>AllocId</code> comparing the raw ids ;)</p>\n</blockquote>\n<p>ah, i think i've got it</p>",
        "id": 270039825,
        "sender_full_name": "lcnr",
        "timestamp": 1643639535
    },
    {
        "content": "<p>we're only hashing the allocation, while completely ignoring the <code>AllocId</code>s</p>",
        "id": 270039864,
        "sender_full_name": "lcnr",
        "timestamp": 1643639552
    },
    {
        "content": "<p>so if we have 2 different <code>AllocId</code>s pointing to 2 different allocation objects with equal values and without any relocations</p>",
        "id": 270039919,
        "sender_full_name": "lcnr",
        "timestamp": 1643639573
    },
    {
        "content": "<p>these 2 allocations result in the same stable hash but the alloc ids don't compare equal</p>",
        "id": 270039985,
        "sender_full_name": "lcnr",
        "timestamp": 1643639601
    },
    {
        "content": "<p>phew github found it <a href=\"https://github.com/rust-lang/rust/compare/master...oli-obk:valtree_backup?expand=1\">https://github.com/rust-lang/rust/compare/master...oli-obk:valtree_backup?expand=1</a></p>",
        "id": 270040274,
        "sender_full_name": "oli",
        "timestamp": 1643639706
    },
    {
        "content": "<p>that is the original PR, I accidentally pushed a half-rebased branch in the old PR</p>",
        "id": 270040330,
        "sender_full_name": "oli",
        "timestamp": 1643639729
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/270039985\">said</a>:</p>\n<blockquote>\n<p>these 2 allocations result in the same stable hash but the alloc ids don't compare equal</p>\n</blockquote>\n<p>jup, which has like 5 different solutions, some more fragile than others, but performance is also a concern <span aria-label=\"frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"frown\">:frown:</span></p>",
        "id": 270040497,
        "sender_full_name": "oli",
        "timestamp": 1643639794
    },
    {
        "content": "<p>We could use <code>Allocation&lt;TcxAllocId&gt;</code>, we already have logic for mapping allocations for miri which has more info in a relocation than just an <code>AllocId</code>. This is likely a huge perf regression, but strictly the cleanest solution to separate CTFE-local ids and ids that go into types. If we're feeling really fancy we use something like <code>type TcxAllocation&lt;'tcx&gt; = &amp;'tcx Allocation&lt;TcxAllocation&lt;'tcx&gt;&gt;;</code>, tho idk how to handle that in CTFE yet (like if a constant uses another constant).</p>",
        "id": 270041730,
        "sender_full_name": "oli",
        "timestamp": 1643640244
    },
    {
        "content": "<p>so... I think something like <a href=\"https://github.com/rust-lang/rust/pull/93472#issuecomment-1025775814\">https://github.com/rust-lang/rust/pull/93472#issuecomment-1025775814</a> is the right way forward</p>",
        "id": 270041845,
        "sender_full_name": "oli",
        "timestamp": 1643640296
    },
    {
        "content": "<p>pretty amazing that <a href=\"https://github.com/rust-lang/rust/issues/93470\">#93470</a> gets opened on pretty much the same day <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 270053886,
        "sender_full_name": "lcnr",
        "timestamp": 1643644515
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/269800861\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"328097\">BN</span> should actually write a summary for this, but suppressing ctfe errors during trait selection might not actually be needed <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n</blockquote>\n<p>it will be needed during selection, either to go from ok -&gt; ambig or from ok -&gt; rejected</p>",
        "id": 270346214,
        "sender_full_name": "lcnr",
        "timestamp": 1643788586
    },
    {
        "content": "<p>Just read <span class=\"user-mention\" data-user-id=\"124288\">@oli</span>'s <a href=\"https://github.com/rust-lang/rust/compare/master...oli-obk:valtree_backup?expand=1\">previous PR</a> and noticed that <code>GlobalId</code> is used as the key for the <a href=\"https://github.com/oli-obk/rust/blob/fc2244ae5f602fb348a72303936c1e9b58c985f6/compiler/rustc_mir/src/const_eval/mod.rs#L43-L58\">valtree query</a> and we also couple the valtree creation with the evaluation of the constant. That seems like a more reasonable approach to me, since with the current <code>const_to_valtree</code> query implementation we don't really get any benefits of caching results anyway, since the <code>AllocId</code> key goes through the <code>Allocation</code> itself, so we can't really re-use any query results (unless we would de-duplicate <code>Allocation</code>, which we don't want to). We would also not get the <code>DepNode</code> problems. Is there anything that would be against that design choice?</p>\n<p>Also, would we still need to cache the results of the <code>eval_to_const_value_raw</code> query or is this redundant given that we would always call that through the valtree creation query?</p>",
        "id": 270820164,
        "sender_full_name": "BN",
        "timestamp": 1644058794
    },
    {
        "content": "<p>Ah wow, I did a smart and royally (thanks autocorrect, I wrote \"totally\") forgot about it. I blame defending a thesis and newborn-induced lack of sleep, but it's actually just having a sieve instead of long term memory <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> sorry about wasting so much of your time on the ConstAlloc thing. We can evaluate the stable hash for allocation situation in parallel, as we still have queries <em>returning</em> alloc ids</p>",
        "id": 270830218,
        "sender_full_name": "oli",
        "timestamp": 1644071907
    },
    {
        "content": "<p>Have a question about the valtree -&gt; mir::ConstValue conversion. By far the most straightforward approach would be to use an <code>AllocId</code> in the representation of a constant value in the type system, so we would have something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">ConstValTree</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">valtree</span>: <span class=\"nc\">ValTree</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">alloc_id</span>: <span class=\"nc\">AllocId</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>but then ignore <code>alloc_id</code> in both the <code>PartialEq</code> and <code>HashStable</code> implementation. <code>ty::Const</code> for constant values would be uniquely identifiable by definition using the type and the ValTree. I'm not sure whether ignoring <code>alloc_id</code> in the <code>HashStable</code> implementation would be valid though...</p>\n<p>A couple of reasons for why we would want to do this are: We could use existing logic (roughly what is currently being done in <code>turn_into_const</code>) to turn a constant value in the type system into an <code>mir::Constant</code> during mir build. We wouldn't need to de-construct the valtree and could re-use <code>Allocation</code>, so we wouldn't have to re-allocate memory (which was <a href=\"https://github.com/oli-obk/rust/blob/fc2244ae5f602fb348a72303936c1e9b58c985f6/compiler/rustc_codegen_cranelift/src/constant.rs#L157-L163\">previously</a> done).</p>\n<p>Would there be problems with the <code>HashStable</code> implementation?</p>",
        "id": 270958200,
        "sender_full_name": "BN",
        "timestamp": 1644229736
    },
    {
        "content": "<p>ignoring the <code>alloc_id</code> in <code>HashStable</code> can once again break the trait system</p>",
        "id": 270958655,
        "sender_full_name": "lcnr",
        "timestamp": 1644229990
    },
    {
        "content": "<p>so that sadly doesn't work <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 270958710,
        "sender_full_name": "lcnr",
        "timestamp": 1644230021
    },
    {
        "content": "<p>yeah was thinking that would be too easy ^^</p>",
        "id": 270958829,
        "sender_full_name": "BN",
        "timestamp": 1644230074
    },
    {
        "content": "<p>can you explain why that would break the trait system?</p>",
        "id": 270958849,
        "sender_full_name": "BN",
        "timestamp": 1644230088
    },
    {
        "content": "<p>i guess the clearest issue is:</p>\n<ul>\n<li>compile a crate and end up encoding <code>ConstValTree</code> using <code>alloc_id_a</code> </li>\n<li>when you now compile the crate again, depending on whether you first call a green query using that <code>ConstValTree</code> or actually recompute that valtree, you may end up with some <code>alloc_id_b</code> which has different padding bytes/pointer targets. as the alloc ids are ignored for hashing, we only store one in any hashmap, so it ends up being nondeterministic which <code>alloc_id</code> is used when building constants for llvm</li>\n</ul>",
        "id": 270959918,
        "sender_full_name": "lcnr",
        "timestamp": 1644230657
    },
    {
        "content": "<p>I see, thanks for the answer.</p>",
        "id": 270960906,
        "sender_full_name": "BN",
        "timestamp": 1644231252
    },
    {
        "content": "<p>while this nondeterminism might be somewhat fine if you erase all padding bytes and maybe do stuff with pointers? i definitely don't feel comfortable approving that change, esp. cause once you start erasing padding bytes you aren't that far from having a query constructing a new allocation</p>",
        "id": 270960942,
        "sender_full_name": "lcnr",
        "timestamp": 1644231275
    },
    {
        "content": "<p>it just seems awfully wasteful to throw away all the <code>Allocation</code> information</p>",
        "id": 270961016,
        "sender_full_name": "BN",
        "timestamp": 1644231328
    },
    {
        "content": "<p>^^ a bit wasteful for sure <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> i don't expect this to get too bad</p>",
        "id": 270961176,
        "sender_full_name": "lcnr",
        "timestamp": 1644231444
    },
    {
        "content": "<p>Do we really need an <code>Allocation</code> during codegen for things such as strings? Seems that when we already have the raw byte slice for the string, we shouldn't really need to re-allocate memory just to put those bytes back into an <code>Allocation</code>. (Dont really know much about codegen though ^^).</p>",
        "id": 270961597,
        "sender_full_name": "BN",
        "timestamp": 1644231671
    },
    {
        "content": "<p><span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 270963648,
        "sender_full_name": "lcnr",
        "timestamp": 1644232808
    },
    {
        "content": "<p>so iiuc <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> went the direct valtree -&gt; llvm value route without converting valtrees back to mir values first</p>",
        "id": 270963688,
        "sender_full_name": "lcnr",
        "timestamp": 1644232839
    },
    {
        "content": "<p>which allows us to avoid these unnecessary allocations</p>",
        "id": 270963712,
        "sender_full_name": "lcnr",
        "timestamp": 1644232861
    },
    {
        "content": "<p>imo doing that is fine and i won't mind if you believe it to be easier</p>",
        "id": 270963925,
        "sender_full_name": "lcnr",
        "timestamp": 1644233012
    },
    {
        "content": "<p>my concerns here were that:</p>",
        "id": 270963932,
        "sender_full_name": "lcnr",
        "timestamp": 1644233017
    },
    {
        "content": "<ul>\n<li>i don't want to do be forced to do this conversion for each backend separately, but preferably have it shared between all of them in <code>codegen_ssa</code></li>\n</ul>",
        "id": 270964010,
        "sender_full_name": "lcnr",
        "timestamp": 1644233052
    },
    {
        "content": "<ul>\n<li>going valtree -&gt; mir value allows us to easily check for any bugs by doing <code>assert_eq!(valtree, valtree.as_mir_value().as_valtree())</code></li>\n</ul>",
        "id": 270964083,
        "sender_full_name": "lcnr",
        "timestamp": 1644233096
    },
    {
        "content": "<p>I agree with you that we should convert valtree to an mir::ConstValue. </p>\n<p>What I don't like is that the backends would still depend on <code>Allocation</code> even though we would discard those instances when we introduce ValTrees. To me it seems much more reasonable to use another representation of <code>mir::ConstValue</code> that uses some other representation than <code>Allocation</code>. I think we should be able to directly convert the information contained in the valtree and the type of the constant into a more byte-like representation directly. Currently we let codegen do that transformation. But I'm not sure whether and in what way mir-transformation and optimization depend on <code>Allocation</code>. In general this would probably be a pretty large re-write and I'm not sure whether thats worth it (and how bad the Allocation -&gt; ValTree -&gt; Allocation transformations really are performance-wise).</p>",
        "id": 270965282,
        "sender_full_name": "BN",
        "timestamp": 1644233885
    },
    {
        "content": "<p>there are also <code>Allocation</code>s which never get converted to a valtree before being used by the backends</p>",
        "id": 270965470,
        "sender_full_name": "lcnr",
        "timestamp": 1644234028
    },
    {
        "content": "<p>Oh. What do those correspond to?</p>",
        "id": 270965527,
        "sender_full_name": "BN",
        "timestamp": 1644234068
    },
    {
        "content": "<p>e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">FOO</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">ASSOC</span>: <span class=\"kt\">usize</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">ASSOC</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">static</span> <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"mi\">3</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// promoteds</span>\n<span class=\"w\">    </span><span class=\"n\">FOO</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// free constants</span>\n<span class=\"w\">    </span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"o\">&gt;</span>::<span class=\"n\">ASSOC</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// associated constants</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 270965680,
        "sender_full_name": "lcnr",
        "timestamp": 1644234165
    },
    {
        "content": "<p>every constant not used as a const parameter doesn't get converted to a valtree</p>",
        "id": 270965710,
        "sender_full_name": "lcnr",
        "timestamp": 1644234189
    },
    {
        "content": "<p>&lt;=&gt; the only constants which are represented using valtrees are constants used directly in the type system</p>",
        "id": 270965750,
        "sender_full_name": "lcnr",
        "timestamp": 1644234220
    },
    {
        "content": "<p>ok thanks. I thought that every constant would go through <code>eval_to_const_value_raw</code> at some point.</p>",
        "id": 270966029,
        "sender_full_name": "BN",
        "timestamp": 1644234371
    },
    {
        "content": "<p>Or just be a <code>ConstValue</code> (<code>Literal</code>) directly</p>",
        "id": 270966066,
        "sender_full_name": "BN",
        "timestamp": 1644234394
    },
    {
        "content": "<p>ah, though they will all go through <code>eval_to_const_value_raw</code>, won't they?</p>",
        "id": 270966108,
        "sender_full_name": "lcnr",
        "timestamp": 1644234412
    },
    {
        "content": "<p>they just won't be converted to a valtree afterwards</p>",
        "id": 270966123,
        "sender_full_name": "lcnr",
        "timestamp": 1644234420
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/270966108\">said</a>:</p>\n<blockquote>\n<p>ah, though they will all go through <code>eval_to_const_value_raw</code>, won't they?</p>\n</blockquote>\n<p>at least that's my understanding of const eval? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> evaluate all constants using <code>eval_to_const_value_raw</code> (which is why it's a \"raw\" query), and then, if the constant should be used as a const parameter, that call is wrapped with <code>eval_to_valtree</code> or however that query is called</p>",
        "id": 270966257,
        "sender_full_name": "lcnr",
        "timestamp": 1644234495
    },
    {
        "content": "<p>But we would call <code>const_to_valtree</code> in <code>eval_to_const_value_raw</code> right?</p>",
        "id": 270966260,
        "sender_full_name": "BN",
        "timestamp": 1644234496
    },
    {
        "content": "<p>we do :o</p>",
        "id": 270966279,
        "sender_full_name": "lcnr",
        "timestamp": 1644234508
    },
    {
        "content": "<p>i thought it's the other way around <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 270966295,
        "sender_full_name": "lcnr",
        "timestamp": 1644234524
    },
    {
        "content": "<p>but then i don't understand why we would not convert them to valtree.</p>",
        "id": 270966632,
        "sender_full_name": "BN",
        "timestamp": 1644234734
    },
    {
        "content": "<p>because we can't always do that</p>",
        "id": 270967460,
        "sender_full_name": "lcnr",
        "timestamp": 1644235206
    },
    {
        "content": "<p>how would we represent the following using valtrees?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">union</span> <span class=\"nc\">MyUnion</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ptr</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">static</span> <span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">value</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">MY_UNION</span>: <span class=\"nc\">MyUnion</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">MyUnion</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ptr</span>: <span class=\"kp\">&amp;</span><span class=\"mi\">3</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">MY_UNION</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 270967714,
        "sender_full_name": "lcnr",
        "timestamp": 1644235325
    },
    {
        "content": "<p>the idea behind valtrees is:</p>\n<ul>\n<li>the type system needs well behaved equality which we can't get when dealing with padding bytes, unions or when looking at pointers</li>\n</ul>",
        "id": 270967967,
        "sender_full_name": "lcnr",
        "timestamp": 1644235504
    },
    {
        "content": "<ul>\n<li>in general can constants contain padding bytes, unions and pointers</li>\n</ul>",
        "id": 270968014,
        "sender_full_name": "lcnr",
        "timestamp": 1644235542
    },
    {
        "content": "<p>so to make it easier for the type system to not accidentally touch pb, unions or pointers, we introduce a new representation which cannot contain padding points and unions and completely abstract away the references in its corresponding mir constant</p>",
        "id": 270968165,
        "sender_full_name": "lcnr",
        "timestamp": 1644235640
    },
    {
        "content": "<p>in general, there are valid ways in which constants interact with padding bytes, unions and pointers, preventing us from using valtrees for them</p>",
        "id": 270968314,
        "sender_full_name": "lcnr",
        "timestamp": 1644235710
    },
    {
        "content": "<p>What representation would <code>MY_UNION</code> have in the type system?</p>",
        "id": 270968484,
        "sender_full_name": "BN",
        "timestamp": 1644235811
    },
    {
        "content": "<p>I mean what <code>ConstKind</code> variant is used for it?</p>",
        "id": 270968612,
        "sender_full_name": "BN",
        "timestamp": 1644235904
    },
    {
        "content": "<p>It must be <code>ConstKind::Value</code> right? I thought that we wanted to replace <code>ty::ConstValue</code> with some valtree kind representation. So I'm a little confused now. While the points you mentioned do make sense to me, I don't see what the way out for this is.</p>",
        "id": 270968854,
        "sender_full_name": "BN",
        "timestamp": 1644236017
    },
    {
        "content": "<p>Ok, I read the entire thing and I think I'll start from a clean slate with the explanation:</p>\n<p>If a constant is evaluated for the type system, we use (the new) <code>eval_to_valtree_raw</code>, which returns a <code>ValTree</code>. This is important, as it makes sure that any constant used as a generic parameter is a valtree and can never contain <code>AllocId</code>s or <code>Allocation</code>s.</p>\n<p>If the constant is evaluated for an <code>Operand::Const</code> in the MIR, we use <code>eval_to_const_value_raw</code>, which gives us a <code>ConstValue</code>, that is more fitting for optimizations and codegen backends, as it can represent integers in an easy-to-use way, and it can represent <em>all</em> types, even unions, as you'll just get a <code>ByRef</code> that points to an <code>Allocation</code> containing the data.</p>\n<p>If the \"constant\" is evaluated for a static item's initializer, we actually need to <em>preserve</em> identity of allocations, as static items can point to each other, and the soundness of user-code can depend on the fact that no deduplication happens. So here we'd use <code>eval_to_allocation_raw</code></p>",
        "id": 270975828,
        "sender_full_name": "oli",
        "timestamp": 1644239744
    },
    {
        "content": "<p>Now, we have a weird situation when you use a const generic parameter in an expression, as we only have that value available as a <code>ValTree</code>. We could theoretically eagerly convert it to <code>ConstValue</code>, but that is wasteful and not relevant for any correctness things.</p>",
        "id": 270976027,
        "sender_full_name": "oli",
        "timestamp": 1644239827
    },
    {
        "content": "<p>we will not replace <code>ConstValue</code> with <code>ValTree</code> in general, only in <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/consts/kind/enum.ConstKind.html#variant.Value\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/consts/kind/enum.ConstKind.html#variant.Value</a></p>",
        "id": 270976183,
        "sender_full_name": "oli",
        "timestamp": 1644239908
    },
    {
        "content": "<p>this way <code>ty::Const</code> and other interned stuff will stop depending on <code>AllocId</code> (since there is no more <code>ConstValue</code>), but <code>mir::Constant</code> can still represent <code>union</code>s.</p>",
        "id": 270976228,
        "sender_full_name": "oli",
        "timestamp": 1644239938
    },
    {
        "content": "<p>we simply can't have unions in the type system <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 270976259,
        "sender_full_name": "oli",
        "timestamp": 1644239951
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"328097\">BN</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/270968484\">said</a>:</p>\n<blockquote>\n<p>What representation would <code>MY_UNION</code> have in the type system?</p>\n</blockquote>\n<p>yeah, so my union will never be represented in the type system, because it can't. This means that we won't use <code>ty::ConstKind</code> for it but instead store it using <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/mir/enum.ConstantKind.html#variant.Val\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/mir/enum.ConstantKind.html#variant.Val</a></p>",
        "id": 270982704,
        "sender_full_name": "lcnr",
        "timestamp": 1644242855
    },
    {
        "content": "<p>Thanks for the answers, that does clear some things up for me. Hadn't worked on any issues involving unions yet, so had no idea we didn't have those in the type system.</p>\n<p>But I still have some questions, mostly about <code>mir::ConstantKind</code>. </p>\n<p>When do we need to treat a mir::Constant as <code>mir::ConstantKind::Ty</code>? In what situations do we still need to use mir constants in the type system? Currently we <a href=\"https://github.com/rust-lang/rust/blob/c5e414843ebfe25674d8e18a5369d6249fdee741/compiler/rustc_mir_build/src/build/expr/as_constant.rs#L29-L31\">treat</a> e.g. static initializers as mir::ConstantKind::Ty when we construct the mir. If I understood <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> correctly we want to construct a <code>ConstValue</code>for these directly, but this implies that we would have to treat them as <code>mir::ConstantKind::Val</code> when we introduce Valtrees, right? Would that cause any problems as far as them not being able to be treated as <code>mir::ConstantKind::Ty</code> anymore?</p>\n<p>Also <a href=\"https://github.com/rust-lang/rust/blob/c5e414843ebfe25674d8e18a5369d6249fdee741/compiler/rustc_const_eval/src/interpret/eval_context.rs#L724-L734\">here</a> during const-eval we create <code>mir::Constant</code>s with <code>ConstantKind::Ty</code>. We would want to treat those as <code>ConstantKind::Val</code> after ValTrees have been introduced right?</p>",
        "id": 271008850,
        "sender_full_name": "BN",
        "timestamp": 1644253309
    },
    {
        "content": "<blockquote>\n<p>In what situations do we still need to use mir constants in the type system? </p>\n</blockquote>\n<p>we should never have them in the type system</p>\n<blockquote>\n<p>Currently we treat e.g. static initializers as mir::ConstantKind::Ty when we construct the mir. </p>\n</blockquote>\n<p>that references a static from runtime code, and is a constant containing the address of the static's memory</p>\n<blockquote>\n<p>If I understood @oli correctly we want to construct a ConstValuefor these directly, but this implies that we would have to treat them as mir::ConstantKind::Val when we introduce Valtrees, right? Would that cause any problems as far as them not being able to be treated as mir::ConstantKind::Ty anymore?</p>\n</blockquote>\n<p>yea, these need to move to <code>Val</code>, but that can actually happen on master without the valtree changes, making the valtree changes less invasive</p>\n<blockquote>\n<p>Also here during const-eval we create mir::Constants with ConstantKind::Ty. We would want to treat those as ConstantKind::Val after ValTrees have been introduced right?</p>\n</blockquote>\n<p>uh, we should not be creating them with <code>::Ty</code> if not necessary, this is only an artifact of the current impl and we could move ahead and start evaluating them directly to <code>ConstValue</code> and keep them in the MIR. The problem is that we use normalization for that right now, which is why my valtree PR got out of hand, as I added all the logic for having a way to manipulate mir contants during normalization differently from type constants</p>",
        "id": 271009646,
        "sender_full_name": "oli",
        "timestamp": 1644253644
    },
    {
        "content": "<blockquote>\n<p>The problem is that we use normalization for that right now, which is why my valtree PR got out of hand, as I added all the logic for having a way to manipulate mir contants during normalization differently from type constants</p>\n</blockquote>\n<p>What alternatives are there for that problem? We do have to normalize those though right, I mean we could have assoc consts in those required consts in the body, couldn't we? Would it be better to just have functionality to turn the returned <code>ty::ConstKind::Value</code> (with a valtree) from <code>subst_from_current_frame_normalize_erasing_regions</code> into an <code>mir::ConstantKind::Val</code> at that point?</p>",
        "id": 271012226,
        "sender_full_name": "BN",
        "timestamp": 1644254769
    },
    {
        "content": "<p>Well, not in general, remember, the unevaluated constant may be of <code>union</code> type, so we need to directly evaluate to a <code>ConstValue</code> if we're a <code>mir::Constant</code> and not recurse into the <code>ty::Const</code> nested inside the <code>::Ty</code> variant. The reason I nested <code>ty::Const</code> instead of just adding Unevaluated and Param variants to <code>mir::ConstantKind</code> is that all the logic around substitutions and such now needs to handle that. Meaning we have three places of params: types, constants and mir constants. But maybe that is cleaner? Idk. Got any opinions or ideas?</p>",
        "id": 271023013,
        "sender_full_name": "oli",
        "timestamp": 1644259068
    },
    {
        "content": "<p>I try to get to the core of your misunderstanding here <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>\n<p><code>mir::ConstantKind::Ty</code> is not a \"mir constant used in the type system\" as <code>mir::ConstantKind</code> are never used in the type system. The only place we use constants in the type system is <code>ty::Const</code> which uses <code>ty::ConstKind</code>.</p>\n<p><code>mir::ConstantKind::Ty</code> is called that way, not because is represents a \"type system const\", but because it simply reuses the current <code>ty::Const</code> this is mostly the case as that's how all constants were represented in the past, which we intend to change with valtrees.</p>\n<p>So while we never use a mir constant in the type system, for now, we want to use <code>mir::ConstantKind::Ty</code> for constants which we can't evaluate directly, e.g. generic associated constants.</p>\n<p>there is one way a <code>mir::ConstantKind::Ty</code> with <code>ty::ConstKind::Value</code> should exist. If that mir constant was previously <code>ty::ConstKind::Param</code> and we evaluate/codegen that function with a concrete generic argument</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// 2) ^ this `N` should have been `mir::ConstantKind::Ty` with `ty::ConstKind::Param` before.</span>\n<span class=\"w\">    </span><span class=\"c1\">//</span>\n<span class=\"w\">    </span><span class=\"c1\">// when looking into an the instance for `foo::&lt;3&gt;`, we instantiate that param with the generic argument</span>\n<span class=\"w\">    </span><span class=\"c1\">// `ty::ConstKind::Value(3)`. This should be the only way to get a `ty::ConstKind::Value` into a mir constant.</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// 1) here, we monomorphize `foo::&lt;3&gt;`</span>\n<span class=\"w\">    </span><span class=\"n\">foo</span>::<span class=\"o\">&lt;</span><span class=\"mi\">3</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>the way we avoid valtrees when evaluating mir constants is by changing the implementation of <code>try_normalize_mir_const_after_erasing_regions</code> for <code>mir::ConstantKind::Ty</code> with <code>ty::ConstKind::Unevaluated</code> to use <code>eval_to_allocation_raw</code> - instead of <code>eval_to_valtree</code> - and directly put the result of that into a <code>mir::ConstantKind::Value</code>, never using <code>ty::ConstKind::Value</code> in the process</p>",
        "id": 271084009,
        "sender_full_name": "lcnr",
        "timestamp": 1644299200
    },
    {
        "content": "<p>i think i got the query names right in the last section <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 271084114,
        "sender_full_name": "lcnr",
        "timestamp": 1644299293
    },
    {
        "content": "<p>Thanks for the clarification about <code>mir::Constant</code>. </p>\n<blockquote>\n<p>The reason I nested ty::Const instead of just adding Unevaluated and Param variants to mir::ConstantKind is that all the logic around substitutions and such now needs to handle that. Meaning we have three places of params: types, constants and mir constants. But maybe that is cleaner? Idk. Got any opinions or ideas?</p>\n</blockquote>\n<p>What <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> proposed here:</p>\n<blockquote>\n<p>the way we avoid valtrees when evaluating mir constants is by changing the implementation of try_normalize_mir_const_after_erasing_regions for mir::ConstantKind::Ty with ty::ConstKind::Unevaluated to use eval_to_allocation_raw - instead of eval_to_valtree - and directly put the result of that into a mir::ConstantKind::Value, never using ty::ConstKind::Value in the process</p>\n</blockquote>\n<p>sounds like the best approach to me to handle that, but it sounds like what you <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/271009646\">tried</a> before, <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> . How exactly did your previous PR got out of hand by trying to move all that logic into normalization?</p>",
        "id": 271155350,
        "sender_full_name": "BN",
        "timestamp": 1644338610
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/271009646\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>If I understood @oli correctly we want to construct a ConstValuefor these directly, but this implies that we would have to treat them as mir::ConstantKind::Val when we introduce Valtrees, right? Would that cause any problems as far as them not being able to be treated as mir::ConstantKind::Ty anymore?</p>\n</blockquote>\n<p>yea, these need to move to <code>Val</code>, but that can actually happen on master without the valtree changes, making the valtree changes less invasive</p>\n</blockquote>\n<p>I tried that but ran into some problems, namely we now promote constants that we didn't promote before, namely <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_const_eval/transform/promote_consts.rs.html#426-443\">here</a> <code>check_static_ptr</code>always returns <code>None</code> for <code>mir::ConstantKind::Val</code>. What is the correct way to handle this? What criteria would we use to decide whether or not to promote a <code>ConstantKind::Val</code>?</p>",
        "id": 271156137,
        "sender_full_name": "BN",
        "timestamp": 1644338916
    },
    {
        "content": "<blockquote>\n<p>How exactly did your previous PR got out of hand by trying to move all that logic into normalization?</p>\n</blockquote>\n<p>I don't remember, my memories from that month are fuzzy from that time. I thought I had the PR mostly working and then disappeared for 3 months</p>",
        "id": 271157512,
        "sender_full_name": "oli",
        "timestamp": 1644339510
    },
    {
        "content": "<blockquote>\n<p><code>check_static_ptr</code> always returns <code>None</code> for <code>mir::ConstantKind::Val</code></p>\n</blockquote>\n<p>that's just wrong, isn't it?</p>",
        "id": 271158511,
        "sender_full_name": "lcnr",
        "timestamp": 1644339895
    },
    {
        "content": "<p>i.e. the correct fix for that is to change <code>check_static_ptr</code> to also look at <code>ConstantKind::Val</code>.</p>\n<p><code>try_to_scalar</code> doesn't even make sense for type system constants afaict so it should be removed from <code>ty::ConstKind</code> once we use valtrees there</p>",
        "id": 271158756,
        "sender_full_name": "lcnr",
        "timestamp": 1644340004
    },
    {
        "content": "<p>i think this fix is correct</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/compiler/rustc_middle/src/mir/mod.rs b/compiler/rustc_middle/src/mir/mod.rs</span><span class=\"w\"></span>\n<span class=\"gh\">index 33fb1e570b1..fbadbccb006 100644</span><span class=\"w\"></span>\n<span class=\"gd\">--- a/compiler/rustc_middle/src/mir/mod.rs</span><span class=\"w\"></span>\n<span class=\"gi\">+++ b/compiler/rustc_middle/src/mir/mod.rs</span><span class=\"w\"></span>\n<span class=\"gu\">@@ -2516,7 +2516,7 @@ pub enum ConstantKind&lt;'tcx&gt; {</span><span class=\"w\"></span>\n\n<span class=\"w\"> </span>impl&lt;'tcx&gt; Constant&lt;'tcx&gt; {<span class=\"w\"></span>\n<span class=\"w\"> </span>    pub fn check_static_ptr(&amp;self, tcx: TyCtxt&lt;'_&gt;) -&gt; Option&lt;DefId&gt; {<span class=\"w\"></span>\n<span class=\"gd\">-        match self.literal.const_for_ty()?.val.try_to_scalar() {</span><span class=\"w\"></span>\n<span class=\"gi\">+        match self.literal.try_to_scalar() {</span><span class=\"w\"></span>\n<span class=\"w\"> </span>            Some(Scalar::Ptr(ptr, _size)) =&gt; match tcx.global_alloc(ptr.provenance) {<span class=\"w\"></span>\n<span class=\"w\"> </span>                GlobalAlloc::Static(def_id) =&gt; {<span class=\"w\"></span>\n<span class=\"w\"> </span>                    assert!(!tcx.is_thread_local_static(def_id));<span class=\"w\"></span>\n</code></pre></div>",
        "id": 271159032,
        "sender_full_name": "lcnr",
        "timestamp": 1644340124
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/270975828\">said</a>:</p>\n<blockquote>\n<p>Ok, I read the entire thing and I think I'll start from a clean slate with the explanation:</p>\n<p>If a constant is evaluated for the type system, we use (the new) <code>eval_to_valtree_raw</code>, which returns a <code>ValTree</code>. This is important, as it makes sure that any constant used as a generic parameter is a valtree and can never contain <code>AllocId</code>s or <code>Allocation</code>s.</p>\n<p>If the constant is evaluated for an <code>Operand::Const</code> in the MIR, we use <code>eval_to_const_value_raw</code>, which gives us a <code>ConstValue</code>, that is more fitting for optimizations and codegen backends, as it can represent integers in an easy-to-use way, and it can represent <em>all</em> types, even unions, as you'll just get a <code>ByRef</code> that points to an <code>Allocation</code> containing the data.</p>\n<p>If the \"constant\" is evaluated for a static item's initializer, we actually need to <em>preserve</em> identity of allocations, as static items can point to each other, and the soundness of user-code can depend on the fact that no deduplication happens. So here we'd use <code>eval_to_allocation_raw</code></p>\n</blockquote>\n<p>oh, I was thinking the \"easy to represent integers\" would be just represented as a small valtree. so basically a constant in MIR is a valtree or an AllocId (or Unevaluated or a generic parameter or ...). why doesn't that work?</p>",
        "id": 271322207,
        "sender_full_name": "RalfJ",
        "timestamp": 1644429981
    },
    {
        "content": "<p>Well... we could do that and let llvm do the heavy lifting, but that change is a lot of effort and should wait until valtrees work properly. It's not a problem to have two ways to represent the same value in MIR</p>",
        "id": 271339555,
        "sender_full_name": "oli",
        "timestamp": 1644437076
    },
    {
        "content": "<p>3 ways ;) (valtree, ConstValue, Allocation) but fair</p>",
        "id": 271405085,
        "sender_full_name": "RalfJ",
        "timestamp": 1644485003
    },
    {
        "content": "<p>I just really want to get rid of some of that awful code in <a href=\"http://const_eval.rs\">const_eval.rs</a> that decides whether to return an Allocation or some ConstValue thing...</p>",
        "id": 271405218,
        "sender_full_name": "RalfJ",
        "timestamp": 1644485068
    },
    {
        "content": "<p>Yea, that thing can be simplified a lot once valtrees exist</p>",
        "id": 271409023,
        "sender_full_name": "oli",
        "timestamp": 1644487331
    },
    {
        "content": "<p>makes sense to do it in steps</p>",
        "id": 271444798,
        "sender_full_name": "RalfJ",
        "timestamp": 1644506003
    },
    {
        "content": "<p>parts of me are worried the cleanup will just not happen because it is \"boring work\" but rustc actually has a pretty good track record in this rgeard</p>",
        "id": 271444860,
        "sender_full_name": "RalfJ",
        "timestamp": 1644506025
    },
    {
        "content": "<p>the cleanups that I've noticed that aren't happening are the ones we forget about</p>",
        "id": 271445238,
        "sender_full_name": "oli",
        "timestamp": 1644506155
    },
    {
        "content": "<p>ppl love cleaning up</p>",
        "id": 271445250,
        "sender_full_name": "oli",
        "timestamp": 1644506158
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/mir/enum.Rvalue.html#variant.Repeat\"><code>mir::Rvalue::Repeat</code></a> uses a <code>ty::Const</code> and we later need to call its <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_middle/mir/tcx.rs.html#155-210\"><code>ty</code></a> method during codegen to re-create <code>Ty</code> instances. We could just keep using <code>ty::Const</code> in <code>Rvalue::Repeat</code> and use our <code>ValTree</code> -&gt; <code>ConstValue</code> method (that we have to write anyway) during codegen, but this would be somewhat inconsistent since we treat all other constants that appear in the mir as <code>mir::Constant</code>. Are there any other possibilities to get around that problem?</p>",
        "id": 272708581,
        "sender_full_name": "BN",
        "timestamp": 1645460277
    },
    {
        "content": "<p>we want to keep using <code>ty::Const</code> in <code>Rvalue::Repeat</code></p>",
        "id": 272708799,
        "sender_full_name": "lcnr",
        "timestamp": 1645460399
    },
    {
        "content": "<p>from my pov the length of a repeat expression is not really a value, but just part of its type</p>",
        "id": 272708870,
        "sender_full_name": "lcnr",
        "timestamp": 1645460434
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"328097\">BN</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/272708581\">said</a>:</p>\n<blockquote>\n<p>We could just keep using <code>ty::Const</code> in <code>Rvalue::Repeat</code> and use our <code>ValTree</code> -&gt; <code>ConstValue</code> method (that we have to write anyway) during codegen, but this would be somewhat inconsistent since we treat all other constants that appear in the mir as <code>mir::Constant</code>.</p>\n</blockquote>\n<p>when do we need to convert the length of repeat expression to <code>ConstValue</code>?</p>",
        "id": 272708959,
        "sender_full_name": "lcnr",
        "timestamp": 1645460501
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/272708959\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"328097\">BN</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/272708581\">said</a>:</p>\n<blockquote>\n<p>We could just keep using <code>ty::Const</code> in <code>Rvalue::Repeat</code> and use our <code>ValTree</code> -&gt; <code>ConstValue</code> method (that we have to write anyway) during codegen, but this would be somewhat inconsistent since we treat all other constants that appear in the mir as <code>mir::Constant</code>.</p>\n</blockquote>\n<p>when do we need to convert the length of repeat expression to <code>ConstValue</code>?</p>\n</blockquote>\n<p>e.g <a href=\"https://github.com/rust-lang/rust/blob/1103d2e914b67c18b0deb86073c26c6aefda761d/compiler/rustc_codegen_ssa/src/mir/rvalue.rs#L105-L108\">here</a>, though I think we might be able to just use the value that the valtree provides directly in this case.</p>",
        "id": 272709301,
        "sender_full_name": "BN",
        "timestamp": 1645460664
    },
    {
        "content": "<p>yeah, think we can just use the <code>Valtree</code>here</p>",
        "id": 272709836,
        "sender_full_name": "lcnr",
        "timestamp": 1645460967
    },
    {
        "content": "<p>the <code>count</code> for <code>write_operand_repeatedly</code> probably doesn't end up as a constant in llvm</p>",
        "id": 272709881,
        "sender_full_name": "lcnr",
        "timestamp": 1645460995
    },
    {
        "content": "<p>Ok thanks. Another question I have is, how do we proceed with the <a href=\"https://github.com/rust-lang/rust/pull/93800\">PR</a> that had to be reverted? That change must happen afaict for the approach we chose to use valtrees.</p>",
        "id": 272711685,
        "sender_full_name": "BN",
        "timestamp": 1645461887
    },
    {
        "content": "<p>try to land it again while figuring out why the builder suddenly gets so much slower</p>",
        "id": 272713084,
        "sender_full_name": "lcnr",
        "timestamp": 1645462634
    },
    {
        "content": "<p>which is pretty unfortunate xx</p>",
        "id": 272713108,
        "sender_full_name": "lcnr",
        "timestamp": 1645462646
    },
    {
        "content": "<p>yea... basically my suggestion is to run a parallel compiler build on master and see how long it takes for you, then make the changes from the PR, but in tiny steps, they can be split up after all, even if it makes little sense to do, other than bisecting for the change that regresses the build times for parallel compiler this much</p>",
        "id": 272717608,
        "sender_full_name": "oli",
        "timestamp": 1645465246
    },
    {
        "content": "<p>once we know what it is, we'll talk about what to do, but likely we just unrevert it and disable parallel testing on CI</p>",
        "id": 272717634,
        "sender_full_name": "oli",
        "timestamp": 1645465272
    },
    {
        "content": "<p>fwiw, I think it's likely pretty awkward to disable parallel alt builds <em>just</em> here, and if we're going to ignore problems there we might as well just drop parallel from all the alt builders entirely, IMO</p>",
        "id": 272717915,
        "sender_full_name": "simulacrum",
        "timestamp": 1645465448
    },
    {
        "content": "<p>which probably merits an MCP.</p>",
        "id": 272717933,
        "sender_full_name": "simulacrum",
        "timestamp": 1645465462
    },
    {
        "content": "<p>(mingw-check would still verify that parallel at least <em>compiles</em> but that's much less testing than a self-bootstrap gives you)</p>",
        "id": 272717962,
        "sender_full_name": "simulacrum",
        "timestamp": 1645465489
    },
    {
        "content": "<p>it's just so weird that a build will get worse by a significant percentage with such a minor change</p>",
        "id": 272718313,
        "sender_full_name": "oli",
        "timestamp": 1645465717
    },
    {
        "content": "<p>It's completely unrelated to parallel builds if it's indeed just a stage0 compiler building the stage1 compiler</p>",
        "id": 272718371,
        "sender_full_name": "oli",
        "timestamp": 1645465765
    },
    {
        "content": "<p>and that means that we should probably investigate, as it may be a way to save crates out in the wild from hitting such an edge case</p>",
        "id": 272718414,
        "sender_full_name": "oli",
        "timestamp": 1645465799
    },
    {
        "content": "<p>sure, well, parallel builds add a bunch more 'interesting' logic for LLVM's optimization passes (primarily mutexes around queries which means you can't move up/down around them for some ops)</p>",
        "id": 272718484,
        "sender_full_name": "simulacrum",
        "timestamp": 1645465816
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"328097\">BN</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/272708581\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/mir/enum.Rvalue.html#variant.Repeat\"><code>mir::Rvalue::Repeat</code></a> uses a <code>ty::Const</code> and we later need to call its <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_middle/mir/tcx.rs.html#155-210\"><code>ty</code></a> method during codegen to re-create <code>Ty</code> instances. We could just keep using <code>ty::Const</code> in <code>Rvalue::Repeat</code> and use our <code>ValTree</code> -&gt; <code>ConstValue</code> method (that we have to write anyway) during codegen, but this would be somewhat inconsistent since we treat all other constants that appear in the mir as <code>mir::Constant</code>. Are there any other possibilities to get around that problem?</p>\n</blockquote>\n<p>it's more like a valtree → int conversion, which should be trivial</p>",
        "id": 272725989,
        "sender_full_name": "RalfJ",
        "timestamp": 1645470866
    },
    {
        "content": "<p>These are the results for the local compilation times (with parallel enabled) of the changes in the reverted PR:</p>\n<p>master with incremental:</p>\n<div class=\"codehilite\"><pre><span></span><code>real  33m7.138s\nuser  100m10.722s\nsys 2m52.479s\n</code></pre></div>\n<p>master without incremental:</p>\n<div class=\"codehilite\"><pre><span></span><code>real  34m41.919s\nuser  116m26.710s\nsys 2m39.252s\n</code></pre></div>\n<p>with the following changes:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/compiler/rustc_middle/src/mir/mod.rs b/compiler/rustc_middle/src/mir/mod.rs</span><span class=\"w\"></span>\n<span class=\"gh\">index 2126487da02..5642d01de5d 100644</span><span class=\"w\"></span>\n<span class=\"gd\">--- a/compiler/rustc_middle/src/mir/mod.rs</span><span class=\"w\"></span>\n<span class=\"gi\">+++ b/compiler/rustc_middle/src/mir/mod.rs</span><span class=\"w\"></span>\n<span class=\"gu\">@@ -2533,7 +2533,7 @@ pub enum ConstantKind&lt;'tcx&gt; {</span><span class=\"w\"></span>\n\n<span class=\"w\"> </span>impl&lt;'tcx&gt; Constant&lt;'tcx&gt; {<span class=\"w\"></span>\n<span class=\"w\"> </span>    pub fn check_static_ptr(&amp;self, tcx: TyCtxt&lt;'_&gt;) -&gt; Option&lt;DefId&gt; {<span class=\"w\"></span>\n<span class=\"gd\">-        match self.literal.const_for_ty()?.val().try_to_scalar() {</span><span class=\"w\"></span>\n<span class=\"gi\">+        match self.literal.try_to_scalar() {</span><span class=\"w\"></span>\n<span class=\"w\"> </span>            Some(Scalar::Ptr(ptr, _size)) =&gt; match tcx.global_alloc(ptr.provenance) {<span class=\"w\"></span>\n<span class=\"w\"> </span>                GlobalAlloc::Static(def_id) =&gt; {<span class=\"w\"></span>\n<span class=\"w\"> </span>                    assert!(!tcx.is_thread_local_static(def_id));<span class=\"w\"></span>\n</code></pre></div>\n<p>with incremental:</p>\n<div class=\"codehilite\"><pre><span></span><code>real  30m8.408s\nuser  100m23.833s\nsys 2m37.104s\n</code></pre></div>\n<p>without incremental:</p>\n<div class=\"codehilite\"><pre><span></span><code>real  33m29.902s\nuser  113m34.371s\nsys 2m29.305s\n</code></pre></div>\n<p>with these changes:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/compiler/rustc_middle/src/thir.rs b/compiler/rustc_middle/src/thir.rs</span><span class=\"w\"></span>\n<span class=\"gh\">index 40dce281c82..a4e2a7c3e91 100644</span><span class=\"w\"></span>\n<span class=\"gd\">--- a/compiler/rustc_middle/src/thir.rs</span><span class=\"w\"></span>\n<span class=\"gi\">+++ b/compiler/rustc_middle/src/thir.rs</span><span class=\"w\"></span>\n<span class=\"gu\">@@ -17,6 +17,7 @@</span><span class=\"w\"></span>\n<span class=\"w\"> </span>use rustc_index::vec::IndexVec;<span class=\"w\"></span>\n<span class=\"w\"> </span>use rustc_middle::infer::canonical::Canonical;<span class=\"w\"></span>\n<span class=\"w\"> </span>use rustc_middle::middle::region;<span class=\"w\"></span>\n<span class=\"gi\">+use rustc_middle::mir::interpret::AllocId;</span><span class=\"w\"></span>\n<span class=\"w\"> </span>use rustc_middle::mir::{<span class=\"w\"></span>\n<span class=\"w\"> </span>    BinOp, BorrowKind, FakeReadCause, Field, Mutability, UnOp, UserTypeProjection,<span class=\"w\"></span>\n<span class=\"w\"> </span>};<span class=\"w\"></span>\n<span class=\"gu\">@@ -419,7 +420,8 @@ pub enum ExprKind&lt;'tcx&gt; {</span><span class=\"w\"></span>\n<span class=\"w\"> </span>    /// This is only distinguished from `Literal` so that we can register some<span class=\"w\"></span>\n<span class=\"w\"> </span>    /// info for diagnostics.<span class=\"w\"></span>\n<span class=\"w\"> </span>    StaticRef {<span class=\"w\"></span>\n<span class=\"gd\">-        literal: Const&lt;'tcx&gt;,</span><span class=\"w\"></span>\n<span class=\"gi\">+        alloc_id: AllocId,</span><span class=\"w\"></span>\n<span class=\"gi\">+        ty: Ty&lt;'tcx&gt;,</span><span class=\"w\"></span>\n<span class=\"w\"> </span>        def_id: DefId,<span class=\"w\"></span>\n<span class=\"w\"> </span>    },<span class=\"w\"></span>\n<span class=\"w\"> </span>    /// Inline assembly, i.e. `asm!()`.<span class=\"w\"></span>\n<span class=\"gh\">diff --git a/compiler/rustc_middle/src/thir/visit.rs b/compiler/rustc_middle/src/thir/visit.rs</span><span class=\"w\"></span>\n<span class=\"gh\">index 95489ac3ab2..b3e2cb132a2 100644</span><span class=\"w\"></span>\n<span class=\"gd\">--- a/compiler/rustc_middle/src/thir/visit.rs</span><span class=\"w\"></span>\n<span class=\"gi\">+++ b/compiler/rustc_middle/src/thir/visit.rs</span><span class=\"w\"></span>\n<span class=\"gu\">@@ -123,7 +123,7 @@ pub fn walk_expr&lt;'a, 'tcx: 'a, V: Visitor&lt;'a, 'tcx&gt;&gt;(visitor</span><span class=\"w\"></span>\n<span class=\"w\">: &amp;mut V, expr: &amp;Exp</span>\n<span class=\"w\"> </span>        }<span class=\"w\"></span>\n<span class=\"w\"> </span>        Closure { closure_id: _, substs: _, upvars: _, movability: _, fake_reads: _ } =&gt; {}<span class=\"w\"></span>\n<span class=\"w\"> </span>        Literal { literal, user_ty: _, const_id: _ } =&gt; visitor.visit_const(literal),<span class=\"w\"></span>\n<span class=\"gd\">-        StaticRef { literal, def_id: _ } =&gt; visitor.visit_const(literal),</span><span class=\"w\"></span>\n<span class=\"gi\">+        StaticRef { .. } =&gt; {}</span><span class=\"w\"></span>\n<span class=\"w\"> </span>        InlineAsm { ref operands, template: _, options: _, line_spans: _ } =&gt; {<span class=\"w\"></span>\n<span class=\"w\"> </span>            for op in &amp;**operands {<span class=\"w\"></span>\n<span class=\"w\"> </span>                use InlineAsmOperand::*;<span class=\"w\"></span>\n<span class=\"gh\">diff --git a/compiler/rustc_mir_build/src/build/expr/as_constant.rs b/compiler/rustc_mir_build/src/build/expr/as_constant.rs</span><span class=\"w\"></span>\n<span class=\"gh\">index 79ac09d523d..0c0b0f2bd05 100644</span><span class=\"w\"></span>\n<span class=\"gd\">--- a/compiler/rustc_mir_build/src/build/expr/as_constant.rs</span><span class=\"w\"></span>\n<span class=\"gi\">+++ b/compiler/rustc_mir_build/src/build/expr/as_constant.rs</span><span class=\"w\"></span>\n<span class=\"gu\">@@ -1,6 +1,7 @@</span><span class=\"w\"></span>\n<span class=\"w\"> </span>//! See docs in build/expr/mod.rs<span class=\"w\"></span>\n\n<span class=\"w\"> </span>use crate::build::Builder;<span class=\"w\"></span>\n<span class=\"gi\">+use rustc_middle::mir::interpret::{ConstValue, Scalar};</span><span class=\"w\"></span>\n<span class=\"w\"> </span>use rustc_middle::mir::*;<span class=\"w\"></span>\n<span class=\"w\"> </span>use rustc_middle::thir::*;<span class=\"w\"></span>\n<span class=\"w\"> </span>use rustc_middle::ty::CanonicalUserTypeAnnotation;<span class=\"w\"></span>\n<span class=\"gu\">@@ -26,8 +27,12 @@ impl&lt;'a, 'tcx&gt; Builder&lt;'a, 'tcx&gt; {</span><span class=\"w\"></span>\n<span class=\"w\"> </span>                assert_eq!(literal.ty(), ty);<span class=\"w\"></span>\n<span class=\"w\"> </span>                Constant { span, user_ty, literal: literal.into() }<span class=\"w\"></span>\n<span class=\"w\"> </span>            }<span class=\"w\"></span>\n<span class=\"gd\">-            ExprKind::StaticRef { literal, .. } =&gt; {</span><span class=\"w\"></span>\n<span class=\"gd\">-                Constant { span, user_ty: None, literal: literal.into() }</span><span class=\"w\"></span>\n<span class=\"gi\">+            ExprKind::StaticRef { alloc_id, ty, .. } =&gt; {</span><span class=\"w\"></span>\n<span class=\"gi\">+                let const_val =</span><span class=\"w\"></span>\n<span class=\"gi\">+                    ConstValue::Scalar(Scalar::from_pointer(alloc_id.into(), &amp;this.tcx));</span><span class=\"w\"></span>\n<span class=\"gi\">+                let literal = ConstantKind::Val(const_val, ty);</span><span class=\"w\"></span>\n<span class=\"gi\">+</span><span class=\"w\"></span>\n<span class=\"gi\">+                Constant { span, user_ty: None, literal }</span><span class=\"w\"></span>\n<span class=\"w\"> </span>            }<span class=\"w\"></span>\n<span class=\"w\"> </span>            ExprKind::ConstBlock { value } =&gt; {<span class=\"w\"></span>\n<span class=\"w\"> </span>                Constant { span: span, user_ty: None, literal: value.into() }<span class=\"w\"></span>\n<span class=\"gh\">diff --git a/compiler/rustc_mir_build/src/thir/cx/expr.rs b/compiler/rustc_mir_build/src/thir/cx/expr.rs</span><span class=\"w\"></span>\n<span class=\"gh\">index 651edc827c3..5a7e1d88dd0 100644</span><span class=\"w\"></span>\n<span class=\"gd\">--- a/compiler/rustc_mir_build/src/thir/cx/expr.rs</span><span class=\"w\"></span>\n<span class=\"gi\">+++ b/compiler/rustc_mir_build/src/thir/cx/expr.rs</span><span class=\"w\"></span>\n<span class=\"gu\">@@ -8,7 +8,6 @@</span><span class=\"w\"></span>\n<span class=\"w\"> </span>use rustc_middle::hir::place::PlaceBase as HirPlaceBase;<span class=\"w\"></span>\n<span class=\"w\"> </span>use rustc_middle::hir::place::ProjectionKind as HirProjectionKind;<span class=\"w\"></span>\n<span class=\"w\"> </span>use rustc_middle::middle::region;<span class=\"w\"></span>\n<span class=\"gd\">-use rustc_middle::mir::interpret::Scalar;</span><span class=\"w\"></span>\n<span class=\"w\"> </span>use rustc_middle::mir::{BinOp, BorrowKind, Field, UnOp};<span class=\"w\"></span>\n<span class=\"w\"> </span>use rustc_middle::thir::*;<span class=\"w\"></span>\n<span class=\"w\"> </span>use rustc_middle::ty::adjustment::{<span class=\"w\"></span>\n<span class=\"gu\">@@ -941,15 +940,8 @@ fn convert_path_expr(&amp;mut self, expr: &amp;'tcx hir::Expr&lt;'tcx&gt;, res: Res) -&gt; ExprKi</span><span class=\"w\"></span>\n<span class=\"w\"> </span>                let kind = if self.tcx.is_thread_local_static(id) {<span class=\"w\"></span>\n<span class=\"w\"> </span>                    ExprKind::ThreadLocalRef(id)<span class=\"w\"></span>\n<span class=\"w\"> </span>                } else {<span class=\"w\"></span>\n<span class=\"gd\">-                    let ptr = self.tcx.create_static_alloc(id);</span><span class=\"w\"></span>\n<span class=\"gd\">-                    ExprKind::StaticRef {</span><span class=\"w\"></span>\n<span class=\"gd\">-                        literal: ty::Const::from_scalar(</span><span class=\"w\"></span>\n<span class=\"gd\">-                            self.tcx,</span><span class=\"w\"></span>\n<span class=\"gd\">-                            Scalar::from_pointer(ptr.into(), &amp;self.tcx),</span><span class=\"w\"></span>\n<span class=\"gd\">-                            ty,</span><span class=\"w\"></span>\n<span class=\"gd\">-                        ),</span><span class=\"w\"></span>\n<span class=\"gd\">-                        def_id: id,</span><span class=\"w\"></span>\n<span class=\"gd\">-                    }</span><span class=\"w\"></span>\n<span class=\"gi\">+                    let alloc_id = self.tcx.create_static_alloc(id);</span><span class=\"w\"></span>\n<span class=\"gi\">+                    ExprKind::StaticRef { alloc_id, ty, def_id: id }</span><span class=\"w\"></span>\n<span class=\"w\"> </span>                };<span class=\"w\"></span>\n<span class=\"w\"> </span>                ExprKind::Deref {<span class=\"w\"></span>\n<span class=\"w\"> </span>                    arg: self.thir.exprs.push(Expr { ty, temp_lifetime, span: expr.span, kind }),<span class=\"w\"></span>\n</code></pre></div>\n<p>with incremental:</p>\n<div class=\"codehilite\"><pre><span></span><code>real  35m50.094s\nuser  101m39.999s\nsys 3m17.025s\n</code></pre></div>\n<p>without incremental:</p>\n<div class=\"codehilite\"><pre><span></span><code>real  33m48.504s\nuser  114m58.851s\nsys 2m33.117s\n</code></pre></div>\n<p>Though I do find these results somewhat weird, in that incremental/non-incremental don't differ in their compilation times. I changed the following in <code>config.toml</code>: <code>parallel-compiler = true</code> to enable parallel mode and the <code>incremental</code> option for incremental mode (and didn't use the -i option when running <code>\\x.py</code>). Were these supposed to be run differently?</p>",
        "id": 273202927,
        "sender_full_name": "BN",
        "timestamp": 1645779287
    },
    {
        "content": "<p>Maybe the analysis on the PR was wrong and it's not stage1 after all? Your experiments sound correct to me</p>",
        "id": 273203927,
        "sender_full_name": "oli",
        "timestamp": 1645779906
    },
    {
        "content": "<p>It may well be msvc specific, fwiw</p>",
        "id": 273225132,
        "sender_full_name": "simulacrum",
        "timestamp": 1645793928
    },
    {
        "content": "<p>I was definitely able to reproduce with a try build</p>",
        "id": 273225232,
        "sender_full_name": "simulacrum",
        "timestamp": 1645794000
    },
    {
        "content": "<p>So... Can we turn off that parallel rustc builder? Or should we try landing the smaller changes in their own PRs and see how it goes?</p>",
        "id": 273226677,
        "sender_full_name": "oli",
        "timestamp": 1645794751
    },
    {
        "content": "<p>I would test smaller changes via try builds before landing anything, if we take that approach. Or file an MCP to drop parallel compiler from alt builds.</p>\n<p>I'm not really happy with individual builders having different configuration for this kind of thing though.</p>",
        "id": 273229224,
        "sender_full_name": "simulacrum",
        "timestamp": 1645796221
    },
    {
        "content": "<p>There is currently an expectation that parallel compiler is buildable and somewhat tested (via bootstrapping itself) -- if we start to change that, we should probably do it across the board, not just on msvc.</p>",
        "id": 273229285,
        "sender_full_name": "simulacrum",
        "timestamp": 1645796274
    },
    {
        "content": "<blockquote>\n<p>somewhat tested</p>\n</blockquote>\n<p>but only at -Zthreads=1 though, right ? My tests suggest that it probably couldn’t bootstrap easily with some parallelism active</p>",
        "id": 273230997,
        "sender_full_name": "lqd",
        "timestamp": 1645797300
    },
    {
        "content": "<p>Not sure, yeah, quite possible</p>",
        "id": 273231231,
        "sender_full_name": "simulacrum",
        "timestamp": 1645797423
    },
    {
        "content": "<p>(I think that is just more motivation for dropping it; I'd have no objections to that -- I just want us to do that in a more direct manner than gradually rolling back support in bits and pieces)</p>",
        "id": 273231294,
        "sender_full_name": "simulacrum",
        "timestamp": 1645797462
    },
    {
        "content": "<p>With all the ICEs I got, I was thinking of opening a PR to drop it and perf test the bootstrap times.</p>\n<p>And then it sometimes worked and I saw -50% improvements on some crates.</p>",
        "id": 273232126,
        "sender_full_name": "lqd",
        "timestamp": 1645797878
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"328097\">@BN</span> A couple things I might add to your testing strategy:</p>\n<ul>\n<li>Enable rust.verify-llvm-ir</li>\n<li>Enable llvm asserts</li>\n</ul>",
        "id": 273232543,
        "sender_full_name": "simulacrum",
        "timestamp": 1645798080
    },
    {
        "content": "<p>Ok, will try that. Btw the CI builders don't use incremental mode, do they? So it's not necessary to compare incremental/non-incremental versions, is it?</p>",
        "id": 273245223,
        "sender_full_name": "BN",
        "timestamp": 1645804047
    },
    {
        "content": "<p>No, that axis shouldn't matter.</p>",
        "id": 273248034,
        "sender_full_name": "simulacrum",
        "timestamp": 1645805449
    },
    {
        "content": "<p>(likely best to keep it disabled to match CI config)</p>",
        "id": 273248060,
        "sender_full_name": "simulacrum",
        "timestamp": 1645805464
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> Again no noticeable changes:</p>\n<p>master:</p>\n<div class=\"codehilite\"><pre><span></span><code>real  32m56.441s\nuser  115m26.794s\nsys 2m25.0\n</code></pre></div>\n<p>first commit:</p>\n<div class=\"codehilite\"><pre><span></span><code>real  33m11.964s\nuser  113m57.220s\nsys 2m20.031s\n</code></pre></div>\n<p>second commit:</p>\n<div class=\"codehilite\"><pre><span></span><code>real    32m28.369s\nuser    113m49.062s\nsys 2m17.667s\n</code></pre></div>",
        "id": 273278150,
        "sender_full_name": "BN",
        "timestamp": 1645819478
    },
    {
        "content": "<p>and those are all with llvm asserts, parallel, and verification? I'm not sure what to really suggest -- it definitely reproduces in CI, so presumably something about your environment is different</p>\n<p>(Or it's been fixed with other changes which de-tickled whatever code since then)</p>\n<p>It might makes sense to do another try build like the one I did -- I can queue that up</p>",
        "id": 273279997,
        "sender_full_name": "simulacrum",
        "timestamp": 1645820588
    },
    {
        "content": "<p>queued up another try build with a re-land of the PR <a href=\"https://github.com/rust-lang/rust/pull/94195\">https://github.com/rust-lang/rust/pull/94195</a></p>",
        "id": 273280321,
        "sender_full_name": "simulacrum",
        "timestamp": 1645820767
    },
    {
        "content": "<p>Yes I did enable parallel and verify-llvm-ir, wasn't completely sure about the llvm assertions, but I had the assertions flag in <code>config.toml</code> set and thought that was likely what you meant.</p>",
        "id": 273283140,
        "sender_full_name": "BN",
        "timestamp": 1645822102
    },
    {
        "content": "<p>yes, llvm.assertions</p>",
        "id": 273283318,
        "sender_full_name": "simulacrum",
        "timestamp": 1645822215
    },
    {
        "content": "<p>Well, I guess we'll see what the try build says.</p>",
        "id": 273283336,
        "sender_full_name": "simulacrum",
        "timestamp": 1645822224
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang-ci/rust/runs/5337821574?check_suite_focus=true\">https://github.com/rust-lang-ci/rust/runs/5337821574?check_suite_focus=true</a> -- on master, 1h30m<br>\n<a href=\"https://github.com/rust-lang-ci/rust/runs/5338994996?check_suite_focus=true\">https://github.com/rust-lang-ci/rust/runs/5338994996?check_suite_focus=true</a> -- with <a href=\"https://github.com/rust-lang/rust/issues/93800\">#93800</a> re-applied, 2h30m</p>",
        "id": 273296511,
        "sender_full_name": "simulacrum",
        "timestamp": 1645830052
    },
    {
        "content": "<p>so it looks like regression is still there</p>",
        "id": 273296540,
        "sender_full_name": "simulacrum",
        "timestamp": 1645830077
    },
    {
        "content": "<p>Hm that's weird. What exactly is this running, is it just <code>./x.py build library/std</code>?</p>",
        "id": 273324741,
        "sender_full_name": "BN",
        "timestamp": 1645860772
    },
    {
        "content": "<p>Also there was one other change in the PR, namely using an <code>mir::Visitor</code> instead of a <code>TypeVisitor</code> in pretty print related code, but I excluded that from the timing tests, since I didn't think that pretty print code would play a role here. I can test that change specifically again later if it makes sense that this could potentially play a role in the regression.</p>",
        "id": 273324900,
        "sender_full_name": "BN",
        "timestamp": 1645861030
    },
    {
        "content": "<p>It runs x.py dist</p>",
        "id": 273508014,
        "sender_full_name": "simulacrum",
        "timestamp": 1646062902
    },
    {
        "content": "<p>I would not exclude anything at all from local measurements.</p>",
        "id": 273508035,
        "sender_full_name": "simulacrum",
        "timestamp": 1646062910
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/edda7e959d0dea66ec60b064f63bf275ad1c41c5/src/ci/github-actions/ci.yml#L681-L682\">https://github.com/rust-lang/rust/blob/edda7e959d0dea66ec60b064f63bf275ad1c41c5/src/ci/github-actions/ci.yml#L681-L682</a></p>",
        "id": 273508137,
        "sender_full_name": "simulacrum",
        "timestamp": 1646062937
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/273508035\">said</a>:</p>\n<blockquote>\n<p>I would not exclude anything at all from local measurements.</p>\n</blockquote>\n<p>I now measured this including the pretty print change, but got similar results again. In all the tests I performed I ran <code>x.py build</code>, would you expect <code>x.py dist</code> to differ given that the build runs all performed similarly, i.e. would it make sense to re-run the measurements with <code>x.py dist</code>?</p>",
        "id": 273625806,
        "sender_full_name": "BN",
        "timestamp": 1646133940
    },
    {
        "content": "<p>@lcnr and <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> Have a question about exhaustiveness checks on thir patterns. I looked into the code that does this and I'm not completely sure how you expect valtrees to help with this. The exhaustiveness check algorithm works on <code>Pat</code>, but once that is created the algorithm doesn't use anything that valtrees would benefit with afaict. </p>\n<p>We do currently destructure constants in <code>const_to_pat</code> when creating <code>thir::Pat</code>, valtrees would make that easier since we wouldn't need a <code>destructure_const</code> on <code>ConstValue</code> anymore, but if we evaluate to a <code>ty::Const</code> in <code>const_to_pat</code>, we later have to convert the valtree to a <code>ConstValue</code> anyway. So we have the options of either evaluating to <code>ConstValue</code> directly and then destructuring that when creating the <code>thir::Pat</code> or evaluating to a valtree, using that to destructure and then later convert that to a <code>ConstValue</code>, any idea how those options would differ in performance?</p>",
        "id": 273626692,
        "sender_full_name": "BN",
        "timestamp": 1646134424
    },
    {
        "content": "<blockquote>\n<p>but if we evaluate to a ty::Const in const_to_pat, we later have to convert the valtree to a ConstValue anyway.</p>\n</blockquote>\n<p>don't understand what you mean here <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> when do we have to go back to <code>ConstValue</code> here? in the opaque const fallback on structural match violations?</p>",
        "id": 273632906,
        "sender_full_name": "lcnr",
        "timestamp": 1646138014
    },
    {
        "content": "<p>tbh, keep the <code>ConstantKind</code> in your pr and don't change the pattern stuff back to <code>ty::Const</code></p>",
        "id": 273633012,
        "sender_full_name": "lcnr",
        "timestamp": 1646138050
    },
    {
        "content": "<p>going to actually take the time today to just mostly remove <code>const_to_pat</code> for a crater run</p>",
        "id": 273633043,
        "sender_full_name": "lcnr",
        "timestamp": 1646138071
    },
    {
        "content": "<p>and then try and go from there</p>",
        "id": 273633049,
        "sender_full_name": "lcnr",
        "timestamp": 1646138075
    },
    {
        "content": "<p>If valtree conversion succeeds, then we will at most end up with a <code>ty::Const</code> for an integer, no complex valtrees will be in the end result, as all of them will have bee converted to patterns</p>",
        "id": 273644254,
        "sender_full_name": "oli",
        "timestamp": 1646143161
    },
    {
        "content": "<p>Ah I see, I misunderstood how we lower patterns and didn't realize that we lower all constants in patterns to just their basic constituents and won't ever have complex valtrees there. I thought that we would have to create a <code>ConstValue</code> for a constant pattern at some point for code generation. We should definitely use <code>ty::Const</code> then for patterns.</p>",
        "id": 273654329,
        "sender_full_name": "BN",
        "timestamp": 1646147193
    },
    {
        "content": "<blockquote>\n<p>we lower all constants in patterns to just their basic constituents</p>\n</blockquote>\n<p>isnt that logic that is supposed to go away in favor of valtrees?</p>",
        "id": 273875180,
        "sender_full_name": "RalfJ",
        "timestamp": 1646254477
    },
    {
        "content": "<p>currently patterns have to \"destructure\" constants, but that is rather hacky and if it would become part of valtree construction, patterns could work with that nicer representation directly</p>",
        "id": 273875254,
        "sender_full_name": "RalfJ",
        "timestamp": 1646254507
    },
    {
        "content": "<p>You can't SwitchInt on a non-scalar, so those have to be destructured when building MIR for a pattern match.</p>",
        "id": 273892223,
        "sender_full_name": "bjorn3",
        "timestamp": 1646262301
    },
    {
        "content": "<p>yes, sure</p>",
        "id": 273913211,
        "sender_full_name": "RalfJ",
        "timestamp": 1646275123
    },
    {
        "content": "<p>but you dont have to destructure constants. you can just turn them into valtrees, and then \"destructring\" those is trivial since they are already a tree.</p>",
        "id": 273913254,
        "sender_full_name": "RalfJ",
        "timestamp": 1646275163
    },
    {
        "content": "<p>Well you're still destructuring them, but yea, now it's a trivial op.</p>",
        "id": 273947827,
        "sender_full_name": "oli",
        "timestamp": 1646300947
    },
    {
        "content": "<p><code>const_to_pat</code> will basically stay the same, just without destructuring mir constants.</p>",
        "id": 273948099,
        "sender_full_name": "oli",
        "timestamp": 1646301078
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"328097\">BN</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/273625806\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/273508035\">said</a>:</p>\n<blockquote>\n<p>I would not exclude anything at all from local measurements.</p>\n</blockquote>\n<p>I now measured this including the pretty print change, but got similar results again. In all the tests I performed I ran <code>x.py build</code>, would you expect <code>x.py dist</code> to differ given that the build runs all performed similarly, i.e. would it make sense to re-run the measurements with <code>x.py dist</code>?</p>\n</blockquote>\n<p>I would try to match CI environment as closely as possible, ideally msvc etc --- if it helps, you can likely enable that builder on a PR and push changes and wait for it to complete to estimate how slow things are.</p>",
        "id": 273980889,
        "sender_full_name": "simulacrum",
        "timestamp": 1646318019
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/273980889\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"328097\">BN</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/273625806\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/273508035\">said</a>:</p>\n<blockquote>\n<p>I would not exclude anything at all from local measurements.</p>\n</blockquote>\n<p>I now measured this including the pretty print change, but got similar results again. In all the tests I performed I ran <code>x.py build</code>, would you expect <code>x.py dist</code> to differ given that the build runs all performed similarly, i.e. would it make sense to re-run the measurements with <code>x.py dist</code>?</p>\n</blockquote>\n<p>if it helps, you can likely enable that builder on a PR and push changes and wait for it to complete to estimate how slow things are.</p>\n</blockquote>\n<p>Yeah that would help. Can you tell me how to enable that builder on a PR?</p>",
        "id": 273993551,
        "sender_full_name": "BN",
        "timestamp": 1646323139
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/94381/files#diff-b803fcb7f17ed9235f1e5cb1fcd2f5d3b2838429d4368ae4c57ce4436577f03f\">https://github.com/rust-lang/rust/pull/94381/files#diff-b803fcb7f17ed9235f1e5cb1fcd2f5d3b2838429d4368ae4c57ce4436577f03f</a> is an example of enabling a different builder.</p>\n<p>In broad strokes, you do this:</p>\n<ul>\n<li>Edit src/ci/github-actions.yml to copy the builder you're looking for (dist-x86_64-msvc-alt) to the pr: section</li>\n<li>Run x.py run src/tools/expand-yaml-anchors</li>\n<li>Push to your PR branch</li>\n</ul>",
        "id": 273995446,
        "sender_full_name": "simulacrum",
        "timestamp": 1646323814
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> I got similar results on CI as to what I got locally when running these experiments:</p>\n<p><a href=\"https://github.com/rust-lang/rust/pull/94604\">https://github.com/rust-lang/rust/pull/94604</a></p>",
        "id": 274170888,
        "sender_full_name": "BN",
        "timestamp": 1646418995
    },
    {
        "content": "<p>fairly certain that I chose the correct builder</p>",
        "id": 274170950,
        "sender_full_name": "BN",
        "timestamp": 1646419016
    },
    {
        "content": "<p>hm, well, it might have been \"fixed\" since then by unrelated code. Can you add the equivalent of the try commit in <a href=\"https://github.com/rust-lang/rust/pull/94195/commits/0b541329417ebceab985df5c167e0edcfe33b35b\">https://github.com/rust-lang/rust/pull/94195/commits/0b541329417ebceab985df5c167e0edcfe33b35b</a>, so that we can check against that?</p>",
        "id": 274171220,
        "sender_full_name": "simulacrum",
        "timestamp": 1646419118
    },
    {
        "content": "<p>(I'll be happy to kick off a try build with that done)</p>",
        "id": 274171897,
        "sender_full_name": "simulacrum",
        "timestamp": 1646419421
    },
    {
        "content": "<p>pushed the commit</p>",
        "id": 274173157,
        "sender_full_name": "BN",
        "timestamp": 1646420026
    },
    {
        "content": "<p>The regression seems to be gone</p>\n<p><a href=\"https://github.com/rust-lang-ci/rust/runs/5426883489?check_suite_focus=true\">https://github.com/rust-lang-ci/rust/runs/5426883489?check_suite_focus=true</a></p>",
        "id": 274188927,
        "sender_full_name": "BN",
        "timestamp": 1646428337
    },
    {
        "content": "<p>OK</p>",
        "id": 274189036,
        "sender_full_name": "simulacrum",
        "timestamp": 1646428397
    },
    {
        "content": "<p>Let's confirm that on a clean PR that we could otherwise land (so one commit for the original regressing PR, plus one more commit with the try CI changes), rerun try one final time, and then I'm happy to r+ that</p>",
        "id": 274189139,
        "sender_full_name": "simulacrum",
        "timestamp": 1646428444
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> Can you start another try build <a href=\"https://github.com/rust-lang/rust/pull/94702\">here</a>, please?</p>",
        "id": 274407887,
        "sender_full_name": "BN",
        "timestamp": 1646667126
    },
    {
        "content": "<p>can do</p>",
        "id": 274543600,
        "sender_full_name": "DPC",
        "timestamp": 1646747768
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"328097\">BN</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/274407887\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> Can you start another try build <a href=\"https://github.com/rust-lang/rust/pull/94702\">here</a>, please?</p>\n</blockquote>\n<p>do you still need one?</p>",
        "id": 274543663,
        "sender_full_name": "DPC",
        "timestamp": 1646747805
    },
    {
        "content": "<p>no, it was already started</p>",
        "id": 274544257,
        "sender_full_name": "simulacrum",
        "timestamp": 1646748069
    },
    {
        "content": "<p>What are opaque constants exactly?  In the following:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Bar</span><span class=\"p\">(</span><span class=\"kt\">usize</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">FOO</span>: <span class=\"nc\">Bar</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">FOO</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">FOO</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"foo\"</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Bar</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"not foo\"</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>when <code>FOO</code> occurs inside a pattern arm (match as well?), is <code>FOO</code> an opaque constant? Are there any other scenarios in which we talk of opaque constants?</p>",
        "id": 274553152,
        "sender_full_name": "BN",
        "timestamp": 1646751971
    },
    {
        "content": "<p>or is <code>FOO</code> just in general an opaque constant whenever we have a const definition like <code>const FOO: Bar = Bar(1)</code>?</p>",
        "id": 274554194,
        "sender_full_name": "BN",
        "timestamp": 1646752428
    },
    {
        "content": "<p>opaque means, that if you had a <code>Bar(1)</code> arm, you would not get an \"unreachable arm\" lint for it, because nothing is assumed about the constant</p>",
        "id": 274555563,
        "sender_full_name": "oli",
        "timestamp": 1646753019
    },
    {
        "content": "<p>the constant essentially does not participate in exhaustiveness if it is opaque</p>",
        "id": 274555607,
        "sender_full_name": "oli",
        "timestamp": 1646753042
    },
    {
        "content": "<p>Ok thanks, I think I understand what you mean, but just to ensure that I really do... opaque constants are only those occurring in pattern arms that were previously defined with the const keyword (const params cannot occur in patterns right?)?</p>",
        "id": 274557291,
        "sender_full_name": "BN",
        "timestamp": 1646753785
    },
    {
        "content": "<p>opaque constants currently only occur when encountering a non structural match constant behind a reference while destructuring a named constant</p>",
        "id": 274558594,
        "sender_full_name": "lcnr",
        "timestamp": 1646754326
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Bar</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">PartialEq</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">eq</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kc\">false</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Eq</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[derive(PartialEq, Eq)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"nb\">static</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">Bar</span><span class=\"p\">,));</span><span class=\"w\"></span>\n\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">WITH_OPAQUE_BAR</span>: <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">(</span><span class=\"n\">Bar</span><span class=\"p\">,));</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">(</span><span class=\"n\">Bar</span><span class=\"p\">,))</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">WITH_OPAQUE_BAR</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"fm\">panic!</span><span class=\"p\">(</span><span class=\"s\">\"apparently not opaque!\"</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"`Bar` is opaque and uses `PartialEq`\"</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 274559131,
        "sender_full_name": "lcnr",
        "timestamp": 1646754552
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> i forgot why the tuple was needed here again <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 274559169,
        "sender_full_name": "lcnr",
        "timestamp": 1646754574
    },
    {
        "content": "<p><a href=\"https://hackmd.io/@rust-const-generics/r19096qlt\">https://hackmd.io/@rust-const-generics/r19096qlt</a> this is probably helpful</p>",
        "id": 274559690,
        "sender_full_name": "lcnr",
        "timestamp": 1646754778
    },
    {
        "content": "<p>we also use <code>opaque</code> for raw pointers</p>",
        "id": 274559733,
        "sender_full_name": "lcnr",
        "timestamp": 1646754799
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/274559169\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> i forgot why the tuple was needed here again <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n</blockquote>\n<p>because you need a double indirection to actually hit one of the edge cases in the checks</p>",
        "id": 274565616,
        "sender_full_name": "oli",
        "timestamp": 1646756902
    },
    {
        "content": "<p>Since we want to use <code>ty::Const</code> in <code>Node::Leaf</code>, we have a problem when encountering <code>ConstantKind::Val</code> values when constructing <code>AbstractConst</code>s. What shall we do with these? We can't error here. What kind of <code>ConstValue</code>s can we expect here? If this are scalars we could just trivially convert them to valtrees here, but could we encounter more complicated <code>ConstValue</code>s?</p>\n<p>In <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_trait_selection/traits/const_evaluatable.rs.html#352\"><code>recurse_build</code></a> this is what I currently have. Obviously for now we can just construct another <code>ty::Const</code> from the <code>ConstValue</code>, but what do we do later?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">            </span><span class=\"o\">&amp;</span><span class=\"n\">ExprKind</span>::<span class=\"n\">Literal</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">literal</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">literal</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">mir</span>::<span class=\"n\">ConstantKind</span>::<span class=\"n\">Ty</span><span class=\"p\">(</span><span class=\"n\">cv</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">nodes</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">Node</span>::<span class=\"n\">Leaf</span><span class=\"p\">(</span><span class=\"n\">cv</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">mir</span>::<span class=\"n\">ConstantKind</span>::<span class=\"n\">Val</span><span class=\"p\">(</span><span class=\"n\">cv</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"c1\">// what to do with these?</span>\n<span class=\"w\">                    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 274704114,
        "sender_full_name": "BN",
        "timestamp": 1646839867
    },
    {
        "content": "<p>we should try to bould a valtree for the  <code>mir::ConstantKind::Val</code> and error if that fails</p>",
        "id": 274706240,
        "sender_full_name": "lcnr",
        "timestamp": 1646840758
    },
    {
        "content": "<p>why can't you error here? I think we should only ever be encountering <code>mir::ConstantKind::Ty</code></p>",
        "id": 274706245,
        "sender_full_name": "oli",
        "timestamp": 1646840760
    },
    {
        "content": "<p>hmm</p>",
        "id": 274706303,
        "sender_full_name": "oli",
        "timestamp": 1646840767
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/274706245\">said</a>:</p>\n<blockquote>\n<p>why can't you error here? I think we should only ever be encountering <code>mir::ConstantKind::Ty</code></p>\n</blockquote>\n<p>no, <code>foo::&lt;{ N + 3 }&gt;()</code></p>",
        "id": 274706337,
        "sender_full_name": "lcnr",
        "timestamp": 1646840778
    },
    {
        "content": "<p>building a valtree for those is not great unless they are trivial (as mentioned, plain integers)</p>",
        "id": 274706369,
        "sender_full_name": "oli",
        "timestamp": 1646840791
    },
    {
        "content": "<p>here the abstract const has a <code>mir::ConstantKind::Val</code> for the <code>3</code></p>",
        "id": 274706375,
        "sender_full_name": "lcnr",
        "timestamp": 1646840793
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/274706369\">said</a>:</p>\n<blockquote>\n<p>building a valtree for those is not great unless they are trivial (as mentioned, plain integers)</p>\n</blockquote>\n<p>why?</p>",
        "id": 274706387,
        "sender_full_name": "lcnr",
        "timestamp": 1646840800
    },
    {
        "content": "<p>the body of generic ty constants is part of their type (in some sense)</p>",
        "id": 274706433,
        "sender_full_name": "lcnr",
        "timestamp": 1646840825
    },
    {
        "content": "<p>oh, literals are ok, but shouldn't we try to get rid of the logic for converting mir constants to valtrees?</p>",
        "id": 274706455,
        "sender_full_name": "oli",
        "timestamp": 1646840833
    },
    {
        "content": "<p>I mean, how would you even encounter anything but a literal?</p>",
        "id": 274706506,
        "sender_full_name": "oli",
        "timestamp": 1646840868
    },
    {
        "content": "<p>aren't mir constants a lot closer to the result of const eval?</p>",
        "id": 274706514,
        "sender_full_name": "lcnr",
        "timestamp": 1646840871
    },
    {
        "content": "<p>sure, but converting them is... not great. We would need to have mir constants in query arguments, and that bit us last time we tried</p>",
        "id": 274706617,
        "sender_full_name": "oli",
        "timestamp": 1646840911
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/274706506\">said</a>:</p>\n<blockquote>\n<p>I mean, how would you even encounter anything but a literal?</p>\n</blockquote>\n<p>concrete associated constants probably <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> and inline consts if these end up getting supported</p>",
        "id": 274706618,
        "sender_full_name": "lcnr",
        "timestamp": 1646840911
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/274706617\">said</a>:</p>\n<blockquote>\n<p>sure, but converting them is... not great. We would need to have mir constants in query arguments, and that bit us last time we tried</p>\n</blockquote>\n<p>why?</p>",
        "id": 274706643,
        "sender_full_name": "lcnr",
        "timestamp": 1646840922
    },
    {
        "content": "<p>sure, but either of these have def ids that we can evaluate to valtree directly</p>",
        "id": 274706671,
        "sender_full_name": "oli",
        "timestamp": 1646840933
    },
    {
        "content": "<p>we build the abstract const all at once in a query which uses the <code>DefId</code> of the generic ty const</p>",
        "id": 274706686,
        "sender_full_name": "lcnr",
        "timestamp": 1646840943
    },
    {
        "content": "<p>why not great or why query args?</p>",
        "id": 274706698,
        "sender_full_name": "oli",
        "timestamp": 1646840945
    },
    {
        "content": "<p>why query args ^^</p>",
        "id": 274706707,
        "sender_full_name": "lcnr",
        "timestamp": 1646840951
    },
    {
        "content": "<p>right... unevaluated mir constants are fine, we can eval them</p>",
        "id": 274706738,
        "sender_full_name": "oli",
        "timestamp": 1646840974
    },
    {
        "content": "<p>gotta go now, should be able to reply again in a few hours <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> looked into this thread right as i had to leave</p>",
        "id": 274706757,
        "sender_full_name": "lcnr",
        "timestamp": 1646840983
    },
    {
        "content": "<p>but from just the types we could encounter evaluated complex mir constants</p>",
        "id": 274706781,
        "sender_full_name": "oli",
        "timestamp": 1646840996
    },
    {
        "content": "<p>I don't think we'll encounter evaluated ones in practice</p>",
        "id": 274706849,
        "sender_full_name": "oli",
        "timestamp": 1646841011
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/274706849\">said</a>:</p>\n<blockquote>\n<p>I don't think we'll encounter evaluated ones in practice</p>\n</blockquote>\n<p>A lot of tests in <code>ui/generic_const_exprs</code> were failing when I errored when encountering <code>ConstantKind::Val</code> there</p>",
        "id": 274707211,
        "sender_full_name": "BN",
        "timestamp": 1646841177
    },
    {
        "content": "<p>ah nvm think you meant something else</p>",
        "id": 274707412,
        "sender_full_name": "BN",
        "timestamp": 1646841255
    },
    {
        "content": "<p>The other option is just to keep using <code>mir::ConstantKind</code> in <code>Node::Leaf</code> and implement a <code>from_constant(mir::ConstantKind</code> associated function on <code>AbstractConst</code>. That should work afaict since we can just compare <code>ConstValue</code>s when trying to unify. But <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> wasn't fond of using <code>ConstantKind</code> in <code>const_evaluatable</code> since its part of the type system.</p>",
        "id": 274708425,
        "sender_full_name": "BN",
        "timestamp": 1646841618
    },
    {
        "content": "<blockquote>\n<p>But @lcnr wasn't fond of using ConstantKind in const_evaluatable since its part of the type system.</p>\n</blockquote>\n<p>exactly ^^ removing the current <code>ty::Const::Value</code>from the type system is the whole reason we want val trees</p>",
        "id": 274719270,
        "sender_full_name": "lcnr",
        "timestamp": 1646845796
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/274706849\">said</a>:</p>\n<blockquote>\n<p>I don't think we'll encounter evaluated ones in practice</p>\n</blockquote>\n<p>i guess that's an interesting question. If we don't evaluate associated constants and inline constants before building the thir, we always only encounter unevaluated constants - and <code>ConstantKind::Val</code> for literals - when building abstract consts</p>",
        "id": 274719739,
        "sender_full_name": "lcnr",
        "timestamp": 1646845916
    },
    {
        "content": "<p>we can actually make the THIR know about this by lowering from THIR to <code>ConstantKind</code> only during mir building</p>",
        "id": 274720471,
        "sender_full_name": "oli",
        "timestamp": 1646846167
    },
    {
        "content": "<p>then we can re-use the code to convert literals to valtree in const_evaluatable</p>",
        "id": 274720507,
        "sender_full_name": "oli",
        "timestamp": 1646846182
    },
    {
        "content": "<p>yes, that seems like the desirable solution</p>",
        "id": 274721230,
        "sender_full_name": "lcnr",
        "timestamp": 1646846469
    },
    {
        "content": "<p>so i guess <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/thir/enum.ExprKind.html#variant.ConstBlock\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/thir/enum.ExprKind.html#variant.ConstBlock</a> should be </p>\n<div class=\"codehilite\"><pre><span></span><code>ConstBlock {\n    def_id: DefId,\n    substs: SubstsRef&lt;&#39;tcx&gt;,\n}\n</code></pre></div>\n<p>and only get converted to a <code>mir::ConstantKind</code> during mir building</p>",
        "id": 274721404,
        "sender_full_name": "lcnr",
        "timestamp": 1646846544
    },
    {
        "content": "<p>and something similar for literal, maybe we keep the literal representation used in the hir? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 274721629,
        "sender_full_name": "lcnr",
        "timestamp": 1646846644
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"328097\">@BN</span> are you following us here? <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> feel like we're taking quite large logical leaps here</p>\n<p>definitely do ask if anything doesn't completely make sense to you here</p>",
        "id": 274721861,
        "sender_full_name": "lcnr",
        "timestamp": 1646846744
    },
    {
        "content": "<p>hm not entirely sure, you want to keep treating literals and const blocks as <code>Unevaluted</code> until after thir construction?</p>",
        "id": 274723479,
        "sender_full_name": "BN",
        "timestamp": 1646847333
    },
    {
        "content": "<p>I think I still have a poor intuition about at what stages we actually have to evaluate things.</p>",
        "id": 274723675,
        "sender_full_name": "BN",
        "timestamp": 1646847395
    },
    {
        "content": "<p>can go more in depth tomorrow</p>",
        "id": 274724613,
        "sender_full_name": "lcnr",
        "timestamp": 1646847780
    },
    {
        "content": "<p>const blocks as <code>Unevaluated</code> (or well, <code>DefId</code> +  generic arguments) when then get converted to either a <code>ty::Const</code>(when building abstratc consts) or a <code>mir::ConstantKind</code> (when building mir)</p>",
        "id": 274724784,
        "sender_full_name": "lcnr",
        "timestamp": 1646847840
    },
    {
        "content": "<p>literals probably as <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/hir/type.Lit.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/hir/type.Lit.html</a></p>",
        "id": 274724974,
        "sender_full_name": "lcnr",
        "timestamp": 1646847909
    },
    {
        "content": "<p>for associated and named constants (which <code>thir::ExprKind</code>are these?) we also want a <code>DefId</code> + generic arguments pair</p>",
        "id": 274725044,
        "sender_full_name": "lcnr",
        "timestamp": 1646847941
    },
    {
        "content": "<p>so these are similar to const blocks</p>",
        "id": 274725079,
        "sender_full_name": "lcnr",
        "timestamp": 1646847957
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"328097\">BN</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/274723675\">said</a>:</p>\n<blockquote>\n<p>I think I still have a poor intuition about at what stages we actually have to evaluate things.</p>\n</blockquote>",
        "id": 274725157,
        "sender_full_name": "lcnr",
        "timestamp": 1646847975
    },
    {
        "content": "<p>in the type system, i.e. <code>ty::Const</code>, when typechecking the containing item, so before we build the <code>thir</code></p>",
        "id": 274725358,
        "sender_full_name": "lcnr",
        "timestamp": 1646848051
    },
    {
        "content": "<p>for constant values, e.g. in pattern or expressions, i.e. <code>mir::ConstantKind</code>, some time before codegen. For performance reasons, we should do that early in the mir pipeline, as it's a lot easier to optimize with evaluated constants. This can happen far after typechecking</p>",
        "id": 274725643,
        "sender_full_name": "lcnr",
        "timestamp": 1646848150
    },
    {
        "content": "<p>if we keep destructuring constants for patterns, then we want to use <code>ty::Const</code> (or much rather, valtrees directly) for these as well. That can still happen after typeck however</p>",
        "id": 274725952,
        "sender_full_name": "lcnr",
        "timestamp": 1646848257
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/274725358\">said</a>:</p>\n<blockquote>\n<p>in the type system, i.e. <code>ty::Const</code>, when typechecking the containing item, so before we build the <code>thir</code></p>\n</blockquote>\n<p>Thanks for the explanation, but I still have some questions about that. Currently trying to work through some examples with debug to observe the execution flow. In this example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">FOO</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">uses_foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">FOO</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>when we typeck <code>FOO</code>,  we don't evaluate the rhs. Why is that? </p>\n<p>It's not clear to me what we have to evaluate in general. Or if its easier to list, what don't we have to evaluate for typeck and only for codegen?</p>",
        "id": 274813529,
        "sender_full_name": "BN",
        "timestamp": 1646906650
    },
    {
        "content": "<p>the rhs being <code>5 + 4</code> here?</p>",
        "id": 274813679,
        "sender_full_name": "lcnr",
        "timestamp": 1646906753
    },
    {
        "content": "<p>we have to no evaluate that while typechecking <code>FOO</code> because we actually need the results to evaluate it?</p>",
        "id": 274813761,
        "sender_full_name": "lcnr",
        "timestamp": 1646906788
    },
    {
        "content": "<p>typechecking <code>FOO</code> includes checking that <code>5 + 4</code> has the type usize, which infers <code>5</code> and <code>4</code> to have the type <code>usize</code></p>",
        "id": 274813790,
        "sender_full_name": "lcnr",
        "timestamp": 1646906813
    },
    {
        "content": "<p>We have to pretty much evaluate stuff in 2 cases:</p>",
        "id": 274813856,
        "sender_full_name": "lcnr",
        "timestamp": 1646906853
    },
    {
        "content": "<ul>\n<li>we need the resulting value for something</li>\n</ul>",
        "id": 274813870,
        "sender_full_name": "lcnr",
        "timestamp": 1646906861
    },
    {
        "content": "<ul>\n<li>side effects e.g. evaluation failures. Consider <code>const _: () = assert!(some_condition);</code> this should cause a compilation failure but only does so when getting evaluated</li>\n</ul>",
        "id": 274813961,
        "sender_full_name": "lcnr",
        "timestamp": 1646906906
    },
    {
        "content": "<p>the second point doesn't really matter most of the time, so let's focus on where we need the resulting value</p>",
        "id": 274814025,
        "sender_full_name": "lcnr",
        "timestamp": 1646906936
    },
    {
        "content": "<p>during codegen for constants used in expressions</p>",
        "id": 274814123,
        "sender_full_name": "lcnr",
        "timestamp": 1646906988
    },
    {
        "content": "<p>in patterns for exhaustiveness checking (otherwise we could theoretically keep constants in patterns unevaluated until codegen)</p>",
        "id": 274814267,
        "sender_full_name": "lcnr",
        "timestamp": 1646907064
    },
    {
        "content": "<p>constants used in expressions during optimizations (e.g. constant folding - replacing the expr <code>MY_USIZE_CONST + 3</code> with a single constant at compile time)</p>",
        "id": 274814327,
        "sender_full_name": "lcnr",
        "timestamp": 1646907120
    },
    {
        "content": "<p>for constants used in the type system (i.e. constants used as a generic argument, or an array length/repeat expression length) these have to be evaluated during typeck of their parent.</p>",
        "id": 274814526,
        "sender_full_name": "lcnr",
        "timestamp": 1646907233
    },
    {
        "content": "<p>the reason we have to evaluate constants used in the type system is that we need to be able to unify different constants, consider</p>",
        "id": 274814605,
        "sender_full_name": "lcnr",
        "timestamp": 1646907264
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 274814631,
        "sender_full_name": "lcnr",
        "timestamp": 1646907286
    },
    {
        "content": "<p>during typeck of <code>foo</code>, you can think of this as</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">ANON_CONST_1</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">ANON_CONST_2</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">ANON_CONST_1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">ANON_CONST_2</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 274814724,
        "sender_full_name": "lcnr",
        "timestamp": 1646907344
    },
    {
        "content": "<p>note that these two constants aren't actually the same, so for this to successfully compile, we have to evaluate both constants and then compare the resulting value</p>",
        "id": 274814836,
        "sender_full_name": "lcnr",
        "timestamp": 1646907394
    },
    {
        "content": "<p>Thanks a lot, that was very helpful.</p>",
        "id": 274814958,
        "sender_full_name": "BN",
        "timestamp": 1646907468
    },
    {
        "content": "<p>What kind of constants correspond to <code>ty::ConstKind::Infer</code>, <code>ty::ConstKind::Placeholder</code> and <code>ty::ConstKind::Bounded</code>?</p>",
        "id": 274815137,
        "sender_full_name": "BN",
        "timestamp": 1646907579
    },
    {
        "content": "<p><code>ty::ConstKind::Infer</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// here the parameter `N` from `bar` starts out as `ConstKind::Infer`</span>\n<span class=\"c1\">// which is then unified with the `13` through its return type.</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">13</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"p\">();</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 274815348,
        "sender_full_name": "lcnr",
        "timestamp": 1646907704
    },
    {
        "content": "<p><code>ty::ConstKind::Bound</code>:<br>\ni think that one is pretty much only used for canonical queries to replace inference variables. not really relevant for what you're doing right now <a href=\"https://rustc-dev-guide.rust-lang.org/traits/canonical-queries.html?highlight=canonical#canonical-queries\">https://rustc-dev-guide.rust-lang.org/traits/canonical-queries.html?highlight=canonical#canonical-queries</a></p>",
        "id": 274815540,
        "sender_full_name": "lcnr",
        "timestamp": 1646907808
    },
    {
        "content": "<p>also when doing stuff with gats which have a const parameter</p>",
        "id": 274815842,
        "sender_full_name": "lcnr",
        "timestamp": 1646907977
    },
    {
        "content": "<p>you can think of bound variables as <code>for&lt;const N: usize&gt; SomeType&lt;N&gt;</code> (which is currently only valid with lifetimes)</p>",
        "id": 274815918,
        "sender_full_name": "lcnr",
        "timestamp": 1646908029
    },
    {
        "content": "<p><code>ty::ConstKind::Placeholder</code> is pretty much irrelevant <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> we use placeholders when unifying stuff inside of binders, but there shouldn't be any way to get a higher ranked type with some bound constant</p>",
        "id": 274816870,
        "sender_full_name": "lcnr",
        "timestamp": 1646908547
    },
    {
        "content": "<p>currently checking where we actually use that variant <span aria-label=\"sparkles\" class=\"emoji emoji-2728\" role=\"img\" title=\"sparkles\">:sparkles:</span> feel like that's pretty close to never</p>",
        "id": 274816941,
        "sender_full_name": "lcnr",
        "timestamp": 1646908582
    },
    {
        "content": "<p>yeah, <code>ConstKind::Placeholder</code> is literally unused xd</p>",
        "id": 274818106,
        "sender_full_name": "lcnr",
        "timestamp": 1646909392
    },
    {
        "content": "<p>sooo, i guess that means we're waiting for <code>Type: for&lt;const N: usize&gt; Trait&lt;N&gt;</code> bounds</p>",
        "id": 274818228,
        "sender_full_name": "lcnr",
        "timestamp": 1646909463
    },
    {
        "content": "<p>at which point we will need that variant <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 274818244,
        "sender_full_name": "lcnr",
        "timestamp": 1646909473
    },
    {
        "content": "<p>Thanks, really appreciate the help.</p>",
        "id": 274823696,
        "sender_full_name": "BN",
        "timestamp": 1646912893
    },
    {
        "content": "<p>One question about the thir changes we want to make for <code>AbstractConst</code>: it's not clear to me what we want to do with <code>hir::Lit</code> as a representation for <code>ExprKind::Literal</code> in <code>recurse_build</code>? Can we convert those to <code>ty::Const</code>?</p>",
        "id": 274823944,
        "sender_full_name": "BN",
        "timestamp": 1646913072
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/274724974\">said</a>:</p>\n<blockquote>\n<p>literals probably as <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/hir/type.Lit.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/hir/type.Lit.html</a></p>\n</blockquote>\n<p>referring to this</p>",
        "id": 274824099,
        "sender_full_name": "BN",
        "timestamp": 1646913184
    },
    {
        "content": "<p>yeah, convert to <code>ty::Const</code> there</p>",
        "id": 274824232,
        "sender_full_name": "lcnr",
        "timestamp": 1646913278
    },
    {
        "content": "<p>Also afaict (from running some examples) we currently create <code>ExprKind::Literal</code> (with <code>ConstKind::Unevaluated</code>) for associated consts and named constants during thir construction.</p>",
        "id": 274824243,
        "sender_full_name": "BN",
        "timestamp": 1646913289
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/274824232\">said</a>:</p>\n<blockquote>\n<p>yeah, convert to <code>ty::Const</code> there</p>\n</blockquote>\n<p>we want to be able to unify <code>N + SOME_CONST_EVALUATING_TO_3</code> with <code>N + 3</code></p>",
        "id": 274824263,
        "sender_full_name": "lcnr",
        "timestamp": 1646913301
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"328097\">BN</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/274824243\">said</a>:</p>\n<blockquote>\n<p>Also afaict (from running some examples) we currently create <code>ExprKind::Literal</code> (with <code>ConstKind::Unevaluated</code>) for associated consts and named constants during thir construction.</p>\n</blockquote>\n<p><span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span> would need a new <code>thir::ExprKind</code> variant for these in that case</p>",
        "id": 274824296,
        "sender_full_name": "lcnr",
        "timestamp": 1646913320
    },
    {
        "content": "<p>ok. any suggestions for a name?</p>",
        "id": 274824323,
        "sender_full_name": "BN",
        "timestamp": 1646913346
    },
    {
        "content": "<p><code>ExprKind::NamedConst</code> <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 274824337,
        "sender_full_name": "lcnr",
        "timestamp": 1646913361
    },
    {
        "content": "<p>yeah thats not bad. Can use that for now.</p>",
        "id": 274824484,
        "sender_full_name": "BN",
        "timestamp": 1646913469
    },
    {
        "content": "<p>is that variant also used for function items?</p>",
        "id": 274824933,
        "sender_full_name": "lcnr",
        "timestamp": 1646913691
    },
    {
        "content": "<p>idk, i guess <code>NamedConst</code> would still be fine then <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> needs a comment anyways</p>",
        "id": 274825105,
        "sender_full_name": "lcnr",
        "timestamp": 1646913784
    },
    {
        "content": "<p>What are these lowered to in thir construction now?</p>",
        "id": 274825319,
        "sender_full_name": "BN",
        "timestamp": 1646913920
    },
    {
        "content": "<p>do you have an example maybe?</p>",
        "id": 274825329,
        "sender_full_name": "BN",
        "timestamp": 1646913928
    },
    {
        "content": "<p><code>const X: usize = std::mem::size_of::&lt;String&gt;();</code></p>",
        "id": 274825460,
        "sender_full_name": "lcnr",
        "timestamp": 1646913997
    },
    {
        "content": "<p>should get lowered to a constant for <code>std::mem::size_of::&lt;String&gt;</code> and then a call expression</p>",
        "id": 274825489,
        "sender_full_name": "lcnr",
        "timestamp": 1646914011
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>│ │ ├─0ms DEBUG rustc_mir_build::thir::cx::expr expr=Expr { ty: fn() -&gt; usize {std::mem::size_of::&lt;std::string::String&gt;}, temp_lifetime: Some(Node(9)), span: const-fn-test.rs:1:18: 1:45 (#0), kind: Literal { literal: Const { ty: fn() -&gt; usize {std::mem::size_of::&lt;std::string::String&gt;}, val: Value(Scalar(&lt;ZST&gt;)) }, user_ty: None, const_id: None } }\n│ ├─┘\n├─┘\n├─18ms DEBUG rustc_mir_build::thir::cx::expr expr=Expr { ty: usize, temp_lifetime: Some(Node(9)), span: const-fn-test.rs:1:18: 1:47 (#0), kind: Call { ty: fn() -&gt; usize {std::mem::size_of::&lt;std::string::String&gt;}, fun: e1, args: [], from_hir_call: true, fn_span: const-fn-test.rs:1:18: 1:47 (#0) } }\n</code></pre></div>",
        "id": 274826099,
        "sender_full_name": "BN",
        "timestamp": 1646914395
    },
    {
        "content": "<p>i think you can keep a <code>DefId</code> <code>substs</code> pair for that as well <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 274826510,
        "sender_full_name": "lcnr",
        "timestamp": 1646914699
    },
    {
        "content": "<p>so only convert that to a ZST <code>ty::Const</code> or <code>mir::ConstantKind</code> lazily, at least that's what I would try</p>",
        "id": 274826587,
        "sender_full_name": "lcnr",
        "timestamp": 1646914767
    },
    {
        "content": "<p>There are a couple of places where we create literals that don't correspond to anything in the hir, such as <a href=\"https://github.com/rust-lang/rust/blob/ba14a836c7038da21f5e102aacc7e6d5964f79a6/compiler/rustc_mir_build/src/thir/cx/expr.rs#L701-L705\">here</a> or with <a href=\"https://github.com/rust-lang/rust/blob/ba14a836c7038da21f5e102aacc7e6d5964f79a6/compiler/rustc_mir_build/src/thir/cx/expr.rs#L553-L557\">ZSTs</a>. I would be inclined to introduce another variant of <code>ExprKind</code> for those, taking a <code>ty::Const</code>, but for which we know that they correspond to trivial valtrees which we can easily convert to mir::Constant, but is there maybe a better solution?</p>",
        "id": 274847383,
        "sender_full_name": "BN",
        "timestamp": 1646924871
    },
    {
        "content": "<p>the problem is that we don't know ahead of time whether it's going to be <code>ty::Const</code> or <code>mir::Constant</code>, so either choice is wrong</p>",
        "id": 274848356,
        "sender_full_name": "oli",
        "timestamp": 1646925261
    },
    {
        "content": "<p>you could just use a <code>ScalarInt</code> or sth simple like that for your new variant though</p>",
        "id": 274848400,
        "sender_full_name": "oli",
        "timestamp": 1646925290
    },
    {
        "content": "<p>When are we supposed to be able to evaluate constants? Currently in mir building I'm calling <code>const_eval_resolve</code> for an <code>ExprKind::NamedConst</code> (an associated const in this case) and I get an ICE when compiling core, because one value isn't normalizable. Is this to be expected that not everything is normalizable at that stage or is this an indication that something is wrong with the implementation (besides calling <code>const_eval_resolve</code> here^^)?</p>",
        "id": 274962827,
        "sender_full_name": "BN",
        "timestamp": 1646998203
    },
    {
        "content": "<p>you cant evaluate a generic const like say <code>&lt;T as Trait&gt;::ASSOC</code>if the const is <code>mem::size_of::&lt;T&gt;()</code></p>",
        "id": 274963276,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1646998537
    },
    {
        "content": "<p>Ok sorry, I guess I meant whether everything is normalizable at that stage (which is necessary for the evaluation of the constant here).</p>",
        "id": 274963397,
        "sender_full_name": "BN",
        "timestamp": 1646998630
    },
    {
        "content": "<p>no, there will be constants that cant be evaluated in the mir</p>",
        "id": 274963556,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1646998746
    },
    {
        "content": "<p>ok thanks. Do you know whether we have some const evaluation function that internally uses <code>try_normalize_erasing_regions</code>?</p>",
        "id": 274963600,
        "sender_full_name": "BN",
        "timestamp": 1646998787
    },
    {
        "content": "<p>no idea <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 274963742,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1646998888
    },
    {
        "content": "<p>ok no problem, I'll start looking.</p>",
        "id": 274963860,
        "sender_full_name": "BN",
        "timestamp": 1646998973
    },
    {
        "content": "<p>thanks for the help</p>",
        "id": 274963870,
        "sender_full_name": "BN",
        "timestamp": 1646998978
    },
    {
        "content": "<p>what place are you evaluating the generic const at?</p>",
        "id": 274963933,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1646999027
    },
    {
        "content": "<p>In <code>as_constant</code></p>",
        "id": 274964007,
        "sender_full_name": "BN",
        "timestamp": 1646999058
    },
    {
        "content": "<p>that function is in <code>mir_build/build</code></p>",
        "id": 274964028,
        "sender_full_name": "BN",
        "timestamp": 1646999076
    },
    {
        "content": "<p>I think the best solution is to just not try to evaluate there at all and keep this as <code>Unevaluated</code></p>",
        "id": 274964411,
        "sender_full_name": "BN",
        "timestamp": 1646999342
    },
    {
        "content": "<p>This is similar to the problem we worked on before with the 'postpone evaluation' PR, where we encountered ICEs before when calling <code>codegen_fulfill_obligation</code>, which assumes that everything is normalizable</p>",
        "id": 274964545,
        "sender_full_name": "BN",
        "timestamp": 1646999418
    },
    {
        "content": "<p>that one was subtly different I think in that we were trying to evaluate a constant that wouldnt typeck <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 274964575,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1646999454
    },
    {
        "content": "<p>hm I think the problem was that it wasnt normalizable, but not completely certain</p>",
        "id": 274964600,
        "sender_full_name": "BN",
        "timestamp": 1646999482
    },
    {
        "content": "<p>ah no it was that certain values contained inference variables</p>",
        "id": 274964715,
        "sender_full_name": "BN",
        "timestamp": 1646999582
    },
    {
        "content": "<p>do you have a short test case here which breaks?</p>",
        "id": 274987475,
        "sender_full_name": "lcnr",
        "timestamp": 1647011315
    },
    {
        "content": "<p>I settled for not evaluating in <code>as_constant</code> and that fixed the ICE when compiling core. But I'm currently having problems with another ICE in codegen. This is what I get in codegen for some ScalarInt whose size is wrong for some reason:</p>\n<div class=\"codehilite\"><pre><span></span><code>from_const(val: Scalar(0x0000000000000000), ty: u32): layout TyAndLayout { ty: u32, layout: Layout { fields: Primitive, variants: Single { index: 0 }, abi: Scalar(Scalar { value: Int(I32, false), valid_range: 0..=4294967295 }), largest_niche: None, align: AbiAndPrefAlign { abi: Align { pow2: 2 }, pref: Align { pow2: 2 } }, size: Size { raw: 4 } } }\nscalar_to_backend(cv: 0x0000000000000000, layout: Scalar { value: Int(I32, false), valid_range: 0..=4294967295 }, llty: i32, layout.value.size: Size { raw: 4 })\n</code></pre></div>\n<p>This hits the bug call in <a href=\"https://github.com/rust-lang/rust/blob/f58d51b3c00b1e30acd75aead202eb2248bb33f9/compiler/rustc_middle/src/ty/consts/int.rs#L219-L223\"><code>assert_bits</code></a>. It's not clear to me where this originates. Currently I create <code>ScalarInt</code>s for the new <code>ExprKind::ScalarLiteral</code> variant for the offset (which was previously done <a href=\"https://github.com/rust-lang/rust/blob/f58d51b3c00b1e30acd75aead202eb2248bb33f9/compiler/rustc_mir_build/src/thir/cx/expr.rs#L694-L705\">here</a>) like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">source</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">((</span><span class=\"n\">did</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">var_ty</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">var</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">param_env_ty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">param_env</span><span class=\"p\">.</span><span class=\"n\">and</span><span class=\"p\">(</span><span class=\"n\">var_ty</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"p\">.</span><span class=\"n\">layout_of</span><span class=\"p\">(</span><span class=\"n\">param_env_ty</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"p\">.</span><span class=\"n\">unwrap_or_else</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">e</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                                </span><span class=\"fm\">panic!</span><span class=\"p\">(</span><span class=\"s\">\"could not compute layout for {:?}: {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">param_env_ty</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">lit</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ScalarInt</span>::<span class=\"n\">try_from_uint</span><span class=\"p\">(</span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u128</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">kind</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ExprKind</span>::<span class=\"n\">ScalarLiteral</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">lit</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">user_ty</span>: <span class=\"nb\">None</span> <span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">thir</span><span class=\"p\">.</span><span class=\"n\">exprs</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">Expr</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"n\">temp_lifetime</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"n\">ty</span>: <span class=\"nc\">expr_ty</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"n\">span</span>: <span class=\"nc\">expr</span><span class=\"p\">.</span><span class=\"n\">span</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"n\">kind</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"p\">});</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Otherwise I only create ZST ScalarInts like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">ExprKind</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">zero_sized_literal</span><span class=\"p\">(</span><span class=\"n\">user_ty</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">Canonical</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">UserType</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">ExprKind</span>::<span class=\"n\">ScalarLiteral</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">lit</span>: <span class=\"nc\">ty</span>::<span class=\"n\">ScalarInt</span>::<span class=\"n\">ZST</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">user_ty</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>That might be the cause for this ICE. If this isn't the cause I'm not really sure where this could otherwise originate, but could open a WIP PR for you to look at.</p>",
        "id": 274991887,
        "sender_full_name": "BN",
        "timestamp": 1647013476
    },
    {
        "content": "<p>In <code>as_constant</code> I create <code>ConstValue</code>s for <code>ScalarLiteral</code> like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">            </span><span class=\"n\">ExprKind</span>::<span class=\"n\">ScalarLiteral</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">lit</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">user_ty</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">user_ty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">user_ty</span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">user_ty</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">this</span><span class=\"p\">.</span><span class=\"n\">canonical_user_type_annotations</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">CanonicalUserTypeAnnotation</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">span</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">user_ty</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">inferred_ty</span>: <span class=\"nc\">ty</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">});</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">literal</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ConstantKind</span>::<span class=\"n\">Val</span><span class=\"p\">(</span><span class=\"n\">ConstValue</span>::<span class=\"n\">Scalar</span><span class=\"p\">(</span><span class=\"n\">Scalar</span>::<span class=\"n\">Int</span><span class=\"p\">(</span><span class=\"n\">lit</span><span class=\"p\">)),</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">                </span><span class=\"n\">Constant</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">span</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">user_ty</span>: <span class=\"nc\">user_ty</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">literal</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 274992173,
        "sender_full_name": "BN",
        "timestamp": 1647013650
    },
    {
        "content": "<p>where <code>ty</code> is the type of the expression.</p>",
        "id": 274992271,
        "sender_full_name": "BN",
        "timestamp": 1647013692
    },
    {
        "content": "<p>I create zero sized literals in the following places:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">method_callee</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">expr</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">hir</span>::<span class=\"n\">Expr</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">span</span>: <span class=\"nc\">Span</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">overloaded_callee</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"n\">DefId</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">SubstsRef</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Expr</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">temp_lifetime</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">region_scope_tree</span><span class=\"p\">.</span><span class=\"n\">temporary_scope</span><span class=\"p\">(</span><span class=\"n\">expr</span><span class=\"p\">.</span><span class=\"n\">hir_id</span><span class=\"p\">.</span><span class=\"n\">local_id</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">def_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">substs</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">user_ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">overloaded_callee</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">Some</span><span class=\"p\">((</span><span class=\"n\">def_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">substs</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">def_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">substs</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">None</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">kind</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">def_id</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">typeck_results</span><span class=\"p\">().</span><span class=\"n\">type_dependent_def</span><span class=\"p\">(</span><span class=\"n\">expr</span><span class=\"p\">.</span><span class=\"n\">hir_id</span><span class=\"p\">).</span><span class=\"n\">unwrap_or_else</span><span class=\"p\">(</span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">span_bug</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">expr</span><span class=\"p\">.</span><span class=\"n\">span</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"no type-dependent def for method callee\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">});</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">user_ty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">user_substs_applied_to_res</span><span class=\"p\">(</span><span class=\"n\">expr</span><span class=\"p\">.</span><span class=\"n\">hir_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Res</span>::<span class=\"n\">Def</span><span class=\"p\">(</span><span class=\"n\">kind</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">def_id</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">debug</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"method_callee: user_ty={:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">user_ty</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">(</span><span class=\"n\">def_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">typeck_results</span><span class=\"p\">().</span><span class=\"n\">node_substs</span><span class=\"p\">(</span><span class=\"n\">expr</span><span class=\"p\">.</span><span class=\"n\">hir_id</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">user_ty</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">().</span><span class=\"n\">mk_fn_def</span><span class=\"p\">(</span><span class=\"n\">def_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">substs</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Expr</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">temp_lifetime</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">span</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">kind</span>: <span class=\"nc\">ExprKind</span>::<span class=\"n\">zero_sized_literal</span><span class=\"p\">(</span><span class=\"n\">user_ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">convert_path_expr</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">expr</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">tcx</span> <span class=\"nc\">hir</span>::<span class=\"n\">Expr</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">res</span>: <span class=\"nc\">Res</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">ExprKind</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">substs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">typeck_results</span><span class=\"p\">().</span><span class=\"n\">node_substs</span><span class=\"p\">(</span><span class=\"n\">expr</span><span class=\"p\">.</span><span class=\"n\">hir_id</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"c1\">// A regular function, constructor function or a constant.</span>\n<span class=\"w\">            </span><span class=\"n\">Res</span>::<span class=\"n\">Def</span><span class=\"p\">(</span><span class=\"n\">DefKind</span>::<span class=\"nb\">Fn</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Res</span>::<span class=\"n\">Def</span><span class=\"p\">(</span><span class=\"n\">DefKind</span>::<span class=\"n\">AssocFn</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Res</span>::<span class=\"n\">Def</span><span class=\"p\">(</span><span class=\"n\">DefKind</span>::<span class=\"n\">Ctor</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">CtorKind</span>::<span class=\"nb\">Fn</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Res</span>::<span class=\"n\">SelfCtor</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">ExprKind</span>::<span class=\"n\">zero_sized_literal</span><span class=\"p\">(</span><span class=\"nb\">None</span><span class=\"p\">),</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">                            </span><span class=\"n\">hir</span>::<span class=\"n\">InlineAsmOperand</span>::<span class=\"n\">Sym</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"n\">expr</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">hir</span>::<span class=\"n\">ExprKind</span>::<span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"n\">qpath</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">expr</span><span class=\"p\">.</span><span class=\"n\">kind</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                                    </span><span class=\"n\">span_bug</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">                                        </span><span class=\"n\">expr</span><span class=\"p\">.</span><span class=\"n\">span</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                                        </span><span class=\"s\">\"asm `sym` operand should be a path, found {:?}\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                                        </span><span class=\"n\">expr</span><span class=\"p\">.</span><span class=\"n\">kind</span><span class=\"w\"></span>\n<span class=\"w\">                                    </span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                                </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">                                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">temp_lifetime</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"w\">                                    </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">region_scope_tree</span><span class=\"p\">.</span><span class=\"n\">temporary_scope</span><span class=\"p\">(</span><span class=\"n\">expr</span><span class=\"p\">.</span><span class=\"n\">hir_id</span><span class=\"p\">.</span><span class=\"n\">local_id</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">typeck_results</span><span class=\"p\">().</span><span class=\"n\">qpath_res</span><span class=\"p\">(</span><span class=\"n\">qpath</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">expr</span><span class=\"p\">.</span><span class=\"n\">hir_id</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                                </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                                    </span><span class=\"n\">Res</span>::<span class=\"n\">Def</span><span class=\"p\">(</span><span class=\"n\">DefKind</span>::<span class=\"nb\">Fn</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Res</span>::<span class=\"n\">Def</span><span class=\"p\">(</span><span class=\"n\">DefKind</span>::<span class=\"n\">AssocFn</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                                        </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">typeck_results</span><span class=\"p\">().</span><span class=\"n\">node_type</span><span class=\"p\">(</span><span class=\"n\">expr</span><span class=\"p\">.</span><span class=\"n\">hir_id</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                                        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">user_ty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"w\">                                            </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">user_substs_applied_to_res</span><span class=\"p\">(</span><span class=\"n\">expr</span><span class=\"p\">.</span><span class=\"n\">hir_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                                        </span><span class=\"n\">InlineAsmOperand</span>::<span class=\"n\">SymFn</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                                            </span><span class=\"n\">expr</span>: <span class=\"nc\">self</span><span class=\"p\">.</span><span class=\"n\">thir</span><span class=\"p\">.</span><span class=\"n\">exprs</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">Expr</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                                                </span><span class=\"n\">ty</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                                                </span><span class=\"n\">temp_lifetime</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                                                </span><span class=\"n\">span</span>: <span class=\"nc\">expr</span><span class=\"p\">.</span><span class=\"n\">span</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                                                </span><span class=\"n\">kind</span>: <span class=\"nc\">ExprKind</span>::<span class=\"n\">zero_sized_literal</span><span class=\"p\">(</span><span class=\"n\">user_ty</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">                                            </span><span class=\"p\">}),</span><span class=\"w\"></span>\n<span class=\"w\">                                        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                                    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">                                    </span><span class=\"n\">Res</span>::<span class=\"n\">Def</span><span class=\"p\">(</span><span class=\"n\">DefKind</span>::<span class=\"n\">Static</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">def_id</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                                        </span><span class=\"n\">InlineAsmOperand</span>::<span class=\"n\">SymStatic</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">def_id</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                                    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">                                    </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                                        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">sess</span><span class=\"p\">.</span><span class=\"n\">span_err</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">                                            </span><span class=\"n\">expr</span><span class=\"p\">.</span><span class=\"n\">span</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                                            </span><span class=\"s\">\"asm `sym` operand must point to a fn or static\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                                        </span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">                                        </span><span class=\"c1\">// Not a real fn, but we're not reaching codegen anyways...</span>\n<span class=\"w\">                                        </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">ty_error</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">                                        </span><span class=\"n\">InlineAsmOperand</span>::<span class=\"n\">SymFn</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                                            </span><span class=\"n\">expr</span>: <span class=\"nc\">self</span><span class=\"p\">.</span><span class=\"n\">thir</span><span class=\"p\">.</span><span class=\"n\">exprs</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">Expr</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                                                </span><span class=\"n\">ty</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                                                </span><span class=\"n\">temp_lifetime</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                                                </span><span class=\"n\">span</span>: <span class=\"nc\">expr</span><span class=\"p\">.</span><span class=\"n\">span</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                                                </span><span class=\"n\">kind</span>: <span class=\"nc\">ExprKind</span>::<span class=\"n\">zero_sized_literal</span><span class=\"p\">(</span><span class=\"nb\">None</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">                                            </span><span class=\"p\">}),</span><span class=\"w\"></span>\n<span class=\"w\">                                        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                                    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>These are all in <code>make_mirror_unadjusted</code>.</p>",
        "id": 274992681,
        "sender_full_name": "BN",
        "timestamp": 1647013920
    },
    {
        "content": "<p>What's the specific ICE message that you are getting? (The sizes may give hints as to what is wrong)</p>",
        "id": 274996754,
        "sender_full_name": "oli",
        "timestamp": 1647015656
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error: internal compiler error: /Users/bn/Documents/rust-local-fork/thir-abstract-const/compiler/rustc_middle/src/ty/consts/int.rs:221:13: expected int of size 4, but got size 8\n</code></pre></div>\n<p><a href=\"https://github.com/rust-lang/rust/blob/f58d51b3c00b1e30acd75aead202eb2248bb33f9/compiler/rustc_codegen_llvm/src/common.rs#L227\">This</a> is the call that triggers the ICE.</p>\n<p><code>layout</code> here is <code>layout: Scalar { value: Int(I32, true), valid_range: 0..=4294967295 }</code>, <code>layout.value.size: Size { raw: 4 } </code> and the scalar int here is <code>int: 0x0000000000000000, int.size: Size { raw: 8 }</code>.</p>\n<p><code>scalar_to_backend</code> is called from <a href=\"https://github.com/rust-lang/rust/blob/af8604faddc44b27a59d1a719ff6ceca8bc145eb/compiler/rustc_codegen_ssa/src/mir/operand.rs#L68-L86\"><code>from_const</code></a> , which takes the following arguments in the call that triggers the ICE:</p>\n<div class=\"codehilite\"><pre><span></span><code>from_const(val: Scalar(0x0000000000000000), ty: u32): layout TyAndLayout { ty: u32, layout: Layout { fields: Primitive, variants: Single { index: 0 }, abi: Scalar(Scalar { value: Int(I32, false), valid_range: 0..=4294967295 }), largest_niche: None, align: AbiAndPrefAlign { abi: Align { pow2: 2 }, pref: Align { pow2: 2 } }, size: Size { raw: 4 } } }\n</code></pre></div>",
        "id": 274999707,
        "sender_full_name": "BN",
        "timestamp": 1647017109
    },
    {
        "content": "<p>where is the failing <code>from_const</code> call happening? It looks like the scalar being given is definitely of size 8, where does that size come from?</p>",
        "id": 275006845,
        "sender_full_name": "oli",
        "timestamp": 1647020164
    },
    {
        "content": "<p>This is during codegen for this statement: <code>statement.kind: Assign((_5, const 0_u64 as u32 (Misc)))</code> so the mir constant we created during mir building is <code>const 0_u64</code> with type u32. Must somehow assign the wrong type to the constant, but  I always use the type of the passed expression in <code>as_constant</code>?!</p>",
        "id": 275025546,
        "sender_full_name": "BN",
        "timestamp": 1647028438
    },
    {
        "content": "<p>This code must be wrong, I create the wrong <code>size</code> for the ScalarInts:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">source</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">((</span><span class=\"n\">did</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">var_ty</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">var</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">param_env_ty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">param_env</span><span class=\"p\">.</span><span class=\"n\">and</span><span class=\"p\">(</span><span class=\"n\">var_ty</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"p\">.</span><span class=\"n\">layout_of</span><span class=\"p\">(</span><span class=\"n\">param_env_ty</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"p\">.</span><span class=\"n\">unwrap_or_else</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">e</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                                </span><span class=\"fm\">panic!</span><span class=\"p\">(</span><span class=\"s\">\"could not compute layout for {:?}: {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">param_env_ty</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">lit</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ScalarInt</span>::<span class=\"n\">try_from_uint</span><span class=\"p\">(</span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u128</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">kind</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ExprKind</span>::<span class=\"n\">ScalarLiteral</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">lit</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">user_ty</span>: <span class=\"nb\">None</span> <span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>\n<p>since if I use the following assertion in <code>as_constant</code> (where <code>ty</code> is the type of  the <code>thir::Expr</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">            </span><span class=\"n\">ExprKind</span>::<span class=\"n\">ScalarLiteral</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">lit</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">user_ty</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">user_ty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">user_ty</span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">user_ty</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">this</span><span class=\"p\">.</span><span class=\"n\">canonical_user_type_annotations</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">CanonicalUserTypeAnnotation</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">span</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">user_ty</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">inferred_ty</span>: <span class=\"nc\">ty</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">});</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">layout</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">layout_of</span><span class=\"p\">(</span><span class=\"n\">this</span><span class=\"p\">.</span><span class=\"n\">param_env</span><span class=\"p\">.</span><span class=\"n\">and</span><span class=\"p\">(</span><span class=\"n\">ty</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">lit</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">layout</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>this triggers:</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;rustc&#39; panicked at &#39;assertion failed: `(left == right)`\n  left: `Size { raw: 8 }`,\n right: `Size { raw: 4 }`&#39;, compiler/rustc_mir_build/src/build/expr/as_constant.rs:62:21\n</code></pre></div>\n<p>How can I get the correct size for the ScalarInt here?</p>",
        "id": 275028998,
        "sender_full_name": "BN",
        "timestamp": 1647030195
    },
    {
        "content": "<p>I think the <code>var_ty</code> is the wrong type to use here? What did the logic look like before?</p>",
        "id": 275039297,
        "sender_full_name": "oli",
        "timestamp": 1647035897
    },
    {
        "content": "<p>I'm slightly confused about the variable naming tho. What is <code>offset</code>? Are you sure that is the problematic <code>ExprKind::ScalarLiteral</code> creation site?</p>",
        "id": 275039299,
        "sender_full_name": "oli",
        "timestamp": 1647035897
    },
    {
        "content": "<p>I think the <code>var_ty</code> is the wrong type to use here? What did the logic look like before?</p>",
        "id": 275039300,
        "sender_full_name": "oli",
        "timestamp": 1647035897
    },
    {
        "content": "<p>It <a href=\"https://github.com/rust-lang/rust/blob/2c6a29af35a81e20f8af4c32bf1b55c59b89eccd/compiler/rustc_mir_build/src/thir/cx/expr.rs#L694-L706\">also used <code>var_ty</code></a>, it just called <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_middle/ty/consts.rs.html#207\"><code>ty::Const::from_bits</code></a>, which internally creates the <code>ScalarInt</code> in the same way, so this is weird ^^</p>",
        "id": 275086483,
        "sender_full_name": "BN",
        "timestamp": 1647076015
    },
    {
        "content": "<p>OK that is weird</p>",
        "id": 275086746,
        "sender_full_name": "oli",
        "timestamp": 1647076434
    },
    {
        "content": "<p>Can you push your diff somewhere?</p>",
        "id": 275086785,
        "sender_full_name": "oli",
        "timestamp": 1647076449
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/94876\">https://github.com/rust-lang/rust/pull/94876</a></p>",
        "id": 275087041,
        "sender_full_name": "BN",
        "timestamp": 1647076956
    },
    {
        "content": "<p>Left some comments</p>",
        "id": 275087814,
        "sender_full_name": "oli",
        "timestamp": 1647078288
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> , that was the problem</p>",
        "id": 275087824,
        "sender_full_name": "BN",
        "timestamp": 1647078304
    },
    {
        "content": "<p>In our current design we need to resolve/evaluate in the construction of the <code>AbstractConst</code>, this requires us to pass a <code>ParamEnv</code> to the queries that do that (<code>thir_abstract_const</code> and <code>thir_abstract_const_of_const_arg</code>). We would presumably need to pass in a <code>ParamEnvAnd</code> as the key for that query (using <code>DefId</code> for the <code>value</code>). <code>DefId</code> isn't <code>TypeFoldable</code>, which is required for <code>ParamEnvAnd</code>. Since this hasn't been implemented for <code>DefId</code> before, I wonder whether this is the correct approach or whether this might lead to problems?</p>",
        "id": 275092110,
        "sender_full_name": "BN",
        "timestamp": 1647084849
    },
    {
        "content": "<p>Alternatively I guess we can just use a Tuple for the query key, but wondering why this wasn't done on the other const related queries.</p>",
        "id": 275092261,
        "sender_full_name": "BN",
        "timestamp": 1647085089
    },
    {
        "content": "<p>ok nvm looks like using the tuple is the correct approach, just have to implement <code>Key</code> for <code>(DefId, ParamEnv)</code>.</p>",
        "id": 275092354,
        "sender_full_name": "BN",
        "timestamp": 1647085296
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"328097\">BN</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/275092110\">said</a>:</p>\n<blockquote>\n<p>In our current design we need to resolve/evaluate in the construction of the <code>AbstractConst</code>, this requires us to pass a <code>ParamEnv</code> to the queries that do that (<code>thir_abstract_const</code> and <code>thir_abstract_const_of_const_arg</code>). We would presumably need to pass in a <code>ParamEnvAnd</code> as the key for that query (using <code>DefId</code> for the <code>value</code>). <code>DefId</code> isn't <code>TypeFoldable</code>, which is required for <code>ParamEnvAnd</code>. Since this hasn't been implemented for <code>DefId</code> before, I wonder whether this is the correct approach or whether this might lead to problems?</p>\n</blockquote>\n<p>i don't think that is true, the correct param env inside of these queries is the param env of the anon const</p>",
        "id": 275199291,
        "sender_full_name": "lcnr",
        "timestamp": 1647240772
    },
    {
        "content": "<p>so the key should stay as <code>DefId</code> for  <code>thir_abstract_const</code>  and you can use <code>tcx.param_env(def_id)</code> to get the correct param env for anything happening inside of the query</p>",
        "id": 275199380,
        "sender_full_name": "lcnr",
        "timestamp": 1647240867
    },
    {
        "content": "<p>I noticed that you can do that yesterday, after already having re-written the queries ^^</p>",
        "id": 275200785,
        "sender_full_name": "BN",
        "timestamp": 1647242524
    },
    {
        "content": "<p><span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> ^^</p>",
        "id": 275200819,
        "sender_full_name": "lcnr",
        "timestamp": 1647242581
    },
    {
        "content": "<p>Whats the correct way to infer that an <code>Expr</code> for which we try to construct an <code>AbstractConst</code> is polymorphic with the new changes? I currently consider any occurrence of <code>ExprKind::ConstParam</code> and <code>ExprKind::NamedConst</code> to be polymorphic in addition to <code>expr.ty.has_param_types_or_consts</code>, but do get an ICE with that change...</p>",
        "id": 275214916,
        "sender_full_name": "BN",
        "timestamp": 1647252436
    },
    {
        "content": "<p>Referring to this code: <a href=\"https://github.com/rust-lang/rust/blob/6b9b2bd3154e866e5ba5e4110f478e5904e0936b/compiler/rustc_trait_selection/src/traits/const_evaluatable.rs#L310-L338\">https://github.com/rust-lang/rust/blob/6b9b2bd3154e866e5ba5e4110f478e5904e0936b/compiler/rustc_trait_selection/src/traits/const_evaluatable.rs#L310-L338</a></p>",
        "id": 275214958,
        "sender_full_name": "BN",
        "timestamp": 1647252466
    },
    {
        "content": "<p>Though this might be the correct choice and the ICE is unrelated to that change.</p>",
        "id": 275215362,
        "sender_full_name": "BN",
        "timestamp": 1647252767
    },
    {
        "content": "<p>Currently getting a <code>delay_span_bug</code> to be raised, but no error encountered ICE for this test: <a href=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/const-generics/issues/issue-89334.rs\">https://github.com/rust-lang/rust/blob/master/src/test/ui/const-generics/issues/issue-89334.rs</a></p>",
        "id": 275215585,
        "sender_full_name": "BN",
        "timestamp": 1647252928
    },
    {
        "content": "<p>what is the ICE msg? or can you upload your current changes again?</p>",
        "id": 275215595,
        "sender_full_name": "lcnr",
        "timestamp": 1647252937
    },
    {
        "content": "<p>which is triggered here:  <a href=\"https://github.com/rust-lang/rust/blob/b7511248f9c1b00f4dd7b32f3323cd42a3d91172/compiler/rustc_trait_selection/src/traits/codegen.rs#L69\">https://github.com/rust-lang/rust/blob/b7511248f9c1b00f4dd7b32f3323cd42a3d91172/compiler/rustc_trait_selection/src/traits/codegen.rs#L69</a></p>",
        "id": 275215703,
        "sender_full_name": "BN",
        "timestamp": 1647252988
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/94876/commits/a2ef0d420c920ce596507946bf9c961f7ca092e1\">https://github.com/rust-lang/rust/pull/94876/commits/a2ef0d420c920ce596507946bf9c961f7ca092e1</a> (sorry this contains some unnecessary debug statements)</p>",
        "id": 275215949,
        "sender_full_name": "BN",
        "timestamp": 1647253120
    },
    {
        "content": "<p>But I can try to investigate the ICE by myself. Just wanted to know whether the changes to <code>IsThirPolymorphic</code> are correct</p>",
        "id": 275216057,
        "sender_full_name": "BN",
        "timestamp": 1647253198
    },
    {
        "content": "<p>I'm not sure why they are necessary</p>",
        "id": 275216182,
        "sender_full_name": "oli",
        "timestamp": 1647253261
    },
    {
        "content": "<p>what is <code>thir::ExprKind::ConstParam</code>?</p>",
        "id": 275216271,
        "sender_full_name": "lcnr",
        "timestamp": 1647253303
    },
    {
        "content": "<p>that one is for <code>const N: usize</code> and then <code>1 + N</code> in the constant i guess</p>",
        "id": 275216313,
        "sender_full_name": "lcnr",
        "timestamp": 1647253322
    },
    {
        "content": "<p>so yeah, makes sense</p>",
        "id": 275216354,
        "sender_full_name": "lcnr",
        "timestamp": 1647253329
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/071ac6dd14e5fd3db65b5e6cc8768c438e97d16e/compiler/rustc_middle/src/thir.rs#L426-L430\">https://github.com/rust-lang/rust/blob/071ac6dd14e5fd3db65b5e6cc8768c438e97d16e/compiler/rustc_middle/src/thir.rs#L426-L430</a></p>",
        "id": 275216393,
        "sender_full_name": "BN",
        "timestamp": 1647253354
    },
    {
        "content": "<p>Oh because previously it was handled by the visit_const</p>",
        "id": 275216482,
        "sender_full_name": "oli",
        "timestamp": 1647253401
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/275216182\">said</a>:</p>\n<blockquote>\n<p>I'm not sure why they are necessary</p>\n</blockquote>\n<p>Because without them we don't construct <code>AbstractConst</code>s in some cases in which we previously did.</p>",
        "id": 275216505,
        "sender_full_name": "BN",
        "timestamp": 1647253414
    },
    {
        "content": "<p>Maybe it's overzealous now?</p>",
        "id": 275216621,
        "sender_full_name": "oli",
        "timestamp": 1647253477
    },
    {
        "content": "<p>so  <code>NamedConst</code> is wrong in some cases</p>",
        "id": 275216633,
        "sender_full_name": "lcnr",
        "timestamp": 1647253489
    },
    {
        "content": "<p>Like treating non-generic named constants as polymorphic?</p>",
        "id": 275216654,
        "sender_full_name": "oli",
        "timestamp": 1647253497
    },
    {
        "content": "<p>currently looking through the whole wip pr for the first time</p>",
        "id": 275216656,
        "sender_full_name": "lcnr",
        "timestamp": 1647253498
    },
    {
        "content": "<p>for <code>namedConst</code> you have to look at the substs</p>",
        "id": 275216664,
        "sender_full_name": "lcnr",
        "timestamp": 1647253506
    },
    {
        "content": "<p>and check whether they contain a generic param</p>",
        "id": 275216672,
        "sender_full_name": "lcnr",
        "timestamp": 1647253513
    },
    {
        "content": "<p>OK I'll shut up instead of racing with @lcnr</p>",
        "id": 275216680,
        "sender_full_name": "oli",
        "timestamp": 1647253516
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/275216664\">said</a>:</p>\n<blockquote>\n<p>for <code>namedConst</code> you have to look at the substs</p>\n</blockquote>\n<p>yeah that makes sense</p>",
        "id": 275216803,
        "sender_full_name": "BN",
        "timestamp": 1647253566
    },
    {
        "content": "<p>oh thats kinda sus <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 275216819,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1647253581
    },
    {
        "content": "<p>spooky that we might miss generics because of it not recursing into substs automagically</p>",
        "id": 275216842,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1647253601
    },
    {
        "content": "<p>i think it's fine cause the type information in the thir is still incomplete</p>",
        "id": 275216906,
        "sender_full_name": "lcnr",
        "timestamp": 1647253643
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"328097\">@BN</span> i think you should remove <code>fn visit_const</code> from the <code>thir::Visitor</code> though, that method now causes more harm than good</p>",
        "id": 275216943,
        "sender_full_name": "lcnr",
        "timestamp": 1647253667
    },
    {
        "content": "<p>considering that the thir doesn't contain constants anymore</p>",
        "id": 275216958,
        "sender_full_name": "lcnr",
        "timestamp": 1647253677
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"328097\">BN</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/275216057\">said</a>:</p>\n<blockquote>\n<p>But I can try to investigate the ICE by myself. Just wanted to know whether the changes to <code>IsThirPolymorphic</code> are correct</p>\n</blockquote>\n<p>after the <code>NamedConst</code> changes they should be. Would have to look at the resulting <code>AbstractConst</code>s and obligations myself to figure out more</p>",
        "id": 275217762,
        "sender_full_name": "lcnr",
        "timestamp": 1647254113
    },
    {
        "content": "<p>this code <a href=\"https://github.com/rust-lang/rust/blob/a2ef0d420c920ce596507946bf9c961f7ca092e1/compiler/rustc_trait_selection/src/traits/const_evaluatable.rs#L407-L420\">here</a> must be wrong. E.g. in <a href=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/const-generics/issues/issue-89334.rs\">this test</a> we get the following in that code when trying to resolve the associated const.</p>\n<div class=\"codehilite\"><pre><span></span><code>│ ├─2ms DEBUG rustc_trait_selection::traits::const_evaluatable recurse_build: node=Expr { ty: usize, temp_lifetime: Some(Node(20)), span: src/test/ui/const-generics/issues/issue-89334.rs:12:10: 12:23 (#0), kind: NamedConst { def_id: DefId(0:4 ~ issue_89334[2858]::AnotherTrait::ARRAY_SIZE), substs: [T], user_ty: None } }\n│ ├─2ms DEBUG rustc_trait_selection::traits::const_evaluatable param_env: ParamEnv { caller_bounds: [Binder(TraitPredicate(&lt;Self as AnotherTrait&gt;, polarity:Positive), [])], reveal: UserFacing, constness: Const }\n</code></pre></div>\n<p>In this case we have to sub in <code>Self</code> for <code>T</code>. But this does not seem to be the correct place to do that, should this be done earlier?</p>",
        "id": 275222366,
        "sender_full_name": "BN",
        "timestamp": 1647256808
    },
    {
        "content": "<p>yes, the code here is wrong <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 275222579,
        "sender_full_name": "lcnr",
        "timestamp": 1647256993
    },
    {
        "content": "<p>good catch</p>",
        "id": 275222582,
        "sender_full_name": "lcnr",
        "timestamp": 1647256995
    },
    {
        "content": "<p>Or maybe we shouldn't try to evaluate here at all?!</p>",
        "id": 275222593,
        "sender_full_name": "BN",
        "timestamp": 1647257008
    },
    {
        "content": "<p><code>self.tcx.param_env(def_id).subst(tcx, substs)</code></p>",
        "id": 275222599,
        "sender_full_name": "lcnr",
        "timestamp": 1647257010
    },
    {
        "content": "<p>so the param env of the associated constant has the generic parameters <code>[Self]</code></p>",
        "id": 275222611,
        "sender_full_name": "lcnr",
        "timestamp": 1647257029
    },
    {
        "content": "<p>but we want it to have <code>[T]</code> instead</p>",
        "id": 275222617,
        "sender_full_name": "lcnr",
        "timestamp": 1647257037
    },
    {
        "content": "<p>so we have to substitute the parameters with the ones used by the named constant</p>",
        "id": 275222669,
        "sender_full_name": "lcnr",
        "timestamp": 1647257052
    },
    {
        "content": "<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> I think we want to evaluate here</p>",
        "id": 275222689,
        "sender_full_name": "lcnr",
        "timestamp": 1647257081
    },
    {
        "content": "<p>we don't evaluate in <code>try_unify</code> and we have to do it somewhere</p>",
        "id": 275222739,
        "sender_full_name": "lcnr",
        "timestamp": 1647257117
    },
    {
        "content": "<p>so doing it while building the abstract const seems good to me</p>",
        "id": 275222743,
        "sender_full_name": "lcnr",
        "timestamp": 1647257128
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/const-generics/issues/issue-71202.rs\">This test</a> passes now, is that good or bad?^^</p>",
        "id": 275225936,
        "sender_full_name": "BN",
        "timestamp": 1647259392
    },
    {
        "content": "<p>\"passes\" meaning doesnt emit the error?</p>",
        "id": 275226051,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1647259467
    },
    {
        "content": "<p>bad <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> i think</p>",
        "id": 275226068,
        "sender_full_name": "lcnr",
        "timestamp": 1647259488
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"326176\">Boxy [she/her]</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/275226051\">said</a>:</p>\n<blockquote>\n<p>\"passes\" meaning doesnt emit the error?</p>\n</blockquote>\n<p>yes</p>",
        "id": 275226109,
        "sender_full_name": "BN",
        "timestamp": 1647259524
    },
    {
        "content": "<p>i guess that <code>&lt;IsCopy&lt;T&gt;&gt;::VALUE</code> is actually not dependent on <code>T</code> but i would still like this to error</p>",
        "id": 275226111,
        "sender_full_name": "lcnr",
        "timestamp": 1647259526
    },
    {
        "content": "<p>so we have the <code>is_polymorphic</code> flag in the mir</p>",
        "id": 275226162,
        "sender_full_name": "lcnr",
        "timestamp": 1647259560
    },
    {
        "content": "<p>you probably also evaluate <code>ExprKind::NamedConst</code> when converting it to mir constants?</p>",
        "id": 275226268,
        "sender_full_name": "lcnr",
        "timestamp": 1647259601
    },
    {
        "content": "<p>i guess not doing that for now is the easiest fix? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 275226302,
        "sender_full_name": "lcnr",
        "timestamp": 1647259637
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/275226268\">said</a>:</p>\n<blockquote>\n<p>you probably also evaluate <code>ExprKind::NamedConst</code> when converting it to mir constants?</p>\n</blockquote>\n<p>No we create an <code>Unevaluated</code> for those</p>",
        "id": 275226417,
        "sender_full_name": "BN",
        "timestamp": 1647259694
    },
    {
        "content": "<p>Also still get many ICEs (something must be going wrong with the user type annotations, but also something must still be going wrong with the evaluation during the construction of the <code>AbstractConst</code>s).</p>\n<p><a href=\"/user_uploads/4715/586vT1jkdChoDrTkqpWjipBI/test_results.txt\">test_results.txt</a></p>",
        "id": 275227237,
        "sender_full_name": "BN",
        "timestamp": 1647260269
    },
    {
        "content": "<p>Some of the cycle error messages are also really long now</p>",
        "id": 275227382,
        "sender_full_name": "BN",
        "timestamp": 1647260356
    },
    {
        "content": "<p>Fixed most of the ICEs in the failing tests, but still get 23 failing tests. Didn't realize this earlier, since I just skimmed the test run output, but this PR actually introduces cycles in <code>type_of</code> instead of just changing the stderr for those tests...  That kind of sucks</p>",
        "id": 275259399,
        "sender_full_name": "BN",
        "timestamp": 1647274396
    },
    {
        "content": "<p>I find the query system really hard to debug</p>",
        "id": 275259469,
        "sender_full_name": "BN",
        "timestamp": 1647274423
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"328097\">BN</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/275259469\">said</a>:</p>\n<blockquote>\n<p>I find the query system really hard to debug</p>\n</blockquote>\n<p>because it is :3</p>",
        "id": 275263038,
        "sender_full_name": "lcnr",
        "timestamp": 1647275816
    },
    {
        "content": "<p>do you need help with this? I would assume that you either:</p>\n<ul>\n<li>explicitly added a <code>type_of</code> call at some new place</li>\n<li>use <code>WithOptConstParam::unknown</code>incorrectly somewhere, though i can't really see where that should happen as you're after typeck</li>\n</ul>",
        "id": 275263462,
        "sender_full_name": "lcnr",
        "timestamp": 1647275989
    },
    {
        "content": "<p>I can try to figure this out on my own first. Though I currently feel that I have a bad intuition for the query flow in the compiler in general and hence with intuitively getting how query cycles might arise. Do you have any tips for how to get a better grasp of understanding the query flow?</p>",
        "id": 275264230,
        "sender_full_name": "BN",
        "timestamp": 1647276271
    },
    {
        "content": "<p>I use <code>-Ztreat-err-as-bug</code> on such tests and look at the backtrace</p>",
        "id": 275264486,
        "sender_full_name": "oli",
        "timestamp": 1647276362
    },
    {
        "content": "<p>I don't have good ways to debug cycles beyond that</p>",
        "id": 275264581,
        "sender_full_name": "oli",
        "timestamp": 1647276392
    },
    {
        "content": "<blockquote>\n<p>Do you have any tips for how to get a better grasp of understanding the query flow?</p>\n</blockquote>\n<p>not really <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> the query flow is roughly in the order in which it is called in <code>rustc_interface</code>. It might make sense to take a quick look over <code>rustc_interface::passes::analysis</code> to get the expected order</p>",
        "id": 275264644,
        "sender_full_name": "lcnr",
        "timestamp": 1647276423
    },
    {
        "content": "<p>the exceptions here are <code>type_of</code>, <code>typeck</code> and const eval. Here the typeck of some body calls <code>typeck</code> and const eval for its anonymous constants</p>",
        "id": 275264840,
        "sender_full_name": "lcnr",
        "timestamp": 1647276494
    },
    {
        "content": "<p>and the <code>type_of</code> for some anon consts can call <code>typeck</code> of its containing body</p>",
        "id": 275264876,
        "sender_full_name": "lcnr",
        "timestamp": 1647276509
    },
    {
        "content": "<p>this is where <code>WithOptConstParam</code> steps in to avoid the cycle <code>typeck(containing_body) -&gt; const_eval(anon_const) -&gt; typeck(anon_const) -&gt; type_of(anon_const) /* to get the expected return type of the anon const */ -&gt; typeck(containing_body)</code></p>",
        "id": 275265051,
        "sender_full_name": "lcnr",
        "timestamp": 1647276584
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/275264644\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>Do you have any tips for how to get a better grasp of understanding the query flow?</p>\n</blockquote>\n<p>not really <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> the query flow is roughly in the order in which it is called in <code>rustc_interface</code>. It might make sense to take a quick look over <code>rustc_interface::passes::analysis</code> to get the expected order</p>\n</blockquote>\n<p>yes I have already looked at rustc_interface. But <code>type_of</code> is called all over the place right?^^</p>",
        "id": 275265062,
        "sender_full_name": "BN",
        "timestamp": 1647276592
    },
    {
        "content": "<p>well, <code>type_of</code> is also used to represent like 5 different things at once xd</p>",
        "id": 275265138,
        "sender_full_name": "lcnr",
        "timestamp": 1647276611
    },
    {
        "content": "<p>What do you mean?</p>",
        "id": 275265208,
        "sender_full_name": "BN",
        "timestamp": 1647276643
    },
    {
        "content": "<p>for anon const, <code>type_of</code> is called during <code>typeck</code> of that anon const, except if <code>WithOptConstParam</code> has a <code>param_def_id</code> in which case we avoid <code>type_of</code> and only call that far later (at which point cycles don't matter)</p>",
        "id": 275265275,
        "sender_full_name": "lcnr",
        "timestamp": 1647276668
    },
    {
        "content": "<p><code>type_of</code> is used for the expected return type of constants</p>",
        "id": 275265304,
        "sender_full_name": "lcnr",
        "timestamp": 1647276682
    },
    {
        "content": "<p>the self type of impls</p>",
        "id": 275265328,
        "sender_full_name": "lcnr",
        "timestamp": 1647276688
    },
    {
        "content": "<p>the hidden type of <code>impl Trait</code></p>",
        "id": 275265344,
        "sender_full_name": "lcnr",
        "timestamp": 1647276697
    },
    {
        "content": "<p>the enum type of enum variants i think</p>",
        "id": 275265453,
        "sender_full_name": "lcnr",
        "timestamp": 1647276726
    },
    {
        "content": "<p>expanding a type alias</p>",
        "id": 275265485,
        "sender_full_name": "lcnr",
        "timestamp": 1647276745
    },
    {
        "content": "<p>the signature of a function</p>",
        "id": 275265553,
        "sender_full_name": "lcnr",
        "timestamp": 1647276778
    },
    {
        "content": "<p>(a lot of things with different requirements <span aria-label=\"sparkles\" class=\"emoji emoji-2728\" role=\"img\" title=\"sparkles\">:sparkles:</span>)</p>",
        "id": 275265597,
        "sender_full_name": "lcnr",
        "timestamp": 1647276795
    },
    {
        "content": "<p>if the type-context is a god-object, then <code>type_of</code> is a god-query</p>",
        "id": 275265604,
        "sender_full_name": "oli",
        "timestamp": 1647276798
    },
    {
        "content": "<p>we may want to split <code>type_of</code></p>",
        "id": 275265672,
        "sender_full_name": "lcnr",
        "timestamp": 1647276825
    },
    {
        "content": "<p>cause rn calling it \"incorrectly\" can easily go unnoticed</p>",
        "id": 275265771,
        "sender_full_name": "lcnr",
        "timestamp": 1647276850
    },
    {
        "content": "<p>which is probably why there is an auto impl for <code>[u8]</code> in rustdoc <a href=\"https://doc.rust-lang.org/nightly/std/marker/trait.Send.html#impl-Send-80\">https://doc.rust-lang.org/nightly/std/marker/trait.Send.html#impl-Send-80</a></p>",
        "id": 275265845,
        "sender_full_name": "lcnr",
        "timestamp": 1647276883
    },
    {
        "content": "<p>but not for <code>[u16]</code></p>",
        "id": 275265853,
        "sender_full_name": "lcnr",
        "timestamp": 1647276889
    },
    {
        "content": "<p>The problem seems to be that we can end up trying to typeck an opaque type, in which we borrowck, for which we need to build the mir. If we encounter a <code>ExprKind::Literal</code> in the thir body and try to <a href=\"https://github.com/rust-lang/rust/blob/a2ef0d420c920ce596507946bf9c961f7ca092e1/compiler/rustc_mir_build/src/build/expr/as_constant.rs#L107-L155\">convert</a> that literal to a constant <a href=\"https://github.com/rust-lang/rust/blob/a2ef0d420c920ce596507946bf9c961f7ca092e1/compiler/rustc_mir_build/src/build/expr/as_constant.rs#L38\">here</a> we can end up in a cycle since the conversion of the literal requires a <a href=\"https://github.com/rust-lang/rust/blob/a2ef0d420c920ce596507946bf9c961f7ca092e1/compiler/rustc_mir_build/src/build/expr/as_constant.rs#L114\">call to <code>layout_of</code></a> for the opaque type and <code>layout_of</code> needs to normalize the opaque type, which internally calls <code>type_of</code> again.</p>",
        "id": 275273425,
        "sender_full_name": "BN",
        "timestamp": 1647280188
    },
    {
        "content": "<p>so we have an integer literal whose type is an opaque type?</p>",
        "id": 275273750,
        "sender_full_name": "lcnr",
        "timestamp": 1647280338
    },
    {
        "content": "<p>which test is that?</p>",
        "id": 275273765,
        "sender_full_name": "lcnr",
        "timestamp": 1647280352
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/impl-trait/issue-87450.rs\">https://github.com/rust-lang/rust/blob/master/src/test/ui/impl-trait/issue-87450.rs</a></p>",
        "id": 275274122,
        "sender_full_name": "BN",
        "timestamp": 1647280510
    },
    {
        "content": "<p>Not sure why we even call <code>as_constant</code> there at all</p>",
        "id": 275274147,
        "sender_full_name": "BN",
        "timestamp": 1647280524
    },
    {
        "content": "<p>ah I think because of the zero literal</p>",
        "id": 275274183,
        "sender_full_name": "BN",
        "timestamp": 1647280539
    },
    {
        "content": "<p>which 0 literal?</p>",
        "id": 275274211,
        "sender_full_name": "lcnr",
        "timestamp": 1647280555
    },
    {
        "content": "<p>we use <code>ExprKind::ScalarLiteral</code> for fn pointers</p>",
        "id": 275274318,
        "sender_full_name": "BN",
        "timestamp": 1647280584
    },
    {
        "content": "<p>or not sure whether they are really fn pointers</p>",
        "id": 275274338,
        "sender_full_name": "BN",
        "timestamp": 1647280595
    },
    {
        "content": "<p>one second</p>",
        "id": 275274368,
        "sender_full_name": "BN",
        "timestamp": 1647280614
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/a2ef0d420c920ce596507946bf9c961f7ca092e1/compiler/rustc_mir_build/src/thir/cx/expr.rs\">here</a> whenever we call <code>ExprKind::zero_sized_literal</code></p>",
        "id": 275274448,
        "sender_full_name": "BN",
        "timestamp": 1647280664
    },
    {
        "content": "<p>have to look at this tomorrow, don't think i can get anywhere here in 5 min <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 275274564,
        "sender_full_name": "lcnr",
        "timestamp": 1647280711
    },
    {
        "content": "<p>these were previously created in <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_middle/ty/consts.rs.html#218\"><code>ty::Const::zero_sized</code></a></p>",
        "id": 275274626,
        "sender_full_name": "BN",
        "timestamp": 1647280741
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/275274564\">said</a>:</p>\n<blockquote>\n<p>have to look at this tomorrow, don't think i can get anywhere here in 5 min <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n</blockquote>\n<p>no problem, I think I call it quits for today also</p>",
        "id": 275274685,
        "sender_full_name": "BN",
        "timestamp": 1647280766
    },
    {
        "content": "<p>I think the solution for this might be to just not try to evaluate zero sized literals though and treat them seperately in <code>ExprKind</code></p>",
        "id": 275274992,
        "sender_full_name": "BN",
        "timestamp": 1647280868
    },
    {
        "content": "<p>lol it was this assert statement that <a href=\"https://github.com/rust-lang/rust/blob/a2ef0d420c920ce596507946bf9c961f7ca092e1/compiler/rustc_mir_build/src/build/expr/as_constant.rs#L60-L62\">I inserted</a> that caused the cycle.</p>",
        "id": 275281950,
        "sender_full_name": "BN",
        "timestamp": 1647283929
    },
    {
        "content": "<p>We're down to three failing tests now:</p>\n<div class=\"codehilite\"><pre><span></span><code>failures:\n    [ui] ui/const-generics/issues/issue-71202.rs\n    [ui] ui/const-generics/issues/issue-72845.rs\n    [ui] ui/const-generics/issues/issue-83288.rs\n</code></pre></div>",
        "id": 275282461,
        "sender_full_name": "BN",
        "timestamp": 1647284126
    },
    {
        "content": "<p>I think we shouldn't try to eval/resolve <a href=\"https://github.com/rust-lang/rust/blob/a2ef0d420c920ce596507946bf9c961f7ca092e1/compiler/rustc_trait_selection/src/traits/const_evaluatable.rs#L412\">here</a>. In <a href=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/const-generics/issues/issue-72845.rs\">this test</a> the normalization of <code>&lt;T as Type&gt;::AT</code> fails with an ICE, because <code>codegen_fulfill_obligations</code>(called from <code>resolve_associated_item</code>) expects normalization to succeed. Previously we just had the corresponding thir expr as an <code>Unevaluated</code> literal:</p>\n<div class=\"codehilite\"><pre><span></span><code>│ │ │ │ │ │ │ ├─0ms DEBUG rustc_trait_selection::traits::const_evaluatable recurse_build: node=Expr { ty: usize, temp_lifetime: Some(Node(15)), span: src/test/ui/const-generics/issues/issue-72845.rs:27:44: 27:52 (#0), kind: Literal { literal: Const { ty: usize, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:4 ~ issue_72845[e07c]::Depth::C), const_param_did: None }, substs: [&lt;T as Type&gt;::AT], promoted: None }) }, user_ty: Some(Canonical { max_universe: U0, variables: [], value: TypeOf(DefId(0:4 ~ issue_72845[e07c]::Depth::C), UserSubsts { substs: [&lt;T as Type&gt;::AT], user_self_ty: None }) }), const_id: Some(DefId(0:4 ~ issue_72845[e07c]::Depth::C)) } }\n</code></pre></div>\n<p>So its not necessary to resolve and evaluate here. Not sure whether it might make sense to still try this (and have a fallible version of <code>resolve_associated_item</code>). We would need to evaluate to a valtree here, how useful would those be when trying to unify abstract consts?</p>",
        "id": 275346349,
        "sender_full_name": "BN",
        "timestamp": 1647335476
    },
    {
        "content": "<p>did you add a <code>subst</code> call for the param env here?</p>",
        "id": 275347022,
        "sender_full_name": "lcnr",
        "timestamp": 1647335826
    },
    {
        "content": "<p>yes</p>",
        "id": 275347302,
        "sender_full_name": "BN",
        "timestamp": 1647335957
    },
    {
        "content": "<p>ah, sorry</p>",
        "id": 275347435,
        "sender_full_name": "lcnr",
        "timestamp": 1647336008
    },
    {
        "content": "<p>that's actually wrong <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 275347466,
        "sender_full_name": "lcnr",
        "timestamp": 1647336030
    },
    {
        "content": "<p>but this is the same place where we needed one earlier to avoid the ICEs ^^</p>",
        "id": 275347517,
        "sender_full_name": "BN",
        "timestamp": 1647336061
    },
    {
        "content": "<p>because the subst are in the context of the body, you need the param env of the const we're currently converting</p>",
        "id": 275347572,
        "sender_full_name": "lcnr",
        "timestamp": 1647336082
    },
    {
        "content": "<p>which implies all caller bounds of the param env of the used named constant (as otherwise typeck would have failed)</p>",
        "id": 275347624,
        "sender_full_name": "lcnr",
        "timestamp": 1647336110
    },
    {
        "content": "<p>but also contains the necessary bounds for <code>T: Type</code></p>",
        "id": 275347645,
        "sender_full_name": "lcnr",
        "timestamp": 1647336120
    },
    {
        "content": "<p>so we do need to pass in a param env to the query?</p>",
        "id": 275347701,
        "sender_full_name": "BN",
        "timestamp": 1647336133
    },
    {
        "content": "<p>no</p>",
        "id": 275347706,
        "sender_full_name": "lcnr",
        "timestamp": 1647336137
    },
    {
        "content": "<p>we need the param env of the body</p>",
        "id": 275347728,
        "sender_full_name": "lcnr",
        "timestamp": 1647336148
    },
    {
        "content": "<p>which is identified by a <code>DefId</code></p>",
        "id": 275347743,
        "sender_full_name": "lcnr",
        "timestamp": 1647336157
    },
    {
        "content": "<p>ok</p>",
        "id": 275347746,
        "sender_full_name": "BN",
        "timestamp": 1647336158
    },
    {
        "content": "<p>the same <code>DefId</code> already used as input to the query</p>",
        "id": 275347774,
        "sender_full_name": "lcnr",
        "timestamp": 1647336170
    },
    {
        "content": "<p>so you probably want to add a <code>param_env</code> field to the <code>AbstractConstBuilder</code></p>",
        "id": 275347833,
        "sender_full_name": "lcnr",
        "timestamp": 1647336222
    },
    {
        "content": "<p>and initialize that with <code>tcx.param_env(def.did)</code></p>",
        "id": 275347840,
        "sender_full_name": "lcnr",
        "timestamp": 1647336231
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"328097\">@BN</span> i just experimented a bit, and you don't have to evaluate <code>Unevaluated</code> constants during abstract const building after all</p>",
        "id": 275348542,
        "sender_full_name": "lcnr",
        "timestamp": 1647336609
    },
    {
        "content": "<p>i think</p>",
        "id": 275348544,
        "sender_full_name": "lcnr",
        "timestamp": 1647336610
    },
    {
        "content": "<p>the following doesn't compile rn</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(generic_const_exprs)]</span><span class=\"w\"></span>\n\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">FREE</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">FREE</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 275348566,
        "sender_full_name": "lcnr",
        "timestamp": 1647336629
    },
    {
        "content": "<p>and the way this should actually be fixed is by giving a param env to <code>try_unify</code></p>",
        "id": 275348636,
        "sender_full_name": "lcnr",
        "timestamp": 1647336681
    },
    {
        "content": "<p>and then evaluating non abstract const <code>Node::Leaf</code> before comparing them</p>",
        "id": 275348653,
        "sender_full_name": "lcnr",
        "timestamp": 1647336695
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/275348636\">said</a>:</p>\n<blockquote>\n<p>and the way this should actually be fixed is by giving a param env to <code>try_unify</code></p>\n</blockquote>\n<p>this can be done before, as part, or after your work with valtrees <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> not sure if you want to do that</p>",
        "id": 275348761,
        "sender_full_name": "lcnr",
        "timestamp": 1647336755
    },
    {
        "content": "<p>but we don't have to evaluate during building, which tbh is not wrong but will be unnecessary once <code>try_unify</code> is actually correct</p>",
        "id": 275348808,
        "sender_full_name": "lcnr",
        "timestamp": 1647336795
    },
    {
        "content": "<p>does that make sense to you? <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> and also sorry for not thinking about this earlier</p>",
        "id": 275349006,
        "sender_full_name": "lcnr",
        "timestamp": 1647336918
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/275348808\">said</a>:</p>\n<blockquote>\n<p>but we don't have to evaluate during building, which tbh is not wrong but will be unnecessary once <code>try_unify</code> is actually correct</p>\n</blockquote>\n<p>What do you mean by 'when try_unify is actually correct'? In what sense isn't it correct now and what will change that?</p>",
        "id": 275349168,
        "sender_full_name": "BN",
        "timestamp": 1647337032
    },
    {
        "content": "<p><code>try_unify</code> currently doesn't evaluate unevaluated (non abstract const) constants</p>",
        "id": 275349201,
        "sender_full_name": "lcnr",
        "timestamp": 1647337054
    },
    {
        "content": "<p>we need that however:</p>",
        "id": 275349278,
        "sender_full_name": "lcnr",
        "timestamp": 1647337087
    },
    {
        "content": "<p>This isn't relevant anymore given what you just said, but I tried supplying the param_env of the body to abstractconstbuilder and this didn't work. I used:</p>\n<div class=\"codehilite\"><pre><span></span><code>        let body = tcx.thir_body(def);\n        let def_id = def.def_id_for_type_of();\n        let param_env = tcx.param_env(def_id);\n</code></pre></div>\n<p>I think this must be wrong, since the caller bounds in that param_env were empty in <code>recurse_build</code>.</p>",
        "id": 275349358,
        "sender_full_name": "BN",
        "timestamp": 1647337148
    },
    {
        "content": "<p>you want <code>def.did</code></p>",
        "id": 275349391,
        "sender_full_name": "lcnr",
        "timestamp": 1647337169
    },
    {
        "content": "<p><code>def_id_for_type_of()</code> is the wrong <code>DefId</code></p>",
        "id": 275349401,
        "sender_full_name": "lcnr",
        "timestamp": 1647337182
    },
    {
        "content": "<p>ok</p>",
        "id": 275349409,
        "sender_full_name": "BN",
        "timestamp": 1647337186
    },
    {
        "content": "<p>it's only the correct one for <code>type_of</code></p>",
        "id": 275349417,
        "sender_full_name": "lcnr",
        "timestamp": 1647337191
    },
    {
        "content": "<p>That is a little confusing ^^</p>",
        "id": 275349475,
        "sender_full_name": "BN",
        "timestamp": 1647337217
    },
    {
        "content": "<p>yes</p>",
        "id": 275349482,
        "sender_full_name": "lcnr",
        "timestamp": 1647337225
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/275348761\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/275348636\">said</a>:</p>\n<blockquote>\n<p>and the way this should actually be fixed is by giving a param env to <code>try_unify</code></p>\n</blockquote>\n<p>this can be done before, as part, or after your work with valtrees <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> not sure if you want to do that</p>\n</blockquote>\n<p>I can do that. Shall I finish this PR first before implementing that?</p>",
        "id": 275349532,
        "sender_full_name": "BN",
        "timestamp": 1647337284
    },
    {
        "content": "<p>so, the relevant part is</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">enum</span> <span class=\"nc\">Predicate</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">B</span>: <span class=\"kt\">bool</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">               </span><span class=\"o\">^^^^^^^^^^^</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">DefId</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">used</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">expected</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">of</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">anon</span><span class=\"w\"> </span><span class=\"k\">const</span>: <span class=\"err\">`</span><span class=\"n\">def</span><span class=\"p\">.</span><span class=\"n\">def_id_for_type_of</span><span class=\"p\">()</span><span class=\"err\">`</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Satisfied</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Satisfied</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Predicate</span><span class=\"o\">&lt;</span><span class=\"kc\">true</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Spec1</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">Type</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Spec1</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">Predicate</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"n\">T</span>::<span class=\"n\">AT</span>::<span class=\"n\">C</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">}</span><span class=\"o\">&gt;</span>: <span class=\"nc\">Satisfied</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">                                          </span><span class=\"o\">^^^^^^^^^^^^^^</span><span class=\"w\"> </span><span class=\"n\">anon</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">we</span><span class=\"o\">'</span><span class=\"na\">re</span><span class=\"w\"> </span><span class=\"n\">building</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"kr\">abstract</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">def</span><span class=\"p\">.</span><span class=\"n\">did</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 275349576,
        "sender_full_name": "lcnr",
        "timestamp": 1647337316
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"328097\">BN</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/275349532\">said</a>:</p>\n<blockquote>\n<p>I can do that. Shall I finish this PR first before implementing that?</p>\n</blockquote>\n<p>what you prefer, the order doesn't really matter here ^^</p>",
        "id": 275349699,
        "sender_full_name": "lcnr",
        "timestamp": 1647337390
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"328097\">BN</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/275349475\">said</a>:</p>\n<blockquote>\n<p>That is a little confusing ^^</p>\n</blockquote>\n<p>the docs of <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.WithOptConstParam.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.WithOptConstParam.html</a> may help somewhat here <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 275349801,
        "sender_full_name": "lcnr",
        "timestamp": 1647337456
    },
    {
        "content": "<p>Not evaluating there <br>\n<span class=\"user-mention silent\" data-user-id=\"328097\">BN</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/275225936\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/const-generics/issues/issue-71202.rs\">This test</a> passes now, is that good or bad?^^</p>\n</blockquote>\n<p>Not evaluating in <code>recurse_build</code> causes this test to pass again, i.e. the unconstrained generic constant error is thrown.</p>",
        "id": 275350264,
        "sender_full_name": "BN",
        "timestamp": 1647337728
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/275349801\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"328097\">BN</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/275349475\">said</a>:</p>\n<blockquote>\n<p>That is a little confusing ^^</p>\n</blockquote>\n<p>the docs of <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.WithOptConstParam.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.WithOptConstParam.html</a> may help somewhat here <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>\n</blockquote>\n<p>thanks I'll take a look at those later.</p>",
        "id": 275350291,
        "sender_full_name": "BN",
        "timestamp": 1647337744
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/94876\">https://github.com/rust-lang/rust/pull/94876</a> is ready for review now</p>",
        "id": 275360499,
        "sender_full_name": "BN",
        "timestamp": 1647344082
    },
    {
        "content": "<p>are all the review comments in that pr already resolved?</p>",
        "id": 275360778,
        "sender_full_name": "lcnr",
        "timestamp": 1647344279
    },
    {
        "content": "<p>No, sorry, just noticed that you requested (here in zulip) to remove <code>visit_const</code> from the thir visitor.</p>",
        "id": 275361750,
        "sender_full_name": "BN",
        "timestamp": 1647344960
    },
    {
        "content": "<p>I marked those as resolved that I knew for sure</p>",
        "id": 275361960,
        "sender_full_name": "oli",
        "timestamp": 1647345085
    },
    {
        "content": "<p>hm though we do still have a <code>ty::Const</code> in <code>ExprKind::Repeat</code></p>",
        "id": 275362132,
        "sender_full_name": "BN",
        "timestamp": 1647345226
    },
    {
        "content": "<p>so still need <code>visit_const</code></p>",
        "id": 275362202,
        "sender_full_name": "BN",
        "timestamp": 1647345248
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"328097\">BN</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/275362202\">said</a>:</p>\n<blockquote>\n<p>so still need <code>visit_const</code></p>\n</blockquote>\n<p>not as part of the <code>thir</code> visitor</p>",
        "id": 275362349,
        "sender_full_name": "lcnr",
        "timestamp": 1647345337
    },
    {
        "content": "<p><code>fn visit_const</code> would only visit the actual <code>ty::Const</code> while there are a lot of different constants in the thir which are ignored with that function</p>",
        "id": 275362458,
        "sender_full_name": "lcnr",
        "timestamp": 1647345425
    },
    {
        "content": "<p>so stuff that cares about constants in the thir has to manually search for them using <code>fn visit_expr</code> anyways</p>",
        "id": 275362493,
        "sender_full_name": "lcnr",
        "timestamp": 1647345453
    },
    {
        "content": "<p>so remove <code>fn visit_const</code> and in the visitors which currently use it (only <code>AbstractConst</code> building iirc) add repeat expressions to the expr check</p>",
        "id": 275362559,
        "sender_full_name": "lcnr",
        "timestamp": 1647345490
    },
    {
        "content": "<p>just realizing that we don't lazily create constants in patterns, e.g. <a href=\"https://github.com/rust-lang/rust/blob/3ba1ebea122238d1a5c613deb1bf60ce24bd8fd8/compiler/rustc_mir_build/src/thir/pattern/mod.rs#L587-L592\">here</a>. Need to change that too right?</p>",
        "id": 275366797,
        "sender_full_name": "BN",
        "timestamp": 1647348027
    },
    {
        "content": "<p>not necessarily <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> pattern can't end up in <code>AbstractConst</code>s, so we don't have to convert them to <code>ty::Const</code></p>",
        "id": 275368460,
        "sender_full_name": "lcnr",
        "timestamp": 1647349020
    },
    {
        "content": "<p>we do have the current <code>const_to_pat</code> system which I should hopefully be able to remove in the near future <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 275368499,
        "sender_full_name": "lcnr",
        "timestamp": 1647349042
    },
    {
        "content": "<p>you can probably try to change <code>const_to_pat</code> to use mir constants for now?</p>",
        "id": 275368537,
        "sender_full_name": "lcnr",
        "timestamp": 1647349075
    },
    {
        "content": "<p>idk, it isn't yet clear how exactly constants in pattern should behave</p>",
        "id": 275368607,
        "sender_full_name": "lcnr",
        "timestamp": 1647349095
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> Can you take another look at <a href=\"https://github.com/rust-lang/rust/pull/94876\">this pr</a>, please?</p>",
        "id": 276163336,
        "sender_full_name": "BN",
        "timestamp": 1647942603
    },
    {
        "content": "<p>will do so later today <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 276174795,
        "sender_full_name": "lcnr",
        "timestamp": 1647949039
    },
    {
        "content": "<p>Opened a <a href=\"https://github.com/rust-lang/rust/pull/95426\">PR</a> that adds the logic for <code>ty::Ref</code> in <code>const_to_valtree</code>. Fairly likely that I screwed something up there, but thought that I might open a PR for this to make sure this code is correct before proceeding.</p>",
        "id": 276981140,
        "sender_full_name": "BN",
        "timestamp": 1648547522
    },
    {
        "content": "<p>Is there some way we can currently test valtree creation?</p>",
        "id": 276981238,
        "sender_full_name": "BN",
        "timestamp": 1648547561
    },
    {
        "content": "<p>i don't think we have a good way <del>except</del>(<em>edit: that's not a good solution, but the best we have</em>) by trying to build them when creating a <code>ty::Const</code>.</p>",
        "id": 276981851,
        "sender_full_name": "lcnr",
        "timestamp": 1648547943
    },
    {
        "content": "<p>Shall I include that call for now and remove it again before we merge?</p>",
        "id": 276982208,
        "sender_full_name": "BN",
        "timestamp": 1648548130
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> the only one it would help would be you <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> so do what you think is best</p>",
        "id": 276982247,
        "sender_full_name": "lcnr",
        "timestamp": 1648548157
    },
    {
        "content": "<p>I included that call on my machine.</p>",
        "id": 276982296,
        "sender_full_name": "BN",
        "timestamp": 1648548204
    },
    {
        "content": "<p>These changes ( expectedly) work extremely poorly on this <a href=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/consts/issue-77062-large-zst-array.rs\">test</a>. We call <code>const_to_valtree_inner</code> <code>usize::MAX</code> times. This test takes minutes to complete with very large memory usage.</p>",
        "id": 276990316,
        "sender_full_name": "BN",
        "timestamp": 1648553186
    },
    {
        "content": "<p>probably have to special case for zst here and in the array arm</p>",
        "id": 276990619,
        "sender_full_name": "BN",
        "timestamp": 1648553376
    },
    {
        "content": "<p>aah, yikes</p>",
        "id": 276991102,
        "sender_full_name": "lcnr",
        "timestamp": 1648553631
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 276991126,
        "sender_full_name": "lcnr",
        "timestamp": 1648553640
    },
    {
        "content": "<p>we could completely ignore zst in valtrees <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 276991177,
        "sender_full_name": "lcnr",
        "timestamp": 1648553650
    },
    {
        "content": "<p>or we actually just fail for that</p>",
        "id": 276991240,
        "sender_full_name": "lcnr",
        "timestamp": 1648553693
    },
    {
        "content": "<p>we can't currently have such large arrays inside of types and imo it wouldn't be too bad to forbid that in the future</p>",
        "id": 276991301,
        "sender_full_name": "lcnr",
        "timestamp": 1648553732
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> Given what you said <a href=\"https://github.com/rust-lang/rust/pull/94255#discussion_r836481526\">here</a>, I'm wondering what the best approach is in <a href=\"https://github.com/rust-lang/rust/blob/6fff0214d97b24e795704b1aec8100b8b5c3fb51/compiler/rustc_middle/src/mir/mod.rs#L2862-L2884\"><code>from_inline_const</code></a>... if the  <code>const_eval_resolve</code> call fails, it doesn't really make sense to create an <code>Unevaluated</code> and return a <code>ConstantKind::Ty</code> with that in this function (this was taken from the <code>ty::Const</code> version where the intent was to delay and error in mir construction), does it? Shall we error here?</p>",
        "id": 277115198,
        "sender_full_name": "BN",
        "timestamp": 1648631576
    },
    {
        "content": "<p>eh actually looks like <code>ConstantKind::from_inline_const</code> is also dead code now</p>",
        "id": 277115515,
        "sender_full_name": "BN",
        "timestamp": 1648631760
    },
    {
        "content": "<p>'^^</p>",
        "id": 277115633,
        "sender_full_name": "lcnr",
        "timestamp": 1648631819
    },
    {
        "content": "<p>is there still a part here i should answer? <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> feel like i would have to look at the code locally to give an answer here</p>",
        "id": 277115691,
        "sender_full_name": "lcnr",
        "timestamp": 1648631856
    },
    {
        "content": "<p>^^ No there isnt. btw sorry for not having more thoroughly reviewed the PR before the latest update.</p>",
        "id": 277115806,
        "sender_full_name": "BN",
        "timestamp": 1648631909
    },
    {
        "content": "<p>no worries ^^</p>",
        "id": 277115851,
        "sender_full_name": "lcnr",
        "timestamp": 1648631937
    },
    {
        "content": "<p>Sorry ^^, but basically the same question comes up in <code>ConstantKind::from_opt_const_anon_arg</code>. If we use <code>const_eval_resolve</code> <a href=\"https://github.com/rust-lang/rust/blob/6fff0214d97b24e795704b1aec8100b8b5c3fb51/compiler/rustc_middle/src/mir/mod.rs#L2913-L2927\">here</a> instead of the <code>try_eval_lit_or_param</code> call, how should we proceed in case we encounter an error here. Also can we always assume that the anon const is resolvable/evaluatable here? I don't think we can assume during mir construction that everything is resolvable/evaluatable right and <code>const_eval_resolve</code> does report errors in case anything fails.</p>",
        "id": 277117827,
        "sender_full_name": "BN",
        "timestamp": 1648632966
    },
    {
        "content": "<blockquote>\n<p>Also can we always assume that the anon const is resolvable/evaluatable here?</p>\n</blockquote>\n<p>what kinds of constants should be the input to that function?</p>",
        "id": 277119066,
        "sender_full_name": "lcnr",
        "timestamp": 1648633708
    },
    {
        "content": "<p>like, what are the possible things which can end up as a mir constant? because that should answer that question here ^^</p>",
        "id": 277119266,
        "sender_full_name": "lcnr",
        "timestamp": 1648633833
    },
    {
        "content": "<blockquote>\n<p>how should we proceed in case we encounter an error here</p>\n</blockquote>\n<p>apparently you should emit a a <code>const_err</code> lint <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 277119500,
        "sender_full_name": "lcnr",
        "timestamp": 1648633951
    },
    {
        "content": "<p>you can try and look at where we currently emit that lint</p>",
        "id": 277119534,
        "sender_full_name": "lcnr",
        "timestamp": 1648633965
    },
    {
        "content": "<p>because that is where we currently try to evaluate unevaluated mir constants</p>",
        "id": 277119554,
        "sender_full_name": "lcnr",
        "timestamp": 1648633978
    },
    {
        "content": "<p>re my first question</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Generic</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Generic</span><span class=\"o\">&lt;</span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">ASSOC</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Generic</span>::<span class=\"o\">&lt;</span><span class=\"mi\">0</span><span class=\"o\">&gt;</span>::<span class=\"n\">ASSOC</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n</div></div>",
        "id": 277119607,
        "sender_full_name": "lcnr",
        "timestamp": 1648634020
    },
    {
        "content": "<p>Oh we currently only call <code>from_opt_const_arg_anon_const</code> on the constant in <code>InlineAsmOperand</code>, hardly know anything about those, but I would assume we don't need any normalization logic on them ^^, so we can call this here and always assume that call succeeds.</p>",
        "id": 277120221,
        "sender_full_name": "BN",
        "timestamp": 1648634370
    },
    {
        "content": "<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 277120432,
        "sender_full_name": "lcnr",
        "timestamp": 1648634436
    },
    {
        "content": "<p>that's weird</p>",
        "id": 277120449,
        "sender_full_name": "lcnr",
        "timestamp": 1648634448
    },
    {
        "content": "<p>what do we do for associated constants?</p>",
        "id": 277120478,
        "sender_full_name": "lcnr",
        "timestamp": 1648634461
    },
    {
        "content": "<p>just keep them unevaluated?</p>",
        "id": 277120490,
        "sender_full_name": "lcnr",
        "timestamp": 1648634466
    },
    {
        "content": "<p>yes</p>",
        "id": 277120499,
        "sender_full_name": "BN",
        "timestamp": 1648634473
    },
    {
        "content": "<p>then you can also do that instead of <code>from_opt_const_arg_anon_const</code></p>",
        "id": 277120526,
        "sender_full_name": "lcnr",
        "timestamp": 1648634488
    },
    {
        "content": "<p>imo</p>",
        "id": 277120528,
        "sender_full_name": "lcnr",
        "timestamp": 1648634490
    },
    {
        "content": "<p>Though <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> <a href=\"https://github.com/rust-lang/rust/pull/94255#discussion_r815310312\">said</a> that eager normalization can have perf benefits, because those constants can be handled in mir-optimization.</p>",
        "id": 277120807,
        "sender_full_name": "BN",
        "timestamp": 1648634646
    },
    {
        "content": "<p>I chose to leave them as unevaluated because I was avoiding some ICEs in the test set that way</p>",
        "id": 277120852,
        "sender_full_name": "BN",
        "timestamp": 1648634676
    },
    {
        "content": "<p>but would it make sense to have a fallible version for <code>const_eval_resolve</code>?</p>",
        "id": 277120882,
        "sender_full_name": "BN",
        "timestamp": 1648634701
    },
    {
        "content": "<p>why did that ICE?</p>",
        "id": 277121113,
        "sender_full_name": "lcnr",
        "timestamp": 1648634848
    },
    {
        "content": "<p>cause i don't expect changing <code>const_eval_resolve</code> to be fallible is the right way to fix those <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 277121177,
        "sender_full_name": "lcnr",
        "timestamp": 1648634882
    },
    {
        "content": "<p>I don't remember exactly, but I'm reasonably certain that the <a href=\"https://github.com/rust-lang/rust/blob/f132bcf3bdf6d3ff9be7d02e8d0088b99007cd5e/compiler/rustc_ty_utils/src/instance.rs#L215\">call</a>** to <code>codegen_fulfill_obligation</code> panicked. That function assumes full normalization I think.</p>",
        "id": 277121463,
        "sender_full_name": "BN",
        "timestamp": 1648635024
    },
    {
        "content": "<p>no, that function assumes that the input is well formed, it is fine if it's not fully normalized</p>",
        "id": 277121496,
        "sender_full_name": "lcnr",
        "timestamp": 1648635053
    },
    {
        "content": "<p>so normally what's happening in these cases is that we're using the wrong <code>param_env</code></p>",
        "id": 277121531,
        "sender_full_name": "lcnr",
        "timestamp": 1648635079
    },
    {
        "content": "<p>hm I can try to reproduce by trying to evaluate <code>ExprKind::NamedConst</code></p>",
        "id": 277121749,
        "sender_full_name": "BN",
        "timestamp": 1648635197
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/mmUBX9iWyx0mgnGh45i9-OCY/backtrace.txt\">backtrace.txt</a></p>",
        "id": 277123251,
        "sender_full_name": "BN",
        "timestamp": 1648636148
    },
    {
        "content": "<p>Using this in <code>as_constant</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">            </span><span class=\"n\">ExprKind</span>::<span class=\"n\">NamedConst</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">def_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">substs</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">user_ty</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">user_ty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">user_ty</span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">user_ty</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">this</span><span class=\"p\">.</span><span class=\"n\">canonical_user_type_annotations</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">CanonicalUserTypeAnnotation</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">span</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">user_ty</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">inferred_ty</span>: <span class=\"nc\">ty</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">});</span><span class=\"w\"></span>\n\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">uneval</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span>::<span class=\"n\">Unevaluated</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">ty</span>::<span class=\"n\">WithOptConstParam</span>::<span class=\"n\">unknown</span><span class=\"p\">(</span><span class=\"n\">def_id</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">substs</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">debug</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"o\">?</span><span class=\"n\">substs</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">param_env</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">param_env</span><span class=\"p\">(</span><span class=\"n\">def_id</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">debug</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"o\">?</span><span class=\"n\">param_env</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">evaluated</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">const_eval_resolve</span><span class=\"p\">(</span><span class=\"n\">param_env</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">uneval</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">debug</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"o\">?</span><span class=\"n\">evaluated</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 277123391,
        "sender_full_name": "BN",
        "timestamp": 1648636211
    },
    {
        "content": "<p>Though I realize now that I just might be missing the substs in the <code>param_env</code></p>",
        "id": 277123819,
        "sender_full_name": "BN",
        "timestamp": 1648636515
    },
    {
        "content": "<p>it's the wrong <code>param_env</code></p>",
        "id": 277123986,
        "sender_full_name": "lcnr",
        "timestamp": 1648636630
    },
    {
        "content": "<p>you want the param env from the same context as the generic arguments</p>",
        "id": 277124007,
        "sender_full_name": "lcnr",
        "timestamp": 1648636650
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">with_assoc</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">Trait</span><span class=\"o\">&lt;</span><span class=\"n\">Assoc</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">SOME_GENERIC_CONST</span>::<span class=\"o\">&lt;&lt;</span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"o\">&gt;</span>::<span class=\"n\">Assoc</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 277124108,
        "sender_full_name": "lcnr",
        "timestamp": 1648636699
    },
    {
        "content": "<p>here the <code>Unevaluated</code> would be <code>ty::Unevaluated(def_id_of_SOME_GENERIC_CONST, [&lt;T as Trait&gt;::Assoc])</code></p>",
        "id": 277124131,
        "sender_full_name": "lcnr",
        "timestamp": 1648636729
    },
    {
        "content": "<p>for this to work, you need the <code>T: Trait&lt;Assoc = u32&gt;</code> in the <code>param_env</code> during evaluation</p>",
        "id": 277124189,
        "sender_full_name": "lcnr",
        "timestamp": 1648636773
    },
    {
        "content": "<p>which is the param_env of <code>fn with_assoc</code>, i.e. the item we're currently lowering thir-&gt;mir, not the param_env of <code>SOME_GENERIC_CONST</code>, which is the one you're currently using</p>",
        "id": 277124266,
        "sender_full_name": "lcnr",
        "timestamp": 1648636804
    },
    {
        "content": "<p>So that is the <code>param_env</code> of the <code>Builder</code>?</p>",
        "id": 277124518,
        "sender_full_name": "BN",
        "timestamp": 1648636975
    },
    {
        "content": "<p>ok it is, thanks.</p>",
        "id": 277125260,
        "sender_full_name": "BN",
        "timestamp": 1648637504
    },
    {
        "content": "<p>Sorry, should have remembered that myself. You have explained that before.</p>",
        "id": 277125323,
        "sender_full_name": "BN",
        "timestamp": 1648637524
    },
    {
        "content": "<p>What <code>substs</code> do I need to use here? The following doesn't work and I don't know how else to get parent substs (which should contain the correct substs here afaict).</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"cp\">#[instrument(skip(tcx), level = </span><span class=\"s\">\"debug\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">from_opt_const_arg_anon_const</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">tcx</span>: <span class=\"nc\">TyCtxt</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">def</span>: <span class=\"nc\">ty</span>::<span class=\"n\">WithOptConstParam</span><span class=\"o\">&lt;</span><span class=\"n\">LocalDefId</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">param_env</span>: <span class=\"nc\">ty</span>::<span class=\"n\">ParamEnv</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">body_id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">hir</span><span class=\"p\">().</span><span class=\"n\">get_by_def_id</span><span class=\"p\">(</span><span class=\"n\">def</span><span class=\"p\">.</span><span class=\"n\">did</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">hir</span>::<span class=\"n\">Node</span>::<span class=\"n\">AnonConst</span><span class=\"p\">(</span><span class=\"n\">ac</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">ac</span><span class=\"p\">.</span><span class=\"n\">body</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">span_bug</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">def_span</span><span class=\"p\">(</span><span class=\"n\">def</span><span class=\"p\">.</span><span class=\"n\">did</span><span class=\"p\">.</span><span class=\"n\">to_def_id</span><span class=\"p\">()),</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"s\">\"from_anon_const can only process anonymous constants\"</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">expr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">hir</span><span class=\"p\">().</span><span class=\"n\">body</span><span class=\"p\">(</span><span class=\"n\">body_id</span><span class=\"p\">).</span><span class=\"n\">value</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">debug</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"o\">?</span><span class=\"n\">expr</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">type_of</span><span class=\"p\">(</span><span class=\"n\">def</span><span class=\"p\">.</span><span class=\"n\">def_id_for_type_of</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">debug</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"o\">?</span><span class=\"n\">ty</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">typeck_root_def_id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">typeck_root_def_id</span><span class=\"p\">(</span><span class=\"n\">def</span><span class=\"p\">.</span><span class=\"n\">did</span><span class=\"p\">.</span><span class=\"n\">to_def_id</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">parent_substs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">InternalSubsts</span>::<span class=\"n\">identity_for_item</span><span class=\"p\">(</span><span class=\"n\">tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">typeck_root_def_id</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">debug</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"o\">?</span><span class=\"n\">parent_substs</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">did</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">def</span><span class=\"p\">.</span><span class=\"n\">did</span><span class=\"p\">.</span><span class=\"n\">to_def_id</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">child_substs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">InternalSubsts</span>::<span class=\"n\">identity_for_item</span><span class=\"p\">(</span><span class=\"n\">tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">did</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">substs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">mk_substs</span><span class=\"p\">(</span><span class=\"n\">parent_substs</span><span class=\"p\">.</span><span class=\"n\">into_iter</span><span class=\"p\">().</span><span class=\"n\">chain</span><span class=\"p\">(</span><span class=\"n\">child_substs</span><span class=\"p\">.</span><span class=\"n\">into_iter</span><span class=\"p\">()));</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">debug</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"o\">?</span><span class=\"n\">substs</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">hir_id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">hir</span><span class=\"p\">().</span><span class=\"n\">local_def_id_to_hir_id</span><span class=\"p\">(</span><span class=\"n\">def</span><span class=\"p\">.</span><span class=\"n\">did</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">span</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">hir</span><span class=\"p\">().</span><span class=\"n\">span</span><span class=\"p\">(</span><span class=\"n\">hir_id</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">debug</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"o\">?</span><span class=\"n\">span</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">uneval</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span>::<span class=\"n\">Unevaluated</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">def</span><span class=\"p\">.</span><span class=\"n\">to_global</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">substs</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">debug</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"o\">?</span><span class=\"n\">param_env</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">const_eval_resolve</span><span class=\"p\">(</span><span class=\"n\">param_env</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">uneval</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">span</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"bp\">Self</span>::<span class=\"n\">Val</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"c1\">// Error was handled in `const_eval_resolve`. Here we just create a</span>\n<span class=\"w\">                </span><span class=\"c1\">// new unevaluated const and error hard later in codegen</span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ty_const</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">mk_const</span><span class=\"p\">(</span><span class=\"n\">ty</span>::<span class=\"n\">ConstS</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">val</span>: <span class=\"nc\">ty</span>::<span class=\"n\">ConstKind</span>::<span class=\"n\">Unevaluated</span><span class=\"p\">(</span><span class=\"n\">ty</span>::<span class=\"n\">Unevaluated</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">def</span>: <span class=\"nc\">def</span><span class=\"p\">.</span><span class=\"n\">to_global</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">substs</span>: <span class=\"nc\">InternalSubsts</span>::<span class=\"n\">identity_for_item</span><span class=\"p\">(</span><span class=\"n\">tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">def</span><span class=\"p\">.</span><span class=\"n\">did</span><span class=\"p\">.</span><span class=\"n\">to_def_id</span><span class=\"p\">()),</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">promoted</span>: <span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">}),</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">ty</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">});</span><span class=\"w\"></span>\n\n<span class=\"w\">                </span><span class=\"bp\">Self</span>::<span class=\"n\">Ty</span><span class=\"p\">(</span><span class=\"n\">ty_const</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>e.g. in this <a href=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/asm/x86_64/const.rs\">test</a> I get: <code>error: internal compiler error: compiler/rustc_middle/src/ty/subst.rs:669:17: const parameter </code>X/#0<code> (Const { ty: usize, val: Param(X/#0) }/0) out of range when substituting substs=[]</code></p>\n<p>Some log output:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"err\">┐</span><span class=\"n\">rustc_middle</span>::<span class=\"n\">mir</span>::<span class=\"n\">from_opt_const_arg_anon_const</span><span class=\"w\"> </span><span class=\"n\">def</span><span class=\"o\">=</span><span class=\"n\">WithOptConstParam</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">did</span>: <span class=\"nc\">DefId</span><span class=\"p\">(</span><span class=\"mi\">0</span>:<span class=\"mi\">15</span><span class=\"w\"> </span><span class=\"o\">~</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"n\">b25</span><span class=\"p\">]</span>::<span class=\"n\">const_generic</span>::<span class=\"p\">{</span><span class=\"n\">constant</span>#<span class=\"mi\">0</span><span class=\"p\">}),</span><span class=\"w\"> </span><span class=\"n\">const_param_did</span>: <span class=\"nb\">None</span> <span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">param_env</span><span class=\"o\">=</span><span class=\"n\">ParamEnv</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">caller_bounds</span>: <span class=\"p\">[],</span><span class=\"w\"> </span><span class=\"n\">reveal</span>: <span class=\"nc\">UserFacing</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">constness</span>: <span class=\"nc\">NotConst</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"err\">├─</span><span class=\"mi\">0</span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"n\">DEBUG</span><span class=\"w\"> </span><span class=\"n\">rustc_middle</span>::<span class=\"n\">mir</span><span class=\"w\"> </span><span class=\"n\">expr</span><span class=\"o\">=</span><span class=\"n\">Expr</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">hir_id</span>: <span class=\"nc\">HirId</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">owner</span>: <span class=\"nc\">DefId</span><span class=\"p\">(</span><span class=\"mi\">0</span>:<span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"o\">~</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"n\">b25</span><span class=\"p\">]</span>::<span class=\"n\">const_generic</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">local_id</span>: <span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">kind</span>: <span class=\"nc\">Path</span><span class=\"p\">(</span><span class=\"n\">Resolved</span><span class=\"p\">(</span><span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Path</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">span</span>: <span class=\"nc\">src</span><span class=\"o\">/</span><span class=\"n\">test</span><span class=\"o\">/</span><span class=\"n\">ui</span><span class=\"o\">/</span><span class=\"n\">asm</span><span class=\"o\">/</span><span class=\"n\">x86_64</span><span class=\"o\">/</span><span class=\"k\">const</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">14</span>:<span class=\"mi\">46</span>: <span class=\"mi\">14</span>:<span class=\"mi\">47</span><span class=\"w\"> </span><span class=\"p\">(</span>#<span class=\"mi\">0</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">res</span>: <span class=\"nc\">Def</span><span class=\"p\">(</span><span class=\"n\">ConstParam</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">DefId</span><span class=\"p\">(</span><span class=\"mi\">0</span>:<span class=\"mi\">11</span><span class=\"w\"> </span><span class=\"o\">~</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"n\">b25</span><span class=\"p\">]</span>::<span class=\"n\">const_generic</span>::<span class=\"n\">X</span><span class=\"p\">)),</span><span class=\"w\"> </span><span class=\"n\">segments</span>: <span class=\"p\">[</span><span class=\"n\">PathSegment</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">ident</span>: <span class=\"nc\">X</span>#<span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">hir_id</span>: <span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">HirId</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">owner</span>: <span class=\"nc\">DefId</span><span class=\"p\">(</span><span class=\"mi\">0</span>:<span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"o\">~</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"n\">b25</span><span class=\"p\">]</span>::<span class=\"n\">const_generic</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">local_id</span>: <span class=\"mi\">9</span><span class=\"w\"> </span><span class=\"p\">}),</span><span class=\"w\"> </span><span class=\"n\">res</span>: <span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">Def</span><span class=\"p\">(</span><span class=\"n\">ConstParam</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">DefId</span><span class=\"p\">(</span><span class=\"mi\">0</span>:<span class=\"mi\">11</span><span class=\"w\"> </span><span class=\"o\">~</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"n\">b25</span><span class=\"p\">]</span>::<span class=\"n\">const_generic</span>::<span class=\"n\">X</span><span class=\"p\">))),</span><span class=\"w\"> </span><span class=\"n\">args</span>: <span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">infer_args</span>: <span class=\"nc\">true</span><span class=\"w\"> </span><span class=\"p\">}]</span><span class=\"w\"> </span><span class=\"p\">})),</span><span class=\"w\"> </span><span class=\"n\">span</span>: <span class=\"nc\">src</span><span class=\"o\">/</span><span class=\"n\">test</span><span class=\"o\">/</span><span class=\"n\">ui</span><span class=\"o\">/</span><span class=\"n\">asm</span><span class=\"o\">/</span><span class=\"n\">x86_64</span><span class=\"o\">/</span><span class=\"k\">const</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">14</span>:<span class=\"mi\">46</span>: <span class=\"mi\">14</span>:<span class=\"mi\">47</span><span class=\"w\"> </span><span class=\"p\">(</span>#<span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"err\">├─</span><span class=\"mi\">0</span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"n\">DEBUG</span><span class=\"w\"> </span><span class=\"n\">rustc_middle</span>::<span class=\"n\">mir</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"o\">=</span><span class=\"kt\">usize</span><span class=\"w\"></span>\n<span class=\"err\">├─</span><span class=\"mi\">0</span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"n\">DEBUG</span><span class=\"w\"> </span><span class=\"n\">rustc_middle</span>::<span class=\"n\">mir</span><span class=\"w\"> </span><span class=\"n\">parent_substs</span><span class=\"o\">=</span><span class=\"p\">[]</span><span class=\"w\"></span>\n<span class=\"err\">├─</span><span class=\"mi\">0</span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"n\">DEBUG</span><span class=\"w\"> </span><span class=\"n\">rustc_middle</span>::<span class=\"n\">mir</span><span class=\"w\"> </span><span class=\"n\">substs</span><span class=\"o\">=</span><span class=\"p\">[]</span><span class=\"w\"></span>\n<span class=\"err\">├─</span><span class=\"mi\">0</span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"n\">DEBUG</span><span class=\"w\"> </span><span class=\"n\">rustc_middle</span>::<span class=\"n\">mir</span><span class=\"w\"> </span><span class=\"n\">span</span><span class=\"o\">=</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">test</span><span class=\"o\">/</span><span class=\"n\">ui</span><span class=\"o\">/</span><span class=\"n\">asm</span><span class=\"o\">/</span><span class=\"n\">x86_64</span><span class=\"o\">/</span><span class=\"k\">const</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">14</span>:<span class=\"mi\">46</span>: <span class=\"mi\">14</span>:<span class=\"mi\">47</span><span class=\"w\"> </span><span class=\"p\">(</span>#<span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"err\">├─</span><span class=\"mi\">0</span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"n\">DEBUG</span><span class=\"w\"> </span><span class=\"n\">rustc_middle</span>::<span class=\"n\">mir</span><span class=\"w\"> </span><span class=\"n\">param_env</span><span class=\"o\">=</span><span class=\"n\">ParamEnv</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">caller_bounds</span>: <span class=\"p\">[],</span><span class=\"w\"> </span><span class=\"n\">reveal</span>: <span class=\"nc\">UserFacing</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">constness</span>: <span class=\"nc\">NotConst</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"err\">├─┐</span><span class=\"n\">rustc_middle</span>::<span class=\"n\">mir</span>::<span class=\"n\">interpret</span>::<span class=\"n\">queries</span>::<span class=\"n\">const_eval_resolve</span><span class=\"w\"> </span><span class=\"n\">param_env</span><span class=\"o\">=</span><span class=\"n\">ParamEnv</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">caller_bounds</span>: <span class=\"p\">[],</span><span class=\"w\"> </span><span class=\"n\">reveal</span>: <span class=\"nc\">UserFacing</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">constness</span>: <span class=\"nc\">NotConst</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">ct</span><span class=\"o\">=</span><span class=\"n\">Unevaluated</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">def</span>: <span class=\"nc\">WithOptConstParam</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">did</span>: <span class=\"nc\">DefId</span><span class=\"p\">(</span><span class=\"mi\">0</span>:<span class=\"mi\">15</span><span class=\"w\"> </span><span class=\"o\">~</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"n\">b25</span><span class=\"p\">]</span>::<span class=\"n\">const_generic</span>::<span class=\"p\">{</span><span class=\"n\">constant</span>#<span class=\"mi\">0</span><span class=\"p\">}),</span><span class=\"w\"> </span><span class=\"n\">const_param_did</span>: <span class=\"nb\">None</span> <span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">substs</span>: <span class=\"p\">[],</span><span class=\"w\"> </span><span class=\"n\">promoted</span>: <span class=\"nb\">None</span> <span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">span</span><span class=\"o\">=</span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">test</span><span class=\"o\">/</span><span class=\"n\">ui</span><span class=\"o\">/</span><span class=\"n\">asm</span><span class=\"o\">/</span><span class=\"n\">x86_64</span><span class=\"o\">/</span><span class=\"k\">const</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">14</span>:<span class=\"mi\">46</span>: <span class=\"mi\">14</span>:<span class=\"mi\">47</span><span class=\"w\"> </span><span class=\"p\">(</span>#<span class=\"mi\">0</span><span class=\"p\">))</span><span class=\"w\"></span>\n\n<span class=\"o\">....</span><span class=\"w\"></span>\n\n<span class=\"err\">│</span><span class=\"w\"> </span><span class=\"err\">│</span><span class=\"w\"> </span><span class=\"err\">│</span><span class=\"w\"> </span><span class=\"err\">├─</span><span class=\"mi\">0</span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"n\">DEBUG</span><span class=\"w\"> </span><span class=\"n\">rustc_middle</span>::<span class=\"n\">ty</span>::<span class=\"n\">normalize_erasing_regions</span><span class=\"w\"> </span><span class=\"n\">subst_and_normalize_erasing_regions</span><span class=\"p\">(</span><span class=\"n\">param_substs</span><span class=\"o\">=</span><span class=\"p\">[],</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"o\">=</span><span class=\"n\">Ty</span><span class=\"p\">(</span><span class=\"n\">Const</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">ty</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">val</span>: <span class=\"nc\">Param</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"o\">/</span>#<span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}),</span><span class=\"w\"> </span><span class=\"n\">param_env</span><span class=\"o\">=</span><span class=\"n\">ParamEnv</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">caller_bounds</span>: <span class=\"p\">[],</span><span class=\"w\"> </span><span class=\"n\">reveal</span>: <span class=\"nc\">UserFacing</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">constness</span>: <span class=\"nc\">Const</span><span class=\"w\"> </span><span class=\"p\">})</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 277181094,
        "sender_full_name": "BN",
        "timestamp": 1648662018
    },
    {
        "content": "<p>where exactly are you using that method?</p>",
        "id": 277234567,
        "sender_full_name": "lcnr",
        "timestamp": 1648704173
    },
    {
        "content": "<p>there are 2 parts to this:</p>",
        "id": 277234569,
        "sender_full_name": "lcnr",
        "timestamp": 1648704181
    },
    {
        "content": "<ul>\n<li>for mir const we never need to deal with the <code>opt_const_arg</code> part and can always use <code>DefId</code> with <code>WithOptConstParam::unknown(def_id)</code>.</li>\n</ul>",
        "id": 277234597,
        "sender_full_name": "lcnr",
        "timestamp": 1648704234
    },
    {
        "content": "<ul>\n<li>you do not want the <code>substs</code> for the <code>typeck_root_def_id</code> at any point for generic const</li>\n</ul>\n<p>I do not think there exists any situation where we want to use that for anything else apart from <code>type_of</code></p>",
        "id": 277234832,
        "sender_full_name": "lcnr",
        "timestamp": 1648704531
    },
    {
        "content": "<p>I'm calling this in <code>ConstantKind::from_anon_const</code> which is only called during thir construction for <code>InlineAsmOperand::Const</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">                            </span><span class=\"n\">hir</span>::<span class=\"n\">InlineAsmOperand</span>::<span class=\"n\">Const</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"n\">anon_const</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">anon_const_def_id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"w\">                                    </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">hir</span><span class=\"p\">().</span><span class=\"n\">local_def_id</span><span class=\"p\">(</span><span class=\"n\">anon_const</span><span class=\"p\">.</span><span class=\"n\">hir_id</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">mir</span>::<span class=\"n\">ConstantKind</span>::<span class=\"n\">from_anon_const</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">                                    </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                                    </span><span class=\"n\">anon_const_def_id</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                                    </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">param_env</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                                </span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I just tried to get the <code>substs</code> through the hir parent node, but that also returns empty substs. This is in <code>from_opt_const_arg_anon_const</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">hir_id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">hir</span><span class=\"p\">().</span><span class=\"n\">local_def_id_to_hir_id</span><span class=\"p\">(</span><span class=\"n\">def</span><span class=\"p\">.</span><span class=\"n\">did</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">parent_substs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">parent_hir_id</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">hir</span><span class=\"p\">().</span><span class=\"n\">find_parent_node</span><span class=\"p\">(</span><span class=\"n\">hir_id</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">parent_did</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">hir</span><span class=\"p\">().</span><span class=\"n\">opt_local_def_id</span><span class=\"p\">(</span><span class=\"n\">parent_hir_id</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">InternalSubsts</span>::<span class=\"n\">identity_for_item</span><span class=\"p\">(</span><span class=\"n\">tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">parent_did</span><span class=\"p\">.</span><span class=\"n\">to_def_id</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">mk_substs</span><span class=\"p\">(</span><span class=\"nb\">Vec</span>::<span class=\"o\">&lt;</span><span class=\"n\">GenericArg</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;&gt;</span>::<span class=\"n\">new</span><span class=\"p\">().</span><span class=\"n\">into_iter</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">mk_substs</span><span class=\"p\">(</span><span class=\"nb\">Vec</span>::<span class=\"o\">&lt;</span><span class=\"n\">GenericArg</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;&gt;</span>::<span class=\"n\">new</span><span class=\"p\">().</span><span class=\"n\">into_iter</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">debug</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"o\">?</span><span class=\"n\">parent_substs</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>What alternative way is there to get the parent substs if not through the hid parent node or <code>typeck_root_def_id</code>?</p>",
        "id": 277244611,
        "sender_full_name": "BN",
        "timestamp": 1648713147
    },
    {
        "content": "<p>Also don't understand how identity substs would even allow const eval to succeed here. Even if we would be able to substitute in <code>Param(X/#0)</code>, the call to <code>eval_to_const_value_raw</code> would fail. Why can <code>const_eval_resolve</code>with identity substs replace <code>try_eval_lit_or_param</code> here?</p>",
        "id": 277246274,
        "sender_full_name": "BN",
        "timestamp": 1648714116
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/277234832\">said</a>:</p>\n<blockquote>\n<ul>\n<li>you do not want the <code>substs</code> for the <code>typeck_root_def_id</code> at any point for generic const</li>\n</ul>\n<p>I do not think there exists any situation where we want to use that for anything else apart from <code>type_of</code></p>\n</blockquote>\n<p>what, that one is wrong, you do not ever want to use <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.WithOptConstParam.html#method.def_id_for_type_of\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.WithOptConstParam.html#method.def_id_for_type_of</a> for anything apart from <code>type_of</code></p>",
        "id": 277247811,
        "sender_full_name": "lcnr",
        "timestamp": 1648715203
    },
    {
        "content": "<p>so constants used by asm probably do not work like inline constants, but are instead typechecked checked separately from their parent</p>",
        "id": 277247900,
        "sender_full_name": "lcnr",
        "timestamp": 1648715263
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"328097\">BN</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/277246274\">said</a>:</p>\n<blockquote>\n<p>Also don't understand how identity substs would even allow const eval to succeed here. Even if we would be able to substitute in <code>Param(X/#0)</code>, the call to <code>eval_to_const_value_raw</code> would fail. Why can <code>const_eval_resolve</code>with identity substs replace <code>try_eval_lit_or_param</code> here?</p>\n</blockquote>\n<p>const eval doesn't have to succeed</p>",
        "id": 277248091,
        "sender_full_name": "lcnr",
        "timestamp": 1648715363
    },
    {
        "content": "<p>it just shouldn't ICE</p>",
        "id": 277248103,
        "sender_full_name": "lcnr",
        "timestamp": 1648715373
    },
    {
        "content": "<p>fixing that is fairly annoying <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 277248138,
        "sender_full_name": "lcnr",
        "timestamp": 1648715400
    },
    {
        "content": "<p>we're hitting one of the <code>min_const_generics</code> hacks and to fix that I would have to look at this myself</p>",
        "id": 277248244,
        "sender_full_name": "lcnr",
        "timestamp": 1648715438
    },
    {
        "content": "<p>i guess the easiest solution for now is:</p>",
        "id": 277248275,
        "sender_full_name": "lcnr",
        "timestamp": 1648715461
    },
    {
        "content": "<p>keep a method <code>from_anon_const</code> which looks into <code>blocks</code> and returns <code>ConstKind::Param</code> if its a generic param</p>",
        "id": 277248345,
        "sender_full_name": "lcnr",
        "timestamp": 1648715511
    },
    {
        "content": "<p>and apart from that you should be able to safely evaluate it with <code>InternalSubsts::identity_for_item(tcx, did)</code> and return <code>ConstKind::Unevaluated</code> if it fails</p>",
        "id": 277248478,
        "sender_full_name": "lcnr",
        "timestamp": 1648715575
    },
    {
        "content": "<p>above that method we prob want the following fixme:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// FIXME(const_generics): We currently have to special case parameters because `min_const_generics`</span>\n<span class=\"c1\">// does not provide the parents generics to anonymous constants. We still allow generic const</span>\n<span class=\"c1\">// parameters by themselves however, e.g. `N`.  These constants would cause an ICE if we were to</span>\n<span class=\"c1\">// ever try to substitute the generic parameters in their bodies.</span>\n<span class=\"c1\">//</span>\n<span class=\"c1\">// While this doesn't happen as these constants are always used as `ty::ConstKind::Param`, it does</span>\n<span class=\"c1\">// cause issues if we were to remove that special-case and try to evaluate the constant instead.</span>\n</code></pre></div>",
        "id": 277249050,
        "sender_full_name": "lcnr",
        "timestamp": 1648715834
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/277248244\">said</a>:</p>\n<blockquote>\n<p>we're hitting one of the <code>min_const_generics</code> hacks and to fix that I would have to look at this myself</p>\n</blockquote>\n<p>i am sorry that you have to stumble from one unrelated const generics issue to the next <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> really didn't expect valtrees to interact with so many issues</p>",
        "id": 277249335,
        "sender_full_name": "lcnr",
        "timestamp": 1648715995
    },
    {
        "content": "<p>Thanks I'll try that.</p>",
        "id": 277251182,
        "sender_full_name": "BN",
        "timestamp": 1648717001
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/277249335\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/277248244\">said</a>:</p>\n<blockquote>\n<p>we're hitting one of the <code>min_const_generics</code> hacks and to fix that I would have to look at this myself</p>\n</blockquote>\n<p>i am sorry that you have to stumble from one unrelated const generics issue to the next <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> really didn't expect valtrees to interact with so many issues</p>\n</blockquote>\n<p>ok good that you say that. I was actually sort of worrying I was starting to get on your nerves for having to ask you all the time ^^</p>",
        "id": 277251244,
        "sender_full_name": "BN",
        "timestamp": 1648717039
    },
    {
        "content": "<p>I've implemented the valtree -&gt; ConstValue <a href=\"https://github.com/b-naber/rust/blob/78b82f903d9074db248bc90e7c801a1a64ca4463/compiler/rustc_const_eval/src/const_eval/valtrees.rs#L222-L402\">conversion</a>. Can you take a look at this please, <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> ?</p>",
        "id": 277888853,
        "sender_full_name": "BN",
        "timestamp": 1649169671
    },
    {
        "content": "<p>is that part of a PR?</p>",
        "id": 277995494,
        "sender_full_name": "lcnr",
        "timestamp": 1649236207
    },
    {
        "content": "<p>you should probably open a pr and get <span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> and <span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> to look over it, don't know too much about how to deal with mir constants</p>",
        "id": 277995688,
        "sender_full_name": "lcnr",
        "timestamp": 1649236324
    },
    {
        "content": "<p>though you should change the signature to return <code>ConstValue</code> without the <code>Option</code> as that conversion should be infallible</p>",
        "id": 277995732,
        "sender_full_name": "lcnr",
        "timestamp": 1649236346
    },
    {
        "content": "<p>also, <code>let mut ecx = mk_eval_cx(tcx, DUMMY_SP, ty::ParamEnv::reveal_all(), false);</code> looks like it is using the wrong param env? Should use the one from <code>param_env_ty</code>? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 277995815,
        "sender_full_name": "lcnr",
        "timestamp": 1649236400
    },
    {
        "content": "<p>This function touches on the <code>ValTree::SliceOrStr</code> issue though and is what I would like some input on. Using <code>&amp;[u8]</code> for <code>ty::Ref(_, Slice | Str,  _)</code> simplifies both valtree construction and valtree -&gt; constvalue conversion. It would also very likely have better performance. I don't see why we want to start with encoding those as Leafs instead of <code>SliceOrStr</code> tbh. You mentioned in the PR that using <code>SliceOrStr</code> could lead to type equality problems, but as <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> replied there, if we always use <code>SliceOrStr</code> for <code>&amp;str</code> and <code>&amp;[&lt;integer_type&gt;]</code> there won't be any problems with type equality. Can you maybe address that, because I'm in favor of using <code>SliceOrStr</code>.</p>",
        "id": 277999371,
        "sender_full_name": "BN",
        "timestamp": 1649238349
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/277995815\">said</a>:</p>\n<blockquote>\n<p>also, <code>let mut ecx = mk_eval_cx(tcx, DUMMY_SP, ty::ParamEnv::reveal_all(), false);</code> looks like it is using the wrong param env? Should use the one from <code>param_env_ty</code>? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>\n</blockquote>\n<p>Don't think this is a problem, we don't directly use the <code>param_env</code>. We do the same in <code>const_to_valtree</code>.</p>",
        "id": 277999552,
        "sender_full_name": "BN",
        "timestamp": 1649238422
    },
    {
        "content": "<blockquote>\n<p>Don't think this is a problem, we don't directly use the <code>param_env</code></p>\n</blockquote>\n<p>what do you mean with that? Why do we need to provide the param env if we don't use it?</p>",
        "id": 278000196,
        "sender_full_name": "lcnr",
        "timestamp": 1649238750
    },
    {
        "content": "<p>The eval ctxt needs a <code>param_env</code>, but we don't evaluate in these two functions, so the param_env can be empty.</p>",
        "id": 278000596,
        "sender_full_name": "BN",
        "timestamp": 1649238980
    },
    {
        "content": "<p>eh though we do evaluate in <code>const_to_valtree</code>, then I'm not sure why we can use an empty <code>ParamEnv</code> there (didnt write that function).</p>",
        "id": 278000845,
        "sender_full_name": "BN",
        "timestamp": 1649239106
    },
    {
        "content": "<p>nvm we pass in a param_env in <code>const_to_valtree</code>. I thought I had just copied that <code>mk_eval_cx</code> call from that function.</p>",
        "id": 278001226,
        "sender_full_name": "BN",
        "timestamp": 1649239321
    },
    {
        "content": "<blockquote>\n<p>This function touches on the <code>ValTree::SliceOrStr</code> issue though and is what I would like some input on. Using <code>&amp;[u8]</code> for <code>ty::Ref(_, Slice | Str,  _)</code> simplifies both valtree construction and valtree -&gt; constvalue conversion. </p>\n</blockquote>\n<p>how that? you still need to deal with <code>&amp;[T]</code> using <code>Valtree::Branch</code>, and that impl can be fully reused for <code>&amp;[u8]</code> and probably nearly completely reused for <code>&amp;str</code>.</p>",
        "id": 278002013,
        "sender_full_name": "lcnr",
        "timestamp": 1649239796
    },
    {
        "content": "<blockquote>\n<p>It would also very likely have better performance.</p>\n</blockquote>\n<p><span aria-label=\"100\" class=\"emoji emoji-1f4af\" role=\"img\" title=\"100\">:100:</span> definitely, which is why we have to avoid doing this until we're confident that we never regret that choice. Having bad perf is ok as long as there was never a time where we had good perf.</p>\n<blockquote>\n<p>You mentioned in the PR that using <code>SliceOrStr</code> could lead to type equality problems, but as <span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> replied there, if we always use <code>SliceOrStr</code> for <code>&amp;str</code> and <code>&amp;[&lt;integer_type&gt;]</code> there won't be any problems with type equality.</p>\n</blockquote>\n<p>I feel uncomfortable with that because it makes dealing with valtrees more complex. I don't believe that this variant meaningfully simplifies the implementation. I can give a few examples of things we may want in the future and which would get quite hairy with <code>SliceOrStr</code></p>",
        "id": 278002056,
        "sender_full_name": "lcnr",
        "timestamp": 1649239804
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/project-const-generics/issues/23\">project-const-generics#23</a></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">WithSlice</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">SLICE</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">M</span>: <span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">WithSlice</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>for this to ever compile, the impl would have to use <code>WithSlice&lt;Branch(2, Param(N), Param(M))&gt;</code>. If we have <code>SliceOrStr</code> we would now have to complicate substitution for constants by checking branches with <code>SliceOrStr</code> types on whether all children are values</p>",
        "id": 278002420,
        "sender_full_name": "lcnr",
        "timestamp": 1649240032
    },
    {
        "content": "<p>similarly if we want to allow <code>WithSlice&lt;&amp;[1, _]&gt;</code> and try to unify that with <code>WithSlice&lt;&amp;[1, 2]&gt;</code>. Here we should infer <code>_</code> to <code>2</code> and for that we again have to avoid the <code>SliceOrStr</code> representation (that also relies on <a href=\"https://github.com/rust-lang/project-const-generics/issues/23\">project-const-generics#23</a>)</p>",
        "id": 278002673,
        "sender_full_name": "lcnr",
        "timestamp": 1649240169
    },
    {
        "content": "<p>So <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> <a href=\"https://github.com/rust-lang/project-const-generics/issues/23\">project-const-generics#23</a> is my main concern here, because that is the only part of cg where we have to \"look inside\" valtrees</p>",
        "id": 278002904,
        "sender_full_name": "lcnr",
        "timestamp": 1649240335
    },
    {
        "content": "<p>idk, these things aren't impossible with that variant, but they get far more annoying and I want valtrees to remain as easy to reason about as possible</p>",
        "id": 278003018,
        "sender_full_name": "lcnr",
        "timestamp": 1649240408
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/278002420\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/rust-lang/project-const-generics/issues/23\">project-const-generics#23</a></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">WithSlice</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">SLICE</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">M</span>: <span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">WithSlice</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>for this to ever compile, the impl would have to use <code>WithSlice&lt;Branch(2, Param(N), Param(M))&gt;</code>. If we have <code>SliceOrStr</code> we would now have to complicate substitution for constants by checking branches with <code>SliceOrStr</code> types on whether all children are values</p>\n</blockquote>\n<p>In what way could the children not be values, because of padding?</p>",
        "id": 278003769,
        "sender_full_name": "BN",
        "timestamp": 1649240943
    },
    {
        "content": "<p>no, because the children are generic parameters</p>",
        "id": 278003983,
        "sender_full_name": "lcnr",
        "timestamp": 1649241080
    },
    {
        "content": "<p>i <del>want</del><em>believe that our current best option is</em> to merge valtrees into <code>ty::Const</code> so that we end up with something similar to <a href=\"https://github.com/rust-lang/project-const-generics/issues/43\">https://github.com/rust-lang/project-const-generics/issues/43</a></p>",
        "id": 278004175,
        "sender_full_name": "lcnr",
        "timestamp": 1649241208
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"328097\">BN</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/278000596\">said</a>:</p>\n<blockquote>\n<p>The eval ctxt needs a <code>param_env</code>, but we don't evaluate in these two functions, so the param_env can be empty.</p>\n</blockquote>\n<p>should still use the correct one if its trivially available, in case we do end up evaluating stuff there in the future</p>",
        "id": 278004295,
        "sender_full_name": "lcnr",
        "timestamp": 1649241294
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/278004175\">said</a>:</p>\n<blockquote>\n<p>i <del>want</del><em>believe that our current best option is</em> to merge valtrees into <code>ty::Const</code> so that we end up with something similar to <a href=\"https://github.com/rust-lang/project-const-generics/issues/43\">https://github.com/rust-lang/project-const-generics/issues/43</a></p>\n</blockquote>\n<p>so the current <code>Valtree::Branch</code>would then contain <code>ty::Const</code> instead of <code>Valtree</code></p>",
        "id": 278004432,
        "sender_full_name": "lcnr",
        "timestamp": 1649241363
    },
    {
        "content": "<p>When do we actually substitute the generic params in the <code>WithSlice</code> example. So the anon const in <code>WithSlice</code> would have the form <code>ty::Constkind::Value(Valtree::SliceOrStr(bytes))</code> before substitution?</p>",
        "id": 278004723,
        "sender_full_name": "BN",
        "timestamp": 1649241562
    },
    {
        "content": "<p>What would <code>bytes</code> be then?</p>",
        "id": 278004733,
        "sender_full_name": "BN",
        "timestamp": 1649241574
    },
    {
        "content": "<p>so the idea is that we would start with <code>WithSlice&lt;&amp;[N, M]&gt;</code> and substitute <code>N = 1</code> and <code>M = 2</code>. we then get <code>WithSlice&lt;&amp;[1, 2]&gt;</code></p>",
        "id": 278004804,
        "sender_full_name": "lcnr",
        "timestamp": 1649241617
    },
    {
        "content": "<p>the first one has use <code>ConstKind::Branch</code> because its children references generic parameters</p>",
        "id": 278004830,
        "sender_full_name": "lcnr",
        "timestamp": 1649241648
    },
    {
        "content": "<p>the second one would have to use <code>ConstKind::SliceOrStr([1, 2])</code></p>",
        "id": 278004852,
        "sender_full_name": "lcnr",
        "timestamp": 1649241667
    },
    {
        "content": "<p>yes thats how I thought it would be. But in the current implementation we also use <code>SliceOrStr</code> for the first?</p>",
        "id": 278004937,
        "sender_full_name": "BN",
        "timestamp": 1649241723
    },
    {
        "content": "<p>well, the current implementation doesn't consider <code>WithSlice&lt;&amp;[N, M]&gt;</code> to constrain <code>N</code> or <code>M</code> so and just uses <code>ConstKind::Unevaluated</code>.</p>",
        "id": 278005012,
        "sender_full_name": "lcnr",
        "timestamp": 1649241800
    },
    {
        "content": "<p>ok then we substitute and get a <code>SliceOrStr</code>.</p>\n<blockquote>\n<p>If we have SliceOrStr we would now have to complicate substitution for constants by checking branches with SliceOrStr types on whether all children are values</p>\n</blockquote>\n<p>But I still don't see how this complicates the actual substitutions.</p>",
        "id": 278005353,
        "sender_full_name": "BN",
        "timestamp": 1649241977
    },
    {
        "content": "<p>if substitution encounters <code>ConstKind::Branch</code>for a type which can be represented using <code>SliceOrStr</code> we always have to do</p>\n<ul>\n<li>continue substituting all branches</li>\n<li>check if the results are all concrete<br>\n    - if so, convert it to <code>SliceOrStr</code></li>\n</ul>",
        "id": 278005703,
        "sender_full_name": "lcnr",
        "timestamp": 1649242198
    },
    {
        "content": "<p>Haven't read through project <a href=\"https://github.com/rust-lang/rust/issues/23\">#23</a> yet, so that might be why we  talk at cross purposes</p>",
        "id": 278005706,
        "sender_full_name": "BN",
        "timestamp": 1649242200
    },
    {
        "content": "<p>and during unification or <code>ConstKind::Branch</code> with <code>SliceOrStr</code> we have to convert the elements of <code>SliceOrStr</code> back to <code>ConstKind::Value</code> so that we can zip them with the <code>ConstKind::Branch</code>, again being careful to convert it back to <code>SliceOrStr</code> if the resulting value is now fully inferred</p>",
        "id": 278006014,
        "sender_full_name": "lcnr",
        "timestamp": 1649242381
    },
    {
        "content": "<p>none if this is impossible, but it is annoying impl work and something people learning about this have to learn and understand</p>",
        "id": 278006063,
        "sender_full_name": "lcnr",
        "timestamp": 1649242423
    },
    {
        "content": "<p>We would just have to use layout information to index into the raw bytes correctly in order to convert it back into <code>Constkind::Value</code> though right?</p>",
        "id": 278007193,
        "sender_full_name": "BN",
        "timestamp": 1649243117
    },
    {
        "content": "<p>For unification I do understand the problem you're describing, but I still don't understand why substitutions are a problem ^^</p>",
        "id": 278007238,
        "sender_full_name": "BN",
        "timestamp": 1649243160
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"328097\">BN</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/278007193\">said</a>:</p>\n<blockquote>\n<p>We would just have to use layout information to index into the raw bytes correctly in order to convert it back into <code>Constkind::Value</code> though right?</p>\n</blockquote>\n<p>substitution is <code>Branch</code> to <code>SliceOrStr</code>, so its the other way around. Convert a bunch of <code>ConstKind::Value</code> to one <code>ConstKind::SliceOrStr</code></p>",
        "id": 278007917,
        "sender_full_name": "lcnr",
        "timestamp": 1649243581
    },
    {
        "content": "<p>and yeah, for that we go <code>ConstKind::Value</code> -&gt; <code>ScalarInt</code> -&gt; <code>[u8]</code> which isn't overly complex, it's just one maybe 20 lines long function</p>",
        "id": 278007986,
        "sender_full_name": "lcnr",
        "timestamp": 1649243624
    },
    {
        "content": "<p>but that's still more than no function at all <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> and I don't think that ways in which the invariant \"always <code>SliceOrStr</code> if possible\" can be broken are immediately obvious. And that already expects people to know that this invariant exists</p>",
        "id": 278008136,
        "sender_full_name": "lcnr",
        "timestamp": 1649243711
    },
    {
        "content": "<p>So again, none of that means that <code>SliceOrStr</code> is impossible or that we won't add it in the future. But I do want to start without it as it using it does have a cost I don't want to pay yet</p>",
        "id": 278008207,
        "sender_full_name": "lcnr",
        "timestamp": 1649243759
    },
    {
        "content": "<p>But in the proposal you want to not use any of the CTFE functionality, so something like <code>&amp;str</code>wouldn't be represented through a <code>ScalarPair</code> for which we can get the raw bytes directly, but instead be some kind of slice of <code>ConstKind::Value</code> elements?</p>",
        "id": 278008370,
        "sender_full_name": "BN",
        "timestamp": 1649243862
    },
    {
        "content": "<p>If thats the case the benefit of using <code>SliceOrStr</code> wouldn't be there in the first place anyway afaict.</p>",
        "id": 278008442,
        "sender_full_name": "BN",
        "timestamp": 1649243896
    },
    {
        "content": "<p>you're talking about <a href=\"https://github.com/rust-lang/project-const-generics/issues/43\">project-const-generics#43</a>?</p>\n<blockquote>\n<p>As we have to evaluate <code>ty::Const</code> without them being typechecked, we can't just use the existing CTFE for this. We would therefore have to add some special evaluation code for <code>Expr</code>, though that could share its implementation with CTFE.</p>\n</blockquote>",
        "id": 278008634,
        "sender_full_name": "lcnr",
        "timestamp": 1649244026
    },
    {
        "content": "<p>probably should elaborate on that a bit in the doc <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> we still want ctfe for as much as possible so we will still need to convert ctfe results to <code>ty::Const</code> in some places</p>",
        "id": 278008720,
        "sender_full_name": "lcnr",
        "timestamp": 1649244096
    },
    {
        "content": "<p>and <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_ast/ast/enum.LitKind.html#variant.ByteStr\">byte string literals</a> are stored in the hir as <code>[u8]</code> so for these it would be nice to store them as <code>[u8]</code> even without interacting with ctfe</p>",
        "id": 278008815,
        "sender_full_name": "lcnr",
        "timestamp": 1649244150
    },
    {
        "content": "<p>i am not sure how much evaluation we will need outside of ctfe but I would expect that we mostly leave slices and strings alone</p>",
        "id": 278008919,
        "sender_full_name": "lcnr",
        "timestamp": 1649244235
    },
    {
        "content": "<p>the moment constants call a function, we can hand it off to ctfe again</p>",
        "id": 278008970,
        "sender_full_name": "lcnr",
        "timestamp": 1649244252
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> , <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> How can you get an <code>MplaceTy</code> that corresponds to the value behind an <code>Immediate::ScalarPair</code>? Given this place:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"err\">│</span><span class=\"w\"> </span><span class=\"err\">│</span><span class=\"w\"> </span><span class=\"err\">│</span><span class=\"w\"> </span><span class=\"err\">├─┐</span><span class=\"n\">rustc_const_eval</span>::<span class=\"n\">const_eval</span>::<span class=\"n\">valtrees</span>::<span class=\"n\">const_to_valtree_inner</span><span class=\"w\"> </span><span class=\"n\">place</span><span class=\"o\">=</span><span class=\"n\">MPlaceTy</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">mplace</span>: <span class=\"nc\">MemPlace</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">ptr</span>: <span class=\"nc\">alloc2</span><span class=\"o\">+</span><span class=\"mh\">0x8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">align</span>: <span class=\"nc\">Align</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">pow2</span>: <span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">meta</span>: <span class=\"nb\">None</span> <span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">layout</span>: <span class=\"nc\">TyAndLayout</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">ty</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">layout</span>: <span class=\"nc\">Layout</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">fields</span>: <span class=\"nc\">Arbitrary</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">offsets</span>: <span class=\"p\">[</span><span class=\"n\">Size</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">raw</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">Size</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">raw</span>: <span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"p\">}],</span><span class=\"w\"> </span><span class=\"n\">memory_index</span>: <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">variants</span>: <span class=\"nc\">Single</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">index</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">abi</span>: <span class=\"nc\">ScalarPair</span><span class=\"p\">(</span><span class=\"n\">Scalar</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">value</span>: <span class=\"nc\">Pointer</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">valid_range</span>: <span class=\"mi\">1</span><span class=\"o\">..=</span><span class=\"mi\">18446744073709551615</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">Scalar</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">value</span>: <span class=\"nc\">Int</span><span class=\"p\">(</span><span class=\"n\">I64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">valid_range</span>: <span class=\"mi\">0</span><span class=\"o\">..=</span><span class=\"mi\">18446744073709551615</span><span class=\"w\"> </span><span class=\"p\">}),</span><span class=\"w\"> </span><span class=\"n\">largest_niche</span>: <span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">Niche</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">offset</span>: <span class=\"nc\">Size</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">raw</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">scalar</span>: <span class=\"nc\">Scalar</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">value</span>: <span class=\"nc\">Pointer</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">valid_range</span>: <span class=\"mi\">1</span><span class=\"o\">..=</span><span class=\"mi\">18446744073709551615</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}),</span><span class=\"w\"> </span><span class=\"n\">align</span>: <span class=\"nc\">AbiAndPrefAlign</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">abi</span>: <span class=\"nc\">Align</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">pow2</span>: <span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">pref</span>: <span class=\"nc\">Align</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">pow2</span>: <span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">size</span>: <span class=\"nc\">Size</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">raw</span>: <span class=\"mi\">16</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>which corresponds to the <code>Immediate</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"err\">│</span><span class=\"w\"> </span><span class=\"err\">│</span><span class=\"w\"> </span><span class=\"err\">│</span><span class=\"w\"> </span><span class=\"err\">│</span><span class=\"w\"> </span><span class=\"err\">├─</span><span class=\"mi\">0</span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"n\">DEBUG</span><span class=\"w\"> </span><span class=\"n\">rustc_const_eval</span>::<span class=\"n\">const_eval</span>::<span class=\"n\">valtrees</span><span class=\"w\"> </span><span class=\"n\">imm_ty</span><span class=\"o\">=</span><span class=\"n\">ImmTy</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">imm</span>: <span class=\"nc\">ScalarPair</span><span class=\"p\">(</span><span class=\"n\">alloc4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x0000000000000005</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">layout</span>: <span class=\"nc\">TyAndLayout</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">ty</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">layout</span>: <span class=\"nc\">Layout</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">fields</span>: <span class=\"nc\">Arbitrary</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">offsets</span>: <span class=\"p\">[</span><span class=\"n\">Size</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">raw</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">Size</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">raw</span>: <span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"p\">}],</span><span class=\"w\"> </span><span class=\"n\">memory_index</span>: <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">variants</span>: <span class=\"nc\">Single</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">index</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">abi</span>: <span class=\"nc\">ScalarPair</span><span class=\"p\">(</span><span class=\"n\">Scalar</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">value</span>: <span class=\"nc\">Pointer</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">valid_range</span>: <span class=\"mi\">1</span><span class=\"o\">..=</span><span class=\"mi\">18446744073709551615</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">Scalar</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">value</span>: <span class=\"nc\">Int</span><span class=\"p\">(</span><span class=\"n\">I64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">valid_range</span>: <span class=\"mi\">0</span><span class=\"o\">..=</span><span class=\"mi\">18446744073709551615</span><span class=\"w\"> </span><span class=\"p\">}),</span><span class=\"w\"> </span><span class=\"n\">largest_niche</span>: <span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">Niche</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">offset</span>: <span class=\"nc\">Size</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">raw</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">scalar</span>: <span class=\"nc\">Scalar</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">value</span>: <span class=\"nc\">Pointer</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">valid_range</span>: <span class=\"mi\">1</span><span class=\"o\">..=</span><span class=\"mi\">18446744073709551615</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}),</span><span class=\"w\"> </span><span class=\"n\">align</span>: <span class=\"nc\">AbiAndPrefAlign</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">abi</span>: <span class=\"nc\">Align</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">pow2</span>: <span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">pref</span>: <span class=\"nc\">Align</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">pow2</span>: <span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">size</span>: <span class=\"nc\">Size</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">raw</span>: <span class=\"mi\">16</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>If you call <code>deref_operand</code>on this place you get:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"err\">│</span><span class=\"w\"> </span><span class=\"err\">│</span><span class=\"w\"> </span><span class=\"err\">│</span><span class=\"w\"> </span><span class=\"err\">│</span><span class=\"w\"> </span><span class=\"err\">├─</span><span class=\"mi\">0</span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"n\">DEBUG</span><span class=\"w\"> </span><span class=\"n\">rustc_const_eval</span>::<span class=\"n\">const_eval</span>::<span class=\"n\">valtrees</span><span class=\"w\"> </span><span class=\"n\">derefd_place</span><span class=\"o\">=</span><span class=\"n\">MPlaceTy</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">mplace</span>: <span class=\"nc\">MemPlace</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">ptr</span>: <span class=\"nc\">alloc4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">align</span>: <span class=\"nc\">Align</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">pow2</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">meta</span>: <span class=\"nc\">Meta</span><span class=\"p\">(</span><span class=\"mh\">0x0000000000000005</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">layout</span>: <span class=\"nc\">TyAndLayout</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">ty</span>: <span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">layout</span>: <span class=\"nc\">Layout</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">fields</span>: <span class=\"nc\">Array</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">stride</span>: <span class=\"nc\">Size</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">raw</span>: <span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">count</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">variants</span>: <span class=\"nc\">Single</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">index</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">abi</span>: <span class=\"nc\">Aggregate</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">sized</span>: <span class=\"nc\">false</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">largest_niche</span>: <span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">align</span>: <span class=\"nc\">AbiAndPrefAlign</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">abi</span>: <span class=\"nc\">Align</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">pow2</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">pref</span>: <span class=\"nc\">Align</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">pow2</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">size</span>: <span class=\"nc\">Size</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">raw</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Which cannot be used in  a <code>branches</code> call in <code>const_to_valtree</code>, since you cannot call <code>mplace_field</code> on it given that <code>layout: Layout { fields: Array { stride: Size { raw: 1 }, count: 0 }</code>. I do know how to get the raw bytes behind the <code>ScalarPair</code> and could (somewhat awkwardly) iterate through that raw bytes slice to create the <code>Leaf</code>s, but I was wondering whether there exists a more reasonable approach.</p>",
        "id": 278042807,
        "sender_full_name": "BN",
        "timestamp": 1649259511
    },
    {
        "content": "<p>hm.... we do have mplace_index, does that do what you want?</p>",
        "id": 278043727,
        "sender_full_name": "oli",
        "timestamp": 1649259847
    },
    {
        "content": "<p>No, it doesn't unfortunately. </p>\n<p>If I call <code>deref_operand</code> on the first MPlace:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"err\">│</span><span class=\"w\"> </span><span class=\"err\">├─┐</span><span class=\"n\">rustc_const_eval</span>::<span class=\"n\">const_eval</span>::<span class=\"n\">valtrees</span>::<span class=\"n\">const_to_valtree_inner</span><span class=\"w\"> </span><span class=\"n\">place</span><span class=\"o\">=</span><span class=\"n\">MPlaceTy</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">mplace</span>: <span class=\"nc\">MemPlace</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">ptr</span>: <span class=\"nc\">alloc3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">align</span>: <span class=\"nc\">Align</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">pow2</span>: <span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">meta</span>: <span class=\"nb\">None</span> <span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">layout</span>: <span class=\"nc\">TyAndLayout</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">ty</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">layout</span>: <span class=\"nc\">Layout</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">fields</span>: <span class=\"nc\">Arbitrary</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">offsets</span>: <span class=\"p\">[</span><span class=\"n\">Size</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">raw</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">Size</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">raw</span>: <span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"p\">}],</span><span class=\"w\"> </span><span class=\"n\">memory_index</span>: <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">variants</span>: <span class=\"nc\">Single</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">index</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">abi</span>: <span class=\"nc\">ScalarPair</span><span class=\"p\">(</span><span class=\"n\">Scalar</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">value</span>: <span class=\"nc\">Pointer</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">valid_range</span>: <span class=\"mi\">1</span><span class=\"o\">..=</span><span class=\"mi\">18446744073709551615</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">Scalar</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">value</span>: <span class=\"nc\">Int</span><span class=\"p\">(</span><span class=\"n\">I64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">valid_range</span>: <span class=\"mi\">0</span><span class=\"o\">..=</span><span class=\"mi\">18446744073709551615</span><span class=\"w\"> </span><span class=\"p\">}),</span><span class=\"w\"> </span><span class=\"n\">largest_niche</span>: <span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">Niche</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">offset</span>: <span class=\"nc\">Size</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">raw</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">scalar</span>: <span class=\"nc\">Scalar</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">value</span>: <span class=\"nc\">Pointer</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">valid_range</span>: <span class=\"mi\">1</span><span class=\"o\">..=</span><span class=\"mi\">18446744073709551615</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}),</span><span class=\"w\"> </span><span class=\"n\">align</span>: <span class=\"nc\">AbiAndPrefAlign</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">abi</span>: <span class=\"nc\">Align</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">pow2</span>: <span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">pref</span>: <span class=\"nc\">Align</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">pow2</span>: <span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">size</span>: <span class=\"nc\">Size</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">raw</span>: <span class=\"mi\">16</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and get back this dereferenced place:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"err\">│</span><span class=\"w\"> </span><span class=\"err\">│</span><span class=\"w\"> </span><span class=\"err\">├─</span><span class=\"mi\">0</span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"n\">DEBUG</span><span class=\"w\"> </span><span class=\"n\">rustc_const_eval</span>::<span class=\"n\">const_eval</span>::<span class=\"n\">valtrees</span><span class=\"w\"> </span><span class=\"n\">derefd</span>: <span class=\"nc\">MPlaceTy</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">mplace</span>: <span class=\"nc\">MemPlace</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">ptr</span>: <span class=\"nc\">alloc2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">align</span>: <span class=\"nc\">Align</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">pow2</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">meta</span>: <span class=\"nc\">Meta</span><span class=\"p\">(</span><span class=\"mh\">0x0000000000000005</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">layout</span>: <span class=\"nc\">TyAndLayout</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">ty</span>: <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">layout</span>: <span class=\"nc\">Layout</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">fields</span>: <span class=\"nc\">Array</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">stride</span>: <span class=\"nc\">Size</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">raw</span>: <span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">count</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">variants</span>: <span class=\"nc\">Single</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">index</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">abi</span>: <span class=\"nc\">Aggregate</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">sized</span>: <span class=\"nc\">false</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">largest_niche</span>: <span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">align</span>: <span class=\"nc\">AbiAndPrefAlign</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">abi</span>: <span class=\"nc\">Align</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">pow2</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">pref</span>: <span class=\"nc\">Align</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">pow2</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">size</span>: <span class=\"nc\">Size</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">raw</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>What exactly is this new dereferenced place? Why is its layout an Array with count 0, whereas the <code>ScalarPair</code> behind the first <code>Mplace</code> has length 0x5 has its second value?</p>",
        "id": 278048992,
        "sender_full_name": "BN",
        "timestamp": 1649261972
    },
    {
        "content": "<p>because it's an unsized place</p>",
        "id": 278050926,
        "sender_full_name": "oli",
        "timestamp": 1649262808
    },
    {
        "content": "<p>but indexing uses the meta information for unsized places</p>",
        "id": 278050941,
        "sender_full_name": "oli",
        "timestamp": 1649262819
    },
    {
        "content": "<p><code>mplace_index</code> should work on the dereferenced place afaict</p>",
        "id": 278050995,
        "sender_full_name": "oli",
        "timestamp": 1649262839
    },
    {
        "content": "<p>Thanks a lot, you're right <code>mplace_index</code> does exactly what I need here. Must have called that on the wrong <code>MPlace</code>, sorry for confusion.</p>",
        "id": 278051823,
        "sender_full_name": "BN",
        "timestamp": 1649263196
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"328097\">@BN</span> is the <code>ScalarPair</code> a (wide) pointer? then you are looking for ref_to_mplace</p>",
        "id": 278068796,
        "sender_full_name": "RalfJ",
        "timestamp": 1649270812
    },
    {
        "content": "<p>Yes the <code>ScalarPair</code> is a wide pointer. <code>ref_to_mplace</code> does what I need (though it's also basically doing the job that <code>deref_operand</code> \"does\", in the sense that <code>deref_operand</code> takes an <code>MPlaceTy</code>, reads the immediate from that place and then calls <code>ref_to_mplace</code>). My problem was that I didn't understand how CTFE handles unsized types and was confused that the <code>mplace_field</code> functionality doesn't work on unsized types, but <code>mplace_index</code> does offer that functionality, so that solved my problem.</p>",
        "id": 278126347,
        "sender_full_name": "BN",
        "timestamp": 1649316498
    },
    {
        "content": "<p>Think we could improve the docs for those two functions a little bit. For <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_const_eval/interpret/eval_context/struct.InterpCx.html#method.mplace_field\"><code>mplace_field</code></a> what does 'the index type is restricting' mean here: 'This also works for arrays, but then the usize index type is restricting'? </p>\n<p>We should probably add that <code>mplace_index</code> also works on unsized types (and maybe add how to handle slices, i.e. <code>deref_operand</code> -&gt; <code>mplace_index</code> to index into underlying array).</p>",
        "id": 278126719,
        "sender_full_name": "BN",
        "timestamp": 1649316760
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span>  do we actually get <code>&amp;[T]</code> types during valtree construction in general?  It seems that CTFE automatically converts them to arrays. E.g. in </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"p\">(</span><span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"nb\">static</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">Foo</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">Foo</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">)]);</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">test</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">S</span>: <span class=\"p\">(</span><span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"nb\">static</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">Foo</span><span class=\"p\">])</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">test</span>::<span class=\"o\">&lt;</span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The type for the second element is <code>&amp;[Foo; 2]</code>. The only types for which I actually get slices are <code>&amp;str</code> and byte strings.</p>",
        "id": 278149108,
        "sender_full_name": "BN",
        "timestamp": 1649330891
    },
    {
        "content": "<p>what happens for</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">W</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">static</span> <span class=\"p\">[</span><span class=\"n\">Foo</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">Foo</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)]</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">Foo</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">)]</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 278149444,
        "sender_full_name": "lcnr",
        "timestamp": 1649331065
    },
    {
        "content": "<blockquote>\n<p>The type for the second element is <code>&amp;[Foo; 2]</code></p>\n</blockquote>\n<p>though that does seem weird to me</p>",
        "id": 278149496,
        "sender_full_name": "lcnr",
        "timestamp": 1649331090
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/278149444\">said</a>:</p>\n<blockquote>\n<p>what happens for</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">W</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">static</span> <span class=\"p\">[</span><span class=\"n\">Foo</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">Foo</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)]</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">Foo</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">)]</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"err\">│</span><span class=\"w\"> </span><span class=\"err\">├─┐</span><span class=\"n\">rustc_const_eval</span>::<span class=\"n\">const_eval</span>::<span class=\"n\">eval_queries</span>::<span class=\"n\">turn_into_const_value</span><span class=\"w\"> </span><span class=\"n\">constant</span><span class=\"o\">=</span><span class=\"n\">ConstAlloc</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">alloc_id</span>: <span class=\"nc\">alloc2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ty</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"n\">Foo</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">key</span><span class=\"o\">=</span><span class=\"n\">ParamEnvAnd</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">param_env</span>: <span class=\"nc\">ParamEnv</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">caller_bounds</span>: <span class=\"p\">[],</span><span class=\"w\"> </span><span class=\"n\">reveal</span>: <span class=\"nc\">UserFacing</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">constness</span>: <span class=\"nc\">Const</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">value</span>: <span class=\"nc\">GlobalId</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">instance</span>: <span class=\"nc\">Instance</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">def</span>: <span class=\"nc\">Item</span><span class=\"p\">(</span><span class=\"n\">WithOptConstParam</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">did</span>: <span class=\"nc\">DefId</span><span class=\"p\">(</span><span class=\"mi\">0</span>:<span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"o\">~</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">[</span><span class=\"mi\">97</span><span class=\"n\">d8</span><span class=\"p\">]</span>::<span class=\"n\">W</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">const_param_did</span>: <span class=\"nb\">None</span> <span class=\"p\">}),</span><span class=\"w\"> </span><span class=\"n\">substs</span>: <span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">promoted</span>: <span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">promoted</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 278149730,
        "sender_full_name": "BN",
        "timestamp": 1649331190
    },
    {
        "content": "<p>interesting, and that doesn't happen for <code>[u8]</code></p>",
        "id": 278149798,
        "sender_full_name": "lcnr",
        "timestamp": 1649331238
    },
    {
        "content": "<p>or what about <code>const W: &amp;'static [Foo] = &amp;[Foo(1, 2), Foo(2, 3)][1..2];</code></p>",
        "id": 278149884,
        "sender_full_name": "lcnr",
        "timestamp": 1649331267
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/278149884\">said</a>:</p>\n<blockquote>\n<p>or what about <code>const W: &amp;'static [Foo] = &amp;[Foo(1, 2), Foo(2, 3)][1..2];</code></p>\n</blockquote>\n<p>dont think you can index with a range in constants (yet)</p>",
        "id": 278149951,
        "sender_full_name": "BN",
        "timestamp": 1649331313
    },
    {
        "content": "<p>Think I tried that out, but can try again...</p>",
        "id": 278149966,
        "sender_full_name": "BN",
        "timestamp": 1649331324
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0015</span><span class=\"p\">]</span>: <span class=\"nc\">cannot</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">non</span><span class=\"o\">-</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">operator</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">constants</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">test</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">31</span>:<span class=\"mi\">28</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">31</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">W</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">static</span> <span class=\"p\">[</span><span class=\"n\">Foo</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">Foo</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">)][</span><span class=\"mi\">1</span><span class=\"o\">..</span><span class=\"mi\">2</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">                            </span><span class=\"o\">^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">calls</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">constants</span><span class=\"w\"> </span><span class=\"n\">are</span><span class=\"w\"> </span><span class=\"n\">limited</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">constant</span><span class=\"w\"> </span><span class=\"n\">functions</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">tuple</span><span class=\"w\"> </span><span class=\"n\">structs</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">tuple</span><span class=\"w\"> </span><span class=\"n\">variants</span><span class=\"w\"></span>\n\n<span class=\"n\">error</span>: <span class=\"nc\">aborting</span><span class=\"w\"> </span><span class=\"n\">due</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">previous</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">warning</span><span class=\"w\"> </span><span class=\"n\">emitted</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 278150085,
        "sender_full_name": "BN",
        "timestamp": 1649331381
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/278149798\">said</a>:</p>\n<blockquote>\n<p>interesting, and that doesn't happen for <code>[u8]</code></p>\n</blockquote>\n<p>If you pass in a reference to an array you don't get a slice (even if the type annotation for the constant uses a slice). The only case in which you get a <code>&amp;[u8]</code> are byte strings.</p>",
        "id": 278150218,
        "sender_full_name": "BN",
        "timestamp": 1649331477
    },
    {
        "content": "<p><code>const W: &amp;'static [Foo] = match &amp;[Foo(1, 2), Foo(2, 3)] {\n    [x @ .., _] =&gt; x,\n};</code></p>",
        "id": 278150305,
        "sender_full_name": "lcnr",
        "timestamp": 1649331512
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">to_slice</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"n\">Foo</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"n\">Foo</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">W</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">static</span> <span class=\"p\">[</span><span class=\"n\">Foo</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">to_slice</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">Foo</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">)])</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"fm\">panic!</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 278150409,
        "sender_full_name": "lcnr",
        "timestamp": 1649331585
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/278150305\">said</a>:</p>\n<blockquote>\n<p><code>const W: &amp;'static [Foo] = match &amp;[Foo(1, 2), Foo(2, 3)] {\n    [x @ .., _] =&gt; x,\n};</code></p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"err\">│</span><span class=\"w\"> </span><span class=\"err\">├─┐</span><span class=\"n\">rustc_const_eval</span>::<span class=\"n\">const_eval</span>::<span class=\"n\">eval_queries</span>::<span class=\"n\">turn_into_const_value</span><span class=\"w\"> </span><span class=\"n\">constant</span><span class=\"o\">=</span><span class=\"n\">ConstAlloc</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">alloc_id</span>: <span class=\"nc\">alloc2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ty</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"n\">Foo</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">key</span><span class=\"o\">=</span><span class=\"n\">ParamEnvAnd</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">param_env</span>: <span class=\"nc\">ParamEnv</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">caller_bounds</span>: <span class=\"p\">[],</span><span class=\"w\"> </span><span class=\"n\">reveal</span>: <span class=\"nc\">UserFacing</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">constness</span>: <span class=\"nc\">Const</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">value</span>: <span class=\"nc\">GlobalId</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">instance</span>: <span class=\"nc\">Instance</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">def</span>: <span class=\"nc\">Item</span><span class=\"p\">(</span><span class=\"n\">WithOptConstParam</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">did</span>: <span class=\"nc\">DefId</span><span class=\"p\">(</span><span class=\"mi\">0</span>:<span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"o\">~</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">[</span><span class=\"mi\">97</span><span class=\"n\">d8</span><span class=\"p\">]</span>::<span class=\"n\">W</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">const_param_did</span>: <span class=\"nb\">None</span> <span class=\"p\">}),</span><span class=\"w\"> </span><span class=\"n\">substs</span>: <span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">promoted</span>: <span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">promoted</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 278150446,
        "sender_full_name": "BN",
        "timestamp": 1649331603
    },
    {
        "content": "<p>yeah, so that's the type of the allocation, not of our constant</p>",
        "id": 278150499,
        "sender_full_name": "lcnr",
        "timestamp": 1649331623
    },
    {
        "content": "<p>because the constant has type <code>&amp;[Foo]</code> with length 1</p>",
        "id": 278150513,
        "sender_full_name": "lcnr",
        "timestamp": 1649331633
    },
    {
        "content": "<p>But we do match on the type of the <code>MPlaceTy</code> in <code>const_to_valtree</code></p>",
        "id": 278150936,
        "sender_full_name": "BN",
        "timestamp": 1649331901
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"err\">│</span><span class=\"w\"> </span><span class=\"err\">│</span><span class=\"w\"> </span><span class=\"err\">├─┐</span><span class=\"n\">rustc_const_eval</span>::<span class=\"n\">const_eval</span>::<span class=\"n\">valtrees</span>::<span class=\"n\">const_to_valtree_inner</span><span class=\"w\"> </span><span class=\"n\">place</span><span class=\"o\">=</span><span class=\"n\">MPlaceTy</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">mplace</span>: <span class=\"nc\">MemPlace</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">ptr</span>: <span class=\"nc\">alloc2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">align</span>: <span class=\"nc\">Align</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">pow2</span>: <span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">meta</span>: <span class=\"nb\">None</span> <span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">layout</span>: <span class=\"nc\">TyAndLayout</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">ty</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"n\">Foo</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">layout</span>: <span class=\"nc\">Layout</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">fields</span>: <span class=\"nc\">Primitive</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">variants</span>: <span class=\"nc\">Single</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">index</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">abi</span>: <span class=\"nc\">Scalar</span><span class=\"p\">(</span><span class=\"n\">Scalar</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">value</span>: <span class=\"nc\">Pointer</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">valid_range</span>: <span class=\"mi\">1</span><span class=\"o\">..=</span><span class=\"mi\">18446744073709551615</span><span class=\"w\"> </span><span class=\"p\">}),</span><span class=\"w\"> </span><span class=\"n\">largest_niche</span>: <span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">Niche</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">offset</span>: <span class=\"nc\">Size</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">raw</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">scalar</span>: <span class=\"nc\">Scalar</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">value</span>: <span class=\"nc\">Pointer</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">valid_range</span>: <span class=\"mi\">1</span><span class=\"o\">..=</span><span class=\"mi\">18446744073709551615</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}),</span><span class=\"w\"> </span><span class=\"n\">align</span>: <span class=\"nc\">AbiAndPrefAlign</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">abi</span>: <span class=\"nc\">Align</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">pow2</span>: <span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">pref</span>: <span class=\"nc\">Align</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">pow2</span>: <span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">size</span>: <span class=\"nc\">Size</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">raw</span>: <span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 278150953,
        "sender_full_name": "BN",
        "timestamp": 1649331915
    },
    {
        "content": "<p>is the <code>ty</code> for the original <code>ConstAlloc</code> already wrong?</p>",
        "id": 278151286,
        "sender_full_name": "lcnr",
        "timestamp": 1649332121
    },
    {
        "content": "<p>i.e. does <code>const_to_valtree</code> start with a <code>ConstAlloc</code> with a slice type</p>",
        "id": 278151342,
        "sender_full_name": "lcnr",
        "timestamp": 1649332163
    },
    {
        "content": "<p>or is that already an array there?</p>",
        "id": 278151347,
        "sender_full_name": "lcnr",
        "timestamp": 1649332169
    },
    {
        "content": "<p>already an array</p>",
        "id": 278151361,
        "sender_full_name": "BN",
        "timestamp": 1649332184
    },
    {
        "content": "<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> xx</p>",
        "id": 278151370,
        "sender_full_name": "lcnr",
        "timestamp": 1649332192
    },
    {
        "content": "<p>that sucks</p>",
        "id": 278151374,
        "sender_full_name": "lcnr",
        "timestamp": 1649332194
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span></p>",
        "id": 278151444,
        "sender_full_name": "lcnr",
        "timestamp": 1649332213
    },
    {
        "content": "<p>does that mean we need to pass the \"expected type\" into <code>const_to_valtree</code></p>",
        "id": 278151465,
        "sender_full_name": "lcnr",
        "timestamp": 1649332227
    },
    {
        "content": "<p>idk how exactly that should work</p>",
        "id": 278151490,
        "sender_full_name": "lcnr",
        "timestamp": 1649332247
    },
    {
        "content": "<p>Why do we need the expected type in the first place?</p>",
        "id": 278152102,
        "sender_full_name": "BN",
        "timestamp": 1649332584
    },
    {
        "content": "<p>Why can't we work with arrays?</p>",
        "id": 278152146,
        "sender_full_name": "BN",
        "timestamp": 1649332607
    },
    {
        "content": "<p>the type of the allocation doesn't matter for valtrees, so if the type impacts the resulting valtrees that's a bug</p>",
        "id": 278153203,
        "sender_full_name": "lcnr",
        "timestamp": 1649333109
    },
    {
        "content": "<p>e.g. if you have</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">W</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">static</span> <span class=\"p\">[</span><span class=\"n\">Foo</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">Foo</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">)]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">P</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">static</span> <span class=\"p\">[</span><span class=\"n\">Foo</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">Foo</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)];</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 278153320,
        "sender_full_name": "lcnr",
        "timestamp": 1649333167
    },
    {
        "content": "<p>the valtrees for <code>W</code> and <code>P</code> should unify</p>",
        "id": 278153328,
        "sender_full_name": "lcnr",
        "timestamp": 1649333175
    },
    {
        "content": "<p>even though their allocations had different types</p>",
        "id": 278153346,
        "sender_full_name": "lcnr",
        "timestamp": 1649333186
    },
    {
        "content": "<p>yeaaa... that is a big hack in <code>const_deref</code></p>",
        "id": 278159732,
        "sender_full_name": "oli",
        "timestamp": 1649336279
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/ed6c958ee4bf081deec951996ace9c508360c1d9/compiler/rustc_const_eval/src/const_eval/mod.rs#L199\">https://github.com/rust-lang/rust/blob/ed6c958ee4bf081deec951996ace9c508360c1d9/compiler/rustc_const_eval/src/const_eval/mod.rs#L199</a></p>",
        "id": 278159938,
        "sender_full_name": "oli",
        "timestamp": 1649336374
    },
    {
        "content": "<p><code>deref_const</code> is never called in <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> s examples and the hack there might still be a problem, but there isn't actually a problem with the types in those examples. I didn't realize that we create two valtrees in <code>const P: &amp;'static [Foo] = &amp;[Foo(1, 2)];</code> and got ICEs during the first <code>const_to_valtree</code> call. In the second call we do actually get the slice type:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"err\">├─┐</span><span class=\"n\">rustc_const_eval</span>::<span class=\"n\">const_eval</span>::<span class=\"n\">valtrees</span>::<span class=\"n\">const_to_valtree</span><span class=\"w\"> </span><span class=\"n\">param_env</span><span class=\"o\">=</span><span class=\"n\">ParamEnv</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">caller_bounds</span>: <span class=\"p\">[],</span><span class=\"w\"> </span><span class=\"n\">reveal</span>: <span class=\"nc\">UserFacing</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">constness</span>: <span class=\"nc\">Const</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">raw</span><span class=\"o\">=</span><span class=\"n\">ConstAlloc</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">alloc_id</span>: <span class=\"nc\">alloc1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ty</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"n\">Foo</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The same holds für <code>const W</code>.</p>",
        "id": 278191413,
        "sender_full_name": "BN",
        "timestamp": 1649349210
    },
    {
        "content": "<p>We need to create a <code>VariantIdx</code> from the <code>ScalarInt</code> that is in a <code>Leaf</code> in the valtree -&gt; const value conversion. For the variant in <code>ty::Adt</code> we currently use <code>ty::ValTree::Leaf(ScalarInt::from(variant.as_u32()))</code> during valtree construction, so  a <code>try_to_machine_usize</code> call on the <code>ScalarInt</code> in that <code>Leaf</code> fails on some machines. There is no way to create a <code>ScalarInt</code> from <code>usize</code>. Is there some other way to read the integer from <code>ScalarInt</code> besides <code>try_to_machine_usize</code>?</p>",
        "id": 278404045,
        "sender_full_name": "BN",
        "timestamp": 1649502815
    },
    {
        "content": "<p>You could cast to u64 first, that'll always hold all possible values</p>",
        "id": 278413384,
        "sender_full_name": "oli",
        "timestamp": 1649515485
    },
    {
        "content": "<p>But afaict the problem is the <code>size</code> value of the <code>ScalarInt</code>, which depends on the <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_middle/ty/consts/int.rs.html#242\"><code>from</code></a> call we use to create that <code>ScalarInt</code> and which <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_middle/ty/consts/int.rs.html#237-239\"><code>try_to_machine_usize</code></a> <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_middle/ty/consts/int.rs.html#228\">requires</a> to be the same as the <code>pointer_size</code> of the machine. So I think we would need to create the <code>ScalarInt</code> from a <code>usize</code> (but there isn't a <code>from</code> implementation for that for whatever reason) and everything else would result in platform-dependent problems afaict.</p>",
        "id": 278471205,
        "sender_full_name": "BN",
        "timestamp": 1649601117
    },
    {
        "content": "<p>remember that machine_usize != <code>usize</code></p>",
        "id": 278472432,
        "sender_full_name": "RalfJ",
        "timestamp": 1649602594
    },
    {
        "content": "<p><code>usize</code> might be 32bit and machine_usize 64bit</p>",
        "id": 278472440,
        "sender_full_name": "RalfJ",
        "timestamp": 1649602612
    },
    {
        "content": "<p>when you are on a 32bit host cross-compiling for a 64bit target</p>",
        "id": 278472444,
        "sender_full_name": "RalfJ",
        "timestamp": 1649602624
    },
    {
        "content": "<p>ok thanks, that explains why <code>From&lt;usize&gt;</code> isn't implemented.  I still don't know how to handle the problem though. If we use <code>from_u64</code> to create the <code>ScalarInt</code>, then use <code>try_to_machine_usize</code> when reading from the <code>ScalarInt</code> on a 32-bit machine the call will fail.</p>",
        "id": 278525100,
        "sender_full_name": "BN",
        "timestamp": 1649667517
    },
    {
        "content": "<p>You'll want to use <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.ScalarInt.html#method.try_from_uint\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.ScalarInt.html#method.try_from_uint</a> with <code>tcx.data_layout.pointer_size</code>, this will error if your usize is too large for <code>usize</code> on the target</p>",
        "id": 278533795,
        "sender_full_name": "oli",
        "timestamp": 1649672702
    },
    {
        "content": "<p>I am confused, what even is it you want to do?</p>\n<blockquote>\n<p>in ty::Adt we currently use ty::ValTree::Leaf(ScalarInt::from(variant.as_u32())) during valtree construction, so a try_to_machine_usize call on the ScalarInt in that Leaf fails on some machines</p>\n</blockquote>\n<p>Yeah, it should be <code>u32</code> then and not <code>machine_usize</code>. so that's wrong with using <code>to_u32</code> as the existing code does?</p>",
        "id": 278543485,
        "sender_full_name": "RalfJ",
        "timestamp": 1649678936
    },
    {
        "content": "<p><code>VariantIdx</code> seems to always be 32bit, no matter the host or target</p>",
        "id": 278543615,
        "sender_full_name": "RalfJ",
        "timestamp": 1649679007
    },
    {
        "content": "<p>so, there shouldn't me any usize involved anywhere here. what am I missing?</p>",
        "id": 278543636,
        "sender_full_name": "RalfJ",
        "timestamp": 1649679017
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/278533795\">said</a>:</p>\n<blockquote>\n<p>You'll want to use <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.ScalarInt.html#method.try_from_uint\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.ScalarInt.html#method.try_from_uint</a> with <code>tcx.data_layout.pointer_size</code>, this will error if your usize is too large for <code>usize</code> on the target</p>\n</blockquote>\n<p>thanks</p>",
        "id": 278571863,
        "sender_full_name": "BN",
        "timestamp": 1649691144
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/278543636\">said</a>:</p>\n<blockquote>\n<p>so, there shouldn't me any usize involved anywhere here. what am I missing?</p>\n</blockquote>\n<p>The problem was that I needed to get some uint type out of <code>ScalarInt</code> and the only way to do that is <code>try_to_machine_usize</code> afaict (or is there some other way?), which requires the target pointer size to match the size of the type with which the <code>ScalarInt</code> was created with the existing <code>From</code> implementations.  But <code>try_from_uint</code> works since you can manually supply a pointer size, so everything's good now^^</p>",
        "id": 278572187,
        "sender_full_name": "BN",
        "timestamp": 1649691287
    },
    {
        "content": "<p><code>ScalarInt</code> should just have <code>try_to_u32</code> then</p>",
        "id": 278578875,
        "sender_full_name": "RalfJ",
        "timestamp": 1649694135
    },
    {
        "content": "<p><code>Scalar</code> has all these helper methods, we probably were just too lazy to add them to <code>ScalarInt</code></p>",
        "id": 278578899,
        "sender_full_name": "RalfJ",
        "timestamp": 1649694149
    },
    {
        "content": "<p>so ignore which methods exist. the important part is figuring out what the size of your <code>ScalarInt</code> is. Is it a machine usize or a u32?</p>",
        "id": 278578985,
        "sender_full_name": "RalfJ",
        "timestamp": 1649694184
    },
    {
        "content": "<p>if its a u32 you cannot use <code>to_machine_usize</code> for hopefully obvious reasons ;)</p>",
        "id": 278579004,
        "sender_full_name": "RalfJ",
        "timestamp": 1649694201
    },
    {
        "content": "<p>I've opened a <a href=\"https://github.com/rust-lang/rust/pull/95976\">PR</a> for the valtree -&gt; constvalue conversion functionality. Wasn't really sure about the checks we need to perform there, so there might still be quite a bit to work on here.</p>",
        "id": 278692420,
        "sender_full_name": "BN",
        "timestamp": 1649770165
    }
]