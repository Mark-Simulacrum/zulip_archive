[
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"3805\">@project-const-generics</span> </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">foo</span>::<span class=\"o\">&lt;</span><span class=\"n\">main</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>currently errors with</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0747]: constant provided when a type was expected\n --&gt; src/main.rs:4:11\n  |\n4 |     foo::&lt;main&gt;()\n  |           ^^^^\n\nerror: aborting due to previous error\n</code></pre></div>\n<p>it's probably good to add a help message here explaining that the type of functions cannot by named directly. Anyone interested in adding that?</p>",
        "id": 235405616,
        "sender_full_name": "lcnr",
        "timestamp": 1618948781
    },
    {
        "content": "<blockquote>\n<p>it's probably good to add a help message here explaining that the type of functions cannot by named directly</p>\n</blockquote>\n<p>Do you think it's likely a user is trying to do that? I think maybe it'd be better to emphasise that <code>main</code> is a specific function, not a type.</p>",
        "id": 235418541,
        "sender_full_name": "varkor",
        "timestamp": 1618953556
    },
    {
        "content": "<p>i am not sure, i've seen this tried in a bug report before <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 235419803,
        "sender_full_name": "lcnr",
        "timestamp": 1618954155
    },
    {
        "content": "<p>\"<code>main</code> is a specific function, not a type.\" that's kind of wrong though, like i guess it's the tradeoff between being 100% correct and being helpful</p>",
        "id": 235419920,
        "sender_full_name": "lcnr",
        "timestamp": 1618954210
    },
    {
        "content": "<p>I've wanted to do that before...avoiding needing extra space to store a function pointer and all.</p>",
        "id": 235420016,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1618954269
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/function.20object.20ty.2Fconst.20mismatch/near/235419920\">said</a>:</p>\n<blockquote>\n<p>\"<code>main</code> is a specific function, not a type.\" that's kind of wrong though, like i guess it's the tradeoff between being 100% correct and being helpful</p>\n</blockquote>\n<p>It's a hard balance to get right.</p>",
        "id": 235423146,
        "sender_full_name": "varkor",
        "timestamp": 1618956038
    },
    {
        "content": "<p>hm maybe just saying that the identifier for a function is a const not a type?</p>",
        "id": 235558536,
        "sender_full_name": "jknodt",
        "timestamp": 1619029552
    },
    {
        "content": "<p>How about \"expected a type\" with a note \"<code>main</code> is a function\".</p>",
        "id": 235628456,
        "sender_full_name": "Hameer Abbasi",
        "timestamp": 1619074799
    },
    {
        "content": "<p>Or just keep the current error message and add a note.</p>",
        "id": 235629255,
        "sender_full_name": "Hameer Abbasi",
        "timestamp": 1619074985
    },
    {
        "content": "<p>Is there any way to name the type of <code>main</code>?</p>",
        "id": 235629851,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619075152
    },
    {
        "content": "<p>Well, I guess this is mentioned in <span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> 's first message. How about a second note \"<a href=\"https://doc.rust-lang.org/reference/types/function-item.html\">function item types</a> cannot by named directly\"</p>",
        "id": 235630168,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619075288
    },
    {
        "content": "<p>that seems kinda nice, so something like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0747</span><span class=\"p\">]</span>: <span class=\"nc\">constant</span><span class=\"w\"> </span><span class=\"n\">provided</span><span class=\"w\"> </span><span class=\"n\">when</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">was</span><span class=\"w\"> </span><span class=\"n\">expected</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">src</span><span class=\"o\">/</span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">4</span>:<span class=\"mi\">11</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"n\">foo</span>::<span class=\"o\">&lt;</span><span class=\"n\">main</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\">           </span><span class=\"o\">^^^^</span><span class=\"w\"></span>\n<span class=\"n\">help</span>: <span class=\"err\">`</span><span class=\"n\">main</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">item</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"k\">type</span>\n<span class=\"nc\">help</span>: <span class=\"nc\">function</span><span class=\"w\"> </span><span class=\"n\">item</span><span class=\"w\"> </span><span class=\"n\">types</span><span class=\"w\"> </span><span class=\"n\">cannot</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">named</span><span class=\"w\"> </span><span class=\"n\">directly</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 235888623,
        "sender_full_name": "lcnr",
        "timestamp": 1619202946
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_typeck/src/astconv/generics.rs#L24-L132\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_typeck/src/astconv/generics.rs#L24-L132</a></p>\n<p>Is this where the error is emitted? What should I match against here? :D</p>",
        "id": 235940465,
        "sender_full_name": "Hameer Abbasi",
        "timestamp": 1619238419
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256313\">Hameer Abbasi</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/function.20object.20ty.2Fconst.20mismatch/near/235940465\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_typeck/src/astconv/generics.rs#L24-L132\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_typeck/src/astconv/generics.rs#L24-L132</a></p>\n<p>Is this where the error is emitted? What should I match against here? :D</p>\n</blockquote>\n<p><span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span> this is where the message is emitted, yes</p>",
        "id": 235949947,
        "sender_full_name": "lcnr",
        "timestamp": 1619249561
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/a7aba58e9684175c5c5dfef8277c95ebc43f904a/compiler/rustc_typeck/src/astconv/generics.rs#L61-L113\">https://github.com/rust-lang/rust/blob/a7aba58e9684175c5c5dfef8277c95ebc43f904a/compiler/rustc_typeck/src/astconv/generics.rs#L61-L113</a></p>\n<p>in this match:</p>",
        "id": 235950004,
        "sender_full_name": "lcnr",
        "timestamp": 1619249612
    },
    {
        "content": "<p>you want to check that:</p>",
        "id": 235950006,
        "sender_full_name": "lcnr",
        "timestamp": 1619249618
    },
    {
        "content": "<ul>\n<li>the current generic param is a type parameter</li>\n</ul>",
        "id": 235950059,
        "sender_full_name": "lcnr",
        "timestamp": 1619249655
    },
    {
        "content": "<ul>\n<li>the generic argument as a const arg which is just a single function item</li>\n</ul>",
        "id": 235950124,
        "sender_full_name": "lcnr",
        "timestamp": 1619249758
    },
    {
        "content": "<p>the first point is fairly straightforward, the second one is more difficult</p>",
        "id": 235950171,
        "sender_full_name": "lcnr",
        "timestamp": 1619249782
    },
    {
        "content": "<p>soo: if the generic argument as a const arg, you have a <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/hir/struct.ConstArg.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/hir/struct.ConstArg.html</a></p>",
        "id": 235950183,
        "sender_full_name": "lcnr",
        "timestamp": 1619249809
    },
    {
        "content": "<p>you can now get the hir for the body of that const arg using <code>tcx.hir().body(value.body)</code></p>",
        "id": 235950210,
        "sender_full_name": "lcnr",
        "timestamp": 1619249880
    },
    {
        "content": "<p>and then match on <code>body.value.kind</code> to check if it is both a <code>ExprKind::Path</code>, with an inner <code>QPath::Resolved(_, path)</code> on which you can now match similar to what we're doing in that branch <a href=\"https://github.com/rust-lang/rust/blob/a7aba58e9684175c5c5dfef8277c95ebc43f904a/compiler/rustc_typeck/src/astconv/generics.rs#L62-L67\">https://github.com/rust-lang/rust/blob/a7aba58e9684175c5c5dfef8277c95ebc43f904a/compiler/rustc_typeck/src/astconv/generics.rs#L62-L67</a></p>",
        "id": 235950375,
        "sender_full_name": "lcnr",
        "timestamp": 1619250086
    },
    {
        "content": "<p>as you need to actually look inside of the <code>hir::AnonConst</code> this is a bit more cumbersome than the \"expected const, found ty\" case</p>",
        "id": 235950430,
        "sender_full_name": "lcnr",
        "timestamp": 1619250132
    },
    {
        "content": "<p>the <code>Res</code> you're searching for is <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/def/enum.Res.html#variant.Def\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/def/enum.Res.html#variant.Def</a> <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/def/enum.DefKind.html#variant.Fn\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/def/enum.DefKind.html#variant.Fn</a></p>",
        "id": 235950481,
        "sender_full_name": "lcnr",
        "timestamp": 1619250225
    },
    {
        "content": "<p>PR underway, just making sure I didn't go completely bonkers. :)</p>",
        "id": 235971316,
        "sender_full_name": "Hameer Abbasi",
        "timestamp": 1619272128
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/84520\">#84520</a> is ready for review. :)</p>",
        "id": 236046622,
        "sender_full_name": "Hameer Abbasi",
        "timestamp": 1619336515
    }
]