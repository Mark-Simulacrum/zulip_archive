[
    {
        "content": "<p>In the following snippet, the trait declaration of <code>MyTrait</code> will complain about <code>K + 1</code> </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">PhantomConstU64</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">U</span>: <span class=\"kt\">u64</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">MyTrait</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">K</span>: <span class=\"kt\">u64</span><span class=\"o\">&gt;</span>: <span class=\"nc\">PhantomConstU64</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"n\">K</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Now, this makes sense, after all, the (I think?) equivalent type code is</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">PhantomConstU64</span><span class=\"o\">&lt;</span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">SomeStruct</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">std</span>::<span class=\"n\">fmt</span>::<span class=\"n\">Debug</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">MyTrait</span><span class=\"o\">&lt;</span><span class=\"n\">K</span><span class=\"o\">&gt;</span>: <span class=\"nc\">PhantomConstU64</span><span class=\"o\">&lt;</span><span class=\"n\">SomeStruct</span><span class=\"o\">&lt;</span><span class=\"n\">K</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>which fails to compile because <code>K</code> does not have a <code>Debug</code> bound, which is easy to add. But <code>where</code> bounds require any users to prove <code>{K + 1}</code> (or <code>Debug</code>) with their own where bounds instead of just having <code>MyTrait</code> automatically prove and require <code>{K + 1}</code></p>\n<p>So... getting back to my original issue, I want to unify multiple const generic bounds in a single named thing so during bubbling I don't have to re-specify it at every level</p>",
        "id": 225984529,
        "sender_full_name": "oli",
        "timestamp": 1613047653
    },
    {
        "content": "<p>so the solution here is to add a const evaluatable bound for <code>K + 1</code> to <code>MyTrait</code>?</p>",
        "id": 225985218,
        "sender_full_name": "lcnr",
        "timestamp": 1613048056
    },
    {
        "content": "<p>am i understanding you correctly here?</p>",
        "id": 225985229,
        "sender_full_name": "lcnr",
        "timestamp": 1613048065
    },
    {
        "content": "<p>well... that is not a solution, as that is equivalent to adding a <code>where [(); K + 1]: ,</code> bound, and will still require you to specify it whenever you use <code>MyTrait</code></p>",
        "id": 225985277,
        "sender_full_name": "oli",
        "timestamp": 1613048111
    },
    {
        "content": "<p>I'm not sure going via traits is the solution here at all</p>",
        "id": 225985298,
        "sender_full_name": "oli",
        "timestamp": 1613048127
    },
    {
        "content": "<p>but if it were, we'd also need to change it for types</p>",
        "id": 225985315,
        "sender_full_name": "oli",
        "timestamp": 1613048140
    },
    {
        "content": "<p>don't want to allow something that isn't allowed by typenum already without heavily involving T-lang</p>",
        "id": 225985341,
        "sender_full_name": "oli",
        "timestamp": 1613048161
    },
    {
        "content": "<p>then I am a bit confused</p>",
        "id": 225985444,
        "sender_full_name": "lcnr",
        "timestamp": 1613048209
    },
    {
        "content": "<p>ok.. let me start from the beginning</p>",
        "id": 225985496,
        "sender_full_name": "oli",
        "timestamp": 1613048239
    },
    {
        "content": "<p>I have <code>fn foo&lt;const K: usize&gt;() where [(); K + 1]: , [(); K - 1]: , { ... code goes here ...}</code>. But since everything calling <code>foo</code> needs to prove <code>K + 1</code> and <code>K - 1</code> I need to keep adding those bounds in every caller to <code>foo</code>. What I want is to have a single bound that says <code>K + 1</code> works and <code>K - 1</code> works. Ideally a \"named\" bound. Traits seemed like the obvious go-to candidate for these, but I couldn't tell how to do that properly, but maybe associated consts are the solution?</p>",
        "id": 225985762,
        "sender_full_name": "oli",
        "timestamp": 1613048405
    },
    {
        "content": "<p>i expect this to work:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(const_evaluatable_checked, const_generics)]</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">C</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">K</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">C</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"o\">&gt;</span>: <span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">C</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"o\">&gt;</span>: <span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">K</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">K</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">C</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"o\">&gt;</span>: <span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">C</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"o\">&gt;</span>: <span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"p\">()</span>: <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 225986293,
        "sender_full_name": "lcnr",
        "timestamp": 1613048736
    },
    {
        "content": "<p>i think i know why it doesn't work rn</p>",
        "id": 225986312,
        "sender_full_name": "lcnr",
        "timestamp": 1613048752
    },
    {
        "content": "<p>my initial thought was wrong</p>",
        "id": 225986594,
        "sender_full_name": "lcnr",
        "timestamp": 1613048908
    },
    {
        "content": "<p>ok, so i need to look a bit into the difference between <code>super_predicates_of</code> and <code>predicates_of</code></p>",
        "id": 225987051,
        "sender_full_name": "lcnr",
        "timestamp": 1613049146
    },
    {
        "content": "<p>and expect that we want to add <code>ConstEvaluatable</code> predicates to <code>super_predicates_of</code> as well</p>",
        "id": 225987078,
        "sender_full_name": "lcnr",
        "timestamp": 1613049165
    },
    {
        "content": "<p>at which point my example should work</p>",
        "id": 225987108,
        "sender_full_name": "lcnr",
        "timestamp": 1613049183
    },
    {
        "content": "<p>well... The following example with types instead of const generics also fails. Again, I think that it's equivalent, but I may be misinterpreting things.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">C</span><span class=\"o\">&lt;</span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">K</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">K</span>: <span class=\"nc\">std</span>::<span class=\"n\">fmt</span>::<span class=\"n\">Debug</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">K</span>: <span class=\"nc\">std</span>::<span class=\"n\">fmt</span>::<span class=\"n\">Display</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">K</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">K</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">K</span>: <span class=\"nc\">std</span>::<span class=\"n\">fmt</span>::<span class=\"n\">Debug</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">K</span>: <span class=\"nc\">std</span>::<span class=\"n\">fmt</span>::<span class=\"n\">Display</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"p\">()</span>: <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"nc\">N</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"fm\">unimplemented!</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">std</span>::<span class=\"n\">fmt</span>::<span class=\"n\">Debug</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// `N: Debug` is not satisfied</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">z</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">std</span>::<span class=\"n\">fmt</span>::<span class=\"n\">Display</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 225987841,
        "sender_full_name": "oli",
        "timestamp": 1613049520
    },
    {
        "content": "<p>So... I'm not sure why this is not done in the type based example, but if there's a reason for it, then the equivalent thing in const generics may be unsound</p>",
        "id": 225987947,
        "sender_full_name": "oli",
        "timestamp": 1613049575
    },
    {
        "content": "<p>if/when we add const-evaluatable-checked requirements for associated constants, we could make <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=7e5446814741baee6d8ce168cbace6cd\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=7e5446814741baee6d8ce168cbace6cd</a> work</p>",
        "id": 225988338,
        "sender_full_name": "oli",
        "timestamp": 1613049736
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/super.20traits.20are.20not.20considered.20for.20const.20evaluatable.20bounds/near/225987947\">said</a>:</p>\n<blockquote>\n<p>So... I'm not sure why this is not done in the type based example, but if there's a reason for it, then the equivalent thing in const generics may be unsound</p>\n</blockquote>\n<p>neither do i <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> i always thought this works</p>",
        "id": 225988346,
        "sender_full_name": "lcnr",
        "timestamp": 1613049739
    },
    {
        "content": "<p>does it only elaborate supertraits?</p>",
        "id": 225988449,
        "sender_full_name": "lcnr",
        "timestamp": 1613049801
    },
    {
        "content": "<p>yea</p>",
        "id": 225988484,
        "sender_full_name": "oli",
        "timestamp": 1613049818
    },
    {
        "content": "<p>if we could do <code>trait Foo&lt;const K: usize&gt;: {K + 1}</code> or something weird like that, then everything would fall in place (at least the way my brain is currently interpreting things)</p>",
        "id": 225988659,
        "sender_full_name": "oli",
        "timestamp": 1613049887
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/super.20traits.20are.20not.20considered.20for.20const.20evaluatable.20bounds/near/225987947\">said</a>:</p>\n<blockquote>\n<p>So... I'm not sure why this is not done in the type based example, but if there's a reason for it, then the equivalent thing in const generics may be unsound</p>\n</blockquote>\n<p>afaict this was done to prevent cycle errors, not because it would be unsound</p>",
        "id": 225990521,
        "sender_full_name": "lcnr",
        "timestamp": 1613050715
    },
    {
        "content": "<p>but it is unfortunate because being able to elaborate const evaluatable bounds seems really desirable to me</p>",
        "id": 225990621,
        "sender_full_name": "lcnr",
        "timestamp": 1613050781
    },
    {
        "content": "<p>well, what I think is entirely uncontroversial is to walk the super predicates to find all const evaluatable bounds</p>",
        "id": 225994491,
        "sender_full_name": "oli",
        "timestamp": 1613052297
    },
    {
        "content": "<p>but exposing them in a way that just having the trait bound will also put these const evaluatable bounds in scope requires some more thought</p>",
        "id": 225994622,
        "sender_full_name": "oli",
        "timestamp": 1613052342
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/super.20traits.20are.20not.20considered.20for.20const.20evaluatable.20bounds/near/225994491\">said</a>:</p>\n<blockquote>\n<p>well, what I think is entirely uncontroversial is to walk the super predicates to find all const evaluatable bounds</p>\n</blockquote>\n<p>that means we want like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">ConstEvaluatable</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">ConstEvaluatable</span><span class=\"o\">&lt;</span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 225994653,
        "sender_full_name": "lcnr",
        "timestamp": 1613052355
    },
    {
        "content": "<p>i think</p>",
        "id": 225994667,
        "sender_full_name": "lcnr",
        "timestamp": 1613052360
    },
    {
        "content": "<p>at least for now</p>",
        "id": 225994776,
        "sender_full_name": "lcnr",
        "timestamp": 1613052381
    },
    {
        "content": "<blockquote>\n<p>that means we want like</p>\n</blockquote>\n<p>uh, more words please. Not sure what you're trying to tell me with that code snippet</p>",
        "id": 225994890,
        "sender_full_name": "oli",
        "timestamp": 1613052442
    },
    {
        "content": "<p>to have const evaluatable bounds in the super traits</p>",
        "id": 225995073,
        "sender_full_name": "lcnr",
        "timestamp": 1613052514
    },
    {
        "content": "<p>we need a trait with a const param</p>",
        "id": 225995086,
        "sender_full_name": "lcnr",
        "timestamp": 1613052523
    },
    {
        "content": "<p>ah, yes</p>",
        "id": 225995107,
        "sender_full_name": "oli",
        "timestamp": 1613052534
    },
    {
        "content": "<p>which is kinda annoying ^^</p>",
        "id": 225995124,
        "sender_full_name": "lcnr",
        "timestamp": 1613052543
    },
    {
        "content": "<p>it is ^^</p>",
        "id": 225995155,
        "sender_full_name": "oli",
        "timestamp": 1613052552
    },
    {
        "content": "<p>I have needed <code>struct ConstU64&lt;const U: U64&gt;;</code> quite a few times already, but never considered the trait equivalent. We have a similar issue for lifetimes on <code>impl Trait</code> return types</p>",
        "id": 225995351,
        "sender_full_name": "oli",
        "timestamp": 1613052631
    },
    {
        "content": "<p>where just adding another trait with lifetime bounds can fix some problems</p>",
        "id": 225995399,
        "sender_full_name": "oli",
        "timestamp": 1613052647
    },
    {
        "content": "<p><code>trait Captures&lt;'a&gt;</code></p>",
        "id": 225995413,
        "sender_full_name": "lcnr",
        "timestamp": 1613052653
    },
    {
        "content": "<p>that one</p>",
        "id": 225995419,
        "sender_full_name": "oli",
        "timestamp": 1613052656
    },
    {
        "content": "<p>So adding one for const evaluatable makes sense, but having <code>ConstEvaluatable&lt;{K + 1}&gt;</code> everywhere is quite a mouth full</p>",
        "id": 225995574,
        "sender_full_name": "oli",
        "timestamp": 1613052716
    },
    {
        "content": "<p>yeah, also we need a new one for every possible type</p>",
        "id": 225995654,
        "sender_full_name": "lcnr",
        "timestamp": 1613052736
    },
    {
        "content": "<p>also we can't really make it generic over the const type (due to the structural-match problem)</p>",
        "id": 225995658,
        "sender_full_name": "oli",
        "timestamp": 1613052739
    },
    {
        "content": "<p>haha yea that</p>",
        "id": 225995664,
        "sender_full_name": "oli",
        "timestamp": 1613052741
    },
    {
        "content": "<p>^^</p>",
        "id": 225995672,
        "sender_full_name": "lcnr",
        "timestamp": 1613052744
    },
    {
        "content": "<p>unless we quickly go ahead and work on generic const param types</p>",
        "id": 225995700,
        "sender_full_name": "lcnr",
        "timestamp": 1613052763
    },
    {
        "content": "<p><code>struct ConstNum&lt;T, const N: T&gt;</code><br>\none day<span aria-label=\"tm\" class=\"emoji emoji-2122\" role=\"img\" title=\"tm\">:tm:</span></p>",
        "id": 225995726,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1613052773
    },
    {
        "content": "<p>I won't promise anything, but that sounds like a reasonable project for me to do next month. <em>puts it on the maybe-do list</em></p>",
        "id": 225995819,
        "sender_full_name": "oli",
        "timestamp": 1613052814
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/super.20traits.20are.20not.20considered.20for.20const.20evaluatable.20bounds/near/225995819\">said</a>:</p>\n<blockquote>\n<p>I won't promise anything, but that sounds like a reasonable project for me to do next month. <em>puts it on the maybe-do list</em></p>\n</blockquote>\n<p>generic param types?</p>",
        "id": 225995934,
        "sender_full_name": "lcnr",
        "timestamp": 1613052854
    },
    {
        "content": "<p>yea</p>",
        "id": 225995947,
        "sender_full_name": "oli",
        "timestamp": 1613052858
    },
    {
        "content": "<p>well. lots and lots of structural-match refactorings to be more precise</p>",
        "id": 225995985,
        "sender_full_name": "oli",
        "timestamp": 1613052874
    },
    {
        "content": "<p>-&gt; <a href=\"https://github.com/rust-lang/project-const-generics/pull/3\">https://github.com/rust-lang/project-const-generics/pull/3</a></p>",
        "id": 225995992,
        "sender_full_name": "lcnr",
        "timestamp": 1613052875
    },
    {
        "content": "<p>did you already look at <code>WithOptConstParam</code> before?</p>",
        "id": 225996052,
        "sender_full_name": "lcnr",
        "timestamp": 1613052907
    },
    {
        "content": "<p>Oh, I don't care about the design <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span> I want to finish value trees so all of this is not built on top of a card house</p>",
        "id": 225996094,
        "sender_full_name": "oli",
        "timestamp": 1613052934
    },
    {
        "content": "<p>yeah, val trees will be great <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 225996140,
        "sender_full_name": "lcnr",
        "timestamp": 1613052954
    }
]