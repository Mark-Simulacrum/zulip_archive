[
    {
        "content": "<p>I was looking at the <a href=\"https://hackmd.io/VOaGjRYsSXW4PR_VNwQmSQ?both#Version-A-Evaluatable\">vision doc</a> and I dont think we have any way to write something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(const_generics, const_evaluatable_checked)]</span><span class=\"w\"></span>\n<span class=\"c1\">// no implicit `ConstEvaluatable(N - 1)` pls</span>\n<span class=\"k\">fn</span> <span class=\"nf\">try_split_off</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">arr</span>: <span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]),</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"k\">loop</span><span class=\"w\"> </span><span class=\"p\">{};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Err</span><span class=\"p\">(())</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">arr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">try_split_off</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">).</span><span class=\"n\">unwrap_err</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 240236453,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1621970313
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error[E0080]: evaluation of constant value failed\n --&gt; src/main.rs:3:64\n  |\n3 | fn split_off&lt;T, const N: usize&gt;(arr: [T; N]) -&gt; Result&lt;(T, [T; N - 1]), ()&gt; {\n  |                                                                ^^^^^ attempt to compute `0_usize - 1_usize`, which would overflow\n\nerror[E0599]: no method named `unwrap_err` found for enum `Result&lt;(_, [_; _]), ()&gt;` in the current scope\n  --&gt; src/main.rs:12:20\n   |\n12 |     split_off(arr).unwrap_err();\n   |                    ^^^^^^^^^^ method cannot be called on `Result&lt;(_, [_; _]), ()&gt;` due to unsatisfied trait bounds\n\nerror: aborting due to 2 previous errors; 3 warnings emitted\n</code></pre></div>\n<p>these error messages sure are something too ^^\"</p>",
        "id": 240236906,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1621970529
    },
    {
        "content": "<p>I guess the first error is <a href=\"https://github.com/rust-lang/rust/issues/81339\">#81339</a></p>",
        "id": 240238692,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1621971352
    },
    {
        "content": "<p>I don't think that type makes any sense. It's not well formed when <code>N = 0</code>. I think what you need instead is a type like <code>if N &gt; 0 { (T, [T; N - 1]) } else { () }</code> which can probably be achieved through traits and associated types</p>",
        "id": 240243784,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621973571
    },
    {
        "content": "<p>oh yeah maybe associated types could get something like this to work <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> it seems a bit boilerplate heavy though heh</p>",
        "id": 240243890,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1621973620
    },
    {
        "content": "<p>ideally the result type would be like, <code>Result&lt;!, ()&gt;</code> when <code>N - 1</code> fails to evaluate <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 240243923,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1621973640
    },
    {
        "content": "<p>thats the behaviour id expect I guess lol</p>",
        "id": 240243987,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1621973658
    },
    {
        "content": "<p>that's the right behavior in this case but I can also imagine wanting <code>()</code> to be the fallback</p>",
        "id": 240244044,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621973689
    },
    {
        "content": "<p>I suppose it could be summarized as <code>if evaluatable!(X) { F&lt;X&gt; } else { G }</code> where <code>F</code> and <code>G</code> are type expressions</p>",
        "id": 240244163,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621973751
    },
    {
        "content": "<p>hmm I guess I could see that yeah</p>",
        "id": 240244164,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1621973752
    },
    {
        "content": "<p>which you might be able to do with a macro</p>",
        "id": 240244220,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621973767
    }
]