[
    {
        "content": "<p>I would like to get inline consts to be typechecked together with their parent body in the near future.</p>\n<p>Either by implementing this myself or, preferably, by mentoring someone else <span aria-label=\"sparkles\" class=\"emoji emoji-2728\" role=\"img\" title=\"sparkles\">:sparkles:</span></p>",
        "id": 238275645,
        "sender_full_name": "lcnr",
        "timestamp": 1620724360
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> are you still interested in working on this?</p>",
        "id": 238275686,
        "sender_full_name": "lcnr",
        "timestamp": 1620724387
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span>, yes I am</p>",
        "id": 238307241,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1620739897
    },
    {
        "content": "<p>I was a bit absent for the last 2/3 weeks but I'm back to work on rustc, so <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 238307296,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1620739917
    },
    {
        "content": "<p>can you explain a bit what's the current status of things, what do we need to accomplish and ideas on how to accomplish it?</p>",
        "id": 238307517,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1620739994
    },
    {
        "content": "<p>the current status is still your original implementation, in which we typecheck inline consts separately with an inference variable as the expected return type and use the resulting type when typechecking their containing body</p>",
        "id": 238317321,
        "sender_full_name": "lcnr",
        "timestamp": 1620743451
    },
    {
        "content": "<p>what i want you to accomplish is getting the following to compile</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"kt\">u32</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 238317826,
        "sender_full_name": "lcnr",
        "timestamp": 1620743640
    },
    {
        "content": "<p>the way to do it is to typeck inline consts together with their parent body by mostly copying what we're doing for closures (i expect)</p>",
        "id": 238318106,
        "sender_full_name": "lcnr",
        "timestamp": 1620743727
    },
    {
        "content": "<p>i haven't looked at the code too deeply so I can't tell you exactly what needs to be done, if you want we can take an hour to talk about this in sync</p>",
        "id": 238318357,
        "sender_full_name": "lcnr",
        "timestamp": 1620743808
    },
    {
        "content": "<p>if you have a rough idea where to start and want to figure this out on your own that's also fine for me, but no matter what you do, feel free to ask whenever you don't know exactly what to do ^^</p>",
        "id": 238318614,
        "sender_full_name": "lcnr",
        "timestamp": 1620743905
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span>, let me see because I'm also doing other things but will definitely ask or sync with you</p>",
        "id": 238319108,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1620744073
    },
    {
        "content": "<p>btw, how urgent is this? or when are you expecting to have a working version of it?</p>",
        "id": 238319150,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1620744089
    },
    {
        "content": "<p>like most things in rust</p>",
        "id": 238319181,
        "sender_full_name": "lcnr",
        "timestamp": 1620744104
    },
    {
        "content": "<p>it would be good to get it done <em>soon</em></p>",
        "id": 238319200,
        "sender_full_name": "lcnr",
        "timestamp": 1620744111
    },
    {
        "content": "<p>but there is no time limit here</p>",
        "id": 238319220,
        "sender_full_name": "lcnr",
        "timestamp": 1620744117
    },
    {
        "content": "<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> if you think that you don't have any time to work on it during the next 30 days it might make sense to let someone else do it</p>",
        "id": 238319452,
        "sender_full_name": "lcnr",
        "timestamp": 1620744191
    },
    {
        "content": "<p>apart from that take your time ^^</p>",
        "id": 238319469,
        "sender_full_name": "lcnr",
        "timestamp": 1620744201
    },
    {
        "content": "<p>yeah, I think I can do it</p>",
        "id": 238326238,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1620746555
    },
    {
        "content": "<p>ah I'd be interested in this</p>",
        "id": 238685858,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620942319
    },
    {
        "content": "<p>I also still want to understasnd the need for that defid-hack and not need it :)</p>",
        "id": 238685881,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620942338
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/inline.20consts.20typeck/near/238685881\">said</a>:</p>\n<blockquote>\n<p>I also still want to understasnd the need for that defid-hack and not need it :)</p>\n</blockquote>\n<p>which defid-hack?</p>",
        "id": 239190448,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1621306037
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.WithOptConstParam.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.WithOptConstParam.html</a></p>",
        "id": 239222646,
        "sender_full_name": "lcnr",
        "timestamp": 1621329642
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span></p>",
        "id": 246884926,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626977422
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 246884948,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626977430
    },
    {
        "content": "<p>OK. so</p>",
        "id": 246884958,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626977435
    },
    {
        "content": "<p>let me skim this thread a bit</p>",
        "id": 246884972,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626977444
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 246885006,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626977467
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/inline.20consts.20typeck/near/238317321\">said</a>:</p>\n<blockquote>\n<p>the current status is still your original implementation, in which we typecheck inline consts separately with an inference variable as the expected return type and use the resulting type when typechecking their containing body</p>\n</blockquote>\n<p>where does this happen in the code?</p>",
        "id": 246885049,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626977485
    },
    {
        "content": "<p>we have also this information that was the write up for the inline consts being one of the blockers of const generics ...</p>",
        "id": 246885068,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626977495
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>## inline consts\n\nCurrent state:\n\nfn test() -&gt; usize {\n    const { 3 }\n}\n\nThe above breaks because `3` is type-checked in its own context, its type defaults to `i32`, and we get compilation errors.\n\n**Proposal:** Inline consts getting typechecked together with their parent is really desirable.\n\ntrait Foo {}\nfn foo&lt;T: Foo&gt;(_: T) {}\nimpl Foo for u32 {}\nimpl Foo for () {}\nfoo(const { 3 });\n\nInline consts should also be able to depend on generic parameters and participate in `ConstEvaluatable` checking.\n\nThis however requires the mir of inline consts. The idea is therefore to typeck them in a similar fashion to closures. Then after typeck we check their evaluatability in a separate query.\n\nThat seems surprisingly straightforward :O\n</code></pre></div>",
        "id": 246885075,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626977499
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/inline.20consts.20typeck/near/246885049\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/inline.20consts.20typeck/near/238317321\">said</a>:</p>\n<blockquote>\n<p>the current status is still your original implementation, in which we typecheck inline consts separately with an inference variable as the expected return type and use the resulting type when typechecking their containing body</p>\n</blockquote>\n<p>where does this happen in the code?</p>\n</blockquote>\n<p>let me see</p>",
        "id": 246885208,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626977562
    },
    {
        "content": "<p>checking this ... <a href=\"https://github.com/rust-lang/rust/pull/77124/commits/85b5ce264324c75eb4c67849bc42de5526ed9208\">https://github.com/rust-lang/rust/pull/77124/commits/85b5ce264324c75eb4c67849bc42de5526ed9208</a></p>",
        "id": 246885220,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626977568
    },
    {
        "content": "<p>let me step back a sec</p>",
        "id": 246885496,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626977713
    },
    {
        "content": "<p>but yeah all it does is let's get the const using existing infrastructure and no much else</p>",
        "id": 246885503,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626977715
    },
    {
        "content": "<p>inline constants, how are they represented in the HIR?</p>",
        "id": 246885511,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626977718
    },
    {
        "content": "<p><code>ExprKind::ConstBlock(AnonConst)</code></p>",
        "id": 246885685,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626977791
    },
    {
        "content": "<p>ok</p>",
        "id": 246885737,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626977824
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/113bd9a349915227c880a938fa305c332cbbbcd4/compiler/rustc_typeck/src/check/expr.rs?plain=1#L290\">https://github.com/rust-lang/rust/blob/113bd9a349915227c880a938fa305c332cbbbcd4/compiler/rustc_typeck/src/check/expr.rs?plain=1#L290</a></p>",
        "id": 246885826,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626977880
    },
    {
        "content": "<p>I wonder how in general, not related to inline consts, how do we type check this kind of things</p>",
        "id": 246885880,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626977887
    },
    {
        "content": "<p>oh, not that</p>",
        "id": 246885894,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626977896
    },
    {
        "content": "<p>like even <code>let x: u32 = expr;</code></p>",
        "id": 246885900,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626977900
    },
    {
        "content": "<p>how do we type check expr with the parent</p>",
        "id": 246885912,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626977911
    },
    {
        "content": "<p>oh,, well, yes that</p>",
        "id": 246885938,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626977932
    },
    {
        "content": "<p>ok so</p>",
        "id": 246885950,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626977935
    },
    {
        "content": "<p>we wind up creating an \"unevaluated\" constant</p>",
        "id": 246886050,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626977990
    },
    {
        "content": "<p>with the def-id</p>",
        "id": 246886122,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626978007
    },
    {
        "content": "<p>yeah</p>",
        "id": 246886159,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626978025
    },
    {
        "content": "<p>I'm thinking</p>",
        "id": 246886201,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626978048
    },
    {
        "content": "<p>I feel like I need to \"zoom out\" a bit to bring enough stuff back in cache here...</p>",
        "id": 246886232,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626978065
    },
    {
        "content": "<p>what <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> was saying earlier about closures feels right to me</p>",
        "id": 246886255,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626978078
    },
    {
        "content": "<p>in principle, closures are distinct functions, but we type check the surrounding function and all of its closures in one inference context</p>",
        "id": 246886282,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626978094
    },
    {
        "content": "<p>this is why you see code like this in the impl of various queries:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"c1\">// Closures' typeck results come from their outermost function,</span>\n<span class=\"w\">    </span><span class=\"c1\">// as they are part of the same \"inference environment\".</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">outer_def_id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">closure_base_def_id</span><span class=\"p\">(</span><span class=\"n\">def_id</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">outer_def_id</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"n\">def_id</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">has_typeck_results</span><span class=\"p\">(</span><span class=\"n\">outer_def_id</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 246886398,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626978133
    },
    {
        "content": "<p>e.g., if we ask for the \"typeck results\" of a closure, it will redirect and instead ask for the typeck results of the closure creator</p>",
        "id": 246886438,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626978152
    },
    {
        "content": "<p>I see</p>",
        "id": 246886450,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626978160
    },
    {
        "content": "<p>makes sense</p>",
        "id": 246886484,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626978185
    },
    {
        "content": "<p>constants work differently</p>",
        "id": 246886502,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626978194
    },
    {
        "content": "<p>at least today</p>",
        "id": 246886516,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626978202
    },
    {
        "content": "<p>but I'm trying to put it all together in my head</p>",
        "id": 246886669,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626978268
    },
    {
        "content": "<p>I guess that for the purposes of typeck, the value of a const expression is irrelevant</p>",
        "id": 246886704,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626978292
    },
    {
        "content": "<p>we oly care about its type</p>",
        "id": 246886708,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626978295
    },
    {
        "content": "<p>so typeck of the const is requested and you fire a typeck of that const with it's parents, which will fire again at some point the typeck of what's inside of the const {} ?</p>",
        "id": 246886725,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626978302
    },
    {
        "content": "<p>that is our goal, basically</p>",
        "id": 246886775,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626978325
    },
    {
        "content": "<p>something like this</p>",
        "id": 246886782,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626978328
    },
    {
        "content": "<p>well don't remember or know that well the code to understand why this doesn't give an infinite loop :P</p>",
        "id": 246886835,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626978359
    },
    {
        "content": "<p>well</p>",
        "id": 246886895,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626978371
    },
    {
        "content": "<p>ok, so, we didn't get too far</p>",
        "id": 246887216,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626978525
    },
    {
        "content": "<p>but that's ok</p>",
        "id": 246887224,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626978528
    },
    {
        "content": "<p>the reason that it doesn't give a cycle though is this</p>",
        "id": 246887237,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626978533
    },
    {
        "content": "<p>you have something like</p>\n<div class=\"codehilite\"><pre><span></span><code>Typeck(Closure) calls Typeck(Owner)\n    Typeck(Owner) executes typeck_impl(owner) to create the typeck results R\n    the results R contain also the results for the closure\n</code></pre></div>",
        "id": 246887339,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626978586
    },
    {
        "content": "<p>the point is that the <code>typeck_impl</code> never calls that query</p>",
        "id": 246887377,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626978599
    },
    {
        "content": "<p>ok</p>",
        "id": 246887483,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626978630
    },
    {
        "content": "<p>we'll have to talk more about it!</p>",
        "id": 246887495,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626978636
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/inline.20consts.20typeck/near/246886398\">said</a>:</p>\n<blockquote>\n<p>this is why you see code like this in the impl of various queries:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"c1\">// Closures' typeck results come from their outermost function,</span>\n<span class=\"w\">    </span><span class=\"c1\">// as they are part of the same \"inference environment\".</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">outer_def_id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">closure_base_def_id</span><span class=\"p\">(</span><span class=\"n\">def_id</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">outer_def_id</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"n\">def_id</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">has_typeck_results</span><span class=\"p\">(</span><span class=\"n\">outer_def_id</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>so I guess I can create a test case and try to do this <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>",
        "id": 246887570,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626978673
    },
    {
        "content": "<p>or do you see any complication or something that I may not be seeing?</p>",
        "id": 246887618,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626978692
    },
    {
        "content": "<p>Thanks to the pointer <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span>!</p>\n<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> are you still working on this? I am interested in working on this but would like to avoid duplicating work.</p>",
        "id": 249628364,
        "sender_full_name": "Gary Guo",
        "timestamp": 1629138747
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"303710\">@Gary Guo</span> I didn't do stuff yet, was planning to do so soon</p>",
        "id": 249659758,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1629155033
    },
    {
        "content": "<p>maybe give me one or two more weeks and if I'm not able I may just be able to help you out or just hand the task to you</p>",
        "id": 249659853,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1629155065
    },
    {
        "content": "<p>Cool. You probably want to have <a href=\"https://github.com/rust-lang/rust/issues/88088\">#88088</a> and <a href=\"https://github.com/rust-lang/rust/issues/88090\">#88090</a> applied before starting you work. <a href=\"https://github.com/rust-lang/rust/issues/88018\">#88018</a> might be worth a look but I am uncertain if it'll be helpful if inline consts typeck has to be overhauled anyway.</p>",
        "id": 249661095,
        "sender_full_name": "Gary Guo",
        "timestamp": 1629156178
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"303710\">@Gary Guo</span> I ended not having time for this and in particular focusing on some other things, please go ahead if you still want and also please mention me on PRs :)</p>",
        "id": 255270963,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1632852771
    },
    {
        "content": "<p>Ok, I'll have a try</p>",
        "id": 255271047,
        "sender_full_name": "Gary Guo",
        "timestamp": 1632852804
    },
    {
        "content": "<p>This is way more complex than I anticipated, but I am making some progress :)</p>",
        "id": 255660140,
        "sender_full_name": "Gary Guo",
        "timestamp": 1633041532
    },
    {
        "content": "<p>The hard part is to give a sensible result for <code>type_of</code>. Days of experiments show that we cannot simply use the type from typeck (i.e. via <code>tcx.typeck(def).node_type(hir)</code>), because this screws up lifetimes.</p>",
        "id": 255660330,
        "sender_full_name": "Gary Guo",
        "timestamp": 1633041641
    },
    {
        "content": "<p>Since node_type has lifetime erased, it couldn't be used for type_of (which expects unerased lifetimes). What should the <code>type_of</code> return for the constant if the type is <code>&amp;‘a T</code>, <code>&amp;'a &amp;'a T</code> or <code>&amp;'a &amp;'b T</code>? We could iterate through all lifetimes and convert them to fresh lifetime parameters and add them to <code>generics_of</code> of the constant, but this could easily go wrong.</p>",
        "id": 255660737,
        "sender_full_name": "Gary Guo",
        "timestamp": 1633041881
    },
    {
        "content": "<p>So I am currently prototyping an approach where the <code>generics_of</code> of the constant gives<code>&lt;'l0...'li, T0...Tj, R&gt;</code> where <code>'l0...'li, T0...Tj</code> are inherited from the scope, and <code>R</code> is the return type. This is similar to closure which is modelled as <code>&lt;'l0...'li, T0...Tj, CK, CS, U&gt;</code> where the closure return type is encoded in CS as a generic argument.</p>",
        "id": 255660983,
        "sender_full_name": "Gary Guo",
        "timestamp": 1633042002
    },
    {
        "content": "<p>This means calling <code>type_of</code> of an inline const will simply give <code>R</code>, and its up to the use site to specify what <code>R</code> actually is, just like how <code>CS</code> is specified at use-site for closures.</p>",
        "id": 255661178,
        "sender_full_name": "Gary Guo",
        "timestamp": 1633042100
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"303710\">Gary Guo</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/inline.20consts.20typeck/near/255660330\">said</a>:</p>\n<blockquote>\n<p>The hard part is to give a sensible result for <code>type_of</code>. Days of experiments show that we cannot simply use the type from typeck (i.e. via <code>tcx.typeck(def).node_type(hir)</code>), because this screws up lifetimes.</p>\n</blockquote>\n<p>when do we care about the regions returned by <code>type_of</code>? <em>edit: didn't fully think this comment through</em></p>",
        "id": 255887758,
        "sender_full_name": "lcnr",
        "timestamp": 1633198114
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"303710\">Gary Guo</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/inline.20consts.20typeck/near/255661178\">said</a>:</p>\n<blockquote>\n<p>This means calling <code>type_of</code> of an inline const will simply give <code>R</code>, and its up to the use site to specify what <code>R</code> actually is, just like how <code>CS</code> is specified at use-site for closures.</p>\n</blockquote>\n<p>that does seem like a good solution afaict, though it is less trivial than i hoped it would be, probably makes sense to talk with <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> about this. i would have otherwise felt able to review all of this by myself ^^</p>",
        "id": 255887899,
        "sender_full_name": "lcnr",
        "timestamp": 1633198271
    },
    {
        "content": "<p><code>type_of</code> is itself being used by a lot of places in type checking, inference, trait selection, etc, and these need to know about actual regions. There are also places where it doesn't care about actual regions.</p>\n<p>So strictly speaking it's not necessary to allow a call on inline const DefId, and an early prototype I have <code>bug!</code> when <code>type_of</code> is being called on inline consts,  but then I find that I have to change all code that's unrelated to implementing inline cons that calls <code>type_of</code> and doesn't expect an actual region to use <code>typeck().node_type()</code> and it's such a pain. An another alternative is to just return erased regions from <code>type_of</code> for inline consts, but I am not comfortable with the idea because it might introduce subtle errors (and it'll be very awkward that <code>type_of</code> returns actual regions for all other defs but not inline const)</p>",
        "id": 255902020,
        "sender_full_name": "Gary Guo",
        "timestamp": 1633212583
    },
    {
        "content": "<p>I actually went pretty far before coming up with the extra generic param idea with the <code>bug!</code> and <code>typeck().node_type()</code> approach, but then it stops working across crates (because typeck works on LocalDefIds only). I then came up with the extra generic param and ditched the old approach altogether.</p>",
        "id": 255902654,
        "sender_full_name": "Gary Guo",
        "timestamp": 1633213215
    }
]