[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(lazy_normalization_consts)]</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[();</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span>: <span class=\"kt\">u32</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"p\">}]</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Box</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">std</span>::<span class=\"n\">iter</span>::<span class=\"n\">empty</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>causes</p>\n<div class=\"codehilite\"><pre><span></span><code>warning: cannot use constants which depend on generic parameters in types\n --&gt; src/lib.rs:4:16\n  |\n4 | fn foo&lt;T&gt;() -&gt; Box&lt;dyn Iterator&lt;Item = [(); { |x: u32| x; 4 }]&gt;&gt; {\n  |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |\n  = note: `#[warn(const_evaluatable_unchecked)]` on by default\n  = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n  = note: for more information, see issue #76200 &lt;https://github.com/rust-lang/rust/issues/76200&gt;\n</code></pre></div>",
        "id": 223774505,
        "sender_full_name": "lcnr",
        "timestamp": 1611434806
    },
    {
        "content": "<p>because the inner closure has <code>T</code> in its substs</p>",
        "id": 223774519,
        "sender_full_name": "lcnr",
        "timestamp": 1611434827
    },
    {
        "content": "<p>we probably want to look into closures during <code>AbstractConst</code> building</p>",
        "id": 223774583,
        "sender_full_name": "lcnr",
        "timestamp": 1611434917
    },
    {
        "content": "<p>or much rather, at the start of <code>AbstractConst</code> building to exit early with <code>Ok(None)</code> if we don't use any generic param.</p>",
        "id": 223774601,
        "sender_full_name": "lcnr",
        "timestamp": 1611434962
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"124288\">@oli</span></p>",
        "id": 223774602,
        "sender_full_name": "lcnr",
        "timestamp": 1611434965
    },
    {
        "content": "<p>on stable</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span>: <span class=\"kt\">u32</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"p\">}];</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 223899008,
        "sender_full_name": "lcnr",
        "timestamp": 1611582619
    },
    {
        "content": "<p>its kind of weird that we/I use lazy norm to actually just mean \"supplying the parent generics\" here</p>",
        "id": 223899080,
        "sender_full_name": "lcnr",
        "timestamp": 1611582674
    }
]