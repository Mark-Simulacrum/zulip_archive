[
    {
        "content": "<p>currently anonymous constants don't interact with variance, so the following example compiles</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(const_generics, const_evaluatable_checked)]</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">size_of</span>::<span class=\"o\">&lt;&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">]</span>: <span class=\"nb\">Sized</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">_x</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"nc\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c1\">// covariant over `'a` and `T`</span>\n<span class=\"w\">    </span><span class=\"n\">_y</span>: <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">size_of</span>::<span class=\"o\">&lt;&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">],</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 224317190,
        "sender_full_name": "lcnr",
        "timestamp": 1611835791
    },
    {
        "content": "<p>i think this is fine because changing lifetimes shouldn't change the result</p>",
        "id": 224317395,
        "sender_full_name": "lcnr",
        "timestamp": 1611835924
    },
    {
        "content": "<p>so the constant really doesn't care about <code>'a</code></p>",
        "id": 224317413,
        "sender_full_name": "lcnr",
        "timestamp": 1611835943
    },
    {
        "content": "<p>or any lifetimes in <code>T</code></p>",
        "id": 224317424,
        "sender_full_name": "lcnr",
        "timestamp": 1611835958
    },
    {
        "content": "<p>is that understanding correct? I panicked a bit here because I thought we would have to somehow deal with variance</p>",
        "id": 224317574,
        "sender_full_name": "lcnr",
        "timestamp": 1611836077
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"121053\">@varkor</span></p>",
        "id": 224317586,
        "sender_full_name": "lcnr",
        "timestamp": 1611836082
    },
    {
        "content": "<p>As far as I understand it, there isn't an issue because lifetimes don't affect the constant, yes.</p>",
        "id": 224411891,
        "sender_full_name": "varkor",
        "timestamp": 1611878299
    }
]