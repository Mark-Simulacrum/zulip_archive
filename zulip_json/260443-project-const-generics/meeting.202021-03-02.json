[
    {
        "content": "<p>I want to take the next meeting to talk about stuff we can stabilize without depending on lazy norm</p>",
        "id": 227911562,
        "sender_full_name": "lcnr",
        "timestamp": 1614337317
    },
    {
        "content": "<p>also, <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> do you want to discuss alternatives to <code>WithOptConstParam</code> that meeting?</p>",
        "id": 227911748,
        "sender_full_name": "lcnr",
        "timestamp": 1614337435
    },
    {
        "content": "<p>notes: <a href=\"https://hackmd.io/Qsf0f8fHRjW099Q8960psQ\">https://hackmd.io/Qsf0f8fHRjW099Q8960psQ</a></p>",
        "id": 227914777,
        "sender_full_name": "lcnr",
        "timestamp": 1614339151
    },
    {
        "content": "<p>sounds good, but I have to actually hav a proposal, I suppose</p>",
        "id": 227986131,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614370449
    },
    {
        "content": "<p>would be useful ^^</p>",
        "id": 227991263,
        "sender_full_name": "lcnr",
        "timestamp": 1614372478
    },
    {
        "content": "<p>i currently have a rough idea for work in progress query results which can be created and accessed while inside of a query</p>",
        "id": 227991360,
        "sender_full_name": "lcnr",
        "timestamp": 1614372505
    },
    {
        "content": "<p>which should be able to replace <code>WithOptConstParam</code></p>",
        "id": 227991403,
        "sender_full_name": "lcnr",
        "timestamp": 1614372532
    },
    {
        "content": "<p>but is slightly more complex <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> and i am not sure how to extend that for generic const param types</p>",
        "id": 227991469,
        "sender_full_name": "lcnr",
        "timestamp": 1614372554
    },
    {
        "content": "<p>so it might not be work it</p>",
        "id": 227991497,
        "sender_full_name": "lcnr",
        "timestamp": 1614372562
    },
    {
        "content": "<p>s/work/worth</p>",
        "id": 228004975,
        "sender_full_name": "lcnr",
        "timestamp": 1614378256
    },
    {
        "content": "<p>hi <span class=\"user-group-mention\" data-user-group-id=\"3805\">@project-const-generics</span> meeting in ~10 min</p>",
        "id": 228429659,
        "sender_full_name": "lcnr",
        "timestamp": 1614699284
    },
    {
        "content": "<p>okay, i guess it's meeting time everybody <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 228431602,
        "sender_full_name": "lcnr",
        "timestamp": 1614699947
    },
    {
        "content": "<p>howdy</p>",
        "id": 228431720,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614699974
    },
    {
        "content": "<p>hewwo everyone</p>",
        "id": 228431733,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614699978
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> were you able to prepare something?</p>",
        "id": 228431837,
        "sender_full_name": "lcnr",
        "timestamp": 1614700019
    },
    {
        "content": "<p>No, but I'm game to talk about it</p>",
        "id": 228431888,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614700034
    },
    {
        "content": "<p>hm, let's start with the other part of this meeting then</p>",
        "id": 228431950,
        "sender_full_name": "lcnr",
        "timestamp": 1614700057
    },
    {
        "content": "<p>OK. Sorry, very busy weeks</p>",
        "id": 228431988,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614700072
    },
    {
        "content": "<p>think there's more to do there</p>",
        "id": 228432004,
        "sender_full_name": "lcnr",
        "timestamp": 1614700077
    },
    {
        "content": "<p>is this the notes in the hackmd?</p>",
        "id": 228432142,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614700109
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-03-02/near/227914777\">said</a>:</p>\n<blockquote>\n<p>notes: <a href=\"https://hackmd.io/Qsf0f8fHRjW099Q8960psQ\">https://hackmd.io/Qsf0f8fHRjW099Q8960psQ</a></p>\n</blockquote>\n<p>once again, going through this</p>",
        "id": 228432156,
        "sender_full_name": "lcnr",
        "timestamp": 1614700113
    },
    {
        "content": "<p>even after we finished the impl work for the current lazy norm issues</p>",
        "id": 228432246,
        "sender_full_name": "lcnr",
        "timestamp": 1614700146
    },
    {
        "content": "<p>i still want to keep it unstable for a few versions</p>",
        "id": 228432287,
        "sender_full_name": "lcnr",
        "timestamp": 1614700155
    },
    {
        "content": "<p>cause it seems like a backcompat minefield</p>",
        "id": 228432313,
        "sender_full_name": "lcnr",
        "timestamp": 1614700164
    },
    {
        "content": "<p>so it makes sense to figure out what we can do in the meantime <span aria-label=\"sparkles\" class=\"emoji emoji-2728\" role=\"img\" title=\"sparkles\">:sparkles:</span></p>",
        "id": 228432374,
        "sender_full_name": "lcnr",
        "timestamp": 1614700185
    },
    {
        "content": "<p>hmm i see there are some topics i've not caught up on</p>",
        "id": 228432387,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614700190
    },
    {
        "content": "<p>i'm curious to know what came out from <a class=\"stream-topic\" data-stream-id=\"260443\" href=\"/#narrow/stream/260443-project-const-generics/topic/lazy.20norm.20unused.20substs\">#project-const-generics &gt; lazy norm unused substs</a> etc</p>",
        "id": 228432408,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614700201
    },
    {
        "content": "<p>just a few sentences would do :)</p>",
        "id": 228432486,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614700213
    },
    {
        "content": "<p>not much yet, i have a slightly better idea on how i am going to implement this</p>",
        "id": 228432508,
        "sender_full_name": "lcnr",
        "timestamp": 1614700221
    },
    {
        "content": "<p>will take some time this weekend</p>",
        "id": 228432549,
        "sender_full_name": "lcnr",
        "timestamp": 1614700233
    },
    {
        "content": "<p>ok, still a \"work in progress\"</p>",
        "id": 228432558,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614700238
    },
    {
        "content": "<p>yeah</p>",
        "id": 228432569,
        "sender_full_name": "lcnr",
        "timestamp": 1614700242
    },
    {
        "content": "<p>i think we can actually do this without modifying hir lowering</p>",
        "id": 228432582,
        "sender_full_name": "lcnr",
        "timestamp": 1614700251
    },
    {
        "content": "<p>which is really nice</p>",
        "id": 228432600,
        "sender_full_name": "lcnr",
        "timestamp": 1614700255
    },
    {
        "content": "<p>\"this\" = the unused subs work?</p>",
        "id": 228432683,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614700284
    },
    {
        "content": "<p>jup</p>",
        "id": 228432712,
        "sender_full_name": "lcnr",
        "timestamp": 1614700297
    },
    {
        "content": "<p>the unused substs work</p>",
        "id": 228432730,
        "sender_full_name": "lcnr",
        "timestamp": 1614700303
    },
    {
        "content": "<p>if it's ok with you I'm going to mark those topics as read</p>",
        "id": 228432737,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614700305
    },
    {
        "content": "<p><span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 228432750,
        "sender_full_name": "lcnr",
        "timestamp": 1614700311
    },
    {
        "content": "<p>and rely on you to tell me if there's any questions i can help with:)</p>",
        "id": 228432757,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614700317
    },
    {
        "content": "<p>ok, let's carry on then</p>",
        "id": 228432798,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614700323
    },
    {
        "content": "<blockquote>\n<ul>\n<li>loosen the ty/const param ordering restriction</li>\n<li>const param defaults<br>\n     - const evaluatable bounds?<br>\n      - start out by not supplying any generic params?</li>\n</ul>\n</blockquote>",
        "id": 228432909,
        "sender_full_name": "lcnr",
        "timestamp": 1614700360
    },
    {
        "content": "<p>not supplying any params could lead to backwards compat issues right?</p>",
        "id": 228432996,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614700398
    },
    {
        "content": "<p>yes</p>",
        "id": 228433037,
        "sender_full_name": "lcnr",
        "timestamp": 1614700421
    },
    {
        "content": "<p>the same backcompat issues we already have for array lengths and other const args</p>",
        "id": 228433079,
        "sender_full_name": "lcnr",
        "timestamp": 1614700435
    },
    {
        "content": "<p>so i don't think that's a big concern</p>",
        "id": 228433149,
        "sender_full_name": "lcnr",
        "timestamp": 1614700449
    },
    {
        "content": "<p>i guess the question is whether we do want to allow <code>struct Foo&lt;const N: usize, const M: usize = N&gt;</code></p>",
        "id": 228433212,
        "sender_full_name": "lcnr",
        "timestamp": 1614700472
    },
    {
        "content": "<p>when you ask that do you mean like, immediately, or like eventually?</p>",
        "id": 228433279,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614700499
    },
    {
        "content": "<p>and how much t-lang input is needed here</p>",
        "id": 228433292,
        "sender_full_name": "lcnr",
        "timestamp": 1614700502
    },
    {
        "content": "<p>immediately</p>",
        "id": 228433307,
        "sender_full_name": "lcnr",
        "timestamp": 1614700506
    },
    {
        "content": "<p>i would like to stabilize this in the next few months</p>",
        "id": 228433365,
        "sender_full_name": "lcnr",
        "timestamp": 1614700520
    },
    {
        "content": "<p>allowing const M: usize = N would mean we have to supply generics right?</p>",
        "id": 228433400,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614700533
    },
    {
        "content": "<p>and want to figure out what exactly we want to stabilize here</p>",
        "id": 228433413,
        "sender_full_name": "lcnr",
        "timestamp": 1614700536
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"326176\">Boxy</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-03-02/near/228433400\">said</a>:</p>\n<blockquote>\n<p>allowing const M: usize = N would mean we have to supply generics right?</p>\n</blockquote>\n<p>^^</p>",
        "id": 228433430,
        "sender_full_name": "lcnr",
        "timestamp": 1614700542
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-03-02/near/228433079\">said</a>:</p>\n<blockquote>\n<p>the same backcompat issues we already have for array lengths and other const args</p>\n</blockquote>\n<p>can you spell this out for me a bit?</p>",
        "id": 228433458,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614700550
    },
    {
        "content": "<blockquote>\n<p>allowing const M: usize = N would mean we have to supply generics right?</p>\n</blockquote>\n<p>nah, we can use the same hack we already use for const args rn.</p>",
        "id": 228433615,
        "sender_full_name": "lcnr",
        "timestamp": 1614700589
    },
    {
        "content": "<blockquote>\n<p>can you spell this out for me a bit?</p>\n</blockquote>\n<p>introducing predicates can change type inference</p>",
        "id": 228433670,
        "sender_full_name": "lcnr",
        "timestamp": 1614700607
    },
    {
        "content": "<p>the <code>u8: Trait</code> and <code>u8::ASSOC</code> example</p>",
        "id": 228433703,
        "sender_full_name": "lcnr",
        "timestamp": 1614700620
    },
    {
        "content": "<p>ok.</p>",
        "id": 228433823,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614700657
    },
    {
        "content": "<p>ok, I see</p>",
        "id": 228433873,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614700679
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-03-02/near/228433615\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>allowing const M: usize = N would mean we have to supply generics right?</p>\n</blockquote>\n<p>nah, we can use the same hack we already use for const args rn.</p>\n</blockquote>\n<p>what hack is this?</p>",
        "id": 228433950,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614700693
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-03-02/near/228433703\">said</a>:</p>\n<blockquote>\n<p>the <code>u8: Trait</code> and <code>u8::ASSOC</code> example</p>\n</blockquote>\n<p>Can you paste in the example?</p>",
        "id": 228434026,
        "sender_full_name": "Hameer Abbasi",
        "timestamp": 1614700725
    },
    {
        "content": "<blockquote>\n<p>what hack is this?</p>\n</blockquote>\n<p>will answer that after the meeting cause it's a bit more complicated</p>",
        "id": 228434028,
        "sender_full_name": "lcnr",
        "timestamp": 1614700725
    },
    {
        "content": "<p>okay :)</p>",
        "id": 228434045,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614700729
    },
    {
        "content": "<p>remind me if i forget</p>",
        "id": 228434049,
        "sender_full_name": "lcnr",
        "timestamp": 1614700731
    },
    {
        "content": "<p>sure</p>",
        "id": 228434064,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614700736
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">ASSOC_CONST</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// `u8::ASSOC_CONST` is resolved today, but will be ambiguous</span>\n<span class=\"c1\">// under lazy normalization.</span>\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"p\">[(</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"kt\">u8</span>::<span class=\"n\">ASSOC_CONST</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kt\">u8</span>: <span class=\"nc\">Trait</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"o\">&lt;</span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">todo!</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 228434177,
        "sender_full_name": "lcnr",
        "timestamp": 1614700774
    },
    {
        "content": "<p>so the example with defaults would be something like</p>",
        "id": 228434473,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614700866
    },
    {
        "content": "<p><code>const M: usize = u8::ASSOC_CONST</code></p>",
        "id": 228434510,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614700876
    },
    {
        "content": "<p>yeah</p>",
        "id": 228434518,
        "sender_full_name": "lcnr",
        "timestamp": 1614700880
    },
    {
        "content": "<p>i don't actually know how parsing works for const param defaults</p>",
        "id": 228434560,
        "sender_full_name": "lcnr",
        "timestamp": 1614700899
    },
    {
        "content": "<p>so you might need braces here</p>",
        "id": 228434571,
        "sender_full_name": "lcnr",
        "timestamp": 1614700905
    },
    {
        "content": "<p>why did the \"loosen the ty/const param ordering restriction\" restriction exist again?</p>",
        "id": 228434573,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614700906
    },
    {
        "content": "<p>because we originally assumed type params to come first in a few places</p>",
        "id": 228434630,
        "sender_full_name": "lcnr",
        "timestamp": 1614700923
    },
    {
        "content": "<p>so there were some ICE when loosening it</p>",
        "id": 228434691,
        "sender_full_name": "lcnr",
        "timestamp": 1614700934
    },
    {
        "content": "<p>i see</p>",
        "id": 228434705,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614700938
    },
    {
        "content": "<p>so this was just a matter of refactoring the compiler, nothing deeper</p>",
        "id": 228434725,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614700944
    },
    {
        "content": "<blockquote>\n<p>just a matter</p>\n</blockquote>\n<p><span aria-label=\"flushed\" class=\"emoji emoji-1f633\" role=\"img\" title=\"flushed\">:flushed:</span></p>",
        "id": 228434787,
        "sender_full_name": "Hameer Abbasi",
        "timestamp": 1614700963
    },
    {
        "content": "<p>by accident a saw a recent discussion on internals about this</p>",
        "id": 228434789,
        "sender_full_name": "lcnr",
        "timestamp": 1614700963
    },
    {
        "content": "<p><a href=\"https://internals.rust-lang.org/t/const-generics-and-defaults/14138/23\">https://internals.rust-lang.org/t/const-generics-and-defaults/14138/23</a> this?</p>",
        "id": 228434879,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614700983
    },
    {
        "content": "<p>yeah, there it was proposed that keeping the ordering restriction is useful</p>",
        "id": 228434982,
        "sender_full_name": "lcnr",
        "timestamp": 1614701012
    },
    {
        "content": "<p>I'm not sure what makes it useful</p>",
        "id": 228435110,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614701045
    },
    {
        "content": "<p>i also don't think it improves readability by much</p>",
        "id": 228435166,
        "sender_full_name": "lcnr",
        "timestamp": 1614701060
    },
    {
        "content": "<p>which i think is their argument</p>",
        "id": 228435176,
        "sender_full_name": "lcnr",
        "timestamp": 1614701064
    },
    {
        "content": "<p>I'd kind of argue the opposite</p>",
        "id": 228435183,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614701068
    },
    {
        "content": "<p>however</p>",
        "id": 228435228,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614701082
    },
    {
        "content": "<p>I have a question, what is the ordering of lifetimes w/r/t types/generics planned to be?</p>",
        "id": 228435278,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614701100
    },
    {
        "content": "<p>I think in my ideal world, everything would be interchangeable</p>",
        "id": 228435322,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614701111
    },
    {
        "content": "<p>rn it's lt, then consts and types</p>",
        "id": 228435330,
        "sender_full_name": "lcnr",
        "timestamp": 1614701114
    },
    {
        "content": "<p>ok</p>",
        "id": 228435356,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614701120
    },
    {
        "content": "<p>it's sort of orthogonal</p>",
        "id": 228435395,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614701131
    },
    {
        "content": "<p>yeah ^^ i think that keeping lt first can be helpful</p>",
        "id": 228435438,
        "sender_full_name": "lcnr",
        "timestamp": 1614701147
    },
    {
        "content": "<p>or at least it's not detrimental</p>",
        "id": 228435456,
        "sender_full_name": "lcnr",
        "timestamp": 1614701154
    },
    {
        "content": "<p>they feel sufficiently different to me</p>",
        "id": 228435476,
        "sender_full_name": "lcnr",
        "timestamp": 1614701162
    },
    {
        "content": "<p>if we want consts to be explicit we could mandate wrapping in {}</p>",
        "id": 228435530,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614701169
    },
    {
        "content": "<p>foo&lt;T, {T}&gt;</p>",
        "id": 228435586,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614701190
    },
    {
        "content": "<p>(if theres any parsing issues)</p>",
        "id": 228435642,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614701217
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-03-02/near/228435438\">said</a>:</p>\n<blockquote>\n<p>yeah ^^ i think that keeping lt first can be helpful</p>\n</blockquote>\n<p>for now it's fine</p>",
        "id": 228435684,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614701230
    },
    {
        "content": "<p>do you think just having a stabilization report is enough here for t-lang?</p>",
        "id": 228435751,
        "sender_full_name": "lcnr",
        "timestamp": 1614701255
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"326176\">Boxy</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-03-02/near/228435530\">said</a>:</p>\n<blockquote>\n<p>if we want consts to be explicit we could mandate wrapping in {}</p>\n</blockquote>\n<p>I believe that would break BC with <code>min_const_generics</code>.</p>",
        "id": 228435758,
        "sender_full_name": "Hameer Abbasi",
        "timestamp": 1614701257
    },
    {
        "content": "<p>right</p>",
        "id": 228435780,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614701270
    },
    {
        "content": "<p>too late for that rip</p>",
        "id": 228435787,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614701272
    },
    {
        "content": "<p>we already require braces if there is ambiguity</p>",
        "id": 228435799,
        "sender_full_name": "lcnr",
        "timestamp": 1614701276
    },
    {
        "content": "<p>the big example is <code>const N: ()</code></p>",
        "id": 228435852,
        "sender_full_name": "lcnr",
        "timestamp": 1614701287
    },
    {
        "content": "<p>which is part of why we didn't stabilize it together with the other builtin types</p>",
        "id": 228435915,
        "sender_full_name": "lcnr",
        "timestamp": 1614701301
    },
    {
        "content": "<p><code>foo::&lt;()&gt;</code> currently always resolves <code>()</code> to a type</p>",
        "id": 228435952,
        "sender_full_name": "lcnr",
        "timestamp": 1614701316
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-03-02/near/228435751\">said</a>:</p>\n<blockquote>\n<p>do you think just having a stabilization report is enough here for t-lang?</p>\n</blockquote>\n<p>for those two items? yes, I expect so.</p>",
        "id": 228436032,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614701347
    },
    {
        "content": "<p>nice <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 228436082,
        "sender_full_name": "lcnr",
        "timestamp": 1614701363
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-03-02/near/228435915\">said</a>:</p>\n<blockquote>\n<p>which is part of why we didn't stabilize it together with the other builtin types</p>\n</blockquote>\n<p>this doesn't seem like a big problem</p>",
        "id": 228436100,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614701371
    },
    {
        "content": "<p>it is kind of annoying</p>",
        "id": 228436153,
        "sender_full_name": "lcnr",
        "timestamp": 1614701394
    },
    {
        "content": "<p>I guess the first question is why you would expect people to have unit constants :)</p>",
        "id": 228436232,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614701411
    },
    {
        "content": "<ul>\n<li><code>_</code> as array len and const argument<br>\n    - rn always gets interpreted as a type<br>\n    - add <code>hir::GenericArg::Infer</code><br>\n    - should we go ahead and solve this for paths/unit(<code>()</code>) at the same time?</li>\n</ul>",
        "id": 228436252,
        "sender_full_name": "lcnr",
        "timestamp": 1614701416
    },
    {
        "content": "<blockquote>\n<ul>\n<li>should we go ahead and solve this for paths/unit(()) at the same time?</li>\n</ul>\n</blockquote>",
        "id": 228436267,
        "sender_full_name": "lcnr",
        "timestamp": 1614701422
    },
    {
        "content": "<p>something worth covering in the stability report would be the back-compat implications, and what we are deciding</p>",
        "id": 228436296,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614701431
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-03-02/near/228436232\">said</a>:</p>\n<blockquote>\n<p>I guess the first question is why you would expect people to have unit constants :)</p>\n</blockquote>\n<p>because they write compiler tests</p>",
        "id": 228436310,
        "sender_full_name": "lcnr",
        "timestamp": 1614701435
    },
    {
        "content": "<p><span aria-label=\"sparkles\" class=\"emoji emoji-2728\" role=\"img\" title=\"sparkles\">:sparkles:</span></p>",
        "id": 228436349,
        "sender_full_name": "lcnr",
        "timestamp": 1614701456
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-03-02/near/228436232\">said</a>:</p>\n<blockquote>\n<p>I guess the first question is why you would expect people to have unit constants :)</p>\n</blockquote>\n<p>It could turn out to be a generalisation of other cases, potentially. E.g. All tuples.</p>",
        "id": 228436351,
        "sender_full_name": "Hameer Abbasi",
        "timestamp": 1614701456
    },
    {
        "content": "<p>I just don't expect it to come up that much in practice except for generated code</p>",
        "id": 228436420,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614701484
    },
    {
        "content": "<p>that said, it's not hard to imagine us fixing this</p>",
        "id": 228436450,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614701493
    },
    {
        "content": "<p>yeah, i personally add a <code>TyOrConst</code> variant to <code>hir::GenericArg</code></p>",
        "id": 228436586,
        "sender_full_name": "lcnr",
        "timestamp": 1614701547
    },
    {
        "content": "<p>if something is both a valid type and a valid const</p>",
        "id": 228436612,
        "sender_full_name": "lcnr",
        "timestamp": 1614701560
    },
    {
        "content": "<blockquote>\n<p><code>_</code> as array len and const argument</p>\n</blockquote>\n<p>i do think allowing that is really desirable and probably also needs \"just\" a stabilization report</p>",
        "id": 228436726,
        "sender_full_name": "lcnr",
        "timestamp": 1614701606
    },
    {
        "content": "<p>say more about it</p>",
        "id": 228436744,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614701615
    },
    {
        "content": "<p>like, give some examples of what you would expect to stabilize</p>",
        "id": 228436773,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614701628
    },
    {
        "content": "<p>oh also--- I should add-----</p>",
        "id": 228436854,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614701648
    },
    {
        "content": "<p>this is a 'planning meeting' week for lang team</p>",
        "id": 228436872,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614701653
    },
    {
        "content": "<p>I've got some work to do to figure out how to report things, but I'd like us to note some updates for folks</p>",
        "id": 228436902,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614701668
    },
    {
        "content": "<p>(<a href=\"https://blog.rust-lang.org/inside-rust/2021/02/03/lang-team-feb-update.html\">blog post from last month's planning meeting</a>)</p>",
        "id": 228436954,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614701697
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">foo</span>::<span class=\"o\">&lt;</span><span class=\"kt\">u64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"o\">&gt;</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">]);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 228436981,
        "sender_full_name": "lcnr",
        "timestamp": 1614701707
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-03-02/near/228436773\">said</a>:</p>\n<blockquote>\n<p>like, give some examples of what you would expect to stabilize</p>\n</blockquote>\n<p>so like, wherever we allow users to write <code>_</code> instead of a type argument we also allow <code>_</code> instead of a const argument or array length</p>",
        "id": 228437247,
        "sender_full_name": "lcnr",
        "timestamp": 1614701792
    },
    {
        "content": "<p>ok</p>",
        "id": 228437280,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614701803
    },
    {
        "content": "<p>in particular this does not include</p>",
        "id": 228437284,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614701807
    },
    {
        "content": "<p><code>const T: [u64; _] = [1, 2, 3]</code>?</p>",
        "id": 228437307,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614701816
    },
    {
        "content": "<p>yes, that's separate <em>and not included</em></p>",
        "id": 228437362,
        "sender_full_name": "lcnr",
        "timestamp": 1614701832
    },
    {
        "content": "<p>and slightly more contentious</p>",
        "id": 228437385,
        "sender_full_name": "lcnr",
        "timestamp": 1614701840
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 228437412,
        "sender_full_name": "lcnr",
        "timestamp": 1614701853
    },
    {
        "content": "<p>OK</p>",
        "id": 228437564,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614701889
    },
    {
        "content": "<p>And I can see why a similar refactoring mgiht permit <code>()</code> to work</p>",
        "id": 228437622,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614701899
    },
    {
        "content": "<p>is this a hir-lowering time thing?</p>",
        "id": 228437651,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614701904
    },
    {
        "content": "<p><a href=\"https://hackmd.io/JNh7ltdLTpq-nbARUctHoA\">planning meeting agenda doc i just created</a></p>",
        "id": 228437720,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614701917
    },
    {
        "content": "<p>I'm taking a few notes in there</p>",
        "id": 228437734,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614701920
    },
    {
        "content": "<p>I still have to iron out the process here</p>",
        "id": 228437748,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614701923
    },
    {
        "content": "<p>yeah, we currently have to decide whether something is a type or const argument during hir building</p>",
        "id": 228437795,
        "sender_full_name": "lcnr",
        "timestamp": 1614701932
    },
    {
        "content": "<p>(or we actually have to do so when building the ast, but convert some types to constants when building hir depending on name resolution)</p>",
        "id": 228437982,
        "sender_full_name": "lcnr",
        "timestamp": 1614701967
    },
    {
        "content": "<p>it seems like this could be a problem with GATs</p>",
        "id": 228438046,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614701978
    },
    {
        "content": "<p>e.g., <code>T::Foo&lt;()&gt;</code></p>",
        "id": 228438088,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614701987
    },
    {
        "content": "<p>what's the issue here?</p>",
        "id": 228438234,
        "sender_full_name": "lcnr",
        "timestamp": 1614702030
    },
    {
        "content": "<p>right now, at least, we handle the resolution of <code>T::Foo</code> during type checking</p>",
        "id": 228438273,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614702050
    },
    {
        "content": "<p>in the HIR, we just lower it to a \"type relative path\"</p>",
        "id": 228438295,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614702060
    },
    {
        "content": "<p>so we would not know yet what kinds of arguments <code>Foo</code> expects</p>",
        "id": 228438404,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614702086
    },
    {
        "content": "<p>as we do not know what trait it comes from</p>",
        "id": 228438412,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614702092
    },
    {
        "content": "<p>I am not sure how this works with defaults-- I guess it's a moot point, we never accept defaults in that position probably</p>",
        "id": 228438450,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614702109
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-03-02/near/228437795\">said</a>:</p>\n<blockquote>\n<p>yeah, we currently have to decide whether something is a type or const argument during hir building</p>\n</blockquote>\n<p>ah, we decide this without knowing how it is used</p>",
        "id": 228438455,
        "sender_full_name": "lcnr",
        "timestamp": 1614702110
    },
    {
        "content": "<p>so, the whole point of the <code>()</code> and <code>_</code> change, I would expect, is to change that?</p>",
        "id": 228438535,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614702129
    },
    {
        "content": "<p>so i don't think that <code>T::Foo</code> is a huge concern here</p>",
        "id": 228438558,
        "sender_full_name": "lcnr",
        "timestamp": 1614702137
    },
    {
        "content": "<p>i.e., those could play either role</p>",
        "id": 228438589,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614702147
    },
    {
        "content": "<p>my goal is to keep this ambiguous until we're actually in <code>ast_ty_to_ty</code></p>",
        "id": 228438639,
        "sender_full_name": "lcnr",
        "timestamp": 1614702169
    },
    {
        "content": "<p>side note that if we accept <code>()</code> I would probably expect to accept any tuple</p>",
        "id": 228438643,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614702172
    },
    {
        "content": "<p>ok, that should be fine. So we <em>don't</em> decide during HIR lowering</p>",
        "id": 228438678,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614702186
    },
    {
        "content": "<p>but rather during type collection</p>",
        "id": 228438702,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614702191
    },
    {
        "content": "<p>yeah, hopefully keeping stuff ambiguous doesn't end up being too much of a hack</p>",
        "id": 228438784,
        "sender_full_name": "lcnr",
        "timestamp": 1614702232
    },
    {
        "content": "<p>have to check if there are any potentially worrying hir visitors</p>",
        "id": 228438886,
        "sender_full_name": "lcnr",
        "timestamp": 1614702252
    },
    {
        "content": "<p>const generics is turning out to be the feature of  \"we should delay doing X\"</p>",
        "id": 228438890,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614702253
    },
    {
        "content": "<p><span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 228438895,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614702255
    },
    {
        "content": "<p>having more information makes a lot of stuff much easier ^^</p>",
        "id": 228438955,
        "sender_full_name": "lcnr",
        "timestamp": 1614702280
    },
    {
        "content": "<ul>\n<li>const param types<br>\n    - without val trees<br>\n        - c like enums? seems quite helpful and should already work<br>\n    - val trees <span aria-label=\"sparkles\" class=\"emoji emoji-2728\" role=\"img\" title=\"sparkles\">:sparkles:</span> <br>\n    - generic param types<br>\n        - requires changes to <code>WithOptConstParam</code><br>\n    - what types are allowed? <br>\n        - structural match<br>\n        - do we require explicit opt in? <a href=\"https://github.com/rust-lang/project-const-generics/issues/6\">pcg issue</a></li>\n</ul>",
        "id": 228439105,
        "sender_full_name": "lcnr",
        "timestamp": 1614702345
    },
    {
        "content": "<p>were you planning to \"special case\" <code>()</code>?</p>",
        "id": 228439108,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614702346
    },
    {
        "content": "<p>i was considering it</p>",
        "id": 228439179,
        "sender_full_name": "lcnr",
        "timestamp": 1614702366
    },
    {
        "content": "<p>I'd rather handle tuples altogether; not sure how much harder that would be</p>",
        "id": 228439215,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614702380
    },
    {
        "content": "<p>the <code>()</code> issue would happen for any user defined ZST right?</p>",
        "id": 228439229,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614702387
    },
    {
        "content": "<p>no, not really</p>",
        "id": 228439250,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614702397
    },
    {
        "content": "<p><code>()</code> is not a valid value for a user-defined ZST</p>",
        "id": 228439259,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614702403
    },
    {
        "content": "<p>I mean like</p>",
        "id": 228439279,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614702410
    },
    {
        "content": "<p>those would be defined by a path</p>",
        "id": 228439285,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614702413
    },
    {
        "content": "<p>Foo::&lt;ZST&gt;</p>",
        "id": 228439289,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614702416
    },
    {
        "content": "<p>and we already (presumably) permit paths to play a double role?</p>",
        "id": 228439299,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614702422
    },
    {
        "content": "<p>well, <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> can confirm :)</p>",
        "id": 228439326,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614702428
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-03-02/near/228439299\">said</a>:</p>\n<blockquote>\n<p>and we already (presumably) permit paths to play a double role?</p>\n</blockquote>\n<p>we don't</p>",
        "id": 228439333,
        "sender_full_name": "lcnr",
        "timestamp": 1614702430
    },
    {
        "content": "<p>rn we always interpret paths as a type</p>",
        "id": 228439366,
        "sender_full_name": "lcnr",
        "timestamp": 1614702448
    },
    {
        "content": "<p>if there's ambiguity</p>",
        "id": 228439382,
        "sender_full_name": "lcnr",
        "timestamp": 1614702457
    },
    {
        "content": "<p>ok, so if you have <code>const Z: ZST = ...</code> you can do that</p>",
        "id": 228439418,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614702476
    },
    {
        "content": "<p>but you can't do <code>ZST</code> itself, because it has both a value and a type name?</p>",
        "id": 228439484,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614702486
    },
    {
        "content": "<p>jup</p>",
        "id": 228439503,
        "sender_full_name": "lcnr",
        "timestamp": 1614702495
    },
    {
        "content": "<p>or you use <code>{ ZST }</code></p>",
        "id": 228439528,
        "sender_full_name": "lcnr",
        "timestamp": 1614702500
    },
    {
        "content": "<p>which always works cause <code>ZST</code> is now definitely a value</p>",
        "id": 228439553,
        "sender_full_name": "lcnr",
        "timestamp": 1614702515
    },
    {
        "content": "<p>OK.</p>",
        "id": 228439615,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614702540
    },
    {
        "content": "<p>Would you potentially fix that too?</p>",
        "id": 228439629,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614702544
    },
    {
        "content": "<p>i would like to</p>",
        "id": 228439664,
        "sender_full_name": "lcnr",
        "timestamp": 1614702558
    },
    {
        "content": "<p>I guess min generics doesn't currently permit values of such types anyway</p>",
        "id": 228439675,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614702565
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-03-02/near/228436267\">said</a>:</p>\n<blockquote>\n<blockquote>\n<ul>\n<li>should we go ahead and solve this for paths/unit(()) at the same time?</li>\n</ul>\n</blockquote>\n</blockquote>",
        "id": 228439686,
        "sender_full_name": "lcnr",
        "timestamp": 1614702573
    },
    {
        "content": "<p>I'm trying to take some notes on what we are talking about including in a stabilization report</p>",
        "id": 228439691,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614702574
    },
    {
        "content": "<p>if you didnt special case () would we expect to see code like <code>foo::&lt;{()}&gt;()</code></p>",
        "id": 228439803,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614702606
    },
    {
        "content": "<p>i think <span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> and <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> had <em>some concerns</em> when i tried implementing this about 8 months ago</p>",
        "id": 228439854,
        "sender_full_name": "lcnr",
        "timestamp": 1614702621
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"326176\">Boxy</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-03-02/near/228439803\">said</a>:</p>\n<blockquote>\n<p>if you didnt special case () would we expect to see code like <code>foo::&lt;{()}&gt;()</code></p>\n</blockquote>\n<p>if you can think of a valid reason to use <code>fn foo&lt;const N: ZeroSizedType&gt;</code></p>",
        "id": 228439941,
        "sender_full_name": "lcnr",
        "timestamp": 1614702654
    },
    {
        "content": "<p>mmm</p>",
        "id": 228439992,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614702670
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-03-02/near/228439854\">said</a>:</p>\n<blockquote>\n<p>i think <span class=\"user-mention silent\" data-user-id=\"121053\">varkor</span> and <span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> had <em>some concerns</em> when i tried implementing this about 8 months ago</p>\n</blockquote>\n<p>to me, it doesn't seem like high priority</p>",
        "id": 228440001,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614702675
    },
    {
        "content": "<p>not that i'm opposed :)</p>",
        "id": 228440156,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614702734
    },
    {
        "content": "<p>i can think of reasons to want <code>fn foo&lt;T, const V: T&gt;</code> to work for ZSTs, but that is likely a much further ways off</p>",
        "id": 228440179,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1614702740
    },
    {
        "content": "<p>if it's annoying you when writing unit tests, I guess that's ok</p>",
        "id": 228440180,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614702740
    },
    {
        "content": "<p>it's just not something i would expect many users are encountering</p>",
        "id": 228440200,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614702749
    },
    {
        "content": "<p>and I don't think there are any strong back-compat concerns</p>",
        "id": 228440229,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614702762
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-03-02/near/228440229\">said</a>:</p>\n<blockquote>\n<p>and I don't think there are any strong back-compat concerns</p>\n</blockquote>\n<p>jup, i at least can't think of any</p>",
        "id": 228440265,
        "sender_full_name": "lcnr",
        "timestamp": 1614702780
    },
    {
        "content": "<p>If we had const and variadic generics, I'd be writing something in Rust and would need it. Just a data point.</p>",
        "id": 228440330,
        "sender_full_name": "Hameer Abbasi",
        "timestamp": 1614702795
    },
    {
        "content": "<p>there would be if we adopted the approach advocated for in that internals thread</p>",
        "id": 228440339,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614702801
    },
    {
        "content": "<p>since we'd have to know if something is a const expression</p>",
        "id": 228440391,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614702821
    },
    {
        "content": "<p>in order to decide if defaults apply</p>",
        "id": 228440400,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614702826
    },
    {
        "content": "<p>which seems like a horrible idea to me tbh <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 228440484,
        "sender_full_name": "lcnr",
        "timestamp": 1614702846
    },
    {
        "content": "<p>I'd be worried about it</p>",
        "id": 228440559,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614702861
    },
    {
        "content": "<p>I'd rather get away from the ordering restrictions and clever defaults</p>",
        "id": 228440583,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614702871
    },
    {
        "content": "<p>and not embrace them</p>",
        "id": 228440587,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614702873
    },
    {
        "content": "<p>ye</p>",
        "id": 228440606,
        "sender_full_name": "lcnr",
        "timestamp": 1614702881
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-03-02/near/228439105\">said</a>:</p>\n<blockquote>\n<p>const param types</p>\n<ul>\n<li>without val trees<br>\n    - c like enums? seems quite helpful and should already work</li>\n<li>val trees <span aria-label=\"sparkles\" class=\"emoji emoji-2728\" role=\"img\" title=\"sparkles\">:sparkles:</span> </li>\n<li>generic param types<br>\n    - requires changes to <code>WithOptConstParam</code></li>\n<li>what types are allowed? <br>\n    - structural match<br>\n    - do we require explicit opt in? <a href=\"https://github.com/rust-lang/project-const-generics/issues/6\">pcg issue</a></li>\n</ul>\n</blockquote>",
        "id": 228440640,
        "sender_full_name": "lcnr",
        "timestamp": 1614702902
    },
    {
        "content": "<p>ok, yes, can you elaborate what's that</p>",
        "id": 228440705,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614702922
    },
    {
        "content": "<p>so allowing more const param types is not dependent on lazy norm</p>",
        "id": 228440763,
        "sender_full_name": "lcnr",
        "timestamp": 1614702948
    },
    {
        "content": "<p>but is blocked on val trees for most types</p>",
        "id": 228440794,
        "sender_full_name": "lcnr",
        "timestamp": 1614702962
    },
    {
        "content": "<p>which <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> can probably say a bit more about</p>",
        "id": 228440848,
        "sender_full_name": "lcnr",
        "timestamp": 1614702971
    },
    {
        "content": "<p>especially anything that includes references can't really work without it i think</p>",
        "id": 228440889,
        "sender_full_name": "lcnr",
        "timestamp": 1614702990
    },
    {
        "content": "<p>I only have a loose idea what value tree is:)</p>",
        "id": 228441037,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614703042
    },
    {
        "content": "<p>ok I'm starting to understand this bullet list</p>",
        "id": 228441087,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614703061
    },
    {
        "content": "<p>i think <span class=\"user-mention\" data-user-id=\"219696\">@XAMPPRocky</span> is intending to use c like enums in rust-gpu</p>",
        "id": 228441252,
        "sender_full_name": "lcnr",
        "timestamp": 1614703128
    },
    {
        "content": "<p>c-like enums seem obviously useful</p>",
        "id": 228441297,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614703146
    },
    {
        "content": "<p>I've also seen people who work on bevy ask about dataless enums</p>",
        "id": 228441316,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614703150
    },
    {
        "content": "<p>Just a remark on allowing <code>()</code> as const arguments now that I'm here: there's no real motivation specifically for this case, but we should be able to handle it as soon as we handle arbitrary paths and tuples. It's really a consequence of the delayed type/const disambiguation.</p>",
        "id": 228441339,
        "sender_full_name": "varkor",
        "timestamp": 1614703159
    },
    {
        "content": "<p>yeah, so i think implementation wise we're already pretty much ready to stabize c like enums</p>",
        "id": 228441401,
        "sender_full_name": "lcnr",
        "timestamp": 1614703184
    },
    {
        "content": "<p>what's still open is whether <code>derive(PartialEq, Eq)</code> should be enough</p>",
        "id": 228441502,
        "sender_full_name": "lcnr",
        "timestamp": 1614703208
    },
    {
        "content": "<p>the only questions about that is whether we want it to be opt-in as to whether a type is usable as a const generic right?</p>",
        "id": 228441504,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614703209
    },
    {
        "content": "<p>haha</p>",
        "id": 228441513,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614703212
    },
    {
        "content": "<p>allowing types as const parameters adds some additional back compat requirements on these types</p>",
        "id": 228441596,
        "sender_full_name": "lcnr",
        "timestamp": 1614703243
    },
    {
        "content": "<p>and we've already had some discussion about this in <a href=\"https://github.com/rust-lang/project-const-generics/issues/6\">https://github.com/rust-lang/project-const-generics/issues/6</a></p>",
        "id": 228441626,
        "sender_full_name": "lcnr",
        "timestamp": 1614703253
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-03-02/near/228441502\">said</a>:</p>\n<blockquote>\n<p>what's still open is whether <code>derive(PartialEq, Eq)</code> should be enough</p>\n</blockquote>\n<p>say a bit more on this</p>",
        "id": 228441655,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614703267
    },
    {
        "content": "<p>right now</p>",
        "id": 228441692,
        "sender_full_name": "lcnr",
        "timestamp": 1614703280
    },
    {
        "content": "<p>const parameter types must be structural match</p>",
        "id": 228441713,
        "sender_full_name": "lcnr",
        "timestamp": 1614703288
    },
    {
        "content": "<p>which pretty much means that their partial eq implementation agrees with comparing the value of all fields, looking into references</p>",
        "id": 228441853,
        "sender_full_name": "lcnr",
        "timestamp": 1614703337
    },
    {
        "content": "<p>this is related to constants in match too</p>",
        "id": 228441903,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614703355
    },
    {
        "content": "<p>which is how we check equality inside of the type system</p>",
        "id": 228441908,
        "sender_full_name": "lcnr",
        "timestamp": 1614703357
    },
    {
        "content": "<p>I think I saw a thread somewhere about structural match + constants in match</p>",
        "id": 228441934,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614703369
    },
    {
        "content": "<p>i meant to bookmark it because it seemed relevent to this but forgot .-.</p>",
        "id": 228441957,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614703383
    },
    {
        "content": "<p>so the following is not allowed</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">enum</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">B</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"nc\">Foo</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 228442118,
        "sender_full_name": "lcnr",
        "timestamp": 1614703446
    },
    {
        "content": "<p>as the library could later add a <code>PartialEq</code> impl which disagrees with what the type system is doing</p>",
        "id": 228442175,
        "sender_full_name": "lcnr",
        "timestamp": 1614703469
    },
    {
        "content": "<p>I don't see const generics working without opting-in for user defined types. Otherwise modifications that make a type no longer const generics compatible are silent, and might affect downstream users without a library author being aware.</p>",
        "id": 228442194,
        "sender_full_name": "varkor",
        "timestamp": 1614703482
    },
    {
        "content": "<p>(ah found the thread i was talking about <a href=\"https://github.com/rust-lang/rust/issues/74446\">https://github.com/rust-lang/rust/issues/74446</a> not sure how relevent it actually is)</p>",
        "id": 228442227,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614703498
    },
    {
        "content": "<p>another option is (ab)using visibility for this</p>",
        "id": 228442307,
        "sender_full_name": "lcnr",
        "timestamp": 1614703527
    },
    {
        "content": "<p>adding a new trait feels a bit heavy handed to me</p>",
        "id": 228442338,
        "sender_full_name": "lcnr",
        "timestamp": 1614703539
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">enum</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">B</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>would it have to be a trait?</p>",
        "id": 228442438,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614703566
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-03-02/near/228442307\">said</a>:</p>\n<blockquote>\n<p>another option is (ab)using visibility for this</p>\n</blockquote>\n<p>Do you mean only making public fields count for equality of consts?</p>",
        "id": 228442487,
        "sender_full_name": "varkor",
        "timestamp": 1614703577
    },
    {
        "content": "<p>so allowing a type as a const param type if it both uses <code>derive(PartialEq, Eq)</code> and only has visible fields</p>",
        "id": 228442505,
        "sender_full_name": "lcnr",
        "timestamp": 1614703584
    },
    {
        "content": "<p>only allowing consts to be used if they have only public fields</p>",
        "id": 228442540,
        "sender_full_name": "lcnr",
        "timestamp": 1614703601
    },
    {
        "content": "<p>because then you can't change them in any way without already being breaking</p>",
        "id": 228442605,
        "sender_full_name": "lcnr",
        "timestamp": 1614703619
    },
    {
        "content": "<p>Adding a function pointer as a public field isn't breaking, though?</p>",
        "id": 228442664,
        "sender_full_name": "varkor",
        "timestamp": 1614703633
    },
    {
        "content": "<p>it is?</p>",
        "id": 228442697,
        "sender_full_name": "lcnr",
        "timestamp": 1614703650
    },
    {
        "content": "<p>if you have</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Struct</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">field_a</span>: <span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 228442742,
        "sender_full_name": "lcnr",
        "timestamp": 1614703671
    },
    {
        "content": "<p>it could break pattern matching if the struct isn't #[non_exhaustive] I think?</p>",
        "id": 228442761,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614703679
    },
    {
        "content": "<p>you can't add a new field to <code>Struct</code> without breaking that code</p>",
        "id": 228442763,
        "sender_full_name": "lcnr",
        "timestamp": 1614703680
    },
    {
        "content": "<p>oh yeah that too</p>",
        "id": 228442818,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614703686
    },
    {
        "content": "<p>way simpler</p>",
        "id": 228442828,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614703689
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"326176\">Boxy</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-03-02/near/228442761\">said</a>:</p>\n<blockquote>\n<p>it could break pattern matching if the struct isn't #[non_exhaustive] I think?</p>\n</blockquote>\n<p><code>#[non_exhaustive]</code> structs/enums probably should also be excluded</p>",
        "id": 228442863,
        "sender_full_name": "lcnr",
        "timestamp": 1614703705
    },
    {
        "content": "<p>but maybe having a <code>StructuralMatch</code> trait is the right choice</p>",
        "id": 228442892,
        "sender_full_name": "lcnr",
        "timestamp": 1614703719
    },
    {
        "content": "<p>idk</p>",
        "id": 228442897,
        "sender_full_name": "lcnr",
        "timestamp": 1614703721
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-03-02/near/228442742\">said</a>:</p>\n<blockquote>\n<p>if you have</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Struct</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">field_a</span>: <span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Oh, of course <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 228442919,
        "sender_full_name": "varkor",
        "timestamp": 1614703731
    },
    {
        "content": "<p><code>#[Derive(Eq, PartialEq]</code> + <code>const</code> behind the type definition like how we have <code>const fn</code> ?</p>",
        "id": 228442954,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614703746
    },
    {
        "content": "<p>i don't think we should add a new keyword/meaning to an old keyword for this.</p>",
        "id": 228443023,
        "sender_full_name": "lcnr",
        "timestamp": 1614703770
    },
    {
        "content": "<p>don't think that this has a big advantage over using a new <code>trait</code></p>",
        "id": 228443050,
        "sender_full_name": "lcnr",
        "timestamp": 1614703783
    },
    {
        "content": "<p>i'm not sure I'd think of it as a new meaning but thats fine ^^</p>",
        "id": 228443068,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614703793
    },
    {
        "content": "<p>actually mmm yeah</p>",
        "id": 228443198,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614703832
    },
    {
        "content": "<p>forget my idea xd</p>",
        "id": 228443238,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614703853
    },
    {
        "content": "<p>so uh, just <em>some</em> way to opt-in is what you're thinking?</p>",
        "id": 228443337,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614703889
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-03-02/near/228442742\">said</a>:</p>\n<blockquote>\n<p>if you have</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Struct</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">field_a</span>: <span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>If <code>Struct</code> is public, but it has non-public fields, you can't construct it like this, which I think means you can add a public field without it being a breaking change?</p>",
        "id": 228443371,
        "sender_full_name": "varkor",
        "timestamp": 1614703904
    },
    {
        "content": "<p>jup</p>",
        "id": 228443400,
        "sender_full_name": "lcnr",
        "timestamp": 1614703918
    },
    {
        "content": "<p>Right, so the requirement that every field is public to be used in CG would be important.</p>",
        "id": 228443514,
        "sender_full_name": "varkor",
        "timestamp": 1614703960
    },
    {
        "content": "<p>yes</p>",
        "id": 228443608,
        "sender_full_name": "lcnr",
        "timestamp": 1614703991
    },
    {
        "content": "<p>I prefer explicit opt-in, which would allow us to give detailed error messages in edge cases, rather than accidentally opt-out, and not know immediately</p>",
        "id": 228443634,
        "sender_full_name": "varkor",
        "timestamp": 1614704000
    },
    {
        "content": "<p>I think rules like \"fields must be public\" are going to seen arcane to users.</p>",
        "id": 228443676,
        "sender_full_name": "varkor",
        "timestamp": 1614704017
    },
    {
        "content": "<p>and also the all public fields thing has the downside of</p>\n<blockquote>\n<p>require all fields to be public (disqualifies NonZeroT),</p>\n</blockquote>",
        "id": 228443697,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614704024
    },
    {
        "content": "<p>It's already common to <code>derive</code> several traits for a new type; adding one more seems reasonable.</p>",
        "id": 228443849,
        "sender_full_name": "varkor",
        "timestamp": 1614704066
    },
    {
        "content": "<p>true, so even if we had that implicit optin</p>",
        "id": 228443858,
        "sender_full_name": "lcnr",
        "timestamp": 1614704071
    },
    {
        "content": "<p>we would still need to have another way to allow types to be used a const params</p>",
        "id": 228443873,
        "sender_full_name": "lcnr",
        "timestamp": 1614704083
    },
    {
        "content": "<p>i guess we should talk with <a class=\"stream\" data-stream-id=\"146212\" href=\"/#narrow/stream/146212-t-compiler.2Fconst-eval\">#t-compiler/const-eval</a> about this to figure out something that works for them as well</p>",
        "id": 228443926,
        "sender_full_name": "lcnr",
        "timestamp": 1614704108
    },
    {
        "content": "<p>Also, if we have a trait, we can do: <code>fn foo&lt;T: Constable, X: T&gt;</code>...</p>",
        "id": 228444019,
        "sender_full_name": "varkor",
        "timestamp": 1614704149
    },
    {
        "content": "<p>Maybe we could technically do this before with <code>StructuralEq</code>, but this way seems more transparent to users.</p>",
        "id": 228444154,
        "sender_full_name": "varkor",
        "timestamp": 1614704196
    },
    {
        "content": "<p>do we have a list of the exact thing's that you guarantee by making a type: Constable</p>",
        "id": 228444437,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614704296
    },
    {
        "content": "<p>or is it literally just the same things as \"whatever it means to be structural match\"</p>",
        "id": 228444469,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614704315
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"326176\">Boxy</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-03-02/near/228444469\">said</a>:</p>\n<blockquote>\n<p>or is it literally just the same things as \"whatever it means to be structural match\"</p>\n</blockquote>\n<p>I think it may be this, but then I also think there may be subtleties as regards what we allow in patterns vs what we allow in const generics. I'm not sure it's totally consistent for backwards compatibility reasons at the moment.</p>",
        "id": 228444607,
        "sender_full_name": "varkor",
        "timestamp": 1614704368
    },
    {
        "content": "<p>okay cool</p>",
        "id": 228444672,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614704395
    },
    {
        "content": "<p>I think we might need a discussion dedicated to figuring out structural match.</p>",
        "id": 228444694,
        "sender_full_name": "varkor",
        "timestamp": 1614704403
    },
    {
        "content": "<p>(I.e. a real-time version of that issue posted earlier.)</p>",
        "id": 228444772,
        "sender_full_name": "varkor",
        "timestamp": 1614704413
    },
    {
        "content": "<p>this issue? <a href=\"https://github.com/rust-lang/rust/issues/74446\">https://github.com/rust-lang/rust/issues/74446</a></p>",
        "id": 228444828,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614704428
    },
    {
        "content": "<p>Regarding a couple of earlier comments:<br>\n<span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-03-02/near/228433212\">said</a>:</p>\n<blockquote>\n<p>i guess the question is whether we do want to allow <code>struct Foo&lt;const N: usize, const M: usize = N&gt;</code></p>\n</blockquote>\n<p>I definitely think we want to allow this (assuming the implementation is not too much trouble).</p>\n<blockquote>\n<p>c like enums? seems quite helpful and should already work</p>\n</blockquote>\n<p>One thing to consider is complexity from the user's perspective: restrictions like this are going to seem arbitrary (even more so than just allowing integer types at the moment). I think whether we stabilise this depends on what time period we expect valtrees to be implemented in.</p>",
        "id": 228445035,
        "sender_full_name": "varkor",
        "timestamp": 1614704491
    },
    {
        "content": "<p>By the way, the earlier thread for generic parameter ordering was <a href=\"#narrow/stream/260443-project-const-generics/topic/generic.20parameter.20ordering\">https://rust-lang.zulipchat.com/#narrow/stream/260443-project-const-generics/topic/generic.20parameter.20ordering</a>.</p>",
        "id": 228445556,
        "sender_full_name": "varkor",
        "timestamp": 1614704655
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"121053\">varkor</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/generic.20parameter.20ordering/near/221477708\">said</a>:</p>\n<blockquote>\n<p>To clarify, I think the simplest design is: non-defaulted parameters, followed by defaulted parameters, such that each parameter can only refer to parameters that precede it.</p>\n</blockquote>\n<p>*excluding lifetime parameters, which are already permitted to refer to lifetimes coming later on in the argument list</p>",
        "id": 228445706,
        "sender_full_name": "varkor",
        "timestamp": 1614704707
    },
    {
        "content": "<p>After landing <a href=\"https://github.com/rust-lang/rust/issues/75384\">#75384</a>, I think we should go ahead and implement this change, and get it signed off by T-lang.</p>",
        "id": 228445900,
        "sender_full_name": "varkor",
        "timestamp": 1614704765
    },
    {
        "content": "<blockquote>\n<p>we should go ahead and implement this change</p>\n</blockquote>\n<p>do you mean stabilize? or what's \"this change\" here?</p>",
        "id": 228446669,
        "sender_full_name": "lcnr",
        "timestamp": 1614704986
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/75384\">#75384</a> doesn't allow default type parameters and default const parameters in the same declaration yet, does it?</p>",
        "id": 228447115,
        "sender_full_name": "varkor",
        "timestamp": 1614705117
    },
    {
        "content": "<p>i think it does, or well, it needs a test for that <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 228447666,
        "sender_full_name": "lcnr",
        "timestamp": 1614705291
    },
    {
        "content": "<p>if it doesn't it should be a bug i think</p>",
        "id": 228447700,
        "sender_full_name": "lcnr",
        "timestamp": 1614705305
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-03-02/near/228434028\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>what hack is this?</p>\n</blockquote>\n<p>will answer that after the meeting cause it's a bit more complicated</p>\n</blockquote>\n<p>haven't forgot this, will  be back in ~30 min to talk about that</p>",
        "id": 228448503,
        "sender_full_name": "lcnr",
        "timestamp": 1614705566
    },
    {
        "content": "<p>:)</p>",
        "id": 228448531,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614705584
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-03-02/near/228447666\">said</a>:</p>\n<blockquote>\n<p>i think it does, or well, it needs a test for that <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>\n</blockquote>\n<p>Okay, my memory was not helping me out, so I skimmed for tests and didn't see any <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 228451393,
        "sender_full_name": "varkor",
        "timestamp": 1614706499
    },
    {
        "content": "<p>I'll add one sometime today</p>",
        "id": 228453471,
        "sender_full_name": "jknodt",
        "timestamp": 1614707173
    },
    {
        "content": "<p>We should test for various orderings (both that should work and that shouldn't), with regard to all of the various things that can go in generic parameter lists.</p>",
        "id": 228453891,
        "sender_full_name": "varkor",
        "timestamp": 1614707288
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"326176\">@Boxy</span> are you there?</p>",
        "id": 228454019,
        "sender_full_name": "lcnr",
        "timestamp": 1614707345
    },
    {
        "content": "<p>hewwo</p>",
        "id": 228454059,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614707356
    },
    {
        "content": "<p>exactly 30 min btw <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 228454065,
        "sender_full_name": "lcnr",
        "timestamp": 1614707359
    },
    {
        "content": "<p>30m is just long enough that if I was the best celeste player in the world I could have beaten the game in that time</p>",
        "id": 228454118,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614707377
    },
    {
        "content": "<p>alas I am not so, <em>closes celeste</em> xD</p>",
        "id": 228454131,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614707386
    },
    {
        "content": "<p>^^</p>",
        "id": 228454161,
        "sender_full_name": "lcnr",
        "timestamp": 1614707397
    },
    {
        "content": "<p>(By the way, sorry for being late to today's meeting; I had a problem with the carbon monoxide detector that I needed to resolve.)</p>",
        "id": 228454236,
        "sender_full_name": "varkor",
        "timestamp": 1614707409
    },
    {
        "content": "<p>that sounds important :)</p>",
        "id": 228454307,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614707428
    },
    {
        "content": "<p>do you know that we currently don't supply the generic arguments to anonymous constants?</p>",
        "id": 228454308,
        "sender_full_name": "lcnr",
        "timestamp": 1614707428
    },
    {
        "content": "<p>what's \"currently\" here</p>",
        "id": 228454352,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614707449
    },
    {
        "content": "<p>on the current nightly without feature flags</p>",
        "id": 228454383,
        "sender_full_name": "lcnr",
        "timestamp": 1614707460
    },
    {
        "content": "<p>what anon consts do we permit on current nightly?</p>",
        "id": 228454481,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614707494
    },
    {
        "content": "<p>on stable this can cause an ICE, <code>fn foo&lt;T&gt;() -&gt; [u8; std::mem::size_of::&lt;*const T&gt;()]</code></p>",
        "id": 228454501,
        "sender_full_name": "lcnr",
        "timestamp": 1614707503
    },
    {
        "content": "<p>on beta we now forbid this during name resolution</p>",
        "id": 228454537,
        "sender_full_name": "lcnr",
        "timestamp": 1614707515
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"326176\">Boxy</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-03-02/near/228454481\">said</a>:</p>\n<blockquote>\n<p>what anon consts do we permit on current nightly?</p>\n</blockquote>\n<p>either just a param, so <code>N</code> or <code>{ N }</code>, or arbitrary expressions which don't depend on generic parameters</p>",
        "id": 228454633,
        "sender_full_name": "lcnr",
        "timestamp": 1614707539
    },
    {
        "content": "<blockquote>\n<p>either just a param, so <code>N</code> or <code>{ N }</code>,</p>\n</blockquote>\n<p>now, how do we support this if we don't actually supply the generic params to anonymous constants?</p>",
        "id": 228454735,
        "sender_full_name": "lcnr",
        "timestamp": 1614707586
    },
    {
        "content": "<p>okay cool</p>",
        "id": 228454742,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614707587
    },
    {
        "content": "<p>this is where the hack comes in</p>",
        "id": 228454777,
        "sender_full_name": "lcnr",
        "timestamp": 1614707597
    },
    {
        "content": "<p>oh no .-.</p>",
        "id": 228454778,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614707597
    },
    {
        "content": "<p>when creating the <code>ty::Const</code> for an anonymous constant we use <code>ty::Const::from_anon_const</code></p>",
        "id": 228454858,
        "sender_full_name": "lcnr",
        "timestamp": 1614707631
    },
    {
        "content": "<p>this has a special-case for <code>N</code> or <code>{ N }</code> where it returns <code>ConstKind::Param</code> directly instead of <code>ConstKind::Unevaluated</code></p>",
        "id": 228455008,
        "sender_full_name": "lcnr",
        "timestamp": 1614707668
    },
    {
        "content": "<p>interesting</p>",
        "id": 228455145,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614707721
    },
    {
        "content": "<p>that's kind of cursed~</p>",
        "id": 228455180,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614707736
    },
    {
        "content": "<p>w/ const_evaluatable_checked are we going to undo that and just have them be ConstKind::Unevaluated?</p>",
        "id": 228455339,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614707789
    },
    {
        "content": "<p>no, that's needed. See the error message for</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(const_generics)]</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">{{</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"p\">}}]</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 228455358,
        "sender_full_name": "lcnr",
        "timestamp": 1614707802
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=aa6d7fef2a912ecf5e87b6bde5542821\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=aa6d7fef2a912ecf5e87b6bde5542821</a></p>",
        "id": 228455378,
        "sender_full_name": "lcnr",
        "timestamp": 1614707810
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>  = note: expressions using a const parameter must map each value to a distinct output value\n  = note: proving the result of expressions other than the parameter are unique is not supported\n</code></pre></div>",
        "id": 228455629,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614707906
    },
    {
        "content": "<p>now these are two notes I do not remotely understand <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 228455648,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614707913
    },
    {
        "content": "<p>so an impl has to be unique for each possible type trait combination</p>",
        "id": 228455719,
        "sender_full_name": "lcnr",
        "timestamp": 1614707944
    },
    {
        "content": "<p>an example:</p>",
        "id": 228455733,
        "sender_full_name": "lcnr",
        "timestamp": 1614707947
    },
    {
        "content": "<p>ohh I did not even notice this was an impl not a fn</p>",
        "id": 228456005,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614708033
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">isize</span> <span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">isize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">.</span><span class=\"n\">unsigned_abs</span><span class=\"p\">()]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">isize</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">N</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 228456008,
        "sender_full_name": "lcnr",
        "timestamp": 1614708034
    },
    {
        "content": "<p>okay the notes make sense now that I noticed that it was an <code>impl</code> not a <code>fn</code> &gt;_&gt;</p>",
        "id": 228456060,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614708052
    },
    {
        "content": "<p>so, back to the hack:</p>",
        "id": 228456241,
        "sender_full_name": "lcnr",
        "timestamp": 1614708122
    },
    {
        "content": "<p>the only way for an anon const to use params is if <code>from_anon_const</code> returns <code>ty::ConstKind::Param</code></p>",
        "id": 228456393,
        "sender_full_name": "lcnr",
        "timestamp": 1614708169
    },
    {
        "content": "<p>and <code>Param</code> never actually needs to look at the <code>IdentitySubsts</code> for itself</p>",
        "id": 228456480,
        "sender_full_name": "lcnr",
        "timestamp": 1614708197
    },
    {
        "content": "<p>so as long as we don't try to somehow substs the param with its own identity substitutions</p>",
        "id": 228456537,
        "sender_full_name": "lcnr",
        "timestamp": 1614708225
    },
    {
        "content": "<p>everything's fine</p>",
        "id": 228456549,
        "sender_full_name": "lcnr",
        "timestamp": 1614708231
    },
    {
        "content": "<p>when implementing this there was one concerning place which is <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_middle/mir/interpret/queries.rs.html#13-23\">https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_middle/mir/interpret/queries.rs.html#13-23</a></p>",
        "id": 228456905,
        "sender_full_name": "lcnr",
        "timestamp": 1614708350
    },
    {
        "content": "<p>so</p>",
        "id": 228456906,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614708350
    },
    {
        "content": "<p>which must not get called for any constants using this hack</p>",
        "id": 228457003,
        "sender_full_name": "lcnr",
        "timestamp": 1614708373
    },
    {
        "content": "<p>as it always tries to evaluate them</p>",
        "id": 228457024,
        "sender_full_name": "lcnr",
        "timestamp": 1614708381
    },
    {
        "content": "<p>even if they would just be <code>ConstKind::Param</code></p>",
        "id": 228457055,
        "sender_full_name": "lcnr",
        "timestamp": 1614708395
    },
    {
        "content": "<p>right, that's unrelated to the hack though right? you just cant evaluate them because they're generic</p>",
        "id": 228457116,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614708418
    },
    {
        "content": "<p>no, trying to evaluate them would cause an ICE</p>",
        "id": 228457195,
        "sender_full_name": "lcnr",
        "timestamp": 1614708438
    },
    {
        "content": "<p>because <code>InternalSubsts::identity_for_item(self, def_id);</code> just returns <code>&amp;[]</code></p>",
        "id": 228457228,
        "sender_full_name": "lcnr",
        "timestamp": 1614708460
    },
    {
        "content": "<p>ah</p>",
        "id": 228457243,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614708467
    },
    {
        "content": "<p>this is the whole \"empty substs causes ICEs\" thing?</p>",
        "id": 228457263,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614708475
    },
    {
        "content": "<p>and when const eval then encounters the param it tries to substitute</p>",
        "id": 228457270,
        "sender_full_name": "lcnr",
        "timestamp": 1614708477
    },
    {
        "content": "<p>yeah</p>",
        "id": 228457331,
        "sender_full_name": "lcnr",
        "timestamp": 1614708488
    },
    {
        "content": "<p>that still feels weird to me <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 228457364,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614708497
    },
    {
        "content": "<p>it is</p>",
        "id": 228457381,
        "sender_full_name": "lcnr",
        "timestamp": 1614708504
    },
    {
        "content": "<p>and the identity substs for this anon const is nothing because we dont give the anon consts any generics?</p>",
        "id": 228457426,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614708524
    },
    {
        "content": "<p><code>min_const_generics</code> is an - incredibly well working - bodge</p>",
        "id": 228457456,
        "sender_full_name": "lcnr",
        "timestamp": 1614708534
    },
    {
        "content": "<p>okay well this is very cursed i love it</p>",
        "id": 228457491,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614708547
    },
    {
        "content": "<p>uwu</p>",
        "id": 228457495,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614708548
    },
    {
        "content": "<p>so with uh</p>",
        "id": 228457548,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614708575
    },
    {
        "content": "<p>feature(const_generics)</p>",
        "id": 228457554,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614708579
    },
    {
        "content": "<p>we <em>do</em> give anon consts generics?</p>",
        "id": 228457562,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614708583
    },
    {
        "content": "<p>yes</p>",
        "id": 228457580,
        "sender_full_name": "lcnr",
        "timestamp": 1614708589
    },
    {
        "content": "<p>I dont understand why we still need the hack for feature(const_generics)</p>",
        "id": 228457825,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614708686
    },
    {
        "content": "<p>would we return a ConstKind::Unevaluated for N</p>",
        "id": 228457858,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614708695
    },
    {
        "content": "<p>and we just bail there at trying to prove that each input maps to a distinct output?</p>",
        "id": 228457880,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614708707
    },
    {
        "content": "<blockquote>\n<p>proving the result of expressions other than the parameter are unique is not supported</p>\n</blockquote>",
        "id": 228457955,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614708727
    },
    {
        "content": "<p>I think I see how this hack would help us with <code>fn foo&lt;const N: usize, const M: usize = N&gt;() {}</code> too :)</p>",
        "id": 228458428,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614708912
    },
    {
        "content": "<p>it would <em>not</em> help with <code>fn foo&lt;const N: usize, const M: usize  = {{N}}&gt;() {}</code> right?</p>",
        "id": 228458525,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614708960
    },
    {
        "content": "<p>if i understood this correctly xD</p>",
        "id": 228458574,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614708967
    },
    {
        "content": "<p>okay cool</p>",
        "id": 228458598,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614708973
    },
    {
        "content": "<p>definitely a hack then <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 228458617,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614708977
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-03-02/near/228457228\">said</a>:</p>\n<blockquote>\n<p>because <code>InternalSubsts::identity_for_item(self, def_id);</code> just returns <code>&amp;[]</code></p>\n</blockquote>\n<p>in the case of feature(const_generics) the anon const would have generics supplied so this wouldn't be empty right?</p>",
        "id": 228458906,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614709101
    },
    {
        "content": "<p>cool :)</p>",
        "id": 228459058,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614709177
    }
]