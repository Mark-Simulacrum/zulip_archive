[
    {
        "content": "<p>Hi <span class=\"user-group-mention\" data-user-group-id=\"3805\">@project-const-generics</span>, meeting's here in a bit more than 20 minutes</p>",
        "id": 227447600,
        "sender_full_name": "lcnr",
        "timestamp": 1614093820
    },
    {
        "content": "<p>my goal is to both talk a bit about <a href=\"https://github.com/rust-lang/rust/issues/79356\">#79356</a> and to explore the design space around <code>WithOptConstParam</code>, as <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> had some possible alternatives for this</p>",
        "id": 227447970,
        "sender_full_name": "lcnr",
        "timestamp": 1614093959
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> do you have something to say about that today or should we move it to a later date?</p>",
        "id": 227448075,
        "sender_full_name": "lcnr",
        "timestamp": 1614093987
    },
    {
        "content": "<p>notes: <a href=\"https://hackmd.io/aHgvN1bWTayErMrx4k7irg\">https://hackmd.io/aHgvN1bWTayErMrx4k7irg</a></p>",
        "id": 227448229,
        "sender_full_name": "lcnr",
        "timestamp": 1614094054
    },
    {
        "content": "<p>wave</p>",
        "id": 227451105,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614095164
    },
    {
        "content": "<p>I would love to talk about that</p>",
        "id": 227451129,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614095173
    },
    {
        "content": "<p>but I confess I didn't prepare anything</p>",
        "id": 227451137,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614095176
    },
    {
        "content": "<p>^^</p>",
        "id": 227451159,
        "sender_full_name": "lcnr",
        "timestamp": 1614095183
    },
    {
        "content": "<p>I think it'd be helpful to talk out whta it's used for :)</p>",
        "id": 227451165,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614095186
    },
    {
        "content": "<p>I had started to prepare stuff...</p>",
        "id": 227451174,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614095190
    },
    {
        "content": "<p>we could start with <a href=\"https://github.com/rust-lang/rust/issues/79356\">https://github.com/rust-lang/rust/issues/79356</a> if you want</p>",
        "id": 227451201,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614095203
    },
    {
        "content": "<p>hm, then let's start with <a href=\"https://github.com/rust-lang/rust/issues/79356\">#79356</a></p>",
        "id": 227451277,
        "sender_full_name": "lcnr",
        "timestamp": 1614095240
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-02-23/near/227448229\">said</a>:</p>\n<blockquote>\n<p>notes: <a href=\"https://hackmd.io/aHgvN1bWTayErMrx4k7irg\">https://hackmd.io/aHgvN1bWTayErMrx4k7irg</a></p>\n</blockquote>\n<p>i tried to summarize the issue in the notes</p>",
        "id": 227451579,
        "sender_full_name": "lcnr",
        "timestamp": 1614095347
    },
    {
        "content": "<p>playground: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=2c78df92664ee9d9b773a25e3addbe5c\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=2c78df92664ee9d9b773a25e3addbe5c</a></p>",
        "id": 227451682,
        "sender_full_name": "lcnr",
        "timestamp": 1614095378
    },
    {
        "content": "<p>reading now</p>",
        "id": 227451880,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614095426
    },
    {
        "content": "<p>what kind of cycle are we talking about here</p>",
        "id": 227452087,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614095503
    },
    {
        "content": "<p>a query cycle</p>",
        "id": 227452116,
        "sender_full_name": "lcnr",
        "timestamp": 1614095513
    },
    {
        "content": "<p>I posted the output at the bottom of the hackmd</p>",
        "id": 227452235,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614095546
    },
    {
        "content": "<p>I don't quite understand the connection between</p>",
        "id": 227452308,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614095577
    },
    {
        "content": "<blockquote>\n<p>= note: ...which requires evaluating trait selection obligation <code>[u8; 7]: std::marker::Sized</code>...</p>\n</blockquote>\n<p>and</p>\n<blockquote>\n<p>= note: ...which again requires simplifying constant for the type system <code>test::{constant#0}</code>, completing the cycle</p>\n</blockquote>",
        "id": 227452339,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614095590
    },
    {
        "content": "<p>what is \"simplifying\" a constant?</p>",
        "id": 227452365,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614095598
    },
    {
        "content": "<p>\"simplifying constant\" is a post-const eval thing for turning the result into a type level constant</p>",
        "id": 227452398,
        "sender_full_name": "oli",
        "timestamp": 1614095613
    },
    {
        "content": "<p>Allocation -&gt; ty::Const essentially, you can treat it as part of the const eval query, just that the const eval query is two queries where the one always calls the other.</p>",
        "id": 227452426,
        "sender_full_name": "oli",
        "timestamp": 1614095623
    },
    {
        "content": "<p>is this because of the where clauses that are in scope when evaluating that trait obligation?</p>",
        "id": 227452473,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614095638
    },
    {
        "content": "<p>yeah, when typechecking</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">3</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 227452567,
        "sender_full_name": "lcnr",
        "timestamp": 1614095659
    },
    {
        "content": "<p>the following predicate is part of the caller bounds</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">3</span><span class=\"w\"></span>\n<span class=\"p\">}]</span>: <span class=\"nb\">Sized</span>\n</code></pre></div>",
        "id": 227452611,
        "sender_full_name": "lcnr",
        "timestamp": 1614095678
    },
    {
        "content": "<p>ok i'm starting to see it</p>",
        "id": 227452751,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614095728
    },
    {
        "content": "<p>we unify <code>[u8; unevaluated]</code> with <code>[u8; 7]</code></p>",
        "id": 227452838,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614095762
    },
    {
        "content": "<p>and that triggers evaluation of <code>unevaluated</code></p>",
        "id": 227452906,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614095773
    },
    {
        "content": "<p>to see if it might equal 7?</p>",
        "id": 227452918,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614095779
    },
    {
        "content": "<p>yeah</p>",
        "id": 227452931,
        "sender_full_name": "lcnr",
        "timestamp": 1614095785
    },
    {
        "content": "<p>hmm</p>",
        "id": 227452989,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614095813
    },
    {
        "content": "<p>so... a chalk like approach wouldn't have a problem with this</p>",
        "id": 227453031,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614095824
    },
    {
        "content": "<p>though how chalk + constant evaluation gets integrated is still a bit opaque to me</p>",
        "id": 227453105,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614095843
    },
    {
        "content": "<p><em>now if only i knew how the chalk like approach would work</em> ^^</p>",
        "id": 227453108,
        "sender_full_name": "lcnr",
        "timestamp": 1614095844
    },
    {
        "content": "<p>so what I meant by that is</p>",
        "id": 227453133,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614095852
    },
    {
        "content": "<p>a \"chalk-like\" approach would basically treat that branch that triggered the cycle as an error and go on exploring other branches</p>",
        "id": 227453167,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614095866
    },
    {
        "content": "<p>so it would say \"ok, we can't unify unevaluated with 7 right now, let's see if there's any other way to prove <code>[u8; 7]: Sized</code></p>",
        "id": 227453249,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614095884
    },
    {
        "content": "<p>and sure enough there is</p>",
        "id": 227453254,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614095886
    },
    {
        "content": "<p>(just on first principles)</p>",
        "id": 227453279,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614095891
    },
    {
        "content": "<p>on a related note, I've been wanting to extend salsa to handle those sorts of recursion errors</p>",
        "id": 227453342,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614095918
    },
    {
        "content": "<p>rather than always giving errors on cycles</p>",
        "id": 227453357,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614095925
    },
    {
        "content": "<p>(What's salsa?)</p>",
        "id": 227453374,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614095933
    },
    {
        "content": "<p>hm, so that would solve this issue afaict</p>",
        "id": 227453395,
        "sender_full_name": "lcnr",
        "timestamp": 1614095938
    },
    {
        "content": "<p>and, presuming that worked out, I would probably want to do the same for rustc's query system</p>",
        "id": 227453404,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614095941
    },
    {
        "content": "<p><a href=\"https://rustc-dev-guide.rust-lang.org/salsa.html\">https://rustc-dev-guide.rust-lang.org/salsa.html</a></p>",
        "id": 227453464,
        "sender_full_name": "lcnr",
        "timestamp": 1614095959
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"326176\">Boxy</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-02-23/near/227453374\">said</a>:</p>\n<blockquote>\n<p>(What's salsa?)</p>\n</blockquote>\n<p><a href=\"https://github.com/salsa-rs/salsa\">https://github.com/salsa-rs/salsa</a> -- it's a separate implementation of the rustc query system, used by rust-analyzer</p>",
        "id": 227453487,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614095971
    },
    {
        "content": "<p>thanks both :)</p>",
        "id": 227453516,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614095980
    },
    {
        "content": "<p>(really I just want to merge salsa + rustc's query system some day)</p>",
        "id": 227453591,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614096002
    },
    {
        "content": "<p>Do we have a pre-salsa and pre-chalk solution for this situation?</p>",
        "id": 227453787,
        "sender_full_name": "oli",
        "timestamp": 1614096030
    },
    {
        "content": "<p>so I guess the question is if/how we could integrate an approach like this into rustc</p>",
        "id": 227453806,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614096032
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-02-23/near/227453787\">said</a>:</p>\n<blockquote>\n<p>Do we have a pre-salsa and pre-chalk solution for this situation?</p>\n</blockquote>\n<p>well</p>",
        "id": 227454045,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614096070
    },
    {
        "content": "<p>there are obvious workarounds that would address this specific example</p>",
        "id": 227454084,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614096076
    },
    {
        "content": "<p>I don't quite know how representative this example is</p>",
        "id": 227454203,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614096098
    },
    {
        "content": "<p>not too representative I feel</p>",
        "id": 227454426,
        "sender_full_name": "lcnr",
        "timestamp": 1614096135
    },
    {
        "content": "<p>e.g., we could tweak selection order to give priority when solving <code>[T; C]: Sized</code> for example, if <code>C</code> is a builtin value, that sort of thing</p>",
        "id": 227454490,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614096148
    },
    {
        "content": "<p>i am afraid of const evaluatable bounds where this can happen a lot more easily</p>",
        "id": 227454536,
        "sender_full_name": "lcnr",
        "timestamp": 1614096159
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">evaluatable</span><span class=\"p\">(</span><span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">evaluatable</span><span class=\"p\">(</span><span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"kt\">u16</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()]</span><span class=\"o\">&gt;</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 227454871,
        "sender_full_name": "lcnr",
        "timestamp": 1614096237
    },
    {
        "content": "<p>could we do something like the MIR inliner cycle prevention algorithm that runs on the code to find cycles without actually calling queries?</p>",
        "id": 227454893,
        "sender_full_name": "oli",
        "timestamp": 1614096243
    },
    {
        "content": "<p>so having multiple const evaluatable bounds where one of them depends on another one</p>",
        "id": 227454982,
        "sender_full_name": "lcnr",
        "timestamp": 1614096257
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-02-23/near/227454893\">said</a>:</p>\n<blockquote>\n<p>could we do something like the MIR inliner cycle prevention algorithm that runs on the code to find cycles without actually calling queries?</p>\n</blockquote>\n<p>this seems hard to do</p>",
        "id": 227455393,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614096360
    },
    {
        "content": "<p>I guess we could prune out where clauses with \"evaluatable\" bounds or something</p>",
        "id": 227455541,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614096389
    },
    {
        "content": "<p>er, I mean with unevaluated constants</p>",
        "id": 227455587,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614096400
    },
    {
        "content": "<p>that seems too limited for sure</p>",
        "id": 227455633,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614096410
    },
    {
        "content": "<p>i think that's too limiting <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 227455966,
        "sender_full_name": "lcnr",
        "timestamp": 1614096490
    },
    {
        "content": "<p>as it won't allow const evaluatable bounds to depend on other evaluatable bounds</p>",
        "id": 227456103,
        "sender_full_name": "lcnr",
        "timestamp": 1614096541
    },
    {
        "content": "<p>which is something i really want to allow</p>",
        "id": 227456152,
        "sender_full_name": "lcnr",
        "timestamp": 1614096561
    },
    {
        "content": "<p>i've considered filtering out all predicates which are \"after\" the predicate containing our anon const</p>",
        "id": 227456215,
        "sender_full_name": "lcnr",
        "timestamp": 1614096589
    },
    {
        "content": "<p>well, it would just be an interim step</p>",
        "id": 227456216,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614096589
    },
    {
        "content": "<p>but</p>",
        "id": 227456227,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614096594
    },
    {
        "content": "<p>is it something that a first version of const evaluatable bounds needs to have? So we could still keep the real solution (salsa or chalk) on the horizon, but get something out quickly</p>",
        "id": 227456331,
        "sender_full_name": "oli",
        "timestamp": 1614096616
    },
    {
        "content": "<p>well, but I guess we don't want that :)</p>",
        "id": 227456333,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614096617
    },
    {
        "content": "<p>this is kind of what I am asking myself</p>",
        "id": 227456368,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614096629
    },
    {
        "content": "<p>but we both don't have any ordering requirements rn and it seems really weird with associated type bounds and stuff</p>",
        "id": 227456370,
        "sender_full_name": "lcnr",
        "timestamp": 1614096629
    },
    {
        "content": "<p>I feel like the <em>right</em> solution here is going to be handling cycles beter</p>",
        "id": 227456409,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614096644
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-02-23/near/227456331\">said</a>:</p>\n<blockquote>\n<p>is it something that a first version of const evaluatable bounds needs to have? So we could still keep the real solution (salsa or chalk) on the horizon, but get something out quickly</p>\n</blockquote>\n<blockquote>\n<p>These cycles happen for code currently compiling on stable, so this would also require a crater run.</p>\n</blockquote>",
        "id": 227456445,
        "sender_full_name": "lcnr",
        "timestamp": 1614096657
    },
    {
        "content": "<p>I'm feeling a bit uncertain about all the queries involved though</p>",
        "id": 227456449,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614096657
    },
    {
        "content": "<p>this might even be a requirement to stabilize lazy norm at all</p>",
        "id": 227456486,
        "sender_full_name": "lcnr",
        "timestamp": 1614096670
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-02-23/near/227456449\">said</a>:</p>\n<blockquote>\n<p>I'm feeling a bit uncertain about all the queries involved though</p>\n</blockquote>\n<p>in which sense?</p>",
        "id": 227456593,
        "sender_full_name": "lcnr",
        "timestamp": 1614096711
    },
    {
        "content": "<p>there's a lot of them, and they cover a lot of the compiler</p>",
        "id": 227456664,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614096725
    },
    {
        "content": "<p>for the chalk approach to make sense, all the queries in between have to be something you can run and rerun</p>",
        "id": 227456706,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614096741
    },
    {
        "content": "<p>to generate add'l answers</p>",
        "id": 227456719,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614096744
    },
    {
        "content": "<p>for something like <code>Foo: Sized</code> there is only one possible answer</p>",
        "id": 227456766,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614096765
    },
    {
        "content": "<p>this matters more if inference is involved</p>",
        "id": 227456775,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614096768
    },
    {
        "content": "<p>yeah, that seems like a lot of work</p>",
        "id": 227456783,
        "sender_full_name": "lcnr",
        "timestamp": 1614096773
    },
    {
        "content": "<p>the way it normally works--when you hit a cycle, you give up, but if you find another answer, you have to come back and try the cycle again with that answer as the result</p>",
        "id": 227456863,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614096792
    },
    {
        "content": "<p>i am kind of interested in how we intend to deal with cycles while staying deterministic</p>",
        "id": 227456941,
        "sender_full_name": "lcnr",
        "timestamp": 1614096823
    },
    {
        "content": "<p>in general or in this specific case?</p>",
        "id": 227456978,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614096835
    },
    {
        "content": "<p>If we made the queries return <code>Result</code>s and use some trickery like WithOptConstParam/ParamEnv where we feed in different surrounding information in calls to the same query for the \"same\" argument, then that is pretty much what the salsa approach is, only without query-engine support</p>",
        "id": 227456987,
        "sender_full_name": "oli",
        "timestamp": 1614096838
    },
    {
        "content": "<p>I'm not sure why cycles cause problems with determinism in particular</p>",
        "id": 227457045,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614096847
    },
    {
        "content": "<p>plausibly</p>",
        "id": 227457229,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614096927
    },
    {
        "content": "<p>I'm wanting to rip out that trickery :)</p>",
        "id": 227457241,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614096932
    },
    {
        "content": "<p>uh, it's kinda hard to figure out a sensible example rn</p>",
        "id": 227457379,
        "sender_full_name": "lcnr",
        "timestamp": 1614096974
    },
    {
        "content": "<blockquote>\n<p>I'm not sure why cycles cause problems with determinism in particular</p>\n</blockquote>\n<p>in the inliner case, you would have gotten different code for the same input MIR depending on which MIR was optimized first</p>",
        "id": 227457548,
        "sender_full_name": "oli",
        "timestamp": 1614097021
    },
    {
        "content": "<p>oh, I see</p>",
        "id": 227457614,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614097031
    },
    {
        "content": "<p>yeah so chalk avoids that by being thorough</p>",
        "id": 227457701,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614097046
    },
    {
        "content": "<p>this is why you have to re-run after you hit a cycle, in part</p>",
        "id": 227457785,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614097064
    },
    {
        "content": "<p>to make sure you reach a fixed point</p>",
        "id": 227457850,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614097076
    },
    {
        "content": "<p>well</p>",
        "id": 227458025,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614097107
    },
    {
        "content": "<p>yea, but that isn't possible in all cycle situations (like in the MIR inliner case)</p>",
        "id": 227458038,
        "sender_full_name": "oli",
        "timestamp": 1614097111
    },
    {
        "content": "<p>I don't know the answer here <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> :P</p>",
        "id": 227458042,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614097112
    },
    {
        "content": "<p>right</p>",
        "id": 227458049,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614097118
    },
    {
        "content": "<p>which is sort of my point :)</p>",
        "id": 227458063,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614097123
    },
    {
        "content": "<p>but for the situation at hand, that sounds about right</p>",
        "id": 227458065,
        "sender_full_name": "oli",
        "timestamp": 1614097123
    },
    {
        "content": "<p>I think it is possible here, but I'm not sure it's advisable</p>",
        "id": 227458086,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614097134
    },
    {
        "content": "<p>in particular I don't want to re-run the type checker</p>",
        "id": 227458305,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614097208
    },
    {
        "content": "<p>I'm wondering <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> if we can talk about <code>WithOptConstParam</code> a bit</p>",
        "id": 227458340,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614097224
    },
    {
        "content": "<p>and think about this one :)</p>",
        "id": 227458351,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614097229
    },
    {
        "content": "<p>I do feel like the right answer is something like what I was talking about-- but I'm not sure the best way to realize it right now</p>",
        "id": 227458408,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614097251
    },
    {
        "content": "<p>I wanted to start by walking through the \"canonical example\" <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.WithOptConstParam.html\">from the docs</a> and talk out how it comes about again</p>",
        "id": 227458522,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614097297
    },
    {
        "content": "<p>I have this nagging feeling like there's a sign that something is a bit messed up and we could set it up in a different way</p>",
        "id": 227458554,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614097312
    },
    {
        "content": "<p>yeah, let's do that then</p>",
        "id": 227458560,
        "sender_full_name": "lcnr",
        "timestamp": 1614097313
    },
    {
        "content": "<p>ok, so we're talking about </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">A</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">//           ^ const parameter</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">B</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">M</span>: <span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">//           ^ const parameter</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">foo</span>::<span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">//               ^^^^^^^^^ const argument</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 227458731,
        "sender_full_name": "lcnr",
        "timestamp": 1614097362
    },
    {
        "content": "<p>and are currently typechecking <code>main</code></p>",
        "id": 227458766,
        "sender_full_name": "lcnr",
        "timestamp": 1614097380
    },
    {
        "content": "<p>rght</p>",
        "id": 227459026,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614097483
    },
    {
        "content": "<p>so we are trying to resolve the <code>a.foo</code> call, right?</p>",
        "id": 227459048,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614097493
    },
    {
        "content": "<p>and we see <code>{3+7}</code></p>",
        "id": 227459055,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614097498
    },
    {
        "content": "<p>that is, we go to the const arguments -- we get back an unevaluated constant <code>C</code>, effectively</p>",
        "id": 227459102,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614097515
    },
    {
        "content": "<p>hm,</p>",
        "id": 227459136,
        "sender_full_name": "lcnr",
        "timestamp": 1614097531
    },
    {
        "content": "<p>so afaik</p>",
        "id": 227459150,
        "sender_full_name": "lcnr",
        "timestamp": 1614097538
    },
    {
        "content": "<p>we already resolved <code>a.foo</code> here</p>",
        "id": 227459171,
        "sender_full_name": "lcnr",
        "timestamp": 1614097545
    },
    {
        "content": "<p>I'm trying to remember the ordering, I can check the code</p>",
        "id": 227459268,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614097571
    },
    {
        "content": "<p>we certainly type check <code>a</code> first</p>",
        "id": 227459277,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614097574
    },
    {
        "content": "<p>and are currently converting the generic args to the <code>ty::substs::Subst</code></p>",
        "id": 227459285,
        "sender_full_name": "lcnr",
        "timestamp": 1614097576
    },
    {
        "content": "<p>which is the first time we ever actually interact with <code>{3+7}</code> when typechecking main</p>",
        "id": 227459350,
        "sender_full_name": "lcnr",
        "timestamp": 1614097609
    },
    {
        "content": "<p>we create the <code>ty::Const</code> for <code>{3+7}</code> here: <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_typeck/astconv/mod.rs.html#446\">https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_typeck/astconv/mod.rs.html#446</a></p>",
        "id": 227459641,
        "sender_full_name": "lcnr",
        "timestamp": 1614097714
    },
    {
        "content": "<p>(side note: rust-analyzer doesn't want to work for me)</p>",
        "id": 227459766,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614097758
    },
    {
        "content": "<p>which is annoying</p>",
        "id": 227459795,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614097775
    },
    {
        "content": "<p>Cargo metadata from Cargo.toml file /home/nmatsakis/versioned/rust-4/Cargo.toml, cargo 1.49.0 (d00d64df9 2020-12-05): Failed to run <code>cargo metadata --manifest-path /home/nmatsakis/versioned/rust-4/Cargo.toml</code> in <code>/home/nmatsakis/versioned/rust-4</code>: <code>cargo metadata</code> exited with an error: error: failed to read <code>/home/nmatsakis/versioned/rust-4/src/tools/cargo/crates/credential/cargo-credential-1password/Cargo.toml</code> Caused by: No such file or directory (os error 2)</p>",
        "id": 227459841,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614097796
    },
    {
        "content": "<p>does anybody else see stuff like that? presmably not</p>",
        "id": 227459859,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614097802
    },
    {
        "content": "<p>(not using ra myself)</p>",
        "id": 227459968,
        "sender_full_name": "lcnr",
        "timestamp": 1614097827
    },
    {
        "content": "<p>ok</p>",
        "id": 227460050,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614097867
    },
    {
        "content": "<p>so I'm reading <a href=\"https://github.com/nikomatsakis/rust/blob/a118ee2c13cc96ceb27bd5030c1cca1052377604/compiler/rustc_typeck/src/check/method/mod.rs#L183-L190\"><code>lookup_method</code></a></p>",
        "id": 227460091,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614097881
    },
    {
        "content": "<p>to reconstruct the exact seqence</p>",
        "id": 227460105,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614097885
    },
    {
        "content": "<p>it has <code>self_ty</code> and <code>segment</code> as parameters</p>",
        "id": 227460121,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614097892
    },
    {
        "content": "<p>so it seems like, yes, we have resolved the method <em>before</em> we go to the type parameters</p>",
        "id": 227460167,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614097908
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-02-23/near/227459859\">said</a>:</p>\n<blockquote>\n<p>does anybody else see stuff like that? presmably not</p>\n</blockquote>\n<p>Are all submodules checked out?</p>",
        "id": 227460273,
        "sender_full_name": "bjorn3",
        "timestamp": 1614097931
    },
    {
        "content": "<p>heh, you know, maybe not :)</p>",
        "id": 227460308,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614097952
    },
    {
        "content": "<p>so we go into <a href=\"https://github.com/nikomatsakis/rust/blob/a118ee2c13cc96ceb27bd5030c1cca1052377604/compiler/rustc_typeck/src/check/method/confirm.rs#L81-L82\"><code>instantiate_method_substs</code></a> I guess</p>",
        "id": 227460725,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614098080
    },
    {
        "content": "<p>ok I'm still reading</p>",
        "id": 227461711,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614098428
    },
    {
        "content": "<p>sorry, this is maybe not the best use of sync time :)</p>",
        "id": 227461723,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614098433
    },
    {
        "content": "<p>but I guess I see to some extent what's going on</p>",
        "id": 227461741,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614098442
    },
    {
        "content": "<p>^^</p>",
        "id": 227461964,
        "sender_full_name": "lcnr",
        "timestamp": 1614098523
    },
    {
        "content": "<p>at least <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> fixed my r-a :)</p>",
        "id": 227462106,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614098568
    },
    {
        "content": "<p>do you still have any questions about <code>WithOptConstParam</code>? <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 227462917,
        "sender_full_name": "lcnr",
        "timestamp": 1614098850
    },
    {
        "content": "<p>so</p>",
        "id": 227465185,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614099649
    },
    {
        "content": "<p>sorry, I had another meeting and I have to run</p>",
        "id": 227465199,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614099655
    },
    {
        "content": "<p>I don't like <code>WithOptConstParam</code>, feel wrong, but I don't have a fresh answer for you yet</p>",
        "id": 227465231,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614099667
    },
    {
        "content": "<p>I guess I'm still poking a bit at how it works</p>",
        "id": 227465255,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614099672
    }
]