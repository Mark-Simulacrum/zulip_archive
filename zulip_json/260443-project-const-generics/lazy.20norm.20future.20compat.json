[
    {
        "content": "<p><code>min_const_generics</code> does not use <code>lazy_normalization_consts</code> and enabling <code>lazy_normalization_consts</code> is a breaking change in some rare circumstances. Does the situation get worse by stabilizing <code>min_const_generics</code>?</p>",
        "id": 212735515,
        "sender_full_name": "lcnr",
        "timestamp": 1602183922
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">ASSOC_CONST</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// `u8::ASSOC_CONST` is resolved today, but will be ambiguous</span>\n<span class=\"c1\">// under lazy normalization.</span>\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"p\">[(</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"kt\">u8</span>::<span class=\"n\">ASSOC_CONST</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kt\">u8</span>: <span class=\"nc\">Trait</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"o\">&lt;</span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">todo</span><span class=\"o\">!</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 212735632,
        "sender_full_name": "lcnr",
        "timestamp": 1602183992
    },
    {
        "content": "<p><code>min_const_generics</code> only allows 1 new expression in array lengths, being an identity expression using a const parameter, so it won't have a direct impact on this</p>",
        "id": 212735937,
        "sender_full_name": "lcnr",
        "timestamp": 1602184178
    },
    {
        "content": "<p>it will however make working with arrays more ergonomic which will probably increase their use. This will probably also mean that there will be a higher chance to encounter an expression which breaks once we stabilize <code>lazy_normalization_consts</code></p>",
        "id": 212736130,
        "sender_full_name": "lcnr",
        "timestamp": 1602184287
    },
    {
        "content": "<p>I do not think that this is relevant enough to be a concern when deciding to stabilize <code>min_const_generics</code>. In general I do not believe there to be an interaction between <code>lazy_normalization_consts</code> and <code>min_const_generics</code> we have to wary of.</p>",
        "id": 212736339,
        "sender_full_name": "lcnr",
        "timestamp": 1602184381
    },
    {
        "content": "<p>looks like we have to update this topic because of <a href=\"https://github.com/rust-lang/rust/issues/79356\">#79356</a></p>",
        "id": 217663295,
        "sender_full_name": "lcnr",
        "timestamp": 1606155239
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> this seems similar to what you and <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> are currently doing for supertraits, do you have an idea on how we might be able to fix this?</p>",
        "id": 217663477,
        "sender_full_name": "lcnr",
        "timestamp": 1606155320
    },
    {
        "content": "<p>this makes me less comfortable with stabilizing <code>min_const_generics</code> as this test works as long as we don't supply the parent generics</p>",
        "id": 217663788,
        "sender_full_name": "lcnr",
        "timestamp": 1606155480
    },
    {
        "content": "<p>we could discard predicates in <code>tcx.param_env</code>of an anon const if they contain said anon const</p>",
        "id": 217687386,
        "sender_full_name": "lcnr",
        "timestamp": 1606168358
    },
    {
        "content": "<p>that might actually work quite well I think</p>",
        "id": 217687410,
        "sender_full_name": "lcnr",
        "timestamp": 1606168368
    },
    {
        "content": "<p>oh well, it won't</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(const_generics)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![allow(incomplete_features)]</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">test</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">3</span><span class=\"w\"></span>\n<span class=\"p\">}]</span>: <span class=\"nb\">Sized</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">4</span><span class=\"w\"></span>\n<span class=\"p\">}]</span>: <span class=\"nb\">Sized</span>  <span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>will still break then</p>",
        "id": 217760369,
        "sender_full_name": "lcnr",
        "timestamp": 1606228058
    },
    {
        "content": "<p>another idea would be to replace all unevaluated consts in the same <code>Generics</code> with something like <code>ConstKind::Opaque</code> so that we can't look into them</p>",
        "id": 217760471,
        "sender_full_name": "lcnr",
        "timestamp": 1606228101
    },
    {
        "content": "<p>this would prevent things like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">test</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">T</span>: <span class=\"nc\">Trait</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"o\">&gt;</span>::<span class=\"n\">ASSOC</span><span class=\"p\">]</span>: <span class=\"nb\">Sized</span> <span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 217760930,
        "sender_full_name": "lcnr",
        "timestamp": 1606228329
    },
    {
        "content": "<p>thinking about this i feel a bit better as there are ways to solve this and while min_const_generics will slightly increase the amount of unevaluated constants in where clauses, it doesn't change anything substantial here as arrays are already allowed</p>",
        "id": 217761998,
        "sender_full_name": "lcnr",
        "timestamp": 1606228811
    },
    {
        "content": "<p>will remove <code>const-generics-blocking</code> from that issue again. cc <span class=\"user-mention\" data-user-id=\"121053\">@varkor</span></p>",
        "id": 217762101,
        "sender_full_name": "lcnr",
        "timestamp": 1606228858
    }
]