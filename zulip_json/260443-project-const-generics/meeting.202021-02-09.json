[
    {
        "content": "<p>the meeting starts in 10 minutes in this topic</p>",
        "id": 225707385,
        "sender_full_name": "lcnr",
        "timestamp": 1612884932
    },
    {
        "content": "<p>prepared some notes for this meeting: <a href=\"https://hackmd.io/DqXhFwzsQDK7QyTYTWz5fQ\">https://hackmd.io/DqXhFwzsQDK7QyTYTWz5fQ</a></p>\n<p>intend to add any results in that doc and add it to <a href=\"https://github.com/rust-lang/project-const-generics\">https://github.com/rust-lang/project-const-generics</a> afterwards</p>",
        "id": 225707652,
        "sender_full_name": "lcnr",
        "timestamp": 1612885017
    },
    {
        "content": "<p>wave</p>",
        "id": 225708742,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612885416
    },
    {
        "content": "<p>wave</p>",
        "id": 225708749,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612885419
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 225708933,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1612885479
    },
    {
        "content": "<p>making some popcorn :)</p>",
        "id": 225709093,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612885545
    },
    {
        "content": "<p>Hi!</p>",
        "id": 225709099,
        "sender_full_name": "Hameer Abbasi",
        "timestamp": 1612885547
    },
    {
        "content": "<p>in case it wasn't clear, I meant that quite literally :)</p>",
        "id": 225709398,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612885643
    },
    {
        "content": "<p>ok, I'm here now, snack in hand <span aria-label=\"popcorn\" class=\"emoji emoji-1f37f\" role=\"img\" title=\"popcorn\">:popcorn:</span></p>",
        "id": 225709408,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612885646
    },
    {
        "content": "<p>nice, then I guess let's start then^^</p>",
        "id": 225709436,
        "sender_full_name": "lcnr",
        "timestamp": 1612885661
    },
    {
        "content": "<p>Mostly copying the notes (<a href=\"https://hackmd.io/DqXhFwzsQDK7QyTYTWz5fQ\">https://hackmd.io/DqXhFwzsQDK7QyTYTWz5fQ</a>)</p>",
        "id": 225709560,
        "sender_full_name": "lcnr",
        "timestamp": 1612885695
    },
    {
        "content": "<p>skimming</p>",
        "id": 225709618,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612885725
    },
    {
        "content": "<p>but yes, copy over</p>",
        "id": 225709625,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612885728
    },
    {
        "content": "<blockquote>\n<p>Anonymous constants currently have all the generic parameters of their parent, even if they are unused inside of the constant.</p>\n</blockquote>",
        "id": 225709677,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612885747
    },
    {
        "content": "<p>can you define the word \"currently\" here :)</p>",
        "id": 225709694,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612885755
    },
    {
        "content": "<p>with the current implementation ^^</p>",
        "id": 225709709,
        "sender_full_name": "lcnr",
        "timestamp": 1612885764
    },
    {
        "content": "<p>even that doesn't seem precise enough</p>",
        "id": 225709721,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612885770
    },
    {
        "content": "<p>don't we have different modes?</p>",
        "id": 225709732,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612885775
    },
    {
        "content": "<p>or well, with <code>feature(lazy_normalization_consts)</code> or <code>feature(const_generics)</code></p>",
        "id": 225709744,
        "sender_full_name": "lcnr",
        "timestamp": 1612885779
    },
    {
        "content": "<p>e.g., \"This breaks some programs, some of which already compile on stable.\"</p>",
        "id": 225709746,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612885779
    },
    {
        "content": "<p>this seems to conflict with \"currently\"</p>",
        "id": 225709756,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612885783
    },
    {
        "content": "<p>ok</p>",
        "id": 225709760,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612885784
    },
    {
        "content": "<p>on stable we do not supply the parent generics at all</p>",
        "id": 225709801,
        "sender_full_name": "lcnr",
        "timestamp": 1612885795
    },
    {
        "content": "<p>By parent we mean \"function\" or <del>\"class\"</del> \"struct\" or \"method\" or some other cases as well?</p>",
        "id": 225709900,
        "sender_full_name": "Hameer Abbasi",
        "timestamp": 1612885816
    },
    {
        "content": "<p>right, I kind of figured this is what you meant (based on prior conversation), but I think we have to find some ways to speak very precisely about what we mean</p>",
        "id": 225709922,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612885824
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256313\">Hameer Abbasi</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.2009.2E02.2E2021/near/225709900\">said</a>:</p>\n<blockquote>\n<p>By parent we mean \"function\" or <del>\"class\"</del> \"struct\" or \"method\" or some other cases as well?</p>\n</blockquote>\n<p>traits as well</p>",
        "id": 225709997,
        "sender_full_name": "lcnr",
        "timestamp": 1612885853
    },
    {
        "content": "<p>I've noticed that terms like \"currently\" or \"in the future\" -- which I use constantly --  can get quite confusing</p>",
        "id": 225710069,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612885874
    },
    {
        "content": "<p>hmm, I want to use currently here to mean with <code>feature(const_generics)</code></p>",
        "id": 225710112,
        "sender_full_name": "lcnr",
        "timestamp": 1612885891
    },
    {
        "content": "<p>anyway, I guess we can distinguish \"stable\" vs \"const-generics\"</p>",
        "id": 225710116,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612885892
    },
    {
        "content": "<p>Best give modes and commit hash maybe? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 225710132,
        "sender_full_name": "Hameer Abbasi",
        "timestamp": 1612885904
    },
    {
        "content": "<p>ok, let's assume that's the \"baseline\"</p>",
        "id": 225710152,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612885909
    },
    {
        "content": "<p>(using const-generics feature gate)</p>",
        "id": 225710184,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612885918
    },
    {
        "content": "<p>/me reads the imp't stuff :)</p>",
        "id": 225710222,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612885922
    },
    {
        "content": "<p>What does \"anon const subst\" mean?</p>",
        "id": 225710352,
        "sender_full_name": "Hameer Abbasi",
        "timestamp": 1612885976
    },
    {
        "content": "<blockquote>\n<p>what happens if we need to look at the anon const subst before a hard limit? I think this is unlikely, but would prevent us from using this option. How likely is this?</p>\n</blockquote>",
        "id": 225710357,
        "sender_full_name": "Hameer Abbasi",
        "timestamp": 1612885980
    },
    {
        "content": "<p>anonymous constants are internally represented as <code>ty::ConstKInd::Unevaluated(anon_const_def_id, substs)</code></p>",
        "id": 225710403,
        "sender_full_name": "lcnr",
        "timestamp": 1612886006
    },
    {
        "content": "<p>where <code>substs</code> is the list of all generic parameters available to the constant</p>",
        "id": 225710455,
        "sender_full_name": "lcnr",
        "timestamp": 1612886030
    },
    {
        "content": "<blockquote>\n<p>will pull in too many parameters, still prevent some programs from compiling</p>\n</blockquote>",
        "id": 225710467,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612886035
    },
    {
        "content": "<p>can you elaborate on this?</p>",
        "id": 225710528,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612886044
    },
    {
        "content": "<p>give me a sec</p>",
        "id": 225710580,
        "sender_full_name": "lcnr",
        "timestamp": 1612886067
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(const_generics)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()]</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">T</span>: <span class=\"nc\">Trait</span><span class=\"o\">&lt;</span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// ...</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 225710827,
        "sender_full_name": "lcnr",
        "timestamp": 1612886167
    },
    {
        "content": "<p>the anonymous constant explicitly mentions <code>T</code></p>",
        "id": 225710849,
        "sender_full_name": "lcnr",
        "timestamp": 1612886178
    },
    {
        "content": "<p>and <code>T: Trait&lt;U&gt;</code> means that we may pull in <code>U</code> as well, so we also want to consider that one used</p>",
        "id": 225710932,
        "sender_full_name": "lcnr",
        "timestamp": 1612886206
    },
    {
        "content": "<p>even though it doesn't actually get used in the constant</p>",
        "id": 225710959,
        "sender_full_name": "lcnr",
        "timestamp": 1612886215
    },
    {
        "content": "<p>nod</p>",
        "id": 225710997,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612886232
    },
    {
        "content": "<p>ok</p>",
        "id": 225711000,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612886233
    },
    {
        "content": "<p>the same applies to predicates in general I guess</p>",
        "id": 225711200,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612886308
    },
    {
        "content": "<p>In this scenario, <code>foo</code> is the parent?</p>",
        "id": 225711202,
        "sender_full_name": "Hameer Abbasi",
        "timestamp": 1612886308
    },
    {
        "content": "<p>but it matters less</p>",
        "id": 225711234,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612886323
    },
    {
        "content": "<p>i.e., you might have <code>T: Eq</code> and you don't need that either</p>",
        "id": 225711252,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612886330
    },
    {
        "content": "<p>yeah, including unused predicates is fine i think</p>",
        "id": 225711294,
        "sender_full_name": "lcnr",
        "timestamp": 1612886344
    },
    {
        "content": "<p>still, you really only need those things that you need to evaluate the expression</p>",
        "id": 225711383,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612886386
    },
    {
        "content": "<p>it feels like the parameters are a bit of a red herring, in the sense that the real trick is knowing you don't need <code>T: Trait&lt;U&gt;</code></p>",
        "id": 225711478,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612886406
    },
    {
        "content": "<p>anyway, let me read on</p>",
        "id": 225711484,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612886409
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.2009.2E02.2E2021/near/225711478\">said</a>:</p>\n<blockquote>\n<p>it feels like the parameters are a bit of a red herring, in the sense that the real trick is knowing you don't need <code>T: Trait&lt;U&gt;</code></p>\n</blockquote>\n<p>we want to avoid pulling in more params than needed, even if the underlying reason why do so is the predicate ^^</p>",
        "id": 225711731,
        "sender_full_name": "lcnr",
        "timestamp": 1612886520
    },
    {
        "content": "<p>right</p>",
        "id": 225711804,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612886534
    },
    {
        "content": "<blockquote>\n<p>what happens if we need to look at the anon const subst before a hard limit? I think this is unlikely, but would prevent us from using this option. How likely is this?</p>\n</blockquote>",
        "id": 225711807,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612886535
    },
    {
        "content": "<p>can you elaborate on what this means?</p>",
        "id": 225711825,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612886544
    },
    {
        "content": "<p>we're talking about the second approach here</p>",
        "id": 225711862,
        "sender_full_name": "lcnr",
        "timestamp": 1612886560
    },
    {
        "content": "<blockquote>\n<p>it feels like the parameters are a bit of a red herring, in the sense that the real trick is knowing you don't need T: Trait&lt;U&gt;</p>\n</blockquote>\n<p>Can one do that by pruning everything not in <code>T</code> as well in this scenario? Or in general, include everything the <code>const</code> needs; as well as their dependencies.</p>\n<blockquote>\n<p>we want to avoid pulling in more params than needed, even if the underlying reason why do so is the predicate ^^</p>\n</blockquote>\n<p>Could we possibly lazily evaluate, pulling in what we need?</p>",
        "id": 225711900,
        "sender_full_name": "Hameer Abbasi",
        "timestamp": 1612886575
    },
    {
        "content": "<p>where we start out by \"using\" all params and filtering out all unused ones ones we've typechecked the constant</p>",
        "id": 225711975,
        "sender_full_name": "lcnr",
        "timestamp": 1612886602
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256313\">Hameer Abbasi</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.2009.2E02.2E2021/near/225711900\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>it feels like the parameters are a bit of a red herring, in the sense that the real trick is knowing you don't need T: Trait&lt;U&gt;</p>\n</blockquote>\n<p>Can one do that by pruning everything not in <code>T</code> as well in this scenario? Or in general, include everything the <code>const</code> needs; as well as their dependencies.</p>\n<blockquote>\n<p>we want to avoid pulling in more params than needed, even if the underlying reason why do so is the predicate ^^</p>\n</blockquote>\n<p>Could we possibly lazily evaluate, pulling in what we need?</p>\n</blockquote>\n<p>that's the whole issue, how do we know what the constant needs</p>",
        "id": 225712049,
        "sender_full_name": "lcnr",
        "timestamp": 1612886628
    },
    {
        "content": "<p>so we can only do this filtering after running <code>typeck</code> for the constant</p>",
        "id": 225712152,
        "sender_full_name": "lcnr",
        "timestamp": 1612886652
    },
    {
        "content": "<p>running <code>typeck</code> depends on <code>crate_variances</code> for example</p>",
        "id": 225712177,
        "sender_full_name": "lcnr",
        "timestamp": 1612886665
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.2009.2E02.2E2021/near/225711862\">said</a>:</p>\n<blockquote>\n<p>we're talking about the second approach here</p>\n</blockquote>\n<p>i got that</p>",
        "id": 225712227,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612886686
    },
    {
        "content": "<p>so if we looked at the substs of anonymous constants in a query used by <code>crate_variances</code></p>",
        "id": 225712250,
        "sender_full_name": "lcnr",
        "timestamp": 1612886693
    },
    {
        "content": "<p>I don't quite know what the \"hard limit\" means -- is it referring to cycles?</p>",
        "id": 225712270,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612886701
    },
    {
        "content": "<p>we either get a cycle error when trying to remove the unused ones or also consider unused ones</p>",
        "id": 225712328,
        "sender_full_name": "lcnr",
        "timestamp": 1612886717
    },
    {
        "content": "<p>\"hard limit\" means that we wouldn't be able to avoid cycle errors, yeah</p>",
        "id": 225712395,
        "sender_full_name": "lcnr",
        "timestamp": 1612886751
    },
    {
        "content": "<blockquote>\n<p>unused in the mir of the constant.</p>\n</blockquote>",
        "id": 225712480,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612886772
    },
    {
        "content": "<p>what does <em>this</em> mean :)</p>",
        "id": 225712488,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612886778
    },
    {
        "content": "<p>^^</p>",
        "id": 225712521,
        "sender_full_name": "lcnr",
        "timestamp": 1612886795
    },
    {
        "content": "<p>to deal with generic anymous constants we build an <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_trait_selection/traits/const_evaluatable/struct.AbstractConst.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_trait_selection/traits/const_evaluatable/struct.AbstractConst.html</a> for them</p>",
        "id": 225712612,
        "sender_full_name": "lcnr",
        "timestamp": 1612886835
    },
    {
        "content": "<blockquote>\n<p>will we encounter cycles where type check needs to look at the anon const subst? I think this is unlikely, but would prevent us from using this option. How likely is this?</p>\n</blockquote>",
        "id": 225712666,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612886856
    },
    {
        "content": "<p>accurate rewrite?</p>",
        "id": 225712679,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612886860
    },
    {
        "content": "<p>that's a new type for me, interesting</p>",
        "id": 225712781,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612886884
    },
    {
        "content": "<p>don't think so, typeck needs to look at the anon const substs</p>",
        "id": 225712791,
        "sender_full_name": "lcnr",
        "timestamp": 1612886887
    },
    {
        "content": "<p>does \"where typechecking the anon const relies on a query looking at its substs\" make sense to you?</p>",
        "id": 225712846,
        "sender_full_name": "lcnr",
        "timestamp": 1612886913
    },
    {
        "content": "<p>yes, but I'm confused how type check can look at the substs when they are not known until MIR is constructed</p>",
        "id": 225712895,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612886940
    },
    {
        "content": "<p>because it starts with a \"maximal\" assumption?</p>",
        "id": 225712911,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612886949
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.2009.2E02.2E2021/near/225712395\">said</a>:</p>\n<blockquote>\n<p>\"hard limit\" means that we wouldn't be able to avoid cycle errors, yeah</p>\n</blockquote>\n<p>Is there a way to traverse the tree and filter out cycles before starting this process?</p>",
        "id": 225712943,
        "sender_full_name": "Hameer Abbasi",
        "timestamp": 1612886963
    },
    {
        "content": "<p>when typechecking the anon const itself it has all substs, even the unused ones</p>",
        "id": 225712966,
        "sender_full_name": "lcnr",
        "timestamp": 1612886972
    },
    {
        "content": "<p>(Side note, I feel like there's something missing in our query system, it'd be nice if it could kind of express these concepts; not sure how that would work really)</p>",
        "id": 225712999,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612886987
    },
    {
        "content": "<p>ok, so it's more accurate to say: type check relies on the <em>maximal substs</em></p>",
        "id": 225713016,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612886999
    },
    {
        "content": "<p>and the question is whether anything needs to rely on the <em>final substs</em> before MIR is constructed</p>",
        "id": 225713072,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612887009
    },
    {
        "content": "<p>yeah, before MIR <em>for the anonymous constant itself</em> is constructed</p>",
        "id": 225713134,
        "sender_full_name": "lcnr",
        "timestamp": 1612887038
    },
    {
        "content": "<p>right</p>",
        "id": 225713154,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612887045
    },
    {
        "content": "<p>can you rewrite to that?</p>",
        "id": 225713170,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612887051
    },
    {
        "content": "<p>this whole problem is specific to <em>anonymous constants</em> because <em>named ones</em> have explicitly declared generics (or maybe we forbid generics altogether), correct?</p>",
        "id": 225713200,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612887070
    },
    {
        "content": "<p>the only other generic constants rn are associated constants</p>",
        "id": 225713287,
        "sender_full_name": "lcnr",
        "timestamp": 1612887109
    },
    {
        "content": "<p>which also inherit from their parent</p>",
        "id": 225713305,
        "sender_full_name": "lcnr",
        "timestamp": 1612887116
    },
    {
        "content": "<p>ok</p>",
        "id": 225713409,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612887147
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256313\">Hameer Abbasi</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.2009.2E02.2E2021/near/225712943\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.2009.2E02.2E2021/near/225712395\">said</a>:</p>\n<blockquote>\n<p>\"hard limit\" means that we wouldn't be able to avoid cycle errors, yeah</p>\n</blockquote>\n<p>Is there a way to traverse the tree and filter out cycles before starting this process?</p>\n</blockquote>\n<p>in a sense, that's what we're trying to figure out :)</p>",
        "id": 225713453,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612887168
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.2009.2E02.2E2021/near/225713287\">said</a>:</p>\n<blockquote>\n<p>the only other generic constants rn are associated constants</p>\n</blockquote>\n<p>i think we want to consider all generic params used in this case</p>",
        "id": 225713478,
        "sender_full_name": "lcnr",
        "timestamp": 1612887177
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.2009.2E02.2E2021/near/225712612\">said</a>:</p>\n<blockquote>\n<p>to deal with generic anymous constants we build an <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_trait_selection/traits/const_evaluatable/struct.AbstractConst.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_trait_selection/traits/const_evaluatable/struct.AbstractConst.html</a> for them</p>\n</blockquote>\n<p>I don't understand the role of this type</p>",
        "id": 225713487,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612887181
    },
    {
        "content": "<p>because i didn't finish my explanation</p>",
        "id": 225713508,
        "sender_full_name": "lcnr",
        "timestamp": 1612887194
    },
    {
        "content": "<p>too much to do at once rn <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 225713538,
        "sender_full_name": "lcnr",
        "timestamp": 1612887205
    },
    {
        "content": "<p>builing <code>AbstractConst</code>s uses unoptimized mir so that we don't depend on any optimizations in typeck</p>",
        "id": 225713625,
        "sender_full_name": "lcnr",
        "timestamp": 1612887242
    },
    {
        "content": "<p>and we can - and do on stable for the <code>const_evaluatable_unchecked</code> future compat warning - look at the same mir (or the <code>AbstractConst</code>) to figure out which generic params are used</p>",
        "id": 225713814,
        "sender_full_name": "lcnr",
        "timestamp": 1612887309
    },
    {
        "content": "<p>/me apoligizes profusely for all his n00b suggestions.</p>",
        "id": 225713837,
        "sender_full_name": "Hameer Abbasi",
        "timestamp": 1612887318
    },
    {
        "content": "<p>so to build an <code>AbstractConst</code>, we walk over MIR and construct a tree from it?</p>",
        "id": 225713840,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612887319
    },
    {
        "content": "<p>yeah</p>",
        "id": 225713853,
        "sender_full_name": "lcnr",
        "timestamp": 1612887324
    },
    {
        "content": "<p>interesting</p>",
        "id": 225713865,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612887331
    },
    {
        "content": "<p>that seems suboptimal :)</p>",
        "id": 225713869,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612887334
    },
    {
        "content": "<p>THIR might be better</p>",
        "id": 225713874,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612887336
    },
    {
        "content": "<p>but it doesn't change anything fundamental</p>",
        "id": 225713881,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612887340
    },
    {
        "content": "<p>yeah, also thought about that after reading your MCP</p>",
        "id": 225713910,
        "sender_full_name": "lcnr",
        "timestamp": 1612887354
    },
    {
        "content": "<p>but that would be more annoying cause we never return THIR from a query afaik</p>",
        "id": 225714001,
        "sender_full_name": "lcnr",
        "timestamp": 1612887374
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.2009.2E02.2E2021/near/225713814\">said</a>:</p>\n<blockquote>\n<p>and we can - and do on stable for the <code>const_evaluatable_unchecked</code> future compat warning - look at the same mir (or the <code>AbstractConst</code>) to figure out which generic params are used</p>\n</blockquote>\n<p>but I'd like you to elaborate a bit on what we mean by <em>used</em></p>",
        "id": 225714033,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612887389
    },
    {
        "content": "<p>but definitely not impossible <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 225714035,
        "sender_full_name": "lcnr",
        "timestamp": 1612887389
    },
    {
        "content": "<p>used == mentioned somewhere</p>",
        "id": 225714100,
        "sender_full_name": "lcnr",
        "timestamp": 1612887415
    },
    {
        "content": "<p>while looking into closures probably, because these also capture everything</p>",
        "id": 225714150,
        "sender_full_name": "lcnr",
        "timestamp": 1612887431
    },
    {
        "content": "<p>so</p>",
        "id": 225714212,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612887443
    },
    {
        "content": "<p>sorry to be dense but</p>",
        "id": 225714237,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612887448
    },
    {
        "content": "<p>ok, mentioned somewhere means.. appears in the type parameters for a function</p>",
        "id": 225714346,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612887468
    },
    {
        "content": "<p>yeah, or in a type</p>",
        "id": 225714424,
        "sender_full_name": "lcnr",
        "timestamp": 1612887482
    },
    {
        "content": "<p>or any other place where types are directly embedded in the MIR</p>",
        "id": 225714458,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612887484
    },
    {
        "content": "<p>what about lifetime parameters?</p>",
        "id": 225714482,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612887489
    },
    {
        "content": "<p>currently we do the same, we can probably always ignore them?</p>",
        "id": 225714568,
        "sender_full_name": "lcnr",
        "timestamp": 1612887506
    },
    {
        "content": "<p>Do lifetimes matter in a <code>const</code> context?</p>",
        "id": 225714599,
        "sender_full_name": "Hameer Abbasi",
        "timestamp": 1612887512
    },
    {
        "content": "<p>afaik they don't</p>",
        "id": 225714654,
        "sender_full_name": "lcnr",
        "timestamp": 1612887523
    },
    {
        "content": "<p>I'm bringing it up because</p>",
        "id": 225714875,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612887609
    },
    {
        "content": "<p>the lifetimes in generated MIR are largely erased</p>",
        "id": 225714891,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612887615
    },
    {
        "content": "<p>I don't know how much it matters, just thinking about different angles</p>",
        "id": 225714899,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612887622
    },
    {
        "content": "<p>I don't think it matters a lot</p>",
        "id": 225714931,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612887632
    },
    {
        "content": "<p>worth noting for later but defer it for now</p>",
        "id": 225715090,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612887696
    },
    {
        "content": "<p>considering that we ignore anon const subst when computing variances</p>",
        "id": 225715098,
        "sender_full_name": "lcnr",
        "timestamp": 1612887700
    },
    {
        "content": "<p>the reason I was pressing on this</p>",
        "id": 225715101,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612887701
    },
    {
        "content": "<p>is that I was trying to think whether there might be predicates that are required for well-formedness somehow</p>",
        "id": 225715123,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612887712
    },
    {
        "content": "<p>it would be unsound if they mattered, wouldn't it</p>",
        "id": 225715129,
        "sender_full_name": "lcnr",
        "timestamp": 1612887716
    },
    {
        "content": "<p>but which don't appear <em>directly</em> in the MIR</p>",
        "id": 225715152,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612887722
    },
    {
        "content": "<p>as an example</p>",
        "id": 225715177,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612887724
    },
    {
        "content": "<p>I think the answer presently is no</p>",
        "id": 225715199,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612887736
    },
    {
        "content": "<p>but there are future extensions where you could imagine it</p>",
        "id": 225715214,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612887741
    },
    {
        "content": "<p>eg., if you could do <code>const fn foo&lt;T&gt;() where exists&lt;U&gt; { T: Trait&lt;U&gt; } { .. }</code></p>",
        "id": 225715245,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612887753
    },
    {
        "content": "<p>(which chalk could definitely express)</p>",
        "id": 225715288,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612887773
    },
    {
        "content": "<p>but I think that because we don't have <code>exists</code> quantifiers except at the fn level, you would presently have to name the <code>U</code> type</p>",
        "id": 225715354,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612887797
    },
    {
        "content": "<p>ok</p>",
        "id": 225715717,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612887941
    },
    {
        "content": "<p>hm</p>",
        "id": 225715807,
        "sender_full_name": "lcnr",
        "timestamp": 1612887965
    },
    {
        "content": "<p>so next question -- <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> -- I'm a bit surprised that you think cycles are unlikely</p>",
        "id": 225715824,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612887970
    },
    {
        "content": "<p>there's actually another thing here i'm thinking about</p>",
        "id": 225715852,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612887982
    },
    {
        "content": "<p>well scratch that, I'll circle back to it</p>",
        "id": 225715990,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612888046
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.2009.2E02.2E2021/near/225715824\">said</a>:</p>\n<blockquote>\n<p>so next question -- <span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> -- I'm a bit surprised that you think cycles are unlikely</p>\n</blockquote>\n<p>on this point</p>",
        "id": 225716009,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612888051
    },
    {
        "content": "<p>I guess I just expect that there will be generic queries, such as the trait solver or something, that want to get the predicates or whatever of a constant</p>",
        "id": 225716042,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612888067
    },
    {
        "content": "<p>and that this will wind up requesting the substs</p>",
        "id": 225716065,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612888078
    },
    {
        "content": "<p>but maybe that's not the case</p>",
        "id": 225716073,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612888081
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.2009.2E02.2E2021/near/225715852\">said</a>:</p>\n<blockquote>\n<p>there's actually another thing here i'm thinking about</p>\n</blockquote>\n<p>(just so I don't forget, I'm thinking about how there are other times where it's useful to know \"which parts of the environment were actually used\")</p>",
        "id": 225716233,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612888122
    },
    {
        "content": "<p>(that's something chalk could conceivably track)</p>",
        "id": 225716254,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612888135
    },
    {
        "content": "<p>(it would affect e.g. caching)</p>",
        "id": 225716264,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612888138
    },
    {
        "content": "<p>i've experimented a bit with the second approach and all places which caused cycles didn't actually need the const substs</p>",
        "id": 225716523,
        "sender_full_name": "lcnr",
        "timestamp": 1612888215
    },
    {
        "content": "<p>so there is maybe a world where instead of \"scraping MIR\"</p>",
        "id": 225716527,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612888215
    },
    {
        "content": "<p>we run the type check</p>",
        "id": 225716542,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612888223
    },
    {
        "content": "<p>i never got far enough to say this conclusively though</p>",
        "id": 225716553,
        "sender_full_name": "lcnr",
        "timestamp": 1612888226
    },
    {
        "content": "<p>and type check tracks which predicates got used</p>",
        "id": 225716569,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612888232
    },
    {
        "content": "<p>so...</p>",
        "id": 225716598,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612888246
    },
    {
        "content": "<p>...remind me again, we can't type check anonymous constants in isolation, we check them like closures?</p>",
        "id": 225716643,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612888268
    },
    {
        "content": "<p>why is this?</p>",
        "id": 225716653,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612888272
    },
    {
        "content": "<p>how do they interact re: type inference</p>",
        "id": 225716661,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612888276
    },
    {
        "content": "<p>we typeck anonymous constants on their own</p>",
        "id": 225716670,
        "sender_full_name": "lcnr",
        "timestamp": 1612888281
    },
    {
        "content": "<p>we infer their expected type from where they are used</p>",
        "id": 225716697,
        "sender_full_name": "lcnr",
        "timestamp": 1612888293
    },
    {
        "content": "<p>and use that when typechecking the constant on its own</p>",
        "id": 225716728,
        "sender_full_name": "lcnr",
        "timestamp": 1612888308
    },
    {
        "content": "<p>give me an example</p>",
        "id": 225716800,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612888325
    },
    {
        "content": "<p>I think I know what you mean but i'd like to see some of the painful parts:)</p>",
        "id": 225716833,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612888340
    },
    {
        "content": "<p>so</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">vec!</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">].</span><span class=\"n\">into_iter</span><span class=\"p\">().</span><span class=\"n\">array_windows</span>::<span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 225716889,
        "sender_full_name": "lcnr",
        "timestamp": 1612888366
    },
    {
        "content": "<p>we typeck <code>foo</code> and figure out the type of the generic param of <code>array_windows</code>, which is <code>usize</code> in this case</p>",
        "id": 225717011,
        "sender_full_name": "lcnr",
        "timestamp": 1612888412
    },
    {
        "content": "<p>we then use this type when typechecking <code>{ 3 + 3 }</code> on its own</p>",
        "id": 225717044,
        "sender_full_name": "lcnr",
        "timestamp": 1612888429
    },
    {
        "content": "<p>the painful parts are that we have to typeck the anonymous constant while we typecheck its parent, we use <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.WithOptConstParam.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.WithOptConstParam.html</a> for that</p>",
        "id": 225717251,
        "sender_full_name": "lcnr",
        "timestamp": 1612888511
    },
    {
        "content": "<p>to supply the expected type to <code>{ 3 + 3 }</code> without causing a cycle error by calling <code>typeck</code> for <code>foo</code> again</p>",
        "id": 225717339,
        "sender_full_name": "lcnr",
        "timestamp": 1612888542
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> were you thinking about inline consts (<code>const { expr }</code>) here, were this kinda breaks down?</p>",
        "id": 225717501,
        "sender_full_name": "lcnr",
        "timestamp": 1612888607
    },
    {
        "content": "<p>This is an example involving <code>min_const_generics</code> that works on stable?</p>",
        "id": 225717557,
        "sender_full_name": "Hameer Abbasi",
        "timestamp": 1612888636
    },
    {
        "content": "<p>yes</p>",
        "id": 225717583,
        "sender_full_name": "lcnr",
        "timestamp": 1612888645
    },
    {
        "content": "<p>(ignoring that <code>array_windows</code> is unstable ^^)</p>",
        "id": 225717603,
        "sender_full_name": "lcnr",
        "timestamp": 1612888658
    },
    {
        "content": "<p>I had kind of forgotten about <code>const { expr }</code> tbh</p>",
        "id": 225717608,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612888661
    },
    {
        "content": "<p>how does it breakdown with <code>const { }</code>?</p>",
        "id": 225717719,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612888701
    },
    {
        "content": "<p>the type of const blocks isn't related to any const parameter</p>",
        "id": 225717772,
        "sender_full_name": "lcnr",
        "timestamp": 1612888726
    },
    {
        "content": "<p>so we would have to pass a type through <code>WithOptConstParam</code> instead of the param <code>DefId</code></p>",
        "id": 225717808,
        "sender_full_name": "lcnr",
        "timestamp": 1612888741
    },
    {
        "content": "<p>I do recall that i've never like 1000% understood <code>WithOptConstParam</code></p>",
        "id": 225717835,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612888755
    },
    {
        "content": "<p>the same issue as <a href=\"https://github.com/rust-lang/project-const-generics/pull/3\">https://github.com/rust-lang/project-const-generics/pull/3</a></p>",
        "id": 225717868,
        "sender_full_name": "lcnr",
        "timestamp": 1612888767
    },
    {
        "content": "<p>I'm assuming all of this breaks because we're trying to infer the generics of <code>array_windows</code> and <code>vec![...]</code> together?</p>",
        "id": 225717898,
        "sender_full_name": "Hameer Abbasi",
        "timestamp": 1612888781
    },
    {
        "content": "<p>What do we do currently and what assumptions break that makes that impossible?</p>",
        "id": 225718001,
        "sender_full_name": "Hameer Abbasi",
        "timestamp": 1612888809
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256313\">Hameer Abbasi</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.2009.2E02.2E2021/near/225717898\">said</a>:</p>\n<blockquote>\n<p>I'm assuming all of this breaks because we're trying to infer the generics of <code>array_windows</code> and <code>vec![...]</code> together?</p>\n</blockquote>\n<p>the issue is that to typeck <code>foo</code> we have to typecheck anonymous constants which are used in <code>foo</code></p>",
        "id": 225718065,
        "sender_full_name": "lcnr",
        "timestamp": 1612888832
    },
    {
        "content": "<p>as doing so relies on results from typeck <code>foo</code>, this would cause a cycle</p>",
        "id": 225718148,
        "sender_full_name": "lcnr",
        "timestamp": 1612888864
    },
    {
        "content": "<p>I feel like <em>part</em> of the problem here -- <em>maybe</em> -- is our query system not being expressive enough</p>",
        "id": 225718342,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612888947
    },
    {
        "content": "<p>potentially, though I have no idea how we can extend it to fix this ^^</p>",
        "id": 225718431,
        "sender_full_name": "lcnr",
        "timestamp": 1612888993
    },
    {
        "content": "<p>I have some thoughts</p>",
        "id": 225718456,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612889000
    },
    {
        "content": "<p>but it's not really fundamental to the question at hand, we can come back to it</p>",
        "id": 225718482,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612889011
    },
    {
        "content": "<p>I'm skimming this \"design doc\"</p>",
        "id": 225718770,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612889119
    },
    {
        "content": "<p>I'm going to have to drop off soon</p>",
        "id": 225718792,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612889125
    },
    {
        "content": "<p>this has been very instructional :)</p>",
        "id": 225718818,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612889135
    },
    {
        "content": "<p>I realize we've not reached any <em>conclusions</em> <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span></p>",
        "id": 225718834,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612889141
    },
    {
        "content": "<p>I kind of want to let it sit in my head a bit</p>",
        "id": 225718849,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612889150
    },
    {
        "content": "<p>yeah, will have to continue from here next week ^^</p>",
        "id": 225718875,
        "sender_full_name": "lcnr",
        "timestamp": 1612889157
    },
    {
        "content": "<p>I will print and read <a href=\"https://github.com/rust-lang/project-const-generics/pull/3/\">https://github.com/rust-lang/project-const-generics/pull/3/</a></p>",
        "id": 225718960,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612889174
    },
    {
        "content": "<p>i do have to admit i feel a bit less comfortable with option 2 and am slightly tempted to experiment with the first one</p>",
        "id": 225718984,
        "sender_full_name": "lcnr",
        "timestamp": 1612889184
    },
    {
        "content": "<p>I prefer the first one conceptually--</p>",
        "id": 225719014,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612889193
    },
    {
        "content": "<p>I'm a bit uncertain about how to do it</p>",
        "id": 225719034,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612889200
    },
    {
        "content": "<p>I get a bit nervous when we have these elaborate cycle-prone setups</p>",
        "id": 225719078,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612889220
    },
    {
        "content": "<p>and I suspect we can make something \"simple\" that works pretty well for the first one in <em>practice</em></p>",
        "id": 225719120,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612889237
    },
    {
        "content": "<p>but I'm still tinkering a bit with what that means</p>",
        "id": 225719158,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612889251
    },
    {
        "content": "<p>I think I need to understand better the interplay between type check of the parent and the anonymous constant</p>",
        "id": 225719190,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612889263
    },
    {
        "content": "<p>heh I guess <a href=\"https://github.com/rust-lang/project-const-generics/issues/3\">rust-lang/project-const-generics#3</a> is not very long</p>",
        "id": 225719292,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612889291
    },
    {
        "content": "<p>printing might be overkill :)</p>",
        "id": 225719310,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612889295
    },
    {
        "content": "<p>^^</p>",
        "id": 225719502,
        "sender_full_name": "lcnr",
        "timestamp": 1612889381
    },
    {
        "content": "<p>well then, that's it for today, thanks for your time everyone <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 225719630,
        "sender_full_name": "lcnr",
        "timestamp": 1612889427
    },
    {
        "content": "<p>^^ I'll try to do that too. :D</p>",
        "id": 225719634,
        "sender_full_name": "Hameer Abbasi",
        "timestamp": 1612889428
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> I'm going to try to partition some time later on to poke into the code a bit more</p>",
        "id": 225719723,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612889472
    },
    {
        "content": "<p>also, can someone look at <a href=\"https://github.com/rust-lang/project-const-generics/issues/1\">rust-lang/project-const-generics#1</a> ^^</p>",
        "id": 225719735,
        "sender_full_name": "lcnr",
        "timestamp": 1612889476
    },
    {
        "content": "<p><em>probably</em> Friday</p>",
        "id": 225719746,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612889478
    },
    {
        "content": "<p>I'll tell you when in case you can be around</p>",
        "id": 225719787,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612889494
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.2009.2E02.2E2021/near/225719735\">said</a>:</p>\n<blockquote>\n<p>also, can someone look at <a href=\"https://github.com/rust-lang/project-const-generics/issues/1\">rust-lang/project-const-generics#1</a> ^^</p>\n</blockquote>\n<p>I didn't even spot there was a pull request, because I didn't watch the repo early enough: I can review this later today.</p>",
        "id": 225720047,
        "sender_full_name": "varkor",
        "timestamp": 1612889601
    },
    {
        "content": "<p>Thanks so much for entertaining me. <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 225720111,
        "sender_full_name": "Hameer Abbasi",
        "timestamp": 1612889627
    },
    {
        "content": "<p>Thanks for running the meeting <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span>! I also want to take a better look at the code, so that I can follow along a bit more closely to these conversations and not just observe :)</p>",
        "id": 225720210,
        "sender_full_name": "varkor",
        "timestamp": 1612889655
    },
    {
        "content": "<p>i echo that sentiment varkor lol</p>",
        "id": 225720321,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1612889701
    },
    {
        "content": "<p>renaming zulip topics seems to work a lot worse than expected <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 225767890,
        "sender_full_name": "lcnr",
        "timestamp": 1612909980
    },
    {
        "content": "<p>looks like I somehow managed to rip that topic in half or something? how did that happen</p>",
        "id": 225767972,
        "sender_full_name": "lcnr",
        "timestamp": 1612910029
    },
    {
        "content": "<p>ok, renaming it once more actually fixed everything I think?</p>",
        "id": 225768202,
        "sender_full_name": "lcnr",
        "timestamp": 1612910153
    },
    {
        "content": "<p>let's just not touch this anymore <span aria-label=\"sparkles\" class=\"emoji emoji-2728\" role=\"img\" title=\"sparkles\">:sparkles:</span></p>",
        "id": 225768258,
        "sender_full_name": "lcnr",
        "timestamp": 1612910167
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> renaming is actually on something approximating a post-by-post basis, but you can rename \"this post and all the ones after it\". That's why it worked when you retried.</p>",
        "id": 225777989,
        "sender_full_name": "Jubilee",
        "timestamp": 1612916398
    }
]