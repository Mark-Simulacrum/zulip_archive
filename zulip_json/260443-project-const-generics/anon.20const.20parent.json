[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(const_generics, const_evaluatable_checked)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![allow(incomplete_features, unused)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![crate_type = </span><span class=\"s\">\"lib\"</span><span class=\"cp\">]</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]</span>: <span class=\"nb\">Sized</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">y</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}];</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>here <code>let y = [0; N + 1];</code> has <code>ty::Generics</code> with <code>parent</code> being <code>foo</code>. I would prefer <code>parent</code> to be the <code>x</code> anon const instead so that the predicate filtering does not have to look inside of anonymous constants.</p>\n<p>Is the reason for the current state just for perf or is there a more complex reason?</p>",
        "id": 246554323,
        "sender_full_name": "lcnr",
        "timestamp": 1626767011
    },
    {
        "content": "<p>probably an accident</p>",
        "id": 246565183,
        "sender_full_name": "oli",
        "timestamp": 1626775202
    },
    {
        "content": "<p>since we never had generics in constants before, no one noticed</p>",
        "id": 246565240,
        "sender_full_name": "oli",
        "timestamp": 1626775213
    },
    {
        "content": "<p>maybe check how closures work?</p>",
        "id": 246565292,
        "sender_full_name": "oli",
        "timestamp": 1626775241
    },
    {
        "content": "<p>if nested closures always point to their main parent, that's probably why</p>",
        "id": 246565310,
        "sender_full_name": "oli",
        "timestamp": 1626775257
    },
    {
        "content": "<p>but even then, it seems reasonable to make them a real tree instead of flattening the parents to the function</p>",
        "id": 246565348,
        "sender_full_name": "oli",
        "timestamp": 1626775300
    }
]