[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> :)</p>",
        "id": 246132663,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1626372118
    },
    {
        "content": "<p>wave</p>",
        "id": 246132676,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626372123
    },
    {
        "content": "<p>have you looked at the PR yet?</p>",
        "id": 246132723,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1626372131
    },
    {
        "content": "<p>Nope, I'm looking now...</p>",
        "id": 246132746,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626372147
    },
    {
        "content": "<p>First trying to undersatnd the problem</p>",
        "id": 246132764,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626372159
    },
    {
        "content": "<p>I don't quite understand what's causing the ICE</p>",
        "id": 246132844,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626372202
    },
    {
        "content": "<p>well, ok, <em>maybe</em> I do</p>",
        "id": 246132885,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626372223
    },
    {
        "content": "<p>the ICE that the PR fixes or the ICE's on the two code snippets at the bottom of PR description?</p>",
        "id": 246132914,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1626372239
    },
    {
        "content": "<p>so the anonymous constant <code>{ N + 1 }</code> has the same generics as its parent, probably</p>",
        "id": 246132923,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626372242
    },
    {
        "content": "<p>that it fixes</p>",
        "id": 246132979,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626372253
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(const_evaluatable_checked, const_generics, const_generics_defaults)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![allow(incomplete_features)]</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Bar</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">M</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N1</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Bar</span><span class=\"o\">&lt;</span><span class=\"n\">N1</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">loop</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 246132985,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626372254
    },
    {
        "content": "<p>ah yep</p>",
        "id": 246132990,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1626372259
    },
    {
        "content": "<p>so currently (before my PR) the anon ct <code>{ N + 1 }</code> has all of the parent's generics provided (with appropriate feature gates)</p>",
        "id": 246133039,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1626372285
    },
    {
        "content": "<p>so <code>{ N + 1 }</code> has a <code>type_of</code> (I guess) that looks like <code>ConstKind::Unevaluated({N + 1}, substs: [N, M])</code></p>",
        "id": 246133071,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626372299
    },
    {
        "content": "<p>ok</p>",
        "id": 246133088,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626372306
    },
    {
        "content": "<p>and then we try to apply a substitution with <em>the constants we've seen so far</em>, basically</p>",
        "id": 246133106,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626372316
    },
    {
        "content": "<p>yea ^^</p>",
        "id": 246133121,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1626372324
    },
    {
        "content": "<p>and we wind up with an ICE because <code>M</code> (which appears in the <code>substs</code>) is out of range</p>",
        "id": 246133127,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626372328
    },
    {
        "content": "<p>ok</p>",
        "id": 246133128,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626372329
    },
    {
        "content": "<p>when we build the substs for <code>Bar&lt;N1&gt;</code> we subst each default with  partially built substs</p>",
        "id": 246133149,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1626372340
    },
    {
        "content": "<p>yes</p>",
        "id": 246133191,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626372358
    },
    {
        "content": "<p>now I'm trying to figure out what the PR <em>does</em></p>",
        "id": 246133282,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626372385
    },
    {
        "content": "<p>so---</p>",
        "id": 246133451,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626372474
    },
    {
        "content": "<p>you are modifying <code>generics_of</code> when invoked on an anonymous constant</p>",
        "id": 246133508,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626372485
    },
    {
        "content": "<p>presumably so that it has the list <code>[N]</code> instead of <code>[N, M]</code>, right?</p>",
        "id": 246133593,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626372529
    },
    {
        "content": "<p>and we know that name resolution would have errored out if <code>M</code> were used?</p>",
        "id": 246133630,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626372544
    },
    {
        "content": "<p>Kind of</p>",
        "id": 246133648,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1626372553
    },
    {
        "content": "<p>it would error if we <em>explicitly</em> wrote <code>M</code></p>",
        "id": 246133664,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1626372559
    },
    {
        "content": "<p>yes, I was going to mention the parameter environment</p>",
        "id": 246133693,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626372575
    },
    {
        "content": "<p>e.g. you might have <code>N: Foo&lt;M&gt;</code></p>",
        "id": 246133715,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626372586
    },
    {
        "content": "<p>(right?)</p>",
        "id": 246133787,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626372610
    },
    {
        "content": "<p>as in <code>const N: Foo&lt;M&gt;</code> ?</p>",
        "id": 246133794,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1626372613
    },
    {
        "content": "<p>or are you showing a where clause there</p>",
        "id": 246133809,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1626372621
    },
    {
        "content": "<p>oh, well, these are constants</p>",
        "id": 246133820,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626372628
    },
    {
        "content": "<p>I meant a where clause</p>",
        "id": 246133831,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626372636
    },
    {
        "content": "<p>but I guess something like <code>where (): Foo&lt;N, M&gt;</code></p>",
        "id": 246133839,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626372641
    },
    {
        "content": "<p>yeah you can write this <code>pub struct Bar&lt;const N: usize = { &lt;()&gt;::Assoc }&gt; where (): Foo&lt;N&gt;;</code></p>",
        "id": 246133926,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1626372691
    },
    {
        "content": "<p>and <code>(): Foo&lt;N&gt;</code> will be in the param env of that anon ct</p>",
        "id": 246133961,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1626372705
    },
    {
        "content": "<p>yep</p>",
        "id": 246134045,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626372736
    },
    {
        "content": "<p>we've encountered problems like this before</p>",
        "id": 246134054,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626372741
    },
    {
        "content": "<p>I remember we had a whole meeting on the topic :)</p>",
        "id": 246134068,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626372748
    },
    {
        "content": "<p>I presume you are not attempting to address that sort of problem in this PR</p>",
        "id": 246134081,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626372757
    },
    {
        "content": "<p>yeah there's the whole unused substs issue for ct's in where clauses</p>",
        "id": 246134105,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1626372770
    },
    {
        "content": "<p>i think that is (hopefully) out of scope for this PR</p>",
        "id": 246134123,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1626372779
    },
    {
        "content": "<p>I think so</p>",
        "id": 246134183,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626372817
    },
    {
        "content": "<p>im not actually sure if the solutions would overlap</p>",
        "id": 246134190,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1626372820
    },
    {
        "content": "<p>previous discussions have been about removing unused where clauses</p>",
        "id": 246134207,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1626372830
    },
    {
        "content": "<p>wheras the issue here is more that <code>(): Foo&lt;N&gt;</code> is actually used</p>",
        "id": 246134220,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1626372838
    },
    {
        "content": "<p>Yes, what I might imagine is that you would get an error</p>",
        "id": 246134284,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626372853
    },
    {
        "content": "<p>just as if you had directly referenced it</p>",
        "id": 246134307,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626372866
    },
    {
        "content": "<p>oh</p>",
        "id": 246134348,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626372885
    },
    {
        "content": "<p>I just had a thought</p>",
        "id": 246134354,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626372887
    },
    {
        "content": "<p>only semi-related, <em>but</em></p>",
        "id": 246134361,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626372891
    },
    {
        "content": "<p>instead of \"pruning\" down the where clauses</p>",
        "id": 246134408,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626372911
    },
    {
        "content": "<p>we could introduce existentials</p>",
        "id": 246134415,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626372914
    },
    {
        "content": "<p>I don't think that fits into the subset of horn clauses chalk presently targets</p>",
        "id": 246134454,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626372937
    },
    {
        "content": "<p>but it'd be a much easier representation</p>",
        "id": 246134469,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626372948
    },
    {
        "content": "<p>basically</p>",
        "id": 246134484,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626372958
    },
    {
        "content": "<p>if you had <code>where (): Foo&lt;N, M&gt;</code> (say) and we were in a context where we want to exclude <code>M</code></p>",
        "id": 246134553,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626372977
    },
    {
        "content": "<p>we would replace that with <code>exists&lt;M&gt; { (): Foo&lt;N, M&gt; }</code>, essentially</p>",
        "id": 246134577,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626372991
    },
    {
        "content": "<p>...have to think if that's useful anywhere, defintiely out of scope for this PR...</p>",
        "id": 246134594,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626373002
    },
    {
        "content": "<p>anyway, ok, I understand what this PR does, more or less</p>",
        "id": 246134771,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626373085
    },
    {
        "content": "<p>the chalk stuff is a bit over my head at this point ^^</p>",
        "id": 246134791,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1626373096
    },
    {
        "content": "<p>you mentioned other ICEs</p>",
        "id": 246134805,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626373104
    },
    {
        "content": "<p>(earlier in this topic)</p>",
        "id": 246134810,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626373108
    },
    {
        "content": "<p>right</p>",
        "id": 246134813,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1626373109
    },
    {
        "content": "<p>were you just referring to the parameter environment stuff we've been talking about, or is there something else?</p>",
        "id": 246134822,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626373116
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Bar</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"p\">()</span>: <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>this is also a param env issue</p>",
        "id": 246134835,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1626373122
    },
    {
        "content": "<p>kinda the same thing really</p>",
        "id": 246134848,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1626373127
    },
    {
        "content": "<p>yes</p>",
        "id": 246134855,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626373132
    },
    {
        "content": "<p>I see, I see</p>",
        "id": 246134902,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626373147
    },
    {
        "content": "<p>yes, your two examples cover the two cases we talked about</p>",
        "id": 246134908,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626373152
    },
    {
        "content": "<p>I think I am happy to r+ this though</p>",
        "id": 246134918,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626373159
    },
    {
        "content": "<p>it feels like \"progress\"</p>",
        "id": 246134922,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626373162
    },
    {
        "content": "<p>:)</p>",
        "id": 246134960,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1626373189
    },
    {
        "content": "<p>I think the other thing im unclear on is how <code>Self</code> fits into \"forward declared params\"</p>",
        "id": 246134985,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1626373202
    },
    {
        "content": "<p>we dont allow it for defaults in adt's but we do in defaults on traits</p>",
        "id": 246135058,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1626373224
    },
    {
        "content": "<p>i think that the way i changed <code>explicit_preds_of</code> to return the parent's preds means that we wont be getting the <code>Self: Trait&lt;N&gt;</code> predicate that is there on <code>trait Trait&lt;const N: usize&gt;</code></p>",
        "id": 246135151,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1626373265
    },
    {
        "content": "<p>since that's added in <code>predicates_of</code> if i understand that code correctly?</p>",
        "id": 246135179,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1626373279
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"326176\">Boxy [she/her]</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/evil.20preds.20in.20param.20env.20.2386580/near/246134985\">said</a>:</p>\n<blockquote>\n<p>I think the other thing im unclear on is how <code>Self</code> fits into \"forward declared params\"</p>\n</blockquote>\n<p>what do you mean by this</p>",
        "id": 246135216,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626373301
    },
    {
        "content": "<p>like where it appears in the ordering?</p>",
        "id": 246135222,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626373304
    },
    {
        "content": "<p>I tend to write it like <code>P0: Trait&lt;P1...Pn&gt;</code> to make that clear :)</p>",
        "id": 246135249,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626373317
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"326176\">Boxy [she/her]</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/evil.20preds.20in.20param.20env.20.2386580/near/246135151\">said</a>:</p>\n<blockquote>\n<p>i think that the way i changed <code>explicit_preds_of</code> to return the parent's preds means that we wont be getting the <code>Self: Trait&lt;N&gt;</code> predicate that is there on <code>trait Trait&lt;const N: usize&gt;</code></p>\n</blockquote>\n<p>I see</p>",
        "id": 246135292,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626373324
    },
    {
        "content": "<p>That was part of the PR I wanted to look at a bit more closely</p>",
        "id": 246135320,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626373334
    },
    {
        "content": "<p>I don't love that we add <code>Self: Trait&lt;..&gt;</code> to the trait predicates, side note</p>",
        "id": 246135347,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626373346
    },
    {
        "content": "<p><code>struct Foo&lt;const N: usize = { /* mentions Self */ }&gt;</code> we forbid <code>Self</code> here but not in<br>\n<code>trait Foo&lt;const N: usize = { /* mentions Self */ }&gt;</code></p>",
        "id": 246135384,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1626373361
    },
    {
        "content": "<p>(I know why we do, it's just grody, I wonder if we could tweak it)</p>",
        "id": 246135385,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626373361
    },
    {
        "content": "<p>iirc I added that so that default functions would work</p>",
        "id": 246135397,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626373367
    },
    {
        "content": "<p>well, so <code>Self</code> in the <code>struct Foo</code> case refers to <code>Foo&lt;N&gt;</code></p>",
        "id": 246135451,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626373392
    },
    {
        "content": "<p>so it makes sense that it would be forbidden</p>",
        "id": 246135459,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626373396
    },
    {
        "content": "<p>as it <em>must</em> reference the parameter it is not supposed to reference</p>",
        "id": 246135471,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626373403
    },
    {
        "content": "<p>but in the <em>trait</em> case it is a type parameter</p>",
        "id": 246135507,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626373418
    },
    {
        "content": "<p>ah right, I suppose you cant \"get to\" the params on the trait from the <code>Self</code> type without the <code>Self: Trait&lt;N&gt;</code> predicate</p>",
        "id": 246135625,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1626373455
    },
    {
        "content": "<p>correct</p>",
        "id": 246135654,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626373467
    },
    {
        "content": "<p>I guess it's not a bad thing that anon ct defaults wont be getting the <code>Self: Trait&lt;N&gt;</code> predicate then i think</p>",
        "id": 246135715,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1626373497
    },
    {
        "content": "<p>heh, yes, they can probably only misuse it</p>",
        "id": 246135766,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626373528
    },
    {
        "content": "<p>since the <code>Self</code> param comes before all the other generics I suppose that means that my code in generics of that removes fwd declared params will leave <code>Self</code> in</p>",
        "id": 246135857,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1626373565
    },
    {
        "content": "<p>I'm not sure if that is a problem or not</p>",
        "id": 246135900,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1626373592
    },
    {
        "content": "<p>probably something to solve when figuring out specifically waht to do about those two ICEs from before</p>",
        "id": 246136010,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1626373653
    },
    {
        "content": "<p>doesn't seem like a problem</p>",
        "id": 246136061,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626373679
    },
    {
        "content": "<p>I left a review</p>",
        "id": 246136114,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626373688
    },
    {
        "content": "<p>the main thing is that I think we should improve the comments</p>",
        "id": 246136125,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626373694
    },
    {
        "content": "<p>I find it's always really helpful to include code examples and explain what is going on in terms of those</p>",
        "id": 246136152,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626373708
    },
    {
        "content": "<p>ah right this definitely deserves some comments lol</p>",
        "id": 246136183,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1626373724
    },
    {
        "content": "<p>its a bit subtle ^^'</p>",
        "id": 246136196,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1626373731
    },
    {
        "content": "<p>ping me once you get a chance to add them and I'll r+?</p>",
        "id": 246136205,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626373735
    },
    {
        "content": "<p>okay, thanks :)</p>",
        "id": 246136220,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1626373745
    },
    {
        "content": "<p>great!</p>",
        "id": 246136234,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626373753
    },
    {
        "content": "<p>ciao, gotta run to my next slot :P</p>",
        "id": 246136249,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626373758
    },
    {
        "content": "<p>perfect timing <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 246136273,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1626373773
    },
    {
        "content": "<blockquote>\n<p>ping me once you get a chance to add them and I'll r+?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> not quite sure if you meant here or on the PR but either way pushed some comments ^^</p>",
        "id": 246174492,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1626397299
    }
]