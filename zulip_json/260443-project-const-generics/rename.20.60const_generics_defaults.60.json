[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> <span class=\"user-mention\" data-user-id=\"326189\">@jknodt</span> <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> do you mind renaming <code>const_generics_defaults</code> to <code>const_param_defaults</code>?</p>",
        "id": 235063768,
        "sender_full_name": "lcnr",
        "timestamp": 1618743605
    },
    {
        "content": "<p>no objections from me :) (I do wonder if maybe t-lang will decide its actual gate later when they do examine this feature eventually ?)</p>",
        "id": 235097036,
        "sender_full_name": "lqd",
        "timestamp": 1618776911
    },
    {
        "content": "<p>won't they only look at this feature once we want to stabilize it? <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> i would like to avoid having to write an rfc for it</p>",
        "id": 235099073,
        "sender_full_name": "lcnr",
        "timestamp": 1618778642
    },
    {
        "content": "<p>there can be MCPs instead of RFCs, but IIUC they usually look at things earlier than stabilization (to avoid a lot of work going into an unexpected feature/direction). defaulted const generics seem safe-ish as the feature already exists for type parameters, but you never know ^^</p>",
        "id": 235139941,
        "sender_full_name": "lqd",
        "timestamp": 1618817973
    },
    {
        "content": "<p>Defaults for type parameters are only partially supported. For example <a href=\"https://github.com/Rust-GCC/gccrs/issues/307#issuecomment-808169179\">https://github.com/Rust-GCC/gccrs/issues/307#issuecomment-808169179</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A</span>: <span class=\"nb\">Default</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A</span>: <span class=\"nb\">Default</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">new</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Box</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Default</span>::<span class=\"n\">default</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Box</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>error[E0283]: type annotations needed\n  --&gt; src/main.rs:10:5\n   |\n4  |     fn new(x: T) -&gt; Self {\n   |     -------------------- required by `Box::&lt;T, A&gt;::new`\n...\n10 |     Box::new(1);\n   |     ^^^^^^^^ cannot infer type for type parameter `A`\n   |\n   = note: cannot satisfy `_: Default`\n\nerror: aborting due to previous error\n</code></pre></div>",
        "id": 235140264,
        "sender_full_name": "bjorn3",
        "timestamp": 1618818167
    },
    {
        "content": "<p>sure, and defaulted const generics have a lot of the same limitations IIRC</p>",
        "id": 235140328,
        "sender_full_name": "lqd",
        "timestamp": 1618818221
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/rename.20.60const_generics_defaults.60/near/235063768\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"121053\">varkor</span> <span class=\"user-mention silent\" data-user-id=\"326189\">jknodt</span> <span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> do you mind renaming <code>const_generics_defaults</code> to <code>const_param_defaults</code>?</p>\n</blockquote>\n<p>But types can already have defaults?</p>",
        "id": 235245313,
        "sender_full_name": "varkor",
        "timestamp": 1618864911
    },
    {
        "content": "<blockquote>\n<p>But types can already have defaults?</p>\n</blockquote>\n<p>i don't fully understand your question, can you elaborate a bit <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 235246705,
        "sender_full_name": "lcnr",
        "timestamp": 1618865543
    },
    {
        "content": "<p>That's why it says \"const\" before \"param\"</p>",
        "id": 235246736,
        "sender_full_name": "oli",
        "timestamp": 1618865565
    },
    {
        "content": "<p>Or maybe the question was about merging the feature gates?</p>",
        "id": 235246878,
        "sender_full_name": "oli",
        "timestamp": 1618865637
    },
    {
        "content": "<p>i am currently thinking a bit about the way we describe stuff, mostly looking at error messages. I think that using \"const_generics\" when actually referring to const parameters is kinda confusing, so I am looking to change the places where we do that</p>",
        "id": 235247320,
        "sender_full_name": "lcnr",
        "timestamp": 1618865849
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/rename.20.60const_generics_defaults.60/near/235246736\">said</a>:</p>\n<blockquote>\n<p>That's why it says \"const\" before \"param\"</p>\n</blockquote>\n<p>Sorry, yes, I just completely misread <code>const</code> as <code>generic</code> <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 235331873,
        "sender_full_name": "varkor",
        "timestamp": 1618920551
    },
    {
        "content": "<p>I don't have a strong preference either way.</p>",
        "id": 235332054,
        "sender_full_name": "varkor",
        "timestamp": 1618920630
    }
]