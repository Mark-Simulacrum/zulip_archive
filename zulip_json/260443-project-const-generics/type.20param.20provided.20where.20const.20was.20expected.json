[
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/81985\">#81985</a></p>",
        "id": 225967337,
        "sender_full_name": "lcnr",
        "timestamp": 1613036487
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"3805\">@project-const-generics</span></p>\n<p>similar to how we currently recommend wrapping the argument in braces we can also recommend changing the type parameter to a const parameter in case there is a mismatch. This happens here <a href=\"https://github.com/rust-lang/rust/blob/1efd8049837aec86f21da1486e8a459a7efd7806/compiler/rustc_typeck/src/astconv/generics.rs#L47\">https://github.com/rust-lang/rust/blob/1efd8049837aec86f21da1486e8a459a7efd7806/compiler/rustc_typeck/src/astconv/generics.rs#L47</a></p>",
        "id": 225967521,
        "sender_full_name": "lcnr",
        "timestamp": 1613036630
    },
    {
        "content": "<p>we can do the same if the path is resolved to an error instead of a param to fix the following: (getting the right span for the suggestion is a bit harder though)</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">A</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">&lt;</span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 225967661,
        "sender_full_name": "lcnr",
        "timestamp": 1613036747
    },
    {
        "content": "<p>for</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">A</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Display</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>you would have to look where we emit the \"expected value, found type parameter\" error and recommend changing the type param to a const parameter in the same way</p>",
        "id": 225967775,
        "sender_full_name": "lcnr",
        "timestamp": 1613036827
    },
    {
        "content": "<p>i think at least for now it's fine to not check if the param is also used as an actual type parameter somewhere else</p>",
        "id": 225967814,
        "sender_full_name": "lcnr",
        "timestamp": 1613036871
    },
    {
        "content": "<p>one issue i didn't consider is which type to recommend for the const param</p>",
        "id": 225973712,
        "sender_full_name": "lcnr",
        "timestamp": 1613040627
    },
    {
        "content": "<p>i think for the error in <a href=\"https://github.com/rust-lang/rust/blob/1efd8049837aec86f21da1486e8a459a7efd7806/compiler/rustc_typeck/src/astconv/generics.rs#L47\">https://github.com/rust-lang/rust/blob/1efd8049837aec86f21da1486e8a459a7efd7806/compiler/rustc_typeck/src/astconv/generics.rs#L47</a> we can use the param type</p>",
        "id": 225973745,
        "sender_full_name": "lcnr",
        "timestamp": 1613040652
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/type.20param.20provided.20where.20const.20was.20expected/near/225967775\">said</a>:</p>\n<blockquote>\n<p>for</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">A</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Display</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>you would have to look where we emit the \"expected value, found type parameter\" error and recommend changing the type param to a const parameter in the same way</p>\n</blockquote>\n<p>here we maybe have to be more careful and possible start by recommending <code>const N: ExpectedType</code> or something</p>",
        "id": 225973799,
        "sender_full_name": "lcnr",
        "timestamp": 1613040694
    },
    {
        "content": "<p>For cases like these we can leverage the info the compiler has to expect the right type (in this case <code>const N: u8</code>)<br>\nAlso, I think that nowadays we don't really resolve <code>N</code> to figure out _what the type is_, just that it comes from the TypeNS.</p>",
        "id": 226028700,
        "sender_full_name": "Esteban KÃ¼ber",
        "timestamp": 1613065126
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"3805\">@project-const-generics</span> does one of you want to work on this?</p>",
        "id": 226209583,
        "sender_full_name": "lcnr",
        "timestamp": 1613171836
    },
    {
        "content": "<blockquote>\n<p>Also, I think that nowadays we don't really resolve <code>N</code> to figure out _what the type is_, just that it comes from the TypeNS.</p>\n</blockquote>\n<p>not sure what you are replying to here, resolving <code>N</code> to figure out _what the type is_ would just return <code>ty::Param</code> anyways, wouldn't it?</p>",
        "id": 226209727,
        "sender_full_name": "lcnr",
        "timestamp": 1613171909
    },
    {
        "content": "<p>for</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">A</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Display</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">&lt;</span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">A</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Display</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">&lt;</span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>we know the expected type because it has to be equal to the type of the generic param we're instantiating</p>",
        "id": 226209837,
        "sender_full_name": "lcnr",
        "timestamp": 1613171986
    },
    {
        "content": "<p>for</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">A</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Display</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>we probably have to typeck <code>{ N }</code> and then look at the typeck results for the <code>HirId</code> of the path. Idk if that actually works though as the type could just be <code>ty::Error</code> <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> is that what you were talking about <span class=\"user-mention\" data-user-id=\"119031\">@Esteban KÃ¼ber</span></p>",
        "id": 226210030,
        "sender_full_name": "lcnr",
        "timestamp": 1613172107
    },
    {
        "content": "<p>If no one else wants to take it, I can take it time-permitting</p>",
        "id": 226213032,
        "sender_full_name": "jknodt",
        "timestamp": 1613174417
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/type.20param.20provided.20where.20const.20was.20expected/near/225973745\">said</a>:</p>\n<blockquote>\n<p>i think for the error in <a href=\"https://github.com/rust-lang/rust/blob/1efd8049837aec86f21da1486e8a459a7efd7806/compiler/rustc_typeck/src/astconv/generics.rs#L47\">https://github.com/rust-lang/rust/blob/1efd8049837aec86f21da1486e8a459a7efd7806/compiler/rustc_typeck/src/astconv/generics.rs#L47</a> we can use the param type</p>\n</blockquote>\n<p>I'm a bit confused because at this point we're still only at the HIR, and the TyKind::Param is on the <code>rustc_middle::TyKind</code> I believe</p>\n<p>edit: or did you mean the struct <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.ParamTy.html\">ParamTy</a></p>",
        "id": 226213797,
        "sender_full_name": "jknodt",
        "timestamp": 1613174981
    },
    {
        "content": "<p>also just to make sure I have it clear we'd recommend:<br>\n<code>impl&lt;N&gt; Display for A&lt;N&gt; </code> --&gt; <code>impl&lt;*const N: SomeType*&gt; Display for A&lt;N&gt;</code></p>",
        "id": 226214580,
        "sender_full_name": "jknodt",
        "timestamp": 1613175667
    },
    {
        "content": "<p>What I meant was that for <code>impl&lt;N&gt; Display for A&lt;N&gt;</code> <code>N</code> will be of ty::Param, while in <code>impl Display for A&lt;N&gt;</code> it will be of ty::Error</p>",
        "id": 226215597,
        "sender_full_name": "Esteban KÃ¼ber",
        "timestamp": 1613176615
    },
    {
        "content": "<p>Poorly phrased in my part <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 226215607,
        "sender_full_name": "Esteban KÃ¼ber",
        "timestamp": 1613176635
    },
    {
        "content": "<p>nah y'all good, I'm still quite unfamiliar with the terminology so just want to make sure I have it absolutely clear what is meant</p>",
        "id": 226215622,
        "sender_full_name": "jknodt",
        "timestamp": 1613176668
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"326189\">jknodt</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/type.20param.20provided.20where.20const.20was.20expected/near/226213797\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/type.20param.20provided.20where.20const.20was.20expected/near/225973745\">said</a>:</p>\n<blockquote>\n<p>i think for the error in <a href=\"https://github.com/rust-lang/rust/blob/1efd8049837aec86f21da1486e8a459a7efd7806/compiler/rustc_typeck/src/astconv/generics.rs#L47\">https://github.com/rust-lang/rust/blob/1efd8049837aec86f21da1486e8a459a7efd7806/compiler/rustc_typeck/src/astconv/generics.rs#L47</a> we can use the param type</p>\n</blockquote>\n<p>I'm a bit confused because at this point we're still only at the HIR, and the TyKind::Param is on the <code>rustc_middle::TyKind</code> I believe</p>\n<p>edit: or did you mean the struct <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.ParamTy.html\">ParamTy</a></p>\n</blockquote>\n<p>we can use <code>tcx.type_of(param.def_id)</code> to get the expected type of <code>N</code> here</p>",
        "id": 226232946,
        "sender_full_name": "lcnr",
        "timestamp": 1613202825
    }
]