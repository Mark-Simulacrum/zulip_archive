[
    {
        "content": "<p>An anonymous constant can assume that its parents where-bounds hold.<br>\nAs we can use anonymous constants inside of a where-bound this isn't actually always true rn.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(const_generics, const_evaluatable_checked)]</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()]</span>: <span class=\"nb\">Sized</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">foo</span>::<span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"kt\">i32</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>this currently emits the following errors:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0080</span><span class=\"p\">]</span>: <span class=\"nc\">evaluation</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">constant</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"n\">failed</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">src</span><span class=\"o\">/</span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">4</span>:<span class=\"mi\">10</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">intrinsics</span>::<span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()]</span>: <span class=\"nb\">Sized</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\">          </span><span class=\"o\">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span><span class=\"w\"> </span><span class=\"n\">size_of</span><span class=\"w\"> </span><span class=\"n\">called</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"kr\">unsized</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"err\">`</span><span class=\"p\">[</span><span class=\"kt\">i32</span><span class=\"p\">]</span><span class=\"err\">`</span><span class=\"w\"></span>\n\n<span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0277</span><span class=\"p\">]</span>: <span class=\"nc\">the</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">values</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"err\">`</span><span class=\"p\">[</span><span class=\"kt\">i32</span><span class=\"p\">]</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">cannot</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">known</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">compilation</span><span class=\"w\"> </span><span class=\"n\">time</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">src</span><span class=\"o\">/</span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">8</span>:<span class=\"mi\">11</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\">        </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">required</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">bound</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">foo</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"n\">foo</span>::<span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"kt\">i32</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\">           </span><span class=\"o\">^^^^^</span><span class=\"w\"> </span><span class=\"n\">doesn</span><span class=\"o\">'</span><span class=\"na\">t</span><span class=\"w\"> </span><span class=\"n\">have</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"n\">known</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"o\">-</span><span class=\"n\">time</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">help</span>: <span class=\"nc\">the</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Sized</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">implemented</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"p\">[</span><span class=\"kt\">i32</span><span class=\"p\">]</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"n\">help</span>: <span class=\"nc\">consider</span><span class=\"w\"> </span><span class=\"n\">relaxing</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">implicit</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Sized</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">restriction</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\">         </span><span class=\"o\">^^^^^^^^</span><span class=\"w\"></span>\n\n<span class=\"n\">error</span>: <span class=\"nc\">aborting</span><span class=\"w\"> </span><span class=\"n\">due</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"n\">previous</span><span class=\"w\"> </span><span class=\"n\">errors</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"n\">warnings</span><span class=\"w\"> </span><span class=\"n\">emitted</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 225824267,
        "sender_full_name": "lcnr",
        "timestamp": 1612957462
    },
    {
        "content": "<p>i think the first error really shouldn't happen here</p>",
        "id": 225824306,
        "sender_full_name": "lcnr",
        "timestamp": 1612957500
    },
    {
        "content": "<p>i really have to learn more about the type system <span aria-label=\"concerned\" class=\"emoji emoji-1f615\" role=\"img\" title=\"concerned\">:concerned:</span></p>",
        "id": 225824508,
        "sender_full_name": "lcnr",
        "timestamp": 1612957630
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> can we require some predicates to hold as a prerequisite before checking if another predicate holds?</p>\n<p>from what I can tell that isn't easily possible rn</p>",
        "id": 225826397,
        "sender_full_name": "lcnr",
        "timestamp": 1612958880
    },
    {
        "content": "<p>That's not really possible</p>",
        "id": 225871334,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612976389
    },
    {
        "content": "<p>Is your concern about the first error that it's a user diagnostics fail</p>",
        "id": 225871352,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612976401
    },
    {
        "content": "<p>Or something else</p>",
        "id": 225871387,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612976402
    },
    {
        "content": "<p>I should say it's not possible <em>right now</em>, yeah</p>",
        "id": 225871503,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612976438
    },
    {
        "content": "<p>It's probably not the approach I would take anyway</p>",
        "id": 225871530,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612976449
    },
    {
        "content": "<p>the first error is caused because we execute an anon const while its caller bounds don't actually hold</p>",
        "id": 225871904,
        "sender_full_name": "lcnr",
        "timestamp": 1612976601
    },
    {
        "content": "<p>so while typechecking <code>std::mem::size_of::&lt;T&gt;()</code> in the above example we assume <code>T: Sized</code> to hold which isn't actually true when executing <code>std::mem::size_of::&lt;T&gt;()</code> later on</p>",
        "id": 225872086,
        "sender_full_name": "lcnr",
        "timestamp": 1612976671
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(const_generics, const_evaluatable_checked)]</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Assoc</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">ASSOC</span>: <span class=\"o\">&lt;</span><span class=\"bp\">Self</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&gt;</span>::<span class=\"n\">Assoc</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Assoc</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">ASSOC</span>: <span class=\"kt\">i64</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">forget</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">3</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">T</span>: <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">Assoc</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">bar</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&gt;</span>::<span class=\"n\">ASSOC</span><span class=\"p\">)]</span>: <span class=\"nb\">Sized</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">foo</span>::<span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 225872849,
        "sender_full_name": "lcnr",
        "timestamp": 1612976969
    },
    {
        "content": "<p>and we can't really deal with the caller bounds being incorrect</p>",
        "id": 225872976,
        "sender_full_name": "lcnr",
        "timestamp": 1612977008
    },
    {
        "content": "<p>this example causes an ice during const eval:</p>\n<div class=\"codehilite\"><pre><span></span><code>error: internal compiler error: /rustc/097bc6a84f2280a889b9ab4b544f27851a978927/compiler/rustc_middle/src/ty/consts/int.rs:228:13: expected int of size 4, but got size 8\n</code></pre></div>",
        "id": 225873454,
        "sender_full_name": "lcnr",
        "timestamp": 1612977227
    },
    {
        "content": "<p>I was about to ask if this was actually problematic but then bam ICE <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 225873551,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1612977258
    },
    {
        "content": "<p>tbh I am really surprised that I've never thought of this before today <span aria-label=\"shock\" class=\"emoji emoji-1f628\" role=\"img\" title=\"shock\">:shock:</span> this feels like such a fundamental issue to me now</p>",
        "id": 225874585,
        "sender_full_name": "lcnr",
        "timestamp": 1612977686
    },
    {
        "content": "<p>^^\"</p>",
        "id": 225874606,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1612977697
    },
    {
        "content": "<p>isn't this just one of the problems where we execute const eval without running typeck first?</p>",
        "id": 225981348,
        "sender_full_name": "oli",
        "timestamp": 1613045630
    },
    {
        "content": "<p>like... if we changed the ICE to a (potentially silent?) error, everything would just work and put out the correct error</p>",
        "id": 225981426,
        "sender_full_name": "oli",
        "timestamp": 1613045657
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/anon.20const.20in.20where.20bounds/near/225981348\">said</a>:</p>\n<blockquote>\n<p>isn't this just one of the problems where we execute const eval without running typeck first?</p>\n</blockquote>\n<p>do we want to guard mir building and ctfe again this though?</p>",
        "id": 225981651,
        "sender_full_name": "lcnr",
        "timestamp": 1613045815
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/anon.20const.20in.20where.20bounds/near/225981348\">said</a>:</p>\n<blockquote>\n<p>isn't this just one of the problems where we execute const eval without running typeck first?</p>\n</blockquote>\n<p>do we already have an issue for this?</p>",
        "id": 225982843,
        "sender_full_name": "lcnr",
        "timestamp": 1613046570
    },
    {
        "content": "<p>i already heard about that before but at that time it sounded to me like this is something we wanted to fix</p>",
        "id": 225982935,
        "sender_full_name": "lcnr",
        "timestamp": 1613046622
    },
    {
        "content": "<p>Kind of, the only one I found was <a href=\"https://github.com/rust-lang/rust/issues/79047\">https://github.com/rust-lang/rust/issues/79047</a> but I know there's another more general one</p>",
        "id": 225983476,
        "sender_full_name": "oli",
        "timestamp": 1613046933
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/69487\">https://github.com/rust-lang/rust/issues/69487</a></p>",
        "id": 225983582,
        "sender_full_name": "oli",
        "timestamp": 1613046996
    },
    {
        "content": "<p>hmm, yeah <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> these cases seem weird to me and i expect us to never try and evaluate these consts</p>",
        "id": 225984666,
        "sender_full_name": "lcnr",
        "timestamp": 1613047734
    },
    {
        "content": "<p>there have been multiple attempts at fixing that, but I've never scheduled the time to really dig into it</p>",
        "id": 225984733,
        "sender_full_name": "oli",
        "timestamp": 1613047778
    },
    {
        "content": "<p>i think i am going to take some time this weekend to look into this</p>",
        "id": 225984814,
        "sender_full_name": "lcnr",
        "timestamp": 1613047811
    },
    {
        "content": "<p>we have some superficial checks, but out of some reason not every typeck failure registers in <code>TypeckResults</code></p>",
        "id": 225984823,
        "sender_full_name": "oli",
        "timestamp": 1613047818
    },
    {
        "content": "<p>can we just add a global per query state to <code>TyCtxt</code></p>",
        "id": 225984894,
        "sender_full_name": "lcnr",
        "timestamp": 1613047870
    },
    {
        "content": "<p>so we add a flag <code>did_error</code> to queries</p>",
        "id": 225984923,
        "sender_full_name": "lcnr",
        "timestamp": 1613047891
    },
    {
        "content": "<p>which is <code>true</code> if we hit an while evaluating a query</p>",
        "id": 225984993,
        "sender_full_name": "lcnr",
        "timestamp": 1613047926
    },
    {
        "content": "<p>and we read at the end of <code>typeck</code></p>",
        "id": 225984998,
        "sender_full_name": "lcnr",
        "timestamp": 1613047934
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/anon.20const.20in.20where.20bounds/near/225984823\">said</a>:</p>\n<blockquote>\n<p>we have some superficial checks, but out of some reason not every typeck failure registers in <code>TypeckResults</code></p>\n</blockquote>\n<p>ah, that makes sense to me</p>",
        "id": 225985038,
        "sender_full_name": "lcnr",
        "timestamp": 1613047958
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/anon.20const.20in.20where.20bounds/near/225984993\">said</a>:</p>\n<blockquote>\n<p>which is <code>true</code> if we hit an while evaluating a query</p>\n</blockquote>\n<p>haha omg, that would be a game changer</p>",
        "id": 225985206,
        "sender_full_name": "oli",
        "timestamp": 1613048047
    },
    {
        "content": "<p>i thought about that for whether we want to normalize constants in queries</p>",
        "id": 225985250,
        "sender_full_name": "lcnr",
        "timestamp": 1613048090
    },
    {
        "content": "<p>just add some flags in the <code>TyCtxt</code> we set during queries</p>",
        "id": 225985272,
        "sender_full_name": "lcnr",
        "timestamp": 1613048108
    },
    {
        "content": "<p>which allows us to keep queries pure</p>",
        "id": 225985290,
        "sender_full_name": "lcnr",
        "timestamp": 1613048118
    },
    {
        "content": "<p>while still having easy ways to deal with stuff like this</p>",
        "id": 225985314,
        "sender_full_name": "lcnr",
        "timestamp": 1613048139
    },
    {
        "content": "<p>so similar to <code>TyCtxtAt</code> we'd have a <code>TyCtxtNormalizeConsts</code>?</p>",
        "id": 225985477,
        "sender_full_name": "oli",
        "timestamp": 1613048228
    },
    {
        "content": "<p>probably just</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">GlobalCtxt</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// ...</span>\n<span class=\"w\">    </span><span class=\"n\">normalize_consts</span>: <span class=\"nc\">Cell</span><span class=\"o\">&lt;</span><span class=\"kt\">bool</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 225985532,
        "sender_full_name": "lcnr",
        "timestamp": 1613048263
    },
    {
        "content": "<p>which we modify whenever we enter a new query</p>",
        "id": 225985603,
        "sender_full_name": "lcnr",
        "timestamp": 1613048296
    }
]