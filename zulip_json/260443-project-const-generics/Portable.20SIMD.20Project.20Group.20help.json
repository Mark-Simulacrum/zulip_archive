[
    {
        "content": "<p>Hi all, I'm coming with a question from <a class=\"stream\" data-stream-id=\"257879\" href=\"/#narrow/stream/257879-project-portable-simd\">#project-portable-simd</a> </p>\n<p>We are using const generics for arbitrary width SIMD vectors (like <code>struct SimdF32&lt;const LANES: usize&gt;([f32; LANES]);</code>)</p>\n<p>Unfortunately we're a little hung up on how to implement mask types.  We'd like some advice how to handle the following type (a follow-on to <a href=\"https://github.com/rust-lang/rust/issues/79778\">https://github.com/rust-lang/rust/issues/79778</a> and <a href=\"https://internals.rust-lang.org/t/about-const-expressions-in-types-or-why-we-dont-need-const-evaluatable-checked/13602/17\">https://internals.rust-lang.org/t/about-const-expressions-in-types-or-why-we-dont-need-const-evaluatable-checked/13602/17</a>, really):</p>\n<div class=\"codehilite\"><pre><span></span><code>#[repr(simd)]\nstruct Mask32&lt;const LANES: usize&gt;(\n    // on some architectures, masks get 1 bit per lane\n    #[cfg(target_arch = &quot;some_arch&quot;)] [u8; (LANES + 7) / 8],\n    // on other architectures, masks get many bits per lane\n    #[cfg(not(target_arch = &quot;some_arch&quot;)] [i32; LANES],\n);\n\nimpl&lt;const LANES: usize&gt; Mask32 {\n    // all architectures are convertible to 1 bit per lane\n    fn to_bits(self) -&gt; [u8; (LANES + 7) / 8] { /* compiler intrinsic */ }\n}\n</code></pre></div>\n<p>I think the important bit here is that <code>(LANES + 7) / 8</code> can be rewritten in a way that can't panic, so it seems a little unnecessary to expose bounds in the public API.  Additionally the bounds only apply to one of the two variants of the struct.  Any advice on how we should move forward with this?  Thanks!</p>\n<p>cc <span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span></p>",
        "id": 224816950,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1612228005
    },
    {
        "content": "<p>While I really want a feature where we can avoid const-evaluatable-bounds for \"division by known-non-zero\" and other guaranteed non-panicking operations (like <code>(some_u8 as u16) + 7</code>), the current feature is already very experimental and not fully fleshed out. Starting to intermix random exceptions will not just be surprising to users but also open the question to \"where do we stop\". I don't think any of us currently have the capacity to design, implement or even \"just\" review such a scheme.</p>",
        "id": 224848621,
        "sender_full_name": "oli",
        "timestamp": 1612259473
    },
    {
        "content": "<p>It is entirely forward compatible to later remove bounds, so my personal preference would be that you start by exposing those bounds to the users (maybe wrapped in a const fn, so you don't expose the details. That const fn can then exist on all <code>target_arch</code> and just doesn't do anything on some of them). This may be annoying, but it wouldn't be the first time we start out with a weird limitation and lift it later (const fn comes to mind here).</p>",
        "id": 224848846,
        "sender_full_name": "oli",
        "timestamp": 1612259609
    },
    {
        "content": "<p>Hmm, I didn't think of that. If removing a bound really is ok then it probably is fine.</p>",
        "id": 224909236,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1612288330
    },
    {
        "content": "<p>(without thinking too hard it seems fine)</p>",
        "id": 224909278,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1612288350
    },
    {
        "content": "<p>I think I may also try using a type alias in the bound to hide the const fn entirely. Not sure if #[doc(hidden)] is appropriate in std but we'll see.  Thanks for the suggestion</p>",
        "id": 224909951,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1612288635
    }
]