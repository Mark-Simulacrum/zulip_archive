[
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> <span class=\"user-group-mention\" data-user-group-id=\"3805\">@project-const-generics</span> and anyone else reading this</p>\n<p>after recently talking about it with <span class=\"user-mention\" data-user-id=\"326176\">@Boxy [she/her]</span>, here's a somewhat rough draft for an mvp of generic const exprs. Please take a look at it and give feedback on this: <a href=\"https://hackmd.io/utjHsFL8SWSu98kYfF99uQ\">https://hackmd.io/utjHsFL8SWSu98kYfF99uQ</a></p>\n<p>If you have any questions, suggestions or whatever, feel free to post these here. I am also interested in case you want to talk or chat about this in sync.</p>",
        "id": 267583686,
        "sender_full_name": "lcnr",
        "timestamp": 1641909317
    },
    {
        "content": "<p>the reason that I've started to consider this is that getting full <code>generic_const_exprs</code> ready for stabilization feels dauntingly difficult to me</p>",
        "id": 267584099,
        "sender_full_name": "lcnr",
        "timestamp": 1641909517
    },
    {
        "content": "<p>Hey, I don't quite understand why determining which substs are used in an anon const is hard. Could you maybe give an example? (please excuse my ignorance, I'm only starting to get into rustc <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>)</p>",
        "id": 267613998,
        "sender_full_name": "Dominik Stolz",
        "timestamp": 1641921339
    },
    {
        "content": "<p><span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span> fun read. I actually gained lifetime from reading this instead of it having taken time. I'm all for the MVP, as it seems easy to understand without any downsides. Its fully forward compatible to any scheme that was discussed, right?</p>",
        "id": 267616059,
        "sender_full_name": "oli",
        "timestamp": 1641922190
    },
    {
        "content": "<blockquote>\n<p>I don't quite understand why determining which substs are used in an anon const is hard.</p>\n</blockquote>\n<p>I think the problem is that you can use a generic param T without mentioning it: by using another generic param U that has a where bound that mentions T. Now you need to look at the where bounds to find the set of generic params. The where bounds could contain the very constant you are currently checking. Now you may end up trying to look into that</p>",
        "id": 267616459,
        "sender_full_name": "oli",
        "timestamp": 1641922361
    },
    {
        "content": "<p>Yeah I think the proposed solution is forwards compatible with whatever we want to do in the future <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> cant think of anything that it would disallow rn and couldn't think of anything when we wrote that.</p>",
        "id": 267630822,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1641928394
    },
    {
        "content": "<p><code>const&lt;N&gt; { N + 1 }</code> looks like an inline const to me.</p>",
        "id": 267630868,
        "sender_full_name": "Gary Guo",
        "timestamp": 1641928428
    },
    {
        "content": "<p>But inline const actually could safely reference generic params (not currently, but I am preparing a PR to allow it)</p>",
        "id": 267630964,
        "sender_full_name": "Gary Guo",
        "timestamp": 1641928471
    },
    {
        "content": "<p>Yeah its basically an inline const with what generics it uses explicitly mentioned</p>",
        "id": 267630993,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1641928491
    },
    {
        "content": "<p>maybe we have a different syntax or something i dont think its hugely important exactly _What_ the syntax is for purposes of getting <code>min_generic_const_exprs</code> done</p>",
        "id": 267631081,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1641928535
    },
    {
        "content": "<p>The syntax with <code>&lt;() as AddOne&lt;N&gt;&gt;::Added</code> is really confusing to me, and I think integrating crates with each other using that kind of syntax would be painful. I also am a bit lacking in why there's an additional <code>const&lt;N&gt; where [...] { ... }</code> syntax but I guess that's part of the bikeshedding. I'm worried that with more complex syntax or requiring additional structs it might come out like type soup, but I'm excited for this feature!</p>",
        "id": 267640925,
        "sender_full_name": "jknodt",
        "timestamp": 1641933142
    },
    {
        "content": "<p>should have made this a bit clearer <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> I don't think we ever want <code>&lt;() as AddOne&lt;N&gt;&gt;::Added</code>, we just wanted an example saying that both assoc consts and free named constants will work</p>",
        "id": 267641026,
        "sender_full_name": "lcnr",
        "timestamp": 1641933203
    },
    {
        "content": "<p>probably replace that with <code>&lt;Self as Encodable&gt;::SIZE</code> or something</p>",
        "id": 267641068,
        "sender_full_name": "lcnr",
        "timestamp": 1641933238
    },
    {
        "content": "<p><code>const&lt;N&gt; where ...</code> is some bikeshedable placeholder if we want to avoid named constants while still not implicitly using any parent generics</p>",
        "id": 267641183,
        "sender_full_name": "lcnr",
        "timestamp": 1641933287
    },
    {
        "content": "<p>i don't know whether we want something like that or just actually push for full <code>generic_const_exprs</code>, no matter how hard that might be</p>",
        "id": 267641228,
        "sender_full_name": "lcnr",
        "timestamp": 1641933314
    },
    {
        "content": "<p>considering that the only restrictions will by syntactic, e.g. going from <code>min_generic_const_exprs</code> to <code>generic_const_exprs</code> won't allow any new apis. it will just improve the experience of writing them (by a lot)</p>",
        "id": 267641421,
        "sender_full_name": "lcnr",
        "timestamp": 1641933414
    },
    {
        "content": "<p>I'm curious, what's the general use case for <code>generic_const_exprs</code>? I'm curious also about reading them as well, especially a large library that uses the feature</p>",
        "id": 267673993,
        "sender_full_name": "jknodt",
        "timestamp": 1641952971
    },
    {
        "content": "<p>I've wanted it in a few places, mostly the ability to use generic <code>size_of::&lt;T&gt;()</code> in array bounds, so I don't need to allocate a statically known amount of memory on the heap.</p>",
        "id": 267688133,
        "sender_full_name": "Connor Horman",
        "timestamp": 1641970660
    },
    {
        "content": "<p>i can think of three main usecases rn</p>\n<ul>\n<li>generic utility functions, mostly for arrays:</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">push</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">value</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">append</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">M</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">other</span>: <span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<ul>\n<li>changing the length of arrays in your own generic code, e.g using <code>[u8; size_of::&lt;T&gt;()]</code> or something like that. Often using an associated constants, e.g. <a href=\"https://docs.rs/odht/0.3.1/odht/trait.Config.html#associatedtype.EncodedKey\">https://docs.rs/odht/0.3.1/odht/trait.Config.html#associatedtype.EncodedKey</a> should just be <code>const KEY_LENGTH: usize</code>.</li>\n<li>in where clauses, e.g. restrict stuff to not be <code>0</code> or to be coprime (needed for some crypto algos afaik). We will see how that will work</li>\n</ul>",
        "id": 267692350,
        "sender_full_name": "lcnr",
        "timestamp": 1641974990
    },
    {
        "content": "<p>portable-simd wants it for bitmasks: <code>[u8; (N + 7) / 8]</code> for storage sufficient for <code>N</code> bits.</p>",
        "id": 267693895,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1641976155
    },
    {
        "content": "<p>it's also used for preprocessing const swizzles (cuz llvm's <code>shuffle</code> instruction requires the swizzle pattern to be const).</p>",
        "id": 267694078,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1641976263
    },
    {
        "content": "<p>interesting, so for those use cases it seems it wouldn't be pervasive, so it might be mostly across one function?</p>",
        "id": 267727034,
        "sender_full_name": "jknodt",
        "timestamp": 1641995757
    },
    {
        "content": "<p>what exactly do you mean with \"pervasive\" here? something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">uses_generic_fn_in_generic_context</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">arr</span>: <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">arr</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"c1\">// do you consider this to be pervasive because the `N + 1` of `push` has to unify with a different `N + 1`?</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 267727477,
        "sender_full_name": "lcnr",
        "timestamp": 1641995963
    },
    {
        "content": "<p>I think if it's implemented in trait definitions or structs, the same expression would need to be repeated across a lot of different instances. For a single function, it's less painful to have something like the other struct with associated consts. I'm not really thinking about it from an implementation perspective, but from a user/reader one</p>",
        "id": 267781064,
        "sender_full_name": "jknodt",
        "timestamp": 1642019129
    },
    {
        "content": "<p>I might be totally off-track tho, so if I'm not making any sense feel free to disregard</p>",
        "id": 267781101,
        "sender_full_name": "jknodt",
        "timestamp": 1642019153
    },
    {
        "content": "<p>while i don't know how often that will happen, i do see it being really annoying for complex constants like <code>ADD::&lt;MUL::&lt;N, 2&gt;, MUL::&lt;M, 4&gt;&gt;</code></p>",
        "id": 267832840,
        "sender_full_name": "lcnr",
        "timestamp": 1642059142
    },
    {
        "content": "<p>if you have to copy that across multiple signatures</p>",
        "id": 267832853,
        "sender_full_name": "lcnr",
        "timestamp": 1642059165
    },
    {
        "content": "<p>so having transparent consts would help with that e.g. add</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[transparent_const]</span><span class=\"w\"></span>\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">MY_DATA_LENGTH</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">M</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ADD</span>::<span class=\"o\">&lt;</span><span class=\"n\">MUL</span>::<span class=\"o\">&lt;</span><span class=\"n\">N</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">MUL</span>::<span class=\"o\">&lt;</span><span class=\"n\">M</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>but we do need a way to declare consts as transparent on stable, potentially right from the start <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> we could also wait for complaints and work on it without this in mind for now, considering a solution exists, even if it isn't completely clear how it should look</p>",
        "id": 267833023,
        "sender_full_name": "lcnr",
        "timestamp": 1642059306
    },
    {
        "content": "<p>Generic constants woooo</p>",
        "id": 267916674,
        "sender_full_name": "oli",
        "timestamp": 1642101358
    },
    {
        "content": "<p>What does \"transparent\" mean here?</p>",
        "id": 267920272,
        "sender_full_name": "Gary Guo",
        "timestamp": 1642103070
    },
    {
        "content": "<p>Like \"implementation is public API\", that compiler can assume that <code>[(); MY_DATA_SIZE&lt;3, 5&gt;]</code> is the same type as <code>[(); ADD::&lt;MUL::&lt;3, 2&gt;, MUL::&lt;5, 4&gt;&gt;]</code>, right?</p>",
        "id": 267921183,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1642103489
    },
    {
        "content": "<p>wrote a less in depth (but hopefully better organized) blogpost about this together with <span class=\"user-mention\" data-user-id=\"326176\">@Boxy [she/her]</span> : <a href=\"https://lcnr.de/blog/generic-const-expressions/\">https://lcnr.de/blog/generic-const-expressions/</a></p>",
        "id": 268264550,
        "sender_full_name": "lcnr",
        "timestamp": 1642422891
    }
]