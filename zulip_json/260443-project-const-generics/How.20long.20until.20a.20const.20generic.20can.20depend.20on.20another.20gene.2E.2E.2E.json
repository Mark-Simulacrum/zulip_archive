[
    {
        "content": "<p>Hello. I have two very similar types:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">VolBlockIter</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">W</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">crate</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">base</span>: <span class=\"nc\">VolAddress</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">W</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">crate</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">count</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">VolSeriesIter</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">W</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">S</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">crate</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">base</span>: <span class=\"nc\">VolAddress</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">W</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">crate</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">count</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>And I would like to collapse them down so that there's just one struct, the second one with the const generic, and things that currently return the first struct can automatically fill in <code>S</code> with <code>size_of::&lt;T&gt;()</code>.</p>\n<p>rustc says I cannot do this, and doesn't even suggest a nightly feature for how to enable this. Is it actually a close sort of development that might exist by the end of the year? or is it one of those very tricky projects that will take a multi-stage effort to complete?</p>",
        "id": 245894090,
        "sender_full_name": "Lokathor",
        "timestamp": 1626212941
    },
    {
        "content": "<p>that sounds like you might want <code>const_generics_defaults</code> ?</p>",
        "id": 245894159,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1626212987
    },
    {
        "content": "<p><code>struct Foo&lt;T, const N: usize = { std::mem::size_of::&lt;T&gt;() }&gt;</code> ?</p>",
        "id": 245894182,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1626213001
    },
    {
        "content": "<p>hm, okay, so I can set a default using that, <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=65801fc9c0b9046b4598a3c31a3e095c\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=65801fc9c0b9046b4598a3c31a3e095c</a></p>\n<p>so now I need to ask about the simplicity/timeline of both <code>const_generics_defaults</code> and apparently also <code>const_evaluable_checked</code>.</p>\n<p>Can there perhaps be a <code>min_const_evaluable_checked</code> for the operations that trivially never fail to evaluate? Eg: size_of, align_of, bitand, bitor, bitxor.</p>",
        "id": 245897117,
        "sender_full_name": "Lokathor",
        "timestamp": 1626214891
    },
    {
        "content": "<p>const_generics_defaults its basically completed impl wise and is pretty close to stabilisation (imo)</p>",
        "id": 245897214,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1626214946
    },
    {
        "content": "<p>const_evaluatable_checked is far far off ^^'</p>",
        "id": 245897277,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1626214998
    },
    {
        "content": "<p>yeah it seems to be the forever lurking demon</p>",
        "id": 245897293,
        "sender_full_name": "Lokathor",
        "timestamp": 1626215021
    },
    {
        "content": "<p>im not sure about the idea of <code>min_const_evaluatable_checked</code>i feel Like there's probably corners we can cut for defaults that that never fail to evaluate</p>",
        "id": 245897463,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1626215153
    },
    {
        "content": "<p>just from an ergonomics-using-const_evaluatable_checked perspective</p>",
        "id": 245897609,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1626215253
    },
    {
        "content": "<p>it seems nice to allow those things without an evaluatable bound</p>",
        "id": 245897616,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1626215266
    },
    {
        "content": "<p>there's problems with const_evaluatable_checked though that arent solved by only permitting expressions that cant fail to evaluate</p>",
        "id": 245897719,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1626215326
    },
    {
        "content": "<p>afaik most (all?) are not problems for using complex expression in cg defaults</p>",
        "id": 245897736,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1626215349
    },
    {
        "content": "<p>im ramblign a bit at this point :)</p>",
        "id": 245897777,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1626215386
    },
    {
        "content": "<p>i expect we can support the use case of <code>const N: usize = { std::mem::size_of::&lt;T&gt;() }</code> without requiring evaluatable bounds long before const_evalautable_checked is stabilised</p>",
        "id": 245897925,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1626215475
    },
    {
        "content": "<p>it seems technically feasible at the very least ^^</p>",
        "id": 245897938,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1626215486
    },
    {
        "content": "<p>right now cgdefaults + const evaluatable checked isnt super usable though</p>",
        "id": 245897969,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1626215509
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=a5876e6cc2c14868756ccef1cbff788d\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=a5876e6cc2c14868756ccef1cbff788d</a></p>",
        "id": 245898040,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1626215542
    },
    {
        "content": "<p>actually have the defaults be you know... used like a default</p>",
        "id": 245898050,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1626215555
    },
    {
        "content": "<p>causes an ice</p>",
        "id": 245898052,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1626215557
    },
    {
        "content": "<p>(there's a PR open to fix it)</p>",
        "id": 245898058,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1626215562
    },
    {
        "content": "<p>Sound distant enough that I should send out the 1.0 of this crate now and then do a 2.0 some day in the future if anyone even cares about collapsing the two iterator types together (maybe no one really cares about merging the two types).</p>",
        "id": 245898087,
        "sender_full_name": "Lokathor",
        "timestamp": 1626215587
    },
    {
        "content": "<p>^^</p>",
        "id": 245898111,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1626215612
    }
]