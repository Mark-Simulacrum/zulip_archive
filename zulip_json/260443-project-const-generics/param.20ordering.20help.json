[
    {
        "content": "<p><code>feature(const_generics)</code> allows types and consts to be arbitrarily ordered, while <code>min_const_generics</code> does not.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>results in:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span>: <span class=\"nc\">type</span><span class=\"w\"> </span><span class=\"n\">parameters</span><span class=\"w\"> </span><span class=\"n\">must</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">declared</span><span class=\"w\"> </span><span class=\"n\">prior</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">parameters</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">src</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">3</span>:<span class=\"mi\">28</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\">           </span><span class=\"o\">-----------------^-</span><span class=\"w\"> </span><span class=\"n\">help</span>: <span class=\"nc\">reorder</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">parameters</span>: <span class=\"nc\">lifetimes</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">then</span><span class=\"w\"> </span><span class=\"n\">types</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">then</span><span class=\"w\"> </span><span class=\"n\">consts</span>: <span class=\"err\">`</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"err\">`</span><span class=\"w\"></span>\n\n<span class=\"n\">error</span>: <span class=\"nc\">aborting</span><span class=\"w\"> </span><span class=\"n\">due</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">previous</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"></span>\n</code></pre></div>\n<p>it would be really nice to add a help message recommending <code>feature(const_generics)</code> if the user is on nightly.</p>\n<p><span class=\"user-group-mention\" data-user-group-id=\"3805\">@project-const-generics</span> one of you interested in implementing this?</p>",
        "id": 232017498,
        "sender_full_name": "lcnr",
        "timestamp": 1616785867
    },
    {
        "content": "<p>Lmao</p>",
        "id": 232017529,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1616785886
    },
    {
        "content": "<p>i was just about to say \"maybe I should PR an error message for this\"</p>",
        "id": 232017542,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1616785897
    },
    {
        "content": "<p>is that a \"I will PR an error message for this\"? <span aria-label=\"sparkles\" class=\"emoji emoji-2728\" role=\"img\" title=\"sparkles\">:sparkles:</span></p>",
        "id": 232017722,
        "sender_full_name": "lcnr",
        "timestamp": 1616785991
    },
    {
        "content": "<p>aaaaaaaa maybe</p>",
        "id": 232018114,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1616786196
    },
    {
        "content": "<p>if I don't forget <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 232018138,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1616786210
    },
    {
        "content": "<p>it probably wouldn't be too hard to do right lol?</p>",
        "id": 232018465,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1616786378
    },
    {
        "content": "<p>shouldn't be too bad, yeah <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 232020125,
        "sender_full_name": "lcnr",
        "timestamp": 1616787187
    },
    {
        "content": "<p>ill try get to doing this soon then :P</p>",
        "id": 232022782,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1616788437
    },
    {
        "content": "<p>Can't we just stabilise relaxed parameter ordering instead?</p>",
        "id": 232042794,
        "sender_full_name": "varkor",
        "timestamp": 1616799470
    },
    {
        "content": "<p>That seems to be what we want to do anyway.</p>",
        "id": 232042824,
        "sender_full_name": "varkor",
        "timestamp": 1616799483
    },
    {
        "content": "<p>is that thing we can just do<span aria-label=\"tm\" class=\"emoji emoji-2122\" role=\"img\" title=\"tm\">:tm:</span></p>",
        "id": 232042864,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1616799512
    },
    {
        "content": "<p>would also work <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 232075981,
        "sender_full_name": "lcnr",
        "timestamp": 1616835309
    },
    {
        "content": "<p>are there still some bad error messages we have to deal with?</p>",
        "id": 232075997,
        "sender_full_name": "lcnr",
        "timestamp": 1616835332
    },
    {
        "content": "<p>(they’re less important, but I think the ones involving defaults may have issues sometimes, e.g. mixed with defaulted type parameters IIRC. last I checked the Ord impl used to order all generic params didn’t take defaults into account, causing misorderings in diagnostics, some re-checking and re-sorting, etc)</p>",
        "id": 232078910,
        "sender_full_name": "lqd",
        "timestamp": 1616838904
    },
    {
        "content": "<p>i think <span class=\"user-mention\" data-user-id=\"326189\">@jknodt</span> fixed the param ord issue, though we might sort parameters in some other way which is not yet fixed</p>",
        "id": 232081101,
        "sender_full_name": "lcnr",
        "timestamp": 1616841477
    },
    {
        "content": "<p>tbh, it's probably enough to:</p>",
        "id": 232081161,
        "sender_full_name": "lcnr",
        "timestamp": 1616841538
    },
    {
        "content": "<ul>\n<li>look at the current tests and figure out if there is anything that's missing</li>\n</ul>",
        "id": 232081177,
        "sender_full_name": "lcnr",
        "timestamp": 1616841561
    },
    {
        "content": "<ul>\n<li>search for <code>types, then consts</code> or just <code>types.*consts</code> and <code>consts.*types</code> to check if there is anything obvious that's missing</li>\n</ul>",
        "id": 232081229,
        "sender_full_name": "lcnr",
        "timestamp": 1616841607
    },
    {
        "content": "<ul>\n<li>change the ordering to always be unordered, fix the help messages for type param defaults with const params</li>\n</ul>",
        "id": 232081287,
        "sender_full_name": "lcnr",
        "timestamp": 1616841673
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/feaac19f1710ebcfecc783d51f52a9b0d8e998f5/compiler/rustc_ast/src/ast.rs#L330-L354\">https://github.com/rust-lang/rust/blob/feaac19f1710ebcfecc783d51f52a9b0d8e998f5/compiler/rustc_ast/src/ast.rs#L330-L354</a> defaulted types are not taken into account</p>",
        "id": 232081368,
        "sender_full_name": "lqd",
        "timestamp": 1616841770
    },
    {
        "content": "<ul>\n<li>open PR with a short stabilization report, summarizing why we want params to be unordered</li>\n</ul>",
        "id": 232081369,
        "sender_full_name": "lcnr",
        "timestamp": 1616841772
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/param.20ordering.20help/near/232081368\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/rust-lang/rust/blob/feaac19f1710ebcfecc783d51f52a9b0d8e998f5/compiler/rustc_ast/src/ast.rs#L330-L354\">https://github.com/rust-lang/rust/blob/feaac19f1710ebcfecc783d51f52a9b0d8e998f5/compiler/rustc_ast/src/ast.rs#L330-L354</a> defaulted types are not taken into account</p>\n</blockquote>\n<p>hm, is that a problem though?</p>",
        "id": 232081384,
        "sender_full_name": "lcnr",
        "timestamp": 1616841809
    },
    {
        "content": "<p>i think the check that param defaults come last is somewhere else</p>",
        "id": 232081435,
        "sender_full_name": "lcnr",
        "timestamp": 1616841844
    },
    {
        "content": "<p>when you have both defaulted types and defaulted consts, yes</p>",
        "id": 232081437,
        "sender_full_name": "lqd",
        "timestamp": 1616841846
    },
    {
        "content": "<p>the Ord impl will misorder them in diagnostics some times</p>",
        "id": 232081450,
        "sender_full_name": "lqd",
        "timestamp": 1616841863
    },
    {
        "content": "<p>type and consts have the same ord if <code>unordered</code> is true</p>",
        "id": 232081455,
        "sender_full_name": "lcnr",
        "timestamp": 1616841871
    },
    {
        "content": "<p>not sure why we would misorder them</p>",
        "id": 232081458,
        "sender_full_name": "lcnr",
        "timestamp": 1616841879
    },
    {
        "content": "<p>not when there are defaults involved, which must be trailing</p>",
        "id": 232081966,
        "sender_full_name": "lqd",
        "timestamp": 1616842538
    },
    {
        "content": "<p>can you think of an example where this is a problem?</p>",
        "id": 232082006,
        "sender_full_name": "lcnr",
        "timestamp": 1616842567
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=8e6aca54224dcd9439f6a7f2c25604ef\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=8e6aca54224dcd9439f6a7f2c25604ef</a></p>",
        "id": 232082015,
        "sender_full_name": "lqd",
        "timestamp": 1616842578
    },
    {
        "content": "<p><code>&lt;'a, V = u8, const N: usize&gt;</code> in the suggestion is incorrect</p>",
        "id": 232082021,
        "sender_full_name": "lqd",
        "timestamp": 1616842597
    },
    {
        "content": "<p>because of the Ord issue I mentioned</p>",
        "id": 232082028,
        "sender_full_name": "lqd",
        "timestamp": 1616842607
    },
    {
        "content": "<p>yeah, but with <code>feature(const_generics)</code> this suggestion is fixed</p>",
        "id": 232082031,
        "sender_full_name": "lcnr",
        "timestamp": 1616842618
    },
    {
        "content": "<p>and/or the code with checks the ordering and computes the suggestion ofc ^^</p>",
        "id": 232082037,
        "sender_full_name": "lqd",
        "timestamp": 1616842626
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=989353ea43ded486561c4f222f9446e7\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=989353ea43ded486561c4f222f9446e7</a></p>",
        "id": 232082052,
        "sender_full_name": "lcnr",
        "timestamp": 1616842651
    },
    {
        "content": "<p>are you asking for examples of \"bad error messages\" that don't work today, or that wouldn't work when they are unordered ?</p>",
        "id": 232082124,
        "sender_full_name": "lqd",
        "timestamp": 1616842747
    },
    {
        "content": "<p>i am looking for bad error meesage we will have to deal with once we allow unordered consts/types</p>",
        "id": 232082138,
        "sender_full_name": "lcnr",
        "timestamp": 1616842781
    },
    {
        "content": "<p>so anything we have to be careful about when we stabilize unordered ty/consts</p>",
        "id": 232082188,
        "sender_full_name": "lcnr",
        "timestamp": 1616842806
    },
    {
        "content": "<p>so messages that won't work when they are unordered <strong>and</strong> aren't already fixed if <code>const_generics</code> is enabled</p>",
        "id": 232082244,
        "sender_full_name": "lcnr",
        "timestamp": 1616842854
    },
    {
        "content": "<p>ok that wasn't clear to me, sorry</p>",
        "id": 232082259,
        "sender_full_name": "lqd",
        "timestamp": 1616842863
    },
    {
        "content": "<p>I thought you were asking about today's ordering, I don't remember from the top of my head if I saw bad ones with relaxed ordering but will check</p>",
        "id": 232082286,
        "sender_full_name": "lqd",
        "timestamp": 1616842918
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=a5a92de28b764c0210c8ab640767ee60\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=a5a92de28b764c0210c8ab640767ee60</a></p>",
        "id": 232082796,
        "sender_full_name": "lqd",
        "timestamp": 1616843479
    },
    {
        "content": "<p>that one is interesting <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> we already have the same issue with just type params <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 232082851,
        "sender_full_name": "lcnr",
        "timestamp": 1616843526
    },
    {
        "content": "<p>this one has a few in the ordering, and missing defaults in the mesg</p>",
        "id": 232082860,
        "sender_full_name": "lqd",
        "timestamp": 1616843538
    },
    {
        "content": "<p>IIUC, yes, that is related to the <code>Ord</code> impl above</p>",
        "id": 232082885,
        "sender_full_name": "lqd",
        "timestamp": 1616843576
    },
    {
        "content": "<p>ah yeah, the missing defaults are something we have to fix <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 232082892,
        "sender_full_name": "lcnr",
        "timestamp": 1616843588
    },
    {
        "content": "<p>I had already fixed it in my branch IIRC</p>",
        "id": 232082968,
        "sender_full_name": "lqd",
        "timestamp": 1616843648
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/param.20ordering.20help/near/232082885\">said</a>:</p>\n<blockquote>\n<p>IIUC, yes, that is related to the <code>Ord</code> impl above</p>\n</blockquote>\n<p>that's the same issue only for types: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=2e9948590557d5becd190b2ac7bbfcf3\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=2e9948590557d5becd190b2ac7bbfcf3</a></p>",
        "id": 232083008,
        "sender_full_name": "lcnr",
        "timestamp": 1616843723
    },
    {
        "content": "<p>i think it is fine to require two steps when just following the one error message here</p>",
        "id": 232083028,
        "sender_full_name": "lcnr",
        "timestamp": 1616843743
    },
    {
        "content": "<p>though of course it would be good to get this completely right and consider defaults here if it isn't too much work</p>",
        "id": 232083079,
        "sender_full_name": "lcnr",
        "timestamp": 1616843774
    },
    {
        "content": "<p>it was more scary to me changing the whole ordering than a question of how much work <span aria-label=\"scream\" class=\"emoji emoji-1f631\" role=\"img\" title=\"scream\">:scream:</span> I wasn't sure (and still am) whether just <a href=\"https://github.com/lqd/rust/blob/more_const_generics_defaults/compiler/rustc_ast/src/ast.rs#L310-L350\">https://github.com/lqd/rust/blob/more_const_generics_defaults/compiler/rustc_ast/src/ast.rs#L310-L350</a> would have implications elsewhere</p>",
        "id": 232083663,
        "sender_full_name": "lqd",
        "timestamp": 1616844422
    },
    {
        "content": "<p>but yeah some of that work improved diagnostics slightly <a href=\"https://github.com/lqd/rust/blob/more_const_generics_defaults/src/test/ui/const-generics/defaults/const-defaults-order.full.stderr\">https://github.com/lqd/rust/blob/more_const_generics_defaults/src/test/ui/const-generics/defaults/const-defaults-order.full.stderr</a></p>",
        "id": 232083731,
        "sender_full_name": "lqd",
        "timestamp": 1616844501
    },
    {
        "content": "<p><span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 232083945,
        "sender_full_name": "lcnr",
        "timestamp": 1616844771
    },
    {
        "content": "<p>but in truth I looked at this mostly so that <a href=\"https://github.com/lqd/rust/blob/more_const_generics_defaults/compiler/rustc_ast_passes/src/ast_validation.rs#L720-L852\"><code>validate_generic_param_order</code></a> doesn't have to do all that work when the parameters are already correctly sorted</p>",
        "id": 232083947,
        "sender_full_name": "lqd",
        "timestamp": 1616844772
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/param.20ordering.20help/near/232083663\">said</a>:</p>\n<blockquote>\n<p>it was more scary to me changing the whole ordering than a question of how much work <span aria-label=\"scream\" class=\"emoji emoji-1f631\" role=\"img\" title=\"scream\">:scream:</span> I wasn't sure (and still am) whether just <a href=\"https://github.com/lqd/rust/blob/more_const_generics_defaults/compiler/rustc_ast/src/ast.rs#L310-L350\">https://github.com/lqd/rust/blob/more_const_generics_defaults/compiler/rustc_ast/src/ast.rs#L310-L350</a> would have implications elsewhere</p>\n</blockquote>\n<p>there's <a href=\"https://github.com/rust-lang/rust/issues/83556\">https://github.com/rust-lang/rust/issues/83556</a> which is probably caused by us sorting params if they are incorrectly ordered</p>",
        "id": 232084179,
        "sender_full_name": "lcnr",
        "timestamp": 1616844996
    },
    {
        "content": "<p>if they're only sorted in diagnostics, we could fix that without much worry; I was mostly concerned about other unexpected consequences, say e.g. on the order of substs (though of course I'm not sure whether that would in fact change and whether defaults would need to be involved if that happened) if you all think this is safe enough, I can try to rebase that work on ordering and diagnostics, so at least CI gets a chance to see if that'd cause regressions</p>",
        "id": 232084508,
        "sender_full_name": "lqd",
        "timestamp": 1616845384
    },
    {
        "content": "<blockquote>\n<p>if they're only sorted in diagnostics,</p>\n</blockquote>\n<p>not completely sure, it probably makes sense to check where <code>ParamKindOrd</code> is used</p>",
        "id": 232084566,
        "sender_full_name": "lcnr",
        "timestamp": 1616845453
    },
    {
        "content": "<p>but yeah, opening a PR is probably good</p>",
        "id": 232084574,
        "sender_full_name": "lcnr",
        "timestamp": 1616845462
    },
    {
        "content": "<p>the efficiency gain on <code>validate_generic_param_order</code> was so small that I didn't feel the need to push this to completion</p>",
        "id": 232084579,
        "sender_full_name": "lqd",
        "timestamp": 1616845470
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/param.20ordering.20help/near/232084574\">said</a>:</p>\n<blockquote>\n<p>but yeah, opening a PR is probably good</p>\n</blockquote>\n<p>will do</p>",
        "id": 232084928,
        "sender_full_name": "lqd",
        "timestamp": 1616845862
    },
    {
        "content": "<blockquote>\n<p>I was mostly concerned about other unexpected consequences, say e.g. on the order of substs</p>\n</blockquote>\n<p>I'm pretty sure all the (explicit) reliance on ordering was fixed a while back. I think the only way to know now is to write a number of tests for arbitrary parameter ordering to make sure nothing is going wrong.</p>",
        "id": 232097121,
        "sender_full_name": "varkor",
        "timestamp": 1616858631
    },
    {
        "content": "<p>just curious, is there anything like quickcheck in the compiler for permutation testing?</p>",
        "id": 232105860,
        "sender_full_name": "jknodt",
        "timestamp": 1616866974
    },
    {
        "content": "<p>i think not, i've seen some issue which were found by something like that. But i can't remember the name of that program rn</p>",
        "id": 232106724,
        "sender_full_name": "lcnr",
        "timestamp": 1616867798
    },
    {
        "content": "<p>heh, fixing the defaulted types' order makes <code>struct Foo&lt;'a, const N: usize, T = u32&gt;(&amp;'a (), T);</code> unexpectedly compile under <code>min_const_generics</code>. the incompatibility check seems to rely on the incorrect ordering (and does not emit a dedicated error or note for that case today, only the incorrect ordering one)</p>",
        "id": 232124771,
        "sender_full_name": "lqd",
        "timestamp": 1616886396
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span>: I think I'm misinterpreting what you're saying. The following emits an error on stable:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// error: type parameters must be declared prior to const parameters</span>\n</code></pre></div>\n<p>Is this not what you mean?</p>",
        "id": 232158589,
        "sender_full_name": "varkor",
        "timestamp": 1616928105
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> it is what I mean indeed: that error is incorrect (but saves us here), T cannot be declared before N. That code is still erroneous under <code>min_const_generics</code> of course, but no errors or messages about the incompatibility between defaulted types and const generics are emitted. Fixing the <code>ParamKindOrd</code> <code>Ord</code> impl w.r.t defaulted types makes it that this already correct ordering does not trigger the error you mention; the missing <code>min_const_generics</code> incompatibility error here means that the code compiles (on my branch with the fix).</p>",
        "id": 232161804,
        "sender_full_name": "lqd",
        "timestamp": 1616932003
    },
    {
        "content": "<p>the defaulted types + consts incompatibility note, emitted <a href=\"https://github.com/rust-lang/rust/blob/505ed7fb1b45236b312099b00be78175d67499a7/compiler/rustc_ast_passes/src/ast_validation.rs#L1153-L1180\">here</a>, only happens as part of a misordered defaulted parameter's error, and if const generics defaults are not enabled (which is probably erroneous as well, no const generics defaults are involved here)</p>",
        "id": 232162067,
        "sender_full_name": "lqd",
        "timestamp": 1616932362
    },
    {
        "content": "<p>but it's ok I'll take care of this at the same time :)</p>",
        "id": 232162108,
        "sender_full_name": "lqd",
        "timestamp": 1616932442
    },
    {
        "content": "<p>It seems correct to me: the defaulted type parameter is still a type parameter. (Though I agree it's not a helpful error message!)</p>",
        "id": 232178291,
        "sender_full_name": "varkor",
        "timestamp": 1616950132
    },
    {
        "content": "<p>sorry I'm not sure I understand what you mean :/ defaulted parameters cannot be declared prior to other non-defaulted parameters</p>",
        "id": 232179368,
        "sender_full_name": "lqd",
        "timestamp": 1616951216
    },
    {
        "content": "<p>but it's ok, the better solution will be to relax the ordering as you've mentioned anyway</p>",
        "id": 232179603,
        "sender_full_name": "lqd",
        "timestamp": 1616951431
    },
    {
        "content": "<p>(rather than a bunch of things I'm doing now)</p>",
        "id": 232179624,
        "sender_full_name": "lqd",
        "timestamp": 1616951459
    },
    {
        "content": "<blockquote>\n<p>sorry I'm not sure I understand what you mean :/ defaulted parameters cannot be declared prior to other non-defaulted parameters</p>\n</blockquote>\n<p>That's also true. The constraints are impossible to satisfy :P</p>",
        "id": 232187995,
        "sender_full_name": "varkor",
        "timestamp": 1616960241
    }
]