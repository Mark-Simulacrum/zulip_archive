[
    {
        "content": "<p>Hiya. I'm investigating <a href=\"https://github.com/rust-lang/rust/issues/94287\">#94287</a>, and I noticed a strange quirk with the feature flag <code>generic_const_exprs</code> and child crates depending on parent crates with this feature flag enabled.</p>",
        "id": 273322382,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1645857245
    },
    {
        "content": "<p>During codegen for the doc test provided in the issue, we try to normalize a function signature from the parent crate, but because that feature flag is not enabled in the child (doc-test) crate, we fail to normalize an associated type due to <a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_trait_selection/src/traits/const_evaluatable.rs#L38\">feature-flag-exclusive logic</a> being disabled.</p>",
        "id": 273322388,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1645857254
    },
    {
        "content": "<p>Has anyone seen anything similar (ICEs, normalization failure shenanigans) with <code>#![feature(generic_const_exprs)]</code> being enabled in a parent crate and not being enabled a child crate?</p>",
        "id": 273322405,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1645857313
    },
    {
        "content": "<p>also, I can think of a few \"quick fixes\" for the issue (and I almost put one up before I tried to investigate deeper), but I wanted to know what folks thought a good solution would be...</p>",
        "id": 273322469,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1645857449
    },
    {
        "content": "<p>specifically, the bad normalization call is <a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_middle/src/ty/layout.rs#L2594\">here</a> -- we could either: </p>\n<ol>\n<li>fall back to using  <code>try_normalize_erasing_regions</code> and then undo the hack mentioned in the comment above, by substituting <em>then</em> normalizing, which ends up succeeding</li>\n<li>save this normalized fn_sig as query to disk, so that we only load the version of <code>normalize_erasing_regions(fn_sig(def_id))</code> that was evaluated in the parent crate (and thus with <code>generic_const_exprs</code> enabled).</li>\n<li>modify the logic in <a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_trait_selection/src/traits/const_evaluatable.rs#L38\"><code>is_const_evaluatable</code></a> to not just look at the session's feature flags, but factor in the crate that the unevaluated constant comes from somehow?</li>\n</ol>",
        "id": 273322613,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1645857714
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"426609\">Michael Goulet (compiler-errors)</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/.60.23!.5Bfeature.28generic_const_exprs.29.5D.60.20and.20ICEs.20in.20child.20crates/near/273322405\">said</a>:</p>\n<blockquote>\n<p>Has anyone seen anything similar (ICEs, normalization failure shenanigans) with <code>#![feature(generic_const_exprs)]</code> being enabled in a parent crate and not being enabled a child crate?</p>\n</blockquote>\n<p>theres an old issue open the <code>label:F-generic_const_exprs</code> about this iirc</p>",
        "id": 273345829,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1645888022
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/79018\">#79018</a></p>",
        "id": 273345856,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1645888072
    },
    {
        "content": "<p>good to know, thanks <span class=\"user-mention silent\" data-user-id=\"326176\">Boxy [she/her]</span></p>",
        "id": 273354206,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1645898463
    },
    {
        "content": "<p>hrm, it's frustrating that it seems like there's no good solution to this issue :/</p>",
        "id": 273354226,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1645898500
    },
    {
        "content": "<p>I guess that's part of what you get with an <code>incomplete_feature</code></p>",
        "id": 273354228,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1645898501
    },
    {
        "content": "<p>oh yeah this entire feature is very \"no good solution\" to a lot of things for a while :)</p>",
        "id": 273354232,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1645898520
    },
    {
        "content": "<p>only very very recently did we figure out a way to move forward on some of the issues lol</p>",
        "id": 273354273,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1645898535
    },
    {
        "content": "<p>is it possible to when ICEing check if the current crate has the feature enabled but the upstream doesnt? <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 273354278,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1645898565
    },
    {
        "content": "<p>because at the best case we could ICE with a better message saying to enable the feature</p>",
        "id": 273354280,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1645898576
    },
    {
        "content": "<p>yeah, the ICE is somewhat separated from<code>is_const_evaluatable</code>.. I wonder if we can at least emit a warning in that function that happens before the ICE.</p>",
        "id": 273354468,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1645898846
    }
]