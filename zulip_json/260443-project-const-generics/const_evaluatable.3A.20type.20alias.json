[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(const_generics, const_evaluatable_checked)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![allow(incomplete_features)]</span><span class=\"w\"></span>\n\n<span class=\"k\">type</span> <span class=\"nc\">Alias</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">];</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">M</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Alias</span><span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 224165538,
        "sender_full_name": "lcnr",
        "timestamp": 1611745177
    },
    {
        "content": "<p>uwu</p>\n<div class=\"codehilite\"><pre><span></span><code>error: internal compiler error: compiler/rustc_middle/src/ty/subst.rs:516:17: expected type for `T/#0` (T/0) but found Const(Const { ty: usize, val: Param(M/#0) }) when substituting, substs=[Const { ty: usize, val: Param(M/#0) }]\n\nthread &#39;rustc&#39; panicked at &#39;Box&lt;Any&gt;&#39;, /rustc/d1aed50ab81df3140977c610c5a7d00f36dc519f/compiler/rustc_errors/src/lib.rs:904:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\nnote: the compiler unexpectedly panicked. this is a bug.\n\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&amp;template=ice.md\n\nnote: rustc 1.51.0-nightly (d1aed50ab 2021-01-26) running on x86_64-unknown-linux-gnu\n\nnote: compiler flags: -C embed-bitcode=no -C codegen-units=1 -C debuginfo=2 --crate-type lib\n\nnote: some of the compiler flags provided by cargo are hidden\n</code></pre></div>",
        "id": 224165547,
        "sender_full_name": "lcnr",
        "timestamp": 1611745188
    },
    {
        "content": "<p>the issue is here <a href=\"https://github.com/rust-lang/rust/blob/742c972c4f92a8f213d05b82ba04797f251f125a/compiler/rustc_typeck/src/collect.rs#L2109\">https://github.com/rust-lang/rust/blob/742c972c4f92a8f213d05b82ba04797f251f125a/compiler/rustc_typeck/src/collect.rs#L2109</a></p>",
        "id": 224165761,
        "sender_full_name": "lcnr",
        "timestamp": 1611745314
    },
    {
        "content": "<p>we call <code>type_of</code> instead of <code>AstConv::ast_ty_to_ty</code></p>",
        "id": 224166082,
        "sender_full_name": "lcnr",
        "timestamp": 1611745462
    },
    {
        "content": "<p><code>type_of(ty_alias_def_id)</code> does not substitute the used generic arguments though, so while collecting the <code>ConstEvaluatable</code> predicates for <code>foo</code></p>",
        "id": 224166167,
        "sender_full_name": "lcnr",
        "timestamp": 1611745515
    },
    {
        "content": "<p>we look at <code>Alias&lt;T, N&gt;</code> instead of <code>Alias&lt;u32, M&gt;</code></p>",
        "id": 224166217,
        "sender_full_name": "lcnr",
        "timestamp": 1611745557
    },
    {
        "content": "<p>and end up with a const evaluatable predicate with <code>N</code> and <code>T</code> in its substs which is bogus</p>",
        "id": 224166345,
        "sender_full_name": "lcnr",
        "timestamp": 1611745627
    },
    {
        "content": "<p>looking at some of the slightly more complex tests we currently have for <code>const_evaluatable_checked</code> and after mentoring <span class=\"user-mention\" data-user-id=\"326176\">@Boxy</span> for <a href=\"https://github.com/rust-lang/rust/issues/81426\">#81426</a> it felt to me like it probably causes more harm than good to look into type aliases. imo we should just stop looking into type aliases at all in <code>const_evaluatable_predicates_of</code> instead of fixing this bug ^^</p>",
        "id": 224168688,
        "sender_full_name": "lcnr",
        "timestamp": 1611747208
    },
    {
        "content": "<p>i think it can feel inconsistent that <code>foo</code> needs a bound here while <code>bar</code> does not <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(const_generics, const_evaluatable_checked)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![allow(incomplete_features)]</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Output</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Q</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Q</span><span class=\"o\">&lt;</span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">Q</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">}</span><span class=\"o\">&gt;</span>: <span class=\"nb\">Sized</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Q</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"o\">&lt;</span><span class=\"n\">Q</span><span class=\"o\">&lt;</span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&gt;</span>::<span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Q</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">type</span> <span class=\"nc\">Bar</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Q</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Bar</span><span class=\"o\">&lt;</span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Q</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 224169398,
        "sender_full_name": "lcnr",
        "timestamp": 1611747765
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> ^^</p>",
        "id": 224169414,
        "sender_full_name": "lcnr",
        "timestamp": 1611747779
    },
    {
        "content": "<p>I think this is like when we have bounds on the struct declaration (not just with const generics), then all functions using this struct also need these bounds, even if we could just automatically create the bounds, because you already need to fulfill them for the struct anyway</p>",
        "id": 224170552,
        "sender_full_name": "oli",
        "timestamp": 1611748624
    },
    {
        "content": "<p>so we should fix this together with regular trait bounds</p>",
        "id": 224170572,
        "sender_full_name": "oli",
        "timestamp": 1611748641
    },
    {
        "content": "<p>does that mean you agree with us stopping to looking into type aliases for now? <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 224171568,
        "sender_full_name": "lcnr",
        "timestamp": 1611749210
    },
    {
        "content": "<p>idk what regular trait bounds do... do whatever they do</p>",
        "id": 224171656,
        "sender_full_name": "oli",
        "timestamp": 1611749281
    },
    {
        "content": "<p><span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 224171763,
        "sender_full_name": "lcnr",
        "timestamp": 1611749343
    }
]