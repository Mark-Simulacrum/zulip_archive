[
    {
        "content": "<p>is it possible to write a bound that is satisfyable here? I don't think we have any logic for substituting const evaluatable bounds, right?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(const_evaluatable_checked, const_generics)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![allow(incomplete_features)]</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Generic</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">K</span>: <span class=\"kt\">u64</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">ConstU64</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">K</span>: <span class=\"kt\">u64</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">K</span>: <span class=\"kt\">u64</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Generic</span><span class=\"o\">&lt;</span><span class=\"n\">K</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">ConstU64</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"n\">K</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">}</span><span class=\"o\">&gt;</span>: <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">K</span>: <span class=\"kt\">u64</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Generic</span><span class=\"o\">&lt;</span><span class=\"n\">K</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">ConstU64</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"n\">K</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">}</span><span class=\"o\">&gt;</span>:<span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ConstU64</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"n\">K</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">}</span><span class=\"o\">&gt;</span>:<span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ConstU64</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"n\">K</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">}</span><span class=\"o\">&gt;</span>: <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"nc\">Generic</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"n\">K</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Generic</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">foo</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 223882201,
        "sender_full_name": "oli",
        "timestamp": 1611572993
    },
    {
        "content": "<p>yeah, i think doesn't quite work how we want</p>",
        "id": 223888534,
        "sender_full_name": "lcnr",
        "timestamp": 1611577128
    },
    {
        "content": "<p>for that we would have to recurse into the unevaluated consts in <code>try_unify</code> i think</p>",
        "id": 223888578,
        "sender_full_name": "lcnr",
        "timestamp": 1611577168
    },
    {
        "content": "<p>what I was wondering is whether we can essentially substitute abstract consts. So if we have a replacement <code>K</code> -&gt; <code>M + 1</code>, then we could insert the abstract const nodes from <code>M + 1</code> and replace all uses of <code>K</code> with the ids of the newly inserted nodes</p>",
        "id": 223891540,
        "sender_full_name": "oli",
        "timestamp": 1611578894
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/combining.20const.20bounds/near/223888578\">said</a>:</p>\n<blockquote>\n<p>for that we would have to recurse into the unevaluated consts in <code>try_unify</code> i think</p>\n</blockquote>\n<p>yeah, that's pretty much what meant here ^^</p>",
        "id": 223891606,
        "sender_full_name": "lcnr",
        "timestamp": 1611578946
    },
    {
        "content": "<p>kk <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 223891615,
        "sender_full_name": "oli",
        "timestamp": 1611578951
    },
    {
        "content": "<p>didn't explain myself well though</p>",
        "id": 223891634,
        "sender_full_name": "lcnr",
        "timestamp": 1611578968
    }
]