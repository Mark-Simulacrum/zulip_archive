[
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"3805\">@project-const-generics</span> meeting in 23 minutes</p>",
        "id": 231478057,
        "sender_full_name": "lcnr",
        "timestamp": 1616509355
    },
    {
        "content": "<p>meeting notes: <a href=\"https://hackmd.io/ApIfCRWSQEa0insNCkNZ-w\">https://hackmd.io/ApIfCRWSQEa0insNCkNZ-w</a></p>",
        "id": 231481293,
        "sender_full_name": "lcnr",
        "timestamp": 1616510521
    },
    {
        "content": "<p>i want to talk a bit more about how we deal with complex generic constants</p>",
        "id": 231481388,
        "sender_full_name": "lcnr",
        "timestamp": 1616510541
    },
    {
        "content": "<p>so something like <code>fn foo&lt;T: Trait&gt;() where [u8; &lt;T as Trait&gt;::ASSOC]: OtherTrait {}</code></p>",
        "id": 231481492,
        "sender_full_name": "lcnr",
        "timestamp": 1616510581
    },
    {
        "content": "<p>well, then <span aria-label=\"sparkles\" class=\"emoji emoji-2728\" role=\"img\" title=\"sparkles\">:sparkles:</span> let's officially start this meeting</p>",
        "id": 231482159,
        "sender_full_name": "lcnr",
        "timestamp": 1616510831
    },
    {
        "content": "<p>the first issue i want to talk about is <a href=\"#narrow/stream/260443-project-const-generics/topic/anon.20const.20in.20where.20bounds\">https://rust-lang.zulipchat.com/#narrow/stream/260443-project-const-generics/topic/anon.20const.20in.20where.20bounds</a></p>",
        "id": 231482540,
        "sender_full_name": "lcnr",
        "timestamp": 1616510974
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(const_generics, const_evaluatable_checked)]</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Assoc</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">ASSOC</span>: <span class=\"o\">&lt;</span><span class=\"bp\">Self</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&gt;</span>::<span class=\"n\">Assoc</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Assoc</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">ASSOC</span>: <span class=\"kt\">i64</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">forget</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">3</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">T</span>: <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">Assoc</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">bar</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&gt;</span>::<span class=\"n\">ASSOC</span><span class=\"p\">)]</span>: <span class=\"nb\">Sized</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">foo</span>::<span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 231482581,
        "sender_full_name": "lcnr",
        "timestamp": 1616510996
    },
    {
        "content": "<p>in <code>main</code> we call <code>foo::&lt;i32&gt;</code></p>",
        "id": 231482711,
        "sender_full_name": "lcnr",
        "timestamp": 1616511034
    },
    {
        "content": "<p><code>i32: Foo&lt;Assoc = i32&gt;</code> does not hold, so this snippet should fail to compile</p>",
        "id": 231482787,
        "sender_full_name": "lcnr",
        "timestamp": 1616511063
    },
    {
        "content": "<p>we also have a <code>[u8; bar::&lt;T&gt;(&lt;T as Foo&gt;::ASSOC)]: Sized,</code> bound though</p>",
        "id": 231482825,
        "sender_full_name": "lcnr",
        "timestamp": 1616511077
    },
    {
        "content": "<p>this one causes us to try and evaluate <code>bar::&lt;T&gt;(&lt;T as Foo&gt;::ASSOC)</code></p>",
        "id": 231483063,
        "sender_full_name": "lcnr",
        "timestamp": 1616511159
    },
    {
        "content": "<p><em>without</em> first checking if the caller-bounds (so <code>where</code>-clauses, the stuff the caller has to prove before executing our constant) hold</p>",
        "id": 231483210,
        "sender_full_name": "lcnr",
        "timestamp": 1616511220
    },
    {
        "content": "<p>so the constant assumes that <code>T</code> is the same type as <code>&lt;T as Foo&gt;::ASSOC</code> which isn't actually true</p>",
        "id": 231483349,
        "sender_full_name": "lcnr",
        "timestamp": 1616511256
    },
    {
        "content": "<p>when we try to use <code>foo::&lt;i32&gt;</code>. This currently causes an ICE</p>",
        "id": 231483394,
        "sender_full_name": "lcnr",
        "timestamp": 1616511277
    },
    {
        "content": "<p>broadly speaking, there are two ways we can solve this afaik:</p>",
        "id": 231483505,
        "sender_full_name": "lcnr",
        "timestamp": 1616511319
    },
    {
        "content": "<ul>\n<li>change mir building/typeck/ctfe so that it does not ice, even if where-clauses don't hold</li>\n</ul>",
        "id": 231483573,
        "sender_full_name": "lcnr",
        "timestamp": 1616511347
    },
    {
        "content": "<ul>\n<li>somehow check that the where-clauses hold before trying to evaluate an anon const, even when used as part of its parent where clauses</li>\n</ul>",
        "id": 231483724,
        "sender_full_name": "lcnr",
        "timestamp": 1616511387
    },
    {
        "content": "<p>the first option seems really undesirable to me, as implementing this probably masks a lot of other, actual bugs we want to detect</p>",
        "id": 231483830,
        "sender_full_name": "lcnr",
        "timestamp": 1616511432
    },
    {
        "content": "<p>while <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> expressed that the second one isn't really that feasable if i understood him correctly</p>",
        "id": 231483899,
        "sender_full_name": "lcnr",
        "timestamp": 1616511463
    },
    {
        "content": "<p>i don't have any ideas on how we would implement the second one</p>",
        "id": 231483939,
        "sender_full_name": "lcnr",
        "timestamp": 1616511480
    },
    {
        "content": "<p>so nikos assessment might very well be correct</p>",
        "id": 231484025,
        "sender_full_name": "lcnr",
        "timestamp": 1616511497
    },
    {
        "content": "<p>I'm a bit behind</p>",
        "id": 231484181,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616511551
    },
    {
        "content": "<p>Chalk essentially implements the second option by design, right? As it will simply queue up the obligations, and solve each one when it has enough information to know whether it can be satisfied. (The implementation of Chalk isn't fresh in my mind, so I'm pretending Chalk = Prolog-style trait constraint solver; this may lead to my misunderstanding how it actually works.)</p>",
        "id": 231484550,
        "sender_full_name": "varkor",
        "timestamp": 1616511648
    },
    {
        "content": "<p>This is an aside; I just want to check this is a problem specifically with how the current rustc system works, and not a fundamental design problem.</p>",
        "id": 231484693,
        "sender_full_name": "varkor",
        "timestamp": 1616511692
    },
    {
        "content": "<p>For some reason i'm having trouble deciding what I think about the two options</p>",
        "id": 231485263,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616511853
    },
    {
        "content": "<p>let me take another sip of coffee <span aria-label=\"coffee\" class=\"emoji emoji-2615\" role=\"img\" title=\"coffee\">:coffee:</span> and try again</p>",
        "id": 231485319,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616511872
    },
    {
        "content": "<p>ok, I'm getting it now</p>",
        "id": 231485654,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616511991
    },
    {
        "content": "<p>thanks <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> for a crisp example</p>",
        "id": 231485682,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616511998
    },
    {
        "content": "<p>this kind of connects to something I was talking over recently in another context</p>",
        "id": 231485819,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616512043
    },
    {
        "content": "<p>basically we were talking about the challenge of having to \"export\" results, and about how sometimes it'd be easier if the solver can just defer solving things until later</p>",
        "id": 231486008,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616512100
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-03-23/near/231483724\">said</a>:</p>\n<blockquote>\n<ul>\n<li>somehow check that the where-clauses hold before trying to evaluate an anon const, even when used as part of its parent where clauses</li>\n</ul>\n</blockquote>\n<p>can we dig a bit into this -- like where are the points where we have to evaluate <code>bar::&lt;T&gt;(...)</code></p>",
        "id": 231486114,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616512133
    },
    {
        "content": "<p>I feel like there is maybe a third option</p>",
        "id": 231486175,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616512156
    },
    {
        "content": "<p>when checking whether the <code>where</code>-clauses of <code>foo</code> hold</p>",
        "id": 231486186,
        "sender_full_name": "lcnr",
        "timestamp": 1616512163
    },
    {
        "content": "<p>so probably during <code>fulfill</code> when typechecking <code>main</code></p>",
        "id": 231486251,
        "sender_full_name": "lcnr",
        "timestamp": 1616512185
    },
    {
        "content": "<p>you mean-- when typechecking the body of <code>main</code></p>",
        "id": 231486280,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616512193
    },
    {
        "content": "<p>yeah</p>",
        "id": 231486295,
        "sender_full_name": "lcnr",
        "timestamp": 1616512197
    },
    {
        "content": "<p>put another way, the problem here is that</p>",
        "id": 231486351,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616512205
    },
    {
        "content": "<p>we type-check the constant in the context of <code>foo</code></p>",
        "id": 231486400,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616512223
    },
    {
        "content": "<p>and it passes the type-check there, but precisely because of this where clause that is in scope</p>",
        "id": 231486452,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616512241
    },
    {
        "content": "<p>but then we get an ICE at some later point because we're assuming that the generic constant is well typed post substitution, when in fact this is not true</p>",
        "id": 231486554,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616512282
    },
    {
        "content": "<p>I'm thinking about this because it feels like this is not <em>specific</em> to constant evaluation</p>",
        "id": 231486608,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616512314
    },
    {
        "content": "<p>i think it is <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> constants are the only things relying on <code>where</code>-clauses while also being part of them</p>",
        "id": 231486749,
        "sender_full_name": "lcnr",
        "timestamp": 1616512359
    },
    {
        "content": "<p>at least that's what i think is the core of this issue</p>",
        "id": 231486811,
        "sender_full_name": "lcnr",
        "timestamp": 1616512384
    },
    {
        "content": "<p>the analogous thing would be predicate well-formedness, I think</p>",
        "id": 231486827,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616512391
    },
    {
        "content": "<p>does that pose an issue for <code>T::Assoc: OtherTrait</code></p>",
        "id": 231486950,
        "sender_full_name": "lcnr",
        "timestamp": 1616512433
    },
    {
        "content": "<p>I agree that it's sort of specific to constants in that the trait solver doesn't assume that predicates are well-formed when it goes to solve them, I think</p>",
        "id": 231486966,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616512436
    },
    {
        "content": "<p>that's an example I'm pondering</p>",
        "id": 231487127,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616512461
    },
    {
        "content": "<p>which also assumes <code>T: Trait</code> to hold, but not really because our typesystem knows how to deal with it</p>",
        "id": 231487176,
        "sender_full_name": "lcnr",
        "timestamp": 1616512471
    },
    {
        "content": "<p>it also reminds me of implied bounds</p>",
        "id": 231487233,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616512483
    },
    {
        "content": "<p>we want to show that the set of where-clauses are true collectively</p>",
        "id": 231487261,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616512488
    },
    {
        "content": "<p>I mean one obvious conclusion is that maybe we can't assume constants are well-typed post substitution :)</p>",
        "id": 231487415,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616512516
    },
    {
        "content": "<p>that's one of the options</p>",
        "id": 231487459,
        "sender_full_name": "lcnr",
        "timestamp": 1616512528
    },
    {
        "content": "<p>but it seems unfortunate to give up that guarantee</p>",
        "id": 231487506,
        "sender_full_name": "lcnr",
        "timestamp": 1616512543
    },
    {
        "content": "<p>it's not a guarantee we ever had, apparently</p>",
        "id": 231487536,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616512554
    },
    {
        "content": "<p>we have this guarantee rn</p>",
        "id": 231487610,
        "sender_full_name": "lcnr",
        "timestamp": 1616512567
    },
    {
        "content": "<p>we don't, hence the ICE :)</p>",
        "id": 231487628,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616512574
    },
    {
        "content": "<p>notice the feature gate</p>",
        "id": 231487671,
        "sender_full_name": "lcnr",
        "timestamp": 1616512584
    },
    {
        "content": "<p>ok, you mean we have it without using a feature gate</p>",
        "id": 231487719,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616512605
    },
    {
        "content": "<p>on stable anon consts can't see any where bounds</p>",
        "id": 231487721,
        "sender_full_name": "lcnr",
        "timestamp": 1616512606
    },
    {
        "content": "<p>ok so I think an analogous example might be</p>",
        "id": 231487774,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616512627
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">T</span>: <span class=\"nb\">Iterator</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&gt;</span>::<span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"></span>\n</code></pre></div>\n<p>this is not legal Rust syntax, but I'm using it to demonstrate a point</p>",
        "id": 231487868,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616512662
    },
    {
        "content": "<p>the second assertion only makes sense if <code>T: Iterator</code> holds in the first place</p>",
        "id": 231487959,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616512688
    },
    {
        "content": "<p>the nature of \"normalizing\" an associated type tends to also guarantee that <code>T: Iterator</code> holds, but it doesn't have to</p>",
        "id": 231488144,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616512754
    },
    {
        "content": "<p>for example, you could imagine that we find a definition in an impl and we <em>assume</em> the where clauses of the impl hold</p>",
        "id": 231488172,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616512769
    },
    {
        "content": "<p>because they ought to be checked somewhere else</p>",
        "id": 231488189,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616512777
    },
    {
        "content": "<p>so...it seems like what's missing a bit is that</p>",
        "id": 231488377,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616512836
    },
    {
        "content": "<p>we don't have to check that the constant is well-typed post substitution <em>but</em> we do have to check that its where clauses hold before we can evaluate it</p>",
        "id": 231488427,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616512858
    },
    {
        "content": "<p>\"check that its where clauses\" implies \"check that the constant is well-typed post substitution\"</p>",
        "id": 231488545,
        "sender_full_name": "lcnr",
        "timestamp": 1616512899
    },
    {
        "content": "<p>but that is a <em>bit</em> cyclic I guess, its where clauses may include itself?</p>",
        "id": 231488546,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616512899
    },
    {
        "content": "<p>ayyy we're back to cycles</p>",
        "id": 231488592,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1616512913
    },
    {
        "content": "<p>with <code>feature(const_generics)</code> it does</p>",
        "id": 231488618,
        "sender_full_name": "lcnr",
        "timestamp": 1616512921
    },
    {
        "content": "<p>well, <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span>, we checked that its well-typed under the assumption that the where-clauses hold</p>",
        "id": 231488666,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616512928
    },
    {
        "content": "<p>but that's already something we have to change</p>",
        "id": 231488668,
        "sender_full_name": "lcnr",
        "timestamp": 1616512929
    },
    {
        "content": "<p>right, I wanted to revisit that question and remind myself how we were thinking about that</p>",
        "id": 231488723,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616512946
    },
    {
        "content": "<p>i think we talked about it in a prev meeting in the context of trying to use itself to prove a predicate while typechecking itself</p>",
        "id": 231488804,
        "sender_full_name": "lcnr",
        "timestamp": 1616512979
    },
    {
        "content": "<p>I would also add that, with caching, checking things twice is not a big deal -- but cycles could be a problem, at least unless we leverage coinductive semantics . This does feel like a coinductive sort of problem -- wanting to make sure that a set of things are mutually consistent.</p>",
        "id": 231488904,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616513017
    },
    {
        "content": "<p>What I remember is that we want to find a base set of where clauses based on -- say -- the type parameters that appear in the constant</p>",
        "id": 231489044,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616513057
    },
    {
        "content": "<p>and then we want to use some form of transitive closure algorithm to expand that set</p>",
        "id": 231489078,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616513068
    },
    {
        "content": "<p>remind me what the transitive function is</p>",
        "id": 231489103,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616513082
    },
    {
        "content": "<p>yes, though that's mostly to remove unused generic params ^^</p>",
        "id": 231489106,
        "sender_full_name": "lcnr",
        "timestamp": 1616513083
    },
    {
        "content": "<p>the most naive option I can think of virtually guarantees that the constant itself is in the set</p>",
        "id": 231489145,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616513102
    },
    {
        "content": "<p>the transitive function is whether params are used together in a where bound</p>",
        "id": 231489245,
        "sender_full_name": "lcnr",
        "timestamp": 1616513134
    },
    {
        "content": "<p>which means that the constant itself is in the set</p>",
        "id": 231489292,
        "sender_full_name": "lcnr",
        "timestamp": 1616513150
    },
    {
        "content": "<p>unless we filter it <del>afterwards</del></p>",
        "id": 231489306,
        "sender_full_name": "lcnr",
        "timestamp": 1616513157
    },
    {
        "content": "<p>time I guess to do some reading up on dependent typing, isn't it</p>",
        "id": 231489580,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616513244
    },
    {
        "content": "<p>potentially</p>",
        "id": 231489836,
        "sender_full_name": "lcnr",
        "timestamp": 1616513335
    },
    {
        "content": "<p>The main point is that option (2) seems to be impossible so long as there are cycles unless we figure out how to resolve those. I suspect there are also cycles that can't fruitfully be filtered, and that's seeming awfully complex.</p>",
        "id": 231489841,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616513339
    },
    {
        "content": "<p>(I will add that I've contemplated what it would mean for all of trait solving to be coinductive, but most folks seem to go the other way...)</p>",
        "id": 231489914,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616513367
    },
    {
        "content": "<p>(...that is, trying to model coinductive things in an inductive way)</p>",
        "id": 231489948,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616513379
    },
    {
        "content": "<p>(coinductive, loosely speaking, means 'cycles are provable' :)</p>",
        "id": 231489973,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616513389
    },
    {
        "content": "<p>This seems like it's getting into the territory of \"we need a formal treatment of trait solving in Rust\".</p>",
        "id": 231490005,
        "sender_full_name": "varkor",
        "timestamp": 1616513399
    },
    {
        "content": "<p>let me ask around a bit about this</p>",
        "id": 231490127,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616513427
    },
    {
        "content": "<p>coinductive means that <code>(c /\\ a -&gt; b) /\\ (c /\\ b -&gt; a) -&gt; (c -&gt; a)</code>?</p>",
        "id": 231490144,
        "sender_full_name": "lcnr",
        "timestamp": 1616513437
    },
    {
        "content": "<p><code>-&gt;</code> meaning <em>implies</em> here</p>",
        "id": 231490234,
        "sender_full_name": "lcnr",
        "timestamp": 1616513469
    },
    {
        "content": "<p>I won't try to answer and will instead point you at some cryptic wikipedia pages</p>",
        "id": 231490302,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616513488
    },
    {
        "content": "<p>My experience is that everybody -- including tenured professors -- who you ask about coinduction</p>",
        "id": 231490331,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616513498
    },
    {
        "content": "<p>begins by saying \"I don't understand it, but...\"</p>",
        "id": 231490342,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616513502
    },
    {
        "content": "<p>\"use it until it becomes intuitive\"</p>",
        "id": 231490452,
        "sender_full_name": "lcnr",
        "timestamp": 1616513540
    },
    {
        "content": "<p>think of auto traits</p>",
        "id": 231490468,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616513547
    },
    {
        "content": "<p>it's kind of \"greatest fixed point\"</p>",
        "id": 231490504,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616513563
    },
    {
        "content": "<p>if proving that <code>T: Foo</code> is true requires (recursively) that <code>T: Foo</code> is true, that's ok, so long as you don't encounter anything false along the way</p>",
        "id": 231490601,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616513600
    },
    {
        "content": "<p><span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 231490675,
        "sender_full_name": "lcnr",
        "timestamp": 1616513640
    },
    {
        "content": "<p>in the case of auto traits, it'd be like, <code>LinkedList&lt;T&gt;: Send</code> if all the types you can reach from <code>LinkedList&lt;T&gt;</code> are <code>Send</code> -- and that includes <code>LinkedList&lt;T&gt;</code> itself!</p>",
        "id": 231490706,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616513644
    },
    {
        "content": "<p>but if you're not careful with how you setup your implications you can get into problems</p>",
        "id": 231490785,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616513663
    },
    {
        "content": "<p>like clearly if <code>T: Foo =&gt; T: Foo</code> then it is vacuously provable, so you can't have other things implied by <code>T: Foo</code> being true that are not also vacuously provable; we had bugs around autotraits because of this</p>",
        "id": 231490872,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616513703
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-03-23/near/231490785\">said</a>:</p>\n<blockquote>\n<p>but if you're not careful with how you setup your implications you can get into problems</p>\n</blockquote>\n<p>adding <code>(a -&gt; a) -&gt; a</code> as an axiom certainly doesn't suffice</p>",
        "id": 231491296,
        "sender_full_name": "lcnr",
        "timestamp": 1616513856
    },
    {
        "content": "<p>It would be nice to have a document in the project-const-generics repo, or elsewhere, that lists all these problem cases that have been encountered, so there's a good reference to point people towards in the future.</p>",
        "id": 231491318,
        "sender_full_name": "varkor",
        "timestamp": 1616513868
    },
    {
        "content": "<p>It also seems likely that without a formally verified model of trait solving, it's likely these issues will be hit again and again. Maybe you can tempt an academic into working on it.</p>",
        "id": 231491506,
        "sender_full_name": "varkor",
        "timestamp": 1616513926
    },
    {
        "content": "<p>yes</p>",
        "id": 231491529,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616513934
    },
    {
        "content": "<p>so I think this example</p>",
        "id": 231491535,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616513936
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Assoc</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">T</span>: <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">Assoc</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">fun1</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">T</span>: <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">Assoc</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">bar</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()]</span>: <span class=\"nb\">Sized</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Assoc</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">fun1</span>::<span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 231491542,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616513939
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"121053\">varkor</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-03-23/near/231491506\">said</a>:</p>\n<blockquote>\n<p>It also seems likely that without a formally verified model of trait solving, it's likely these issues will be hit again and again. Maybe you can tempt an academic into working on it.</p>\n</blockquote>\n<p>side note that</p>",
        "id": 231491554,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616513944
    },
    {
        "content": "<p>I'm talking to some folks about an interesting idea that is very much related here</p>",
        "id": 231491571,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616513952
    },
    {
        "content": "<p>we've been talking about taking the chalk formalization of trait semantics</p>",
        "id": 231491600,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616513962
    },
    {
        "content": "<p>combined with polonius definition of the borrow checker</p>",
        "id": 231491623,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616513971
    },
    {
        "content": "<p>and a (to be written) formal type checker for MIR</p>",
        "id": 231491641,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616513979
    },
    {
        "content": "<p>at this point you have a complete type checker for MIR that is based entirely on horn clauses</p>",
        "id": 231491685,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616513996
    },
    {
        "content": "<p>I'd be very interested in hearing more about that.</p>",
        "id": 231491743,
        "sender_full_name": "varkor",
        "timestamp": 1616514006
    },
    {
        "content": "<p>That seems like the right way to go.</p>",
        "id": 231491771,
        "sender_full_name": "varkor",
        "timestamp": 1616514015
    },
    {
        "content": "<p><span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span></p>",
        "id": 231491778,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1616514018
    },
    {
        "content": "<p>the hope is that you can remove the rather artificial barriers we've placed between them</p>",
        "id": 231491810,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616514032
    },
    {
        "content": "<p>and basically just give that whole bundle to the solver and say \"solve this\"</p>",
        "id": 231491841,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616514044
    },
    {
        "content": "<p>but also that we can use it as the basis for proving soundness of a MIR analysis</p>",
        "id": 231491909,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616514071
    },
    {
        "content": "<p>modulo unsafe code, of course :)</p>",
        "id": 231491921,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616514076
    },
    {
        "content": "<p>(so this brings us back to <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span>'s thesis, somewhat)</p>",
        "id": 231491954,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616514088
    },
    {
        "content": "<p>(since the point of his approach was to give a way to model unsafe code as well, with some of the proof obligations falling on the author of the code)</p>",
        "id": 231492027,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616514117
    },
    {
        "content": "<p>ooh</p>",
        "id": 231492097,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616514134
    },
    {
        "content": "<p>I was talking to some folks in amazon's automated reasoning group about this</p>",
        "id": 231492166,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616514161
    },
    {
        "content": "<p>it seems pretty appealing as a project to undertake</p>",
        "id": 231492187,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616514168
    },
    {
        "content": "<p>note <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> that it also sidesteps the question of recursive vs SLG solver somewhat</p>",
        "id": 231492224,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616514183
    },
    {
        "content": "<p>Even safety of type checking alone would be a big step forward. Integrating safety checking at the expression-level too would be even better.</p>",
        "id": 231492237,
        "sender_full_name": "varkor",
        "timestamp": 1616514187
    },
    {
        "content": "<p>in particular you want a solver more like the SLG one for this -- though maybe not the SLG solver -- that is, you want a complete solver</p>",
        "id": 231492282,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616514205
    },
    {
        "content": "<p>the main insight that hadn't occurred to me before</p>",
        "id": 231492356,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616514233
    },
    {
        "content": "<p>was that doing this at the MIR level is totally tractable</p>",
        "id": 231492377,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616514239
    },
    {
        "content": "<p>whereas doing it for rust source code feels absurd right now</p>",
        "id": 231492431,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616514248
    },
    {
        "content": "<p>to circle back to the topic at hand, I think this is a mildly simplified example of the problem, right <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> ?</p>",
        "id": 231492541,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616514278
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Assoc</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">T</span>: <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">Assoc</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">fun1</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">T</span>: <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">Assoc</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">bar</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()]</span>: <span class=\"nb\">Sized</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Assoc</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">fun1</span>::<span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 231492551,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616514280
    },
    {
        "content": "<p>in particular, the problem is that the where clauses on the call to <code>bar::&lt;T&gt;()</code> are assumed to be satisfied</p>",
        "id": 231492620,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616514308
    },
    {
        "content": "<p>ye</p>",
        "id": 231492628,
        "sender_full_name": "lcnr",
        "timestamp": 1616514312
    },
    {
        "content": "<p>and we may evaluate it under that assumption</p>",
        "id": 231492649,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616514321
    },
    {
        "content": "<p>that has the same issue</p>",
        "id": 231492652,
        "sender_full_name": "lcnr",
        "timestamp": 1616514322
    },
    {
        "content": "<p>which may turn out to be untrue</p>",
        "id": 231492655,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616514324
    },
    {
        "content": "<p>even <code>bar&lt;T: Sized&gt;()</code> is probably enough</p>",
        "id": 231492834,
        "sender_full_name": "lcnr",
        "timestamp": 1616514379
    },
    {
        "content": "<p>with <code>fun1::&lt;[i32]&gt;()</code> in main</p>",
        "id": 231492878,
        "sender_full_name": "lcnr",
        "timestamp": 1616514397
    },
    {
        "content": "<p>so, this is only problematic because of const generics allowing for actaully evaluating code which can observe the fact that we incorrectly assume the predicate holds?</p>",
        "id": 231492954,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1616514427
    },
    {
        "content": "<p>that's my understanding, yes</p>",
        "id": 231493029,
        "sender_full_name": "lcnr",
        "timestamp": 1616514446
    },
    {
        "content": "<p>I think that's true</p>",
        "id": 231493115,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616514480
    },
    {
        "content": "<p>we would otherwise eventually fail to prove something</p>",
        "id": 231493177,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616514488
    },
    {
        "content": "<p>let me write my write-up into the hackmd</p>",
        "id": 231493205,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616514498
    },
    {
        "content": "<p>I just sent some messages to some people to see if they had any insights</p>",
        "id": 231493230,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616514507
    },
    {
        "content": "<p>and I <em>thought</em> I did a crisp job articulating it :)</p>",
        "id": 231493247,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616514514
    },
    {
        "content": "<p><a href=\"https://hackmd.io/ApIfCRWSQEa0insNCkNZ-w#ICE-example\">done</a></p>",
        "id": 231493586,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616514630
    },
    {
        "content": "<p>we could try to change <code>bug</code>s in ctfe to <code>if param_env.reveal() == Reveal::Selection { return Err(BrokenAssumption) } else { bug!(...) }</code> which makes the first option slightly less scary to me (after <a href=\"https://github.com/rust-lang/rust/issues/81339\">#81339</a>)</p>",
        "id": 231493923,
        "sender_full_name": "lcnr",
        "timestamp": 1616514737
    },
    {
        "content": "<p>i would still prefer to \"cleanly\" solve this</p>",
        "id": 231494058,
        "sender_full_name": "lcnr",
        "timestamp": 1616514781
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-03-23/near/231493230\">said</a>:</p>\n<blockquote>\n<p>I just sent some messages to some people to see if they had any insights</p>\n</blockquote>\n<p>maybe we can get some additional helpful input here</p>",
        "id": 231494455,
        "sender_full_name": "lcnr",
        "timestamp": 1616514920
    },
    {
        "content": "<p>i had another idea rn</p>",
        "id": 231496673,
        "sender_full_name": "lcnr",
        "timestamp": 1616515613
    },
    {
        "content": "<ul>\n<li>only evaluate anon const if they are fully concrete</li>\n</ul>",
        "id": 231496763,
        "sender_full_name": "lcnr",
        "timestamp": 1616515644
    },
    {
        "content": "<p>uh</p>",
        "id": 231496802,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1616515661
    },
    {
        "content": "<ul>\n<li>before evaluating the anon const, check its caller bounds hold in an empty param env</li>\n</ul>",
        "id": 231496804,
        "sender_full_name": "lcnr",
        "timestamp": 1616515662
    },
    {
        "content": "<p>how would you evaluate an anon const if it isnt concrete?</p>",
        "id": 231496829,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1616515669
    },
    {
        "content": "<p>we sometimes still try to evaluate generic constants, i think we do it because we currently can't deal with unused substs</p>",
        "id": 231496952,
        "sender_full_name": "lcnr",
        "timestamp": 1616515701
    },
    {
        "content": "<p>oh</p>",
        "id": 231496971,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1616515708
    },
    {
        "content": "<p>that</p>",
        "id": 231496977,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1616515711
    },
    {
        "content": "<p>we could really do with an actual way of checking concreteness lmao</p>",
        "id": 231497040,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1616515726
    },
    {
        "content": "<p>slash yeeting unused substs</p>",
        "id": 231497067,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1616515737
    },
    {
        "content": "<p>or maybe because it did not cause any issues and more cleanly fit into the mental model of the people first implementing it</p>",
        "id": 231497083,
        "sender_full_name": "lcnr",
        "timestamp": 1616515742
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"121053\">varkor</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-03-23/near/231491318\">said</a>:</p>\n<blockquote>\n<p>It would be nice to have a document in the project-const-generics repo, or elsewhere, that lists all these problem cases that have been encountered, so there's a good reference to point people towards in the future.</p>\n</blockquote>\n<p>opened <a href=\"https://github.com/rust-lang/project-const-generics/pull/10\">https://github.com/rust-lang/project-const-generics/pull/10</a></p>",
        "id": 231508609,
        "sender_full_name": "lcnr",
        "timestamp": 1616519883
    }
]