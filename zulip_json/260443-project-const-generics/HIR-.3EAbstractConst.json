[
    {
        "content": "<p>So... I'm sure this has come up before, but could we create a HIR-&gt;AbstractConst converter? The rules would be exactly the same as with const evaluatable unchecked. Not sure whether that makes it easier to figure out which where bounds to apply to that constant. Just wanted to know if <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> has considered this before and what their thoughts were/are on it</p>",
        "id": 228557258,
        "sender_full_name": "oli",
        "timestamp": 1614761855
    },
    {
        "content": "<p>i should stop thinking by myself <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 228557586,
        "sender_full_name": "lcnr",
        "timestamp": 1614762017
    },
    {
        "content": "<p>iirc we did talk about potentially using hir instead of mir for this before we started to implement any of this</p>",
        "id": 228557641,
        "sender_full_name": "lcnr",
        "timestamp": 1614762043
    },
    {
        "content": "<p>i think we decided against it back then because hir doesn't know about adjustments</p>",
        "id": 228557722,
        "sender_full_name": "lcnr",
        "timestamp": 1614762077
    },
    {
        "content": "<p>right, but I don't know if we talked about the where bounds situation and whether using the HIR instead of the MIR could potentially solve problems for us</p>",
        "id": 228557763,
        "sender_full_name": "oli",
        "timestamp": 1614762110
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/HIR-.3EAbstractConst/near/228557586\">said</a>:</p>\n<blockquote>\n<p>i should stop thinking by myself <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>\n</blockquote>\n<p>yeah, that's there this message comes in ^^</p>",
        "id": 228557829,
        "sender_full_name": "lcnr",
        "timestamp": 1614762131
    },
    {
        "content": "<p>i have an idea which nearly solves the problem <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 228557845,
        "sender_full_name": "lcnr",
        "timestamp": 1614762142
    },
    {
        "content": "<p>so we can estimate how a const wf bound looks from its hir</p>",
        "id": 228557888,
        "sender_full_name": "lcnr",
        "timestamp": 1614762181
    },
    {
        "content": "<p>which would allow us to start by filtering all unevaluated anon consts in where bounds</p>",
        "id": 228557960,
        "sender_full_name": "lcnr",
        "timestamp": 1614762210
    },
    {
        "content": "<p>and then re-add any bounds which can't depend on our current const because they are less complex</p>",
        "id": 228558098,
        "sender_full_name": "lcnr",
        "timestamp": 1614762286
    },
    {
        "content": "<p>i can think of two issues here though:</p>",
        "id": 228558195,
        "sender_full_name": "lcnr",
        "timestamp": 1614762335
    },
    {
        "content": "<p>concrete constants can depend on <code>u8: Trait&lt;{ complex_concrete_expression }</code> and we can get cycles that way</p>",
        "id": 228558262,
        "sender_full_name": "lcnr",
        "timestamp": 1614762364
    },
    {
        "content": "<p>and we currently allow - and want to allow - applying subexpressions of const evaluatable bounds, which means that we can't actually use the fact that an expression is more complex</p>",
        "id": 228558366,
        "sender_full_name": "lcnr",
        "timestamp": 1614762427
    },
    {
        "content": "<p>the first issue is </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">f</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">Sized</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">g</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">Sized</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">f</span>::<span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">()]</span>: <span class=\"nb\">Sized</span>\n    <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">g</span>::<span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">()]</span>: <span class=\"nb\">Sized</span>\n</code></pre></div>",
        "id": 228559517,
        "sender_full_name": "lcnr",
        "timestamp": 1614762979
    },
    {
        "content": "<p>wait, couldn't we filter anon const based on which parameters are pulled in instead?</p>",
        "id": 228559688,
        "sender_full_name": "lcnr",
        "timestamp": 1614763079
    },
    {
        "content": "<p>so only add anon consts to our constant if the params they mention are a true subset of what's used by our const?</p>",
        "id": 228559889,
        "sender_full_name": "lcnr",
        "timestamp": 1614763166
    },
    {
        "content": "<p>i guess that because the \"used\" params are an overestimation that might get somewhat weird</p>",
        "id": 228559914,
        "sender_full_name": "lcnr",
        "timestamp": 1614763199
    },
    {
        "content": "<p>isn't that the filtering thing that was talked about a week or so ago?</p>",
        "id": 228559970,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614763211
    },
    {
        "content": "<p>yeah, this is about the filtering thing ^^</p>",
        "id": 228559994,
        "sender_full_name": "lcnr",
        "timestamp": 1614763227
    },
    {
        "content": "<p>filtering by subsets seems like the right way, as long as there is no way to generate information about a param without mentioning it, but I don't think there is?</p>",
        "id": 228560776,
        "sender_full_name": "oli",
        "timestamp": 1614763600
    },
    {
        "content": "<p>there is</p>",
        "id": 228560979,
        "sender_full_name": "lcnr",
        "timestamp": 1614763716
    },
    {
        "content": "<p>which is why our idea to get the \"used subset\" of params</p>",
        "id": 228561049,
        "sender_full_name": "lcnr",
        "timestamp": 1614763750
    },
    {
        "content": "<p>is to figure out the transitive closure of all predicates mentioning our initial params</p>",
        "id": 228561082,
        "sender_full_name": "lcnr",
        "timestamp": 1614763778
    },
    {
        "content": "<p>oh</p>",
        "id": 228561220,
        "sender_full_name": "oli",
        "timestamp": 1614763835
    },
    {
        "content": "<p>OH</p>",
        "id": 228561223,
        "sender_full_name": "oli",
        "timestamp": 1614763837
    },
    {
        "content": "<p>now I understand</p>",
        "id": 228561226,
        "sender_full_name": "oli",
        "timestamp": 1614763839
    },
    {
        "content": "<p>that's easy and obvious to figure out, now I gotta ponder on how exactly that helps <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 228561335,
        "sender_full_name": "oli",
        "timestamp": 1614763902
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(const_generics, const_evaluatable_checked)]</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">ASSOC</span>: <span class=\"kt\">usize</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">Trait</span><span class=\"o\">&lt;</span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">T</span>::<span class=\"n\">ASSOC</span><span class=\"p\">]</span>: <span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 228561456,
        "sender_full_name": "lcnr",
        "timestamp": 1614763951
    },
    {
        "content": "<p>ok... I can't figure it out. Please explain what would happen in this and in the 3/4 case above if we applied the true-subset rule</p>",
        "id": 228562541,
        "sender_full_name": "oli",
        "timestamp": 1614764424
    },
    {
        "content": "<p>hm, my idea was the following</p>",
        "id": 228562856,
        "sender_full_name": "lcnr",
        "timestamp": 1614764588
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">uses</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"p\">]</span>: <span class=\"nc\">Trait</span><span class=\"o\">&lt;</span><span class=\"n\">V</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">uses</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">]</span>: <span class=\"nc\">Trait</span><span class=\"o\">&lt;</span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">uses</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"p\">]</span>: <span class=\"nc\">Trait</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 228563029,
        "sender_full_name": "lcnr",
        "timestamp": 1614764679
    },
    {
        "content": "<p>or wait, that won't actually work this way</p>",
        "id": 228563092,
        "sender_full_name": "lcnr",
        "timestamp": 1614764716
    },
    {
        "content": "<p>because the last predicate</p>",
        "id": 228563118,
        "sender_full_name": "lcnr",
        "timestamp": 1614764734
    },
    {
        "content": "<p>actually pulls in both <code>T</code> and <code>V</code> because they are mentioned in a predicate together</p>",
        "id": 228563153,
        "sender_full_name": "lcnr",
        "timestamp": 1614764760
    },
    {
        "content": "<p>hmm</p>",
        "id": 228563356,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614764860
    },
    {
        "content": "<p>does <code>[u8; uses U]: Trait&lt;u8&gt;</code> really need to pull in <code>V</code>?</p>",
        "id": 228563376,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614764880
    },
    {
        "content": "<p>seems like we'd never be able to unify any part of the <code>uses U</code> expression with the <code>uses T and U</code> expression</p>",
        "id": 228563424,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614764894
    },
    {
        "content": "<p>so the <code>[u8; _]: Trait&lt;V&gt;</code> predicate wouldn't be needed</p>",
        "id": 228563456,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614764915
    },
    {
        "content": "<p>hmm <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> that might be true, but i don't know how to prove this/implement it in the compiler</p>",
        "id": 228570562,
        "sender_full_name": "lcnr",
        "timestamp": 1614767880
    },
    {
        "content": "<p>wdym by prove it?</p>",
        "id": 228571250,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614768188
    },
    {
        "content": "<p>like make sure that line of reasoning is correct?</p>",
        "id": 228571267,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614768195
    },
    {
        "content": "<p>yeah</p>",
        "id": 228571303,
        "sender_full_name": "lcnr",
        "timestamp": 1614768220
    },
    {
        "content": "<p>it feels hard to figure out a precise set of rules where this must always be true</p>",
        "id": 228571380,
        "sender_full_name": "lcnr",
        "timestamp": 1614768245
    },
    {
        "content": "<p>if it helps</p>",
        "id": 228571409,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614768254
    },
    {
        "content": "<p>const_evaluatable_checked isnt stable</p>",
        "id": 228571423,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614768259
    },
    {
        "content": "<p>so its not too bad to get it wrong <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 228571431,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614768266
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"326176\">Boxy</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/HIR-.3EAbstractConst/near/228571431\">said</a>:</p>\n<blockquote>\n<p>so its not too bad to get it wrong <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n</blockquote>\n<p>but it's bad to get this subtly wrong ^^</p>",
        "id": 228571454,
        "sender_full_name": "lcnr",
        "timestamp": 1614768286
    },
    {
        "content": "<p>true</p>",
        "id": 228571468,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614768295
    },
    {
        "content": "<p>if the way we are wrong is subtle enough</p>",
        "id": 228571475,
        "sender_full_name": "lcnr",
        "timestamp": 1614768300
    },
    {
        "content": "<p>although \"wrong\" here just means that we might fail to compile things</p>",
        "id": 228571481,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614768303
    },
    {
        "content": "<p>we won't detect this while it is still unstable</p>",
        "id": 228571499,
        "sender_full_name": "lcnr",
        "timestamp": 1614768309
    },
    {
        "content": "<p>rather than compile wrong things</p>",
        "id": 228571504,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614768310
    },
    {
        "content": "<p>still bad, cos backwards compat</p>",
        "id": 228571516,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614768317
    },
    {
        "content": "<p>hmm, do we only need to care about <code>explicit_predicates_of</code>? cc <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 229275105,
        "sender_full_name": "lcnr",
        "timestamp": 1615198436
    },
    {
        "content": "<p>my idea was to change <code>explicit_predicates_of</code> to <code>raw_explicit_predicates_of</code></p>",
        "id": 229275201,
        "sender_full_name": "lcnr",
        "timestamp": 1615198463
    },
    {
        "content": "<p>which doesn't do anything with anon consts and returns <code>ConstKind::Raw(HirId)</code> for the ones we find</p>",
        "id": 229275268,
        "sender_full_name": "lcnr",
        "timestamp": 1615198509
    },
    {
        "content": "<p>which we then actually convert to their expected const kind in <code>explicit_predicates_of</code></p>",
        "id": 229275321,
        "sender_full_name": "lcnr",
        "timestamp": 1615198546
    },
    {
        "content": "<p>so afaik <code>predicates_defined_on</code> only adds outlives predicates which i think don't matter for our filtering</p>",
        "id": 229276758,
        "sender_full_name": "lcnr",
        "timestamp": 1615199311
    },
    {
        "content": "<p>so <code>'b: 'a</code> should not allow us to get to either <code>'b</code> from <code>'a</code> or <code>'a</code> from <code>'b</code>.</p>",
        "id": 229276802,
        "sender_full_name": "lcnr",
        "timestamp": 1615199342
    },
    {
        "content": "<p><code>predicates_of</code> adds <code>Self: Trait</code></p>",
        "id": 229277028,
        "sender_full_name": "lcnr",
        "timestamp": 1615199450
    },
    {
        "content": "<p>that actually seems needed :/</p>",
        "id": 229277092,
        "sender_full_name": "lcnr",
        "timestamp": 1615199485
    },
    {
        "content": "<p>like... we could duplicate the code adding <code>Self: Trait</code> so that we only have to modify <code>explicit_predicates_of</code></p>",
        "id": 229277189,
        "sender_full_name": "lcnr",
        "timestamp": 1615199544
    }
]