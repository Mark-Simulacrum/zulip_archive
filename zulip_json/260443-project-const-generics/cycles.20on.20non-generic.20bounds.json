[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/HIR-.3EAbstractConst/near/228558262\">said</a>:</p>\n<blockquote>\n<p>concrete constants can depend on <code>u8: Trait&lt;{ complex_concrete_expression }</code> and we can get cycles that way</p>\n</blockquote>\n<p>I think we should be able to filter out such bounds. We do need to check them, but we don't need to actually care about them beyond having wf check them</p>",
        "id": 228561174,
        "sender_full_name": "oli",
        "timestamp": 1614763812
    },
    {
        "content": "<p>hmm, what about <code>[u8; { complex_concrete_expression }]: Trait&lt;T&gt;</code>? at this point the bound isn't trivial anymore</p>",
        "id": 228561279,
        "sender_full_name": "lcnr",
        "timestamp": 1614763858
    },
    {
        "content": "<p>it's not about trivial, it's the fact that the type being bound on is does not mention any parameters. Without parameters being mentioned, there can be no use of other bounds or benefit for other bounds, right? That bound is just a static assert at that point</p>",
        "id": 228561628,
        "sender_full_name": "oli",
        "timestamp": 1614764038
    },
    {
        "content": "<p><code>&lt;[u8; 3]&gt;::ASSOC</code> works</p>",
        "id": 228561756,
        "sender_full_name": "lcnr",
        "timestamp": 1614764078
    },
    {
        "content": "<p>so these bounds aren't just a static assert, sadly</p>",
        "id": 228562086,
        "sender_full_name": "lcnr",
        "timestamp": 1614764215
    },
    {
        "content": "<p>oh right, it puts traits in scope as if they were <code>use</code>d</p>",
        "id": 228562314,
        "sender_full_name": "oli",
        "timestamp": 1614764320
    },
    {
        "content": "<p>:(</p>",
        "id": 228562343,
        "sender_full_name": "lcnr",
        "timestamp": 1614764337
    },
    {
        "content": "<p>well... more actually</p>",
        "id": 228562344,
        "sender_full_name": "oli",
        "timestamp": 1614764337
    },
    {
        "content": "<p>it limits it to the trait with specific parameters</p>",
        "id": 228562393,
        "sender_full_name": "oli",
        "timestamp": 1614764361
    },
    {
        "content": "<p>oof, ok <span aria-label=\"frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"frown\">:frown:</span></p>",
        "id": 228562404,
        "sender_full_name": "oli",
        "timestamp": 1614764368
    },
    {
        "content": "<p>expressions in where-bounds were a mistake <span aria-label=\"sparkles\" class=\"emoji emoji-2728\" role=\"img\" title=\"sparkles\">:sparkles:</span></p>",
        "id": 228562462,
        "sender_full_name": "lcnr",
        "timestamp": 1614764402
    },
    {
        "content": "<p>pack up your things, const generics is over</p>",
        "id": 228562521,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1614764416
    }
]