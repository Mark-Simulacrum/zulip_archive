[
    {
        "content": "<p>Hello! People are getting restless over the thought of adding <code>int&lt;N&gt;</code> now that C23 is going to have it. <a href=\"https://github.com/rust-lang/rfcs/pull/2581\">https://github.com/rust-lang/rfcs/pull/2581</a> and <span class=\"user-mention\" data-user-id=\"330161\">@Clar Fon</span> suggested that someone open a conversation in your general direction. So, have at thee! Conversation... OPEN!</p>\n<p>I suspect the biggest problem they run into is that they require lessthan/morethan expressions to be resoluble.</p>",
        "id": 272637315,
        "sender_full_name": "Jubilee",
        "timestamp": 1645414466
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"215333\">@Florian Gilcher</span></p>",
        "id": 272648291,
        "sender_full_name": "oli",
        "timestamp": 1645426611
    },
    {
        "content": "<p>i'm assuming that <code>(int&lt;4&gt;, int&lt;4&gt;)</code> wouldn't be a u8 -- or more broadly, this would be totally orthogonal to any bitfield support (aside from the niche support you'd expect)</p>",
        "id": 272651512,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1645429272
    },
    {
        "content": "<p>Maybe tuples? But yeah I would be assuming that we would have to work out the story for how they work at all first.</p>",
        "id": 272652356,
        "sender_full_name": "Jubilee",
        "timestamp": 1645429868
    },
    {
        "content": "<p>On that note, can we skip the <code>From</code> thing with size conversions for now, too?</p>",
        "id": 272653017,
        "sender_full_name": "oli",
        "timestamp": 1645430390
    },
    {
        "content": "<p>I mean, we can already do something like it via <code>where [(); assert!(N &lt; M)]</code>, but we def don't want to stabilize it</p>",
        "id": 272653244,
        "sender_full_name": "oli",
        "timestamp": 1645430483
    },
    {
        "content": "<p>Hmm, I think uint&lt;1..=7&gt; has to have a conversion into i8.</p>",
        "id": 272655582,
        "sender_full_name": "Jubilee",
        "timestamp": 1645432130
    },
    {
        "content": "<p>Maybe if <code>as</code> works on them we could get away without the relevant From/Into impls.</p>",
        "id": 272657315,
        "sender_full_name": "Jubilee",
        "timestamp": 1645433092
    },
    {
        "content": "<p>uint&lt;0&gt; should also convert into i8...uint&lt;0&gt; would definitely be handy for some things, such as representing 0-bit signals for languages like verilog/vhdl</p>",
        "id": 272670418,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1645439929
    },
    {
        "content": "<p>Hold up, ranged types aren't on the table here, are they? We're just talking about making the bitsize generic for now</p>",
        "id": 272675356,
        "sender_full_name": "oli",
        "timestamp": 1645442653
    },
    {
        "content": "<p>In either case: I think as an even smaller MVP we could add just the type and make the regular int types be type aliases of it. This would get us the advantage of one impl for all unsigned/signed int types but not require any fancy generic from impls. We'd simply keep the indidvidual explicit ones in libstd</p>",
        "id": 272675752,
        "sender_full_name": "oli",
        "timestamp": 1645442957
    },
    {
        "content": "<p>Once that works without a breaking change or other problems, we can start experimenting with other bit sizes</p>",
        "id": 272675812,
        "sender_full_name": "oli",
        "timestamp": 1645443001
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/adding.20int.3CN.3E/near/272675356\">said</a>:</p>\n<blockquote>\n<p>Hold up, ranged types aren't on the table here, are they? We're just talking about making the bitsize generic for now</p>\n</blockquote>\n<p>Yeah I meant \"<code>uint&lt;1&gt;</code> through <code>uint&lt;7&gt;</code>, inclusive\"</p>",
        "id": 272725344,
        "sender_full_name": "Jubilee",
        "timestamp": 1645470481
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/adding.20int.3CN.3E/near/272675752\">said</a>:</p>\n<blockquote>\n<p>In either case: I think as an even smaller MVP we could add just the type and make the regular int types be type aliases of it.</p>\n</blockquote>\n<p>How would this work for stuff like <code>usize</code>/<code>isize</code> which are distinct types but the same size as other integer types? or should they just be not included in this at all</p>",
        "id": 272913564,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1645601958
    },
    {
        "content": "<p>imho u/isize are just not included</p>",
        "id": 272913783,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1645602156
    },
    {
        "content": "<p>Yea, they are too special for inclusion in this, but maybe we can figure something out by making <code>i</code> and <code>u</code> be type aliases themselves: <code>type u&lt;const SIZE: u128&gt; = u_inner&lt;0..SIZE&gt;;</code> and making <code>usize</code> use a marker type on <code>u_inner</code> instead of a range.</p>",
        "id": 272919075,
        "sender_full_name": "oli",
        "timestamp": 1645606194
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">enum</span> <span class=\"nc\">IntBits</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Bits</span><span class=\"p\">(</span><span class=\"kt\">usize</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">PtrSize</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">enum</span> <span class=\"nc\">IntKind</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">TwosComplement</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c1\">// a signed integer</span>\n<span class=\"w\">    </span><span class=\"n\">Modular</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c1\">// an unsigned integer</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[lang = </span><span class=\"s\">\"int\"</span><span class=\"cp\">]</span><span class=\"w\"></span>\n<span class=\"cp\">#[repr(int(kind = Kind, bits = Bits))]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Int</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">Kind</span>: <span class=\"nc\">IntKind</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">Bits</span>: <span class=\"nc\">IntBits</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">uint</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Int</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">IntKind</span>::<span class=\"n\">Modular</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">IntBits</span>::<span class=\"n\">Bits</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">sint</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Int</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">IntKind</span>::<span class=\"n\">TwosComplement</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">IntBits</span>::<span class=\"n\">Bits</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Int</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">IntKind</span>::<span class=\"n\">Modular</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">IntBits</span>::<span class=\"n\">PtrSize</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"kt\">isize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Int</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">IntKind</span>::<span class=\"n\">TwosComplement</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">IntBits</span>::<span class=\"n\">PtrSize</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"kt\">u8</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">uint</span><span class=\"o\">&lt;</span><span class=\"mi\">8</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"kt\">i8</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">sint</span><span class=\"o\">&lt;</span><span class=\"mi\">8</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"kt\">u16</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">uint</span><span class=\"o\">&lt;</span><span class=\"mi\">16</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"kt\">i16</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">sint</span><span class=\"o\">&lt;</span><span class=\"mi\">16</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"c1\">// ...</span>\n</code></pre></div>",
        "id": 272920752,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1645607058
    },
    {
        "content": "<p>Yesss! Perfect</p>",
        "id": 272928792,
        "sender_full_name": "oli",
        "timestamp": 1645611683
    },
    {
        "content": "<p>I am not a huge fan of arbitrary precision integers despite using them everyday writing SystemVerilog.</p>",
        "id": 272949411,
        "sender_full_name": "Gary Guo",
        "timestamp": 1645623705
    },
    {
        "content": "<p>I think it provides too little value for its massive complexity.</p>",
        "id": 272949500,
        "sender_full_name": "Gary Guo",
        "timestamp": 1645623736
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"229517\">Jacob Lifshay</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/adding.20int.3CN.3E/near/272920752\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">enum</span> <span class=\"nc\">IntBits</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Bits</span><span class=\"p\">(</span><span class=\"kt\">usize</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">PtrSize</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">enum</span> <span class=\"nc\">IntKind</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">TwosComplement</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c1\">// a signed integer</span>\n<span class=\"w\">    </span><span class=\"n\">Modular</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c1\">// an unsigned integer</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[lang = </span><span class=\"s\">\"int\"</span><span class=\"cp\">]</span><span class=\"w\"></span>\n<span class=\"cp\">#[repr(int(kind = Kind, bits = Bits))]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Int</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">Kind</span>: <span class=\"nc\">IntKind</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">Bits</span>: <span class=\"nc\">IntBits</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">uint</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Int</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">IntKind</span>::<span class=\"n\">Modular</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">IntBits</span>::<span class=\"n\">Bits</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">sint</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Int</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">IntKind</span>::<span class=\"n\">TwosComplement</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">IntBits</span>::<span class=\"n\">Bits</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Int</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">IntKind</span>::<span class=\"n\">Modular</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">IntBits</span>::<span class=\"n\">PtrSize</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"kt\">isize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Int</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">IntKind</span>::<span class=\"n\">TwosComplement</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">IntBits</span>::<span class=\"n\">PtrSize</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"kt\">u8</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">uint</span><span class=\"o\">&lt;</span><span class=\"mi\">8</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"kt\">i8</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">sint</span><span class=\"o\">&lt;</span><span class=\"mi\">8</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"kt\">u16</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">uint</span><span class=\"o\">&lt;</span><span class=\"mi\">16</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"kt\">i16</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">sint</span><span class=\"o\">&lt;</span><span class=\"mi\">16</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"c1\">// ...</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Alas, the types still need to have their names made available by the compiler in every module.</p>",
        "id": 272950010,
        "sender_full_name": "Connor Horman",
        "timestamp": 1645623956
    },
    {
        "content": "<p>Would the prelude be enough for that?</p>",
        "id": 272950434,
        "sender_full_name": "bjorn3",
        "timestamp": 1645624146
    },
    {
        "content": "<p>No, since you can name them on stable even with <code>#![no_implicit_prelude]</code>.</p>",
        "id": 272950842,
        "sender_full_name": "Connor Horman",
        "timestamp": 1645624331
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"303710\">Gary Guo</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/adding.20int.3CN.3E/near/272949500\">said</a>:</p>\n<blockquote>\n<p>I think it provides too little value for its massive complexity.</p>\n</blockquote>\n<p>unfortunately it has turned out that they would be very valuable for certain interfaces.</p>",
        "id": 272975788,
        "sender_full_name": "Jubilee",
        "timestamp": 1645634967
    },
    {
        "content": "<blockquote>\n<p>No, since you can name them on stable even with <code>#![no_implicit_prelude]</code>.</p>\n</blockquote>\n<p>well, what about a separate super implicit prelude?</p>",
        "id": 272984223,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1645638102
    },
    {
        "content": "<p>maybe something like <code>#[rustc_always_visible]</code>?</p>",
        "id": 272984493,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1645638191
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"303710\">Gary Guo</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/adding.20int.3CN.3E/near/272949500\">said</a>:</p>\n<blockquote>\n<p>I think it provides too little value for its massive complexity.</p>\n</blockquote>\n<p>also I am curious as to where exactly, in your opinion, the complexity lies.</p>",
        "id": 273289009,
        "sender_full_name": "Jubilee",
        "timestamp": 1645825733
    }
]