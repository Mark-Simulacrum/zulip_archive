[
    {
        "content": "<p>Meeting here in more than 5 hours</p>",
        "id": 238274730,
        "sender_full_name": "lcnr",
        "timestamp": 1620723953
    },
    {
        "content": "<p>probably continuing working on the vision doc</p>",
        "id": 238274816,
        "sender_full_name": "lcnr",
        "timestamp": 1620723976
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"3805\">@project-const-generics</span> you absolute legends, it's meeting time</p>",
        "id": 238319993,
        "sender_full_name": "lcnr",
        "timestamp": 1620744381
    },
    {
        "content": "<p>wip vision doc from last week: <a href=\"https://hackmd.io/VOaGjRYsSXW4PR_VNwQmSQ\">https://hackmd.io/VOaGjRYsSXW4PR_VNwQmSQ</a></p>",
        "id": 238320069,
        "sender_full_name": "lcnr",
        "timestamp": 1620744413
    },
    {
        "content": "<p>wave</p>",
        "id": 238320515,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620744572
    },
    {
        "content": "<p>how are things</p>",
        "id": 238320538,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620744578
    },
    {
        "content": "<p>one handed typing, but present</p>",
        "id": 238320702,
        "sender_full_name": "oli",
        "timestamp": 1620744626
    },
    {
        "content": "<p>^ same</p>",
        "id": 238320722,
        "sender_full_name": "lcnr",
        "timestamp": 1620744634
    },
    {
        "content": "<p>hmm, there's been some threads since last week :)</p>",
        "id": 238320755,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620744647
    },
    {
        "content": "<p>we were talking about xamprocky's case</p>",
        "id": 238320878,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620744699
    },
    {
        "content": "<p>I imagine <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> that for \"const evaluatable checked' we would eventually want to be able to do</p>",
        "id": 238320911,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620744712
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">A</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">B</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">condition</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 238321026,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620744739
    },
    {
        "content": "<p>or something like that?</p>",
        "id": 238321029,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620744742
    },
    {
        "content": "<p>yes</p>",
        "id": 238321053,
        "sender_full_name": "lcnr",
        "timestamp": 1620744751
    },
    {
        "content": "<p>let's note that down</p>",
        "id": 238321115,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620744777
    },
    {
        "content": "<p>I feel like we spent a while talking about safety, didn't we?</p>",
        "id": 238321134,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620744788
    },
    {
        "content": "<blockquote>\n<p>safety</p>\n</blockquote>\n<p>in which context?</p>",
        "id": 238321187,
        "sender_full_name": "lcnr",
        "timestamp": 1620744815
    },
    {
        "content": "<p>like, what does it mean to write a \"safe const fn\"</p>",
        "id": 238321295,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620744848
    },
    {
        "content": "<p>or an \"unsafe const fn'</p>",
        "id": 238321299,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620744851
    },
    {
        "content": "<p>and in particular the idea that there are some operations that are not safe in const fns</p>",
        "id": 238321332,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620744861
    },
    {
        "content": "<p>which are safe in regular code</p>",
        "id": 238321338,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620744863
    },
    {
        "content": "<p>(becauset they may not be constant)</p>",
        "id": 238321351,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620744867
    },
    {
        "content": "<p>that was something we did talk about, yeah</p>",
        "id": 238321496,
        "sender_full_name": "lcnr",
        "timestamp": 1620744932
    },
    {
        "content": "<p>what's an example of something that's not safe in const again?</p>",
        "id": 238321519,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620744945
    },
    {
        "content": "<p>I guess casting pointers to integers</p>",
        "id": 238321531,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620744951
    },
    {
        "content": "<p>i think that const safety is more the responsibility of <span class=\"user-group-mention\" data-user-group-id=\"1916\">@WG-const-eval</span> than project const generics</p>",
        "id": 238321666,
        "sender_full_name": "lcnr",
        "timestamp": 1620745007
    },
    {
        "content": "<p>for const generics we don't have to care about any of that as long as our const arguments are deterministic</p>",
        "id": 238321719,
        "sender_full_name": "lcnr",
        "timestamp": 1620745031
    },
    {
        "content": "<p>there is a fairly big overlap between those two wgs and const-eval doesn't have regular meetings</p>",
        "id": 238321838,
        "sender_full_name": "lcnr",
        "timestamp": 1620745077
    },
    {
        "content": "<p>so it may still make sense to talk about this here</p>",
        "id": 238321894,
        "sender_full_name": "lcnr",
        "timestamp": 1620745085
    },
    {
        "content": "<p>but i want <span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> to be there whenever we talk about that</p>",
        "id": 238321956,
        "sender_full_name": "lcnr",
        "timestamp": 1620745108
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-05-11/near/238321666\">said</a>:</p>\n<blockquote>\n<p>i think that const safety is more the responsibility of <span class=\"user-group-mention\" data-user-group-id=\"1916\">@WG-const-eval</span> than project const generics</p>\n</blockquote>\n<p>That makes senes; I'm not sure though if those things are distinct enough to separate for our purposes.</p>",
        "id": 238322139,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620745187
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-05-11/near/238321956\">said</a>:</p>\n<blockquote>\n<p>but i want <span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> to be there whenever we talk about that</p>\n</blockquote>\n<p>I think a better approach than expecting everyone to be present is to get feedback from them</p>",
        "id": 238322228,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620745208
    },
    {
        "content": "<p>(i mean it's great if they <em>are</em>...)</p>",
        "id": 238322252,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620745217
    },
    {
        "content": "<p>so I wrote this example</p>",
        "id": 238322348,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620745255
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">SampledType</span>: <span class=\"nc\">SampleType</span><span class=\"o\">&lt;</span><span class=\"n\">FORMAT</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">DIM</span>: <span class=\"nc\">Dimensionality</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">DEPTH</span>: <span class=\"nc\">ImageDepth</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">ARRAYED</span>: <span class=\"nc\">Arrayed</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">MULTISAMPLED</span>: <span class=\"nc\">Multisampled</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">SAMPLED</span>: <span class=\"nc\">Sampled</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">FORMAT</span>: <span class=\"nc\">ImageFormat</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">ACCESS_QUALIFIER</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">AccessQualifier</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Image</span><span class=\"o\">&lt;</span><span class=\"n\">SampledType</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">DIM</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">DEPTH</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ARRAYED</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">MULTISAMPLED</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">SAMPLED</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">FORMAT</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ACCESS_QUALIFIER</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">query_size_lod</span><span class=\"o\">&lt;</span><span class=\"n\">Size</span>: <span class=\"nc\">ImageCoordinate</span><span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">DIM</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ARRAYED</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Default</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">.)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">MULTISAMPLED</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">Multisampled</span>::<span class=\"n\">False</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 238322359,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620745256
    },
    {
        "content": "<p>I'm not 100% sure that is feasible or all that shiny though :)</p>",
        "id": 238322408,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620745275
    },
    {
        "content": "<p>arbitrary equality constraints are kind of ... complex</p>",
        "id": 238322430,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620745284
    },
    {
        "content": "<p>I do think supporting const fns as boolean conditions is good though</p>",
        "id": 238322529,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620745315
    },
    {
        "content": "<p>right now these const bounds are only enforced to be correct. Are we talking about actually having booleans from CTFE feed back into the type system and make decisions there?</p>",
        "id": 238322718,
        "sender_full_name": "oli",
        "timestamp": 1620745358
    },
    {
        "content": "<p>I'm not :)</p>",
        "id": 238322754,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620745371
    },
    {
        "content": "<p>which is why I'm rewriting the example a bit</p>",
        "id": 238322762,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620745375
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-05-11/near/238322718\">said</a>:</p>\n<blockquote>\n<p>right now these const bounds are only enforced to be correct. Are we talking about actually having booleans from CTFE feed back into the type system and make decisions there?</p>\n</blockquote>\n<p><span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span>  current const evaluatable bounds assert evaluatability, without really caring about the return type</p>",
        "id": 238322879,
        "sender_full_name": "lcnr",
        "timestamp": 1620745401
    },
    {
        "content": "<p>hmm but we can already kind of do this though right?</p>",
        "id": 238322897,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1620745408
    },
    {
        "content": "<p>it's jsut less ergonomic because you have to panic if its false</p>",
        "id": 238322919,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1620745420
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">SampledType</span>: <span class=\"nc\">SampleType</span><span class=\"o\">&lt;</span><span class=\"n\">FORMAT</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">DIM</span>: <span class=\"nc\">Dimensionality</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">DEPTH</span>: <span class=\"nc\">ImageDepth</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">ARRAYED</span>: <span class=\"nc\">Arrayed</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">MULTISAMPLED</span>: <span class=\"nc\">Multisampled</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">SAMPLED</span>: <span class=\"nc\">Sampled</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">FORMAT</span>: <span class=\"nc\">ImageFormat</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">ACCESS_QUALIFIER</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">AccessQualifier</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Image</span><span class=\"o\">&lt;</span><span class=\"n\">SampledType</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">DIM</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">DEPTH</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ARRAYED</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">MULTISAMPLED</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">SAMPLED</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">FORMAT</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ACCESS_QUALIFIER</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">example_method</span><span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">.)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">some_condition</span><span class=\"p\">(</span><span class=\"n\">DEPTH</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">MULTISAMPLED</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">ImageDepth</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">value</span>: <span class=\"kt\">u32</span> <span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">enum</span> <span class=\"nc\">Multisampled</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">True</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">False</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">some_condition</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"nc\">ImageDepth</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">m</span>: <span class=\"nc\">Multisampled</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 238322932,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620745425
    },
    {
        "content": "<p>boolean conditions would have to be written something like <code>evaluatable { assert!(cond) }</code></p>",
        "id": 238322939,
        "sender_full_name": "lcnr",
        "timestamp": 1620745427
    },
    {
        "content": "<p>something like that</p>",
        "id": 238322940,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620745428
    },
    {
        "content": "<p>yeah, so evaluatable is part of what led us here :)</p>",
        "id": 238322989,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620745439
    },
    {
        "content": "<p>let's dig a bit into that</p>",
        "id": 238322998,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620745441
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-05-11/near/238322718\">said</a>:</p>\n<blockquote>\n<p>right now these const bounds are only enforced to be correct. Are we talking about actually having booleans from CTFE feed back into the type system and make decisions there?</p>\n</blockquote>\n<p>well, I don't know what \"be correct\" means</p>",
        "id": 238323246,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620745505
    },
    {
        "content": "<p>but I would definitely expect you to be able to say \"this evaluates to true\" as a where clause</p>",
        "id": 238323299,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620745518
    },
    {
        "content": "<p>it's hard to see why you...wouldn't :)</p>",
        "id": 238323311,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620745522
    },
    {
        "content": "<p>like, you can trivially model it, right? so why not just expose it</p>",
        "id": 238323425,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620745556
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-05-11/near/238323246\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-05-11/near/238322718\">said</a>:</p>\n<blockquote>\n<p>right now these const bounds are only enforced to be correct. Are we talking about actually having booleans from CTFE feed back into the type system and make decisions there?</p>\n</blockquote>\n<p>well, I don't know what \"be correct\" means</p>\n</blockquote>\n<p>well, no CTFE error, so also no panic. Right now just having a bool expression will do nothing, you need to assert! to check that it is true</p>",
        "id": 238323443,
        "sender_full_name": "oli",
        "timestamp": 1620745560
    },
    {
        "content": "<p>I shoul add that i still don't believe in evaluatable as a concept, so maybe we can write out the story where I am happy it exists</p>",
        "id": 238323547,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620745584
    },
    {
        "content": "<p>but yea, it may be more convenient to go with directly allowing bool expressions (unless we want these to have different meaning in the future)</p>",
        "id": 238323549,
        "sender_full_name": "oli",
        "timestamp": 1620745585
    },
    {
        "content": "<p>I definitely think there should be <em>some</em> way to assert it is true</p>",
        "id": 238323598,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620745601
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-05-11/near/238323299\">said</a>:</p>\n<blockquote>\n<p>but I would definitely expect you to be able to say \"this evaluates to true\" as a where clause</p>\n</blockquote>\n<p>yes, rn this can be done using a hack like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Condition</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">bool</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">IsTrue</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">IsTrue</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Condition</span><span class=\"o\">&lt;</span><span class=\"kc\">true</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"c1\">// ....</span>\n<span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">Condition</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">expr</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"o\">&gt;</span>: <span class=\"nc\">IsTrue</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 238323610,
        "sender_full_name": "lcnr",
        "timestamp": 1620745604
    },
    {
        "content": "<p>right. I'd just make that a thing.</p>",
        "id": 238323653,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620745618
    },
    {
        "content": "<p>what I didn't necessarily want -- or at least we'd have to think on it =) -- is being able to write <code>where { F == 32 }</code> and have that equality kind of \"propagate\"</p>",
        "id": 238323804,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620745674
    },
    {
        "content": "<p>although it would be nice</p>",
        "id": 238323806,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620745676
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-05-11/near/238323547\">said</a>:</p>\n<blockquote>\n<p>I shoul add that i still don't believe in evaluatable as a concept, so maybe we can write out the story where I am happy it exists</p>\n</blockquote>\n<p>the \"require bounds for all consts\" part of it, or is the space you dislike broader?</p>",
        "id": 238323862,
        "sender_full_name": "oli",
        "timestamp": 1620745686
    },
    {
        "content": "<p>in the same way it'd be nice to be able to write </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">method</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 238323868,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620745689
    },
    {
        "content": "<p>I just think it's not something that users will understand</p>",
        "id": 238323915,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620745707
    },
    {
        "content": "<p>it feels like complexity 'leaking out' and I'm not convinced it should</p>",
        "id": 238324004,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620745741
    },
    {
        "content": "<p>(I realize though that ignoring it will mean errors in later phases)</p>",
        "id": 238324061,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620745755
    },
    {
        "content": "<p>I'm happy to write both stories to start</p>",
        "id": 238324080,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620745765
    },
    {
        "content": "<p>let me try I guess</p>",
        "id": 238324116,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620745784
    },
    {
        "content": "<p>I'm typing at the end of <a href=\"https://hackmd.io/VOaGjRYsSXW4PR_VNwQmSQ\">this hackmd</a></p>",
        "id": 238324150,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620745796
    },
    {
        "content": "<p>wait, what I was writing doesn't make sense</p>",
        "id": 238324467,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620745906
    },
    {
        "content": "<p>I think we discussed this in</p>",
        "id": 238324639,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620745963
    },
    {
        "content": "<p><a class=\"stream-topic\" data-stream-id=\"260443\" href=\"/#narrow/stream/260443-project-const-generics/topic/meeting.202021-04-20\">#project-const-generics &gt; meeting 2021-04-20</a></p>",
        "id": 238324663,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620745974
    },
    {
        "content": "<p>so I'm re-reading</p>",
        "id": 238324673,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620745978
    },
    {
        "content": "<p>ok, so the example we gave them was <code>split_first</code></p>",
        "id": 238324985,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620746098
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">split_first</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">arr</span>: <span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// ...</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">tail</span>: <span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"c1\">// ...</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">tail</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 238325003,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620746103
    },
    {
        "content": "<p>this is an interesting one because it intercepts implied bounds</p>",
        "id": 238325025,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620746113
    },
    {
        "content": "<p>ok, I think i am starting to see also some of the previous point</p>",
        "id": 238325385,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620746251
    },
    {
        "content": "<p>so is the idea that <code>where { &lt;expr&gt; }</code> means \"<code>expr</code> can be evaluated without panic\"?</p>",
        "id": 238325411,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620746265
    },
    {
        "content": "<p>with an open question regarding syntax, yeah</p>",
        "id": 238325497,
        "sender_full_name": "lcnr",
        "timestamp": 1620746291
    },
    {
        "content": "<p>i really like <code>where evaluatable { expr }</code> atm</p>",
        "id": 238325525,
        "sender_full_name": "lcnr",
        "timestamp": 1620746305
    },
    {
        "content": "<p>ok. I agree with that as a core capability, but I definitely think we would also want some way to assert that something is true</p>",
        "id": 238325544,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620746315
    },
    {
        "content": "<p><code>evaluatable { .. }</code> feels a bit like compiler jargon to me <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 238325561,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1620746324
    },
    {
        "content": "<p>I don't like evaluatable still</p>",
        "id": 238325573,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620746329
    },
    {
        "content": "<p>but</p>",
        "id": 238325579,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620746334
    },
    {
        "content": "<p>well, ok, here is the first story</p>",
        "id": 238325586,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620746338
    },
    {
        "content": "<blockquote>\n<p>Barbara is working on her project. She has the idea to write a <code>split_first</code> function that will allow her to split out the first item from a fixed-length array; naturally, the array must be non-empty. It looks something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">split_first</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">arr</span>: <span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// ...</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">tail</span>: <span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"c1\">// ...</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">tail</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Next she wants to write a function that uses <code>split_first</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">some_method</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">arr</span>: <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">first</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rest</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">split_first</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">rest</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// ...</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The compiler gives her an error message:</p>\n<p><div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>error: the constant expression <span class=\"sb\">`</span>N-1<span class=\"sb\">`</span> is not known to be evaluatable\n<span class=\"m\">2</span> <span class=\"p\">|</span>     <span class=\"nb\">let</span> <span class=\"o\">(</span>first, rest<span class=\"o\">)</span> <span class=\"o\">=</span> split_first<span class=\"o\">(</span>arr<span class=\"o\">)</span><span class=\"p\">;</span>\n  <span class=\"p\">|</span>                         ^^^^^^^^^^^ <span class=\"sb\">`</span>N-1<span class=\"sb\">`</span> not known to be evaluatable\nhelp: add a where clause to <span class=\"sb\">`</span>some_method<span class=\"sb\">`</span>\n  <span class=\"p\">|</span> fn some_method&lt;const N: usize&gt;<span class=\"o\">(</span>arr: <span class=\"o\">[</span>u8<span class=\"p\">;</span> N<span class=\"o\">])</span> where <span class=\"o\">{</span> N - <span class=\"m\">1</span> <span class=\"o\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 238325599,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620746345
    },
    {
        "content": "<p>I'll use the <code>evaluatable</code> syntax for now</p>",
        "id": 238325680,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620746376
    },
    {
        "content": "<p>Why would the error message occur at <code>split_first(arr)</code>? In this implicit model, isn't an implicit bound going to be added to <code>some_method</code> requiring <code>N &gt;= 1</code>?</p>",
        "id": 238325942,
        "sender_full_name": "varkor",
        "timestamp": 1620746462
    },
    {
        "content": "<p>what ppl actually want to express here is \"N &gt; 0\"</p>",
        "id": 238325948,
        "sender_full_name": "oli",
        "timestamp": 1620746466
    },
    {
        "content": "<p>hold on, story is incomplete</p>",
        "id": 238326013,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620746483
    },
    {
        "content": "<p>yes, <span class=\"user-mention\" data-user-id=\"124288\">@oli</span>, I added that as variant B</p>",
        "id": 238326030,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620746490
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"121053\">varkor</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-05-11/near/238325942\">said</a>:</p>\n<blockquote>\n<p>Why would the error message occur at <code>split_first(arr)</code>? In this implicit model, isn't an implicit bound going to be added to <code>some_method</code> requiring <code>N &gt;= 1</code>?</p>\n</blockquote>\n<p>nope</p>",
        "id": 238326062,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620746501
    },
    {
        "content": "<p>I was assuming the same implied bounds we have today</p>",
        "id": 238326082,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620746508
    },
    {
        "content": "<p>which means that the functions get to assume their argument types + return types are well-formed</p>",
        "id": 238326104,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620746517
    },
    {
        "content": "<p>and we can assume that a constant expression is only well-formed if it is evaluatable</p>",
        "id": 238326159,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620746526
    },
    {
        "content": "<p>does that make sense?</p>",
        "id": 238326169,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620746529
    },
    {
        "content": "<p>(I'll add a few \"notes\" on the implications in the hackmd)</p>",
        "id": 238326210,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620746542
    },
    {
        "content": "<p>we are going to want to break this out into a repo soon though</p>",
        "id": 238326221,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620746548
    },
    {
        "content": "<p>Right, so <code>N - 1</code> is assumed well-formed for <code>split_first</code> because it appears in the return type.</p>",
        "id": 238326240,
        "sender_full_name": "varkor",
        "timestamp": 1620746556
    },
    {
        "content": "<p>right, whcih we do today for region relationships (somewhat unsoundly, but never mind, we'll fix that)</p>",
        "id": 238326269,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620746569
    },
    {
        "content": "<p>But we couldn't write <code>N - 2</code> inside <code>split_first</code>.</p>",
        "id": 238326308,
        "sender_full_name": "varkor",
        "timestamp": 1620746587
    },
    {
        "content": "<p>correct</p>",
        "id": 238326321,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620746590
    },
    {
        "content": "<p>ok, the hackmd is I think telling the best version of 3 stories :)</p>",
        "id": 238327488,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620747007
    },
    {
        "content": "<p>with some unknowns in how we could achieve it...</p>",
        "id": 238327514,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620747015
    },
    {
        "content": "<p>I really like the idea of being able to write <code>where { N &gt; 0 }</code> to satisfy <code>N - 1</code> being evaluatable <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 238327634,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1620747052
    },
    {
        "content": "<p>I feel like we'd be doing our users a disservice not to try and get there, even if we don't start there</p>",
        "id": 238327694,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620747073
    },
    {
        "content": "<p>there' a lot of work going on to create formal verifiers and things for Rust</p>",
        "id": 238327823,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620747116
    },
    {
        "content": "<p>we talked about this early in the design phase and kind of bailed out with \"where would we stop, we don't know, so let's stop thinking about it for now\". But yea, we should have a plan</p>",
        "id": 238327842,
        "sender_full_name": "oli",
        "timestamp": 1620747122
    },
    {
        "content": "<p>right</p>",
        "id": 238327927,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620747140
    },
    {
        "content": "<p>I'm not sure how consistent the final version of this story is, the one with monomorphization errors</p>",
        "id": 238328076,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620747193
    },
    {
        "content": "<p>i think we won't error in <code>some_method</code>, will we?</p>",
        "id": 238328158,
        "sender_full_name": "lcnr",
        "timestamp": 1620747213
    },
    {
        "content": "<p>yea, the root error span should be in user code</p>",
        "id": 238328563,
        "sender_full_name": "oli",
        "timestamp": 1620747299
    },
    {
        "content": "<p>I think I expect the error to occur in <code>split_first</code>, which is what I wrote</p>",
        "id": 238328603,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620747307
    },
    {
        "content": "<p>at <em>some</em> point we are going to try and evaluate <code>N-1</code> and we're going to get an error</p>",
        "id": 238328690,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620747321
    },
    {
        "content": "<p>but, tbh, for CTFE we also report the root span at the actual error site and just print a backtrace that points back to user code</p>",
        "id": 238328996,
        "sender_full_name": "oli",
        "timestamp": 1620747366
    },
    {
        "content": "<p>it sometimes gives subpar diagnostics</p>",
        "id": 238329113,
        "sender_full_name": "oli",
        "timestamp": 1620747386
    },
    {
        "content": "<p>example: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=2fe4ec2caf822f8ce51c0517dbe93450\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=2fe4ec2caf822f8ce51c0517dbe93450</a></p>",
        "id": 238329355,
        "sender_full_name": "oli",
        "timestamp": 1620747459
    },
    {
        "content": "<p>Probably the diagnostics are going to be subpar either way in some cases, e.g. deeply nested code, because you either have no idea why the function you're calling doesn't like its inputs, or you're looking at some code you have no familiarity with because it's not your own code.</p>",
        "id": 238329430,
        "sender_full_name": "varkor",
        "timestamp": 1620747482
    },
    {
        "content": "<p>well, I'm kind of trying to imagine what diagnostics i would want</p>",
        "id": 238329486,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620747486
    },
    {
        "content": "<p>but even in this example</p>",
        "id": 238329531,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620747500
    },
    {
        "content": "<p>it's not hard to imagine that it's confusing</p>",
        "id": 238329537,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620747504
    },
    {
        "content": "<p>we could easily rewrite the story to be that she has written the top function (not shown) which calls <code>some_method</code> and gets this error</p>",
        "id": 238329647,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620747542
    },
    {
        "content": "<p>and she has to dive in a bit and understand what is going on</p>",
        "id": 238329673,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620747551
    },
    {
        "content": "<p>that said</p>",
        "id": 238329726,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620747568
    },
    {
        "content": "<p>I think what concerns me is that we're going to wind up with a blizzard of \"similar but different\" evaluatable things</p>",
        "id": 238329817,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620747602
    },
    {
        "content": "<p>or exposing way more details than we would want to about the contents of the function body</p>",
        "id": 238329918,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620747624
    },
    {
        "content": "<p>I think that of these stories, to me, the Version B is the one to go for (<code>where N &gt; 0</code>)</p>",
        "id": 238329974,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620747637
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"326176\">@Boxy [she/her]</span> did suggest a solution here <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-04-20/near/235389010\">https://rust-lang.zulipchat.com/#narrow/stream/260443-project-const-generics/topic/meeting.202021-04-20/near/235389010</a></p>",
        "id": 238329990,
        "sender_full_name": "lcnr",
        "timestamp": 1620747642
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-05-11/near/238329990\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"326176\">Boxy [she/her]</span> did suggest a solution here <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-04-20/near/235389010\">https://rust-lang.zulipchat.com/#narrow/stream/260443-project-const-generics/topic/meeting.202021-04-20/near/235389010</a></p>\n</blockquote>\n<p>oh god did I</p>",
        "id": 238330008,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1620747651
    },
    {
        "content": "<p>which uses version A</p>",
        "id": 238330010,
        "sender_full_name": "lcnr",
        "timestamp": 1620747651
    },
    {
        "content": "<p>and can <em>assume</em> some bounds to hold</p>",
        "id": 238330035,
        "sender_full_name": "lcnr",
        "timestamp": 1620747663
    },
    {
        "content": "<p>so e.g.</p>",
        "id": 238330041,
        "sender_full_name": "lcnr",
        "timestamp": 1620747666
    },
    {
        "content": "<p>I don't know that I see the advantage to that</p>",
        "id": 238330081,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620747679
    },
    {
        "content": "<p>you still have to type out all the things, right/</p>",
        "id": 238330100,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620747688
    },
    {
        "content": "<p>I think that is mainly bubbling vs not bubbling the bound</p>",
        "id": 238330127,
        "sender_full_name": "oli",
        "timestamp": 1620747694
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">some_method</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">arr</span>: <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">first</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rest</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">split_first</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">second</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rest</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">split_first</span><span class=\"p\">(</span><span class=\"n\">rest</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">rest</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// ...</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 238330134,
        "sender_full_name": "lcnr",
        "timestamp": 1620747697
    },
    {
        "content": "<p>yeah, ok</p>",
        "id": 238330136,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620747698
    },
    {
        "content": "<p>you take some risk on yourself somehow</p>",
        "id": 238330167,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620747708
    },
    {
        "content": "<p>\"unsafe where { N - 1 }\" <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 238330323,
        "sender_full_name": "oli",
        "timestamp": 1620747746
    },
    {
        "content": "<p>can now you can use <code>assume { N -  1 }</code>, <code>evaluatable { N - 2 }</code> in <code>some_method</code> and only require <code>evaluatable { N - 2 }</code> when using <code>some_method</code></p>",
        "id": 238330325,
        "sender_full_name": "lcnr",
        "timestamp": 1620747747
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-05-11/near/238330100\">said</a>:</p>\n<blockquote>\n<p>you still have to type out all the things, right/</p>\n</blockquote>\n<p>i guess that still can happen even with version B</p>",
        "id": 238330392,
        "sender_full_name": "lcnr",
        "timestamp": 1620747770
    },
    {
        "content": "<p>that's a better example</p>",
        "id": 238330462,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620747797
    },
    {
        "content": "<p>the two calls to <code>split_first</code></p>",
        "id": 238330472,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620747803
    },
    {
        "content": "<p>ok, let's add that as Version D for now I guess</p>",
        "id": 238330513,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620747824
    },
    {
        "content": "<p>my concern with version B is that figuring out these bounds is generally impossible</p>",
        "id": 238330525,
        "sender_full_name": "lcnr",
        "timestamp": 1620747827
    },
    {
        "content": "<p>so there will be a point where this breaks down and the user has to write unnecessary bounds</p>",
        "id": 238330609,
        "sender_full_name": "lcnr",
        "timestamp": 1620747845
    },
    {
        "content": "<p>yes. It'd be good to have some examples where we see that happening. it feels like it kind of \"bottoms out\" to version a</p>",
        "id": 238330662,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620747869
    },
    {
        "content": "<p>like, in the worst case, it looks like version A</p>",
        "id": 238330681,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620747875
    },
    {
        "content": "<p>I'm trying to thikn about other forms of const evaluation errors we might encounter</p>",
        "id": 238330758,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620747903
    },
    {
        "content": "<p>index out of bounds?</p>",
        "id": 238330798,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620747917
    },
    {
        "content": "<p>unsafe code-- casting fn to integer and then manipulating it</p>",
        "id": 238330860,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620747939
    },
    {
        "content": "<p>unsafe code: accessing undefined bits</p>",
        "id": 238330910,
        "sender_full_name": "oli",
        "timestamp": 1620747956
    },
    {
        "content": "<p>there are some programs which only work for arrays of prime length or something, so these would need boolean bounds</p>",
        "id": 238330917,
        "sender_full_name": "lcnr",
        "timestamp": 1620747958
    },
    {
        "content": "<p>those are both cases where you can't readily create a boolean expression to represent them</p>",
        "id": 238330923,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620747960
    },
    {
        "content": "<p>(array length is <em>plausible</em>)</p>",
        "id": 238331069,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620748002
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-05-11/near/238330917\">said</a>:</p>\n<blockquote>\n<p>there are some programs which only work for arrays of prime length or something, so these would need boolean bounds</p>\n</blockquote>\n<p>As in there exist such programs in theory, or people are actually writing them?</p>",
        "id": 238331177,
        "sender_full_name": "varkor",
        "timestamp": 1620748038
    },
    {
        "content": "<p>people are actually writing them</p>",
        "id": 238331207,
        "sender_full_name": "lcnr",
        "timestamp": 1620748049
    },
    {
        "content": "<p>iirc some hashing algorithms work that way</p>",
        "id": 238331240,
        "sender_full_name": "lcnr",
        "timestamp": 1620748060
    },
    {
        "content": "<p>For cryptography?</p>",
        "id": 238331241,
        "sender_full_name": "varkor",
        "timestamp": 1620748061
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"121053\">varkor</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-05-11/near/238331241\">said</a>:</p>\n<blockquote>\n<p>For cryptography?</p>\n</blockquote>\n<p>that too probably</p>",
        "id": 238331313,
        "sender_full_name": "lcnr",
        "timestamp": 1620748080
    },
    {
        "content": "<p>yea, I can confirm interesting compile-time math for array lengths in cryptography</p>",
        "id": 238331366,
        "sender_full_name": "oli",
        "timestamp": 1620748085
    },
    {
        "content": "<p>oh I would LOVE to see some cryptography examples</p>",
        "id": 238331400,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620748095
    },
    {
        "content": "<p>I wanted to add some more realistic and engaging examples</p>",
        "id": 238331436,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620748106
    },
    {
        "content": "<p>I don't have a very clear picture on why generics are so useful</p>",
        "id": 238331500,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620748131
    },
    {
        "content": "<p>I'll ask, maybe we'll have examples for next week</p>",
        "id": 238331568,
        "sender_full_name": "oli",
        "timestamp": 1620748152
    },
    {
        "content": "<p>(I guess to customize like...number of bits in the hash...?)</p>",
        "id": 238331579,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620748157
    },
    {
        "content": "<p>ok :) i'm curious who you would ask</p>",
        "id": 238331618,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620748167
    },
    {
        "content": "<p>my previous employer</p>",
        "id": 238331971,
        "sender_full_name": "oli",
        "timestamp": 1620748284
    },
    {
        "content": "<p>there was a really complex use of the typenum crate with crazy math bounds to ensure that the crypto ops could only be used correctly</p>",
        "id": 238332067,
        "sender_full_name": "oli",
        "timestamp": 1620748320
    },
    {
        "content": "<p>ok</p>",
        "id": 238332268,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620748386
    },
    {
        "content": "<p>what's the desired \"end goal\" for this vision doc- for example should we have stuff in there about opt-in-ness of types being const paramable so that library authors cant accidentally break peoples code by adding a pointer to their struct?</p>",
        "id": 238337050,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1620750099
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-05-11/near/238322228\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-05-11/near/238321956\">said</a>:</p>\n<blockquote>\n<p>but i want <span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> to be there whenever we talk about that</p>\n</blockquote>\n<p>I think a better approach than expecting everyone to be present is to get feedback from them</p>\n</blockquote>\n<p>I'm happy to comment asynchronously on things; synchronous time is a lot harder to find. :D</p>",
        "id": 238632342,
        "sender_full_name": "RalfJ",
        "timestamp": 1620917686
    },
    {
        "content": "<p>we also have some notes at <a href=\"https://github.com/rust-lang/const-eval/blob/master/const_safety.md\">https://github.com/rust-lang/const-eval/blob/master/const_safety.md</a> that might be a good starting point</p>",
        "id": 238632387,
        "sender_full_name": "RalfJ",
        "timestamp": 1620917706
    },
    {
        "content": "<p>thanks <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span></p>",
        "id": 238685539,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620942123
    }
]