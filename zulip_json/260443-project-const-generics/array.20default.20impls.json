[
    {
        "content": "<p>we've talked a bit about generic <code>Default</code> impls for arrays in the last meeting and it was also mentioned in #t-libs recently. And I have now come up with an imo clean solution here</p>",
        "id": 236871360,
        "sender_full_name": "lcnr",
        "timestamp": 1619803501
    },
    {
        "content": "<p>we have 2 requirements for these impls</p>",
        "id": 236871432,
        "sender_full_name": "lcnr",
        "timestamp": 1619803536
    },
    {
        "content": "<ul>\n<li>don't break <code>[Foo; 0]</code> where <code>Foo</code> doesn't impl <code>Default</code></li>\n</ul>",
        "id": 236871476,
        "sender_full_name": "lcnr",
        "timestamp": 1619803558
    },
    {
        "content": "<ul>\n<li>allow for <code>fn foo&lt;T: Default, const N: usize&gt;() -&gt; [T; N] { Default::default() }</code></li>\n</ul>",
        "id": 236871557,
        "sender_full_name": "lcnr",
        "timestamp": 1619803582
    },
    {
        "content": "<p>in <a href=\"https://github.com/rust-lang/rust/issues/74254\">#74254</a> we implemented this using</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[marker]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">ArrayDefault</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">ArrayDefault</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">Default</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">ArrayDefault</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">DefaultHack</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">default_hack</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">DefaultHack</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">default</span> <span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"n\">default_hack</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"fm\">unreachable!</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">Default</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">DefaultHack</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">default_hack</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Default</span>::<span class=\"n\">default</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">Default</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">]</span>: <span class=\"nc\">ArrayDefault</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">default</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">[();</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">].</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">_unit</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">DefaultHack</span>::<span class=\"n\">default_hack</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 236871941,
        "sender_full_name": "lcnr",
        "timestamp": 1619803764
    },
    {
        "content": "<p>this depends on both <code>feature(marker_trait_attr)</code> and <code>feature(specialization)</code></p>",
        "id": 236872021,
        "sender_full_name": "lcnr",
        "timestamp": 1619803801
    },
    {
        "content": "<p>the 2 issues with this approach were:</p>",
        "id": 236872093,
        "sender_full_name": "lcnr",
        "timestamp": 1619803818
    },
    {
        "content": "<ul>\n<li>specializing on <code>Default</code>, while fine here, is generally unsound, so using this in <code>core</code> is definitely kinda sus</li>\n</ul>",
        "id": 236872318,
        "sender_full_name": "lcnr",
        "timestamp": 1619803914
    },
    {
        "content": "<ul>\n<li>this generic implementation has slightly worse codegen than <code>[Default::default(), Default::default(), Default::default(), ...]</code>, which while imo acceptable is not great</li>\n</ul>",
        "id": 236872474,
        "sender_full_name": "lcnr",
        "timestamp": 1619803960
    },
    {
        "content": "<p>instead of using <code>DefaultHack</code>, we can however implement default for arrays as a compiler intrinsic and always using <code>Default::default()</code>there. This removes the reliance on specialization and fixes the codegen regression</p>",
        "id": 236872681,
        "sender_full_name": "lcnr",
        "timestamp": 1619804034
    },
    {
        "content": "<p>for the sake of <code>T-lang</code> we probably want to stabilize <code>feature(marker_trait_attr)</code> first, cc <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> do you know whether <a href=\"https://github.com/rust-lang/rust/issues/29864#issuecomment-660323818\">https://github.com/rust-lang/rust/issues/29864#issuecomment-660323818</a> is still up to date?</p>",
        "id": 236873045,
        "sender_full_name": "lcnr",
        "timestamp": 1619804166
    },
    {
        "content": "<p>the one open issue here mentioned by <span class=\"user-mention\" data-user-id=\"224872\">@rylev</span> was about negative trait impls, or in general, whether we can loosen the orphan rules</p>",
        "id": 236873203,
        "sender_full_name": "lcnr",
        "timestamp": 1619804241
    },
    {
        "content": "<p>looking at <a href=\"https://github.com/rust-lang/rust/issues/67919#issuecomment-575315025\">https://github.com/rust-lang/rust/issues/67919#issuecomment-575315025</a> it does not seem sound to greatly loosen orphan rules for marker traits, thereby solving this issue</p>",
        "id": 236873504,
        "sender_full_name": "lcnr",
        "timestamp": 1619804355
    },
    {
        "content": "<p>I remember there were some concerns about negative trait impls and a few other things</p>",
        "id": 236873687,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619804413
    },
    {
        "content": "<p>hmm, as an alternative to stabilizing <code>marker_trait_attr</code></p>",
        "id": 236874568,
        "sender_full_name": "lcnr",
        "timestamp": 1619804816
    },
    {
        "content": "<p>we can also use <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=120539b4fb296036ca04b4141d903c34\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=120539b4fb296036ca04b4141d903c34</a></p>",
        "id": 236874575,
        "sender_full_name": "lcnr",
        "timestamp": 1619804819
    },
    {
        "content": "<p>this fulfills all requirements</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">marker</span>::<span class=\"n\">PhantomData</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">ArrayDefault</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">DefaultToSend</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">PhantomData</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">Default</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">DefaultToSend</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">SendToDefault</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">DefaultToSend</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">SendToDefault</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">ArrayDefault</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">SendToDefault</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">&gt;</span>: <span class=\"nb\">Send</span> <span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">check_array_default</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">ArrayDefault</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">generic</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">Default</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">check_array_default</span>::<span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">zero</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">check_array_default</span>::<span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">non_zero_err</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">check_array_default</span>::<span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 236874621,
        "sender_full_name": "lcnr",
        "timestamp": 1619804832
    },
    {
        "content": "<p>oh my</p>",
        "id": 236874736,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1619804877
    },
    {
        "content": "<p>I love it</p>",
        "id": 236880591,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1619807230
    },
    {
        "content": "<p>ouch... this took me a bit to understand. I am in awe</p>",
        "id": 236887969,
        "sender_full_name": "oli",
        "timestamp": 1619810511
    },
    {
        "content": "<p>hold up, how do we implement the default function in the impl block? We can't access Default, as that bound doesn't exist at that level</p>",
        "id": 236889624,
        "sender_full_name": "oli",
        "timestamp": 1619811273
    },
    {
        "content": "<p>ah, we still need specialization for that?</p>",
        "id": 236889827,
        "sender_full_name": "oli",
        "timestamp": 1619811379
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/array.20default.20impls/near/236889827\">said</a>:</p>\n<blockquote>\n<p>ah, we still need specialization for that?</p>\n</blockquote>\n<p>my idea is an intrinsic</p>",
        "id": 236893388,
        "sender_full_name": "lcnr",
        "timestamp": 1619812961
    },
    {
        "content": "<p>so we use <code>unchecked_array_default&lt;T, const N: usize() -&gt;  [T; N]</code> which unconditionally uses <code>T::default()</code> for <code>N &gt; 0</code></p>",
        "id": 236893492,
        "sender_full_name": "lcnr",
        "timestamp": 1619812996
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/array.20default.20impls/near/236873687\">said</a>:</p>\n<blockquote>\n<p>I remember there were some concerns about negative trait impls and a few other things</p>\n</blockquote>\n<p>to be clear, I also <em>think</em> these weren't especially hard to resolve</p>",
        "id": 236949516,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619857494
    },
    {
        "content": "<blockquote>\n<p>my idea is an intrinsic</p>\n</blockquote>\n<p>that's not as trivial as i had hoped <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 237063641,
        "sender_full_name": "lcnr",
        "timestamp": 1619972239
    },
    {
        "content": "<p>:thonk:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">array_default_hack</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">fn</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">T</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 237064108,
        "sender_full_name": "lcnr",
        "timestamp": 1619972754
    },
    {
        "content": "<p>that should be easier <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 237064109,
        "sender_full_name": "lcnr",
        "timestamp": 1619972761
    },
    {
        "content": "<p>yes, simpler intrinsics are very much preferrable over ones that have loops and stuff in their expansion</p>",
        "id": 237067359,
        "sender_full_name": "oli",
        "timestamp": 1619976027
    },
    {
        "content": "<p>using a lang item and specialcasing in <code>resolve</code>, similar to <code>drop_in_place</code>, was a lot easier</p>",
        "id": 237071797,
        "sender_full_name": "lcnr",
        "timestamp": 1619980272
    },
    {
        "content": "<p>oh no, slowly getting broken by missing stability attributes :(</p>",
        "id": 237072301,
        "sender_full_name": "lcnr",
        "timestamp": 1619980750
    },
    {
        "content": "<p>also recompiling all of rustc everytime i change anything in my <code>cfg(not(bootstrap))</code> impl is also not as much fun as i would like. should start using <code>keep-stage</code></p>",
        "id": 237072328,
        "sender_full_name": "lcnr",
        "timestamp": 1619980801
    },
    {
        "content": "<p>okay, there's one unfun issue here though</p>",
        "id": 237083661,
        "sender_full_name": "lcnr",
        "timestamp": 1619989587
    },
    {
        "content": "<p>the auto trait hack does work how we want it to in nearly all cases</p>",
        "id": 237083691,
        "sender_full_name": "lcnr",
        "timestamp": 1619989600
    },
    {
        "content": "<p>but</p>",
        "id": 237083697,
        "sender_full_name": "lcnr",
        "timestamp": 1619989603
    },
    {
        "content": "<p>we have 1 explicit impl</p>",
        "id": 237083718,
        "sender_full_name": "lcnr",
        "timestamp": 1619989611
    },
    {
        "content": "<p>and one impl if all fields are <code>Send</code></p>",
        "id": 237083787,
        "sender_full_name": "lcnr",
        "timestamp": 1619989643
    },
    {
        "content": "<p>these automatic impls are only considered if there are no other potential impls</p>",
        "id": 237084052,
        "sender_full_name": "lcnr",
        "timestamp": 1619989736
    },
    {
        "content": "<p>which means that if we make the impl for <code>0</code> the explicit one and the <code>T: Default</code> the auto one</p>",
        "id": 237084197,
        "sender_full_name": "lcnr",
        "timestamp": 1619989795
    },
    {
        "content": "<p>we \"force\" const inference variables to <code>0</code>, breaking code which should work</p>",
        "id": 237084303,
        "sender_full_name": "lcnr",
        "timestamp": 1619989823
    },
    {
        "content": "<p>i don't think we do any inference stuff based on trait bounds, so making the <code>T: Default</code> bound the explicit one probably doesn't have the same issue</p>",
        "id": 237084395,
        "sender_full_name": "lcnr",
        "timestamp": 1619989861
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/array.20default.20impls/near/237083661\">said</a>:</p>\n<blockquote>\n<p>okay, there's one unfun issue here though</p>\n</blockquote>\n<p><del>unfun</del> I have to admit i really enjoyed that <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 237085606,
        "sender_full_name": "lcnr",
        "timestamp": 1619990304
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/84838\">#84838</a></p>",
        "id": 237090639,
        "sender_full_name": "lcnr",
        "timestamp": 1619994743
    },
    {
        "content": "<p>ok, we do need actual marker traits <span aria-label=\"sparkles\" class=\"emoji emoji-2728\" role=\"img\" title=\"sparkles\">:sparkles:</span></p>",
        "id": 237093619,
        "sender_full_name": "lcnr",
        "timestamp": 1619997540
    },
    {
        "content": "<p>I also give this a try, without using markers or intrinsics. But it seems i've got something wrong...</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(const_generics)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![allow(incomplete_features)]</span><span class=\"w\"></span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">marker</span>::<span class=\"n\">PhantomData</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">DefaultArrayBuilder</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">LEN</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">IS_EMPTY</span>: <span class=\"kt\">bool</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">PhantomData</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">DefaultArrayStrategy</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">F</span>: <span class=\"nb\">Default</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">G</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">make_array</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"n\">G</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">LEN</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">DefaultArrayStrategy</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">DefaultArrayBuilder</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">LEN</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">F</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">G</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">LEN</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">make_array</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">LEN</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">LEN</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">zeroed</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">LEN</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">DefaultArrayStrategy</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">DefaultArrayBuilder</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">LEN</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">T</span>:<span class=\"nb\">Default</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">F</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">G</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">LEN</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">make_array</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">LEN</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">[</span><span class=\"n\">T</span>::<span class=\"n\">default</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"n\">LEN</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">MyDefault</span>: <span class=\"nb\">Sized</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">default</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">LEN</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">MyDefault</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">LEN</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">DefaultArrayBuilder</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">LEN</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">LEN</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">}</span><span class=\"o\">&gt;</span>: <span class=\"nc\">DefaultArrayStrategy</span><span class=\"o\">&lt;</span><span class=\"n\">G</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">&lt;</span><span class=\"n\">DefaultArrayBuilder</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">LEN</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">LEN</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">DefaultArrayStrategy</span><span class=\"o\">&gt;</span>::<span class=\"n\">F</span>: <span class=\"nb\">Default</span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">default</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&lt;</span><span class=\"n\">DefaultArrayBuilder</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">LEN</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">LEN</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">DefaultArrayStrategy</span><span class=\"o\">&lt;</span><span class=\"n\">G</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"o\">&gt;&gt;</span>::<span class=\"n\">make_array</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"sd\">/// error[E0391]: cycle detected when simplifying constant for the type system `&lt;impl at src/lib.rs:33:1: 40:2&gt;::{constant#1}`</span>\n</code></pre></div>",
        "id": 238518830,
        "sender_full_name": "Charles Lew",
        "timestamp": 1620842894
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116458\">@Charles Lew</span> this is a really clever solution which should work but is broken because <code>{ LEN == 0 }</code> is part of its own where bounds</p>",
        "id": 238528032,
        "sender_full_name": "lcnr",
        "timestamp": 1620846474
    },
    {
        "content": "<p>i don't know why this cycle happens in this example specifically, but we noted the general problem in <a href=\"https://github.com/rust-lang/project-const-generics/blob/master/design-docs/anon-const-substs.md\">https://github.com/rust-lang/project-const-generics/blob/master/design-docs/anon-const-substs.md</a></p>",
        "id": 238529652,
        "sender_full_name": "lcnr",
        "timestamp": 1620847183
    },
    {
        "content": "<p>I tried it again on recent nightly and it seems the error above is gone.<br>\nI have a branch at <a href=\"https://github.com/crlf0710/rust/tree/array-default\">https://github.com/crlf0710/rust/tree/array-default</a></p>\n<p>Building core itself is ok, but there seems to be some trait resolution errors in downstream crates.</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>error[E0277]: the trait bound `array::array_default_impl::ArrayDefaultImplDispatch&lt;UnwindTableRow&lt;_&gt;, 4_usize, {_: bool}&gt;: array::array_default_impl::ArrayDefaultImpl` is not satisfied\n    --&gt; L:\\Zoo\\Rust\\cargo\\registry\\src\\mirrors.sjtug.sjtu.edu.cn-4f7dbcce21e258a2\\gimli-0.23.0\\src\\read\\cfi.rs:1835:28\n     |\n1835 |             stack_storage: Default::default(),\n     |                            ^^^^^^^^^^^^^^^^ the trait `array::array_default_impl::ArrayDefaultImpl` is not implemented for `array::array_default_impl::ArrayDefaultImplDispatch&lt;UnwindTableRow&lt;_&gt;, 4_usize, {_: bool}&gt;`\n     |\n     = help: the following implementations were found:\n               &lt;array::array_default_impl::ArrayDefaultImplDispatch&lt;T, L, false&gt; as array::array_default_impl::ArrayDefaultImpl&gt;\n               &lt;array::array_default_impl::ArrayDefaultImplDispatch&lt;T, L, true&gt; as array::array_default_impl::ArrayDefaultImpl&gt;\n     = note: required because of the requirements on the impl of `Default` for `[UnwindTableRow&lt;_&gt;; 4]`\n     = note: required by `rustc_std_workspace_core::default::Default::default`\n</code></pre></div>",
        "id": 242455101,
        "sender_full_name": "Charles Lew",
        "timestamp": 1623510085
    },
    {
        "content": "<p>I guess trait stuff doesn't know that you can exhaustively define all generic impls?</p>",
        "id": 242455870,
        "sender_full_name": "oli",
        "timestamp": 1623510947
    },
    {
        "content": "<p>jup:</p>",
        "id": 242456018,
        "sender_full_name": "oli",
        "timestamp": 1623511127
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"kt\">bool</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"kc\">true</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"kc\">false</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">meh</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">C</span>: <span class=\"kt\">bool</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">f</span>: <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">C</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">muh</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">muh</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">Bar</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 242456037,
        "sender_full_name": "oli",
        "timestamp": 1623511148
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error[E0277]: the trait bound `Foo&lt;C&gt;: Bar` is not satisfied\n  --&gt; src/lib.rs:9:9\n   |\n9  |     muh(f)\n   |         ^ the trait `Bar` is not implemented for `Foo&lt;C&gt;`\n...\n12 | fn muh&lt;T: Bar&gt;(_: T) {}\n   |           --- required by this bound in `muh`\n   |\n   = help: the following implementations were found:\n             &lt;Foo&lt;false&gt; as Bar&gt;\n             &lt;Foo&lt;true&gt; as Bar&gt;\n</code></pre></div>",
        "id": 242456047,
        "sender_full_name": "oli",
        "timestamp": 1623511175
    },
    {
        "content": "<p>I feel my code doesn't really rely on the exhaustiveness?<br>\nMy current version is this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[cfg(not(bootstrap))]</span><span class=\"w\"></span>\n<span class=\"cp\">#[stable(feature = </span><span class=\"s\">\"array_default\"</span><span class=\"cp\">, since = </span><span class=\"s\">\"1.55.0\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">LEN</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">Default</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">LEN</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ArrayDefaultImplDispatch</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">LEN</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">LEN</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"o\">&gt;</span>: <span class=\"nc\">ArrayDefaultImpl</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">default</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&lt;</span><span class=\"n\">ArrayDefaultImplDispatch</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">LEN</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">LEN</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">ArrayDefaultImpl</span><span class=\"o\">&gt;</span>::<span class=\"n\">default_array</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 242461392,
        "sender_full_name": "Charles Lew",
        "timestamp": 1623517918
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=0e5c6ed98c5f86601478d41643d3ec76\">playground repro</a></p>",
        "id": 242483030,
        "sender_full_name": "Charles Lew",
        "timestamp": 1623548216
    },
    {
        "content": "<p>Converted this into an issue... <a href=\"https://github.com/rust-lang/rust/issues/86259\">https://github.com/rust-lang/rust/issues/86259</a></p>",
        "id": 242492777,
        "sender_full_name": "Charles Lew",
        "timestamp": 1623564293
    },
    {
        "content": "<blockquote>\n<p>I feel my code doesn't really rely on the exhaustiveness?</p>\n</blockquote>",
        "id": 242509181,
        "sender_full_name": "oli",
        "timestamp": 1623589214
    },
    {
        "content": "<p>hmm, right</p>",
        "id": 242509199,
        "sender_full_name": "oli",
        "timestamp": 1623589243
    },
    {
        "content": "<p>looks like we are not evaluating it</p>",
        "id": 242509212,
        "sender_full_name": "oli",
        "timestamp": 1623589256
    }
]