[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(const_generics, const_evaluatable_checked)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![allow(incomplete_features)]</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Dummy</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Helper</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">recurse</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Helper</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Dummy</span><span class=\"o\">&lt;</span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">Dummy</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"o\">&gt;</span>: <span class=\"nc\">Helper</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">recurse</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">Dummy</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Helper</span><span class=\"o\">&gt;</span>::<span class=\"n\">recurse</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Helper</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Dummy</span><span class=\"o\">&lt;</span><span class=\"mi\">0</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">recurse</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">factorial</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span> <span class=\"nc\">where</span><span class=\"w\"> </span><span class=\"n\">Dummy</span><span class=\"o\">&lt;</span><span class=\"n\">N</span><span class=\"o\">&gt;</span>: <span class=\"nc\">Helper</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">&lt;</span><span class=\"n\">Dummy</span><span class=\"o\">&lt;</span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Helper</span><span class=\"o\">&gt;</span>::<span class=\"n\">recurse</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">factorial</span>::<span class=\"o\">&lt;</span><span class=\"mi\">3</span><span class=\"o\">&gt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=bfade98af1530043fe78a310c57044c3\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=bfade98af1530043fe78a310c57044c3</a></p>",
        "id": 223825249,
        "sender_full_name": "lcnr",
        "timestamp": 1611509855
    },
    {
        "content": "<p>with <a href=\"https://github.com/rust-lang/rust/issues/81339\">#81339</a> this should have worked</p>",
        "id": 223825301,
        "sender_full_name": "lcnr",
        "timestamp": 1611509884
    },
    {
        "content": "<p>if not for one fun interaction with lazy normalization</p>",
        "id": 223825308,
        "sender_full_name": "lcnr",
        "timestamp": 1611509908
    },
    {
        "content": "<p>where we continue to treat <code>N - 1</code> as an opaque projection even if we already substituted <code>N</code> with a concrete value</p>",
        "id": 223825327,
        "sender_full_name": "lcnr",
        "timestamp": 1611509962
    },
    {
        "content": "<p>so we never actually reject the generic impl here, even if we have something like <code>(((((((((((3 - 1) - 1) - 1) - 1) - 1) - 1) ...</code></p>",
        "id": 223825387,
        "sender_full_name": "lcnr",
        "timestamp": 1611510030
    },
    {
        "content": "<p>causing an overflow error</p>",
        "id": 223825390,
        "sender_full_name": "lcnr",
        "timestamp": 1611510039
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error[E0275]: overflow evaluating the requirement `Dummy&lt;{ N - 1 }&gt;: Helper`\n   |\n   = help: consider adding a `#![recursion_limit=&quot;256&quot;]` attribute to your crate (`recursive_factorial`)\n   = note: required because of the requirements on the impl of `Helper` for `Dummy&lt;{ N - 1 }&gt;`\n   = note: 127 redundant requirements hidden\n   = note: required because of the requirements on the impl of `Helper` for `Dummy&lt;{ N - 1 }&gt;`\n</code></pre></div>",
        "id": 223825406,
        "sender_full_name": "lcnr",
        "timestamp": 1611510066
    }
]