[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(const_generics)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![allow(incomplete_features)]</span><span class=\"w\"></span>\n<span class=\"sd\">/// this works</span>\n<span class=\"k\">struct</span> <span class=\"nc\">P</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">V</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">T1</span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">T1</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"nb\">None</span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">T1</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"nb\">Some</span><span class=\"p\">(())}</span><span class=\"o\">&gt;</span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"sd\">/// this doesn't</span>\n<span class=\"sd\">/// error[E0207]: the const parameter `R` is not constrained by the impl trait, self type, or predicates</span>\n<span class=\"k\">struct</span> <span class=\"nc\">Q</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">V</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"kt\">bool</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">T2</span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">T2</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Q</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"nb\">None</span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">R</span>: <span class=\"kt\">bool</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">T2</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Q</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">R</span><span class=\"p\">)}</span><span class=\"o\">&gt;</span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 238514377,
        "sender_full_name": "Charles Lew",
        "timestamp": 1620841164
    },
    {
        "content": "<p>Is the second example intended to be excluded? Or is this a temporary implementation limitation?</p>",
        "id": 238514526,
        "sender_full_name": "Charles Lew",
        "timestamp": 1620841215
    },
    {
        "content": "<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 238514676,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1620841273
    },
    {
        "content": "<p>i <em>think</em> this is intended to be excluded</p>",
        "id": 238514728,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1620841302
    },
    {
        "content": "<p>i might be wrong though,</p>",
        "id": 238514745,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1620841308
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>   = note: expressions using a const parameter must map each value to a distinct output value\n   = note: proving the result of expressions other than the parameter are unique is not supported\n</code></pre></div>",
        "id": 238514862,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1620841339
    },
    {
        "content": "<p>basically it's that we cant tell that for an arbitrary expression for every given bool we end up with a unique returned value</p>",
        "id": 238514940,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1620841375
    },
    {
        "content": "<p>Sure, but <code>Some</code> is a simple constructor, and it can easily be proved... from human's side.</p>",
        "id": 238515193,
        "sender_full_name": "Charles Lew",
        "timestamp": 1620841458
    },
    {
        "content": "<p>Yea there's probably more things we can make work here :)</p>",
        "id": 238515827,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1620841701
    },
    {
        "content": "<p>thanks :)</p>",
        "id": 238516022,
        "sender_full_name": "Charles Lew",
        "timestamp": 1620841794
    }
]