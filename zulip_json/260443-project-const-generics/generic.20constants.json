[
    {
        "content": "<p>is there are reason why we don't allow generic constants rn</p>",
        "id": 223764272,
        "sender_full_name": "lcnr",
        "timestamp": 1611427477
    },
    {
        "content": "<p>and instead have to use associated types if we need them?</p>",
        "id": 223764290,
        "sender_full_name": "lcnr",
        "timestamp": 1611427494
    },
    {
        "content": "<p>What do you mean by generic constants?</p>",
        "id": 223767050,
        "sender_full_name": "varkor",
        "timestamp": 1611429046
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">FOO</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 223767427,
        "sender_full_name": "lcnr",
        "timestamp": 1611429263
    },
    {
        "content": "<p>They've come up in previous discussions, but I don't think anyone has written an RFC for them.</p>",
        "id": 223767959,
        "sender_full_name": "varkor",
        "timestamp": 1611429589
    },
    {
        "content": "<p>i guess i need a larger plate then <span aria-label=\"sparkles\" class=\"emoji emoji-2728\" role=\"img\" title=\"sparkles\">:sparkles:</span></p>",
        "id": 223769332,
        "sender_full_name": "lcnr",
        "timestamp": 1611430346
    },
    {
        "content": "<p>Do you have many motivating examples?</p>",
        "id": 223770551,
        "sender_full_name": "varkor",
        "timestamp": 1611431015
    },
    {
        "content": "<p>In particular, <code>const fn foo&lt;T&gt;</code> seems like it would behave similarly or the same as <code>const FOO&lt;T&gt;</code>.</p>",
        "id": 223770897,
        "sender_full_name": "varkor",
        "timestamp": 1611431211
    },
    {
        "content": "<p>does it? we don't guarantee that const fn are executed at compile time</p>",
        "id": 223770934,
        "sender_full_name": "lcnr",
        "timestamp": 1611431236
    },
    {
        "content": "<p><code>const { foo::&lt;T&gt;() }</code> should be equivalent</p>",
        "id": 223770956,
        "sender_full_name": "lcnr",
        "timestamp": 1611431250
    },
    {
        "content": "<p>(There's an issue for this feature here: <a href=\"https://github.com/rust-lang/rfcs/issues/2424\">https://github.com/rust-lang/rfcs/issues/2424</a>, but it's not well-motivated.)</p>",
        "id": 223770965,
        "sender_full_name": "varkor",
        "timestamp": 1611431256
    },
    {
        "content": "<p>ah yeah</p>",
        "id": 223771107,
        "sender_full_name": "lcnr",
        "timestamp": 1611431338
    },
    {
        "content": "<p>that really isn't motivated too well <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 223771130,
        "sender_full_name": "lcnr",
        "timestamp": 1611431350
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/generic.20constants/near/223770956\">said</a>:</p>\n<blockquote>\n<p><code>const { foo::&lt;T&gt;() }</code> should be equivalent</p>\n</blockquote>\n<p>True</p>",
        "id": 223771161,
        "sender_full_name": "varkor",
        "timestamp": 1611431368
    },
    {
        "content": "<p>it feels more intuitive for me to use <code>fn foo&lt;T&gt;() -&gt; [u8; FOO_RET_LEN::&lt;T&gt;]</code> instead of <code>fn foo&lt;T&gt;() -&gt; [u8; foo_ret_len::&lt;T&gt;()]</code> which is why I was thinking about this</p>",
        "id": 223771461,
        "sender_full_name": "lcnr",
        "timestamp": 1611431533
    },
    {
        "content": "<p>i guess it also just feels like a natural extension, so from my pov there is close to no added language complexity by implementing this</p>",
        "id": 223771567,
        "sender_full_name": "lcnr",
        "timestamp": 1611431602
    },
    {
        "content": "<p>and consts fit into 1 line with functions always take at least 3!!!11</p>",
        "id": 223771596,
        "sender_full_name": "lcnr",
        "timestamp": 1611431625
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/81242\">#81242</a> would have also been nicer with generic consts</p>",
        "id": 223771904,
        "sender_full_name": "lcnr",
        "timestamp": 1611431804
    },
    {
        "content": "<p>FWIW I wanted this pretty recently on rust-gpu, as there things like \"number of parameters provided depends on this other parameter\" in SPIR-V. For example, the amount of coordinates you can provide to images depends on their dimensionality (e.g. 2D images take x and y, 3D images take x, y, and z).</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(const_generics)]</span><span class=\"w\"></span>\n\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">(</span><span class=\"n\">v</span>: <span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u8</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// Errors</span>\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">V</span>: <span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">A</span>: <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"p\">(</span><span class=\"n\">V</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}]</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 223880678,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1611572009
    },
    {
        "content": "<p>yea... in some private project at my company we use associated consts in order to effectively have generic consts</p>",
        "id": 223881496,
        "sender_full_name": "oli",
        "timestamp": 1611572500
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219696\">@XAMPPRocky</span> does your example instead depend on generic const parameters? These are quite difficult to implement.</p>\n<p>generic free constants are a lot easier to implement</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">FOO</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">FOO</span>::<span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 223883268,
        "sender_full_name": "lcnr",
        "timestamp": 1611573769
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span>  Yes, I believe so. Specifically it depends on a struct that looks like this (each const here is an enum), and having methods on that struct which parameters depend on the parameters in the image. You can see <a href=\"https://github.com/EmbarkStudios/rust-gpu/pull/359\">this PR</a> for more details.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Image</span><span class=\"o\">&lt;</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">DIM</span>: <span class=\"nc\">Dimensionality</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">DEPTH</span>: <span class=\"nc\">ImageDepth</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">ARRAYED</span>: <span class=\"nc\">Arrayed</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">MULTISAMPLED</span>: <span class=\"nc\">Multisampled</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">SAMPLED</span>: <span class=\"nc\">Sampled</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">FORMAT</span>: <span class=\"nc\">ImageFormat</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">ACCESS_QUALIFIER</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">AccessQualifier</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"n\">_x</span>: <span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 223886337,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1611575838
    },
    {
        "content": "<p>that's a nice type</p>",
        "id": 223886684,
        "sender_full_name": "lcnr",
        "timestamp": 1611575991
    },
    {
        "content": "<p>and that's a horrible impl block xd</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">DIM</span>: <span class=\"nc\">Dimensionality</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">DEPTH</span>: <span class=\"nc\">ImageDepth</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">ARRAYED</span>: <span class=\"nc\">Arrayed</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">MULTISAMPLED</span>: <span class=\"nc\">Multisampled</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">SAMPLED</span>: <span class=\"nc\">Sampled</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">FORMAT</span>: <span class=\"nc\">ImageFormat</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">ACCESS_QUALIFIER</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">AccessQualifier</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">SampledImage</span><span class=\"o\">&lt;</span><span class=\"n\">Image</span><span class=\"o\">&lt;</span><span class=\"n\">DIM</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">DEPTH</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ARRAYED</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">MULTISAMPLED</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">SAMPLED</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">FORMAT</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ACCESS_QUALIFIER</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 223886757,
        "sender_full_name": "lcnr",
        "timestamp": 1611576011
    },
    {
        "content": "<p>Yeah, and the rustdoc output is worse. <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 223896634,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1611581477
    }
]