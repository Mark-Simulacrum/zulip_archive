[
    {
        "content": "<p>hi <span class=\"user-group-mention\" data-user-group-id=\"3805\">@project-const-generics</span> we have a meeting in slightly more than 2 hours</p>",
        "id": 229477458,
        "sender_full_name": "lcnr",
        "timestamp": 1615297132
    },
    {
        "content": "<p>i didn't spend much time on rust the last week, so it makes probably sense to talk about <code>WithOptConstParam</code> for a bit</p>",
        "id": 229477572,
        "sender_full_name": "lcnr",
        "timestamp": 1615297192
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> want to also quickly talk about <a href=\"https://github.com/rust-lang/rust/pull/81309#issuecomment-793639346\">https://github.com/rust-lang/rust/pull/81309#issuecomment-793639346</a>?</p>",
        "id": 229477621,
        "sender_full_name": "lcnr",
        "timestamp": 1615297205
    },
    {
        "content": "<p>hey ho <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 229497224,
        "sender_full_name": "lcnr",
        "timestamp": 1615304795
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 229497238,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1615304804
    },
    {
        "content": "<p>I myself don't have a lot to say today</p>",
        "id": 229497614,
        "sender_full_name": "lcnr",
        "timestamp": 1615304951
    },
    {
        "content": "<p>slowly working on the unused substs stuff</p>",
        "id": 229497687,
        "sender_full_name": "lcnr",
        "timestamp": 1615304993
    },
    {
        "content": "<p>one question here, if <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> isn't there yet</p>",
        "id": 229497779,
        "sender_full_name": "lcnr",
        "timestamp": 1615305014
    },
    {
        "content": "<p>as said in <a href=\"#narrow/stream/260443-project-const-generics/topic/HIR-.3EAbstractConst/near/229275105\">https://rust-lang.zulipchat.com/#narrow/stream/260443-project-const-generics/topic/HIR-.3EAbstractConst/near/229275105</a> i want to add a <code>raw_explicit_predicates_of</code> query which we can use to get all the predicates for our anon const</p>",
        "id": 229497906,
        "sender_full_name": "lcnr",
        "timestamp": 1615305067
    },
    {
        "content": "<p>except that we don't yet try to build the substs for any constants inside of these predicates</p>",
        "id": 229497949,
        "sender_full_name": "lcnr",
        "timestamp": 1615305092
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-03-09/near/229497906\">said</a>:</p>\n<blockquote>\n<p>as said in <a href=\"#narrow/stream/260443-project-const-generics/topic/HIR-.3EAbstractConst/near/229275105\">https://rust-lang.zulipchat.com/#narrow/stream/260443-project-const-generics/topic/HIR-.3EAbstractConst/near/229275105</a> i want to add a <code>raw_explicit_predicates_of</code> query which we can use to get all the predicates for our anon const</p>\n</blockquote>\n<p>are these predicates pre/post filtering?</p>",
        "id": 229497981,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1615305112
    },
    {
        "content": "<p><code>raw_explicit_predicates_of</code> is pre filtering</p>",
        "id": 229498040,
        "sender_full_name": "lcnr",
        "timestamp": 1615305127
    },
    {
        "content": "<p>so my idea is</p>",
        "id": 229498092,
        "sender_full_name": "lcnr",
        "timestamp": 1615305146
    },
    {
        "content": "<p>Wave</p>",
        "id": 229498098,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615305149
    },
    {
        "content": "<p>Sorry, running a bit slow today</p>",
        "id": 229498108,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615305153
    },
    {
        "content": "<p>we have <code>raw_explicit_predicates_of</code> of the parent</p>",
        "id": 229498127,
        "sender_full_name": "lcnr",
        "timestamp": 1615305161
    },
    {
        "content": "<p>in <code>explicit_predicates_of</code> for the parent, we just convert the consts to the <code>ConstKind::Unevaluated</code></p>",
        "id": 229498258,
        "sender_full_name": "lcnr",
        "timestamp": 1615305211
    },
    {
        "content": "<p>and in <code>explicit_predicates_of</code> for constant we filter predicates and params</p>",
        "id": 229498438,
        "sender_full_name": "lcnr",
        "timestamp": 1615305274
    },
    {
        "content": "<p>(just to be sure, <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span>, you're talking about the unused substs question here?)</p>",
        "id": 229498484,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615305300
    },
    {
        "content": "<p>let me try to catch up</p>",
        "id": 229498492,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615305303
    },
    {
        "content": "<p>my question is here if someone has an idea on how to do that without adding something like <code>ConstKind::Raw</code> which we only use in just that query</p>",
        "id": 229498498,
        "sender_full_name": "lcnr",
        "timestamp": 1615305305
    },
    {
        "content": "<p>making <code>ty::Ty</code> and everything else generic seems even worse tbh</p>",
        "id": 229498590,
        "sender_full_name": "lcnr",
        "timestamp": 1615305338
    },
    {
        "content": "<p>I read your comments</p>",
        "id": 229498829,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615305428
    },
    {
        "content": "<p>but I think i'm going to need to bring a bit of context back in cache</p>",
        "id": 229498887,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615305456
    },
    {
        "content": "<p>can you walk me through this a bit more ---</p>",
        "id": 229498900,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615305461
    },
    {
        "content": "<p>yeah</p>",
        "id": 229498915,
        "sender_full_name": "lcnr",
        "timestamp": 1615305469
    },
    {
        "content": "<p>so we want to filter unused params/predicates</p>",
        "id": 229498943,
        "sender_full_name": "lcnr",
        "timestamp": 1615305478
    },
    {
        "content": "<p>by looking at the explicitly mentioned params inside of the constant</p>",
        "id": 229499055,
        "sender_full_name": "lcnr",
        "timestamp": 1615305508
    },
    {
        "content": "<p>right</p>",
        "id": 229499089,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615305519
    },
    {
        "content": "<p>but wait</p>",
        "id": 229499102,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615305522
    },
    {
        "content": "<p>so the query in question is something like <code>predicates_of(C)</code> where <code>C</code> is the def-id of some constant</p>",
        "id": 229499166,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615305542
    },
    {
        "content": "<p>right?</p>",
        "id": 229499171,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615305543
    },
    {
        "content": "<p>er, some <em>anonymous</em> constant?</p>",
        "id": 229499187,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615305548
    },
    {
        "content": "<p>and then building the transitive closure based on params used in the same predicate</p>",
        "id": 229499196,
        "sender_full_name": "lcnr",
        "timestamp": 1615305549
    },
    {
        "content": "<p>yeah</p>",
        "id": 229499263,
        "sender_full_name": "lcnr",
        "timestamp": 1615305576
    },
    {
        "content": "<p>which in turn invokes <code>explicit_predicates_of</code> and then adds inferred outlives obligations</p>",
        "id": 229499270,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615305578
    },
    {
        "content": "<p>and maybe a few other edits?</p>",
        "id": 229499278,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615305582
    },
    {
        "content": "<p>afaict only inferred outlives obligations and <code>Self: Trait</code> for the trait declaration</p>",
        "id": 229499320,
        "sender_full_name": "lcnr",
        "timestamp": 1615305599
    },
    {
        "content": "<p>which means that we hopefully only need to modify <code>explicit_predicates_of</code> which keeping <code>Self: Trait</code> in mind</p>",
        "id": 229499543,
        "sender_full_name": "lcnr",
        "timestamp": 1615305632
    },
    {
        "content": "<p>instead of modifying <code>predicates_of</code> as well, which would be a slightly more annoying change</p>",
        "id": 229499677,
        "sender_full_name": "lcnr",
        "timestamp": 1615305656
    },
    {
        "content": "<p>currently, <code>explicit_predicates_of</code> returns <em>exactly the predicates the user wrote</em>, correct?</p>",
        "id": 229499878,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615305688
    },
    {
        "content": "<p>at least, for things like structs, traits, etc</p>",
        "id": 229499927,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615305699
    },
    {
        "content": "<p>(in the case of anonymous constants, the user obviously hasn't written anything)</p>",
        "id": 229499985,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615305709
    },
    {
        "content": "<p>yes, ignoring <code>ConstEvaluatable</code> predicates which really shouldn't be there</p>",
        "id": 229500018,
        "sender_full_name": "lcnr",
        "timestamp": 1615305714
    },
    {
        "content": "<p>ok, yes, let's ignore those for now :) I haven't made space in my brain for that yet</p>",
        "id": 229500134,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615305728
    },
    {
        "content": "<p>so we can pretend that we do, and change <code>const_evaluatable_checked</code> later, for now ^^</p>",
        "id": 229500178,
        "sender_full_name": "lcnr",
        "timestamp": 1615305734
    },
    {
        "content": "<p>(I mean I get the big picture, I just yet know how I think they should fit into it)</p>",
        "id": 229500205,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615305739
    },
    {
        "content": "<p>why would changing <code>predicates_of</code> be a more annoying change?</p>",
        "id": 229500319,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615305764
    },
    {
        "content": "<p>who calls <code>explicit_predicates_of</code> apart from <code>predicates_of</code>?</p>",
        "id": 229500346,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615305772
    },
    {
        "content": "<p>does explicit_predicats_of return implied bounds stuff?</p>",
        "id": 229500348,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1615305772
    },
    {
        "content": "<p>or is that done in predicats_of?</p>",
        "id": 229500364,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1615305777
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-03-09/near/229500346\">said</a>:</p>\n<blockquote>\n<p>who calls <code>explicit_predicates_of</code> apart from <code>predicates_of</code>?</p>\n</blockquote>\n<p>rustdoc and privacy i think</p>",
        "id": 229500524,
        "sender_full_name": "lcnr",
        "timestamp": 1615305809
    },
    {
        "content": "<p>privacy...</p>",
        "id": 229500593,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615305831
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"326176\">Boxy</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-03-09/near/229500364\">said</a>:</p>\n<blockquote>\n<p>or is that done in predicats_of?</p>\n</blockquote>\n<p>implied bounds are in <code>predicates_defined_on</code></p>",
        "id": 229500600,
        "sender_full_name": "lcnr",
        "timestamp": 1615305833
    },
    {
        "content": "<p>...that's curious</p>",
        "id": 229500607,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615305835
    },
    {
        "content": "<p>I wouldn't imagine rustdoc invokes them on anonymous constants</p>",
        "id": 229500724,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615305855
    },
    {
        "content": "<p><code>predicates_of</code> calls <code>predicates_defined_on</code> which calls <code>explicit_predicates_of</code></p>",
        "id": 229500732,
        "sender_full_name": "lcnr",
        "timestamp": 1615305855
    },
    {
        "content": "<p>rustdoc kind of makes sense</p>",
        "id": 229500744,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615305858
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// N.B., we use `explicit_predicates_of` and not `predicates_of`</span>\n<span class=\"w\">        </span><span class=\"c1\">// because we don't want to report privacy errors due to where</span>\n<span class=\"w\">        </span><span class=\"c1\">// clauses that the compiler inferred. We only want to</span>\n<span class=\"w\">        </span><span class=\"c1\">// consider the ones that the user wrote. This is important</span>\n<span class=\"w\">        </span><span class=\"c1\">// for the inferred outlives rules; see</span>\n<span class=\"w\">        </span><span class=\"c1\">// `src/test/ui/rfc-2093-infer-outlives/privacy.rs`.</span>\n</code></pre></div>",
        "id": 229501006,
        "sender_full_name": "lcnr",
        "timestamp": 1615305919
    },
    {
        "content": "<p>for privacy</p>",
        "id": 229501075,
        "sender_full_name": "lcnr",
        "timestamp": 1615305933
    },
    {
        "content": "<p>it's also used here <a href=\"https://github.com/rust-lang/rust/blob/3a5d45f68cadc8fff4fbb557780f92b403b19c19/compiler/rustc_typeck/src/outlives/implicit_infer.rs#L268\">https://github.com/rust-lang/rust/blob/3a5d45f68cadc8fff4fbb557780f92b403b19c19/compiler/rustc_typeck/src/outlives/implicit_infer.rs#L268</a>, haven't look into that yet</p>",
        "id": 229501460,
        "sender_full_name": "lcnr",
        "timestamp": 1615306014
    },
    {
        "content": "<p>but i think it shouldn't matter for what i want to do here</p>",
        "id": 229501573,
        "sender_full_name": "lcnr",
        "timestamp": 1615306036
    },
    {
        "content": "<p>ok</p>",
        "id": 229501664,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615306061
    },
    {
        "content": "<p>yeah none of this seems like it matters</p>",
        "id": 229501694,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615306068
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-03-09/near/229500319\">said</a>:</p>\n<blockquote>\n<p>why would changing <code>predicates_of</code> be a more annoying change?</p>\n</blockquote>\n<p>because i want to do this by reusing a lot of what's already there</p>",
        "id": 229501728,
        "sender_full_name": "lcnr",
        "timestamp": 1615306076
    },
    {
        "content": "<p>by splitting the query into two versions, one which is used to get the unused substs and one which uses them</p>",
        "id": 229501917,
        "sender_full_name": "lcnr",
        "timestamp": 1615306108
    },
    {
        "content": "<p>I'm loading up the code a bit</p>",
        "id": 229502002,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615306131
    },
    {
        "content": "<p>and i don't want to have too many additional <code>raw_...</code> queries for this</p>",
        "id": 229502065,
        "sender_full_name": "lcnr",
        "timestamp": 1615306138
    },
    {
        "content": "<p>do we have notes from the meeting where we talked about this before =)</p>",
        "id": 229502106,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615306148
    },
    {
        "content": "<p>yeah, I don't love \"raw explicit\", \"explicit\", etc</p>",
        "id": 229502152,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615306158
    },
    {
        "content": "<p>not very clear what this is about</p>",
        "id": 229502168,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615306162
    },
    {
        "content": "<p>partly this might be a matter of naming</p>",
        "id": 229502184,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615306166
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-03-09/near/229502106\">said</a>:</p>\n<blockquote>\n<p>do we have notes from the meeting where we talked about this before =)</p>\n</blockquote>\n<p><a href=\"https://github.com/rust-lang/project-const-generics/blob/master/meetings/2021.02.16-lazy-norm.md\">https://github.com/rust-lang/project-const-generics/blob/master/meetings/2021.02.16-lazy-norm.md</a></p>",
        "id": 229502242,
        "sender_full_name": "lcnr",
        "timestamp": 1615306180
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-03-09/near/229502184\">said</a>:</p>\n<blockquote>\n<p>partly this might be a matter of naming</p>\n</blockquote>\n<p><code>explicit_predicates_of_with_unsubsts_consts</code>?</p>",
        "id": 229502325,
        "sender_full_name": "lcnr",
        "timestamp": 1615306200
    },
    {
        "content": "<blockquote>\n<ul>\n<li>have to do all of this without looking at the parents <code>predicates_of</code> because that may contain our constant.</li>\n</ul>\n</blockquote>",
        "id": 229502478,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615306225
    },
    {
        "content": "<p>this is part of the concern, I guess?</p>",
        "id": 229502563,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615306246
    },
    {
        "content": "<p>yeah, that's the reason for the split</p>",
        "id": 229502581,
        "sender_full_name": "lcnr",
        "timestamp": 1615306254
    },
    {
        "content": "<p>i.e., if you are in <code>explicit_predicates_of(AC)</code> for some anonymous constant <code>AC</code></p>",
        "id": 229502593,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615306259
    },
    {
        "content": "<p>you can't invoke <code>explicit_predicates_of(parent(AC))</code> and apply filtering</p>",
        "id": 229502636,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615306272
    },
    {
        "content": "<p>this seems wrong though :)</p>",
        "id": 229502691,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615306289
    },
    {
        "content": "<p>(if <code>AC</code> is in the where bounds)</p>",
        "id": 229502715,
        "sender_full_name": "lcnr",
        "timestamp": 1615306298
    },
    {
        "content": "<p>right but</p>",
        "id": 229502731,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615306304
    },
    {
        "content": "<p><code>explicit_predicates_of</code> should be able to create a reference to <code>AC</code> without asking for its predicates, right? what am I missing?</p>",
        "id": 229502856,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615306335
    },
    {
        "content": "<p><code>explicit_predicates_of</code> creates a <code>ConstKind::Unevaluated</code> for <code>AC</code></p>",
        "id": 229502909,
        "sender_full_name": "lcnr",
        "timestamp": 1615306357
    },
    {
        "content": "<p>which contains the <code>substs</code> for <code>AC</code></p>",
        "id": 229502941,
        "sender_full_name": "lcnr",
        "timestamp": 1615306366
    },
    {
        "content": "<p>which depend on the filtering, which depends on the predicates in scope</p>",
        "id": 229503019,
        "sender_full_name": "lcnr",
        "timestamp": 1615306387
    },
    {
        "content": "<p>hmm =)</p>",
        "id": 229503154,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615306438
    },
    {
        "content": "<p>ok</p>",
        "id": 229503162,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615306441
    },
    {
        "content": "<p>I'm wondering if there is some other way to make those substs lazy</p>",
        "id": 229503296,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615306470
    },
    {
        "content": "<p>and if that's better or worse</p>",
        "id": 229503323,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615306474
    },
    {
        "content": "<p>it's a kind of minor-ish point I guess</p>",
        "id": 229503359,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615306481
    },
    {
        "content": "<p>ok, so let's assume you add this <code>explicit_predicates_of_with_unsubsts_consts</code> (not the best name, but ok)</p>",
        "id": 229503457,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615306499
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-03-09/near/229503296\">said</a>:</p>\n<blockquote>\n<p>I'm wondering if there is some other way to make those substs lazy</p>\n</blockquote>\n<p>specifically I was condering about something like having <code>ConstKind::Unevaluated</code> have a <code>None</code> for substs</p>",
        "id": 229503651,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615306528
    },
    {
        "content": "<p>to mean like \"identity substs\"</p>",
        "id": 229503680,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615306533
    },
    {
        "content": "<p>and then having another query to figure that out</p>",
        "id": 229503708,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615306538
    },
    {
        "content": "<p>maybe <code>ConstKind::Identity(AC)</code></p>",
        "id": 229503783,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615306552
    },
    {
        "content": "<p>yeah, that was my idea ^^</p>",
        "id": 229503897,
        "sender_full_name": "lcnr",
        "timestamp": 1615306572
    },
    {
        "content": "<p>oh</p>",
        "id": 229503911,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615306577
    },
    {
        "content": "<p>good idea :P</p>",
        "id": 229503924,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615306580
    },
    {
        "content": "<p><span aria-label=\"sparkles\" class=\"emoji emoji-2728\" role=\"img\" title=\"sparkles\">:sparkles:</span></p>",
        "id": 229503939,
        "sender_full_name": "lcnr",
        "timestamp": 1615306586
    },
    {
        "content": "<p>to be clear though</p>",
        "id": 229503948,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615306591
    },
    {
        "content": "<p>then I think we don't need this <code>raw_explicit_predicates_of</code> or whatever</p>",
        "id": 229503971,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615306600
    },
    {
        "content": "<p>we just have <code>explicit_predicates_of</code> generate <code>ConstKind::Identity</code></p>",
        "id": 229503992,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615306611
    },
    {
        "content": "<p>and we have other bits of code that consumes constants have some kind of helper function that will convert that into <code>ConstKind::Unevaluated</code></p>",
        "id": 229504037,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615306628
    },
    {
        "content": "<p>so we move the conversion lazily to where the substs are needed?</p>",
        "id": 229504065,
        "sender_full_name": "lcnr",
        "timestamp": 1615306634
    },
    {
        "content": "<p>by doing some auxiliary query <code>const_identity_substs(AC)</code></p>",
        "id": 229504073,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615306636
    },
    {
        "content": "<p>is your idea?</p>",
        "id": 229504079,
        "sender_full_name": "lcnr",
        "timestamp": 1615306639
    },
    {
        "content": "<p>yes</p>",
        "id": 229504088,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615306641
    },
    {
        "content": "<p>I think I prefer that architecturally</p>",
        "id": 229504113,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615306651
    },
    {
        "content": "<p>I'm trying to decide why :)</p>",
        "id": 229504144,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615306666
    },
    {
        "content": "<p>ah, yeah. we can move that into <code>TypeFoldable</code> which won't require a lot of changes</p>",
        "id": 229504173,
        "sender_full_name": "lcnr",
        "timestamp": 1615306679
    },
    {
        "content": "<p>I guess it just seems to put the complexity a bit more at the \"right spot\"</p>",
        "id": 229504189,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615306683
    },
    {
        "content": "<p>possibly, i think it might make it slightly more annoying to deal with those constants elsewhere <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 229504287,
        "sender_full_name": "lcnr",
        "timestamp": 1615306713
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> from me for <code>ConstKind::Identity</code></p>",
        "id": 229504311,
        "sender_full_name": "oli",
        "timestamp": 1615306723
    },
    {
        "content": "<p>Yeah that is a bit the question I guess</p>",
        "id": 229504320,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615306728
    },
    {
        "content": "<p>I'd probably start by adding the variant and seeing what happens</p>",
        "id": 229504340,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615306740
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-03-09/near/229504287\">said</a>:</p>\n<blockquote>\n<p>possibly, i think it might make it slightly more annoying to deal with those constants elsewhere <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>\n</blockquote>\n<p>not really, we already have to deal with <code>ConstKind::Infer</code> and such</p>",
        "id": 229504347,
        "sender_full_name": "oli",
        "timestamp": 1615306741
    },
    {
        "content": "<p>hmm, i think using <code>ConstKind::Unevaluated(DefId, Option&lt;Substs&gt;)</code> is probably good</p>",
        "id": 229504371,
        "sender_full_name": "lcnr",
        "timestamp": 1615306747
    },
    {
        "content": "<p>better than splitting it into two variants</p>",
        "id": 229504409,
        "sender_full_name": "lcnr",
        "timestamp": 1615306760
    },
    {
        "content": "<p>no opinion on that</p>",
        "id": 229504424,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615306767
    },
    {
        "content": "<p>but I can imagine</p>",
        "id": 229504431,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615306770
    },
    {
        "content": "<p>cause that's what these constants are</p>",
        "id": 229504441,
        "sender_full_name": "lcnr",
        "timestamp": 1615306775
    },
    {
        "content": "<p>it seems quite posible that the arm begins with something like</p>",
        "id": 229504446,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615306779
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">ConstKind</span>::<span class=\"n\">Unevaluated</span><span class=\"p\">(</span><span class=\"n\">def_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">substs</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">substs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">substs</span><span class=\"p\">.</span><span class=\"n\">unwrap_or</span><span class=\"p\">(</span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">identity_substs</span><span class=\"p\">(</span><span class=\"n\">def_id</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 229504508,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615306801
    },
    {
        "content": "<p>which seems <em>fairly</em> painless</p>",
        "id": 229504601,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615306816
    },
    {
        "content": "<p>maybe first refactor the 3 <code>Unevaluated</code> fields into a custom struct so you can hide that complexity?</p>",
        "id": 229504609,
        "sender_full_name": "oli",
        "timestamp": 1615306818
    },
    {
        "content": "<p>[won't be identity substs cause binders i think]</p>",
        "id": 229504611,
        "sender_full_name": "lcnr",
        "timestamp": 1615306819
    },
    {
        "content": "<p>I don't understand what you mean about binders</p>",
        "id": 229504673,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615306842
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/79313\">#79313</a></p>",
        "id": 229504685,
        "sender_full_name": "lcnr",
        "timestamp": 1615306850
    },
    {
        "content": "<p>but I was pondering how this interacts with higher-ranked things</p>",
        "id": 229504705,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615306857
    },
    {
        "content": "<p>in the back of my mind</p>",
        "id": 229504738,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615306863
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"p\">();</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"p\">}]</span>: <span class=\"nb\">Sized</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 229504780,
        "sender_full_name": "lcnr",
        "timestamp": 1615306878
    },
    {
        "content": "<p>i think inside of the anon const we want to use <code>'a</code> just like another parameter</p>",
        "id": 229504906,
        "sender_full_name": "lcnr",
        "timestamp": 1615306921
    },
    {
        "content": "<p>f</p>",
        "id": 229504992,
        "sender_full_name": "lcnr",
        "timestamp": 1615306937
    },
    {
        "content": "<p>I think that's right</p>",
        "id": 229505023,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615306947
    },
    {
        "content": "<p>how does this work with type flags :(</p>",
        "id": 229505031,
        "sender_full_name": "lcnr",
        "timestamp": 1615306951
    },
    {
        "content": "<p>that said</p>",
        "id": 229505041,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615306954
    },
    {
        "content": "<p>hmm, probably have to add some additional info into the <code>None</code> case</p>",
        "id": 229505102,
        "sender_full_name": "lcnr",
        "timestamp": 1615306974
    },
    {
        "content": "<p>well, those higher-ranked things don't usually show up in substs</p>",
        "id": 229505205,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615307007
    },
    {
        "content": "<p>I'm thinking now about the refactoring that <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> has been doing; there's a bit of debt there, i'd like to see early- and late-bond things more unified</p>",
        "id": 229505299,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615307039
    },
    {
        "content": "<p>and yeah uh type flags i don't know :)</p>",
        "id": 229505393,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615307056
    },
    {
        "content": "<p>I guess we could plausibly be \"conservative\" but that may not work out so well in practice</p>",
        "id": 229505430,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615307066
    },
    {
        "content": "<p>I don't really see how you can know the right thing to put there</p>",
        "id": 229505470,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615307080
    },
    {
        "content": "<p>/me gets mentioned, scrolls back to catch up</p>",
        "id": 229505519,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615307101
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-03-09/near/229505470\">said</a>:</p>\n<blockquote>\n<p>I don't really see how you can know the right thing to put there</p>\n</blockquote>\n<p>oh, that's right</p>",
        "id": 229505520,
        "sender_full_name": "lcnr",
        "timestamp": 1615307101
    },
    {
        "content": "<p>this applies also to the <code>raw_predicates_of</code> varaint --</p>",
        "id": 229505614,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615307126
    },
    {
        "content": "<p>we're just supplying invalid substs there, basically</p>",
        "id": 229505644,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615307135
    },
    {
        "content": "<p>we kind of sidestep the problem by introducing 'wrong' types, right?</p>",
        "id": 229505669,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615307143
    },
    {
        "content": "<p>whereas in this version, we never have wrong types</p>",
        "id": 229505693,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615307150
    },
    {
        "content": "<p>but we do have to deal with the fact that we don't know all the info all the time</p>",
        "id": 229505715,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615307158
    },
    {
        "content": "<p>yeah, inside of <code>raw_predicates_of</code> the type flags would be incorrect</p>",
        "id": 229505795,
        "sender_full_name": "lcnr",
        "timestamp": 1615307174
    },
    {
        "content": "<p>/me thinks</p>",
        "id": 229505882,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615307202
    },
    {
        "content": "<p>i think that's fine <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> i expect that we don't need them there</p>",
        "id": 229505917,
        "sender_full_name": "lcnr",
        "timestamp": 1615307216
    },
    {
        "content": "<p>though i don't know if there's a good way to prevent us from accidentially relying on them</p>",
        "id": 229505971,
        "sender_full_name": "lcnr",
        "timestamp": 1615307232
    },
    {
        "content": "<p>without tanking perf</p>",
        "id": 229505993,
        "sender_full_name": "lcnr",
        "timestamp": 1615307239
    },
    {
        "content": "<p>it's not so much that the <em>flags</em> are incorrect</p>",
        "id": 229506052,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615307263
    },
    {
        "content": "<p>as that the <em>types</em> are incorrect</p>",
        "id": 229506075,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615307270
    },
    {
        "content": "<p>I feel like a \"more honest\" variant would be to have <code>ConstKind::Partial(DefId)</code></p>",
        "id": 229506185,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615307294
    },
    {
        "content": "<p>and most bits of code assert that they never see it</p>",
        "id": 229506233,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615307309
    },
    {
        "content": "<p>I think I know why I'm skeptical of this, it just seems very invasive to astconv</p>",
        "id": 229506283,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615307325
    },
    {
        "content": "<p>I guess it might be something we could implement by having a method on the <code>AstConv</code> trait</p>",
        "id": 229506408,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615307359
    },
    {
        "content": "<p>e.g., <code>fn const_identity_substs(&amp;self, def_id: DefId) -&gt; ConstKind</code> that just returns <code>ConstKind::NoSubsts(def_id)</code> or something</p>",
        "id": 229506489,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615307392
    },
    {
        "content": "<p>OK, well, the type flags thing feels like a real concern. I think I'm ok with this latest variant. =) I don't love having constants that just have the wrong substs floating around without an easy way to identify them when they 'leak'</p>",
        "id": 229506683,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615307449
    },
    {
        "content": "<p>yeah</p>",
        "id": 229506888,
        "sender_full_name": "lcnr",
        "timestamp": 1615307516
    },
    {
        "content": "<p>like, we could add a type flag fro when there's a partial const</p>",
        "id": 229506966,
        "sender_full_name": "lcnr",
        "timestamp": 1615307532
    },
    {
        "content": "<p>and just check that before ever looking at the type flags</p>",
        "id": 229506997,
        "sender_full_name": "lcnr",
        "timestamp": 1615307543
    },
    {
        "content": "<p>yeah I thoght about that</p>",
        "id": 229507029,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615307558
    },
    {
        "content": "<p>i just fear that this simple branch messes up perf</p>",
        "id": 229507077,
        "sender_full_name": "lcnr",
        "timestamp": 1615307571
    },
    {
        "content": "<p>plausible</p>",
        "id": 229507217,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615307617
    },
    {
        "content": "<p>we could also instead of panicking, \"disable\" the type flags if there are partial consts</p>",
        "id": 229507423,
        "sender_full_name": "lcnr",
        "timestamp": 1615307675
    },
    {
        "content": "<p>and look into the type instead</p>",
        "id": 229507462,
        "sender_full_name": "lcnr",
        "timestamp": 1615307690
    },
    {
        "content": "<p>yeah so</p>",
        "id": 229507511,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615307715
    },
    {
        "content": "<p>which means that we can keep your approach which feels better to me</p>",
        "id": 229507524,
        "sender_full_name": "lcnr",
        "timestamp": 1615307719
    },
    {
        "content": "<p>this is what I meant by having \"maximal type flags\"</p>",
        "id": 229507541,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615307724
    },
    {
        "content": "<p>it may well be that this is fine</p>",
        "id": 229507575,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615307738
    },
    {
        "content": "<p>and/or this is fine if we include a few simple optimizations</p>",
        "id": 229507607,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615307751
    },
    {
        "content": "<p>e.g., to cover the case of simple constants like <code>22</code></p>",
        "id": 229507627,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615307758
    },
    {
        "content": "<p>or other trivial constants</p>",
        "id": 229507697,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615307767
    },
    {
        "content": "<p>this seems likely true</p>",
        "id": 229507710,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615307772
    },
    {
        "content": "<p>we already do this for literals</p>",
        "id": 229507761,
        "sender_full_name": "lcnr",
        "timestamp": 1615307790
    },
    {
        "content": "<p>I'd be happiest with that approach i think, it feels cleanest overall</p>",
        "id": 229507767,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615307792
    },
    {
        "content": "<p>I still prefer not to have two versions of the predicates I think</p>",
        "id": 229507798,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615307807
    },
    {
        "content": "<p>8 mins to talk about <code>WithOptConstParam</code>?</p>",
        "id": 229507918,
        "sender_full_name": "lcnr",
        "timestamp": 1615307848
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-03-09/near/229477621\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> want to also quickly talk about <a href=\"https://github.com/rust-lang/rust/pull/81309#issuecomment-793639346\">https://github.com/rust-lang/rust/pull/81309#issuecomment-793639346</a>?</p>\n</blockquote>\n<p>or this</p>",
        "id": 229507963,
        "sender_full_name": "lcnr",
        "timestamp": 1615307862
    },
    {
        "content": "<p>or just end early <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> tbh i think both of these take longer than we have here</p>",
        "id": 229508114,
        "sender_full_name": "lcnr",
        "timestamp": 1615307901
    },
    {
        "content": "<p>yeah, let's end it</p>\n<p>the idea with making the identity substs optional seems really good and wasn't something i thought of myself, so <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 229508542,
        "sender_full_name": "lcnr",
        "timestamp": 1615308064
    },
    {
        "content": "<p>sorry, was afk for second :)</p>",
        "id": 229508690,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615308123
    },
    {
        "content": "<p>I agree with ending it</p>",
        "id": 229508732,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615308126
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-03-09/near/229497614\">said</a>:</p>\n<blockquote>\n<p>I myself don't have a lot to say today</p>\n</blockquote>\n<p>sidenote: i am really good at estimating the complexity of what i am going to talk about</p>",
        "id": 229508748,
        "sender_full_name": "lcnr",
        "timestamp": 1615308128
    },
    {
        "content": "<p>lol</p>",
        "id": 229508776,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615308136
    },
    {
        "content": "<p>was thinking the unused substs discussion would take like 10-15 minutes <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 229508872,
        "sender_full_name": "lcnr",
        "timestamp": 1615308168
    }
]