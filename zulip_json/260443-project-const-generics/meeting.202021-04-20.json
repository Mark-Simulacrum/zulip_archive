[
    {
        "content": "<p>Hi <span class=\"user-group-mention\" data-user-group-id=\"3805\">@project-const-generics</span>, does one of you have something you want to discuss during the next meeting?</p>\n<p>I think spending more time talking about issues wrt generic anon consts isn't too useful rn until I've made some progress on <a href=\"https://github.com/rust-lang/rust/issues/83086\">#83086</a> which I am currently not spending any time on.</p>\n<p>Another topic would be <a href=\"https://github.com/rust-lang/project-const-generics/issues/6\">https://github.com/rust-lang/project-const-generics/issues/6</a>, which interacts with structural match. It would be good to both include wg-const-eval and to spend some time to figure out the current status. It's also not really needed until val trees is finished, which is also kind of blocked on me.</p>",
        "id": 234697986,
        "sender_full_name": "lcnr",
        "timestamp": 1618500471
    },
    {
        "content": "<p>we could talk about const param defaults wf</p>",
        "id": 235069446,
        "sender_full_name": "lcnr",
        "timestamp": 1618749890
    },
    {
        "content": "<p>so if we want to check the well formedness of const param defaults, even if they are generic</p>",
        "id": 235069522,
        "sender_full_name": "lcnr",
        "timestamp": 1618749918
    },
    {
        "content": "<p>also how to deal with anon consts in parameter listings <a href=\"https://github.com/rust-lang/rust/issues/84299\">#84299</a></p>",
        "id": 235072640,
        "sender_full_name": "lcnr",
        "timestamp": 1618752934
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-04-20/near/235072640\">said</a>:</p>\n<blockquote>\n<p>also how to deal with anon consts in parameter listings <a href=\"https://github.com/rust-lang/rust/issues/84299\">#84299</a></p>\n</blockquote>\n<p>or nm, that might just workâ„¢</p>",
        "id": 235076236,
        "sender_full_name": "lcnr",
        "timestamp": 1618756491
    },
    {
        "content": "<p>hey ho hey, i don't really have much to say today</p>",
        "id": 235355784,
        "sender_full_name": "lcnr",
        "timestamp": 1618930118
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-04-20/near/235069446\">said</a>:</p>\n<blockquote>\n<p>we could talk about const param defaults wf</p>\n</blockquote>\n<p>i looked a bit more at how this works</p>",
        "id": 235355815,
        "sender_full_name": "lcnr",
        "timestamp": 1618930137
    },
    {
        "content": "<p>and it seems like there isn't much need to talk about this</p>",
        "id": 235355869,
        "sender_full_name": "lcnr",
        "timestamp": 1618930157
    },
    {
        "content": "<p>wave</p>",
        "id": 235355888,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618930169
    },
    {
        "content": "<p>sorry i'm late</p>",
        "id": 235355927,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618930183
    },
    {
        "content": "<p>so for</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">concrete_expr</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 235356043,
        "sender_full_name": "lcnr",
        "timestamp": 1618930216
    },
    {
        "content": "<p>it seems clear to me that we want to eagerly check that <code>concrete_expr</code> is wf</p>",
        "id": 235356106,
        "sender_full_name": "lcnr",
        "timestamp": 1618930242
    },
    {
        "content": "<p>that's not 100% clear to me</p>",
        "id": 235356228,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618930287
    },
    {
        "content": "<p>we don't necessarily do that for type defaults, for example</p>",
        "id": 235356248,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618930298
    },
    {
        "content": "<p>we do</p>",
        "id": 235356254,
        "sender_full_name": "lcnr",
        "timestamp": 1618930302
    },
    {
        "content": "<p>if it's fully concrete</p>",
        "id": 235356262,
        "sender_full_name": "lcnr",
        "timestamp": 1618930306
    },
    {
        "content": "<p>doch?</p>",
        "id": 235356265,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618930306
    },
    {
        "content": "<p>hmm</p>",
        "id": 235356278,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618930314
    },
    {
        "content": "<p>what does \"doch\" mean</p>",
        "id": 235356298,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1618930322
    },
    {
        "content": "<p>we don't check <code>Vec&lt;[T]&gt;</code> for example</p>",
        "id": 235356341,
        "sender_full_name": "lcnr",
        "timestamp": 1618930324
    },
    {
        "content": "<p>but do error for <code>Vec&lt;[i32]&gt;</code></p>",
        "id": 235356374,
        "sender_full_name": "lcnr",
        "timestamp": 1618930338
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"326176\">Boxy</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-04-20/near/235356298\">said</a>:</p>\n<blockquote>\n<p>what does \"doch\" mean</p>\n</blockquote>\n<p>I'll let some actual German speaker answer that ;)</p>",
        "id": 235356379,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618930341
    },
    {
        "content": "<p>oh lol</p>",
        "id": 235356392,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1618930347
    },
    {
        "content": "<p>it means roughly \"we do not!\"</p>",
        "id": 235356394,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618930348
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-04-20/near/235356374\">said</a>:</p>\n<blockquote>\n<p>but do error for <code>Vec&lt;[i32]&gt;</code></p>\n</blockquote>\n<p>ok, I sort of remember this, I'm not sure I'm happy about it though because of the inconsistency</p>",
        "id": 235356464,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618930380
    },
    {
        "content": "<p>there are reasonable reasons not to do it</p>",
        "id": 235356479,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618930386
    },
    {
        "content": "<p>well anyway</p>",
        "id": 235356588,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618930428
    },
    {
        "content": "<p>it's (probably) a relatively minor point</p>",
        "id": 235356601,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618930436
    },
    {
        "content": "<p>so <code>struct Foo&lt;const N: usize = 0 - 1&gt;</code> should err eagerly, do you agree <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 235356786,
        "sender_full_name": "lcnr",
        "timestamp": 1618930501
    },
    {
        "content": "<p>I believe it should at least warn</p>",
        "id": 235356810,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618930513
    },
    {
        "content": "<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 235356852,
        "sender_full_name": "lcnr",
        "timestamp": 1618930529
    },
    {
        "content": "<p>it seems like a minor point -- whatever challenges arise for errors surely also arise for warnings</p>",
        "id": 235356904,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618930553
    },
    {
        "content": "<p>there are no <em>implementation</em> challenges here</p>",
        "id": 235356988,
        "sender_full_name": "lcnr",
        "timestamp": 1618930571
    },
    {
        "content": "<p>for errors</p>",
        "id": 235356997,
        "sender_full_name": "lcnr",
        "timestamp": 1618930573
    },
    {
        "content": "<p>implemented this in <a href=\"https://github.com/rust-lang/rust/issues/84299\">#84299</a></p>",
        "id": 235357017,
        "sender_full_name": "lcnr",
        "timestamp": 1618930577
    },
    {
        "content": "<p>(that i know of ^^)</p>",
        "id": 235357151,
        "sender_full_name": "lcnr",
        "timestamp": 1618930635
    },
    {
        "content": "<p>ok, so was this only a question of policy?</p>",
        "id": 235357230,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618930663
    },
    {
        "content": "<p>i want to stabilize both the relaxed parameter ordering <code>struct Foo&lt;const N: usize, T&gt;</code> and const parameter defaults fairly soon</p>",
        "id": 235357265,
        "sender_full_name": "lcnr",
        "timestamp": 1618930675
    },
    {
        "content": "<p>I think we should have a consistent policy across types and constants</p>",
        "id": 235357273,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618930676
    },
    {
        "content": "<p>so it's a design question</p>",
        "id": 235357281,
        "sender_full_name": "lcnr",
        "timestamp": 1618930680
    },
    {
        "content": "<p>I generally think the policy should be consistent across all defaults</p>",
        "id": 235357304,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618930683
    },
    {
        "content": "<p>(which it's not today)</p>",
        "id": 235357337,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618930686
    },
    {
        "content": "<p>not an implementation issue</p>",
        "id": 235357338,
        "sender_full_name": "lcnr",
        "timestamp": 1618930686
    },
    {
        "content": "<p>specifically, we draw this distinction between things that are fully known and things that involve generics; I'm not convinced that's a good idea for a hard error</p>",
        "id": 235357416,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618930717
    },
    {
        "content": "<p>however</p>",
        "id": 235357445,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618930731
    },
    {
        "content": "<p>I think there's an alternative version that is maybe good -- e.g., if we can prove that the default is never valid</p>",
        "id": 235357476,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618930748
    },
    {
        "content": "<p>which is likely true sometimes even when generics are involved</p>",
        "id": 235357503,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618930758
    },
    {
        "content": "<p>regardless I'm ok having it error to be consistent with types</p>",
        "id": 235357535,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618930775
    },
    {
        "content": "<p>okay, the imo less clear cases are</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">First</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">M</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Second</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Third</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">M</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\">  </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 235357976,
        "sender_full_name": "lcnr",
        "timestamp": 1618930858
    },
    {
        "content": "<p>the first and second  seem desirable to me</p>",
        "id": 235358143,
        "sender_full_name": "lcnr",
        "timestamp": 1618930890
    },
    {
        "content": "<p>back up</p>",
        "id": 235358180,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618930897
    },
    {
        "content": "<p>errors are desirable?</p>",
        "id": 235358217,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618930903
    },
    {
        "content": "<p>ah '^^</p>",
        "id": 235358363,
        "sender_full_name": "lcnr",
        "timestamp": 1618930926
    },
    {
        "content": "<p>it's desirable to allow the first two cases, so these should be allowed imo</p>",
        "id": 235358427,
        "sender_full_name": "lcnr",
        "timestamp": 1618930941
    },
    {
        "content": "<p>the first two seem obviously good</p>",
        "id": 235358476,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618930953
    },
    {
        "content": "<p>the third also seems pretty clearly good to me</p>",
        "id": 235358507,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618930959
    },
    {
        "content": "<p>and is a good example of why this is not clear cut ;)</p>",
        "id": 235358544,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618930968
    },
    {
        "content": "<p>that's something i am not sure of</p>",
        "id": 235358552,
        "sender_full_name": "lcnr",
        "timestamp": 1618930971
    },
    {
        "content": "<p>does the third one fall into const_evaluatable_checked territory?</p>",
        "id": 235358601,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1618930984
    },
    {
        "content": "<p>kinda</p>",
        "id": 235358642,
        "sender_full_name": "lcnr",
        "timestamp": 1618930989
    },
    {
        "content": "<p>but I guess we're starting to tread onto interesting territory about evaluatable and how much we can encapsulate const generics</p>",
        "id": 235358650,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618930991
    },
    {
        "content": "<p>or like</p>",
        "id": 235358654,
        "sender_full_name": "lcnr",
        "timestamp": 1618930991
    },
    {
        "content": "<p>yes</p>",
        "id": 235358693,
        "sender_full_name": "lcnr",
        "timestamp": 1618931003
    },
    {
        "content": "<p>I'd like to understand what the general thinking is here</p>",
        "id": 235358712,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618931009
    },
    {
        "content": "<p>I have to say that this may be a case where monomorphization-time errors are reasonable</p>",
        "id": 235358988,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618931075
    },
    {
        "content": "<p>but I'd like to know how much of a conversation there has been around it</p>",
        "id": 235359032,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618931088
    },
    {
        "content": "<p>that's a hard question to answer <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 235359554,
        "sender_full_name": "lcnr",
        "timestamp": 1618931195
    },
    {
        "content": "<p>to only focus on the const param default case for now</p>",
        "id": 235359596,
        "sender_full_name": "lcnr",
        "timestamp": 1618931208
    },
    {
        "content": "<p>we have pretty much 3 possible ways to deal with this</p>",
        "id": 235359649,
        "sender_full_name": "lcnr",
        "timestamp": 1618931222
    },
    {
        "content": "<ul>\n<li>we check whether <code>N + 1</code> is evaluatable eagerly, causing an error if there isn't a bound expressing <code>N + 1 is const evaluatable</code> on <code>Third</code></li>\n</ul>",
        "id": 235359922,
        "sender_full_name": "lcnr",
        "timestamp": 1618931287
    },
    {
        "content": "<ul>\n<li>we check whether <code>N + 1</code> is evaluatable when using the default, so treat this like type param defaults</li>\n</ul>",
        "id": 235360070,
        "sender_full_name": "lcnr",
        "timestamp": 1618931330
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">]</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// let x: Foo::&lt;T&gt;; // err</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 235360363,
        "sender_full_name": "lcnr",
        "timestamp": 1618931448
    },
    {
        "content": "<p>The latter is basically what we do with types now</p>",
        "id": 235360376,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618931453
    },
    {
        "content": "<p>although I don't get your example</p>",
        "id": 235360426,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618931476
    },
    {
        "content": "<p>maybe there is a missing <code>?Sized</code> somewhere</p>",
        "id": 235360453,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618931490
    },
    {
        "content": "<p><code>Vec</code> requires its generic param to be sized</p>",
        "id": 235360487,
        "sender_full_name": "lcnr",
        "timestamp": 1618931506
    },
    {
        "content": "<p>which <code>[T]</code> isn't</p>",
        "id": 235360492,
        "sender_full_name": "lcnr",
        "timestamp": 1618931512
    },
    {
        "content": "<p>but we only check it when using <code>Foo</code> with that default, even if <code>T</code> is still generic then</p>",
        "id": 235360564,
        "sender_full_name": "lcnr",
        "timestamp": 1618931527
    },
    {
        "content": "<p>oh, I missed the <code>[]</code></p>",
        "id": 235360576,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618931532
    },
    {
        "content": "<p>sure, so that's an example of what I meant by: we could conceivably error when we can chose that \"there does not exist a T that makes <code>Vec&lt;[T]&gt;</code> well formed\"</p>",
        "id": 235360650,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618931557
    },
    {
        "content": "<p>but I believe we don't today</p>",
        "id": 235360660,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618931560
    },
    {
        "content": "<p>our trait solver can't answer queries like that, for one thing</p>",
        "id": 235360711,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618931584
    },
    {
        "content": "<p>(chalk can)</p>",
        "id": 235360733,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618931589
    },
    {
        "content": "<p>but it also opens up a bunch of interesting questions</p>",
        "id": 235360768,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618931603
    },
    {
        "content": "<ul>\n<li>don't require any assertions that generic const expressions are evaluatable, only causing an error when using a concrete N (usize::MAX) in this case</li>\n</ul>",
        "id": 235360781,
        "sender_full_name": "lcnr",
        "timestamp": 1618931606
    },
    {
        "content": "<p>i have to say that i'm leaning towards this final bullet;</p>",
        "id": 235360817,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618931625
    },
    {
        "content": "<p>but I think it makes sense to consider this somewhat holistically</p>",
        "id": 235360844,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618931636
    },
    {
        "content": "<p>I feel like it'd be a good RFC to start work on</p>",
        "id": 235360857,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618931642
    },
    {
        "content": "<p>and probably a good topic for a lang team design meeting</p>",
        "id": 235360910,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618931652
    },
    {
        "content": "<p>i'm not convinced we can talk about type parameter defaults 100% in isolation, though they seem like the easier case, since you don't have questions of const fn encapsulating details of their bodies</p>",
        "id": 235360991,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618931681
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-04-20/near/235360991\">said</a>:</p>\n<blockquote>\n<p>i'm not convinced we can talk about type parameter defaults 100% in isolation, though they seem like the easier case, since you don't have questions of const fn encapsulating details of their bodies</p>\n</blockquote>\n<p>2 and 3 can't be discussed without considering the bigger picture i think</p>",
        "id": 235361120,
        "sender_full_name": "lcnr",
        "timestamp": 1618931731
    },
    {
        "content": "<p>wait, \"type parameter defaults\"?</p>",
        "id": 235361363,
        "sender_full_name": "lcnr",
        "timestamp": 1618931772
    },
    {
        "content": "<p>do you mean checking <code>Vec&lt;[T]&gt;</code>?</p>",
        "id": 235361502,
        "sender_full_name": "lcnr",
        "timestamp": 1618931794
    },
    {
        "content": "<p>i personally prefer 2 i think</p>",
        "id": 235361945,
        "sender_full_name": "lcnr",
        "timestamp": 1618931901
    },
    {
        "content": "<p>s/type parameter/generic parameter/</p>",
        "id": 235361955,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618931904
    },
    {
        "content": "<p>while still unsure about how to treat 1</p>",
        "id": 235361983,
        "sender_full_name": "lcnr",
        "timestamp": 1618931918
    },
    {
        "content": "<p>I'm not sure i understand the difference betewen 2 and 3</p>",
        "id": 235362035,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618931934
    },
    {
        "content": "<p>I thought there had already been agreement that 1 was the desirable method, in one of the various issues for const generics (a little difficult to find it now, as I'm on my phone).</p>",
        "id": 235362136,
        "sender_full_name": "varkor",
        "timestamp": 1618931971
    },
    {
        "content": "<p>maybe so, but that agreement didn't percolate to the lang team :)</p>",
        "id": 235362177,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618931984
    },
    {
        "content": "<p>or at least, not to me</p>",
        "id": 235362184,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618931987
    },
    {
        "content": "<p>I feel like 1 would be annoying in practice as all get out</p>",
        "id": 235362263,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618932005
    },
    {
        "content": "<p>not to mention that it's inconsistent with what we do for types</p>",
        "id": 235362309,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618932022
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">M</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">second</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\">  </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">const_evaluatable</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">third</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 235362359,
        "sender_full_name": "lcnr",
        "timestamp": 1618932036
    },
    {
        "content": "<p>I guess I'd like to do a better job outlining what goals we are trying to defend</p>",
        "id": 235362366,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618932039
    },
    {
        "content": "<p>Okay, but then this feels like a much bigger decision that needs to involve all the relevant parties. Otherwise we're likely just going to re-cover old ground.</p>",
        "id": 235362406,
        "sender_full_name": "varkor",
        "timestamp": 1618932052
    },
    {
        "content": "<p>I think i'm basically opposed to <code>const_evaluatable</code> as a concept :)</p>",
        "id": 235362425,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618932059
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> did we talk about const parameter defaults or just const arguments in general?</p>",
        "id": 235362470,
        "sender_full_name": "lcnr",
        "timestamp": 1618932069
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"121053\">varkor</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-04-20/near/235362406\">said</a>:</p>\n<blockquote>\n<p>Okay, but then this feels like a much bigger decision that needs to involve all the relevant parties. Otherwise we're likely just going to re-cover old ground.</p>\n</blockquote>\n<p>I don't think we can reach a decision here or anywhere, it requires an RFC, but what we can do is start to create a doc that better articulates the design space and the tradeoffs involved</p>",
        "id": 235362547,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618932092
    },
    {
        "content": "<p>Just const arguments in general, but I'm not sure I understand the argument that they should work differently.</p>",
        "id": 235362583,
        "sender_full_name": "varkor",
        "timestamp": 1618932103
    },
    {
        "content": "<p>what I actually want is a const generics vision doc lol :)</p>",
        "id": 235362618,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618932113
    },
    {
        "content": "<p>which issue was it, <span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> ?</p>",
        "id": 235362816,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618932177
    },
    {
        "content": "<p>Let me try to find it.</p>",
        "id": 235362838,
        "sender_full_name": "varkor",
        "timestamp": 1618932185
    },
    {
        "content": "<p>i do have an imo fairly good argument which goes from \"we want generic const arguments\" to \"we want const evaluatable bounds\"</p>",
        "id": 235362936,
        "sender_full_name": "lcnr",
        "timestamp": 1618932227
    },
    {
        "content": "<p>now, do you want that in a vision doc or should i try to explain that now <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 235363085,
        "sender_full_name": "lcnr",
        "timestamp": 1618932271
    },
    {
        "content": "<p>I think <a href=\"https://github.com/rust-lang/rust/issues/68436\">https://github.com/rust-lang/rust/issues/68436</a> was the one I had in mind (and the referenced comments).</p>",
        "id": 235363113,
        "sender_full_name": "varkor",
        "timestamp": 1618932283
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-04-20/near/235362936\">said</a>:</p>\n<blockquote>\n<p>i do have an imo fairly good argument which goes from \"we want generic const arguments\" to \"we want const evaluatable bounds\"</p>\n</blockquote>\n<p>I'm happy to hear it now</p>",
        "id": 235363169,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618932307
    },
    {
        "content": "<p>the role of the vision doc is not really to make that argument</p>",
        "id": 235363185,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618932315
    },
    {
        "content": "<p>it's to show how const generics are going to look and feel in actual use</p>",
        "id": 235363217,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618932324
    },
    {
        "content": "<p>would removing const evaluatable bounds be a non-breaking change if we stabilised them and decided it was a bad decision Lol</p>",
        "id": 235363227,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1618932328
    },
    {
        "content": "<p>this is the core of my concern about <code>const_evaluatable</code></p>",
        "id": 235363241,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618932333
    },
    {
        "content": "<blockquote>\n<p>we want generic const arguments</p>\n</blockquote>\n<p>i assume that we all agree here <span aria-label=\"sparkles\" class=\"emoji emoji-2728\" role=\"img\" title=\"sparkles\">:sparkles:</span></p>",
        "id": 235363257,
        "sender_full_name": "lcnr",
        "timestamp": 1618932338
    },
    {
        "content": "<p>does this just mean generic parameters like <code>const N: usize</code> ?</p>",
        "id": 235363368,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618932368
    },
    {
        "content": "<p>if so, I'm willing to accept that as a core axiom :)</p>",
        "id": 235363384,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618932374
    },
    {
        "content": "<p>generic const arguments are <code>foo&lt;{ N  + 1 }&gt;</code></p>",
        "id": 235363412,
        "sender_full_name": "lcnr",
        "timestamp": 1618932386
    },
    {
        "content": "<p>so generic arguments which are more than just const parameters <code>N</code></p>",
        "id": 235363478,
        "sender_full_name": "lcnr",
        "timestamp": 1618932414
    },
    {
        "content": "<p>I see, so, the ability to specify the value for const generic parameters in turbofish ?</p>",
        "id": 235363483,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618932416
    },
    {
        "content": "<p>ok, clearly yes</p>",
        "id": 235363491,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618932422
    },
    {
        "content": "<p>stuff like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">split_first</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">arr</span>: <span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 235363558,
        "sender_full_name": "lcnr",
        "timestamp": 1618932445
    },
    {
        "content": "<p><code>N - 1</code> is currently not allowed as a const argument</p>",
        "id": 235363605,
        "sender_full_name": "lcnr",
        "timestamp": 1618932466
    },
    {
        "content": "<p>OK. I think we want that, yes.</p>",
        "id": 235363623,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618932475
    },
    {
        "content": "<p>this means we need a way to unify generic constants</p>",
        "id": 235363714,
        "sender_full_name": "lcnr",
        "timestamp": 1618932496
    },
    {
        "content": "<p>Say more</p>",
        "id": 235363745,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618932513
    },
    {
        "content": "<p>because otherwise using them will be incredibly painful</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">split_first</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">arr</span>: <span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// ...</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">tail</span>: <span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"c1\">// ...</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">tail</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 235363848,
        "sender_full_name": "lcnr",
        "timestamp": 1618932549
    },
    {
        "content": "<p>Do you mean we need the ability to infer <code>N</code> from knowing <code>N-1</code>?</p>",
        "id": 235363850,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618932549
    },
    {
        "content": "<p>we want this to typeck</p>",
        "id": 235363876,
        "sender_full_name": "lcnr",
        "timestamp": 1618932558
    },
    {
        "content": "<p>ok</p>",
        "id": 235363929,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618932582
    },
    {
        "content": "<p>which means that both <code>N -  1</code> expressions have to be considered the same type</p>",
        "id": 235363933,
        "sender_full_name": "lcnr",
        "timestamp": 1618932586
    },
    {
        "content": "<p>i.e., we want to be able to know that <code>N-1 = N-1</code> ?</p>",
        "id": 235363936,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618932588
    },
    {
        "content": "<p>even though they use a different const</p>",
        "id": 235363942,
        "sender_full_name": "lcnr",
        "timestamp": 1618932592
    },
    {
        "content": "<p>yeah</p>",
        "id": 235363946,
        "sender_full_name": "lcnr",
        "timestamp": 1618932593
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-04-20/near/235363933\">said</a>:</p>\n<blockquote>\n<p>which means that both <code>N -  1</code> expressions have to be considered the same type</p>\n</blockquote>\n<p>not quite, right?</p>",
        "id": 235363974,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618932602
    },
    {
        "content": "<p>it means that we have to know that they evaluate to the same value</p>",
        "id": 235364030,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618932611
    },
    {
        "content": "<p>ok, I'm following so far</p>",
        "id": 235364089,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618932628
    },
    {
        "content": "<p><code>N - 1</code> isn't a type <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> we want to be able treat the types <code>[T; N - 1]</code> as equal</p>",
        "id": 235364143,
        "sender_full_name": "lcnr",
        "timestamp": 1618932646
    },
    {
        "content": "<p>right</p>",
        "id": 235364213,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618932667
    },
    {
        "content": "<p>and to do that, we need to show that the two lengths will evaluate to the same value</p>",
        "id": 235364248,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618932680
    },
    {
        "content": "<p>yeah</p>",
        "id": 235364272,
        "sender_full_name": "lcnr",
        "timestamp": 1618932690
    },
    {
        "content": "<p><code>const_evaluatable_checked</code> does this by building an abstract representation for the mir</p>",
        "id": 235364456,
        "sender_full_name": "lcnr",
        "timestamp": 1618932758
    },
    {
        "content": "<p>something like this will probably be needed</p>",
        "id": 235364485,
        "sender_full_name": "lcnr",
        "timestamp": 1618932768
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-04-20/near/235364456\">said</a>:</p>\n<blockquote>\n<p><code>const_evaluatable_checked</code> does this by building an abstract representation for the mir</p>\n</blockquote>\n<p>I don't know what <code>const_evaluatable_checked</code> is</p>",
        "id": 235364605,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618932808
    },
    {
        "content": "<p>an unstable feature <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 235364636,
        "sender_full_name": "lcnr",
        "timestamp": 1618932820
    },
    {
        "content": "<p>is that a query? :)</p>",
        "id": 235364643,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618932823
    },
    {
        "content": "<p>oh, ok</p>",
        "id": 235364652,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618932827
    },
    {
        "content": "<p>so it compares the 'program text', so to speak</p>",
        "id": 235364672,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618932839
    },
    {
        "content": "<p>ignoring whitespace ^^ yes</p>",
        "id": 235364742,
        "sender_full_name": "lcnr",
        "timestamp": 1618932852
    },
    {
        "content": "<p>OK.</p>",
        "id": 235364819,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618932875
    },
    {
        "content": "<p>For the purposes of today, can we say that it compares the AST</p>",
        "id": 235364833,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618932885
    },
    {
        "content": "<p>for the purpose of today <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span></p>",
        "id": 235364869,
        "sender_full_name": "lcnr",
        "timestamp": 1618932902
    },
    {
        "content": "<p>I'd like to sidestep questions about MIR and the fidelity of that lowering process for a moment :)</p>",
        "id": 235364870,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618932903
    },
    {
        "content": "<p>ok, carry on</p>",
        "id": 235364936,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618932922
    },
    {
        "content": "<p><code>split_first</code> can, and will, be used in a lot of places where <code>N - 1</code> is never mentioned in the public signature</p>",
        "id": 235365000,
        "sender_full_name": "lcnr",
        "timestamp": 1618932947
    },
    {
        "content": "<p>so stuff like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">some_method</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">arr</span>: <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">first</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rest</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">split_first</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">rest</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// ...</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 235365169,
        "sender_full_name": "lcnr",
        "timestamp": 1618932996
    },
    {
        "content": "<p>here it is not apparent that <code>some_method</code> tries to evaluate <code>N - 1</code> at any point</p>",
        "id": 235365270,
        "sender_full_name": "lcnr",
        "timestamp": 1618933035
    },
    {
        "content": "<p>without looking into <code>some_method</code></p>",
        "id": 235365296,
        "sender_full_name": "lcnr",
        "timestamp": 1618933049
    },
    {
        "content": "<p>sure</p>",
        "id": 235365390,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618933082
    },
    {
        "content": "<p>and of course <code>[u8; 0]</code> would be bad</p>",
        "id": 235365514,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618933123
    },
    {
        "content": "<p>post monomorphization errors when using <code>some_method::&lt;0&gt;</code> are bad</p>",
        "id": 235365553,
        "sender_full_name": "lcnr",
        "timestamp": 1618933135
    },
    {
        "content": "<p>that is the point where I may not agree :)</p>",
        "id": 235365572,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618933146
    },
    {
        "content": "<p>well, I agree they are bad</p>",
        "id": 235365589,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618933152
    },
    {
        "content": "<p>because we can't really track where <code>N</code> is coming from during mono item collection</p>",
        "id": 235365611,
        "sender_full_name": "lcnr",
        "timestamp": 1618933163
    },
    {
        "content": "<p>just not convinced yet the cure is worse than the disease, as they say</p>",
        "id": 235365617,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618933166
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-04-20/near/235365611\">said</a>:</p>\n<blockquote>\n<p>because we can't really track where <code>N</code> is coming from during mono item collection</p>\n</blockquote>\n<p>this is an interesting consideration, although I think not a given</p>",
        "id": 235365762,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618933215
    },
    {
        "content": "<p>now, the cure:</p>",
        "id": 235365817,
        "sender_full_name": "lcnr",
        "timestamp": 1618933234
    },
    {
        "content": "<p>I think maybe it doesn't seem like such a huge problem when everything is in one codebase, but is much worse when it's hidden deep in some library code.</p>",
        "id": 235365840,
        "sender_full_name": "varkor",
        "timestamp": 1618933245
    },
    {
        "content": "<ul>\n<li>optionally allow the user to specify const evaluatable bounds</li>\n</ul>",
        "id": 235365861,
        "sender_full_name": "lcnr",
        "timestamp": 1618933254
    },
    {
        "content": "<p>It doesn't seem worse than a function like </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">tail</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">split_first</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>which may panic</p>",
        "id": 235365934,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618933282
    },
    {
        "content": "<p>yeah, but you won't use <code>split_first</code> like this, will you? <em>edit: with doc comment I might</em> <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 235366008,
        "sender_full_name": "lcnr",
        "timestamp": 1618933306
    },
    {
        "content": "<p>I would, sure</p>",
        "id": 235366031,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618933313
    },
    {
        "content": "<p>I mean I'd probably have a comment -- or at least an understanding -- that the slice is known to be non-empty</p>",
        "id": 235366092,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618933327
    },
    {
        "content": "<p>I think in practice you will have many functions with the same property</p>",
        "id": 235366137,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618933346
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-04-20/near/235365861\">said</a>:</p>\n<blockquote>\n<ul>\n<li>optionally allow the user to specify const evaluatable bounds</li>\n</ul>\n</blockquote>\n<p>but let's walk through this</p>",
        "id": 235366214,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618933381
    },
    {
        "content": "<p>I will say also that</p>",
        "id": 235366317,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618933418
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-04-20/near/235365861\">said</a>:</p>\n<blockquote>\n<ul>\n<li>optionally allow the user to specify const evaluatable bounds</li>\n</ul>\n</blockquote>\n<p>i did argue for this from a slightly wrong angle</p>",
        "id": 235366427,
        "sender_full_name": "lcnr",
        "timestamp": 1618933449
    },
    {
        "content": "<p>at the moment I'm seeing a bit of \"binary\" -- either we take monomorphization errors <em>or</em> we propagate these bounds that I suspect will be a common source of confusion. And maybe there is no other path, but it may be that if we poke enough, we'll find one.</p>",
        "id": 235366432,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618933451
    },
    {
        "content": "<p>ignoring the above issues, I do think that optional const evaluatable bounds are useful</p>",
        "id": 235366488,
        "sender_full_name": "lcnr",
        "timestamp": 1618933472
    },
    {
        "content": "<p>(this would kind of be the shiny future process :) trying to spell out the whole experience and worry less about the engineering challenges for the moment)</p>",
        "id": 235366497,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618933475
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-04-20/near/235366488\">said</a>:</p>\n<blockquote>\n<p>ignoring the above issues, I do think that optional const evaluatable bounds are useful</p>\n</blockquote>\n<p><em>optional</em> bounds -- maybe so</p>",
        "id": 235366517,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618933487
    },
    {
        "content": "<p>I might love to have, for example, something like</p>",
        "id": 235366540,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618933497
    },
    {
        "content": "<p>a lint that suggests a <code>where {N &gt; 0}</code> bound</p>",
        "id": 235366579,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618933510
    },
    {
        "content": "<p>like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">EncryptionStuff</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">P</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">is_prime</span><span class=\"p\">(</span><span class=\"n\">P</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 235366594,
        "sender_full_name": "lcnr",
        "timestamp": 1618933519
    },
    {
        "content": "<p>and says \"clients of <code>split_first</code> may fail at monomorphization time, maybe add this where clause\"</p>",
        "id": 235366643,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618933537
    },
    {
        "content": "<p>and it propagates around</p>",
        "id": 235366665,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618933548
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-04-20/near/235366432\">said</a>:</p>\n<blockquote>\n<p>at the moment I'm seeing a bit of \"binary\" -- either we take monomorphization errors <em>or</em> we propagate these bounds that I suspect will be a common source of confusion. And maybe there is no other path, but it may be that if we poke enough, we'll find one.</p>\n</blockquote>\n<p>I think it'll be easy enough to make descriptive diagnostics for these bounds that will ameliorate most of the potential confusion.</p>",
        "id": 235366667,
        "sender_full_name": "varkor",
        "timestamp": 1618933549
    },
    {
        "content": "<p>maybe. Let's write the stories then :)</p>",
        "id": 235366739,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618933567
    },
    {
        "content": "<p>I guess that I think that things like <code>N-1</code> are going to be pretty common, and if one has to add explicit where clauses every time... idk.</p>",
        "id": 235366790,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618933585
    },
    {
        "content": "<p>when like 99% of the time the fn is getting invokved with 3 values, none of which are even close to 0</p>",
        "id": 235366818,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618933598
    },
    {
        "content": "<p>esp. given that the end result is a failure to <em>build</em>, not an obscure bug</p>",
        "id": 235366872,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618933619
    },
    {
        "content": "<p>I do agree though that post-monomorphization errors leading to obscure inability to link together crates sucks</p>",
        "id": 235366948,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618933644
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-04-20/near/235366488\">said</a>:</p>\n<blockquote>\n<p>ignoring the above issues, I do think that optional const evaluatable bounds are useful</p>\n</blockquote>\n<p>and making them opt-out instead of opt-in seems favorable to me, esp because i dislike using lints for something like this</p>",
        "id": 235367129,
        "sender_full_name": "lcnr",
        "timestamp": 1618933713
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-04-20/near/235366739\">said</a>:</p>\n<blockquote>\n<p>maybe. Let's write the stories then :)</p>\n</blockquote>\n<p>taking the 3 characters from asnyc stories?</p>",
        "id": 235367509,
        "sender_full_name": "lcnr",
        "timestamp": 1618933880
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-04-20/near/235366432\">said</a>:</p>\n<blockquote>\n<p>at the moment I'm seeing a bit of \"binary\" -- either we take monomorphization errors <em>or</em> we propagate these bounds that I suspect will be a common source of confusion. And maybe there is no other path, but it may be that if we poke enough, we'll find one.</p>\n</blockquote>\n<p>yeah, because arguing against actually usable alternatives is more difficult :p</p>",
        "id": 235367760,
        "sender_full_name": "lcnr",
        "timestamp": 1618933966
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-04-20/near/235367129\">said</a>:</p>\n<blockquote>\n<p>and making them opt-out instead of opt-in seems favorable to me, esp because i dislike using lints for something like this</p>\n</blockquote>\n<p>why do you dislike using lints for this?</p>",
        "id": 235367907,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618934040
    },
    {
        "content": "<p>I've been somewhat leaning towards \"allow-by-default\" lints as a reasonable way for folks to get \"more guarantees than make sense by default'</p>",
        "id": 235368195,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618934139
    },
    {
        "content": "<p>might be a useful group</p>",
        "id": 235368216,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618934146
    },
    {
        "content": "<p>(I suppose the \"no explicit bounds\" approach is really the same as implied bounds for const generics, where the original bounds are implicitly induced by code itself, and from this perspective, it can seem less harmful.)</p>",
        "id": 235368249,
        "sender_full_name": "varkor",
        "timestamp": 1618934157
    },
    {
        "content": "<p>To me this is very similar to the \"assertpanicsafe\" thing. We don't just allow you to use everything and lint, instead we error and require wrapping in the escape hatch wrapper type</p>",
        "id": 235368262,
        "sender_full_name": "oli",
        "timestamp": 1618934162
    },
    {
        "content": "<p>there's a few differences</p>",
        "id": 235368344,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618934183
    },
    {
        "content": "<p>Right, this is not unsound, just horrible UX which we should work on improving anyway</p>",
        "id": 235368565,
        "sender_full_name": "oli",
        "timestamp": 1618934275
    },
    {
        "content": "<p>but also:</p>",
        "id": 235368621,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618934284
    },
    {
        "content": "<p><del>assert panic safe is also not unsound</del></p>",
        "id": 235368667,
        "sender_full_name": "lcnr",
        "timestamp": 1618934301
    },
    {
        "content": "<p>we have traditionally protected you against panic unsafety <em>at the resolution of Send + Sync</em></p>",
        "id": 235368737,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618934327
    },
    {
        "content": "<p>that's oddly stated</p>",
        "id": 235368757,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618934335
    },
    {
        "content": "<p>what I mean is:</p>",
        "id": 235368772,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618934341
    },
    {
        "content": "<p>when we introduced <code>assert_unwind_safe</code></p>",
        "id": 235368831,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618934363
    },
    {
        "content": "<p>(sorry, got a phone call)</p>",
        "id": 235369250,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618934484
    },
    {
        "content": "<p>when we introduced <code>catch-unwind</code>, I mean</p>",
        "id": 235369268,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618934493
    },
    {
        "content": "<p>we had previously guaranteed that panics would tear down the entire thread</p>",
        "id": 235369290,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618934502
    },
    {
        "content": "<p>so effectively the only data that could be witnessed in an incomplete state was data that was <code>Send + Sync</code>, and even that was a bit challenging</p>",
        "id": 235369354,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618934523
    },
    {
        "content": "<p>the premise of <code>AssertUnwindSafe</code> (which I supported and still appreciate myself, but which I think is also a regular irritant for folks and not a clear win overall) was that we were going to preserve this guarantee and not make it super easy to drop</p>",
        "id": 235369525,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618934578
    },
    {
        "content": "<p>but we don't guarantee anything about integer overflow right now</p>",
        "id": 235369567,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618934588
    },
    {
        "content": "<p>we will panic in debug mode</p>",
        "id": 235369603,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618934598
    },
    {
        "content": "<p>which seems to me to be strictly more painful to track than a monomorphization failure</p>",
        "id": 235369658,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618934623
    },
    {
        "content": "<p>That isn't true. A panic gives you a backtrace</p>",
        "id": 235369756,
        "sender_full_name": "oli",
        "timestamp": 1618934648
    },
    {
        "content": "<p>as the latter is deterministic-- of cours I'm assuming we do a good job giving you a backtrace etc</p>",
        "id": 235369764,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618934652
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-04-20/near/235369756\">said</a>:</p>\n<blockquote>\n<p>That isn't true. A panic gives you a backtrace</p>\n</blockquote>\n<p>I don't accept that we can't do that</p>",
        "id": 235369802,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618934662
    },
    {
        "content": "<p>that feels like an impl hurdle</p>",
        "id": 235369814,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618934666
    },
    {
        "content": "<p>A post mono error can be many levels disconnected from the root</p>",
        "id": 235369818,
        "sender_full_name": "oli",
        "timestamp": 1618934667
    },
    {
        "content": "<p>let's hypothesize for a moment that we <em>could</em> give you a backtrace</p>",
        "id": 235369880,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618934693
    },
    {
        "content": "<p>Ok</p>",
        "id": 235369916,
        "sender_full_name": "oli",
        "timestamp": 1618934705
    },
    {
        "content": "<p>so that the monomorphization error were formatted in roughly the same way as the panic</p>",
        "id": 235369920,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618934707
    },
    {
        "content": "<p>does that change the calculus for you?</p>",
        "id": 235369932,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618934711
    },
    {
        "content": "<p>A bit</p>",
        "id": 235369973,
        "sender_full_name": "oli",
        "timestamp": 1618934726
    },
    {
        "content": "<p>I just have had hammered in that mono-time errors are bad and am parroting that</p>",
        "id": 235370051,
        "sender_full_name": "oli",
        "timestamp": 1618934758
    },
    {
        "content": "<p>I mean they are :)</p>",
        "id": 235370153,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618934790
    },
    {
        "content": "<p>I don't know if I ever built a strong opinion about them other than that they are annoying</p>",
        "id": 235370163,
        "sender_full_name": "oli",
        "timestamp": 1618934798
    },
    {
        "content": "<p>And that we don't see them in check builds</p>",
        "id": 235370239,
        "sender_full_name": "oli",
        "timestamp": 1618934836
    },
    {
        "content": "<p>it's just that having people hand propagate a lot of where clauses around feels like it could get pretty annoying too</p>",
        "id": 235370245,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618934838
    },
    {
        "content": "<p>(I am not claiming it's clear cut)</p>",
        "id": 235370298,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618934862
    },
    {
        "content": "<p>Right. If we auto-bubble, that makes body changes a breaking change though i think?</p>",
        "id": 235370391,
        "sender_full_name": "oli",
        "timestamp": 1618934888
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> regarding stories, maybe we can actually spin up a vision doc? I'd use the same characters, yes, but I don't think that's the high-order bit here.</p>",
        "id": 235370416,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618934896
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-04-20/near/235370391\">said</a>:</p>\n<blockquote>\n<p>Right. If we auto-bubble, that makes body changes a breaking change though i think?</p>\n</blockquote>\n<p>it does, I agree that's part of the equation. Of course, they already are, at least if they affect the return value.</p>",
        "id": 235370498,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618934925
    },
    {
        "content": "<p>but in the same way that one can write a binary search that isn't careful about overflow</p>",
        "id": 235370570,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618934946
    },
    {
        "content": "<p>and get wrong results</p>",
        "id": 235370576,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618934947
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-04-20/near/235367907\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-04-20/near/235367129\">said</a>:</p>\n<blockquote>\n<p>and making them opt-out instead of opt-in seems favorable to me, esp because i dislike using lints for something like this</p>\n</blockquote>\n<p>why do you dislike using lints for this?</p>\n</blockquote>\n<p>because i do '^^, after thinking about it, the reason theses to be that lints often can be ignored/misunderstood and globally disabled, even if they would be useful</p>",
        "id": 235370577,
        "sender_full_name": "lcnr",
        "timestamp": 1618934947
    },
    {
        "content": "<p>i don't know how strong that argument actually is</p>",
        "id": 235370636,
        "sender_full_name": "lcnr",
        "timestamp": 1618934968
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-04-20/near/235370498\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-04-20/near/235370391\">said</a>:</p>\n<blockquote>\n<p>Right. If we auto-bubble, that makes body changes a breaking change though i think?</p>\n</blockquote>\n<p>it does, I agree that's part of the equation. Of course, they already are, at least if they affect the return value.</p>\n</blockquote>\n<p>You mean if it affects the type of the return value? Users are already familiar with changing types in signatures being breaking changes; also having body changes being breaking is something new to deal with.</p>",
        "id": 235370710,
        "sender_full_name": "varkor",
        "timestamp": 1618935002
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-04-20/near/235370416\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> regarding stories, maybe we can actually spin up a vision doc? I'd use the same characters, yes, but I don't think that's the high-order bit here.</p>\n</blockquote>\n<p>^^ never wrote anything like that, do you have any references?</p>",
        "id": 235370836,
        "sender_full_name": "lcnr",
        "timestamp": 1618935043
    },
    {
        "content": "<p>I mean if you change the algorithm without changing the behaviour. If that changed the constants being evaluated, you got a breaking change</p>",
        "id": 235370876,
        "sender_full_name": "oli",
        "timestamp": 1618935064
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> I'd be happy to spend an hour with you getting it started</p>",
        "id": 235370903,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618935074
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-04-20/near/235370876\">said</a>:</p>\n<blockquote>\n<p>I mean if you change the algorithm without changing the behaviour. If that changed the constants being evaluated, you got a breaking change</p>\n</blockquote>\n<p>yes -- but this is true today is my point</p>",
        "id": 235370933,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618935086
    },
    {
        "content": "<p>at runtime, no less</p>",
        "id": 235370948,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618935093
    },
    {
        "content": "<p>compare;</p>",
        "id": 235370994,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618935111
    },
    {
        "content": "<p>Right...</p>",
        "id": 235371006,
        "sender_full_name": "oli",
        "timestamp": 1618935118
    },
    {
        "content": "<p>(copying from <a href=\"https://ai.googleblog.com/2006/06/extra-extra-read-all-about-it-nearly.html\">this blogpost</a>)</p>",
        "id": 235371038,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618935124
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u32</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">binary_search</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">key</span>: <span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">low</span><span class=\"w\"> </span><span class=\"o\">&lt;=</span><span class=\"w\"> </span><span class=\"n\">high</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">mid</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">low</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">high</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 235371177,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618935164
    },
    {
        "content": "<p>vs</p>",
        "id": 235371190,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618935170
    },
    {
        "content": "<p>One more data point: const evaluatabe checked is exactly what the typenum crate requires. Because types are actually checked for trait bounds and stuff</p>",
        "id": 235371197,
        "sender_full_name": "oli",
        "timestamp": 1618935173
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">mid</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">low</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"p\">((</span><span class=\"n\">high</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">low</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 235371204,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618935175
    },
    {
        "content": "<p>equivalent, but not equivalent</p>",
        "id": 235371219,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618935182
    },
    {
        "content": "<p>well, ok, because <code>usize</code> maybe not</p>",
        "id": 235371266,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618935203
    },
    {
        "content": "<p>If we do some sort of auto inference of const bounds, then that diverges from what we do in types and trait bounds</p>",
        "id": 235371369,
        "sender_full_name": "oli",
        "timestamp": 1618935244
    },
    {
        "content": "<p>but anyway you get the point :)</p>",
        "id": 235371384,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618935244
    },
    {
        "content": "<p>I do</p>",
        "id": 235371411,
        "sender_full_name": "oli",
        "timestamp": 1618935249
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/260443-project-const-generics/topic/meeting.202021-04-20/near/235371369\">said</a>:</p>\n<blockquote>\n<p>If we do some sort of auto inference of const bounds, then that diverges from what we do in types and trait bounds</p>\n</blockquote>\n<p>I definitely think we should try to be consistent -- implied bounds has a role here</p>",
        "id": 235371551,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618935309
    },
    {
        "content": "<p>An approach between the two extremes could be to require explicit bounds on the original function, but also have implied bounds for const parameters. Then changing the body doesn't unexpectedly change the type, but it avoids always having to manually annotate bounds throughout the call stack.<br>\n(I'm not sure whether this would be an improvement in practice or not.)</p>",
        "id": 235371886,
        "sender_full_name": "varkor",
        "timestamp": 1618935435
    },
    {
        "content": "<p>I think my overall feeling is that Rust is used for a great many things. I'm casting about for ways that we can give a \"gradual, controllable\" balance between verbosity and correctness. I'm interested in FV and other tools for this reason. It seems to apply here, too.</p>",
        "id": 235371889,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618935436
    },
    {
        "content": "<p>what is \"FV\"?</p>",
        "id": 235371928,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1618935454
    },
    {
        "content": "<p>(formal verification)</p>",
        "id": 235371943,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618935459
    },
    {
        "content": "<p>ah thank you</p>",
        "id": 235371954,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1618935463
    },
    {
        "content": "<p>Anyway, I do think it's time for us to start talking about what the end-user state of const generics is going to look and feel like-- <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> maybe we could use next week's meeting to work on that?</p>",
        "id": 235372063,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618935499
    },
    {
        "content": "<p>I suspect it'll be hard for me to squeeze an hour this week, though not impossible</p>",
        "id": 235372104,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618935517
    },
    {
        "content": "<p>using next weeks meeting seems fine, though I also still need your time to talk about making <code>Sized</code> coinductive ^^</p>",
        "id": 235372217,
        "sender_full_name": "lcnr",
        "timestamp": 1618935563
    },
    {
        "content": "<p>(the <code>Sized</code> thing doesn't really have any time constraints though)</p>",
        "id": 235372264,
        "sender_full_name": "lcnr",
        "timestamp": 1618935585
    },
    {
        "content": "<p>we could use some of the \"wg-traits office hours\" to discuss that perhaps</p>",
        "id": 235372279,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618935592
    },
    {
        "content": "<p>sure, i should be available for these slots</p>",
        "id": 235372869,
        "sender_full_name": "lcnr",
        "timestamp": 1618935817
    },
    {
        "content": "<p>so yeah, let's talk a bit more about our goals for const generics in the next meetings</p>",
        "id": 235372976,
        "sender_full_name": "lcnr",
        "timestamp": 1618935857
    },
    {
        "content": "<p>from a private chat with <span class=\"user-mention silent\" data-user-id=\"326176\">Boxy</span> with their permission:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">split_first</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">arr</span>: <span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">])</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">assume</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"cm\">/* .. */</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">split_first</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">arr</span>: <span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">])</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">evaluates</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"cm\">/* .. */</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>so both opt out and opt in is explicit, this does seem quite nice to me tbh and is an alternative i didn't consider yet</p>",
        "id": 235389010,
        "sender_full_name": "lcnr",
        "timestamp": 1618942235
    },
    {
        "content": "<p>i do think that if we get good enough error messages using a lint might be good enough, but i don't want to do that without some significant improvements on these errors</p>",
        "id": 235389225,
        "sender_full_name": "lcnr",
        "timestamp": 1618942325
    },
    {
        "content": "<p>I have an idea for how to create a backtrace for post monomorphization errors. It's not great, but better than the status quo: in the monomorphization collector, we already have that stack available, we just can't feed it into any queries or whatever is producing errors. So we wrap all possibly erroring calls with something that checks the error count before and after the call. If the count went up, print the stack mentioning that the last error occurred at this monomorphization stack. To reduce the noise, only do that if the current item is generic</p>",
        "id": 235394316,
        "sender_full_name": "oli",
        "timestamp": 1618944262
    },
    {
        "content": "<p>It's pretty low effort to implement that, gives immediate gains and isn't worse than the current situation</p>",
        "id": 235394387,
        "sender_full_name": "oli",
        "timestamp": 1618944295
    }
]