[
    {
        "content": "<p>I want to bring back the discussion about modifying the <code>Alloc</code> trait.</p>\n<p>In <a href=\"https://github.com/rust-lang/rust/pull/58457\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/58457\">#58457</a> there were several suggestions, on how to change/improve the <code>Alloc</code> trait:</p>\n<ul>\n<li>A separate <code>Dealloc</code> trait: Most of the collections (incl. <code>Box</code>, <code>Rc</code>, etc.) does not need all methods from <code>Alloc</code> in order to work, only <code>dealloc</code> is needed for implementing <code>Drop</code>. Other suggestions like <code>trait GetDealloc</code> where also proposed.</li>\n<li><span class=\"user-mention\" data-user-id=\"219747\">@Simon Sapin</span> proposed to add <code>Handle</code> to the trait names to show that they are typically implemented for a reference or smart pointer or ZST: <a href=\"https://github.com/rust-lang/rust/pull/58457#issuecomment-472479293\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/58457#issuecomment-472479293\">#58457 (comment)</a></li>\n<li><span class=\"user-mention\" data-user-id=\"219283\">@Scott J Maddox</span> brought <code>AllocFrom</code> into scope: <a href=\"https://github.com/rust-lang/rust/pull/58457#issuecomment-475089881\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/58457#issuecomment-475089881\">#58457 (comment)</a></li>\n<li>As I just noticed, associating an error type is still a thing (<a href=\"#narrow/stream/197181-t-libs.2Fwg-allocators/topic/Collections.20beyond.20box.2C.20allocation.20fallibility/near/164811285\" title=\"#narrow/stream/197181-t-libs.2Fwg-allocators/topic/Collections.20beyond.20box.2C.20allocation.20fallibility/near/164811285\">Collections beyond box, allocation fallibility</a>)</li>\n</ul>",
        "id": 164814954,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1556905854
    },
    {
        "content": "<p>It’d be good to carefully go through past discussions (there are some in internals.rlo too) and file specific issues in the new repo about everything that is not resolved or implemented yet. <span class=\"user-mention\" data-user-id=\"216785\">@Tim Diekmann</span>, would you like to do that?</p>",
        "id": 164816488,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1556906919
    },
    {
        "content": "<p>Yup, I'll do that. Just to make sure I understood you right: <em>not resolved</em> means things like mentioned above and <em>not implemented</em> means things like <code>Vec&lt;T, A&gt;</code>, <code>hashbrown::HashMap&lt;T, A&gt;</code>, <code>Box&lt;T, A&gt;</code> etc.?</p>",
        "id": 164816720,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1556907111
    },
    {
        "content": "<p>It’s a bit fuzzy, but in my mind “not resolved” means that a change was proposed but no consensus was reached (either because of disagreement or because the discussion just died off). “Not implemented” is when there’s consensus of yes we should totally do X, but no one made the PR</p>",
        "id": 164817344,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1556907523
    },
    {
        "content": "<p>Alright. I'll start with a list of structs, which are the goal of this WG. Then I'll search through the dozens of topics on github and internals.rlo for suggestions, discussions etc. and make different issues where needed.</p>",
        "id": 164817945,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1556907885
    },
    {
        "content": "<p>List of what structs?</p>",
        "id": 164818129,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1556908025
    },
    {
        "content": "<p>This so far:</p>\n<ul>\n<li>[ ] <code>Box&lt;T, A&gt;</code> (current PR: <a href=\"https://github.com/rust-lang/rust/pull/58457\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/58457\">https://github.com/rust-lang/rust/pull/58457</a>)</li>\n<li>[ ] <code>Rc&lt;T, A&gt;</code></li>\n<li>[ ] <code>Arc&lt;T, A&gt;</code></li>\n<li>[ ] <code>String&lt;A&gt;</code></li>\n<li>[ ] <code>Vec&lt;T, A&gt;</code></li>\n<li>[ ] <code>VecDeque&lt;T, A&gt;</code></li>\n<li>[ ] <code>LinkedList&lt;T, A&gt;</code></li>\n<li>[ ] <code>HashMap&lt;K, V, S, A&gt;</code> (implement in <a href=\"https://github.com/Amanieu/hashbrown\" target=\"_blank\" title=\"https://github.com/Amanieu/hashbrown\">hashbrown crate</a>?)</li>\n<li>[ ] <code>BTreeMap&lt;K, V, A&gt;</code></li>\n<li>[ ] <code>HashSet&lt;T, S, A&gt;</code></li>\n<li>[ ] <code>BTreeSet&lt;T, A&gt;</code></li>\n<li>[ ] <code>BinaryHeap&lt;T, A&gt;</code></li>\n</ul>",
        "id": 164818187,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1556908074
    },
    {
        "content": "<p>ah, that should gain an allocator parameter</p>",
        "id": 164818652,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1556908375
    },
    {
        "content": "<p>Yeah, thanks <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 164818694,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1556908419
    },
    {
        "content": "<p>hashbrown will be an “interesting” case, since the <a href=\"http://crates.io\" target=\"_blank\" title=\"http://crates.io\">crates.io</a> copy supports stable</p>",
        "id": 164818729,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1556908442
    },
    {
        "content": "<p>Yup, I also thought this. But currently this is out of scope I guess.</p>",
        "id": 164818843,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1556908522
    },
    {
        "content": "<p>Once more of the pieces are in place we can see what approach Amanieu wants to take</p>",
        "id": 164818981,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1556908630
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219747\">@Simon Sapin</span> You may want to add some Labels to the repository? Especially for suggestions, discussions and tracking issues this would make sense.</p>",
        "id": 164819591,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1556909122
    },
    {
        "content": "<p>Oh, I cannot assign labels anyway <span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span></p>",
        "id": 164819614,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1556909160
    },
    {
        "content": "<p>I’m not sure what the labels should be</p>",
        "id": 164820698,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1556910003
    },
    {
        "content": "<p>You should have an invite for the repo</p>",
        "id": 164820747,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1556910010
    },
    {
        "content": "<p>Thanks, I'll put in some love soon</p>",
        "id": 164822497,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1556911350
    },
    {
        "content": "<blockquote>\n<ul>\n<li><span class=\"user-mention silent\" data-user-id=\"219283\">Scott J Maddox</span> brought <code>AllocFrom</code> into scope: [#58457 (comment)](<a href=\"https://github.com/rust-lang/rust/pull/58457#issuecomment-475089881\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/58457#issuecomment-475089881\">https://github.com/rust-lang/rust/pull/58457#issuecomment-475089881</a></li>\n</ul>\n</blockquote>\n<p>There's also <a href=\"https://github.com/rust-lang/rust/pull/58457#issuecomment-482816662\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/58457#issuecomment-482816662\">this comment</a> which gives some more context and a more complete example. I really hope this use case is not forgotten. There are many custom allocators that depend on this kind of behavior (i.e. finding the allocator state from allocated pointer addresses).</p>\n<p>As for <code>Dealloc</code>, it would complicate the <code>Box</code> and <code>Vec</code> implementations a bit (separating each function based on if it needs access to <code>Dealloc</code> or <code>Dealloc+Alloc</code>), but it might be worth it to eke out the last bit of performance for specialized allocators. If deallocation is a no-op, for example, you want the compiler to throw away all code to access the Alloc instance; it might have trouble doing that in some cases, though, but it might be made easier if it's only <code>Dealloc</code>. I don't know, though. It's just speculation.</p>",
        "id": 164837530,
        "sender_full_name": "Scott J Maddox",
        "timestamp": 1556924869
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219283\">@Scott J Maddox</span>  I'm currently on tracking the open discussions at github. If you don't mind you may file an issue at <a href=\"https://github.com/rust-lang/wg-allocators\" target=\"_blank\" title=\"https://github.com/rust-lang/wg-allocators\">https://github.com/rust-lang/wg-allocators</a>?</p>",
        "id": 164837713,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1556925013
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219283\">@Scott J Maddox</span> the link doesn't work</p>",
        "id": 164837747,
        "sender_full_name": "Mike Hommey",
        "timestamp": 1556925076
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/wg-allocators/issues/9\" target=\"_blank\" title=\"https://github.com/rust-lang/wg-allocators/issues/9\">https://github.com/rust-lang/wg-allocators/issues/9</a> is related, presumably</p>",
        "id": 164837757,
        "sender_full_name": "Mike Hommey",
        "timestamp": 1556925106
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"219283\">Scott J Maddox</span> the link doesn't work</p>\n</blockquote>\n<p>Hmm... That's odd. It works for me..</p>",
        "id": 164837762,
        "sender_full_name": "Scott J Maddox",
        "timestamp": 1556925115
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/58457#issuecomment-475089881\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/58457#issuecomment-475089881\">https://github.com/rust-lang/rust/pull/58457#issuecomment-475089881</a></p>",
        "id": 164837810,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1556925139
    },
    {
        "content": "<p>Oh, you mean the quoted one. I'll fix it.</p>",
        "id": 164837816,
        "sender_full_name": "Scott J Maddox",
        "timestamp": 1556925147
    },
    {
        "content": "<p>Zulip added \"quote\" ;)</p>",
        "id": 164837819,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1556925155
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"219283\">Scott J Maddox</span>  I'm currently on tracking the open discussions at github. If you don't mind you may file an issue at <a href=\"https://github.com/rust-lang/wg-allocators\" target=\"_blank\" title=\"https://github.com/rust-lang/wg-allocators\">https://github.com/rust-lang/wg-allocators</a>?</p>\n</blockquote>\n<p>Opened <a href=\"https://github.com/rust-lang/wg-allocators/issues/12\" target=\"_blank\" title=\"https://github.com/rust-lang/wg-allocators/issues/12\">https://github.com/rust-lang/wg-allocators/issues/12</a></p>",
        "id": 164840829,
        "sender_full_name": "Scott J Maddox",
        "timestamp": 1556929068
    },
    {
        "content": "<p>Thanks for filing this. Also thanks for the link to the example, now I really understand why you came up with this approach. We may need to bikeshed about the name, but this is another story. <code>BuildAlloc</code> would be analogous to <code>BuildHasher</code> for example.</p>",
        "id": 164841036,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1556929419
    }
]