[
    {
        "content": "<p>Hmm, so, I have two concerns after taking some initial work making allocation-fallible APIs for <code>Vec</code>:</p>\n<ul>\n<li>The awesome <code>splice</code> API gets rather complicated because it finalizes splicing operations once the return value of <code>splice</code> (a <code>Splice</code> struct) gets <code>drop</code>ped. <code>Drop</code> isn't changing any time soon, so there needs to be something separate for finalization. Perhaps the best solution is to panic when a finalization wasn't attempted before <code>Drop</code>? @Simon Sapin, I want to hear what you think about this too.</li>\n</ul>",
        "id": 179651941,
        "sender_full_name": "Erich Gubler",
        "timestamp": 1572633233
    },
    {
        "content": "<ul>\n<li>There are some places I've noticed where naively converting the old implementation over to simply use the fallible API and otherwise reuse the bodies of the infallible versions might result in some problems with invariants not being maintained. Not a hard problem, but needs some good eyes in review. :)</li>\n</ul>",
        "id": 179657301,
        "sender_full_name": "Erich Gubler",
        "timestamp": 1572636742
    },
    {
        "content": "<p>Two good points, I'll take a look :)</p>",
        "id": 179665926,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1572642512
    },
    {
        "content": "<p>Regarding your first Dot, do you have problems implementing <code>Drop</code> on <code>Splice</code> itself? Do you have a code sample pushed anywhere?</p>",
        "id": 179749411,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1572791132
    },
    {
        "content": "<p>Oops, only seeing this now. Using a space a good way to spell my full name but not to @mention my username :)<br>\nA few thoughts:</p>",
        "id": 182123467,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1574960543
    },
    {
        "content": "<ul>\n<li>Fallible API are not tied to allocator-generic contains, so I’m not sure they’re in scope for this WG. Feel free to file issues on rust-lang/rust for standard library API discussion, or RFCs if there’s a lot non-trivial design involved</li>\n<li>I’m not sure how much appetite there is to basically double the API surface for standard library containers. It’s hard enough to make progress on just <code>try_reserve</code>. Just because an infallible API exists doesn’t mean a corresponding fallible API should be added, especially if it’s a convenience thing that can be achieved with a sequence of calls to other APIs</li>\n<li>For things that <em>are</em> added, I’m not surprised that complex cases require more surface changes than just returning <code>Result</code>. <code>Drop</code> could be just one case of this</li>\n</ul>",
        "id": 182123905,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1574960983
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220097\">@Erich Gubler</span></p>",
        "id": 182123974,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1574961025
    }
]