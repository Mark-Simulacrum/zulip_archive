[
    {
        "content": "<p>Linus's response in <a href=\"https://lore.kernel.org/lkml/CAHk-=wh_sNLoz84AUUzuqXEsYH35u=8HV3vK-jbRbJ_B-JjGrg@mail.gmail.com/\">https://lore.kernel.org/lkml/CAHk-=wh_sNLoz84AUUzuqXEsYH35u=8HV3vK-jbRbJ_B-JjGrg@mail.gmail.com/</a> I can't say surprises me. I would love to have a cargo feature to get rid of anything related to panicking in <code>alloc</code> to definitively put this to rest without breaking comparability with the rest of the ecosystem completely.</p>",
        "id": 234596641,
        "sender_full_name": "John Ericson",
        "timestamp": 1618445521
    },
    {
        "content": "<p>I have PR for this <a href=\"https://github.com/rust-lang/rust/pull/84266\">https://github.com/rust-lang/rust/pull/84266</a> . It seems to build OK except for a mysterious usage of <code>exchange_malloc</code>.</p>",
        "id": 234954929,
        "sender_full_name": "John Ericson",
        "timestamp": 1618629249
    },
    {
        "content": "<p>I also made a WG issue with <a href=\"https://github.com/rust-lang/wg-allocators/issues/87\">https://github.com/rust-lang/wg-allocators/issues/87</a></p>",
        "id": 234956470,
        "sender_full_name": "John Ericson",
        "timestamp": 1618631015
    },
    {
        "content": "<p><a href=\"#narrow/stream/219381-t-libs/topic/alloc.20non-global-oom.20support\">https://rust-lang.zulipchat.com/#narrow/stream/219381-t-libs/topic/alloc.20non-global-oom.20support</a> effectively supercedes this.</p>",
        "id": 235733588,
        "sender_full_name": "John Ericson",
        "timestamp": 1619119327
    },
    {
        "content": "<blockquote>\n<p>For this first iteration, non-flat collections are outright disabled. <code>Vec</code> and <code>String</code> don't yet have <code>try_*</code> allocation methods, but are kept anyways since they can be oom-safely created \"from parts\", and we hope to add those <code>try_</code> methods in the future.</p>\n</blockquote>\n<p>Is there a specific reason, why they are not added besides \"no one did it\"?</p>",
        "id": 240021873,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1621845585
    },
    {
        "content": "<p>Also, in case you unsubscribe from merged PRs, is there a specific reason, why <code>Arc::new</code> and <code>Rc::new</code> were not gated? They internally use the <code>box</code> syntax and occured in <a href=\"https://github.com/rust-lang/rust/issues/84338\">#84338</a>. I'd just add those gates there. This also implies adding gates to <code>(A)Rc::{pin, default}</code> as they are using <code>new</code> internally.</p>",
        "id": 240022198,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1621845807
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216785\">@Tim Diekmann</span> Sorry, had the notification just missed it. That was indeed an oversight on my part.</p>",
        "id": 242293508,
        "sender_full_name": "John Ericson",
        "timestamp": 1623377482
    }
]