[
    {
        "content": "<p>I was watching a video about allocators being built by composing other allocators (one with a strategy for big allocs, one with a strategy for small allocs, etc), and to do this and to also have freeing be supported you need to have a method for asking an allocator if it owns a pointer or not.</p>\n<p>Any plans for something like this on the drawing board? <code>TimDiekmann/alloc-wg</code> didn't appear to have such a thing in the <code>AllocRef</code> of master, but I know that ideas can get scattered around sometimes.</p>",
        "id": 197331480,
        "sender_full_name": "Lokathor",
        "timestamp": 1589314221
    },
    {
        "content": "<p>This would be very difficult for some allocators (particularily ones using libc::malloc, or a kernel-space allocator).</p>",
        "id": 197342005,
        "sender_full_name": "Connor Horman",
        "timestamp": 1589318837
    },
    {
        "content": "<p>The talk was probably <a href=\"https://www.youtube.com/watch?v=LIb3L4vKZ7U\"><code>std::allocator</code> Is to Allocation what <code>std::vector</code> Is to Vexation</a>? An <code>owns</code> methods was already rejected, as it's not implementable for all allocs. You may want to take a look at the <a href=\"https://crates.io/crates/alloc-compose\"><code>alloc-compose</code></a> crate.</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"LIb3L4vKZ7U\" href=\"https://www.youtube.com/watch?v=LIb3L4vKZ7U\"><img src=\"https://i.ytimg.com/vi/LIb3L4vKZ7U/default.jpg\"></a></div>",
        "id": 197345242,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1589320665
    },
    {
        "content": "<p>I have not yet announced the crate as wanted to experiment around a bit more. Recently I have added an extensive test suite.</p>",
        "id": 197345462,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1589320783
    },
    {
        "content": "<p>The <code>alloc-wg</code> crate is currently more or less even with the upstream liballoc, except the containers.</p>",
        "id": 197345669,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1589320877
    },
    {
        "content": "<p>You might want to take a look at <a href=\"https://github.com/rust-lang/wg-allocators/issues/52\">rust-lang/wg-allocators#52</a>, <a href=\"https://github.com/rust-lang/rust/issues/44302\">rust-lang/rust#44302</a>, and <a href=\"https://github.com/rust-lang/rust/issues/49668\">rust-lang/rust#49668</a>.</p>",
        "id": 197345994,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1589321056
    },
    {
        "content": "<p><strong>TL;DR</strong></p>\n<blockquote>\n<p>Not to be required by this trait since glibc and Windows do not support this.</p>\n</blockquote>",
        "id": 197346206,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1589321165
    },
    {
        "content": "<p>This discussion also came up two months ago: <a href=\"#narrow/stream/197181-t-libs.2Fwg-allocators/topic/Next.20steps.3F/near/191402013\">https://rust-lang.zulipchat.com/#narrow/stream/197181-t-libs.2Fwg-allocators/topic/Next.20steps.3F/near/191402013</a></p>",
        "id": 197347084,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1589321738
    }
]