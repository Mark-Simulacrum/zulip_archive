[
    {
        "content": "<p>Hello, i've got a question: What will it take to make Box&lt;T, A&gt;::new a const fn?</p>",
        "id": 165420000,
        "sender_full_name": "Charles Lew",
        "timestamp": 1557594223
    },
    {
        "content": "<p>That would probably require at the very least <code>const fn</code> trait methods and a separate <code>AllocConst: Alloc</code>, <code>AllocConst::alloc</code>, and <code>Box::new_cost</code></p>",
        "id": 165543742,
        "sender_full_name": "John Ericson",
        "timestamp": 1557764434
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116458\">@Charles Lew</span> you can't</p>",
        "id": 165629668,
        "sender_full_name": "gnzlbg",
        "timestamp": 1557846012
    },
    {
        "content": "<p>you need a new method, e.g., </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A</span>: <span class=\"nc\">const</span><span class=\"w\"> </span><span class=\"n\">Alloc</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">const_new</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>at least with <a href=\"https://github.com/rust-rfcs/const-eval/pull/8\" target=\"_blank\" title=\"https://github.com/rust-rfcs/const-eval/pull/8\">https://github.com/rust-rfcs/const-eval/pull/8</a></p>",
        "id": 165629752,
        "sender_full_name": "gnzlbg",
        "timestamp": 1557846085
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> ^^^</p>",
        "id": 165629769,
        "sender_full_name": "gnzlbg",
        "timestamp": 1557846097
    },
    {
        "content": "<p>In</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A</span>: <span class=\"nc\">Alloc</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"k\">fn</span> <span class=\"nf\">new</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p><code>A</code> might be any type that implements <code>Alloc</code>, independently of whether the impl of <code>Alloc</code> for <code>A</code> is <code>const</code> or not.</p>",
        "id": 165629875,
        "sender_full_name": "gnzlbg",
        "timestamp": 1557846178
    },
    {
        "content": "<p>To allow <code>new</code> to be <code>const fn</code> only when <code>A: const Alloc</code> we would need some form of negative reasoning, such that  these two impls do not overlap:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A</span>: <span class=\"nc\">Alloc</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">Alloc</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">new</span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"n\">non</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"p\">...;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A</span>: <span class=\"nc\">const</span><span class=\"w\"> </span><span class=\"n\">Alloc</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">new</span><span class=\"p\">...;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>I don't think this feature is being pursued anywhere.</p>",
        "id": 165630029,
        "sender_full_name": "gnzlbg",
        "timestamp": 1557846291
    },
    {
        "content": "<p>ok. Well i guess maybe people will want const fn Box::new() with system allocator at some point... so, with the ability to specify an  extra allocator (handle), will we lose it (maybe permanently)?</p>",
        "id": 165634123,
        "sender_full_name": "Charles Lew",
        "timestamp": 1557849237
    },
    {
        "content": "<p>with <a href=\"https://github.com/rust-lang/rfcs/pull/2632\" target=\"_blank\" title=\"https://github.com/rust-lang/rfcs/pull/2632\">https://github.com/rust-lang/rfcs/pull/2632</a></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A</span>: <span class=\"nc\">Alloc</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">new</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 165634634,
        "sender_full_name": "oli",
        "timestamp": 1557849493
    },
    {
        "content": "<p>should work, because <code>const fn new</code> will require <code>A: const Alloc</code> if and only if called from a const context</p>",
        "id": 165634718,
        "sender_full_name": "oli",
        "timestamp": 1557849557
    },
    {
        "content": "<p>there is no <code>const Alloc</code> syntax for bounds</p>",
        "id": 165634740,
        "sender_full_name": "oli",
        "timestamp": 1557849571
    },
    {
        "content": "<p>if you want to opt-out of the <code>const Alloc</code> requirement even in const contexts, you need to use <code>A: ?const Alloc</code></p>",
        "id": 165634769,
        "sender_full_name": "oli",
        "timestamp": 1557849596
    },
    {
        "content": "<p>an <code>Alloc</code> provided that allocates in <code>.data</code> (thus... provided by the compiler itself) could be useful for this.</p>",
        "id": 165670042,
        "sender_full_name": "Mike Hommey",
        "timestamp": 1557874636
    }
]