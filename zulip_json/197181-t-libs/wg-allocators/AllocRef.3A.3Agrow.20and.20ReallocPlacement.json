[
    {
        "content": "<p>Hi, it looks like in nightly AllocRef::grow no longer takes a ReallocPlacement argument, is there a way to replicate this functionality?  For my use case,  it's ok for me to copy and extend my data, but I can't immediately move it (I'm creating a multi-writer append-only data structure that may have outstanding references).  Given the new interface, my assumption was that AllocRef::grow would error if it couldn't be done in place and then I could call AllocRef::alloc but that doesn't appear to be the case. As of now, it looks like I will always have to call AllocRef::alloc and can never extend my existing allocations.</p>",
        "id": 212451662,
        "sender_full_name": "Joshua Chartier",
        "timestamp": 1602001284
    },
    {
        "content": "<p>No allocators currently support in-place reallocation anyways, that's why it was removed.</p>",
        "id": 212495194,
        "sender_full_name": "Amanieu",
        "timestamp": 1602024211
    },
    {
        "content": "<p>You'll just have to never reallocate, that's what C++ does for types with move constructors.</p>",
        "id": 212495212,
        "sender_full_name": "Amanieu",
        "timestamp": 1602024239
    },
    {
        "content": "<p>Gotcha. That makes total sense. No reallocate it is.</p>",
        "id": 212560281,
        "sender_full_name": "Joshua Chartier",
        "timestamp": 1602078365
    },
    {
        "content": "<blockquote>\n<p>No allocators currently support in-place reallocation anyways, that's why it was removed.</p>\n</blockquote>\n<p>mimalloc has a in-place-only reallocation API, FWIW: (mi_expand returns null if it cant happen in-place) <a href=\"https://microsoft.github.io/mimalloc/group__malloc.html#gaaee66a1d483c3e28f585525fb96707e4\">https://microsoft.github.io/mimalloc/group__malloc.html#gaaee66a1d483c3e28f585525fb96707e4</a></p>",
        "id": 214509918,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1603657165
    },
    {
        "content": "<p>What is the actual use case for that though?</p>",
        "id": 214510657,
        "sender_full_name": "Amanieu",
        "timestamp": 1603658096
    },
    {
        "content": "<p>Oh, I think it makes a lot more sense for C++ where move requires extra work. I don't think there's a lot of use case for Rust.</p>",
        "id": 214511207,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1603658745
    },
    {
        "content": "<p>Mimalloc's impl also just checks if the requested size is the same as the \"true\" size, and if so returns it. AllocRef handles the \"true\" size of the allocation more explicitly, so there's really no use for this in it.</p>",
        "id": 214526807,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1603679654
    }
]