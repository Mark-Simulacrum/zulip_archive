[
    {
        "content": "<p>Hey all!</p>\n<p>First of all, I'd like to say that I'm really excited about the fact that there's a working group exploring how custom allocator support could be extended for Rust!</p>\n<p>After giving the <code>#[global_allocator]</code> concept a try, I was wondering if there was also the idea of having crate wide allocators; so having something in-between fully global or per container.</p>\n<p>As I'm working with real-time audio it'd be nice being able to scope custom allocators at a crate level since constraints around allocations are consistent within those crates.</p>\n<p>On that note, if there's interest or even ongoing process in that area, I'm happy to help!</p>",
        "id": 176363901,
        "sender_full_name": "Alexander Droste",
        "timestamp": 1569242211
    },
    {
        "content": "<p>I'm not sure how crate-wide allocators should or even could work.</p>",
        "id": 176384669,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569255979
    },
    {
        "content": "<p>You can allocate something in a crate, and deallocate it on a different crate</p>",
        "id": 176384682,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569255990
    },
    {
        "content": "<p>Yet which crate allocated an object is not stored anywhere</p>",
        "id": 176384706,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569256009
    },
    {
        "content": "<p>e.g. <code>pub fn foo() -&gt; Vec&lt;i32&gt;;</code> which can be called from other crates, the <code>Vec&lt;i32&gt;</code> type does not say which crate allocated the <code>Vec</code>, so... how would they know which allocator to use to free it ?</p>",
        "id": 176384751,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569256050
    },
    {
        "content": "<p>Thanks for giving this some thought. And yeah, makes sense.  I guess, I was thinking about it in terms of combining distinct static libs (<code>.a</code>), assuming it would work having separate allocators in that scenario.</p>",
        "id": 176544516,
        "sender_full_name": "Alexander Droste",
        "timestamp": 1569400747
    },
    {
        "content": "<p>With custom allocators, you can just use <code>type MyBox&lt;T&gt; = Box&lt;T, MyAlloc&gt;;</code> in your crate.</p>",
        "id": 176558508,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569414233
    },
    {
        "content": "<p>That makes the allocator part of the type and your types know how to deallocate themselves</p>",
        "id": 176558588,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569414277
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 176558619,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569414327
    },
    {
        "content": "<p>That's great! But looking at the issues from the <code>wg-allocators</code> repo, there's no way yet to use custom allocators for <code>Box</code> or containers from <code>std::collection</code>, right?</p>",
        "id": 176684481,
        "sender_full_name": "Alexander Droste",
        "timestamp": 1569523029
    },
    {
        "content": "<p>Not yet, I believe we're waiting on stability attributes for type parameters atm</p>",
        "id": 176761386,
        "sender_full_name": "Sydney Acksman",
        "timestamp": 1569601397
    },
    {
        "content": "<p>I see, thanks for clarifying.</p>",
        "id": 176770749,
        "sender_full_name": "Alexander Droste",
        "timestamp": 1569607766
    },
    {
        "content": "<blockquote>\n<p>Not yet, I believe we're waiting on stability attributes for type parameters atm</p>\n</blockquote>\n<p>Can confirm, this is the first step we have to take before landing anything upstream.<br>\nThis is the issue in the WG repo: <a href=\"https://github.com/rust-lang/wg-allocators/issues/2\" target=\"_blank\" title=\"https://github.com/rust-lang/wg-allocators/issues/2\">https://github.com/rust-lang/wg-allocators/issues/2</a><br>\nAnd the WIP PR: <a href=\"https://github.com/rust-lang/rust/pull/65083\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/65083\">https://github.com/rust-lang/rust/pull/65083</a></p>",
        "id": 177431641,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1570310149
    }
]