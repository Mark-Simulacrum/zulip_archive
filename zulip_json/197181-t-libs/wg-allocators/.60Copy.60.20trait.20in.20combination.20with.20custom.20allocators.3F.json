[
    {
        "content": "<p>IIUC, <code>Copy</code>'s semantics are that <code>Clone::clone</code> can be automagically called to produce owned values when they would normally be consumed. I can't see why a sane person would mark something that would require a custom allocator as <code>Copy</code>, but has the interaction been discussed yet?</p>",
        "id": 178316731,
        "sender_full_name": "Erich Gubler",
        "timestamp": 1571251052
    },
    {
        "content": "<p>EDIT: fixed botched initial content. :P</p>",
        "id": 178316919,
        "sender_full_name": "Erich Gubler",
        "timestamp": 1571251170
    },
    {
        "content": "<p>I don't see why this should be a problem. Could you elaborate, where this will be an issue?</p>",
        "id": 178317759,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1571251695
    },
    {
        "content": "<p>I don't see a problem, per se. I just realized that it might be surprising to have implicit usage of a given allocator. For instance, if one used <code>Copy</code> for elements using a bump allocator it might exhaust resources faster than expected.</p>",
        "id": 178318473,
        "sender_full_name": "Erich Gubler",
        "timestamp": 1571252215
    },
    {
        "content": "<p>I honestly don't think anyone should be combining the two or that it would be a good idea in the first place, but I was also surprised to discover the suggestion <a href=\"https://doc.rust-lang.org/std/marker/trait.Copy.html#when-should-my-type-be-copy\" target=\"_blank\" title=\"https://doc.rust-lang.org/std/marker/trait.Copy.html#when-should-my-type-be-copy\">in <code>std</code> docs</a>:</p>\n<blockquote>\n<h2><a href=\"https://doc.rust-lang.org/std/marker/trait.Copy.html#when-should-my-type-be-copy\" target=\"_blank\" title=\"https://doc.rust-lang.org/std/marker/trait.Copy.html#when-should-my-type-be-copy\">When *should* my type be <code>Copy</code>?</a></h2>\n<p>Generally speaking, if your type <em>can</em> implement <code>Copy</code>, it should. Keep in mind, though, that implementing <code>Copy</code> is part of the public API of your type. If the type might become non-<code>Copy</code> in the future, it could be prudent to omit the <code>Copy</code> implementation now, to avoid a breaking API change.</p>\n</blockquote>",
        "id": 178318630,
        "sender_full_name": "Erich Gubler",
        "timestamp": 1571252321
    },
    {
        "content": "<p>I think most people are of the opinion that they shouldn't use <code>Copy</code> for data structures that allocate. This is just some mildly interesting paranoia on my part, I think.</p>",
        "id": 178318787,
        "sender_full_name": "Erich Gubler",
        "timestamp": 1571252415
    },
    {
        "content": "<blockquote>\n<p>I think most people know that they shouldn't <code>Copy</code> things that allocate.</p>\n</blockquote>\n<p>I share your thoughts. I think we don't have to care about that use case.</p>",
        "id": 178319002,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1571252630
    },
    {
        "content": "<p>As for what the interaction would be, let me just check my understanding. If a type is <code>Copy</code>, then generally it would be expected to use the same allocator under the hood since the approach for parameterizing allocators locally will always be via type, right?</p>",
        "id": 178319131,
        "sender_full_name": "Erich Gubler",
        "timestamp": 1571252704
    },
    {
        "content": "<p>I think unless we are introduce a trait <code>CloneIn</code> this would also hold for any clonable object.</p>",
        "id": 178319278,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1571252811
    },
    {
        "content": "<p>Okay. I think that this conversation can be closed, then. :) I'm considering recording it in Github as a (closed) issue, but I don't know if anybody cares. Thoughts?</p>",
        "id": 178319406,
        "sender_full_name": "Erich Gubler",
        "timestamp": 1571252901
    },
    {
        "content": "<p>I don't think an issue on GitHub is needed here :)</p>",
        "id": 178319473,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1571252978
    },
    {
        "content": "<blockquote>\n<p>IIUC, <code>Copy</code>'s semantics are that <code>Clone::clone</code> can be automagically called to produce owned values when they would normally be consumed.</p>\n</blockquote>\n<p>I just wanted to point out here that part of the idea behind <code>Copy</code> is that we do not let you use a custom <code>Clone</code> implementation for such types. All that cloning can do for such types is memcpy their immediate state into the destination place. I do not think it is possible for there to be any interesting interactions here with custom allocators, by design. However, I <em>welcome</em> a counter-example.</p>",
        "id": 179233131,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572271157
    }
]