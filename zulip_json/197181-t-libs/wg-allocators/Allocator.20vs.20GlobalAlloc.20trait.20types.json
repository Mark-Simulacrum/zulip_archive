[
    {
        "content": "<p>Hi.<br>\nI started to take a look to the <code>Allocator</code> and <code>GlobalAllocator</code> in <code>core::alloc</code> and there's something I'm not really sure about.<br>\nAfter <a href=\"https://github.com/rust-lang/rust/commit/ab9362ad9a9b4b93951ccb577224dda367923226\">https://github.com/rust-lang/rust/commit/ab9362ad9a9b4b93951ccb577224dda367923226</a> I understand that when we implement <code>Allocator</code> we want <code>allocate</code> to return <code>Result&lt;NonNull&lt;[u8]&gt;, AllocError&gt;</code>. But then it's weird that <code>GlobalAlloc::alloc</code> requires to return <code>*mut u8</code> since you cannot re-use the previous impl to be called from this one IIUC. At least I don't see any methods that do not require experimental features in order to go from <code>NonNull&lt;u8&gt;</code> to <code>NonNull&lt;[u8]&gt;</code> &amp; viceversa.</p>\n<p>Is there anything I'm missing? Or is this just a WIP(being reworked/refactored)? In case it is, the only way now to implement an allocator is to have sepparated impls for <code>core::Allocator</code> and <code>GlobalAlloc</code>? Or to enable <code>#![feature(nonnull_slice_from_raw_parts)]</code> &amp; <code>#![feature(slice_ptr_get)]</code> basically.</p>\n<p>Thanks!</p>",
        "id": 226438245,
        "sender_full_name": "CPerezz",
        "timestamp": 1613428568
    }
]