[
    {
        "content": "<p>Hey all. I've been searching online and trying to find the current state of \"failable allocators\" (specifically around collections) but I'm coming up empty. I need to be able to gracefully handle OOM errors. What is the current state of being able to do so? Is there a crate that exports the proposed \"try\" methods for collections (e.g., \"try_push\" for Vec)? Is it possible to write such a crate without having to reinvent the std lib collection implementations from scratch?</p>",
        "id": 167830613,
        "sender_full_name": "rylev",
        "timestamp": 1560242520
    },
    {
        "content": "<p>There's the mp4parse_fallible crate, which should be updated to use the now stable global allocator functions to reallocate...</p>",
        "id": 167831129,
        "sender_full_name": "Mike Hommey",
        "timestamp": 1560243019
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/46865#issuecomment-500241534\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/46865#issuecomment-500241534\">https://github.com/rust-lang/rust/issues/46865#issuecomment-500241534</a> summarizes the status for fallible allocation and links relevant tracking issues</p>",
        "id": 167831175,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1560243072
    },
    {
        "content": "<p><code>try_reserve</code> is in Nightly. Presumably <code>try_push</code> can be implemented as <code>self.try_reserve(1); self.push(x)</code>, and similarly for other methods</p>",
        "id": 167831253,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1560243146
    },
    {
        "content": "<p>But on stable yeah, it’s gonna be copy-paste more than reinvent, but still</p>",
        "id": 167831306,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1560243222
    },
    {
        "content": "<p>There’s <a href=\"https://github.com/servo/servo/tree/master/components/hashglobe\" target=\"_blank\" title=\"https://github.com/servo/servo/tree/master/components/hashglobe\">https://github.com/servo/servo/tree/master/components/hashglobe</a>, with a weirdly condescending readme</p>",
        "id": 167831406,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1560243325
    },
    {
        "content": "<p>Hmmm... surprised no one has tried to come up with a crate that addresses this. Sounds like something the embedded working group would need a solution in the short term for (while waiting for the std implementation to stablize).</p>",
        "id": 167831506,
        "sender_full_name": "rylev",
        "timestamp": 1560243442
    },
    {
        "content": "<p>And RawVec is also unstable so yea... there would be quite a lot of copy/pasting...</p>",
        "id": 167831615,
        "sender_full_name": "rylev",
        "timestamp": 1560243552
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224872\">@Ryan Levick</span>  “No one” has tried? We just just pointed out two crates…</p>",
        "id": 167831675,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1560243605
    },
    {
        "content": "<p>Well I mean crates without the ominous \"don't use this\" warnings</p>",
        "id": 167831705,
        "sender_full_name": "rylev",
        "timestamp": 1560243660
    },
    {
        "content": "<p><a href=\"https://github.com/servo/servo/blob/master/components/fallible/lib.rs\" target=\"_blank\" title=\"https://github.com/servo/servo/blob/master/components/fallible/lib.rs\">https://github.com/servo/servo/blob/master/components/fallible/lib.rs</a> is another. It adds <code>Vec::try_push</code> on stable</p>",
        "id": 167831714,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1560243664
    },
    {
        "content": "<p>hashbrown has <code>try_reserve</code> on stable: <a href=\"https://docs.rs/hashbrown/0.4.0/hashbrown/struct.HashMap.html#method.try_reserve\" target=\"_blank\" title=\"https://docs.rs/hashbrown/0.4.0/hashbrown/struct.HashMap.html#method.try_reserve\">https://docs.rs/hashbrown/0.4.0/hashbrown/struct.HashMap.html#method.try_reserve</a></p>",
        "id": 167831733,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1560243696
    },
    {
        "content": "<p>we should probably move firefox/servo to that instead of hashglobe</p>",
        "id": 167831750,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1560243718
    },
    {
        "content": "<p>Awesome - so it seems like maybe it wouldn't be to terribly hard to collect these implementations into a crate that provides extension traits for all std lib collections</p>",
        "id": 167831874,
        "sender_full_name": "rylev",
        "timestamp": 1560243839
    },
    {
        "content": "<p>In the hashbrown case the idea would be to use it instead of std HashMap</p>",
        "id": 167832103,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1560244034
    },
    {
        "content": "<blockquote>\n<p>we should probably move firefox/servo to that instead of hashglobe</p>\n</blockquote>\n<p>that, or move hashglobe to <code>std::alloc::alloc</code></p>",
        "id": 167832120,
        "sender_full_name": "Mike Hommey",
        "timestamp": 1560244052
    },
    {
        "content": "<p>which servo's fallible module would need anyways</p>",
        "id": 167832192,
        "sender_full_name": "Mike Hommey",
        "timestamp": 1560244094
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220510\">@Mike Hommey</span> You mean stabilizing <a href=\"https://github.com/rust-lang/rust/issues/48043\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/48043\">https://github.com/rust-lang/rust/issues/48043</a> ? IIRC that’s blocked on deciding the error type, but that’s probably solvable</p>",
        "id": 167832218,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1560244138
    },
    {
        "content": "<p>No, I mean using <code>std::alloc::alloc</code> and <code>std::alloc::realloc</code> instead of the custom implementations in hashglobe</p>",
        "id": 167832256,
        "sender_full_name": "Mike Hommey",
        "timestamp": 1560244186
    },
    {
        "content": "<p>ah ok</p>",
        "id": 167832418,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1560244320
    },
    {
        "content": "<p>Am I wrong in thinking that because <code>std::alloc::{alloc,realloc}</code> are stable and all collections expose their capacities and reallocate in known ways, it should be possible to create extensions for all collection types in a stable way?</p>",
        "id": 167832556,
        "sender_full_name": "rylev",
        "timestamp": 1560244438
    },
    {
        "content": "<p>In other words, there are well defined ways to allocate on behalf of a collection and because of this it makes it relatively trivial to check if that allocation failed (i.e., alloc or realloc returned a null pointer).</p>",
        "id": 167832774,
        "sender_full_name": "rylev",
        "timestamp": 1560244623
    },
    {
        "content": "<p>for collections that allow to take them apart, yes. That's what the mp4parse_fallible crate does, albeit not using <code>std::alloc::{alloc, realloc}</code> (filed <a href=\"https://github.com/mozilla/mp4parse_fallible/issues/5\" target=\"_blank\" title=\"https://github.com/mozilla/mp4parse_fallible/issues/5\">https://github.com/mozilla/mp4parse_fallible/issues/5</a>)</p>",
        "id": 167832882,
        "sender_full_name": "Mike Hommey",
        "timestamp": 1560244705
    },
    {
        "content": "<p><code>Vec</code> has <code>as_mut_ptr</code> and <code>from_raw_parts</code>, which would allow that. <code>HashMap</code> doesn't.</p>",
        "id": 167833027,
        "sender_full_name": "Mike Hommey",
        "timestamp": 1560244818
    },
    {
        "content": "<p>Hmm... I wonder if there's a way to easily translate between a hashbrown HashMap and the std HashMap without reallocating since they're technically the same thing.... That way you could take advantage of hashbrown's ability to reallocate in a failable way</p>",
        "id": 167834107,
        "sender_full_name": "rylev",
        "timestamp": 1560245796
    },
    {
        "content": "<p>There’s an easy way: <code>transmute</code>. There is no <em>good</em> way IMO, std’s <code>HashMap</code> deliberately keeps its internal layout private.</p>",
        "id": 167834222,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1560245883
    },
    {
        "content": "<p>But if you’re taking on a dependency on crates.io’s hashbrown anyway, why not use it instead of std’s HashMap and avoid conversions completly?</p>",
        "id": 167834276,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1560245941
    },
    {
        "content": "<p>Yea, I don't know enough about the gurantees that hashbrown and std HasMap have to know if they can easily share buffers (so you don't have to rely on transmute)</p>",
        "id": 167834319,
        "sender_full_name": "rylev",
        "timestamp": 1560245972
    },
    {
        "content": "<p>simply for type capbility - if user's of the crate can extend std HashMap and use it instead of having to force users of the crate to accept hasbrown as an explicit dependency</p>",
        "id": 167834417,
        "sender_full_name": "rylev",
        "timestamp": 1560246048
    },
    {
        "content": "<p>presumably one could try to crate a crate that will eventually just be a thin veil over the newly stablized try_* methods</p>",
        "id": 167834447,
        "sender_full_name": "rylev",
        "timestamp": 1560246103
    },
    {
        "content": "<p>you can't do that if you explictly expose hasbrown as part of the public API</p>",
        "id": 167834456,
        "sender_full_name": "rylev",
        "timestamp": 1560246121
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219747\">@Simon Sapin</span> do you know specifically what is preventing stabilization of failable allocation APIs in collections?</p>",
        "id": 167840441,
        "sender_full_name": "rylev",
        "timestamp": 1560251868
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224872\">@Ryan Levick</span> I think it’s mostly the error type</p>",
        "id": 167841539,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1560253073
    },
    {
        "content": "<p>The <code>Layout</code> of the allocation that failed should probably be in there</p>",
        "id": 167841619,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1560253143
    },
    {
        "content": "<p>And, for when containers containers become generic over the allocator type, do we want the <code>Alloc</code> trait to have an associated error type? If so, <code>CollectionAllocErr</code> should probably be generic to contain that error type (together with the <code>Layout</code>). Or at least have a path so we can add that type parameter without breakage</p>",
        "id": 167841874,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1560253387
    },
    {
        "content": "<p>Do you see any reason that an rfc shouldn't be able to decide this? ie are there any external issues that would prevent the discussion for reaching a conclusion? If not I might take this on</p>",
        "id": 167842322,
        "sender_full_name": "rylev",
        "timestamp": 1560253898
    },
    {
        "content": "<p>It depends. I think the three options are :</p>\n<p>1. Propose to block <code>try_reserve</code> on the resolution of <a href=\"https://github.com/rust-lang/wg-allocators/issues/23\" target=\"_blank\" title=\"https://github.com/rust-lang/wg-allocators/issues/23\">https://github.com/rust-lang/wg-allocators/issues/23</a> (should allocators be able to customize the error type?)<br>\n2. Propose not to block, and propose a design for <code>CollectionAllocErr</code> that allows both outcomes. (Where it it’s not generic at first, but can be generalized to a generic type that contains a custom allocator-type-specific error.)<br>\n3. Propose not to block, and that <code>CollectionAllocErr</code> is not and won’t be generic. <code>try_reserve</code> will simply ignore the custom error value return by the allocator.</p>",
        "id": 167843430,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1560254848
    },
    {
        "content": "<p>OK those choices seem largely independent of other concerns. It seems like something that could be worth pursuing. Does anyone in the wg want to sponsor the effort (ie make themselves available for questions, reviews, etc)?</p>",
        "id": 167844221,
        "sender_full_name": "rylev",
        "timestamp": 1560255533
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/48043\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/48043\">https://github.com/rust-lang/rust/issues/48043</a> is the place to discuss <code>try_reserve</code></p>",
        "id": 167845058,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1560256296
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224872\">@Ryan Levick</span> I wrote up a proposal <a href=\"https://github.com/rust-lang/rust/issues/48043#issuecomment-500828346\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/48043#issuecomment-500828346\">https://github.com/rust-lang/rust/issues/48043#issuecomment-500828346</a></p>",
        "id": 167846984,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1560257822
    },
    {
        "content": "<p>I basically picked # 2 above</p>",
        "id": 167847019,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1560257846
    },
    {
        "content": "<p>Awesome thanks for pushing it forward! Having little context, <a href=\"https://github.com/rust-lang/rust/issues/2\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/2\">#2</a> does sound ideal given its the most flexible and doesn't have any immediatly obvious large tradeoffs</p>",
        "id": 167847447,
        "sender_full_name": "rylev",
        "timestamp": 1560258153
    },
    {
        "content": "<p>Not sure how I feel about the name bikesheding. It feels right to open the possibility of having this serve box and potentially other smart pointers in the future but it does open the problem space up more. I wonder how bad it would feel to eventually have a similar error type outside of collections for smart pointers</p>",
        "id": 167847676,
        "sender_full_name": "rylev",
        "timestamp": 1560258276
    },
    {
        "content": "<p>(Re-reading through the tracking issue reminded me that it doesn’t have to be an enum, so that makes things easier)</p>",
        "id": 167847699,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1560258298
    },
    {
        "content": "<p>It would likely be the exact same type, would would feel pretty bad to me. Renaming now sounds easier than introducing a new name later and deprecating the old one after it has been stabilized</p>",
        "id": 167847811,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1560258364
    },
    {
        "content": "<p>OK can it live in the alloc crate? That seems like an obvious choice</p>",
        "id": 167847899,
        "sender_full_name": "rylev",
        "timestamp": 1560258447
    },
    {
        "content": "<p>And why ContainerAllocError and not AllocError?</p>",
        "id": 167847928,
        "sender_full_name": "rylev",
        "timestamp": 1560258471
    },
    {
        "content": "<p>We already have <code>AllocErr</code> which is used in the return types of methods of the <code>Alloc</code> trait. This one does not contain a <code>Layout</code>, because the immediate caller already knows what layout it just passed. Making it zero-size allows <code>Result&lt;NonNull&lt;_&gt;, AllocErr&gt;</code> to be pointer-sized.</p>",
        "id": 167848101,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1560258583
    },
    {
        "content": "<p>We don’t so far export anything other than modules (and macros) at the root of standard library crates. So even in the alloc crate, we need to pick (or make) a module for this to live in</p>",
        "id": 167848215,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1560258650
    },
    {
        "content": "<p>Maybe the <code>alloc</code> module</p>",
        "id": 167848242,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1560258675
    },
    {
        "content": "<p>Yea that's what I had in mind</p>",
        "id": 167848251,
        "sender_full_name": "rylev",
        "timestamp": 1560258688
    },
    {
        "content": "<p>And the existence of an AllocErr that essentially is the same thing but does not contain layout information is a bit unfortunate. I think putting Container in front doesn't properly specify what is different about this type</p>",
        "id": 167848350,
        "sender_full_name": "rylev",
        "timestamp": 1560258758
    },
    {
        "content": "<p>There’s also the capacity-overflow case, where the container didn’t even go as far as calling <code>alloc()</code></p>",
        "id": 167851703,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1560261162
    },
    {
        "content": "<p>(or <code>realloc()</code>)</p>",
        "id": 167851711,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1560261171
    },
    {
        "content": "<p>So the two use cases are: an API for an allocator itself. <code>Layout</code> is a parameter of that API, so it doesn’t need to be in the return value. And a fallible method for some other library that happens to do allocation internally. It’s the library that does layout computation. This computation can overflow, but if it doesn’t and the allocation fails, then users want to know the <code>Layout</code>.</p>",
        "id": 167852407,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1560261658
    },
    {
        "content": "<p>So yes, maybe <code>Container</code> is not the right word. But we do need two different error types. <span class=\"user-mention\" data-user-id=\"224872\">@Ryan Levick</span>, do you have a naming suggestion?</p>",
        "id": 167852528,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1560261724
    },
    {
        "content": "<p><code>AllocErrWithLayout</code> would be self-descriptive, or <code>AllocAndLayoutErr</code> if <code>Err</code> must be the suffix?</p>",
        "id": 167854692,
        "sender_full_name": "Tom Phinney",
        "timestamp": 1560263000
    },
    {
        "content": "<p>But it <em>sometimes</em> contains a <code>Layout</code></p>",
        "id": 167854904,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1560263149
    },
    {
        "content": "<p>(Either in one of its own variants by being an enum, or by having an <code>Option&lt;Layout&gt;</code> field)</p>",
        "id": 167855011,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1560263207
    },
    {
        "content": "<p>That's tough. I don't have any good suggestions. Maybe: <code>AllocationRequestErr</code>?</p>",
        "id": 167870503,
        "sender_full_name": "rylev",
        "timestamp": 1560273495
    }
]