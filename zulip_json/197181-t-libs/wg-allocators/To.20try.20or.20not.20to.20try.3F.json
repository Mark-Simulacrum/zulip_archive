[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> pointed out, that the current <code>Abort</code> trait isn't a good choice. An allocator should not determine, how collection should handle errors. Instead, the collection needs to express this itself. <br>\nWe came up with a solution of another generic argument <code>Vec&lt;T, A, OomBehavior&gt;</code>. The third parameter will probably be changed to <code>const E: OomBehavior</code> where <code>enum OomBehavior { Error, Abort }</code>, as soon as default arguments are available for const generics. </p>\n<p>This way it's even possible to change the behavior of collection, without touching any allocator at all. <br>\nI like to try this out in <code>alloc-wg</code>, but there are two possibilites of implementing this:</p>\n<ol>\n<li>depending on the generic, the return type of allocator aware function change.</li>\n<li>both collection has <code>try_</code> methods like <code>try_reserve</code>, but only <code>Vec&lt;_, _, OomBehavior::Abort&gt;</code> has methods like <code>reserve</code> (without <code>try_</code>)</li>\n</ol>\n<p>Both solutions has advantages and downsides. </p>\n<ol>\n<li>\n<p>Solution</p>\n<ul>\n<li>\n<p>advantages:</p>\n<ul>\n<li>We already express in the <code>Vec</code> type, how OOM should be handled. No need to to type <code>try_</code> everytime.<br>\nFirst solution </li>\n</ul>\n</li>\n<li>\n<p>downsides:</p>\n<ul>\n<li><code>Vec</code> with different <code>OomBehavior</code> isn't interchangable, as signatures are not identical</li>\n<li>We will need a way to convert from <code>Vec&lt;_, _, OomBehavior::Abort&gt;</code>to <code>Vec&lt;_, _, OomBehavior::Error&gt;</code> in order to call a method returning a result instead of abort . This could be done via <code>Into</code>, <code>AsRef</code>, and <code>AsMut</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Solution: basically the opposite of the first solutions advantages and downsides</p>\n</li>\n</ol>\n<p>What do you think is the better solution? Why?</p>",
        "id": 183853143,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1576767785
    },
    {
        "content": "<blockquote>\n<p>Vec with different OomBehavior isn't interchangable, as signatures are not identical</p>\n</blockquote>\n<p>What do you mean with interchangeable? If I have some code doing infallible allocations, and I change the Vec type to \"become\" fallible, then that code would still mostly compile on many cases, but warn, due to the <code>#[must_use]</code> on the results.</p>",
        "id": 183853301,
        "sender_full_name": "gnzlbg",
        "timestamp": 1576767878
    },
    {
        "content": "<p>For most methods that allocate (or all?), the return type changes from <code>()</code> to <code>Result&lt;(),...&gt;</code></p>",
        "id": 183853363,
        "sender_full_name": "gnzlbg",
        "timestamp": 1576767927
    },
    {
        "content": "<p>One cannot replace the vector type in code that is handling those errors, with one that does not produce errors.</p>",
        "id": 183853490,
        "sender_full_name": "gnzlbg",
        "timestamp": 1576768007
    },
    {
        "content": "<p>One can do that with <code>Abort</code> in that direction, but not in the other.</p>",
        "id": 183853512,
        "sender_full_name": "gnzlbg",
        "timestamp": 1576768017
    },
    {
        "content": "<p>You forget the methods returning a value or <code>Self</code> like <code>Vec::with_capacity</code></p>",
        "id": 183853652,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1576768092
    },
    {
        "content": "<p>I think it would be worth it to explore to which point interchangeability solves useful problems, and then once we have some concrete examples, maybe evaluate how to improve them.</p>",
        "id": 183853663,
        "sender_full_name": "gnzlbg",
        "timestamp": 1576768106
    },
    {
        "content": "<p>Hm, yes, <code>with_capacity</code> wouldn't work.</p>",
        "id": 183853678,
        "sender_full_name": "gnzlbg",
        "timestamp": 1576768124
    },
    {
        "content": "<p>I'd like to go with the first solution, but I like to hear other people's opinion :)</p>",
        "id": 183853693,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1576768138
    },
    {
        "content": "<p>Notice that if you have a <code>Vec</code> with an allocator that uses <code>Abort</code>, and call <code>Vec::push</code>, and then try to interchange the vector type with an allocator that does not implement <code>Abort</code>, the code stops compiling as well.</p>",
        "id": 183853733,
        "sender_full_name": "gnzlbg",
        "timestamp": 1576768179
    },
    {
        "content": "<p>Because this new <code>Vec</code> only supports <code>Vec::try_push</code>, and not <code>Vec::push</code></p>",
        "id": 183853756,
        "sender_full_name": "gnzlbg",
        "timestamp": 1576768199
    },
    {
        "content": "<p>So I don't think there is a proposed solution that's fully interchangeable.</p>",
        "id": 183853832,
        "sender_full_name": "gnzlbg",
        "timestamp": 1576768231
    },
    {
        "content": "<p>However, if you write all your code with <code>Vec::try_</code>, then it works for all allocators.</p>",
        "id": 183853846,
        "sender_full_name": "gnzlbg",
        "timestamp": 1576768245
    },
    {
        "content": "<p>When changing from Abort to Error, it should always fail to compile. That's why you want to change it.<br>\nI think interchangeability isn't a major point anyway here</p>",
        "id": 183853909,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1576768304
    },
    {
        "content": "<p>I think you are onto something with interchangeability.</p>",
        "id": 183853962,
        "sender_full_name": "gnzlbg",
        "timestamp": 1576768323
    },
    {
        "content": "<p>I just wish we had some concrete examples collected somewhere. It might be easier to look at the impact of the different approaches by just trying them out in small snippets.</p>",
        "id": 183853992,
        "sender_full_name": "gnzlbg",
        "timestamp": 1576768350
    },
    {
        "content": "<p>Currently, most people don't care about OOM. It occures rarely in the common use case and it's hard to handle in std</p>",
        "id": 183854065,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1576768423
    },
    {
        "content": "<p>So finding an example project will be hard</p>",
        "id": 183854080,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1576768437
    },
    {
        "content": "<p>But you can throw the new vector in nearly all crates and watch the compile errors :D</p>",
        "id": 183854205,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1576768517
    },
    {
        "content": "<p>I found another advantage for the first solution: It's possible to extend this, when adding more behaviors like <code>Panic</code> or <code>Option</code>. We could even go crazy and implement the behavior on the trait itself. This would correspond to something like \"policy-based design\" described by Andrei Alexandrescu in \"Modern C++ Design\"</p>",
        "id": 183886976,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1576790810
    },
    {
        "content": "<p>However, I think implementing the behavior on the trait requires GATs for the return type</p>",
        "id": 183887359,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1576791107
    },
    {
        "content": "<p>I think 2 is better</p>",
        "id": 183897469,
        "sender_full_name": "John Ericson",
        "timestamp": 1576799931
    },
    {
        "content": "<p>No GATs and better inference</p>",
        "id": 183897480,
        "sender_full_name": "John Ericson",
        "timestamp": 1576799940
    },
    {
        "content": "<p>And easy to write the abort ones in terms of the <code>try_</code> ones.</p>",
        "id": 183897496,
        "sender_full_name": "John Ericson",
        "timestamp": 1576799961
    },
    {
        "content": "<p>GATs are not required in either solutions</p>",
        "id": 183897518,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1576799989
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220594\">@John Ericson</span> What do you think about using a generic parameter in general instead of the <code>Alloc</code> trait?</p>",
        "id": 183897704,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1576800119
    },
    {
        "content": "<p>Yes that is better. It is indeed not a property of the allocator</p>",
        "id": 183898587,
        "sender_full_name": "John Ericson",
        "timestamp": 1576800980
    },
    {
        "content": "<p>But of the collection</p>",
        "id": 183898650,
        "sender_full_name": "John Ericson",
        "timestamp": 1576801059
    },
    {
        "content": "<p>And a collection can pass the parameter to another type it uses, just like it does work the allocator</p>",
        "id": 183898705,
        "sender_full_name": "John Ericson",
        "timestamp": 1576801089
    },
    {
        "content": "<p>I think OOM is hard to handle because we make it hard to handle</p>",
        "id": 183906566,
        "sender_full_name": "Lokathor",
        "timestamp": 1576813027
    },
    {
        "content": "<p>and probably most OOM isn't like actual exhausted memory, but an accidentally crazy amount of memory being requested</p>",
        "id": 183906573,
        "sender_full_name": "Lokathor",
        "timestamp": 1576813058
    },
    {
        "content": "<p>I found another downside for the First solution: the documentation <del>is bloated up</del> gets messy, as every allocating method is listed twice with the same name, and the signature of the <code>impl</code> block is hard to notice - even with a doc-comment. This probably will lead to a lot of confusion, esp. for unexperimented users.</p>",
        "id": 183923167,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1576836746
    },
    {
        "content": "<p>I guess I will implement both on <code>alloc-wg</code> on different branches</p>",
        "id": 183923195,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1576836782
    },
    {
        "content": "<p>With my own crates I've found it a useful pattern for the non-try version to just say \"As <code>try_foo</code> but it unwraps the failure.\" or something very curt like that. You could probably do a similar thing here and just say that the OOM handler is triggered on failure.</p>",
        "id": 183992920,
        "sender_full_name": "Lokathor",
        "timestamp": 1576898248
    },
    {
        "content": "<p>That's what I already do, but when two methods are called the same, it's hard to track, which method is implemented on which behavior (although it's intuitive, that the <code>Error</code>-variant will return a <code>Result</code>). The more I play around with it or think about it, the more I like the second solution (try-variants)</p>",
        "id": 184022240,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1576955691
    },
    {
        "content": "<p>Yeah just become <em>extremely</em> rigid with the naming convention. Every <code>foo</code> op is likely to be just</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Out</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">try_foo</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">unwrap_or_else</span><span class=\"p\">(</span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">handle_alloc_error</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>And then all the thinking happens in the <code>try</code> variant.</p>",
        "id": 184024103,
        "sender_full_name": "Lokathor",
        "timestamp": 1576959204
    },
    {
        "content": "<p>Hehe well handle_alloc_error needs the layout</p>",
        "id": 184024159,
        "sender_full_name": "John Ericson",
        "timestamp": 1576959298
    },
    {
        "content": "<p>That is why we should probably return <code>Result&lt;T, (Alloc:Error, NonZeroLayout)&gt;</code></p>",
        "id": 184024179,
        "sender_full_name": "John Ericson",
        "timestamp": 1576959356
    },
    {
        "content": "<p>And then we literally will do the same thing every time</p>",
        "id": 184024225,
        "sender_full_name": "John Ericson",
        "timestamp": 1576959382
    },
    {
        "content": "<p>And can write a macro for it</p>",
        "id": 184024232,
        "sender_full_name": "John Ericson",
        "timestamp": 1576959409
    },
    {
        "content": "<p>That's why we have <code>CollectionAllocError</code>, which stores the layout where necessary</p>",
        "id": 184024875,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1576960570
    },
    {
        "content": "<p>Right but things like Box don't use it, because no capacity stuff</p>",
        "id": 184024888,
        "sender_full_name": "John Ericson",
        "timestamp": 1576960635
    },
    {
        "content": "<p>Maybe we need to call what we have VecLikeCollectionError</p>",
        "id": 184024893,
        "sender_full_name": "John Ericson",
        "timestamp": 1576960657
    },
    {
        "content": "<p>And make the OOM variant be CollectionAllocError which is basically the tuple</p>",
        "id": 184024939,
        "sender_full_name": "John Ericson",
        "timestamp": 1576960684
    },
    {
        "content": "<p>And add the From instance</p>",
        "id": 184024941,
        "sender_full_name": "John Ericson",
        "timestamp": 1576960695
    },
    {
        "content": "<p>Collections that use Box will especially benefit</p>",
        "id": 184024947,
        "sender_full_name": "John Ericson",
        "timestamp": 1576960730
    },
    {
        "content": "<p>Same for those that use Rc and Arc</p>",
        "id": 184024955,
        "sender_full_name": "John Ericson",
        "timestamp": 1576960767
    },
    {
        "content": "<p>Hmm, <code>OomBehavior</code>? <code>OomPolicy</code>? <code>OomHandling</code>?</p>",
        "id": 184066067,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1577042646
    },
    {
        "content": "<p>if it's \"handle alloc error\" and we have an \"oom handler\", then \"oom handling\" fits the other names so far.</p>",
        "id": 184066627,
        "sender_full_name": "Lokathor",
        "timestamp": 1577043518
    },
    {
        "content": "<p>is <code>handle_alloc_error</code> stable?</p>",
        "id": 184066634,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1577043543
    },
    {
        "content": "<p>yeah <a href=\"https://doc.rust-lang.org/std/alloc/fn.handle_alloc_error.html\" target=\"_blank\" title=\"https://doc.rust-lang.org/std/alloc/fn.handle_alloc_error.html\">https://doc.rust-lang.org/std/alloc/fn.handle_alloc_error.html</a> ?</p>",
        "id": 184066645,
        "sender_full_name": "Lokathor",
        "timestamp": 1577043574
    },
    {
        "content": "<p>Okay, then <code>OomHandling</code> sounds right</p>",
        "id": 184066714,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1577043647
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216785\">@Tim Diekmann</span> </p>\n<blockquote>\n<p>This would correspond to something like \"policy-based design\" described by Andrei Alexandrescu in \"Modern C++ Design\"</p>\n</blockquote>\n<p>The line between policy-based design being a good or bad idea in practice is thin. The whole point of the policy is to change some behavior, but if the \"semantics\" of most type methods depend on the actual policy, then it gets hard to learn what a method actually does.</p>",
        "id": 185038498,
        "sender_full_name": "gnzlbg",
        "timestamp": 1578421459
    },
    {
        "content": "<p>I think for this particular use case its fine, since the policy controls whether some methods exist or not.</p>",
        "id": 185038574,
        "sender_full_name": "gnzlbg",
        "timestamp": 1578421526
    },
    {
        "content": "<p>And not the \"behavior\" of these methods, so that the docs of the methods does not depend on the policy.</p>",
        "id": 185038598,
        "sender_full_name": "gnzlbg",
        "timestamp": 1578421542
    },
    {
        "content": "<p>In the Rust API docs, depending whether we follow the <code>try_X</code> vs two different <code>X</code> approaches, things might be easier or harder to document.</p>",
        "id": 185038713,
        "sender_full_name": "gnzlbg",
        "timestamp": 1578421589
    },
    {
        "content": "<p>E.g. if we go with the</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">OomAbort</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// Doc for the abort on OOM version</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">push</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">OomHandling</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// Doc for the &quot;result-returning&quot; version</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">push</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>approach, we end up with two <code>push</code> functions in the API docs, with two different doc strings, etc.</p>",
        "id": 185038938,
        "sender_full_name": "gnzlbg",
        "timestamp": 1578421733
    },
    {
        "content": "<blockquote>\n<p>But you can throw the new vector in nearly all crates and watch the compile errors :D</p>\n</blockquote>\n<p>Notice that one can write code that is polymorphic over these, one sometimes doesn't even need traits, eg.,  <code>let _ = vec.push();</code> will work in both cases.</p>",
        "id": 185039261,
        "sender_full_name": "gnzlbg",
        "timestamp": 1578421959
    },
    {
        "content": "<p>For the more general case of taking a collection polymorphically, and propagating errors in the \"collection-preferred\" way (using panics, or using results), then that's going to need some generics plumbing.</p>",
        "id": 185039323,
        "sender_full_name": "gnzlbg",
        "timestamp": 1578422008
    },
    {
        "content": "<p>But that's the case for both strategies (e.g. <code>try_</code> has the same problem).</p>",
        "id": 185039438,
        "sender_full_name": "gnzlbg",
        "timestamp": 1578422061
    },
    {
        "content": "<p>If <code>?</code> worked on <code>()</code> type values and simply always became <code>()</code> without the possibility of early return, then it would also let people write <code>v.push()?;</code> for both handling and panicing vecs</p>",
        "id": 185041957,
        "sender_full_name": "Lokathor",
        "timestamp": 1578423505
    },
    {
        "content": "<p>That would be an interesting extension</p>",
        "id": 185044678,
        "sender_full_name": "gnzlbg",
        "timestamp": 1578425072
    },
    {
        "content": "<p>but I don't think this extends to the rest of APIs, e.g., <code>Vec::pop() -&gt; T</code>, where you wouldn't be able to write <code>v.pop()?</code> in both cases.</p>",
        "id": 185044908,
        "sender_full_name": "gnzlbg",
        "timestamp": 1578425210
    },
    {
        "content": "<p>but isn't pop always an <code>Option&lt;T&gt;</code>? Any vec can be empty</p>",
        "id": 185049230,
        "sender_full_name": "Lokathor",
        "timestamp": 1578427589
    },
    {
        "content": "<p>hmm, duh, bad example</p>",
        "id": 185050780,
        "sender_full_name": "gnzlbg",
        "timestamp": 1578428563
    }
]