[
    {
        "content": "<p><strong>True infallible allocators are not possible!</strong><br>\nAn allocator is used to... allocate. Each time an allocator allocates, a memory area is returned. So how can an allocator be infallible when memory is finite? </p>\n<p><strong>So what does mean infallible in this context?</strong><br>\nI can only think of one kind of allocator: You know the memory size from the beginning, either as a parameter in the constructor, or prescribed by the type itself. Then the allocator is basically nothing else but a low-level <code>Vec</code>. In such cases, the allocator could panic instead of aborting, since the user theoretically knows how much space is left in the allocator.</p>\n<p><strong>How to implement infallibility?</strong><br>\nIn the current <code>AllocRef</code> trait, we always return <code>AllocErr</code> as error. To mark an allocator as infallible, we need an associated error type. If this is set to <code>!</code>, an allocator is infallible. There may be other possibilities, but I can't think of any right now.</p>\n<p><strong>What do we want/need infallible allocators for?</strong><br>\nInfallible allocators would return <code>Result&lt;_, !&gt;</code>. <br>\n<code>Result&lt;_, !&gt;::unwrap()</code> is a noop while <code>Result&lt;_, AllocErr&gt;::unwrap()</code> requires a branch. This matters in tight loops, where those allocator could be used (e.g. in game development).</p>",
        "id": 186376616,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1579776250
    },
    {
        "content": "<p>I think this is a false premise. “Infallible” in the context of memory allocation does <em>not</em> mean that failure never happens. (This may be confusing and perhaps it was not a great choice of terminology, but at this point it is somewhat established.) It means that the possibility of failure is not part of the “main” code path. In a fallible API, failure is represented as part of the return value of relevant functions or methods, for example with <code>Result</code> or a nullable pointer. In a so-called infallible API means that a function diverges (panics, aborts, …) on failure.</p>",
        "id": 186382453,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1579781835
    },
    {
        "content": "<p><code>Vec::try_reserve</code> is fallible, <code>Vec::reserve</code> is infallible</p>",
        "id": 186382476,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1579781852
    },
    {
        "content": "<p>Thanks for clarifying this!!</p>",
        "id": 186382563,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1579781907
    },
    {
        "content": "<p>My personal opinion is that <code>Result&lt;_, !&gt;</code> is not a good way of designing infallible APIs. The point of infallibility is that you deal with failure early so that downstream callers have the convenience of not worrying about it. <code>Result&lt;T, !&gt;</code> is less convenient than a plain <code>T</code>.</p>",
        "id": 186382722,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1579782058
    },
    {
        "content": "<p>I always have associated <code>infallible</code> with \"no error\". This is a game changer :)</p>",
        "id": 186382843,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1579782131
    },
    {
        "content": "<p>Well yeah, <code>Vec::reserve</code> has no error (visible in its signature)</p>",
        "id": 186382868,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1579782158
    },
    {
        "content": "<p>Yes, but I meant no errors at all, so the allocator cannot error either</p>",
        "id": 186383013,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1579782285
    },
    {
        "content": "<blockquote>\n<p><code>Vec::try_reserve</code> is fallible, <code>Vec::reserve</code> is infallible</p>\n</blockquote>\n<p>This is the game changer for me ;)</p>",
        "id": 186383051,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1579782319
    },
    {
        "content": "<blockquote>\n<p>Yes, but I meant no errors at all, so the allocator cannot error either</p>\n</blockquote>\n<p>Like you said, that doesn’t exist</p>",
        "id": 186383145,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1579782367
    },
    {
        "content": "<p>As everyone (in this wg) knows, that <code>reserve</code> may abort on allocation failure.</p>",
        "id": 186383147,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1579782369
    },
    {
        "content": "<p>So <code>type Error = !</code> could never exist in <code>AllocRef</code></p>",
        "id": 186383222,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1579782453
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/std/alloc/trait.GlobalAlloc.html#tymethod.alloc\" target=\"_blank\" title=\"https://doc.rust-lang.org/std/alloc/trait.GlobalAlloc.html#tymethod.alloc\">https://doc.rust-lang.org/std/alloc/trait.GlobalAlloc.html#tymethod.alloc</a> is fallible through returning a nullable pointer. I think it would be very reasonable to add a convenience infallible API like <code>fn(alloc: &amp;impl GlobalAlloc, layout: Layout) -&gt; NonNull&lt;u8&gt; { NonNull::new(alloc.alloc(layout)).unwrap_or_else(|| std::alloc::handle_alloc_error(layout)) }</code></p>",
        "id": 186383314,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1579782513
    },
    {
        "content": "<p>And similar for other methods</p>",
        "id": 186383318,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1579782520
    },
    {
        "content": "<p>Or maybe a generic wrapper struct that provides infallible methods</p>",
        "id": 186383330,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1579782539
    },
    {
        "content": "<p>The problem here is the naming of the function. The term <code>try</code> is already established in the Rust community, but <code>try_alloc</code> matches the fallible one, which we cannot change, as <code>GlobalAlloc</code> is stabilized</p>",
        "id": 186383509,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1579782668
    },
    {
        "content": "<p>Thinks like <code>alloc_infallible</code> sounds weird IMO</p>",
        "id": 186383559,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1579782715
    },
    {
        "content": "<p>A <code>Result</code> with an associated error type is no the only option, and I feel it’s not a very good one. Encoding fallibility in the type system has a convenience cost (you need that <code>unwrap</code> or <a href=\"https://github.com/rust-lang/rust/issues/61695\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/61695\"><code>into_ok</code></a> call)</p>",
        "id": 186383603,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1579782724
    },
    {
        "content": "<blockquote>\n<p><code>Result&lt;_, !&gt;::unwrap()</code> is a noop while <code>Result&lt;_, AllocErr&gt;::unwrap()</code> requires a branch. This matters in tight loops, where those allocator could be used (e.g. in game development).</p>\n</blockquote>\n<p>I’d also dispute that claim without profiling a real-world program. My guess would be that the cost of that branch is often insignificant compared to everything else for example a game does</p>",
        "id": 186383688,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1579782840
    },
    {
        "content": "<p>An associated error type could only bubble more error infos to the user, but that wouldn't change the way the errors have to be handled, so I think those issues are not related</p>",
        "id": 186383760,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1579782881
    },
    {
        "content": "<p>For the global allocator (as opposed to adding an allocator type parameter to container types), naming is the least of your worries. <code>std::alloc::Global</code> is “connected” to <code>#[global_allocator]</code> at link-time, so you can’t have an associated type or generics or anything type-level</p>",
        "id": 186383884,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1579782979
    },
    {
        "content": "<blockquote>\n<p>I’d also dispute that claim without profiling a real-world program [...]</p>\n</blockquote>\n<p>Well, that isn't a thing anyway then, as I know the terminology of \"infallible\" and \"fallible\" in the context of allocations now.</p>",
        "id": 186383903,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1579783006
    },
    {
        "content": "<p>As literal infallible allocations does not exist. </p>\n<p>An allocator implementation should not decide, on how it's errors are handled.</p>",
        "id": 186383941,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1579783054
    },
    {
        "content": "<p>The way I see infallibility in allocators is: \"if it returns, it allocated\"</p>",
        "id": 186479975,
        "sender_full_name": "Mike Hommey",
        "timestamp": 1579862656
    },
    {
        "content": "<p>as in \"if it returns at all\"</p>",
        "id": 186479982,
        "sender_full_name": "Mike Hommey",
        "timestamp": 1579862670
    },
    {
        "content": "<p>\"mandatory\" vs \"discressionary\" might be better</p>",
        "id": 186502365,
        "sender_full_name": "John Ericson",
        "timestamp": 1579880115
    },
    {
        "content": "<p>Regardless of the name I do agree with the changes that's been discussed, and yes they do use <code>Result</code>.</p>",
        "id": 186502467,
        "sender_full_name": "John Ericson",
        "timestamp": 1579880170
    },
    {
        "content": "<p><del>We rename <code>Alloc</code> to <code>AllocRef</code> because types that implement <code>Alloc</code> are a reference, smart pointer, or ZSTs. This question is another reason, why this rename is a good idea</del></p>",
        "id": 186548779,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1579912775
    },
    {
        "content": "<p><del>It is not possible to have an allocator like <code>MyAlloc([u8; N])</code>, that owns the memory and also implements <code>Alloc</code>. That would mean, that moving a <code>Vec&lt;T, MyAlloc&gt;</code> would need to correct the internal pointer, which is not possible. You have to encapsule the lifetime yourself by <code>impl AllocRef for &amp;(mut) MyAllocator</code></del></p>",
        "id": 186548859,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1579912860
    },
    {
        "content": "<p>Wrong topic...</p>",
        "id": 186548870,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1579912880
    }
]