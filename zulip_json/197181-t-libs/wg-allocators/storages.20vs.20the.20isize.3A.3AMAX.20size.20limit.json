[
    {
        "content": "<p>I've been playing with storages again, and I ran into an interesting point.</p>",
        "id": 278370553,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1649457425
    },
    {
        "content": "<p>(why: <a href=\"https://dev.to/cad97/dyn-doesnt-need-to-be-special-3ldm\">https://dev.to/cad97/dyn-doesnt-need-to-be-special-3ldm</a>)</p>",
        "id": 278370567,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1649457434
    },
    {
        "content": "<p>We're looking at enforcing the isize::MAX size limit in Layout, since it's proven unreasonable to manually handle</p>",
        "id": 278370602,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1649457477
    },
    {
        "content": "<p>See: <a href=\"https://github.com/rust-lang/rust/pull/95295\">https://github.com/rust-lang/rust/pull/95295</a></p>",
        "id": 278370657,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1649457510
    },
    {
        "content": "<p>But with storages, you're passing in <code>&lt;T as Pointee&gt;::Metadata</code>, not <code>Layout</code></p>",
        "id": 278370688,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1649457545
    },
    {
        "content": "<p>So obviously the solution is to handle too-large <code>Layout</code> in storages, right?</p>",
        "id": 278370703,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1649457567
    },
    {
        "content": "<p>But how? You need some what to get the size from the pointer metadata (which at <em>least</em> you can assume is valid, I hope), but the primitive <code>size_of_val_raw</code> requires the size to fit <code>isize::MAX</code> as an input invariant</p>",
        "id": 278370823,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1649457648
    },
    {
        "content": "<p>(BTW, If that PR lands and <a href=\"https://github.com/rust-lang/rust/pull/95361\">https://github.com/rust-lang/rust/pull/95361</a> does, then I'll make a similar type to make it a validity invariant to be outside the isize::MAX limit)</p>",
        "id": 278370847,
        "sender_full_name": "scottmcm",
        "timestamp": 1649457681
    },
    {
        "content": "<p>I think that it's time to make the built-in sizeof return an option (or a threestate for extern type) so it's possible to check just metadata</p>",
        "id": 278370867,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1649457710
    },
    {
        "content": "<p>IOW I think we need <code>unsafe fn Layout::for_metadata&lt;T&gt;(&lt;T as Pointee&gt;::Metadata) -&gt; Option&lt;Layout&gt;</code> which requires valid metadata but not for the described <code>T</code> to fit <code>isize::MAX</code></p>",
        "id": 278370955,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1649457795
    }
]