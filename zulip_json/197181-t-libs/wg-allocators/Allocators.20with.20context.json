[
    {
        "content": "<p>Hi, everyone.  I'm doing an experiment in porting parts of bzip2 (the unmaintained / ubiquitous compression library) to rust.  In there, a bz_stream is a C struct that is the main object one interacts with.  It lets one define a custom allocator by letting the caller set bz_stream-&gt;bzalloc and bz_stream-&gt;bzfree fields.  Internally the library does a few allocations with those, or falls back to malloc()/free() if the caller set those fields to NULL.<br>\nI'm looking in <a href=\"http://codesearch.debian.net\" target=\"_blank\" title=\"http://codesearch.debian.net\">codesearch.debian.net</a> to see just what uses a custom allocator with bzip, and it's only low-level stuff like freetype, ImageMagick and python.<br>\nLet's say I end up having a libbzip2.a staticlib built from Rust that preserves the C API.  How might I define a Rust allocator that calls into those -&gt;bzalloc and -&gt;bzfree?</p>",
        "id": 166866071,
        "sender_full_name": "Federico Mena Quintero",
        "timestamp": 1559171819
    },
    {
        "content": "<p>I think I cannot just set the global allocator, because there's no place to hook into the caller-supplied bz_stream</p>",
        "id": 166866162,
        "sender_full_name": "Federico Mena Quintero",
        "timestamp": 1559171923
    },
    {
        "content": "<p>You can \"easily\" define your own allocator by implementing the <a href=\"https://doc.rust-lang.org/std/alloc/trait.Alloc.html\" target=\"_blank\" title=\"https://doc.rust-lang.org/std/alloc/trait.Alloc.html\"><code>Alloc</code></a> trait. It does require nightly Rust though.</p>",
        "id": 166938153,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1559244238
    },
    {
        "content": "<p>The problem comes about with <em>using</em> it, as I don't think any Rust types expose a parameterized allocator.</p>",
        "id": 166938220,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1559244291
    },
    {
        "content": "<p><code>RawVec</code> does, but I don't think it's public in any fashion.</p>",
        "id": 166938280,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1559244335
    },
    {
        "content": "<p>That being said, I bet you don't actually <em>need</em> to make an allocator (although it would be nice)</p>",
        "id": 166938367,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1559244384
    },
    {
        "content": "<p><code>RawVec</code> is feature gated and has an unstable API. I wouldn't use it.</p>",
        "id": 166938393,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1559244420
    },
    {
        "content": "<p>A thorough answer would require knowing what kind of allocations you fully need, but you can write your own specific code.</p>",
        "id": 166938522,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1559244525
    },
    {
        "content": "<p>Also <code>Alloc</code> will probably be changed as well.</p>",
        "id": 166938534,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1559244535
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216785\">@Tim Diekmann</span> certainly possible! That being said, <span class=\"user-mention\" data-user-id=\"223500\">@Federico Mena Quintero</span> might be in a good position to help explore some of this API from an angle we might not normally get.</p>",
        "id": 166938713,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1559244691
    },
    {
        "content": "<p>It might also be worth exploring if bzip's <code>NULL</code> means \"use <code>malloc</code>\" or \"use <em>some</em> default\".</p>",
        "id": 166938945,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1559244845
    },
    {
        "content": "<p>You can get reasonably far with appropriate <code>Deref</code> structs though:</p>\n<div class=\"codehilite\"><pre><span></span>use libc; // 0.2.51\nuse std::{\n    ffi::c_void,\n    ops::{Deref, DerefMut},\n    slice,\n};\n\ntype AllocFn = unsafe extern &quot;C&quot; fn(usize) -&gt; *mut c_void;\n\n#[derive(Debug, Default)]\nstruct BzipConfig {\n    allocator: Option&lt;AllocFn&gt;,\n}\n\nimpl BzipConfig {\n    fn allocator(&amp;self) -&gt; AllocFn {\n        self.allocator.unwrap_or(libc::malloc)\n    }\n\n    fn allocate_bytes(&amp;self, size: usize) -&gt; DataChunk {\n        let alloc = self.allocator();\n        unsafe {\n            DataChunk {\n                data: alloc(size) as *mut u8,\n                cap: size,\n                size: 0,\n            }\n        }\n    }\n}\n\n// TODO: implement Drop!\nstruct DataChunk {\n    data: *mut u8,\n    size: usize,\n    cap: usize,\n}\n\nimpl Deref for DataChunk {\n    type Target = [u8];\n\n    fn deref(&amp;self) -&gt; &amp;Self::Target {\n        unsafe { slice::from_raw_parts(self.data, self.size) }\n    }\n}\n\nimpl DerefMut for DataChunk {\n    fn deref_mut(&amp;mut self) -&gt; &amp;mut Self::Target {\n        unsafe { slice::from_raw_parts_mut(self.data, self.size) }\n    }\n}\n\nfn main() {\n    let bz = BzipConfig::default();\n    let mut d = bz.allocate_bytes(123);\n    println!(&quot;{}&quot;, d.len());\n}\n</pre></div>",
        "id": 166939678,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1559245382
    },
    {
        "content": "<p>thanks, I'll see if <code>Alloc</code> does what I need.  bzlib only ever uses the custom allocator for \"allocate me space for my private structs\", and for a couple of arrays.  I may be able to ignore the caller's wishes and use whatever allocator Rust wants to use :)</p>",
        "id": 166946397,
        "sender_full_name": "Federico Mena Quintero",
        "timestamp": 1559250531
    },
    {
        "content": "<p>I'd certainly go the \"ignore\" route to start with and get the bulk of the functionality in place.</p>",
        "id": 166953183,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1559257399
    }
]