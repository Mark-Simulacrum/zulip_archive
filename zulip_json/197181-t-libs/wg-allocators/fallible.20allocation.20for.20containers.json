[
    {
        "content": "<p>Hi, I'm considering giving a shot at <a href=\"https://github.com/rust-lang/wg-allocators/issues/39\">https://github.com/rust-lang/wg-allocators/issues/39</a> (adding try_* methods for containers). That issue lists the following API:</p>\n<div class=\"codehilite\"><pre><span></span><code>// OnOomError is a variable, `try_*` is always available\nfn try_push(&amp;mut self: Vec&lt;T, A: AllocRef, OnOomError&gt;, t: T) -&gt; Result&lt;(), (AllocError, T)&gt; { .. }\n\n// NoAbort is a data type, used as a sentinel indicating the consumer is prohibited from using the aborting methods.\nstruct NoAbort();\n\n// Abort is a data type, used as a sentinel indicating the consumer is allowed to use the aborting methods.\nstruct Abort();\n\nfn push(&amp;mut self: Vec&lt;T, A: AllocRef, Abort&gt;, t: T) -&gt; T {\n   match self.push(t) {\n     OK(v) =&gt; v,\n     Err(e) =&gt; handle_alloc_error(e),\n  }\n}\n</code></pre></div>\n<p>One possible concern I've noticed is that <code>BTreeMap</code> and <code>HashMap</code> already have <code>try_insert</code> functions (<a href=\"https://doc.rust-lang.org/std/collections/struct.BTreeMap.html#method.try_insert\"><code>BTreeMap</code></a>, <a href=\"https://doc.rust-lang.org/std/collections/struct.HashMap.html#method.try_insert\"><code>HashMap</code></a>), which handle something different from fallible allocation; they return <code>Ok</code> if the insertion happened, or <code>Err</code> if the key already existed. So <code>try_*</code> may not be a good name for fallible allocating operations?</p>\n<p>At the same time, the issue also links <a href=\"#narrow/stream/197181-t-libs.2Fwg-allocators/topic/Design.20of.20.60AbortAlloc.60.20not.20compatible.20with.20.60try_reserve.60\">this Zuplip thread</a> which is a long thread, but it seems to propose adding a <code>FallibleVec</code> which is convertible with <code>Vec</code> (and I assume similar for other containers) either through an explicit method or <code>into()</code>.</p>\n<p>But given that that thread was nearly 2 years ago, what's the current status of fallible allocations for containers? Similarly, the <a href=\"https://github.com/rust-lang/wg-allocators/issues/48\">roadmap</a> hasn't been active since the end of 2020, and the <a href=\"https://github.com/rust-lang/wg-allocators/issues\">github issues</a> don't seem particularly active either</p>",
        "id": 258765492,
        "sender_full_name": "Raekye",
        "timestamp": 1634932639
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"437904\">@Raekye</span> I think <a href=\"https://github.com/rust-lang/rust/pull/95051\">https://github.com/rust-lang/rust/pull/95051</a> does a good job of pushing this along again.</p>",
        "id": 277055945,
        "sender_full_name": "John Ericson",
        "timestamp": 1648583152
    }
]