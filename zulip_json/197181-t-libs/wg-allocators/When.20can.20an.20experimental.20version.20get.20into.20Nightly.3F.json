[
    {
        "content": "<p>It came up at the gamedev-wg meeting that the alloc-wg seems (to an outside observer) to be reaching the point where you just have to have a lot of people actually try it out to get a wide range of feedback for much more progress to be made.</p>\n<p>However, we're also aware that simply putting the draft version into <code>alloc</code> can't be done because that would affect Stable users too, which we don't want. At the same time, having the test version not be built into the compiler distribution means there's some parts it can't actually do on its own as an outside crate.</p>\n<p>The idea that we had was maybe the whole thing could be put into a nightly-only <code>alloc_nightly</code> crate? Like as a 100% distinct crate that's just behind a feature flag and distributed in the Nightly distribution. That way the <code>alloc_nightly</code> can use the \"standard library only\" things.</p>\n<p>Obviously the <code>alloc_nightly</code> version of the types wouldn't interact at all with the normal <code>alloc</code> crate's version of the types, so a lot of the ecosystem wouldn't interact well with this, but the kind of people this API needs to serve tend to be the sort who are willing to \"build it from scratch\" and experiment a bit, so that shouldn't be a big problem for the experimentation phase.</p>\n<p>Thoughts?</p>",
        "id": 185159999,
        "sender_full_name": "Lokathor",
        "timestamp": 1578519649
    },
    {
        "content": "<p>If it’s an entirely separate crate that needs to be opted into, what’s wrong with having it on <a href=\"http://crates.io\" target=\"_blank\" title=\"http://crates.io\">crates.io</a>?</p>",
        "id": 185169828,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1578526925
    },
    {
        "content": "<p>“Standard library only things” are unstable through the same <code>#![feature(…)]</code> mechanism as feature destined to be stabilized eventually</p>",
        "id": 185169880,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1578526984
    },
    {
        "content": "<p>What would be the difference between <code>alloc-nightly</code> and <code>alloc-wg</code>?</p>",
        "id": 185205851,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1578571949
    },
    {
        "content": "<p>If the whole point is just to try this out, a crate in <a href=\"http://crates.io\" target=\"_blank\" title=\"http://crates.io\">crates.io</a> seems like the right place.</p>",
        "id": 185235704,
        "sender_full_name": "gnzlbg",
        "timestamp": 1578591340
    },
    {
        "content": "<p>This means that if you try to pass an <code>alloc_wg::Vec</code> to an API expecting <code>alloc::Vec</code> your code will fail to compile</p>",
        "id": 185235828,
        "sender_full_name": "gnzlbg",
        "timestamp": 1578591400
    },
    {
        "content": "<p>Maybe <code>alloc_wg</code> could add some interfacing <code>From</code> impls, that allow converting between these types when possible ?</p>",
        "id": 185235874,
        "sender_full_name": "gnzlbg",
        "timestamp": 1578591433
    },
    {
        "content": "<p>Its still going to have some friction.</p>",
        "id": 185235885,
        "sender_full_name": "gnzlbg",
        "timestamp": 1578591445
    },
    {
        "content": "<p>I was told that there are some compiler features to try out that are restricted to only use within the standard library. If this is not the case then <a href=\"http://crates.io\" target=\"_blank\" title=\"http://crates.io\">crates.io</a> would be totally fine as a distribution method.</p>",
        "id": 185237901,
        "sender_full_name": "Lokathor",
        "timestamp": 1578592721
    },
    {
        "content": "<p><code>#![feature(…)]</code> is how those restrictions are implemented</p>",
        "id": 185238786,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1578593217
    },
    {
        "content": "<p>I know about lang features. However, in another project when I tried to use the <code>since</code> attribute it errored on being standard library only and with no possible lang feature for using it outside of the standard library. It's just impossible. So such things so exist.</p>\n<p>In this particular case, I have not been using alloc-wg myself, most of the testing was by another user in the gamedev-wg. Unfortunately this means that I don't know every detail. I was just the person who had the most time to communicate the message and follow up :P</p>\n<p>So, if the initial assessment was wrong and the <a href=\"http://crates.io\" target=\"_blank\" title=\"http://crates.io\">crates.io</a> version of the crate really has all possible abilities then that's fine, no need for any changes.</p>",
        "id": 185240875,
        "sender_full_name": "Lokathor",
        "timestamp": 1578594578
    },
    {
        "content": "<blockquote>\n<p>when I tried to use the <code>since</code> attribute it errored on being standard library only</p>\n</blockquote>\n<p>That’s likely <code>#[feature(staged_api)]</code></p>",
        "id": 185241181,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1578594768
    },
    {
        "content": "<blockquote>\n<p>Maybe <code>alloc_wg</code> could add some interfacing <code>From</code> impls, that allow converting between these types when possible ?</p>\n</blockquote>\n<p>Feel free to make a Pull Request! :)</p>",
        "id": 185301164,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1578654975
    },
    {
        "content": "<p>I'm not sure is worth it, e.g., if you want to experiment with <code>alloc_wg</code>, then you are going to need nightly anyways, and you can work around certain things already.</p>",
        "id": 185318763,
        "sender_full_name": "gnzlbg",
        "timestamp": 1578669477
    },
    {
        "content": "<p>If there are particular examples causing friction, that's one of the things that we could do</p>",
        "id": 185318825,
        "sender_full_name": "gnzlbg",
        "timestamp": 1578669496
    },
    {
        "content": "<p>(e.g. for going from <code>alloc_wg::Vec</code> to <code>std::Vec</code> an <code>.into_raw_parts()</code> + <code>Vec::from_raw_parts</code> ought to work, but I can see how that's tiresome)</p>",
        "id": 185319115,
        "sender_full_name": "gnzlbg",
        "timestamp": 1578669708
    },
    {
        "content": "<p>A dedicated conversion API could ensure the allocators match</p>",
        "id": 185344796,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1578685918
    },
    {
        "content": "<p><code>from_raw_parts</code> with a pointer from a different allocator is not good</p>",
        "id": 185344853,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1578685933
    },
    {
        "content": "<p>Sure, but users can write traits for those conversions themselves, and if they happen often, we could move them into <code>wg_alloc</code></p>",
        "id": 185390861,
        "sender_full_name": "gnzlbg",
        "timestamp": 1578751127
    }
]