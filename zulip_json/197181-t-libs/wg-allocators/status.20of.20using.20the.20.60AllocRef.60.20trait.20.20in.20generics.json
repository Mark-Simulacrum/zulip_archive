[
    {
        "content": "<p>I remember that previously we were held up on incorporating the <code>AllocRef</code> trait in <code>Box</code> and <code>Vec</code> generics because it was impossible to separate a nightly feature like that from stable. What is the status on this?</p>",
        "id": 195752688,
        "sender_full_name": "Wodann",
        "timestamp": 1588185727
    },
    {
        "content": "<p>No change that I know of.</p>",
        "id": 195756671,
        "sender_full_name": "Amanieu",
        "timestamp": 1588187601
    },
    {
        "content": "<p>I think a first step would be to try a crater run to see if adding the parameters breaks any existing code.</p>",
        "id": 195756723,
        "sender_full_name": "Amanieu",
        "timestamp": 1588187630
    },
    {
        "content": "<p>As long as we don't change return types this shouldn't be a problem, but a crater run is definitely required.</p>",
        "id": 195759238,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1588188733
    },
    {
        "content": "<p>What would be the next steps if <a href=\"https://github.com/rust-lang/rust/issues/71873\" title=\"https://github.com/rust-lang/rust/issues/71873\">#71873</a> passed the crater run?</p>",
        "id": 196868790,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1588925743
    },
    {
        "content": "<p>Even if we add a parameter to <code>Box</code> upstream, it would not be possible to construct it without <code>#![feature(allocator_api)]</code>. So is pushing something like <a href=\"https://github.com/rust-lang/rust/pull/71873/commits/133652486697a384bd653f5db8b758f3b462d30c\" title=\"https://github.com/rust-lang/rust/pull/71873/commits/133652486697a384bd653f5db8b758f3b462d30c\">the first commit</a> an option? Or should we add <code>liballoc::alloc::boxed</code> as temporary solution?</p>",
        "id": 196869067,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1588925994
    },
    {
        "content": "<p>Do you mean that it won't be possible to allocate using a custom <code>AllocRef</code> without <code>#![feature(allocator_api)]</code> or it won't be able to allocate <code>Box::new</code> at all - without that feature?</p>\n<p>I don't understand what the \"first commit\" illustrates. Could you elaborate?</p>",
        "id": 196940797,
        "sender_full_name": "Wodann",
        "timestamp": 1588966579
    },
    {
        "content": "<p>The former: it's not possible to use a custom <code>AllocRef</code> without the feature flag, as every method returning <code>Self</code> is either only implemented on <code>Box&lt;T, Global&gt;</code> or is marked as unstable. Old methods like <code>Box::new</code> works as before (that's why the crater run is needed). However it's possible to name a <code>Box&lt;T, _&gt; = Box::new()</code> (<code>_</code> as wildcard which resolves to <code>Global</code>). If we are sure, the second parameter will be a thing, this is fine. </p>\n<p>Currently <code>System</code> also implements <code>AllocRef</code> so one could write<br>\n<code>let b: Option&lt;Box&lt;u32, System&gt;&gt; = None</code> on stable (However it should not be possible to construct it on stable). This could be solved by removing <code>AllocRef</code> from <code>System</code> for now, but it applied the same as above: If we are sure there will be a second parameter on <code>Box</code> and <code>System</code> will be valid there, this is fine. </p>\n<p>The first commit in the PR only adds the allocator parameter to the collections and box-like structures without using it. On box and vec-like structures, the <code>AllocRef</code> instance is stored alongside the struct, for other types, a <code>PhantomData&lt;A&gt;</code> is added. This is basically to check type inference for defaulted generics.</p>",
        "id": 196943946,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1588968186
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216785\">@Tim Diekmann</span> Are you planning on pushing any more changes to that PR? If not then I'll update the crater run (which hasn't started yet, it's in the <a href=\"https://crater.rust-lang.org/\" title=\"https://crater.rust-lang.org/\">queue</a>) to point to the latest code you have so far.</p>",
        "id": 196945434,
        "sender_full_name": "Amanieu",
        "timestamp": 1588969037
    },
    {
        "content": "<p>I think I'm done for now. The most important structs are changed (Box, Vec, String), i think those are the most used collection types used. Thank you!</p>",
        "id": 196949541,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1588971281
    },
    {
        "content": "<p>I'll double check the commits later or tomorrow, but I think everything is fine.</p>",
        "id": 196949599,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1588971337
    },
    {
        "content": "<p>If the libs team is fine with us adding the generic parameter, I would be in favour of that. It is the only feasible way that we can have people experiment with it on nightly. I feel like we will be going back and forth amongst each other trying to improve the <code>AllocRef</code> API; but the only way we'll really get any feedback is if people can actually easily start using the trait on common types, imo.</p>",
        "id": 196995853,
        "sender_full_name": "Wodann",
        "timestamp": 1589036708
    },
    {
        "content": "<p>I'd want to support such a thing. I'm working on stuff that really needs the allocator_api. I'm also working on my own standard library for a custom compiler, that would want to provide allocator aware collections/magic boxes. <br>\nHaving the support in the rust standard library, even behind unstable, would be nice to proceed with in my compiler/lib</p>",
        "id": 197000159,
        "sender_full_name": "Connor Horman",
        "timestamp": 1589042253
    },
    {
        "content": "<p>Could we have an unstable instance on <code>System</code>? I vaguely recall that being a thing</p>",
        "id": 197001036,
        "sender_full_name": "John Ericson",
        "timestamp": 1589043696
    },
    {
        "content": "<blockquote>\n<p>I'll double check the commits later or tomorrow, but I think everything is fine.</p>\n</blockquote>\n<p>Unfortunately I haven't been able to check this today, but will definitely review it again tomorrow. It would be frustrating, if a minor bug would lead to a major regression. There is enough time left to make a try-run before we got to the top of the crater queue.</p>",
        "id": 197004110,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1589047612
    },
    {
        "content": "<p>I would prefer just removing <code>AllocRef</code> on <code>System</code> for now so it isn't exposed to stable. I don't think it will be used much anyways.</p>",
        "id": 197004113,
        "sender_full_name": "Amanieu",
        "timestamp": 1589047614
    },
    {
        "content": "<p>By the way the perf results show a pretty significant regression: <a href=\"https://perf.rust-lang.org/compare.html?start=97f3eeec8216d7155c24674b9be55e7c672bcae3&amp;end=ac6afa7e002222176f3dcb43f18522047891b080\" title=\"https://perf.rust-lang.org/compare.html?start=97f3eeec8216d7155c24674b9be55e7c672bcae3&amp;end=ac6afa7e002222176f3dcb43f18522047891b080\">https://perf.rust-lang.org/compare.html?start=97f3eeec8216d7155c24674b9be55e7c672bcae3&amp;end=ac6afa7e002222176f3dcb43f18522047891b080</a></p>",
        "id": 197004147,
        "sender_full_name": "Amanieu",
        "timestamp": 1589047674
    },
    {
        "content": "<p>I think something in the generated code changed since the performance of -opt builds is affected.</p>",
        "id": 197004213,
        "sender_full_name": "Amanieu",
        "timestamp": 1589047740
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"143274\">Amanieu</span> <a href=\"#narrow/stream/197181-t-libs.2Fwg-allocators/topic/status.20of.20using.20the.20.60AllocRef.60.20trait.20.20in.20generics/near/197004213\" title=\"#narrow/stream/197181-t-libs.2Fwg-allocators/topic/status.20of.20using.20the.20.60AllocRef.60.20trait.20.20in.20generics/near/197004213\">said</a>:</p>\n<blockquote>\n<p>I think something in the generated code changed since the performance of -opt builds is affected.</p>\n</blockquote>\n<p>Is there a good way to track down generated code changes?</p>",
        "id": 197050471,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1589110768
    },
    {
        "content": "<p>I reviewed my PR and didn't find anything which needs a fix (e.g. missing <code>= Global</code> or missing <code>#[unstable]</code>). The former should have been catched by the tests anyway. I changed the feature flag in <code>Box::new_uninit_slice_in</code> to <code>\"allocator_api\"</code> but this does not affect performance or the stable channel.</p>",
        "id": 197051529,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1589112421
    },
    {
        "content": "<p>In theory the monomoprhized code should be absolutely identical since all uses of <code>Box</code>/<code>Vec</code> should resolve the the same <code>Box&lt;T, Global&gt;</code> that it did before.</p>",
        "id": 197052555,
        "sender_full_name": "Amanieu",
        "timestamp": 1589113671
    }
]