[
    {
        "content": "<p>I was skimming AlocRef in nightly and saw that alloc returns the usable size: <a href=\"https://doc.rust-lang.org/std/alloc/trait.AllocRef.html#tymethod.alloc\">https://doc.rust-lang.org/std/alloc/trait.AllocRef.html#tymethod.alloc</a><br>\nThat reminded me of the following mimalloc issue: <a href=\"https://github.com/microsoft/mimalloc/issues/2\">https://github.com/microsoft/mimalloc/issues/2</a><br>\nSpecifically the link from gnzlbg to <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0901r0.html\">http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0901r0.html</a><br>\nAs far as I can tell, that alloc method would have the same issues as the nallocx described there</p>",
        "id": 197215425,
        "sender_full_name": "Nick12",
        "timestamp": 1589237671
    },
    {
        "content": "<p>I filed <a href=\"https://github.com/rust-lang/wg-allocators/issues/74\">https://github.com/rust-lang/wg-allocators/issues/74</a> and <a href=\"https://github.com/rust-lang/wg-allocators/issues/75\">https://github.com/rust-lang/wg-allocators/issues/75</a> a few days ago that point to other reasons the current design here is suboptimal. Unfortunately, they've gotten no response. I guess most of the work on this was completed a while ago, and the wg isn't really active now (even this is a fairly old post)...</p>",
        "id": 214509694,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1603656886
    }
]