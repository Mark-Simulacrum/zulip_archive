[
    {
        "content": "<p>After our first merge has landed (I assume it will get through the FCP), what do you think are the logical next steps? One possibility would be to merge alloc-wg step by step as far as possible (this excludes <code>Box</code>, <code>Vec</code> etc.), starting with the separation of <code>AllocRef</code> into <code>DeallocRef</code>, <code>AllocRef: DeallocRef</code>, and <code>ReallocRef: AllocRef</code>. Another option could be the associated error type. Both shouldn't change much, but It would be helpful to get feedback from the outside of this WG regarding both. <br>\nIf we want to experiment even more, <code>BuildAllocRef</code> could be interesting, but only paired with changing the signature to <code>self</code> instead of <code>&amp;mut self</code>.</p>\n<p>Opinions?</p>",
        "id": 186345111,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1579737753
    },
    {
        "content": "<p>One step, not sure where it goes in the process, is to announce very loudly that this is moving into Nightly and for people to <em>please</em> try it. Be as weird as possible with it. Push the design to its absolute limits and see what breaks.</p>\n<p>We don't want to have a lack of feedback on this one. Allocators are really going to have a lot of influence on Rust at least for this entire edition, if not forever.</p>",
        "id": 186346177,
        "sender_full_name": "Lokathor",
        "timestamp": 1579738833
    },
    {
        "content": "<blockquote>\n<p>not sure where it goes in the process</p>\n</blockquote>\n<p><a href=\"https://users.rust-lang.org/\" target=\"_blank\" title=\"https://users.rust-lang.org/\">https://users.rust-lang.org/</a> is a must-have I guess. Also reddit is a suitable place IMO.</p>",
        "id": 186346343,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1579739043
    },
    {
        "content": "<p>i meant I'm not sure how soon to shout about it</p>",
        "id": 186346581,
        "sender_full_name": "Lokathor",
        "timestamp": 1579739324
    },
    {
        "content": "<p>Ah</p>",
        "id": 186346588,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1579739338
    },
    {
        "content": "<p>I think we should first implement some things that differ strongly enough from the current implementation. I think <code>BuildAllocRef</code> is the biggest change so far and also needs most fine-tuning and testing.</p>\n<p>Error handling is also a big point I think.</p>\n<p>As soon as we can touch <code>Box</code>, <code>Vec</code>, etc., it becomes important again.</p>",
        "id": 186346756,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1579739518
    },
    {
        "content": "<p>It feels to me the shouting and the getting people to test could be done with the alloc-wg crate</p>",
        "id": 186348200,
        "sender_full_name": "Mike Hommey",
        "timestamp": 1579741148
    },
    {
        "content": "<p>What about a hybrid approach? Pushing some things upstream first, make an announcement and link the alloc-wg crate for more features? I think if some features are merged into master, more people will test these out.</p>",
        "id": 186350392,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1579743707
    },
    {
        "content": "<p>Having it be in Nightly and \"automatically available\" is a big deal, worlds better than telling someone to try the alloc-wg crate.</p>\n<p>Anyone, at any time, can go make some random crate with whatever insane ideas about allocation they want to cook up.</p>\n<p>But, if you've put something into Nightly, there's at least like 3 or 4 other people in the world (maybe more?) who think it's a good enough idea to let the experimentation into the <em>official compiler</em>.</p>\n<p>It's not the final step in the path at all, but it's a landmark that the wider public will easily recognize as being a significant point of progress for this project. That's good PR. That's a positive step towards fixing one of the biggest areas where Rust still lags behind C/C++.</p>\n<p>There's such a thing as over selling it, but this is a pretty important step if you stop and think about it much.</p>",
        "id": 186365906,
        "sender_full_name": "Lokathor",
        "timestamp": 1579766413
    },
    {
        "content": "<blockquote>\n<p>Allocators are really going to have a lot of influence on Rust at least for this entire edition, if not forever.</p>\n</blockquote>",
        "id": 186370690,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1579771298
    },
    {
        "content": "<p>Not disputing this, but what sort of influence do you have in mind?</p>",
        "id": 186370697,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1579771312
    },
    {
        "content": "<p>We did it, the first change has landed on master!</p>",
        "id": 186780938,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1580217371
    },
    {
        "content": "<p>I'm pretty excited about <a href=\"https://github.com/rust-lang/wg-allocators/issues/38\" target=\"_blank\" title=\"https://github.com/rust-lang/wg-allocators/issues/38\">#38</a>, <a href=\"https://github.com/rust-lang/wg-allocators/issues/41\" target=\"_blank\" title=\"https://github.com/rust-lang/wg-allocators/issues/41\">#41</a>, and <a href=\"https://github.com/rust-lang/wg-allocators/issues/42\" target=\"_blank\" title=\"https://github.com/rust-lang/wg-allocators/issues/42\">#42</a>. I think all of them, but especially the formers, will greatly push <code>AllocRef</code> to the right direction.</p>",
        "id": 189952000,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1583546114
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216785\">@Tim Diekmann</span> I'm not going to be very responsive this week, I'm on holiday.</p>",
        "id": 190412289,
        "sender_full_name": "Amanieu",
        "timestamp": 1584031064
    },
    {
        "content": "<p>No problem, enjoy it!</p>",
        "id": 190412685,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1584031250
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> Should I squash the commits in <a href=\"https://github.com/rust-lang/rust/issues/69889\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/69889\">#69889</a>?</p>",
        "id": 190745690,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1584375691
    },
    {
        "content": "<p>I don't mind either way. I personally prefer keeping the commits clean (one for each major feature).</p>",
        "id": 190755671,
        "sender_full_name": "Amanieu",
        "timestamp": 1584379928
    },
    {
        "content": "<p>Alright, will squash them once the CI passed</p>",
        "id": 190761242,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1584382629
    },
    {
        "content": "<p>Squashed and passed CI</p>",
        "id": 190776885,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1584391132
    },
    {
        "content": "<p>I think I have found a solution to solve the unsoundness of <a href=\"https://github.com/rust-lang/rust/issues/69889\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/69889\">#69889</a> and it solves the performance regression. I will probably push the changes to <code>alloc-wg</code> tomorrow and make a new proposal.</p>",
        "id": 191053127,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1584572046
    },
    {
        "content": "<p>Interested to see your fix <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 191096999,
        "sender_full_name": "Wodann",
        "timestamp": 1584615385
    },
    {
        "content": "<p>Due to private reasons I'm very busy currently. I'll come back to the issue as soon as I can!</p>",
        "id": 191346303,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1584798335
    },
    {
        "content": "<p>In short: There are two reasons, why <code>layout.size()</code> may be zero: <code>T</code> is zero-sized or we allocate zero <code>T</code>s. The former may be solved by adding <code>T</code> to <code>Layout</code> (<code>MemoryLayout&lt;T&gt;</code>?). Then we could add <code>&lt;T: ?Sized&gt;</code> to <code>alloc</code>/<code>dealloc</code> and <code>&lt;T&gt;</code> to <code>grow</code>/<code>shrink</code>. Checking for the size of <code>T</code> is then done at compile time again and I came up with a solution to have <code>size_of::&lt;MemoryLayout&lt;T: Sized&gt;&gt;() == 8</code> (64bit, only storing capacity) and  <code>size_of::&lt;MemoryLayout&lt;T: !Sized&gt;&gt;() == 16</code> bytes (storing size and align). The other case is, that we request a capacity for 0 <code>T</code>s. This could simply be forbidden, it doesn't even make sense.</p>\n<p>Another issue I had was the parameters/return value of <code>grow</code>/<code>shrink</code> when passing <code>ReallocPlacement</code>. With another struct <code>MemoryBlock</code> or <code>Allocation</code> we could store the pointer (<code>Unique&lt;T&gt;</code>) and <code>MemoryLayout</code> in that struct. <code>alloc</code> returns <code>Result&lt;MemoryBlock, _&gt;</code>, <code>grow</code>/<code>shrink</code> takes <code>&amp;mut MemoryBlock</code> and returns <code>Result&lt;(), _&gt;</code> and dealloc consumes <code>MemoryBlock</code>. <code>MemoryBlock</code> would neither implement <code>Copy</code>, nor <code>Clone</code>.</p>\n<p>With those adjustments the mentioned unsoundness would also dissappear as long as we change <code>into_box</code> to return <code>Box&lt;[MaybeUninit&lt;T&gt;]&gt;</code>. the boxed slice implementation must then adjust the length of the box and can call <code>assume_init</code>. It's fine to use the excess, as it is reserved for the <code>MemoryBlock</code> anyway and it is valid to pass a layout size between the size passed in <code>alloc</code> and the actual size.</p>",
        "id": 191347463,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1584799918
    },
    {
        "content": "<p>Regarding the size of <code>MemoryLayout&lt;T&gt;</code>: I want <code>size_of::&lt;MemoryLayout&lt;T&gt;&gt;() == size_of::&lt;Option&lt;MemoryLayout&lt;T&gt;&gt;&gt;()</code>. <code>T</code> may be a ZST, so we can't store <code>size</code> in <code>MemoryLayout&lt;T: Sized&gt;</code> but the capacity is non-null. For <code>MemoryLayout&lt;T: !Sized&gt;</code> the size also may be null, but the alignment is not null. In both cases, there is one value non-null allowing the option-optimization.</p>",
        "id": 191348372,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1584801126
    },
    {
        "content": "<p>I still think that it's simpler if we just special-case ZSTs in <code>Vec</code>.</p>",
        "id": 191360117,
        "sender_full_name": "Amanieu",
        "timestamp": 1584815905
    },
    {
        "content": "<p>Just stick a few <code>if mem::size_of::&lt;T&gt;() == 0 {...}</code> in a few places and be done with it.</p>",
        "id": 191360129,
        "sender_full_name": "Amanieu",
        "timestamp": 1584815935
    },
    {
        "content": "<p>Those changes are not related to <code>Vec</code> but to allocating in genrel. using <code>MemoryLayout</code> and <code>MemoryBlock</code> provides a more convenient abstraction to a pointer associated with a size. It's feeling natural to pass the memory block to a function, which changes the block like growing/shrinking. Or moving the block to <code>dealloc</code> to free it.</p>\n<p>Regarding <code>(Raw)Vec</code> I don't really care, but I really want to clean up <code>RawVec</code> as there are a lot duplicated fragments currently.</p>",
        "id": 191373925,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1584840065
    },
    {
        "content": "<p>Allocators should deal in <code>(size, align)</code> layouts and \"<code>void*</code>\" pointers, never types</p>",
        "id": 191401799,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1584891309
    },
    {
        "content": "<p>(I'm in the process of watching <a href=\"https://youtu.be/LIb3L4vKZ7U\" target=\"_blank\" title=\"https://youtu.be/LIb3L4vKZ7U\">this CppCon talk</a> on <code>std::allocator</code>)</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"LIb3L4vKZ7U\" href=\"https://youtu.be/LIb3L4vKZ7U\" target=\"_blank\" title=\"https://youtu.be/LIb3L4vKZ7U\"><img src=\"https://i.ytimg.com/vi/LIb3L4vKZ7U/default.jpg\"></a></div>",
        "id": 191402013,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1584891585
    },
    {
        "content": "<p>That said, dealing in a <code>MemoryBlock</code> type that's the pointer and its layout tied together also makes sense.</p>",
        "id": 191402161,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1584891731
    },
    {
        "content": "<p>(Alexandrescu's <code>Blk</code>)</p>",
        "id": 191402174,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1584891759
    },
    {
        "content": "<p>We need to be careful in speccing, though, as <code>Box&lt;T&gt;</code> means that standard sized allocations _will_ be freed with their \"used\" size, and without indicating excess</p>",
        "id": 191402239,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1584891847
    },
    {
        "content": "<p>That's just telling the allocator that if it indicates excess it has to handle the allocation being talked about with any size in the <code>[requested, requested+excess]</code> range, ofc</p>",
        "id": 191402332,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1584891987
    },
    {
        "content": "<p>One interesting note worth highlighting from the talk is that \"[good] [general] allocators are compositions of smaller, more specialized allocators\" (paraphrased).</p>",
        "id": 191402358,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1584892061
    },
    {
        "content": "<p>That makes sense, I would imagine the final version of bumpalo would take an allocator parameter to specify where it gets its memory from.</p>",
        "id": 191402446,
        "sender_full_name": "Amanieu",
        "timestamp": 1584892172
    },
    {
        "content": "<p>But it also brings up the question of those specialized allocators, and I'm starting to think it's not possible to provide an \"ideal\" allocator API for both the \"bump allocate in a stack array\" simple case and the \"choose between several different size class allocators\" complex case</p>",
        "id": 191402537,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1584892305
    },
    {
        "content": "<p>The former bakes in too many assumptions to be generally useful in a generalized API</p>",
        "id": 191402581,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1584892327
    },
    {
        "content": "<p>But I don't really know</p>",
        "id": 191402585,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1584892337
    },
    {
        "content": "<p>I'll watch the video and get back to you on that.</p>",
        "id": 191402823,
        "sender_full_name": "Amanieu",
        "timestamp": 1584892741
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132829\">@Christopher Durham</span> You may be interested in reading this about composing allocators: <a href=\"https://plasma.cs.umass.edu/emery/heap-layers.html\" target=\"_blank\" title=\"https://plasma.cs.umass.edu/emery/heap-layers.html\">https://plasma.cs.umass.edu/emery/heap-layers.html</a></p>",
        "id": 191403085,
        "sender_full_name": "Amanieu",
        "timestamp": 1584893147
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132829\">@Christopher Durham</span> I just watched the video. It turns out that <code>owns()</code> is actually a lot harder to implement in practice, and the lack of it in existing allocators make it impossible to wrap them with the allocator API. See also discussion in <a href=\"https://github.com/rust-lang/rust/issues/44302\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/44302\">#44302</a>.</p>",
        "id": 191404166,
        "sender_full_name": "Amanieu",
        "timestamp": 1584894750
    },
    {
        "content": "<p>If an allocator would be allowed to tag its allocation with custom state, and that state must be provided for calls to realloc, dealloc, etc. then many problems of <code>owns ()</code> would be solved. For example, the tag might encode which underlying allocator has been used instead of the allocator having to reconstruct that information in non-constant time from the pointer itself (and the required <code>Layout</code> might be considered similar such a tag). If that tag is an associated type of the allocator, then it allows constructing a wrapper that hides the tag of an underlying wrapper and always uses <code>()</code> as the tag. This could be done by allocating enough space for the requested layout and the underlying tag then storing the tag into the allocation, potentially requiring that the tag be <code>Copy</code>.<br>\nThis solution is much harder in C++'s semantics: There is no <code>Copy</code> trait, the tag would be required to implement a move constructor and we'd require a placement-new into the allocation and additionally, I think, the extra space messes with semantics of the placement of the originally requested object. On top of that comes moving the tag out before deallocating, etc..</p>",
        "id": 191406409,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1584897757
    },
    {
        "content": "<p>Or the allocator could just store this tag next to the allocation. I don't see much advantage if the tag needs to be carried around with the object anyways.</p>",
        "id": 191407276,
        "sender_full_name": "Amanieu",
        "timestamp": 1584899021
    },
    {
        "content": "<p>Storing the tag next to the allocation would be precisely what the wrapper does. Enforcing that allocators do all of that themselves is like wrapping ever allocator, which is not zero-cost for nested allocators. Also, why not separate those layers into reusable components if you can to reduce implementation overhead?</p>",
        "id": 191408108,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1584900103
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"132829\">Christopher Durham</span> <a href=\"#narrow/stream/197181-t-libs.2Fwg-allocators/topic/Next.20steps.3F/near/191402161\" title=\"#narrow/stream/197181-t-libs.2Fwg-allocators/topic/Next.20steps.3F/near/191402161\">said</a>:</p>\n<blockquote>\n<p>That said, dealing in a <code>MemoryBlock</code> type that's the pointer and its layout tied together also makes sense.</p>\n</blockquote>\n<p>I don't know if we want to store <code>Layout</code> or just the size as <code>Layout</code> is twice as large and the alignment will never change. We have to pass the alignment to other functions then however.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"143274\">Amanieu</span> <a href=\"#narrow/stream/197181-t-libs.2Fwg-allocators/topic/Next.20steps.3F/near/191407276\" title=\"#narrow/stream/197181-t-libs.2Fwg-allocators/topic/Next.20steps.3F/near/191407276\">said</a>:</p>\n<blockquote>\n<p>Or the allocator could just store this tag next to the allocation. I don't see much advantage if the tag needs to be carried around with the object anyways.</p>\n</blockquote>\n<p>I don't think I like to store the tag next to the allocation. If we decide to use something like <code>MemoryBlock</code> this could also be a trait instead and use an associated type in <code>AllocRef</code>. The tag could then be stored in the implementation of <code>MemoryBlock</code> together with the pointer and the size.</p>",
        "id": 191421926,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1584919598
    },
    {
        "content": "<p>In comparison to C++, <code>owns</code> can also be provided in another trait (<code>OwnedAlloc</code>?). Composing different allocators can rely on this trait then.</p>",
        "id": 191424469,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1584924328
    },
    {
        "content": "<p>As <code>owns</code> cannot be a trait method on <code>AllocRef</code> (This was discussed when the allocator API was introduced the first time), we don't have to bother about this anyway. Composable allocators should live in an external crate on <a href=\"https://crates.io\" target=\"_blank\" title=\"https://crates.io\">https://crates.io</a>.</p>",
        "id": 191527445,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1584993281
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/49668\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/49668\">#49668</a>: </p>\n<blockquote>\n<p><del><code>GlobalAlloc::owns</code>: <a href=\"https://github.com/rust-lang/rust/issues/44302\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/44302\"><a href=\"https://github.com/rust-lang/rust/issues/44302\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/44302\">#44302</a></a> proposes making it required for allocators to be able to tell if it “owns” a given pointer.</del> Not to be required by this trait since glibc and Windows do not support this.</p>\n</blockquote>",
        "id": 191527895,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1584993461
    },
    {
        "content": "<blockquote>\n<p>Composable allocators should live in an external crate on <a href=\"https://crates.io\" target=\"_blank\" title=\"https://crates.io\">https://crates.io</a>.</p>\n</blockquote>\n<p>Totally agree, would it be suitable still to seek input from the working group here?</p>",
        "id": 191528288,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1584993615
    },
    {
        "content": "<p>I just had started writing a crate :)<br>\nI think we may link the crate from the WG, but issues should go to the crate's repository.</p>",
        "id": 191528403,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1584993672
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216785\">@Tim Diekmann</span> Could you push any updates to the PR as separate commits instead of force-pushing? It makes reviewing easier. We can always squash later before merging.</p>",
        "id": 191757942,
        "sender_full_name": "Amanieu",
        "timestamp": 1585148388
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216785\">@Tim Diekmann</span> What was the rationale for removing the methods on <code>MemoryBlock</code>?</p>",
        "id": 192137950,
        "sender_full_name": "Amanieu",
        "timestamp": 1585423537
    },
    {
        "content": "<p>In my first attempt to implement <code>MemoryBlock</code> it contained <code>Unique</code> instead of <code>NonNull</code>. That required an unsafe <code>new</code> method and a conversion from <code>Unique</code> to <code>NonNull</code> in <code>MemoryBlock::ptr</code>. As we now have <code>MemoryBlock</code> containing <code>NonNull</code> there was no point to make the fields private, so I made them <code>pub</code>. Also there was <code>Layout</code> instead of <code>size: usize</code> and two methods were only shorthands to <code>layout.size()</code> and <code>layout.align()</code>. The remaining methods were just forwarding to the fields, I don't see a reason to keep them, when direct access is possible.</p>",
        "id": 192138288,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1585424160
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> Do you wait for another reply of <strong>wg-compiler-performance</strong> or do we want to merge the PR?</p>",
        "id": 192410025,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1585670346
    },
    {
        "content": "<p>I'm tending towards just merging it and dealing with the fallout later.</p>",
        "id": 192410084,
        "sender_full_name": "Amanieu",
        "timestamp": 1585670371
    },
    {
        "content": "<p>I presume you don't have any other changes you'd like to make to the PR at the moment?</p>",
        "id": 192410115,
        "sender_full_name": "Amanieu",
        "timestamp": 1585670390
    },
    {
        "content": "<p>No, I think the PR is self-contained. Everything else should be in a different PR. The PR is already too big.</p>",
        "id": 192410315,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1585670449
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 192410557,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1585670530
    },
    {
        "content": "<p>So, what's left on the TODO list?</p>",
        "id": 192410982,
        "sender_full_name": "Amanieu",
        "timestamp": 1585670697
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/43\" title=\"https://github.com/rust-lang/rust/issues/43\">#43</a>: Implement AllocRef on System without GlobalAlloc<br>\n<a href=\"https://github.com/rust-lang/rust/issues/21\" title=\"https://github.com/rust-lang/rust/issues/21\">#21</a>: Coherent design of GlobalAlloc and Alloc<br>\n<a href=\"https://github.com/rust-lang/rust/issues/47\" title=\"https://github.com/rust-lang/rust/issues/47\">#47</a>: Allocation promises with global AllocRef allocator</p>",
        "id": 192411190,
        "sender_full_name": "Amanieu",
        "timestamp": 1585670763
    },
    {
        "content": "<p>Basically these are all related to the global allocator.</p>",
        "id": 192411246,
        "sender_full_name": "Amanieu",
        "timestamp": 1585670794
    },
    {
        "content": "<p>Yes. I think we need <a href=\"https://github.com/rust-lang/rust/issues/43\" title=\"https://github.com/rust-lang/rust/issues/43\">#43</a> before we can dive into more <code>GlobalAlloc</code> things</p>",
        "id": 192412526,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1585671330
    },
    {
        "content": "<p>Oh, the PR got a higher priority :)</p>",
        "id": 192440655,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1585684195
    },
    {
        "content": "<p>PR failed on on Linux dist-i586-gnu-i586-i686-musl; it looks like the failing tests are testing that a try_reserve for <code>isize::MAX + 1</code> elements is failing, and it didn't.</p>",
        "id": 192484984,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1585719009
    },
    {
        "content": "<p>Thanks for pointing that out, this made the fix trivial!</p>",
        "id": 192496979,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1585729825
    },
    {
        "content": "<p>I simply forgot this line, but this is what tests are for, right? :)</p>",
        "id": 192497073,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1585729885
    }
]