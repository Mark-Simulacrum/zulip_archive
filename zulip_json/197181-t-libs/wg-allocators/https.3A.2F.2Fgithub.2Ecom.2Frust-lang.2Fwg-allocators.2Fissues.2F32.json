[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> <span class=\"user-mention\" data-user-id=\"216785\">@Tim Diekmann</span> can you provide code for that issue ?</p>",
        "id": 180244459,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573229557
    },
    {
        "content": "<p>Or a link to the actual places in your own code where you would use that API?</p>",
        "id": 180244496,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573229577
    },
    {
        "content": "<p>I don't recall at this immediate moment, nor do I care enough to look through my old code.</p>",
        "id": 180244591,
        "sender_full_name": "Lokathor",
        "timestamp": 1573229637
    },
    {
        "content": "<p>Like, <code>vec![0; 128]</code> uses <code>Alloc::alloc_zeroed</code></p>",
        "id": 180244660,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573229663
    },
    {
        "content": "<p><code>Vec::from_raw_parts</code> works</p>",
        "id": 180244686,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573229687
    },
    {
        "content": "<p>sure, so why can't the public use alloc zeroed with the initial vec too</p>",
        "id": 180244708,
        "sender_full_name": "Lokathor",
        "timestamp": 1573229703
    },
    {
        "content": "<p>They can, <code>Vec::from_raw_parts</code> allows that</p>",
        "id": 180244728,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573229717
    },
    {
        "content": "<p>What problem does it motivate adding an extra API for solving this particular problem only, when we have like 3 ways to solve it ?</p>",
        "id": 180244760,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573229742
    },
    {
        "content": "<p>from_raw_parts is a degenerate fallback for when the type authors haven't had time to give you enough good stuff</p>",
        "id": 180244772,
        "sender_full_name": "Lokathor",
        "timestamp": 1573229748
    },
    {
        "content": "<p><code>Vec&lt;NonZeroU8&gt;::with_capacity_zeroed</code> makes no sense</p>",
        "id": 180244874,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573229799
    },
    {
        "content": "<p>surr</p>",
        "id": 180244888,
        "sender_full_name": "Lokathor",
        "timestamp": 1573229808
    },
    {
        "content": "<p>i agree</p>",
        "id": 180244895,
        "sender_full_name": "Lokathor",
        "timestamp": 1573229811
    },
    {
        "content": "<p>if you want the <code>vec![0; N]</code> optimization, there are a billion different ways to allow you to use that</p>",
        "id": 180244928,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573229830
    },
    {
        "content": "<p>but one needs to know which problem precisely you have that warrants it to choose the right one</p>",
        "id": 180244952,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573229846
    },
    {
        "content": "<p>well, this is just one method</p>",
        "id": 180244967,
        "sender_full_name": "Lokathor",
        "timestamp": 1573229859
    },
    {
        "content": "<p>and people will live without it</p>",
        "id": 180244978,
        "sender_full_name": "Lokathor",
        "timestamp": 1573229865
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216785\">@Tim Diekmann</span> had the problem as well, so apparently there are enough people running into this issue</p>",
        "id": 180245040,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573229883
    },
    {
        "content": "<p>which means that solving it might be worth doing</p>",
        "id": 180245068,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573229902
    },
    {
        "content": "<p>personally? I avoid using the vec macro</p>",
        "id": 180245077,
        "sender_full_name": "Lokathor",
        "timestamp": 1573229909
    },
    {
        "content": "<p>always i avoid it</p>",
        "id": 180245081,
        "sender_full_name": "Lokathor",
        "timestamp": 1573229913
    },
    {
        "content": "<p>if i see i used it i usually go remove it later</p>",
        "id": 180245091,
        "sender_full_name": "Lokathor",
        "timestamp": 1573229923
    },
    {
        "content": "<p><code>let mut x: Vec::new(); x.resize(0, 42);</code> uses <code>Alloc::alloc_zeroed</code> as well</p>",
        "id": 180245146,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573229973
    },
    {
        "content": "<p>IIRC</p>",
        "id": 180245158,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573229981
    },
    {
        "content": "<p>there is a trait that you can implement for types for which a particular value has a more efficient allocation pattern for bulk allocations</p>",
        "id": 180245242,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573230007
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/master/src/liballoc/vec.rs#L1698\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/liballoc/vec.rs#L1698\">https://github.com/rust-lang/rust/blob/master/src/liballoc/vec.rs#L1698</a></p>",
        "id": 180245443,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573230142
    },
    {
        "content": "<p>You can specialize it in your own crate for your own types</p>",
        "id": 180245454,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573230153
    },
    {
        "content": "<p>A dang, it's private, maybe it should be public</p>",
        "id": 180245473,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573230177
    },
    {
        "content": "<p>the standard library has long needed a ZeroedSafe trait</p>",
        "id": 180246369,
        "sender_full_name": "Lokathor",
        "timestamp": 1573230759
    },
    {
        "content": "<p>it's so simple that no one can agree on doing it</p>",
        "id": 180246384,
        "sender_full_name": "Lokathor",
        "timestamp": 1573230771
    },
    {
        "content": "<p>people want to use it to initialize statics, and that requires it be a const fn</p>",
        "id": 180247177,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573231207
    },
    {
        "content": "<p>but const fns are not supported in traits</p>",
        "id": 180247192,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573231217
    },
    {
        "content": "<p>so it isn't that simple</p>",
        "id": 180247260,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573231255
    },
    {
        "content": "<p>(but yeah, could be done with enough magic, e.g. , <code>const fn mem::zeroed_safe&lt;T: ZeroedSafe&gt;() -&gt; T</code> that's an intrinsic or similar and making <code>ZeroedSafe</code> an <code>auto trait</code>, etc.)</p>",
        "id": 180247356,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573231309
    },
    {
        "content": "<p>The problem is that zeroing the memory when allocating with a <code>Vec</code> is pointless if you are not going to exploit it later, e.g., by using <code>Vec::set_len</code></p>",
        "id": 180247477,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573231367
    },
    {
        "content": "<p>and then there is the difference in whether you want to always exploit it, so every reallocation should zero memory</p>",
        "id": 180247506,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573231387
    },
    {
        "content": "<p>and when you only want to exploit it once at the beginning</p>",
        "id": 180247519,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573231395
    },
    {
        "content": "<p>I personally think that we should have better support for <code>Box&lt;[T]&gt;</code>, better conversions from/to <code>Vec&lt;T&gt;</code> and <code>Box&lt;[T]&gt;</code>, and better support for <code>T: ZeroedSafe</code>, and with that, you get this for free:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// ZeroedSafe due to the auto trait</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">vec</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">Foo</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Box</span>::<span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">Foo</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">).</span><span class=\"n\">into</span><span class=\"p\">();</span><span class=\"w\"></span>\n</pre></div>",
        "id": 180247925,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573231607
    },
    {
        "content": "<p><code>Box::array</code> can just do the same optimization that <code>Vec</code> internally does, if <code>Foo: ZeroedSafe</code> and if the value passed is all zeros, then just use <code>A::alloc_zeroed</code>.</p>",
        "id": 180248079,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573231689
    },
    {
        "content": "<p>And well <code>vec![Foo(0); N]</code> would just expand to that and it would \"just work\"</p>",
        "id": 180248172,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573231752
    },
    {
        "content": "<p>1) it would have no methods<br>\n2) if zeroed isn't const that's an absolute failure of the standard library</p>",
        "id": 180248973,
        "sender_full_name": "Lokathor",
        "timestamp": 1573232202
    },
    {
        "content": "<p>the biggest problem is that while the vec![0; 50] version will happen to do what I want, it's completely opaque that something special is happening compared to my performance compared to vec![2; 50]</p>",
        "id": 180249076,
        "sender_full_name": "Lokathor",
        "timestamp": 1573232273
    },
    {
        "content": "<p>rather, i am well aware that zeroed isn't currently const, but if they refuse to make it const that's a total failure state for the library to end up in.</p>",
        "id": 180249515,
        "sender_full_name": "Lokathor",
        "timestamp": 1573232474
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> <code>mem::zeroed</code> isn't const fn today</p>",
        "id": 180253317,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573234841
    },
    {
        "content": "<p>ah yep</p>",
        "id": 180253343,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573234860
    },
    {
        "content": "<blockquote>\n<p>it's completely opaque that something special is happening compared to my performance compared to vec![2; 50]</p>\n</blockquote>\n<p>Why should people have to write different code to get the optimization ?</p>",
        "id": 180253480,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573234947
    },
    {
        "content": "<p>If instead of a macro it would be a method <code>Vec::new_with(val:T, size: usize,)</code> the behavior would be identical</p>",
        "id": 180253524,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573234989
    },
    {
        "content": "<p><code>Vec::new_with(0, 50)</code> would be \"fast\" and <code>Vec::new_with(42, 50)</code> would be \"slow\"</p>",
        "id": 180253569,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573235034
    },
    {
        "content": "<p>I'm not sure what alternative you are thinking of instead</p>",
        "id": 180253654,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573235082
    },
    {
        "content": "<p>Either way, given an API that does the fast thing, adding a second API to do the same thing would not add as much value</p>",
        "id": 180253716,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573235131
    },
    {
        "content": "<p>Also, the macro API solves many more problems than a method based API</p>",
        "id": 180253957,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573235301
    },
    {
        "content": "<p>So currently we provide <code>vec![Foo; N]</code> that does what you want for some types, and also <code>Vec::from_raw_parts</code> that lets you exploit any feature that whatever allocator you are using supports. Supporting <code>vec![Foo; N]</code> for more types feels simpler to me from an extension point-of-view.</p>",
        "id": 180254220,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573235466
    },
    {
        "content": "<p>using the macro or a method should do the optimization if it can obviously</p>",
        "id": 180254373,
        "sender_full_name": "Lokathor",
        "timestamp": 1573235580
    },
    {
        "content": "<p>but having a method that _forces_ the optimization and the expense of being less general is good</p>",
        "id": 180254407,
        "sender_full_name": "Lokathor",
        "timestamp": 1573235603
    },
    {
        "content": "<p>then you know that if you change the design to the point where you can't use the old method, you might be giving up some performance</p>",
        "id": 180254443,
        "sender_full_name": "Lokathor",
        "timestamp": 1573235636
    },
    {
        "content": "<p>it should _not_ be the case that new_with(5) and new_with(0) are both slow, that's stupid</p>",
        "id": 180254517,
        "sender_full_name": "Lokathor",
        "timestamp": 1573235671
    },
    {
        "content": "<p>but if you care to go get that optimization you should know when you just made yourself ineligible for it later (possibly on accident)</p>",
        "id": 180254571,
        "sender_full_name": "Lokathor",
        "timestamp": 1573235709
    },
    {
        "content": "<p>make a concrete proposal, but adding a new API has a cost, and it's not obvious to me that the cost is worth it</p>",
        "id": 180256059,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573236812
    },
    {
        "content": "<p>something like <code>fn zeroed_vec&lt;T: Zeroable&gt;(size: usize) -&gt; Vec&lt;T&gt; { vec![T::zeroed(); size] }</code> does the trick</p>",
        "id": 180256145,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573236869
    },
    {
        "content": "<p>(it generates a compilation time error if <code>T</code> happens to not be <code>Zeroable</code>)</p>",
        "id": 180256297,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573236977
    },
    {
        "content": "<p>also, none of this guarantees the optimization</p>",
        "id": 180256375,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573237044
    },
    {
        "content": "<p>if your allocator dispatches the <code>Alloc::alloc_zeroed</code> method to <code>Alloc::alloc</code> + manual zeroing, you won't get it</p>",
        "id": 180256393,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573237075
    },
    {
        "content": "<p>If you really want to be sure to get the optimization, using <code>Vec::from_raw_parts</code> while calling the allocator directly is probably the only choice</p>",
        "id": 180256466,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573237107
    },
    {
        "content": "<p>\"an API\" makes it sound huge, but really it's one method</p>",
        "id": 180257033,
        "sender_full_name": "Lokathor",
        "timestamp": 1573237478
    },
    {
        "content": "<p>Another choice would be an extension trait. Simple and not needed in std/alloc itself</p>",
        "id": 180259270,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1573238892
    },
    {
        "content": "<blockquote>\n<p>\"an API\" makes it sound huge, but really it's one method</p>\n</blockquote>\n<p>Its' just one of many methods one might add. For example, <code>Vec::new()</code> is a const fn, so you might want to use <code>Vec::new()</code> to get a Vec, and then use <code>Vec::resize_zeroed</code> in the first allocation.</p>",
        "id": 180611198,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573640893
    },
    {
        "content": "<p>And so on, e.g., if you are using the <code>Vec</code> to implement a <code>Deque</code>, and want to pass the [tail, head] \"uninitialized\" slice to, e.g., the <code>Bytes</code> crate, then you want <code>[tail, head]</code> to always be zeroed, so you probably want to call <code>Vec::push_zeroed</code> within the <code>Deque</code> to implement <code>Deque::push_back</code>, etc.</p>",
        "id": 180611285,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573640979
    },
    {
        "content": "<blockquote>\n<p>Another choice would be an extension trait. Simple and not needed in std/alloc itself</p>\n</blockquote>\n<p>That's an option, but for some users adding a crate just to obtain an extension trait for this is probably overkill.</p>",
        "id": 180611411,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573641073
    }
]