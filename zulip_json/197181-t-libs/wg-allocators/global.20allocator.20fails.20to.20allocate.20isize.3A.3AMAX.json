[
    {
        "content": "<p>I added the liballoc tests to alloc-wg in <a href=\"https://github.com/TimDiekmann/alloc-wg/pull/10\" target=\"_blank\" title=\"https://github.com/TimDiekmann/alloc-wg/pull/10\">this PR</a>. The function <code>test_try_reserve</code> fails as the global allocator is not able to allocate <code>isize::MAX</code> bytes. Does the compiler use another allocator for testing liballoc? Or do I oversee something?</p>",
        "id": 181570627,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1574361287
    },
    {
        "content": "<p>At the current commit, it panics at <a href=\"https://github.com/TimDiekmann/alloc-wg/pull/10/files#diff-52a6f43527c89730431b8266b32d6edbR1132\" target=\"_blank\" title=\"https://github.com/TimDiekmann/alloc-wg/pull/10/files#diff-52a6f43527c89730431b8266b32d6edbR1132\">line 1132-1134</a></p>",
        "id": 181570779,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1574361365
    },
    {
        "content": "<p>Precisely It calls </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#[stable(feature = </span><span class=\"s\">&quot;global_alloc&quot;</span><span class=\"cp\">, since = </span><span class=\"s\">&quot;1.28.0&quot;</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"cp\">#[inline]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">alloc</span><span class=\"p\">(</span><span class=\"n\">layout</span>: <span class=\"nc\">Layout</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">__rust_alloc</span><span class=\"p\">(</span><span class=\"n\">layout</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">layout</span><span class=\"p\">.</span><span class=\"n\">align</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>with</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">core</span>::<span class=\"n\">alloc</span>::<span class=\"n\">Layout</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">size</span>: <span class=\"mi\">9223372036854775807</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">align</span>: <span class=\"mi\">1</span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>and returns <code>NULL</code></p>",
        "id": 181570994,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1574361499
    },
    {
        "content": "<p>I <a href=\"https://www.wolframalpha.com/input/?i=9223372036854775807+in+hex\" target=\"_blank\" title=\"https://www.wolframalpha.com/input/?i=9223372036854775807+in+hex\">double checked</a> the number, it's <code>isize::MAX</code>: <code>0x7fff_ffff_ffff_ffff</code></p>",
        "id": 181571094,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1574361565
    },
    {
        "content": "<p>Nevermind, it's a result of <code>AbortAlloc</code>.</p>",
        "id": 181571548,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1574361865
    },
    {
        "content": "<p>I'll open a new topic regarding <code>AbortAlloc</code> in combination with <code>try_reserve</code>.</p>",
        "id": 181572193,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1574362274
    },
    {
        "content": "<p>I don't understand the context behind this test. Why would they try to allocate so much as a test?</p>",
        "id": 181599580,
        "sender_full_name": "Erich Gubler",
        "timestamp": 1574382604
    },
    {
        "content": "<p>It's supposed to fail. Always. That's what is being tested.</p>",
        "id": 181599772,
        "sender_full_name": "Mike Hommey",
        "timestamp": 1574382817
    },
    {
        "content": "<p>It must not fail with a <code>CapacityOverflow</code>. Interesting for 16/32 bit platforms</p>",
        "id": 181609131,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1574396634
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216785\">@Tim Diekmann</span> are you on Windows ?</p>",
        "id": 182122902,
        "sender_full_name": "gnzlbg",
        "timestamp": 1574960036
    },
    {
        "content": "<p>This test has no problems if you have a system with overcommit with enough memory but small enough pointers</p>",
        "id": 182122948,
        "sender_full_name": "gnzlbg",
        "timestamp": 1574960047
    },
    {
        "content": "<p>You might want to check on which OSes does libstd run this test</p>",
        "id": 182122974,
        "sender_full_name": "gnzlbg",
        "timestamp": 1574960093
    },
    {
        "content": "<p>e.g., I expect this test to \"fail by not failing\" on, e.g., <code>x86_64-unknown-linux-gnu-x32</code></p>",
        "id": 182123132,
        "sender_full_name": "gnzlbg",
        "timestamp": 1574960270
    },
    {
        "content": "<p>where isize::MAX bytes is 4 Gbs, but that's a reasonable allocation on the target</p>",
        "id": 182123191,
        "sender_full_name": "gnzlbg",
        "timestamp": 1574960301
    },
    {
        "content": "<blockquote>\n<p>It must not fail with a CapacityOverflow. I</p>\n</blockquote>\n<p>If by this you mean that this test must pass, and that this only happens if the <code>try_reserve</code> functions return <code>CapacityOverflow</code>, then that's correct - that's the intent of the test.</p>",
        "id": 182123262,
        "sender_full_name": "gnzlbg",
        "timestamp": 1574960399
    }
]