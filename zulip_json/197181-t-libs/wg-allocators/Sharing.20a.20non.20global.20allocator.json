[
    {
        "content": "<p>Will allocator traits/APIs support stuff like having an allocator instance, and having multiple containers that all use that same allocator instance? (Like having 3 vecs all using a shared local stack allocator)?</p>",
        "id": 197009665,
        "sender_full_name": "Nick12",
        "timestamp": 1589054365
    },
    {
        "content": "<p>Yes, this is possible when your allocator can be shared (i.e. Uses a Cell or Atomics). Then <code>AllocRef</code> can be implemented on <code>&amp;MyAlloc</code></p>",
        "id": 197009746,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1589054502
    },
    {
        "content": "<p>I think I get what you mean. Thanks! Are there any places that have examples of using the unstable non global allocator stuff? Like what a container API would look like</p>",
        "id": 197009877,
        "sender_full_name": "Nick12",
        "timestamp": 1589054691
    },
    {
        "content": "<p>Oh I see some interesting related discussion to my earlier question here <a href=\"https://github.com/rust-lang/wg-allocators/issues/55\" title=\"https://github.com/rust-lang/wg-allocators/issues/55\">https://github.com/rust-lang/wg-allocators/issues/55</a></p>",
        "id": 197010020,
        "sender_full_name": "Nick12",
        "timestamp": 1589054895
    },
    {
        "content": "<p>Would the changes mentioned in that issue mean that just implementing AllocRef for MyAlloc would be enough? (Instead of for &amp;MyAlloc)</p>",
        "id": 197010024,
        "sender_full_name": "Nick12",
        "timestamp": 1589054918
    },
    {
        "content": "<p>I'm currently not at my PC but you might want to take a look at the <code>alloc-wg</code> crate and the <code>alloc-compose</code> crate. Disclaimer: both are from me and at an experimental state but you should be able to get the idea how the trait is designed.</p>\n<p>I'll take a look at the issue tomorrow :)</p>",
        "id": 197011584,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1589056471
    },
    {
        "content": "<p>Those are exactly what I was looking for, ty</p>",
        "id": 197011916,
        "sender_full_name": "Nick12",
        "timestamp": 1589056955
    },
    {
        "content": "<p>I'm currently not at my PC but you might want to take a look at the <code>alloc-wg</code> crate and the <code>alloc-compose</code> crate. Disclaimer: both are from me and at an experimental state but you should be able to get the idea how the trait is designed.</p>\n<p>I'll take a look at the issue tomorrow :)</p>",
        "id": 197012079,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1589057209
    },
    {
        "content": "<p>Is runtime dispatch considered by any of those? I feel like ergonomics of generics all over for allocators for code using containers might be annoying. Or would it be fine to just use an impl for a dyn Alloc?</p>",
        "id": 197012092,
        "sender_full_name": "Nick12",
        "timestamp": 1589057245
    },
    {
        "content": "<p>You are talking about <code>alloc-compose</code>? You could still use aliases for nested allocators.</p>",
        "id": 197041921,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1589099476
    },
    {
        "content": "<p>I was thinking more like, say you're writing a function or a type that needs to use a Vec, it would probably be less painful to not have to be generic over an A: AllocRef, and it would also not need monomorphization (Which leads to compile time and machine code size bloat). Is there a way to do that?</p>",
        "id": 197163266,
        "sender_full_name": "Nick12",
        "timestamp": 1589211318
    },
    {
        "content": "<p>No. If you don't want to modify the vector you should pass a slice anyway, but if you want to push elements, for example, it is required, that the vector knows, how to allocate additional space. Currently, there is no implementation for <code>Box&lt;A: AllocRef&gt;</code> or similar, but those will probably be added later.</p>",
        "id": 197163603,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1589211471
    },
    {
        "content": "<p>Yes but I thought you could have some kind of runtime dispatch (Like a Box&lt;dyn AllocRef&gt;) so that you could handle the same non generic function Vec's that use different allocators</p>",
        "id": 197187897,
        "sender_full_name": "Nick12",
        "timestamp": 1589222894
    },
    {
        "content": "<p>the cppcon andrei talk linked in the alloc-compose docs was great</p>",
        "id": 197188140,
        "sender_full_name": "Nick12",
        "timestamp": 1589223008
    },
    {
        "content": "<p>The short of it is that some sort of <code>DynAlloc</code> definitely is needed. Right now, that trait is <code>GlobalAlloc</code>. Note that nothing about the <code>GlobalAlloc</code> trait _requires_ the allocator be used as a global allocator. Instead, assuming we have <code>impl AllocRef for &amp;'_ dyn GlobalAlloc</code>, you could use <code>Box&lt;T, &amp;dyn GlobalAlloc&gt;</code> just fine. (Or <code>&amp;dyn DynAlloc</code> if we decide to replace <code>GlobalAlloc</code> wholesale, or <code>&amp;dyn AllocRef</code> if <code>AllocRef</code> ends up being object-safe.)</p>",
        "id": 197501092,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1589424098
    }
]