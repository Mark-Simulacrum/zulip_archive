[
    {
        "content": "<p>(I have originally asked this in <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/GlobalAlloc.3A.3Arealloc.20guarantees\">Unsafe Code Guidelines group</a>; Ralf suggested to try asking here.)</p>\n<p>Hello, I have a question about the guarantees of  <a href=\"https://doc.rust-lang.org/alloc/alloc/trait.GlobalAlloc.html#method.realloc\">GlobalAlloc::realloc</a>: what is guaranteed about the <strong>content</strong> of the memory block to which the pointer is returned if that pointer is not <code>null</code>?</p>\n<p>I would assume that the returned memory block has the contents of the old block at its “front” because this is needed for the <code>Vec</code> to work. However, I do not see this explicitly written in the documentation. Did I miss something? Are there any reasons not to be explicit on to what extent the <code>realloc</code> preserves the memory content?</p>",
        "id": 228063007,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1614437928
    },
    {
        "content": "<p>That is the entire point of realloc - the documentation should just be tweaked to say that more explicitly.</p>",
        "id": 228063805,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1614438760
    },
    {
        "content": "<p>Here is my attempt to tweak the documentation: <a href=\"https://github.com/rust-lang/rust/pull/82628\">https://github.com/rust-lang/rust/pull/82628</a></p>",
        "id": 228159483,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1614549119
    }
]